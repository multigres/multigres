// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
)

// Parser state for handling complex grammar constructs
var parserState struct {
	// Future parser state variables can be added here
}

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:34
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string
	bval    bool
	byt     byte
	rune    rune

	// AST nodes
	node     ast.Node
	stmt     ast.Stmt
	stmtList []ast.Stmt
	list     *ast.NodeList

	// Specific AST node types
	into          *ast.IntoClause
	onconflict    *ast.OnConflictClause
	createStmt    *ast.CreateStmt
	indexStmt     *ast.IndexStmt
	alterStmt     *ast.AlterTableStmt
	dropStmt      *ast.DropStmt
	columnDef     *ast.ColumnDef
	constraint    *ast.Constraint
	indexElem     *ast.IndexElem
	alterCmd      *ast.AlterTableCmd
	with          *ast.WithClause
	rangevar      *ast.RangeVar
	objType       ast.ObjectType
	dropBehav     ast.DropBehavior
	typnam        *ast.TypeName
	partspec      *ast.PartitionSpec
	partboundspec *ast.PartitionBoundSpec
	oncommit      ast.OnCommitAction
	defelt        *ast.DefElem
	target        *ast.ResTarget            // For select targets, insert columns
	alias         *ast.Alias                // For table and column aliases
	jtype         ast.JoinType              // For join type specifications
	jexpr         *ast.JoinExpr             // For joined table expressions
	keyaction     *ast.KeyAction            // For foreign key actions
	keyactions    *ast.KeyActions           // For foreign key action sets
	funparam      *ast.FunctionParameter    // For function parameters
	funparammode  ast.FunctionParameterMode // For parameter modes (IN/OUT/INOUT/VARIADIC)
	vsetstmt      *ast.VariableSetStmt      // For SET/RESET statements
	rolespec      *ast.RoleSpec
	objwithargs   *ast.ObjectWithArgs

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const UNKNOWN = 57392
const WHEN = 57393
const IS = 57394
const ISNULL = 57395
const NOTNULL = 57396
const AT = 57397
const TIME = 57398
const ZONE = 57399
const LOCAL = 57400
const SYMMETRIC = 57401
const ASYMMETRIC = 57402
const TO = 57403
const OPERATOR = 57404
const SELECT = 57405
const FROM = 57406
const WHERE = 57407
const ONLY = 57408
const TABLE = 57409
const LIMIT = 57410
const OFFSET = 57411
const BY = 57412
const GROUP_P = 57413
const HAVING = 57414
const INTO = 57415
const ON = 57416
const JOIN = 57417
const INNER_P = 57418
const LEFT = 57419
const RIGHT = 57420
const FULL = 57421
const OUTER_P = 57422
const CROSS = 57423
const NATURAL = 57424
const USING = 57425
const RECURSIVE = 57426
const MATERIALIZED = 57427
const LATERAL = 57428
const VALUES = 57429
const SEARCH = 57430
const BREADTH = 57431
const DEPTH = 57432
const CYCLE = 57433
const FIRST_P = 57434
const LAST_P = 57435
const SET = 57436
const ASC = 57437
const DESC = 57438
const INSERT = 57439
const UPDATE = 57440
const DELETE_P = 57441
const MERGE = 57442
const RETURNING = 57443
const CONFLICT = 57444
const OVERRIDING = 57445
const USER = 57446
const SYSTEM_P = 57447
const MATCHED = 57448
const THEN = 57449
const SOURCE = 57450
const TARGET = 57451
const DO = 57452
const NOTHING = 57453
const COPY = 57454
const PROGRAM = 57455
const STDIN = 57456
const STDOUT = 57457
const BINARY = 57458
const FREEZE = 57459
const CONSTRAINT = 57460
const VERBOSE = 57461
const ANALYZE = 57462
const CURRENT_P = 57463
const CURSOR = 57464
const OF = 57465
const COLUMNS = 57466
const ORDINALITY = 57467
const XMLTABLE = 57468
const JSON_TABLE = 57469
const ROWS = 57470
const PATH = 57471
const PASSING = 57472
const FOR = 57473
const NESTED = 57474
const REF_P = 57475
const XMLNAMESPACES = 57476
const ARRAY = 57477
const ERROR = 57478
const ERROR_P = 57479
const EMPTY = 57480
const EMPTY_P = 57481
const OBJECT_P = 57482
const WRAPPER = 57483
const CONDITIONAL = 57484
const UNCONDITIONAL = 57485
const QUOTES = 57486
const OMIT = 57487
const KEEP = 57488
const SCALAR = 57489
const STRING_P = 57490
const ENCODING = 57491
const DELIMITER = 57492
const DELIMITERS = 57493
const HEADER_P = 57494
const QUOTE = 57495
const FORCE = 57496
const CSV = 57497
const VALUE_P = 57498
const JSON_QUERY = 57499
const JSON_VALUE = 57500
const JSON_SERIALIZE = 57501
const JSON_OBJECT = 57502
const JSON_ARRAY = 57503
const JSON_OBJECTAGG = 57504
const JSON_ARRAYAGG = 57505
const JSON_EXISTS = 57506
const JSON_SCALAR = 57507
const FORMAT = 57508
const JSON = 57509
const UTF8 = 57510
const WITHOUT = 57511
const BIT = 57512
const NUMERIC = 57513
const INTEGER = 57514
const SMALLINT = 57515
const BIGINT = 57516
const REAL = 57517
const FLOAT_P = 57518
const DOUBLE_P = 57519
const PRECISION = 57520
const CHARACTER = 57521
const CHAR_P = 57522
const VARCHAR = 57523
const NATIONAL = 57524
const NCHAR = 57525
const VARYING = 57526
const TIMESTAMP = 57527
const INTERVAL = 57528
const INT_P = 57529
const DECIMAL_P = 57530
const DEC = 57531
const BOOLEAN_P = 57532
const VARIADIC = 57533
const ABORT_P = 57534
const ABSENT = 57535
const ABSOLUTE_P = 57536
const ACCESS = 57537
const ACTION = 57538
const ADD_P = 57539
const ADMIN = 57540
const AFTER = 57541
const AGGREGATE = 57542
const ALSO = 57543
const ALWAYS = 57544
const ANALYSE = 57545
const ASENSITIVE = 57546
const ASSERTION = 57547
const ASSIGNMENT = 57548
const ATOMIC = 57549
const ATTACH = 57550
const ATTRIBUTE = 57551
const AUTHORIZATION = 57552
const BACKWARD = 57553
const BEFORE = 57554
const BEGIN_P = 57555
const CACHE = 57556
const CALL = 57557
const CALLED = 57558
const CASCADED = 57559
const CATALOG_P = 57560
const CHAIN = 57561
const CHARACTERISTICS = 57562
const CHECKPOINT = 57563
const CLASS = 57564
const CLOSE = 57565
const CLUSTER = 57566
const COALESCE = 57567
const COLLATION = 57568
const COMMENT = 57569
const COMMENTS = 57570
const COMMIT = 57571
const COMMITTED = 57572
const COMPRESSION = 57573
const CONFIGURATION = 57574
const CONNECTION = 57575
const CONSTRAINTS = 57576
const CONTENT_P = 57577
const CONTINUE_P = 57578
const CONVERSION_P = 57579
const COST = 57580
const CUBE = 57581
const CURRENT_CATALOG = 57582
const CURRENT_DATE = 57583
const CURRENT_ROLE = 57584
const CURRENT_SCHEMA = 57585
const CURRENT_TIME = 57586
const CURRENT_TIMESTAMP = 57587
const CURRENT_USER = 57588
const DATA_P = 57589
const DATABASE = 57590
const DAY_P = 57591
const DEALLOCATE = 57592
const DECLARE = 57593
const DEFAULTS = 57594
const DEFERRABLE = 57595
const DEFERRED = 57596
const DEFINER = 57597
const DEPENDS = 57598
const DETACH = 57599
const DICTIONARY = 57600
const DISABLE_P = 57601
const DISCARD = 57602
const DOCUMENT_P = 57603
const DOMAIN_P = 57604
const EACH = 57605
const ELSE = 57606
const ENABLE_P = 57607
const ENCRYPTED = 57608
const END_P = 57609
const ENUM_P = 57610
const EVENT = 57611
const EXCEPT = 57612
const EXCLUDE = 57613
const EXCLUDING = 57614
const EXCLUSIVE = 57615
const EXECUTE = 57616
const EXPLAIN = 57617
const EXPRESSION = 57618
const EXTENSION = 57619
const EXTERNAL = 57620
const EXTRACT = 57621
const FAMILY = 57622
const FETCH = 57623
const FILTER = 57624
const FINALIZE = 57625
const FOLLOWING = 57626
const FOREIGN = 57627
const FORWARD = 57628
const FUNCTION = 57629
const FUNCTIONS = 57630
const GENERATED = 57631
const GLOBAL = 57632
const GRANT = 57633
const GRANTED = 57634
const GREATEST = 57635
const GROUPING = 57636
const GROUPS = 57637
const HANDLER = 57638
const HOLD = 57639
const HOUR_P = 57640
const IDENTITY_P = 57641
const IMMEDIATE = 57642
const IMMUTABLE = 57643
const IMPLICIT_P = 57644
const IMPORT_P = 57645
const INCLUDE = 57646
const INCLUDING = 57647
const INCREMENT = 57648
const INDENT = 57649
const INDEX = 57650
const INDEXES = 57651
const INHERIT = 57652
const INHERITS = 57653
const INITIALLY = 57654
const INLINE_P = 57655
const INPUT_P = 57656
const INSENSITIVE = 57657
const INSTEAD = 57658
const INTERSECT = 57659
const INVOKER = 57660
const ISOLATION = 57661
const KEYS = 57662
const LABEL = 57663
const LANGUAGE = 57664
const LARGE_P = 57665
const LATERAL_P = 57666
const LEAKPROOF = 57667
const LEAST = 57668
const LEADING = 57669
const LEVEL = 57670
const LISTEN = 57671
const LOAD = 57672
const LOCALTIME = 57673
const LOCALTIMESTAMP = 57674
const LOCATION = 57675
const LOCK_P = 57676
const LOCKED = 57677
const LOGGED = 57678
const MAPPING = 57679
const MATCH = 57680
const MAXVALUE = 57681
const MERGE_ACTION = 57682
const METHOD = 57683
const MINUTE_P = 57684
const MINVALUE = 57685
const MODE = 57686
const MONTH_P = 57687
const MOVE = 57688
const NAME_P = 57689
const NAMES = 57690
const NEW = 57691
const NEXT = 57692
const NFC = 57693
const NFD = 57694
const NFKC = 57695
const NFKD = 57696
const NO = 57697
const NONE = 57698
const NORMALIZE = 57699
const NORMALIZED = 57700
const NOTIFY = 57701
const NOWAIT = 57702
const NULLIF = 57703
const OUT_P = 57704
const OVERLAY = 57705
const OVERLAPS = 57706
const OWNED = 57707
const OWNER = 57708
const PARALLEL = 57709
const PARAMETER = 57710
const PARSER = 57711
const PARTIAL = 57712
const PARTITION = 57713
const PASSWORD = 57714
const PLACING = 57715
const PLAN = 57716
const PLANS = 57717
const POLICY = 57718
const POSITION = 57719
const PRECEDING = 57720
const PREPARE = 57721
const PREPARED = 57722
const PRESERVE = 57723
const PRIMARY = 57724
const PRIOR = 57725
const PRIVILEGES = 57726
const PROCEDURAL = 57727
const PROCEDURE = 57728
const PROCEDURES = 57729
const PUBLICATION = 57730
const RANGE = 57731
const READ = 57732
const REASSIGN = 57733
const RECHECK = 57734
const REFERENCES = 57735
const REFERENCING = 57736
const REFRESH = 57737
const REINDEX = 57738
const RELATIVE_P = 57739
const RELEASE = 57740
const RENAME = 57741
const REPEATABLE = 57742
const REPLICA = 57743
const RESET = 57744
const RESTART = 57745
const RETURN = 57746
const RETURNS = 57747
const REVOKE = 57748
const ROLE = 57749
const ROLLBACK = 57750
const ROLLUP = 57751
const ROUTINE = 57752
const ROUTINES = 57753
const ROW = 57754
const RULE = 57755
const SAVEPOINT = 57756
const SCHEMA = 57757
const SCHEMAS = 57758
const SCROLL = 57759
const SECOND_P = 57760
const SECURITY = 57761
const SEQUENCE = 57762
const SEQUENCES = 57763
const SERIALIZABLE = 57764
const SERVER = 57765
const SESSION = 57766
const SESSION_USER = 57767
const SETS = 57768
const SETOF = 57769
const SHARE = 57770
const SHOW = 57771
const SIMPLE = 57772
const SKIP = 57773
const SNAPSHOT = 57774
const SOME = 57775
const SQL_P = 57776
const STABLE = 57777
const STANDALONE_P = 57778
const START = 57779
const STATEMENT = 57780
const STATISTICS = 57781
const STORAGE = 57782
const STORED = 57783
const STRICT_P = 57784
const STRIP_P = 57785
const SUBSCRIPTION = 57786
const SUBSTRING = 57787
const SUPPORT = 57788
const SYSID = 57789
const SYSTEM_USER = 57790
const TABLES = 57791
const TABLESPACE = 57792
const TABLESAMPLE = 57793
const TEMP = 57794
const TEMPLATE = 57795
const TEMPORARY = 57796
const TEXT_P = 57797
const TIES = 57798
const TRAILING = 57799
const TRANSACTION = 57800
const TRANSFORM = 57801
const TREAT = 57802
const TRIGGER = 57803
const TRIM = 57804
const TRUNCATE = 57805
const TRUSTED = 57806
const TYPE_P = 57807
const TYPES_P = 57808
const UESCAPE = 57809
const UNBOUNDED = 57810
const UNCOMMITTED = 57811
const UNENCRYPTED = 57812
const UNION = 57813
const UNIQUE = 57814
const UNLISTEN = 57815
const UNLOGGED = 57816
const UNTIL = 57817
const VACUUM = 57818
const VALID = 57819
const VALIDATE = 57820
const VALIDATOR = 57821
const VERSION_P = 57822
const VIEW = 57823
const VIEWS = 57824
const VOLATILE = 57825
const WHITESPACE_P = 57826
const WINDOW = 57827
const WITHIN = 57828
const WORK = 57829
const WRITE = 57830
const XML_P = 57831
const XMLATTRIBUTES = 57832
const XMLCONCAT = 57833
const XMLELEMENT = 57834
const XMLEXISTS = 57835
const XMLFOREST = 57836
const XMLPARSE = 57837
const XMLPI = 57838
const XMLROOT = 57839
const XMLSERIALIZE = 57840
const YEAR_P = 57841
const YES_P = 57842
const INOUT = 57843
const OTHERS = 57844
const OLD = 57845
const KEY = 57846
const OFF = 57847
const OIDS = 57848
const OPTION = 57849
const OPTIONS = 57850
const OVER = 57851
const ORDER = 57852
const ANY = 57853
const BOTH = 57854
const CAST = 57855
const CHECK = 57856
const COLUMN = 57857
const FORMAT_LA = 57858
const NOT_LA = 57859
const NULLS_LA = 57860
const WITH_LA = 57861
const WITHOUT_LA = 57862
const MODE_TYPE_NAME = 57863
const MODE_PLPGSQL_EXPR = 57864
const MODE_PLPGSQL_ASSIGN1 = 57865
const MODE_PLPGSQL_ASSIGN2 = 57866
const MODE_PLPGSQL_ASSIGN3 = 57867
const UMINUS = 57868

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"UNKNOWN",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"JOIN",
	"INNER_P",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER_P",
	"CROSS",
	"NATURAL",
	"USING",
	"RECURSIVE",
	"MATERIALIZED",
	"LATERAL",
	"VALUES",
	"SEARCH",
	"BREADTH",
	"DEPTH",
	"CYCLE",
	"FIRST_P",
	"LAST_P",
	"SET",
	"ASC",
	"DESC",
	"INSERT",
	"UPDATE",
	"DELETE_P",
	"MERGE",
	"RETURNING",
	"CONFLICT",
	"OVERRIDING",
	"USER",
	"SYSTEM_P",
	"MATCHED",
	"THEN",
	"SOURCE",
	"TARGET",
	"DO",
	"NOTHING",
	"COPY",
	"PROGRAM",
	"STDIN",
	"STDOUT",
	"BINARY",
	"FREEZE",
	"CONSTRAINT",
	"VERBOSE",
	"ANALYZE",
	"CURRENT_P",
	"CURSOR",
	"OF",
	"COLUMNS",
	"ORDINALITY",
	"XMLTABLE",
	"JSON_TABLE",
	"ROWS",
	"PATH",
	"PASSING",
	"FOR",
	"NESTED",
	"REF_P",
	"XMLNAMESPACES",
	"ARRAY",
	"ERROR",
	"ERROR_P",
	"EMPTY",
	"EMPTY_P",
	"OBJECT_P",
	"WRAPPER",
	"CONDITIONAL",
	"UNCONDITIONAL",
	"QUOTES",
	"OMIT",
	"KEEP",
	"SCALAR",
	"STRING_P",
	"ENCODING",
	"DELIMITER",
	"DELIMITERS",
	"HEADER_P",
	"QUOTE",
	"FORCE",
	"CSV",
	"VALUE_P",
	"JSON_QUERY",
	"JSON_VALUE",
	"JSON_SERIALIZE",
	"JSON_OBJECT",
	"JSON_ARRAY",
	"JSON_OBJECTAGG",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_SCALAR",
	"FORMAT",
	"JSON",
	"UTF8",
	"WITHOUT",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"ABORT_P",
	"ABSENT",
	"ABSOLUTE_P",
	"ACCESS",
	"ACTION",
	"ADD_P",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALSO",
	"ALWAYS",
	"ANALYSE",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"BACKWARD",
	"BEFORE",
	"BEGIN_P",
	"CACHE",
	"CALL",
	"CALLED",
	"CASCADED",
	"CATALOG_P",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATION",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPRESSION",
	"CONFIGURATION",
	"CONNECTION",
	"CONSTRAINTS",
	"CONTENT_P",
	"CONTINUE_P",
	"CONVERSION_P",
	"COST",
	"CUBE",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"DATA_P",
	"DATABASE",
	"DAY_P",
	"DEALLOCATE",
	"DECLARE",
	"DEFAULTS",
	"DEFERRABLE",
	"DEFERRED",
	"DEFINER",
	"DEPENDS",
	"DETACH",
	"DICTIONARY",
	"DISABLE_P",
	"DISCARD",
	"DOCUMENT_P",
	"DOMAIN_P",
	"EACH",
	"ELSE",
	"ENABLE_P",
	"ENCRYPTED",
	"END_P",
	"ENUM_P",
	"EVENT",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXCLUSIVE",
	"EXECUTE",
	"EXPLAIN",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"EXTRACT",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FINALIZE",
	"FOLLOWING",
	"FOREIGN",
	"FORWARD",
	"FUNCTION",
	"FUNCTIONS",
	"GENERATED",
	"GLOBAL",
	"GRANT",
	"GRANTED",
	"GREATEST",
	"GROUPING",
	"GROUPS",
	"HANDLER",
	"HOLD",
	"HOUR_P",
	"IDENTITY_P",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT_P",
	"IMPORT_P",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INDEX",
	"INDEXES",
	"INHERIT",
	"INHERITS",
	"INITIALLY",
	"INLINE_P",
	"INPUT_P",
	"INSENSITIVE",
	"INSTEAD",
	"INTERSECT",
	"INVOKER",
	"ISOLATION",
	"KEYS",
	"LABEL",
	"LANGUAGE",
	"LARGE_P",
	"LATERAL_P",
	"LEAKPROOF",
	"LEAST",
	"LEADING",
	"LEVEL",
	"LISTEN",
	"LOAD",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCATION",
	"LOCK_P",
	"LOCKED",
	"LOGGED",
	"MAPPING",
	"MATCH",
	"MAXVALUE",
	"MERGE_ACTION",
	"METHOD",
	"MINUTE_P",
	"MINVALUE",
	"MODE",
	"MONTH_P",
	"MOVE",
	"NAME_P",
	"NAMES",
	"NEW",
	"NEXT",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NO",
	"NONE",
	"NORMALIZE",
	"NORMALIZED",
	"NOTIFY",
	"NOWAIT",
	"NULLIF",
	"OUT_P",
	"OVERLAY",
	"OVERLAPS",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PARSER",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECEDING",
	"PREPARE",
	"PREPARED",
	"PRESERVE",
	"PRIMARY",
	"PRIOR",
	"PRIVILEGES",
	"PROCEDURAL",
	"PROCEDURE",
	"PROCEDURES",
	"PUBLICATION",
	"RANGE",
	"READ",
	"REASSIGN",
	"RECHECK",
	"REFERENCES",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE_P",
	"RELEASE",
	"RENAME",
	"REPEATABLE",
	"REPLICA",
	"RESET",
	"RESTART",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLE",
	"ROLLBACK",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"RULE",
	"SAVEPOINT",
	"SCHEMA",
	"SCHEMAS",
	"SCROLL",
	"SECOND_P",
	"SECURITY",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSION_USER",
	"SETS",
	"SETOF",
	"SHARE",
	"SHOW",
	"SIMPLE",
	"SKIP",
	"SNAPSHOT",
	"SOME",
	"SQL_P",
	"STABLE",
	"STANDALONE_P",
	"START",
	"STATEMENT",
	"STATISTICS",
	"STORAGE",
	"STORED",
	"STRICT_P",
	"STRIP_P",
	"SUBSCRIPTION",
	"SUBSTRING",
	"SUPPORT",
	"SYSID",
	"SYSTEM_USER",
	"TABLES",
	"TABLESPACE",
	"TABLESAMPLE",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TEXT_P",
	"TIES",
	"TRAILING",
	"TRANSACTION",
	"TRANSFORM",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUNCATE",
	"TRUSTED",
	"TYPE_P",
	"TYPES_P",
	"UESCAPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNENCRYPTED",
	"UNION",
	"UNIQUE",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VERSION_P",
	"VIEW",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE_P",
	"WINDOW",
	"WITHIN",
	"WORK",
	"WRITE",
	"XML_P",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"YEAR_P",
	"YES_P",
	"INOUT",
	"OTHERS",
	"OLD",
	"KEY",
	"OFF",
	"OIDS",
	"OPTION",
	"OPTIONS",
	"OVER",
	"ORDER",
	"ANY",
	"BOTH",
	"CAST",
	"CHECK",
	"COLUMN",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"'<'",
	"'>'",
	"'='",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"';'",
	"','",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:9383

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 33,
	541, 33,
	-2, 1304,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 37,
	67, 1612,
	84, 1612,
	85, 2214,
	308, 1779,
	420, 1612,
	481, 1612,
	-2, 46,
	-1, 52,
	1, 33,
	541, 33,
	-2, 1304,
	-1, 76,
	85, 2213,
	-2, 1611,
	-1, 147,
	61, 251,
	64, 251,
	528, 251,
	534, 251,
	-2, 2257,
	-1, 591,
	84, 1612,
	481, 1612,
	-2, 45,
	-1, 593,
	210, 34,
	-2, 2220,
	-1, 642,
	16, 1169,
	17, 1169,
	532, 1169,
	-2, 52,
	-1, 643,
	16, 1170,
	17, 1170,
	532, 1170,
	-2, 53,
	-1, 940,
	6, 1708,
	12, 1708,
	535, 1708,
	536, 1708,
	-2, 1701,
	-1, 1113,
	1, 609,
	26, 609,
	36, 609,
	64, 609,
	65, 609,
	73, 609,
	74, 609,
	101, 609,
	533, 609,
	541, 609,
	542, 609,
	-2, 1240,
	-1, 1578,
	532, 1133,
	-2, 1119,
	-1, 1746,
	118, 46,
	308, 1779,
	461, 46,
	-2, 1612,
	-1, 1787,
	532, 1781,
	-2, 175,
	-1, 1962,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1041,
	-1, 1963,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1042,
	-1, 1964,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1043,
	-1, 1965,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1044,
	-1, 1966,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1045,
	-1, 1967,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1046,
	-1, 1972,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1054,
	-1, 1978,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1058,
	-1, 2014,
	532, 1132,
	-2, 1173,
	-1, 2118,
	40, 1177,
	510, 1177,
	528, 1177,
	533, 1177,
	542, 1177,
	-2, 1173,
	-1, 2146,
	210, 34,
	-2, 2220,
	-1, 2357,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1056,
	-1, 2358,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1060,
	-1, 2371,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1073,
	-1, 2442,
	532, 1133,
	-2, 68,
	-1, 2448,
	151, 1544,
	-2, 1479,
	-1, 2595,
	6, 1708,
	12, 1708,
	535, 1708,
	536, 1708,
	-2, 1682,
	-1, 2684,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1055,
	-1, 2689,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1075,
	-1, 2690,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1059,
	-1, 2947,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1057,
	-1, 2948,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1061,
	-1, 2952,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1067,
	-1, 2960,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1087,
	-1, 2961,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1088,
	-1, 2962,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1089,
	-1, 2963,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1090,
	-1, 2964,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1091,
	-1, 2965,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1092,
	-1, 2966,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1069,
	-1, 2967,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1074,
	-1, 3037,
	541, 33,
	-2, 1304,
	-1, 3141,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1068,
	-1, 3142,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1070,
	-1, 3143,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1076,
	-1, 3669,
	7, 1429,
	-2, 252,
}

const yyPrivate = 57344

const yyLast = 58758

var yyAct = [...]int16{
	569, 3666, 3720, 3721, 3780, 3557, 3710, 2352, 3711, 3763,
	3732, 827, 3749, 803, 2028, 3000, 3584, 2184, 2076, 2238,
	3667, 3552, 2976, 3355, 3065, 3316, 3026, 3489, 842, 3390,
	3088, 3274, 3375, 2577, 3286, 3478, 3471, 2031, 3211, 1699,
	676, 2995, 150, 150, 3524, 1058, 3254, 3542, 559, 707,
	3402, 928, 3317, 3593, 2975, 559, 2771, 2559, 3397, 559,
	2233, 597, 3414, 1721, 3391, 593, 596, 599, 596, 3392,
	596, 2563, 3249, 3192, 2153, 2468, 3168, 3087, 3240, 559,
	559, 559, 559, 2345, 852, 641, 596, 596, 2083, 596,
	641, 1798, 3054, 3033, 3165, 641, 639, 641, 675, 2453,
	2190, 673, 2147, 2767, 2993, 872, 673, 596, 673, 596,
	2835, 2437, 596, 5, 709, 595, 876, 614, 598, 616,
	1594, 2534, 2469, 3266, 4, 2868, 3113, 2775, 2013, 2106,
	32, 1745, 18, 2071, 3007, 668, 669, 3175, 671, 150,
	150, 1744, 17, 3199, 2984, 2119, 3003, 2113, 3098, 2520,
	2046, 1067, 2069, 870, 2133, 2066, 701, 2828, 703, 2423,
	2385, 2205, 2398, 2232, 2571, 551, 44, 2594, 2851, 2137,
	1764, 579, 1766, 2154, 1743, 12, 2499, 2068, 1742, 11,
	888, 2136, 32, 1010, 18, 2124, 2138, 2109, 1720, 784,
	2745, 3553, 2045, 1701, 17, 793, 2415, 2032, 556, 578,
	1866, 2237, 2011, 767, 1020, 575, 960, 1782, 2185, 1574,
	915, 860, 2123, 2111, 832, 1752, 141, 1771, 44, 1063,
	2085, 2444, 2049, 1700, 1566, 955, 2054, 12, 2053, 625,
	2042, 11, 2052, 1674, 2007, 2001, 1057, 2051, 824, 1986,
	2044, 672, 1983, 33, 765, 638, 894, 1587, 674, 60,
	896, 2538, 62, 2061, 592, 1951, 794, 112, 111, 713,
	715, 715, 716, 1727, 953, 706, 1025, 567, 574, 1055,
	43, 3811, 565, 3802, 3664, 771, 1086, 2353, 2508, 3800,
	3695, 3740, 3741, 814, 2426, 1952, 1089, 2018, 3695, 549,
	3741, 3719, 1087, 893, 1074, 1000, 1064, 778, 3717, 3703,
	3440, 2507, 826, 1000, 2037, 2064, 1001, 1680, 1680, 1689,
	2509, 1687, 3694, 1000, 1001, 548, 1686, 1690, 1685, 3680,
	1691, 3695, 3673, 570, 1001, 3627, 3663, 1688, 3681, 3533,
	1076, 2403, 3649, 1079, 1692, 3605, 689, 3445, 691, 1078,
	3572, 3150, 3566, 814, 2064, 3539, 1089, 3139, 1077, 3573,
	3516, 3567, 698, 699, 2546, 3428, 817, 3515, 3514, 3517,
	3511, 3439, 2998, 3437, 1080, 1088, 1680, 1680, 783, 3512,
	3440, 1687, 1003, 3369, 2951, 749, 3354, 814, 1769, 3343,
	1089, 3325, 3150, 3312, 3248, 3353, 2838, 1688, 3344, 3246,
	3324, 3228, 1003, 2064, 1692, 3291, 3288, 3159, 2509, 2794,
	3227, 3158, 3149, 2793, 2721, 1687, 3160, 3137, 2710, 1712,
	1003, 3150, 2696, 2697, 2698, 2699, 3138, 3169, 3084, 2375,
	3083, 1688, 3082, 3076, 3048, 3018, 2784, 3085, 1692, 2064,
	2376, 2064, 2064, 2509, 3019, 2064, 814, 2709, 2679, 1089,
	2618, 2605, 2511, 1099, 1100, 1101, 1680, 1680, 3329, 2619,
	2606, 2512, 2490, 2413, 2408, 1682, 2402, 2393, 1683, 999,
	2546, 2491, 1689, 2409, 1687, 2403, 1680, 2384, 2451, 1686,
	1690, 1685, 2377, 1691, 2374, 2335, 1680, 1684, 1105, 1106,
	1688, 1680, 2386, 2149, 1680, 1680, 1993, 1692, 1092, 1093,
	1094, 1095, 2150, 2065, 2024, 814, 2020, 770, 1089, 1681,
	1946, 838, 2064, 1003, 564, 1680, 3373, 1012, 1680, 1749,
	52, 2699, 1749, 1095, 2804, 875, 830, 3043, 49, 773,
	834, 1064, 772, 1687, 833, 834, 2686, 826, 791, 833,
	826, 1012, 2607, 875, 1012, 2693, 1749, 1749, 2608, 1688,
	2781, 878, 775, 3560, 49, 46, 1692, 3744, 1697, 47,
	3609, 2693, 3432, 816, 816, 2703, 2704, 2705, 3100, 1089,
	3326, 559, 3431, 768, 1756, 3430, 1021, 1022, 3302, 51,
	3298, 46, 816, 3258, 559, 47, 847, 559, 559, 1023,
	1021, 1022, 559, 559, 1687, 559, 3256, 641, 641, 3218,
	3561, 641, 2973, 1019, 1715, 51, 2972, 2971, 862, 863,
	1688, 2970, 866, 2837, 2755, 2716, 3558, 2545, 2730, 2506,
	2552, 1695, 2450, 2187, 2378, 2342, 2340, 2337, 2336, 2019,
	1853, 3089, 814, 880, 1575, 1089, 45, 2725, 851, 1099,
	1100, 1101, 791, 790, 769, 3801, 559, 559, 3778, 886,
	3774, 1682, 1089, 853, 1683, 3683, 3657, 3633, 1689, 3626,
	1687, 59, 3582, 1089, 3398, 1686, 1690, 1685, 3494, 1691,
	3491, 1799, 49, 1684, 1105, 1106, 1688, 1687, 3413, 3409,
	2454, 3359, 3315, 1692, 3280, 814, 3265, 3263, 1089, 3262,
	3261, 877, 1099, 1100, 1101, 1757, 596, 596, 3009, 46,
	3154, 3029, 3013, 47, 1682, 927, 2997, 1683, 2989, 2833,
	2825, 1689, 2817, 1687, 2789, 2757, 2750, 2674, 1686, 1690,
	1685, 2584, 1691, 51, 2583, 2576, 1684, 1105, 1106, 1688,
	2441, 2440, 2064, 2396, 1988, 644, 1692, 575, 575, 2733,
	2319, 879, 2281, 885, 2693, 969, 970, 2183, 2703, 2704,
	2705, 2156, 2078, 1577, 2492, 571, 1932, 1818, 1737, 828,
	2950, 889, 596, 2693, 2037, 1728, 1585, 2703, 2704, 2705,
	1583, 1088, 1582, 2037, 2438, 1576, 45, 1575, 1027, 2949,
	1012, 1014, 954, 874, 2064, 841, 1071, 2064, 837, 3109,
	2513, 2736, 2151, 2038, 3525, 831, 1047, 949, 2782, 1108,
	3367, 3366, 2693, 1021, 1022, 1081, 2703, 2704, 2705, 816,
	816, 816, 816, 3289, 3487, 784, 816, 1090, 1091, 1092,
	1093, 1094, 1095, 998, 784, 784, 683, 3223, 2625, 3257,
	3216, 1007, 548, 3072, 816, 1065, 1066, 3486, 1755, 683,
	683, 1003, 1791, 1770, 1568, 816, 2918, 559, 816, 839,
	1868, 867, 1716, 3289, 3289, 849, 850, 1703, 2913, 1704,
	3365, 786, 1789, 1589, 1713, 3358, 3242, 2635, 559, 2201,
	2824, 1726, 2189, 1868, 2188, 1739, 1676, 1090, 1091, 1092,
	1093, 1094, 1095, 3734, 683, 2627, 2265, 2261, 1841, 599,
	2167, 581, 596, 596, 596, 596, 2141, 596, 892, 857,
	1772, 759, 752, 559, 635, 1589, 3236, 1753, 583, 1011,
	1780, 1090, 1091, 1092, 1093, 1094, 1095, 3235, 559, 3042,
	596, 3077, 2889, 2349, 1016, 1017, 1018, 1051, 559, 2795,
	2166, 865, 919, 757, 559, 925, 814, 943, 697, 1089,
	2214, 1758, 1759, 1760, 1761, 2212, 1762, 589, 966, 1940,
	1754, 1718, 1108, 559, 1024, 624, 559, 623, 3066, 2780,
	1865, 1096, 1097, 1098, 1687, 3532, 1679, 2685, 1694, 1812,
	1090, 1091, 1092, 1093, 1094, 1095, 3501, 3600, 1740, 1048,
	1688, 1042, 559, 3735, 3425, 3423, 3222, 1692, 2213, 1826,
	559, 559, 3121, 2211, 1045, 766, 774, 596, 596, 596,
	596, 2693, 775, 2906, 2903, 2703, 2704, 2705, 596, 596,
	622, 50, 621, 1714, 1815, 1793, 596, 2708, 2264, 1824,
	3243, 1028, 1029, 816, 45, 1032, 1820, 1035, 1748, 1090,
	1091, 1092, 1093, 1094, 1095, 1059, 1059, 50, 1075, 2572,
	2891, 1796, 74, 1779, 1571, 3559, 1890, 1891, 1892, 1893,
	1696, 1926, 1578, 559, 1069, 3652, 1586, 2470, 1918, 549,
	1065, 1066, 1776, 3101, 3102, 1921, 2694, 2695, 2696, 2697,
	2698, 2699, 2581, 2700, 2701, 2702, 2729, 57, 1819, 2125,
	2127, 2126, 2694, 2695, 2696, 2697, 2698, 2699, 877, 3394,
	1090, 1091, 1092, 1093, 1094, 1095, 2897, 2617, 559, 816,
	2614, 816, 816, 816, 816, 816, 816, 816, 816, 816,
	816, 816, 816, 816, 816, 1584, 1677, 877, 816, 581,
	816, 596, 834, 816, 3496, 1724, 833, 1919, 1788, 1790,
	1838, 1839, 2613, 1750, 2479, 3381, 583, 1729, 1108, 961,
	1068, 1068, 877, 1068, 2223, 3078, 1990, 1096, 1097, 1098,
	3497, 2200, 1817, 771, 3651, 50, 1090, 1091, 1092, 1093,
	1094, 1095, 2348, 1923, 2888, 715, 930, 2927, 45, 2587,
	1979, 2655, 1842, 1090, 1091, 1092, 1093, 1094, 1095, 1004,
	1586, 2574, 1794, 1008, 1090, 1091, 1092, 1093, 1094, 1095,
	715, 1108, 2654, 1831, 992, 1786, 3045, 1834, 1835, 2307,
	1096, 1097, 1098, 1830, 2306, 1925, 962, 3641, 2305, 1090,
	1091, 1092, 1093, 1094, 1095, 2304, 2693, 2298, 1802, 1033,
	2703, 2704, 2705, 930, 3269, 2350, 63, 814, 2773, 2297,
	1089, 2879, 2692, 2289, 932, 2268, 2588, 1885, 3053, 1773,
	1862, 1822, 2493, 1775, 890, 1955, 1872, 2528, 2471, 589,
	1844, 74, 985, 1848, 2524, 1687, 2700, 2701, 2702, 1773,
	1774, 1941, 1911, 1901, 984, 2694, 2695, 2696, 2697, 2698,
	2699, 1688, 1738, 1917, 75, 2700, 2701, 2702, 1692, 1924,
	983, 2164, 1773, 3221, 2694, 2695, 2696, 2697, 2698, 2699,
	588, 932, 1785, 982, 978, 977, 1797, 1773, 1068, 976,
	1773, 975, 1068, 1068, 1936, 582, 974, 1934, 1935, 963,
	814, 1041, 1773, 1089, 2700, 2701, 2702, 1099, 1100, 1101,
	1795, 1773, 973, 2694, 2695, 2696, 2697, 2698, 2699, 1682,
	967, 590, 1683, 1867, 1808, 1807, 1689, 1039, 1687, 2590,
	1773, 1773, 1773, 1686, 1690, 1685, 2165, 1691, 965, 1052,
	958, 1684, 1105, 1106, 1688, 1954, 1867, 931, 957, 956,
	952, 1692, 989, 2915, 991, 814, 2498, 3585, 1089, 1943,
	3001, 2631, 1099, 1100, 1101, 770, 771, 2628, 1799, 1944,
	3395, 1927, 1784, 1806, 1682, 3287, 1928, 1683, 987, 3389,
	1931, 1689, 1837, 1687, 1933, 2202, 3569, 884, 1686, 1690,
	1685, 1945, 1691, 2858, 1827, 3006, 1684, 1105, 1106, 1688,
	2681, 1827, 756, 3255, 931, 3596, 1692, 1803, 586, 2615,
	2230, 2221, 2216, 882, 1783, 1085, 3595, 1050, 1805, 1804,
	2482, 2852, 1947, 1949, 2797, 2858, 73, 2944, 72, 758,
	3396, 768, 684, 788, 2480, 2128, 3230, 2876, 1038, 933,
	3041, 2768, 1811, 3420, 3502, 3081, 1732, 3387, 868, 2616,
	1090, 1091, 1092, 1093, 1094, 1095, 3586, 1811, 3570, 1731,
	2580, 3015, 584, 2595, 585, 3490, 2880, 1801, 3267, 934,
	3382, 1816, 935, 75, 3080, 3597, 936, 2886, 3716, 2878,
	861, 2831, 685, 3493, 2713, 2002, 2530, 2798, 1722, 986,
	683, 3590, 3378, 3499, 3014, 1937, 933, 2481, 937, 683,
	683, 959, 769, 2700, 2701, 2702, 1084, 587, 2682, 2873,
	1053, 754, 2694, 2695, 2696, 2697, 2698, 2699, 1859, 2946,
	3079, 636, 1040, 582, 881, 2852, 934, 2832, 2822, 935,
	3476, 797, 1083, 936, 2589, 2595, 940, 764, 2937, 764,
	686, 1894, 2516, 869, 766, 1722, 789, 1043, 2791, 2130,
	3654, 2936, 1026, 938, 1015, 937, 990, 3172, 2830, 1593,
	3751, 38, 3212, 1733, 3322, 37, 39, 1030, 1031, 3757,
	939, 3672, 3152, 988, 2401, 49, 816, 816, 599, 2526,
	964, 996, 588, 816, 816, 1898, 816, 3323, 770, 1897,
	2529, 3011, 3330, 940, 3810, 683, 3809, 814, 1810, 3806,
	1089, 1593, 46, 1593, 1994, 1998, 47, 941, 883, 3805,
	938, 2004, 3769, 1810, 2016, 2859, 3765, 3764, 3768, 3770,
	3771, 137, 3813, 3783, 2916, 1687, 51, 939, 2363, 2881,
	2572, 814, 2632, 41, 1089, 73, 1896, 72, 2629, 1999,
	916, 1688, 1828, 3782, 3340, 3798, 1829, 2859, 1692, 1828,
	3788, 36, 993, 1829, 768, 77, 3789, 868, 3722, 1687,
	3341, 3727, 2356, 2523, 941, 3725, 3599, 3726, 3728, 2525,
	3786, 2522, 2528, 3797, 2860, 1688, 3787, 3785, 3784, 2524,
	3747, 816, 1692, 816, 816, 3748, 816, 816, 596, 1895,
	2829, 753, 1037, 3750, 3767, 3213, 951, 2033, 2381, 2035,
	3766, 637, 3804, 1703, 3803, 153, 2860, 2058, 2058, 3762,
	2565, 2527, 3238, 3039, 2477, 1780, 596, 2861, 2700, 2701,
	2702, 2328, 1799, 2996, 3448, 769, 3735, 2694, 2695, 2696,
	2697, 2698, 2699, 3699, 2821, 3543, 3594, 1979, 2567, 559,
	3571, 1090, 1091, 1092, 1093, 1094, 1095, 3636, 2146, 2861,
	2519, 995, 3635, 3731, 2874, 3724, 2155, 3729, 3756, 3548,
	760, 762, 3545, 2756, 596, 2073, 3339, 3792, 3665, 1589,
	3550, 3544, 3163, 1826, 3025, 559, 559, 2875, 3546, 1780,
	2738, 1991, 2504, 2129, 2074, 1997, 1586, 1813, 1054, 2192,
	2977, 2196, 1869, 1586, 1792, 1571, 682, 2062, 1857, 3556,
	3554, 2564, 2228, 1860, 778, 2974, 1108, 3562, 3563, 682,
	682, 559, 1859, 2162, 3333, 1096, 1097, 1098, 2121, 2206,
	3454, 3455, 3527, 559, 1090, 1091, 1092, 1093, 1094, 1095,
	3209, 3147, 3453, 3458, 3331, 3179, 3334, 596, 596, 2399,
	2015, 2227, 1593, 3006, 3148, 2229, 3457, 559, 2029, 2030,
	2400, 559, 2131, 2171, 682, 1858, 3508, 2112, 3507, 3755,
	3547, 1108, 3555, 816, 3507, 3508, 2112, 3435, 3415, 3416,
	1096, 1097, 1098, 2226, 2157, 2158, 2159, 2160, 2161, 1090,
	1091, 1092, 1093, 1094, 1095, 2531, 2250, 2251, 3307, 3561,
	1861, 3610, 3611, 2399, 2142, 2596, 2040, 846, 3434, 3304,
	2060, 3146, 596, 641, 2256, 3702, 641, 599, 641, 641,
	3178, 2446, 2447, 2224, 639, 2110, 755, 673, 702, 673,
	673, 2530, 53, 54, 55, 56, 2181, 615, 2041, 3306,
	3305, 2179, 46, 816, 40, 3561, 47, 3632, 2847, 596,
	549, 42, 2034, 2397, 2532, 2059, 2059, 620, 136, 3661,
	2023, 2317, 2746, 2058, 2186, 2036, 51, 3761, 2560, 3250,
	3422, 2341, 2191, 2063, 2941, 2940, 2766, 1874, 2325, 1873,
	1707, 3662, 1706, 2987, 816, 816, 2416, 2421, 2419, 2420,
	2418, 2503, 2414, 2417, 816, 816, 2741, 784, 2740, 816,
	816, 2503, 3812, 1087, 816, 3796, 2143, 2148, 3795, 2144,
	3794, 2267, 2145, 816, 2022, 2187, 3745, 3356, 3393, 816,
	816, 816, 3506, 3504, 2526, 3030, 2790, 2370, 2478, 816,
	2172, 2333, 2809, 2392, 2290, 2529, 2744, 2421, 2419, 2420,
	2418, 819, 2502, 2080, 2027, 1800, 1005, 3200, 1703, 816,
	3201, 980, 979, 3202, 816, 971, 829, 2425, 2425, 641,
	2320, 2058, 2425, 2425, 2425, 3188, 2329, 577, 50, 573,
	3184, 3203, 3535, 2262, 3534, 2449, 2240, 2266, 3459, 3320,
	3122, 45, 3017, 559, 2907, 559, 559, 2904, 2810, 1713,
	559, 559, 2510, 3067, 2249, 63, 1836, 1833, 2353, 2043,
	2252, 2253, 3068, 1711, 3245, 2439, 1710, 152, 3205, 1952,
	576, 3602, 3296, 596, 2525, 2486, 150, 3293, 3204, 3130,
	74, 3069, 3117, 2239, 66, 3111, 3110, 2245, 3206, 2925,
	2285, 1090, 1091, 1092, 1093, 1094, 1095, 2924, 784, 3181,
	3182, 2917, 2912, 2666, 2254, 2300, 2301, 2259, 2665, 2664,
	2663, 2662, 559, 2661, 2659, 2193, 2527, 2321, 2318, 2326,
	2327, 2658, 2485, 2656, 2647, 1090, 1091, 1092, 1093, 1094,
	1095, 2646, 3190, 3183, 2634, 3186, 3187, 3189, 3185, 2458,
	1753, 2633, 2630, 2562, 2561, 2362, 2315, 777, 779, 781,
	785, 2299, 643, 2351, 816, 2347, 2286, 643, 681, 1068,
	1989, 2059, 643, 2354, 643, 1068, 1068, 2501, 1059, 2360,
	1985, 681, 681, 2603, 2344, 2410, 784, 784, 1984, 1985,
	3376, 2387, 741, 741, 1889, 1888, 2361, 2372, 2359, 2443,
	2416, 2421, 2419, 2420, 2418, 2514, 2414, 2417, 2597, 1887,
	2466, 2461, 549, 1886, 1882, 1881, 2380, 1880, 1879, 1878,
	2494, 1877, 1871, 2433, 2388, 2389, 681, 1870, 3207, 3208,
	1856, 1855, 2394, 1854, 1852, 1825, 1991, 1821, 2404, 2495,
	2497, 2406, 1814, 1708, 1980, 1930, 1981, 2405, 2364, 2339,
	2541, 2338, 2536, 2432, 787, 776, 1929, 2430, 69, 2551,
	3, 2429, 816, 2557, 2442, 2448, 2428, 2059, 2002, 2059,
	3656, 559, 3623, 3466, 549, 2620, 2621, 3655, 2822, 2535,
	2517, 2547, 1975, 1068, 1971, 2472, 3096, 2475, 1826, 1974,
	1976, 1973, 1847, 1977, 65, 3092, 2652, 3036, 2796, 2465,
	1970, 2355, 2487, 2282, 596, 596, 2496, 2279, 2275, 70,
	924, 2422, 918, 572, 596, 143, 2434, 2435, 2436, 554,
	2579, 2862, 75, 2505, 3718, 3060, 1863, 778, 591, 2556,
	2578, 3089, 2483, 2484, 816, 1862, 784, 816, 2836, 555,
	816, 816, 2077, 816, 816, 816, 2533, 129, 816, 816,
	818, 778, 3027, 2671, 2672, 3055, 826, 2330, 540, 2331,
	782, 2332, 816, 2676, 2334, 2554, 2555, 816, 2346, 2566,
	2573, 816, 816, 3086, 1000, 3021, 2343, 2582, 2186, 2586,
	816, 2365, 2369, 2593, 2033, 1001, 91, 821, 2668, 2569,
	1703, 822, 2178, 820, 2058, 2170, 2081, 2058, 1723, 38,
	1717, 891, 887, 37, 39, 2749, 871, 3279, 2425, 2425,
	2425, 2425, 2425, 49, 3176, 3278, 2938, 2849, 2622, 2649,
	2600, 816, 816, 2598, 816, 2568, 2558, 2462, 2079, 2075,
	1938, 1850, 1780, 1846, 1765, 2778, 1763, 1068, 1068, 2626,
	46, 1747, 1034, 1009, 47, 2670, 1006, 64, 1002, 997,
	682, 972, 816, 945, 2675, 1593, 942, 923, 2636, 682,
	682, 2650, 917, 3094, 51, 3093, 2312, 1746, 2459, 861,
	751, 41, 3628, 816, 816, 3538, 3500, 873, 3281, 3224,
	3162, 3097, 3064, 559, 73, 1713, 72, 68, 1068, 36,
	579, 3059, 3049, 2939, 2457, 2731, 2732, 67, 2169, 1044,
	1698, 1678, 826, 596, 77, 1593, 76, 2390, 2391, 816,
	559, 1950, 1948, 2816, 3754, 2669, 3736, 826, 826, 1592,
	683, 778, 2677, 2823, 1593, 2678, 2814, 2155, 2719, 2720,
	2722, 1048, 2788, 596, 3377, 2779, 1832, 2639, 2765, 559,
	1082, 2644, 2786, 1942, 780, 1072, 3037, 3244, 2735, 1780,
	3588, 2783, 2820, 2853, 3239, 682, 3044, 1713, 2843, 3380,
	3241, 1592, 1713, 1592, 1713, 2870, 2712, 1991, 2777, 2718,
	3495, 3237, 1730, 3232, 2473, 2727, 2726, 683, 2090, 2892,
	2476, 2734, 2839, 2737, 2084, 2463, 2739, 2869, 2107, 2742,
	2747, 2748, 683, 683, 2743, 2818, 2865, 2103, 535, 1991,
	2112, 536, 142, 1864, 2135, 2763, 2206, 1736, 2896, 2769,
	1735, 994, 2541, 2760, 2536, 2815, 2314, 2163, 2112, 2112,
	2877, 2841, 2802, 1899, 2803, 2549, 2548, 30, 29, 2785,
	643, 643, 2059, 28, 27, 2059, 2599, 1586, 2601, 26,
	25, 2535, 24, 23, 3231, 2812, 22, 21, 20, 643,
	19, 31, 683, 16, 2322, 1741, 71, 2805, 2110, 2799,
	2882, 2885, 2813, 1925, 643, 643, 816, 816, 643, 2807,
	558, 2811, 844, 816, 1751, 816, 816, 816, 816, 816,
	816, 816, 816, 816, 816, 816, 816, 2591, 3406, 816,
	3071, 816, 2751, 2752, 2753, 2754, 816, 2570, 816, 2850,
	2834, 2848, 816, 113, 1900, 920, 2541, 2840, 2536, 2895,
	2870, 2842, 3647, 2204, 3477, 2772, 2648, 816, 61, 3388,
	2521, 2058, 2058, 2518, 2857, 2058, 2770, 3401, 2978, 2867,
	2776, 2070, 2774, 2883, 2067, 2535, 2425, 2884, 641, 2887,
	3698, 2999, 2986, 2416, 2421, 2419, 2420, 2418, 2894, 2414,
	2417, 2985, 3723, 3447, 3551, 3328, 2890, 2687, 2688, 3167,
	3541, 1780, 596, 2899, 3032, 2706, 2707, 3161, 2992, 2152,
	48, 3303, 40, 3145, 2021, 1705, 785, 35, 1049, 42,
	553, 2471, 552, 3028, 2680, 785, 785, 3537, 1073, 792,
	559, 2871, 2592, 683, 3345, 3470, 3191, 3008, 1713, 3180,
	2942, 2764, 1592, 2059, 3012, 58, 816, 2980, 1709, 3016,
	3005, 3024, 3004, 3456, 599, 3452, 3451, 596, 2728, 2953,
	2026, 3002, 2039, 1693, 15, 14, 13, 10, 9, 8,
	1780, 3022, 7, 3073, 6, 601, 2537, 2383, 2914, 2003,
	1581, 735, 681, 2919, 3031, 2990, 734, 719, 721, 737,
	1068, 681, 681, 816, 736, 720, 1593, 1013, 718, 717,
	743, 3020, 2673, 1995, 812, 811, 3062, 2000, 2379, 3075,
	1579, 683, 683, 806, 807, 3061, 643, 643, 643, 643,
	1947, 1949, 802, 643, 2225, 2602, 2623, 2231, 3421, 2311,
	840, 1120, 3058, 3197, 2808, 2991, 50, 3056, 3034, 1117,
	2969, 643, 2, 1, 2718, 0, 0, 0, 0, 45,
	0, 1591, 643, 2982, 2983, 643, 3023, 2988, 0, 2112,
	2877, 3040, 0, 0, 0, 3010, 2826, 0, 0, 3090,
	816, 816, 816, 0, 0, 0, 2871, 3127, 0, 0,
	1593, 1593, 1593, 0, 1068, 3047, 0, 681, 2059, 3052,
	741, 0, 3051, 1591, 0, 1591, 0, 0, 0, 2059,
	2059, 0, 0, 2059, 2994, 0, 2856, 816, 2058, 0,
	0, 2864, 0, 2866, 0, 0, 2059, 816, 816, 816,
	0, 0, 3070, 3114, 0, 0, 3114, 0, 0, 0,
	0, 0, 0, 0, 559, 0, 0, 0, 3214, 0,
	2778, 0, 0, 0, 0, 0, 559, 0, 741, 3193,
	2870, 559, 0, 3099, 3116, 3104, 3095, 0, 0, 0,
	3106, 683, 0, 3099, 3103, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3196, 0, 0, 0, 0, 0, 0, 0, 0, 3217,
	0, 0, 0, 0, 3225, 3134, 2870, 599, 0, 596,
	596, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3157, 741, 0, 741, 2869, 0,
	643, 0, 2954, 2955, 2956, 2957, 2958, 2959, 2960, 2961,
	2962, 2963, 2964, 2965, 3219, 0, 0, 0, 3153, 3252,
	3144, 0, 741, 0, 0, 0, 2945, 0, 3275, 3276,
	0, 0, 3105, 3177, 0, 3194, 0, 3215, 3272, 3174,
	3290, 2870, 0, 2777, 0, 0, 0, 3308, 0, 3210,
	3234, 641, 3233, 3247, 3318, 3173, 816, 32, 0, 18,
	0, 816, 3251, 3309, 3264, 0, 0, 816, 3259, 17,
	3156, 3226, 3229, 0, 0, 0, 643, 741, 643, 643,
	643, 643, 643, 643, 643, 643, 643, 643, 643, 643,
	643, 643, 3351, 44, 0, 643, 3268, 643, 3270, 0,
	643, 3271, 12, 0, 1591, 3282, 11, 0, 0, 0,
	0, 3114, 0, 0, 0, 0, 2059, 3050, 2541, 0,
	2536, 3283, 0, 0, 784, 3352, 0, 0, 1068, 3346,
	0, 0, 683, 0, 0, 0, 559, 1068, 1068, 3295,
	0, 0, 0, 0, 0, 0, 2871, 2535, 816, 3319,
	0, 0, 0, 816, 816, 3314, 3310, 3386, 2059, 3311,
	559, 3313, 0, 0, 3385, 3361, 3363, 0, 3383, 0,
	0, 816, 0, 0, 3299, 3301, 0, 0, 0, 3335,
	3336, 3404, 3405, 3337, 3338, 0, 0, 0, 0, 0,
	0, 0, 3403, 0, 3357, 1713, 0, 0, 1703, 0,
	0, 0, 2871, 0, 0, 0, 2155, 3372, 3379, 3360,
	3364, 3371, 3362, 0, 2059, 816, 3407, 3370, 0, 3427,
	3449, 0, 1593, 0, 1593, 0, 0, 0, 3368, 0,
	1713, 0, 1713, 3400, 0, 1593, 3446, 3436, 0, 801,
	0, 0, 3107, 3108, 559, 3418, 3034, 0, 0, 3408,
	3479, 3410, 0, 3412, 3193, 0, 0, 3417, 0, 0,
	0, 0, 0, 0, 0, 0, 3473, 2871, 0, 0,
	3475, 3374, 3126, 0, 0, 0, 0, 2994, 3424, 2059,
	3438, 784, 0, 0, 3131, 3488, 3472, 0, 0, 2059,
	3482, 3444, 0, 0, 0, 0, 0, 0, 0, 0,
	1713, 0, 0, 0, 599, 0, 3443, 0, 3469, 3483,
	0, 3484, 0, 816, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3485, 0, 0, 0,
	0, 3318, 0, 0, 3536, 3347, 816, 0, 3492, 816,
	0, 0, 0, 0, 0, 1592, 0, 3505, 1947, 1949,
	0, 3503, 3509, 0, 3441, 0, 1068, 1713, 0, 0,
	0, 0, 0, 0, 0, 3523, 0, 0, 0, 3528,
	3526, 3518, 816, 3520, 0, 3522, 3498, 0, 0, 0,
	0, 0, 2870, 3540, 0, 816, 3521, 0, 3568, 3589,
	0, 0, 0, 0, 930, 1592, 3577, 3581, 0, 0,
	3574, 3575, 0, 0, 0, 2366, 2366, 0, 0, 0,
	682, 0, 0, 3579, 1592, 0, 0, 0, 0, 0,
	3608, 0, 0, 0, 3616, 1713, 1713, 0, 0, 3619,
	0, 3578, 3580, 0, 816, 816, 3583, 0, 816, 0,
	1068, 0, 3604, 3403, 3606, 0, 1703, 0, 0, 0,
	2033, 1826, 3598, 3601, 0, 3613, 3614, 0, 3607, 0,
	0, 3612, 932, 3630, 3479, 596, 596, 682, 3603, 0,
	0, 0, 0, 2870, 0, 641, 3480, 0, 3327, 3620,
	0, 3625, 682, 682, 0, 3629, 3650, 3631, 2059, 0,
	3646, 0, 3642, 3644, 3634, 3648, 3638, 3640, 784, 3637,
	0, 0, 0, 3472, 3591, 0, 0, 3643, 3653, 0,
	0, 0, 0, 0, 3639, 3639, 0, 3668, 816, 0,
	683, 0, 0, 683, 816, 0, 0, 3658, 3645, 0,
	0, 0, 3659, 0, 0, 0, 0, 0, 3671, 3670,
	3660, 930, 682, 0, 0, 0, 0, 0, 816, 0,
	0, 0, 3674, 3690, 3691, 3692, 3318, 3676, 0, 3677,
	0, 3679, 3675, 643, 643, 3689, 596, 3682, 3700, 3701,
	643, 643, 2870, 643, 3678, 3684, 3687, 3707, 0, 0,
	0, 3693, 3688, 0, 0, 931, 3668, 0, 0, 0,
	3709, 3705, 3706, 3715, 3708, 0, 0, 3704, 0, 0,
	0, 0, 0, 3733, 3433, 0, 3730, 3737, 2871, 932,
	0, 0, 0, 816, 0, 3639, 0, 0, 3739, 0,
	2059, 3738, 3743, 3742, 0, 1593, 0, 0, 0, 0,
	3685, 3686, 0, 641, 3752, 3753, 0, 0, 0, 3464,
	3759, 3467, 0, 0, 3760, 0, 3773, 0, 0, 0,
	3513, 3715, 3779, 3776, 3758, 3772, 3777, 3781, 0, 0,
	2878, 0, 0, 0, 0, 3668, 3791, 0, 643, 0,
	643, 643, 3790, 643, 643, 3793, 0, 933, 0, 0,
	0, 0, 0, 682, 3781, 3799, 0, 0, 3715, 0,
	3480, 0, 3668, 3807, 643, 643, 0, 3808, 0, 2871,
	0, 0, 2059, 0, 3697, 0, 0, 934, 0, 3519,
	935, 2059, 0, 0, 936, 0, 741, 0, 0, 0,
	0, 0, 0, 0, 0, 741, 1722, 0, 0, 0,
	0, 0, 931, 0, 0, 0, 937, 1591, 683, 0,
	0, 0, 0, 0, 0, 0, 1592, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 682, 682, 0, 0, 2086, 3564, 0, 741, 0,
	0, 0, 0, 2099, 940, 0, 0, 0, 0, 0,
	0, 2366, 2366, 0, 0, 0, 0, 1591, 0, 2366,
	2366, 938, 0, 0, 0, 0, 0, 0, 2871, 0,
	0, 0, 681, 0, 0, 0, 1591, 0, 939, 683,
	2059, 0, 0, 0, 0, 0, 0, 0, 2310, 0,
	2313, 0, 0, 0, 933, 0, 0, 0, 0, 0,
	1592, 1592, 1592, 0, 3617, 3618, 2105, 0, 0, 0,
	0, 0, 0, 0, 0, 941, 0, 0, 0, 0,
	643, 3621, 3622, 0, 934, 3624, 0, 935, 0, 681,
	0, 936, 2758, 0, 0, 0, 0, 900, 785, 0,
	2101, 0, 901, 1722, 681, 681, 910, 683, 0, 0,
	0, 1593, 0, 937, 0, 0, 0, 0, 0, 0,
	643, 0, 741, 643, 0, 643, 643, 0, 741, 0,
	0, 0, 0, 0, 0, 683, 0, 0, 0, 0,
	0, 682, 0, 0, 0, 0, 0, 0, 0, 0,
	643, 940, 0, 0, 0, 0, 0, 0, 0, 0,
	3712, 0, 0, 0, 681, 0, 0, 0, 938, 903,
	643, 0, 1593, 0, 0, 0, 0, 0, 0, 0,
	2366, 710, 0, 0, 0, 939, 0, 0, 2091, 0,
	1593, 643, 643, 0, 0, 0, 683, 0, 909, 0,
	0, 643, 643, 0, 0, 0, 643, 643, 0, 0,
	2100, 643, 0, 2445, 0, 2445, 0, 0, 3712, 0,
	643, 0, 941, 0, 0, 0, 643, 643, 643, 914,
	0, 568, 568, 0, 0, 900, 643, 0, 2474, 785,
	901, 0, 0, 0, 910, 0, 0, 0, 0, 0,
	2096, 0, 618, 0, 0, 3712, 643, 0, 0, 0,
	0, 643, 0, 0, 0, 1112, 643, 0, 643, 670,
	0, 0, 899, 2093, 0, 687, 0, 690, 0, 692,
	693, 694, 695, 696, 0, 0, 0, 700, 0, 0,
	0, 704, 0, 0, 2087, 711, 0, 2098, 0, 904,
	741, 0, 0, 2539, 0, 681, 0, 903, 2550, 0,
	0, 0, 0, 1112, 0, 0, 0, 785, 785, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 741,
	741, 0, 0, 0, 906, 0, 909, 0, 741, 2104,
	905, 0, 682, 0, 0, 0, 2366, 2366, 2366, 2366,
	2366, 2366, 2366, 2366, 2366, 2366, 2366, 2366, 683, 0,
	0, 0, 0, 1593, 0, 0, 0, 914, 1591, 741,
	0, 0, 0, 741, 42, 0, 0, 2122, 0, 0,
	0, 0, 0, 681, 681, 907, 0, 0, 0, 2624,
	0, 2097, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 643, 0, 0, 0, 0, 0, 2094, 0, 0,
	899, 0, 0, 683, 2092, 0, 0, 0, 2102, 0,
	0, 897, 808, 34, 0, 0, 0, 557, 0, 0,
	908, 2088, 1592, 0, 1592, 0, 0, 904, 0, 0,
	0, 911, 0, 0, 0, 1592, 0, 0, 0, 0,
	0, 0, 1591, 1591, 1591, 2095, 0, 2089, 0, 0,
	0, 0, 0, 2667, 0, 0, 0, 785, 550, 0,
	898, 0, 906, 0, 1593, 34, 913, 912, 905, 0,
	34, 0, 0, 0, 0, 0, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 843, 0, 0, 0, 643,
	0, 900, 0, 0, 0, 0, 901, 628, 631, 633,
	910, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 907, 0, 0, 0, 0, 0, 1593,
	0, 0, 0, 681, 0, 0, 0, 741, 0, 0,
	0, 0, 0, 0, 0, 0, 741, 0, 0, 0,
	0, 0, 0, 902, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 908, 0,
	0, 643, 0, 903, 643, 0, 0, 643, 643, 911,
	643, 643, 643, 916, 0, 643, 643, 1593, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 643,
	0, 0, 909, 0, 643, 0, 0, 0, 643, 643,
	0, 0, 2241, 0, 913, 912, 0, 643, 0, 0,
	0, 0, 0, 0, 1593, 0, 0, 0, 0, 0,
	0, 643, 0, 914, 643, 0, 0, 0, 0, 640,
	0, 0, 0, 0, 0, 0, 0, 0, 3164, 2366,
	0, 0, 0, 0, 0, 0, 0, 0, 643, 643,
	0, 643, 0, 0, 0, 2539, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 899, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 897, 0, 643,
	0, 902, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 904, 0, 0, 0, 0, 0, 741,
	643, 643, 741, 0, 741, 0, 0, 0, 0, 0,
	0, 916, 0, 0, 0, 0, 0, 741, 741, 0,
	682, 741, 0, 682, 681, 0, 898, 0, 906, 0,
	0, 0, 0, 0, 905, 0, 643, 0, 568, 0,
	0, 0, 0, 814, 722, 722, 1089, 0, 0, 2539,
	1099, 1100, 1101, 0, 0, 0, 0, 0, 0, 0,
	864, 0, 1682, 0, 0, 1683, 0, 0, 0, 1689,
	0, 1687, 0, 0, 0, 0, 1686, 1690, 1685, 907,
	1691, 0, 0, 0, 1684, 1105, 1106, 1688, 0, 0,
	0, 0, 643, 0, 1692, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3321, 2935, 0,
	0, 0, 2366, 0, 1591, 741, 1591, 0, 0, 0,
	0, 0, 0, 0, 908, 1592, 0, 1591, 0, 0,
	0, 0, 0, 0, 0, 911, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 968, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 895, 981,
	913, 912, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 741, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 643, 643, 0, 0, 0, 0, 0,
	643, 741, 643, 643, 643, 643, 643, 643, 643, 643,
	643, 643, 643, 643, 0, 0, 643, 0, 643, 0,
	0, 0, 0, 643, 0, 643, 0, 0, 0, 643,
	0, 0, 0, 0, 0, 3038, 0, 643, 682, 0,
	0, 0, 0, 0, 643, 0, 0, 902, 643, 643,
	0, 0, 643, 0, 0, 0, 0, 0, 0, 900,
	930, 0, 0, 0, 901, 643, 2366, 0, 910, 0,
	0, 0, 0, 0, 0, 0, 0, 916, 835, 0,
	3063, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 845, 0, 0, 0, 0, 0, 741, 0, 854,
	856, 0, 858, 741, 0, 0, 0, 0, 0, 682,
	568, 0, 0, 0, 0, 0, 0, 0, 741, 0,
	0, 0, 1112, 1112, 1112, 1112, 0, 1112, 932, 0,
	0, 903, 0, 643, 0, 0, 0, 1734, 795, 795,
	1112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 946, 0, 0, 0, 0, 0, 0,
	909, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 682, 3132, 3133,
	643, 1592, 0, 0, 0, 814, 0, 3549, 1089, 0,
	0, 914, 1099, 1100, 1101, 0, 0, 741, 0, 0,
	0, 0, 0, 0, 1682, 682, 0, 1683, 0, 0,
	0, 1689, 681, 1687, 0, 681, 0, 0, 1686, 1690,
	1685, 0, 1691, 1851, 0, 0, 1684, 1105, 1106, 1688,
	0, 0, 0, 1112, 899, 0, 1692, 0, 0, 0,
	0, 0, 1592, 0, 1876, 0, 0, 741, 0, 0,
	0, 931, 0, 3195, 0, 0, 0, 643, 643, 643,
	1592, 904, 900, 0, 0, 0, 682, 901, 0, 0,
	0, 910, 0, 0, 0, 1920, 0, 0, 1922, 0,
	0, 0, 0, 0, 0, 2366, 2366, 0, 0, 2366,
	0, 0, 0, 0, 643, 643, 906, 0, 0, 0,
	0, 0, 905, 0, 643, 643, 643, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1591, 1569, 0,
	0, 0, 1572, 1573, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 903, 0, 0, 643, 0, 0,
	0, 0, 741, 933, 0, 0, 0, 907, 0, 1108,
	0, 2539, 0, 0, 1675, 0, 0, 34, 1096, 1097,
	1098, 0, 0, 909, 0, 3510, 0, 1090, 1091, 1092,
	1093, 1094, 1095, 934, 0, 1719, 935, 0, 0, 0,
	936, 0, 0, 0, 1562, 1563, 1564, 1565, 0, 0,
	0, 1567, 929, 643, 914, 0, 0, 0, 0, 0,
	0, 0, 937, 911, 0, 0, 0, 0, 0, 1580,
	1768, 0, 0, 0, 0, 0, 0, 741, 0, 0,
	1673, 0, 0, 0, 0, 1809, 0, 0, 682, 0,
	681, 0, 3342, 1592, 0, 785, 2255, 899, 913, 912,
	940, 1823, 0, 0, 0, 0, 741, 741, 922, 0,
	0, 0, 0, 0, 0, 0, 0, 938, 643, 0,
	1840, 0, 0, 1843, 904, 0, 0, 0, 643, 0,
	0, 0, 0, 643, 939, 0, 0, 0, 643, 0,
	0, 0, 0, 682, 643, 0, 0, 0, 0, 1875,
	0, 0, 0, 0, 0, 0, 0, 1883, 1884, 906,
	0, 681, 0, 0, 0, 905, 0, 0, 0, 0,
	0, 941, 0, 0, 0, 902, 1112, 1112, 1112, 1112,
	1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
	0, 0, 1112, 0, 0, 741, 0, 0, 1112, 0,
	0, 0, 1112, 741, 1592, 916, 0, 0, 0, 0,
	907, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1939, 0, 0, 0, 0, 643, 0, 0, 0, 681,
	643, 643, 1112, 1591, 0, 0, 0, 3460, 3461, 3462,
	3463, 0, 0, 0, 0, 1112, 0, 0, 643, 0,
	0, 0, 785, 0, 0, 908, 0, 681, 0, 1592,
	0, 0, 722, 0, 0, 1953, 911, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 741, 1987, 0, 0,
	0, 0, 643, 0, 1591, 0, 0, 0, 0, 921,
	0, 913, 912, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1591, 0, 0, 0, 0, 1592, 681, 0,
	722, 0, 0, 0, 0, 0, 0, 643, 0, 0,
	0, 0, 0, 0, 795, 0, 1956, 1957, 1958, 1959,
	1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969,
	0, 1108, 0, 1972, 1592, 1978, 0, 0, 1982, 0,
	1096, 1097, 1098, 0, 0, 0, 0, 3277, 0, 1090,
	1091, 1092, 1093, 1094, 1095, 0, 0, 0, 902, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	643, 0, 0, 0, 0, 0, 0, 722, 0, 722,
	0, 0, 0, 0, 0, 0, 0, 0, 916, 0,
	0, 0, 0, 643, 0, 0, 643, 0, 0, 0,
	0, 0, 0, 0, 722, 0, 0, 0, 0, 0,
	814, 0, 0, 1089, 0, 0, 0, 1099, 1100, 1101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 643,
	0, 0, 0, 0, 0, 0, 1689, 0, 1687, 643,
	0, 0, 643, 1686, 1690, 1685, 0, 1691, 0, 785,
	0, 1684, 1105, 1106, 1688, 0, 0, 0, 0, 722,
	681, 1692, 0, 0, 0, 1591, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 643, 643, 0, 0, 643, 0, 0, 0, 0,
	814, 0, 0, 1089, 0, 0, 0, 1099, 1100, 1101,
	0, 0, 0, 0, 0, 681, 0, 0, 0, 1682,
	0, 643, 1683, 0, 0, 0, 1689, 0, 1687, 0,
	643, 0, 643, 1686, 1690, 1685, 0, 1691, 0, 0,
	0, 1684, 1105, 1106, 1688, 0, 0, 0, 0, 0,
	0, 1692, 0, 0, 0, 0, 0, 1112, 1112, 0,
	0, 0, 0, 0, 0, 3714, 0, 0, 0, 0,
	0, 1112, 0, 1112, 0, 643, 1591, 0, 0, 0,
	0, 643, 1112, 0, 814, 0, 0, 1089, 0, 0,
	0, 1099, 1100, 1101, 0, 1112, 0, 0, 0, 0,
	0, 0, 0, 1682, 0, 643, 1683, 1112, 0, 0,
	1689, 1112, 1687, 0, 0, 0, 741, 1686, 1690, 1685,
	0, 1691, 0, 3714, 0, 1684, 1105, 1106, 1688, 643,
	0, 1591, 0, 0, 0, 1692, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3714, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	643, 0, 0, 0, 0, 0, 0, 2168, 0, 0,
	0, 0, 2173, 2174, 2175, 0, 0, 0, 0, 1591,
	643, 0, 0, 2182, 0, 0, 0, 0, 0, 0,
	0, 2194, 0, 2198, 2199, 0, 0, 0, 0, 2203,
	0, 0, 2207, 2208, 0, 0, 2215, 0, 2217, 2220,
	0, 0, 0, 0, 0, 0, 1591, 0, 0, 0,
	0, 0, 2242, 2243, 0, 0, 2247, 2248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2257, 2258, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2269, 0, 2270, 2271, 2272, 2273,
	2274, 0, 0, 2276, 0, 1112, 0, 2280, 0, 0,
	0, 2283, 2284, 0, 0, 2287, 2288, 0, 0, 2291,
	2292, 2293, 2294, 2295, 2296, 0, 0, 0, 0, 0,
	2302, 2303, 0, 0, 0, 0, 2308, 2309, 0, 2012,
	0, 814, 2316, 0, 1089, 0, 0, 0, 1099, 1100,
	1101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1682, 0, 0, 1683, 0, 0, 0, 1689, 0, 1687,
	0, 0, 0, 1987, 1686, 1690, 1685, 0, 1691, 550,
	0, 1112, 1684, 1105, 1106, 1688, 0, 0, 0, 2047,
	2047, 0, 1692, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1112, 1112, 0, 0, 0, 0, 1112,
	1112, 1112, 0, 0, 0, 0, 2140, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2025, 0, 1968, 1969,
	0, 1972, 1978, 0, 1112, 0, 1108, 0, 0, 0,
	0, 0, 0, 1112, 1112, 1096, 1097, 1098, 0, 0,
	0, 0, 2176, 2177, 1090, 1091, 1092, 1093, 1094, 1095,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2014, 0, 0, 0, 0, 0, 0,
	0, 1112, 1112, 0, 0, 0, 0, 0, 2222, 0,
	900, 0, 0, 0, 0, 901, 0, 0, 0, 910,
	2244, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1112, 0, 0, 0, 0, 0, 0, 0,
	1112, 1112, 0, 0, 2263, 0, 1108, 0, 0, 0,
	0, 0, 0, 0, 0, 1096, 1097, 1098, 0, 0,
	0, 0, 3253, 0, 1090, 1091, 1092, 1093, 1094, 1095,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 903, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 909, 0, 0, 0, 0, 2553, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2278, 3001,
	1108, 0, 0, 0, 0, 0, 0, 0, 2118, 1096,
	1097, 1098, 914, 2585, 0, 2047, 0, 2118, 1090, 1091,
	1092, 1093, 1094, 1095, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2609, 2610, 2611, 2612, 0, 0, 1987,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1569, 0, 0, 0, 899, 0, 1112, 1112, 0,
	722, 0, 1112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1112, 1112, 1112, 0,
	0, 0, 904, 2637, 2638, 0, 2641, 2642, 2643, 1112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2653, 2357,
	2358, 2427, 0, 2431, 0, 0, 0, 906, 0, 0,
	0, 2660, 0, 905, 0, 2371, 0, 0, 0, 2373,
	0, 0, 0, 0, 0, 0, 0, 0, 2382, 0,
	2452, 0, 2455, 2456, 2012, 2012, 2012, 2460, 0, 0,
	0, 0, 0, 0, 2395, 0, 0, 0, 0, 0,
	0, 0, 0, 814, 0, 0, 1089, 1112, 907, 0,
	1099, 1100, 1101, 0, 2407, 0, 0, 0, 0, 2411,
	0, 0, 1682, 0, 722, 1683, 0, 0, 0, 1689,
	722, 1687, 0, 0, 0, 0, 1686, 1690, 1685, 0,
	1691, 1112, 0, 0, 1684, 1105, 1106, 1688, 0, 2515,
	0, 0, 0, 908, 1692, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 911, 0, 0, 1108, 0, 0,
	0, 0, 34, 0, 0, 0, 1096, 1097, 1098, 0,
	0, 0, 0, 2923, 0, 1090, 1091, 1092, 1093, 1094,
	1095, 1112, 1112, 1112, 0, 0, 0, 2645, 900, 913,
	912, 0, 0, 901, 0, 1112, 0, 910, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1112, 0, 0, 2787, 0, 0, 0, 2014, 2014,
	2014, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 814,
	0, 0, 1089, 0, 0, 0, 1099, 1100, 1101, 2575,
	0, 0, 0, 0, 0, 0, 0, 0, 1682, 0,
	903, 1683, 0, 0, 0, 1689, 902, 1687, 0, 0,
	0, 2819, 1686, 1690, 1685, 0, 1691, 0, 0, 0,
	1684, 1105, 1106, 1688, 0, 0, 0, 0, 2657, 909,
	1692, 0, 2467, 0, 0, 0, 916, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2844, 2845, 2846, 0, 0, 0, 0, 0,
	914, 2118, 2467, 0, 0, 0, 0, 0, 0, 0,
	2500, 0, 2863, 0, 0, 2715, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2651, 0, 0,
	0, 0, 2893, 0, 0, 0, 0, 0, 0, 0,
	0, 2467, 0, 899, 0, 722, 0, 0, 2898, 0,
	0, 0, 1112, 0, 0, 0, 0, 2900, 2901, 2902,
	0, 0, 2905, 0, 0, 2908, 2909, 2910, 2911, 34,
	904, 0, 0, 0, 34, 34, 0, 0, 2920, 2921,
	0, 2922, 0, 0, 0, 0, 2047, 0, 2926, 2047,
	2928, 2929, 0, 2930, 2931, 2932, 2933, 2934, 0, 2683,
	0, 0, 2684, 0, 0, 906, 0, 0, 2689, 2690,
	2691, 905, 0, 0, 0, 0, 0, 0, 0, 1112,
	0, 0, 0, 0, 0, 0, 0, 2714, 0, 0,
	34, 0, 2012, 0, 0, 0, 2723, 2724, 0, 1112,
	814, 0, 0, 1089, 0, 795, 0, 1099, 1100, 1101,
	0, 0, 0, 0, 0, 0, 907, 0, 0, 1682,
	0, 0, 1683, 0, 0, 0, 1689, 0, 1687, 0,
	2981, 0, 0, 1686, 1690, 1685, 0, 1691, 0, 0,
	2806, 1684, 1105, 1106, 1688, 0, 0, 2761, 0, 2762,
	0, 1692, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 908, 0, 0, 0, 0, 0, 2827, 0, 722,
	0, 0, 911, 0, 0, 0, 0, 2792, 722, 0,
	0, 0, 0, 0, 814, 0, 0, 1089, 0, 0,
	0, 1099, 1100, 1101, 0, 0, 1768, 0, 2800, 2801,
	0, 0, 0, 1682, 0, 2640, 1683, 913, 912, 1112,
	1689, 0, 1687, 0, 0, 0, 0, 1686, 1690, 1685,
	0, 1691, 0, 0, 0, 1684, 1105, 1106, 1688, 0,
	0, 0, 0, 0, 0, 1692, 2014, 0, 0, 1108,
	0, 0, 0, 0, 0, 0, 0, 0, 1096, 1097,
	1098, 0, 0, 0, 0, 2855, 1112, 1090, 1091, 1092,
	1093, 1094, 1095, 0, 0, 0, 0, 1112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 902, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3112, 0, 0, 3115, 0,
	0, 0, 0, 0, 3118, 3119, 3120, 0, 0, 3123,
	3124, 3125, 0, 0, 916, 0, 3128, 3129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3135, 3136, 0, 0, 3140, 0, 0, 0,
	0, 2118, 0, 0, 2467, 0, 2467, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2118,
	2118, 0, 0, 2467, 0, 0, 0, 0, 0, 3151,
	0, 0, 0, 2047, 2047, 0, 0, 2047, 0, 0,
	0, 0, 0, 0, 0, 1108, 0, 0, 0, 0,
	0, 2947, 2948, 0, 1096, 1097, 1098, 0, 2952, 0,
	0, 0, 0, 1090, 1091, 1092, 1093, 1094, 1095, 0,
	0, 0, 0, 0, 2966, 0, 2967, 0, 0, 0,
	0, 2968, 0, 2012, 0, 0, 1112, 2012, 117, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 814, 2979, 0, 1089, 0, 120, 3046, 1099, 1100,
	1101, 0, 0, 0, 0, 0, 0, 2467, 3260, 0,
	1682, 0, 0, 1683, 0, 0, 0, 1689, 0, 1687,
	0, 0, 0, 0, 1686, 1690, 1685, 0, 1691, 0,
	0, 0, 1684, 1105, 1106, 1688, 814, 0, 0, 1089,
	0, 0, 1692, 1099, 1100, 1101, 0, 0, 0, 0,
	0, 0, 3284, 3285, 0, 1682, 0, 0, 1683, 3292,
	0, 0, 1689, 3294, 1687, 0, 0, 0, 0, 1686,
	1690, 1685, 3297, 1691, 722, 0, 0, 1684, 1105, 1106,
	1688, 3057, 0, 0, 0, 0, 0, 1692, 0, 0,
	0, 0, 814, 722, 0, 1089, 0, 0, 0, 1099,
	1100, 1101, 0, 0, 0, 0, 126, 0, 0, 0,
	0, 1682, 0, 0, 0, 0, 0, 2014, 1689, 0,
	1687, 2014, 0, 0, 0, 1686, 1690, 1685, 3091, 1691,
	0, 0, 0, 1684, 1105, 1106, 1688, 122, 0, 0,
	0, 0, 0, 1692, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 0, 0, 0, 1108, 0, 0, 0,
	0, 0, 0, 0, 0, 1096, 1097, 1098, 0, 0,
	2047, 0, 2711, 115, 1090, 1091, 1092, 1093, 1094, 1095,
	127, 0, 0, 0, 0, 0, 0, 0, 128, 3035,
	0, 0, 0, 0, 0, 722, 121, 0, 0, 0,
	0, 3198, 0, 0, 0, 3141, 3142, 3143, 0, 0,
	2118, 0, 0, 3220, 0, 0, 0, 0, 0, 116,
	34, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 34, 0, 0, 3426, 0, 0, 3429, 0,
	1108, 0, 3155, 0, 0, 0, 0, 34, 0, 1096,
	1097, 1098, 1906, 0, 3171, 0, 1992, 117, 1090, 1091,
	1092, 1093, 1094, 1095, 0, 0, 0, 0, 0, 0,
	0, 0, 3450, 0, 0, 120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 0, 722,
	0, 0, 0, 0, 0, 0, 110, 0, 0, 130,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 134, 0, 131, 0, 0, 0,
	0, 118, 0, 0, 132, 34, 0, 0, 0, 722,
	0, 0, 0, 0, 0, 0, 0, 0, 900, 930,
	124, 0, 0, 901, 0, 0, 0, 910, 0, 0,
	0, 0, 0, 0, 0, 3530, 125, 3531, 0, 0,
	0, 0, 135, 2086, 0, 0, 114, 0, 0, 0,
	0, 2099, 0, 0, 0, 126, 0, 0, 0, 0,
	1902, 0, 119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 34, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 932, 0, 0,
	903, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 3332, 3384, 2467, 0, 0, 0, 1912, 0,
	0, 0, 0, 3592, 2105, 0, 0, 0, 0, 909,
	0, 0, 1904, 0, 0, 0, 0, 3411, 0, 127,
	0, 0, 0, 0, 0, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 3615, 121, 0, 1905, 2101, 0,
	914, 0, 0, 900, 0, 0, 0, 0, 901, 0,
	0, 0, 910, 0, 0, 0, 0, 1108, 1916, 0,
	0, 0, 0, 0, 0, 900, 1096, 1097, 1098, 2467,
	901, 2017, 0, 3399, 910, 1090, 1091, 1092, 1093, 1094,
	1095, 0, 0, 899, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3419, 0, 722, 722,
	931, 3474, 1108, 0, 0, 0, 0, 0, 0, 0,
	904, 1096, 1097, 1098, 0, 903, 0, 0, 0, 0,
	1090, 1091, 1092, 1093, 1094, 1095, 2091, 0, 0, 0,
	0, 0, 0, 0, 0, 110, 1907, 903, 130, 0,
	0, 0, 0, 0, 909, 906, 0, 0, 2100, 0,
	0, 905, 0, 0, 0, 0, 0, 1913, 1108, 0,
	1908, 0, 0, 0, 0, 131, 909, 1096, 1097, 1098,
	118, 0, 0, 132, 0, 914, 1090, 1091, 1092, 1093,
	1094, 1095, 0, 0, 0, 0, 0, 3035, 2096, 124,
	0, 0, 933, 0, 1914, 722, 907, 914, 0, 0,
	1915, 0, 0, 0, 0, 125, 0, 0, 0, 1909,
	0, 2093, 0, 0, 0, 1910, 0, 0, 899, 0,
	0, 0, 934, 0, 0, 935, 0, 0, 0, 936,
	0, 119, 2087, 0, 0, 2098, 0, 0, 3529, 0,
	899, 929, 0, 34, 0, 904, 0, 0, 0, 0,
	0, 937, 911, 0, 0, 0, 0, 0, 3775, 0,
	0, 0, 0, 1903, 2761, 0, 0, 904, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2104, 722, 0,
	906, 0, 0, 0, 0, 926, 905, 913, 912, 940,
	0, 0, 0, 0, 0, 0, 0, 3576, 0, 0,
	0, 0, 906, 0, 0, 0, 938, 0, 905, 0,
	3587, 0, 42, 0, 0, 2082, 0, 0, 0, 0,
	0, 0, 0, 939, 0, 0, 0, 0, 0, 2097,
	0, 907, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2094, 0, 0, 0, 0,
	0, 0, 2092, 907, 0, 0, 2102, 0, 0, 0,
	941, 0, 0, 0, 902, 0, 0, 0, 0, 2088,
	0, 0, 0, 0, 0, 0, 908, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 911, 0, 0,
	0, 0, 0, 2095, 916, 2089, 0, 0, 908, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 911,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2260, 0, 913, 912, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2246, 2761, 913, 912, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 902,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 902, 0, 0, 0, 0, 0, 0, 0, 916,
	0, 0, 0, 0, 0, 0, 0, 0, 3746, 0,
	0, 0, 0, 0, 0, 0, 1590, 0, 0, 0,
	0, 916, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1595, 164, 1601, 181, 648, 1611, 230,
	267, 482, 1598, 1643, 327, 1648, 380, 384, 1672, 473,
	1605, 1608, 1618, 1621, 238, 1626, 653, 1634, 659, 1644,
	665, 1663, 449, 1669, 655, 656, 661, 169, 563, 472,
	543, 1657, 1603, 1661, 334, 1654, 1630, 1670, 1647, 1659,
	1640, 1645, 177, 1632, 1633, 1637, 1646, 657, 654, 658,
	664, 652, 662, 649, 660, 1667, 371, 305, 722, 522,
	398, 176, 222, 209, 251, 293, 405, 1602, 1620, 283,
	453, 218, 307, 1653, 197, 340, 1666, 429, 304, 1660,
	412, 432, 1622, 324, 203, 363, 419, 420, 646, 651,
	1610, 667, 1597, 207, 208, 329, 189, 337, 534, 500,
	392, 350, 348, 1628, 315, 372, 529, 1600, 0, 237,
	0, 232, 328, 468, 195, 447, 366, 333, 287, 395,
	424, 234, 219, 220, 263, 365, 253, 205, 458, 497,
	501, 499, 495, 492, 496, 493, 494, 498, 254, 491,
	0, 466, 475, 509, 489, 517, 474, 514, 484, 229,
	513, 478, 477, 523, 504, 505, 459, 519, 490, 488,
	481, 480, 476, 1668, 154, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 165, 1596, 166, 167, 168, 170,
	171, 172, 645, 173, 174, 175, 178, 179, 180, 182,
	542, 183, 184, 185, 186, 187, 188, 479, 647, 190,
	191, 192, 193, 194, 196, 198, 199, 200, 201, 202,
	204, 206, 1612, 1613, 1614, 650, 1615, 1616, 1617, 210,
	211, 212, 213, 214, 215, 1619, 216, 217, 221, 223,
	224, 225, 226, 227, 228, 231, 1623, 233, 235, 1624,
	236, 239, 1625, 240, 241, 242, 243, 244, 245, 246,
	247, 483, 248, 1627, 249, 250, 252, 1629, 255, 256,
	257, 258, 259, 1631, 260, 485, 486, 261, 262, 264,
	265, 266, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 1635, 280, 281, 282, 284, 1636,
	285, 286, 289, 290, 291, 292, 1638, 294, 502, 1639,
	295, 296, 297, 1641, 1642, 298, 299, 300, 301, 302,
	303, 306, 503, 308, 309, 310, 311, 312, 313, 314,
	544, 316, 317, 318, 319, 320, 321, 322, 506, 507,
	323, 325, 326, 508, 510, 511, 663, 341, 342, 343,
	344, 345, 346, 347, 349, 1650, 351, 352, 353, 512,
	354, 355, 356, 357, 1651, 358, 359, 360, 361, 362,
	364, 367, 368, 369, 370, 1652, 373, 374, 375, 376,
	377, 378, 379, 381, 382, 383, 385, 386, 387, 545,
	388, 389, 390, 391, 515, 393, 394, 546, 396, 397,
	399, 400, 401, 402, 403, 404, 561, 1655, 406, 516,
	407, 408, 409, 410, 411, 1656, 413, 414, 415, 416,
	417, 418, 421, 422, 423, 425, 426, 518, 427, 428,
	1658, 430, 431, 666, 433, 434, 435, 436, 437, 1662,
	562, 438, 520, 439, 521, 440, 441, 442, 443, 444,
	445, 446, 448, 1664, 1665, 450, 451, 452, 454, 455,
	456, 457, 460, 461, 462, 463, 464, 1671, 465, 467,
	469, 547, 524, 525, 526, 527, 528, 530, 531, 532,
	533, 470, 471, 487, 338, 332, 288, 330, 331, 335,
	336, 339, 1649, 1599, 1604, 1606, 1607, 1609, 0, 0,
	0, 0, 0, 0, 0, 0, 1119, 0, 0, 0,
	0, 0, 0, 814, 0, 0, 1089, 0, 0, 1588,
	1099, 1100, 1101, 1130, 1132, 1116, 1159, 1180, 0, 1231,
	1277, 1247, 1102, 1364, 1370, 1103, 1431, 1435, 0, 1113,
	1161, 1110, 1211, 1226, 1241, 1253, 1109, 1114, 1107, 1368,
	1115, 1512, 1523, 1543, 1104, 1105, 1106, 1111, 1504, 1561,
	1330, 1489, 1141, 0, 1118, 1455, 0, 0, 1378, 1493,
	0, 0, 1155, 0, 0, 0, 0, 1303, 1292, 1326,
	1439, 1264, 1384, 1192, 1351, 1529, 1421, 1340, 0, 1535,
	1453, 1154, 1220, 1204, 1256, 1321, 1462, 1137, 1221, 1296,
	1527, 1216, 1342, 0, 1183, 1386, 1528, 1491, 1339, 1502,
	1472, 1497, 1227, 1365, 1190, 1412, 1479, 1480, 1150, 1263,
	1185, 1538, 1135, 1195, 1203, 1373, 1174, 1381, 1559, 1313,
	1446, 1396, 1394, 0, 1353, 1422, 1554, 0, 0, 1240,
	0, 1234, 1372, 1546, 1181, 1520, 1415, 1377, 1315, 1449,
	1484, 1236, 1217, 1218, 1274, 1414, 1259, 1193, 1534, 1310,
	1314, 1312, 1308, 1305, 1309, 1306, 1307, 1311, 1261, 1304,
	0, 0, 1151, 1371, 1299, 1469, 1149, 1418, 1257, 1230,
	0, 0, 0, 1536, 1350, 1352, 0, 1505, 1300, 1298,
	1209, 1208, 1152, 1537, 1121, 1122, 1123, 1124, 1125, 1126,
	1127, 1128, 1129, 1131, 1133, 1134, 1138, 1139, 1140, 1142,
	1143, 1144, 1145, 1146, 1147, 1148, 1156, 1157, 1158, 1160,
	1163, 1164, 1165, 1167, 1168, 1169, 1170, 1171, 1172, 1175,
	1176, 1177, 1178, 1179, 1182, 1184, 1186, 1187, 1188, 1189,
	1191, 1194, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1205,
	1206, 0, 1207, 1210, 1212, 1213, 1214, 1215, 1219, 1222,
	1223, 1224, 1225, 1228, 1229, 1232, 1233, 1235, 1237, 1238,
	1239, 1242, 0, 1243, 1244, 1245, 1246, 1248, 1249, 1250,
	1251, 1252, 1254, 0, 0, 1255, 1258, 1260, 1262, 1265,
	1266, 1267, 1268, 0, 1269, 1270, 1271, 1272, 1273, 1275,
	0, 1276, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285,
	1286, 1287, 1288, 1289, 1290, 1291, 1294, 1295, 1297, 0,
	1301, 1302, 1317, 1318, 1319, 1320, 1322, 1324, 1325, 1323,
	1327, 1328, 1329, 1331, 1332, 1333, 1334, 1335, 1336, 1337,
	1338, 1341, 1343, 1344, 0, 1345, 1346, 0, 1347, 1348,
	1349, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362,
	1363, 1366, 1367, 1369, 1383, 1385, 0, 1387, 1388, 1389,
	1390, 1391, 1392, 1393, 1395, 1397, 1398, 1399, 1400, 1401,
	1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411,
	1413, 1416, 1417, 1419, 1420, 1423, 1424, 1425, 1426, 1427,
	1428, 1429, 1430, 1432, 1433, 1434, 1436, 1437, 1438, 1440,
	1441, 1442, 1443, 1444, 1445, 1447, 1448, 1450, 1451, 1452,
	0, 1454, 1456, 1457, 1458, 1459, 1460, 1461, 1464, 1463,
	1465, 1466, 1467, 1468, 1470, 1471, 1473, 1474, 1475, 1476,
	1477, 1478, 1481, 1482, 1483, 1485, 1486, 1487, 1488, 1490,
	1492, 1494, 1496, 1495, 1498, 1499, 1500, 1501, 1503, 1506,
	1507, 1508, 1509, 1510, 1511, 1513, 1514, 1515, 1516, 1517,
	1518, 1519, 1521, 0, 1522, 1524, 1525, 1526, 1530, 1531,
	1532, 1533, 1539, 1540, 1541, 1542, 1544, 0, 0, 1545,
	1547, 1548, 1549, 1550, 1551, 1552, 1553, 1555, 1556, 1557,
	1558, 0, 1560, 1293, 1382, 1376, 1316, 1374, 1375, 1379,
	1380, 0, 0, 1136, 1153, 1162, 1166, 1173, 0, 1108,
	0, 0, 0, 0, 0, 0, 0, 0, 1096, 1097,
	1098, 0, 0, 0, 0, 0, 0, 1090, 1091, 1092,
	1093, 1094, 1095, 1590, 0, 3713, 778, 0, 0, 0,
	0, 826, 0, 0, 0, 0, 0, 0, 0, 0,
	1595, 164, 1601, 181, 648, 1611, 230, 267, 482, 1598,
	1643, 327, 1648, 380, 384, 1672, 473, 1605, 1608, 1618,
	1621, 238, 1626, 653, 1634, 659, 1644, 665, 1663, 449,
	1669, 655, 656, 661, 169, 563, 472, 543, 1657, 1603,
	1661, 334, 1654, 1630, 1670, 1647, 1659, 1640, 1645, 177,
	1632, 1633, 1637, 1646, 657, 654, 658, 664, 652, 662,
	649, 660, 1667, 371, 305, 0, 522, 398, 176, 222,
	209, 251, 293, 405, 1602, 1620, 283, 453, 218, 307,
	1653, 197, 340, 1666, 429, 304, 1660, 412, 432, 1622,
	324, 203, 363, 419, 420, 646, 651, 1610, 667, 1597,
	207, 208, 329, 189, 337, 534, 500, 392, 350, 348,
	1628, 315, 372, 529, 1600, 0, 237, 0, 232, 328,
	468, 195, 447, 366, 333, 287, 395, 424, 234, 219,
	220, 263, 365, 253, 205, 458, 497, 501, 499, 495,
	492, 496, 493, 494, 498, 254, 491, 0, 466, 475,
	509, 489, 517, 474, 514, 484, 229, 513, 478, 477,
	523, 504, 505, 459, 519, 490, 488, 481, 480, 476,
	1668, 154, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 165, 1596, 166, 167, 168, 170, 171, 172, 645,
	173, 174, 175, 178, 179, 180, 182, 542, 183, 184,
	185, 186, 187, 188, 479, 647, 190, 191, 192, 193,
	194, 196, 198, 199, 200, 201, 202, 204, 206, 1612,
	1613, 1614, 650, 1615, 1616, 1617, 210, 211, 212, 213,
	214, 215, 1619, 216, 217, 221, 223, 224, 225, 226,
	227, 228, 231, 1623, 233, 235, 1624, 236, 239, 1625,
	240, 241, 242, 243, 244, 245, 246, 247, 483, 248,
	1627, 249, 250, 252, 1629, 255, 256, 257, 258, 259,
	1631, 260, 485, 486, 261, 262, 264, 265, 266, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 1635, 280, 281, 282, 284, 1636, 285, 286, 289,
	290, 291, 292, 1638, 294, 502, 1639, 295, 296, 297,
	1641, 1642, 298, 299, 300, 301, 302, 303, 306, 503,
	308, 309, 310, 311, 312, 313, 314, 544, 316, 317,
	318, 319, 320, 321, 322, 506, 507, 323, 325, 326,
	508, 510, 511, 663, 341, 342, 343, 344, 345, 346,
	347, 349, 1650, 351, 352, 353, 512, 354, 355, 356,
	357, 1651, 358, 359, 360, 361, 362, 364, 367, 368,
	369, 370, 1652, 373, 374, 375, 376, 377, 378, 379,
	381, 382, 383, 385, 386, 387, 545, 388, 389, 390,
	391, 515, 393, 394, 546, 396, 397, 399, 400, 401,
	402, 403, 404, 561, 1655, 406, 516, 407, 408, 409,
	410, 411, 1656, 413, 414, 415, 416, 417, 418, 421,
	422, 423, 425, 426, 518, 427, 428, 1658, 430, 431,
	666, 433, 434, 435, 436, 437, 1662, 562, 438, 520,
	439, 521, 440, 441, 442, 443, 444, 445, 446, 448,
	1664, 1665, 450, 451, 452, 454, 455, 456, 457, 460,
	461, 462, 463, 464, 1671, 465, 467, 469, 547, 524,
	525, 526, 527, 528, 530, 531, 532, 533, 470, 471,
	487, 338, 332, 288, 330, 331, 335, 336, 339, 1649,
	1599, 1604, 1606, 1607, 1609, 1590, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1595, 164, 1601, 181, 648, 1611, 230, 267,
	482, 1598, 1643, 327, 1648, 380, 384, 1672, 473, 1605,
	1608, 1618, 1621, 238, 1626, 653, 1634, 659, 1644, 665,
	1663, 449, 1669, 655, 656, 661, 169, 563, 472, 543,
	1657, 1603, 1661, 334, 1654, 1630, 1670, 1647, 1659, 1640,
	1645, 177, 1632, 1633, 1637, 1646, 657, 654, 658, 664,
	652, 662, 649, 660, 1667, 371, 305, 0, 522, 398,
	176, 222, 209, 251, 293, 405, 1602, 1620, 283, 453,
	218, 307, 1653, 197, 340, 1666, 429, 304, 1660, 412,
	432, 1622, 324, 203, 363, 419, 420, 646, 651, 1610,
	667, 1597, 207, 208, 329, 189, 337, 534, 500, 392,
	350, 348, 1628, 315, 372, 529, 1600, 0, 237, 0,
	232, 328, 468, 195, 447, 366, 333, 287, 395, 424,
	234, 219, 220, 263, 365, 253, 205, 458, 497, 501,
	499, 495, 492, 496, 493, 494, 498, 254, 491, 0,
	466, 475, 509, 489, 517, 474, 514, 484, 229, 513,
	478, 477, 523, 504, 505, 459, 519, 490, 488, 481,
	480, 476, 1668, 154, 155, 156, 157, 158, 159, 160,
	161, 162, 163, 165, 1596, 166, 167, 168, 170, 171,
	172, 645, 173, 174, 175, 178, 179, 180, 182, 542,
	183, 184, 185, 186, 187, 188, 479, 647, 190, 191,
	192, 193, 194, 196, 198, 199, 200, 201, 202, 204,
	206, 1612, 1613, 1614, 650, 1615, 1616, 1617, 210, 211,
	212, 213, 214, 215, 1619, 216, 217, 221, 223, 224,
	225, 226, 227, 228, 231, 1623, 233, 235, 1624, 236,
	239, 1625, 240, 241, 242, 243, 244, 245, 246, 247,
	483, 248, 1627, 249, 250, 252, 1629, 255, 256, 257,
	258, 259, 1631, 260, 485, 486, 261, 262, 264, 265,
	266, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 1635, 280, 281, 282, 284, 1636, 285,
	286, 289, 290, 291, 292, 1638, 294, 502, 1639, 295,
	296, 297, 1641, 1642, 298, 299, 300, 301, 302, 303,
	306, 503, 308, 309, 310, 311, 312, 313, 314, 544,
	316, 317, 318, 319, 320, 321, 322, 506, 507, 323,
	325, 326, 508, 510, 511, 663, 341, 342, 343, 344,
	345, 346, 347, 349, 1650, 351, 352, 353, 512, 354,
	355, 356, 357, 1651, 358, 359, 360, 361, 362, 364,
	367, 368, 369, 370, 1652, 373, 374, 375, 376, 377,
	378, 379, 381, 382, 383, 385, 386, 387, 545, 388,
	389, 390, 391, 515, 393, 394, 546, 396, 397, 399,
	400, 401, 402, 403, 404, 561, 1655, 406, 516, 407,
	408, 409, 410, 411, 1656, 413, 414, 415, 416, 417,
	418, 421, 422, 423, 425, 426, 518, 427, 428, 1658,
	430, 431, 666, 433, 434, 435, 436, 437, 1662, 562,
	438, 520, 439, 521, 440, 441, 442, 443, 444, 445,
	446, 448, 1664, 1665, 450, 451, 452, 454, 455, 456,
	457, 460, 461, 462, 463, 464, 1671, 465, 467, 469,
	547, 524, 525, 526, 527, 528, 530, 531, 532, 533,
	470, 471, 487, 338, 332, 288, 330, 331, 335, 336,
	339, 1649, 1599, 1604, 1606, 1607, 1609, 1590, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1595, 164, 1601, 181, 648, 1611,
	2236, 267, 482, 1598, 1643, 327, 1648, 380, 384, 1672,
	473, 1605, 1608, 1618, 1621, 238, 1626, 653, 1634, 659,
	1644, 665, 1663, 449, 1669, 655, 656, 661, 169, 563,
	472, 543, 1657, 1603, 1661, 334, 1654, 1630, 1670, 1647,
	1659, 1640, 1645, 177, 1632, 1633, 1637, 1646, 657, 654,
	658, 664, 652, 662, 649, 660, 1667, 371, 305, 0,
	522, 398, 176, 222, 209, 251, 293, 2234, 1602, 1620,
	283, 453, 218, 307, 1653, 197, 340, 1666, 429, 304,
	1660, 412, 432, 1622, 324, 203, 363, 419, 420, 646,
	651, 1610, 667, 1597, 207, 208, 329, 189, 337, 534,
	500, 392, 350, 348, 1628, 315, 372, 529, 1600, 0,
	237, 0, 232, 328, 468, 195, 447, 366, 333, 287,
	395, 424, 234, 219, 220, 263, 365, 253, 205, 458,
	497, 501, 499, 495, 492, 496, 493, 494, 498, 254,
	491, 0, 466, 475, 509, 489, 517, 474, 514, 484,
	229, 513, 478, 477, 523, 504, 505, 459, 519, 490,
	488, 481, 480, 476, 1668, 154, 155, 156, 157, 158,
	2235, 160, 161, 162, 163, 165, 1596, 166, 167, 168,
	170, 171, 172, 645, 173, 174, 175, 178, 179, 180,
	182, 542, 183, 184, 185, 186, 187, 188, 479, 647,
	190, 191, 192, 193, 194, 196, 198, 199, 200, 201,
	202, 204, 206, 1612, 1613, 1614, 650, 1615, 1616, 1617,
	210, 211, 212, 213, 214, 215, 1619, 216, 217, 221,
	223, 224, 225, 226, 227, 228, 231, 1623, 233, 235,
	1624, 236, 239, 1625, 240, 241, 242, 243, 244, 245,
	246, 247, 483, 248, 1627, 249, 250, 252, 1629, 255,
	256, 257, 258, 259, 1631, 260, 485, 486, 261, 262,
	264, 265, 266, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 1635, 280, 281, 282, 284,
	1636, 285, 286, 289, 290, 291, 292, 1638, 294, 502,
	1639, 295, 296, 297, 1641, 1642, 298, 299, 300, 301,
	302, 303, 306, 503, 308, 309, 310, 311, 312, 313,
	314, 544, 316, 317, 318, 319, 320, 321, 322, 506,
	507, 323, 325, 326, 508, 510, 511, 663, 341, 342,
	343, 344, 345, 346, 347, 349, 1650, 351, 352, 353,
	512, 354, 355, 356, 357, 1651, 358, 359, 360, 361,
	362, 364, 367, 368, 369, 370, 1652, 373, 374, 375,
	376, 377, 378, 379, 381, 382, 383, 385, 386, 387,
	545, 388, 389, 390, 391, 515, 393, 394, 546, 396,
	397, 399, 400, 401, 402, 403, 404, 561, 1655, 406,
	516, 407, 408, 409, 410, 411, 1656, 413, 414, 415,
	416, 417, 418, 421, 422, 423, 425, 426, 518, 427,
	428, 1658, 430, 431, 666, 433, 434, 435, 436, 437,
	1662, 562, 438, 520, 439, 521, 440, 441, 442, 443,
	444, 445, 446, 448, 1664, 1665, 450, 451, 452, 454,
	455, 456, 457, 460, 461, 462, 463, 464, 1671, 465,
	467, 469, 547, 524, 525, 526, 527, 528, 530, 531,
	532, 533, 470, 471, 487, 338, 332, 288, 330, 331,
	335, 336, 339, 1649, 1599, 1604, 1606, 1607, 1609, 740,
	0, 1064, 778, 0, 0, 0, 600, 826, 0, 0,
	0, 0, 0, 611, 612, 613, 1595, 164, 1601, 181,
	648, 1611, 230, 267, 0, 1598, 1643, 327, 1648, 380,
	384, 1672, 0, 1605, 1608, 1618, 1621, 238, 1626, 653,
	1634, 659, 1644, 665, 1663, 449, 1669, 655, 656, 661,
	169, 739, 472, 543, 1657, 1603, 1661, 2542, 1654, 1630,
	1670, 1647, 1659, 1640, 1645, 177, 1632, 1633, 1637, 1646,
	657, 654, 658, 664, 652, 662, 649, 660, 1667, 371,
	305, 0, 0, 398, 176, 222, 209, 251, 293, 405,
	1602, 1620, 283, 453, 218, 307, 1653, 197, 340, 1666,
	429, 304, 1660, 412, 432, 1622, 324, 203, 363, 419,
	420, 646, 651, 1610, 667, 1597, 207, 208, 329, 189,
	337, 0, 0, 392, 350, 348, 1628, 315, 372, 0,
	1600, 0, 237, 0, 232, 328, 468, 195, 447, 366,
	333, 287, 395, 424, 234, 219, 220, 263, 365, 253,
	205, 458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 466, 742, 732, 724, 725, 726,
	727, 728, 729, 0, 744, 745, 746, 747, 748, 459,
	738, 0, 723, 730, 731, 733, 1668, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 165, 1596, 166,
	167, 168, 170, 171, 172, 645, 173, 174, 175, 178,
	179, 180, 182, 542, 183, 184, 185, 186, 187, 188,
	0, 647, 190, 191, 192, 193, 194, 196, 198, 199,
	200, 201, 202, 204, 206, 1612, 1613, 1614, 650, 1615,
	1616, 1617, 210, 211, 212, 213, 214, 215, 1619, 216,
	217, 221, 223, 224, 225, 226, 227, 228, 231, 1623,
	233, 235, 1624, 236, 239, 1625, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 248, 1627, 249, 250, 252,
	1629, 255, 256, 257, 258, 259, 1631, 260, 0, 0,
	261, 262, 264, 265, 266, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 1635, 280, 281,
	282, 284, 1636, 285, 286, 289, 290, 291, 292, 1638,
	294, 0, 1639, 295, 296, 297, 1641, 1642, 298, 299,
	300, 301, 302, 303, 306, 0, 308, 309, 310, 311,
	312, 313, 314, 544, 316, 317, 318, 319, 320, 321,
	322, 2540, 0, 323, 325, 326, 0, 0, 0, 663,
	341, 342, 343, 344, 345, 346, 347, 349, 1650, 351,
	352, 353, 0, 354, 355, 356, 357, 1651, 358, 359,
	360, 361, 362, 364, 367, 368, 369, 370, 1652, 373,
	374, 375, 376, 377, 378, 379, 381, 382, 383, 385,
	386, 387, 545, 388, 389, 390, 391, 0, 393, 394,
	546, 396, 397, 399, 400, 401, 402, 403, 404, 561,
	1655, 406, 2120, 407, 408, 409, 410, 411, 1656, 413,
	414, 415, 416, 417, 418, 421, 422, 423, 425, 426,
	0, 427, 428, 1658, 430, 431, 666, 433, 434, 435,
	436, 437, 1662, 562, 438, 0, 439, 0, 440, 441,
	442, 443, 444, 445, 446, 448, 1664, 1665, 450, 451,
	452, 454, 455, 456, 457, 460, 461, 462, 463, 464,
	1671, 465, 467, 469, 547, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 470, 471, 0, 338, 332, 288,
	330, 331, 335, 336, 339, 1649, 1599, 1604, 1606, 1607,
	1609, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 608, 609, 610, 0, 0, 0, 0, 0, 0,
	2543, 2544, 604, 605, 606, 607, 642, 0, 818, 778,
	0, 0, 0, 814, 826, 804, 0, 0, 0, 0,
	0, 0, 0, 0, 164, 0, 181, 648, 0, 230,
	267, 809, 0, 800, 327, 0, 380, 384, 49, 473,
	823, 0, 0, 0, 238, 821, 653, 0, 659, 822,
	665, 820, 449, 0, 655, 656, 661, 169, 563, 472,
	543, 0, 0, 0, 815, 46, 0, 0, 0, 47,
	0, 0, 177, 0, 0, 0, 0, 657, 654, 658,
	664, 652, 662, 649, 660, 0, 371, 305, 0, 1570,
	398, 176, 222, 209, 251, 293, 405, 0, 0, 283,
	453, 218, 307, 0, 197, 340, 0, 429, 304, 0,
	412, 432, 0, 324, 203, 363, 419, 420, 646, 651,
	0, 667, 0, 207, 208, 329, 189, 337, 534, 500,
	392, 350, 348, 0, 315, 372, 529, 810, 0, 237,
	0, 232, 328, 468, 195, 447, 366, 333, 287, 395,
	424, 234, 219, 220, 263, 365, 253, 205, 458, 497,
	501, 499, 495, 492, 496, 493, 494, 498, 254, 491,
	0, 466, 475, 509, 489, 517, 474, 514, 484, 229,
	513, 478, 477, 523, 504, 505, 459, 519, 490, 488,
	481, 480, 476, 0, 154, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 165, 0, 166, 167, 168, 170,
	171, 172, 645, 173, 174, 175, 178, 179, 180, 182,
	542, 183, 184, 185, 186, 187, 188, 479, 647, 190,
	191, 192, 193, 194, 196, 198, 199, 200, 201, 202,
	204, 206, 0, 0, 0, 650, 0, 0, 0, 210,
	211, 212, 213, 214, 215, 0, 216, 217, 221, 223,
	224, 225, 226, 227, 228, 231, 0, 233, 235, 0,
	236, 239, 0, 240, 241, 242, 243, 244, 245, 246,
	247, 483, 248, 0, 249, 250, 252, 0, 255, 256,
	257, 258, 259, 0, 260, 485, 813, 261, 262, 264,
	265, 266, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 280, 281, 282, 284, 0,
	285, 286, 289, 290, 291, 292, 0, 294, 502, 0,
	295, 296, 297, 0, 0, 298, 299, 300, 301, 302,
	303, 306, 503, 308, 309, 310, 311, 312, 313, 314,
	544, 316, 317, 318, 319, 320, 321, 322, 506, 507,
	323, 325, 326, 508, 510, 511, 663, 341, 342, 343,
	344, 345, 346, 347, 349, 0, 351, 352, 353, 512,
	354, 355, 356, 357, 0, 358, 359, 360, 361, 362,
	364, 367, 368, 369, 370, 0, 373, 374, 375, 376,
	377, 378, 379, 381, 382, 383, 385, 386, 387, 545,
	388, 389, 390, 391, 825, 393, 394, 546, 396, 397,
	399, 400, 401, 402, 403, 404, 561, 0, 406, 516,
	407, 408, 409, 410, 411, 0, 413, 414, 415, 416,
	417, 418, 421, 422, 423, 425, 426, 518, 427, 428,
	0, 430, 431, 666, 433, 434, 435, 436, 437, 0,
	562, 438, 520, 439, 521, 440, 441, 442, 443, 444,
	445, 446, 448, 0, 0, 450, 451, 452, 454, 455,
	456, 457, 460, 461, 462, 463, 464, 0, 465, 467,
	469, 547, 524, 525, 526, 527, 528, 530, 531, 532,
	533, 470, 471, 487, 338, 332, 288, 330, 331, 335,
	336, 339, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 642, 0, 818, 778, 0, 0, 0, 814,
	826, 804, 0, 0, 805, 0, 0, 798, 799, 2009,
	164, 0, 181, 648, 0, 230, 267, 809, 0, 800,
	327, 0, 380, 384, 0, 473, 823, 0, 0, 2010,
	238, 821, 653, 0, 659, 822, 665, 820, 449, 0,
	655, 656, 661, 169, 563, 472, 543, 0, 0, 0,
	815, 0, 0, 0, 0, 0, 0, 0, 177, 0,
	0, 0, 0, 657, 654, 658, 664, 652, 662, 649,
	660, 0, 371, 305, 0, 522, 398, 176, 222, 209,
	251, 293, 405, 0, 0, 283, 453, 218, 307, 0,
	197, 340, 0, 429, 304, 0, 412, 432, 0, 324,
	203, 363, 419, 420, 646, 651, 0, 667, 0, 207,
	208, 329, 189, 337, 534, 500, 392, 350, 348, 0,
	315, 372, 529, 810, 0, 237, 0, 232, 328, 468,
	195, 447, 366, 333, 287, 395, 424, 234, 219, 220,
	263, 365, 253, 205, 458, 497, 501, 499, 495, 492,
	496, 493, 494, 498, 254, 491, 0, 466, 475, 509,
	489, 517, 474, 514, 484, 229, 513, 478, 477, 523,
	504, 505, 459, 519, 490, 488, 481, 480, 476, 2008,
	154, 155, 156, 157, 158, 159, 160, 161, 162, 163,
	165, 0, 166, 167, 168, 170, 171, 172, 645, 173,
	174, 175, 178, 179, 180, 182, 542, 183, 184, 185,
	186, 187, 188, 479, 647, 190, 191, 192, 193, 194,
	196, 198, 199, 200, 201, 202, 204, 206, 0, 0,
	0, 650, 0, 0, 0, 210, 211, 212, 213, 214,
	215, 0, 216, 217, 221, 223, 224, 225, 226, 227,
	228, 231, 0, 233, 235, 0, 236, 239, 0, 240,
	241, 242, 243, 244, 245, 246, 247, 483, 248, 0,
	249, 250, 252, 0, 255, 256, 257, 258, 259, 0,
	260, 485, 813, 261, 262, 264, 265, 266, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 280, 281, 282, 284, 0, 285, 286, 289, 290,
	291, 292, 0, 294, 502, 0, 295, 296, 297, 0,
	0, 298, 299, 300, 301, 302, 303, 306, 503, 308,
	309, 310, 311, 312, 313, 314, 544, 316, 317, 318,
	319, 320, 321, 322, 506, 507, 323, 325, 326, 508,
	510, 511, 663, 341, 342, 343, 344, 345, 346, 347,
	349, 0, 351, 352, 353, 512, 354, 355, 356, 357,
	0, 358, 359, 360, 361, 362, 364, 367, 368, 369,
	370, 0, 373, 374, 375, 376, 377, 378, 379, 381,
	382, 383, 385, 386, 387, 545, 388, 389, 390, 391,
	825, 393, 394, 546, 396, 397, 399, 400, 401, 402,
	403, 404, 561, 0, 406, 516, 407, 408, 409, 410,
	411, 0, 413, 414, 415, 416, 417, 418, 421, 422,
	423, 425, 426, 518, 427, 428, 0, 430, 431, 666,
	433, 434, 435, 436, 437, 0, 562, 438, 520, 439,
	521, 440, 441, 442, 443, 444, 445, 446, 448, 0,
	0, 450, 451, 452, 454, 455, 456, 457, 460, 461,
	462, 463, 464, 0, 465, 467, 469, 547, 524, 525,
	526, 527, 528, 530, 531, 532, 533, 470, 471, 487,
	338, 332, 288, 330, 331, 335, 336, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 642, 0, 818,
	778, 0, 0, 0, 814, 826, 804, 0, 0, 0,
	805, 2006, 0, 798, 799, 164, 0, 181, 648, 0,
	230, 267, 809, 0, 800, 327, 0, 380, 384, 0,
	473, 823, 0, 0, 0, 238, 821, 653, 0, 659,
	822, 665, 820, 449, 0, 655, 656, 661, 169, 563,
	472, 543, 0, 0, 0, 815, 0, 0, 0, 0,
	0, 0, 0, 177, 0, 0, 0, 0, 657, 654,
	658, 664, 652, 662, 649, 660, 0, 371, 305, 0,
	522, 398, 176, 222, 209, 251, 293, 405, 0, 0,
	283, 453, 218, 307, 0, 197, 340, 0, 429, 304,
	0, 412, 432, 0, 324, 203, 363, 419, 420, 646,
	651, 0, 667, 0, 207, 208, 329, 189, 337, 534,
	500, 392, 350, 348, 0, 315, 372, 529, 810, 0,
	237, 0, 232, 328, 468, 195, 447, 366, 333, 287,
	395, 424, 234, 219, 220, 263, 365, 253, 205, 458,
	497, 501, 499, 495, 492, 496, 493, 494, 498, 254,
	491, 0, 466, 475, 509, 489, 517, 474, 514, 484,
	229, 513, 478, 477, 523, 504, 505, 459, 519, 490,
	488, 481, 480, 476, 0, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 165, 0, 166, 167, 168,
	170, 171, 172, 645, 173, 174, 175, 178, 179, 180,
	182, 542, 183, 184, 185, 186, 187, 188, 479, 647,
	190, 191, 192, 193, 194, 196, 198, 199, 200, 201,
	202, 204, 206, 0, 0, 0, 650, 0, 0, 0,
	210, 211, 212, 213, 214, 215, 0, 216, 217, 221,
	223, 224, 225, 226, 227, 228, 231, 0, 233, 235,
	0, 236, 239, 0, 240, 241, 242, 243, 244, 245,
	246, 247, 483, 248, 0, 249, 250, 252, 0, 255,
	256, 257, 258, 259, 0, 260, 485, 813, 261, 262,
	264, 265, 266, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 280, 281, 282, 284,
	0, 285, 286, 289, 290, 291, 292, 0, 294, 502,
	0, 295, 296, 297, 0, 0, 298, 299, 300, 301,
	302, 303, 306, 503, 308, 309, 310, 311, 312, 313,
	314, 544, 316, 317, 318, 319, 320, 321, 322, 506,
	507, 323, 325, 326, 508, 510, 511, 663, 341, 342,
	343, 344, 345, 346, 347, 349, 0, 351, 352, 353,
	512, 354, 355, 356, 357, 0, 358, 359, 360, 361,
	362, 364, 367, 368, 369, 370, 0, 373, 374, 375,
	376, 377, 378, 379, 381, 382, 383, 385, 386, 387,
	545, 388, 389, 390, 391, 825, 393, 394, 546, 396,
	397, 399, 400, 401, 402, 403, 404, 561, 0, 406,
	516, 407, 408, 409, 410, 411, 0, 413, 414, 415,
	416, 417, 418, 421, 422, 423, 425, 426, 518, 427,
	428, 0, 430, 431, 666, 433, 434, 435, 436, 437,
	0, 562, 438, 520, 439, 521, 440, 441, 442, 443,
	444, 445, 446, 448, 0, 0, 450, 451, 452, 454,
	455, 456, 457, 460, 461, 462, 463, 464, 0, 465,
	467, 469, 547, 524, 525, 526, 527, 528, 530, 531,
	532, 533, 470, 471, 487, 338, 332, 288, 330, 331,
	335, 336, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 642, 0, 818, 778, 0, 0, 0,
	814, 826, 804, 0, 0, 805, 0, 0, 798, 799,
	796, 164, 0, 181, 648, 0, 230, 267, 809, 0,
	800, 327, 0, 380, 384, 0, 473, 823, 0, 0,
	0, 238, 821, 653, 0, 659, 822, 665, 820, 449,
	0, 655, 656, 661, 169, 563, 472, 543, 0, 0,
	0, 815, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 0, 0, 657, 654, 658, 664, 652, 662,
	649, 660, 0, 371, 305, 0, 522, 398, 176, 222,
	209, 251, 293, 405, 0, 0, 283, 453, 218, 307,
	0, 197, 340, 0, 429, 304, 0, 412, 432, 0,
	324, 203, 363, 419, 420, 646, 651, 0, 667, 0,
	207, 208, 329, 189, 337, 534, 500, 392, 350, 348,
	0, 315, 372, 529, 810, 0, 237, 0, 232, 328,
	468, 195, 447, 366, 333, 287, 395, 424, 234, 219,
	220, 263, 365, 253, 205, 458, 497, 501, 499, 495,
	492, 496, 493, 494, 498, 254, 491, 0, 466, 475,
	509, 489, 517, 474, 514, 484, 229, 513, 478, 477,
	523, 504, 505, 459, 519, 490, 488, 481, 480, 476,
	0, 154, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 165, 0, 166, 167, 168, 170, 171, 172, 645,
	173, 174, 175, 178, 179, 180, 182, 542, 183, 184,
	185, 186, 187, 188, 479, 647, 190, 191, 192, 193,
	194, 196, 198, 199, 200, 201, 202, 204, 206, 0,
	0, 0, 650, 0, 0, 0, 210, 211, 212, 213,
	214, 215, 0, 216, 217, 221, 223, 224, 225, 226,
	227, 228, 231, 0, 233, 235, 0, 236, 239, 0,
	240, 241, 242, 243, 244, 245, 246, 247, 483, 248,
	0, 249, 250, 252, 0, 255, 256, 257, 258, 259,
	0, 260, 485, 813, 261, 262, 264, 265, 266, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 280, 281, 282, 284, 0, 285, 286, 289,
	290, 291, 292, 0, 294, 502, 0, 295, 296, 297,
	0, 0, 298, 299, 300, 301, 302, 303, 306, 503,
	308, 309, 310, 311, 312, 313, 314, 544, 316, 317,
	318, 319, 320, 321, 322, 506, 507, 323, 325, 326,
	508, 510, 511, 663, 341, 342, 343, 344, 345, 346,
	347, 349, 0, 351, 352, 353, 512, 354, 355, 356,
	357, 0, 358, 359, 360, 361, 362, 364, 367, 368,
	369, 370, 0, 373, 374, 375, 376, 377, 378, 379,
	381, 382, 383, 385, 386, 387, 545, 388, 389, 390,
	391, 825, 393, 394, 546, 396, 397, 399, 400, 401,
	402, 403, 404, 561, 0, 406, 516, 407, 408, 409,
	410, 411, 0, 413, 414, 415, 416, 417, 418, 421,
	422, 423, 425, 426, 518, 427, 428, 0, 430, 431,
	666, 433, 434, 435, 436, 437, 0, 562, 438, 520,
	439, 521, 440, 441, 442, 443, 444, 445, 446, 448,
	0, 0, 450, 451, 452, 454, 455, 456, 457, 460,
	461, 462, 463, 464, 0, 465, 467, 469, 547, 524,
	525, 526, 527, 528, 530, 531, 532, 533, 470, 471,
	487, 338, 332, 288, 330, 331, 335, 336, 339, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 642, 0,
	818, 778, 0, 0, 0, 814, 826, 804, 0, 1575,
	1996, 805, 0, 0, 798, 799, 164, 0, 181, 648,
	0, 230, 267, 809, 0, 800, 327, 0, 380, 384,
	0, 473, 823, 0, 0, 0, 238, 821, 653, 0,
	659, 822, 665, 820, 449, 0, 655, 656, 661, 169,
	563, 472, 543, 0, 0, 0, 815, 0, 0, 0,
	0, 0, 0, 0, 177, 0, 0, 0, 0, 657,
	654, 658, 664, 652, 662, 649, 660, 0, 371, 305,
	0, 522, 398, 176, 222, 209, 251, 293, 405, 0,
	0, 283, 453, 218, 307, 0, 197, 340, 0, 429,
	304, 0, 412, 432, 0, 324, 203, 363, 419, 420,
	646, 651, 0, 667, 0, 207, 208, 329, 189, 337,
	534, 500, 392, 350, 348, 0, 315, 372, 529, 810,
	0, 237, 0, 232, 328, 468, 195, 447, 366, 333,
	287, 395, 424, 234, 219, 220, 263, 365, 253, 205,
	458, 497, 501, 499, 495, 492, 496, 493, 494, 498,
	254, 491, 0, 466, 475, 509, 489, 517, 474, 514,
	484, 229, 513, 478, 477, 523, 504, 505, 459, 519,
	490, 488, 481, 480, 476, 2717, 154, 155, 156, 157,
	158, 159, 160, 161, 162, 163, 165, 0, 166, 167,
	168, 170, 171, 172, 645, 173, 174, 175, 178, 179,
	180, 182, 542, 183, 184, 185, 186, 187, 188, 479,
	647, 190, 191, 192, 193, 194, 196, 198, 199, 200,
	201, 202, 204, 206, 0, 0, 0, 650, 0, 0,
	0, 210, 211, 212, 213, 214, 215, 0, 216, 217,
	221, 223, 224, 225, 226, 227, 228, 231, 0, 233,
	235, 0, 236, 239, 0, 240, 241, 242, 243, 244,
	245, 246, 247, 483, 248, 0, 249, 250, 252, 0,
	255, 256, 257, 258, 259, 0, 260, 485, 813, 261,
	262, 264, 265, 266, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 280, 281, 282,
	284, 0, 285, 286, 289, 290, 291, 292, 0, 294,
	502, 0, 295, 296, 297, 0, 0, 298, 299, 300,
	301, 302, 303, 306, 503, 308, 309, 310, 311, 312,
	313, 314, 544, 316, 317, 318, 319, 320, 321, 322,
	506, 507, 323, 325, 326, 508, 510, 511, 663, 341,
	342, 343, 344, 345, 346, 347, 349, 0, 351, 352,
	353, 512, 354, 355, 356, 357, 0, 358, 359, 360,
	361, 362, 364, 367, 368, 369, 370, 0, 373, 374,
	375, 376, 377, 378, 379, 381, 382, 383, 385, 386,
	387, 545, 388, 389, 390, 391, 825, 393, 394, 546,
	396, 397, 399, 400, 401, 402, 403, 404, 561, 0,
	406, 516, 407, 408, 409, 410, 411, 0, 413, 414,
	415, 416, 417, 418, 421, 422, 423, 425, 426, 518,
	427, 428, 0, 430, 431, 666, 433, 434, 435, 436,
	437, 0, 562, 438, 520, 439, 521, 440, 441, 442,
	443, 444, 445, 446, 448, 0, 0, 450, 451, 452,
	454, 455, 456, 457, 460, 461, 462, 463, 464, 0,
	465, 467, 469, 547, 524, 525, 526, 527, 528, 530,
	531, 532, 533, 470, 471, 487, 338, 332, 288, 330,
	331, 335, 336, 339, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 642, 0, 818, 778, 0, 0, 0,
	814, 826, 804, 0, 0, 0, 805, 0, 0, 798,
	799, 164, 0, 181, 648, 0, 230, 267, 809, 0,
	800, 327, 0, 380, 384, 0, 473, 823, 0, 0,
	0, 238, 821, 653, 0, 659, 822, 665, 820, 449,
	0, 655, 656, 661, 169, 563, 472, 543, 0, 0,
	0, 815, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 0, 0, 657, 654, 658, 664, 652, 662,
	649, 660, 0, 371, 305, 0, 522, 398, 176, 222,
	209, 251, 293, 405, 0, 0, 283, 453, 218, 307,
	0, 197, 340, 0, 429, 304, 0, 412, 432, 0,
	324, 203, 363, 419, 420, 646, 651, 0, 667, 0,
	207, 208, 329, 189, 337, 534, 500, 392, 350, 348,
	0, 315, 372, 529, 810, 0, 237, 0, 232, 328,
	468, 195, 447, 366, 333, 287, 395, 424, 234, 219,
	220, 263, 365, 253, 205, 458, 497, 501, 499, 495,
	492, 496, 493, 494, 498, 254, 491, 0, 466, 475,
	509, 489, 517, 474, 514, 484, 229, 513, 478, 477,
	523, 504, 505, 459, 519, 490, 488, 481, 480, 476,
	0, 154, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 165, 0, 166, 167, 168, 170, 171, 172, 645,
	173, 174, 175, 178, 179, 180, 182, 542, 183, 184,
	185, 186, 187, 188, 479, 647, 190, 191, 192, 193,
	194, 196, 198, 199, 200, 201, 202, 204, 206, 0,
	0, 0, 650, 0, 0, 0, 210, 211, 212, 213,
	214, 215, 0, 216, 217, 221, 223, 224, 225, 226,
	227, 228, 231, 0, 233, 235, 0, 236, 239, 0,
	240, 241, 242, 243, 244, 245, 246, 247, 483, 248,
	0, 249, 250, 252, 0, 255, 256, 257, 258, 259,
	0, 260, 485, 813, 261, 262, 264, 265, 266, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 280, 281, 282, 284, 0, 285, 286, 289,
	290, 291, 292, 0, 294, 502, 0, 295, 296, 297,
	0, 0, 298, 299, 300, 301, 302, 303, 306, 503,
	308, 309, 310, 311, 312, 313, 314, 544, 316, 317,
	318, 319, 320, 321, 322, 506, 507, 323, 325, 326,
	508, 510, 511, 663, 341, 342, 343, 344, 345, 346,
	347, 349, 0, 351, 352, 353, 512, 354, 355, 356,
	357, 0, 358, 359, 360, 361, 362, 364, 367, 368,
	369, 370, 0, 373, 374, 375, 376, 377, 378, 379,
	381, 382, 383, 385, 386, 387, 545, 388, 389, 390,
	391, 825, 393, 394, 546, 396, 397, 399, 400, 401,
	402, 403, 404, 561, 0, 406, 516, 407, 408, 409,
	410, 411, 0, 413, 414, 415, 416, 417, 418, 421,
	422, 423, 425, 426, 518, 427, 428, 0, 430, 431,
	666, 433, 434, 435, 436, 437, 0, 562, 438, 520,
	439, 521, 440, 441, 442, 443, 444, 445, 446, 448,
	0, 0, 450, 451, 452, 454, 455, 456, 457, 460,
	461, 462, 463, 464, 0, 465, 467, 469, 547, 524,
	525, 526, 527, 528, 530, 531, 532, 533, 470, 471,
	487, 338, 332, 288, 330, 331, 335, 336, 339, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 642, 0,
	818, 778, 0, 0, 0, 814, 826, 804, 0, 0,
	0, 805, 2005, 0, 798, 799, 164, 0, 181, 648,
	0, 230, 267, 809, 0, 800, 327, 0, 380, 384,
	0, 473, 823, 0, 0, 0, 238, 821, 653, 0,
	659, 822, 665, 820, 449, 0, 655, 656, 661, 169,
	563, 472, 543, 0, 0, 0, 815, 0, 0, 0,
	0, 0, 0, 0, 177, 0, 0, 0, 0, 657,
	654, 658, 664, 652, 662, 649, 660, 0, 371, 305,
	0, 522, 398, 176, 222, 209, 251, 293, 405, 0,
	0, 283, 453, 218, 307, 0, 197, 340, 0, 429,
	304, 0, 412, 432, 0, 324, 203, 363, 419, 420,
	646, 651, 0, 667, 0, 207, 208, 329, 189, 337,
	534, 500, 392, 350, 348, 0, 315, 372, 529, 810,
	0, 237, 0, 232, 328, 468, 195, 447, 366, 333,
	287, 395, 424, 234, 219, 220, 263, 365, 253, 205,
	458, 497, 501, 499, 495, 492, 496, 493, 494, 498,
	254, 491, 0, 466, 475, 509, 489, 517, 474, 514,
	484, 229, 513, 478, 477, 523, 504, 505, 459, 519,
	490, 488, 481, 480, 476, 0, 154, 155, 156, 157,
	158, 159, 160, 161, 162, 163, 165, 0, 166, 167,
	168, 170, 171, 172, 645, 173, 174, 175, 178, 179,
	180, 182, 542, 183, 184, 185, 186, 187, 188, 479,
	647, 190, 191, 192, 193, 194, 196, 198, 199, 200,
	201, 202, 204, 206, 0, 0, 0, 650, 0, 0,
	0, 210, 211, 212, 213, 214, 215, 0, 216, 217,
	221, 223, 224, 225, 226, 227, 228, 231, 0, 233,
	235, 0, 236, 239, 0, 240, 241, 242, 243, 244,
	245, 246, 247, 483, 248, 0, 249, 250, 252, 0,
	255, 256, 257, 258, 259, 0, 260, 485, 813, 261,
	262, 264, 265, 266, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 280, 281, 282,
	284, 0, 285, 286, 289, 290, 291, 292, 0, 294,
	502, 0, 295, 296, 297, 0, 0, 298, 299, 300,
	301, 302, 303, 306, 503, 308, 309, 310, 311, 312,
	313, 314, 544, 316, 317, 318, 319, 320, 321, 322,
	506, 507, 323, 325, 326, 508, 510, 511, 663, 341,
	342, 343, 344, 345, 346, 347, 349, 0, 351, 352,
	353, 512, 354, 355, 356, 357, 0, 358, 359, 360,
	361, 362, 364, 367, 368, 369, 370, 0, 373, 374,
	375, 376, 377, 378, 379, 381, 382, 383, 385, 386,
	387, 545, 388, 389, 390, 391, 825, 393, 394, 546,
	396, 397, 399, 400, 401, 402, 403, 404, 561, 0,
	406, 516, 407, 408, 409, 410, 411, 0, 413, 414,
	415, 416, 417, 418, 421, 422, 423, 425, 426, 518,
	427, 428, 0, 430, 431, 666, 433, 434, 435, 436,
	437, 0, 562, 438, 520, 439, 521, 440, 441, 442,
	443, 444, 445, 446, 448, 0, 0, 450, 451, 452,
	454, 455, 456, 457, 460, 461, 462, 463, 464, 0,
	465, 467, 469, 547, 524, 525, 526, 527, 528, 530,
	531, 532, 533, 470, 471, 487, 338, 332, 288, 330,
	331, 335, 336, 339, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 642, 0, 818, 778, 0, 0, 0,
	814, 826, 804, 0, 0, 0, 805, 0, 0, 798,
	799, 164, 0, 181, 648, 0, 230, 267, 809, 0,
	800, 327, 0, 380, 384, 0, 473, 823, 0, 0,
	0, 238, 821, 653, 0, 659, 822, 665, 820, 449,
	0, 655, 656, 661, 169, 563, 472, 543, 0, 0,
	0, 815, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 0, 0, 657, 654, 658, 664, 652, 662,
	649, 660, 0, 371, 305, 0, 522, 398, 176, 222,
	209, 251, 293, 405, 0, 0, 283, 453, 218, 307,
	0, 197, 340, 0, 429, 304, 0, 412, 432, 0,
	324, 203, 363, 419, 420, 646, 651, 0, 667, 0,
	2412, 208, 329, 189, 337, 534, 500, 392, 350, 348,
	0, 315, 372, 529, 810, 0, 237, 0, 232, 328,
	468, 195, 447, 366, 333, 287, 395, 424, 234, 219,
	220, 263, 365, 253, 205, 458, 497, 501, 499, 495,
	492, 496, 493, 494, 498, 254, 491, 0, 466, 475,
	509, 489, 517, 474, 514, 484, 229, 513, 478, 477,
	523, 504, 505, 459, 519, 490, 488, 481, 480, 476,
	0, 154, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 165, 0, 166, 167, 168, 170, 171, 172, 645,
	173, 174, 175, 178, 179, 180, 182, 542, 183, 184,
	185, 186, 187, 188, 479, 647, 190, 191, 192, 193,
	194, 196, 198, 199, 200, 201, 202, 204, 206, 0,
	0, 0, 650, 0, 0, 0, 210, 211, 212, 213,
	214, 215, 0, 216, 217, 221, 223, 224, 225, 226,
	227, 228, 231, 0, 233, 235, 0, 236, 239, 0,
	240, 241, 242, 243, 244, 245, 246, 247, 483, 248,
	0, 249, 250, 252, 0, 255, 256, 257, 258, 259,
	0, 260, 485, 813, 261, 262, 264, 265, 266, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 280, 281, 282, 284, 0, 285, 286, 289,
	290, 291, 292, 0, 294, 502, 0, 295, 296, 297,
	0, 0, 298, 299, 300, 301, 302, 303, 306, 503,
	308, 309, 310, 311, 312, 313, 314, 544, 316, 317,
	318, 319, 320, 321, 322, 506, 507, 323, 325, 326,
	508, 510, 511, 663, 341, 342, 343, 344, 345, 346,
	347, 349, 0, 351, 352, 353, 512, 354, 355, 356,
	357, 0, 358, 359, 360, 361, 362, 364, 367, 368,
	369, 370, 0, 373, 374, 375, 376, 377, 378, 379,
	381, 382, 383, 385, 386, 387, 545, 388, 389, 390,
	391, 825, 393, 394, 546, 396, 397, 399, 400, 401,
	402, 403, 404, 561, 0, 406, 516, 407, 408, 409,
	410, 411, 0, 413, 414, 415, 416, 417, 418, 421,
	422, 423, 425, 426, 518, 427, 428, 0, 430, 431,
	666, 433, 434, 435, 436, 437, 0, 562, 438, 520,
	439, 521, 440, 441, 442, 443, 444, 445, 446, 448,
	0, 0, 450, 451, 452, 454, 455, 456, 457, 460,
	461, 462, 463, 464, 0, 465, 467, 469, 547, 524,
	525, 526, 527, 528, 530, 531, 532, 533, 470, 471,
	487, 338, 332, 288, 330, 331, 335, 336, 339, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 642, 0,
	818, 778, 0, 0, 0, 0, 826, 804, 0, 0,
	0, 805, 0, 0, 798, 799, 164, 0, 181, 648,
	0, 230, 267, 809, 0, 0, 327, 0, 380, 384,
	0, 473, 823, 0, 3170, 0, 238, 821, 653, 0,
	659, 822, 665, 820, 449, 0, 655, 656, 661, 169,
	563, 472, 543, 0, 0, 0, 334, 0, 0, 0,
	0, 0, 0, 0, 177, 0, 0, 0, 0, 657,
	654, 658, 664, 652, 662, 649, 660, 0, 371, 305,
	0, 522, 398, 176, 222, 209, 251, 293, 405, 0,
	0, 283, 453, 218, 307, 0, 197, 340, 0, 429,
	304, 0, 412, 432, 0, 324, 203, 363, 419, 420,
	646, 651, 0, 667, 0, 207, 208, 329, 189, 337,
	534, 500, 392, 350, 348, 0, 315, 372, 529, 810,
	0, 237, 0, 232, 328, 468, 195, 447, 366, 333,
	287, 395, 424, 234, 219, 220, 263, 365, 253, 205,
	458, 497, 501, 499, 495, 492, 496, 493, 494, 498,
	254, 491, 0, 466, 475, 509, 489, 517, 474, 514,
	484, 229, 513, 478, 477, 523, 504, 505, 459, 519,
	490, 488, 481, 480, 476, 0, 154, 155, 156, 157,
	158, 159, 160, 161, 162, 163, 165, 0, 166, 167,
	168, 170, 171, 172, 645, 173, 174, 175, 178, 179,
	180, 182, 542, 183, 184, 185, 186, 187, 188, 479,
	647, 190, 191, 192, 193, 194, 196, 198, 199, 200,
	201, 202, 204, 206, 0, 0, 0, 650, 0, 0,
	0, 210, 211, 212, 213, 214, 215, 0, 216, 217,
	221, 223, 224, 225, 226, 227, 228, 231, 0, 233,
	235, 0, 236, 239, 0, 240, 241, 242, 243, 244,
	245, 246, 247, 483, 248, 0, 249, 250, 252, 0,
	255, 256, 257, 258, 259, 0, 260, 485, 813, 261,
	262, 264, 265, 266, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 280, 281, 282,
	284, 0, 285, 286, 289, 290, 291, 292, 0, 294,
	502, 0, 295, 296, 297, 0, 0, 298, 299, 300,
	301, 302, 303, 306, 503, 308, 309, 310, 311, 312,
	313, 314, 544, 316, 317, 318, 319, 320, 321, 322,
	506, 507, 323, 325, 326, 508, 510, 511, 663, 341,
	342, 343, 344, 345, 346, 347, 349, 0, 351, 352,
	353, 512, 354, 355, 356, 357, 0, 358, 359, 360,
	361, 362, 364, 367, 368, 369, 370, 0, 373, 374,
	375, 376, 377, 378, 379, 381, 382, 383, 385, 386,
	387, 545, 388, 389, 390, 391, 825, 393, 394, 546,
	396, 397, 399, 400, 401, 402, 403, 404, 561, 0,
	406, 516, 407, 408, 409, 410, 411, 0, 413, 414,
	415, 416, 417, 418, 421, 422, 423, 425, 426, 518,
	427, 428, 0, 430, 431, 666, 433, 434, 435, 436,
	437, 0, 562, 438, 520, 439, 521, 440, 441, 442,
	443, 444, 445, 446, 448, 0, 0, 450, 451, 452,
	454, 455, 456, 457, 460, 461, 462, 463, 464, 0,
	465, 467, 469, 547, 524, 525, 526, 527, 528, 530,
	531, 532, 533, 470, 471, 487, 338, 332, 288, 330,
	331, 335, 336, 339, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 642, 0, 818, 778, 0, 0, 0,
	0, 826, 804, 0, 0, 0, 805, 0, 0, 2367,
	2368, 164, 0, 181, 648, 0, 230, 267, 809, 0,
	0, 327, 0, 380, 384, 0, 473, 823, 0, 0,
	0, 238, 821, 653, 0, 659, 822, 665, 820, 449,
	0, 655, 656, 661, 169, 563, 472, 543, 0, 0,
	0, 334, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 0, 0, 657, 654, 658, 664, 652, 662,
	649, 660, 0, 371, 305, 0, 522, 398, 176, 222,
	209, 251, 293, 405, 0, 0, 283, 453, 218, 307,
	0, 197, 340, 0, 429, 304, 0, 412, 432, 0,
	324, 203, 363, 419, 420, 646, 651, 0, 667, 0,
	207, 208, 329, 189, 337, 534, 500, 392, 350, 348,
	0, 315, 372, 529, 810, 0, 237, 0, 232, 328,
	468, 195, 447, 366, 333, 287, 395, 424, 234, 219,
	220, 263, 365, 253, 205, 458, 497, 501, 499, 495,
	492, 496, 493, 494, 498, 254, 491, 0, 466, 475,
	509, 489, 517, 474, 514, 484, 229, 513, 478, 477,
	523, 504, 505, 459, 519, 490, 488, 481, 480, 476,
	0, 154, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 165, 0, 166, 167, 168, 170, 171, 172, 645,
	173, 174, 175, 178, 179, 180, 182, 542, 183, 184,
	185, 186, 187, 188, 479, 647, 190, 191, 192, 193,
	194, 196, 198, 199, 200, 201, 202, 204, 206, 0,
	0, 0, 650, 0, 0, 0, 210, 211, 212, 213,
	214, 215, 0, 216, 217, 221, 223, 224, 225, 226,
	227, 228, 231, 0, 233, 235, 0, 236, 239, 0,
	240, 241, 242, 243, 244, 245, 246, 247, 483, 248,
	0, 249, 250, 252, 0, 255, 256, 257, 258, 259,
	0, 260, 485, 813, 261, 262, 264, 265, 266, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 280, 281, 282, 284, 0, 285, 286, 289,
	290, 291, 292, 0, 294, 502, 0, 295, 296, 297,
	0, 0, 298, 299, 300, 301, 302, 303, 306, 503,
	308, 309, 310, 311, 312, 313, 314, 544, 316, 317,
	318, 319, 320, 321, 322, 506, 507, 323, 325, 326,
	508, 510, 511, 663, 341, 342, 343, 344, 345, 346,
	347, 349, 0, 351, 352, 353, 512, 354, 355, 356,
	357, 0, 358, 359, 360, 361, 362, 364, 367, 368,
	369, 370, 0, 373, 374, 375, 376, 377, 378, 379,
	381, 382, 383, 385, 386, 387, 545, 388, 389, 390,
	391, 825, 393, 394, 546, 396, 397, 399, 400, 401,
	402, 403, 404, 561, 0, 406, 516, 407, 408, 409,
	410, 411, 0, 413, 414, 415, 416, 417, 418, 421,
	422, 423, 425, 426, 518, 427, 428, 0, 430, 431,
	666, 433, 434, 435, 436, 437, 0, 562, 438, 520,
	439, 521, 440, 441, 442, 443, 444, 445, 446, 448,
	0, 0, 450, 451, 452, 454, 455, 456, 457, 460,
	461, 462, 463, 464, 0, 465, 467, 469, 547, 524,
	525, 526, 527, 528, 530, 531, 532, 533, 470, 471,
	487, 338, 332, 288, 330, 331, 335, 336, 339, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 680, 0,
	1064, 778, 0, 0, 0, 0, 826, 0, 0, 0,
	0, 805, 0, 0, 2367, 2368, 164, 0, 181, 648,
	0, 230, 267, 482, 0, 0, 327, 0, 380, 384,
	0, 473, 0, 0, 3349, 0, 238, 1061, 653, 0,
	659, 0, 665, 1060, 449, 0, 655, 656, 661, 169,
	563, 472, 543, 0, 0, 0, 334, 0, 0, 0,
	0, 0, 0, 0, 177, 0, 0, 0, 1062, 657,
	654, 658, 664, 652, 662, 649, 660, 0, 371, 305,
	0, 522, 398, 176, 222, 209, 251, 293, 405, 0,
	0, 283, 453, 218, 307, 0, 197, 340, 0, 429,
	304, 0, 412, 432, 0, 324, 203, 363, 419, 420,
	646, 651, 0, 667, 0, 207, 208, 329, 189, 337,
	534, 500, 392, 350, 348, 0, 315, 372, 529, 0,
	0, 237, 0, 232, 328, 468, 195, 447, 366, 333,
	287, 395, 424, 234, 219, 220, 263, 365, 253, 205,
	458, 497, 501, 499, 495, 492, 496, 493, 494, 498,
	254, 491, 0, 466, 475, 509, 489, 517, 474, 514,
	484, 229, 513, 478, 477, 523, 504, 505, 459, 519,
	490, 488, 481, 480, 476, 0, 154, 155, 156, 157,
	158, 159, 160, 161, 162, 163, 165, 0, 166, 167,
	168, 170, 171, 172, 645, 173, 174, 175, 178, 179,
	180, 182, 542, 183, 184, 185, 186, 187, 188, 479,
	647, 190, 191, 192, 193, 194, 196, 198, 199, 200,
	201, 202, 204, 206, 0, 0, 0, 650, 0, 0,
	0, 210, 211, 212, 213, 214, 215, 0, 216, 217,
	221, 223, 224, 225, 226, 227, 228, 231, 0, 233,
	235, 0, 236, 239, 0, 240, 241, 242, 243, 244,
	245, 246, 247, 483, 248, 0, 249, 250, 252, 0,
	255, 256, 257, 258, 259, 0, 260, 485, 486, 261,
	262, 264, 265, 266, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 280, 281, 282,
	284, 0, 285, 286, 289, 290, 291, 292, 0, 294,
	502, 0, 295, 296, 297, 0, 0, 298, 299, 300,
	301, 302, 303, 306, 503, 308, 309, 310, 311, 312,
	313, 314, 544, 316, 317, 318, 319, 320, 321, 322,
	506, 507, 323, 325, 326, 508, 510, 511, 663, 341,
	342, 343, 344, 345, 346, 347, 349, 0, 351, 352,
	353, 512, 354, 355, 356, 357, 0, 358, 359, 360,
	361, 362, 364, 367, 368, 369, 370, 0, 373, 374,
	375, 376, 377, 378, 379, 381, 382, 383, 385, 386,
	387, 545, 388, 389, 390, 391, 515, 393, 394, 546,
	396, 397, 399, 400, 401, 402, 403, 404, 561, 0,
	406, 516, 407, 408, 409, 410, 411, 0, 413, 414,
	415, 416, 417, 418, 421, 422, 423, 425, 426, 518,
	427, 428, 0, 430, 431, 666, 433, 434, 435, 436,
	437, 0, 562, 438, 520, 439, 521, 440, 441, 442,
	443, 444, 445, 446, 448, 0, 0, 450, 451, 452,
	454, 455, 456, 457, 460, 461, 462, 463, 464, 0,
	465, 467, 469, 547, 524, 525, 526, 527, 528, 530,
	531, 532, 533, 470, 471, 487, 338, 332, 288, 330,
	331, 335, 336, 339, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 680, 0, 1064, 778, 0, 0,
	0, 0, 826, 0, 0, 0, 3350, 0, 0, 1065,
	1066, 3348, 164, 0, 181, 648, 0, 230, 267, 482,
	0, 0, 327, 0, 380, 384, 0, 473, 0, 0,
	1070, 0, 238, 1061, 653, 0, 659, 0, 665, 1060,
	449, 0, 655, 656, 661, 169, 563, 472, 543, 0,
	0, 0, 334, 0, 0, 0, 0, 0, 0, 0,
	177, 0, 0, 0, 1062, 657, 654, 658, 664, 652,
	662, 649, 660, 0, 371, 305, 0, 522, 398, 176,
	222, 209, 251, 293, 405, 0, 0, 283, 453, 218,
	307, 0, 197, 340, 0, 429, 304, 0, 412, 432,
	0, 324, 203, 363, 419, 420, 646, 651, 0, 667,
	0, 207, 208, 329, 189, 337, 534, 500, 392, 350,
	348, 0, 315, 372, 529, 0, 0, 237, 0, 232,
	328, 468, 195, 447, 366, 333, 287, 395, 424, 234,
	219, 220, 263, 365, 253, 205, 458, 497, 501, 499,
	495, 492, 496, 493, 494, 498, 254, 491, 0, 466,
	475, 509, 489, 517, 474, 514, 484, 229, 513, 478,
	477, 523, 504, 505, 459, 519, 490, 488, 481, 480,
	476, 0, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 165, 0, 166, 167, 168, 170, 171, 172,
	645, 173, 174, 175, 178, 179, 180, 182, 542, 183,
	184, 185, 186, 187, 188, 479, 647, 190, 191, 192,
	193, 194, 196, 198, 199, 200, 201, 202, 204, 206,
	0, 0, 0, 650, 0, 0, 0, 210, 211, 212,
	213, 214, 215, 0, 216, 217, 221, 223, 224, 225,
	226, 227, 228, 231, 0, 233, 235, 0, 236, 239,
	0, 240, 241, 242, 243, 244, 245, 246, 247, 483,
	248, 0, 249, 250, 252, 0, 255, 256, 257, 258,
	259, 0, 260, 485, 486, 261, 262, 264, 265, 266,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 280, 281, 282, 284, 0, 285, 286,
	289, 290, 291, 292, 0, 294, 502, 0, 295, 296,
	297, 0, 0, 298, 299, 300, 301, 302, 303, 306,
	503, 308, 309, 310, 311, 312, 313, 314, 544, 316,
	317, 318, 319, 320, 321, 322, 506, 507, 323, 325,
	326, 508, 510, 511, 663, 341, 342, 343, 344, 345,
	346, 347, 349, 0, 351, 352, 353, 512, 354, 355,
	356, 357, 0, 358, 359, 360, 361, 362, 364, 367,
	368, 369, 370, 0, 373, 374, 375, 376, 377, 378,
	379, 381, 382, 383, 385, 386, 387, 545, 388, 389,
	390, 391, 515, 393, 394, 546, 396, 397, 399, 400,
	401, 402, 403, 404, 561, 0, 406, 516, 407, 408,
	409, 410, 411, 0, 413, 414, 415, 416, 417, 418,
	421, 422, 423, 425, 426, 518, 427, 428, 0, 430,
	431, 666, 433, 434, 435, 436, 437, 0, 562, 438,
	520, 439, 521, 440, 441, 442, 443, 444, 445, 446,
	448, 0, 0, 450, 451, 452, 454, 455, 456, 457,
	460, 461, 462, 463, 464, 0, 465, 467, 469, 547,
	524, 525, 526, 527, 528, 530, 531, 532, 533, 470,
	471, 487, 338, 332, 288, 330, 331, 335, 336, 339,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 680,
	0, 1064, 778, 0, 0, 0, 0, 826, 0, 0,
	0, 0, 0, 0, 0, 1065, 1066, 164, 0, 181,
	648, 0, 230, 267, 482, 0, 0, 327, 0, 380,
	384, 0, 473, 0, 0, 1056, 0, 238, 1061, 653,
	0, 659, 0, 665, 1060, 449, 0, 655, 656, 661,
	169, 563, 472, 543, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 0, 177, 0, 0, 0, 1062,
	657, 654, 658, 664, 652, 662, 649, 660, 0, 371,
	305, 0, 522, 398, 176, 222, 209, 251, 293, 405,
	0, 0, 283, 453, 218, 307, 0, 197, 340, 0,
	429, 304, 0, 412, 432, 0, 324, 203, 363, 419,
	420, 646, 651, 0, 667, 0, 207, 208, 329, 189,
	337, 534, 500, 392, 350, 348, 0, 315, 372, 529,
	0, 0, 237, 0, 232, 328, 468, 195, 447, 366,
	333, 287, 395, 424, 234, 219, 220, 263, 365, 253,
	205, 458, 497, 501, 499, 495, 492, 496, 493, 494,
	498, 254, 491, 0, 466, 475, 509, 489, 517, 474,
	514, 484, 229, 513, 478, 477, 523, 504, 505, 459,
	519, 490, 488, 481, 480, 476, 0, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 165, 0, 166,
	167, 168, 170, 171, 172, 645, 173, 174, 175, 178,
	179, 180, 182, 542, 183, 184, 185, 186, 187, 188,
	479, 647, 190, 191, 192, 193, 194, 196, 198, 199,
	200, 201, 202, 204, 206, 0, 0, 0, 650, 0,
	0, 0, 210, 211, 212, 213, 214, 215, 0, 216,
	217, 221, 223, 224, 225, 226, 227, 228, 231, 0,
	233, 235, 0, 236, 239, 0, 240, 241, 242, 243,
	244, 245, 246, 247, 483, 248, 0, 249, 250, 252,
	0, 255, 256, 257, 258, 259, 0, 260, 485, 486,
	261, 262, 264, 265, 266, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 280, 281,
	282, 284, 0, 285, 286, 289, 290, 291, 292, 0,
	294, 502, 0, 295, 296, 297, 0, 0, 298, 299,
	300, 301, 302, 303, 306, 503, 308, 309, 310, 311,
	312, 313, 314, 544, 316, 317, 318, 319, 320, 321,
	322, 506, 507, 323, 325, 326, 508, 510, 511, 663,
	341, 342, 343, 344, 345, 346, 347, 349, 0, 351,
	352, 353, 512, 354, 355, 356, 357, 0, 358, 359,
	360, 361, 362, 364, 367, 368, 369, 370, 0, 373,
	374, 375, 376, 377, 378, 379, 381, 382, 383, 385,
	386, 387, 545, 388, 389, 390, 391, 515, 393, 394,
	546, 396, 397, 399, 400, 401, 402, 403, 404, 561,
	0, 406, 516, 407, 408, 409, 410, 411, 0, 413,
	414, 415, 416, 417, 418, 421, 422, 423, 425, 426,
	518, 427, 428, 0, 430, 431, 666, 433, 434, 435,
	436, 437, 0, 562, 438, 520, 439, 521, 440, 441,
	442, 443, 444, 445, 446, 448, 0, 0, 450, 451,
	452, 454, 455, 456, 457, 460, 461, 462, 463, 464,
	0, 465, 467, 469, 547, 524, 525, 526, 527, 528,
	530, 531, 532, 533, 470, 471, 487, 338, 332, 288,
	330, 331, 335, 336, 339, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 680, 0, 1064, 778, 0, 0,
	0, 0, 826, 0, 0, 0, 0, 0, 0, 0,
	1065, 1066, 164, 0, 181, 648, 0, 230, 267, 482,
	0, 0, 327, 0, 380, 384, 0, 473, 0, 0,
	0, 0, 238, 1061, 653, 0, 659, 0, 665, 1060,
	449, 0, 655, 656, 661, 169, 563, 472, 543, 0,
	0, 0, 334, 0, 0, 0, 0, 0, 0, 0,
	177, 0, 0, 0, 1062, 657, 654, 658, 664, 652,
	662, 649, 660, 0, 371, 305, 0, 522, 398, 176,
	222, 209, 251, 293, 405, 0, 0, 283, 453, 218,
	307, 0, 197, 340, 0, 429, 304, 0, 412, 432,
	0, 324, 203, 363, 419, 420, 646, 651, 0, 667,
	0, 207, 208, 329, 189, 337, 534, 500, 392, 350,
	348, 0, 315, 372, 529, 0, 0, 237, 0, 232,
	328, 468, 195, 447, 366, 333, 287, 395, 424, 234,
	219, 220, 263, 365, 253, 205, 458, 497, 501, 499,
	495, 492, 496, 493, 494, 498, 254, 491, 0, 466,
	475, 509, 489, 517, 474, 514, 484, 229, 513, 478,
	477, 523, 504, 505, 459, 519, 490, 488, 481, 480,
	476, 0, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 165, 0, 166, 167, 168, 170, 171, 172,
	645, 173, 174, 175, 178, 179, 180, 182, 542, 183,
	184, 185, 186, 187, 188, 479, 647, 190, 191, 192,
	193, 194, 196, 198, 199, 200, 201, 202, 204, 206,
	0, 0, 0, 650, 0, 0, 0, 210, 211, 212,
	213, 214, 215, 0, 216, 217, 221, 223, 224, 225,
	226, 227, 228, 231, 0, 233, 235, 0, 236, 239,
	0, 240, 241, 242, 243, 244, 245, 246, 247, 483,
	248, 0, 249, 250, 252, 0, 255, 256, 257, 258,
	259, 0, 260, 485, 486, 261, 262, 264, 265, 266,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 280, 281, 282, 284, 0, 285, 286,
	289, 290, 291, 292, 0, 294, 502, 0, 295, 296,
	297, 0, 0, 298, 299, 300, 301, 302, 303, 306,
	503, 308, 309, 310, 311, 312, 313, 314, 544, 316,
	317, 318, 319, 320, 321, 322, 506, 507, 323, 325,
	326, 508, 510, 511, 663, 341, 342, 343, 344, 345,
	346, 347, 349, 0, 351, 352, 353, 512, 354, 355,
	356, 357, 0, 358, 359, 360, 361, 362, 364, 367,
	368, 369, 370, 0, 373, 374, 375, 376, 377, 378,
	379, 381, 382, 383, 385, 386, 387, 545, 388, 389,
	390, 391, 515, 393, 394, 546, 396, 397, 399, 400,
	401, 402, 403, 404, 561, 0, 406, 516, 407, 408,
	409, 410, 411, 0, 413, 414, 415, 416, 417, 418,
	421, 422, 423, 425, 426, 518, 427, 428, 0, 430,
	431, 666, 433, 434, 435, 436, 437, 0, 562, 438,
	520, 439, 521, 440, 441, 442, 443, 444, 445, 446,
	448, 0, 0, 450, 451, 452, 454, 455, 456, 457,
	460, 461, 462, 463, 464, 0, 465, 467, 469, 547,
	524, 525, 526, 527, 528, 530, 531, 532, 533, 470,
	471, 487, 338, 332, 288, 330, 331, 335, 336, 339,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 642,
	0, 818, 778, 0, 0, 0, 0, 826, 804, 0,
	0, 0, 0, 0, 0, 1065, 1066, 164, 0, 181,
	648, 0, 230, 267, 809, 0, 0, 327, 0, 380,
	384, 0, 473, 823, 0, 0, 0, 238, 821, 653,
	0, 659, 822, 665, 820, 449, 0, 655, 656, 661,
	169, 563, 472, 543, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 0, 177, 0, 0, 0, 0,
	657, 654, 658, 664, 652, 662, 649, 660, 0, 371,
	305, 0, 522, 398, 176, 222, 209, 251, 293, 405,
	0, 0, 283, 453, 218, 307, 0, 197, 340, 0,
	429, 304, 0, 412, 432, 0, 324, 203, 363, 419,
	420, 646, 651, 0, 667, 0, 207, 208, 329, 189,
	337, 534, 500, 392, 350, 348, 0, 315, 372, 529,
	810, 0, 237, 0, 232, 328, 468, 195, 447, 366,
	333, 287, 395, 424, 234, 219, 220, 263, 365, 253,
	205, 458, 497, 501, 499, 495, 492, 496, 493, 494,
	498, 254, 491, 0, 466, 475, 509, 489, 517, 474,
	514, 484, 229, 513, 478, 477, 523, 504, 505, 459,
	519, 490, 488, 481, 480, 476, 0, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 165, 0, 166,
	167, 168, 170, 171, 172, 645, 173, 174, 175, 178,
	179, 180, 182, 542, 183, 184, 185, 186, 187, 188,
	479, 647, 190, 191, 192, 193, 194, 196, 198, 199,
	200, 201, 202, 204, 206, 0, 0, 0, 650, 0,
	0, 0, 210, 211, 212, 213, 214, 215, 0, 216,
	217, 221, 223, 224, 225, 226, 227, 228, 231, 0,
	233, 235, 0, 236, 239, 0, 240, 241, 242, 243,
	244, 245, 246, 247, 483, 248, 0, 249, 250, 252,
	0, 255, 256, 257, 258, 259, 0, 260, 485, 813,
	261, 262, 264, 265, 266, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 280, 281,
	282, 284, 0, 285, 286, 289, 290, 291, 292, 0,
	294, 502, 0, 295, 296, 297, 0, 0, 298, 299,
	300, 301, 302, 303, 306, 503, 308, 309, 310, 311,
	312, 313, 314, 544, 316, 317, 318, 319, 320, 321,
	322, 506, 507, 323, 325, 326, 508, 510, 511, 663,
	341, 342, 343, 344, 345, 346, 347, 349, 0, 351,
	352, 353, 512, 354, 355, 356, 357, 0, 358, 359,
	360, 361, 362, 364, 367, 368, 369, 370, 0, 373,
	374, 375, 376, 377, 378, 379, 381, 382, 383, 385,
	386, 387, 545, 388, 389, 390, 391, 825, 393, 394,
	546, 396, 397, 399, 400, 401, 402, 403, 404, 561,
	0, 406, 516, 407, 408, 409, 410, 411, 0, 413,
	414, 415, 416, 417, 418, 421, 422, 423, 425, 426,
	518, 427, 428, 0, 430, 431, 666, 433, 434, 435,
	436, 437, 0, 562, 438, 520, 439, 521, 440, 441,
	442, 443, 444, 445, 446, 448, 0, 0, 450, 451,
	452, 454, 455, 456, 457, 460, 461, 462, 463, 464,
	0, 465, 467, 469, 547, 524, 525, 526, 527, 528,
	530, 531, 532, 533, 470, 471, 487, 338, 332, 288,
	330, 331, 335, 336, 339, 642, 0, 818, 778, 0,
	0, 0, 0, 826, 804, 0, 0, 0, 0, 0,
	0, 0, 0, 164, 0, 181, 648, 805, 230, 267,
	809, 0, 0, 327, 0, 380, 384, 0, 473, 823,
	0, 0, 0, 238, 821, 653, 0, 659, 822, 665,
	820, 449, 0, 655, 656, 661, 169, 563, 472, 543,
	0, 0, 0, 334, 0, 0, 0, 0, 0, 0,
	0, 3166, 0, 0, 0, 0, 657, 654, 658, 664,
	652, 662, 649, 660, 0, 371, 305, 0, 522, 398,
	176, 222, 209, 251, 293, 405, 0, 0, 283, 453,
	218, 307, 0, 197, 340, 0, 429, 304, 0, 412,
	432, 0, 324, 203, 363, 419, 420, 646, 651, 0,
	667, 0, 207, 208, 329, 189, 337, 534, 500, 392,
	350, 348, 0, 315, 372, 529, 810, 0, 237, 0,
	232, 328, 468, 195, 447, 366, 333, 287, 395, 424,
	234, 219, 220, 263, 365, 253, 205, 458, 497, 501,
	499, 495, 492, 496, 493, 494, 498, 254, 491, 0,
	466, 475, 509, 489, 517, 474, 514, 484, 229, 513,
	478, 477, 523, 504, 505, 459, 519, 490, 488, 481,
	480, 476, 0, 154, 155, 156, 157, 158, 159, 160,
	161, 162, 163, 165, 0, 166, 167, 168, 170, 171,
	172, 645, 173, 174, 175, 178, 179, 180, 182, 542,
	183, 184, 185, 186, 187, 188, 479, 647, 190, 191,
	192, 193, 194, 196, 198, 199, 200, 201, 202, 204,
	206, 0, 0, 0, 650, 0, 0, 0, 210, 211,
	212, 213, 214, 215, 0, 216, 217, 221, 223, 224,
	225, 226, 227, 228, 231, 0, 233, 235, 0, 236,
	239, 0, 240, 241, 242, 243, 244, 245, 246, 247,
	483, 248, 0, 249, 250, 252, 0, 255, 256, 257,
	258, 259, 0, 260, 485, 813, 261, 262, 264, 265,
	266, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 280, 281, 282, 284, 0, 285,
	286, 289, 290, 291, 292, 0, 294, 502, 0, 295,
	296, 297, 0, 0, 298, 299, 300, 301, 302, 303,
	306, 503, 308, 309, 310, 311, 312, 313, 314, 544,
	316, 317, 318, 319, 320, 321, 322, 506, 507, 323,
	325, 326, 508, 510, 511, 663, 341, 342, 343, 344,
	345, 346, 347, 349, 0, 351, 352, 353, 512, 354,
	355, 356, 357, 0, 358, 359, 360, 361, 362, 364,
	367, 368, 369, 370, 0, 373, 374, 375, 376, 377,
	378, 379, 381, 382, 383, 385, 386, 387, 545, 388,
	389, 390, 391, 825, 393, 394, 546, 396, 397, 399,
	400, 401, 402, 403, 404, 561, 0, 406, 516, 407,
	408, 409, 410, 411, 0, 413, 414, 415, 416, 417,
	418, 421, 422, 423, 425, 426, 518, 427, 428, 0,
	430, 431, 666, 433, 434, 435, 436, 437, 0, 562,
	438, 520, 439, 521, 440, 441, 442, 443, 444, 445,
	446, 448, 0, 0, 450, 451, 452, 454, 455, 456,
	457, 460, 461, 462, 463, 464, 0, 465, 467, 469,
	547, 524, 525, 526, 527, 528, 530, 531, 532, 533,
	470, 471, 487, 338, 332, 288, 330, 331, 335, 336,
	339, 642, 0, 818, 778, 0, 0, 0, 0, 826,
	804, 0, 0, 0, 0, 0, 0, 0, 0, 164,
	0, 181, 648, 805, 230, 267, 809, 0, 0, 327,
	0, 380, 384, 0, 473, 823, 0, 0, 0, 238,
	821, 653, 0, 659, 822, 665, 820, 449, 0, 655,
	656, 661, 169, 563, 472, 543, 0, 0, 0, 334,
	0, 0, 0, 0, 0, 0, 0, 177, 0, 0,
	0, 0, 657, 654, 658, 664, 652, 662, 649, 660,
	0, 371, 305, 0, 522, 398, 176, 222, 209, 251,
	293, 405, 0, 0, 283, 453, 218, 307, 0, 197,
	340, 0, 429, 304, 0, 412, 432, 0, 324, 203,
	363, 419, 420, 646, 651, 0, 667, 0, 207, 208,
	329, 189, 337, 534, 500, 392, 350, 348, 0, 315,
	372, 2759, 810, 0, 237, 0, 232, 328, 468, 195,
	447, 366, 333, 287, 395, 424, 234, 219, 220, 263,
	365, 253, 205, 458, 497, 501, 499, 495, 492, 496,
	493, 494, 498, 254, 491, 0, 466, 475, 509, 489,
	517, 474, 514, 484, 229, 513, 478, 477, 523, 504,
	505, 459, 519, 490, 488, 481, 480, 476, 0, 154,
	155, 156, 157, 158, 159, 160, 161, 162, 163, 165,
	0, 166, 167, 168, 170, 171, 172, 645, 173, 174,
	175, 178, 179, 180, 182, 542, 183, 184, 185, 186,
	187, 188, 479, 647, 190, 191, 192, 193, 194, 196,
	198, 199, 200, 201, 202, 204, 206, 0, 0, 0,
	650, 0, 0, 0, 210, 211, 212, 213, 214, 215,
	0, 216, 217, 221, 223, 224, 225, 226, 227, 228,
	231, 0, 233, 235, 0, 236, 239, 0, 240, 241,
	242, 243, 244, 245, 246, 247, 483, 248, 0, 249,
	250, 252, 0, 255, 256, 257, 258, 259, 0, 260,
	485, 813, 261, 262, 264, 265, 266, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	280, 281, 282, 284, 0, 285, 286, 289, 290, 291,
	292, 0, 294, 502, 0, 295, 296, 297, 0, 0,
	298, 299, 300, 301, 302, 303, 306, 503, 308, 309,
	310, 311, 312, 313, 314, 544, 316, 317, 318, 319,
	320, 321, 322, 506, 507, 323, 325, 326, 508, 510,
	511, 663, 341, 342, 343, 344, 345, 346, 347, 349,
	0, 351, 352, 353, 512, 354, 355, 356, 357, 0,
	358, 359, 360, 361, 362, 364, 367, 368, 369, 370,
	0, 373, 374, 375, 376, 377, 378, 379, 381, 382,
	383, 385, 386, 387, 545, 388, 389, 390, 391, 825,
	393, 394, 546, 396, 397, 399, 400, 401, 402, 403,
	404, 561, 0, 406, 516, 407, 408, 409, 410, 411,
	0, 413, 414, 415, 416, 417, 418, 421, 422, 423,
	425, 426, 518, 427, 428, 0, 430, 431, 666, 433,
	434, 435, 436, 437, 0, 562, 438, 520, 439, 521,
	440, 441, 442, 443, 444, 445, 446, 448, 0, 0,
	450, 451, 452, 454, 455, 456, 457, 460, 461, 462,
	463, 464, 0, 465, 467, 469, 547, 524, 525, 526,
	527, 528, 530, 531, 532, 533, 470, 471, 487, 338,
	332, 288, 330, 331, 335, 336, 339, 642, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 164, 0, 181, 648, 805,
	230, 267, 482, 0, 0, 327, 0, 380, 384, 49,
	473, 0, 0, 0, 0, 238, 0, 653, 0, 659,
	0, 665, 0, 449, 0, 655, 656, 661, 169, 563,
	472, 543, 0, 0, 0, 334, 46, 0, 0, 560,
	47, 0, 0, 177, 0, 0, 0, 0, 657, 654,
	658, 664, 652, 662, 649, 660, 0, 371, 305, 2048,
	1570, 398, 176, 222, 209, 251, 293, 405, 0, 0,
	283, 453, 218, 307, 0, 197, 340, 0, 429, 304,
	0, 412, 432, 0, 324, 203, 363, 419, 420, 646,
	651, 0, 667, 0, 207, 208, 329, 189, 337, 2056,
	2057, 2055, 350, 348, 0, 315, 372, 529, 0, 0,
	237, 0, 232, 328, 468, 195, 447, 366, 333, 287,
	395, 424, 234, 219, 220, 263, 365, 253, 205, 458,
	497, 501, 499, 495, 492, 496, 493, 494, 498, 254,
	491, 0, 466, 475, 509, 489, 517, 474, 514, 484,
	229, 513, 478, 477, 523, 504, 505, 459, 519, 490,
	488, 481, 480, 476, 0, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 165, 0, 166, 167, 168,
	170, 171, 172, 645, 173, 174, 175, 178, 179, 180,
	182, 542, 183, 184, 185, 186, 187, 188, 479, 647,
	190, 191, 192, 193, 194, 196, 198, 199, 200, 201,
	202, 204, 206, 0, 0, 0, 650, 0, 0, 0,
	210, 211, 212, 213, 214, 215, 0, 216, 217, 221,
	223, 224, 225, 226, 227, 228, 231, 0, 233, 235,
	0, 236, 239, 0, 240, 241, 242, 243, 244, 245,
	246, 247, 483, 248, 0, 249, 250, 252, 0, 255,
	256, 257, 258, 259, 0, 260, 485, 486, 261, 262,
	264, 265, 266, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 280, 281, 282, 284,
	0, 285, 286, 289, 290, 291, 292, 0, 294, 502,
	0, 295, 296, 297, 0, 0, 298, 299, 300, 301,
	302, 303, 306, 503, 308, 309, 310, 311, 312, 313,
	314, 544, 316, 317, 318, 319, 320, 321, 322, 506,
	507, 323, 325, 326, 508, 510, 511, 663, 341, 342,
	343, 344, 345, 346, 347, 349, 0, 351, 352, 353,
	512, 354, 355, 356, 357, 0, 358, 359, 360, 361,
	362, 364, 367, 368, 369, 370, 0, 373, 374, 375,
	376, 377, 378, 379, 381, 382, 383, 385, 386, 387,
	545, 388, 389, 390, 391, 515, 393, 394, 546, 396,
	397, 399, 400, 401, 402, 403, 404, 561, 0, 406,
	516, 407, 408, 409, 410, 411, 0, 413, 414, 415,
	416, 417, 418, 421, 422, 423, 425, 426, 518, 427,
	428, 0, 430, 431, 666, 433, 434, 435, 436, 437,
	0, 562, 438, 520, 439, 521, 440, 441, 442, 443,
	444, 445, 446, 448, 0, 0, 450, 451, 452, 454,
	455, 456, 457, 460, 461, 462, 463, 464, 0, 465,
	467, 469, 547, 524, 525, 526, 527, 528, 530, 531,
	532, 533, 470, 471, 487, 338, 332, 288, 330, 331,
	335, 336, 339, 642, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 0, 0, 0, 0, 0,
	0, 164, 0, 181, 648, 2050, 230, 267, 482, 0,
	0, 327, 0, 380, 384, 0, 473, 0, 0, 0,
	0, 238, 0, 653, 0, 659, 0, 665, 0, 449,
	0, 655, 656, 661, 169, 563, 472, 543, 0, 0,
	0, 334, 0, 0, 0, 560, 0, 0, 0, 177,
	0, 0, 0, 0, 657, 654, 658, 664, 652, 662,
	649, 660, 0, 371, 305, 2048, 522, 398, 176, 222,
	209, 251, 293, 405, 0, 0, 283, 453, 218, 307,
	0, 197, 340, 0, 429, 304, 0, 412, 432, 0,
	324, 203, 363, 419, 420, 646, 651, 0, 667, 0,
	207, 208, 329, 189, 337, 2056, 2057, 2055, 350, 348,
	0, 315, 372, 529, 0, 0, 237, 0, 232, 328,
	468, 195, 447, 366, 333, 287, 395, 424, 234, 219,
	220, 263, 365, 253, 205, 458, 497, 501, 499, 495,
	492, 496, 493, 494, 498, 254, 491, 0, 466, 475,
	509, 489, 517, 474, 514, 484, 229, 513, 478, 477,
	523, 504, 505, 459, 519, 490, 488, 481, 480, 476,
	0, 154, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 165, 0, 166, 167, 168, 170, 171, 172, 645,
	173, 174, 175, 178, 179, 180, 182, 542, 183, 184,
	185, 186, 187, 188, 479, 647, 190, 191, 192, 193,
	194, 196, 198, 199, 200, 201, 202, 204, 206, 0,
	0, 0, 650, 0, 0, 0, 210, 211, 212, 213,
	214, 215, 0, 216, 217, 221, 223, 224, 225, 226,
	227, 228, 231, 0, 233, 235, 0, 236, 239, 0,
	240, 241, 242, 243, 244, 245, 246, 247, 483, 248,
	0, 249, 250, 252, 0, 255, 256, 257, 258, 259,
	0, 260, 485, 486, 261, 262, 264, 265, 266, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 280, 281, 282, 284, 0, 285, 286, 289,
	290, 291, 292, 0, 294, 502, 0, 295, 296, 297,
	0, 0, 298, 299, 300, 301, 302, 303, 306, 503,
	308, 309, 310, 311, 312, 313, 314, 544, 316, 317,
	318, 319, 320, 321, 322, 506, 507, 323, 325, 326,
	508, 510, 511, 663, 341, 342, 343, 344, 345, 346,
	347, 349, 0, 351, 352, 353, 512, 354, 355, 356,
	357, 0, 358, 359, 360, 361, 362, 364, 367, 368,
	369, 370, 0, 373, 374, 375, 376, 377, 378, 379,
	381, 382, 383, 385, 386, 387, 545, 388, 389, 390,
	391, 515, 393, 394, 546, 396, 397, 399, 400, 401,
	402, 403, 404, 561, 0, 406, 516, 407, 408, 409,
	410, 411, 0, 413, 414, 415, 416, 417, 418, 421,
	422, 423, 425, 426, 518, 427, 428, 0, 430, 431,
	666, 433, 434, 435, 436, 437, 0, 562, 438, 520,
	439, 521, 440, 441, 442, 443, 444, 445, 446, 448,
	0, 0, 450, 451, 452, 454, 455, 456, 457, 460,
	461, 462, 463, 464, 0, 465, 467, 469, 547, 524,
	525, 526, 527, 528, 530, 531, 532, 533, 470, 471,
	487, 338, 332, 288, 330, 331, 335, 336, 339, 642,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 164, 0, 181,
	648, 2050, 230, 267, 482, 0, 0, 327, 0, 380,
	384, 0, 473, 0, 0, 0, 0, 238, 0, 653,
	0, 659, 0, 665, 0, 449, 0, 655, 656, 661,
	169, 563, 472, 543, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 0, 177, 0, 0, 0, 0,
	657, 654, 658, 664, 652, 662, 649, 660, 0, 371,
	305, 0, 522, 398, 176, 222, 209, 251, 293, 405,
	0, 0, 283, 453, 218, 307, 0, 197, 340, 0,
	429, 304, 0, 412, 432, 0, 324, 203, 363, 419,
	420, 646, 651, 0, 667, 0, 207, 208, 329, 189,
	337, 534, 500, 392, 350, 348, 0, 315, 372, 529,
	0, 0, 237, 0, 232, 328, 468, 195, 447, 366,
	333, 287, 395, 424, 234, 219, 220, 263, 365, 253,
	205, 458, 497, 501, 499, 495, 492, 496, 493, 494,
	498, 254, 491, 0, 466, 475, 509, 489, 517, 474,
	514, 484, 229, 513, 478, 477, 523, 504, 505, 459,
	519, 490, 488, 481, 480, 476, 0, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 165, 0, 166,
	167, 168, 170, 171, 172, 645, 173, 174, 175, 178,
	179, 180, 182, 542, 183, 184, 185, 186, 187, 188,
	479, 647, 190, 191, 192, 193, 194, 196, 198, 199,
	200, 201, 202, 204, 206, 0, 0, 0, 650, 0,
	0, 0, 210, 211, 212, 213, 214, 215, 0, 216,
	217, 221, 223, 224, 225, 226, 227, 228, 231, 0,
	233, 235, 0, 236, 239, 0, 240, 241, 242, 243,
	244, 245, 246, 247, 483, 248, 0, 249, 250, 252,
	0, 255, 256, 257, 258, 259, 0, 260, 485, 486,
	261, 262, 264, 265, 266, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 280, 281,
	282, 284, 0, 285, 286, 289, 290, 291, 292, 0,
	294, 502, 0, 295, 296, 297, 0, 0, 298, 299,
	300, 301, 302, 303, 306, 503, 308, 309, 310, 311,
	312, 313, 314, 544, 316, 317, 318, 319, 320, 321,
	322, 506, 507, 323, 325, 326, 508, 510, 511, 663,
	341, 342, 343, 344, 345, 346, 347, 349, 0, 351,
	352, 353, 512, 354, 355, 356, 357, 0, 358, 359,
	360, 361, 362, 364, 367, 368, 369, 370, 0, 373,
	374, 375, 376, 377, 378, 379, 381, 382, 383, 385,
	386, 387, 545, 388, 389, 390, 391, 515, 393, 394,
	546, 396, 397, 399, 400, 401, 402, 403, 404, 561,
	0, 406, 516, 407, 408, 409, 410, 411, 0, 413,
	414, 415, 416, 417, 418, 421, 422, 423, 425, 426,
	518, 427, 428, 0, 430, 431, 666, 433, 434, 435,
	436, 437, 0, 562, 438, 520, 439, 521, 440, 441,
	442, 443, 444, 445, 446, 448, 0, 0, 450, 451,
	452, 454, 455, 456, 457, 460, 461, 462, 463, 464,
	0, 465, 467, 469, 547, 524, 525, 526, 527, 528,
	530, 531, 532, 533, 470, 471, 487, 338, 332, 288,
	330, 331, 335, 336, 339, 642, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 164, 0, 181, 648, 2872, 230, 267,
	482, 0, 0, 327, 0, 380, 384, 0, 473, 0,
	0, 0, 0, 238, 0, 653, 0, 659, 0, 665,
	0, 449, 0, 655, 656, 661, 169, 563, 472, 543,
	0, 0, 0, 334, 0, 0, 0, 0, 0, 0,
	0, 177, 0, 0, 0, 0, 657, 654, 658, 664,
	652, 662, 649, 660, 0, 371, 305, 0, 522, 398,
	176, 222, 209, 251, 293, 405, 0, 0, 283, 453,
	218, 307, 0, 197, 340, 0, 429, 304, 0, 412,
	432, 0, 324, 203, 363, 419, 420, 646, 651, 0,
	667, 0, 207, 208, 329, 189, 337, 534, 500, 392,
	350, 348, 0, 315, 372, 529, 0, 0, 237, 0,
	232, 328, 468, 195, 447, 366, 333, 287, 395, 424,
	234, 219, 220, 263, 365, 253, 205, 458, 497, 501,
	499, 495, 492, 496, 493, 494, 498, 254, 491, 0,
	466, 475, 509, 489, 517, 474, 514, 484, 229, 513,
	478, 477, 523, 504, 505, 459, 519, 490, 488, 481,
	480, 476, 0, 154, 155, 156, 157, 158, 159, 160,
	161, 162, 163, 165, 0, 166, 167, 168, 170, 171,
	172, 645, 173, 174, 175, 178, 179, 180, 182, 542,
	183, 184, 185, 186, 187, 188, 479, 647, 190, 191,
	192, 193, 194, 196, 198, 199, 200, 201, 202, 204,
	206, 0, 0, 0, 650, 0, 0, 0, 210, 211,
	212, 213, 214, 215, 0, 216, 217, 221, 223, 224,
	225, 226, 227, 228, 231, 0, 233, 235, 0, 236,
	239, 0, 240, 241, 242, 243, 244, 245, 246, 247,
	483, 248, 0, 249, 250, 252, 0, 255, 256, 257,
	258, 259, 0, 260, 485, 486, 261, 262, 264, 265,
	266, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 280, 281, 282, 284, 0, 285,
	286, 289, 290, 291, 292, 0, 294, 502, 0, 295,
	296, 297, 0, 0, 298, 299, 300, 301, 302, 303,
	306, 503, 308, 309, 310, 311, 312, 313, 314, 544,
	316, 317, 318, 319, 320, 321, 322, 506, 507, 323,
	325, 326, 508, 510, 511, 663, 341, 342, 343, 344,
	345, 346, 347, 349, 0, 351, 352, 353, 512, 354,
	355, 356, 357, 0, 358, 359, 360, 361, 362, 364,
	367, 368, 369, 370, 0, 373, 374, 375, 376, 377,
	378, 379, 381, 382, 383, 385, 386, 387, 545, 388,
	389, 390, 391, 515, 393, 394, 546, 396, 397, 399,
	400, 401, 402, 403, 404, 561, 0, 406, 516, 407,
	408, 409, 410, 411, 0, 413, 414, 415, 416, 417,
	418, 421, 422, 423, 425, 426, 518, 427, 428, 0,
	430, 431, 666, 433, 434, 435, 436, 437, 0, 562,
	438, 520, 439, 521, 440, 441, 442, 443, 444, 445,
	446, 448, 0, 0, 450, 451, 452, 454, 455, 456,
	457, 460, 461, 462, 463, 464, 0, 465, 467, 469,
	547, 524, 525, 526, 527, 528, 530, 531, 532, 533,
	470, 471, 487, 338, 332, 288, 330, 331, 335, 336,
	339, 642, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 164,
	0, 181, 648, 3481, 230, 267, 482, 0, 0, 327,
	0, 380, 384, 0, 473, 0, 0, 0, 0, 238,
	0, 653, 0, 659, 0, 665, 0, 449, 0, 655,
	656, 661, 169, 563, 472, 543, 0, 0, 0, 334,
	0, 0, 0, 0, 0, 0, 0, 177, 0, 0,
	0, 0, 657, 654, 658, 664, 652, 662, 649, 660,
	0, 371, 305, 0, 522, 398, 176, 222, 209, 251,
	293, 405, 0, 0, 283, 453, 218, 307, 0, 197,
	340, 0, 429, 304, 0, 412, 432, 0, 324, 203,
	363, 419, 420, 646, 651, 0, 667, 0, 207, 208,
	329, 189, 337, 2056, 2057, 2055, 350, 348, 0, 315,
	372, 529, 0, 0, 237, 0, 232, 328, 468, 195,
	447, 366, 333, 287, 395, 424, 234, 219, 220, 263,
	365, 253, 205, 458, 497, 501, 499, 495, 492, 496,
	493, 494, 498, 254, 491, 0, 466, 475, 509, 489,
	517, 474, 514, 484, 229, 513, 478, 477, 523, 504,
	505, 459, 519, 490, 488, 481, 480, 476, 0, 154,
	155, 156, 157, 158, 159, 160, 161, 162, 163, 165,
	0, 166, 167, 168, 170, 171, 172, 645, 173, 174,
	175, 178, 179, 180, 182, 542, 183, 184, 185, 186,
	187, 188, 479, 647, 190, 191, 192, 193, 194, 196,
	198, 199, 200, 201, 202, 204, 206, 0, 0, 0,
	650, 0, 0, 0, 210, 211, 212, 213, 214, 215,
	0, 216, 217, 221, 223, 224, 225, 226, 227, 228,
	231, 0, 233, 235, 0, 236, 239, 0, 240, 241,
	242, 243, 244, 245, 246, 247, 483, 248, 0, 249,
	250, 252, 0, 255, 256, 257, 258, 259, 0, 260,
	485, 486, 261, 262, 264, 265, 266, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	280, 281, 282, 284, 0, 285, 286, 289, 290, 291,
	292, 0, 294, 502, 0, 295, 296, 297, 0, 0,
	298, 299, 300, 301, 302, 303, 306, 503, 308, 309,
	310, 311, 312, 313, 314, 544, 316, 317, 318, 319,
	320, 321, 322, 506, 507, 323, 325, 326, 508, 510,
	511, 663, 341, 342, 343, 344, 345, 346, 347, 349,
	0, 351, 352, 353, 512, 354, 355, 356, 357, 0,
	358, 359, 360, 361, 362, 364, 367, 368, 369, 370,
	0, 373, 374, 375, 376, 377, 378, 379, 381, 382,
	383, 385, 386, 387, 545, 388, 389, 390, 391, 515,
	393, 394, 546, 396, 397, 399, 400, 401, 402, 403,
	404, 561, 0, 406, 516, 407, 408, 409, 410, 411,
	0, 413, 414, 415, 416, 417, 418, 421, 422, 423,
	425, 426, 518, 427, 428, 0, 430, 431, 666, 433,
	434, 435, 436, 437, 0, 562, 438, 520, 439, 521,
	440, 441, 442, 443, 444, 445, 446, 448, 0, 0,
	450, 451, 452, 454, 455, 456, 457, 460, 461, 462,
	463, 464, 0, 465, 467, 469, 547, 524, 525, 526,
	527, 528, 530, 531, 532, 533, 470, 471, 487, 338,
	332, 288, 330, 331, 335, 336, 339, 151, 0, 0,
	0, 0, 0, 0, 600, 0, 0, 0, 0, 0,
	0, 611, 612, 613, 0, 164, 0, 181, 0, 45,
	230, 267, 482, 0, 0, 327, 0, 380, 384, 0,
	473, 0, 0, 0, 0, 238, 0, 0, 0, 0,
	0, 0, 0, 449, 0, 0, 0, 0, 169, 563,
	472, 543, 0, 0, 0, 334, 0, 0, 0, 0,
	0, 0, 0, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 371, 305, 0,
	522, 398, 176, 222, 209, 251, 293, 405, 0, 0,
	283, 453, 218, 307, 0, 197, 340, 0, 429, 304,
	0, 412, 432, 0, 324, 203, 363, 419, 420, 0,
	0, 0, 0, 0, 207, 208, 329, 189, 337, 534,
	500, 392, 350, 348, 0, 315, 372, 529, 0, 0,
	237, 0, 232, 328, 468, 195, 447, 366, 333, 287,
	395, 424, 234, 219, 220, 263, 365, 253, 205, 458,
	497, 501, 499, 495, 492, 496, 493, 494, 498, 254,
	491, 0, 466, 475, 509, 489, 517, 474, 514, 484,
	229, 513, 478, 477, 523, 504, 505, 459, 519, 490,
	488, 481, 480, 476, 0, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 165, 0, 166, 167, 168,
	170, 171, 172, 0, 173, 174, 175, 178, 179, 180,
	182, 542, 183, 184, 185, 186, 187, 188, 479, 0,
	190, 191, 192, 193, 194, 196, 198, 199, 200, 201,
	202, 204, 206, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 212, 213, 214, 215, 0, 216, 217, 221,
	223, 224, 225, 226, 227, 228, 231, 0, 233, 235,
	0, 236, 239, 0, 240, 241, 242, 243, 244, 245,
	246, 247, 483, 248, 0, 249, 250, 252, 0, 255,
	256, 257, 258, 259, 0, 260, 485, 486, 261, 262,
	264, 265, 266, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 280, 281, 282, 284,
	0, 285, 286, 289, 290, 291, 292, 0, 294, 502,
	0, 295, 296, 297, 0, 0, 298, 299, 300, 301,
	302, 303, 306, 503, 308, 309, 310, 311, 312, 313,
	314, 544, 316, 317, 318, 319, 320, 321, 322, 506,
	507, 323, 325, 326, 508, 510, 511, 0, 341, 342,
	343, 344, 345, 346, 347, 349, 0, 351, 352, 353,
	512, 354, 355, 356, 357, 0, 358, 359, 360, 361,
	362, 364, 367, 368, 369, 370, 0, 373, 374, 375,
	376, 377, 378, 379, 381, 382, 383, 385, 386, 387,
	545, 388, 389, 390, 391, 515, 393, 394, 546, 396,
	397, 399, 400, 401, 402, 403, 404, 561, 0, 406,
	516, 407, 408, 409, 410, 411, 0, 413, 414, 415,
	416, 417, 418, 421, 422, 423, 425, 426, 518, 427,
	428, 0, 430, 431, 0, 433, 434, 435, 436, 437,
	0, 562, 438, 520, 439, 521, 440, 441, 442, 443,
	444, 445, 446, 448, 0, 0, 450, 451, 452, 454,
	455, 456, 457, 460, 461, 462, 463, 464, 0, 465,
	467, 469, 547, 524, 525, 526, 527, 528, 530, 531,
	532, 533, 470, 471, 487, 338, 332, 288, 330, 331,
	335, 336, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 608,
	609, 610, 0, 0, 0, 0, 0, 151, 602, 603,
	604, 605, 606, 607, 600, 0, 0, 0, 0, 0,
	0, 611, 612, 613, 0, 164, 0, 181, 0, 0,
	230, 267, 482, 0, 0, 327, 0, 380, 384, 0,
	473, 0, 0, 0, 0, 238, 0, 0, 0, 0,
	0, 0, 0, 449, 0, 0, 0, 0, 169, 563,
	472, 543, 0, 0, 0, 3273, 0, 0, 0, 0,
	0, 0, 0, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 371, 305, 0,
	522, 398, 176, 222, 209, 251, 293, 405, 0, 0,
	283, 453, 218, 307, 0, 197, 340, 0, 429, 304,
	0, 412, 432, 0, 324, 203, 363, 419, 420, 0,
	0, 0, 0, 0, 207, 208, 329, 189, 337, 534,
	500, 392, 350, 348, 0, 315, 372, 529, 0, 0,
	237, 0, 232, 328, 468, 195, 447, 366, 333, 287,
	395, 424, 234, 219, 220, 263, 365, 253, 205, 458,
	497, 501, 499, 495, 492, 496, 493, 494, 498, 254,
	491, 0, 466, 475, 509, 489, 517, 474, 514, 484,
	229, 513, 478, 477, 523, 504, 505, 459, 519, 490,
	488, 481, 480, 476, 0, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 165, 0, 166, 167, 168,
	170, 171, 172, 0, 173, 174, 175, 178, 179, 180,
	182, 542, 183, 184, 185, 186, 187, 188, 479, 0,
	190, 191, 192, 193, 194, 196, 198, 199, 200, 201,
	202, 204, 206, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 212, 213, 214, 215, 0, 216, 217, 221,
	223, 224, 225, 226, 227, 228, 231, 0, 233, 235,
	0, 236, 239, 0, 240, 241, 242, 243, 244, 245,
	246, 247, 483, 248, 0, 249, 250, 252, 0, 255,
	256, 257, 258, 259, 0, 260, 485, 486, 261, 262,
	264, 265, 266, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 280, 281, 282, 284,
	0, 285, 286, 289, 290, 291, 292, 0, 294, 502,
	0, 295, 296, 297, 0, 0, 298, 299, 300, 301,
	302, 303, 306, 503, 308, 309, 310, 311, 312, 313,
	314, 544, 316, 317, 318, 319, 320, 321, 322, 506,
	507, 323, 325, 326, 508, 510, 511, 0, 341, 342,
	343, 344, 345, 346, 347, 349, 0, 351, 352, 353,
	512, 354, 355, 356, 357, 0, 358, 359, 360, 361,
	362, 364, 367, 368, 369, 370, 0, 373, 374, 375,
	376, 377, 378, 379, 381, 382, 383, 385, 386, 387,
	545, 388, 389, 390, 391, 515, 393, 394, 546, 396,
	397, 399, 400, 401, 402, 403, 404, 561, 0, 406,
	516, 407, 408, 409, 410, 411, 0, 413, 414, 415,
	416, 417, 418, 421, 422, 423, 425, 426, 518, 427,
	428, 0, 430, 431, 0, 433, 434, 435, 436, 437,
	0, 562, 438, 520, 439, 521, 440, 441, 442, 443,
	444, 445, 446, 448, 0, 0, 450, 451, 452, 454,
	455, 456, 457, 460, 461, 462, 463, 464, 0, 465,
	467, 469, 547, 524, 525, 526, 527, 528, 530, 531,
	532, 533, 470, 471, 487, 338, 332, 288, 330, 331,
	335, 336, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 608,
	609, 610, 0, 0, 0, 0, 0, 151, 602, 603,
	604, 605, 606, 607, 600, 0, 0, 0, 0, 0,
	0, 611, 612, 613, 0, 164, 0, 181, 0, 0,
	230, 267, 482, 0, 0, 327, 0, 380, 384, 0,
	473, 0, 0, 0, 0, 238, 0, 0, 0, 0,
	0, 0, 0, 449, 0, 0, 0, 0, 169, 563,
	472, 543, 0, 0, 0, 334, 0, 0, 0, 0,
	0, 0, 0, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 371, 305, 0,
	522, 398, 176, 222, 209, 251, 293, 405, 0, 0,
	283, 453, 218, 307, 0, 197, 340, 0, 429, 304,
	0, 412, 432, 0, 324, 203, 363, 419, 420, 0,
	0, 0, 0, 0, 207, 208, 329, 189, 337, 534,
	500, 392, 350, 348, 0, 315, 372, 529, 0, 0,
	237, 0, 232, 328, 468, 195, 447, 366, 333, 287,
	395, 424, 234, 219, 220, 263, 365, 253, 205, 458,
	497, 501, 499, 495, 492, 496, 493, 494, 498, 254,
	491, 0, 466, 475, 509, 489, 517, 474, 514, 484,
	229, 513, 478, 477, 523, 504, 505, 459, 519, 490,
	488, 481, 480, 476, 0, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 165, 0, 166, 167, 168,
	170, 171, 172, 0, 173, 174, 175, 178, 179, 180,
	182, 542, 183, 184, 185, 2323, 187, 188, 479, 0,
	190, 191, 192, 193, 194, 196, 198, 199, 200, 201,
	202, 204, 206, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 212, 213, 214, 215, 0, 216, 217, 221,
	223, 224, 225, 226, 227, 228, 231, 0, 233, 235,
	0, 236, 239, 0, 240, 241, 242, 243, 244, 245,
	246, 247, 483, 2324, 0, 249, 250, 252, 0, 255,
	256, 257, 258, 259, 0, 260, 485, 486, 261, 262,
	264, 265, 266, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 280, 281, 282, 284,
	0, 285, 286, 289, 290, 291, 292, 0, 294, 502,
	0, 295, 296, 297, 0, 0, 298, 299, 300, 301,
	302, 303, 306, 503, 308, 309, 310, 311, 312, 313,
	314, 544, 316, 317, 318, 319, 320, 321, 322, 506,
	507, 323, 325, 326, 508, 510, 511, 0, 341, 342,
	343, 344, 345, 346, 347, 349, 0, 351, 352, 353,
	512, 354, 355, 356, 357, 0, 358, 359, 360, 361,
	362, 364, 367, 368, 369, 370, 0, 373, 374, 375,
	376, 377, 378, 379, 381, 382, 383, 385, 386, 387,
	545, 388, 389, 390, 391, 515, 393, 394, 546, 396,
	397, 399, 400, 401, 402, 403, 404, 561, 0, 406,
	516, 407, 408, 409, 410, 411, 0, 413, 414, 415,
	416, 417, 418, 421, 422, 423, 425, 426, 518, 427,
	428, 0, 430, 431, 0, 433, 434, 435, 436, 437,
	0, 562, 438, 520, 439, 521, 440, 441, 442, 443,
	444, 445, 446, 448, 0, 0, 450, 451, 452, 454,
	455, 456, 457, 460, 461, 462, 463, 464, 0, 465,
	467, 469, 547, 524, 525, 526, 527, 528, 530, 531,
	532, 533, 470, 471, 487, 338, 332, 288, 330, 331,
	335, 336, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 151, 0, 0, 608,
	609, 610, 0, 0, 0, 0, 0, 0, 602, 603,
	604, 605, 606, 607, 164, 0, 181, 0, 0, 230,
	267, 482, 0, 0, 327, 0, 380, 384, 0, 473,
	0, 0, 0, 0, 238, 0, 0, 0, 0, 0,
	0, 0, 449, 0, 0, 0, 0, 169, 563, 472,
	543, 0, 0, 0, 334, 0, 0, 0, 0, 0,
	0, 0, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 371, 305, 0, 522,
	398, 176, 222, 209, 251, 293, 405, 0, 0, 283,
	453, 218, 307, 0, 197, 340, 0, 429, 304, 0,
	412, 432, 0, 324, 203, 363, 419, 420, 0, 0,
	0, 0, 0, 207, 208, 329, 189, 337, 534, 500,
	392, 350, 348, 0, 315, 372, 529, 0, 0, 237,
	0, 232, 328, 468, 195, 447, 366, 333, 287, 395,
	424, 234, 219, 220, 263, 365, 253, 205, 458, 497,
	501, 499, 495, 492, 496, 493, 494, 498, 254, 491,
	0, 466, 475, 509, 489, 517, 474, 514, 484, 229,
	513, 478, 477, 523, 504, 505, 459, 519, 490, 488,
	481, 480, 476, 0, 154, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 165, 0, 166, 167, 168, 170,
	171, 172, 0, 173, 174, 175, 178, 179, 180, 182,
	542, 183, 184, 185, 186, 187, 188, 479, 0, 190,
	191, 192, 193, 194, 196, 198, 199, 200, 201, 202,
	204, 206, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 212, 213, 214, 215, 0, 216, 217, 221, 223,
	224, 225, 226, 227, 228, 231, 0, 233, 235, 0,
	236, 239, 0, 240, 241, 242, 243, 244, 245, 246,
	247, 483, 248, 0, 249, 250, 252, 0, 255, 256,
	257, 258, 259, 0, 260, 485, 486, 261, 262, 264,
	265, 266, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 280, 281, 282, 284, 0,
	285, 286, 289, 290, 291, 292, 0, 294, 502, 0,
	295, 296, 297, 0, 0, 298, 299, 300, 301, 302,
	303, 306, 503, 308, 309, 310, 311, 312, 313, 314,
	544, 316, 317, 318, 319, 320, 321, 322, 506, 507,
	323, 325, 326, 508, 510, 511, 0, 341, 342, 343,
	344, 345, 346, 347, 349, 0, 351, 352, 353, 512,
	354, 355, 356, 357, 0, 358, 359, 360, 361, 362,
	364, 367, 368, 369, 370, 0, 373, 374, 375, 376,
	377, 378, 379, 381, 382, 383, 385, 386, 387, 545,
	388, 389, 390, 391, 515, 393, 394, 546, 396, 397,
	399, 400, 401, 402, 403, 404, 561, 0, 406, 516,
	407, 408, 409, 410, 411, 0, 413, 414, 415, 416,
	417, 418, 421, 422, 423, 425, 426, 518, 427, 428,
	0, 430, 431, 0, 433, 434, 435, 436, 437, 0,
	562, 438, 520, 439, 521, 440, 441, 442, 443, 444,
	445, 446, 448, 0, 0, 450, 451, 452, 454, 455,
	456, 457, 460, 461, 462, 463, 464, 0, 465, 467,
	469, 547, 524, 525, 526, 527, 528, 530, 531, 532,
	533, 470, 471, 487, 338, 332, 288, 330, 331, 335,
	336, 339, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	164, 0, 181, 0, 0, 230, 267, 482, 0, 3565,
	327, 0, 380, 384, 0, 473, 0, 0, 0, 0,
	238, 0, 0, 0, 0, 0, 0, 0, 449, 0,
	0, 0, 0, 169, 563, 472, 543, 0, 0, 0,
	334, 0, 0, 0, 0, 0, 0, 0, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 371, 305, 0, 522, 398, 176, 222, 209,
	251, 293, 405, 0, 0, 283, 453, 218, 307, 0,
	197, 340, 0, 429, 304, 0, 412, 432, 0, 324,
	203, 363, 419, 420, 0, 0, 0, 0, 0, 207,
	208, 329, 189, 337, 534, 500, 392, 350, 348, 0,
	315, 372, 529, 0, 0, 237, 0, 232, 328, 468,
	195, 447, 366, 333, 287, 395, 424, 234, 219, 220,
	263, 365, 253, 205, 458, 497, 501, 499, 495, 492,
	496, 493, 494, 498, 254, 491, 0, 466, 475, 509,
	489, 517, 474, 514, 484, 229, 513, 478, 477, 523,
	504, 505, 459, 519, 490, 488, 481, 480, 476, 0,
	154, 155, 156, 157, 158, 159, 160, 161, 162, 163,
	165, 0, 166, 167, 168, 170, 171, 172, 0, 173,
	174, 175, 178, 179, 180, 182, 542, 183, 184, 185,
	186, 187, 188, 479, 0, 190, 191, 192, 193, 194,
	196, 198, 199, 200, 201, 202, 204, 206, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 212, 213, 214,
	215, 0, 216, 217, 221, 223, 224, 225, 226, 227,
	228, 231, 0, 233, 235, 0, 236, 239, 0, 240,
	241, 242, 243, 244, 245, 246, 247, 483, 248, 0,
	249, 250, 252, 0, 255, 256, 257, 258, 259, 0,
	260, 485, 486, 261, 262, 264, 265, 266, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 280, 281, 282, 284, 0, 285, 286, 289, 290,
	291, 292, 0, 294, 502, 0, 295, 296, 297, 0,
	0, 298, 299, 300, 301, 302, 303, 306, 503, 308,
	309, 310, 311, 312, 313, 314, 544, 316, 317, 318,
	319, 320, 321, 322, 506, 507, 323, 325, 326, 508,
	510, 511, 0, 341, 342, 343, 344, 345, 346, 347,
	349, 0, 351, 352, 353, 512, 354, 355, 356, 357,
	0, 358, 359, 360, 361, 362, 364, 367, 368, 369,
	370, 0, 373, 374, 375, 376, 377, 378, 379, 381,
	382, 383, 385, 386, 387, 545, 388, 389, 390, 391,
	515, 393, 394, 546, 396, 397, 399, 400, 401, 402,
	403, 404, 561, 0, 406, 516, 407, 408, 409, 410,
	411, 0, 413, 414, 415, 416, 417, 418, 421, 422,
	423, 425, 426, 518, 427, 428, 0, 430, 431, 0,
	433, 434, 435, 436, 437, 0, 562, 438, 520, 439,
	521, 440, 441, 442, 443, 444, 445, 446, 448, 0,
	0, 450, 451, 452, 454, 455, 456, 457, 460, 461,
	462, 463, 464, 0, 465, 467, 469, 547, 524, 525,
	526, 527, 528, 530, 531, 532, 533, 470, 471, 487,
	338, 332, 288, 330, 331, 335, 336, 339, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 164, 0, 181, 0,
	0, 230, 267, 482, 0, 3468, 327, 0, 380, 384,
	0, 473, 0, 0, 0, 0, 238, 0, 0, 0,
	0, 0, 0, 0, 449, 0, 0, 0, 0, 169,
	563, 472, 543, 0, 0, 0, 334, 0, 0, 0,
	0, 0, 0, 0, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 371, 305,
	0, 522, 398, 176, 222, 209, 251, 293, 405, 0,
	0, 283, 453, 218, 307, 0, 197, 340, 0, 429,
	304, 0, 412, 432, 0, 324, 203, 363, 419, 420,
	0, 0, 0, 0, 0, 207, 208, 329, 189, 337,
	534, 500, 392, 350, 348, 0, 315, 372, 529, 0,
	0, 237, 0, 232, 328, 468, 195, 447, 366, 333,
	287, 395, 424, 234, 219, 220, 263, 365, 253, 205,
	458, 497, 501, 499, 495, 492, 496, 493, 494, 498,
	254, 491, 0, 466, 475, 509, 489, 517, 474, 514,
	484, 229, 513, 478, 477, 523, 504, 505, 459, 519,
	490, 488, 481, 480, 476, 0, 154, 155, 156, 157,
	158, 159, 160, 161, 162, 163, 165, 0, 166, 167,
	168, 170, 171, 172, 0, 173, 174, 175, 178, 179,
	180, 182, 542, 183, 184, 185, 186, 187, 188, 479,
	0, 190, 191, 192, 193, 194, 196, 198, 199, 200,
	201, 202, 204, 206, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 212, 213, 214, 215, 0, 216, 217,
	221, 223, 224, 225, 226, 227, 228, 231, 0, 233,
	235, 0, 236, 239, 0, 240, 241, 242, 243, 244,
	245, 246, 247, 483, 248, 0, 249, 250, 252, 0,
	255, 256, 257, 258, 259, 0, 260, 485, 486, 261,
	262, 264, 265, 266, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 280, 281, 282,
	284, 0, 285, 286, 289, 290, 291, 292, 0, 294,
	502, 0, 295, 296, 297, 0, 0, 298, 299, 300,
	301, 302, 303, 306, 503, 308, 309, 310, 311, 312,
	313, 314, 544, 316, 317, 318, 319, 320, 321, 322,
	506, 507, 323, 325, 326, 508, 510, 511, 0, 341,
	342, 343, 344, 345, 346, 347, 349, 0, 351, 352,
	353, 512, 354, 355, 356, 357, 0, 358, 359, 360,
	361, 362, 364, 367, 368, 369, 370, 0, 373, 374,
	375, 376, 377, 378, 379, 381, 382, 383, 385, 386,
	387, 545, 388, 389, 390, 391, 515, 393, 394, 546,
	396, 397, 399, 400, 401, 402, 403, 404, 561, 0,
	406, 516, 407, 408, 409, 410, 411, 0, 413, 414,
	415, 416, 417, 418, 421, 422, 423, 425, 426, 518,
	427, 428, 0, 430, 431, 0, 433, 434, 435, 436,
	437, 0, 562, 438, 520, 439, 521, 440, 441, 442,
	443, 444, 445, 446, 448, 0, 0, 450, 451, 452,
	454, 455, 456, 457, 460, 461, 462, 463, 464, 0,
	465, 467, 469, 547, 524, 525, 526, 527, 528, 530,
	531, 532, 533, 470, 471, 487, 338, 332, 288, 330,
	331, 335, 336, 339, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 164, 0, 181, 0, 0, 230, 267, 482,
	0, 3465, 327, 0, 380, 384, 49, 473, 0, 0,
	0, 0, 238, 0, 0, 0, 0, 0, 0, 0,
	449, 0, 0, 0, 0, 169, 563, 472, 543, 0,
	0, 0, 334, 46, 0, 0, 0, 47, 0, 0,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 371, 305, 0, 1570, 398, 176,
	222, 209, 251, 293, 405, 0, 0, 283, 453, 218,
	307, 0, 197, 340, 0, 429, 304, 0, 412, 432,
	0, 324, 203, 363, 419, 420, 0, 0, 0, 0,
	0, 207, 208, 329, 189, 337, 534, 500, 392, 350,
	348, 0, 315, 372, 529, 0, 0, 237, 0, 232,
	328, 468, 195, 447, 366, 333, 287, 395, 424, 234,
	219, 220, 263, 365, 253, 205, 458, 497, 501, 499,
	495, 492, 496, 493, 494, 498, 254, 491, 0, 466,
	475, 509, 489, 517, 474, 514, 484, 229, 513, 478,
	477, 523, 504, 505, 459, 519, 490, 488, 481, 480,
	476, 0, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 165, 0, 166, 167, 168, 170, 171, 172,
	0, 173, 174, 175, 178, 179, 180, 182, 542, 183,
	184, 185, 186, 187, 188, 479, 0, 190, 191, 192,
	193, 194, 196, 198, 199, 200, 201, 202, 204, 206,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 212,
	213, 214, 215, 0, 216, 217, 221, 223, 224, 225,
	226, 227, 228, 231, 0, 233, 235, 0, 236, 239,
	0, 240, 241, 242, 243, 244, 245, 246, 247, 483,
	248, 0, 249, 250, 252, 0, 255, 256, 257, 258,
	259, 0, 260, 485, 486, 261, 262, 264, 265, 266,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 280, 281, 282, 284, 0, 285, 286,
	289, 290, 291, 292, 0, 294, 502, 0, 295, 296,
	297, 0, 0, 298, 299, 300, 301, 302, 303, 306,
	503, 308, 309, 310, 311, 312, 313, 314, 544, 316,
	317, 318, 319, 320, 321, 322, 506, 507, 323, 325,
	326, 508, 510, 511, 0, 341, 342, 343, 344, 345,
	346, 347, 349, 0, 351, 352, 353, 512, 354, 355,
	356, 357, 0, 358, 359, 360, 361, 362, 364, 367,
	368, 369, 370, 0, 373, 374, 375, 376, 377, 378,
	379, 381, 382, 383, 385, 386, 387, 545, 388, 389,
	390, 391, 515, 393, 394, 546, 396, 397, 399, 400,
	401, 402, 403, 404, 561, 0, 406, 516, 407, 408,
	409, 410, 411, 0, 413, 414, 415, 416, 417, 418,
	421, 422, 423, 425, 426, 518, 427, 428, 0, 430,
	431, 0, 433, 434, 435, 436, 437, 0, 562, 438,
	520, 439, 521, 440, 441, 442, 443, 444, 445, 446,
	448, 0, 0, 450, 451, 452, 454, 455, 456, 457,
	460, 461, 462, 463, 464, 0, 465, 467, 469, 547,
	524, 525, 526, 527, 528, 530, 531, 532, 533, 470,
	471, 487, 338, 332, 288, 330, 331, 335, 336, 339,
	680, 0, 0, 778, 0, 0, 0, 0, 0, 50,
	0, 0, 0, 0, 0, 0, 0, 0, 164, 0,
	181, 648, 45, 230, 267, 482, 0, 0, 327, 0,
	380, 384, 0, 473, 0, 0, 0, 0, 238, 1061,
	653, 0, 659, 0, 665, 1060, 449, 0, 655, 656,
	661, 169, 563, 472, 543, 0, 0, 0, 334, 0,
	0, 0, 0, 0, 0, 0, 177, 0, 0, 0,
	1062, 657, 654, 658, 664, 652, 662, 649, 660, 0,
	371, 305, 0, 522, 398, 176, 222, 209, 251, 293,
	405, 0, 0, 283, 453, 218, 307, 0, 197, 340,
	0, 429, 304, 0, 412, 432, 0, 324, 203, 363,
	419, 420, 646, 651, 0, 667, 0, 207, 208, 329,
	189, 337, 534, 500, 392, 350, 348, 0, 315, 372,
	529, 0, 0, 237, 0, 232, 328, 468, 195, 447,
	366, 333, 287, 395, 424, 234, 219, 220, 263, 365,
	253, 205, 458, 497, 501, 499, 495, 492, 496, 493,
	494, 498, 254, 491, 0, 466, 475, 509, 489, 517,
	474, 514, 484, 229, 513, 478, 477, 523, 504, 505,
	459, 519, 490, 488, 481, 480, 476, 0, 154, 155,
	156, 157, 158, 159, 160, 161, 162, 163, 165, 0,
	166, 167, 168, 170, 171, 172, 645, 173, 174, 175,
	178, 179, 180, 182, 542, 183, 184, 185, 186, 187,
	188, 479, 647, 190, 191, 192, 193, 194, 196, 198,
	199, 200, 201, 202, 204, 206, 0, 0, 0, 650,
	0, 0, 0, 210, 211, 212, 213, 214, 215, 0,
	216, 217, 221, 223, 224, 225, 226, 227, 228, 231,
	0, 233, 235, 0, 236, 239, 0, 240, 241, 242,
	243, 244, 245, 246, 247, 483, 248, 0, 249, 250,
	252, 0, 255, 256, 257, 258, 259, 0, 260, 485,
	486, 261, 262, 264, 265, 266, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 280,
	281, 282, 284, 0, 285, 286, 289, 290, 291, 292,
	0, 294, 502, 0, 295, 296, 297, 0, 0, 298,
	299, 300, 301, 302, 303, 306, 503, 308, 309, 310,
	311, 312, 313, 314, 544, 316, 317, 318, 319, 320,
	321, 322, 506, 507, 323, 325, 326, 508, 510, 511,
	663, 341, 342, 343, 344, 345, 346, 347, 349, 0,
	351, 352, 353, 512, 354, 355, 356, 357, 0, 358,
	359, 360, 361, 362, 364, 367, 368, 369, 370, 0,
	373, 374, 375, 376, 377, 378, 379, 381, 382, 383,
	385, 386, 387, 545, 388, 389, 390, 391, 515, 393,
	394, 546, 396, 397, 399, 400, 401, 402, 403, 404,
	561, 0, 406, 516, 407, 408, 409, 410, 411, 0,
	413, 414, 415, 416, 417, 418, 421, 422, 423, 425,
	426, 518, 427, 428, 0, 430, 431, 666, 433, 434,
	435, 436, 437, 0, 562, 438, 520, 439, 521, 440,
	441, 442, 443, 444, 445, 446, 448, 0, 0, 450,
	451, 452, 454, 455, 456, 457, 460, 461, 462, 463,
	464, 0, 465, 467, 469, 547, 524, 525, 526, 527,
	528, 530, 531, 532, 533, 470, 471, 487, 338, 332,
	288, 330, 331, 335, 336, 339, 680, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 164, 0, 181, 648, 0, 230,
	267, 482, 0, 0, 327, 0, 380, 384, 0, 473,
	0, 0, 0, 0, 238, 0, 653, 0, 659, 0,
	665, 0, 449, 0, 655, 656, 661, 169, 563, 472,
	543, 0, 0, 0, 334, 0, 0, 0, 0, 0,
	0, 0, 177, 0, 0, 0, 0, 657, 654, 658,
	664, 652, 662, 649, 660, 0, 371, 305, 0, 522,
	398, 176, 222, 209, 251, 293, 405, 0, 0, 283,
	453, 218, 307, 0, 197, 340, 0, 429, 304, 0,
	412, 432, 0, 324, 203, 363, 419, 420, 646, 651,
	0, 667, 0, 207, 208, 329, 189, 337, 534, 500,
	392, 350, 348, 0, 315, 372, 529, 0, 0, 237,
	0, 232, 328, 468, 195, 447, 366, 333, 287, 395,
	424, 234, 219, 220, 263, 365, 253, 205, 458, 497,
	501, 499, 495, 492, 496, 493, 494, 498, 254, 491,
	0, 466, 475, 509, 489, 517, 474, 514, 484, 229,
	513, 478, 477, 523, 504, 505, 459, 519, 490, 488,
	481, 480, 476, 0, 154, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 165, 0, 166, 167, 168, 170,
	171, 172, 645, 173, 174, 175, 178, 179, 180, 182,
	542, 183, 184, 185, 186, 187, 188, 479, 647, 190,
	191, 192, 193, 194, 196, 198, 199, 200, 201, 202,
	204, 206, 0, 0, 677, 650, 0, 0, 678, 210,
	211, 212, 213, 214, 215, 0, 216, 217, 221, 223,
	224, 225, 226, 227, 228, 231, 0, 233, 235, 0,
	236, 239, 0, 240, 241, 242, 243, 244, 245, 246,
	247, 483, 248, 0, 249, 250, 252, 0, 255, 256,
	257, 258, 259, 0, 260, 485, 486, 261, 262, 264,
	265, 266, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 280, 281, 282, 284, 0,
	285, 286, 289, 290, 291, 292, 0, 294, 502, 0,
	295, 296, 297, 0, 0, 298, 299, 300, 301, 302,
	303, 306, 503, 308, 309, 310, 311, 312, 313, 314,
	544, 316, 317, 318, 319, 320, 321, 322, 506, 507,
	323, 325, 326, 508, 510, 511, 663, 341, 342, 343,
	344, 345, 346, 347, 349, 0, 351, 352, 353, 512,
	354, 355, 356, 357, 0, 358, 359, 360, 361, 362,
	364, 367, 368, 369, 370, 0, 373, 374, 375, 376,
	377, 378, 379, 381, 382, 383, 385, 386, 387, 545,
	388, 389, 390, 391, 515, 393, 394, 546, 396, 397,
	399, 400, 401, 402, 403, 404, 561, 679, 406, 516,
	407, 408, 409, 410, 411, 0, 413, 414, 415, 416,
	417, 418, 421, 422, 423, 425, 426, 518, 427, 428,
	0, 430, 431, 666, 433, 434, 435, 436, 437, 0,
	562, 438, 520, 439, 521, 440, 441, 442, 443, 444,
	445, 446, 448, 0, 0, 450, 451, 452, 454, 455,
	456, 457, 460, 461, 462, 463, 464, 0, 465, 467,
	469, 547, 524, 525, 526, 527, 528, 530, 531, 532,
	533, 470, 471, 487, 338, 332, 288, 330, 331, 335,
	336, 339, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	164, 2424, 181, 0, 0, 230, 267, 482, 0, 0,
	327, 0, 380, 384, 0, 473, 0, 0, 0, 0,
	238, 0, 0, 0, 0, 0, 0, 0, 449, 0,
	0, 0, 0, 169, 563, 472, 543, 0, 0, 0,
	334, 0, 0, 0, 0, 0, 0, 0, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 371, 305, 0, 522, 398, 176, 222, 209,
	251, 293, 405, 0, 0, 283, 453, 218, 307, 0,
	197, 340, 0, 429, 304, 0, 412, 432, 0, 324,
	203, 363, 419, 420, 0, 0, 0, 0, 0, 207,
	208, 329, 189, 337, 534, 500, 392, 350, 348, 0,
	315, 372, 529, 0, 0, 237, 0, 232, 328, 468,
	195, 447, 366, 333, 287, 395, 424, 234, 219, 220,
	263, 365, 253, 205, 458, 497, 501, 499, 495, 492,
	496, 493, 494, 498, 254, 491, 0, 466, 475, 509,
	489, 517, 474, 514, 484, 229, 513, 478, 477, 523,
	504, 505, 459, 519, 490, 488, 481, 480, 476, 0,
	154, 155, 156, 157, 158, 159, 160, 161, 162, 163,
	165, 0, 166, 167, 168, 170, 171, 172, 0, 173,
	174, 175, 178, 179, 180, 182, 542, 183, 184, 185,
	186, 187, 188, 479, 0, 190, 191, 192, 193, 194,
	196, 198, 199, 200, 201, 202, 204, 206, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 212, 213, 214,
	215, 0, 216, 217, 221, 223, 224, 225, 226, 227,
	228, 231, 0, 233, 235, 0, 236, 239, 0, 240,
	241, 242, 243, 244, 245, 246, 247, 483, 248, 0,
	249, 250, 252, 0, 255, 256, 257, 258, 259, 0,
	260, 485, 486, 261, 262, 264, 265, 266, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 280, 281, 282, 284, 0, 285, 286, 289, 290,
	291, 292, 0, 294, 502, 0, 295, 296, 297, 0,
	0, 298, 299, 300, 301, 302, 303, 306, 503, 308,
	309, 310, 311, 312, 313, 314, 544, 316, 317, 318,
	319, 320, 321, 322, 506, 507, 323, 325, 326, 508,
	510, 511, 0, 341, 342, 343, 344, 345, 346, 347,
	349, 0, 351, 352, 353, 512, 354, 355, 356, 357,
	0, 358, 359, 360, 361, 362, 364, 367, 368, 369,
	370, 0, 373, 374, 375, 376, 377, 378, 379, 381,
	382, 383, 385, 386, 387, 545, 388, 389, 390, 391,
	515, 393, 394, 546, 396, 397, 399, 400, 401, 402,
	403, 404, 561, 0, 406, 516, 407, 408, 409, 410,
	411, 0, 413, 414, 415, 416, 417, 418, 421, 422,
	423, 425, 426, 518, 427, 428, 0, 430, 431, 0,
	433, 434, 435, 436, 437, 0, 562, 438, 520, 439,
	521, 440, 441, 442, 443, 444, 445, 446, 448, 0,
	0, 450, 451, 452, 454, 455, 456, 457, 460, 461,
	462, 463, 464, 0, 465, 467, 469, 547, 524, 525,
	526, 527, 528, 530, 531, 532, 533, 470, 471, 487,
	338, 332, 288, 330, 331, 335, 336, 339, 0, 680,
	0, 0, 778, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 164, 0, 181,
	648, 791, 230, 267, 482, 0, 0, 327, 0, 380,
	384, 0, 473, 0, 0, 1046, 0, 238, 0, 653,
	0, 659, 0, 665, 0, 449, 0, 655, 656, 661,
	169, 563, 472, 543, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 0, 177, 0, 0, 0, 0,
	657, 654, 658, 664, 652, 662, 649, 660, 0, 371,
	305, 0, 522, 398, 176, 222, 209, 251, 293, 405,
	0, 0, 283, 453, 218, 307, 0, 197, 340, 0,
	429, 304, 0, 412, 432, 0, 324, 203, 363, 419,
	420, 646, 651, 0, 667, 0, 207, 208, 329, 189,
	337, 534, 500, 392, 350, 348, 0, 315, 372, 529,
	0, 0, 237, 0, 232, 328, 468, 195, 447, 366,
	333, 287, 395, 424, 234, 219, 220, 263, 365, 253,
	205, 458, 497, 501, 499, 495, 492, 496, 493, 494,
	498, 254, 491, 0, 466, 475, 509, 489, 517, 474,
	514, 484, 229, 513, 478, 477, 523, 504, 505, 459,
	519, 490, 488, 481, 480, 476, 0, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 165, 0, 166,
	167, 168, 170, 171, 172, 645, 173, 174, 175, 178,
	179, 180, 182, 542, 183, 184, 185, 186, 187, 188,
	479, 647, 190, 191, 192, 193, 194, 196, 198, 199,
	200, 201, 202, 204, 206, 0, 0, 0, 650, 0,
	0, 0, 210, 211, 212, 213, 214, 215, 0, 216,
	217, 221, 223, 224, 225, 226, 227, 228, 231, 0,
	233, 235, 0, 236, 239, 0, 240, 241, 242, 243,
	244, 245, 246, 247, 483, 248, 0, 249, 250, 252,
	0, 255, 256, 257, 258, 259, 0, 260, 485, 486,
	261, 262, 264, 265, 266, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 280, 281,
	282, 284, 0, 285, 286, 289, 290, 291, 292, 0,
	294, 502, 0, 295, 296, 297, 0, 0, 298, 299,
	300, 301, 302, 303, 306, 503, 308, 309, 310, 311,
	312, 313, 314, 544, 316, 317, 318, 319, 320, 321,
	322, 506, 507, 323, 325, 326, 508, 510, 511, 663,
	341, 342, 343, 344, 345, 346, 347, 349, 0, 351,
	352, 353, 512, 354, 355, 356, 357, 0, 358, 359,
	360, 361, 362, 364, 367, 368, 369, 370, 0, 373,
	374, 375, 376, 377, 378, 379, 381, 382, 383, 385,
	386, 387, 545, 388, 389, 390, 391, 515, 393, 394,
	546, 396, 397, 399, 400, 401, 402, 403, 404, 561,
	0, 406, 516, 407, 408, 409, 410, 411, 0, 413,
	414, 415, 416, 417, 418, 421, 422, 423, 425, 426,
	518, 427, 428, 0, 430, 431, 666, 433, 434, 435,
	436, 437, 0, 562, 438, 520, 439, 521, 440, 441,
	442, 443, 444, 445, 446, 448, 0, 0, 450, 451,
	452, 454, 455, 456, 457, 460, 461, 462, 463, 464,
	0, 465, 467, 469, 547, 524, 525, 526, 527, 528,
	530, 531, 532, 533, 470, 471, 487, 338, 332, 288,
	330, 331, 335, 336, 339, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 164, 0, 181, 0, 0, 230, 267,
	482, 0, 0, 327, 0, 380, 384, 0, 473, 0,
	0, 0, 0, 238, 0, 0, 0, 0, 0, 0,
	0, 449, 0, 0, 0, 0, 169, 563, 472, 543,
	0, 0, 0, 334, 0, 0, 0, 0, 0, 0,
	0, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 371, 305, 0, 522, 398,
	176, 222, 209, 251, 293, 405, 0, 0, 283, 453,
	218, 307, 0, 197, 340, 0, 429, 304, 0, 412,
	432, 0, 324, 203, 363, 419, 420, 0, 0, 0,
	0, 0, 207, 208, 329, 189, 337, 534, 500, 392,
	350, 348, 0, 315, 372, 529, 0, 0, 237, 0,
	232, 328, 468, 195, 447, 366, 333, 287, 395, 424,
	234, 219, 220, 263, 365, 253, 205, 458, 497, 501,
	499, 495, 492, 496, 493, 494, 498, 254, 491, 0,
	466, 475, 509, 489, 517, 474, 514, 484, 229, 513,
	478, 477, 523, 504, 505, 459, 519, 490, 488, 481,
	480, 476, 0, 154, 155, 156, 157, 158, 159, 160,
	161, 162, 163, 165, 0, 166, 167, 168, 170, 171,
	172, 0, 173, 174, 175, 178, 179, 180, 182, 542,
	183, 184, 185, 186, 187, 188, 479, 0, 190, 191,
	192, 193, 194, 196, 198, 199, 200, 201, 202, 204,
	206, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	212, 213, 214, 215, 0, 216, 217, 221, 223, 224,
	225, 226, 227, 228, 231, 0, 233, 235, 0, 236,
	239, 0, 240, 241, 242, 243, 244, 245, 246, 247,
	483, 248, 0, 249, 250, 252, 0, 255, 256, 257,
	258, 259, 0, 260, 485, 486, 261, 262, 264, 265,
	266, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 280, 281, 282, 284, 0, 285,
	286, 289, 290, 291, 292, 0, 294, 502, 0, 295,
	296, 297, 0, 0, 298, 299, 300, 301, 302, 303,
	306, 503, 308, 309, 310, 311, 312, 313, 314, 544,
	316, 317, 318, 319, 320, 321, 322, 506, 507, 323,
	325, 326, 508, 510, 511, 0, 341, 342, 343, 344,
	345, 346, 347, 349, 0, 351, 352, 353, 512, 354,
	355, 356, 357, 0, 358, 359, 360, 361, 362, 364,
	367, 368, 369, 370, 0, 373, 374, 375, 376, 377,
	378, 379, 381, 382, 383, 385, 386, 387, 545, 388,
	389, 390, 391, 515, 393, 394, 546, 396, 397, 399,
	400, 401, 402, 403, 404, 561, 0, 406, 516, 407,
	408, 409, 410, 411, 0, 413, 414, 415, 416, 417,
	418, 421, 422, 423, 425, 426, 518, 427, 428, 0,
	430, 431, 0, 433, 434, 435, 436, 437, 0, 562,
	438, 520, 439, 521, 440, 441, 442, 443, 444, 445,
	446, 448, 0, 0, 450, 451, 452, 454, 455, 456,
	457, 460, 461, 462, 463, 464, 0, 465, 467, 469,
	547, 524, 525, 526, 527, 528, 530, 531, 532, 533,
	470, 471, 487, 338, 332, 288, 330, 331, 335, 336,
	339, 680, 0, 0, 778, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 164,
	0, 181, 648, 1702, 230, 267, 482, 0, 0, 327,
	0, 380, 384, 0, 473, 0, 0, 0, 0, 238,
	0, 653, 0, 659, 0, 665, 0, 449, 0, 655,
	656, 661, 169, 563, 472, 543, 0, 0, 0, 334,
	0, 0, 0, 0, 0, 0, 0, 177, 0, 0,
	0, 0, 657, 654, 658, 664, 652, 662, 649, 660,
	0, 371, 305, 0, 522, 398, 176, 222, 209, 251,
	293, 405, 0, 0, 283, 453, 218, 307, 0, 197,
	340, 0, 429, 304, 0, 412, 432, 0, 324, 203,
	363, 419, 420, 646, 651, 0, 667, 0, 207, 208,
	329, 189, 337, 534, 500, 392, 350, 348, 0, 315,
	372, 529, 0, 0, 237, 0, 232, 328, 468, 195,
	447, 366, 333, 287, 395, 424, 234, 219, 220, 263,
	365, 253, 205, 458, 497, 501, 499, 495, 492, 496,
	493, 494, 498, 254, 491, 0, 466, 475, 509, 489,
	517, 474, 514, 484, 229, 513, 478, 477, 523, 504,
	505, 459, 519, 490, 488, 481, 480, 476, 0, 154,
	155, 156, 157, 158, 159, 160, 161, 162, 163, 165,
	0, 166, 167, 168, 170, 171, 172, 645, 173, 174,
	175, 178, 179, 180, 182, 542, 183, 184, 185, 186,
	187, 188, 479, 647, 190, 191, 192, 193, 194, 196,
	198, 199, 200, 201, 202, 204, 206, 0, 0, 0,
	650, 0, 0, 0, 210, 211, 212, 213, 214, 215,
	0, 216, 217, 221, 223, 224, 225, 226, 227, 228,
	231, 0, 233, 235, 0, 236, 239, 0, 240, 241,
	242, 243, 244, 245, 246, 247, 483, 248, 0, 249,
	250, 252, 0, 255, 256, 257, 258, 259, 0, 260,
	485, 486, 261, 262, 264, 265, 266, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	280, 281, 282, 284, 0, 285, 286, 289, 290, 291,
	292, 0, 294, 502, 0, 295, 296, 297, 0, 0,
	298, 299, 300, 301, 302, 303, 306, 503, 308, 309,
	310, 311, 312, 313, 314, 544, 316, 317, 318, 319,
	320, 321, 322, 506, 507, 323, 325, 326, 508, 510,
	511, 663, 341, 342, 343, 344, 345, 346, 347, 349,
	0, 351, 352, 353, 512, 354, 355, 356, 357, 0,
	358, 359, 360, 361, 362, 364, 367, 368, 369, 370,
	0, 373, 374, 375, 376, 377, 378, 379, 381, 382,
	383, 385, 386, 387, 545, 388, 389, 390, 391, 515,
	393, 394, 546, 396, 397, 399, 400, 401, 402, 403,
	404, 561, 0, 406, 516, 407, 408, 409, 410, 411,
	0, 413, 414, 415, 416, 417, 418, 421, 422, 423,
	425, 426, 518, 427, 428, 0, 430, 431, 666, 433,
	434, 435, 436, 437, 0, 562, 438, 520, 439, 521,
	440, 441, 442, 443, 444, 445, 446, 448, 0, 0,
	450, 451, 452, 454, 455, 456, 457, 460, 461, 462,
	463, 464, 0, 465, 467, 469, 547, 524, 525, 526,
	527, 528, 530, 531, 532, 533, 470, 471, 487, 338,
	332, 288, 330, 331, 335, 336, 339, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 164, 0, 181, 0, 0,
	230, 267, 482, 0, 0, 327, 0, 380, 384, 0,
	473, 0, 0, 0, 0, 238, 0, 0, 0, 0,
	0, 0, 0, 449, 0, 0, 0, 0, 169, 563,
	472, 543, 0, 0, 0, 334, 0, 0, 0, 0,
	0, 0, 0, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 371, 305, 0,
	522, 398, 176, 222, 209, 251, 293, 405, 0, 0,
	283, 453, 218, 307, 0, 197, 340, 0, 429, 304,
	0, 412, 432, 0, 324, 203, 363, 419, 420, 0,
	0, 0, 0, 0, 207, 208, 329, 189, 337, 534,
	500, 392, 350, 348, 0, 315, 372, 529, 0, 0,
	237, 0, 232, 328, 468, 195, 447, 366, 333, 287,
	395, 424, 234, 219, 220, 263, 365, 253, 205, 458,
	497, 501, 499, 495, 492, 496, 493, 494, 498, 254,
	491, 0, 466, 475, 509, 489, 517, 474, 514, 484,
	229, 513, 478, 477, 523, 504, 505, 459, 519, 490,
	488, 481, 480, 476, 0, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 165, 0, 166, 167, 168,
	170, 171, 172, 0, 173, 174, 175, 178, 179, 180,
	182, 542, 183, 184, 185, 186, 187, 188, 479, 0,
	190, 191, 192, 193, 194, 196, 198, 199, 200, 201,
	202, 204, 206, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 212, 213, 214, 215, 0, 216, 217, 221,
	223, 224, 225, 226, 227, 228, 231, 0, 233, 235,
	0, 236, 239, 0, 240, 241, 242, 243, 244, 245,
	246, 247, 483, 248, 0, 249, 250, 252, 0, 255,
	256, 257, 258, 259, 0, 260, 485, 486, 261, 262,
	264, 265, 266, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 280, 281, 282, 284,
	0, 285, 286, 289, 290, 291, 292, 0, 294, 502,
	0, 295, 296, 297, 0, 0, 298, 299, 300, 301,
	302, 303, 306, 503, 308, 309, 310, 311, 312, 313,
	314, 544, 316, 317, 318, 319, 320, 321, 322, 506,
	507, 323, 325, 326, 508, 510, 511, 0, 341, 342,
	343, 344, 345, 346, 347, 349, 0, 351, 352, 353,
	512, 354, 355, 356, 357, 0, 358, 359, 360, 361,
	362, 364, 367, 368, 369, 370, 0, 373, 374, 375,
	376, 377, 378, 379, 381, 382, 383, 385, 386, 387,
	545, 388, 389, 390, 391, 515, 393, 394, 546, 396,
	397, 399, 400, 401, 402, 403, 404, 561, 0, 406,
	516, 407, 408, 409, 410, 411, 0, 413, 414, 415,
	416, 417, 418, 421, 422, 423, 425, 426, 518, 427,
	428, 0, 430, 431, 0, 433, 434, 435, 436, 437,
	0, 562, 438, 520, 439, 521, 440, 441, 442, 443,
	444, 445, 446, 448, 0, 0, 450, 451, 452, 454,
	455, 456, 457, 460, 461, 462, 463, 464, 0, 465,
	467, 469, 547, 524, 525, 526, 527, 528, 530, 531,
	532, 533, 470, 471, 487, 338, 332, 288, 330, 331,
	335, 336, 339, 642, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 164, 0, 181, 648, 836, 230, 267, 482, 0,
	0, 327, 0, 380, 384, 0, 473, 0, 0, 0,
	0, 238, 0, 653, 0, 659, 0, 665, 0, 449,
	0, 655, 656, 661, 169, 563, 472, 543, 0, 0,
	0, 334, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 0, 0, 657, 654, 658, 664, 652, 662,
	649, 660, 0, 371, 305, 0, 522, 398, 176, 222,
	209, 251, 293, 405, 0, 0, 283, 453, 218, 307,
	0, 197, 340, 0, 429, 304, 0, 412, 432, 0,
	324, 203, 363, 419, 420, 646, 651, 0, 667, 0,
	207, 208, 329, 189, 337, 534, 500, 392, 350, 348,
	0, 315, 372, 529, 0, 0, 237, 0, 232, 328,
	468, 195, 447, 366, 333, 287, 395, 424, 234, 219,
	220, 263, 365, 253, 205, 458, 497, 501, 499, 495,
	492, 496, 493, 494, 498, 254, 491, 0, 466, 475,
	509, 489, 517, 474, 514, 484, 229, 513, 478, 477,
	523, 504, 505, 459, 519, 490, 488, 481, 480, 476,
	0, 154, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 165, 0, 166, 167, 168, 170, 171, 172, 645,
	173, 174, 175, 178, 179, 180, 182, 542, 183, 184,
	185, 186, 187, 188, 479, 647, 190, 191, 192, 193,
	194, 196, 198, 199, 200, 201, 202, 204, 206, 0,
	0, 0, 650, 0, 0, 0, 210, 211, 212, 213,
	214, 215, 0, 216, 217, 221, 223, 224, 225, 226,
	227, 228, 231, 0, 233, 235, 0, 236, 239, 0,
	240, 241, 242, 243, 244, 245, 246, 247, 483, 248,
	0, 249, 250, 252, 0, 255, 256, 257, 258, 259,
	0, 260, 485, 486, 261, 262, 264, 265, 266, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 280, 281, 282, 284, 0, 285, 286, 289,
	290, 291, 292, 0, 294, 502, 0, 295, 296, 297,
	0, 0, 298, 299, 300, 301, 302, 303, 306, 503,
	308, 309, 310, 311, 312, 313, 314, 544, 316, 317,
	318, 319, 320, 321, 322, 506, 507, 323, 325, 326,
	508, 510, 511, 663, 341, 342, 343, 344, 345, 346,
	347, 349, 0, 351, 352, 353, 512, 354, 355, 356,
	357, 0, 358, 359, 360, 361, 362, 364, 367, 368,
	369, 370, 0, 373, 374, 375, 376, 377, 378, 379,
	381, 382, 383, 385, 386, 387, 545, 388, 389, 390,
	391, 515, 393, 394, 546, 396, 397, 399, 400, 401,
	402, 403, 404, 561, 0, 406, 516, 407, 408, 409,
	410, 411, 0, 413, 414, 415, 416, 417, 418, 421,
	422, 423, 425, 426, 518, 427, 428, 0, 430, 431,
	666, 433, 434, 435, 436, 437, 0, 562, 438, 520,
	439, 521, 440, 441, 442, 443, 444, 445, 446, 448,
	0, 0, 450, 451, 452, 454, 455, 456, 457, 460,
	461, 462, 463, 464, 0, 465, 467, 469, 547, 524,
	525, 526, 527, 528, 530, 531, 532, 533, 470, 471,
	487, 338, 332, 288, 330, 331, 335, 336, 339, 680,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 164, 0, 181,
	648, 0, 230, 267, 482, 0, 0, 327, 0, 380,
	384, 0, 473, 0, 0, 0, 0, 238, 0, 653,
	0, 659, 0, 665, 0, 449, 0, 655, 656, 661,
	169, 563, 472, 543, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 0, 177, 0, 0, 0, 0,
	657, 654, 658, 664, 652, 662, 649, 660, 0, 371,
	305, 0, 522, 398, 176, 222, 209, 251, 293, 405,
	0, 0, 283, 453, 218, 307, 0, 197, 340, 0,
	429, 304, 0, 412, 432, 0, 324, 203, 363, 419,
	420, 646, 651, 0, 667, 0, 207, 208, 329, 189,
	337, 534, 500, 392, 350, 348, 0, 315, 372, 529,
	0, 0, 237, 0, 232, 328, 468, 195, 447, 366,
	333, 287, 395, 424, 234, 219, 220, 263, 365, 253,
	205, 458, 497, 501, 499, 495, 492, 496, 493, 494,
	498, 254, 491, 0, 466, 475, 509, 489, 517, 474,
	514, 484, 229, 513, 478, 477, 523, 504, 505, 459,
	519, 490, 488, 481, 480, 476, 0, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 165, 0, 166,
	167, 168, 170, 171, 172, 645, 173, 174, 175, 178,
	179, 180, 182, 542, 183, 184, 185, 186, 187, 188,
	479, 647, 190, 191, 192, 193, 194, 196, 198, 199,
	200, 201, 202, 204, 206, 0, 0, 0, 650, 0,
	0, 0, 210, 211, 212, 213, 214, 215, 0, 216,
	217, 221, 223, 224, 225, 226, 227, 228, 231, 0,
	233, 235, 0, 236, 239, 0, 240, 241, 242, 243,
	244, 245, 246, 247, 483, 248, 0, 249, 250, 252,
	0, 255, 256, 257, 258, 259, 0, 260, 485, 486,
	261, 262, 264, 265, 266, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 280, 281,
	282, 284, 0, 285, 286, 289, 290, 291, 292, 0,
	294, 502, 0, 295, 296, 297, 0, 0, 298, 299,
	300, 301, 302, 303, 306, 503, 308, 309, 310, 311,
	312, 313, 314, 544, 316, 317, 318, 319, 320, 321,
	322, 506, 507, 323, 325, 326, 508, 510, 511, 663,
	341, 342, 343, 344, 345, 346, 347, 349, 0, 351,
	352, 353, 512, 354, 355, 356, 357, 0, 358, 359,
	360, 361, 362, 364, 367, 368, 369, 370, 0, 373,
	374, 375, 376, 377, 378, 379, 381, 382, 383, 385,
	386, 387, 545, 388, 389, 390, 391, 515, 393, 394,
	546, 396, 397, 399, 400, 401, 402, 403, 404, 561,
	0, 406, 516, 407, 408, 409, 410, 411, 0, 413,
	414, 415, 416, 417, 418, 421, 422, 423, 425, 426,
	518, 427, 428, 0, 430, 431, 666, 433, 434, 435,
	436, 437, 0, 562, 438, 520, 439, 521, 440, 441,
	442, 443, 444, 445, 446, 448, 0, 0, 450, 451,
	452, 454, 455, 456, 457, 460, 461, 462, 463, 464,
	0, 465, 467, 469, 547, 524, 525, 526, 527, 528,
	530, 531, 532, 533, 470, 471, 487, 338, 332, 288,
	330, 331, 335, 336, 339, 2139, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 164, 0, 181, 648, 0, 230, 267,
	0, 0, 0, 327, 0, 380, 384, 0, 0, 0,
	0, 0, 0, 238, 0, 653, 2114, 659, 0, 665,
	0, 449, 0, 655, 656, 661, 169, 739, 472, 543,
	0, 0, 0, 334, 0, 0, 0, 0, 0, 0,
	0, 177, 0, 0, 0, 0, 657, 654, 658, 664,
	652, 662, 649, 660, 0, 371, 305, 0, 0, 398,
	176, 222, 209, 251, 293, 405, 0, 0, 283, 453,
	218, 307, 0, 197, 340, 0, 429, 304, 0, 412,
	432, 0, 324, 203, 363, 419, 420, 646, 651, 0,
	667, 0, 207, 208, 329, 189, 337, 0, 0, 392,
	350, 348, 0, 315, 372, 0, 0, 0, 237, 0,
	232, 328, 468, 195, 447, 366, 333, 287, 395, 424,
	234, 219, 220, 263, 365, 253, 205, 458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	466, 742, 732, 724, 725, 726, 727, 728, 729, 0,
	744, 745, 746, 747, 748, 459, 738, 0, 723, 730,
	731, 733, 2117, 154, 155, 156, 157, 158, 159, 160,
	161, 162, 163, 165, 0, 166, 167, 168, 170, 171,
	172, 645, 173, 174, 175, 178, 179, 180, 182, 542,
	183, 184, 185, 186, 187, 188, 0, 647, 190, 191,
	192, 193, 194, 196, 198, 199, 200, 201, 202, 204,
	206, 0, 0, 0, 650, 0, 0, 0, 210, 211,
	212, 213, 214, 215, 0, 216, 217, 221, 223, 224,
	225, 226, 227, 228, 231, 0, 233, 235, 0, 236,
	239, 0, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 248, 0, 249, 250, 252, 0, 255, 256, 257,
	258, 259, 0, 260, 0, 0, 261, 262, 264, 265,
	266, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 280, 281, 282, 284, 0, 285,
	286, 289, 290, 291, 292, 0, 294, 0, 0, 295,
	296, 297, 0, 0, 298, 299, 300, 301, 302, 303,
	306, 0, 308, 309, 310, 311, 312, 313, 314, 544,
	316, 317, 318, 319, 320, 321, 322, 0, 0, 323,
	325, 326, 0, 2115, 0, 663, 341, 342, 343, 344,
	345, 346, 347, 349, 0, 351, 352, 353, 0, 354,
	355, 356, 357, 0, 358, 359, 360, 361, 362, 364,
	367, 368, 369, 370, 0, 373, 374, 375, 376, 377,
	378, 379, 381, 382, 383, 385, 386, 387, 545, 388,
	389, 390, 391, 0, 393, 394, 546, 396, 397, 399,
	400, 401, 402, 403, 404, 561, 0, 406, 2120, 407,
	408, 409, 410, 411, 0, 413, 414, 415, 416, 417,
	418, 421, 422, 423, 425, 426, 0, 427, 428, 0,
	430, 431, 666, 433, 434, 435, 436, 437, 0, 562,
	438, 0, 439, 0, 440, 441, 442, 443, 444, 445,
	446, 448, 0, 0, 450, 451, 452, 454, 455, 456,
	457, 460, 461, 462, 463, 464, 0, 465, 467, 469,
	547, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	470, 471, 2116, 338, 332, 288, 330, 331, 335, 336,
	339, 2134, 164, 0, 181, 0, 0, 230, 1777, 482,
	0, 0, 327, 0, 380, 384, 0, 473, 0, 0,
	0, 0, 238, 0, 0, 0, 0, 0, 2132, 0,
	449, 0, 0, 0, 0, 169, 563, 472, 543, 0,
	0, 0, 334, 0, 0, 0, 0, 0, 0, 0,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 371, 305, 0, 522, 398, 176,
	222, 209, 251, 293, 405, 0, 0, 283, 453, 218,
	307, 0, 197, 340, 0, 429, 304, 0, 412, 432,
	0, 324, 203, 363, 419, 420, 0, 0, 1781, 0,
	0, 207, 208, 329, 189, 337, 534, 500, 392, 350,
	348, 0, 315, 372, 529, 0, 0, 237, 0, 232,
	328, 468, 195, 447, 366, 333, 287, 395, 424, 234,
	219, 220, 263, 365, 253, 205, 458, 497, 501, 499,
	495, 492, 496, 493, 494, 498, 254, 491, 0, 466,
	475, 509, 489, 517, 474, 514, 484, 229, 513, 478,
	477, 523, 504, 505, 459, 519, 490, 488, 481, 480,
	476, 0, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 165, 0, 166, 167, 168, 170, 171, 172,
	0, 173, 174, 175, 178, 179, 180, 182, 542, 183,
	184, 185, 186, 187, 188, 479, 0, 190, 191, 192,
	193, 194, 196, 198, 199, 200, 201, 202, 204, 206,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 212,
	213, 214, 215, 0, 216, 217, 221, 223, 224, 225,
	226, 227, 228, 231, 0, 233, 235, 0, 236, 239,
	0, 1787, 241, 242, 243, 244, 245, 246, 247, 483,
	248, 0, 249, 250, 252, 1786, 255, 256, 257, 258,
	259, 0, 260, 485, 486, 261, 262, 264, 265, 266,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 280, 281, 282, 284, 0, 285, 286,
	289, 290, 291, 292, 0, 294, 502, 0, 295, 296,
	297, 0, 0, 298, 299, 300, 301, 302, 303, 306,
	503, 308, 309, 310, 311, 312, 313, 314, 544, 316,
	317, 318, 319, 320, 321, 322, 506, 507, 323, 325,
	326, 508, 510, 511, 0, 341, 342, 343, 344, 345,
	346, 347, 349, 0, 351, 352, 353, 512, 354, 355,
	356, 357, 1785, 358, 359, 360, 361, 362, 364, 367,
	368, 369, 370, 0, 373, 374, 375, 376, 377, 378,
	379, 381, 382, 383, 385, 386, 387, 545, 388, 389,
	390, 391, 515, 393, 394, 546, 396, 397, 399, 400,
	401, 402, 403, 404, 561, 0, 406, 516, 407, 408,
	409, 410, 411, 0, 413, 414, 415, 416, 417, 418,
	421, 422, 423, 425, 426, 518, 427, 428, 0, 430,
	431, 0, 433, 434, 435, 436, 437, 0, 562, 438,
	520, 439, 521, 440, 441, 442, 443, 444, 445, 446,
	448, 0, 1784, 450, 451, 452, 454, 455, 456, 457,
	460, 461, 462, 463, 464, 0, 465, 467, 469, 547,
	524, 525, 526, 527, 528, 530, 531, 532, 533, 470,
	471, 487, 338, 332, 288, 330, 331, 335, 336, 339,
	151, 0, 0, 0, 1783, 1778, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 164, 0,
	181, 0, 0, 230, 267, 482, 0, 0, 327, 0,
	380, 384, 0, 473, 0, 0, 0, 0, 238, 0,
	0, 0, 2072, 0, 0, 0, 449, 0, 0, 0,
	0, 169, 563, 472, 543, 0, 0, 0, 334, 0,
	0, 0, 0, 0, 0, 0, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	371, 305, 0, 522, 398, 176, 222, 209, 251, 293,
	405, 0, 0, 283, 453, 218, 307, 0, 197, 340,
	0, 429, 304, 0, 412, 432, 0, 324, 203, 363,
	419, 420, 0, 0, 1781, 0, 0, 207, 208, 329,
	189, 337, 534, 500, 392, 350, 348, 0, 315, 372,
	529, 0, 0, 237, 0, 232, 328, 468, 195, 447,
	366, 333, 287, 395, 424, 234, 219, 220, 263, 365,
	253, 205, 458, 497, 501, 499, 495, 492, 496, 493,
	494, 498, 254, 491, 0, 466, 475, 509, 489, 517,
	474, 514, 484, 229, 513, 478, 477, 523, 504, 505,
	459, 519, 490, 488, 481, 480, 476, 0, 154, 155,
	156, 157, 158, 159, 160, 161, 162, 163, 165, 0,
	166, 167, 168, 170, 171, 172, 0, 173, 174, 175,
	178, 179, 180, 182, 542, 183, 184, 185, 186, 187,
	188, 479, 0, 190, 191, 192, 193, 194, 196, 198,
	199, 200, 201, 202, 204, 206, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 212, 213, 214, 215, 0,
	216, 217, 221, 223, 224, 225, 226, 227, 228, 231,
	0, 233, 235, 0, 236, 239, 0, 1787, 241, 242,
	243, 244, 245, 246, 247, 483, 248, 0, 249, 250,
	252, 1786, 255, 256, 257, 258, 259, 0, 260, 485,
	486, 261, 262, 264, 265, 266, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 280,
	281, 282, 284, 0, 285, 286, 289, 290, 291, 292,
	0, 294, 502, 0, 295, 296, 297, 0, 0, 298,
	299, 300, 301, 302, 303, 306, 503, 308, 309, 310,
	311, 312, 313, 314, 544, 316, 317, 318, 319, 320,
	321, 322, 506, 507, 323, 325, 326, 508, 510, 511,
	0, 341, 342, 343, 344, 345, 346, 347, 349, 0,
	351, 352, 353, 512, 354, 355, 356, 357, 1785, 358,
	359, 360, 361, 362, 364, 367, 368, 369, 370, 0,
	373, 374, 375, 376, 377, 378, 379, 381, 382, 383,
	385, 386, 387, 545, 388, 389, 390, 391, 515, 393,
	394, 546, 396, 397, 399, 400, 401, 402, 403, 404,
	561, 0, 406, 516, 407, 408, 409, 410, 411, 0,
	413, 414, 415, 416, 417, 418, 421, 422, 423, 425,
	426, 518, 427, 428, 0, 430, 431, 0, 433, 434,
	435, 436, 437, 0, 562, 438, 520, 439, 521, 440,
	441, 442, 443, 444, 445, 446, 448, 0, 1784, 450,
	451, 452, 454, 455, 456, 457, 460, 461, 462, 463,
	464, 0, 465, 467, 469, 547, 524, 525, 526, 527,
	528, 530, 531, 532, 533, 470, 471, 487, 338, 332,
	288, 330, 331, 335, 336, 339, 151, 0, 0, 0,
	1783, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 164, 0, 181, 0, 0, 230,
	267, 482, 0, 0, 327, 0, 380, 384, 0, 473,
	0, 0, 0, 0, 238, 0, 0, 0, 0, 0,
	0, 0, 449, 0, 0, 0, 0, 169, 563, 472,
	543, 0, 0, 0, 334, 0, 0, 0, 0, 0,
	0, 0, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 371, 305, 0, 522,
	398, 176, 222, 209, 251, 293, 405, 0, 0, 283,
	453, 218, 307, 0, 197, 340, 0, 429, 304, 0,
	412, 432, 0, 324, 203, 363, 419, 420, 0, 0,
	1781, 0, 0, 207, 208, 329, 189, 337, 534, 500,
	392, 350, 348, 0, 315, 372, 529, 0, 0, 237,
	0, 232, 328, 468, 195, 447, 366, 333, 287, 395,
	424, 234, 219, 220, 263, 365, 253, 205, 458, 497,
	501, 499, 495, 492, 496, 493, 494, 498, 254, 491,
	0, 466, 475, 509, 489, 517, 474, 514, 484, 229,
	513, 478, 477, 523, 504, 505, 459, 519, 490, 488,
	481, 480, 476, 0, 154, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 165, 0, 166, 167, 168, 170,
	171, 172, 0, 173, 174, 175, 178, 179, 180, 182,
	542, 183, 184, 185, 186, 187, 188, 479, 0, 190,
	191, 192, 193, 194, 196, 198, 199, 200, 201, 202,
	204, 206, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 212, 213, 214, 215, 0, 216, 217, 221, 223,
	224, 225, 226, 227, 228, 231, 0, 233, 235, 0,
	236, 239, 0, 1787, 241, 242, 243, 244, 245, 246,
	247, 483, 248, 0, 249, 250, 252, 1786, 255, 256,
	257, 258, 259, 0, 260, 485, 486, 261, 262, 264,
	265, 266, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 280, 281, 282, 284, 0,
	285, 286, 289, 290, 291, 292, 0, 294, 502, 0,
	295, 296, 297, 0, 0, 298, 299, 300, 301, 302,
	303, 306, 503, 308, 309, 310, 311, 312, 313, 314,
	544, 316, 317, 318, 319, 320, 321, 322, 506, 507,
	323, 325, 326, 508, 510, 511, 0, 341, 342, 343,
	344, 345, 346, 347, 349, 0, 351, 352, 353, 512,
	354, 355, 356, 357, 1785, 358, 359, 360, 361, 362,
	364, 367, 368, 369, 370, 0, 373, 374, 375, 376,
	377, 378, 379, 381, 382, 383, 385, 386, 387, 545,
	388, 389, 390, 391, 515, 393, 394, 546, 396, 397,
	399, 400, 401, 402, 403, 404, 561, 0, 406, 516,
	407, 408, 409, 410, 411, 0, 413, 414, 415, 416,
	417, 418, 421, 422, 423, 425, 426, 518, 427, 428,
	0, 430, 431, 0, 433, 434, 435, 436, 437, 0,
	562, 438, 520, 439, 521, 440, 441, 442, 443, 444,
	445, 446, 448, 0, 1784, 450, 451, 452, 454, 455,
	456, 457, 460, 461, 462, 463, 464, 0, 465, 467,
	469, 547, 524, 525, 526, 527, 528, 530, 531, 532,
	533, 470, 471, 487, 338, 332, 288, 330, 331, 335,
	336, 339, 740, 0, 0, 0, 1783, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	164, 0, 181, 648, 0, 230, 267, 0, 0, 0,
	327, 0, 380, 384, 0, 0, 0, 0, 0, 0,
	238, 0, 653, 2114, 659, 0, 665, 0, 449, 0,
	655, 656, 661, 169, 739, 472, 543, 0, 0, 0,
	334, 0, 0, 0, 0, 0, 0, 0, 177, 0,
	0, 0, 0, 657, 654, 658, 664, 652, 662, 649,
	660, 0, 371, 305, 0, 0, 398, 176, 222, 209,
	251, 293, 405, 0, 0, 283, 453, 218, 307, 0,
	197, 340, 0, 429, 304, 0, 412, 432, 0, 324,
	203, 363, 419, 420, 646, 651, 0, 667, 0, 207,
	208, 329, 189, 337, 0, 0, 392, 350, 348, 0,
	315, 372, 0, 0, 0, 237, 0, 232, 328, 468,
	195, 447, 366, 333, 287, 395, 424, 234, 219, 220,
	263, 365, 253, 205, 458, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 0, 0, 466, 742, 732,
	724, 725, 726, 727, 728, 729, 0, 744, 745, 746,
	747, 748, 459, 738, 0, 723, 730, 731, 733, 2117,
	154, 155, 156, 157, 158, 159, 160, 161, 162, 163,
	165, 0, 166, 167, 168, 170, 171, 172, 645, 173,
	174, 175, 178, 179, 180, 182, 542, 183, 184, 185,
	186, 187, 188, 0, 647, 190, 191, 192, 193, 194,
	196, 198, 199, 200, 201, 202, 204, 206, 0, 0,
	0, 650, 0, 0, 0, 210, 211, 212, 213, 214,
	215, 0, 216, 217, 221, 223, 224, 225, 226, 227,
	228, 231, 0, 233, 235, 0, 236, 239, 0, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 248, 0,
	249, 250, 252, 0, 255, 256, 257, 258, 259, 0,
	260, 0, 0, 261, 262, 264, 265, 266, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 280, 281, 282, 284, 0, 285, 286, 289, 290,
	291, 292, 0, 294, 0, 0, 295, 296, 297, 0,
	0, 298, 299, 300, 301, 302, 303, 306, 0, 308,
	309, 310, 311, 312, 313, 314, 544, 316, 317, 318,
	319, 320, 321, 322, 0, 0, 323, 325, 326, 0,
	2115, 0, 663, 341, 342, 343, 344, 345, 346, 347,
	349, 0, 351, 352, 353, 0, 354, 355, 356, 357,
	0, 358, 359, 360, 361, 362, 364, 367, 368, 369,
	370, 0, 373, 374, 375, 376, 377, 378, 379, 381,
	382, 383, 385, 386, 387, 545, 388, 389, 390, 391,
	0, 393, 394, 546, 396, 397, 399, 400, 401, 402,
	403, 404, 561, 0, 406, 2120, 407, 408, 409, 410,
	411, 0, 413, 414, 415, 416, 417, 418, 421, 422,
	423, 425, 426, 0, 427, 428, 0, 430, 431, 666,
	433, 434, 435, 436, 437, 0, 562, 438, 0, 439,
	0, 440, 441, 442, 443, 444, 445, 446, 448, 0,
	0, 450, 451, 452, 454, 455, 456, 457, 460, 461,
	462, 463, 464, 0, 465, 467, 469, 547, 0, 0,
	0, 151, 0, 0, 0, 0, 0, 470, 471, 2116,
	338, 332, 288, 330, 331, 335, 336, 339, 2218, 164,
	0, 181, 0, 0, 230, 267, 482, 0, 0, 327,
	0, 380, 384, 0, 473, 0, 0, 0, 0, 238,
	0, 2108, 0, 0, 0, 0, 0, 449, 0, 0,
	0, 0, 169, 563, 472, 543, 0, 0, 0, 334,
	0, 0, 0, 0, 0, 0, 0, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 371, 305, 0, 522, 398, 176, 222, 209, 251,
	293, 405, 0, 0, 283, 453, 218, 307, 0, 197,
	340, 2219, 429, 304, 0, 412, 432, 0, 324, 203,
	363, 419, 420, 0, 0, 0, 0, 0, 207, 208,
	329, 189, 337, 534, 500, 392, 350, 348, 0, 315,
	372, 529, 0, 0, 237, 0, 232, 328, 468, 195,
	447, 366, 333, 287, 395, 424, 234, 219, 220, 263,
	365, 253, 205, 458, 497, 501, 499, 495, 492, 496,
	493, 494, 498, 254, 491, 0, 466, 475, 509, 489,
	517, 474, 514, 484, 229, 513, 478, 477, 523, 504,
	505, 459, 519, 490, 488, 481, 480, 476, 0, 154,
	155, 156, 157, 158, 159, 160, 161, 162, 163, 165,
	0, 166, 167, 168, 170, 171, 172, 0, 173, 174,
	175, 178, 179, 180, 182, 542, 183, 184, 185, 186,
	187, 188, 479, 0, 190, 191, 192, 193, 194, 196,
	198, 199, 200, 201, 202, 204, 206, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 212, 213, 214, 215,
	0, 216, 217, 221, 223, 224, 225, 226, 227, 228,
	231, 0, 233, 235, 0, 236, 239, 0, 240, 241,
	242, 243, 244, 245, 246, 247, 483, 248, 0, 249,
	250, 252, 0, 255, 256, 257, 258, 259, 0, 260,
	485, 486, 261, 262, 264, 265, 266, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	280, 281, 282, 284, 0, 285, 286, 289, 290, 291,
	292, 0, 294, 502, 0, 295, 296, 297, 0, 0,
	298, 299, 300, 301, 302, 303, 306, 503, 308, 309,
	310, 311, 312, 313, 314, 544, 316, 317, 318, 319,
	320, 321, 322, 506, 507, 323, 325, 326, 508, 510,
	511, 0, 341, 342, 343, 344, 345, 346, 347, 349,
	0, 351, 352, 353, 512, 354, 355, 356, 357, 0,
	358, 359, 360, 361, 362, 364, 367, 368, 369, 370,
	0, 373, 374, 375, 376, 377, 378, 379, 381, 382,
	383, 385, 386, 387, 545, 388, 389, 390, 391, 515,
	393, 394, 546, 396, 397, 399, 400, 401, 402, 403,
	404, 561, 0, 406, 516, 407, 408, 409, 410, 411,
	0, 413, 414, 415, 416, 417, 418, 421, 422, 423,
	425, 426, 518, 427, 428, 0, 430, 431, 0, 433,
	434, 435, 436, 437, 0, 562, 438, 520, 439, 521,
	440, 441, 442, 443, 444, 445, 446, 448, 0, 0,
	450, 451, 452, 454, 455, 456, 457, 460, 461, 462,
	463, 464, 0, 465, 467, 469, 547, 524, 525, 526,
	527, 528, 530, 531, 532, 533, 470, 471, 487, 338,
	332, 288, 330, 331, 335, 336, 339, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2209, 164, 0, 181, 0, 0,
	230, 267, 482, 0, 0, 327, 0, 380, 384, 0,
	473, 0, 0, 0, 0, 238, 0, 0, 0, 0,
	0, 0, 0, 449, 0, 0, 0, 0, 169, 563,
	472, 543, 0, 0, 0, 334, 0, 0, 0, 0,
	0, 0, 0, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 371, 305, 0,
	522, 398, 176, 222, 209, 251, 293, 405, 0, 0,
	283, 453, 218, 307, 0, 197, 340, 2210, 429, 304,
	0, 412, 432, 0, 324, 203, 363, 419, 420, 0,
	0, 0, 0, 0, 207, 208, 329, 189, 337, 534,
	500, 392, 350, 348, 0, 315, 372, 529, 0, 0,
	237, 0, 232, 328, 468, 195, 447, 366, 333, 287,
	395, 424, 234, 219, 220, 263, 365, 253, 205, 458,
	497, 501, 499, 495, 492, 496, 493, 494, 498, 254,
	491, 0, 466, 475, 509, 489, 517, 474, 514, 484,
	229, 513, 478, 477, 523, 504, 505, 459, 519, 490,
	488, 481, 480, 476, 0, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 165, 0, 166, 167, 168,
	170, 171, 172, 0, 173, 174, 175, 178, 179, 180,
	182, 542, 183, 184, 185, 186, 187, 188, 479, 0,
	190, 191, 192, 193, 194, 196, 198, 199, 200, 201,
	202, 204, 206, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 212, 213, 214, 215, 0, 216, 217, 221,
	223, 224, 225, 226, 227, 228, 231, 0, 233, 235,
	0, 236, 239, 0, 240, 241, 242, 243, 244, 245,
	246, 247, 483, 248, 0, 249, 250, 252, 0, 255,
	256, 257, 258, 259, 0, 260, 485, 486, 261, 262,
	264, 265, 266, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 280, 281, 282, 284,
	0, 285, 286, 289, 290, 291, 292, 0, 294, 502,
	0, 295, 296, 297, 0, 0, 298, 299, 300, 301,
	302, 303, 306, 503, 308, 309, 310, 311, 312, 313,
	314, 544, 316, 317, 318, 319, 320, 321, 322, 506,
	507, 323, 325, 326, 508, 510, 511, 0, 341, 342,
	343, 344, 345, 346, 347, 349, 0, 351, 352, 353,
	512, 354, 355, 356, 357, 0, 358, 359, 360, 361,
	362, 364, 367, 368, 369, 370, 0, 373, 374, 375,
	376, 377, 378, 379, 381, 382, 383, 385, 386, 387,
	545, 388, 389, 390, 391, 515, 393, 394, 546, 396,
	397, 399, 400, 401, 402, 403, 404, 561, 0, 406,
	516, 407, 408, 409, 410, 411, 0, 413, 414, 415,
	416, 417, 418, 421, 422, 423, 425, 426, 518, 427,
	428, 0, 430, 431, 0, 433, 434, 435, 436, 437,
	0, 562, 438, 520, 439, 521, 440, 441, 442, 443,
	444, 445, 446, 448, 0, 0, 450, 451, 452, 454,
	455, 456, 457, 460, 461, 462, 463, 464, 0, 465,
	467, 469, 547, 524, 525, 526, 527, 528, 530, 531,
	532, 533, 470, 471, 487, 338, 332, 288, 330, 331,
	335, 336, 339, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 164, 0, 181, 0, 0, 230, 626, 482, 0,
	0, 327, 0, 380, 384, 0, 473, 0, 0, 0,
	0, 238, 0, 0, 0, 0, 0, 0, 0, 449,
	0, 0, 0, 0, 169, 563, 472, 543, 0, 0,
	0, 334, 0, 0, 0, 560, 0, 0, 0, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 371, 305, 0, 522, 398, 176, 222,
	209, 251, 293, 405, 0, 0, 283, 453, 218, 307,
	0, 197, 340, 0, 429, 304, 0, 412, 432, 0,
	324, 203, 363, 419, 420, 0, 0, 0, 0, 0,
	207, 208, 329, 189, 337, 534, 500, 392, 350, 348,
	0, 315, 372, 529, 0, 0, 237, 0, 232, 328,
	468, 195, 447, 366, 333, 287, 395, 424, 234, 219,
	220, 263, 365, 253, 205, 458, 497, 501, 499, 495,
	492, 496, 493, 494, 498, 254, 491, 0, 466, 475,
	509, 489, 517, 474, 514, 484, 229, 513, 478, 477,
	523, 504, 505, 459, 519, 490, 488, 481, 480, 476,
	0, 154, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 165, 0, 166, 167, 168, 170, 171, 172, 0,
	173, 174, 175, 178, 179, 180, 182, 542, 183, 184,
	185, 186, 187, 188, 479, 0, 190, 191, 192, 193,
	194, 196, 198, 199, 200, 201, 202, 204, 206, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 212, 213,
	214, 215, 0, 216, 217, 221, 223, 224, 225, 226,
	227, 228, 231, 0, 233, 235, 0, 236, 239, 0,
	240, 241, 242, 243, 244, 245, 246, 247, 483, 248,
	0, 249, 250, 252, 0, 255, 256, 257, 258, 259,
	0, 260, 485, 486, 261, 262, 264, 265, 266, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 280, 281, 282, 284, 0, 285, 286, 289,
	290, 291, 292, 0, 294, 502, 0, 295, 296, 297,
	0, 0, 298, 299, 300, 301, 302, 303, 306, 503,
	308, 309, 310, 311, 312, 313, 314, 544, 316, 317,
	318, 319, 320, 321, 322, 506, 507, 323, 325, 326,
	508, 510, 511, 0, 341, 342, 343, 344, 345, 346,
	347, 349, 0, 351, 352, 353, 512, 354, 355, 356,
	357, 0, 358, 359, 360, 361, 362, 364, 367, 368,
	369, 370, 0, 373, 374, 375, 376, 377, 378, 379,
	381, 382, 383, 385, 386, 387, 545, 388, 389, 390,
	391, 515, 393, 394, 546, 396, 397, 399, 400, 401,
	402, 403, 404, 561, 0, 406, 516, 407, 408, 409,
	410, 411, 0, 413, 414, 415, 416, 417, 418, 421,
	422, 423, 425, 426, 518, 427, 428, 0, 430, 431,
	0, 433, 434, 435, 436, 437, 0, 562, 438, 520,
	439, 521, 440, 441, 442, 443, 444, 445, 446, 448,
	0, 0, 450, 451, 452, 454, 455, 456, 457, 460,
	461, 462, 463, 464, 0, 465, 467, 469, 547, 524,
	525, 526, 527, 528, 530, 531, 532, 533, 470, 471,
	487, 338, 332, 288, 330, 331, 335, 336, 339, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 164, 0, 181,
	0, 0, 230, 267, 482, 0, 0, 327, 0, 380,
	384, 0, 473, 0, 0, 0, 0, 238, 0, 0,
	0, 0, 0, 0, 0, 449, 0, 0, 0, 0,
	169, 563, 472, 543, 0, 0, 0, 334, 0, 0,
	0, 560, 0, 0, 0, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 371,
	305, 0, 522, 398, 176, 222, 209, 251, 293, 405,
	0, 0, 283, 453, 218, 307, 0, 197, 340, 0,
	429, 304, 0, 412, 432, 0, 324, 203, 363, 419,
	420, 0, 0, 0, 0, 0, 207, 208, 329, 189,
	337, 534, 500, 392, 350, 348, 0, 315, 372, 529,
	0, 0, 237, 0, 232, 328, 468, 195, 447, 366,
	333, 287, 395, 424, 234, 219, 220, 263, 365, 253,
	205, 458, 497, 501, 499, 495, 492, 496, 493, 494,
	498, 254, 491, 0, 466, 475, 509, 489, 517, 474,
	514, 484, 229, 513, 478, 477, 523, 504, 505, 459,
	519, 490, 488, 481, 480, 476, 0, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 165, 0, 166,
	167, 168, 170, 171, 172, 0, 173, 174, 175, 178,
	179, 180, 182, 542, 183, 184, 185, 186, 187, 188,
	479, 0, 190, 191, 192, 193, 194, 196, 198, 199,
	200, 201, 202, 204, 206, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 212, 213, 214, 215, 0, 216,
	217, 221, 223, 224, 225, 226, 227, 228, 231, 0,
	233, 235, 0, 236, 239, 0, 240, 241, 242, 243,
	244, 245, 246, 247, 483, 248, 0, 249, 250, 252,
	0, 255, 256, 257, 258, 259, 0, 260, 485, 486,
	261, 262, 264, 265, 266, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 280, 281,
	282, 284, 0, 285, 286, 289, 290, 291, 292, 0,
	294, 502, 0, 295, 296, 297, 0, 0, 298, 299,
	300, 301, 302, 303, 306, 503, 308, 309, 310, 311,
	312, 313, 314, 544, 316, 317, 318, 319, 320, 321,
	322, 506, 507, 323, 325, 326, 508, 510, 511, 0,
	341, 342, 343, 344, 345, 346, 347, 349, 0, 351,
	352, 353, 512, 354, 355, 356, 357, 0, 358, 359,
	360, 361, 362, 364, 367, 368, 369, 370, 0, 373,
	374, 375, 376, 377, 378, 379, 381, 382, 383, 385,
	386, 387, 545, 388, 389, 390, 391, 515, 393, 394,
	546, 396, 397, 399, 400, 401, 402, 403, 404, 561,
	0, 406, 516, 407, 408, 409, 410, 411, 0, 413,
	414, 415, 416, 417, 418, 421, 422, 423, 425, 426,
	518, 427, 428, 0, 430, 431, 0, 433, 434, 435,
	436, 437, 0, 562, 438, 520, 439, 521, 440, 441,
	442, 443, 444, 445, 446, 448, 0, 0, 450, 451,
	452, 454, 455, 456, 457, 460, 461, 462, 463, 464,
	0, 465, 467, 469, 547, 524, 525, 526, 527, 528,
	530, 531, 532, 533, 470, 471, 487, 338, 332, 288,
	330, 331, 335, 336, 339, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 164, 0, 181, 0, 0, 230, 267,
	482, 0, 0, 327, 0, 380, 384, 0, 473, 0,
	0, 3074, 0, 238, 0, 0, 0, 0, 0, 0,
	0, 449, 0, 0, 0, 0, 169, 563, 472, 543,
	0, 0, 0, 334, 0, 0, 0, 0, 0, 0,
	0, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 371, 305, 0, 522, 398,
	176, 222, 209, 251, 293, 405, 0, 0, 283, 453,
	218, 307, 0, 197, 340, 0, 429, 304, 0, 412,
	432, 0, 324, 203, 363, 419, 420, 0, 0, 0,
	0, 0, 207, 208, 329, 189, 337, 534, 500, 392,
	350, 348, 0, 315, 372, 529, 0, 0, 237, 0,
	232, 328, 468, 195, 447, 366, 333, 287, 395, 424,
	234, 219, 220, 263, 365, 253, 205, 458, 497, 501,
	499, 495, 492, 496, 493, 494, 498, 254, 491, 0,
	466, 475, 509, 489, 517, 474, 514, 484, 229, 513,
	478, 477, 523, 504, 505, 459, 519, 490, 488, 481,
	480, 476, 0, 154, 155, 156, 157, 158, 159, 160,
	161, 162, 163, 165, 0, 166, 167, 168, 170, 171,
	172, 0, 173, 174, 175, 178, 179, 180, 182, 542,
	183, 184, 185, 186, 187, 188, 479, 0, 190, 191,
	192, 193, 194, 196, 198, 199, 200, 201, 202, 204,
	206, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	212, 213, 214, 215, 0, 216, 217, 221, 223, 224,
	225, 226, 227, 228, 231, 0, 233, 235, 0, 236,
	239, 0, 240, 241, 242, 243, 244, 245, 246, 247,
	483, 248, 0, 249, 250, 252, 0, 255, 256, 257,
	258, 259, 0, 260, 485, 486, 261, 262, 264, 265,
	266, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 280, 281, 282, 284, 0, 285,
	286, 289, 290, 291, 292, 0, 294, 502, 0, 295,
	296, 297, 0, 0, 298, 299, 300, 301, 302, 303,
	306, 503, 308, 309, 310, 311, 312, 313, 314, 544,
	316, 317, 318, 319, 320, 321, 322, 506, 507, 323,
	325, 326, 508, 510, 511, 0, 341, 342, 343, 344,
	345, 346, 347, 349, 0, 351, 352, 353, 512, 354,
	355, 356, 357, 0, 358, 359, 360, 361, 362, 364,
	367, 368, 369, 370, 0, 373, 374, 375, 376, 377,
	378, 379, 381, 382, 383, 385, 386, 387, 545, 388,
	389, 390, 391, 515, 393, 394, 546, 396, 397, 399,
	400, 401, 402, 403, 404, 561, 0, 406, 516, 407,
	408, 409, 410, 411, 0, 413, 414, 415, 416, 417,
	418, 421, 422, 423, 425, 426, 518, 427, 428, 0,
	430, 431, 0, 433, 434, 435, 436, 437, 0, 562,
	438, 520, 439, 521, 440, 441, 442, 443, 444, 445,
	446, 448, 0, 0, 450, 451, 452, 454, 455, 456,
	457, 460, 461, 462, 463, 464, 0, 465, 467, 469,
	547, 524, 525, 526, 527, 528, 530, 531, 532, 533,
	470, 471, 487, 338, 332, 288, 330, 331, 335, 336,
	339, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 164,
	2424, 181, 0, 0, 230, 267, 482, 0, 0, 327,
	0, 380, 384, 0, 473, 0, 0, 0, 0, 238,
	0, 0, 0, 0, 0, 0, 0, 449, 0, 0,
	0, 0, 169, 563, 472, 543, 0, 0, 0, 334,
	0, 0, 0, 0, 0, 0, 0, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 371, 305, 0, 522, 398, 176, 222, 209, 251,
	293, 405, 0, 0, 283, 453, 218, 307, 0, 197,
	340, 0, 429, 304, 0, 412, 432, 0, 324, 203,
	363, 419, 420, 0, 0, 0, 0, 0, 207, 208,
	329, 189, 337, 534, 500, 392, 350, 348, 0, 315,
	372, 529, 0, 0, 237, 0, 232, 328, 468, 195,
	447, 366, 333, 287, 395, 424, 234, 219, 220, 263,
	365, 253, 205, 458, 497, 501, 499, 495, 492, 496,
	493, 494, 498, 254, 491, 0, 466, 475, 509, 489,
	517, 474, 514, 484, 229, 513, 478, 477, 523, 504,
	505, 459, 519, 490, 488, 481, 480, 476, 0, 154,
	155, 156, 157, 158, 159, 160, 161, 162, 163, 165,
	0, 166, 167, 168, 170, 171, 172, 0, 173, 174,
	175, 178, 179, 180, 182, 542, 183, 184, 185, 186,
	187, 188, 479, 0, 190, 191, 192, 193, 194, 196,
	198, 199, 200, 201, 202, 204, 206, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 212, 213, 214, 215,
	0, 216, 217, 221, 223, 224, 225, 226, 227, 228,
	231, 0, 233, 235, 0, 236, 239, 0, 240, 241,
	242, 243, 244, 245, 246, 247, 483, 248, 0, 249,
	250, 252, 0, 255, 256, 257, 258, 259, 0, 260,
	485, 486, 261, 262, 264, 265, 266, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	280, 281, 282, 284, 0, 285, 286, 289, 290, 291,
	292, 0, 294, 502, 0, 295, 296, 297, 0, 0,
	298, 299, 300, 301, 302, 303, 306, 503, 308, 309,
	310, 311, 312, 313, 314, 544, 316, 317, 318, 319,
	320, 321, 322, 506, 507, 323, 325, 326, 508, 510,
	511, 0, 341, 342, 343, 344, 345, 346, 347, 349,
	0, 351, 352, 353, 512, 354, 355, 356, 357, 0,
	358, 359, 360, 361, 362, 364, 367, 368, 369, 370,
	0, 373, 374, 375, 376, 377, 378, 379, 381, 382,
	383, 385, 386, 387, 545, 388, 389, 390, 391, 515,
	393, 394, 546, 396, 397, 399, 400, 401, 402, 403,
	404, 561, 0, 406, 516, 407, 408, 409, 410, 411,
	0, 413, 414, 415, 416, 417, 418, 421, 422, 423,
	425, 426, 518, 427, 428, 0, 430, 431, 0, 433,
	434, 435, 436, 437, 0, 562, 438, 520, 439, 521,
	440, 441, 442, 443, 444, 445, 446, 448, 0, 0,
	450, 451, 452, 454, 455, 456, 457, 460, 461, 462,
	463, 464, 0, 465, 467, 469, 547, 524, 525, 526,
	527, 528, 530, 531, 532, 533, 470, 471, 487, 338,
	332, 288, 330, 331, 335, 336, 339, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 164, 0, 181, 0, 0,
	230, 267, 482, 0, 0, 327, 0, 380, 384, 0,
	473, 0, 0, 2854, 0, 238, 0, 0, 0, 0,
	0, 0, 0, 449, 0, 0, 0, 0, 169, 563,
	472, 543, 0, 0, 0, 334, 0, 0, 0, 0,
	0, 0, 0, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 371, 305, 0,
	522, 398, 176, 222, 209, 251, 293, 405, 0, 0,
	283, 453, 218, 307, 0, 197, 340, 0, 429, 304,
	0, 412, 432, 0, 324, 203, 363, 419, 420, 0,
	0, 0, 0, 0, 207, 208, 329, 189, 337, 534,
	500, 392, 350, 348, 0, 315, 372, 529, 0, 0,
	237, 0, 232, 328, 468, 195, 447, 366, 333, 287,
	395, 424, 234, 219, 220, 263, 365, 253, 205, 458,
	497, 501, 499, 495, 492, 496, 493, 494, 498, 254,
	491, 0, 466, 475, 509, 489, 517, 474, 514, 484,
	229, 513, 478, 477, 523, 504, 505, 459, 519, 490,
	488, 481, 480, 476, 0, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 165, 0, 166, 167, 168,
	170, 171, 172, 0, 173, 174, 175, 178, 179, 180,
	182, 542, 183, 184, 185, 186, 187, 188, 479, 0,
	190, 191, 192, 193, 194, 196, 198, 199, 200, 201,
	202, 204, 206, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 212, 213, 214, 215, 0, 216, 217, 221,
	223, 224, 225, 226, 227, 228, 231, 0, 233, 235,
	0, 236, 239, 0, 240, 241, 242, 243, 244, 245,
	246, 247, 483, 248, 0, 249, 250, 252, 0, 255,
	256, 257, 258, 259, 0, 260, 485, 486, 261, 262,
	264, 265, 266, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 280, 281, 282, 284,
	0, 285, 286, 289, 290, 291, 292, 0, 294, 502,
	0, 295, 296, 297, 0, 0, 298, 299, 300, 301,
	302, 303, 306, 503, 308, 309, 310, 311, 312, 313,
	314, 544, 316, 317, 318, 319, 320, 321, 322, 506,
	507, 323, 325, 326, 508, 510, 511, 0, 341, 342,
	343, 344, 345, 346, 347, 349, 0, 351, 352, 353,
	512, 354, 355, 356, 357, 0, 358, 359, 360, 361,
	362, 364, 367, 368, 369, 370, 0, 373, 374, 375,
	376, 377, 378, 379, 381, 382, 383, 385, 386, 387,
	545, 388, 389, 390, 391, 515, 393, 394, 546, 396,
	397, 399, 400, 401, 402, 403, 404, 561, 0, 406,
	516, 407, 408, 409, 410, 411, 0, 413, 414, 415,
	416, 417, 418, 421, 422, 423, 425, 426, 518, 427,
	428, 0, 430, 431, 0, 433, 434, 435, 436, 437,
	0, 562, 438, 520, 439, 521, 440, 441, 442, 443,
	444, 445, 446, 448, 0, 0, 450, 451, 452, 454,
	455, 456, 457, 460, 461, 462, 463, 464, 0, 465,
	467, 469, 547, 524, 525, 526, 527, 528, 530, 531,
	532, 533, 470, 471, 487, 338, 332, 288, 330, 331,
	335, 336, 339, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 164, 0, 181, 0, 0, 230, 267, 482, 0,
	0, 327, 0, 380, 384, 0, 473, 0, 0, 2604,
	0, 238, 0, 0, 0, 0, 0, 0, 0, 449,
	0, 0, 0, 0, 169, 563, 472, 543, 0, 0,
	0, 334, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 371, 305, 0, 522, 398, 176, 222,
	209, 251, 293, 405, 0, 0, 283, 453, 218, 307,
	0, 197, 340, 0, 429, 304, 0, 412, 432, 0,
	324, 203, 363, 419, 420, 0, 0, 0, 0, 0,
	207, 208, 329, 189, 337, 534, 500, 392, 350, 348,
	0, 315, 372, 529, 0, 0, 237, 0, 232, 328,
	468, 195, 447, 366, 333, 287, 395, 424, 234, 219,
	220, 263, 365, 253, 205, 458, 497, 501, 499, 495,
	492, 496, 493, 494, 498, 254, 491, 0, 466, 475,
	509, 489, 517, 474, 514, 484, 229, 513, 478, 477,
	523, 504, 505, 459, 519, 490, 488, 481, 480, 476,
	0, 154, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 165, 0, 166, 167, 168, 170, 171, 172, 0,
	173, 174, 175, 178, 179, 180, 182, 542, 183, 184,
	185, 186, 187, 188, 479, 0, 190, 191, 192, 193,
	194, 196, 198, 199, 200, 201, 202, 204, 206, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 212, 213,
	214, 215, 0, 216, 217, 221, 223, 224, 225, 226,
	227, 228, 231, 0, 233, 235, 0, 236, 239, 0,
	240, 241, 242, 243, 244, 245, 246, 247, 483, 248,
	0, 249, 250, 252, 0, 255, 256, 257, 258, 259,
	0, 260, 485, 486, 261, 262, 264, 265, 266, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 280, 281, 282, 284, 0, 285, 286, 289,
	290, 291, 292, 0, 294, 502, 0, 295, 296, 297,
	0, 0, 298, 299, 300, 301, 302, 303, 306, 503,
	308, 309, 310, 311, 312, 313, 314, 544, 316, 317,
	318, 319, 320, 321, 322, 506, 507, 323, 325, 326,
	508, 510, 511, 0, 341, 342, 343, 344, 345, 346,
	347, 349, 0, 351, 352, 353, 512, 354, 355, 356,
	357, 0, 358, 359, 360, 361, 362, 364, 367, 368,
	369, 370, 0, 373, 374, 375, 376, 377, 378, 379,
	381, 382, 383, 385, 386, 387, 545, 388, 389, 390,
	391, 515, 393, 394, 546, 396, 397, 399, 400, 401,
	402, 403, 404, 561, 0, 406, 516, 407, 408, 409,
	410, 411, 0, 413, 414, 415, 416, 417, 418, 421,
	422, 423, 425, 426, 518, 427, 428, 0, 430, 431,
	0, 433, 434, 435, 436, 437, 0, 562, 438, 520,
	439, 521, 440, 441, 442, 443, 444, 445, 446, 448,
	0, 0, 450, 451, 452, 454, 455, 456, 457, 460,
	461, 462, 463, 464, 0, 465, 467, 469, 547, 524,
	525, 526, 527, 528, 530, 531, 532, 533, 470, 471,
	487, 338, 332, 288, 330, 331, 335, 336, 339, 151,
	0, 0, 0, 0, 0, 0, 0, 826, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 164, 0, 181,
	0, 0, 230, 267, 482, 0, 0, 327, 0, 380,
	384, 0, 473, 0, 0, 0, 0, 238, 0, 0,
	0, 0, 0, 0, 0, 449, 0, 0, 0, 0,
	169, 563, 472, 543, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 0, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 371,
	305, 0, 522, 398, 176, 222, 209, 251, 293, 405,
	0, 0, 283, 453, 218, 307, 0, 197, 340, 0,
	429, 304, 0, 412, 432, 0, 324, 203, 363, 419,
	420, 0, 0, 0, 0, 0, 207, 208, 329, 189,
	337, 534, 500, 392, 350, 348, 0, 315, 372, 529,
	0, 0, 237, 0, 232, 328, 468, 195, 447, 366,
	333, 287, 395, 424, 234, 219, 220, 263, 365, 253,
	205, 458, 497, 501, 499, 495, 492, 496, 493, 494,
	498, 254, 491, 0, 466, 475, 509, 489, 517, 474,
	514, 484, 229, 513, 478, 477, 523, 504, 505, 459,
	519, 490, 488, 481, 480, 476, 0, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 165, 0, 166,
	167, 168, 170, 171, 172, 0, 173, 174, 175, 178,
	179, 180, 182, 542, 183, 184, 185, 186, 187, 188,
	479, 0, 190, 191, 192, 193, 194, 196, 198, 199,
	200, 201, 202, 204, 206, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 212, 213, 214, 215, 0, 216,
	217, 221, 223, 224, 225, 226, 227, 228, 231, 0,
	233, 235, 0, 236, 239, 0, 240, 241, 242, 243,
	244, 245, 246, 247, 483, 248, 0, 249, 250, 252,
	0, 255, 256, 257, 258, 259, 0, 260, 485, 486,
	261, 262, 264, 265, 266, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 280, 281,
	282, 284, 0, 285, 286, 289, 290, 291, 292, 0,
	294, 502, 0, 295, 296, 297, 0, 0, 298, 299,
	300, 301, 302, 303, 306, 503, 308, 309, 310, 311,
	312, 313, 314, 544, 316, 317, 318, 319, 320, 321,
	322, 506, 507, 323, 325, 326, 508, 510, 511, 0,
	341, 342, 343, 344, 345, 346, 347, 349, 0, 351,
	352, 353, 512, 354, 355, 356, 357, 0, 358, 359,
	360, 361, 362, 364, 367, 368, 369, 370, 0, 373,
	374, 375, 376, 377, 378, 379, 381, 382, 383, 385,
	386, 387, 545, 388, 389, 390, 391, 515, 393, 394,
	546, 396, 397, 399, 400, 401, 402, 403, 404, 561,
	0, 406, 516, 407, 408, 409, 410, 411, 0, 413,
	414, 415, 416, 417, 418, 421, 422, 423, 425, 426,
	518, 427, 428, 0, 430, 431, 0, 433, 434, 435,
	436, 437, 0, 562, 438, 520, 439, 521, 440, 441,
	442, 443, 444, 445, 446, 448, 0, 0, 450, 451,
	452, 454, 455, 456, 457, 460, 461, 462, 463, 464,
	0, 465, 467, 469, 547, 524, 525, 526, 527, 528,
	530, 531, 532, 533, 470, 471, 487, 338, 332, 288,
	330, 331, 335, 336, 339, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 164, 0, 181, 0, 0, 230, 950,
	482, 0, 0, 327, 0, 380, 384, 0, 473, 0,
	0, 0, 0, 238, 0, 0, 0, 0, 0, 0,
	0, 449, 0, 0, 0, 0, 169, 563, 472, 543,
	0, 0, 0, 334, 0, 0, 0, 560, 0, 0,
	0, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 371, 305, 0, 522, 398,
	176, 222, 209, 251, 293, 405, 0, 0, 283, 453,
	218, 307, 0, 197, 340, 0, 429, 304, 0, 412,
	432, 0, 324, 203, 363, 419, 420, 0, 0, 0,
	0, 0, 207, 208, 329, 189, 337, 534, 500, 392,
	350, 348, 0, 315, 372, 529, 0, 0, 237, 0,
	232, 328, 468, 195, 447, 366, 333, 287, 395, 424,
	234, 219, 220, 263, 365, 253, 205, 458, 497, 501,
	499, 495, 492, 496, 493, 494, 498, 254, 491, 0,
	466, 475, 509, 489, 517, 474, 514, 484, 229, 513,
	478, 477, 523, 504, 505, 459, 519, 490, 488, 481,
	480, 476, 0, 154, 155, 156, 157, 158, 159, 160,
	161, 162, 163, 165, 0, 166, 167, 168, 170, 171,
	172, 0, 173, 174, 175, 178, 179, 180, 182, 542,
	183, 184, 185, 186, 187, 188, 479, 0, 190, 191,
	192, 193, 194, 196, 198, 199, 200, 201, 202, 204,
	206, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	212, 213, 214, 215, 0, 216, 217, 221, 223, 224,
	225, 226, 227, 228, 231, 0, 233, 235, 0, 236,
	239, 0, 240, 241, 242, 243, 244, 245, 246, 247,
	483, 248, 0, 249, 250, 252, 0, 255, 256, 257,
	258, 259, 0, 260, 485, 486, 261, 262, 264, 265,
	266, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 280, 281, 282, 284, 0, 285,
	286, 289, 290, 291, 292, 0, 294, 502, 0, 295,
	296, 297, 0, 0, 298, 299, 300, 301, 302, 303,
	306, 503, 308, 309, 310, 311, 312, 313, 314, 544,
	316, 317, 318, 319, 320, 321, 322, 506, 507, 323,
	325, 326, 508, 510, 511, 0, 341, 342, 343, 344,
	345, 346, 347, 349, 0, 351, 352, 353, 512, 354,
	355, 356, 357, 0, 358, 359, 360, 361, 362, 364,
	367, 368, 369, 370, 0, 373, 374, 375, 376, 377,
	378, 379, 381, 382, 383, 385, 386, 387, 545, 388,
	389, 390, 391, 515, 393, 394, 546, 396, 397, 399,
	400, 401, 402, 403, 404, 561, 0, 406, 516, 407,
	408, 409, 410, 411, 0, 413, 414, 415, 416, 417,
	418, 421, 422, 423, 425, 426, 518, 427, 428, 0,
	430, 431, 0, 433, 434, 435, 436, 437, 0, 562,
	438, 520, 439, 521, 440, 441, 442, 443, 444, 445,
	446, 448, 0, 0, 450, 451, 452, 454, 455, 456,
	457, 460, 461, 462, 463, 464, 0, 465, 467, 469,
	547, 524, 525, 526, 527, 528, 530, 531, 532, 533,
	470, 471, 487, 338, 332, 288, 330, 331, 335, 336,
	339, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 948, 164,
	0, 181, 0, 0, 230, 947, 482, 0, 0, 327,
	0, 380, 384, 0, 473, 0, 0, 0, 0, 238,
	0, 0, 0, 0, 0, 0, 0, 449, 0, 0,
	0, 0, 169, 563, 472, 543, 0, 0, 0, 334,
	0, 0, 0, 0, 0, 0, 0, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 371, 305, 0, 522, 398, 176, 222, 209, 251,
	293, 405, 0, 0, 283, 453, 218, 307, 0, 197,
	340, 0, 429, 304, 0, 412, 432, 0, 324, 203,
	363, 419, 420, 0, 0, 0, 0, 0, 207, 208,
	329, 189, 337, 534, 500, 392, 350, 348, 0, 315,
	372, 529, 0, 0, 237, 0, 232, 328, 468, 195,
	447, 366, 333, 287, 395, 424, 234, 219, 220, 263,
	365, 253, 205, 458, 497, 501, 499, 495, 492, 496,
	493, 494, 498, 254, 491, 0, 466, 475, 509, 489,
	517, 474, 514, 484, 229, 513, 478, 477, 523, 504,
	505, 459, 519, 490, 488, 481, 480, 476, 0, 154,
	155, 156, 157, 158, 159, 160, 161, 162, 163, 165,
	0, 166, 167, 168, 170, 171, 172, 0, 173, 174,
	175, 178, 179, 180, 182, 542, 183, 184, 185, 186,
	187, 188, 479, 0, 190, 191, 192, 193, 194, 196,
	198, 199, 200, 201, 202, 204, 206, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 212, 213, 214, 215,
	0, 216, 217, 221, 223, 224, 225, 226, 227, 228,
	231, 0, 233, 235, 0, 236, 239, 0, 240, 241,
	242, 243, 244, 245, 246, 247, 483, 248, 0, 249,
	250, 252, 0, 255, 256, 257, 258, 259, 0, 260,
	485, 486, 261, 262, 264, 265, 266, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	280, 281, 282, 284, 0, 285, 286, 289, 290, 291,
	292, 0, 294, 502, 0, 295, 296, 297, 0, 0,
	298, 299, 300, 301, 302, 303, 306, 503, 308, 309,
	310, 311, 312, 313, 314, 544, 316, 317, 318, 319,
	320, 321, 322, 506, 507, 323, 325, 326, 508, 510,
	511, 0, 341, 342, 343, 344, 345, 346, 347, 349,
	0, 351, 352, 353, 512, 354, 355, 356, 357, 0,
	358, 359, 360, 361, 362, 364, 367, 368, 369, 370,
	0, 373, 374, 375, 376, 377, 378, 379, 381, 382,
	383, 385, 386, 387, 545, 388, 389, 390, 391, 515,
	393, 394, 546, 396, 397, 399, 400, 401, 402, 403,
	404, 561, 0, 406, 516, 407, 408, 409, 410, 411,
	0, 413, 414, 415, 416, 417, 418, 421, 422, 423,
	425, 426, 518, 427, 428, 0, 430, 431, 0, 433,
	434, 435, 436, 437, 0, 562, 438, 520, 439, 521,
	440, 441, 442, 443, 444, 445, 446, 448, 0, 0,
	450, 451, 452, 454, 455, 456, 457, 460, 461, 462,
	463, 464, 0, 465, 467, 469, 547, 524, 525, 526,
	527, 528, 530, 531, 532, 533, 470, 471, 487, 338,
	332, 288, 330, 331, 335, 336, 339, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 164, 0, 181, 0, 0,
	230, 267, 482, 0, 0, 327, 0, 380, 384, 0,
	473, 0, 0, 0, 0, 238, 0, 0, 0, 0,
	0, 0, 0, 449, 0, 0, 0, 0, 169, 144,
	472, 543, 0, 0, 0, 334, 0, 0, 0, 0,
	0, 0, 0, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 371, 305, 0,
	522, 398, 176, 222, 209, 251, 293, 405, 0, 0,
	283, 453, 218, 307, 0, 197, 340, 0, 429, 304,
	0, 412, 432, 0, 324, 203, 363, 419, 420, 0,
	0, 0, 0, 0, 207, 208, 329, 189, 337, 534,
	500, 392, 350, 348, 0, 315, 372, 529, 0, 0,
	237, 0, 232, 328, 468, 195, 447, 366, 333, 287,
	395, 424, 234, 219, 220, 263, 365, 253, 205, 458,
	497, 501, 499, 495, 492, 496, 493, 494, 498, 254,
	491, 0, 466, 475, 509, 489, 517, 474, 514, 484,
	229, 513, 478, 477, 523, 504, 505, 459, 519, 490,
	488, 481, 480, 476, 0, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 165, 0, 166, 167, 168,
	170, 171, 172, 764, 173, 174, 175, 178, 179, 180,
	182, 145, 183, 763, 185, 186, 187, 188, 479, 0,
	190, 191, 192, 193, 194, 196, 198, 199, 200, 201,
	202, 204, 206, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 212, 213, 214, 215, 0, 216, 217, 221,
	223, 224, 225, 226, 227, 228, 231, 0, 233, 235,
	0, 236, 239, 0, 240, 241, 242, 243, 244, 245,
	246, 247, 483, 248, 0, 249, 250, 252, 0, 255,
	256, 257, 258, 259, 0, 260, 485, 486, 261, 262,
	264, 265, 266, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 280, 281, 282, 284,
	0, 285, 286, 289, 290, 291, 292, 0, 294, 502,
	0, 295, 296, 297, 0, 0, 298, 299, 300, 301,
	302, 303, 306, 503, 308, 309, 310, 311, 312, 313,
	314, 147, 316, 317, 318, 319, 320, 321, 322, 506,
	507, 323, 325, 326, 508, 510, 511, 0, 341, 342,
	343, 344, 345, 346, 347, 349, 0, 351, 352, 353,
	512, 354, 355, 356, 357, 0, 358, 359, 360, 361,
	362, 364, 367, 368, 369, 370, 0, 373, 374, 375,
	376, 377, 378, 379, 381, 382, 383, 385, 386, 387,
	148, 388, 389, 390, 391, 515, 393, 394, 146, 396,
	397, 399, 400, 401, 402, 403, 404, 761, 0, 406,
	516, 407, 408, 409, 410, 411, 0, 413, 414, 415,
	416, 417, 418, 421, 422, 423, 425, 426, 518, 427,
	428, 0, 430, 431, 0, 433, 434, 435, 436, 437,
	0, 140, 438, 520, 439, 521, 440, 441, 442, 443,
	444, 445, 446, 448, 0, 0, 450, 451, 452, 454,
	455, 456, 457, 460, 461, 462, 463, 464, 0, 465,
	467, 469, 149, 524, 525, 526, 527, 528, 530, 531,
	532, 533, 470, 471, 487, 338, 332, 288, 330, 331,
	335, 336, 339, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	630, 164, 0, 181, 0, 0, 230, 629, 482, 0,
	0, 327, 0, 380, 384, 0, 473, 0, 0, 0,
	0, 238, 0, 0, 0, 0, 0, 0, 0, 449,
	0, 0, 0, 0, 169, 563, 472, 543, 0, 0,
	0, 334, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 371, 305, 0, 522, 398, 176, 222,
	209, 251, 293, 405, 0, 0, 283, 453, 218, 307,
	0, 197, 340, 0, 429, 304, 0, 412, 432, 0,
	324, 203, 363, 419, 420, 0, 0, 0, 0, 0,
	207, 208, 329, 189, 337, 534, 500, 392, 350, 348,
	0, 315, 372, 529, 0, 0, 237, 0, 232, 328,
	468, 195, 447, 366, 333, 287, 395, 424, 234, 219,
	220, 263, 365, 253, 205, 458, 497, 501, 499, 495,
	492, 496, 493, 494, 498, 254, 491, 0, 466, 475,
	509, 489, 517, 474, 514, 484, 229, 513, 478, 477,
	523, 504, 505, 459, 519, 490, 488, 481, 480, 476,
	0, 154, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 165, 0, 166, 167, 168, 170, 171, 172, 0,
	173, 174, 175, 178, 179, 180, 182, 542, 183, 184,
	185, 186, 187, 188, 479, 0, 190, 191, 192, 193,
	194, 196, 198, 199, 200, 201, 202, 204, 206, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 212, 213,
	214, 215, 0, 216, 217, 221, 223, 224, 225, 226,
	227, 228, 231, 0, 233, 235, 0, 236, 239, 0,
	240, 241, 242, 243, 244, 245, 246, 247, 483, 248,
	0, 249, 250, 252, 0, 255, 256, 257, 258, 259,
	0, 260, 485, 486, 261, 262, 264, 265, 266, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 280, 281, 282, 284, 0, 285, 286, 289,
	290, 291, 292, 0, 294, 502, 0, 295, 296, 297,
	0, 0, 298, 299, 300, 301, 302, 303, 306, 503,
	308, 309, 310, 311, 312, 313, 314, 544, 316, 317,
	318, 319, 320, 321, 322, 506, 507, 323, 325, 326,
	508, 510, 511, 0, 341, 342, 343, 344, 345, 346,
	347, 349, 0, 351, 352, 353, 512, 354, 355, 356,
	357, 0, 358, 359, 360, 361, 362, 364, 367, 368,
	369, 370, 0, 373, 374, 375, 376, 377, 378, 379,
	381, 382, 383, 385, 386, 387, 545, 388, 389, 390,
	391, 515, 393, 394, 546, 396, 397, 399, 400, 401,
	402, 403, 404, 561, 0, 406, 516, 407, 408, 409,
	410, 411, 0, 413, 414, 415, 416, 417, 418, 421,
	422, 423, 425, 426, 518, 427, 428, 0, 430, 431,
	0, 433, 434, 435, 436, 437, 0, 562, 438, 520,
	439, 521, 440, 441, 442, 443, 444, 445, 446, 448,
	0, 0, 450, 451, 452, 454, 455, 456, 457, 460,
	461, 462, 463, 464, 0, 465, 467, 469, 547, 524,
	525, 526, 527, 528, 530, 531, 532, 533, 470, 471,
	487, 338, 332, 288, 330, 331, 335, 336, 339, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 541, 164, 0, 181,
	0, 0, 230, 267, 482, 0, 0, 327, 0, 380,
	384, 0, 473, 0, 0, 0, 0, 238, 0, 0,
	0, 0, 0, 0, 0, 449, 0, 0, 0, 0,
	169, 537, 472, 543, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 0, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 371,
	305, 0, 522, 398, 176, 222, 209, 251, 293, 405,
	0, 0, 283, 453, 218, 307, 0, 197, 340, 0,
	429, 304, 0, 412, 432, 0, 324, 203, 363, 419,
	420, 0, 0, 0, 0, 0, 207, 208, 329, 189,
	337, 534, 500, 392, 350, 348, 0, 315, 372, 529,
	0, 0, 237, 0, 232, 328, 468, 195, 447, 366,
	333, 287, 395, 424, 234, 219, 220, 263, 365, 253,
	205, 458, 497, 501, 499, 495, 492, 496, 493, 494,
	498, 254, 491, 0, 466, 475, 509, 489, 517, 474,
	514, 484, 229, 513, 478, 477, 523, 504, 505, 459,
	519, 490, 488, 481, 480, 476, 0, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 165, 0, 166,
	167, 168, 170, 171, 172, 0, 173, 174, 175, 178,
	179, 180, 182, 542, 183, 184, 185, 186, 187, 188,
	479, 0, 190, 191, 192, 193, 194, 196, 198, 199,
	200, 201, 202, 204, 206, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 212, 213, 214, 215, 0, 216,
	217, 221, 223, 224, 225, 226, 227, 228, 231, 0,
	233, 235, 0, 236, 239, 0, 240, 241, 242, 243,
	244, 245, 246, 247, 483, 248, 0, 249, 250, 252,
	0, 255, 256, 257, 258, 259, 0, 260, 485, 486,
	261, 262, 264, 265, 266, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 280, 281,
	282, 284, 0, 285, 286, 289, 290, 291, 292, 0,
	294, 502, 0, 295, 296, 297, 0, 0, 298, 299,
	300, 301, 302, 303, 306, 503, 308, 309, 310, 311,
	312, 313, 314, 544, 316, 317, 318, 319, 320, 321,
	322, 506, 507, 323, 325, 326, 508, 510, 511, 0,
	341, 342, 343, 344, 345, 346, 347, 349, 0, 351,
	352, 353, 512, 354, 355, 356, 357, 0, 358, 359,
	360, 361, 362, 364, 367, 368, 369, 370, 0, 373,
	374, 375, 376, 377, 378, 379, 381, 382, 383, 385,
	386, 387, 545, 388, 389, 390, 391, 515, 393, 394,
	546, 396, 397, 399, 400, 401, 402, 403, 404, 539,
	0, 406, 516, 407, 408, 409, 410, 411, 0, 413,
	414, 415, 416, 417, 418, 421, 422, 423, 425, 426,
	518, 427, 428, 0, 430, 431, 0, 433, 434, 435,
	436, 437, 0, 538, 438, 520, 439, 521, 440, 441,
	442, 443, 444, 445, 446, 448, 0, 0, 450, 451,
	452, 454, 455, 456, 457, 460, 461, 462, 463, 464,
	0, 465, 467, 469, 547, 524, 525, 526, 527, 528,
	530, 531, 532, 533, 470, 471, 487, 338, 332, 288,
	330, 331, 335, 336, 339, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 164, 0, 181, 0, 0, 230, 267,
	482, 0, 0, 327, 0, 380, 384, 0, 473, 0,
	0, 0, 0, 238, 0, 0, 0, 0, 0, 0,
	0, 449, 0, 0, 0, 0, 169, 563, 472, 543,
	0, 0, 0, 334, 0, 0, 0, 0, 0, 0,
	0, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 371, 305, 0, 522, 398,
	176, 222, 209, 251, 293, 405, 0, 0, 283, 453,
	218, 307, 0, 197, 340, 0, 429, 304, 0, 412,
	432, 0, 324, 203, 363, 419, 420, 0, 0, 0,
	0, 0, 207, 208, 329, 189, 337, 534, 500, 392,
	350, 348, 0, 3669, 372, 529, 0, 0, 237, 0,
	232, 328, 468, 195, 447, 366, 333, 287, 395, 424,
	234, 219, 220, 263, 365, 253, 205, 458, 497, 501,
	499, 495, 492, 496, 493, 494, 498, 254, 491, 0,
	466, 475, 509, 489, 517, 474, 514, 484, 229, 513,
	478, 477, 523, 504, 505, 459, 519, 490, 488, 481,
	480, 476, 0, 154, 155, 156, 157, 158, 159, 160,
	161, 162, 163, 165, 0, 166, 167, 168, 170, 171,
	172, 0, 173, 174, 175, 178, 179, 180, 182, 542,
	183, 184, 185, 186, 187, 188, 479, 0, 190, 191,
	192, 193, 194, 196, 198, 199, 200, 201, 202, 204,
	206, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	212, 213, 214, 215, 0, 216, 217, 221, 223, 224,
	225, 226, 227, 228, 231, 0, 233, 235, 0, 236,
	239, 0, 240, 241, 242, 243, 244, 245, 246, 247,
	483, 248, 0, 249, 250, 252, 0, 255, 256, 257,
	258, 259, 0, 260, 485, 486, 261, 262, 264, 265,
	266, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 280, 281, 282, 284, 0, 285,
	286, 289, 290, 291, 292, 0, 294, 502, 0, 295,
	296, 297, 0, 0, 298, 299, 300, 301, 302, 303,
	306, 503, 308, 309, 310, 311, 312, 313, 314, 544,
	316, 317, 318, 319, 320, 321, 322, 506, 507, 323,
	325, 326, 508, 510, 511, 0, 341, 342, 343, 344,
	345, 346, 347, 349, 0, 351, 352, 353, 512, 354,
	355, 356, 357, 0, 358, 359, 360, 361, 362, 364,
	367, 368, 369, 370, 0, 373, 374, 375, 376, 377,
	378, 379, 381, 382, 383, 385, 386, 387, 545, 388,
	389, 390, 391, 515, 393, 394, 546, 396, 397, 399,
	400, 401, 402, 403, 404, 561, 0, 406, 516, 407,
	408, 409, 410, 411, 0, 413, 414, 415, 416, 417,
	418, 421, 422, 423, 425, 426, 518, 427, 428, 0,
	430, 431, 0, 433, 434, 435, 436, 437, 0, 562,
	438, 520, 439, 521, 440, 441, 442, 443, 444, 445,
	446, 448, 0, 0, 450, 451, 452, 454, 455, 456,
	457, 460, 461, 462, 463, 464, 0, 465, 467, 469,
	547, 524, 525, 526, 527, 528, 530, 531, 532, 533,
	470, 471, 487, 338, 332, 288, 330, 331, 335, 336,
	339, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 164,
	0, 181, 0, 0, 230, 267, 482, 0, 0, 327,
	0, 380, 384, 0, 473, 0, 0, 0, 0, 238,
	0, 0, 0, 0, 0, 0, 0, 449, 0, 0,
	0, 0, 169, 563, 472, 543, 0, 0, 0, 334,
	0, 0, 0, 0, 0, 0, 0, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 371, 305, 0, 522, 398, 176, 222, 209, 251,
	293, 405, 0, 0, 283, 453, 218, 307, 0, 197,
	340, 0, 429, 304, 0, 412, 432, 0, 324, 203,
	363, 419, 420, 0, 0, 0, 0, 0, 207, 208,
	329, 189, 337, 534, 500, 392, 350, 348, 0, 315,
	372, 529, 0, 0, 237, 0, 232, 328, 468, 195,
	447, 366, 333, 287, 395, 424, 234, 219, 220, 263,
	365, 253, 205, 458, 497, 501, 499, 495, 492, 496,
	493, 494, 498, 254, 491, 0, 466, 475, 509, 489,
	517, 474, 514, 484, 229, 513, 478, 477, 523, 504,
	505, 459, 519, 490, 488, 481, 480, 476, 0, 154,
	155, 156, 157, 158, 159, 160, 161, 162, 163, 165,
	0, 166, 167, 168, 170, 171, 172, 0, 173, 174,
	175, 178, 179, 180, 182, 542, 183, 184, 185, 186,
	187, 188, 479, 0, 190, 191, 192, 193, 194, 196,
	198, 199, 200, 201, 202, 204, 206, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 212, 213, 214, 215,
	0, 216, 217, 221, 223, 224, 225, 226, 227, 228,
	231, 0, 233, 235, 0, 236, 239, 0, 240, 241,
	242, 243, 244, 245, 246, 247, 483, 248, 0, 249,
	250, 252, 0, 255, 256, 257, 258, 259, 0, 260,
	485, 486, 261, 262, 264, 265, 266, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	280, 281, 282, 284, 0, 285, 286, 289, 290, 291,
	292, 0, 294, 502, 0, 295, 296, 297, 0, 0,
	298, 299, 300, 301, 302, 303, 306, 503, 308, 309,
	310, 311, 312, 313, 314, 544, 316, 317, 318, 319,
	320, 321, 322, 506, 507, 323, 325, 326, 508, 510,
	511, 0, 341, 342, 343, 344, 345, 346, 347, 349,
	0, 351, 352, 353, 512, 354, 355, 356, 357, 0,
	358, 359, 360, 361, 362, 364, 367, 368, 369, 370,
	0, 373, 374, 375, 376, 377, 378, 379, 381, 382,
	383, 385, 386, 387, 545, 388, 389, 390, 391, 515,
	393, 394, 546, 396, 397, 399, 400, 401, 402, 403,
	404, 561, 0, 406, 516, 407, 408, 409, 410, 411,
	0, 413, 414, 415, 416, 417, 418, 421, 422, 423,
	425, 426, 518, 427, 428, 0, 430, 431, 0, 433,
	434, 435, 436, 437, 0, 562, 438, 520, 439, 521,
	440, 441, 442, 443, 444, 445, 446, 448, 0, 0,
	450, 451, 452, 454, 455, 456, 457, 460, 461, 462,
	463, 464, 0, 465, 467, 469, 547, 524, 525, 526,
	527, 528, 530, 531, 532, 533, 470, 471, 487, 338,
	332, 288, 330, 331, 335, 336, 339, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 164, 0, 181, 0, 0,
	230, 267, 482, 0, 0, 327, 0, 380, 384, 0,
	473, 0, 0, 0, 0, 238, 0, 0, 0, 0,
	0, 0, 0, 449, 0, 0, 0, 0, 169, 144,
	472, 543, 0, 0, 0, 334, 0, 0, 0, 0,
	0, 0, 0, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 371, 305, 0,
	522, 398, 176, 222, 209, 251, 293, 405, 0, 0,
	283, 453, 218, 307, 0, 197, 340, 0, 429, 304,
	0, 412, 432, 0, 324, 203, 363, 419, 420, 0,
	0, 0, 0, 0, 207, 208, 329, 189, 337, 534,
	500, 392, 350, 348, 0, 315, 372, 529, 0, 0,
	237, 0, 232, 328, 468, 195, 447, 366, 333, 287,
	395, 424, 234, 219, 220, 263, 365, 253, 205, 458,
	497, 501, 499, 495, 492, 496, 493, 494, 498, 254,
	491, 0, 466, 475, 509, 489, 517, 474, 514, 484,
	229, 513, 478, 477, 523, 504, 505, 459, 519, 490,
	488, 481, 480, 476, 0, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 165, 0, 166, 167, 168,
	170, 171, 172, 0, 173, 174, 175, 178, 179, 180,
	182, 145, 183, 184, 185, 186, 187, 188, 479, 0,
	190, 191, 192, 193, 194, 196, 198, 199, 200, 201,
	202, 204, 206, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 212, 213, 214, 215, 0, 216, 217, 221,
	223, 224, 225, 226, 227, 228, 231, 0, 233, 235,
	0, 236, 239, 0, 240, 241, 242, 243, 244, 245,
	246, 247, 483, 248, 0, 249, 250, 252, 0, 255,
	256, 257, 258, 259, 0, 260, 485, 486, 261, 262,
	264, 265, 266, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 280, 281, 282, 284,
	0, 285, 286, 289, 290, 291, 292, 0, 294, 502,
	0, 295, 296, 297, 0, 0, 298, 299, 300, 301,
	302, 303, 306, 503, 308, 309, 310, 311, 312, 313,
	314, 147, 316, 317, 318, 319, 320, 321, 322, 506,
	507, 323, 325, 326, 508, 510, 511, 0, 341, 342,
	343, 344, 345, 346, 347, 349, 0, 351, 352, 353,
	512, 354, 355, 356, 357, 0, 358, 359, 360, 361,
	362, 364, 367, 368, 369, 370, 0, 373, 374, 375,
	376, 377, 378, 379, 381, 382, 383, 385, 386, 387,
	148, 388, 389, 390, 391, 515, 393, 394, 146, 396,
	397, 399, 400, 401, 402, 403, 404, 2488, 0, 406,
	516, 407, 408, 409, 410, 411, 0, 413, 414, 415,
	416, 417, 418, 421, 422, 423, 425, 426, 518, 427,
	428, 0, 430, 431, 0, 433, 434, 435, 436, 437,
	0, 2489, 438, 520, 439, 521, 440, 441, 442, 443,
	444, 445, 446, 448, 0, 0, 450, 451, 452, 454,
	455, 456, 457, 460, 461, 462, 463, 464, 0, 465,
	467, 469, 149, 524, 525, 526, 527, 528, 530, 531,
	532, 533, 470, 471, 487, 338, 332, 288, 330, 331,
	335, 336, 339, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 164, 0, 181, 0, 0, 230, 2277, 482, 0,
	0, 327, 0, 380, 384, 0, 473, 0, 0, 0,
	0, 238, 0, 0, 0, 0, 0, 0, 0, 449,
	0, 0, 0, 0, 169, 563, 472, 543, 0, 0,
	0, 334, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 371, 305, 0, 522, 398, 176, 222,
	209, 251, 293, 405, 0, 0, 283, 453, 218, 307,
	0, 197, 340, 0, 429, 304, 0, 412, 432, 0,
	324, 203, 363, 419, 420, 0, 0, 0, 0, 0,
	207, 208, 329, 189, 337, 534, 500, 392, 350, 348,
	0, 315, 372, 529, 0, 0, 237, 0, 232, 328,
	468, 195, 447, 366, 333, 287, 395, 424, 234, 219,
	220, 263, 365, 253, 205, 458, 497, 501, 499, 495,
	492, 496, 493, 494, 498, 254, 491, 0, 466, 475,
	509, 489, 517, 474, 514, 484, 229, 513, 478, 477,
	523, 504, 505, 459, 519, 490, 488, 481, 480, 476,
	0, 154, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 165, 0, 166, 167, 168, 170, 171, 172, 0,
	173, 174, 175, 178, 179, 180, 182, 542, 183, 184,
	185, 186, 187, 188, 479, 0, 190, 191, 192, 193,
	194, 196, 198, 199, 200, 201, 202, 204, 206, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 212, 213,
	214, 215, 0, 216, 217, 221, 223, 224, 225, 226,
	227, 228, 231, 0, 233, 235, 0, 236, 239, 0,
	240, 241, 242, 243, 244, 245, 246, 247, 483, 248,
	0, 249, 250, 252, 0, 255, 256, 257, 258, 259,
	0, 260, 485, 486, 261, 262, 264, 265, 266, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 280, 281, 282, 284, 0, 285, 286, 289,
	290, 291, 292, 0, 294, 502, 0, 295, 296, 297,
	0, 0, 298, 299, 300, 301, 302, 303, 306, 503,
	308, 309, 310, 311, 312, 313, 314, 544, 316, 317,
	318, 319, 320, 321, 322, 506, 507, 323, 325, 326,
	508, 510, 511, 0, 341, 342, 343, 344, 345, 346,
	347, 349, 0, 351, 352, 353, 512, 354, 355, 356,
	357, 0, 358, 359, 360, 361, 362, 364, 367, 368,
	369, 370, 0, 373, 374, 375, 376, 377, 378, 379,
	381, 382, 383, 385, 386, 387, 545, 388, 389, 390,
	391, 515, 393, 394, 546, 396, 397, 399, 400, 401,
	402, 403, 404, 561, 0, 406, 516, 407, 408, 409,
	410, 411, 0, 413, 414, 415, 416, 417, 418, 421,
	422, 423, 425, 426, 518, 427, 428, 0, 430, 431,
	0, 433, 434, 435, 436, 437, 0, 562, 438, 520,
	439, 521, 440, 441, 442, 443, 444, 445, 446, 448,
	0, 0, 450, 451, 452, 454, 455, 456, 457, 460,
	461, 462, 463, 464, 0, 465, 467, 469, 547, 524,
	525, 526, 527, 528, 530, 531, 532, 533, 470, 471,
	487, 338, 332, 288, 330, 331, 335, 336, 339, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 164, 0, 181,
	0, 0, 230, 2197, 482, 0, 0, 327, 0, 380,
	384, 0, 473, 0, 0, 0, 0, 238, 0, 0,
	0, 0, 0, 0, 0, 449, 0, 0, 0, 0,
	169, 563, 472, 543, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 0, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 371,
	305, 0, 522, 398, 176, 222, 209, 251, 293, 405,
	0, 0, 283, 453, 218, 307, 0, 197, 340, 0,
	429, 304, 0, 412, 432, 0, 324, 203, 363, 419,
	420, 0, 0, 0, 0, 0, 207, 208, 329, 189,
	337, 534, 500, 392, 350, 348, 0, 315, 372, 529,
	0, 0, 237, 0, 232, 328, 468, 195, 447, 366,
	333, 287, 395, 424, 234, 219, 220, 263, 365, 253,
	205, 458, 497, 501, 499, 495, 492, 496, 493, 494,
	498, 254, 491, 0, 466, 475, 509, 489, 517, 474,
	514, 484, 229, 513, 478, 477, 523, 504, 505, 459,
	519, 490, 488, 481, 480, 476, 0, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 165, 0, 166,
	167, 168, 170, 171, 172, 0, 173, 174, 175, 178,
	179, 180, 182, 542, 183, 184, 185, 186, 187, 188,
	479, 0, 190, 191, 192, 193, 194, 196, 198, 199,
	200, 201, 202, 204, 206, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 212, 213, 214, 215, 0, 216,
	217, 221, 223, 224, 225, 226, 227, 228, 231, 0,
	233, 235, 0, 236, 239, 0, 240, 241, 242, 243,
	244, 245, 246, 247, 483, 248, 0, 249, 250, 252,
	0, 255, 256, 257, 258, 259, 0, 260, 485, 486,
	261, 262, 264, 265, 266, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 280, 281,
	282, 284, 0, 285, 286, 289, 290, 291, 292, 0,
	294, 502, 0, 295, 296, 297, 0, 0, 298, 299,
	300, 301, 302, 303, 306, 503, 308, 309, 310, 311,
	312, 313, 314, 544, 316, 317, 318, 319, 320, 321,
	322, 506, 507, 323, 325, 326, 508, 510, 511, 0,
	341, 342, 343, 344, 345, 346, 347, 349, 0, 351,
	352, 353, 512, 354, 355, 356, 357, 0, 358, 359,
	360, 361, 362, 364, 367, 368, 369, 370, 0, 373,
	374, 375, 376, 377, 378, 379, 381, 382, 383, 385,
	386, 387, 545, 388, 389, 390, 391, 515, 393, 394,
	546, 396, 397, 399, 400, 401, 402, 403, 404, 561,
	0, 406, 516, 407, 408, 409, 410, 411, 0, 413,
	414, 415, 416, 417, 418, 421, 422, 423, 425, 426,
	518, 427, 428, 0, 430, 431, 0, 433, 434, 435,
	436, 437, 0, 562, 438, 520, 439, 521, 440, 441,
	442, 443, 444, 445, 446, 448, 0, 0, 450, 451,
	452, 454, 455, 456, 457, 460, 461, 462, 463, 464,
	0, 465, 467, 469, 547, 524, 525, 526, 527, 528,
	530, 531, 532, 533, 470, 471, 487, 338, 332, 288,
	330, 331, 335, 336, 339, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 164, 0, 181, 0, 0, 230, 2195,
	482, 0, 0, 327, 0, 380, 384, 0, 473, 0,
	0, 0, 0, 238, 0, 0, 0, 0, 0, 0,
	0, 449, 0, 0, 0, 0, 169, 563, 472, 543,
	0, 0, 0, 334, 0, 0, 0, 0, 0, 0,
	0, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 371, 305, 0, 522, 398,
	176, 222, 209, 251, 293, 405, 0, 0, 283, 453,
	218, 307, 0, 197, 340, 0, 429, 304, 0, 412,
	432, 0, 324, 203, 363, 419, 420, 0, 0, 0,
	0, 0, 207, 208, 329, 189, 337, 534, 500, 392,
	350, 348, 0, 315, 372, 529, 0, 0, 237, 0,
	232, 328, 468, 195, 447, 366, 333, 287, 395, 424,
	234, 219, 220, 263, 365, 253, 205, 458, 497, 501,
	499, 495, 492, 496, 493, 494, 498, 254, 491, 0,
	466, 475, 509, 489, 517, 474, 514, 484, 229, 513,
	478, 477, 523, 504, 505, 459, 519, 490, 488, 481,
	480, 476, 0, 154, 155, 156, 157, 158, 159, 160,
	161, 162, 163, 165, 0, 166, 167, 168, 170, 171,
	172, 0, 173, 174, 175, 178, 179, 180, 182, 542,
	183, 184, 185, 186, 187, 188, 479, 0, 190, 191,
	192, 193, 194, 196, 198, 199, 200, 201, 202, 204,
	206, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	212, 213, 214, 215, 0, 216, 217, 221, 223, 224,
	225, 226, 227, 228, 231, 0, 233, 235, 0, 236,
	239, 0, 240, 241, 242, 243, 244, 245, 246, 247,
	483, 248, 0, 249, 250, 252, 0, 255, 256, 257,
	258, 259, 0, 260, 485, 486, 261, 262, 264, 265,
	266, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 280, 281, 282, 284, 0, 285,
	286, 289, 290, 291, 292, 0, 294, 502, 0, 295,
	296, 297, 0, 0, 298, 299, 300, 301, 302, 303,
	306, 503, 308, 309, 310, 311, 312, 313, 314, 544,
	316, 317, 318, 319, 320, 321, 322, 506, 507, 323,
	325, 326, 508, 510, 511, 0, 341, 342, 343, 344,
	345, 346, 347, 349, 0, 351, 352, 353, 512, 354,
	355, 356, 357, 0, 358, 359, 360, 361, 362, 364,
	367, 368, 369, 370, 0, 373, 374, 375, 376, 377,
	378, 379, 381, 382, 383, 385, 386, 387, 545, 388,
	389, 390, 391, 515, 393, 394, 546, 396, 397, 399,
	400, 401, 402, 403, 404, 561, 0, 406, 516, 407,
	408, 409, 410, 411, 0, 413, 414, 415, 416, 417,
	418, 421, 422, 423, 425, 426, 518, 427, 428, 0,
	430, 431, 0, 433, 434, 435, 436, 437, 0, 562,
	438, 520, 439, 521, 440, 441, 442, 443, 444, 445,
	446, 448, 0, 0, 450, 451, 452, 454, 455, 456,
	457, 460, 461, 462, 463, 464, 0, 465, 467, 469,
	547, 524, 525, 526, 527, 528, 530, 531, 532, 533,
	470, 471, 487, 338, 332, 288, 330, 331, 335, 336,
	339, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 164,
	0, 181, 0, 0, 230, 2180, 482, 0, 0, 327,
	0, 380, 384, 0, 473, 0, 0, 0, 0, 238,
	0, 0, 0, 0, 0, 0, 0, 449, 0, 0,
	0, 0, 169, 563, 472, 543, 0, 0, 0, 334,
	0, 0, 0, 0, 0, 0, 0, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 371, 305, 0, 522, 398, 176, 222, 209, 251,
	293, 405, 0, 0, 283, 453, 218, 307, 0, 197,
	340, 0, 429, 304, 0, 412, 432, 0, 324, 203,
	363, 419, 420, 0, 0, 0, 0, 0, 207, 208,
	329, 189, 337, 534, 500, 392, 350, 348, 0, 315,
	372, 529, 0, 0, 237, 0, 232, 328, 468, 195,
	447, 366, 333, 287, 395, 424, 234, 219, 220, 263,
	365, 253, 205, 458, 497, 501, 499, 495, 492, 496,
	493, 494, 498, 254, 491, 0, 466, 475, 509, 489,
	517, 474, 514, 484, 229, 513, 478, 477, 523, 504,
	505, 459, 519, 490, 488, 481, 480, 476, 0, 154,
	155, 156, 157, 158, 159, 160, 161, 162, 163, 165,
	0, 166, 167, 168, 170, 171, 172, 0, 173, 174,
	175, 178, 179, 180, 182, 542, 183, 184, 185, 186,
	187, 188, 479, 0, 190, 191, 192, 193, 194, 196,
	198, 199, 200, 201, 202, 204, 206, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 212, 213, 214, 215,
	0, 216, 217, 221, 223, 224, 225, 226, 227, 228,
	231, 0, 233, 235, 0, 236, 239, 0, 240, 241,
	242, 243, 244, 245, 246, 247, 483, 248, 0, 249,
	250, 252, 0, 255, 256, 257, 258, 259, 0, 260,
	485, 486, 261, 262, 264, 265, 266, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	280, 281, 282, 284, 0, 285, 286, 289, 290, 291,
	292, 0, 294, 502, 0, 295, 296, 297, 0, 0,
	298, 299, 300, 301, 302, 303, 306, 503, 308, 309,
	310, 311, 312, 313, 314, 544, 316, 317, 318, 319,
	320, 321, 322, 506, 507, 323, 325, 326, 508, 510,
	511, 0, 341, 342, 343, 344, 345, 346, 347, 349,
	0, 351, 352, 353, 512, 354, 355, 356, 357, 0,
	358, 359, 360, 361, 362, 364, 367, 368, 369, 370,
	0, 373, 374, 375, 376, 377, 378, 379, 381, 382,
	383, 385, 386, 387, 545, 388, 389, 390, 391, 515,
	393, 394, 546, 396, 397, 399, 400, 401, 402, 403,
	404, 561, 0, 406, 516, 407, 408, 409, 410, 411,
	0, 413, 414, 415, 416, 417, 418, 421, 422, 423,
	425, 426, 518, 427, 428, 0, 430, 431, 0, 433,
	434, 435, 436, 437, 0, 562, 438, 520, 439, 521,
	440, 441, 442, 443, 444, 445, 446, 448, 0, 0,
	450, 451, 452, 454, 455, 456, 457, 460, 461, 462,
	463, 464, 0, 465, 467, 469, 547, 524, 525, 526,
	527, 528, 530, 531, 532, 533, 470, 471, 487, 338,
	332, 288, 330, 331, 335, 336, 339, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 164, 0, 181, 0, 0,
	230, 1767, 482, 0, 0, 327, 0, 380, 384, 0,
	473, 0, 0, 0, 0, 238, 0, 0, 0, 0,
	0, 0, 0, 449, 0, 0, 0, 0, 169, 563,
	472, 543, 0, 0, 0, 334, 0, 0, 0, 0,
	0, 0, 0, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 371, 305, 0,
	522, 398, 176, 222, 209, 251, 293, 405, 0, 0,
	283, 453, 218, 307, 0, 197, 340, 0, 429, 304,
	0, 412, 432, 0, 324, 203, 363, 419, 420, 0,
	0, 0, 0, 0, 207, 208, 329, 189, 337, 534,
	500, 392, 350, 348, 0, 315, 372, 529, 0, 0,
	237, 0, 232, 328, 468, 195, 447, 366, 333, 287,
	395, 424, 234, 219, 220, 263, 365, 253, 205, 458,
	497, 501, 499, 495, 492, 496, 493, 494, 498, 254,
	491, 0, 466, 475, 509, 489, 517, 474, 514, 484,
	229, 513, 478, 477, 523, 504, 505, 459, 519, 490,
	488, 481, 480, 476, 0, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 165, 0, 166, 167, 168,
	170, 171, 172, 0, 173, 174, 175, 178, 179, 180,
	182, 542, 183, 184, 185, 186, 187, 188, 479, 0,
	190, 191, 192, 193, 194, 196, 198, 199, 200, 201,
	202, 204, 206, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 212, 213, 214, 215, 0, 216, 217, 221,
	223, 224, 225, 226, 227, 228, 231, 0, 233, 235,
	0, 236, 239, 0, 240, 241, 242, 243, 244, 245,
	246, 247, 483, 248, 0, 249, 250, 252, 0, 255,
	256, 257, 258, 259, 0, 260, 485, 486, 261, 262,
	264, 265, 266, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 280, 281, 282, 284,
	0, 285, 286, 289, 290, 291, 292, 0, 294, 502,
	0, 295, 296, 297, 0, 0, 298, 299, 300, 301,
	302, 303, 306, 503, 308, 309, 310, 311, 312, 313,
	314, 544, 316, 317, 318, 319, 320, 321, 322, 506,
	507, 323, 325, 326, 508, 510, 511, 0, 341, 342,
	343, 344, 345, 346, 347, 349, 0, 351, 352, 353,
	512, 354, 355, 356, 357, 0, 358, 359, 360, 361,
	362, 364, 367, 368, 369, 370, 0, 373, 374, 375,
	376, 377, 378, 379, 381, 382, 383, 385, 386, 387,
	545, 388, 389, 390, 391, 515, 393, 394, 546, 396,
	397, 399, 400, 401, 402, 403, 404, 561, 0, 406,
	516, 407, 408, 409, 410, 411, 0, 413, 414, 415,
	416, 417, 418, 421, 422, 423, 425, 426, 518, 427,
	428, 0, 430, 431, 0, 433, 434, 435, 436, 437,
	0, 562, 438, 520, 439, 521, 440, 441, 442, 443,
	444, 445, 446, 448, 0, 0, 450, 451, 452, 454,
	455, 456, 457, 460, 461, 462, 463, 464, 0, 465,
	467, 469, 547, 524, 525, 526, 527, 528, 530, 531,
	532, 533, 470, 471, 487, 338, 332, 288, 330, 331,
	335, 336, 339, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 164, 0, 181, 0, 0, 230, 1725, 482, 0,
	0, 327, 0, 380, 384, 0, 473, 0, 0, 0,
	0, 238, 0, 0, 0, 0, 0, 0, 0, 449,
	0, 0, 0, 0, 169, 563, 472, 543, 0, 0,
	0, 334, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 371, 305, 0, 522, 398, 176, 222,
	209, 251, 293, 405, 0, 0, 283, 453, 218, 307,
	0, 197, 340, 0, 429, 304, 0, 412, 432, 0,
	324, 203, 363, 419, 420, 0, 0, 0, 0, 0,
	207, 208, 329, 189, 337, 534, 500, 392, 350, 348,
	0, 315, 372, 529, 0, 0, 237, 0, 232, 328,
	468, 195, 447, 366, 333, 287, 395, 424, 234, 219,
	220, 263, 365, 253, 205, 458, 497, 501, 499, 495,
	492, 496, 493, 494, 498, 254, 491, 0, 466, 475,
	509, 489, 517, 474, 514, 484, 229, 513, 478, 477,
	523, 504, 505, 459, 519, 490, 488, 481, 480, 476,
	0, 154, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 165, 0, 166, 167, 168, 170, 171, 172, 0,
	173, 174, 175, 178, 179, 180, 182, 542, 183, 184,
	185, 186, 187, 188, 479, 0, 190, 191, 192, 193,
	194, 196, 198, 199, 200, 201, 202, 204, 206, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 212, 213,
	214, 215, 0, 216, 217, 221, 223, 224, 225, 226,
	227, 228, 231, 0, 233, 235, 0, 236, 239, 0,
	240, 241, 242, 243, 244, 245, 246, 247, 483, 248,
	0, 249, 250, 252, 0, 255, 256, 257, 258, 259,
	0, 260, 485, 486, 261, 262, 264, 265, 266, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 280, 281, 282, 284, 0, 285, 286, 289,
	290, 291, 292, 0, 294, 502, 0, 295, 296, 297,
	0, 0, 298, 299, 300, 301, 302, 303, 306, 503,
	308, 309, 310, 311, 312, 313, 314, 544, 316, 317,
	318, 319, 320, 321, 322, 506, 507, 323, 325, 326,
	508, 510, 511, 0, 341, 342, 343, 344, 345, 346,
	347, 349, 0, 351, 352, 353, 512, 354, 355, 356,
	357, 0, 358, 359, 360, 361, 362, 364, 367, 368,
	369, 370, 0, 373, 374, 375, 376, 377, 378, 379,
	381, 382, 383, 385, 386, 387, 545, 388, 389, 390,
	391, 515, 393, 394, 546, 396, 397, 399, 400, 401,
	402, 403, 404, 561, 0, 406, 516, 407, 408, 409,
	410, 411, 0, 413, 414, 415, 416, 417, 418, 421,
	422, 423, 425, 426, 518, 427, 428, 0, 430, 431,
	0, 433, 434, 435, 436, 437, 0, 562, 438, 520,
	439, 521, 440, 441, 442, 443, 444, 445, 446, 448,
	0, 0, 450, 451, 452, 454, 455, 456, 457, 460,
	461, 462, 463, 464, 0, 465, 467, 469, 547, 524,
	525, 526, 527, 528, 530, 531, 532, 533, 470, 471,
	487, 338, 332, 288, 330, 331, 335, 336, 339, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 164, 0, 181,
	0, 0, 230, 1036, 482, 0, 0, 327, 0, 380,
	384, 0, 473, 0, 0, 0, 0, 238, 0, 0,
	0, 0, 0, 0, 0, 449, 0, 0, 0, 0,
	169, 563, 472, 543, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 0, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 371,
	305, 0, 522, 398, 176, 222, 209, 251, 293, 405,
	0, 0, 283, 453, 218, 307, 0, 197, 340, 0,
	429, 304, 0, 412, 432, 0, 324, 203, 363, 419,
	420, 0, 0, 0, 0, 0, 207, 208, 329, 189,
	337, 534, 500, 392, 350, 348, 0, 315, 372, 529,
	0, 0, 237, 0, 232, 328, 468, 195, 447, 366,
	333, 287, 395, 424, 234, 219, 220, 263, 365, 253,
	205, 458, 497, 501, 499, 495, 492, 496, 493, 494,
	498, 254, 491, 0, 466, 475, 509, 489, 517, 474,
	514, 484, 229, 513, 478, 477, 523, 504, 505, 459,
	519, 490, 488, 481, 480, 476, 0, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 165, 0, 166,
	167, 168, 170, 171, 172, 0, 173, 174, 175, 178,
	179, 180, 182, 542, 183, 184, 185, 186, 187, 188,
	479, 0, 190, 191, 192, 193, 194, 196, 198, 199,
	200, 201, 202, 204, 206, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 212, 213, 214, 215, 0, 216,
	217, 221, 223, 224, 225, 226, 227, 228, 231, 0,
	233, 235, 0, 236, 239, 0, 240, 241, 242, 243,
	244, 245, 246, 247, 483, 248, 0, 249, 250, 252,
	0, 255, 256, 257, 258, 259, 0, 260, 485, 486,
	261, 262, 264, 265, 266, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 280, 281,
	282, 284, 0, 285, 286, 289, 290, 291, 292, 0,
	294, 502, 0, 295, 296, 297, 0, 0, 298, 299,
	300, 301, 302, 303, 306, 503, 308, 309, 310, 311,
	312, 313, 314, 544, 316, 317, 318, 319, 320, 321,
	322, 506, 507, 323, 325, 326, 508, 510, 511, 0,
	341, 342, 343, 344, 345, 346, 347, 349, 0, 351,
	352, 353, 512, 354, 355, 356, 357, 0, 358, 359,
	360, 361, 362, 364, 367, 368, 369, 370, 0, 373,
	374, 375, 376, 377, 378, 379, 381, 382, 383, 385,
	386, 387, 545, 388, 389, 390, 391, 515, 393, 394,
	546, 396, 397, 399, 400, 401, 402, 403, 404, 561,
	0, 406, 516, 407, 408, 409, 410, 411, 0, 413,
	414, 415, 416, 417, 418, 421, 422, 423, 425, 426,
	518, 427, 428, 0, 430, 431, 0, 433, 434, 435,
	436, 437, 0, 562, 438, 520, 439, 521, 440, 441,
	442, 443, 444, 445, 446, 448, 0, 0, 450, 451,
	452, 454, 455, 456, 457, 460, 461, 462, 463, 464,
	0, 465, 467, 469, 547, 524, 525, 526, 527, 528,
	530, 531, 532, 533, 470, 471, 487, 338, 332, 288,
	330, 331, 335, 336, 339, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 164, 0, 181, 0, 0, 230, 859,
	482, 0, 0, 327, 0, 380, 384, 0, 473, 0,
	0, 0, 0, 238, 0, 0, 0, 0, 0, 0,
	0, 449, 0, 0, 0, 0, 169, 563, 472, 543,
	0, 0, 0, 334, 0, 0, 0, 0, 0, 0,
	0, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 371, 305, 0, 522, 398,
	176, 222, 209, 251, 293, 405, 0, 0, 283, 453,
	218, 307, 0, 197, 340, 0, 429, 304, 0, 412,
	432, 0, 324, 203, 363, 419, 420, 0, 0, 0,
	0, 0, 207, 208, 329, 189, 337, 534, 500, 392,
	350, 348, 0, 315, 372, 529, 0, 0, 237, 0,
	232, 328, 468, 195, 447, 366, 333, 287, 395, 424,
	234, 219, 220, 263, 365, 253, 205, 458, 497, 501,
	499, 495, 492, 496, 493, 494, 498, 254, 491, 0,
	466, 475, 509, 489, 517, 474, 514, 484, 229, 513,
	478, 477, 523, 504, 505, 459, 519, 490, 488, 481,
	480, 476, 0, 154, 155, 156, 157, 158, 159, 160,
	161, 162, 163, 165, 0, 166, 167, 168, 170, 171,
	172, 0, 173, 174, 175, 178, 179, 180, 182, 542,
	183, 184, 185, 186, 187, 188, 479, 0, 190, 191,
	192, 193, 194, 196, 198, 199, 200, 201, 202, 204,
	206, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	212, 213, 214, 215, 0, 216, 217, 221, 223, 224,
	225, 226, 227, 228, 231, 0, 233, 235, 0, 236,
	239, 0, 240, 241, 242, 243, 244, 245, 246, 247,
	483, 248, 0, 249, 250, 252, 0, 255, 256, 257,
	258, 259, 0, 260, 485, 486, 261, 262, 264, 265,
	266, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 280, 281, 282, 284, 0, 285,
	286, 289, 290, 291, 292, 0, 294, 502, 0, 295,
	296, 297, 0, 0, 298, 299, 300, 301, 302, 303,
	306, 503, 308, 309, 310, 311, 312, 313, 314, 544,
	316, 317, 318, 319, 320, 321, 322, 506, 507, 323,
	325, 326, 508, 510, 511, 0, 341, 342, 343, 344,
	345, 346, 347, 349, 0, 351, 352, 353, 512, 354,
	355, 356, 357, 0, 358, 359, 360, 361, 362, 364,
	367, 368, 369, 370, 0, 373, 374, 375, 376, 377,
	378, 379, 381, 382, 383, 385, 386, 387, 545, 388,
	389, 390, 391, 515, 393, 394, 546, 396, 397, 399,
	400, 401, 402, 403, 404, 561, 0, 406, 516, 407,
	408, 409, 410, 411, 0, 413, 414, 415, 416, 417,
	418, 421, 422, 423, 425, 426, 518, 427, 428, 0,
	430, 431, 0, 433, 434, 435, 436, 437, 0, 562,
	438, 520, 439, 521, 440, 441, 442, 443, 444, 445,
	446, 448, 0, 0, 450, 451, 452, 454, 455, 456,
	457, 460, 461, 462, 463, 464, 0, 465, 467, 469,
	547, 524, 525, 526, 527, 528, 530, 531, 532, 533,
	470, 471, 487, 338, 332, 288, 330, 331, 335, 336,
	339, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 164,
	0, 181, 0, 0, 230, 855, 482, 0, 0, 327,
	0, 380, 384, 0, 473, 0, 0, 0, 0, 238,
	0, 0, 0, 0, 0, 0, 0, 449, 0, 0,
	0, 0, 169, 563, 472, 543, 0, 0, 0, 334,
	0, 0, 0, 0, 0, 0, 0, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 371, 305, 0, 522, 398, 176, 222, 209, 251,
	293, 405, 0, 0, 283, 453, 218, 307, 0, 197,
	340, 0, 429, 304, 0, 412, 432, 0, 324, 203,
	363, 419, 420, 0, 0, 0, 0, 0, 207, 208,
	329, 189, 337, 534, 500, 392, 350, 348, 0, 315,
	372, 529, 0, 0, 237, 0, 232, 328, 468, 195,
	447, 366, 333, 287, 395, 424, 234, 219, 220, 263,
	365, 253, 205, 458, 497, 501, 499, 495, 492, 496,
	493, 494, 498, 254, 491, 0, 466, 475, 509, 489,
	517, 474, 514, 484, 229, 513, 478, 477, 523, 504,
	505, 459, 519, 490, 488, 481, 480, 476, 0, 154,
	155, 156, 157, 158, 159, 160, 161, 162, 163, 165,
	0, 166, 167, 168, 170, 171, 172, 0, 173, 174,
	175, 178, 179, 180, 182, 542, 183, 184, 185, 186,
	187, 188, 479, 0, 190, 191, 192, 193, 194, 196,
	198, 199, 200, 201, 202, 204, 206, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 212, 213, 214, 215,
	0, 216, 217, 221, 223, 224, 225, 226, 227, 228,
	231, 0, 233, 235, 0, 236, 239, 0, 240, 241,
	242, 243, 244, 245, 246, 247, 483, 248, 0, 249,
	250, 252, 0, 255, 256, 257, 258, 259, 0, 260,
	485, 486, 261, 262, 264, 265, 266, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	280, 281, 282, 284, 0, 285, 286, 289, 290, 291,
	292, 0, 294, 502, 0, 295, 296, 297, 0, 0,
	298, 299, 300, 301, 302, 303, 306, 503, 308, 309,
	310, 311, 312, 313, 314, 544, 316, 317, 318, 319,
	320, 321, 322, 506, 507, 323, 325, 326, 508, 510,
	511, 0, 341, 342, 343, 344, 345, 346, 347, 349,
	0, 351, 352, 353, 512, 354, 355, 356, 357, 0,
	358, 359, 360, 361, 362, 364, 367, 368, 369, 370,
	0, 373, 374, 375, 376, 377, 378, 379, 381, 382,
	383, 385, 386, 387, 545, 388, 389, 390, 391, 515,
	393, 394, 546, 396, 397, 399, 400, 401, 402, 403,
	404, 561, 0, 406, 516, 407, 408, 409, 410, 411,
	0, 413, 414, 415, 416, 417, 418, 421, 422, 423,
	425, 426, 518, 427, 428, 0, 430, 431, 0, 433,
	434, 435, 436, 437, 0, 562, 438, 520, 439, 521,
	440, 441, 442, 443, 444, 445, 446, 448, 0, 0,
	450, 451, 452, 454, 455, 456, 457, 460, 461, 462,
	463, 464, 0, 465, 467, 469, 547, 524, 525, 526,
	527, 528, 530, 531, 532, 533, 470, 471, 487, 338,
	332, 288, 330, 331, 335, 336, 339, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 164, 848, 181, 0, 0,
	230, 267, 482, 0, 0, 327, 0, 380, 384, 0,
	473, 0, 0, 0, 0, 238, 0, 0, 0, 0,
	0, 0, 0, 449, 0, 0, 0, 0, 169, 563,
	472, 543, 0, 0, 0, 334, 0, 0, 0, 0,
	0, 0, 0, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 371, 305, 0,
	522, 398, 176, 222, 209, 251, 293, 0, 0, 0,
	283, 453, 218, 307, 0, 197, 340, 0, 429, 304,
	0, 412, 432, 0, 324, 203, 363, 419, 420, 0,
	0, 0, 0, 0, 207, 208, 329, 189, 337, 534,
	500, 392, 350, 348, 0, 315, 372, 529, 0, 0,
	237, 0, 232, 328, 468, 195, 447, 366, 333, 287,
	395, 424, 234, 219, 220, 263, 365, 253, 205, 458,
	497, 501, 499, 495, 492, 496, 493, 494, 498, 254,
	491, 0, 466, 475, 509, 489, 517, 474, 514, 484,
	229, 513, 478, 477, 523, 504, 505, 459, 519, 490,
	488, 481, 480, 476, 0, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 165, 0, 166, 167, 168,
	170, 171, 172, 0, 173, 174, 175, 178, 179, 180,
	182, 542, 183, 184, 185, 186, 187, 188, 479, 0,
	190, 191, 192, 193, 194, 196, 198, 199, 200, 201,
	202, 204, 206, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 212, 213, 214, 215, 0, 216, 217, 221,
	223, 224, 225, 226, 227, 228, 231, 0, 233, 235,
	0, 236, 239, 0, 240, 241, 242, 243, 244, 245,
	246, 247, 483, 248, 0, 249, 250, 252, 0, 255,
	256, 257, 258, 259, 0, 260, 485, 486, 261, 262,
	264, 265, 266, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 280, 281, 282, 284,
	0, 285, 286, 289, 290, 291, 292, 0, 294, 502,
	0, 295, 296, 297, 0, 0, 298, 299, 300, 301,
	302, 303, 306, 503, 308, 309, 310, 311, 312, 313,
	314, 544, 316, 317, 318, 319, 320, 321, 322, 506,
	507, 323, 325, 326, 508, 510, 511, 0, 341, 342,
	343, 344, 345, 346, 347, 349, 0, 351, 352, 353,
	512, 354, 355, 356, 357, 0, 358, 359, 360, 361,
	362, 364, 367, 368, 369, 370, 0, 373, 374, 375,
	376, 377, 378, 379, 381, 382, 383, 385, 386, 387,
	545, 388, 389, 390, 391, 515, 393, 394, 546, 396,
	397, 399, 400, 401, 402, 403, 404, 561, 0, 406,
	516, 407, 408, 409, 410, 411, 0, 413, 414, 415,
	416, 417, 418, 421, 422, 423, 425, 426, 518, 427,
	428, 0, 430, 431, 0, 433, 434, 435, 436, 437,
	0, 562, 438, 520, 439, 521, 440, 441, 442, 443,
	444, 445, 446, 448, 0, 0, 450, 451, 452, 454,
	455, 456, 457, 460, 461, 462, 463, 464, 0, 465,
	467, 469, 547, 524, 525, 526, 527, 528, 530, 531,
	532, 533, 470, 471, 487, 338, 332, 288, 330, 331,
	335, 336, 339, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 164, 0, 181, 0, 0, 230, 267, 482, 0,
	0, 327, 0, 380, 384, 0, 473, 0, 0, 0,
	0, 238, 0, 0, 0, 0, 0, 0, 0, 449,
	0, 0, 0, 0, 169, 144, 472, 543, 0, 0,
	0, 334, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 371, 305, 0, 522, 398, 176, 222,
	209, 251, 293, 405, 0, 0, 283, 453, 218, 307,
	0, 197, 340, 0, 429, 304, 0, 412, 432, 0,
	324, 203, 363, 419, 420, 0, 0, 0, 0, 0,
	207, 208, 329, 189, 337, 534, 500, 392, 350, 348,
	0, 315, 372, 529, 0, 0, 237, 0, 232, 328,
	468, 195, 447, 366, 333, 287, 395, 424, 234, 219,
	220, 263, 365, 253, 205, 458, 497, 501, 499, 495,
	492, 496, 493, 494, 498, 254, 491, 0, 466, 475,
	509, 489, 517, 474, 514, 484, 229, 513, 478, 477,
	523, 504, 505, 459, 519, 490, 488, 481, 480, 476,
	0, 154, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 165, 0, 166, 167, 168, 170, 171, 172, 0,
	173, 174, 175, 178, 179, 180, 182, 145, 183, 184,
	185, 186, 187, 188, 479, 0, 190, 191, 192, 193,
	194, 196, 198, 199, 200, 201, 202, 204, 206, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 212, 213,
	214, 215, 0, 216, 217, 221, 223, 224, 225, 226,
	227, 228, 231, 0, 233, 235, 0, 236, 239, 0,
	240, 241, 242, 243, 244, 245, 246, 247, 483, 248,
	0, 249, 250, 252, 0, 255, 256, 257, 258, 259,
	0, 260, 485, 486, 261, 262, 264, 265, 266, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 280, 281, 282, 284, 0, 285, 286, 289,
	290, 291, 292, 0, 294, 502, 0, 295, 296, 297,
	0, 0, 298, 299, 300, 301, 302, 303, 306, 503,
	308, 309, 310, 311, 312, 313, 314, 147, 316, 317,
	318, 319, 320, 321, 322, 506, 507, 323, 325, 326,
	508, 510, 511, 0, 341, 342, 343, 344, 345, 346,
	347, 349, 0, 351, 352, 353, 512, 354, 355, 356,
	357, 0, 358, 359, 360, 361, 362, 364, 367, 368,
	369, 370, 0, 373, 374, 375, 376, 377, 378, 379,
	381, 382, 383, 385, 386, 387, 148, 388, 389, 390,
	391, 515, 393, 394, 146, 396, 397, 399, 400, 401,
	402, 403, 404, 761, 0, 406, 516, 407, 408, 409,
	410, 411, 0, 413, 414, 415, 416, 417, 418, 421,
	422, 423, 425, 426, 518, 427, 428, 0, 430, 431,
	0, 433, 434, 435, 436, 437, 0, 140, 438, 520,
	439, 521, 440, 441, 442, 443, 444, 445, 446, 448,
	0, 0, 450, 451, 452, 454, 455, 456, 457, 460,
	461, 462, 463, 464, 0, 465, 467, 469, 149, 524,
	525, 526, 527, 528, 530, 531, 532, 533, 470, 471,
	487, 338, 332, 288, 330, 331, 335, 336, 339, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 164, 0, 181,
	0, 0, 230, 712, 482, 0, 0, 327, 0, 380,
	384, 0, 473, 0, 0, 0, 0, 238, 0, 0,
	0, 0, 0, 0, 0, 449, 0, 0, 0, 0,
	169, 563, 472, 543, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 0, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 371,
	305, 0, 522, 398, 176, 222, 209, 251, 293, 405,
	0, 0, 283, 453, 218, 307, 0, 197, 340, 0,
	429, 304, 0, 412, 432, 0, 324, 203, 363, 419,
	420, 0, 0, 0, 0, 0, 207, 208, 329, 189,
	337, 534, 500, 392, 350, 348, 0, 315, 372, 529,
	0, 0, 237, 0, 232, 328, 468, 195, 447, 366,
	333, 287, 395, 424, 234, 219, 220, 263, 365, 253,
	205, 458, 497, 501, 499, 495, 492, 496, 493, 494,
	498, 254, 491, 0, 466, 475, 509, 489, 517, 474,
	514, 484, 229, 513, 478, 477, 523, 504, 505, 459,
	519, 490, 488, 481, 480, 476, 0, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 165, 0, 166,
	167, 168, 170, 171, 172, 0, 173, 174, 175, 178,
	179, 180, 182, 542, 183, 184, 185, 186, 187, 188,
	479, 0, 190, 191, 192, 193, 194, 196, 198, 199,
	200, 201, 202, 204, 206, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 212, 213, 214, 215, 0, 216,
	217, 221, 223, 224, 225, 226, 227, 228, 231, 0,
	233, 235, 0, 236, 239, 0, 240, 241, 242, 243,
	244, 245, 246, 247, 483, 248, 0, 249, 250, 252,
	0, 255, 256, 257, 258, 259, 0, 260, 485, 486,
	261, 262, 264, 265, 266, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 280, 281,
	282, 284, 0, 285, 286, 289, 290, 291, 292, 0,
	294, 502, 0, 295, 296, 297, 0, 0, 298, 299,
	300, 301, 302, 303, 306, 503, 308, 309, 310, 311,
	312, 313, 314, 544, 316, 317, 318, 319, 320, 321,
	322, 506, 507, 323, 325, 326, 508, 510, 511, 0,
	341, 342, 343, 344, 345, 346, 347, 349, 0, 351,
	352, 353, 512, 354, 355, 356, 357, 0, 358, 359,
	360, 361, 362, 364, 367, 368, 369, 370, 0, 373,
	374, 375, 376, 377, 378, 379, 381, 382, 383, 385,
	386, 387, 545, 388, 389, 390, 391, 515, 393, 394,
	546, 396, 397, 399, 400, 401, 402, 403, 404, 561,
	0, 406, 516, 407, 408, 409, 410, 411, 0, 413,
	414, 415, 416, 417, 418, 421, 422, 423, 425, 426,
	518, 427, 428, 0, 430, 431, 0, 433, 434, 435,
	436, 437, 0, 562, 438, 520, 439, 521, 440, 441,
	442, 443, 444, 445, 446, 448, 0, 0, 450, 451,
	452, 454, 455, 456, 457, 460, 461, 462, 463, 464,
	0, 465, 467, 469, 547, 524, 525, 526, 527, 528,
	530, 531, 532, 533, 470, 471, 487, 338, 332, 288,
	330, 331, 335, 336, 339, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 164, 0, 181, 0, 0, 230, 708,
	482, 0, 0, 327, 0, 380, 384, 0, 473, 0,
	0, 0, 0, 238, 0, 0, 0, 0, 0, 0,
	0, 449, 0, 0, 0, 0, 169, 563, 472, 543,
	0, 0, 0, 334, 0, 0, 0, 0, 0, 0,
	0, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 371, 305, 0, 522, 398,
	176, 222, 209, 251, 293, 405, 0, 0, 283, 453,
	218, 307, 0, 197, 340, 0, 429, 304, 0, 412,
	432, 0, 324, 203, 363, 419, 420, 0, 0, 0,
	0, 0, 207, 208, 329, 189, 337, 534, 500, 392,
	350, 348, 0, 315, 372, 529, 0, 0, 237, 0,
	232, 328, 468, 195, 447, 366, 333, 287, 395, 424,
	234, 219, 220, 263, 365, 253, 205, 458, 497, 501,
	499, 495, 492, 496, 493, 494, 498, 254, 491, 0,
	466, 475, 509, 489, 517, 474, 514, 484, 229, 513,
	478, 477, 523, 504, 505, 459, 519, 490, 488, 481,
	480, 476, 0, 154, 155, 156, 157, 158, 159, 160,
	161, 162, 163, 165, 0, 166, 167, 168, 170, 171,
	172, 0, 173, 174, 175, 178, 179, 180, 182, 542,
	183, 184, 185, 186, 187, 188, 479, 0, 190, 191,
	192, 193, 194, 196, 198, 199, 200, 201, 202, 204,
	206, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	212, 213, 214, 215, 0, 216, 217, 221, 223, 224,
	225, 226, 227, 228, 231, 0, 233, 235, 0, 236,
	239, 0, 240, 241, 242, 243, 244, 245, 246, 247,
	483, 248, 0, 249, 250, 252, 0, 255, 256, 257,
	258, 259, 0, 260, 485, 486, 261, 262, 264, 265,
	266, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 280, 281, 282, 284, 0, 285,
	286, 289, 290, 291, 292, 0, 294, 502, 0, 295,
	296, 297, 0, 0, 298, 299, 300, 301, 302, 303,
	306, 503, 308, 309, 310, 311, 312, 313, 314, 544,
	316, 317, 318, 319, 320, 321, 322, 506, 507, 323,
	325, 326, 508, 510, 511, 0, 341, 342, 343, 344,
	345, 346, 347, 349, 0, 351, 352, 353, 512, 354,
	355, 356, 357, 0, 358, 359, 360, 361, 362, 364,
	367, 368, 369, 370, 0, 373, 374, 375, 376, 377,
	378, 379, 381, 382, 383, 385, 386, 387, 545, 388,
	389, 390, 391, 515, 393, 394, 546, 396, 397, 399,
	400, 401, 402, 403, 404, 561, 0, 406, 516, 407,
	408, 409, 410, 411, 0, 413, 414, 415, 416, 417,
	418, 421, 422, 423, 425, 426, 518, 427, 428, 0,
	430, 431, 0, 433, 434, 435, 436, 437, 0, 562,
	438, 520, 439, 521, 440, 441, 442, 443, 444, 445,
	446, 448, 0, 0, 450, 451, 452, 454, 455, 456,
	457, 460, 461, 462, 463, 464, 0, 465, 467, 469,
	547, 524, 525, 526, 527, 528, 530, 531, 532, 533,
	470, 471, 487, 338, 332, 288, 330, 331, 335, 336,
	339, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 164,
	0, 181, 0, 0, 230, 705, 482, 0, 0, 327,
	0, 380, 384, 0, 473, 0, 0, 0, 0, 238,
	0, 0, 0, 0, 0, 0, 0, 449, 0, 0,
	0, 0, 169, 563, 472, 543, 0, 0, 0, 334,
	0, 0, 0, 0, 0, 0, 0, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 371, 305, 0, 522, 398, 176, 222, 209, 251,
	293, 405, 0, 0, 283, 453, 218, 307, 0, 197,
	340, 0, 429, 304, 0, 412, 432, 0, 324, 203,
	363, 419, 420, 0, 0, 0, 0, 0, 207, 208,
	329, 189, 337, 534, 500, 392, 350, 348, 0, 315,
	372, 529, 0, 0, 237, 0, 232, 328, 468, 195,
	447, 366, 333, 287, 395, 424, 234, 219, 220, 263,
	365, 253, 205, 458, 497, 501, 499, 495, 492, 496,
	493, 494, 498, 254, 491, 0, 466, 475, 509, 489,
	517, 474, 514, 484, 229, 513, 478, 477, 523, 504,
	505, 459, 519, 490, 488, 481, 480, 476, 0, 154,
	155, 156, 157, 158, 159, 160, 161, 162, 163, 165,
	0, 166, 167, 168, 170, 171, 172, 0, 173, 174,
	175, 178, 179, 180, 182, 542, 183, 184, 185, 186,
	187, 188, 479, 0, 190, 191, 192, 193, 194, 196,
	198, 199, 200, 201, 202, 204, 206, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 212, 213, 214, 215,
	0, 216, 217, 221, 223, 224, 225, 226, 227, 228,
	231, 0, 233, 235, 0, 236, 239, 0, 240, 241,
	242, 243, 244, 245, 246, 247, 483, 248, 0, 249,
	250, 252, 0, 255, 256, 257, 258, 259, 0, 260,
	485, 486, 261, 262, 264, 265, 266, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	280, 281, 282, 284, 0, 285, 286, 289, 290, 291,
	292, 0, 294, 502, 0, 295, 296, 297, 0, 0,
	298, 299, 300, 301, 302, 303, 306, 503, 308, 309,
	310, 311, 312, 313, 314, 544, 316, 317, 318, 319,
	320, 321, 322, 506, 507, 323, 325, 326, 508, 510,
	511, 0, 341, 342, 343, 344, 345, 346, 347, 349,
	0, 351, 352, 353, 512, 354, 355, 356, 357, 0,
	358, 359, 360, 361, 362, 364, 367, 368, 369, 370,
	0, 373, 374, 375, 376, 377, 378, 379, 381, 382,
	383, 385, 386, 387, 545, 388, 389, 390, 391, 515,
	393, 394, 546, 396, 397, 399, 400, 401, 402, 403,
	404, 561, 0, 406, 516, 407, 408, 409, 410, 411,
	0, 413, 414, 415, 416, 417, 418, 421, 422, 423,
	425, 426, 518, 427, 428, 0, 430, 431, 0, 433,
	434, 435, 436, 437, 0, 562, 438, 520, 439, 521,
	440, 441, 442, 443, 444, 445, 446, 448, 0, 0,
	450, 451, 452, 454, 455, 456, 457, 460, 461, 462,
	463, 464, 0, 465, 467, 469, 547, 524, 525, 526,
	527, 528, 530, 531, 532, 533, 470, 471, 487, 338,
	332, 288, 330, 331, 335, 336, 339, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 164, 0, 181, 0, 0,
	230, 688, 482, 0, 0, 327, 0, 380, 384, 0,
	473, 0, 0, 0, 0, 238, 0, 0, 0, 0,
	0, 0, 0, 449, 0, 0, 0, 0, 169, 563,
	472, 543, 0, 0, 0, 334, 0, 0, 0, 0,
	0, 0, 0, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 371, 305, 0,
	522, 398, 176, 222, 209, 251, 293, 405, 0, 0,
	283, 453, 218, 307, 0, 197, 340, 0, 429, 304,
	0, 412, 432, 0, 324, 203, 363, 419, 420, 0,
	0, 0, 0, 0, 207, 208, 329, 189, 337, 534,
	500, 392, 350, 348, 0, 315, 372, 529, 0, 0,
	237, 0, 232, 328, 468, 195, 447, 366, 333, 287,
	395, 424, 234, 219, 220, 263, 365, 253, 205, 458,
	497, 501, 499, 495, 492, 496, 493, 494, 498, 254,
	491, 0, 466, 475, 509, 489, 517, 474, 514, 484,
	229, 513, 478, 477, 523, 504, 505, 459, 519, 490,
	488, 481, 480, 476, 0, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 165, 0, 166, 167, 168,
	170, 171, 172, 0, 173, 174, 175, 178, 179, 180,
	182, 542, 183, 184, 185, 186, 187, 188, 479, 0,
	190, 191, 192, 193, 194, 196, 198, 199, 200, 201,
	202, 204, 206, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 212, 213, 214, 215, 0, 216, 217, 221,
	223, 224, 225, 226, 227, 228, 231, 0, 233, 235,
	0, 236, 239, 0, 240, 241, 242, 243, 244, 245,
	246, 247, 483, 248, 0, 249, 250, 252, 0, 255,
	256, 257, 258, 259, 0, 260, 485, 486, 261, 262,
	264, 265, 266, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 280, 281, 282, 284,
	0, 285, 286, 289, 290, 291, 292, 0, 294, 502,
	0, 295, 296, 297, 0, 0, 298, 299, 300, 301,
	302, 303, 306, 503, 308, 309, 310, 311, 312, 313,
	314, 544, 316, 317, 318, 319, 320, 321, 322, 506,
	507, 323, 325, 326, 508, 510, 511, 0, 341, 342,
	343, 344, 345, 346, 347, 349, 0, 351, 352, 353,
	512, 354, 355, 356, 357, 0, 358, 359, 360, 361,
	362, 364, 367, 368, 369, 370, 0, 373, 374, 375,
	376, 377, 378, 379, 381, 382, 383, 385, 386, 387,
	545, 388, 389, 390, 391, 515, 393, 394, 546, 396,
	397, 399, 400, 401, 402, 403, 404, 561, 0, 406,
	516, 407, 408, 409, 410, 411, 0, 413, 414, 415,
	416, 417, 418, 421, 422, 423, 425, 426, 518, 427,
	428, 0, 430, 431, 0, 433, 434, 435, 436, 437,
	0, 562, 438, 520, 439, 521, 440, 441, 442, 443,
	444, 445, 446, 448, 0, 0, 450, 451, 452, 454,
	455, 456, 457, 460, 461, 462, 463, 464, 0, 465,
	467, 469, 547, 524, 525, 526, 527, 528, 530, 531,
	532, 533, 470, 471, 487, 338, 332, 288, 330, 331,
	335, 336, 339, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 164, 0, 181, 0, 0, 230, 634, 482, 0,
	0, 327, 0, 380, 384, 0, 473, 0, 0, 0,
	0, 238, 0, 0, 0, 0, 0, 0, 0, 449,
	0, 0, 0, 0, 169, 563, 472, 543, 0, 0,
	0, 334, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 371, 305, 0, 522, 398, 176, 222,
	209, 251, 293, 405, 0, 0, 283, 453, 218, 307,
	0, 197, 340, 0, 429, 304, 0, 412, 432, 0,
	324, 203, 363, 419, 420, 0, 0, 0, 0, 0,
	207, 208, 329, 189, 337, 534, 500, 392, 350, 348,
	0, 315, 372, 529, 0, 0, 237, 0, 232, 328,
	468, 195, 447, 366, 333, 287, 395, 424, 234, 219,
	220, 263, 365, 253, 205, 458, 497, 501, 499, 495,
	492, 496, 493, 494, 498, 254, 491, 0, 466, 475,
	509, 489, 517, 474, 514, 484, 229, 513, 478, 477,
	523, 504, 505, 459, 519, 490, 488, 481, 480, 476,
	0, 154, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 165, 0, 166, 167, 168, 170, 171, 172, 0,
	173, 174, 175, 178, 179, 180, 182, 542, 183, 184,
	185, 186, 187, 188, 479, 0, 190, 191, 192, 193,
	194, 196, 198, 199, 200, 201, 202, 204, 206, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 212, 213,
	214, 215, 0, 216, 217, 221, 223, 224, 225, 226,
	227, 228, 231, 0, 233, 235, 0, 236, 239, 0,
	240, 241, 242, 243, 244, 245, 246, 247, 483, 248,
	0, 249, 250, 252, 0, 255, 256, 257, 258, 259,
	0, 260, 485, 486, 261, 262, 264, 265, 266, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 280, 281, 282, 284, 0, 285, 286, 289,
	290, 291, 292, 0, 294, 502, 0, 295, 296, 297,
	0, 0, 298, 299, 300, 301, 302, 303, 306, 503,
	308, 309, 310, 311, 312, 313, 314, 544, 316, 317,
	318, 319, 320, 321, 322, 506, 507, 323, 325, 326,
	508, 510, 511, 0, 341, 342, 343, 344, 345, 346,
	347, 349, 0, 351, 352, 353, 512, 354, 355, 356,
	357, 0, 358, 359, 360, 361, 362, 364, 367, 368,
	369, 370, 0, 373, 374, 375, 376, 377, 378, 379,
	381, 382, 383, 385, 386, 387, 545, 388, 389, 390,
	391, 515, 393, 394, 546, 396, 397, 399, 400, 401,
	402, 403, 404, 561, 0, 406, 516, 407, 408, 409,
	410, 411, 0, 413, 414, 415, 416, 417, 418, 421,
	422, 423, 425, 426, 518, 427, 428, 0, 430, 431,
	0, 433, 434, 435, 436, 437, 0, 562, 438, 520,
	439, 521, 440, 441, 442, 443, 444, 445, 446, 448,
	0, 0, 450, 451, 452, 454, 455, 456, 457, 460,
	461, 462, 463, 464, 0, 465, 467, 469, 547, 524,
	525, 526, 527, 528, 530, 531, 532, 533, 470, 471,
	487, 338, 332, 288, 330, 331, 335, 336, 339, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 164, 0, 181,
	0, 0, 230, 632, 482, 0, 0, 327, 0, 380,
	384, 0, 473, 0, 0, 0, 0, 238, 0, 0,
	0, 0, 0, 0, 0, 449, 0, 0, 0, 0,
	169, 563, 472, 543, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 0, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 371,
	305, 0, 522, 398, 176, 222, 209, 251, 293, 405,
	0, 0, 283, 453, 218, 307, 0, 197, 340, 0,
	429, 304, 0, 412, 432, 0, 324, 203, 363, 419,
	420, 0, 0, 0, 0, 0, 207, 208, 329, 189,
	337, 534, 500, 392, 350, 348, 0, 315, 372, 529,
	0, 0, 237, 0, 232, 328, 468, 195, 447, 366,
	333, 287, 395, 424, 234, 219, 220, 263, 365, 253,
	205, 458, 497, 501, 499, 495, 492, 496, 493, 494,
	498, 254, 491, 0, 466, 475, 509, 489, 517, 474,
	514, 484, 229, 513, 478, 477, 523, 504, 505, 459,
	519, 490, 488, 481, 480, 476, 0, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 165, 0, 166,
	167, 168, 170, 171, 172, 0, 173, 174, 175, 178,
	179, 180, 182, 542, 183, 184, 185, 186, 187, 188,
	479, 0, 190, 191, 192, 193, 194, 196, 198, 199,
	200, 201, 202, 204, 206, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 212, 213, 214, 215, 0, 216,
	217, 221, 223, 224, 225, 226, 227, 228, 231, 0,
	233, 235, 0, 236, 239, 0, 240, 241, 242, 243,
	244, 245, 246, 247, 483, 248, 0, 249, 250, 252,
	0, 255, 256, 257, 258, 259, 0, 260, 485, 486,
	261, 262, 264, 265, 266, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 280, 281,
	282, 284, 0, 285, 286, 289, 290, 291, 292, 0,
	294, 502, 0, 295, 296, 297, 0, 0, 298, 299,
	300, 301, 302, 303, 306, 503, 308, 309, 310, 311,
	312, 313, 314, 544, 316, 317, 318, 319, 320, 321,
	322, 506, 507, 323, 325, 326, 508, 510, 511, 0,
	341, 342, 343, 344, 345, 346, 347, 349, 0, 351,
	352, 353, 512, 354, 355, 356, 357, 0, 358, 359,
	360, 361, 362, 364, 367, 368, 369, 370, 0, 373,
	374, 375, 376, 377, 378, 379, 381, 382, 383, 385,
	386, 387, 545, 388, 389, 390, 391, 515, 393, 394,
	546, 396, 397, 399, 400, 401, 402, 403, 404, 561,
	0, 406, 516, 407, 408, 409, 410, 411, 0, 413,
	414, 415, 416, 417, 418, 421, 422, 423, 425, 426,
	518, 427, 428, 0, 430, 431, 0, 433, 434, 435,
	436, 437, 0, 562, 438, 520, 439, 521, 440, 441,
	442, 443, 444, 445, 446, 448, 0, 0, 450, 451,
	452, 454, 455, 456, 457, 460, 461, 462, 463, 464,
	0, 465, 467, 469, 547, 524, 525, 526, 527, 528,
	530, 531, 532, 533, 470, 471, 487, 338, 332, 288,
	330, 331, 335, 336, 339, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 164, 0, 181, 0, 0, 230, 619,
	482, 0, 0, 327, 0, 380, 384, 0, 473, 0,
	0, 0, 0, 238, 0, 0, 0, 0, 0, 0,
	0, 449, 0, 0, 0, 0, 169, 563, 472, 543,
	0, 0, 0, 334, 0, 0, 0, 0, 0, 0,
	0, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 371, 305, 0, 522, 398,
	176, 222, 209, 251, 293, 405, 0, 0, 283, 453,
	218, 307, 0, 197, 340, 0, 429, 304, 0, 412,
	432, 0, 324, 203, 363, 419, 420, 0, 0, 0,
	0, 0, 207, 208, 329, 189, 337, 534, 500, 392,
	350, 348, 0, 315, 372, 529, 0, 0, 237, 0,
	232, 328, 468, 195, 447, 366, 333, 287, 395, 424,
	234, 219, 220, 263, 365, 253, 205, 458, 497, 501,
	499, 495, 492, 496, 493, 494, 498, 254, 491, 0,
	466, 475, 509, 489, 517, 474, 514, 484, 229, 513,
	478, 477, 523, 504, 505, 459, 519, 490, 488, 481,
	480, 476, 0, 154, 155, 156, 157, 158, 159, 160,
	161, 162, 163, 165, 0, 166, 167, 168, 170, 171,
	172, 0, 173, 174, 175, 178, 179, 180, 182, 542,
	183, 184, 185, 186, 187, 188, 479, 0, 190, 191,
	192, 193, 194, 196, 198, 199, 200, 201, 202, 204,
	206, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	212, 213, 214, 215, 0, 216, 217, 221, 223, 224,
	225, 226, 227, 228, 231, 0, 233, 235, 0, 236,
	239, 0, 240, 241, 242, 243, 244, 245, 246, 247,
	483, 248, 0, 249, 250, 252, 0, 255, 256, 257,
	258, 259, 0, 260, 485, 486, 261, 262, 264, 265,
	266, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 280, 281, 282, 284, 0, 285,
	286, 289, 290, 291, 292, 0, 294, 502, 0, 295,
	296, 297, 0, 0, 298, 299, 300, 301, 302, 303,
	306, 503, 308, 309, 310, 311, 312, 313, 314, 544,
	316, 317, 318, 319, 320, 321, 322, 506, 507, 323,
	325, 326, 508, 510, 511, 0, 341, 342, 343, 344,
	345, 346, 347, 349, 0, 351, 352, 353, 512, 354,
	355, 356, 357, 0, 358, 359, 360, 361, 362, 364,
	367, 368, 369, 370, 0, 373, 374, 375, 376, 377,
	378, 379, 381, 382, 383, 385, 386, 387, 545, 388,
	389, 390, 391, 515, 393, 394, 546, 396, 397, 399,
	400, 401, 402, 403, 404, 561, 0, 406, 516, 407,
	408, 409, 410, 411, 0, 413, 414, 415, 416, 417,
	418, 421, 422, 423, 425, 426, 518, 427, 428, 0,
	430, 431, 0, 433, 434, 435, 436, 437, 0, 562,
	438, 520, 439, 521, 440, 441, 442, 443, 444, 445,
	446, 448, 0, 0, 450, 451, 452, 454, 455, 456,
	457, 460, 461, 462, 463, 464, 0, 465, 467, 469,
	547, 524, 525, 526, 527, 528, 530, 531, 532, 533,
	470, 471, 487, 338, 332, 288, 330, 331, 335, 336,
	339, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 164,
	0, 181, 0, 0, 230, 617, 482, 0, 0, 327,
	0, 380, 384, 0, 473, 0, 0, 0, 0, 238,
	0, 0, 0, 0, 0, 0, 0, 449, 0, 0,
	0, 0, 169, 563, 472, 543, 0, 0, 0, 334,
	0, 0, 0, 0, 0, 0, 0, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 371, 305, 0, 522, 398, 176, 222, 209, 251,
	293, 405, 0, 0, 283, 453, 218, 307, 0, 197,
	340, 0, 429, 304, 0, 412, 432, 0, 324, 203,
	363, 419, 420, 0, 0, 0, 0, 0, 207, 208,
	329, 189, 337, 534, 500, 392, 350, 348, 0, 315,
	372, 529, 0, 0, 237, 0, 232, 328, 468, 195,
	447, 366, 333, 287, 395, 424, 234, 219, 220, 263,
	365, 253, 205, 458, 497, 501, 499, 495, 492, 496,
	493, 494, 498, 254, 491, 0, 466, 475, 509, 489,
	517, 474, 514, 484, 229, 513, 478, 477, 523, 504,
	505, 459, 519, 490, 488, 481, 480, 476, 0, 154,
	155, 156, 157, 158, 159, 160, 161, 162, 163, 165,
	0, 166, 167, 168, 170, 171, 172, 0, 173, 174,
	175, 178, 179, 180, 182, 542, 183, 184, 185, 186,
	187, 188, 479, 0, 190, 191, 192, 193, 194, 196,
	198, 199, 200, 201, 202, 204, 206, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 212, 213, 214, 215,
	0, 216, 217, 221, 223, 224, 225, 226, 227, 228,
	231, 0, 233, 235, 0, 236, 239, 0, 240, 241,
	242, 243, 244, 245, 246, 247, 483, 248, 0, 249,
	250, 252, 0, 255, 256, 257, 258, 259, 0, 260,
	485, 486, 261, 262, 264, 265, 266, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	280, 281, 282, 284, 0, 285, 286, 289, 290, 291,
	292, 0, 294, 502, 0, 295, 296, 297, 0, 0,
	298, 299, 300, 301, 302, 303, 306, 503, 308, 309,
	310, 311, 312, 313, 314, 544, 316, 317, 318, 319,
	320, 321, 322, 506, 507, 323, 325, 326, 508, 510,
	511, 0, 341, 342, 343, 344, 345, 346, 347, 349,
	0, 351, 352, 353, 512, 354, 355, 356, 357, 0,
	358, 359, 360, 361, 362, 364, 367, 368, 369, 370,
	0, 373, 374, 375, 376, 377, 378, 379, 381, 382,
	383, 385, 386, 387, 545, 388, 389, 390, 391, 515,
	393, 394, 546, 396, 397, 399, 400, 401, 402, 403,
	404, 561, 0, 406, 516, 407, 408, 409, 410, 411,
	0, 413, 414, 415, 416, 417, 418, 421, 422, 423,
	425, 426, 518, 427, 428, 0, 430, 431, 0, 433,
	434, 435, 436, 437, 0, 562, 438, 520, 439, 521,
	440, 441, 442, 443, 444, 445, 446, 448, 0, 0,
	450, 451, 452, 454, 455, 456, 457, 460, 461, 462,
	463, 464, 0, 465, 467, 469, 547, 524, 525, 526,
	527, 528, 530, 531, 532, 533, 470, 471, 487, 338,
	332, 288, 330, 331, 335, 336, 339, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 164, 0, 181, 0, 0,
	230, 594, 482, 0, 0, 327, 0, 380, 384, 0,
	473, 0, 0, 0, 0, 238, 0, 0, 0, 0,
	0, 0, 0, 449, 0, 0, 0, 0, 169, 563,
	472, 543, 0, 0, 0, 334, 0, 0, 0, 0,
	0, 0, 0, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 371, 305, 0,
	522, 398, 176, 222, 209, 251, 293, 405, 0, 0,
	283, 453, 218, 307, 0, 197, 340, 0, 429, 304,
	0, 412, 432, 0, 324, 203, 363, 419, 420, 0,
	0, 0, 0, 0, 207, 208, 329, 189, 337, 534,
	500, 392, 350, 348, 0, 315, 372, 529, 0, 0,
	237, 0, 232, 328, 468, 195, 447, 366, 333, 287,
	395, 424, 234, 219, 220, 263, 365, 253, 205, 458,
	497, 501, 499, 495, 492, 496, 493, 494, 498, 254,
	491, 0, 466, 475, 509, 489, 517, 474, 514, 484,
	229, 513, 478, 477, 523, 504, 505, 459, 519, 490,
	488, 481, 480, 476, 0, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 165, 0, 166, 167, 168,
	170, 171, 172, 0, 173, 174, 175, 178, 179, 180,
	182, 542, 183, 184, 185, 186, 187, 188, 479, 0,
	190, 191, 192, 193, 194, 196, 198, 199, 200, 201,
	202, 204, 206, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 212, 213, 214, 215, 0, 216, 217, 221,
	223, 224, 225, 226, 227, 228, 231, 0, 233, 235,
	0, 236, 239, 0, 240, 241, 242, 243, 244, 245,
	246, 247, 483, 248, 0, 249, 250, 252, 0, 255,
	256, 257, 258, 259, 0, 260, 485, 486, 261, 262,
	264, 265, 266, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 280, 281, 282, 284,
	0, 285, 286, 289, 290, 291, 292, 0, 294, 502,
	0, 295, 296, 297, 0, 0, 298, 299, 300, 301,
	302, 303, 306, 503, 308, 309, 310, 311, 312, 313,
	314, 544, 316, 317, 318, 319, 320, 321, 322, 506,
	507, 323, 325, 326, 508, 510, 511, 0, 341, 342,
	343, 344, 345, 346, 347, 349, 0, 351, 352, 353,
	512, 354, 355, 356, 357, 0, 358, 359, 360, 361,
	362, 364, 367, 368, 369, 370, 0, 373, 374, 375,
	376, 377, 378, 379, 381, 382, 383, 385, 386, 387,
	545, 388, 389, 390, 391, 515, 393, 394, 546, 396,
	397, 399, 400, 401, 402, 403, 404, 561, 0, 406,
	516, 407, 408, 409, 410, 411, 0, 413, 414, 415,
	416, 417, 418, 421, 422, 423, 425, 426, 518, 427,
	428, 0, 430, 431, 0, 433, 434, 435, 436, 437,
	0, 562, 438, 520, 439, 521, 440, 441, 442, 443,
	444, 445, 446, 448, 0, 0, 450, 451, 452, 454,
	455, 456, 457, 460, 461, 462, 463, 464, 0, 465,
	467, 469, 547, 524, 525, 526, 527, 528, 530, 531,
	532, 533, 470, 471, 487, 338, 332, 288, 330, 331,
	335, 336, 339, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 164, 0, 181, 0, 0, 230, 267, 482, 0,
	0, 327, 0, 380, 384, 0, 473, 0, 0, 0,
	0, 238, 0, 0, 0, 0, 0, 0, 0, 449,
	0, 0, 0, 0, 169, 563, 472, 543, 0, 0,
	0, 334, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 566, 305, 0, 522, 398, 176, 222,
	209, 251, 293, 405, 0, 0, 283, 453, 218, 307,
	0, 197, 340, 0, 429, 304, 0, 412, 432, 0,
	324, 203, 363, 419, 420, 0, 0, 0, 0, 0,
	207, 208, 329, 189, 337, 534, 500, 392, 350, 348,
	0, 315, 372, 529, 0, 0, 237, 0, 232, 328,
	468, 195, 447, 366, 333, 287, 395, 424, 234, 219,
	220, 263, 365, 253, 205, 458, 497, 501, 499, 495,
	492, 496, 493, 494, 498, 254, 491, 0, 466, 475,
	509, 489, 517, 474, 514, 484, 229, 513, 478, 477,
	523, 504, 505, 459, 519, 490, 488, 481, 480, 476,
	0, 154, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 165, 0, 166, 167, 168, 170, 171, 172, 0,
	173, 174, 175, 178, 179, 180, 182, 542, 183, 184,
	185, 186, 187, 188, 479, 0, 190, 191, 192, 193,
	194, 196, 198, 199, 200, 201, 202, 204, 206, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 212, 213,
	214, 215, 0, 216, 217, 221, 223, 224, 225, 226,
	227, 228, 231, 0, 233, 235, 0, 236, 239, 0,
	240, 241, 242, 243, 244, 245, 246, 247, 483, 248,
	0, 249, 250, 252, 0, 255, 256, 257, 258, 259,
	0, 260, 485, 486, 261, 262, 264, 265, 266, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 280, 281, 282, 284, 0, 285, 286, 289,
	290, 291, 292, 0, 294, 502, 0, 295, 296, 297,
	0, 0, 298, 299, 300, 301, 302, 303, 306, 503,
	308, 309, 310, 311, 312, 313, 314, 544, 316, 317,
	318, 319, 320, 321, 322, 506, 507, 323, 325, 326,
	508, 510, 511, 0, 341, 342, 343, 344, 345, 346,
	347, 349, 0, 351, 352, 353, 512, 354, 355, 356,
	357, 0, 358, 359, 360, 361, 362, 364, 367, 368,
	369, 370, 0, 373, 374, 375, 376, 377, 378, 379,
	381, 382, 383, 385, 386, 387, 545, 388, 389, 390,
	391, 515, 393, 394, 546, 396, 397, 399, 400, 401,
	402, 403, 404, 561, 0, 406, 516, 407, 408, 409,
	410, 411, 0, 413, 414, 415, 416, 417, 418, 421,
	422, 423, 425, 426, 518, 427, 428, 0, 430, 431,
	0, 433, 434, 435, 436, 437, 0, 562, 438, 520,
	439, 521, 440, 441, 442, 443, 444, 445, 446, 448,
	0, 0, 450, 451, 452, 454, 455, 456, 457, 460,
	461, 462, 463, 464, 0, 465, 467, 469, 547, 524,
	525, 526, 527, 528, 530, 531, 532, 533, 470, 471,
	487, 338, 332, 288, 330, 331, 335, 336, 339, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 164, 0, 181,
	0, 0, 230, 267, 482, 0, 0, 327, 0, 380,
	384, 0, 473, 0, 0, 0, 0, 238, 0, 0,
	0, 0, 0, 0, 0, 449, 0, 0, 0, 0,
	169, 144, 472, 138, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 0, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 371,
	305, 0, 522, 398, 176, 222, 209, 251, 293, 405,
	0, 0, 283, 453, 218, 307, 0, 197, 340, 0,
	429, 304, 0, 412, 432, 0, 324, 203, 363, 419,
	420, 0, 0, 0, 0, 0, 207, 208, 329, 189,
	337, 534, 500, 392, 350, 348, 0, 315, 372, 529,
	0, 0, 237, 0, 232, 328, 468, 195, 447, 366,
	333, 287, 395, 424, 234, 219, 220, 263, 365, 253,
	205, 458, 497, 501, 499, 495, 492, 496, 493, 494,
	498, 254, 491, 0, 466, 475, 509, 489, 517, 474,
	514, 484, 229, 513, 478, 477, 523, 504, 505, 459,
	519, 490, 488, 481, 480, 476, 0, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 165, 0, 166,
	167, 168, 170, 171, 172, 0, 173, 174, 175, 178,
	179, 180, 182, 145, 183, 184, 185, 186, 187, 188,
	479, 0, 190, 191, 192, 193, 194, 196, 198, 199,
	200, 201, 202, 204, 206, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 212, 213, 214, 215, 0, 216,
	217, 221, 223, 224, 225, 226, 227, 228, 231, 0,
	233, 235, 0, 236, 239, 0, 240, 241, 242, 243,
	244, 245, 246, 247, 483, 248, 0, 249, 250, 252,
	0, 255, 256, 257, 258, 259, 0, 260, 485, 486,
	261, 262, 264, 265, 266, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 280, 281,
	282, 284, 0, 285, 286, 289, 290, 291, 292, 0,
	294, 502, 0, 295, 296, 297, 0, 0, 298, 299,
	300, 301, 302, 303, 306, 503, 308, 309, 310, 311,
	312, 313, 314, 147, 316, 317, 318, 319, 320, 321,
	322, 506, 507, 323, 325, 326, 508, 510, 511, 0,
	341, 342, 343, 344, 345, 346, 347, 349, 0, 351,
	352, 353, 512, 354, 355, 356, 357, 0, 358, 359,
	360, 361, 362, 364, 367, 368, 369, 370, 0, 373,
	374, 375, 376, 377, 378, 379, 381, 382, 383, 385,
	386, 387, 148, 388, 389, 390, 391, 515, 393, 394,
	146, 396, 397, 399, 400, 401, 402, 403, 404, 139,
	0, 406, 516, 407, 408, 409, 410, 411, 0, 413,
	414, 415, 416, 417, 418, 421, 422, 423, 425, 426,
	518, 427, 428, 0, 430, 431, 0, 433, 434, 435,
	436, 437, 0, 140, 438, 520, 439, 521, 440, 441,
	442, 443, 444, 445, 446, 448, 0, 0, 450, 451,
	452, 454, 455, 456, 457, 460, 461, 462, 463, 464,
	0, 465, 467, 469, 149, 524, 525, 526, 527, 528,
	530, 531, 532, 533, 470, 471, 487, 338, 332, 288,
	330, 331, 335, 336, 339, 740, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 164, 0, 181, 648, 0, 230, 267,
	0, 0, 0, 327, 0, 380, 384, 0, 0, 0,
	0, 0, 0, 238, 0, 653, 2114, 659, 0, 665,
	0, 449, 0, 655, 656, 661, 169, 739, 472, 543,
	0, 0, 0, 334, 0, 0, 0, 0, 0, 0,
	0, 177, 0, 0, 0, 0, 657, 654, 658, 664,
	652, 662, 649, 660, 0, 371, 305, 0, 0, 398,
	176, 222, 209, 251, 293, 405, 0, 0, 283, 453,
	218, 307, 0, 197, 340, 0, 429, 304, 0, 412,
	432, 0, 324, 203, 363, 419, 420, 646, 651, 0,
	667, 0, 207, 208, 329, 189, 337, 0, 0, 392,
	350, 348, 0, 315, 372, 0, 0, 0, 237, 0,
	232, 328, 468, 195, 447, 366, 333, 287, 395, 424,
	234, 219, 220, 263, 365, 253, 205, 458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	466, 742, 732, 724, 725, 726, 727, 728, 729, 0,
	744, 745, 746, 747, 748, 459, 738, 0, 723, 730,
	731, 733, 2117, 154, 155, 156, 157, 158, 159, 160,
	161, 162, 163, 165, 0, 166, 167, 168, 170, 171,
	172, 645, 173, 174, 175, 178, 179, 180, 182, 542,
	183, 184, 185, 186, 187, 188, 0, 647, 190, 191,
	192, 193, 194, 196, 198, 199, 200, 201, 202, 204,
	206, 0, 0, 0, 650, 0, 0, 0, 210, 211,
	212, 213, 214, 215, 0, 216, 217, 221, 223, 224,
	225, 226, 227, 228, 231, 0, 233, 235, 0, 236,
	239, 0, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 248, 0, 249, 250, 252, 0, 255, 256, 257,
	258, 259, 0, 260, 0, 0, 261, 262, 264, 265,
	266, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 280, 281, 282, 284, 0, 285,
	286, 289, 290, 291, 292, 0, 294, 0, 0, 295,
	296, 297, 0, 0, 298, 299, 300, 301, 302, 303,
	306, 0, 308, 309, 310, 311, 312, 313, 314, 544,
	316, 317, 318, 319, 320, 321, 322, 0, 0, 323,
	325, 326, 0, 2115, 0, 663, 341, 342, 343, 344,
	345, 346, 347, 349, 0, 351, 352, 353, 0, 354,
	355, 356, 357, 0, 358, 359, 360, 361, 362, 364,
	367, 368, 369, 370, 0, 373, 374, 375, 376, 377,
	378, 379, 381, 382, 383, 385, 386, 387, 545, 388,
	389, 390, 391, 0, 393, 394, 546, 396, 397, 399,
	400, 401, 402, 403, 404, 561, 0, 406, 2120, 407,
	408, 409, 410, 411, 0, 413, 414, 415, 416, 417,
	418, 421, 422, 423, 425, 426, 0, 427, 428, 0,
	430, 431, 666, 433, 434, 435, 436, 437, 0, 562,
	438, 0, 439, 0, 440, 441, 442, 443, 444, 445,
	446, 448, 0, 0, 450, 451, 452, 454, 455, 456,
	457, 460, 461, 462, 463, 464, 0, 465, 467, 469,
	547, 0, 0, 740, 0, 0, 0, 0, 0, 0,
	470, 471, 2116, 338, 332, 288, 330, 331, 335, 336,
	339, 164, 0, 181, 648, 0, 230, 267, 0, 0,
	0, 327, 0, 380, 384, 0, 0, 0, 0, 0,
	0, 238, 0, 653, 0, 659, 2465, 665, 0, 449,
	0, 655, 656, 661, 169, 739, 472, 543, 0, 0,
	0, 334, 0, 0, 0, 0, 2464, 0, 0, 177,
	0, 0, 0, 0, 657, 654, 658, 664, 652, 662,
	649, 660, 0, 371, 305, 0, 0, 398, 176, 222,
	209, 251, 293, 405, 0, 0, 283, 453, 218, 307,
	0, 197, 340, 0, 429, 304, 0, 412, 432, 0,
	324, 203, 363, 419, 420, 646, 651, 0, 667, 0,
	207, 208, 329, 189, 337, 0, 0, 392, 350, 348,
	0, 315, 372, 0, 0, 0, 237, 0, 232, 328,
	468, 195, 447, 366, 333, 287, 395, 424, 234, 219,
	220, 263, 365, 253, 205, 458, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 466, 742,
	732, 724, 725, 726, 727, 728, 729, 0, 744, 745,
	746, 747, 748, 459, 738, 0, 723, 730, 731, 733,
	0, 154, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 165, 0, 166, 167, 168, 170, 171, 172, 645,
	173, 174, 175, 178, 179, 180, 182, 542, 183, 184,
	185, 186, 187, 188, 0, 647, 190, 191, 192, 193,
	194, 196, 198, 199, 200, 201, 202, 204, 206, 0,
	0, 0, 650, 0, 0, 0, 210, 211, 212, 213,
	214, 215, 0, 216, 217, 221, 223, 224, 225, 226,
	227, 228, 231, 0, 233, 235, 0, 236, 239, 0,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 248,
	0, 249, 250, 252, 0, 255, 256, 257, 258, 259,
	0, 260, 0, 0, 261, 262, 264, 265, 266, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 280, 281, 282, 284, 0, 285, 286, 289,
	290, 291, 292, 0, 294, 0, 0, 295, 296, 297,
	0, 0, 298, 299, 300, 301, 302, 303, 306, 0,
	308, 309, 310, 311, 312, 313, 314, 544, 316, 317,
	318, 319, 320, 321, 322, 0, 0, 323, 325, 326,
	0, 0, 0, 663, 341, 342, 343, 344, 345, 346,
	347, 349, 0, 351, 352, 353, 0, 354, 355, 356,
	357, 0, 358, 359, 360, 361, 362, 364, 367, 368,
	369, 370, 0, 373, 374, 375, 376, 377, 378, 379,
	381, 382, 383, 385, 386, 387, 545, 388, 389, 390,
	391, 0, 393, 394, 546, 396, 397, 399, 400, 401,
	402, 403, 404, 561, 0, 406, 2120, 407, 408, 409,
	410, 411, 0, 413, 414, 415, 416, 417, 418, 421,
	422, 423, 425, 426, 0, 427, 428, 0, 430, 431,
	666, 433, 434, 435, 436, 437, 0, 562, 438, 0,
	439, 0, 440, 441, 442, 443, 444, 445, 446, 448,
	0, 0, 450, 451, 452, 454, 455, 456, 457, 460,
	461, 462, 463, 464, 0, 465, 467, 469, 547, 0,
	0, 740, 0, 0, 0, 0, 0, 0, 470, 471,
	0, 338, 332, 288, 330, 331, 335, 336, 339, 164,
	0, 181, 648, 0, 230, 267, 0, 0, 0, 327,
	0, 380, 384, 0, 0, 0, 0, 0, 0, 238,
	0, 653, 0, 659, 0, 665, 0, 449, 0, 655,
	656, 661, 169, 739, 472, 543, 0, 0, 0, 334,
	0, 0, 0, 0, 0, 0, 0, 177, 0, 0,
	0, 0, 657, 654, 658, 664, 652, 662, 649, 660,
	0, 371, 305, 0, 0, 398, 176, 222, 209, 251,
	293, 405, 0, 0, 283, 453, 218, 307, 0, 197,
	340, 0, 429, 304, 0, 412, 432, 0, 324, 203,
	363, 419, 420, 646, 651, 0, 667, 0, 207, 208,
	329, 189, 337, 0, 0, 392, 350, 348, 3696, 315,
	372, 0, 0, 0, 237, 0, 232, 328, 468, 195,
	447, 366, 333, 287, 395, 424, 234, 219, 220, 263,
	365, 253, 205, 458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 466, 742, 732, 724,
	725, 726, 727, 728, 729, 0, 744, 745, 746, 747,
	748, 459, 738, 0, 723, 730, 731, 733, 0, 154,
	155, 156, 157, 158, 159, 160, 161, 162, 163, 165,
	0, 166, 167, 168, 170, 171, 172, 645, 173, 174,
	175, 178, 179, 180, 182, 542, 183, 184, 185, 186,
	187, 188, 0, 647, 190, 191, 192, 193, 194, 196,
	198, 199, 200, 201, 202, 204, 206, 0, 0, 0,
	650, 0, 0, 0, 210, 211, 212, 213, 214, 215,
	0, 216, 217, 221, 223, 224, 225, 226, 227, 228,
	231, 0, 233, 235, 0, 236, 239, 0, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 248, 0, 249,
	250, 252, 0, 255, 256, 257, 258, 259, 0, 260,
	0, 0, 261, 262, 264, 265, 266, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	280, 281, 282, 284, 0, 285, 286, 289, 290, 291,
	292, 0, 294, 0, 0, 295, 296, 297, 0, 0,
	298, 299, 300, 301, 302, 303, 306, 0, 308, 309,
	310, 311, 312, 313, 314, 544, 316, 317, 318, 319,
	320, 321, 322, 0, 0, 323, 325, 326, 0, 0,
	0, 663, 341, 342, 343, 344, 345, 346, 347, 349,
	0, 351, 352, 353, 0, 354, 355, 356, 357, 0,
	358, 359, 360, 361, 362, 364, 367, 368, 369, 370,
	0, 373, 374, 375, 376, 377, 378, 379, 381, 382,
	383, 385, 386, 387, 545, 388, 389, 390, 391, 0,
	393, 394, 546, 396, 397, 399, 400, 401, 402, 403,
	404, 561, 0, 406, 0, 407, 408, 409, 410, 411,
	0, 413, 414, 415, 416, 417, 418, 421, 422, 423,
	425, 426, 0, 427, 428, 0, 430, 431, 666, 433,
	434, 435, 436, 437, 0, 562, 438, 0, 439, 0,
	440, 441, 442, 443, 444, 445, 446, 448, 0, 0,
	450, 451, 452, 454, 455, 456, 457, 460, 461, 462,
	463, 464, 0, 465, 467, 469, 547, 0, 0, 740,
	0, 0, 0, 0, 0, 0, 470, 471, 0, 338,
	332, 288, 330, 331, 335, 336, 339, 164, 0, 181,
	648, 0, 230, 267, 0, 0, 0, 327, 0, 380,
	384, 0, 0, 0, 0, 0, 0, 238, 0, 653,
	0, 659, 0, 665, 0, 449, 0, 655, 656, 661,
	169, 739, 472, 543, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 0, 177, 0, 0, 0, 0,
	657, 654, 658, 664, 652, 662, 649, 660, 0, 371,
	305, 0, 0, 398, 176, 222, 209, 251, 293, 405,
	0, 0, 283, 453, 218, 307, 0, 197, 340, 0,
	429, 304, 0, 412, 432, 0, 324, 203, 363, 419,
	420, 646, 651, 0, 667, 0, 207, 208, 329, 189,
	337, 0, 0, 392, 350, 348, 3442, 315, 372, 0,
	0, 0, 237, 0, 232, 328, 468, 195, 447, 366,
	333, 287, 395, 424, 234, 219, 220, 263, 365, 253,
	205, 458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 466, 742, 732, 724, 725, 726,
	727, 728, 729, 0, 744, 745, 746, 747, 748, 459,
	738, 0, 723, 730, 731, 733, 0, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 165, 0, 166,
	167, 168, 170, 171, 172, 645, 173, 174, 175, 178,
	179, 180, 182, 542, 183, 184, 185, 186, 187, 188,
	0, 647, 190, 191, 192, 193, 194, 196, 198, 199,
	200, 201, 202, 204, 206, 0, 0, 0, 650, 0,
	0, 0, 210, 211, 212, 213, 214, 215, 0, 216,
	217, 221, 223, 224, 225, 226, 227, 228, 231, 0,
	233, 235, 0, 236, 239, 0, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 248, 0, 249, 250, 252,
	0, 255, 256, 257, 258, 259, 0, 260, 0, 0,
	261, 262, 264, 265, 266, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 280, 281,
	282, 284, 0, 285, 286, 289, 290, 291, 292, 0,
	294, 0, 0, 295, 296, 297, 0, 0, 298, 299,
	300, 301, 302, 303, 306, 0, 308, 309, 310, 311,
	312, 313, 314, 544, 316, 317, 318, 319, 320, 321,
	322, 0, 0, 323, 325, 326, 0, 0, 0, 663,
	341, 342, 343, 344, 345, 346, 347, 349, 0, 351,
	352, 353, 0, 354, 355, 356, 357, 0, 358, 359,
	360, 361, 362, 364, 367, 368, 369, 370, 0, 373,
	374, 375, 376, 377, 378, 379, 381, 382, 383, 385,
	386, 387, 545, 388, 389, 390, 391, 0, 393, 394,
	546, 396, 397, 399, 400, 401, 402, 403, 404, 561,
	0, 406, 0, 407, 408, 409, 410, 411, 0, 413,
	414, 415, 416, 417, 418, 421, 422, 423, 425, 426,
	0, 427, 428, 0, 430, 431, 666, 433, 434, 435,
	436, 437, 0, 562, 438, 0, 439, 0, 440, 441,
	442, 443, 444, 445, 446, 448, 0, 0, 450, 451,
	452, 454, 455, 456, 457, 460, 461, 462, 463, 464,
	0, 465, 467, 469, 547, 0, 0, 740, 0, 0,
	0, 0, 0, 0, 470, 471, 0, 338, 332, 288,
	330, 331, 335, 336, 339, 164, 0, 181, 648, 0,
	230, 267, 0, 0, 0, 327, 0, 380, 384, 0,
	0, 0, 0, 0, 0, 238, 0, 653, 0, 659,
	0, 665, 0, 449, 0, 655, 656, 661, 169, 739,
	472, 543, 0, 0, 0, 334, 0, 0, 0, 0,
	0, 0, 0, 177, 0, 0, 0, 0, 657, 654,
	658, 664, 652, 662, 649, 660, 0, 371, 305, 0,
	0, 398, 176, 222, 209, 251, 293, 405, 0, 0,
	283, 453, 218, 307, 0, 197, 340, 0, 429, 304,
	0, 412, 432, 0, 324, 203, 363, 419, 420, 646,
	651, 0, 667, 0, 207, 208, 329, 189, 337, 0,
	0, 392, 350, 348, 0, 315, 372, 0, 0, 0,
	237, 0, 232, 328, 468, 195, 447, 366, 333, 287,
	395, 424, 234, 219, 220, 263, 365, 253, 205, 458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 466, 742, 732, 724, 725, 726, 727, 728,
	729, 0, 744, 745, 746, 747, 748, 459, 738, 0,
	723, 730, 731, 733, 0, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 165, 0, 166, 167, 168,
	170, 171, 172, 645, 173, 174, 175, 178, 179, 180,
	182, 542, 183, 184, 185, 186, 187, 188, 0, 647,
	190, 191, 192, 193, 194, 196, 198, 199, 200, 201,
	202, 204, 206, 0, 0, 0, 650, 0, 0, 0,
	210, 211, 212, 213, 214, 215, 0, 216, 217, 221,
	223, 224, 225, 226, 227, 228, 231, 0, 233, 235,
	0, 236, 239, 0, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 248, 0, 249, 250, 252, 0, 255,
	256, 257, 258, 259, 0, 260, 0, 0, 261, 262,
	264, 265, 266, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 280, 281, 282, 284,
	0, 285, 286, 289, 290, 291, 292, 0, 294, 0,
	0, 295, 296, 297, 0, 0, 298, 299, 300, 301,
	302, 303, 306, 0, 308, 309, 310, 311, 312, 313,
	314, 544, 316, 317, 318, 319, 320, 321, 322, 3300,
	0, 323, 325, 326, 0, 0, 0, 663, 341, 342,
	343, 344, 345, 346, 347, 349, 0, 351, 352, 353,
	0, 354, 355, 356, 357, 0, 358, 359, 360, 361,
	362, 364, 367, 368, 369, 370, 0, 373, 374, 375,
	376, 377, 378, 379, 381, 382, 383, 385, 386, 387,
	545, 388, 389, 390, 391, 0, 393, 394, 546, 396,
	397, 399, 400, 401, 402, 403, 404, 561, 0, 406,
	0, 407, 408, 409, 410, 411, 0, 413, 414, 415,
	416, 417, 418, 421, 422, 423, 425, 426, 0, 427,
	428, 0, 430, 431, 666, 433, 434, 435, 436, 437,
	0, 562, 438, 0, 439, 0, 440, 441, 442, 443,
	444, 445, 446, 448, 0, 0, 450, 451, 452, 454,
	455, 456, 457, 460, 461, 462, 463, 464, 0, 465,
	467, 469, 547, 0, 0, 740, 0, 0, 0, 0,
	0, 0, 470, 471, 0, 338, 332, 288, 330, 331,
	335, 336, 339, 164, 0, 181, 648, 0, 230, 267,
	0, 0, 0, 327, 0, 380, 384, 0, 0, 0,
	0, 0, 0, 238, 0, 653, 0, 659, 0, 665,
	0, 449, 0, 655, 656, 661, 169, 739, 472, 543,
	0, 0, 0, 334, 0, 0, 0, 0, 0, 0,
	0, 177, 0, 0, 0, 0, 657, 654, 658, 664,
	652, 662, 649, 660, 0, 371, 305, 0, 0, 398,
	176, 222, 209, 251, 293, 405, 0, 0, 283, 453,
	218, 307, 0, 197, 340, 0, 429, 304, 0, 412,
	432, 0, 324, 203, 363, 419, 420, 646, 651, 0,
	667, 0, 207, 208, 329, 189, 337, 0, 0, 392,
	350, 348, 0, 315, 372, 0, 0, 0, 237, 0,
	232, 328, 468, 195, 447, 366, 333, 287, 395, 424,
	234, 219, 220, 263, 365, 253, 205, 458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	466, 742, 732, 724, 725, 726, 727, 728, 729, 0,
	744, 745, 746, 747, 748, 459, 738, 0, 723, 730,
	731, 733, 0, 154, 155, 156, 157, 158, 159, 160,
	161, 162, 163, 165, 0, 166, 167, 168, 170, 171,
	172, 645, 173, 174, 175, 178, 179, 180, 182, 542,
	183, 184, 185, 186, 187, 188, 0, 647, 190, 191,
	192, 193, 194, 196, 198, 199, 200, 201, 202, 204,
	206, 0, 0, 0, 650, 0, 0, 0, 210, 211,
	212, 213, 214, 215, 0, 216, 217, 221, 223, 224,
	225, 226, 227, 228, 231, 0, 233, 235, 0, 236,
	239, 0, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 248, 0, 249, 250, 252, 0, 255, 256, 257,
	258, 259, 0, 260, 0, 0, 261, 262, 264, 265,
	266, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 280, 281, 282, 284, 0, 285,
	286, 289, 290, 291, 292, 0, 294, 0, 0, 295,
	296, 297, 0, 0, 298, 299, 300, 301, 302, 303,
	306, 0, 308, 309, 310, 311, 312, 313, 314, 544,
	316, 317, 318, 319, 320, 321, 322, 0, 0, 323,
	325, 326, 0, 0, 0, 663, 341, 342, 343, 344,
	345, 346, 347, 349, 0, 351, 352, 353, 0, 354,
	355, 356, 357, 0, 358, 359, 360, 361, 362, 364,
	367, 368, 369, 370, 0, 373, 374, 375, 376, 377,
	378, 379, 381, 382, 383, 385, 386, 387, 545, 388,
	389, 390, 391, 0, 393, 394, 546, 396, 397, 399,
	400, 401, 402, 403, 404, 561, 0, 406, 2120, 407,
	408, 409, 410, 411, 0, 413, 414, 415, 416, 417,
	418, 421, 422, 423, 425, 426, 0, 427, 428, 0,
	430, 431, 666, 433, 434, 435, 436, 437, 0, 562,
	438, 0, 439, 0, 440, 441, 442, 443, 444, 445,
	446, 448, 0, 0, 450, 451, 452, 454, 455, 456,
	457, 460, 461, 462, 463, 464, 0, 465, 467, 469,
	547, 0, 0, 740, 0, 0, 0, 0, 0, 0,
	470, 471, 0, 338, 332, 288, 330, 331, 335, 336,
	339, 164, 0, 181, 648, 0, 230, 267, 0, 0,
	0, 327, 0, 380, 384, 0, 0, 0, 0, 0,
	0, 238, 0, 653, 0, 659, 0, 665, 0, 449,
	0, 655, 656, 661, 169, 739, 472, 543, 0, 0,
	0, 334, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 0, 0, 657, 654, 658, 664, 652, 662,
	649, 660, 0, 371, 305, 0, 0, 398, 176, 222,
	209, 251, 293, 405, 0, 0, 283, 453, 218, 307,
	0, 197, 340, 0, 429, 304, 0, 412, 432, 0,
	324, 203, 363, 419, 420, 646, 651, 0, 667, 0,
	207, 208, 329, 189, 337, 0, 0, 392, 350, 348,
	0, 315, 372, 0, 0, 0, 237, 0, 232, 328,
	468, 195, 447, 366, 333, 287, 395, 424, 234, 219,
	220, 263, 365, 253, 205, 458, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 466, 742,
	732, 724, 725, 726, 727, 728, 729, 0, 744, 745,
	746, 747, 748, 459, 738, 0, 723, 730, 731, 733,
	0, 154, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 165, 0, 166, 167, 168, 170, 171, 172, 645,
	173, 174, 175, 178, 179, 180, 182, 542, 183, 184,
	185, 186, 187, 188, 0, 647, 190, 191, 192, 193,
	194, 196, 198, 199, 200, 201, 202, 204, 206, 0,
	0, 0, 650, 0, 0, 0, 210, 211, 212, 213,
	214, 215, 0, 216, 217, 221, 223, 224, 225, 226,
	227, 228, 231, 0, 233, 235, 0, 236, 239, 0,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 248,
	0, 249, 250, 252, 0, 255, 256, 257, 258, 259,
	0, 260, 0, 0, 261, 262, 264, 265, 266, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 280, 281, 282, 284, 0, 285, 286, 289,
	290, 291, 292, 0, 294, 0, 0, 295, 296, 297,
	0, 0, 298, 299, 300, 301, 302, 303, 306, 0,
	308, 309, 310, 311, 312, 313, 314, 544, 316, 317,
	318, 319, 320, 321, 322, 2943, 0, 323, 325, 326,
	0, 0, 0, 663, 341, 342, 343, 344, 345, 346,
	347, 349, 0, 351, 352, 353, 0, 354, 355, 356,
	357, 0, 358, 359, 360, 361, 362, 364, 367, 368,
	369, 370, 0, 373, 374, 375, 376, 377, 378, 379,
	381, 382, 383, 385, 386, 387, 545, 388, 389, 390,
	391, 0, 393, 394, 546, 396, 397, 399, 400, 401,
	402, 403, 404, 561, 0, 406, 0, 407, 408, 409,
	410, 411, 0, 413, 414, 415, 416, 417, 418, 421,
	422, 423, 425, 426, 0, 427, 428, 0, 430, 431,
	666, 433, 434, 435, 436, 437, 0, 562, 438, 0,
	439, 0, 440, 441, 442, 443, 444, 445, 446, 448,
	0, 0, 450, 451, 452, 454, 455, 456, 457, 460,
	461, 462, 463, 464, 0, 465, 467, 469, 547, 0,
	0, 740, 0, 0, 0, 0, 0, 0, 470, 471,
	0, 338, 332, 288, 330, 331, 335, 336, 339, 164,
	0, 181, 648, 0, 230, 267, 0, 0, 0, 327,
	0, 380, 384, 0, 0, 0, 0, 0, 0, 238,
	0, 653, 0, 659, 0, 665, 0, 449, 0, 655,
	656, 661, 169, 739, 472, 543, 0, 0, 0, 334,
	0, 0, 0, 0, 0, 0, 0, 177, 0, 0,
	0, 0, 657, 654, 658, 664, 652, 662, 649, 660,
	0, 371, 305, 0, 0, 398, 176, 222, 209, 251,
	293, 405, 0, 0, 283, 453, 218, 307, 0, 197,
	340, 0, 429, 304, 0, 412, 432, 0, 324, 203,
	363, 419, 420, 646, 651, 0, 667, 0, 207, 208,
	329, 189, 337, 0, 0, 392, 350, 348, 0, 315,
	372, 0, 0, 0, 237, 0, 232, 328, 468, 195,
	447, 366, 333, 287, 395, 424, 234, 219, 220, 263,
	365, 253, 205, 458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 466, 742, 732, 724,
	725, 726, 727, 728, 729, 0, 744, 745, 746, 747,
	748, 459, 738, 0, 723, 730, 731, 733, 0, 154,
	155, 156, 157, 158, 159, 160, 161, 162, 163, 165,
	0, 166, 167, 168, 170, 171, 172, 645, 173, 174,
	175, 178, 179, 180, 182, 542, 183, 184, 185, 186,
	187, 188, 0, 647, 190, 191, 192, 193, 194, 196,
	198, 199, 200, 201, 202, 204, 206, 0, 0, 0,
	650, 0, 0, 0, 210, 211, 212, 213, 214, 215,
	0, 216, 217, 221, 223, 224, 225, 226, 227, 228,
	231, 0, 233, 235, 0, 236, 239, 0, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 248, 0, 249,
	250, 252, 0, 255, 256, 257, 258, 259, 0, 260,
	0, 0, 261, 262, 264, 265, 266, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	280, 281, 282, 284, 0, 285, 286, 289, 290, 291,
	292, 0, 294, 0, 0, 295, 296, 297, 0, 0,
	298, 299, 300, 301, 302, 303, 306, 0, 308, 309,
	310, 311, 312, 313, 314, 544, 316, 317, 318, 319,
	320, 321, 322, 0, 0, 323, 325, 326, 0, 0,
	0, 663, 341, 342, 343, 344, 345, 346, 347, 349,
	0, 351, 352, 353, 0, 354, 355, 356, 357, 0,
	358, 359, 360, 361, 362, 364, 367, 368, 369, 370,
	0, 373, 374, 375, 376, 377, 378, 379, 381, 382,
	383, 385, 386, 387, 545, 388, 389, 390, 391, 0,
	393, 394, 546, 396, 397, 399, 400, 401, 402, 403,
	404, 561, 0, 406, 0, 407, 408, 409, 410, 411,
	0, 413, 414, 415, 416, 417, 418, 421, 422, 423,
	425, 426, 0, 427, 428, 0, 430, 431, 666, 433,
	434, 435, 436, 437, 0, 562, 438, 0, 439, 0,
	440, 441, 442, 443, 444, 445, 446, 448, 0, 0,
	450, 451, 452, 454, 455, 456, 457, 460, 461, 462,
	463, 464, 0, 465, 467, 469, 547, 0, 0, 740,
	0, 0, 0, 0, 0, 0, 470, 471, 0, 338,
	332, 288, 330, 331, 335, 336, 339, 164, 0, 181,
	648, 0, 230, 750, 0, 0, 0, 327, 0, 380,
	384, 0, 0, 0, 0, 0, 0, 238, 0, 653,
	0, 659, 0, 665, 0, 449, 0, 655, 656, 661,
	169, 739, 472, 543, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 0, 177, 0, 0, 0, 0,
	657, 654, 658, 664, 652, 662, 649, 660, 0, 371,
	305, 0, 0, 398, 176, 222, 209, 251, 293, 405,
	0, 0, 283, 453, 218, 307, 0, 197, 340, 0,
	429, 304, 0, 412, 432, 0, 324, 203, 363, 419,
	420, 646, 651, 0, 667, 0, 207, 208, 329, 189,
	337, 0, 0, 392, 350, 348, 0, 315, 372, 0,
	0, 0, 237, 0, 232, 328, 468, 195, 447, 366,
	333, 287, 395, 424, 234, 219, 220, 263, 365, 253,
	205, 458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 466, 742, 732, 724, 725, 726,
	727, 728, 729, 0, 744, 745, 746, 747, 748, 459,
	738, 0, 723, 730, 731, 733, 0, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 165, 0, 166,
	167, 168, 170, 171, 172, 645, 173, 174, 175, 178,
	179, 180, 182, 542, 183, 184, 185, 186, 187, 188,
	0, 647, 190, 191, 192, 193, 194, 196, 198, 199,
	200, 201, 202, 204, 206, 0, 0, 0, 650, 0,
	0, 0, 210, 211, 212, 213, 214, 215, 0, 216,
	217, 221, 223, 224, 225, 226, 227, 228, 231, 0,
	233, 235, 0, 236, 239, 0, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 248, 0, 249, 250, 252,
	0, 255, 256, 257, 258, 259, 0, 260, 0, 0,
	261, 262, 264, 265, 266, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 280, 281,
	282, 284, 0, 285, 286, 289, 290, 291, 292, 0,
	294, 0, 0, 295, 296, 297, 0, 0, 298, 299,
	300, 301, 302, 303, 306, 0, 308, 309, 310, 311,
	312, 313, 314, 544, 316, 317, 318, 319, 320, 321,
	322, 0, 0, 323, 325, 326, 0, 0, 0, 663,
	341, 342, 343, 344, 345, 346, 347, 349, 0, 351,
	352, 353, 0, 354, 355, 356, 357, 0, 358, 359,
	360, 361, 362, 364, 367, 368, 369, 370, 0, 373,
	374, 375, 376, 377, 378, 379, 381, 382, 383, 385,
	386, 387, 545, 388, 389, 390, 391, 0, 393, 394,
	546, 396, 397, 399, 400, 401, 402, 403, 404, 561,
	0, 406, 0, 407, 408, 409, 410, 411, 0, 413,
	414, 415, 416, 417, 418, 421, 422, 423, 425, 426,
	0, 427, 428, 0, 430, 431, 666, 433, 434, 435,
	436, 437, 0, 562, 438, 0, 439, 0, 440, 441,
	442, 443, 444, 445, 446, 448, 0, 0, 450, 451,
	452, 454, 455, 456, 457, 460, 461, 462, 463, 464,
	0, 465, 467, 469, 547, 0, 0, 740, 0, 0,
	0, 0, 0, 0, 470, 471, 0, 338, 332, 288,
	330, 331, 335, 336, 339, 164, 0, 181, 648, 0,
	230, 714, 0, 0, 0, 327, 0, 380, 384, 0,
	0, 0, 0, 0, 0, 238, 0, 653, 0, 659,
	0, 665, 0, 449, 0, 655, 656, 661, 169, 739,
	472, 543, 0, 0, 0, 334, 0, 0, 0, 0,
	0, 0, 0, 177, 0, 0, 0, 0, 657, 654,
	658, 664, 652, 662, 649, 660, 0, 371, 305, 0,
	0, 398, 176, 222, 209, 251, 293, 405, 0, 0,
	283, 453, 218, 307, 0, 197, 340, 0, 429, 304,
	0, 412, 432, 0, 324, 203, 363, 419, 420, 646,
	651, 0, 667, 0, 207, 208, 329, 189, 337, 0,
	0, 392, 350, 348, 0, 315, 372, 0, 0, 0,
	237, 0, 232, 328, 468, 195, 447, 366, 333, 287,
	395, 424, 234, 219, 220, 263, 365, 253, 205, 458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 466, 742, 732, 724, 725, 726, 727, 728,
	729, 0, 744, 745, 746, 747, 748, 459, 738, 0,
	723, 730, 731, 733, 0, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 165, 0, 166, 167, 168,
	170, 171, 172, 645, 173, 174, 175, 178, 179, 180,
	182, 542, 183, 184, 185, 186, 187, 188, 0, 647,
	190, 191, 192, 193, 194, 196, 198, 199, 200, 201,
	202, 204, 206, 0, 0, 0, 650, 0, 0, 0,
	210, 211, 212, 213, 214, 215, 0, 216, 217, 221,
	223, 224, 225, 226, 227, 228, 231, 0, 233, 235,
	0, 236, 239, 0, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 248, 0, 249, 250, 252, 0, 255,
	256, 257, 258, 259, 0, 260, 0, 0, 261, 262,
	264, 265, 266, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 280, 281, 282, 284,
	0, 285, 286, 289, 290, 291, 292, 0, 294, 0,
	0, 295, 296, 297, 0, 0, 298, 299, 300, 301,
	302, 303, 306, 0, 308, 309, 310, 311, 312, 313,
	314, 544, 316, 317, 318, 319, 320, 321, 322, 0,
	0, 323, 325, 326, 0, 0, 0, 663, 341, 342,
	343, 344, 345, 346, 347, 349, 0, 351, 352, 353,
	0, 354, 355, 356, 357, 0, 358, 359, 360, 361,
	362, 364, 367, 368, 369, 370, 0, 373, 374, 375,
	376, 377, 378, 379, 381, 382, 383, 385, 386, 387,
	545, 388, 389, 390, 391, 0, 393, 394, 546, 396,
	397, 399, 400, 401, 402, 403, 404, 561, 0, 406,
	0, 407, 408, 409, 410, 411, 0, 413, 414, 415,
	416, 417, 418, 421, 422, 423, 425, 426, 0, 427,
	428, 0, 430, 431, 666, 433, 434, 435, 436, 437,
	0, 562, 438, 0, 439, 0, 440, 441, 442, 443,
	444, 445, 446, 448, 0, 0, 450, 451, 452, 454,
	455, 456, 457, 460, 461, 462, 463, 464, 0, 465,
	467, 469, 547, 0, 0, 740, 0, 0, 0, 0,
	0, 0, 470, 471, 0, 338, 332, 288, 330, 331,
	335, 336, 339, 164, 0, 181, 648, 0, 230, 267,
	0, 0, 0, 327, 0, 380, 384, 0, 0, 0,
	0, 0, 0, 238, 0, 653, 0, 659, 0, 665,
	0, 449, 0, 655, 656, 661, 169, 0, 472, 543,
	0, 0, 0, 334, 0, 0, 0, 0, 0, 0,
	0, 177, 0, 0, 0, 0, 657, 654, 658, 664,
	652, 662, 649, 660, 0, 371, 305, 0, 0, 398,
	176, 222, 209, 251, 293, 405, 0, 0, 283, 453,
	218, 307, 0, 197, 340, 0, 429, 304, 0, 412,
	432, 0, 324, 203, 363, 419, 420, 646, 651, 0,
	667, 0, 207, 208, 329, 189, 337, 0, 0, 392,
	350, 348, 0, 315, 372, 0, 0, 0, 237, 0,
	232, 328, 468, 195, 447, 366, 333, 287, 395, 424,
	234, 219, 220, 263, 365, 253, 205, 458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	466, 0, 0, 0, 0, 0, 0, 0, 229, 0,
	0, 0, 0, 0, 0, 459, 0, 0, 0, 0,
	0, 0, 0, 154, 155, 156, 157, 158, 159, 160,
	161, 162, 163, 165, 0, 166, 167, 168, 170, 171,
	172, 645, 173, 174, 175, 178, 179, 180, 182, 542,
	183, 184, 185, 186, 187, 188, 0, 647, 190, 191,
	192, 193, 194, 196, 198, 199, 200, 201, 202, 204,
	206, 0, 0, 0, 650, 0, 0, 0, 210, 211,
	212, 213, 214, 215, 0, 216, 217, 221, 223, 224,
	225, 226, 227, 228, 231, 0, 233, 235, 0, 236,
	239, 0, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 248, 0, 249, 250, 252, 0, 255, 256, 257,
	258, 259, 0, 260, 0, 0, 261, 262, 264, 265,
	266, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 280, 281, 282, 284, 0, 285,
	286, 289, 290, 291, 292, 0, 294, 0, 0, 295,
	296, 297, 0, 0, 298, 299, 300, 301, 302, 303,
	306, 0, 308, 309, 310, 311, 312, 313, 314, 544,
	316, 317, 318, 319, 320, 321, 322, 0, 0, 323,
	325, 326, 0, 0, 0, 663, 341, 342, 343, 344,
	345, 346, 347, 349, 0, 351, 352, 353, 0, 354,
	355, 356, 357, 0, 358, 359, 360, 361, 362, 364,
	367, 368, 369, 370, 0, 373, 374, 375, 376, 377,
	378, 379, 381, 382, 383, 385, 386, 387, 545, 388,
	389, 390, 391, 0, 393, 394, 546, 396, 397, 399,
	400, 401, 402, 403, 404, 561, 0, 406, 0, 407,
	408, 409, 410, 411, 0, 413, 414, 415, 416, 417,
	418, 421, 422, 423, 425, 426, 0, 427, 428, 0,
	430, 431, 666, 433, 434, 435, 436, 437, 0, 562,
	438, 0, 439, 0, 440, 441, 442, 443, 444, 445,
	446, 448, 0, 0, 450, 451, 452, 454, 455, 456,
	457, 460, 461, 462, 463, 464, 900, 465, 467, 469,
	547, 901, 0, 900, 0, 910, 0, 0, 901, 0,
	470, 471, 910, 338, 332, 288, 330, 331, 335, 336,
	339, 900, 0, 0, 0, 0, 901, 0, 0, 0,
	910, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 0, 0, 0, 0, 78,
	0, 0, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 903, 0,
	0, 0, 0, 0, 0, 903, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 903, 0, 0, 0, 909, 0, 0,
	0, 0, 0, 0, 909, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 909, 0, 0, 0, 0, 0, 914, 0,
	0, 0, 0, 0, 0, 914, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 914, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 899, 0, 0, 0, 0, 0, 0, 899, 0,
	0, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 899, 0, 904, 0,
	0, 0, 0, 0, 0, 904, 0, 0, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 904, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 906, 0, 0, 0, 0, 0, 905,
	906, 0, 0, 0, 88, 0, 905, 0, 0, 0,
	0, 102, 0, 0, 0, 0, 0, 0, 906, 109,
	0, 0, 0, 0, 905, 0, 0, 83, 0, 89,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 907, 0, 0, 0, 0, 0,
	79, 907, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 907,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 908,
	0, 0, 0, 0, 0, 0, 908, 0, 0, 0,
	911, 0, 0, 0, 0, 0, 0, 911, 0, 0,
	0, 0, 0, 0, 908, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 911, 0, 110, 94, 0,
	95, 0, 0, 1849, 0, 913, 912, 0, 0, 0,
	1845, 0, 913, 912, 0, 0, 0, 0, 0, 103,
	0, 0, 96, 0, 0, 100, 0, 97, 944, 0,
	913, 912, 80, 0, 0, 98, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 99, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 107, 0, 0,
	0, 0, 0, 101, 0, 0, 0, 108, 0, 0,
	0, 0, 902, 0, 0, 0, 0, 0, 0, 902,
	0, 0, 0, 81, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 902, 0, 0,
	0, 0, 916, 0, 0, 0, 0, 0, 0, 916,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 916,
}

var yyPact = [...]int32{
	1539, -1000, -31, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1825, 535, 2052, 58232, 7031,
	1863, 52375, 39725, -1000, 1869, 482, 2318, 34665, -38, 51869,
	40737, 213, 1539, 1986, 34665, 2036, 1984, 482, 40737, -1000,
	1042, 1156, 1121, 2314, 51363, 40737, 22493, 40737, 1839, 50857,
	50351, 1862, -1000, -1000, 548, 493, -1000, -1000, 34159, 39219,
	49845, 49339, 413, 1454, 29639, 40737, 40737, 40737, 40737, 29639,
	26602, 1110, 1260, 48833, 29639, 40737, 29639, 40737, 40737, 40737,
	40737, 40737, 467, 26602, 26602, 40737, 40737, 1830, 40737, 40737,
	-1000, 48327, 47821, 47315, 57273, 56785, 2465, -1000, -1000, -1000,
	411, 1444, -1000, -1000, -1000, 1828, 1061, 462, -1000, 1107,
	-1000, -1000, -1000, -1000, -1000, -1000, 410, -1000, 46809, 38713,
	1112, -1000, -1000, 458, 2218, 2534, 2534, 2340, 28627, 344,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2217, 1114, 1336,
	8, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 100,
	99, 1869, 12263, 12263, -1000, 1972, -1000, -21, -1000, -10,
	29133, -1000, -1000, -1000, 246, -41, 40737, -1000, 243, -1000,
	-41, 14324, -1000, 40737, 1803, 46303, 34665, 34665, 95, -1000,
	111, 45797, 40737, 408, 45291, 2464, 29639, 29639, 40737, 460,
	29639, 974, 1333, -1000, 2395, 2474, -19, 149, -1000, 7,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 600, 1155, 575, 2391, 715, 2390,
	407, -1000, -1000, -1000, -1000, 4359, 2453, 2287, 5030, 2448,
	2285, 7446, 2447, 58249, 2444, 38207, 37701, 1555, 951, 240,
	-1000, -10, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 950, 949,
	941, 1102, 939, 240, 921, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 40737, 40737, 40737, 1971, 2442, 913,
	897, 892, 890, 886, 885, 1968, 1967, 40737, 884, 871,
	855, 843, 1120, 1157, 1554, 2440, 271, -1000, 2439, 289,
	-1000, 1962, 2437, 279, 2434, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1, -1000, -1000, -1000, -1000, -1000, 239, 1376,
	238, 238, 238, -1000, -1000, -1000, -1000, -1000, 61, 47,
	-1000, -1000, 1368, 236, 1368, 1368, -1000, 1388, 1368, 279,
	2433, 44785, -1000, 1551, -1000, 1069, -1000, -1000, -1000, 2464,
	-1000, 1327, -1000, 2496, 27615, 244, 2534, -1000, 1089, 851,
	-1000, 1257, 1667, 17415, 16900, 40737, 290, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1271, -1000, 1087, -1000,
	-1000, -1000, 1920, -177, -1000, 8622, -1000, -1000, 14324, 14324,
	14324, 14324, -1000, -1000, -1000, 11232, -1000, -1000, -10, 234,
	94, -1000, -1000, 233, -1000, 211, -10, -1000, -1000, -1000,
	-1000, -1000, -1000, 14324, -1000, 230, -1000, 228, 219, 224,
	-1000, -10, -1000, 8102, 14324, -1000, 40737, 14324, 40737, -41,
	2498, 40737, -34, 7145, 508, 2497, 28121, -1000, 40737, 1889,
	1887, 2202, 2032, 40737, 471, 2389, 111, 40737, 3628, 2387,
	44279, -1000, 223, 223, 1247, 40737, 216, 781, -1000, 26602,
	2461, 2432, 56297, -1000, 3, 9671, -1000, 9671, 22493, -1000,
	296, 40737, 40737, 40737, 40737, -1000, 40737, 2427, -1000, -1000,
	-1000, 2425, 43773, -164, -1000, 772, -1000, 879, 862, 31140,
	734, 714, 1676, 836, 1961, 1006, 912, 40737, 1288, 40737,
	1664, 2201, 129, 1172, 730, -1000, 215, 34665, 566, -164,
	-1000, 2196, 860, 40737, 559, -164, 2194, 3628, -1000, 1303,
	56297, 515, -1000, 2017, -1000, 515, 515, 2016, 1035, 715,
	715, -1000, 40737, -164, 817, 40737, 58231, 2424, 2267, 58224,
	2422, 40737, 2193, -1000, 87, -10, 2192, 2190, 2189, 1737,
	-1000, 1772, 2315, 832, 1674, 2186, -1000, 2181, 837, 1886,
	1884, 40737, 40737, 2180, 2178, 2177, 2176, 2174, 2173, 40737,
	40737, 828, 2172, 2168, 2154, 2153, 40737, 40737, 40737, 40737,
	1480, 1433, 1429, -1000, 7310, -1000, -1000, 40737, 40737, -1000,
	-1000, -1000, 40737, 40737, -1000, 40737, 40737, 56297, -1000, 56297,
	-1000, 2, 14324, -1000, 2510, -1000, -1000, -1000, -1000, 2510,
	-1000, 2220, 2209, 2510, -1000, 214, -1000, 2510, -1000, -1000,
	1368, 1368, -1000, -1000, 56297, 271, 2421, -1000, -1000, -1000,
	-1000, -1000, 40737, 2496, 481, -1000, -1000, 1335, -1000, -1000,
	969, -1000, -1000, -1000, -1000, -42, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2526, 2525, -1000, -1000, -42,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2035, 40737, 12263, 56297,
	14324, 14324, 14324, 14324, 14324, 14324, 14324, 14324, 14324, 14324,
	14324, 14324, 14324, 14324, 2273, -1000, -1000, 14324, 2265, 14324,
	40737, 2208, 14324, 2149, 192, 2129, 9671, -1000, 211, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 639, 639, 5549, 545, -10, 6843, -56, -5,
	213, -10, -1000, -1000, -1000, 12779, 14324, 22493, -10, 2237,
	7145, -1000, 13809, 11748, 2035, 14324, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 7100, -256, 86, -37, -1000, 1919, -39,
	14324, -1000, 14324, 14324, 2273, 14324, 14324, 40737, 2208, 2149,
	192, 2129, 211, 1960, -1000, 1744, 25590, 1855, 40737, 221,
	-1000, 255, 40737, -1000, -1000, 2024, 20469, 20469, 1684, 1684,
	-1000, -1000, -40, -1000, 31646, 40737, 1661, 2420, 2326, 210,
	-1000, 3628, 1310, 2419, 1959, 2385, -1000, 7470, 32658, 3852,
	972, -1000, -1000, 1660, 1350, 149, -1000, 30651, 40737, 405,
	-1000, -1000, -1000, -1000, -1000, -1000, 1183, 40737, -1000, 9671,
	-1000, -50, -1000, 254, -1000, 40737, 209, 149, 149, 149,
	149, 149, -1000, 40737, 856, 40737, 2495, 2384, 111, 3955,
	40737, 40737, 40737, -1000, 40737, 40737, -1000, 2381, 43267, -1000,
	56297, 40737, -1000, 205, 1922, 360, 358, 1879, 37195, 40737,
	42761, 42255, 40737, 635, -1000, -1000, 1044, 40737, -1000, 9671,
	40737, 33653, 522, 517, 40737, 1084, 33147, 40737, 1083, -1000,
	40737, 722, -1000, -1000, 26602, -1000, 1762, 1082, 10183, 4093,
	40737, 40737, 40737, 7603, 40737, 40737, -1000, -1000, -1000, -1000,
	-1000, -1000, 515, -1000, -1000, -1000, 40737, 40737, 515, 515,
	4827, 40737, 40737, 7581, -164, 816, 40737, 558, -164, 815,
	34665, 826, 40737, -1000, 40737, 40737, 40737, 40737, 40737, -1000,
	2281, 41749, 14324, 2280, -1000, 40737, -1000, 200, 2276, 40737,
	40737, 26602, 2125, 40737, 40737, 824, 1950, 40737, 40737, 40737,
	40737, 40737, 40737, 820, 808, 2120, 26602, 26602, 40737, 40737,
	806, 799, 795, 790, 40737, 40737, 2534, 2458, 2534, 2115,
	40737, 40737, 29639, 198, 56297, 29639, 23553, 29639, 29639, 1590,
	56297, -1000, -1000, -1000, -1000, -1000, -1000, 271, -1000, 289,
	-1000, 2370, 1947, -1000, 279, -1000, -58, 85, 84, 2214,
	2212, 83, 14324, 82, -1000, -1000, 279, -1000, 40737, 2352,
	1335, -1000, -1000, 683, 825, -1000, 17930, -1000, -1000, -1000,
	-1000, 2023, 20469, -1000, -1000, -1000, -49, -49, -27, -27,
	-27, -1000, 272, 272, 272, 272, 272, 272, 5549, 7201,
	-1000, 2274, 1620, 14324, 14324, 2140, 192, 2114, 1586, -1000,
	2211, -1000, 545, 15869, 15869, -1000, -1000, -1000, 11232, 14324,
	-1000, -1000, -1000, 14324, -57, -112, -1000, -1000, -61, 81,
	1434, -1000, 14324, -1000, -66, -1000, -1000, -60, 14324, 14324,
	14324, -1000, 7145, 2511, -1000, 2023, -76, -1000, 14324, -1000,
	-1000, 191, -1000, 1858, -1000, 7145, 1738, 1748, 1418, -1000,
	-1000, -77, -1000, -1000, -1000, -1000, 2024, 28121, 14324, -79,
	-1000, -10, 1738, 14839, -89, 1901, 35677, 35677, 21987, -1000,
	19963, 35677, 35677, 35677, 245, 2031, 189, 188, -10, -1000,
	2145, 1797, -1000, 1797, 40737, -1000, 79, -74, -1000, -1000,
	-1000, -1000, 40737, 138, 40737, 40737, 2491, 129, 40737, 40737,
	34665, 2418, 53369, 834, 3852, -1000, 2534, 28627, 1583, -1000,
	-1000, 1944, -1000, -1000, -1000, -1000, 705, 1179, -1000, 1095,
	515, 515, 40737, -1000, 40737, 41243, -1000, -81, -1000, -1000,
	704, 55321, 52881, -1000, 994, -1000, -1000, -1000, -1, -1000,
	57761, 834, 2272, 1958, -1000, -1000, -1000, 1659, -1000, -1000,
	972, -1000, 76, -232, 2012, -91, -1000, -1000, -1000, 252,
	111, 40737, 2461, 814, 819, 1332, -1000, 1632, -1000, -1000,
	9671, 10695, 74, -82, -1000, 56297, 2534, -1000, -1000, -1000,
	-1000, -1000, 546, -1000, 40737, 28627, 28627, -1000, 715, 482,
	2417, 1875, -1000, -1000, 2113, 2112, 1670, 1455, 2416, -1000,
	2378, 589, 900, 14324, 183, -1000, 2309, 1152, 530, 182,
	179, 40737, 1132, 1801, -1000, 2414, 2370, 2411, 2370, -1000,
	-1000, -1000, 36689, -1000, -92, -1000, 4, -1000, -1000, -1000,
	-1000, 40737, 40737, 40737, 40737, -1000, 703, -1000, -1000, -1000,
	-1000, 671, -1000, 1081, -1000, -1000, -1000, -1000, -1000, 1141,
	668, -93, -1000, -1000, 9671, 9671, 9671, 2534, -1000, -164,
	-1000, 757, 1273, -1000, -1000, -164, 2111, 1267, -1000, -1000,
	-1000, -1000, -1000, -1000, -164, 2110, 3628, -1000, 2103, -164,
	796, 40737, 40737, 6476, 40737, 40737, 40737, 6098, 2100, -1000,
	-1000, -1000, -1000, -1000, 2093, -1000, 2370, 2410, 7145, -1000,
	809, 14324, -1000, -1000, -1000, -1000, 40737, 783, 762, 2092,
	40737, -1000, -1000, -1000, -1000, -1000, -1000, 2090, 2083, 40737,
	-1000, -1000, -1000, -1000, 2082, 2080, 2079, 2078, -1000, 2077,
	2072, 2534, 2377, -1000, -1000, 28627, -1000, -1000, -1000, 56297,
	-1000, -1000, -1000, 40737, 40737, 175, -1000, -1000, 56297, -1000,
	-1000, -1000, -1000, 40737, -1000, -1000, -1000, 274, -1000, -1000,
	274, -95, -1000, -1000, 271, -1000, 1153, 244, -1000, -1000,
	-1000, -1000, -1000, 14324, -89, -1000, 14324, 915, 484, 15869,
	15869, -1000, 14324, 14324, 14324, 1192, -1000, 15869, 15869, 977,
	-96, 366, -10, 6759, -1000, -1000, 237, -1000, -1000, 1217,
	-1000, 14324, 6538, -1000, -1000, 72, 13294, -1000, -138, -138,
	14324, 14324, -1000, -1000, 96, 7145, 482, -1000, -1000, 12263,
	534, 482, 626, 40737, -10, 1738, -1000, 7145, 253, 40737,
	-1000, 7145, 1657, 20469, 1913, 1911, 20469, 1951, 1872, 1872,
	1872, -1000, -1000, -1000, 40737, 174, -1000, 35677, 35677, 35677,
	35677, 27108, 71, 1901, -1000, -1000, -1000, -1000, 1638, 173,
	19457, 14324, -10, 14324, 715, -1000, -1000, -1000, 1883, -1000,
	1130, 31646, -1000, 847, 32152, 138, 417, 482, -1000, -107,
	3628, 1879, 40737, 3852, 172, 1942, -1000, -1, -1000, -1000,
	1341, 14324, -1000, -1000, -139, -1000, -143, 454, 2271, 1169,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1329, 553,
	-1000, 52881, 14324, 14324, 55321, -1000, 55321, -1000, -1000, -25,
	-19, -1000, 40737, 972, 40737, 1948, -1000, -1000, 2008, 52881,
	52881, -1000, 2542, 10695, 2326, 170, 26602, 2461, -1000, 40737,
	-1000, -1000, 40737, 1481, -1000, 2366, 356, 168, 15869, 40737,
	1488, -1000, 1227, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 167, 2526, 2525, -1000, 40737, 2319, 70, -156,
	-1000, -1000, 40737, -1000, -1000, -1000, -1000, 2352, 40737, 2326,
	40737, 40737, 40737, -1000, 1851, -1000, -1000, -1000, 40737, 2408,
	1294, -1000, 36183, -1000, 1879, 6392, 40737, 1394, -1000, 2300,
	40737, 40737, -1000, 40737, 20975, -1000, -1000, 1478, 1190, 129,
	1188, 1060, 447, -1000, -1000, 715, 591, 1394, 40737, -1000,
	40737, -1000, -1000, -1000, -1000, -1000, 9671, 10695, 9671, -1000,
	-1000, -1000, -1000, -1000, -1000, 667, 40737, -1000, -1000, 10183,
	-1000, -1000, -1000, -1000, -1000, 40737, 40737, 40737, 544, 2007,
	40737, 543, 2004, 40737, 40737, 40737, 40737, -1000, 2071, -164,
	787, 1259, -1000, 2070, -164, 775, 40737, 40737, -1000, 40737,
	-1000, 5950, 1394, -1000, 2066, 2058, 40737, 758, 40737, 40737,
	-1000, 40737, 40737, 40737, 40737, 40737, 2534, 1339, 2407, -1000,
	2490, 1882, 1881, -1000, 55809, 1105, 2370, -1000, -1000, -1000,
	-1000, -1000, 1272, 7145, 1206, 14324, 14324, 739, 720, 332,
	1206, 628, 14324, 56297, 15869, 15869, 15869, 15869, 15869, 15869,
	15869, 15869, 15869, 15869, 15869, 15869, 521, 521, 14324, -1000,
	14324, -1000, -1000, -1000, 7145, 14324, -1000, 14324, -1000, 68,
	64, 14324, 63, 7145, 7145, -1000, 59, -177, 1695, 20975,
	1672, -1000, -1000, 1744, -1000, -1000, 14324, -1000, 40737, 1901,
	20469, 20469, 2688, 1898, 20469, -1000, -1000, -1000, -1000, 166,
	40737, -1000, -1000, -1000, -1000, 35677, -1000, 29639, 1593, 164,
	-180, 5723, 1344, 156, 715, 1440, -1000, 847, 160, -1000,
	1189, 1875, -1000, 2002, -108, -1000, -1000, -1000, 2359, 1670,
	31646, 40737, 1651, 2336, 2326, -1000, 159, 1941, 834, 57761,
	2270, -1000, 7145, 2534, 1582, 56297, 1126, -1000, -1000, -1000,
	7145, 7145, -1000, -1000, 444, -22, 792, -1000, -237, 40737,
	52881, -1000, -109, -1000, 252, -1000, 2489, 40737, -1000, 1197,
	-1000, -1000, -1000, 2339, 2339, 14324, 778, 111, 2488, -1000,
	2305, -1000, -1000, 22493, -1000, -1000, 40737, -1000, 2534, -1000,
	856, -1000, 2479, 498, -1000, -1000, -1000, 2047, -1000, 40737,
	315, -1000, 35171, -1000, -1000, -1000, -110, -1000, 658, -1000,
	1220, 1135, -1000, -1000, -111, 1394, -113, -115, -1000, 2357,
	582, 2312, 14324, 2268, 2457, 2455, -1000, -1000, 1488, 2259,
	2478, 518, -1000, -1000, -1000, -1000, 1488, -1000, 3481, 56297,
	515, 518, 2370, 2370, -1000, -1000, 251, -1000, -1000, -1000,
	-1000, 2055, 2054, 40737, 26602, -1000, 40737, 26602, -1000, -1000,
	-1000, 2051, 40737, 40737, 40737, 532, 2000, 40737, 40737, 40737,
	-1000, -1000, 2370, -1000, 40737, 40737, -1000, 2048, -1000, -1000,
	-1000, -1000, -1000, -1000, 2370, -1000, 2534, 2534, -1000, 56297,
	40737, 40737, -126, -195, 40737, -1000, -1000, 1206, 1206, 14324,
	14324, 14324, 1206, -1000, -125, -125, -29, -29, -29, -1000,
	521, 521, 521, 521, 521, 521, 1206, 1206, 7145, -1000,
	-1000, -1000, -1000, 1813, 1733, -131, -1000, 40737, 1416, 7145,
	-1000, -1000, -1000, 2688, -1000, 158, 14324, 20469, -1000, 40737,
	-132, -1000, -136, -1000, 2477, 1648, 18951, 15354, 14324, -1000,
	-1000, 1390, 1792, -1000, 2404, 2404, 1804, -1000, 2013, 9671,
	156, 2534, 1875, 40737, 1809, 1809, 1526, 40737, -1000, 32152,
	1632, 312, 847, 56, 138, 40737, -1000, 759, 2476, 20975,
	34665, -1000, -142, -1000, 55321, -1000, 1122, 2397, -1000, 442,
	-1000, -1000, -1000, 431, 1581, 507, 2030, -144, -1000, 482,
	-149, 2461, -1000, 2251, 1876, 149, 1876, 5639, 1065, 287,
	-1000, 40, -1000, -1000, 482, -1000, 40737, 148, 147, 145,
	-1000, -1000, 144, -1000, -1000, 1394, 1164, -1000, -1000, -1000,
	-1000, -1000, 1164, 821, 1164, 20975, 23023, -1000, 40737, 40737,
	-1000, 4964, -1000, 2406, 2398, -1000, -1000, 142, -1000, -1000,
	-1000, 2510, 2510, 2475, 2319, -1000, -1000, -1000, -1000, 10695,
	40737, 40737, 1015, 302, -1000, 1015, 301, 40737, -1000, -1000,
	2046, 40737, 26602, -1000, -1000, 2041, -1000, 1394, -1000, -1000,
	40737, -1000, -1000, -1000, 37, -1000, -1000, -1000, 54833, 56297,
	-1000, 1206, 1206, 1206, 35, 1808, 1840, 1794, -1000, 2023,
	20975, -1000, 482, -1000, 40737, 7145, -1000, -150, -1000, 245,
	29639, -1000, 140, 40737, 1999, 18445, 1431, -152, -1000, 537,
	15869, 425, 1443, -1000, -1000, 1727, 14324, 1707, -1000, 1730,
	-1000, -1000, -1000, 2474, 2474, -1000, -1000, 2474, 2474, 1613,
	2534, -154, -1000, 16384, 2023, -1000, 1526, -157, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1933, 129, 349, 139, -1000, -1000, 1875, 1130, 847,
	138, 343, 277, 276, 482, -160, 1879, 57761, 3852, -1000,
	-1000, -1000, -35, -1000, -1000, 56297, -1000, 2159, 1229, 507,
	-1000, 1058, -1000, -1000, -1000, 40737, -1000, 2336, 2326, -1000,
	1139, -1000, -1000, 1024, 1934, 1000, 122, 14324, -1000, 2352,
	-1000, 30145, 14324, 14324, 1632, 9671, 2339, 137, 2339, 40737,
	2339, -1000, -1000, 136, 1773, 129, -1000, 2312, -1000, -1000,
	14324, 1144, 1877, -1000, -1000, -1000, -1000, -1000, 525, 26602,
	-1000, 524, -1000, 40737, 1015, 261, 40737, -1000, -1000, 32,
	29, 19, -1000, -1000, 40737, 1806, 1775, 28121, -1000, -1000,
	-1000, -170, -1000, -1000, -1000, 40737, -172, -1000, 54345, -1000,
	1431, 1999, -1000, -1000, 15354, -205, 9671, 778, 1594, 40737,
	40737, 1722, 7145, 1736, 1998, 2534, 2534, 2534, 2534, 25084,
	2246, 24578, -1000, -1000, 9671, -1000, -1000, -1000, -1000, -1000,
	26096, -1000, 1933, 40737, -1000, 498, 1301, -1000, -1000, 21481,
	1632, 1526, 847, 1875, 1670, -1000, 320, 297, 2336, 1161,
	128, -1000, 834, -1000, -1000, 1209, 126, 702, -1000, -1000,
	2474, -1000, -1000, 1362, -1000, -1000, 2473, 516, -1000, 1134,
	-1000, 1939, 1938, 1766, -1000, -1000, -1000, -1000, 3628, 4622,
	-1000, -173, -1000, 2510, -175, -176, -183, -1000, 1876, 40737,
	1876, 111, 1876, 22493, 266, -1000, -1000, 1773, -1000, 1289,
	122, -1000, 14324, 40737, -1000, 40737, -1000, -1000, 505, -1000,
	-1000, -1000, -1000, 235, 1994, 1992, 212, 2472, -188, -1000,
	40737, 1731, 1634, -1000, -1000, 18445, -1000, 1646, 14324, -1000,
	-1000, -1000, -1000, 1689, 1768, -1000, -1000, 1688, 503, 1699,
	-1000, -1000, -1000, -1000, -237, -1000, 24072, -237, -1000, -1000,
	-191, -1000, -1000, 498, -1000, -1000, 1359, -193, -1000, 582,
	2312, 14324, 1933, 1875, 1526, 847, -1000, -1000, -1000, 2366,
	120, 20975, -1000, 1070, 14324, -1000, -1000, -1000, 40737, 1228,
	482, 40737, -1000, -1000, 1757, -1000, 1760, 1381, 1381, 1133,
	526, -1000, 30145, -1000, -1000, 2040, -1000, 9671, -1000, -198,
	-1000, 1065, 2023, 17, -1000, 1799, 266, -1000, -1000, 7145,
	1015, 1015, 40737, 40737, 40737, 40737, -1000, -1000, 40737, -1000,
	-1000, 1731, -1000, 15869, 15869, 2245, -1000, 15869, -1000, 1593,
	117, -217, -1000, 2469, -1000, 28121, -1000, -1000, 1744, 40737,
	1850, 115, -1000, -1000, -237, -1000, -1000, 26096, -1000, -1000,
	1624, 1619, -1000, 21481, 40737, 40737, 664, 498, 1526, 1933,
	1875, 2326, 20975, -201, 29639, -1000, -1000, 611, -1000, -1000,
	633, 2336, -1000, -1000, 1354, -1000, -1000, 2250, -1000, -1000,
	-1000, -1000, 114, -1000, 1394, -1000, 1394, 1934, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1015, 1888, 232, 180, -1000,
	-1000, 778, 778, -1000, 778, 1644, 40231, 14324, 9671, -238,
	1415, -211, -1000, 14324, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2312, -1000, 1933, 498, 1526, 498, -214, -1000, 1161,
	113, -1000, 2159, -1000, -1000, 111, 111, 14324, -1000, 1394,
	-1000, 2364, 40737, 40737, 40737, 40737, -221, -1000, 53857, 1604,
	-1000, -1000, 1848, 1802, -234, 40737, 498, -1000, 1933, 2023,
	-1000, 20975, 2366, 9159, 1204, -1000, -1000, -235, 1394, 2304,
	-1000, -1000, -1000, -242, 1618, 40231, 1628, 844, 2529, -1000,
	-1000, -1000, 1744, -1000, -1000, -1000, 498, -1000, -1000, 2326,
	-252, -1000, -1000, -1000, -1000, -1000, 1070, -1000, 2364, -1000,
	14, 1932, 14324, -1000, -1000, -1000, -1000, -1000, -1000, 1545,
	-1000, -1000, 1524, 1597, 1597, 2527, 1735, 1413, -1000, 498,
	-1000, 9159, 29639, 1874, -1000, 1572, 7145, -1000, -1000, 1471,
	1559, 1477, 1524, 1618, -1000, 108, 40737, 1848, 2023, -1000,
	106, 40737, -1000, 1618, 1499, 1479, -1000, 1537, -1000, 1536,
	1535, 1515, 1471, -1000, 40231, 1643, -1000, -1000, 9159, -1000,
	-1000, 1926, 1924, 1921, -1000, -1000, 1532, -1000, 1504, -1000,
	1618, -254, 103, -260, 1565, 1462, 1452, -1000, -1000, -1000,
	-1000, 40231, -1000, 1618, -1000, 1448, 1446, -262, 1918, -1000,
	-1000, -1000, 1485, -1000,
}

var yyPgo = [...]int16{
	0, 2923, 2922, 2280, 124, 0, 19, 4061, 2919, 40,
	201, 248, 114, 409, 49, 2913, 265, 254, 2097, 1705,
	725, 120, 2911, 2910, 2910, 2909, 252, 211, 180, 2908,
	210, 2907, 2906, 163, 2905, 2904, 264, 38, 4375, 417,
	1531, 13, 2902, 2894, 2893, 2890, 2888, 235, 2887, 209,
	2885, 2884, 2883, 234, 202, 225, 224, 2882, 214, 233,
	356, 151, 2031, 4519, 2880, 247, 128, 145, 262, 2879,
	2878, 2877, 2875, 2874, 2869, 2868, 2867, 2866, 2861, 147,
	176, 183, 204, 266, 28, 160, 238, 2860, 2859, 2857,
	3349, 61, 2856, 118, 2855, 239, 242, 113, 199, 243,
	4302, 270, 2854, 2852, 2849, 2848, 2847, 178, 174, 2846,
	2845, 2844, 2843, 37, 39, 2842, 2841, 197, 193, 223,
	2840, 230, 162, 5, 30, 146, 137, 2838, 2836, 2835,
	2833, 22, 77, 14, 2832, 2830, 62, 44, 2828, 253,
	2828, 2828, 2828, 2828, 2827, 221, 2825, 2821, 2819, 134,
	2817, 2816, 2815, 84, 2815, 54, 73, 2814, 36, 251,
	236, 148, 2812, 259, 45, 219, 2335, 195, 2809, 269,
	256, 255, 240, 192, 7, 2809, 159, 284, 2807, 2802,
	2800, 2800, 276, 222, 196, 190, 144, 165, 2797, 272,
	2795, 267, 2794, 2793, 2791, 2790, 237, 226, 74, 2789,
	173, 2788, 104, 2787, 2784, 111, 232, 25, 52, 2780,
	47, 110, 41, 94, 2779, 76, 228, 1, 20, 10,
	2775, 191, 2774, 21, 2773, 2, 3, 2772, 4, 12,
	9, 15, 2761, 2760, 155, 2754, 99, 2752, 177, 152,
	133, 2751, 127, 2750, 71, 50, 125, 2749, 2747, 2746,
	143, 33, 2744, 102, 2743, 149, 207, 2740, 2739, 2738,
	17, 46, 123, 64, 69, 53, 29, 103, 56, 2735,
	2734, 35, 91, 2733, 161, 23, 24, 72, 208, 100,
	2732, 27, 31, 18, 293, 126, 250, 246, 2725, 34,
	206, 258, 2724, 2723, 257, 121, 249, 57, 168, 2719,
	164, 2717, 2710, 2708, 60, 2708, 157, 63, 58, 2707,
	51, 167, 2707, 92, 116, 2694, 215, 459, 4307, 2692,
	150, 2690, 268, 83, 2676, 172, 153, 2675, 241, 245,
	2674, 2673, 141, 131, 122, 2671, 129, 2670, 2668, 2667,
	2666, 2663, 2662, 2660, 2659, 2654, 2653, 2648, 2647, 2646,
	2645, 188, 170, 2643, 2637, 2636, 2631, 2630, 154, 2627,
	2624, 169, 105, 2623, 200, 181, 98, 2622, 1621, 216,
	2621, 2618, 2618, 2617, 11, 263, 2608, 187, 186, 93,
	213, 2605, 88, 2604, 2600, 220, 2598, 2594, 75, 2593,
	2592, 185, 212, 2591, 2590, 2580, 2579, 2576, 2574, 6,
	78, 32, 8, 2570, 2567, 26, 2566, 2565, 244, 203,
	2564, 2563, 2560, 2560, 2558, 2367, 2556, 217, 16, 2554,
	2554,
}

var yyR1 = [...]int16{
	0, 1, 2, 2, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 17, 17, 282, 282, 317, 317,
	317, 24, 24, 25, 25, 26, 26, 27, 27, 37,
	37, 37, 5, 5, 5, 6, 6, 6, 6, 6,
	8, 8, 7, 12, 12, 13, 13, 318, 318, 23,
	23, 15, 15, 413, 413, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 14, 14, 16, 16, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 38, 38, 38, 39, 39, 39,
	39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
	39, 39, 39, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 41, 41, 41,
	41, 41, 41, 60, 62, 61, 61, 61, 42, 42,
	55, 55, 59, 59, 58, 58, 58, 58, 56, 56,
	43, 197, 374, 374, 86, 86, 86, 86, 86, 86,
	53, 53, 54, 54, 54, 44, 45, 45, 48, 48,
	47, 46, 46, 49, 49, 49, 52, 52, 50, 50,
	51, 84, 84, 67, 68, 68, 68, 68, 68, 63,
	63, 63, 65, 66, 80, 80, 81, 81, 69, 69,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 76, 76, 72, 72, 64, 64, 64, 64, 64,
	64, 73, 74, 77, 78, 75, 75, 75, 75, 82,
	82, 82, 83, 83, 71, 71, 90, 90, 92, 92,
	93, 93, 94, 94, 94, 94, 94, 94, 94, 94,
	94, 94, 94, 94, 91, 91, 85, 87, 88, 89,
	96, 96, 95, 95, 97, 97, 98, 100, 100, 99,
	99, 101, 101, 101, 101, 168, 168, 167, 167, 170,
	170, 170, 170, 171, 171, 172, 172, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 320, 320,
	321, 321, 321, 322, 322, 322, 183, 183, 183, 183,
	183, 183, 184, 184, 184, 184, 185, 185, 186, 186,
	187, 187, 187, 188, 188, 189, 189, 191, 192, 192,
	192, 193, 193, 193, 194, 194, 194, 195, 195, 174,
	174, 175, 121, 121, 121, 144, 177, 177, 176, 176,
	176, 176, 178, 178, 179, 179, 180, 180, 181, 181,
	182, 182, 196, 196, 205, 205, 201, 201, 202, 203,
	203, 204, 204, 379, 199, 199, 198, 198, 200, 211,
	211, 213, 213, 212, 212, 212, 212, 214, 214, 215,
	215, 206, 206, 207, 207, 208, 208, 208, 209, 209,
	210, 210, 210, 210, 210, 216, 221, 220, 220, 224,
	224, 222, 222, 223, 226, 226, 227, 227, 227, 227,
	227, 227, 227, 227, 228, 228, 228, 228, 225, 225,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 230,
	230, 230, 230, 230, 231, 231, 232, 232, 233, 233,
	217, 217, 218, 218, 218, 218, 218, 218, 219, 219,
	102, 319, 319, 112, 112, 112, 112, 112, 133, 133,
	113, 113, 117, 103, 114, 114, 119, 119, 118, 115,
	115, 104, 190, 190, 105, 116, 116, 106, 106, 138,
	138, 139, 139, 145, 145, 145, 146, 146, 147, 147,
	149, 149, 150, 150, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 151,
	151, 156, 157, 157, 157, 157, 157, 157, 152, 152,
	158, 164, 164, 164, 164, 159, 159, 159, 159, 161,
	161, 294, 294, 294, 294, 294, 294, 294, 294, 293,
	293, 293, 292, 292, 292, 292, 292, 163, 163, 415,
	415, 162, 162, 414, 414, 362, 362, 140, 140, 141,
	141, 142, 142, 143, 143, 125, 125, 125, 125, 125,
	134, 134, 135, 135, 126, 126, 128, 129, 130, 130,
	130, 130, 130, 123, 120, 120, 120, 127, 127, 127,
	154, 154, 155, 155, 131, 131, 131, 132, 132, 124,
	124, 136, 136, 136, 137, 137, 137, 122, 122, 107,
	107, 107, 107, 107, 107, 296, 296, 296, 296, 296,
	296, 296, 296, 234, 234, 235, 235, 238, 238, 238,
	241, 249, 249, 249, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 298, 298, 299, 299, 300, 300,
	301, 301, 236, 236, 237, 237, 242, 242, 243, 243,
	244, 244, 244, 244, 245, 248, 248, 302, 302, 303,
	303, 304, 10, 32, 239, 253, 253, 254, 254, 254,
	254, 257, 257, 257, 257, 260, 260, 260, 306, 306,
	309, 309, 311, 311, 311, 311, 307, 307, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 416, 416, 28, 28, 28, 305,
	305, 308, 308, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 240, 240, 256, 256, 256, 256, 256, 256,
	256, 258, 258, 247, 247, 246, 246, 262, 262, 261,
	261, 261, 261, 266, 266, 266, 266, 266, 263, 264,
	265, 265, 265, 265, 265, 267, 267, 268, 268, 269,
	270, 270, 271, 271, 271, 297, 297, 275, 275, 275,
	275, 276, 276, 277, 277, 278, 108, 108, 259, 259,
	279, 279, 281, 281, 280, 280, 283, 283, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 284,
	284, 289, 289, 285, 285, 11, 366, 366, 366, 366,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 287, 287, 287, 288, 290, 290, 417, 417, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 335, 335, 335, 368, 368, 368, 371, 371, 371,
	371, 370, 370, 372, 372, 336, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 36,
	328, 330, 57, 57, 57, 57, 329, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 251, 251, 252, 252, 252, 252, 252, 252,
	272, 273, 273, 274, 274, 274, 274, 331, 331, 331,
	331, 375, 375, 376, 376, 377, 377, 377, 378, 378,
	378, 378, 378, 380, 380, 380, 380, 380, 381, 79,
	79, 79, 382, 382, 383, 383, 385, 385, 385, 385,
	385, 387, 387, 384, 384, 388, 388, 388, 334, 406,
	406, 389, 389, 386, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	373, 373, 332, 332, 390, 390, 390, 392, 392, 391,
	391, 391, 391, 391, 397, 397, 398, 398, 400, 395,
	395, 396, 396, 403, 393, 393, 419, 419, 394, 394,
	401, 401, 418, 418, 399, 399, 399, 402, 402, 402,
	402, 404, 404, 333, 333, 333, 333, 153, 153, 405,
	405, 405, 405, 339, 339, 339, 339, 340, 341, 341,
	341, 341, 341, 341, 341, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 344, 344, 351, 351, 420, 420, 345, 345, 346,
	346, 352, 352, 354, 354, 354, 354, 347, 353, 353,
	355, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 356, 356, 357, 357, 357, 357,
	358, 358, 365, 359, 360, 360, 361, 343, 343, 343,
	343, 343, 349, 349, 350, 350, 363, 363, 364, 364,
	337, 337, 338, 324, 324, 325, 323, 323, 323, 326,
	326, 327, 327, 327, 327, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 367, 367, 367, 367,
	166, 166, 169, 169, 160, 160, 407, 407, 407, 407,
	407, 407, 407, 407, 407, 410, 410, 410, 165, 165,
	9, 9, 9, 9, 412, 412, 408, 408, 408, 409,
	409, 409, 409, 409, 411, 411, 411, 411, 295, 295,
	295, 295, 295, 295, 313, 313, 29, 29, 30, 31,
	31, 33, 33, 33, 33, 34, 34, 35, 35, 35,
	35, 314, 315, 315, 316, 316,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	0, 2, 0, 3, 0, 2, 0, 1, 0, 2,
	2, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 2, 3,
	0, 1, 3, 1, 0, 3, 3, 4, 4, 4,
	4, 3, 2, 1, 1, 2, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	3, 2, 4, 2, 3, 5, 4, 6, 3, 5,
	4, 6, 3, 5, 3, 3, 2, 6, 7, 6,
	7, 3, 4, 4, 6, 5, 7, 1, 3, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 2, 4, 1, 1, 1,
	2, 2, 2, 2, 1, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 2,
	1, 2, 1, 0, 2, 2, 3, 5, 0, 2,
	4, 1, 1, 2, 3, 5, 6, 8, 6, 6,
	1, 3, 1, 3, 3, 5, 1, 0, 1, 2,
	4, 2, 0, 3, 3, 2, 1, 3, 4, 3,
	5, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 3, 3, 0, 2, 3,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 2, 2, 1, 3, 3,
	2, 4, 1, 5, 2, 5, 2, 5, 2, 3,
	3, 0, 1, 0, 3, 0, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 0, 0, 0,
	0, 1, 1, 3, 1, 1, 1, 3, 3, 1,
	2, 6, 6, 2, 1, 1, 0, 1, 3, 3,
	2, 1, 1, 2, 0, 1, 3, 2, 2, 3,
	1, 4, 2, 3, 2, 3, 2, 3, 1, 1,
	2, 2, 4, 1, 2, 3, 3, 4, 5, 4,
	5, 4, 2, 2, 2, 1, 1, 0, 5, 2,
	2, 2, 3, 1, 0, 1, 3, 9, 1, 2,
	0, 7, 7, 0, 10, 6, 0, 4, 5, 2,
	0, 1, 2, 4, 0, 1, 1, 0, 5, 2,
	4, 1, 2, 0, 1, 0, 1, 5, 1, 0,
	2, 0, 2, 6, 2, 0, 1, 3, 2, 4,
	0, 1, 3, 2, 1, 0, 1, 3, 3, 2,
	0, 2, 2, 2, 3, 3, 4, 1, 3, 3,
	2, 7, 12, 1, 3, 2, 3, 3, 1, 2,
	2, 2, 2, 1, 2, 13, 2, 2, 0, 2,
	0, 1, 3, 3, 2, 1, 1, 1, 1, 1,
	1, 2, 2, 1, 3, 3, 6, 0, 3, 0,
	2, 3, 2, 3, 4, 4, 3, 3, 0, 5,
	2, 5, 2, 0, 4, 2, 1, 0, 1, 0,
	1, 3, 3, 6, 7, 5, 7, 9, 2, 0,
	7, 1, 3, 1, 4, 4, 7, 2, 1, 1,
	1, 3, 2, 8, 1, 3, 3, 5, 2, 1,
	3, 7, 2, 0, 10, 1, 2, 9, 11, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 3, 0,
	1, 3, 2, 0, 1, 1, 3, 3, 1, 1,
	3, 3, 3, 3, 4, 4, 3, 3, 2, 1,
	3, 2, 1, 1, 1, 1, 3, 0, 1, 3,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 2, 2, 1, 3, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	0, 2, 0, 1, 0, 1, 0, 1, 0, 1,
	0, 1, 0, 1, 0, 4, 4, 4, 5, 5,
	2, 5, 3, 5, 2, 0, 3, 1, 2, 5,
	5, 8, 3, 4, 8, 5, 0, 4, 3, 0,
	1, 3, 1, 3, 2, 2, 4, 4, 5, 2,
	0, 1, 1, 0, 2, 2, 0, 2, 0, 13,
	16, 12, 15, 14, 17, 1, 1, 2, 2, 2,
	2, 1, 0, 1, 0, 1, 3, 1, 1, 1,
	3, 3, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 1, 0, 2, 2,
	1, 0, 3, 0, 1, 3, 1, 1, 2, 4,
	6, 6, 10, 1, 2, 1, 3, 4, 0, 1,
	3, 2, 1, 1, 6, 2, 0, 3, 1, 1,
	2, 1, 2, 2, 2, 2, 3, 0, 1, 2,
	1, 2, 1, 3, 2, 3, 1, 2, 2, 2,
	1, 2, 3, 1, 2, 2, 2, 2, 3, 3,
	3, 1, 3, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 0, 2, 1, 4, 4, 5, 2, 5,
	5, 7, 3, 1, 5, 9, 3, 9, 4, 11,
	10, 2, 0, 1, 3, 3, 6, 4, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 3, 3, 4, 0, 1, 0, 6,
	1, 3, 3, 3, 5, 2, 0, 3, 4, 4,
	0, 2, 0, 4, 0, 3, 16, 19, 1, 0,
	2, 0, 4, 0, 1, 3, 2, 0, 4, 6,
	4, 6, 4, 4, 6, 4, 6, 5, 7, 5,
	7, 4, 6, 10, 13, 10, 13, 11, 14, 1,
	3, 1, 0, 1, 3, 1, 1, 1, 1, 1,
	2, 5, 3, 6, 4, 6, 6, 9, 5, 7,
	6, 6, 5, 5, 5, 5, 9, 4, 5, 7,
	6, 4, 8, 4, 2, 4, 3, 6, 4, 3,
	3, 3, 2, 2, 3, 4, 4, 3, 3, 3,
	3, 3, 3, 4, 4, 3, 2, 3, 2, 2,
	3, 4, 3, 2, 2, 3, 4, 4, 4, 5,
	1, 4, 4, 4, 3, 3, 2, 1, 0, 6,
	4, 6, 4, 6, 8, 4, 6, 4, 6, 5,
	7, 2, 3, 3, 2, 5, 1, 1, 2, 3,
	2, 1, 1, 2, 1, 2, 1, 1, 1, 2,
	1, 2, 1, 1, 1, 3, 3, 3, 3, 2,
	2, 2, 3, 5, 5, 5, 2, 6, 6, 6,
	6, 6, 8, 8, 6, 6, 7, 9, 9, 8,
	10, 6, 6, 6, 6, 6, 6, 6, 8, 6,
	8, 6, 8, 7, 9, 6, 8, 7, 9, 8,
	10, 8, 10, 9, 11, 8, 10, 9, 11, 8,
	8, 7, 6, 6, 6, 6, 8, 8, 8, 8,
	6, 9, 0, 2, 2, 1, 2, 2, 2, 2,
	3, 1, 3, 3, 1, 5, 3, 9, 12, 7,
	7, 3, 2, 1, 3, 1, 3, 3, 3, 3,
	2, 2, 1, 1, 1, 1, 2, 1, 1, 1,
	4, 5, 1, 0, 1, 2, 2, 2, 2, 1,
	1, 1, 3, 3, 5, 1, 4, 0, 2, 3,
	0, 1, 1, 4, 5, 1, 1, 1, 1, 3,
	3, 2, 2, 1, 2, 2, 2, 2, 1, 2,
	2, 1, 17, 21, 1, 1, 2, 1, 3, 1,
	1, 1, 3, 1, 2, 0, 1, 2, 4, 1,
	1, 1, 1, 1, 3, 0, 1, 0, 1, 1,
	4, 0, 1, 1, 1, 3, 0, 1, 1, 1,
	1, 2, 0, 9, 11, 12, 14, 3, 0, 3,
	4, 4, 0, 6, 4, 9, 7, 6, 4, 6,
	6, 5, 7, 9, 6, 6, 5, 4, 4, 3,
	6, 6, 6, 6, 4, 7, 5, 8, 7, 8,
	6, 5, 8, 1, 0, 1, 0, 4, 6, 5,
	8, 2, 0, 2, 2, 2, 1, 5, 2, 0,
	2, 6, 6, 6, 10, 6, 6, 6, 9, 9,
	6, 6, 9, 6, 1, 1, 3, 3, 5, 6,
	1, 3, 1, 3, 1, 3, 3, 7, 9, 9,
	8, 6, 1, 0, 1, 3, 3, 1, 5, 3,
	8, 11, 6, 1, 0, 5, 2, 3, 0, 2,
	0, 1, 1, 1, 1, 1, 3, 3, 2, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 2, 3,
	2, 2, 1, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 2, 0, 2, 0, 4, 1,
	3, 1, 2, 2, 2, 1, 1, 1, 1, 1,
	3, 3, 1, 3, 1, 3,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -97, -102, -103, -104, -105,
	-106, -107, -108, -109, -110, -111, -331, -332, -333, -337,
	-338, -339, -340, -341, -342, -343, -344, -345, -346, -347,
	-348, -335, -336, -99, -100, -188, 112, 26, 22, 27,
	395, 94, 402, -101, -187, 532, 63, 67, -195, 36,
	519, 87, 541, 97, 98, 99, 100, 532, -146, 116,
	-296, -259, -26, 33, 415, 262, 62, 465, 455, 226,
	277, -324, 454, 452, 58, 290, 474, 472, 67, 308,
	420, 481, 85, 285, 200, 226, 237, 248, 262, 287,
	71, -415, 62, 376, 386, 388, 410, 415, 423, 444,
	413, 461, 269, 407, 104, 450, 439, 455, 465, 277,
	385, -291, -294, -293, 465, 262, 308, 67, 420, 481,
	85, 285, 226, 237, 439, 455, 195, 269, 277, -415,
	388, 415, 423, 376, 413, 461, 85, -368, 58, 424,
	458, -369, -367, -166, 56, 218, 415, 348, 407, 489,
	-5, 4, -18, -19, 192, 193, 194, 195, 196, 197,
	198, 199, 200, 201, 22, 202, 204, 205, 206, 55,
	207, 208, 209, 211, 212, 213, 89, 70, 214, 215,
	216, 24, 217, 219, 220, 221, 222, 223, 224, 124,
	227, 228, 229, 230, 231, 142, 232, 102, 233, 234,
	235, 236, 237, 112, 238, 155, 239, 121, 122, 91,
	247, 248, 249, 250, 251, 252, 254, 255, 99, 150,
	151, 256, 90, 257, 258, 259, 260, 261, 262, 177,
	27, 263, 139, 265, 149, 266, 268, 137, 42, 269,
	271, 272, 273, 274, 275, 276, 277, 278, 280, 282,
	283, 92, 284, 154, 166, 286, 287, 288, 289, 290,
	292, 295, 296, 152, 297, 298, 299, 28, 300, 301,
	302, 303, 304, 305, 306, 307, 308, 309, 310, 311,
	313, 314, 315, 97, 316, 318, 319, 146, 504, 320,
	321, 322, 323, 93, 325, 328, 329, 330, 333, 334,
	335, 336, 337, 338, 106, 85, 339, 100, 341, 342,
	343, 344, 345, 346, 347, 132, 349, 350, 351, 352,
	353, 354, 355, 358, 111, 359, 360, 32, 140, 123,
	505, 506, 503, 145, 62, 507, 508, 125, 502, 509,
	103, 365, 366, 367, 368, 369, 370, 371, 130, 372,
	129, 374, 375, 376, 378, 379, 380, 381, 383, 384,
	385, 386, 387, 113, 388, 153, 144, 389, 390, 391,
	392, 84, 133, 394, 395, 396, 397, 398, 399, 400,
	34, 401, 402, 403, 35, 404, 405, 406, 408, 409,
	410, 411, 128, 413, 414, 147, 416, 417, 88, 418,
	419, 420, 421, 422, 423, 94, 426, 428, 429, 430,
	431, 432, 108, 434, 435, 436, 437, 438, 439, 114,
	115, 440, 441, 442, 148, 443, 444, 446, 447, 105,
	449, 450, 109, 452, 453, 454, 455, 456, 459, 461,
	463, 464, 465, 466, 467, 468, 469, 143, 470, 50,
	473, 474, 475, 98, 476, 477, 478, 479, 156, 184,
	480, 481, 482, 483, 484, 486, 169, 487, 141, 488,
	499, 500, 57, 37, 174, 170, 190, 180, 179, 225,
	189, 188, 29, 279, 176, 293, 294, 501, 187, 172,
	186, 167, 161, 163, 164, 160, 162, 157, 165, 159,
	127, 158, 326, 340, 182, 183, 356, 357, 361, 171,
	362, 363, 377, 178, 175, 412, 427, 173, 445, 185,
	460, 462, 87, 181, 490, 491, 492, 493, 494, 134,
	495, 496, 497, 498, 126, -371, -370, 56, 458, 424,
	-166, 21, 218, 58, 348, 407, 415, 489, -101, -99,
	-100, -187, -179, -180, 21, 41, -320, -318, -321, -5,
	66, 424, 458, 56, 542, -189, 84, -191, -7, -5,
	-189, 532, -3, 73, -322, -320, 64, 73, -98, -97,
	-318, 67, 481, 84, 420, 308, 287, 386, 461, 118,
	200, 34, -17, -5, 28, -14, -5, -91, -93, -5,
	11, -94, 535, 536, 537, 538, 539, 540, 526, 527,
	528, 18, 19, 20, -14, 88, -14, 28, -7, 28,
	85, 454, 452, 454, 452, -320, 28, 21, -318, 28,
	21, -318, 28, -318, 28, 481, 67, 247, -329, -374,
	-63, -5, 4, -18, -20, 210, 116, 226, 25, 81,
	243, 117, 79, 44, 76, 52, 53, 75, 77, 46,
	82, 54, 80, 364, 78, 48, 451, 119, -14, -14,
	-7, -14, -328, -374, -11, -366, -9, 242, 246, 425,
	4, -18, -19, -20, 322, 222, 280, -7, 28, -328,
	-7, -328, -7, -7, -7, -7, -7, 461, -11, -11,
	-7, -14, 88, -14, -7, 28, -16, -14, 28, -12,
	-7, -7, 28, -163, 28, -67, -68, -69, -70, -76,
	-72, -75, -63, 187, 172, 173, 174, 175, 176, 177,
	188, 189, 171, 190, -77, -78, -73, -74, 185, 56,
	4, -18, 170, -64, 179, 180, 181, 182, 183, -163,
	28, 25, 481, 247, 67, 88, 341, 461, 322, 481,
	-368, 424, -368, 220, 210, -408, 432, -409, 319, 390,
	253, 31, 64, 61, 528, 534, 57, -62, 7, -62,
	-410, -62, 40, -165, -9, -62, 507, 57, 319, 210,
	533, 533, -168, -167, -170, -38, 537, -40, 535, 536,
	31, -90, -42, -41, 13, 532, -44, -43, -100, 29,
	135, -50, -51, 294, 11, 62, -5, -60, 6, -62,
	49, 43, 47, 38, -86, 412, 12, -374, -167, 74,
	537, -55, -58, 534, 530, -318, 532, 532, 542, -189,
	-23, 532, -84, -38, -319, -318, 94, -5, 23, -322,
	-322, 533, -153, 532, -318, 28, -318, 481, -318, 28,
	-27, 25, -374, -374, -7, 461, -374, -296, 474, 210,
	-326, 31, -362, 23, -80, 534, -314, 532, 534, -314,
	23, 369, 258, 453, 232, -314, 64, 31, -28, 36,
	519, 31, 481, -284, -287, 399, -286, 208, 257, 197,
	22, 27, 478, 94, 224, 265, 259, 310, 355, 123,
	31, 366, 402, 401, 154, -30, 508, 29, 45, -284,
	-288, 399, 208, 29, 45, -284, 399, -307, -310, 355,
	23, 214, 91, 306, 336, 339, 343, 365, 420, 437,
	403, 474, 29, -284, 399, 29, -318, 28, 21, -320,
	28, 141, 399, -36, 532, -55, 399, 399, 399, 399,
	-290, 27, 94, 197, 478, 399, -36, 399, -7, -14,
	-14, 74, 29, 399, 399, 399, 399, 399, 399, 74,
	74, -7, 399, 399, 399, 399, 369, 258, 453, 232,
	399, 197, 27, 98, -356, 197, 27, 29, 542, -317,
	24, 35, 29, 542, -317, 74, 29, 542, -317, 29,
	-81, -80, 532, -71, 532, 178, -81, -81, -81, 532,
	-82, 519, 520, 532, -82, -83, 184, 532, -83, -83,
	179, 180, -83, -317, 29, -16, 28, 141, 369, 258,
	453, 232, -27, 220, 23, -165, 40, 542, -409, -62,
	328, 66, 488, 253, 121, -169, 40, -160, -164, -159,
	49, 43, 74, -165, 6, 535, 536, -61, -60, -169,
	40, -5, -407, -62, 4, -159, 40, 58, 49, 43,
	74, 505, -412, 261, 235, 328, -182, 73, 542, 14,
	535, 536, 537, 538, 539, 540, 526, 527, 528, 18,
	19, 20, 30, 33, 52, 53, 54, 46, 517, 44,
	39, 55, -90, 37, 45, 48, 23, -8, 62, 4,
	-22, 192, 193, 194, 195, 196, 197, 198, 199, 200,
	21, 201, 22, 202, 203, 120, 511, 95, 204, 205,
	206, 60, 207, 208, 209, 210, 211, 212, 213, 174,
	116, 170, 190, 512, 89, 70, 214, 215, 216, 24,
	217, 38, 513, 218, 219, 220, 514, 221, 222, 223,
	224, 225, 226, 515, 124, 227, 228, 229, 230, 231,
	25, 142, 232, 102, 233, 118, 234, 235, 236, 237,
	112, 238, 81, 155, 239, 121, 240, 241, 242, 243,
	244, 245, 246, 122, 91, 247, 248, 250, 189, 188,
	251, 40, 252, 253, 254, 255, 99, 150, 151, 256,
	90, 96, 257, 258, 259, 260, 41, 110, 261, 262,
	177, 27, 263, 264, 139, 265, 149, 266, 267, 268,
	137, 42, 269, 271, 272, 273, 274, 29, 275, 276,
	277, 278, 279, 43, 280, 283, 92, 176, 284, 154,
	285, 166, 286, 117, 79, 287, 288, 289, 290, 292,
	293, 294, 295, 296, 152, 297, 299, 28, 300, 301,
	302, 303, 304, 305, 306, 307, 308, 309, 310, 311,
	312, 313, 76, 501, 314, 315, 97, 316, 187, 172,
	186, 318, 319, 75, 167, 161, 163, 164, 160, 162,
	157, 165, 159, 127, 158, 146, 504, 320, 321, 322,
	323, 93, 324, 327, 325, 326, 77, 328, 329, 330,
	58, 331, 332, 333, 334, 335, 336, 337, 338, 106,
	85, 339, 100, 340, 341, 343, 344, 346, 347, 348,
	182, 82, 183, 132, 349, 350, 351, 352, 353, 354,
	355, 356, 357, 358, 31, 111, 359, 360, 47, 361,
	32, 171, 140, 123, 505, 506, 503, 145, 66, 507,
	508, 125, 502, 362, 80, 363, 103, 365, 366, 367,
	368, 369, 370, 371, 130, 372, 129, 373, 374, 375,
	376, 377, 378, 379, 380, 381, 382, 383, 384, 385,
	386, 387, 113, 388, 153, 144, 389, 390, 175, 391,
	392, 84, 133, 393, 394, 395, 396, 397, 398, 399,
	400, 34, 401, 402, 403, 35, 404, 405, 406, 78,
	407, 408, 409, 410, 411, 412, 128, 413, 414, 147,
	415, 416, 417, 88, 419, 63, 420, 421, 422, 423,
	424, 425, 94, 427, 426, 428, 429, 430, 431, 173,
	432, 433, 108, 434, 435, 436, 437, 438, 439, 114,
	115, 440, 441, 442, 148, 443, 444, 445, 446, 59,
	447, 105, 448, 67, 449, 451, 450, 109, 452, 453,
	454, 455, 107, 456, 56, 185, 457, 458, 459, 460,
	461, 462, 49, 463, 464, 465, 466, 467, 468, 469,
	143, 470, 472, 50, 473, 474, 475, 98, 104, 83,
	476, 477, 478, 479, 156, 87, 181, 191, 119, 480,
	481, 482, 483, 51, 484, 487, 141, 488, 489, 490,
	491, 492, 493, 494, 134, 495, 496, 497, 498, 126,
	500, 57, -38, -38, -38, -38, -56, -38, -84, -100,
	87, -55, -100, -100, -49, 530, 532, 532, -55, -45,
	-38, -87, 532, 532, -182, 532, -58, -65, 537, -6,
	4, -18, -19, -20, -21, 21, 203, 120, 30, 511,
	135, 23, 95, 60, 512, 38, 513, 514, 39, 515,
	118, 26, 240, 241, 242, 244, 245, 246, 40, 253,
	96, 41, 110, 264, 267, 270, 43, 281, 131, 285,
	64, 291, 71, 72, 45, 312, 317, 73, 324, 327,
	68, 331, 332, 31, 47, 69, 74, 66, 33, 510,
	373, 382, 393, 101, 63, 425, 433, 59, 448, 67,
	107, 61, 457, 49, 471, 472, 104, 83, 191, 51,
	65, 485, 36, -38, -59, -318, -84, -191, 23, -12,
	542, 533, 30, 33, 52, 46, 44, 39, 55, 37,
	45, 48, 62, -112, -97, 103, 532, 40, 23, -114,
	-119, -118, 532, -5, -5, -190, 83, 83, 61, -138,
	64, 61, -13, -5, 532, 123, 371, 31, -153, -318,
	-351, -307, 355, 31, -17, 28, -5, -375, 532, -375,
	-390, 212, 199, 316, -7, -357, -359, 532, 481, 84,
	-366, -327, -107, -108, -332, -333, 26, 29, -67, 534,
	-65, -315, -316, -6, -91, 532, 268, 389, -14, -14,
	-14, -14, -14, 29, -352, 29, -325, 28, -318, 542,
	61, -417, 118, 515, 371, 371, -239, 28, 515, -240,
	-5, 118, -256, 514, 472, 382, 285, 271, -417, 118,
	-417, 118, 118, 169, 336, 474, 195, 450, -272, 532,
	74, 461, 202, 401, 413, 412, 461, 413, 412, -318,
	310, 154, -14, 123, 61, -272, 299, 412, 532, -320,
	450, 61, 371, -318, 450, 61, -310, 91, 339, 343,
	-68, -159, -416, 70, -159, -159, 70, 347, -28, -28,
	-318, 61, -417, -318, -284, 399, 29, 45, -284, 399,
	29, -7, 61, 533, 61, 61, 61, 61, 118, 40,
	31, 118, 40, 31, -363, 118, -364, 514, 31, 118,
	61, 61, 399, 83, 83, -318, -7, 61, 61, 61,
	61, 61, 61, -318, -318, 399, 61, 61, 61, 61,
	-14, -14, -14, -14, 61, 209, 156, 156, 156, -353,
	-292, -291, 200, 513, 262, 287, 62, 386, 410, 459,
	465, -294, 248, 407, 444, 450, 308, -16, -14, -12,
	-7, -14, -7, -67, -163, -81, -84, -60, -60, 56,
	56, -60, 532, -60, -83, -83, -163, -317, 29, -318,
	458, -409, -411, 390, 400, 422, 542, -60, 6, -60,
	6, -171, 64, -318, -170, -67, -38, -38, -38, -38,
	-38, -38, -38, -38, -38, -38, -38, -38, -38, -38,
	47, 31, -38, 46, 44, 37, 45, 48, -38, -14,
	56, 58, -38, -96, 59, 60, -95, -100, 532, 61,
	-6, -58, 533, 542, -84, -52, 531, -49, -84, -91,
	-48, -47, 51, -88, -84, 533, 533, -53, 191, 21,
	41, -54, -38, -66, -63, -171, -84, 531, 543, 533,
	533, -192, 85, 31, 533, -38, -120, 74, -133, 104,
	105, -113, -117, -5, 87, -5, -171, 542, 528, -115,
	-118, -56, -121, 65, -172, -173, -320, -100, 86, -183,
	532, -196, -206, -216, -197, 128, 126, 127, -5, -86,
	-173, -139, 113, -139, 542, 533, -234, -235, -238, -239,
	-241, -240, 46, -14, 123, 29, -283, 36, 532, 29,
	74, 31, 405, -382, -383, -385, 23, 322, 459, 485,
	-386, 216, 442, 301, 435, 483, 278, 419, 325, 31,
	238, 128, 446, -373, 367, 94, -336, -376, 533, -377,
	-378, -380, -66, -79, 45, 362, 501, 191, -63, -67,
	427, -382, 405, -392, -391, 97, 99, 98, 463, 123,
	199, -314, 537, -358, 510, -360, -365, -361, -378, 4,
	-318, 481, -326, -296, -26, -17, -5, -253, -65, 533,
	542, 528, -199, -198, -200, -5, 532, -314, -314, -314,
	-314, -314, -14, -354, 415, 480, 64, 24, -7, 23,
	31, -153, -286, -7, -7, -7, -318, -318, 31, -239,
	28, -67, -7, 532, -260, -278, 32, 83, 504, 504,
	-279, 83, -5, -60, -7, 28, -5, 28, -7, -7,
	506, 224, 341, -7, -273, -274, -6, -7, -7, 21,
	104, 461, 413, 461, 413, -7, 328, -7, 21, 104,
	-7, 328, -318, 412, -366, -35, 111, 79, 40, 83,
	328, -31, -33, -304, 94, 197, 27, -10, -6, -284,
	-287, 399, -7, -7, -318, -284, 399, -7, -7, -159,
	-14, -14, -159, -159, -284, 399, -307, -7, -7, -284,
	399, 61, -417, -318, 450, 61, -417, -320, 399, -7,
	-7, -7, -7, -7, -7, 47, -7, 28, -38, 47,
	-7, 532, 47, -7, -7, -11, 61, -7, -7, 399,
	74, -7, -7, -7, -7, -7, -7, 399, 399, 61,
	-11, -11, -7, -7, 399, 399, 399, 399, -7, -7,
	-62, -25, 28, -62, -355, 61, -7, -14, -329, 532,
	-67, -328, -330, 222, 280, -91, -328, -328, 131, -67,
	-317, -317, -317, 74, -317, 533, 533, 533, 57, 57,
	533, -84, 533, -317, -16, -323, 36, -408, 469, 230,
	390, -160, -174, 65, -172, 47, 42, -38, -38, -96,
	59, -95, 61, 42, 57, -39, -40, 535, 536, -39,
	-84, -38, -56, -38, 531, 531, 542, 533, 533, -46,
	-47, 264, -38, -89, 533, -85, 542, -54, -53, -53,
	16, 17, -174, 533, -59, -38, 532, 85, -122, 101,
	102, 156, 533, 542, -56, -121, -119, -38, 533, 542,
	-122, -38, 121, 542, 81, -184, 75, 82, 79, 77,
	78, 76, -177, -176, 23, -5, -177, -100, -196, -206,
	-216, -100, -183, -173, -177, -177, -177, -205, 519, 64,
	532, 532, -55, 74, -145, -62, 114, 115, -145, -5,
	533, 542, -318, -236, 532, -318, -318, 23, -272, -13,
	-318, -320, 29, -381, 67, 47, -79, -63, -388, -334,
	213, 404, -385, -387, -62, -165, -384, 131, 74, 419,
	255, 318, 325, -159, -159, -14, -5, -369, 424, 458,
	533, 542, 40, 528, -66, -79, -380, -79, 362, -80,
	-63, -388, 74, 33, 123, -392, 533, 533, 510, 542,
	70, 533, 542, 528, -153, -318, 210, -326, -254, 118,
	-255, -257, 39, 31, 47, 472, 382, 514, 40, 393,
	289, 253, 312, -316, -295, -79, -21, -92, -159, -62,
	356, -93, 62, 535, 536, 533, 542, -67, -349, -350,
	-62, -314, 64, -7, -165, -165, -28, -97, 29, -297,
	83, 61, 61, -244, 131, 40, -27, 283, 29, 31,
	-301, -300, 440, -256, 271, -38, 532, -251, 41, 31,
	308, 532, -278, 532, 532, -7, -290, 27, 94, 402,
	197, -309, -162, -30, -311, 403, 94, -251, 29, -317,
	29, -317, -34, -5, 40, 533, 542, 528, 534, -7,
	-7, -7, -7, 419, 419, 328, 308, 419, 533, 542,
	-304, -304, -10, -32, -62, 61, -417, 118, 94, 365,
	61, 94, 365, 61, 61, 61, -417, -7, -7, -284,
	399, -7, -7, -7, -284, 399, 61, 61, -317, 29,
	-364, -38, -251, -7, 399, 399, 61, -318, 61, 61,
	-7, 61, 61, 61, 61, 61, 61, -62, 31, -165,
	-67, -14, -14, -57, 532, -67, -14, -82, -82, 533,
	-317, 247, 355, -38, -38, 42, 42, -39, -39, -38,
	-38, -38, 30, 14, 535, 536, 537, 538, 539, 540,
	526, 527, 528, 18, 19, 20, -39, -39, 30, 533,
	42, 533, -49, 267, -38, 107, 533, 191, -54, -85,
	-85, 542, -85, -38, -38, 531, -98, -167, -127, 532,
	74, -97, -97, 103, -117, -122, 528, -118, 123, -173,
	75, 75, -173, -184, 75, -185, 80, -185, -185, -5,
	532, -177, -177, -177, -177, 533, 125, 532, -40, 134,
	-221, -38, -38, -28, -147, -414, 83, -267, 311, -238,
	-249, -268, -269, 371, -237, -242, -243, -240, -5, -236,
	532, 123, 371, -97, 533, -351, -279, -7, -382, 532,
	74, 207, -38, 542, 542, 465, 47, 255, 318, -377,
	-38, -38, -79, -79, 539, -80, -318, -391, -13, 74,
	70, -365, -358, -361, 4, -295, -283, 532, -366, -7,
	-14, 253, 47, -260, 504, 532, -39, -318, -306, 202,
	70, 254, 300, 532, -200, -211, 39, 533, 542, -14,
	-352, -323, -325, -283, -7, -7, -7, 87, -239, 29,
	-299, -298, 231, -5, 40, 533, -13, -252, 31, 253,
	312, 355, 41, -7, -13, -251, -13, -247, -246, -131,
	-5, -197, 532, 31, 276, 299, 247, -310, 289, 31,
	276, 439, -272, -300, -298, -272, 289, -311, 94, 465,
	-28, 439, -5, -7, -274, -295, -6, 419, -7, -33,
	-7, -7, -7, 450, 70, -7, 450, 70, -7, -7,
	-7, -7, 61, 61, -417, 94, 365, 61, 61, -417,
	-7, -7, -7, 533, 61, 61, -7, 399, -7, -7,
	-7, -7, -7, -7, -7, -62, 212, 199, 29, 23,
	83, 83, -67, 356, 322, -317, 247, -38, -38, 30,
	30, 42, -38, -67, -39, -39, -39, -39, -39, -39,
	-39, -39, -39, -39, -39, -39, -38, -38, -38, -54,
	533, 533, 533, 533, 110, -155, -131, 118, -133, -38,
	-144, -7, -173, -173, -186, 83, 74, 75, -173, 532,
	-12, -176, -201, -202, -197, -212, 130, 532, 542, -232,
	-231, 516, -116, -125, -134, -135, 51, -149, -150, 532,
	-28, 151, -268, 532, 305, 272, -297, 70, 533, 542,
	-253, 36, -244, -234, -14, 123, -405, 36, -283, 532,
	74, -388, -204, -379, -66, -63, 47, -406, -62, 131,
	-67, 314, 465, 539, -397, 394, -318, -358, 533, 23,
	-13, -326, -255, 31, -313, 36, -313, -38, -153, 23,
	40, -91, -14, -62, 23, -276, 450, 36, 45, 64,
	-239, -302, 508, -5, 40, -251, 533, 253, 477, 300,
	254, 310, 533, 533, 533, 542, 36, -132, -124, 39,
	-132, -38, 47, 28, 28, -306, 47, 23, -161, -61,
	40, 535, 536, -306, -67, -159, -161, -317, -317, 528,
	61, 61, -7, -285, -366, -7, -285, 61, -7, -7,
	-7, 450, 70, -7, -7, -7, -317, -251, -7, -7,
	61, -317, -62, -62, -67, -7, -7, 533, 542, 542,
	-7, -38, -38, -38, -85, -193, 88, 98, 111, 533,
	542, -7, 156, -186, 532, -38, -173, -12, 533, 533,
	542, -203, 23, 124, -40, -213, 70, -214, -215, -39,
	40, -38, 167, -122, -125, -126, 30, -126, 106, 31,
	-148, 116, 117, 150, 47, 155, 152, 153, 42, 154,
	149, -151, -156, -6, -149, -62, -297, -15, -318, -250,
	228, 231, 234, 252, 299, 289, 309, 439, 440, 21,
	-250, -37, 36, 169, -5, -242, 508, -268, 533, -236,
	-318, 514, 217, 58, 23, -155, -320, 542, 533, -79,
	314, 267, -389, -4, -334, 465, 465, -393, 131, -398,
	-400, -395, 349, 503, -404, 64, 533, -97, 533, -277,
	83, -314, -277, 533, -261, 338, 299, 532, 533, -97,
	-7, 532, 532, 532, -253, 532, -262, 304, -262, 393,
	-262, -246, -91, 62, -282, -14, -14, 533, 29, 29,
	532, 23, -211, -295, -7, -7, -289, 360, 94, 542,
	-289, 94, -7, 61, -7, -285, 61, -7, 533, -67,
	356, -67, 533, -194, 91, 90, 89, 94, -174, -131,
	-97, -12, 533, -205, -202, 532, -207, -208, -5, -213,
	70, -40, 133, 156, 542, 533, 23, -39, -220, 23,
	149, 107, -38, 107, 106, -362, -362, -362, -362, 153,
	31, 47, -62, 533, 542, -157, -164, -159, 537, 40,
	532, -174, -37, 542, 533, -275, 74, -272, 506, 532,
	-253, -297, -267, -268, -236, 507, 514, 514, -97, 533,
	-279, -379, -382, 541, -67, -401, 51, -419, 263, -400,
	-396, 67, 412, -251, -318, -405, -283, 308, -258, 355,
	-266, -263, -264, 74, 79, 370, 430, -308, 532, -38,
	-323, -248, -245, -9, -84, -84, -303, -304, -313, 532,
	-313, -318, -313, 532, -136, 95, 96, -272, -132, -38,
	299, -29, 83, 450, -366, 450, -7, -289, 94, -7,
	533, 533, 533, -13, 92, 92, -114, 533, -198, 533,
	542, -67, 131, -213, -215, 542, -6, -224, 130, -5,
	-7, -128, -129, 110, 98, 99, -130, 110, 97, 70,
	-62, -62, -62, -62, -13, 537, 47, -13, 537, -156,
	-152, -158, -164, -275, -318, -276, 229, -270, -271, -5,
	-197, 532, -37, -268, -297, -244, 507, 507, -405, -281,
	304, 532, -388, 274, 532, -394, 412, 438, -362, 131,
	23, 450, 310, -264, 74, -263, 74, 98, 99, -307,
	533, 533, 542, -60, 533, 533, 533, 542, -277, -13,
	-277, -153, -277, -91, -137, 518, -136, 533, -308, -38,
	-7, -7, 450, 94, 70, 70, -174, -178, 23, 533,
	-208, -209, -210, 4, 40, 31, 47, 129, 125, -40,
	124, -222, -223, -221, 111, 94, 111, -123, 103, 532,
	40, 87, 108, 109, -13, 537, 533, 542, -276, 27,
	99, 381, 533, 542, -124, -124, -38, -275, -297, -37,
	-268, -260, 532, -155, -418, 287, 386, -38, -403, -5,
	263, -97, -7, -265, 355, 35, 24, 94, -265, 533,
	441, -245, 61, -304, -251, 533, -251, -261, -174, 533,
	92, 93, -137, -289, -289, -7, -5, -13, -13, -5,
	-210, -39, -39, 47, -39, -212, 532, 542, 23, -114,
	-133, -113, 87, 532, -158, 128, 128, -271, -282, -14,
	-282, 533, -276, -37, -275, -297, -283, -280, -131, 533,
	-374, 533, 412, -405, 196, 47, 40, 532, -266, -251,
	-289, 61, 83, 94, 94, 124, -217, -218, -5, 132,
	-223, -6, 156, 533, -84, -124, -275, -276, -37, -276,
	533, 542, -281, 532, -401, -153, -153, -84, -251, -41,
	-5, -5, -5, -207, 533, 542, 131, -67, -233, 129,
	-123, -123, 103, 533, -282, -276, -275, -174, -131, -260,
	-399, -402, -60, 6, -62, -6, 274, 533, 40, 533,
	-225, -226, 40, -227, 137, 47, 49, 43, 50, 139,
	-218, 125, -219, -231, 29, 129, 7, -133, -276, -283,
	533, 542, -418, -41, 533, 74, -38, 135, 140, -229,
	169, 36, -219, -219, 7, 124, 23, 156, -276, -402,
	-374, 83, 137, -230, 146, 145, 141, 135, 141, 135,
	142, 143, -229, -225, 532, -7, -123, -174, 532, -5,
	-228, -226, 144, 144, 141, 141, 135, 141, 135, 141,
	-230, -217, 124, -399, 74, 74, 74, 141, 141, -228,
	533, 532, 533, 139, 137, 147, 147, -217, -226, 148,
	148, 533, 74, 137,
}

var yyDef = [...]int16{
	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 1244, 1245, 0, 1477, -2, 1540, 1540,
	0, 0, 0, 1249, 1303, 0, 1335, 0, 1254, 0,
	0, 0, -2, 0, 0, 0, 0, 0, 0, 1476,
	0, 0, 0, 0, 35, 0, 0, 0, 0, 0,
	0, 0, 1605, 1606, 0, 0, -2, 1778, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1539, 0, 0, 0, 0, 0, 1920, 1916, 1917, 1918,
	0, 0, 1922, 1923, 1924, 0, 0, 0, 1523, 0,
	1526, 1527, 1528, 1529, 1530, 1531, 0, 1901, 233, 344,
	378, 1906, 2225, 0, 461, 117, 334, -2, 325, 411,
	2240, 52, 53, 54, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 138, 139, 140, 141, 142, 143, 144,
	145, 146, 147, 148, 149, 150, 151, 152, 153, 154,
	155, 156, 157, 158, 159, 160, 161, 162, 163, 164,
	165, 166, 167, 168, 169, 170, 171, 172, 173, 174,
	175, 176, 177, 178, 179, 180, 181, 182, 183, 184,
	185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
	195, 196, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 206, 207, 208, 209, 210, 211, 212, 213, 214,
	215, 216, 217, 218, 219, 220, 221, 222, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 295, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 306,
	307, 308, 309, 310, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 322, 323, 324, 326, 327,
	328, 329, 330, 331, 332, 333, 335, 336, 337, 338,
	339, 340, 341, 342, 343, 345, 346, 347, 348, 349,
	350, 351, 352, 353, 354, 355, 356, 357, 358, 359,
	360, 361, 362, 363, 364, 365, 366, 367, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 379, 380,
	381, 382, 383, 384, 385, 386, 387, 388, 389, 390,
	391, 392, 393, 394, 395, 396, 397, 398, 399, 400,
	401, 402, 403, 404, 405, 406, 407, 408, 409, 410,
	412, 413, 414, 415, 416, 417, 418, 419, 420, 421,
	422, 423, 424, 425, 426, 427, 428, 429, 430, 431,
	432, 433, 434, 435, 436, 437, 438, 439, 440, 441,
	442, 443, 444, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 457, 458, 459, 460, 462,
	463, 464, 465, 466, 467, 468, 469, 470, 471, 472,
	473, 474, 475, 476, 477, 1915, 1907, 461, 378, 344,
	1911, 1912, 117, 233, 251, 325, 334, 411, 1250, 0,
	0, 0, 1256, 0, 1334, 1336, 1253, 1278, 1279, 67,
	0, 344, 378, 461, 0, 1300, 308, 1305, 70, 62,
	1301, 0, 2, 0, 0, 1283, 0, 0, 0, 1246,
	2118, 0, 0, 0, 0, 48, 0, 0, 0, 0,
	0, -2, 0, -2, 202, 1546, 84, 0, 1234, 0,
	1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229,
	1230, 1231, 1232, 1233, 2139, 0, 0, 202, 1708, 202,
	0, 1607, 1608, 1609, 1610, 0, 202, 0, 0, 202,
	0, 0, 202, 0, 202, 0, 0, 0, 0, 0,
	1132, 0, -2, -2, 1171, 478, 479, 480, 481, 482,
	483, 484, 485, 486, 487, 488, 489, 490, 491, 492,
	493, 494, 495, 496, 497, 498, 499, 500, 0, 0,
	0, 0, 0, 0, 0, 1815, 1816, 1817, 1818, 1819,
	2260, 2261, 2262, 2263, 0, 0, 0, 0, 202, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 40, 86, 202, 40,
	63, 0, 202, 40, 202, 1537, 1163, 1164, 1165, 1166,
	1167, 1168, 1177, 1180, 1181, 1182, 1183, 1184, 1215, 164,
	1177, 1177, 1177, 1190, 1191, 1192, 1193, 1194, 1211, 1211,
	1169, 1170, 1213, 1202, 1213, 1213, 1197, 0, 1213, 40,
	202, 0, 1919, 0, 1921, 0, 1521, 1522, 1525, 48,
	1902, 344, 1903, 119, 0, 1904, 0, 2266, 0, 0,
	2272, 0, 0, 0, 0, 0, 0, 2228, 1114, 2229,
	2230, 2255, 2256, 2231, 2258, 2259, 0, 1908, 0, 1910,
	1247, 1248, 1341, 1255, 1257, 1261, 1262, 1031, 0, 0,
	0, 0, 1093, 1094, 1128, 0, 1097, 1098, 1099, 424,
	0, 1104, 1105, 428, 1216, 271, 1118, 1107, 1108, 1109,
	1110, 1111, 1112, 1147, 1237, 457, 1113, 0, 1341, 0,
	1280, 68, 1120, 0, 1123, 1281, 0, 0, 0, 1302,
	0, 0, 0, 1161, 0, 1441, 0, 1284, 0, 1463,
	0, 0, 0, 0, 0, 202, 2118, 0, 2154, 202,
	35, 47, 0, 0, 0, 0, 0, 0, 1611, 0,
	2124, 0, 0, 1545, 85, 0, 2137, 0, 0, 2138,
	0, 0, 0, 0, 0, 2144, 0, 0, 2162, 1706,
	1707, 0, 0, 1788, 1801, 1888, 1809, 0, 0, 0,
	1888, 1888, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1880, 0, 0, 0, 1790,
	1792, 0, 0, 0, 0, 1793, 0, 2157, 1686, 0,
	0, 0, 1690, 1705, 1693, 0, 0, 0, 0, 1708,
	-2, 1703, 0, 1795, 1888, 0, 0, 202, 0, 0,
	202, 0, 0, 1936, 0, 1133, 0, 0, 0, 0,
	2128, 0, 0, 0, 0, 0, 1930, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2169, 1540, 2184, 2185, 0, 0, 1890,
	38, 39, 0, 0, 1892, 0, 0, 0, 1895, 0,
	1178, 1177, 0, 1185, 0, 1186, 1187, 1188, 1189, 0,
	1206, 0, 0, 0, 1208, 1204, 1212, 0, 1195, 1196,
	1213, 1213, 1200, 1897, 0, 40, 202, 1524, 1925, 1926,
	1927, 1928, 0, 0, 0, 2232, 2233, 0, 2268, 2235,
	0, 2270, 2271, 2273, 2226, 2236, 2238, 2242, 2244, 2245,
	1511, 1512, 1513, 1514, 1515, 0, 0, 1518, 1115, 2237,
	2239, 2241, 2227, 2246, 2247, 2248, 2249, 2250, 2251, 2252,
	2253, 2254, 2234, 2264, 2265, 1909, 1264, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 594, 848, 766, 1051, 1053, 793, 0, 740,
	633, 601, 0, -2, 745, 935, 0, 1260, 845, 60,
	61, 579, 580, 581, 582, 583, 584, 585, 586, 587,
	588, 589, 590, 591, 592, 593, 595, 596, 597, 598,
	599, 600, 602, 603, 604, 605, 606, 607, 608, 610,
	611, 612, 613, 614, 615, 616, 617, 618, 619, 620,
	621, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 634, 635, 636, 637, 638, 639, 640, 641,
	642, 643, 644, 645, 646, 647, 648, 649, 650, 651,
	652, 653, 654, 655, 656, 657, 658, 659, 660, 661,
	662, 663, 664, 665, 666, 667, 668, 669, 670, 671,
	672, 673, 674, 675, 676, 677, 678, 679, 680, 681,
	682, 683, 684, 685, 686, 687, 688, 689, 690, 691,
	692, 693, 694, 695, 696, 697, 698, 699, 700, 701,
	702, 703, 704, 705, 706, 707, 708, 709, 710, 711,
	712, 713, 714, 715, 716, 717, 718, 719, 720, 721,
	722, 723, 724, 725, 726, 727, 728, 729, 730, 731,
	732, 733, 734, 735, 736, 737, 738, 739, 741, 742,
	743, 744, 746, 747, 748, 749, 750, 751, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 763,
	764, 765, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 782, 783, 784,
	785, 786, 787, 788, 789, 790, 791, 792, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 822, 823, 824, 825,
	826, 827, 828, 829, 830, 831, 832, 833, 834, 835,
	836, 837, 838, 839, 840, 841, 842, 843, 844, 846,
	847, 849, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
	1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1032, 1033, 1049, 1066, 1095, 1161, 0, 1099,
	465, 1100, 1101, 1102, 1103, 0, 0, 0, -2, 0,
	1146, 1238, 0, 0, 1264, 0, 1121, 1124, 1125, 1172,
	55, 56, 57, 58, 59, 501, 502, 503, 504, 505,
	506, 507, 508, 509, 510, 511, 512, 513, 514, 515,
	516, 517, 518, 519, 520, 521, 522, 523, 524, 525,
	526, 527, 528, 529, 530, 531, 532, 533, 534, 535,
	536, 537, 538, 539, 540, 541, 542, 543, 544, 545,
	546, 547, 548, 549, 550, 551, 552, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 578, 1122, 0, 0, 0, 1306, 1310, 0,
	0, 1317, 0, 0, 0, 0, 0, 0, 0, 1240,
	0, 0, 0, 1576, 1443, 0, 0, 0, 0, 1264,
	1454, 0, 0, 1128, 1285, 1324, 0, 0, 1472, 1472,
	1469, 1470, 0, 65, 1614, 0, 0, 0, 1787, 0,
	2151, 2153, 0, 0, 0, 202, 34, 2033, 0, 2033,
	0, 2074, 2075, 0, 0, 0, 2136, 0, 0, 0,
	2220, 2219, 2221, 2222, 2223, 2224, -2, 35, 1666, 0,
	1174, 0, 2302, 2304, 1235, 1355, 0, 0, 0, 0,
	0, 0, 2146, 0, 2159, 0, 0, 202, 2118, 0,
	0, 0, 0, 1887, 0, 0, 1820, 202, 0, 1844,
	0, 0, 1723, 0, 1677, 0, 0, -2, 0, 0,
	0, 0, 0, 0, 1852, 1853, 0, 0, 1873, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1866,
	0, 0, 1868, 1869, 0, 1874, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1687, 1691, 1696, 1697,
	1688, 1689, 0, 1704, 1694, 1695, 0, 0, 0, 0,
	0, 0, 0, 0, 1797, 1888, 0, 0, 1799, 1888,
	0, 0, 0, 1929, 0, 0, 0, 0, 0, 1886,
	0, 0, 0, 0, 2131, 0, 2207, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 44, 0, 2167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1532, 1533, 1534, 1535, 1536, 1920, 40, 87, 40,
	64, 40, 0, 1538, 40, 1179, 0, 0, 0, 0,
	0, 0, 0, 0, 1198, 1199, 40, 1899, 0, 2218,
	0, 2267, 2269, 0, 0, 2277, 0, 1116, 1516, 1117,
	1517, 1320, 0, 1340, 1258, 1034, 1035, 1036, 1037, 1038,
	1039, 1040, -2, -2, -2, -2, -2, -2, 1047, 1048,
	1050, 0, -2, 0, 0, 1240, 0, 0, -2, 1062,
	0, 1064, 1065, 0, 0, 1241, 1071, 1242, 0, 0,
	1259, 1129, 1128, 0, 0, 0, 1155, 1156, 0, 0,
	1152, 1148, 0, 1239, 0, 1159, 1134, 1236, 0, 0,
	0, 1140, 1142, 0, -2, 1320, 0, 1126, 1123, 1282,
	1318, 0, 1308, 0, 69, 1162, 1598, 0, 0, 1448,
	1449, 0, 1450, 1128, 1447, 1442, 1324, 0, 0, 0,
	1459, 1458, 1598, 0, 1462, 1265, 1327, 1327, 0, 1270,
	0, 1327, 1327, 1327, 1345, 330, 477, 442, 67, 1131,
	0, 0, 1471, 0, 0, 2117, 0, 1613, 1615, 1617,
	1618, 1619, 0, 1643, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2047, 2032, 2034, 0, 0, 0, 2039,
	2040, 0, 2055, 2056, 2057, 2058, 0, 0, 2063, 0,
	0, 0, 0, 2068, 0, 0, 2071, 0, 2012, 2013,
	2015, 0, 0, 2022, 2023, 2024, 2025, 2027, -2, 2029,
	0, 2047, 0, 0, 2077, 2079, 2080, 2081, 2083, 2076,
	0, 2135, 0, 0, 0, 0, 2190, 2194, 2192, 1169,
	2118, 0, 2123, 0, 0, 0, -2, 2127, 1175, 2301,
	0, 0, 0, 1354, 1356, 0, 2203, 2150, 2140, 2141,
	2142, 2143, 0, 2161, 0, 0, 0, 2166, 1708, 0,
	0, 1766, 1810, 1957, 0, 0, 0, 48, 0, 1822,
	202, 1641, 0, 0, 0, 1992, 0, 0, 0, 0,
	0, 0, 1542, 0, 1992, 202, 40, 202, 40, 1846,
	1849, 1851, 0, 1872, 0, 2001, 2004, 1850, 1854, 1857,
	1858, 0, 0, 0, 0, 1862, 0, 1859, 1860, 1861,
	1865, 0, 1867, 0, 1870, 1875, 2297, 2298, 2299, 0,
	0, 0, 2289, 2291, 345, 93, 165, 0, 1662, 1789,
	1802, 1888, 0, 1965, 1884, 1791, 0, 0, 1959, 1692,
	1698, 1699, 1700, 1702, 1794, 0, 2158, 1961, 0, 1796,
	1888, 0, 0, 0, 0, 0, 0, 0, 0, 1937,
	1938, 1939, 1940, 1941, 0, 2129, 40, 202, 1885, 2130,
	0, 0, 1992, 2134, 1944, 1945, 0, 0, 0, 0,
	0, 1951, 1952, 1953, 1954, 1955, 1956, 0, 0, 0,
	1982, 1983, 1984, 1985, 0, 0, 0, 0, 1990, 0,
	0, 0, 0, 2201, 2168, 0, 2171, 2172, 2173, 0,
	2175, 2176, 2177, 121, 183, 0, 2180, 2181, 0, 2183,
	1889, 1891, 1893, 0, 1896, 1176, 1214, 1211, 1209, 1210,
	1211, 0, 1201, 1898, 40, 2212, 0, 1905, 2274, 2275,
	2276, 2243, 1251, 0, 1263, 1052, 0, -2, -2, 0,
	0, 1072, 0, 0, 0, 0, 1077, 0, 0, 0,
	0, -2, 1096, 1162, 1153, 1154, 0, 1106, 1217, 0,
	1149, 0, 0, 1130, 1158, 0, 0, 1236, 1236, 1236,
	0, 0, 1252, 1337, 0, 1122, 0, 1309, 1440, 0,
	1579, 0, 0, 0, 1452, 1598, 1455, 1456, 0, 0,
	1461, 1322, 142, 0, 0, 0, 0, 0, 1297, 1297,
	1297, 1295, 1267, 1326, 0, 1331, 1268, 1327, 1327, 1327,
	1327, 1327, 1270, 0, 1272, 1274, 1276, 1342, 0, 0,
	0, 0, -2, 0, 1708, 1473, 1474, 1475, -2, 66,
	1756, 0, 1623, 1758, 0, 1643, 0, 0, 1786, 0,
	2154, 1781, 0, 2033, 0, 0, 2028, 1177, 2009, 2045,
	0, 0, 2035, 2036, 2041, 2037, 2038, 0, 0, 0,
	2061, 2062, 2064, 2065, 2066, 2067, 2069, 2070, 344, 378,
	2011, 0, 0, 0, 0, 2021, 0, 2020, 2026, 1177,
	0, 2010, 0, 0, 0, 0, 2186, 2187, 0, 0,
	0, 2193, 0, 0, 1787, 0, 0, 2126, 1665, 0,
	1668, 1669, 0, 0, 1714, 1677, 0, 0, 0, 0,
	0, 1671, 0, 2303, 2305, 2278, 2279, 2280, 2281, 2282,
	2283, 1218, 271, 1222, 1223, 2148, 0, 1360, 0, 2202,
	2204, 2145, 0, 2163, 2164, 2165, 2162, 2218, 0, 1787,
	0, 0, 0, 1881, 0, 1653, 1882, 1883, 0, 0,
	1637, 1640, 0, 1722, 1781, 0, 0, 1726, 1675, 0,
	0, 0, 1992, 0, 0, 1780, 1824, 0, 0, 0,
	0, 1837, 0, 1843, 1680, -2, 0, 1845, 0, 1841,
	0, 1848, 1871, 2295, 2296, 2000, 0, 0, 0, 1855,
	1863, 1856, 1864, 1876, 1877, 0, 0, 1878, 2288, 0,
	2292, 2293, 2294, 1661, 1663, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1963, 0, 1798,
	1888, 0, 1967, 0, 1800, 1888, 0, 0, 2132, 0,
	2206, 0, 2209, 1946, 0, 0, 0, 0, 0, 0,
	1981, 0, 0, 0, 0, 0, 0, 2197, 0, 2170,
	0, 0, 0, 1931, 0, 0, 40, 1205, 1207, 1203,
	1900, 2216, 0, 1319, -2, 0, 0, 0, 0, -2,
	-2, 1063, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1079, 1080, 0, 1243,
	0, 1160, 1157, 1145, 1151, 0, 1135, 0, 1141, 0,
	0, 0, 0, 1143, 1144, 1127, 0, 1597, 0, 0,
	0, 1444, 1445, 0, 1451, 1453, 0, 1460, 0, 1266,
	0, 0, 0, 0, 0, 1292, 1296, 1293, 1294, 1329,
	0, 1269, 1273, 1275, 1277, 1286, 1344, 0, 0, 472,
	0, 1427, 0, 1483, 1708, 0, 1543, 1758, 0, 1616,
	1620, 1766, 1757, 0, 0, 1644, 1646, 1647, 1666, 0,
	1614, 0, 0, 2122, 1787, 2152, 0, 0, 2047, 0,
	0, 2050, 2048, 0, 0, 0, 0, 2059, 2060, 2014,
	2016, 2017, 2018, 2019, 0, 0, 2085, 2078, 2082, 0,
	0, 2191, 0, 2195, 0, 2196, 0, 0, 2220, 0,
	1670, 1672, 1713, 2285, 2285, 0, 1718, 2118, 0, 1678,
	0, 1673, 1674, 0, 1357, 1358, 0, 2149, 0, 2147,
	2160, 2210, 0, 1772, 1765, 1969, 1975, 0, 1821, 0,
	1658, 1636, 0, 1638, 1639, 1992, 0, 1993, 0, 1995,
	0, 0, 1676, 1775, 0, 1728, 0, 0, 1733, 0,
	1590, 1590, 0, 0, 1828, 1838, 1541, 1684, 0, 0,
	0, 0, 1832, 1834, 1835, 1833, 0, 1681, 0, 0,
	0, 0, 40, 40, 2002, 2003, 2006, 1879, 2300, 2290,
	1958, 0, 0, 0, 0, 1966, 0, 0, 1960, 1971,
	1962, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1943, 1942, 40, 1992, 0, 0, 1949, 0, 1979, 1980,
	1986, 1987, 1988, 1989, 40, 2200, 0, 0, 43, 0,
	0, 0, 0, 0, 0, 1894, 2217, -2, -2, 0,
	0, 0, -2, 1078, 1081, 1082, 1083, 1084, 1085, 1086,
	-2, -2, -2, -2, -2, -2, -2, -2, 1150, 1236,
	1136, 1138, 1139, 1313, 0, 0, 1582, 0, 0, 1457,
	1323, 1325, 1287, 0, 1289, 0, 0, 0, 1291, 0,
	0, 1271, 0, 1346, 1350, 0, 0, 0, 0, 1386,
	1426, 0, 1598, 1465, 1565, 1565, 0, 1467, 1480, 0,
	1483, 0, 1766, 0, 0, 0, 51, 0, 1642, 0,
	1648, 0, 1758, 0, 1643, 0, 2113, 0, 0, 0,
	0, 2007, 0, 1351, 0, 1173, 0, -2, 2042, 0,
	2043, 2053, 2030, 0, 2095, 0, 2112, 0, 2188, 0,
	0, 2125, 1667, 0, 1774, 0, 1774, 0, 1742, 0,
	1679, 0, 1359, 2205, 0, 2215, 0, 0, 0, 0,
	1823, 1666, 0, 1634, 1635, 1724, 1738, 1994, 1998, 1996,
	1997, 1999, 1738, 0, 1738, 0, 0, 1584, 37, 0,
	1585, 0, 1825, 0, 0, 1685, 1826, 0, 1830, 1519,
	1520, 0, 0, 0, 1360, 1683, 1831, 1840, 1847, 0,
	0, 0, 1812, 0, 1813, 1812, 0, 0, 1973, 1964,
	0, 0, 0, 1977, 1968, 0, 2133, 2208, 1947, 1948,
	0, 1991, 2198, 2199, 0, 2178, 2179, 1932, 0, 0,
	2182, -2, -2, -2, 0, 1316, 0, 0, 1575, 1320,
	0, 1578, 0, 1288, 0, 1299, 1290, 0, 1330, 1345,
	0, 1348, 0, 0, 1363, 0, 111, 0, 1367, 0,
	0, 1388, 1425, 1464, 1466, 0, 0, 0, 1560, 0,
	1482, 1484, 1485, 1546, 1546, 1488, 1489, 1546, 1546, 0,
	0, 0, 1499, 1507, 1320, 1478, 51, 0, 71, 1621,
	1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633,
	1622, 1770, 0, 0, 0, 1645, 1666, 1766, 1756, 1758,
	1643, 0, 0, 0, 0, 0, 1781, 0, 2033, 1353,
	2054, 2046, 0, 2051, 2052, 0, 2031, 2101, 2097, 2084,
	2086, 0, 2089, 2090, 1992, 0, 2189, 2122, 1787, 1715,
	0, 2284, 1716, 1732, 1747, 0, 1712, 0, 1219, 2218,
	1771, 0, 0, 0, 1664, 0, 2285, 0, 2285, 0,
	2285, 1734, 1735, 271, 1593, 36, 1589, 1590, 1829, 1839,
	0, 0, 2287, 2005, 1970, 1976, 1803, 1811, 0, 0,
	1805, 0, 1972, 0, 1812, 0, 0, 1950, 2174, 0,
	0, 0, 1137, 1307, 0, 0, 0, 0, 1577, 1583,
	1446, 0, 1328, 1343, 1347, 0, 0, 1373, 0, 1364,
	0, 1365, 1361, 1362, 0, 0, 0, 1370, 1390, 0,
	0, 0, 1564, 0, 1562, 0, 0, 0, 0, 0,
	0, 0, 1498, 1481, 0, 1501, 1502, 1503, 1504, 1505,
	0, 1468, 1770, 0, 1755, 1772, 0, 49, 50, 0,
	1649, 51, 1758, 1766, 0, 2119, 0, 0, 2122, 1783,
	0, 1352, 2047, 2049, 2044, 0, 0, 0, 2096, 2087,
	1546, 2091, 2092, 0, 2111, 2114, 0, 0, 1717, 0,
	1719, 1743, 1744, 0, 1739, 1740, 1741, 1720, 0, 0,
	2211, 0, 1655, 0, 0, 0, 0, 1659, 1774, 0,
	1774, 2118, 1774, 0, 1596, 1591, 1592, 1593, 1586, 0,
	1712, 1842, 0, 0, 1814, 0, 1974, 1807, 0, 1978,
	1933, 1935, 1934, 0, 0, 0, 1320, 1333, 0, 1371,
	0, 1375, 0, 1366, 1368, 0, 1369, 0, 0, 1387,
	1424, 1555, 1556, 0, 0, 1567, 1557, 0, 0, 0,
	1486, 1487, 1490, 1491, 1492, 1493, 0, 1496, 1497, 1500,
	0, 1508, 1510, 1772, 72, 1601, 0, 0, 1760, 1590,
	1590, 0, 1770, 1766, 51, 1758, 2120, 2121, 2115, 1677,
	0, 0, 2008, 0, 0, 2094, 2098, 2099, 0, 0,
	0, 0, 1731, 1745, 0, 1746, 0, 0, 0, 0,
	0, 1650, 0, 1654, 1651, 0, 1657, 0, 1992, 0,
	1992, 1742, 1320, 0, 1587, 0, 1596, 1827, 1836, 2286,
	1812, 1812, 0, 0, 0, 0, 1574, 1298, 0, 1349,
	1374, 1377, 1378, 0, 0, 0, 1383, 0, 1376, 0,
	0, 1389, 1391, 0, 1558, 0, 1559, 1568, 0, 0,
	0, 0, 1561, 1563, 1494, 1495, 1506, 0, 1599, 1767,
	0, 0, 1759, 0, 37, 37, 0, 1772, 51, 1770,
	1766, 1787, 0, 0, 0, 2102, 2103, 0, 2088, 2093,
	0, 2122, 1773, 1748, 0, 1751, 1752, 0, 1749, 1711,
	1721, 1656, 0, 1660, 1725, 1737, 1727, 1747, 1992, 1736,
	1594, 1595, 1588, 1804, 1806, 1812, 0, 0, 0, 1332,
	1379, 1380, 1381, 1382, 1384, 0, 0, 0, 0, 1566,
	0, 0, 1572, 0, 1509, 1768, 1769, 1761, 1762, 36,
	1763, 1590, 1603, 1770, 1772, 51, 1772, 0, 1784, 1783,
	0, 2100, 2101, 2116, 1750, 2118, 2118, 0, 1992, 1730,
	1808, 0, 0, 0, 0, 0, 0, 1430, 0, -2,
	1392, 1393, 0, 0, 0, 37, 1772, 1602, 1770, 1320,
	1782, 0, 1677, 2106, 0, 1753, 1754, 0, 1729, 0,
	1315, 1311, 1312, 0, 1409, 0, 0, 1439, 0, 1428,
	1569, 1570, 0, 1573, 1764, 1600, 1772, 1776, 1785, 1787,
	0, 2104, 2107, 2108, 2109, 2110, 0, 1652, 0, 1372,
	0, 0, 0, 1395, 1396, 1397, 1398, 1399, 1400, 1403,
	1431, 1432, 1418, 1439, 1439, 0, 0, 0, 1604, 1772,
	2072, 0, 0, 0, 1385, 0, 1394, 1401, 1402, 1423,
	0, 0, 1418, 1409, 1438, 0, 0, 0, 1320, 2105,
	0, 0, 1408, 1407, 0, 0, 1410, 0, 1412, 0,
	0, 0, 1423, 1435, 0, 0, 1571, 1777, 2106, 1314,
	1433, 0, 1420, 1422, 1411, 1413, 0, 1416, 0, 1417,
	1407, 0, 0, 0, 0, 0, 0, 1414, 1415, 1434,
	1436, 0, 2073, 1404, 1405, 0, 0, 0, 0, 1419,
	1421, 1437, 0, 1406,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 539, 3, 3,
	532, 533, 537, 535, 542, 536, 534, 538, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 543, 541,
	526, 528, 527, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 530, 3, 531, 540,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var yyTok3 = [...]uint16{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 464, 57807, 465, 57808, 466, 57809, 467,
	57810, 468, 57811, 469, 57812, 470, 57813, 471, 57814, 472,
	57815, 473, 57816, 474, 57817, 475, 57818, 476, 57819, 477,
	57820, 478, 57821, 479, 57822, 480, 57823, 481, 57824, 482,
	57825, 483, 57826, 484, 57827, 485, 57828, 486, 57829, 487,
	57830, 488, 57831, 489, 57832, 490, 57833, 491, 57834, 492,
	57835, 493, 57836, 494, 57837, 495, 57838, 496, 57839, 497,
	57840, 498, 57841, 499, 57842, 500, 57843, 501, 57844, 502,
	57845, 503, 57846, 504, 57847, 505, 57848, 506, 57849, 507,
	57850, 508, 57851, 509, 57852, 510, 57853, 511, 57854, 512,
	57855, 513, 57856, 514, 57857, 515, 57858, 516, 57859, 517,
	57860, 518, 57861, 519, 57862, 520, 57863, 521, 57864, 522,
	57865, 523, 57866, 524, 57867, 525, 57868, 529, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:464
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:479
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:487
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:502
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:513
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:514
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:515
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:516
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:517
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:518
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:519
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:520
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:521
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:522
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:523
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:524
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:525
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:526
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:527
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:528
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:529
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:530
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:531
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:532
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:533
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:534
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:535
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:536
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:537
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:538
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:539
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:540
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 33:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:542
		{
			yyVAL.stmt = nil
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:553
		{
			yyVAL.str = yyDollar[1].str
		}
	case 35:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:554
		{
			yyVAL.str = ""
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:558
		{
			yyVAL.list = yyDollar[1].list
		}
	case 37:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:559
		{
			yyVAL.list = nil
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:563
		{
			yyVAL.dropBehav = ast.DropCascade
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:564
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 40:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:565
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:569
		{
			yyVAL.ival = 1
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:570
		{
			yyVAL.ival = 0
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:574
		{
			yyVAL.ival = 1
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:575
		{
			yyVAL.ival = 0
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:579
		{
			yyVAL.ival = 1
		}
	case 46:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:580
		{
			yyVAL.ival = 0
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:584
		{
			yyVAL.bval = true
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:585
		{
			yyVAL.bval = false
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:589
		{
			yyVAL.list = yyDollar[2].list
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:590
		{
			yyVAL.list = nil
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:591
		{
			yyVAL.list = nil
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:600
		{
			yyVAL.str = yyDollar[1].str
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:601
		{
			yyVAL.str = yyDollar[1].str
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:602
		{
			yyVAL.str = yyDollar[1].str
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:606
		{
			yyVAL.str = yyDollar[1].str
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:607
		{
			yyVAL.str = yyDollar[1].str
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:608
		{
			yyVAL.str = yyDollar[1].str
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:609
		{
			yyVAL.str = yyDollar[1].str
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:610
		{
			yyVAL.str = yyDollar[1].str
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:613
		{
			yyVAL.str = yyDollar[1].str
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:614
		{
			yyVAL.str = yyDollar[1].str
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:617
		{
			yyVAL.str = yyDollar[1].str
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:622
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:626
		{
			list := yyDollar[1].list
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = list
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:635
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:639
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:647
		{
			yyVAL.rangevar = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:654
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list.Items) == 1 {
				if str, ok := yyDollar[2].list.Items[0].(*ast.String); ok {
					yyVAL.rangevar = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.rangevar = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.rangevar = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:683
		{
			yyVAL.list = yyDollar[2].list
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:684
		{
			yyVAL.list = nil
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:689
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:693
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:706
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:712
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:718
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:724
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:730
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:737
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:744
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_UNLOGGED
			yyVAL.node = rangeVar
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:750
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:756
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:765
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:769
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				nodes.Append(item)
			}
			yyVAL.list = nodes
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:781
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:785
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].list)
			yyVAL.list = list
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:795
		{
			yyVAL.str = "abort"
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:796
		{
			yyVAL.str = "absent"
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:797
		{
			yyVAL.str = "absolute"
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:798
		{
			yyVAL.str = "access"
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:799
		{
			yyVAL.str = "action"
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:800
		{
			yyVAL.str = "add"
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:801
		{
			yyVAL.str = "admin"
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:802
		{
			yyVAL.str = "after"
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:803
		{
			yyVAL.str = "aggregate"
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:804
		{
			yyVAL.str = "also"
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:805
		{
			yyVAL.str = "alter"
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:806
		{
			yyVAL.str = "always"
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:807
		{
			yyVAL.str = "asensitive"
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:808
		{
			yyVAL.str = "assertion"
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:809
		{
			yyVAL.str = "assignment"
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:810
		{
			yyVAL.str = "at"
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:811
		{
			yyVAL.str = "atomic"
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:812
		{
			yyVAL.str = "attach"
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:813
		{
			yyVAL.str = "attribute"
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:814
		{
			yyVAL.str = "backward"
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:815
		{
			yyVAL.str = "before"
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:816
		{
			yyVAL.str = "begin"
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:817
		{
			yyVAL.str = "breadth"
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:818
		{
			yyVAL.str = "by"
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:819
		{
			yyVAL.str = "cache"
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:820
		{
			yyVAL.str = "call"
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:821
		{
			yyVAL.str = "called"
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:822
		{
			yyVAL.str = "cascade"
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:823
		{
			yyVAL.str = "cascaded"
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:824
		{
			yyVAL.str = "catalog"
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:825
		{
			yyVAL.str = "chain"
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:826
		{
			yyVAL.str = "characteristics"
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:827
		{
			yyVAL.str = "checkpoint"
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:828
		{
			yyVAL.str = "class"
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:829
		{
			yyVAL.str = "close"
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:830
		{
			yyVAL.str = "cluster"
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:831
		{
			yyVAL.str = "columns"
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:832
		{
			yyVAL.str = "comment"
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:833
		{
			yyVAL.str = "comments"
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:834
		{
			yyVAL.str = "commit"
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:835
		{
			yyVAL.str = "committed"
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:836
		{
			yyVAL.str = "compression"
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:837
		{
			yyVAL.str = "conditional"
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:838
		{
			yyVAL.str = "configuration"
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:839
		{
			yyVAL.str = "conflict"
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:840
		{
			yyVAL.str = "connection"
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:841
		{
			yyVAL.str = "constraints"
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:842
		{
			yyVAL.str = "content"
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:843
		{
			yyVAL.str = "continue"
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:844
		{
			yyVAL.str = "conversion"
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:845
		{
			yyVAL.str = "copy"
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:846
		{
			yyVAL.str = "cost"
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:847
		{
			yyVAL.str = "csv"
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:848
		{
			yyVAL.str = "cube"
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:849
		{
			yyVAL.str = "current"
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:850
		{
			yyVAL.str = "cursor"
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:851
		{
			yyVAL.str = "cycle"
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:852
		{
			yyVAL.str = "data"
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:853
		{
			yyVAL.str = "database"
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:854
		{
			yyVAL.str = "day"
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:855
		{
			yyVAL.str = "deallocate"
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:856
		{
			yyVAL.str = "declare"
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:857
		{
			yyVAL.str = "defaults"
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:858
		{
			yyVAL.str = "deferred"
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:859
		{
			yyVAL.str = "definer"
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:860
		{
			yyVAL.str = "delete"
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:861
		{
			yyVAL.str = "delimiter"
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:862
		{
			yyVAL.str = "delimiters"
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:863
		{
			yyVAL.str = "depends"
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:864
		{
			yyVAL.str = "depth"
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:865
		{
			yyVAL.str = "detach"
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:866
		{
			yyVAL.str = "dictionary"
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:867
		{
			yyVAL.str = "disable"
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:868
		{
			yyVAL.str = "discard"
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:869
		{
			yyVAL.str = "document"
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:870
		{
			yyVAL.str = "domain"
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:871
		{
			yyVAL.str = "double"
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:872
		{
			yyVAL.str = "drop"
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:873
		{
			yyVAL.str = "each"
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:874
		{
			yyVAL.str = "empty"
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:875
		{
			yyVAL.str = "enable"
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:876
		{
			yyVAL.str = "encoding"
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:877
		{
			yyVAL.str = "encrypted"
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:878
		{
			yyVAL.str = "enum"
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:879
		{
			yyVAL.str = "error"
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:880
		{
			yyVAL.str = "escape"
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:881
		{
			yyVAL.str = "event"
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:882
		{
			yyVAL.str = "exclude"
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:883
		{
			yyVAL.str = "excluding"
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:884
		{
			yyVAL.str = "exclusive"
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:885
		{
			yyVAL.str = "execute"
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:886
		{
			yyVAL.str = "explain"
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:887
		{
			yyVAL.str = "expression"
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:888
		{
			yyVAL.str = "extension"
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:889
		{
			yyVAL.str = "external"
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:890
		{
			yyVAL.str = "family"
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:891
		{
			yyVAL.str = "filter"
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:892
		{
			yyVAL.str = "finalize"
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:893
		{
			yyVAL.str = "first"
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:894
		{
			yyVAL.str = "following"
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:895
		{
			yyVAL.str = "force"
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:896
		{
			yyVAL.str = "format"
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:897
		{
			yyVAL.str = "forward"
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:898
		{
			yyVAL.str = "function"
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:899
		{
			yyVAL.str = "functions"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:900
		{
			yyVAL.str = "generated"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:901
		{
			yyVAL.str = "global"
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:902
		{
			yyVAL.str = "granted"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:903
		{
			yyVAL.str = "groups"
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:904
		{
			yyVAL.str = "handler"
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:905
		{
			yyVAL.str = "header"
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:906
		{
			yyVAL.str = "hold"
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:907
		{
			yyVAL.str = "hour"
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:908
		{
			yyVAL.str = "identity"
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:909
		{
			yyVAL.str = "if"
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:910
		{
			yyVAL.str = "immediate"
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:911
		{
			yyVAL.str = "immutable"
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:912
		{
			yyVAL.str = "implicit"
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:913
		{
			yyVAL.str = "import"
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:914
		{
			yyVAL.str = "include"
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:915
		{
			yyVAL.str = "including"
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:916
		{
			yyVAL.str = "increment"
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:917
		{
			yyVAL.str = "indent"
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:918
		{
			yyVAL.str = "index"
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:919
		{
			yyVAL.str = "indexes"
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:920
		{
			yyVAL.str = "inherit"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:921
		{
			yyVAL.str = "inherits"
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:922
		{
			yyVAL.str = "inline"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:923
		{
			yyVAL.str = "input"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:924
		{
			yyVAL.str = "insensitive"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:925
		{
			yyVAL.str = "insert"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:926
		{
			yyVAL.str = "instead"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:927
		{
			yyVAL.str = "invoker"
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:928
		{
			yyVAL.str = "isolation"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:929
		{
			yyVAL.str = "keep"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:930
		{
			yyVAL.str = "key"
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:931
		{
			yyVAL.str = "keys"
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:932
		{
			yyVAL.str = "label"
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:933
		{
			yyVAL.str = "language"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:934
		{
			yyVAL.str = "large"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:935
		{
			yyVAL.str = "last"
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:936
		{
			yyVAL.str = "leakproof"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:937
		{
			yyVAL.str = "level"
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:938
		{
			yyVAL.str = "listen"
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:939
		{
			yyVAL.str = "load"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:940
		{
			yyVAL.str = "local"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:941
		{
			yyVAL.str = "location"
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:942
		{
			yyVAL.str = "lock"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:943
		{
			yyVAL.str = "locked"
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:944
		{
			yyVAL.str = "logged"
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:945
		{
			yyVAL.str = "mapping"
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:946
		{
			yyVAL.str = "match"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:947
		{
			yyVAL.str = "matched"
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:948
		{
			yyVAL.str = "materialized"
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:949
		{
			yyVAL.str = "maxvalue"
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:950
		{
			yyVAL.str = "merge"
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:951
		{
			yyVAL.str = "method"
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:952
		{
			yyVAL.str = "minute"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:953
		{
			yyVAL.str = "minvalue"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:954
		{
			yyVAL.str = "mode"
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:955
		{
			yyVAL.str = "month"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:956
		{
			yyVAL.str = "move"
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:957
		{
			yyVAL.str = "name"
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:958
		{
			yyVAL.str = "names"
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:959
		{
			yyVAL.str = "nested"
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:960
		{
			yyVAL.str = "new"
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:961
		{
			yyVAL.str = "next"
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:962
		{
			yyVAL.str = "nfc"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:963
		{
			yyVAL.str = "nfd"
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:964
		{
			yyVAL.str = "nfkc"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:965
		{
			yyVAL.str = "nfkd"
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:966
		{
			yyVAL.str = "no"
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:967
		{
			yyVAL.str = "normalized"
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:968
		{
			yyVAL.str = "nothing"
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:969
		{
			yyVAL.str = "notify"
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:970
		{
			yyVAL.str = "nowait"
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:971
		{
			yyVAL.str = "nulls"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:972
		{
			yyVAL.str = "object"
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:973
		{
			yyVAL.str = "of"
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:974
		{
			yyVAL.str = "off"
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:975
		{
			yyVAL.str = "oids"
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:976
		{
			yyVAL.str = "old"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:977
		{
			yyVAL.str = "omit"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:978
		{
			yyVAL.str = "operator"
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:979
		{
			yyVAL.str = "option"
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:980
		{
			yyVAL.str = "options"
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:981
		{
			yyVAL.str = "ordinality"
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:982
		{
			yyVAL.str = "others"
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:983
		{
			yyVAL.str = "over"
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:984
		{
			yyVAL.str = "overriding"
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:985
		{
			yyVAL.str = "owned"
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:986
		{
			yyVAL.str = "owner"
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:987
		{
			yyVAL.str = "parallel"
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:988
		{
			yyVAL.str = "parameter"
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:989
		{
			yyVAL.str = "parser"
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:990
		{
			yyVAL.str = "partial"
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:991
		{
			yyVAL.str = "partition"
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:992
		{
			yyVAL.str = "passing"
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:993
		{
			yyVAL.str = "password"
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:994
		{
			yyVAL.str = "path"
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:995
		{
			yyVAL.str = "plan"
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:996
		{
			yyVAL.str = "plans"
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:997
		{
			yyVAL.str = "policy"
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:998
		{
			yyVAL.str = "preceding"
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:999
		{
			yyVAL.str = "prepare"
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1000
		{
			yyVAL.str = "prepared"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1001
		{
			yyVAL.str = "preserve"
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1002
		{
			yyVAL.str = "prior"
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1003
		{
			yyVAL.str = "privileges"
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1004
		{
			yyVAL.str = "procedural"
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1005
		{
			yyVAL.str = "procedure"
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1006
		{
			yyVAL.str = "procedures"
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1007
		{
			yyVAL.str = "program"
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1008
		{
			yyVAL.str = "publication"
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1009
		{
			yyVAL.str = "quote"
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1010
		{
			yyVAL.str = "quotes"
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1011
		{
			yyVAL.str = "range"
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1012
		{
			yyVAL.str = "read"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1013
		{
			yyVAL.str = "reassign"
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1014
		{
			yyVAL.str = "recheck"
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1015
		{
			yyVAL.str = "recursive"
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1016
		{
			yyVAL.str = "ref"
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1017
		{
			yyVAL.str = "referencing"
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1018
		{
			yyVAL.str = "refresh"
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1019
		{
			yyVAL.str = "reindex"
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1020
		{
			yyVAL.str = "relative"
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1021
		{
			yyVAL.str = "release"
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1022
		{
			yyVAL.str = "rename"
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1023
		{
			yyVAL.str = "repeatable"
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1024
		{
			yyVAL.str = "replace"
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1025
		{
			yyVAL.str = "replica"
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1026
		{
			yyVAL.str = "reset"
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1027
		{
			yyVAL.str = "restart"
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1028
		{
			yyVAL.str = "restrict"
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1029
		{
			yyVAL.str = "return"
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1030
		{
			yyVAL.str = "returns"
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1031
		{
			yyVAL.str = "revoke"
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1032
		{
			yyVAL.str = "role"
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1033
		{
			yyVAL.str = "rollback"
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1034
		{
			yyVAL.str = "rollup"
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1035
		{
			yyVAL.str = "routine"
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1036
		{
			yyVAL.str = "routines"
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1037
		{
			yyVAL.str = "rows"
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1038
		{
			yyVAL.str = "rule"
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1039
		{
			yyVAL.str = "savepoint"
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1040
		{
			yyVAL.str = "scalar"
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1041
		{
			yyVAL.str = "schema"
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1042
		{
			yyVAL.str = "schemas"
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1043
		{
			yyVAL.str = "scroll"
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1044
		{
			yyVAL.str = "search"
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1045
		{
			yyVAL.str = "second"
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1046
		{
			yyVAL.str = "security"
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1047
		{
			yyVAL.str = "sequence"
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1048
		{
			yyVAL.str = "sequences"
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1049
		{
			yyVAL.str = "serializable"
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1050
		{
			yyVAL.str = "server"
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1051
		{
			yyVAL.str = "session"
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1052
		{
			yyVAL.str = "set"
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1053
		{
			yyVAL.str = "sets"
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1054
		{
			yyVAL.str = "share"
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1055
		{
			yyVAL.str = "show"
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1056
		{
			yyVAL.str = "simple"
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1057
		{
			yyVAL.str = "skip"
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1058
		{
			yyVAL.str = "snapshot"
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1059
		{
			yyVAL.str = "source"
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1060
		{
			yyVAL.str = "sql"
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1061
		{
			yyVAL.str = "stable"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1062
		{
			yyVAL.str = "standalone"
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1063
		{
			yyVAL.str = "start"
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1064
		{
			yyVAL.str = "statement"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1065
		{
			yyVAL.str = "statistics"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1066
		{
			yyVAL.str = "stdin"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1067
		{
			yyVAL.str = "stdout"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1068
		{
			yyVAL.str = "storage"
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1069
		{
			yyVAL.str = "stored"
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1070
		{
			yyVAL.str = "strict"
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1071
		{
			yyVAL.str = "string"
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1072
		{
			yyVAL.str = "strip"
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1073
		{
			yyVAL.str = "subscription"
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1074
		{
			yyVAL.str = "support"
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1075
		{
			yyVAL.str = "sysid"
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1076
		{
			yyVAL.str = "system"
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1077
		{
			yyVAL.str = "tables"
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1078
		{
			yyVAL.str = "tablespace"
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1079
		{
			yyVAL.str = "target"
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1080
		{
			yyVAL.str = "temp"
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1081
		{
			yyVAL.str = "template"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1082
		{
			yyVAL.str = "temporary"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1083
		{
			yyVAL.str = "text"
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1084
		{
			yyVAL.str = "ties"
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1085
		{
			yyVAL.str = "transaction"
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1086
		{
			yyVAL.str = "transform"
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1087
		{
			yyVAL.str = "trigger"
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1088
		{
			yyVAL.str = "truncate"
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1089
		{
			yyVAL.str = "trusted"
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1090
		{
			yyVAL.str = "type"
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1091
		{
			yyVAL.str = "types"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1092
		{
			yyVAL.str = "uescape"
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1093
		{
			yyVAL.str = "unbounded"
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1094
		{
			yyVAL.str = "uncommitted"
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1095
		{
			yyVAL.str = "unconditional"
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1096
		{
			yyVAL.str = "unencrypted"
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1097
		{
			yyVAL.str = "unknown"
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1098
		{
			yyVAL.str = "unlisten"
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1099
		{
			yyVAL.str = "unlogged"
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1100
		{
			yyVAL.str = "until"
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1101
		{
			yyVAL.str = "update"
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1102
		{
			yyVAL.str = "vacuum"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1103
		{
			yyVAL.str = "valid"
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1104
		{
			yyVAL.str = "validate"
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1105
		{
			yyVAL.str = "validator"
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1106
		{
			yyVAL.str = "value"
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1107
		{
			yyVAL.str = "varying"
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1108
		{
			yyVAL.str = "version"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1109
		{
			yyVAL.str = "view"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1110
		{
			yyVAL.str = "views"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1111
		{
			yyVAL.str = "volatile"
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1112
		{
			yyVAL.str = "whitespace"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1113
		{
			yyVAL.str = "within"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1114
		{
			yyVAL.str = "without"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1115
		{
			yyVAL.str = "work"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1116
		{
			yyVAL.str = "wrapper"
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1117
		{
			yyVAL.str = "write"
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1118
		{
			yyVAL.str = "xml"
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1119
		{
			yyVAL.str = "year"
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1120
		{
			yyVAL.str = "yes"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1121
		{
			yyVAL.str = "zone"
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1135
		{
			yyVAL.str = "between"
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1136
		{
			yyVAL.str = "bigint"
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1137
		{
			yyVAL.str = "bit"
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1138
		{
			yyVAL.str = "boolean"
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1139
		{
			yyVAL.str = "char"
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1140
		{
			yyVAL.str = "character"
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1141
		{
			yyVAL.str = "coalesce"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1142
		{
			yyVAL.str = "dec"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1143
		{
			yyVAL.str = "decimal"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1144
		{
			yyVAL.str = "exists"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1145
		{
			yyVAL.str = "extract"
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1146
		{
			yyVAL.str = "float"
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1147
		{
			yyVAL.str = "greatest"
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1148
		{
			yyVAL.str = "grouping"
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1149
		{
			yyVAL.str = "inout"
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1150
		{
			yyVAL.str = "int"
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1151
		{
			yyVAL.str = "integer"
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1152
		{
			yyVAL.str = "interval"
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1153
		{
			yyVAL.str = "json"
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1154
		{
			yyVAL.str = "json_array"
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1155
		{
			yyVAL.str = "json_arrayagg"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1156
		{
			yyVAL.str = "json_exists"
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1157
		{
			yyVAL.str = "json_object"
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1158
		{
			yyVAL.str = "json_objectagg"
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1159
		{
			yyVAL.str = "json_query"
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1160
		{
			yyVAL.str = "json_scalar"
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1161
		{
			yyVAL.str = "json_serialize"
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1162
		{
			yyVAL.str = "json_table"
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1163
		{
			yyVAL.str = "json_value"
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1164
		{
			yyVAL.str = "least"
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1165
		{
			yyVAL.str = "merge_action"
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1166
		{
			yyVAL.str = "national"
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1167
		{
			yyVAL.str = "nchar"
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1168
		{
			yyVAL.str = "none"
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1169
		{
			yyVAL.str = "normalize"
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1170
		{
			yyVAL.str = "nullif"
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1171
		{
			yyVAL.str = "numeric"
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1172
		{
			yyVAL.str = "out"
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1173
		{
			yyVAL.str = "overlay"
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1174
		{
			yyVAL.str = "position"
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1175
		{
			yyVAL.str = "precision"
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1176
		{
			yyVAL.str = "real"
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1177
		{
			yyVAL.str = "row"
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1178
		{
			yyVAL.str = "setof"
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1179
		{
			yyVAL.str = "smallint"
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1180
		{
			yyVAL.str = "substring"
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1181
		{
			yyVAL.str = "time"
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1182
		{
			yyVAL.str = "timestamp"
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1183
		{
			yyVAL.str = "treat"
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1184
		{
			yyVAL.str = "trim"
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1185
		{
			yyVAL.str = "values"
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1186
		{
			yyVAL.str = "varchar"
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1187
		{
			yyVAL.str = "xmlattributes"
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1188
		{
			yyVAL.str = "xmlconcat"
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1189
		{
			yyVAL.str = "xmlelement"
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1190
		{
			yyVAL.str = "xmlexists"
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1191
		{
			yyVAL.str = "xmlforest"
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1192
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1193
		{
			yyVAL.str = "xmlparse"
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1194
		{
			yyVAL.str = "xmlpi"
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1195
		{
			yyVAL.str = "xmlroot"
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1196
		{
			yyVAL.str = "xmlserialize"
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1197
		{
			yyVAL.str = "xmltable"
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1211
		{
			yyVAL.str = "authorization"
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1212
		{
			yyVAL.str = "binary"
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1213
		{
			yyVAL.str = "collation"
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1214
		{
			yyVAL.str = "concurrently"
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1215
		{
			yyVAL.str = "cross"
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1216
		{
			yyVAL.str = "current_schema"
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1217
		{
			yyVAL.str = "freeze"
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1218
		{
			yyVAL.str = "full"
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1219
		{
			yyVAL.str = "ilike"
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1220
		{
			yyVAL.str = "inner"
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1221
		{
			yyVAL.str = "is"
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1222
		{
			yyVAL.str = "isnull"
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1223
		{
			yyVAL.str = "join"
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1224
		{
			yyVAL.str = "left"
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1225
		{
			yyVAL.str = "like"
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1226
		{
			yyVAL.str = "natural"
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1227
		{
			yyVAL.str = "notnull"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1228
		{
			yyVAL.str = "outer"
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1229
		{
			yyVAL.str = "overlaps"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1230
		{
			yyVAL.str = "right"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1231
		{
			yyVAL.str = "similar"
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1232
		{
			yyVAL.str = "tablesample"
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1233
		{
			yyVAL.str = "verbose"
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1243
		{
			yyVAL.str = "all"
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1244
		{
			yyVAL.str = "analyse"
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1245
		{
			yyVAL.str = "analyze"
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1246
		{
			yyVAL.str = "and"
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1247
		{
			yyVAL.str = "any"
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1248
		{
			yyVAL.str = "array"
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1249
		{
			yyVAL.str = "as"
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1250
		{
			yyVAL.str = "asc"
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1251
		{
			yyVAL.str = "asymmetric"
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1252
		{
			yyVAL.str = "both"
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1253
		{
			yyVAL.str = "case"
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1254
		{
			yyVAL.str = "cast"
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1255
		{
			yyVAL.str = "check"
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1256
		{
			yyVAL.str = "collate"
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1257
		{
			yyVAL.str = "column"
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1258
		{
			yyVAL.str = "constraint"
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1259
		{
			yyVAL.str = "create"
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1260
		{
			yyVAL.str = "current_catalog"
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1261
		{
			yyVAL.str = "current_date"
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1262
		{
			yyVAL.str = "current_role"
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1263
		{
			yyVAL.str = "current_time"
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1264
		{
			yyVAL.str = "current_timestamp"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1265
		{
			yyVAL.str = "current_user"
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1266
		{
			yyVAL.str = "default"
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1267
		{
			yyVAL.str = "deferrable"
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1268
		{
			yyVAL.str = "desc"
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1269
		{
			yyVAL.str = "distinct"
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1270
		{
			yyVAL.str = "do"
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1271
		{
			yyVAL.str = "else"
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1272
		{
			yyVAL.str = "end"
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1273
		{
			yyVAL.str = "except"
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1274
		{
			yyVAL.str = "false"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1275
		{
			yyVAL.str = "fetch"
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1276
		{
			yyVAL.str = "for"
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1277
		{
			yyVAL.str = "foreign"
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1278
		{
			yyVAL.str = "from"
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1279
		{
			yyVAL.str = "grant"
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1280
		{
			yyVAL.str = "group"
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1281
		{
			yyVAL.str = "having"
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1282
		{
			yyVAL.str = "in"
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1283
		{
			yyVAL.str = "initially"
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1284
		{
			yyVAL.str = "intersect"
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1285
		{
			yyVAL.str = "into"
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1286
		{
			yyVAL.str = "lateral"
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1287
		{
			yyVAL.str = "leading"
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1288
		{
			yyVAL.str = "limit"
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1289
		{
			yyVAL.str = "localtime"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1290
		{
			yyVAL.str = "localtimestamp"
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1291
		{
			yyVAL.str = "not"
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1292
		{
			yyVAL.str = "null"
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1293
		{
			yyVAL.str = "offset"
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1294
		{
			yyVAL.str = "on"
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1295
		{
			yyVAL.str = "only"
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1296
		{
			yyVAL.str = "or"
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1297
		{
			yyVAL.str = "order"
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1298
		{
			yyVAL.str = "placing"
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1299
		{
			yyVAL.str = "primary"
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1300
		{
			yyVAL.str = "references"
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1301
		{
			yyVAL.str = "returning"
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1302
		{
			yyVAL.str = "select"
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1303
		{
			yyVAL.str = "session_user"
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1304
		{
			yyVAL.str = "some"
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1305
		{
			yyVAL.str = "symmetric"
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1306
		{
			yyVAL.str = "system_user"
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1307
		{
			yyVAL.str = "table"
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1308
		{
			yyVAL.str = "then"
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1309
		{
			yyVAL.str = "to"
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1310
		{
			yyVAL.str = "trailing"
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1311
		{
			yyVAL.str = "true"
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1312
		{
			yyVAL.str = "union"
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1313
		{
			yyVAL.str = "unique"
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1314
		{
			yyVAL.str = "user"
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1315
		{
			yyVAL.str = "using"
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1316
		{
			yyVAL.str = "variadic"
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1317
		{
			yyVAL.str = "when"
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1318
		{
			yyVAL.str = "where"
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1319
		{
			yyVAL.str = "window"
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1320
		{
			yyVAL.str = "with"
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1333
		{
			yyVAL.str = "abort"
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1334
		{
			yyVAL.str = "absent"
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1335
		{
			yyVAL.str = "absolute"
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1336
		{
			yyVAL.str = "access"
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1337
		{
			yyVAL.str = "action"
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1338
		{
			yyVAL.str = "add"
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1339
		{
			yyVAL.str = "admin"
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1340
		{
			yyVAL.str = "after"
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1341
		{
			yyVAL.str = "aggregate"
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1342
		{
			yyVAL.str = "all"
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1343
		{
			yyVAL.str = "also"
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1344
		{
			yyVAL.str = "alter"
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1345
		{
			yyVAL.str = "always"
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1346
		{
			yyVAL.str = "analyse"
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1347
		{
			yyVAL.str = "analyze"
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1348
		{
			yyVAL.str = "and"
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1349
		{
			yyVAL.str = "any"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1350
		{
			yyVAL.str = "asc"
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1351
		{
			yyVAL.str = "asensitive"
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1352
		{
			yyVAL.str = "assertion"
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1353
		{
			yyVAL.str = "assignment"
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1354
		{
			yyVAL.str = "asymmetric"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1355
		{
			yyVAL.str = "at"
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1356
		{
			yyVAL.str = "atomic"
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1357
		{
			yyVAL.str = "attach"
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1358
		{
			yyVAL.str = "attribute"
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1359
		{
			yyVAL.str = "authorization"
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1360
		{
			yyVAL.str = "backward"
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1361
		{
			yyVAL.str = "before"
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1362
		{
			yyVAL.str = "begin"
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1363
		{
			yyVAL.str = "between"
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1364
		{
			yyVAL.str = "bigint"
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1365
		{
			yyVAL.str = "binary"
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1366
		{
			yyVAL.str = "bit"
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1367
		{
			yyVAL.str = "boolean"
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1368
		{
			yyVAL.str = "both"
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1369
		{
			yyVAL.str = "breadth"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1370
		{
			yyVAL.str = "by"
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1371
		{
			yyVAL.str = "cache"
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1372
		{
			yyVAL.str = "call"
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1373
		{
			yyVAL.str = "called"
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1374
		{
			yyVAL.str = "cascade"
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1375
		{
			yyVAL.str = "cascaded"
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1376
		{
			yyVAL.str = "case"
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1377
		{
			yyVAL.str = "cast"
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1378
		{
			yyVAL.str = "catalog"
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1379
		{
			yyVAL.str = "chain"
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1380
		{
			yyVAL.str = "characteristics"
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1381
		{
			yyVAL.str = "check"
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1382
		{
			yyVAL.str = "checkpoint"
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1383
		{
			yyVAL.str = "class"
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1384
		{
			yyVAL.str = "close"
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1385
		{
			yyVAL.str = "cluster"
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1386
		{
			yyVAL.str = "coalesce"
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1387
		{
			yyVAL.str = "collate"
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1388
		{
			yyVAL.str = "collation"
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1389
		{
			yyVAL.str = "column"
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1390
		{
			yyVAL.str = "columns"
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1391
		{
			yyVAL.str = "comment"
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1392
		{
			yyVAL.str = "comments"
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1393
		{
			yyVAL.str = "commit"
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1394
		{
			yyVAL.str = "committed"
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1395
		{
			yyVAL.str = "compression"
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1396
		{
			yyVAL.str = "concurrently"
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1397
		{
			yyVAL.str = "conditional"
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1398
		{
			yyVAL.str = "configuration"
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1399
		{
			yyVAL.str = "conflict"
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1400
		{
			yyVAL.str = "connection"
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1401
		{
			yyVAL.str = "constraint"
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1402
		{
			yyVAL.str = "constraints"
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1403
		{
			yyVAL.str = "content"
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1404
		{
			yyVAL.str = "continue"
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1405
		{
			yyVAL.str = "conversion"
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1406
		{
			yyVAL.str = "copy"
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1407
		{
			yyVAL.str = "cost"
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1408
		{
			yyVAL.str = "cross"
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1409
		{
			yyVAL.str = "csv"
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1410
		{
			yyVAL.str = "cube"
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1411
		{
			yyVAL.str = "current"
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1412
		{
			yyVAL.str = "current_catalog"
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1413
		{
			yyVAL.str = "current_date"
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1414
		{
			yyVAL.str = "current_role"
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1415
		{
			yyVAL.str = "current_schema"
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1416
		{
			yyVAL.str = "current_time"
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1417
		{
			yyVAL.str = "current_timestamp"
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1418
		{
			yyVAL.str = "current_user"
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1419
		{
			yyVAL.str = "cursor"
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1420
		{
			yyVAL.str = "cycle"
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1421
		{
			yyVAL.str = "data"
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1422
		{
			yyVAL.str = "database"
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1423
		{
			yyVAL.str = "deallocate"
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1424
		{
			yyVAL.str = "dec"
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1425
		{
			yyVAL.str = "decimal"
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1426
		{
			yyVAL.str = "declare"
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1427
		{
			yyVAL.str = "default"
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1428
		{
			yyVAL.str = "defaults"
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1429
		{
			yyVAL.str = "deferrable"
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1430
		{
			yyVAL.str = "deferred"
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1431
		{
			yyVAL.str = "definer"
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1432
		{
			yyVAL.str = "delete"
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1433
		{
			yyVAL.str = "delimiter"
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1434
		{
			yyVAL.str = "delimiters"
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1435
		{
			yyVAL.str = "depends"
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1436
		{
			yyVAL.str = "depth"
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1437
		{
			yyVAL.str = "desc"
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1438
		{
			yyVAL.str = "detach"
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1439
		{
			yyVAL.str = "dictionary"
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1440
		{
			yyVAL.str = "disable"
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1441
		{
			yyVAL.str = "discard"
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1442
		{
			yyVAL.str = "distinct"
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1443
		{
			yyVAL.str = "do"
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1444
		{
			yyVAL.str = "document"
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1445
		{
			yyVAL.str = "domain"
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1446
		{
			yyVAL.str = "double"
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1447
		{
			yyVAL.str = "drop"
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1448
		{
			yyVAL.str = "each"
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1449
		{
			yyVAL.str = "else"
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1450
		{
			yyVAL.str = "empty"
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1451
		{
			yyVAL.str = "enable"
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1452
		{
			yyVAL.str = "encoding"
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1453
		{
			yyVAL.str = "encrypted"
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1454
		{
			yyVAL.str = "end"
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1455
		{
			yyVAL.str = "enum"
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1456
		{
			yyVAL.str = "error"
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1457
		{
			yyVAL.str = "escape"
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1458
		{
			yyVAL.str = "event"
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1459
		{
			yyVAL.str = "exclude"
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1460
		{
			yyVAL.str = "excluding"
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1461
		{
			yyVAL.str = "exclusive"
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1462
		{
			yyVAL.str = "execute"
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1463
		{
			yyVAL.str = "exists"
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1464
		{
			yyVAL.str = "explain"
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1465
		{
			yyVAL.str = "expression"
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1466
		{
			yyVAL.str = "extension"
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1467
		{
			yyVAL.str = "external"
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1468
		{
			yyVAL.str = "extract"
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1469
		{
			yyVAL.str = "false"
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1470
		{
			yyVAL.str = "family"
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1471
		{
			yyVAL.str = "finalize"
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1472
		{
			yyVAL.str = "first"
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1473
		{
			yyVAL.str = "float"
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1474
		{
			yyVAL.str = "following"
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1475
		{
			yyVAL.str = "force"
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1476
		{
			yyVAL.str = "foreign"
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1477
		{
			yyVAL.str = "format"
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1478
		{
			yyVAL.str = "forward"
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1479
		{
			yyVAL.str = "freeze"
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1480
		{
			yyVAL.str = "full"
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1481
		{
			yyVAL.str = "function"
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1482
		{
			yyVAL.str = "functions"
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1483
		{
			yyVAL.str = "generated"
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1484
		{
			yyVAL.str = "global"
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1485
		{
			yyVAL.str = "granted"
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1486
		{
			yyVAL.str = "greatest"
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1487
		{
			yyVAL.str = "grouping"
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1488
		{
			yyVAL.str = "groups"
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1489
		{
			yyVAL.str = "handler"
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1490
		{
			yyVAL.str = "header"
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1491
		{
			yyVAL.str = "hold"
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1492
		{
			yyVAL.str = "identity"
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1493
		{
			yyVAL.str = "if"
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1494
		{
			yyVAL.str = "ilike"
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1495
		{
			yyVAL.str = "immediate"
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1496
		{
			yyVAL.str = "immutable"
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1497
		{
			yyVAL.str = "implicit"
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1498
		{
			yyVAL.str = "import"
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1499
		{
			yyVAL.str = "in"
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1500
		{
			yyVAL.str = "include"
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1501
		{
			yyVAL.str = "including"
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1502
		{
			yyVAL.str = "increment"
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1503
		{
			yyVAL.str = "indent"
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1504
		{
			yyVAL.str = "index"
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1505
		{
			yyVAL.str = "indexes"
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1506
		{
			yyVAL.str = "inherit"
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1507
		{
			yyVAL.str = "inherits"
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1508
		{
			yyVAL.str = "initially"
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1509
		{
			yyVAL.str = "inline"
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1510
		{
			yyVAL.str = "inner"
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1511
		{
			yyVAL.str = "inout"
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1512
		{
			yyVAL.str = "input"
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1513
		{
			yyVAL.str = "insensitive"
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1514
		{
			yyVAL.str = "insert"
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1515
		{
			yyVAL.str = "instead"
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1516
		{
			yyVAL.str = "int"
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1517
		{
			yyVAL.str = "integer"
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1518
		{
			yyVAL.str = "interval"
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1519
		{
			yyVAL.str = "invoker"
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1520
		{
			yyVAL.str = "is"
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1521
		{
			yyVAL.str = "isolation"
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1522
		{
			yyVAL.str = "join"
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1523
		{
			yyVAL.str = "json"
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1524
		{
			yyVAL.str = "json_array"
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1525
		{
			yyVAL.str = "json_arrayagg"
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1526
		{
			yyVAL.str = "json_exists"
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1527
		{
			yyVAL.str = "json_object"
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1528
		{
			yyVAL.str = "json_objectagg"
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1529
		{
			yyVAL.str = "json_query"
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1530
		{
			yyVAL.str = "json_scalar"
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1531
		{
			yyVAL.str = "json_serialize"
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1532
		{
			yyVAL.str = "json_table"
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1533
		{
			yyVAL.str = "json_value"
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1534
		{
			yyVAL.str = "keep"
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1535
		{
			yyVAL.str = "key"
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1536
		{
			yyVAL.str = "keys"
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1537
		{
			yyVAL.str = "label"
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1538
		{
			yyVAL.str = "language"
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1539
		{
			yyVAL.str = "large"
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1540
		{
			yyVAL.str = "last"
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1541
		{
			yyVAL.str = "lateral"
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1542
		{
			yyVAL.str = "leading"
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1543
		{
			yyVAL.str = "leakproof"
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1544
		{
			yyVAL.str = "least"
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1545
		{
			yyVAL.str = "left"
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1546
		{
			yyVAL.str = "level"
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1547
		{
			yyVAL.str = "like"
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1548
		{
			yyVAL.str = "listen"
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1549
		{
			yyVAL.str = "load"
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1550
		{
			yyVAL.str = "local"
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1551
		{
			yyVAL.str = "localtime"
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1552
		{
			yyVAL.str = "localtimestamp"
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1553
		{
			yyVAL.str = "location"
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1554
		{
			yyVAL.str = "lock"
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1555
		{
			yyVAL.str = "locked"
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1556
		{
			yyVAL.str = "logged"
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1557
		{
			yyVAL.str = "mapping"
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1558
		{
			yyVAL.str = "match"
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1559
		{
			yyVAL.str = "matched"
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1560
		{
			yyVAL.str = "materialized"
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1561
		{
			yyVAL.str = "maxvalue"
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1562
		{
			yyVAL.str = "merge"
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1563
		{
			yyVAL.str = "merge_action"
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1564
		{
			yyVAL.str = "method"
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1565
		{
			yyVAL.str = "minvalue"
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1566
		{
			yyVAL.str = "mode"
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1567
		{
			yyVAL.str = "move"
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1568
		{
			yyVAL.str = "name"
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1569
		{
			yyVAL.str = "names"
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1570
		{
			yyVAL.str = "national"
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1571
		{
			yyVAL.str = "natural"
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1572
		{
			yyVAL.str = "nchar"
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1573
		{
			yyVAL.str = "nested"
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1574
		{
			yyVAL.str = "new"
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1575
		{
			yyVAL.str = "next"
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1576
		{
			yyVAL.str = "nfc"
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1577
		{
			yyVAL.str = "nfd"
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1578
		{
			yyVAL.str = "nfkc"
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1579
		{
			yyVAL.str = "nfkd"
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1580
		{
			yyVAL.str = "no"
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1581
		{
			yyVAL.str = "none"
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1582
		{
			yyVAL.str = "normalize"
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1583
		{
			yyVAL.str = "normalized"
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1584
		{
			yyVAL.str = "not"
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1585
		{
			yyVAL.str = "nothing"
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1586
		{
			yyVAL.str = "notify"
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1587
		{
			yyVAL.str = "nowait"
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1588
		{
			yyVAL.str = "null"
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1589
		{
			yyVAL.str = "nullif"
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1590
		{
			yyVAL.str = "nulls"
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1591
		{
			yyVAL.str = "numeric"
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1592
		{
			yyVAL.str = "object"
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1593
		{
			yyVAL.str = "of"
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1594
		{
			yyVAL.str = "off"
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1595
		{
			yyVAL.str = "oids"
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1596
		{
			yyVAL.str = "old"
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1597
		{
			yyVAL.str = "omit"
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1598
		{
			yyVAL.str = "only"
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1599
		{
			yyVAL.str = "operator"
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1600
		{
			yyVAL.str = "option"
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1601
		{
			yyVAL.str = "options"
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1602
		{
			yyVAL.str = "or"
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1603
		{
			yyVAL.str = "ordinality"
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1604
		{
			yyVAL.str = "others"
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1605
		{
			yyVAL.str = "out"
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1606
		{
			yyVAL.str = "outer"
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1607
		{
			yyVAL.str = "overlay"
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1608
		{
			yyVAL.str = "overriding"
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1609
		{
			yyVAL.str = "owned"
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1610
		{
			yyVAL.str = "owner"
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1611
		{
			yyVAL.str = "parallel"
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1612
		{
			yyVAL.str = "parameter"
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1613
		{
			yyVAL.str = "parser"
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1614
		{
			yyVAL.str = "partial"
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1615
		{
			yyVAL.str = "partition"
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1616
		{
			yyVAL.str = "passing"
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1617
		{
			yyVAL.str = "password"
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1618
		{
			yyVAL.str = "path"
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1619
		{
			yyVAL.str = "placing"
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1620
		{
			yyVAL.str = "plan"
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1621
		{
			yyVAL.str = "plans"
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1622
		{
			yyVAL.str = "policy"
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1623
		{
			yyVAL.str = "position"
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1624
		{
			yyVAL.str = "preceding"
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1625
		{
			yyVAL.str = "prepare"
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1626
		{
			yyVAL.str = "prepared"
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1627
		{
			yyVAL.str = "preserve"
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1628
		{
			yyVAL.str = "primary"
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1629
		{
			yyVAL.str = "prior"
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1630
		{
			yyVAL.str = "privileges"
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1631
		{
			yyVAL.str = "procedural"
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1632
		{
			yyVAL.str = "procedure"
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1633
		{
			yyVAL.str = "procedures"
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1634
		{
			yyVAL.str = "program"
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1635
		{
			yyVAL.str = "publication"
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1636
		{
			yyVAL.str = "quote"
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1637
		{
			yyVAL.str = "quotes"
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1638
		{
			yyVAL.str = "range"
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1639
		{
			yyVAL.str = "read"
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1640
		{
			yyVAL.str = "real"
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1641
		{
			yyVAL.str = "reassign"
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1642
		{
			yyVAL.str = "recheck"
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1643
		{
			yyVAL.str = "recursive"
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1644
		{
			yyVAL.str = "ref"
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1645
		{
			yyVAL.str = "references"
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1646
		{
			yyVAL.str = "referencing"
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1647
		{
			yyVAL.str = "refresh"
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1648
		{
			yyVAL.str = "reindex"
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1649
		{
			yyVAL.str = "relative"
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1650
		{
			yyVAL.str = "release"
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1651
		{
			yyVAL.str = "rename"
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1652
		{
			yyVAL.str = "repeatable"
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1653
		{
			yyVAL.str = "replace"
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1654
		{
			yyVAL.str = "replica"
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1655
		{
			yyVAL.str = "reset"
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1656
		{
			yyVAL.str = "restart"
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1657
		{
			yyVAL.str = "restrict"
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1658
		{
			yyVAL.str = "return"
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1659
		{
			yyVAL.str = "returns"
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1660
		{
			yyVAL.str = "revoke"
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1661
		{
			yyVAL.str = "right"
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1662
		{
			yyVAL.str = "role"
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1663
		{
			yyVAL.str = "rollback"
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1664
		{
			yyVAL.str = "rollup"
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1665
		{
			yyVAL.str = "routine"
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1666
		{
			yyVAL.str = "routines"
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1667
		{
			yyVAL.str = "row"
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1668
		{
			yyVAL.str = "rows"
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1669
		{
			yyVAL.str = "rule"
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1670
		{
			yyVAL.str = "savepoint"
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1671
		{
			yyVAL.str = "scalar"
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1672
		{
			yyVAL.str = "schema"
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1673
		{
			yyVAL.str = "schemas"
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1674
		{
			yyVAL.str = "scroll"
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1675
		{
			yyVAL.str = "search"
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1676
		{
			yyVAL.str = "security"
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1677
		{
			yyVAL.str = "select"
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1678
		{
			yyVAL.str = "sequence"
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1679
		{
			yyVAL.str = "sequences"
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1680
		{
			yyVAL.str = "serializable"
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1681
		{
			yyVAL.str = "server"
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1682
		{
			yyVAL.str = "session"
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1683
		{
			yyVAL.str = "session_user"
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1684
		{
			yyVAL.str = "set"
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1685
		{
			yyVAL.str = "setof"
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1686
		{
			yyVAL.str = "sets"
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1687
		{
			yyVAL.str = "share"
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1688
		{
			yyVAL.str = "show"
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1689
		{
			yyVAL.str = "similar"
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1690
		{
			yyVAL.str = "simple"
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1691
		{
			yyVAL.str = "skip"
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1692
		{
			yyVAL.str = "smallint"
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1693
		{
			yyVAL.str = "snapshot"
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1694
		{
			yyVAL.str = "some"
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1695
		{
			yyVAL.str = "source"
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1696
		{
			yyVAL.str = "sql"
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1697
		{
			yyVAL.str = "stable"
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1698
		{
			yyVAL.str = "standalone"
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1699
		{
			yyVAL.str = "start"
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1700
		{
			yyVAL.str = "statement"
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1701
		{
			yyVAL.str = "statistics"
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1702
		{
			yyVAL.str = "stdin"
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1703
		{
			yyVAL.str = "stdout"
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1704
		{
			yyVAL.str = "storage"
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1705
		{
			yyVAL.str = "stored"
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1706
		{
			yyVAL.str = "strict"
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1707
		{
			yyVAL.str = "string"
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1708
		{
			yyVAL.str = "strip"
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1709
		{
			yyVAL.str = "subscription"
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1710
		{
			yyVAL.str = "substring"
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1711
		{
			yyVAL.str = "support"
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1712
		{
			yyVAL.str = "symmetric"
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1713
		{
			yyVAL.str = "sysid"
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1714
		{
			yyVAL.str = "system"
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1715
		{
			yyVAL.str = "system_user"
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1716
		{
			yyVAL.str = "table"
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1717
		{
			yyVAL.str = "tables"
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1718
		{
			yyVAL.str = "tablesample"
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1719
		{
			yyVAL.str = "tablespace"
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1720
		{
			yyVAL.str = "target"
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1721
		{
			yyVAL.str = "temp"
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1722
		{
			yyVAL.str = "template"
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1723
		{
			yyVAL.str = "temporary"
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1724
		{
			yyVAL.str = "text"
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1725
		{
			yyVAL.str = "then"
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1726
		{
			yyVAL.str = "ties"
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1727
		{
			yyVAL.str = "time"
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1728
		{
			yyVAL.str = "timestamp"
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1729
		{
			yyVAL.str = "trailing"
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1730
		{
			yyVAL.str = "transaction"
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1731
		{
			yyVAL.str = "transform"
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1732
		{
			yyVAL.str = "treat"
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1733
		{
			yyVAL.str = "trigger"
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1734
		{
			yyVAL.str = "trim"
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1735
		{
			yyVAL.str = "true"
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1736
		{
			yyVAL.str = "truncate"
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1737
		{
			yyVAL.str = "trusted"
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1738
		{
			yyVAL.str = "type"
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1739
		{
			yyVAL.str = "types"
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1740
		{
			yyVAL.str = "uescape"
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1741
		{
			yyVAL.str = "unbounded"
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1742
		{
			yyVAL.str = "uncommitted"
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1743
		{
			yyVAL.str = "unconditional"
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1744
		{
			yyVAL.str = "unencrypted"
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1745
		{
			yyVAL.str = "unique"
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1746
		{
			yyVAL.str = "unknown"
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1747
		{
			yyVAL.str = "unlisten"
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1748
		{
			yyVAL.str = "unlogged"
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1749
		{
			yyVAL.str = "until"
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1750
		{
			yyVAL.str = "update"
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1751
		{
			yyVAL.str = "user"
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1752
		{
			yyVAL.str = "using"
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1753
		{
			yyVAL.str = "vacuum"
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1754
		{
			yyVAL.str = "valid"
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1755
		{
			yyVAL.str = "validate"
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1756
		{
			yyVAL.str = "validator"
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1757
		{
			yyVAL.str = "value"
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1758
		{
			yyVAL.str = "values"
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1759
		{
			yyVAL.str = "varchar"
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1760
		{
			yyVAL.str = "variadic"
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1761
		{
			yyVAL.str = "verbose"
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1762
		{
			yyVAL.str = "version"
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1763
		{
			yyVAL.str = "view"
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1764
		{
			yyVAL.str = "views"
		}
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1765
		{
			yyVAL.str = "volatile"
		}
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1766
		{
			yyVAL.str = "when"
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1767
		{
			yyVAL.str = "whitespace"
		}
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1768
		{
			yyVAL.str = "work"
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1769
		{
			yyVAL.str = "wrapper"
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1770
		{
			yyVAL.str = "write"
		}
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1771
		{
			yyVAL.str = "xml"
		}
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1772
		{
			yyVAL.str = "xmlattributes"
		}
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1773
		{
			yyVAL.str = "xmlconcat"
		}
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1774
		{
			yyVAL.str = "xmlelement"
		}
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1775
		{
			yyVAL.str = "xmlexists"
		}
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1776
		{
			yyVAL.str = "xmlforest"
		}
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1777
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1778
		{
			yyVAL.str = "xmlparse"
		}
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1779
		{
			yyVAL.str = "xmlpi"
		}
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1780
		{
			yyVAL.str = "xmlroot"
		}
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1781
		{
			yyVAL.str = "xmlserialize"
		}
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1782
		{
			yyVAL.str = "xmltable"
		}
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1783
		{
			yyVAL.str = "yes"
		}
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1784
		{
			yyVAL.str = "zone"
		}
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1799
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1032:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1801
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1033:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1806
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1034:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1811
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1035:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1815
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1036:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1820
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1037:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1825
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1038:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1830
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1039:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1835
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1040:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1840
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1041:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1845
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1042:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1850
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1043:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1855
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1044:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1860
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1045:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1865
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1046:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1870
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1047:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1875
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1048:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1879
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1049:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1883
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1050:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1887
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1051:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1891
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1052:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1895
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1053:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1899
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1054:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1903
		{
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1055:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1908
		{
			// Create like_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1056:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1916
		{
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1057:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1921
		{
			// Create like_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1058:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1929
		{
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1059:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1934
		{
			// Create like_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1060:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1942
		{
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1061:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1947
		{
			// Create like_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1062:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1955
		{
			// Pass the NodeList directly to NewCollateClause
			nodeList := yyDollar[3].list
			collateClause := ast.NewCollateClause(nodeList)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 1063:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1963
		{
			// Create timezone function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[1].node), 0)
		}
	case 1064:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1969
		{
			// Create timezone function call with no argument
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[1].node), 0)
		}
	case 1065:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1975
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1066:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1979
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1067:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1983
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1068:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:1988
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1069:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1993
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1070:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:1998
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1071:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2003
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1072:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2008
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1073:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2013
		{
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1074:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2018
		{
			// Create similar_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1075:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2026
		{
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1076:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2031
		{
			// Create similar_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1077:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2040
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1078:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2042
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1079:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2046
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1080:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2051
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1081:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2056
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1082:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2061
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1083:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2066
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1084:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2071
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1085:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2076
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1086:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2081
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1087:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2086
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1088:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2091
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1089:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2096
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1090:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2101
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1091:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2106
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1092:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2111
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1093:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2117
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1094:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2118
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1095:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2120
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 1096:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2129
		{
			parenExpr := ast.NewParenExpr(yyDollar[2].node, 0)
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewA_Indirection(parenExpr, yyDollar[4].list, 0)
			} else {
				yyVAL.node = parenExpr
			}
		}
	case 1097:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2137
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1098:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2138
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1099:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2140
		{
			yyVAL.node = ast.NewExprSublink(yyDollar[1].stmt)
		}
	case 1100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2144
		{
			sublink := ast.NewExprSublink(yyDollar[1].stmt)
			yyVAL.node = ast.NewA_Indirection(sublink, yyDollar[2].list, 0)
		}
	case 1101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2149
		{
			yyVAL.node = ast.NewExistsSublink(yyDollar[2].stmt)
		}
	case 1102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2153
		{
			yyVAL.node = ast.NewArraySublink(yyDollar[2].stmt)
		}
	case 1103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2157
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2161
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = rowExpr
		}
	case 1105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2167
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_IMPLICIT_CAST
			yyVAL.node = rowExpr
		}
	case 1106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2173
		{
			// TODO: Fix GROUPING function implementation
			// Current implementation is simplified and needs proper expr_list handling
			// The expr_list should be properly converted to NodeList and assigned to Args
			grouping := &ast.GroupingFunc{
				BaseExpr: ast.BaseExpr{BaseNode: ast.BaseNode{Tag: ast.T_GroupingFunc}},
				Args:     nil, // We'll need to convert expr_list properly
			}
			yyVAL.node = grouping
		}
	case 1107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2187
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2191
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 1109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2195
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 1110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2199
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 1111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2203
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 1112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2207
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 1113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2212
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2215
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2218
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2219
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 1117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2220
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 1118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2225
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 1119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2229
		{
			// Create all fields: first ColId followed by indirection items
			allFields := []ast.Node{ast.NewString(yyDollar[1].str)}
			allFields = append(allFields, yyDollar[2].list.Items...)
			yyVAL.node = ast.NewColumnRef(allFields...)
		}
	case 1120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2239
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2243
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2249
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1123:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2250
		{
			yyVAL.node = nil
		}
	case 1124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2254
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2258
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 1126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2262
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 1127:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2266
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 1128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2271
		{
			yyVAL.list = nil
		}
	case 1129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2273
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2285
		{
			// For now, just return the func_application
			// Note: In full implementation, would apply within_group_clause, filter_clause, over_clause
			yyVAL.node = yyDollar[1].node
		}
	case 1131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2294
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2298
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2302
		{
			// PostgreSQL uses check_func_name here
			// We implement the logic inline - prepend ColId to indirection list
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[2].list.Items...)
			result := ast.NewNodeList(items...)
			yyVAL.list = result
		}
	case 1134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2313
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].list, nil, 0)
		}
	case 1135:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2317
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[3].list, 0)
			// Note: In full implementation, would set agg_order from $4
			yyVAL.node = funcCall
		}
	case 1136:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2323
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, ast.NewNodeList(yyDollar[4].node), 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1137:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:2329
		{
			yyDollar[3].list.Append(yyDollar[6].node)
			args := yyDollar[3].list
			funcCall := ast.NewFuncCall(yyDollar[1].list, args, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $7
			yyVAL.node = funcCall
		}
	case 1138:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2337
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would mark as aggregate and set agg_order from $5
			yyVAL.node = funcCall
		}
	case 1139:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2343
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would set agg_distinct = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2351
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2355
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2362
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2366
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2370
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2377
		{
			yyVAL.node = ast.NewCaseExpr(0, yyDollar[2].node, yyDollar[3].list, yyDollar[4].node)
		}
	case 1146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2382
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2383
		{
			yyVAL.node = nil
		}
	case 1148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2387
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2389
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2397
		{
			yyVAL.node = ast.NewCaseWhen(yyDollar[2].node, yyDollar[4].node)
		}
	case 1151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2403
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2404
		{
			yyVAL.node = nil
		}
	case 1153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2409
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2413
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2417
		{
			yyVAL.node = ast.NewArrayConstructor(ast.NewNodeList())
		}
	case 1156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2422
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2424
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1158:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2431
		{
			yyVAL.node = yyDollar[3].list
		}
	case 1159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2432
		{
			yyVAL.node = ast.NewNodeList()
		}
	case 1160:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2436
		{
			yyDollar[2].list.Append(yyDollar[4].node)
			yyVAL.node = yyDollar[2].list
		}
	case 1161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2444
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2448
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2457
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2462
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2463
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2464
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2465
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2466
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2469
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2470
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2471
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2474
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2477
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2481
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[2].str))
		}
	case 1175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2485
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2492
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1177:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2496
		{
			yyVAL.list = nil
		}
	case 1178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2502
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2508
		{
			// Create qualified type name from name + attrs
			name := ast.NewString(yyDollar[1].str)
			names := &ast.NodeList{Items: append([]ast.Node{name}, yyDollar[2].list.Items...)}
			typeName := makeTypeNameFromNodeList(names)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2519
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2523
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2527
		{
			yyVAL.typnam = makeTypeNameFromString("int2")
		}
	case 1183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2531
		{
			yyVAL.typnam = makeTypeNameFromString("int8")
		}
	case 1184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2535
		{
			yyVAL.typnam = makeTypeNameFromString("float4")
		}
	case 1185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2539
		{
			yyVAL.typnam = yyDollar[2].typnam
		}
	case 1186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2543
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2547
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
		}
	case 1188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2551
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
		}
	case 1189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2555
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
		}
	case 1190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2559
		{
			yyVAL.typnam = makeTypeNameFromString("bool")
		}
	case 1191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2565
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2569
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2575
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2579
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2585
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2593
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2601
		{
			yyVAL.str = "varchar"
		}
	case 1198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2605
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2613
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2621
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1201:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2631
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Set typmods with the length parameter, similar to PostgreSQL's approach
			lengthConst := ast.NewInteger(int(yyDollar[3].ival))
			typeName.Typmods = ast.NewNodeList()
			typeName.Typmods.Append(lengthConst)
			yyVAL.typnam = typeName
		}
	case 1202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2642
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// CHAR defaults to CHAR(1)
				lengthConst := ast.NewInteger(1)
				typeName.Typmods = ast.NewNodeList()
				typeName.Typmods.Append(lengthConst)
			}
			yyVAL.typnam = typeName
		}
	case 1203:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2656
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2668
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1205:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2680
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2690
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1207:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2700
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2710
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2721
		{
			yyVAL.ival = 1
		}
	case 1210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2722
		{
			yyVAL.ival = 0
		}
	case 1211:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2723
		{
			yyVAL.ival = 0
		}
	case 1212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2726
		{
			yyVAL.ival = 1
		}
	case 1213:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2727
		{
			yyVAL.ival = 0
		}
	case 1214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2731
		{
			if yyDollar[2].ival < 1 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else if yyDollar[2].ival <= 7 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else {
				yyVAL.typnam = makeTypeNameFromString("float8")
			}
		}
	case 1215:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2741
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2748
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1217:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2752
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2759
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1219:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2763
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2768
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2769
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2772
		{
			yyVAL.str = "+"
		}
	case 1223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2773
		{
			yyVAL.str = "-"
		}
	case 1224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2774
		{
			yyVAL.str = "*"
		}
	case 1225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2775
		{
			yyVAL.str = "/"
		}
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2776
		{
			yyVAL.str = "%"
		}
	case 1227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2777
		{
			yyVAL.str = "^"
		}
	case 1228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2778
		{
			yyVAL.str = "<"
		}
	case 1229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2779
		{
			yyVAL.str = ">"
		}
	case 1230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2780
		{
			yyVAL.str = "="
		}
	case 1231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2781
		{
			yyVAL.str = "<="
		}
	case 1232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2782
		{
			yyVAL.str = ">="
		}
	case 1233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2783
		{
			yyVAL.str = "<>"
		}
	case 1234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2787
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2791
		{
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[3].list.Items...)
			yyVAL.list = ast.NewNodeList(items...)
		}
	case 1236:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2799
		{
			yyVAL.list = nil
		}
	case 1237:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2802
		{
			yyVAL.node = nil
		}
	case 1238:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2805
		{
			yyVAL.node = nil
		}
	case 1239:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2808
		{
			yyVAL.node = nil
		}
	case 1240:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2811
		{
			yyVAL.ival = 0
		}
	case 1241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2812
		{
			yyVAL.ival = 0
		}
	case 1242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2816
		{
			subLink := ast.NewSubLink(ast.ANY_SUBLINK, yyDollar[1].stmt.(*ast.SelectStmt))
			yyVAL.node = subLink
		}
	case 1243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2821
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2836
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2837
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2841
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2846
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2847
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2855
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2857
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			yyVAL.stmt = selectStmt
		}
	case 1251:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2871
		{
			selectStmt := ast.NewSelectStmt()
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			yyVAL.stmt = selectStmt
		}
	case 1252:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2883
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].list
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			yyVAL.stmt = selectStmt
		}
	case 1253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2895
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = ast.NewNodeList(starTarget)
			selectStmt.FromClause = ast.NewNodeList(yyDollar[2].rangevar)
			yyVAL.stmt = selectStmt
		}
	case 1254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2905
		{
			// VALUES clause is a SelectStmt with ValuesLists
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2916
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1256:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2917
		{
			yyVAL.list = nil
		}
	case 1257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2921
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2922
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2927
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2931
		{
			// Implicit alias (no AS keyword)
			yyVAL.target = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 1261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2936
		{
			// No alias - use default naming
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2941
		{
			// SELECT * - all columns
			yyVAL.target = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 1263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2952
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1264:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2953
		{
			yyVAL.list = nil
		}
	case 1265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2957
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2958
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2967
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeVar
		}
	case 1268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2975
		{
			/* Subquery in FROM clause */
			subquery := yyDollar[1].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[2].alias != nil {
				alias = yyDollar[2].alias
			}
			rangeSubselect := ast.NewRangeSubselect(false, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2986
		{
			/* LATERAL subquery in FROM clause */
			subquery := yyDollar[2].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[3].alias != nil {
				alias = yyDollar[3].alias
			}
			rangeSubselect := ast.NewRangeSubselect(true, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2997
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3001
		{
			joinExpr := yyDollar[2].node.(*ast.JoinExpr)
			joinExpr.Alias = yyDollar[4].alias
			yyVAL.node = joinExpr
		}
	case 1272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3007
		{
			rangeFunc := yyDollar[1].node.(*ast.RangeFunction)
			if yyDollar[2].alias != nil {
				rangeFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeFunc
		}
	case 1273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3015
		{
			rangeFunc := yyDollar[2].node.(*ast.RangeFunction)
			rangeFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeFunc
		}
	case 1274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3024
		{
			rangeTableFunc := yyDollar[1].node.(*ast.RangeTableFunc)
			if yyDollar[2].alias != nil {
				rangeTableFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3032
		{
			rangeTableFunc := yyDollar[2].node.(*ast.RangeTableFunc)
			rangeTableFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeTableFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3041
		{
			jsonTable := yyDollar[1].node.(*ast.JsonTable)
			if yyDollar[2].alias != nil {
				jsonTable.Alias = yyDollar[2].alias
			}
			yyVAL.node = jsonTable
		}
	case 1277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3049
		{
			jsonTable := yyDollar[2].node.(*ast.JsonTable)
			jsonTable.Lateral = true
			if yyDollar[3].alias != nil {
				jsonTable.Alias = yyDollar[3].alias
			}
			yyVAL.node = jsonTable
		}
	case 1278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3061
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.rangevar = rangeVar
		}
	case 1279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3067
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3074
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.rangevar = rangeVar
		}
	case 1281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3080
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3086
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3096
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3100
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3106
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3123
		{
			yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
		}
	case 1287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3127
		{
			/* CROSS JOIN is same as unqualified inner join */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewJoinExpr(ast.JOIN_INNER, left, right, nil)
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1288:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3136
		{
			left := yyDollar[1].node
			right := yyDollar[4].node
			joinType := ast.JoinType(yyDollar[2].ival)
			joinQual := yyDollar[5].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(joinType, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(joinType, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3162
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[3].node
			joinQual := yyDollar[4].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(ast.JOIN_INNER, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(ast.JOIN_INNER, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1290:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3188
		{
			left := yyDollar[1].node
			right := yyDollar[5].node
			joinType := ast.JoinType(yyDollar[3].ival)
			join := ast.NewNaturalJoinExpr(joinType, left, right)
			yyVAL.node = join
		}
	case 1291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3196
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewNaturalJoinExpr(ast.JOIN_INNER, left, right)
			yyVAL.node = join
		}
	case 1292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3206
		{
			yyVAL.ival = int(ast.JOIN_FULL)
		}
	case 1293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3207
		{
			yyVAL.ival = int(ast.JOIN_LEFT)
		}
	case 1294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3208
		{
			yyVAL.ival = int(ast.JOIN_RIGHT)
		}
	case 1295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3209
		{
			yyVAL.ival = int(ast.JOIN_INNER)
		}
	case 1296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3214
		{
			yyVAL.ival = 1
		}
	case 1297:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3215
		{
			yyVAL.ival = 0
		}
	case 1298:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3225
		{
			/* Create a two-element list: [name_list, alias_or_null] following PostgreSQL */
			nameList := yyDollar[3].list
			var aliasNode ast.Node = nil
			if yyDollar[5].alias != nil {
				aliasNode = yyDollar[5].alias
			}
			usingList := ast.NewNodeList(nameList, aliasNode)
			yyVAL.node = usingList
		}
	case 1299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3236
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3247
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3251
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3255
		{
			yyVAL.with = ast.NewWithClause(yyDollar[3].list, true, 0)
		}
	case 1303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3261
		{
			yyVAL.with = yyDollar[1].with
		}
	case 1304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3262
		{
			yyVAL.with = nil
		}
	case 1305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3267
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3271
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1307:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3279
		{
			ctename := yyDollar[1].str
			query := yyDollar[6].stmt
			cte := ast.NewCommonTableExpr(ctename, query)

			// Set column names if provided
			if yyDollar[2].list != nil {
				cte.Aliascolnames = yyDollar[2].list
			}

			// Set materialized option
			cte.Ctematerialized = ast.CTEMaterialized(yyDollar[4].ival)

			// Set search clause if provided
			if yyDollar[8].node != nil {
				cte.SearchClause = yyDollar[8].node.(*ast.CTESearchClause)
			}

			// Set cycle clause if provided
			if yyDollar[9].node != nil {
				cte.CycleClause = yyDollar[9].node.(*ast.CTECycleClause)
			}

			yyVAL.node = cte
		}
	case 1308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3307
		{
			yyVAL.ival = int(ast.CTEMaterializeAlways)
		}
	case 1309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3308
		{
			yyVAL.ival = int(ast.CTEMaterializeNever)
		}
	case 1310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3309
		{
			yyVAL.ival = int(ast.CTEMaterializeDefault)
		}
	case 1311:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3314
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, false, seqColumn)
		}
	case 1312:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3320
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, true, seqColumn)
		}
	case 1313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3326
		{
			yyVAL.node = nil
		}
	case 1314:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:3333
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			markValue := yyDollar[6].node.(ast.Expression)
			markDefault := yyDollar[8].node.(ast.Expression)
			pathColumn := yyDollar[10].str
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, markValue, markDefault, pathColumn)
		}
	case 1315:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3342
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			pathColumn := yyDollar[6].str
			// For simple CYCLE clause, use nil for mark values to avoid TO/DEFAULT in deparsing
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, nil, nil, pathColumn)
		}
	case 1316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3350
		{
			yyVAL.node = nil
		}
	case 1317:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3361
		{
			/* Create a SelectStmt with VALUES clause following PostgreSQL */
			selectStmt := ast.NewSelectStmt()
			exprList := yyDollar[3].list
			selectStmt.ValuesLists = []*ast.NodeList{exprList}
			yyVAL.stmt = selectStmt
		}
	case 1318:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3369
		{
			/* Add additional VALUES row to existing SelectStmt */
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			exprList := yyDollar[4].list
			selectStmt.ValuesLists = append(selectStmt.ValuesLists, exprList)
			yyVAL.stmt = selectStmt
		}
	case 1319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3383
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3384
		{
			yyVAL.node = nil
		}
	case 1321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3388
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3396
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1323:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3398
		{
			cursorExpr := ast.NewCurrentOfExpr(0, yyDollar[4].str) // cvarno filled in by parse analysis
			yyVAL.node = cursorExpr
		}
	case 1324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3402
		{
			yyVAL.node = nil
		}
	case 1325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3406
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3414
		{
			yyVAL.alias = yyDollar[1].alias
		}
	case 1327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3415
		{
			yyVAL.alias = nil
		}
	case 1328:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3420
		{
			nameList := yyDollar[4].list
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nameList)
		}
	case 1329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3425
		{
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 1330:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3429
		{
			nameList := yyDollar[3].list
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nameList)
		}
	case 1331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3434
		{
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 1332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3442
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.alias = alias
		}
	case 1333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3446
		{
			yyVAL.alias = nil
		}
	case 1334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3454
		{
			yyVAL.ival = 1
		}
	case 1335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3455
		{
			yyVAL.ival = 0
		}
	case 1336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3459
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1337:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3460
		{
			yyVAL.list = yyDollar[4].list
		}
	case 1338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3464
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3465
		{
			yyVAL.list = nil
		}
	case 1340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3475
		{
			yyVAL.into = ast.NewIntoClause(yyDollar[2].rangevar, nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 1341:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3478
		{
			yyVAL.into = nil
		}
	case 1342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3489
		{
			hasOrdinality := yyDollar[2].ival == 1
			// For a simple function, create a NodeList containing a single NodeList with the function
			funcList := ast.NewNodeList(yyDollar[1].node)
			functions := ast.NewNodeList(funcList)
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, false, functions, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1343:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3498
		{
			hasOrdinality := yyDollar[6].ival == 1
			// rowsfrom_list is already a NodeList containing NodeLists
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, true, yyDollar[4].list, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3508
		{
			yyVAL.ival = 1
		}
	case 1345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3509
		{
			yyVAL.ival = 0
		}
	case 1346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3515
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 1347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3519
		{
			yyDollar[1].list.Append(yyDollar[3].list)
			yyVAL.list = yyDollar[1].list
		}
	case 1348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3526
		{
			funcList := ast.NewNodeList(yyDollar[1].node)
			if yyDollar[2].list != nil {
				funcList.Append(yyDollar[2].list)
			}
			yyVAL.list = funcList
		}
	case 1349:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3535
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3536
		{
			yyVAL.list = nil
		}
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3546
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 1352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3550
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 1353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3562
		{
			yyVAL.funparam = &ast.FunctionParameter{
				BaseNode: ast.BaseNode{Tag: ast.T_FunctionParameter},
				Name:     yyDollar[1].str,
				ArgType:  yyDollar[2].typnam,
				Mode:     ast.FUNC_PARAM_TABLE,
				DefExpr:  nil,
			}
		}
	case 1354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3575
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3576
		{
			yyVAL.list = nil
		}
	case 1356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3582
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3586
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3595
		{
			columnDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			// Note: opt_collate_clause support can be added when needed
			// PostgreSQL sets: n->collClause = (CollateClause *) $3;
			yyVAL.node = columnDef
		}
	case 1359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3606
		{
			// Pass the NodeList directly to NewCollateClause
			nameList := yyDollar[2].list
			yyVAL.node = ast.NewCollateClause(nameList)
		}
	case 1360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3611
		{
			yyVAL.node = nil
		}
	case 1361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3616
		{
			yyVAL.str = "BY REF"
		}
	case 1362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3617
		{
			yyVAL.str = "BY VALUE"
		}
	case 1363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3623
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3627
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3631
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1366:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3635
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3643
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3647
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3655
		{
			target := ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
			yyVAL.node = target
		}
	case 1370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3660
		{
			target := ast.NewResTarget("", yyDollar[2].node)
			yyVAL.node = target
		}
	case 1371:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3669
		{
			// XMLTABLE(xpath_expr PASSING doc_expr COLUMNS ...)
			// $3 is xpath_expr (should be RowExpr), $4 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[4].node.(ast.Expression), yyDollar[3].node.(ast.Expression), nil, yyDollar[6].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1372:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:3677
		{
			// XMLTABLE(XMLNAMESPACES(...), xpath_expr PASSING doc_expr COLUMNS ...)
			// $8 is xpath_expr (should be RowExpr), $9 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[9].node.(ast.Expression), yyDollar[8].node.(ast.Expression), yyDollar[5].list, yyDollar[11].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3688
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3692
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3701
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3706
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, nil, true, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3711
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			// TODO: Process column options from $3
			yyVAL.node = rangeTableFuncCol
		}
	case 1378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3721
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3725
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3734
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3738
		{
			yyVAL.node = ast.NewDefElem("default", yyDollar[2].node)
		}
	case 1382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3742
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(true))
		}
	case 1383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3746
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(false))
		}
	case 1384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3750
		{
			yyVAL.node = ast.NewDefElem("path", yyDollar[2].node)
		}
	case 1385:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:3763
		{
			// Extract path name from optional path name node
			var pathName string
			if yyDollar[6].node != nil {
				if strNode, ok := yyDollar[6].node.(*ast.String); ok {
					pathName = strNode.SVal
				}
			}

			// Create JsonTablePathSpec from the a_expr (path expression) and optional path name
			pathSpec := ast.NewJsonTablePathSpec(yyDollar[5].node, pathName, 0)

			// Create JsonTable with context item and path spec
			jsonTable := ast.NewJsonTable(yyDollar[3].node.(*ast.JsonValueExpr), pathSpec)
			if yyDollar[10].list != nil {
				jsonTable.Columns = yyDollar[10].list
			}
			yyVAL.node = jsonTable
		}
	case 1386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3787
		{
			var format *ast.JsonFormat
			if yyDollar[2].node != nil {
				format = yyDollar[2].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonValueExpr(yyDollar[1].node, format)
		}
	case 1387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3798
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3799
		{
			yyVAL.node = nil
		}
	case 1389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3804
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3805
		{
			yyVAL.node = nil
		}
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3809
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3810
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3815
		{
			jsonArg := ast.NewJsonArgument(yyDollar[1].node.(*ast.JsonValueExpr), yyDollar[3].str)
			yyVAL.node = jsonArg
		}
	case 1394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3823
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JSON_BEHAVIOR_DEFAULT,
				Expr:     yyDollar[2].node,
			}
		}
	case 1395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3831
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JsonBehaviorType(yyDollar[1].ival),
				Expr:     nil,
			}
		}
	case 1396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3842
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_ERROR)
		}
	case 1397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3843
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_NULL)
		}
	case 1398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3844
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_TRUE)
		}
	case 1399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3845
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_FALSE)
		}
	case 1400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3846
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_UNKNOWN)
		}
	case 1401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3847
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_ARRAY)
		}
	case 1402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3848
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_OBJECT)
		}
	case 1403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3849
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY)
		}
	case 1404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3854
		{
			// Return a list with ON EMPTY behavior and nil for ON ERROR
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, nil}}
		}
	case 1405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3858
		{
			// Return a list with nil for ON EMPTY and ON ERROR behavior
			yyVAL.node = &ast.NodeList{Items: []ast.Node{nil, yyDollar[1].node}}
		}
	case 1406:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3862
		{
			// Return a list with both ON EMPTY and ON ERROR behaviors
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, yyDollar[4].node}}
		}
	case 1407:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3866
		{
			yyVAL.node = nil
		}
	case 1408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3871
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1409:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3872
		{
			yyVAL.node = nil
		}
	case 1410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3877
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3878
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3879
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3880
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1414:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3881
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1415:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3882
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3883
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3884
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1418:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3885
		{
			yyVAL.ival = int(ast.JSW_UNSPEC)
		}
	case 1419:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3890
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3891
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1421:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3892
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3893
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1423:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3894
		{
			yyVAL.ival = int(ast.JS_QUOTES_UNSPEC)
		}
	case 1424:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3900
		{
			// Parse the encoding name and map to JsonEncoding constant
			var encoding ast.JsonEncoding
			switch yyDollar[4].str {
			case "utf8":
				encoding = ast.JS_ENC_UTF8
			case "utf16":
				encoding = ast.JS_ENC_UTF16
			case "utf32":
				encoding = ast.JS_ENC_UTF32
			default:
				encoding = ast.JS_ENC_DEFAULT
			}
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   encoding,
			}
		}
	case 1425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3920
		{
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   ast.JS_ENC_DEFAULT,
			}
		}
	case 1426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3930
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3931
		{
			yyVAL.node = nil
		}
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3936
		{
			yyVAL.node = ast.NewString("path")
		}
	case 1429:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3937
		{
			yyVAL.node = nil
		}
	case 1430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3943
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3947
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3956
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FOR_ORDINALITY, yyDollar[1].str)
			yyVAL.node = jsonTableCol
		}
	case 1433:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3965
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_REGULAR, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[3].node != nil {
				strNode := yyDollar[3].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1434:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3979
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FORMATTED, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			if yyDollar[3].node != nil {
				jsonTableCol.Format = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = jsonTableCol
		}
	case 1435:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3993
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_EXISTS, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1436:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4004
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, "")
			jsonTableCol.Columns = yyDollar[6].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1437:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4013
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, yyDollar[5].str)
			jsonTableCol.Columns = yyDollar[8].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4024
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1439:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4025
		{
			yyVAL.node = nil
		}
	case 1440:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4041
		{
			insertStmt := yyDollar[5].node.(*ast.InsertStmt)
			insertStmt.Relation = yyDollar[4].rangevar
			insertStmt.WithClause = yyDollar[1].with
			insertStmt.OnConflictClause = yyDollar[6].onconflict
			insertStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = insertStmt
		}
	case 1441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4053
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4057
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4066
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.SelectStmt = yyDollar[1].stmt
			yyVAL.node = insertStmt
		}
	case 1444:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4072
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Override = ast.OverridingKind(yyDollar[2].ival)
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1445:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4079
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1446:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4086
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.Override = ast.OverridingKind(yyDollar[5].ival)
			insertStmt.SelectStmt = yyDollar[7].stmt
			yyVAL.node = insertStmt
		}
	case 1447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4094
		{
			insertStmt := ast.NewInsertStmt(nil)
			// For DEFAULT VALUES, SelectStmt should be nil
			insertStmt.SelectStmt = nil
			yyVAL.node = insertStmt
		}
	case 1448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4103
		{
			yyVAL.ival = int(ast.OVERRIDING_USER_VALUE)
		}
	case 1449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4104
		{
			yyVAL.ival = int(ast.OVERRIDING_SYSTEM_VALUE)
		}
	case 1450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4109
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4113
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4121
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1453:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:4133
		{
			updateStmt := ast.NewUpdateStmt(yyDollar[3].rangevar)
			updateStmt.WithClause = yyDollar[1].with
			updateStmt.TargetList = yyDollar[5].list
			updateStmt.FromClause = yyDollar[6].list
			updateStmt.WhereClause = yyDollar[7].node
			updateStmt.ReturningList = yyDollar[8].list
			yyVAL.stmt = updateStmt
		}
	case 1454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4146
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4150
		{
			// Concatenate the lists - equivalent to PostgreSQL's list_concat
			for _, item := range yyDollar[3].list.Items {
				yyDollar[1].list.Append(item)
			}
			yyVAL.list = yyDollar[1].list
		}
	case 1456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4161
		{
			target := yyDollar[1].target
			target.Val = yyDollar[3].node
			yyVAL.list = ast.NewNodeList(target)
		}
	case 1457:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4167
		{
			// Multi-column assignment: (col1, col2) = (val1, val2)
			// Create MultiAssignRef nodes for each target, matching PostgreSQL exactly
			targetList := yyDollar[2].list
			ncolumns := len(targetList.Items)

			// Create a MultiAssignRef source for each target
			for i, item := range targetList.Items {
				resCol := item.(*ast.ResTarget)
				multiAssignRef := ast.NewMultiAssignRef(yyDollar[5].node, i+1, ncolumns, 0)
				resCol.Val = multiAssignRef
			}

			// Return the entire target list
			yyVAL.list = targetList
		}
	case 1458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4187
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4193
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4194
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1461:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4204
		{
			deleteStmt := ast.NewDeleteStmt(yyDollar[4].rangevar)
			deleteStmt.WithClause = yyDollar[1].with
			deleteStmt.UsingClause = yyDollar[5].list
			deleteStmt.WhereClause = yyDollar[6].node
			deleteStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = deleteStmt
		}
	case 1462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4216
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1463:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4220
		{
			yyVAL.list = nil
		}
	case 1464:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:4235
		{
			mergeStmt := &ast.MergeStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_MergeStmt},
			}
			mergeStmt.WithClause = yyDollar[1].with
			mergeStmt.Relation = yyDollar[4].rangevar
			mergeStmt.SourceRelation = yyDollar[6].node
			mergeStmt.JoinCondition = yyDollar[8].node
			mergeStmt.MergeWhenClauses = yyDollar[9].list
			mergeStmt.ReturningList = yyDollar[10].list
			yyVAL.stmt = mergeStmt
		}
	case 1465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4252
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4256
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1467:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4267
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Query:     yyDollar[3].stmt,
				IsFrom:    false,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Initialize Options as empty NodeList
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[9].list != nil {
				nodeList := yyDollar[9].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			yyVAL.stmt = copyStmt
		}
	case 1468:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:4291
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Relation:  yyDollar[3].rangevar,
				IsFrom:    yyDollar[5].ival != 0,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Assign column list directly as NodeList
			copyStmt.Attlist = yyDollar[4].list

			// Initialize Options as empty NodeList and add options
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[2].node != nil {
				copyStmt.Options.Append(yyDollar[2].node)
			}
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[10].list != nil {
				nodeList := yyDollar[10].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			if yyDollar[11].node != nil {
				copyStmt.WhereClause = yyDollar[11].node
			}
			yyVAL.stmt = copyStmt
		}
	case 1469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4327
		{
			yyVAL.ival = 1
		}
	case 1470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4328
		{
			yyVAL.ival = 0
		}
	case 1471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4332
		{
			yyVAL.ival = 1
		}
	case 1472:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4333
		{
			yyVAL.ival = 0
		}
	case 1473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4337
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4338
		{
			yyVAL.str = ""
		}
	case 1475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4339
		{
			yyVAL.str = ""
		}
	case 1476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4344
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1477:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4347
		{
			yyVAL.node = nil
		}
	case 1478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4352
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1479:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4355
		{
			yyVAL.node = nil
		}
	case 1480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4359
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4360
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4365
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4373
		{
			yyVAL.list = nil
		}
	case 1484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4380
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4384
		{
			yyVAL.node = ast.NewDefElem("freeze", ast.NewString("true"))
		}
	case 1486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4388
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4392
		{
			yyVAL.node = ast.NewDefElem("null", ast.NewString(yyDollar[3].str))
		}
	case 1488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4396
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("csv"))
		}
	case 1489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4400
		{
			yyVAL.node = ast.NewDefElem("header", ast.NewString("true"))
		}
	case 1490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4404
		{
			yyVAL.node = ast.NewDefElem("quote", ast.NewString(yyDollar[3].str))
		}
	case 1491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4408
		{
			yyVAL.node = ast.NewDefElem("escape", ast.NewString(yyDollar[3].str))
		}
	case 1492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4412
		{
			yyVAL.node = ast.NewDefElem("force_quote", yyDollar[3].list)
		}
	case 1493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4416
		{
			yyVAL.node = ast.NewDefElem("force_quote", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4420
		{
			yyVAL.node = ast.NewDefElem("force_not_null", yyDollar[4].list)
		}
	case 1495:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4424
		{
			yyVAL.node = ast.NewDefElem("force_not_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4428
		{
			yyVAL.node = ast.NewDefElem("force_null", yyDollar[3].list)
		}
	case 1497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4432
		{
			yyVAL.node = ast.NewDefElem("force_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4436
		{
			yyVAL.node = ast.NewDefElem("encoding", ast.NewString(yyDollar[2].str))
		}
	case 1499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4444
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4448
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4455
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4461
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4462
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4463
		{
			yyVAL.node = ast.NewA_Star(0)
		}
	case 1505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4464
		{
			yyVAL.node = ast.NewString("default")
		}
	case 1506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4465
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4466
		{
			yyVAL.node = nil
		}
	case 1508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4471
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4475
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4481
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4485
		{
			yyVAL.str = "true"
		}
	case 1512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4486
		{
			yyVAL.str = "false"
		}
	case 1513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4487
		{
			yyVAL.str = "on"
		}
	case 1514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4488
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4492
		{
			yyVAL.node = ast.NewFloat(yyDollar[1].str)
		}
	case 1516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4493
		{
			yyVAL.node = ast.NewFloat(yyDollar[2].str)
		}
	case 1517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4495
		{
			f := ast.NewFloat(yyDollar[2].str)
			f.FVal = "-" + f.FVal
			yyVAL.node = f
		}
	case 1518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4500
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4504
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4505
		{
			yyVAL.node = nil
		}
	case 1521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4509
		{
			yyVAL.objType = ast.OBJECT_ACCESS_METHOD
		}
	case 1522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4510
		{
			yyVAL.objType = ast.OBJECT_EVENT_TRIGGER
		}
	case 1523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4511
		{
			yyVAL.objType = ast.OBJECT_EXTENSION
		}
	case 1524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4512
		{
			yyVAL.objType = ast.OBJECT_FDW
		}
	case 1525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4513
		{
			yyVAL.objType = ast.OBJECT_LANGUAGE
		}
	case 1526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4514
		{
			yyVAL.objType = ast.OBJECT_PUBLICATION
		}
	case 1527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4515
		{
			yyVAL.objType = ast.OBJECT_SCHEMA
		}
	case 1528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4516
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_SERVER
		}
	case 1529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4520
		{
			yyVAL.objType = ast.OBJECT_POLICY
		}
	case 1530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4521
		{
			yyVAL.objType = ast.OBJECT_RULE
		}
	case 1531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4522
		{
			yyVAL.objType = ast.OBJECT_TRIGGER
		}
	case 1532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4526
		{
			yyVAL.objType = yyDollar[1].objType
		}
	case 1533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4527
		{
			yyVAL.objType = ast.OBJECT_DATABASE
		}
	case 1534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4528
		{
			yyVAL.objType = ast.OBJECT_ROLE
		}
	case 1535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4529
		{
			yyVAL.objType = ast.OBJECT_SUBSCRIPTION
		}
	case 1536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4530
		{
			yyVAL.objType = ast.OBJECT_TABLESPACE
		}
	case 1537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4535
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].typnam)
		}
	case 1538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4540
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 1541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4552
		{
			yyVAL.ival = 1
		}
	case 1542:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4553
		{
			yyVAL.ival = 0
		}
	case 1545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4569
		{
			yyVAL.node = nil
		}
	case 1546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4571
		{
			yyVAL.node = nil
		}
	case 1547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4579
		{
			yyVAL.ival = 1
		}
	case 1548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4580
		{
			yyVAL.ival = 0
		}
	case 1549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4584
		{
			yyVAL.ival = 1
		}
	case 1550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4585
		{
			yyVAL.ival = 0
		}
	case 1551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4589
		{
			yyVAL.ival = 1
		}
	case 1552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4590
		{
			yyVAL.ival = 0
		}
	case 1553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4594
		{
			yyVAL.ival = 1
		}
	case 1554:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4595
		{
			yyVAL.ival = 0
		}
	case 1555:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4604
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1556:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4610
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1557:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4616
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1558:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4622
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1559:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4628
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4636
		{
			yyVAL.ival = int(ast.MERGE_WHEN_MATCHED)
		}
	case 1561:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4637
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_SOURCE)
		}
	case 1562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4641
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1563:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4642
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4646
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4647
		{
			yyVAL.node = nil
		}
	case 1566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4652
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_UPDATE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			yyVAL.node = mergeWhen
		}
	case 1567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4667
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_DELETE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4676
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			mergeWhen.Values = yyDollar[2].list
			yyVAL.node = mergeWhen
		}
	case 1569:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4683
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[3].ival)
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1570:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4690
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1571:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:4703
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[6].ival)
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[8].list
			yyVAL.node = mergeWhen
		}
	case 1572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4716
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1573:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4725
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1574:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:4740
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_UPDATE)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			onConflict.TargetList = yyDollar[7].list
			onConflict.WhereClause = yyDollar[8].node
			yyVAL.onconflict = onConflict
		}
	case 1575:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4750
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_NOTHING)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			yyVAL.onconflict = onConflict
		}
	case 1576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4758
		{
			yyVAL.onconflict = nil
		}
	case 1577:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4769
		{
			// Create InferClause for column-based conflict detection
			infer := ast.NewInferClause()
			// Assign IndexElems directly as NodeList
			infer.IndexElems = yyDollar[2].list
			infer.WhereClause = yyDollar[4].node
			yyVAL.node = infer
		}
	case 1578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4778
		{
			// Create InferClause for constraint-based conflict detection
			infer := ast.NewInferClause()
			infer.Conname = yyDollar[3].str
			yyVAL.node = infer
		}
	case 1579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4785
		{
			yyVAL.node = nil
		}
	case 1580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4796
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4800
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4807
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4811
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4818
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Name = yyDollar[1].str
		}
	case 1585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4823
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[1].node
		}
	case 1586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4828
		{
			yyVAL.node = yyDollar[4].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[2].node
		}
	case 1587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4836
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Ordering = ast.SortByDir(yyDollar[3].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[4].ival)
			yyVAL.node = indexElem
		}
	case 1588:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4847
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Opclassopts = yyDollar[3].list
			indexElem.Ordering = ast.SortByDir(yyDollar[4].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[5].ival)
			yyVAL.node = indexElem
		}
	case 1589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4861
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4862
		{
			yyVAL.list = nil
		}
	case 1591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4866
		{
			yyVAL.ival = int(ast.SORTBY_ASC)
		}
	case 1592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4867
		{
			yyVAL.ival = int(ast.SORTBY_DESC)
		}
	case 1593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4868
		{
			yyVAL.ival = int(ast.SORTBY_DEFAULT)
		}
	case 1594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4872
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_FIRST)
		}
	case 1595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4873
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_LAST)
		}
	case 1596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4874
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_DEFAULT)
		}
	case 1597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4879
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4883
		{
			yyVAL.list = nil
		}
	case 1599:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:4904
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[6].list
			createStmt.InhRelations = yyDollar[8].list
			createStmt.PartSpec = yyDollar[9].partspec
			createStmt.AccessMethod = yyDollar[10].str
			createStmt.Options = yyDollar[11].list
			createStmt.OnCommit = yyDollar[12].oncommit
			createStmt.TableSpaceName = yyDollar[13].str
			yyVAL.stmt = createStmt
		}
	case 1600:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:4920
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[9].list
			createStmt.InhRelations = yyDollar[11].list
			createStmt.PartSpec = yyDollar[12].partspec
			createStmt.AccessMethod = yyDollar[13].str
			createStmt.Options = yyDollar[14].list
			createStmt.OnCommit = yyDollar[15].oncommit
			createStmt.TableSpaceName = yyDollar[16].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1601:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:4937
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[6].list)
			createStmt.TableElts = yyDollar[7].list
			createStmt.PartSpec = yyDollar[8].partspec
			createStmt.AccessMethod = yyDollar[9].str
			createStmt.Options = yyDollar[10].list
			createStmt.OnCommit = yyDollar[11].oncommit
			createStmt.TableSpaceName = yyDollar[12].str
			yyVAL.stmt = createStmt
		}
	case 1602:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:4953
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[9].list)
			createStmt.TableElts = yyDollar[10].list
			createStmt.PartSpec = yyDollar[11].partspec
			createStmt.AccessMethod = yyDollar[12].str
			createStmt.Options = yyDollar[13].list
			createStmt.OnCommit = yyDollar[14].oncommit
			createStmt.TableSpaceName = yyDollar[15].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1603:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:4970
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[7].rangevar)
			createStmt.TableElts = yyDollar[8].list
			createStmt.PartBound = yyDollar[9].partboundspec
			createStmt.PartSpec = yyDollar[10].partspec
			createStmt.AccessMethod = yyDollar[11].str
			createStmt.Options = yyDollar[12].list
			createStmt.OnCommit = yyDollar[13].oncommit
			createStmt.TableSpaceName = yyDollar[14].str
			yyVAL.stmt = createStmt
		}
	case 1604:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:4987
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[10].rangevar)
			createStmt.TableElts = yyDollar[11].list
			createStmt.PartBound = yyDollar[12].partboundspec
			createStmt.PartSpec = yyDollar[13].partspec
			createStmt.AccessMethod = yyDollar[14].str
			createStmt.Options = yyDollar[15].list
			createStmt.OnCommit = yyDollar[16].oncommit
			createStmt.TableSpaceName = yyDollar[17].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5005
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5006
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5007
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5008
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5009
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5010
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5011
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 1612:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5012
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 1613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5016
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1614:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5017
		{
			yyVAL.list = nil
		}
	case 1615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5022
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5027
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5034
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5035
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5036
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5041
		{
			yyVAL.node = ast.NewTableLikeClause(yyDollar[2].rangevar, ast.TableLikeOption(yyDollar[3].ival))
		}
	case 1621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5048
		{
			yyVAL.ival = yyDollar[1].ival | yyDollar[3].ival
		}
	case 1622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5052
		{
			yyVAL.ival = yyDollar[1].ival & ^yyDollar[3].ival
		}
	case 1623:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5056
		{
			yyVAL.ival = 0
		}
	case 1624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5062
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMMENTS)
		}
	case 1625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5063
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMPRESSION)
		}
	case 1626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5064
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_CONSTRAINTS)
		}
	case 1627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5065
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_DEFAULTS)
		}
	case 1628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5066
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_IDENTITY)
		}
	case 1629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5067
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_GENERATED)
		}
	case 1630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5068
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_INDEXES)
		}
	case 1631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5069
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STATISTICS)
		}
	case 1632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5070
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STORAGE)
		}
	case 1633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5071
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_ALL)
		}
	case 1634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5076
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5077
		{
			yyVAL.str = "default"
		}
	case 1636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5081
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5082
		{
			yyVAL.str = ""
		}
	case 1638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5086
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5087
		{
			yyVAL.str = "default"
		}
	case 1640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5091
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1641:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5092
		{
			yyVAL.str = ""
		}
	case 1642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5097
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1643:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5098
		{
			yyVAL.list = nil
		}
	case 1644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5103
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5109
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5116
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5117
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5122
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[2].list
			yyVAL.node = colDef
		}
	case 1649:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5128
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[4].list
			yyVAL.node = colDef
		}
	case 1650:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5139
		{
			hashSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_HASH)
			hashSpec.IsDefault = false

			// Parse hash partition bounds (modulus and remainder)
			hashOptions := yyDollar[5].list
			for _, optNode := range hashOptions.Items {
				if defElem, ok := optNode.(*ast.DefElem); ok {
					if defElem.Defname == "modulus" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Modulus = integerVal.IVal
							}
						}
					} else if defElem.Defname == "remainder" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Remainder = integerVal.IVal
							}
						}
					}
				}
			}

			yyVAL.partboundspec = hashSpec
		}
	case 1651:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5168
		{
			listSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			listSpec.IsDefault = false
			listSpec.ListDatums = yyDollar[5].list
			yyVAL.partboundspec = listSpec
		}
	case 1652:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5177
		{
			rangeSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_RANGE)
			rangeSpec.IsDefault = false
			rangeSpec.LowDatums = yyDollar[5].list
			rangeSpec.HighDatums = yyDollar[9].list
			yyVAL.partboundspec = rangeSpec
		}
	case 1653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5187
		{
			defaultSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			defaultSpec.IsDefault = true
			yyVAL.partboundspec = defaultSpec
		}
	case 1654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5196
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, ast.NewA_Const(ast.NewInteger(yyDollar[2].ival), 0))
		}
	case 1655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5203
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5207
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1657:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5215
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1658:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5216
		{
			yyVAL.list = nil
		}
	case 1659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5221
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5225
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5233
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5239
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5244
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1664:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5249
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			colDef.StorageName = yyDollar[3].str
			colDef.Compression = yyDollar[4].str
			colDef.Fdwoptions = yyDollar[5].list
			colDef.Constraints = yyDollar[6].list
			yyVAL.node = colDef
		}
	case 1665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5261
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1666:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5266
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1667:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5273
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5278
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5279
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5281
		{
			/*
			 * Note: the CollateClause is momentarily included in
			 * the list built by ColQualList, but we split it out
			 * again in SplitColQualList.
			 */
			collateClause := ast.NewCollateClause(yyDollar[2].list)
			yyVAL.node = collateClause
		}
	case 1671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5294
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5299
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_NOT_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5304
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRED)
			yyVAL.node = constraint
		}
	case 1674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5309
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_IMMEDIATE)
			yyVAL.node = constraint
		}
	case 1675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5317
		{
			yyVAL.bval = true
		}
	case 1676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5318
		{
			yyVAL.bval = false
		}
	case 1677:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5319
		{
			yyVAL.bval = true
		}
	case 1678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5323
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_ALWAYS
		}
	case 1679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5324
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_BY_DEFAULT
		}
	case 1680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5329
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5331
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5336
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5340
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5344
		{
			// SeqOptElem already returns a DefElem, so we can use it directly
			// Check for invalid options as per PostgreSQL
			defElem := yyDollar[2].defelt
			if defElem.Defname == "as" || defElem.Defname == "restart" || defElem.Defname == "owned_by" {
				yylex.Error("sequence option not supported here")
			}
			yyVAL.defelt = yyDollar[2].defelt
		}
	case 1685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5354
		{
			yyVAL.defelt = ast.NewDefElem("generated", ast.NewInteger(int(yyDollar[3].byt)))
		}
	case 1686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5360
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1687:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5361
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5366
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].typnam)
		}
	case 1689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5370
		{
			yyVAL.defelt = ast.NewDefElem("cache", yyDollar[2].node)
		}
	case 1690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5374
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(true))
		}
	case 1691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5378
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(false))
		}
	case 1692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5382
		{
			yyVAL.defelt = ast.NewDefElem("increment", yyDollar[3].node)
		}
	case 1693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5386
		{
			yyVAL.defelt = ast.NewDefElem("logged", nil)
		}
	case 1694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5390
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", yyDollar[2].node)
		}
	case 1695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5394
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", yyDollar[2].node)
		}
	case 1696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5398
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", nil)
		}
	case 1697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5402
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", nil)
		}
	case 1698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5406
		{
			yyVAL.defelt = ast.NewDefElem("owned_by", yyDollar[3].list)
		}
	case 1699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5410
		{
			yyVAL.defelt = ast.NewDefElem("sequence_name", yyDollar[3].list)
		}
	case 1700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5414
		{
			yyVAL.defelt = ast.NewDefElem("start", yyDollar[3].node)
		}
	case 1701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5418
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5422
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5426
		{
			yyVAL.defelt = ast.NewDefElem("unlogged", nil)
		}
	case 1704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5432
		{
		}
	case 1705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5433
		{
		}
	case 1706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5437
		{
		}
	case 1707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5438
		{
		}
	case 1708:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5439
		{
		}
	case 1709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5444
		{
			// RECHECK no longer does anything in opclass definitions,
			// but we still accept it to ease porting of old database dumps.
			// When this is used, we should emit a notice.
			// For now, just return true to indicate RECHECK was present
			yyVAL.bval = true
		}
	case 1710:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5451
		{
			yyVAL.bval = false
		}
	case 1711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5455
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1712:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5456
		{
			yyVAL.list = nil
		}
	case 1713:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5461
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NOTNULL)
		}
	case 1714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5465
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NULL)
		}
	case 1715:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5469
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Keys = nil // Will be filled by the parser
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Options = yyDollar[3].list
			constraint.Indexspace = yyDollar[4].str
			yyVAL.node = constraint
		}
	case 1716:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5478
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = nil // Will be filled by the parser
			yyVAL.node = constraint
		}
	case 1717:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5484
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			yyVAL.node = constraint
		}
	case 1718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5490
		{
			constraint := ast.NewConstraint(ast.CONSTR_DEFAULT)
			constraint.RawExpr = yyDollar[2].node
			yyVAL.node = constraint
		}
	case 1719:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5496
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Pktable = yyDollar[2].rangevar
			constraint.PkAttrs = yyDollar[3].list
			constraint.FkMatchtype = yyDollar[4].byt
			if actions := yyDollar[5].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			yyVAL.node = constraint
		}
	case 1720:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5513
		{
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.Options = yyDollar[5].list
			yyVAL.node = constraint
		}
	case 1721:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5520
		{
			constraint := ast.NewConstraint(ast.CONSTR_GENERATED)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.RawExpr = yyDollar[5].node
			yyVAL.node = constraint
		}
	case 1722:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5530
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5535
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1724:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5540
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			processConstraintAttributeSpec(yyDollar[5].ival, constraint)
			yyVAL.node = constraint
		}
	case 1725:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5548
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 1726:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5559
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Indexname = yyDollar[2].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[3].ival, constraint)
			yyVAL.node = constraint
		}
	case 1727:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5570
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 1728:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5580
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Indexname = yyDollar[3].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[4].ival, constraint)
			yyVAL.node = constraint
		}
	case 1729:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:5591
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.FkAttrs = yyDollar[4].list
			constraint.Pktable = yyDollar[7].rangevar
			constraint.PkAttrs = yyDollar[8].list
			constraint.FkMatchtype = yyDollar[9].byt
			if actions := yyDollar[10].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			processConstraintAttributeSpec(yyDollar[11].ival, constraint)
			yyVAL.node = constraint
		}
	case 1730:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5612
		{
			constraint := ast.NewConstraint(ast.CONSTR_EXCLUSION)
			constraint.AccessMethod = yyDollar[2].str
			constraint.Exclusions = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			constraint.WhereClause = yyDollar[9].node
			processConstraintAttributeSpec(yyDollar[10].ival, constraint)
			yyVAL.node = constraint
		}
	case 1731:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5626
		{
			yyVAL.bval = true
		}
	case 1732:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5627
		{
			yyVAL.bval = false
		}
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5633
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5639
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1735:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5647
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[3].list)
		}
	case 1736:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5652
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[5].list)
		}
	case 1737:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5660
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1738:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5664
		{
			yyVAL.list = nil
		}
	case 1739:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5671
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_FULL
		}
	case 1740:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5675
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_PARTIAL
		}
	case 1741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5679
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 1742:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5683
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5690
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 1744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5700
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 1745:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5710
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = yyDollar[2].keyaction
			yyVAL.keyactions = n
		}
	case 1746:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5717
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[2].keyaction
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 1747:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5724
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 1748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5739
		{
			// Check for unsupported column lists on UPDATE actions
			keyAction := yyDollar[3].keyaction
			if keyAction.Cols != nil {
				if len(keyAction.Cols.Items) > 0 {
					yylex.Error("column list with SET NULL/SET DEFAULT is only supported for ON DELETE actions")
				}
			}
			yyVAL.keyaction = keyAction
		}
	case 1749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5752
		{
			yyVAL.keyaction = yyDollar[3].keyaction
		}
	case 1750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5759
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_NOACTION
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5766
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_RESTRICT
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5773
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_CASCADE
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1753:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5780
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETNULL
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 1754:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5787
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETDEFAULT
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 1755:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5796
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1756:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5797
		{
			yyVAL.list = nil
		}
	case 1757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5801
		{
			yyVAL.partspec = yyDollar[1].partspec
		}
	case 1758:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5802
		{
			yyVAL.partspec = nil
		}
	case 1759:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5807
		{
			partitionSpec := ast.NewPartitionSpec(ast.PartitionStrategy(yyDollar[3].str), yyDollar[5].list)
			yyVAL.partspec = partitionSpec
		}
	case 1760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5815
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1761:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5820
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1762:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5828
		{
			partElem := ast.NewPartitionElem(yyDollar[1].str, nil, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 1763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5835
		{
			partElem := ast.NewPartitionElem("", yyDollar[1].node, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 1764:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5842
		{
			partElem := ast.NewPartitionElem("", yyDollar[2].node, 0)
			partElem.Collation = yyDollar[4].list
			partElem.Opclass = yyDollar[5].list
			yyVAL.node = partElem
		}
	case 1765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5851
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1766:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5852
		{
			yyVAL.str = ""
		}
	case 1767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5856
		{
			yyVAL.oncommit = ast.ONCOMMIT_DROP
		}
	case 1768:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5857
		{
			yyVAL.oncommit = ast.ONCOMMIT_DELETE_ROWS
		}
	case 1769:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5858
		{
			yyVAL.oncommit = ast.ONCOMMIT_PRESERVE_ROWS
		}
	case 1770:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5859
		{
			yyVAL.oncommit = ast.ONCOMMIT_NOOP
		}
	case 1771:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5863
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1772:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5864
		{
			yyVAL.str = ""
		}
	case 1773:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5868
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1774:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5869
		{
			yyVAL.str = ""
		}
	case 1775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5873
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1776:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:5886
		{
			indexStmt := ast.NewIndexStmt(yyDollar[5].str, yyDollar[7].rangevar, yyDollar[10].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.AccessMethod = yyDollar[8].str
			indexStmt.IndexIncludingParams = yyDollar[12].list
			indexStmt.NullsNotDistinct = !yyDollar[13].bval
			indexStmt.Options = yyDollar[14].list
			indexStmt.TableSpace = yyDollar[15].str
			indexStmt.WhereClause = yyDollar[16].node
			yyVAL.stmt = indexStmt
		}
	case 1777:
		yyDollar = yyS[yypt-19 : yypt+1]
//line postgres.y:5901
		{
			indexStmt := ast.NewIndexStmt(yyDollar[8].str, yyDollar[10].rangevar, yyDollar[13].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.IfNotExists = true
			indexStmt.AccessMethod = yyDollar[11].str
			indexStmt.IndexIncludingParams = yyDollar[15].list
			indexStmt.NullsNotDistinct = !yyDollar[16].bval
			indexStmt.Options = yyDollar[17].list
			indexStmt.TableSpace = yyDollar[18].str
			indexStmt.WhereClause = yyDollar[19].node
			yyVAL.stmt = indexStmt
		}
	case 1778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5917
		{
			yyVAL.bval = true
		}
	case 1779:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5918
		{
			yyVAL.bval = false
		}
	case 1780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5922
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1781:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5923
		{
			yyVAL.str = "btree"
		}
	case 1782:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5927
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1783:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5928
		{
			yyVAL.list = nil
		}
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5933
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1785:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5938
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1786:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5946
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1787:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5947
		{
			yyVAL.list = nil
		}
	case 1788:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5959
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1789:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5965
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1790:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5972
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 1791:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5978
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1792:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5985
		{
			// Index partition attachment - dedicated rule
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 1793:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5994
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			yyVAL.stmt = alterStmt
		}
	case 1794:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6000
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1795:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6007
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			yyVAL.stmt = alterStmt
		}
	case 1796:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6013
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1797:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6020
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			yyVAL.stmt = alterStmt
		}
	case 1798:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6026
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1799:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6033
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1800:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6039
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1801:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6046
		{
			// Partition commands - dedicated rule for partition-only operations
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1802:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6055
		{
			// Partition commands with IF EXISTS
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[6].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1803:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6065
		{
			// Bulk tablespace move for tables
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 1804:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6072
		{
			// Bulk tablespace move for tables owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 1805:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6080
		{
			// Bulk tablespace move for indexes
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 1806:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6087
		{
			// Bulk tablespace move for indexes owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 1807:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:6095
		{
			// Bulk tablespace move for materialized views
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[10].str)
			moveStmt.Nowait = yyDollar[11].bval
			yyVAL.stmt = moveStmt
		}
	case 1808:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:6102
		{
			// Bulk tablespace move for materialized views owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[13].str)
			moveStmt.Roles = yyDollar[10].list
			moveStmt.Nowait = yyDollar[14].bval
			yyVAL.stmt = moveStmt
		}
	case 1809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6113
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1810:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6118
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6126
		{
			yyVAL.bval = true
		}
	case 1812:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6127
		{
			yyVAL.bval = false
		}
	case 1813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6132
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].rolespec)
		}
	case 1814:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6137
		{
			yyDollar[1].list.Append(yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 1815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6145
		{
			roleSpec := yyDollar[1].rolespec

			switch roleSpec.Roletype {
			case ast.ROLESPEC_CSTRING:
				yyVAL.str = roleSpec.Rolename
			case ast.ROLESPEC_PUBLIC:
				// PostgreSQL throws an error for "public" role name
				yylex.Error(`role name "public" is reserved`)
				return 1
			case ast.ROLESPEC_SESSION_USER:
				// PostgreSQL throws an error: SESSION_USER cannot be used as a role name here
				yylex.Error(`SESSION_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_USER:
				// PostgreSQL throws an error: CURRENT_USER cannot be used as a role name here
				yylex.Error(`CURRENT_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_ROLE:
				// PostgreSQL throws an error: CURRENT_ROLE cannot be used as a role name here
				yylex.Error(`CURRENT_ROLE cannot be used as a role name here`)
				return 1
			default:
				yylex.Error(`invalid role specification`)
				return 1
			}
		}
	case 1816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6176
		{
			// Handle special role names: "public" and "none"
			var roleSpec *ast.RoleSpec

			if yyDollar[1].str == "public" {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_PUBLIC,
				}
			} else if yyDollar[1].str == "none" {
				// PostgreSQL throws an error for "none" - role name "none" is reserved
				yylex.Error(`role name "none" is reserved`)
				return 1
			} else {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_CSTRING,
					Rolename: yyDollar[1].str,
				}
			}
			yyVAL.rolespec = roleSpec
		}
	case 1817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6199
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_ROLE,
			}
		}
	case 1818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6206
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_USER,
			}
		}
	case 1819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6213
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_SESSION_USER,
			}
		}
	case 1820:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6224
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[2].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1821:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6231
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[5].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1822:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6238
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1823:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6245
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[6].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1824:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6252
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ColumnDefault, yyDollar[3].str, yyDollar[4].node)
		}
	case 1825:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6257
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropNotNull, yyDollar[3].str, nil)
		}
	case 1826:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6262
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetNotNull, yyDollar[3].str, nil)
		}
	case 1827:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6267
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetExpression, yyDollar[3].str, yyDollar[8].node)
		}
	case 1828:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6272
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
		}
	case 1829:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6277
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1830:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6284
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStatistics, yyDollar[3].str, yyDollar[6].node)
		}
	case 1831:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6289
		{
			cmd := ast.NewAlterTableCmd(ast.AT_SetStatistics, "", yyDollar[6].node)
			cmd.Num = int16(yyDollar[3].ival)
			yyVAL.node = cmd
		}
	case 1832:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6296
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 1833:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6301
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 1834:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6306
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStorage, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 1835:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6311
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetCompression, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 1836:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6316
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddIdentity, yyDollar[3].str, nil)
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[6].byt
			constraint.Options = yyDollar[9].list
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 1837:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6326
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetIdentity, yyDollar[3].str, yyDollar[4].list)
		}
	case 1838:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6331
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1839:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6338
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1840:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6345
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1841:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6353
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1842:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6364
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, nil)
			def := ast.NewColumnDef("", yyDollar[6].typnam, 0)
			def.Collclause = yyDollar[7].node.(*ast.CollateClause)
			def.RawDefault = yyDollar[8].node
			cmd.Def = def
			yyVAL.node = cmd
		}
	case 1843:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6374
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AlterColumnGenericOptions, yyDollar[3].str, yyDollar[4].list)
		}
	case 1844:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6379
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddConstraint, "", yyDollar[2].node)
		}
	case 1845:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6384
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterConstraint, "", nil)
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Conname = yyDollar[3].str
			constraint.Deferrable = (yyDollar[4].ival & ast.CAS_DEFERRABLE) != 0
			constraint.Initdeferred = (yyDollar[4].ival & ast.CAS_INITIALLY_DEFERRED) != 0
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 1846:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6395
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ValidateConstraint, yyDollar[3].str, nil)
		}
	case 1847:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6400
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1848:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6408
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1849:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6416
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOids, "", nil)
		}
	case 1850:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6421
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ClusterOn, yyDollar[3].str, nil)
		}
	case 1851:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6426
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropCluster, "", nil)
		}
	case 1852:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6431
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetLogged, "", nil)
		}
	case 1853:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6436
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetUnLogged, "", nil)
		}
	case 1854:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6441
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrig, yyDollar[3].str, nil)
		}
	case 1855:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6446
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysTrig, yyDollar[4].str, nil)
		}
	case 1856:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6451
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaTrig, yyDollar[4].str, nil)
		}
	case 1857:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6456
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigAll, "", nil)
		}
	case 1858:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6461
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigUser, "", nil)
		}
	case 1859:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6466
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrig, yyDollar[3].str, nil)
		}
	case 1860:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6471
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigAll, "", nil)
		}
	case 1861:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6476
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigUser, "", nil)
		}
	case 1862:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6481
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRule, yyDollar[3].str, nil)
		}
	case 1863:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6486
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysRule, yyDollar[4].str, nil)
		}
	case 1864:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6491
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaRule, yyDollar[4].str, nil)
		}
	case 1865:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6496
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRule, yyDollar[3].str, nil)
		}
	case 1866:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6501
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddInherit, "", yyDollar[2].rangevar)
		}
	case 1867:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6506
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropInherit, "", yyDollar[3].rangevar)
		}
	case 1868:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6511
		{
			typeName := makeTypeNameFromNodeList(yyDollar[2].list)
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddOf, "", typeName)
		}
	case 1869:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6517
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOf, "", nil)
		}
	case 1870:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6522
		{
			cmd := ast.NewAlterTableCmd(ast.AT_ChangeOwner, "", nil)
			cmd.Newowner = yyDollar[3].rolespec
			yyVAL.node = cmd
		}
	case 1871:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6529
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetAccessMethod, yyDollar[4].str, nil)
		}
	case 1872:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6534
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetTableSpace, yyDollar[3].str, nil)
		}
	case 1873:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6539
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetRelOptions, "", yyDollar[2].list)
		}
	case 1874:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6544
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetRelOptions, "", yyDollar[2].list)
		}
	case 1875:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6549
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ReplicaIdentity, "", yyDollar[3].node)
		}
	case 1876:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6554
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRowSecurity, "", nil)
		}
	case 1877:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6559
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRowSecurity, "", nil)
		}
	case 1878:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6564
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ForceRowSecurity, "", nil)
		}
	case 1879:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6569
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_NoForceRowSecurity, "", nil)
		}
	case 1880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6573
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_GenericOptions, "", yyDollar[1].list)
		}
	case 1881:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6581
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, yyDollar[4].partboundspec, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1882:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6589
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, yyDollar[4].bval, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1883:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6596
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartitionFinalize, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1884:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6607
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1885:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6616
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1886:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6617
		{
			yyVAL.node = nil
		}
	case 1887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6621
		{
		}
	case 1888:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6622
		{
		}
	case 1889:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6633
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1890:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6646
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1891:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6659
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1892:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6672
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1893:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6685
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[5].list
			objects.Append(ast.NewString(yyDollar[3].str))
			n.Objects = objects
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1894:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6700
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[7].list
			objects.Append(ast.NewString(yyDollar[5].str))
			n.Objects = objects
			n.Behavior = yyDollar[8].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1895:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6715
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1896:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6728
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1897:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6741
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1898:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6754
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1899:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6767
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = false
			n.Objects = yyDollar[4].list
			n.Behavior = yyDollar[5].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 1900:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6780
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = true
			n.Objects = yyDollar[6].list
			n.Behavior = yyDollar[7].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 1901:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6796
		{
			stmt := yyDollar[2].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 1902:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6802
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = true
			yyVAL.stmt = stmt
		}
	case 1903:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6808
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 1904:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6817
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "TRANSACTION", yyDollar[2].list, false)
		}
	case 1905:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6821
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "SESSION CHARACTERISTICS AS TRANSACTION", yyDollar[5].list, false)
		}
	case 1906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6824
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 1907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6828
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 1908:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6830
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "timezone", nil, false)
		}
	case 1909:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6834
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "transaction_isolation", nil, false)
		}
	case 1910:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6838
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "session_authorization", nil, false)
		}
	case 1911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6845
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, yyDollar[1].str, nil, false)
		}
	case 1912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6849
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET_ALL, "", nil, false)
		}
	case 1913:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6855
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 1914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6856
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 1915:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6860
		{
			yyVAL.stmt = ast.Stmt(yyDollar[2].vsetstmt)
		}
	case 1916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6865
		{
			yyVAL.objType = ast.OBJECT_TABLE
		}
	case 1917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6866
		{
			yyVAL.objType = ast.OBJECT_SEQUENCE
		}
	case 1918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6867
		{
			yyVAL.objType = ast.OBJECT_VIEW
		}
	case 1919:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6868
		{
			yyVAL.objType = ast.OBJECT_MATVIEW
		}
	case 1920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6869
		{
			yyVAL.objType = ast.OBJECT_INDEX
		}
	case 1921:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6870
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_TABLE
		}
	case 1922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6871
		{
			yyVAL.objType = ast.OBJECT_COLLATION
		}
	case 1923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6872
		{
			yyVAL.objType = ast.OBJECT_CONVERSION
		}
	case 1924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6873
		{
			yyVAL.objType = ast.OBJECT_STATISTIC_EXT
		}
	case 1925:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6874
		{
			yyVAL.objType = ast.OBJECT_TSPARSER
		}
	case 1926:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6875
		{
			yyVAL.objType = ast.OBJECT_TSDICTIONARY
		}
	case 1927:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6876
		{
			yyVAL.objType = ast.OBJECT_TSTEMPLATE
		}
	case 1928:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6877
		{
			yyVAL.objType = ast.OBJECT_TSCONFIGURATION
		}
	case 1929:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6890
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1930:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6895
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 1931:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6909
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode: ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:  yyDollar[1].list,
				Objargs:  yyDollar[2].list,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 1932:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6921
		{
			yylex.Error("Use NONE to denote the missing argument of a unary operator.")
			return 1
		}
	case 1933:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6926
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, yyDollar[4].typnam)
		}
	case 1934:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6928
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[4].typnam)
		}
	case 1935:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6930
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, nil)
		}
	case 1936:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6934
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 1937:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6948
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1938:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6959
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1939:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6970
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1940:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6981
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DATABASE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1941:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6992
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1942:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7003
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMCONSTRAINT,
				Object:     yyDollar[3].list,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1943:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7015
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1944:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7026
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1945:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7037
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1946:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7048
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1947:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7059
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1948:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7076
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1949:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7093
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1950:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7105
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[7].rangevar,
				Subname:    yyDollar[5].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1951:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7117
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1952:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7128
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1953:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7139
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1954:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7150
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SCHEMA,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1955:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7161
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1956:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7172
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1957:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7183
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1958:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7194
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1959:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7205
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1960:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7216
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1961:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7227
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1962:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7238
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1963:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7249
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1964:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7260
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1965:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7271
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1966:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7282
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1967:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7293
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1968:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7304
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1969:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7315
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1970:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7328
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1971:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7341
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1972:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7354
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1973:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7367
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1974:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7380
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1975:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7393
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[3].rangevar,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1976:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7405
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[8].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1977:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7417
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1978:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7430
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1979:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7443
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_RULE,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1980:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7455
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TRIGGER,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1981:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7467
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1982:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7478
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1983:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7489
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1984:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7500
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLESPACE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1985:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7511
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1986:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7522
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSPARSER,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1987:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7533
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1988:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7544
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSTEMPLATE,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1989:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7555
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1990:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7566
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1991:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7577
		{
			rv, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(err.Error())
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_ATTRIBUTE,
				RelationType: ast.OBJECT_TYPE,
				Relation:     rv,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				Behavior:     ast.DropBehavior(yyDollar[9].dropBehav),
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1992:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7603
		{
			yyVAL.ival = 0
		}
	case 1993:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7605
		{
			// Combine constraint attribute bits
			newspec := yyDollar[1].ival | yyDollar[2].ival

			// Check for conflicts (NOT DEFERRABLE + INITIALLY DEFERRED)
			if (newspec & (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED)) == (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED) {
				// This would be an error in real PostgreSQL parser
			}

			yyVAL.ival = newspec
		}
	case 1994:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7619
		{
			yyVAL.ival = ast.CAS_NOT_DEFERRABLE
		}
	case 1995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7620
		{
			yyVAL.ival = ast.CAS_DEFERRABLE
		}
	case 1996:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7621
		{
			yyVAL.ival = ast.CAS_INITIALLY_IMMEDIATE
		}
	case 1997:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7622
		{
			yyVAL.ival = ast.CAS_INITIALLY_DEFERRED
		}
	case 1998:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7623
		{
			yyVAL.ival = ast.CAS_NOT_VALID
		}
	case 1999:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7624
		{
			yyVAL.ival = ast.CAS_NO_INHERIT
		}
	case 2000:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7628
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7633
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2002:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7638
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2003:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7646
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7650
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2005:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7654
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, yyDollar[5].node, ast.DEFELEM_UNSPEC)
		}
	case 2006:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7658
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, nil, ast.DEFELEM_UNSPEC)
		}
	case 2007:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7672
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].ival != 0,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  yyDollar[7].typnam,
				Options:     yyDollar[8].list,
				SQLBody:     yyDollar[9].node,
			}
			yyVAL.stmt = stmt
		}
	case 2008:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:7686
		{
			// Handle RETURNS TABLE variant
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].ival != 0,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil, // TODO: Handle table return type
				Options:     yyDollar[11].list,
				SQLBody:     yyDollar[12].node,
			}
			// TODO: Process table_func_column_list into appropriate return type
			yyVAL.stmt = stmt
		}
	case 2009:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7702
		{
			// No explicit return type (for procedures disguised as functions)
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].ival != 0,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2010:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7717
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: true,
				Replace:     yyDollar[2].ival != 0,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2011:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7732
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2012:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7733
		{
			yyVAL.list = nil
		}
	case 2013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7738
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2014:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7742
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7750
		{
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2016:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7754
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2017:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7759
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2018:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7767
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    yyDollar[2].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2019:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7776
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[2].funparammode,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2020:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7785
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2021:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7794
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    "",
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7803
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    "",
				ArgType: yyDollar[1].typnam,
			}
			yyVAL.funparam = param
		}
	case 2023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7814
		{
			yyVAL.funparammode = ast.FUNC_PARAM_IN
		}
	case 2024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7815
		{
			yyVAL.funparammode = ast.FUNC_PARAM_OUT
		}
	case 2025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7816
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2026:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7817
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7818
		{
			yyVAL.funparammode = ast.FUNC_PARAM_VARIADIC
		}
	case 2028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7822
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7826
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2030:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7828
		{
			// Handle %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				// TODO: Add %TYPE indicator
			}
		}
	case 2031:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7838
		{
			// Handle SETOF %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[2].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				Setof: true,
			}
		}
	case 2032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7850
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2033:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7851
		{
			yyVAL.list = nil
		}
	case 2034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7856
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].defelt)
			yyVAL.list = list
		}
	case 2035:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7862
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2036:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7870
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].node)
		}
	case 2037:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7874
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 2038:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7878
		{
			yyVAL.defelt = ast.NewDefElem("transform", yyDollar[2].list)
		}
	case 2039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7882
		{
			yyVAL.defelt = ast.NewDefElem("window", ast.NewBoolean(true))
		}
	case 2040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7886
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7893
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.node = list
		}
	case 2042:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7899
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 2043:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7909
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[3].typnam)
			yyVAL.list = list
		}
	case 2044:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7915
		{
			yyDollar[1].list.Append(yyDollar[5].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7923
		{
			yyVAL.node = yyDollar[1].stmt
		}
	case 2046:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7927
		{
			/*
			 * A compound statement is stored as a single-item list
			 * containing the list of statements as its member.  That
			 * way, the parse analysis code can tell apart an empty
			 * body from no body at all.
			 */
			list := ast.NewNodeList()
			list.Append(yyDollar[3].list)
			yyVAL.node = list
		}
	case 2047:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7939
		{
			yyVAL.node = nil
		}
	case 2048:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7946
		{
			yyVAL.stmt = &ast.ReturnStmt{
				ReturnVal: yyDollar[2].node,
			}
		}
	case 2049:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7955
		{
			/* As in stmtmulti, discard empty statements */
			if yyDollar[2].stmt != nil {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			} else {
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2050:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7965
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2051:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7971
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2052:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7972
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2053:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7977
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(false))
		}
	case 2054:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7981
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 2055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7985
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 2056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7989
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("immutable"))
		}
	case 2057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7993
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("stable"))
		}
	case 2058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7997
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("volatile"))
		}
	case 2059:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8001
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 2060:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8005
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 2061:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8009
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 2062:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8013
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 2063:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8017
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(true))
		}
	case 2064:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8021
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(false))
		}
	case 2065:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8025
		{
			yyVAL.defelt = ast.NewDefElem("cost", yyDollar[2].node)
		}
	case 2066:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8029
		{
			yyVAL.defelt = ast.NewDefElem("rows", yyDollar[2].node)
		}
	case 2067:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8033
		{
			yyVAL.defelt = ast.NewDefElem("support", yyDollar[2].list)
		}
	case 2068:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8037
		{
			yyVAL.defelt = ast.NewDefElem("set", yyDollar[1].vsetstmt)
		}
	case 2069:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8041
		{
			yyVAL.defelt = ast.NewDefElem("parallel", ast.NewString(yyDollar[2].str))
		}
	case 2070:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8048
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2071:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8052
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2072:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:8068
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[6].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].ival != 0,
				IsConstraint: false,
				Trigname:     yyDollar[4].str,
				Relation:     yyDollar[8].rangevar,
				Funcname:     yyDollar[14].list,
				Args:         yyDollar[16].list,
				Row:          yyDollar[10].bval,
				Timing:       int16(yyDollar[5].ival),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[11].node,
				Transitions:  yyDollar[9].list,
				Deferrable:   false,
				Initdeferred: false,
				Constrrel:    nil,
			}
			yyVAL.stmt = stmt
		}
	case 2073:
		yyDollar = yyS[yypt-21 : yypt+1]
//line postgres.y:8100
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[7].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].ival != 0,
				IsConstraint: true,
				Trigname:     yyDollar[5].str,
				Relation:     yyDollar[9].rangevar,
				Funcname:     yyDollar[18].list,
				Args:         yyDollar[20].list,
				Row:          true,
				Timing:       int16(ast.TRIGGER_TIMING_AFTER),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[15].node,
				Transitions:  nil,
				Deferrable:   true, // Default for constraint triggers
				Initdeferred: false,
				Constrrel:    yyDollar[10].rangevar,
			}
			yyVAL.stmt = stmt
		}
	case 2074:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8131
		{
			yyVAL.ival = ast.TRIGGER_TIMING_BEFORE
		}
	case 2075:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8132
		{
			yyVAL.ival = ast.TRIGGER_TIMING_AFTER
		}
	case 2076:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8133
		{
			yyVAL.ival = ast.TRIGGER_TIMING_INSTEAD
		}
	case 2077:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8138
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2078:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8140
		{
			// Extract event types and column lists from both sides
			events1 := yyDollar[1].list.Items[0].(*ast.Integer).IVal
			events2 := yyDollar[3].list.Items[0].(*ast.Integer).IVal
			columns1 := yyDollar[1].list.Items[1]
			columns2 := yyDollar[3].list.Items[1]

			// Check for duplicate events
			if events1&events2 != 0 {
				// TODO: Generate parse error for duplicate trigger events
			}

			// Create combined result [events1|events2, combined_columns]
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(events1 | events2))

			// Concatenate column lists (if any)
			if columns1 != nil && columns2 != nil {
				// Both have columns - concatenate
				combinedCols := columns1.(*ast.NodeList)
				if columns2List, ok := columns2.(*ast.NodeList); ok {
					for _, item := range columns2List.Items {
						combinedCols.Append(item)
					}
				}
				list.Append(combinedCols)
			} else if columns1 != nil {
				list.Append(columns1)
			} else if columns2 != nil {
				list.Append(columns2)
			} else {
				list.Append(nil)
			}

			yyVAL.list = list
		}
	case 2079:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8180
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_INSERT)))
			list.Append(nil) // No columns for INSERT
			yyVAL.list = list
		}
	case 2080:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8187
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_DELETE)))
			list.Append(nil) // No columns for DELETE
			yyVAL.list = list
		}
	case 2081:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8194
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(nil) // No columns for UPDATE
			yyVAL.list = list
		}
	case 2082:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8201
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(yyDollar[3].list) // Column list for UPDATE OF
			yyVAL.list = list
		}
	case 2083:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8208
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_TRUNCATE)))
			list.Append(nil) // No columns for TRUNCATE
			yyVAL.list = list
		}
	case 2084:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8217
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2085:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8218
		{
			yyVAL.list = nil
		}
	case 2086:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8222
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2087:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8227
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2088:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8235
		{
			trans := &ast.TriggerTransition{
				Name:    yyDollar[4].str,
				IsNew:   yyDollar[1].bval,
				IsTable: yyDollar[2].bval,
			}
			yyVAL.node = trans
		}
	case 2089:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8246
		{
			yyVAL.bval = true
		}
	case 2090:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8247
		{
			yyVAL.bval = false
		}
	case 2091:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8251
		{
			yyVAL.bval = true
		}
	case 2092:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8252
		{
			yyVAL.bval = false
		}
	case 2093:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8256
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2094:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8261
		{
			yyVAL.bval = yyDollar[3].bval
		}
	case 2095:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8265
		{
			// If ROW/STATEMENT not specified, default to STATEMENT
			yyVAL.bval = false
		}
	case 2098:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8277
		{
			yyVAL.bval = true
		}
	case 2099:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8278
		{
			yyVAL.bval = false
		}
	case 2100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8282
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2101:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8283
		{
			yyVAL.node = nil
		}
	case 2104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8292
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8297
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8301
		{
			yyVAL.list = nil
		}
	case 2107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8306
		{
			yyVAL.node = ast.NewString(fmt.Sprintf("%d", yyDollar[1].ival))
		}
	case 2108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8309
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8310
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8311
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8315
		{
			yyVAL.rangevar = yyDollar[2].rangevar
		}
	case 2112:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8316
		{
			yyVAL.rangevar = nil
		}
	case 2113:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8329
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[4].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[5].list,
				Query:           yyDollar[8].stmt,
				Replace:         false,
				Options:         yyDollar[6].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[9].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2114:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:8345
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[6].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[10].stmt,
				Replace:         true,
				Options:         yyDollar[8].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[11].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2115:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:8361
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[5].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[11].stmt,
				Replace:         false,
				Options:         yyDollar[9].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[12].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2116:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:8377
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[7].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[9].list,
				Query:           yyDollar[13].stmt,
				Replace:         true,
				Options:         yyDollar[11].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[14].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8394
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2118:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8395
		{
			yyVAL.list = nil
		}
	case 2119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8399
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8400
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8401
		{
			yyVAL.ival = int(ast.LOCAL_CHECK_OPTION)
		}
	case 2122:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8402
		{
			yyVAL.ival = int(ast.NO_CHECK_OPTION)
		}
	case 2123:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8413
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = yyDollar[5].rolespec
			n.SchemaElts = yyDollar[6].list
			yyVAL.stmt = n
		}
	case 2124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8420
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = nil
			n.SchemaElts = yyDollar[4].list
			yyVAL.stmt = n
		}
	case 2125:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8427
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = yyDollar[8].rolespec
			n.SchemaElts = yyDollar[9].list
			yyVAL.stmt = n
		}
	case 2126:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8434
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = nil
			n.SchemaElts = yyDollar[7].list
			yyVAL.stmt = n
		}
	case 2127:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8450
		{
			n := ast.NewCreateDomainStmt(yyDollar[3].list, yyDollar[5].typnam)
			// Use SplitColQualList to separate constraints and collate clause
			constraints, collClause := SplitColQualList(yyDollar[6].list)
			n.Constraints = constraints
			n.CollClause = collClause
			yyVAL.stmt = n
		}
	case 2128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8468
		{
			n := ast.NewAlterDomainStmt('T', yyDollar[3].list)
			n.Def = yyDollar[4].node
			yyVAL.stmt = n
		}
	case 2129:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8474
		{
			n := ast.NewAlterDomainStmt('N', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2130:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8479
		{
			n := ast.NewAlterDomainStmt('O', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2131:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8484
		{
			n := ast.NewAlterDomainStmt('C', yyDollar[3].list)
			n.Def = yyDollar[5].node
			yyVAL.stmt = n
		}
	case 2132:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8490
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[6].str
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			yyVAL.stmt = n
		}
	case 2133:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8498
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[8].str
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			yyVAL.stmt = n
		}
	case 2134:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8506
		{
			n := ast.NewAlterDomainStmt('V', yyDollar[3].list)
			n.Name = yyDollar[6].str
			yyVAL.stmt = n
		}
	case 2135:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8521
		{
			// Extract actual arguments from aggr_args which returns [args, position_indicator]
			var args *ast.NodeList
			if yyDollar[5].list != nil && yyDollar[5].list.Len() > 0 {
				// First element contains the actual arguments (or nil for *)
				if firstElem, ok := yyDollar[5].list.Items[0].(*ast.NodeList); ok {
					args = firstElem
				} else if yyDollar[5].list.Items[0] == nil {
					// Special case for COUNT(*) - create a list with a single nil element
					args = ast.NewNodeList(nil)
				}
			}
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, false, yyDollar[4].list, args, yyDollar[6].list, false, yyDollar[2].ival != 0)
			yyVAL.stmt = n
		}
	case 2136:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8537
		{
			// old-style (pre-8.2) syntax for CREATE AGGREGATE
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, true, yyDollar[4].list, nil, yyDollar[5].list, false, yyDollar[2].ival != 0)
			yyVAL.stmt = n
		}
	case 2137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8543
		{
			n := ast.NewDefineStmt(ast.OBJECT_OPERATOR, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8548
		{
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8553
		{
			// Shell type (identified by lack of definition)
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, nil, false, false)
			yyVAL.stmt = n
		}
	case 2140:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8559
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSPARSER, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2141:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8564
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSDICTIONARY, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2142:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8569
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSTEMPLATE, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2143:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8574
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSCONFIGURATION, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8579
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2145:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8584
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, yyDollar[7].list, true, false)
			yyVAL.stmt = n
		}
	case 2146:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8589
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, ast.NewNodeList(yyDollar[5].list), false, false)
			yyVAL.stmt = n
		}
	case 2147:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8594
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, ast.NewNodeList(yyDollar[8].list), true, false)
			yyVAL.stmt = n
		}
	case 2148:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8599
		{
			typevar, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(fmt.Sprintf("invalid type name: %v", err))
				return 1
			}

			n := ast.NewCompositeTypeStmt(typevar, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2149:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8610
		{
			n := ast.NewCreateEnumStmt(yyDollar[3].list, yyDollar[7].list)
			yyVAL.stmt = n
		}
	case 2150:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8615
		{
			n := ast.NewCreateRangeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2151:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8629
		{
			n := ast.NewCreateSeqStmt(yyDollar[4].rangevar, yyDollar[5].list, 0, false, false)
			yyVAL.stmt = n
		}
	case 2152:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8634
		{
			n := ast.NewCreateSeqStmt(yyDollar[7].rangevar, yyDollar[8].list, 0, false, true)
			yyVAL.stmt = n
		}
	case 2153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8641
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8642
		{
			yyVAL.list = nil
		}
	case 2155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8645
		{
		}
	case 2156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8646
		{
		}
	case 2157:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8657
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[3].rangevar, yyDollar[4].list, false, false)
		}
	case 2158:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8661
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[5].rangevar, yyDollar[6].list, false, true)
		}
	case 2159:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8674
		{
			n := ast.NewCreateExtensionStmt(yyDollar[3].str, false, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2160:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8679
		{
			n := ast.NewCreateExtensionStmt(yyDollar[6].str, true, yyDollar[8].list)
			yyVAL.stmt = n
		}
	case 2161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8687
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8696
		{
			yyVAL.list = nil
		}
	case 2163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8703
		{
			yyVAL.defelt = ast.NewDefElem("schema", ast.NewString(yyDollar[2].str))
		}
	case 2164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8707
		{
			yyVAL.defelt = ast.NewDefElem("version", ast.NewString(yyDollar[2].str))
		}
	case 2165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8711
		{
			yylex.Error("CREATE EXTENSION ... FROM is no longer supported")
			return 1
		}
	case 2166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8716
		{
			yyVAL.defelt = ast.NewDefElem("cascade", ast.NewBoolean(true))
		}
	case 2167:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8729
		{
			n := ast.NewAlterExtensionStmt(yyDollar[3].str, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8737
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8746
		{
			yyVAL.list = nil
		}
	case 2170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8753
		{
			yyVAL.defelt = ast.NewDefElem("to", ast.NewString(yyDollar[2].str))
		}
	case 2171:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8766
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), ast.NewString(yyDollar[6].str))
		}
	case 2172:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8770
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), yyDollar[6].list)
		}
	case 2173:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8774
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_AGGREGATE), yyDollar[6].objwithargs)
		}
	case 2174:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:8778
		{
			// CAST takes two TypeNames as a NodeList
			list := ast.NewNodeList(yyDollar[7].typnam)
			list.Append(yyDollar[9].typnam)
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_CAST), list)
		}
	case 2175:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8785
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_DOMAIN), yyDollar[6].typnam)
		}
	case 2176:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8789
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_FUNCTION), yyDollar[6].objwithargs)
		}
	case 2177:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8793
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPERATOR), yyDollar[6].objwithargs)
		}
	case 2178:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8797
		{
			// OPERATOR CLASS takes method name + class name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then class name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPCLASS), list)
		}
	case 2179:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8806
		{
			// OPERATOR FAMILY takes method name + family name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then family name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPFAMILY), list)
		}
	case 2180:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8815
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_PROCEDURE), yyDollar[6].objwithargs)
		}
	case 2181:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8819
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_ROUTINE), yyDollar[6].objwithargs)
		}
	case 2182:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8823
		{
			list := ast.NewNodeList(yyDollar[7].typnam, ast.NewString(yyDollar[9].str))
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TRANSFORM), list)
		}
	case 2183:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8828
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TYPE), yyDollar[6].typnam)
		}
	case 2184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8833
		{
			yyVAL.ival = 1
		}
	case 2185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8834
		{
			yyVAL.ival = 0
		}
	case 2186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8839
		{
			// For aggregates like COUNT(*)
			// Return a list with [nil, -1] matching PostgreSQL's list_make2(NIL, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(nil, ast.NewInteger(-1))
		}
	case 2187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8845
		{
			// Regular aggregate arguments
			// Return a list with [args, -1] matching PostgreSQL's list_make2($2, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(yyDollar[2].list, ast.NewInteger(-1))
		}
	case 2188:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8851
		{
			// Ordered-set aggregate without direct arguments
			// Return a list with [args, 0] matching PostgreSQL's list_make2($4, makeInteger(0))
			yyVAL.list = ast.NewNodeList(yyDollar[4].list, ast.NewInteger(0))
		}
	case 2189:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8857
		{
			// Hypothetical-set aggregate
			// This is the only case requiring consistency checking in PostgreSQL
			result, err := makeOrderedSetArgs(yyDollar[2].list, yyDollar[5].list)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.list = result
		}
	case 2190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8871
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8875
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8883
		{
			yyVAL.node = yyDollar[1].funparam
		}
	case 2193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8890
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8897
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8901
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8909
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2197:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8916
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			n.NewValIsAfter = true
			yyVAL.stmt = n
		}
	case 2198:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8924
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = false
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2199:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8933
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = true
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2200:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8942
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.OldVal = yyDollar[6].str
			n.NewVal = yyDollar[8].str
			n.SkipIfNewValExists = false
			yyVAL.stmt = n
		}
	case 2201:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8950
		{
			// Following PostgreSQL's approach - DROP VALUE is parsed but not implemented
			// PostgreSQL throws an error saying "dropping an enum value is not implemented"
			yylex.Error("dropping an enum value is not implemented")
			return 1
		}
	case 2202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8966
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2203:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8968
		{
			yyVAL.list = nil
		}
	case 2204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8973
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8975
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8980
		{
			if constraint, ok := yyDollar[3].node.(*ast.Constraint); ok {
				constraint.Conname = yyDollar[2].str
				yyVAL.node = constraint
			} else {
				yyVAL.node = yyDollar[3].node
			}
		}
	case 2207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8989
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2208:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8994
		{
			n := ast.NewConstraint(ast.CONSTR_CHECK)
			n.RawExpr = yyDollar[3].node
			n.CookedExpr = "" // Empty string, not nil
			// Process constraint attributes from $5
			processConstraintAttributeSpec(yyDollar[5].ival, n)
			// PostgreSQL: n->initially_valid = !n->skip_validation
			n.InitiallyValid = !n.SkipValidation
			yyVAL.node = n
		}
	case 2209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9005
		{
			n := ast.NewConstraint(ast.CONSTR_NOTNULL)
			// In PostgreSQL, domain NOT NULL constraints have keys = list_make1(makeString("value"))
			n.Keys = ast.NewNodeList(ast.NewString("value"))
			// Process constraint attributes from $3
			processConstraintAttributeSpec(yyDollar[3].ival, n)
			// PostgreSQL sets initially_valid = true for NOT NULL (no NOT VALID support yet)
			n.InitiallyValid = true
			yyVAL.node = n
		}
	case 2210:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9025
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[7].stmt, yyDollar[5].into, ast.OBJECT_MATVIEW, false, false)
			/* cram additional flags into the IntoClause */
			yyDollar[5].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[5].into.SkipData = !yyDollar[8].bval
			yyVAL.stmt = ctas
		}
	case 2211:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9033
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[10].stmt, yyDollar[8].into, ast.OBJECT_MATVIEW, false, true)
			/* cram additional flags into the IntoClause */
			yyDollar[8].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[8].into.SkipData = !yyDollar[11].bval
			yyVAL.stmt = ctas
		}
	case 2212:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9044
		{
			n := ast.NewRefreshMatViewStmt(yyDollar[4].bval, !yyDollar[6].bval, yyDollar[5].rangevar)
			yyVAL.stmt = n
		}
	case 2213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9050
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 2214:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9051
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 2215:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9056
		{
			yyVAL.into = &ast.IntoClause{
				Rel:            yyDollar[1].rangevar,
				ColNames:       yyDollar[2].list,
				AccessMethod:   yyDollar[3].str,
				Options:        yyDollar[4].list,
				TableSpaceName: yyDollar[5].str,
			}
		}
	case 2216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9068
		{
			yyVAL.bval = true
		}
	case 2217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9069
		{
			yyVAL.bval = false
		}
	case 2218:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9070
		{
			yyVAL.bval = true
		}
	case 2219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9075
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].stmt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2220:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9084
		{
			yyVAL.list = nil
		}
	case 2225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9095
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9097
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_CURRENT, yyDollar[1].str, nil, false)
		}
	case 2227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9101
		{
			args := ast.NewNodeList(yyDollar[3].node)
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "timezone", args, false)
		}
	case 2228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9106
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "catalog", args, false)
		}
	case 2229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9111
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "search_path", args, false)
		}
	case 2230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9116
		{
			var args *ast.NodeList
			if yyDollar[2].str != "" {
				args = ast.NewNodeList(ast.NewString(yyDollar[2].str))
			}
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "client_encoding", args, false)
		}
	case 2231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9124
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "role", args, false)
		}
	case 2232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9129
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "session_authorization", args, false)
		}
	case 2233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9134
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, "session_authorization", nil, false)
		}
	case 2234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9138
		{
			var value string
			if yyDollar[3].ival == int(ast.XMLOPTION_DOCUMENT) {
				value = "document"
			} else {
				value = "content"
			}
			args := ast.NewNodeList(ast.NewString(value))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "xmloption", args, false)
		}
	case 2235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9149
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "transaction_snapshot", args, false)
		}
	case 2236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9157
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9161
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9165
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9169
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9176
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9180
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 2242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9187
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9193
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9200
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9201
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9205
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9206
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9207
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9208
		{
			yyVAL.node = ast.NewString("default")
		}
	case 2250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9209
		{
			yyVAL.node = ast.NewString("local")
		}
	case 2251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9210
		{
			yyVAL.node = ast.NewString("true")
		}
	case 2252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9211
		{
			yyVAL.node = ast.NewString("false")
		}
	case 2253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9212
		{
			yyVAL.node = ast.NewString("on")
		}
	case 2254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9213
		{
			yyVAL.node = ast.NewString("off")
		}
	case 2255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9217
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9218
		{
			yyVAL.str = "default"
		}
	case 2257:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9219
		{
			yyVAL.str = ""
		}
	case 2258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9223
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9224
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9228
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9229
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9230
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9231
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9235
		{
			yyVAL.ival = int(ast.XMLOPTION_DOCUMENT)
		}
	case 2265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9236
		{
			yyVAL.ival = int(ast.XMLOPTION_CONTENT)
		}
	case 2266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9241
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9247
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9252
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9260
		{
			yyVAL.node = ast.NewDefElem("transaction_isolation", ast.NewString(yyDollar[3].str))
		}
	case 2270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9264
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(true))
		}
	case 2271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9268
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(false))
		}
	case 2272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9272
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(true))
		}
	case 2273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9276
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(false))
		}
	case 2274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9282
		{
			yyVAL.str = "read uncommitted"
		}
	case 2275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9283
		{
			yyVAL.str = "read committed"
		}
	case 2276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9284
		{
			yyVAL.str = "repeatable read"
		}
	case 2277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9285
		{
			yyVAL.str = "serializable"
		}
	case 2278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9289
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 2279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9290
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9291
		{
			yyVAL.node = yyDollar[1].list
		}
	case 2281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9294
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9295
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9296
		{
			yyVAL.node = ast.NewString("none")
		}
	case 2284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9300
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2285:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9301
		{
			yyVAL.list = nil
		}
	case 2286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9305
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2287:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9306
		{
			yyVAL.node = nil
		}
	case 2288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9310
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9315
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9320
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9328
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9332
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_SET
			yyVAL.defelt = elem
		}
	case 2293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9338
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_ADD
			yyVAL.defelt = elem
		}
	case 2294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9344
		{
			yyVAL.defelt = ast.NewDefElemExtended("", yyDollar[2].str, nil, ast.DEFELEM_DROP)
		}
	case 2295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9350
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9351
		{
			yyVAL.str = ""
		}
	case 2297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9355
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_NOTHING, "")
		}
	case 2298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9356
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_FULL, "")
		}
	case 2299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9357
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_DEFAULT, "")
		}
	case 2300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9358
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_INDEX, yyDollar[3].str)
		}
	case 2301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9362
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9367
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9372
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9379
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9380
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	}
	goto yystack /* stack new state and value */
}
