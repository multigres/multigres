// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
	"strings"
)

// Parser state for handling complex grammar constructs
var parserState struct {
	// Future parser state variables can be added here
}

// SelectLimit - Private struct for the result of opt_select_limit production
// Mirrors PostgreSQL's SelectLimit from gram.y:126-132
type selectLimit struct {
	limitOffset ast.Node
	limitCount  ast.Node
	limitOption ast.LimitOption
}

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// PrivTarget - represents a privilege target for GRANT/REVOKE statements
// Internal struct for handling privilege_target grammar rule
type PrivTarget struct {
	targtype ast.GrantTargetType
	objtype  ast.ObjectType
	objs     *ast.NodeList
}

// ImportQual - Private struct for the result of import_qualification production
// Matches PostgreSQL's ImportQual from gram.y
type ImportQual struct {
	typ        ast.ImportForeignSchemaType
	tableNames *ast.NodeList
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:58
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string
	bval    bool
	byt     byte
	rune    rune

	// AST nodes
	node        ast.Node
	stmt        ast.Stmt
	stmtList    []ast.Stmt
	list        *ast.NodeList
	groupClause *ast.GroupClause
	selectLimit *selectLimit

	// Specific AST node types
	into                *ast.IntoClause
	onconflict          *ast.OnConflictClause
	windef              *ast.WindowDef
	createStmt          *ast.CreateStmt
	createAsStmt        *ast.CreateTableAsStmt
	createAssertionStmt *ast.CreateAssertionStmt
	ruleStmt            *ast.RuleStmt
	indexStmt           *ast.IndexStmt
	alterStmt           *ast.AlterTableStmt
	dropStmt            *ast.DropStmt
	columnDef           *ast.ColumnDef
	constraint          *ast.Constraint
	indexElem           *ast.IndexElem
	alterCmd            *ast.AlterTableCmd
	with                *ast.WithClause
	rangevar            *ast.RangeVar
	objType             ast.ObjectType
	dropBehav           ast.DropBehavior
	setquant            ast.SetQuantifier
	typnam              *ast.TypeName
	partspec            *ast.PartitionSpec
	partboundspec       *ast.PartitionBoundSpec
	oncommit            ast.OnCommitAction
	defelt              *ast.DefElem
	target              *ast.ResTarget            // For select targets, insert columns
	alias               *ast.Alias                // For table and column aliases
	jtype               ast.JoinType              // For join type specifications
	jexpr               *ast.JoinExpr             // For joined table expressions
	keyaction           *ast.KeyAction            // For foreign key actions
	keyactions          *ast.KeyActions           // For foreign key action sets
	funparam            *ast.FunctionParameter    // For function parameters
	funparammode        ast.FunctionParameterMode // For parameter modes (IN/OUT/INOUT/VARIADIC)
	vsetstmt            *ast.VariableSetStmt      // For SET/RESET statements
	rolespec            *ast.RoleSpec
	objwithargs         *ast.ObjectWithArgs
	statelem            *ast.StatsElem
	accesspriv          *ast.AccessPriv             // For privilege specifications
	privtarget          *PrivTarget                 // For privilege target specifications
	vacrel              *ast.VacuumRelation         // For vacuum relation specifications
	importqual          *ImportQual                 // For import qualification specifications
	importqualtype      ast.ImportForeignSchemaType // For import qualification type

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const UNKNOWN = 57392
const WHEN = 57393
const IS = 57394
const ISNULL = 57395
const NOTNULL = 57396
const AT = 57397
const TIME = 57398
const ZONE = 57399
const LOCAL = 57400
const SYMMETRIC = 57401
const ASYMMETRIC = 57402
const TO = 57403
const OPERATOR = 57404
const SELECT = 57405
const FROM = 57406
const WHERE = 57407
const ONLY = 57408
const TABLE = 57409
const LIMIT = 57410
const OFFSET = 57411
const BY = 57412
const GROUP_P = 57413
const HAVING = 57414
const INTO = 57415
const ON = 57416
const JOIN = 57417
const INNER_P = 57418
const LEFT = 57419
const RIGHT = 57420
const FULL = 57421
const OUTER_P = 57422
const CROSS = 57423
const NATURAL = 57424
const USING = 57425
const RECURSIVE = 57426
const MATERIALIZED = 57427
const VALUES = 57428
const SEARCH = 57429
const BREADTH = 57430
const DEPTH = 57431
const CYCLE = 57432
const FIRST_P = 57433
const LAST_P = 57434
const SET = 57435
const ASC = 57436
const DESC = 57437
const INSERT = 57438
const UPDATE = 57439
const DELETE_P = 57440
const MERGE = 57441
const RETURNING = 57442
const CONFLICT = 57443
const OVERRIDING = 57444
const USER = 57445
const SYSTEM_P = 57446
const MATCHED = 57447
const THEN = 57448
const SOURCE = 57449
const TARGET = 57450
const DO = 57451
const NOTHING = 57452
const COPY = 57453
const PROGRAM = 57454
const STDIN = 57455
const STDOUT = 57456
const BINARY = 57457
const FREEZE = 57458
const CONSTRAINT = 57459
const VERBOSE = 57460
const ANALYZE = 57461
const CURRENT_P = 57462
const CURSOR = 57463
const OF = 57464
const COLUMNS = 57465
const ORDINALITY = 57466
const XMLTABLE = 57467
const JSON_TABLE = 57468
const ROWS = 57469
const PATH = 57470
const PASSING = 57471
const FOR = 57472
const NESTED = 57473
const REF_P = 57474
const XMLNAMESPACES = 57475
const ARRAY = 57476
const ERROR = 57477
const ERROR_P = 57478
const EMPTY = 57479
const EMPTY_P = 57480
const OBJECT_P = 57481
const WRAPPER = 57482
const CONDITIONAL = 57483
const UNCONDITIONAL = 57484
const QUOTES = 57485
const OMIT = 57486
const KEEP = 57487
const SCALAR = 57488
const STRING_P = 57489
const ENCODING = 57490
const DELIMITER = 57491
const DELIMITERS = 57492
const HEADER_P = 57493
const QUOTE = 57494
const FORCE = 57495
const CSV = 57496
const VALUE_P = 57497
const JSON_QUERY = 57498
const JSON_VALUE = 57499
const JSON_SERIALIZE = 57500
const JSON_OBJECT = 57501
const JSON_ARRAY = 57502
const JSON_OBJECTAGG = 57503
const JSON_ARRAYAGG = 57504
const JSON_EXISTS = 57505
const JSON_SCALAR = 57506
const FORMAT = 57507
const JSON = 57508
const UTF8 = 57509
const WITHOUT = 57510
const BIT = 57511
const NUMERIC = 57512
const INTEGER = 57513
const SMALLINT = 57514
const BIGINT = 57515
const REAL = 57516
const FLOAT_P = 57517
const DOUBLE_P = 57518
const PRECISION = 57519
const CHARACTER = 57520
const CHAR_P = 57521
const VARCHAR = 57522
const NATIONAL = 57523
const NCHAR = 57524
const VARYING = 57525
const TIMESTAMP = 57526
const INTERVAL = 57527
const INT_P = 57528
const DECIMAL_P = 57529
const DEC = 57530
const BOOLEAN_P = 57531
const VARIADIC = 57532
const ABORT_P = 57533
const ABSENT = 57534
const ABSOLUTE_P = 57535
const ACCESS = 57536
const ACTION = 57537
const ADD_P = 57538
const ADMIN = 57539
const AFTER = 57540
const AGGREGATE = 57541
const ALSO = 57542
const ALWAYS = 57543
const ASSERTION = 57544
const ANALYSE = 57545
const ASENSITIVE = 57546
const ASSIGNMENT = 57547
const ATOMIC = 57548
const ATTACH = 57549
const ATTRIBUTE = 57550
const AUTHORIZATION = 57551
const BACKWARD = 57552
const BEFORE = 57553
const BEGIN_P = 57554
const CACHE = 57555
const CALL = 57556
const CALLED = 57557
const CASCADED = 57558
const CATALOG_P = 57559
const CHAIN = 57560
const CHARACTERISTICS = 57561
const CHECKPOINT = 57562
const CLASS = 57563
const CLOSE = 57564
const CLUSTER = 57565
const COALESCE = 57566
const COLLATION = 57567
const COMMENT = 57568
const COMMENTS = 57569
const COMMIT = 57570
const COMMITTED = 57571
const COMPRESSION = 57572
const CONFIGURATION = 57573
const CONNECTION = 57574
const CONSTRAINTS = 57575
const CONTENT_P = 57576
const CONTINUE_P = 57577
const CONVERSION_P = 57578
const COST = 57579
const CUBE = 57580
const CURRENT_CATALOG = 57581
const CURRENT_DATE = 57582
const CURRENT_ROLE = 57583
const CURRENT_SCHEMA = 57584
const CURRENT_TIME = 57585
const CURRENT_TIMESTAMP = 57586
const CURRENT_USER = 57587
const DATA_P = 57588
const DATABASE = 57589
const DAY_P = 57590
const DEALLOCATE = 57591
const DECLARE = 57592
const DEFAULTS = 57593
const DEFERRABLE = 57594
const DEFERRED = 57595
const DEFINER = 57596
const DEPENDS = 57597
const DETACH = 57598
const DICTIONARY = 57599
const DISABLE_P = 57600
const DISCARD = 57601
const DOCUMENT_P = 57602
const DOMAIN_P = 57603
const EACH = 57604
const ELSE = 57605
const ENABLE_P = 57606
const ENCRYPTED = 57607
const END_P = 57608
const ENUM_P = 57609
const EVENT = 57610
const EXCEPT = 57611
const EXCLUDE = 57612
const EXCLUDING = 57613
const EXCLUSIVE = 57614
const EXECUTE = 57615
const EXPLAIN = 57616
const EXPRESSION = 57617
const EXTENSION = 57618
const EXTERNAL = 57619
const EXTRACT = 57620
const FAMILY = 57621
const FETCH = 57622
const FILTER = 57623
const FINALIZE = 57624
const FOLLOWING = 57625
const FOREIGN = 57626
const FORWARD = 57627
const FUNCTION = 57628
const FUNCTIONS = 57629
const GENERATED = 57630
const GLOBAL = 57631
const GRANT = 57632
const GRANTED = 57633
const GREATEST = 57634
const GROUPING = 57635
const GROUPS = 57636
const HANDLER = 57637
const HOLD = 57638
const HOUR_P = 57639
const IDENTITY_P = 57640
const IMMEDIATE = 57641
const IMMUTABLE = 57642
const IMPLICIT_P = 57643
const IMPORT_P = 57644
const INCLUDE = 57645
const INCLUDING = 57646
const INCREMENT = 57647
const INDENT = 57648
const INDEX = 57649
const INDEXES = 57650
const INHERIT = 57651
const INHERITS = 57652
const INITIALLY = 57653
const INLINE_P = 57654
const INPUT_P = 57655
const INSENSITIVE = 57656
const INSTEAD = 57657
const INTERSECT = 57658
const INVOKER = 57659
const ISOLATION = 57660
const KEYS = 57661
const LABEL = 57662
const LANGUAGE = 57663
const LARGE_P = 57664
const LATERAL_P = 57665
const LEAKPROOF = 57666
const LEAST = 57667
const LEADING = 57668
const LEVEL = 57669
const LISTEN = 57670
const LOAD = 57671
const LOCALTIME = 57672
const LOCALTIMESTAMP = 57673
const LOCATION = 57674
const LOCK_P = 57675
const LOCKED = 57676
const LOGGED = 57677
const MAPPING = 57678
const MATCH = 57679
const MAXVALUE = 57680
const MERGE_ACTION = 57681
const METHOD = 57682
const MINUTE_P = 57683
const MINVALUE = 57684
const MODE = 57685
const MONTH_P = 57686
const MOVE = 57687
const NAME_P = 57688
const NAMES = 57689
const NEW = 57690
const NEXT = 57691
const NFC = 57692
const NFD = 57693
const NFKC = 57694
const NFKD = 57695
const NO = 57696
const NONE = 57697
const NORMALIZE = 57698
const NORMALIZED = 57699
const NOTIFY = 57700
const NOWAIT = 57701
const NULLIF = 57702
const OUT_P = 57703
const OVERLAY = 57704
const OVERLAPS = 57705
const OWNED = 57706
const OWNER = 57707
const PARALLEL = 57708
const PARAMETER = 57709
const PARSER = 57710
const PARTIAL = 57711
const PARTITION = 57712
const PASSWORD = 57713
const PLACING = 57714
const PLAN = 57715
const PLANS = 57716
const POLICY = 57717
const POSITION = 57718
const PRECEDING = 57719
const PREPARE = 57720
const PREPARED = 57721
const PRESERVE = 57722
const PRIMARY = 57723
const PRIOR = 57724
const PRIVILEGES = 57725
const PROCEDURAL = 57726
const PROCEDURE = 57727
const PROCEDURES = 57728
const PUBLICATION = 57729
const RANGE = 57730
const READ = 57731
const REASSIGN = 57732
const RECHECK = 57733
const REFERENCES = 57734
const REFERENCING = 57735
const REFRESH = 57736
const REINDEX = 57737
const RELATIVE_P = 57738
const RELEASE = 57739
const RENAME = 57740
const REPEATABLE = 57741
const REPLICA = 57742
const RESET = 57743
const RESTART = 57744
const RETURN = 57745
const RETURNS = 57746
const REVOKE = 57747
const ROLE = 57748
const ROLLBACK = 57749
const ROLLUP = 57750
const ROUTINE = 57751
const ROUTINES = 57752
const ROW = 57753
const RULE = 57754
const SAVEPOINT = 57755
const SCHEMA = 57756
const SCHEMAS = 57757
const SCROLL = 57758
const SECOND_P = 57759
const SECURITY = 57760
const SEQUENCE = 57761
const SEQUENCES = 57762
const SERIALIZABLE = 57763
const SERVER = 57764
const SESSION = 57765
const SESSION_USER = 57766
const SETS = 57767
const SETOF = 57768
const SHARE = 57769
const SHOW = 57770
const SIMPLE = 57771
const SKIP = 57772
const SNAPSHOT = 57773
const SOME = 57774
const SQL_P = 57775
const STABLE = 57776
const STANDALONE_P = 57777
const START = 57778
const STATEMENT = 57779
const STATISTICS = 57780
const STORAGE = 57781
const STORED = 57782
const STRICT_P = 57783
const STRIP_P = 57784
const SUBSCRIPTION = 57785
const SUBSTRING = 57786
const SUPPORT = 57787
const SYSID = 57788
const SYSTEM_USER = 57789
const TABLES = 57790
const TABLESPACE = 57791
const TABLESAMPLE = 57792
const TEMP = 57793
const TEMPLATE = 57794
const TEMPORARY = 57795
const TEXT_P = 57796
const TIES = 57797
const TRAILING = 57798
const TRANSACTION = 57799
const TRANSFORM = 57800
const TREAT = 57801
const TRIGGER = 57802
const TRIM = 57803
const TRUNCATE = 57804
const TRUSTED = 57805
const TYPE_P = 57806
const TYPES_P = 57807
const UESCAPE = 57808
const UNBOUNDED = 57809
const UNCOMMITTED = 57810
const UNENCRYPTED = 57811
const UNION = 57812
const UNIQUE = 57813
const UNLISTEN = 57814
const UNLOGGED = 57815
const UNTIL = 57816
const VACUUM = 57817
const VALID = 57818
const VALIDATE = 57819
const VALIDATOR = 57820
const VERSION_P = 57821
const VIEW = 57822
const VIEWS = 57823
const VOLATILE = 57824
const WHITESPACE_P = 57825
const WINDOW = 57826
const WITHIN = 57827
const WORK = 57828
const WRITE = 57829
const XML_P = 57830
const XMLATTRIBUTES = 57831
const XMLCONCAT = 57832
const XMLELEMENT = 57833
const XMLEXISTS = 57834
const XMLFOREST = 57835
const XMLPARSE = 57836
const XMLPI = 57837
const XMLROOT = 57838
const XMLSERIALIZE = 57839
const YEAR_P = 57840
const YES_P = 57841
const INOUT = 57842
const OTHERS = 57843
const OLD = 57844
const KEY = 57845
const OFF = 57846
const OIDS = 57847
const OPTION = 57848
const OPTIONS = 57849
const OVER = 57850
const ORDER = 57851
const ANY = 57852
const BOTH = 57853
const CAST = 57854
const CHECK = 57855
const COLUMN = 57856
const FORMAT_LA = 57857
const NOT_LA = 57858
const NULLS_LA = 57859
const WITH_LA = 57860
const WITHOUT_LA = 57861
const MODE_TYPE_NAME = 57862
const MODE_PLPGSQL_EXPR = 57863
const MODE_PLPGSQL_ASSIGN1 = 57864
const MODE_PLPGSQL_ASSIGN2 = 57865
const MODE_PLPGSQL_ASSIGN3 = 57866
const UMINUS = 57867

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"UNKNOWN",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"JOIN",
	"INNER_P",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER_P",
	"CROSS",
	"NATURAL",
	"USING",
	"RECURSIVE",
	"MATERIALIZED",
	"VALUES",
	"SEARCH",
	"BREADTH",
	"DEPTH",
	"CYCLE",
	"FIRST_P",
	"LAST_P",
	"SET",
	"ASC",
	"DESC",
	"INSERT",
	"UPDATE",
	"DELETE_P",
	"MERGE",
	"RETURNING",
	"CONFLICT",
	"OVERRIDING",
	"USER",
	"SYSTEM_P",
	"MATCHED",
	"THEN",
	"SOURCE",
	"TARGET",
	"DO",
	"NOTHING",
	"COPY",
	"PROGRAM",
	"STDIN",
	"STDOUT",
	"BINARY",
	"FREEZE",
	"CONSTRAINT",
	"VERBOSE",
	"ANALYZE",
	"CURRENT_P",
	"CURSOR",
	"OF",
	"COLUMNS",
	"ORDINALITY",
	"XMLTABLE",
	"JSON_TABLE",
	"ROWS",
	"PATH",
	"PASSING",
	"FOR",
	"NESTED",
	"REF_P",
	"XMLNAMESPACES",
	"ARRAY",
	"ERROR",
	"ERROR_P",
	"EMPTY",
	"EMPTY_P",
	"OBJECT_P",
	"WRAPPER",
	"CONDITIONAL",
	"UNCONDITIONAL",
	"QUOTES",
	"OMIT",
	"KEEP",
	"SCALAR",
	"STRING_P",
	"ENCODING",
	"DELIMITER",
	"DELIMITERS",
	"HEADER_P",
	"QUOTE",
	"FORCE",
	"CSV",
	"VALUE_P",
	"JSON_QUERY",
	"JSON_VALUE",
	"JSON_SERIALIZE",
	"JSON_OBJECT",
	"JSON_ARRAY",
	"JSON_OBJECTAGG",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_SCALAR",
	"FORMAT",
	"JSON",
	"UTF8",
	"WITHOUT",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"ABORT_P",
	"ABSENT",
	"ABSOLUTE_P",
	"ACCESS",
	"ACTION",
	"ADD_P",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALSO",
	"ALWAYS",
	"ASSERTION",
	"ANALYSE",
	"ASENSITIVE",
	"ASSIGNMENT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"BACKWARD",
	"BEFORE",
	"BEGIN_P",
	"CACHE",
	"CALL",
	"CALLED",
	"CASCADED",
	"CATALOG_P",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATION",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPRESSION",
	"CONFIGURATION",
	"CONNECTION",
	"CONSTRAINTS",
	"CONTENT_P",
	"CONTINUE_P",
	"CONVERSION_P",
	"COST",
	"CUBE",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"DATA_P",
	"DATABASE",
	"DAY_P",
	"DEALLOCATE",
	"DECLARE",
	"DEFAULTS",
	"DEFERRABLE",
	"DEFERRED",
	"DEFINER",
	"DEPENDS",
	"DETACH",
	"DICTIONARY",
	"DISABLE_P",
	"DISCARD",
	"DOCUMENT_P",
	"DOMAIN_P",
	"EACH",
	"ELSE",
	"ENABLE_P",
	"ENCRYPTED",
	"END_P",
	"ENUM_P",
	"EVENT",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXCLUSIVE",
	"EXECUTE",
	"EXPLAIN",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"EXTRACT",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FINALIZE",
	"FOLLOWING",
	"FOREIGN",
	"FORWARD",
	"FUNCTION",
	"FUNCTIONS",
	"GENERATED",
	"GLOBAL",
	"GRANT",
	"GRANTED",
	"GREATEST",
	"GROUPING",
	"GROUPS",
	"HANDLER",
	"HOLD",
	"HOUR_P",
	"IDENTITY_P",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT_P",
	"IMPORT_P",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INDEX",
	"INDEXES",
	"INHERIT",
	"INHERITS",
	"INITIALLY",
	"INLINE_P",
	"INPUT_P",
	"INSENSITIVE",
	"INSTEAD",
	"INTERSECT",
	"INVOKER",
	"ISOLATION",
	"KEYS",
	"LABEL",
	"LANGUAGE",
	"LARGE_P",
	"LATERAL_P",
	"LEAKPROOF",
	"LEAST",
	"LEADING",
	"LEVEL",
	"LISTEN",
	"LOAD",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCATION",
	"LOCK_P",
	"LOCKED",
	"LOGGED",
	"MAPPING",
	"MATCH",
	"MAXVALUE",
	"MERGE_ACTION",
	"METHOD",
	"MINUTE_P",
	"MINVALUE",
	"MODE",
	"MONTH_P",
	"MOVE",
	"NAME_P",
	"NAMES",
	"NEW",
	"NEXT",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NO",
	"NONE",
	"NORMALIZE",
	"NORMALIZED",
	"NOTIFY",
	"NOWAIT",
	"NULLIF",
	"OUT_P",
	"OVERLAY",
	"OVERLAPS",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PARSER",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECEDING",
	"PREPARE",
	"PREPARED",
	"PRESERVE",
	"PRIMARY",
	"PRIOR",
	"PRIVILEGES",
	"PROCEDURAL",
	"PROCEDURE",
	"PROCEDURES",
	"PUBLICATION",
	"RANGE",
	"READ",
	"REASSIGN",
	"RECHECK",
	"REFERENCES",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE_P",
	"RELEASE",
	"RENAME",
	"REPEATABLE",
	"REPLICA",
	"RESET",
	"RESTART",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLE",
	"ROLLBACK",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"RULE",
	"SAVEPOINT",
	"SCHEMA",
	"SCHEMAS",
	"SCROLL",
	"SECOND_P",
	"SECURITY",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSION_USER",
	"SETS",
	"SETOF",
	"SHARE",
	"SHOW",
	"SIMPLE",
	"SKIP",
	"SNAPSHOT",
	"SOME",
	"SQL_P",
	"STABLE",
	"STANDALONE_P",
	"START",
	"STATEMENT",
	"STATISTICS",
	"STORAGE",
	"STORED",
	"STRICT_P",
	"STRIP_P",
	"SUBSCRIPTION",
	"SUBSTRING",
	"SUPPORT",
	"SYSID",
	"SYSTEM_USER",
	"TABLES",
	"TABLESPACE",
	"TABLESAMPLE",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TEXT_P",
	"TIES",
	"TRAILING",
	"TRANSACTION",
	"TRANSFORM",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUNCATE",
	"TRUSTED",
	"TYPE_P",
	"TYPES_P",
	"UESCAPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNENCRYPTED",
	"UNION",
	"UNIQUE",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VERSION_P",
	"VIEW",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE_P",
	"WINDOW",
	"WITHIN",
	"WORK",
	"WRITE",
	"XML_P",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"YEAR_P",
	"YES_P",
	"INOUT",
	"OTHERS",
	"OLD",
	"KEY",
	"OFF",
	"OIDS",
	"OPTION",
	"OPTIONS",
	"OVER",
	"ORDER",
	"ANY",
	"BOTH",
	"CAST",
	"CHECK",
	"COLUMN",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"'<'",
	"'>'",
	"'='",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"';'",
	"','",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:15317

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 126,
	540, 126,
	-2, 1633,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 129,
	1, 1547,
	26, 1547,
	36, 1547,
	74, 1547,
	100, 1547,
	532, 1547,
	540, 1547,
	-2, 1551,
	-1, 132,
	67, 1963,
	84, 1963,
	85, 2689,
	236, 2874,
	307, 2130,
	419, 1963,
	480, 1963,
	-2, 139,
	-1, 173,
	68, 1550,
	69, 1550,
	130, 1550,
	269, 1550,
	280, 1550,
	316, 1550,
	470, 1550,
	509, 1550,
	-2, 1552,
	-1, 185,
	1, 126,
	540, 126,
	-2, 1633,
	-1, 229,
	85, 2688,
	-2, 1962,
	-1, 316,
	61, 347,
	64, 347,
	527, 347,
	533, 347,
	-2, 2730,
	-1, 782,
	1, 350,
	540, 350,
	-2, 3201,
	-1, 783,
	1, 391,
	540, 391,
	-2, 3201,
	-1, 784,
	1, 282,
	540, 282,
	-2, 3201,
	-1, 785,
	1, 324,
	540, 324,
	-2, 3201,
	-1, 790,
	1, 286,
	540, 286,
	-2, 3201,
	-1, 791,
	1, 203,
	540, 203,
	-2, 3201,
	-1, 825,
	7, 1463,
	16, 1463,
	17, 1463,
	531, 1463,
	-2, 145,
	-1, 826,
	7, 1464,
	16, 1464,
	17, 1464,
	531, 1464,
	-2, 146,
	-1, 851,
	68, 1536,
	69, 1536,
	130, 1536,
	280, 1536,
	-2, 1553,
	-1, 857,
	68, 1537,
	69, 1537,
	130, 1537,
	280, 1537,
	-2, 1556,
	-1, 915,
	84, 1963,
	480, 1963,
	-2, 138,
	-1, 917,
	209, 127,
	-2, 2695,
	-1, 1004,
	531, 1465,
	-2, 3153,
	-1, 1025,
	93, 3010,
	398, 2166,
	401, 3010,
	-2, 2059,
	-1, 1029,
	93, 3010,
	398, 2166,
	401, 3010,
	-2, 2059,
	-1, 1098,
	531, 2059,
	-2, 2534,
	-1, 1195,
	74, 155,
	-2, 161,
	-1, 1279,
	68, 1536,
	69, 1536,
	130, 1536,
	280, 1536,
	-2, 1557,
	-1, 1333,
	7, 1254,
	531, 1254,
	-2, 528,
	-1, 1348,
	7, 579,
	16, 579,
	17, 579,
	531, 579,
	-2, 1302,
	-1, 1370,
	7, 1508,
	-2, 529,
	-1, 1378,
	7, 1478,
	-2, 512,
	-1, 1379,
	7, 1513,
	531, 1513,
	-2, 513,
	-1, 1380,
	7, 1485,
	-2, 514,
	-1, 1381,
	7, 1513,
	531, 1513,
	-2, 515,
	-1, 1382,
	7, 1513,
	531, 1513,
	-2, 516,
	-1, 1383,
	7, 1472,
	-2, 518,
	-1, 1384,
	7, 1472,
	-2, 519,
	-1, 1385,
	7, 1515,
	-2, 522,
	-1, 1386,
	7, 1475,
	-2, 526,
	-1, 1387,
	7, 1476,
	-2, 527,
	-1, 1389,
	7, 1513,
	531, 1513,
	-2, 543,
	-1, 1390,
	7, 1472,
	-2, 547,
	-1, 1391,
	7, 1479,
	-2, 552,
	-1, 1392,
	7, 1477,
	-2, 555,
	-1, 1393,
	7, 1511,
	-2, 557,
	-1, 1394,
	7, 1511,
	-2, 558,
	-1, 1395,
	7, 1496,
	531, 1496,
	-2, 562,
	-1, 1552,
	6, 2059,
	12, 2059,
	534, 2059,
	535, 2059,
	-2, 2052,
	-1, 1628,
	531, 1389,
	-2, 3155,
	-1, 1934,
	16, 1467,
	17, 1467,
	-2, 1388,
	-1, 2046,
	127, 2972,
	411, 2972,
	-2, 1127,
	-1, 2080,
	21, 1426,
	432, 1426,
	510, 1426,
	-2, 889,
	-1, 2082,
	21, 1428,
	432, 1428,
	510, 1428,
	-2, 836,
	-1, 2087,
	1, 705,
	26, 705,
	36, 705,
	64, 705,
	65, 705,
	68, 705,
	69, 705,
	71, 705,
	72, 705,
	73, 705,
	74, 705,
	100, 705,
	130, 705,
	269, 705,
	280, 705,
	316, 705,
	470, 705,
	484, 705,
	509, 705,
	515, 705,
	532, 705,
	540, 705,
	541, 705,
	-2, 1542,
	-1, 2092,
	21, 1520,
	432, 1520,
	510, 1520,
	-2, 1516,
	-1, 2549,
	68, 1551,
	69, 1551,
	130, 1551,
	269, 1551,
	280, 1551,
	316, 1551,
	470, 1551,
	509, 1551,
	-2, 1223,
	-1, 2558,
	7, 1389,
	531, 1389,
	-2, 1272,
	-1, 2688,
	117, 139,
	307, 2130,
	460, 139,
	-2, 1963,
	-1, 2741,
	536, 161,
	-2, 2524,
	-1, 2777,
	531, 2132,
	-2, 271,
	-1, 2854,
	40, 1472,
	134, 1472,
	509, 1472,
	527, 1472,
	529, 1472,
	532, 1472,
	541, 1472,
	-2, 1467,
	-1, 3060,
	531, 2059,
	-2, 2535,
	-1, 3202,
	36, 2977,
	66, 2977,
	-2, 553,
	-1, 3203,
	36, 2978,
	66, 2978,
	-2, 426,
	-1, 3209,
	127, 2975,
	411, 2975,
	-2, 1236,
	-1, 3210,
	127, 2976,
	411, 2976,
	-2, 1237,
	-1, 3226,
	1, 471,
	26, 471,
	36, 471,
	64, 471,
	65, 471,
	68, 471,
	69, 471,
	71, 471,
	72, 471,
	74, 471,
	100, 471,
	130, 471,
	269, 471,
	280, 471,
	316, 471,
	470, 471,
	484, 471,
	509, 471,
	515, 471,
	529, 471,
	532, 471,
	533, 471,
	540, 471,
	-2, 170,
	-1, 3227,
	1, 469,
	26, 469,
	36, 469,
	64, 469,
	65, 469,
	68, 469,
	69, 469,
	71, 469,
	72, 469,
	74, 469,
	100, 469,
	130, 469,
	269, 469,
	280, 469,
	316, 469,
	470, 469,
	484, 469,
	509, 469,
	515, 469,
	529, 469,
	532, 469,
	533, 469,
	540, 469,
	-2, 170,
	-1, 3230,
	1, 488,
	26, 488,
	36, 488,
	64, 488,
	65, 488,
	68, 488,
	69, 488,
	71, 488,
	72, 488,
	74, 488,
	100, 488,
	130, 488,
	269, 488,
	280, 488,
	316, 488,
	470, 488,
	484, 488,
	509, 488,
	515, 488,
	529, 488,
	532, 488,
	533, 488,
	540, 488,
	-2, 170,
	-1, 3244,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1140,
	-1, 3245,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1141,
	-1, 3246,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1142,
	-1, 3247,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1143,
	-1, 3248,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1144,
	-1, 3249,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1145,
	-1, 3253,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1152,
	-1, 3259,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1156,
	-1, 3304,
	363, 1416,
	-2, 1419,
	-1, 3383,
	68, 1551,
	69, 1551,
	130, 1551,
	269, 1551,
	280, 1551,
	316, 1551,
	470, 1551,
	509, 1551,
	-2, 1223,
	-1, 3506,
	209, 127,
	-2, 2695,
	-1, 3580,
	536, 162,
	-2, 2524,
	-1, 3693,
	507, 2611,
	-2, 2604,
	-1, 4015,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1154,
	-1, 4016,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1158,
	-1, 4022,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1160,
	-1, 4057,
	363, 1415,
	-2, 1418,
	-1, 4195,
	75, 1655,
	76, 1655,
	77, 1655,
	78, 1655,
	79, 1655,
	81, 1655,
	82, 1655,
	-2, 1551,
	-1, 4209,
	531, 1389,
	-2, 162,
	-1, 4215,
	150, 1895,
	-2, 1830,
	-1, 4409,
	6, 2059,
	12, 2059,
	534, 2059,
	535, 2059,
	-2, 2033,
	-1, 4643,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1153,
	-1, 4646,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1162,
	-1, 4649,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1157,
	-1, 4654,
	52, 0,
	53, 0,
	54, 0,
	-2, 1175,
	-1, 4661,
	21, 1425,
	432, 1425,
	510, 1425,
	-2, 1517,
	-1, 4665,
	363, 1417,
	-2, 1420,
	-1, 4696,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1205,
	-1, 4697,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1206,
	-1, 4698,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1207,
	-1, 4699,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1208,
	-1, 4700,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1209,
	-1, 4701,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1210,
	-1, 5136,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1155,
	-1, 5137,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1159,
	-1, 5141,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1161,
	-1, 5142,
	52, 0,
	53, 0,
	54, 0,
	-2, 1176,
	-1, 5145,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1177,
	-1, 5146,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1179,
	-1, 5269,
	540, 126,
	-2, 1633,
	-1, 5438,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1163,
	-1, 5439,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1178,
	-1, 5440,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1180,
	-1, 5448,
	52, 0,
	-2, 1213,
	-1, 5708,
	52, 0,
	-2, 1214,
	-1, 5895,
	37, 0,
	44, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 511,
	-1, 6121,
	532, 2684,
	540, 2684,
	-2, 1633,
	-1, 6210,
	540, 1547,
	-2, 1551,
	-1, 6244,
	7, 1780,
	-2, 348,
	-1, 6259,
	532, 2684,
	540, 2684,
	-2, 1633,
	-1, 6272,
	7, 1508,
	-2, 529,
}

const yyPrivate = 57344

const yyLast = 115820

var yyAct = [...]int16{
	731, 6294, 6241, 6295, 5467, 5905, 5724, 5723, 5713, 5250,
	6089, 1298, 6311, 3090, 4078, 4888, 3341, 6242, 3406, 3460,
	4002, 130, 2544, 5742, 109, 3652, 6212, 4393, 968, 4222,
	4317, 852, 5815, 5259, 5794, 5894, 5203, 5960, 3432, 5972,
	2638, 128, 4804, 3409, 4136, 5955, 6077, 3906, 3455, 5844,
	3145, 862, 175, 5691, 1804, 5344, 4000, 5601, 3445, 6132,
	6045, 5010, 1540, 4795, 5692, 6213, 5743, 4066, 5202, 5689,
	5673, 5597, 6028, 2660, 5822, 5817, 2094, 5816, 5529, 3218,
	1012, 752, 9, 4239, 5465, 5506, 5893, 4379, 4572, 1166,
	3515, 5867, 5194, 5070, 2761, 1827, 3895, 5578, 751, 8,
	1040, 3422, 5624, 4219, 5266, 750, 7, 1853, 1455, 3611,
	1223, 5343, 3647, 3507, 1493, 3467, 4791, 5224, 3366, 4204,
	3108, 5016, 4862, 1011, 4941, 5033, 5011, 3451, 5633, 4892,
	4799, 753, 10, 4240, 1943, 3424, 749, 6, 4320, 319,
	319, 4, 1626, 78, 5535, 723, 728, 5434, 740, 744,
	4294, 1830, 4162, 319, 5230, 5210, 1933, 3423, 4725, 3569,
	5234, 5512, 2849, 1273, 805, 806, 808, 755, 22, 1178,
	151, 3449, 4298, 824, 732, 754, 21, 2687, 20, 2686,
	19, 870, 3795, 4855, 2685, 13, 2684, 12, 4496, 5112,
	4280, 1715, 870, 1450, 5129, 3490, 870, 1050, 2054, 3924,
	3907, 175, 917, 3889, 921, 926, 921, 1104, 921, 3890,
	4187, 1523, 3596, 4408, 921, 4297, 3646, 4387, 860, 921,
	4925, 3750, 4364, 3570, 2725, 2716, 3494, 3493, 1741, 2720,
	2710, 3481, 3516, 870, 870, 870, 870, 175, 2659, 3495,
	824, 921, 921, 780, 921, 1005, 175, 3706, 926, 4765,
	1005, 1452, 1005, 3477, 2753, 3447, 4190, 3410, 1002, 1284,
	4198, 4179, 921, 1015, 921, 1017, 894, 9, 4034, 921,
	2640, 3316, 1313, 4145, 3367, 4077, 898, 3185, 1259, 3269,
	3098, 925, 1229, 1931, 8, 922, 3375, 4632, 1829, 884,
	2553, 7, 1751, 897, 2884, 4406, 3533, 3651, 1598, 1809,
	896, 3607, 2772, 1437, 869, 2738, 1409, 1478, 319, 319,
	2696, 3480, 3469, 4211, 1432, 3427, 867, 10, 3431, 746,
	3430, 3429, 6, 741, 925, 2639, 899, 891, 78, 1258,
	1501, 895, 4070, 3313, 3420, 3309, 3279, 3356, 2546, 3276,
	3270, 2055, 3359, 3208, 2043, 3198, 1851, 1871, 1184, 1739,
	788, 788, 883, 22, 1705, 151, 2023, 1732, 3749, 1803,
	3545, 21, 2847, 20, 5466, 19, 3532, 954, 981, 3945,
	13, 812, 12, 996, 310, 952, 1505, 1502, 199, 197,
	3531, 1936, 1530, 3442, 2568, 3223, 1285, 3339, 916, 1294,
	2026, 2044, 2024, 1820, 268, 1234, 1186, 745, 3117, 1174,
	3089, 777, 1047, 1729, 799, 1586, 2890, 2737, 1589, 2724,
	2963, 3474, 1583, 2666, 222, 875, 1266, 2059, 1267, 1756,
	2027, 735, 1268, 760, 1630, 2025, 173, 2717, 1605, 1801,
	1571, 794, 794, 311, 873, 312, 705, 1303, 129, 296,
	890, 818, 880, 6238, 1679, 270, 882, 1173, 2062, 174,
	888, 5677, 851, 5674, 1542, 3110, 5674, 1719, 4147, 1719,
	4260, 2092, 4952, 1719, 2062, 4071, 1904, 6363, 1720, 856,
	1720, 2879, 3109, 2615, 1720, 2092, 6279, 1719, 2062, 6237,
	6066, 4003, 5865, 4259, 6361, 5655, 5653, 2623, 1720, 2615,
	1107, 1109, 4261, 6320, 2620, 2624, 2619, 3110, 2621, 1719,
	6359, 3980, 4574, 2615, 6319, 2616, 5138, 1495, 2092, 6279,
	1720, 2062, 2625, 6320, 6307, 2074, 2075, 2076, 3110, 2616,
	4094, 1544, 6304, 5927, 6287, 2092, 2625, 2617, 2062, 6278,
	2618, 2613, 5621, 2613, 2623, 6253, 2615, 5217, 6279, 6246,
	814, 2620, 2624, 2619, 6254, 2621, 733, 743, 4167, 2622,
	2085, 2086, 2616, 2615, 1206, 3192, 4650, 2092, 6228, 2625,
	2062, 6205, 6163, 6162, 2074, 2075, 2076, 5887, 3415, 2616,
	5487, 2613, 2613, 246, 1495, 709, 2625, 769, 2092, 4355,
	856, 2062, 1902, 2623, 6149, 2615, 1309, 129, 763, 4094,
	2620, 2624, 2619, 3112, 2621, 6101, 6098, 3070, 6074, 975,
	976, 2616, 858, 4148, 6102, 6099, 2615, 4306, 2625, 4645,
	4072, 6035, 3184, 859, 861, 6034, 3932, 1138, 877, 3224,
	3081, 1006, 2616, 129, 3081, 857, 5386, 6033, 1459, 2625,
	6013, 6012, 129, 1905, 1024, 1027, 3081, 4110, 6009, 2613,
	2613, 1157, 1169, 6215, 1543, 6214, 6007, 6010, 5926, 2060,
	1815, 2092, 1712, 811, 2062, 6008, 5924, 5927, 797, 5923,
	5903, 4926, 1126, 5902, 5788, 2613, 3112, 5773, 1722, 4133,
	1722, 887, 2613, 5487, 5763, 1088, 3084, 4949, 5746, 2615,
	5738, 5737, 4644, 5764, 5606, 1139, 1818, 5745, 5595, 4306,
	1722, 5584, 5568, 5607, 5500, 2616, 1717, 3112, 5499, 5498,
	4261, 5567, 2625, 5501, 1819, 4573, 4953, 4306, 4306, 5496,
	4177, 5486, 5455, 5453, 5419, 5340, 5339, 5338, 1722, 4951,
	5487, 2613, 5454, 4563, 5341, 3112, 3112, 3110, 1152, 5332,
	5277, 5245, 4097, 4098, 4099, 4100, 1545, 885, 3112, 4261,
	5246, 5148, 5126, 5090, 4814, 4727, 4716, 1783, 4659, 4053,
	2613, 2613, 1900, 3112, 4728, 4717, 4562, 2613, 1325, 5931,
	4054, 870, 4554, 2613, 5887, 4563, 1546, 4532, 4587, 1547,
	1195, 2613, 1900, 1548, 4490, 4425, 4489, 4375, 4263, 4249,
	4172, 5885, 4166, 4489, 4426, 2661, 4376, 4264, 4250, 4173,
	860, 4167, 4159, 4140, 4132, 1549, 4130, 4129, 5716, 175,
	4128, 2613, 3980, 4133, 1783, 2613, 2613, 1043, 886, 2613,
	4127, 4057, 4055, 870, 4052, 870, 3216, 5390, 5228, 2613,
	2613, 2613, 6258, 3927, 2061, 2613, 1161, 1163, 1164, 5186,
	6259, 1077, 3112, 1552, 2751, 3872, 3753, 2062, 2067, 2068,
	2069, 2070, 4865, 3698, 2613, 3754, 3509, 3399, 3395, 3143,
	1550, 2062, 3699, 4823, 3114, 3510, 1722, 2613, 2613, 4822,
	4664, 4627, 2615, 3112, 1312, 1312, 4578, 1551, 1309, 4954,
	4388, 4094, 870, 3113, 3082, 4104, 4105, 4106, 2616, 1312,
	5747, 4306, 3112, 3081, 4217, 2092, 2614, 1877, 2062, 1280,
	870, 3112, 1424, 870, 870, 2613, 1860, 1870, 4156, 4155,
	4154, 1868, 870, 870, 1553, 870, 1860, 824, 824, 4108,
	1860, 824, 1865, 2615, 1859, 3980, 4021, 3084, 1158, 4110,
	3916, 1860, 3913, 1860, 921, 921, 3577, 3112, 3112, 2616,
	1783, 821, 3755, 1783, 1783, 5675, 2625, 3296, 5675, 3196,
	3076, 2995, 1407, 1866, 1228, 872, 5792, 185, 1230, 870,
	1230, 4100, 4146, 2092, 2070, 5345, 2062, 3415, 1722, 4142,
	1415, 1722, 2763, 1402, 6352, 797, 2081, 811, 2065, 2066,
	2067, 2068, 2069, 2070, 4573, 921, 1717, 1783, 1211, 1212,
	1726, 2615, 1216, 1219, 2065, 2066, 2067, 2068, 2069, 2070,
	1429, 2693, 870, 870, 1722, 319, 319, 2616, 2065, 2066,
	2067, 2068, 2069, 2070, 2625, 797, 4809, 4573, 6326, 4356,
	921, 921, 1722, 2081, 1220, 3917, 1783, 1261, 1276, 1277,
	1282, 1260, 2071, 2072, 2073, 1205, 1458, 797, 891, 891,
	1282, 2065, 2066, 2067, 2068, 2069, 2070, 1463, 793, 4074,
	4095, 4096, 4097, 4098, 4099, 4100, 1131, 1129, 2065, 2066,
	2067, 2068, 2069, 2070, 1261, 3797, 4356, 792, 1260, 794,
	794, 1538, 2081, 794, 794, 1281, 2702, 1309, 1221, 1222,
	4094, 2071, 2072, 2073, 4104, 4105, 4106, 1783, 1900, 3577,
	2065, 2066, 2067, 2068, 2069, 2070, 5140, 1743, 1743, 1458,
	2693, 921, 1712, 1158, 921, 921, 3415, 1231, 797, 2652,
	6170, 2065, 2066, 2067, 2068, 2069, 2070, 5891, 4108, 4095,
	4096, 4097, 4098, 4099, 4100, 3804, 1177, 2061, 4110, 1158,
	1256, 1158, 4809, 1743, 1400, 2693, 1177, 6153, 1562, 1177,
	5000, 1743, 1812, 2693, 1129, 1279, 1177, 1128, 4468, 1177,
	1261, 4377, 1162, 1588, 1260, 1172, 6092, 4378, 179, 797,
	6144, 1825, 180, 2652, 1736, 5917, 5892, 870, 1217, 740,
	1145, 1852, 1147, 1852, 1149, 1146, 5835, 5868, 870, 1457,
	1171, 184, 4750, 1416, 2065, 2066, 2067, 2068, 2069, 2070,
	1713, 1714, 793, 1752, 1753, 129, 861, 2703, 1139, 1752,
	1753, 1766, 6093, 5725, 5718, 5681, 1750, 1473, 5610, 5586,
	1403, 792, 1754, 1737, 1483, 5556, 1183, 5603, 6090, 1188,
	1232, 1711, 5462, 2555, 3608, 1326, 1192, 5459, 5445, 1203,
	5444, 1411, 5433, 175, 5431, 1312, 5200, 1499, 1500, 5193,
	1862, 1661, 2092, 921, 921, 2062, 5190, 5176, 824, 1005,
	926, 5171, 5163, 1005, 1005, 5162, 5152, 1738, 5111, 1731,
	1735, 5081, 1912, 5031, 4810, 5030, 1918, 1919, 1312, 1255,
	2615, 1241, 1312, 4014, 5029, 4864, 4777, 4740, 1850, 4739,
	1312, 4723, 1312, 1262, 1927, 1491, 2616, 1678, 1263, 1312,
	4873, 1684, 4713, 2625, 4712, 4711, 1938, 4667, 4661, 858,
	1312, 1312, 1312, 1312, 1312, 1447, 1747, 1748, 1749, 4620,
	859, 1312, 1805, 1805, 4619, 1817, 4618, 1742, 4571, 1408,
	1780, 794, 857, 4551, 4368, 1527, 925, 4325, 1536, 4312,
	1555, 4305, 4258, 1740, 4216, 1312, 4150, 1793, 4143, 2756,
	2701, 3289, 4123, 1426, 1427, 1628, 4115, 4114, 1208, 1209,
	1210, 4093, 860, 1213, 1214, 1215, 1218, 2653, 1863, 4091,
	1777, 4090, 4086, 1446, 4084, 2759, 4083, 2065, 2066, 2067,
	2068, 2069, 2070, 1913, 4082, 1847, 4081, 4059, 4056, 1755,
	4810, 2065, 2066, 2067, 2068, 2069, 2070, 1856, 3975, 3879,
	3877, 3874, 4101, 4102, 4103, 1608, 3873, 3805, 3863, 2994,
	3394, 4095, 4096, 4097, 4098, 4099, 4100, 3387, 1646, 3182,
	1656, 2653, 794, 794, 1734, 794, 870, 1312, 2065, 2066,
	2067, 2068, 2069, 2070, 1609, 5989, 1416, 811, 2714, 2916,
	3803, 2554, 1792, 176, 2642, 1797, 2643, 1609, 1565, 1609,
	1566, 709, 1567, 2948, 1627, 870, 811, 1733, 2665, 1428,
	5604, 4872, 811, 1465, 1643, 1261, 1653, 1660, 794, 1260,
	1884, 3290, 1885, 1886, 1887, 1471, 1854, 1890, 1891, 1892,
	1159, 1708, 1895, 6360, 926, 759, 196, 921, 921, 921,
	921, 1681, 921, 762, 1685, 1686, 2065, 2066, 2067, 2068,
	2069, 2070, 6348, 182, 1938, 870, 2697, 795, 796, 762,
	870, 6306, 6344, 1139, 1867, 2741, 2757, 1139, 1139, 1162,
	1874, 1875, 1876, 1759, 1760, 756, 2993, 1763, 5286, 2770,
	179, 756, 6256, 1130, 180, 182, 870, 5080, 921, 1131,
	2654, 182, 1170, 2657, 797, 1403, 870, 795, 796, 6222,
	6192, 4808, 6187, 184, 6180, 870, 2917, 1935, 6111, 6044,
	925, 4068, 179, 1139, 2700, 5823, 180, 1162, 179, 795,
	796, 6006, 180, 1460, 1924, 870, 5977, 6119, 2633, 870,
	1810, 5974, 2651, 2756, 5890, 184, 5889, 1898, 1639, 1858,
	1464, 184, 1470, 2763, 5853, 4996, 5849, 1460, 4220, 2713,
	1848, 4101, 4102, 4103, 1224, 319, 5775, 2554, 5741, 2759,
	4095, 4096, 4097, 4098, 4099, 4100, 5669, 5668, 5667, 5647,
	1130, 2810, 5631, 747, 177, 1864, 1131, 319, 1160, 129,
	2760, 1911, 1748, 1747, 5630, 2798, 176, 3862, 5629, 1749,
	1713, 1714, 1139, 5619, 921, 5616, 2909, 182, 5236, 4749,
	5494, 2636, 5491, 2550, 2758, 5456, 2769, 6091, 5262, 927,
	5240, 870, 2558, 2548, 5227, 319, 938, 939, 940, 2741,
	2741, 2741, 182, 5219, 179, 319, 5216, 5035, 180, 4911,
	4868, 2802, 4395, 4629, 4852, 4842, 4839, 4819, 5323, 4782,
	4780, 795, 796, 4772, 2556, 870, 870, 184, 4564, 179,
	2766, 4398, 1935, 180, 2036, 2035, 1755, 2028, 178, 4397,
	3999, 4392, 2763, 2634, 1410, 921, 921, 921, 921, 921,
	858, 2057, 184, 858, 858, 2627, 2058, 2598, 4208, 4207,
	4160, 859, 3993, 4065, 859, 859, 2816, 921, 921, 4047,
	2819, 2820, 4045, 2051, 3281, 921, 2052, 2053, 3899, 2848,
	2757, 3836, 3730, 3605, 1460, 3518, 3462, 3287, 2549, 3321,
	2815, 3315, 2551, 2552, 1312, 1327, 176, 3059, 3045, 2609,
	182, 3037, 3028, 2801, 2756, 2065, 2066, 2067, 2068, 2069,
	2070, 2728, 2676, 2667, 2778, 2780, 1888, 1889, 2607, 1743,
	1745, 1893, 1894, 2605, 1896, 1897, 2604, 179, 2603, 2602,
	2759, 180, 2601, 2974, 2975, 2600, 1460, 2599, 182, 2597,
	2596, 2595, 2594, 870, 2906, 2907, 2593, 2592, 2591, 2742,
	184, 1760, 1759, 2823, 2824, 165, 2590, 2589, 2756, 1763,
	2588, 2827, 2846, 2587, 2586, 179, 794, 3020, 2606, 180,
	794, 794, 1588, 2610, 1588, 3079, 2663, 2585, 1588, 1588,
	2584, 2583, 870, 870, 2759, 1005, 1005, 1005, 184, 921,
	2694, 2582, 3099, 2581, 2760, 921, 2580, 2579, 2578, 2577,
	1852, 2576, 2575, 182, 2668, 2756, 740, 2574, 740, 129,
	2573, 2571, 2570, 2557, 2555, 2690, 870, 870, 2758, 870,
	1922, 870, 2942, 135, 870, 870, 2698, 2665, 175, 135,
	179, 2759, 194, 878, 180, 1849, 768, 1768, 1758, 1309,
	2830, 1639, 4094, 2836, 794, 794, 4104, 4105, 4106, 1572,
	1406, 870, 761, 184, 1257, 1155, 182, 1935, 898, 2749,
	2750, 175, 973, 2969, 771, 921, 921, 758, 4621, 4753,
	4549, 2757, 1460, 4548, 4265, 897, 2763, 3029, 4756, 1312,
	1312, 1312, 896, 179, 4251, 4491, 3511, 180, 3416, 3094,
	4110, 3078, 2833, 2756, 2756, 3102, 3187, 3188, 2612, 2872,
	4205, 1460, 5674, 2742, 2742, 2742, 184, 3111, 899, 3183,
	2563, 1752, 1753, 895, 1453, 183, 2560, 4001, 4079, 2759,
	2759, 3038, 1453, 1680, 165, 2757, 4994, 3118, 6121, 2781,
	5786, 2894, 5290, 3085, 3086, 6313, 1221, 1222, 2779, 5785,
	4432, 4288, 3066, 3067, 3068, 2866, 2870, 183, 4284, 5395,
	4990, 5563, 1485, 183, 6030, 4988, 3032, 2756, 3285, 4445,
	176, 3063, 2886, 856, 2886, 4076, 748, 2891, 3040, 2894,
	3687, 3314, 2757, 3041, 4318, 5257, 2752, 3044, 5550, 2894,
	3116, 3046, 1542, 2759, 3681, 2760, 3144, 2826, 4591, 1524,
	5970, 1312, 3859, 5969, 4590, 5784, 4434, 5422, 1312, 1312,
	2924, 870, 4542, 1168, 4447, 2891, 2930, 2931, 2932, 2758,
	2935, 870, 1312, 3591, 921, 2891, 1312, 1312, 1312, 1312,
	1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
	1312, 1312, 2754, 1312, 6314, 2964, 3039, 2967, 2756, 2760,
	1141, 2971, 2972, 3080, 3170, 2970, 5580, 4807, 4390, 1544,
	2883, 4443, 4851, 3000, 2999, 2031, 3610, 3609, 2031, 183,
	2757, 2757, 2776, 2758, 2759, 3194, 3286, 2763, 2756, 6230,
	722, 5712, 2635, 5319, 2745, 1418, 2756, 2567, 188, 5435,
	5178, 3027, 3137, 3138, 183, 3030, 2760, 3139, 3140, 5177,
	3141, 3142, 1309, 3459, 2759, 4094, 2681, 176, 3534, 4104,
	4105, 4106, 2759, 935, 936, 937, 855, 187, 1662, 5562,
	2758, 5139, 929, 930, 931, 932, 933, 934, 3049, 1309,
	3501, 2763, 4094, 720, 2757, 3529, 4104, 4105, 4106, 1484,
	901, 3047, 3048, 4108, 1434, 1118, 1111, 991, 4658, 4435,
	3689, 1659, 4401, 4110, 794, 1663, 4730, 903, 188, 5592,
	3717, 4322, 3215, 854, 4275, 2860, 5808, 3535, 4342, 2775,
	4108, 1180, 3186, 3329, 3124, 3528, 811, 3126, 2763, 3075,
	4110, 903, 1543, 5574, 2760, 2760, 4656, 187, 1177, 4655,
	3402, 909, 183, 5379, 5065, 1309, 3091, 3092, 4094, 4290,
	1442, 5333, 4104, 4105, 4106, 176, 4999, 4962, 2758, 2758,
	5581, 188, 4824, 3683, 4657, 2757, 3119, 3120, 4402, 3022,
	3121, 1479, 4304, 3125, 129, 3132, 5711, 2733, 2791, 2790,
	183, 200, 1663, 1116, 1023, 964, 4108, 2929, 1736, 718,
	187, 2785, 4283, 176, 1599, 2757, 4110, 6166, 2760, 5125,
	4282, 4288, 3628, 2757, 2947, 5251, 227, 129, 4284, 2774,
	1524, 2953, 4624, 6027, 3626, 227, 2763, 2763, 3482, 3484,
	3483, 4010, 2758, 4009, 1545, 4770, 5990, 2789, 3172, 3174,
	3209, 3209, 772, 5591, 3534, 5862, 4008, 1737, 4007, 4964,
	5861, 3536, 4286, 5373, 2828, 183, 6165, 5320, 4978, 4974,
	3627, 2773, 3686, 4289, 1546, 3590, 1309, 1547, 176, 4094,
	1600, 1548, 3625, 4104, 4105, 4106, 980, 853, 979, 2808,
	5072, 4404, 2032, 2661, 2811, 2032, 6139, 2803, 4279, 2760,
	2763, 1738, 2762, 1549, 1735, 3093, 2755, 3095, 3575, 4388,
	3100, 3101, 2979, 3535, 4323, 2755, 6303, 4108, 183, 978,
	3205, 977, 3211, 2758, 3694, 4511, 856, 4110, 5460, 2760,
	2030, 176, 6302, 4101, 4102, 4103, 2978, 2760, 5588, 1127,
	5012, 1552, 4095, 4096, 4097, 4098, 4099, 4100, 5979, 3284,
	3942, 4252, 4285, 2758, 5587, 5819, 6031, 3691, 1550, 2755,
	888, 2758, 3197, 2092, 5675, 2033, 2062, 909, 2033, 3195,
	2074, 2075, 2076, 2755, 5980, 1551, 1454, 1740, 3233, 3222,
	3221, 2763, 2617, 1601, 1454, 2618, 5561, 3332, 2755, 2623,
	3213, 2615, 2755, 6142, 4287, 5334, 2620, 2624, 2619, 3401,
	2621, 4079, 3940, 2755, 2622, 2085, 2086, 2616, 3087, 2755,
	2786, 2763, 1553, 5073, 2625, 6003, 5609, 2755, 5076, 2763,
	2755, 2788, 2787, 5074, 2885, 3136, 2885, 3283, 5308, 5302,
	5087, 4589, 4967, 4291, 1791, 3217, 3333, 3536, 4569, 3893,
	3791, 2034, 3105, 3148, 2034, 2629, 3219, 3220, 3542, 910,
	4424, 5071, 1698, 1469, 3865, 2630, 3280, 228, 1734, 4421,
	1789, 3214, 904, 4420, 3868, 2902, 228, 1740, 5075, 4290,
	2784, 6138, 2680, 5019, 5007, 2880, 1419, 2631, 1696, 1467,
	3334, 5800, 4585, 3331, 2879, 1312, 1312, 926, 1312, 4584,
	4583, 1312, 4292, 4582, 1591, 3526, 4403, 4409, 3866, 4581,
	6168, 1312, 1312, 4520, 908, 3941, 4518, 3305, 1312, 3207,
	1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
	1312, 3151, 1312, 902, 1312, 4515, 1312, 1312, 1312, 1312,
	1312, 1312, 4513, 1312, 1312, 1312, 906, 3943, 1312, 4362,
	1740, 3106, 3850, 3373, 1312, 3010, 921, 902, 1312, 1312,
	1312, 1312, 1603, 5274, 2862, 1200, 3335, 3939, 2858, 2842,
	3527, 1120, 4286, 925, 5013, 3107, 3411, 3302, 3413, 3380,
	6229, 1788, 2642, 4289, 1740, 3104, 3436, 3436, 6208, 4336,
	6050, 887, 3448, 921, 3088, 1597, 4101, 4102, 4103, 1695,
	1466, 3637, 1201, 2800, 4961, 4095, 4096, 4097, 4098, 4099,
	4100, 6167, 1524, 3103, 3485, 775, 3852, 860, 3554, 2965,
	6073, 870, 3015, 4101, 4102, 4103, 4241, 4486, 3786, 226,
	3506, 225, 4095, 4096, 4097, 4098, 4099, 4100, 226, 5636,
	225, 3758, 3517, 1610, 2913, 907, 1658, 3330, 1593, 230,
	921, 1448, 5036, 3780, 2770, 5820, 1682, 885, 994, 1938,
	1448, 776, 4285, 2810, 3808, 1790, 3802, 1677, 1688, 1312,
	3149, 1629, 911, 6029, 1602, 3571, 921, 2912, 3583, 1657,
	870, 3403, 2952, 1697, 1468, 4482, 3150, 3781, 5507, 4101,
	4102, 4103, 773, 4487, 774, 3562, 1692, 2951, 4095, 4096,
	4097, 4098, 4099, 4100, 4287, 870, 870, 3016, 1650, 2770,
	2950, 3813, 3537, 3572, 267, 5821, 3814, 3557, 912, 3613,
	908, 3617, 888, 914, 3479, 1037, 5704, 5014, 886, 3597,
	1542, 4889, 1592, 3458, 870, 2961, 5553, 3606, 1574, 6049,
	4340, 2960, 1578, 4339, 3441, 1202, 4797, 870, 5154, 2806,
	2765, 1706, 2764, 3017, 1879, 1569, 1701, 3560, 4991, 1488,
	1878, 1636, 921, 921, 2848, 3294, 304, 4440, 2543, 1935,
	1127, 3581, 3582, 2848, 1648, 870, 3307, 1935, 3705, 4436,
	870, 3146, 3810, 1718, 4567, 3300, 3322, 3323, 3324, 3325,
	4652, 4033, 3576, 5479, 5814, 3371, 4485, 1544, 3365, 1413,
	4101, 4102, 4103, 3206, 2041, 1199, 2822, 5554, 3376, 4095,
	4096, 4097, 4098, 4099, 4100, 3578, 3502, 4242, 3864, 2550,
	1312, 3938, 1702, 3592, 3381, 6135, 1115, 3785, 967, 2812,
	4890, 4932, 1594, 6048, 319, 5801, 6134, 3297, 3301, 3673,
	3303, 5480, 2959, 1881, 5602, 4524, 3555, 3478, 4523, 3995,
	4522, 2730, 3418, 3271, 3272, 3273, 3274, 4422, 3644, 3635,
	3306, 3944, 1669, 3630, 1869, 2691, 3719, 3013, 2881, 3361,
	3362, 3363, 3364, 3288, 1823, 2957, 3319, 1649, 2081, 3551,
	3601, 1417, 2905, 3751, 4932, 3812, 816, 2071, 2072, 2073,
	3393, 3311, 4568, 5705, 6136, 5069, 2065, 2066, 2067, 2068,
	2069, 2070, 3382, 3384, 2812, 3386, 319, 3388, 3389, 3390,
	3350, 811, 1197, 4409, 3962, 3690, 3887, 3498, 2679, 3851,
	1543, 3419, 3291, 3553, 4335, 1700, 3369, 139, 1665, 1117,
	3666, 3517, 3392, 3823, 1008, 1414, 3669, 3670, 3830, 3391,
	1690, 921, 824, 887, 3700, 1005, 926, 1005, 1005, 1595,
	3701, 3703, 1596, 1880, 740, 740, 5144, 4483, 3838, 3751,
	3842, 3843, 5143, 854, 3414, 4488, 995, 2794, 1693, 3807,
	1190, 3801, 3444, 1687, 1143, 3383, 1689, 3740, 3756, 5005,
	4477, 2903, 3014, 5982, 5283, 3550, 1312, 5703, 4792, 5985,
	4481, 3614, 921, 1883, 1731, 921, 5991, 921, 4484, 5337,
	3568, 1691, 3280, 3718, 5812, 3776, 4423, 3504, 3503, 885,
	1575, 3580, 1545, 861, 1579, 3508, 5726, 2794, 3505, 4394,
	5973, 905, 925, 3425, 3425, 870, 3682, 1570, 5634, 4992,
	794, 1668, 3688, 1637, 129, 5858, 794, 794, 4441, 1576,
	3741, 5242, 1546, 1573, 2904, 1547, 1651, 1577, 3154, 1548,
	4437, 2867, 4933, 1852, 3811, 1882, 4946, 5842, 3153, 3743,
	1568, 2661, 2042, 870, 2799, 2876, 5336, 1666, 3586, 3839,
	4858, 1549, 3937, 3653, 5241, 3925, 3936, 2813, 3661, 1647,
	886, 2814, 2671, 3552, 794, 4354, 4272, 3809, 3110, 5555,
	3556, 4959, 3881, 1671, 1704, 2670, 3671, 5094, 5017, 1670,
	3678, 6338, 6337, 3929, 5984, 4933, 921, 921, 5987, 1552,
	3796, 4934, 5335, 921, 921, 5986, 4859, 5321, 824, 1005,
	3654, 1005, 1005, 2793, 5307, 1312, 1550, 1699, 3847, 3848,
	1312, 1312, 3971, 1312, 3973, 3974, 1269, 1312, 3540, 305,
	1438, 2092, 2569, 1551, 2062, 1312, 5826, 3693, 2074, 2075,
	2076, 3702, 2813, 5841, 4935, 6133, 2814, 1312, 3978, 3979,
	3981, 3692, 1093, 3820, 4934, 3436, 1091, 2623, 5398, 2615,
	4987, 5545, 870, 2793, 2620, 2624, 2619, 4501, 2621, 1139,
	1553, 1288, 2622, 2085, 2086, 2616, 860, 4500, 4476, 1805,
	306, 794, 2625, 4438, 5313, 1312, 1312, 1269, 1271, 2672,
	1673, 1312, 4349, 6300, 1269, 1271, 4598, 4935, 2894, 3915,
	5976, 4597, 6046, 4669, 6117, 5797, 3073, 1312, 1312, 3310,
	1094, 5166, 1312, 1822, 4507, 820, 3742, 3684, 926, 1667,
	2938, 1312, 2927, 1664, 3998, 4704, 2899, 1312, 2805, 4849,
	3567, 3860, 3861, 3488, 1420, 4703, 2966, 5613, 1113, 1821,
	3871, 1312, 3892, 992, 5088, 4067, 948, 4949, 4328, 1265,
	974, 1496, 1312, 860, 3788, 1672, 4004, 4926, 5252, 2869,
	1125, 3788, 3519, 3520, 3521, 3522, 3523, 4058, 3787, 3782,
	1795, 2626, 4276, 1125, 3790, 5062, 1312, 1312, 1312, 794,
	3826, 3904, 3824, 2991, 1312, 1312, 1312, 2989, 5061, 1312,
	4947, 1449, 2986, 1191, 925, 1144, 2992, 2990, 4046, 794,
	1312, 2997, 4820, 3, 4857, 3835, 3487, 1632, 6217, 1632,
	1757, 1746, 5018, 4948, 3867, 3869, 3870, 5715, 3878, 4147,
	1706, 4131, 1312, 1761, 1762, 3828, 4683, 4138, 6333, 6245,
	5182, 4223, 5904, 4913, 3437, 3437, 2992, 4071, 1270, 5489,
	2990, 779, 4035, 4158, 5461, 4165, 2642, 1312, 4073, 1121,
	1123, 3134, 1312, 5183, 3891, 4189, 4189, 824, 3901, 3436,
	4201, 4189, 4189, 3997, 5238, 3903, 3902, 5536, 5161, 6268,
	5537, 6267, 6233, 5538, 1139, 1709, 5760, 6174, 1207, 1707,
	5907, 5906, 6057, 870, 6232, 870, 2988, 4383, 870, 3928,
	6056, 5539, 5761, 1852, 870, 870, 6173, 4038, 3977, 1270,
	860, 3933, 4039, 3991, 3991, 3934, 1270, 3074, 6059, 4040,
	6058, 5832, 6269, 4874, 4348, 3911, 3775, 1112, 4037, 3777,
	3778, 4062, 993, 3437, 186, 947, 5721, 5312, 5541, 1787,
	5167, 5722, 870, 1095, 4848, 4856, 5911, 5916, 5540, 2987,
	1564, 6062, 5910, 5912, 5913, 6060, 5909, 6063, 5542, 5714,
	1475, 6061, 5908, 3972, 4705, 1591, 3948, 3949, 3950, 3951,
	3952, 3953, 3954, 4224, 4148, 4914, 2697, 3960, 3961, 870,
	870, 3987, 4030, 3988, 4036, 3211, 1631, 3994, 1631, 3984,
	3262, 3970, 4072, 3135, 1248, 4228, 4231, 1582, 3996, 879,
	3266, 3096, 3264, 4253, 3827, 1921, 3261, 5759, 3263, 3265,
	4232, 798, 1038, 4174, 1312, 6065, 3031, 6064, 2741, 1730,
	5058, 5868, 1041, 4350, 3554, 1495, 4197, 4381, 3998, 5679,
	4273, 5576, 1782, 4373, 5271, 4020, 5078, 4018, 4005, 4006,
	4234, 5056, 4011, 4031, 5054, 4352, 1312, 781, 781, 4346,
	4331, 4248, 3806, 3935, 1584, 3894, 1482, 3844, 3512, 1265,
	2748, 2572, 189, 2029, 4043, 3549, 3912, 1920, 6078, 4238,
	1857, 1855, 1774, 4048, 4050, 717, 1683, 719, 721, 1445,
	4199, 1254, 2549, 4411, 4061, 4064, 4296, 4137, 5543, 5544,
	5779, 5195, 6314, 4151, 6283, 6080, 4149, 5778, 6310, 6083,
	4781, 6356, 3425, 6332, 6079, 6240, 6085, 5504, 4361, 1593,
	4363, 6081, 5305, 4153, 4295, 4324, 5255, 4380, 4758, 1494,
	4256, 4186, 5057, 3557, 3538, 3275, 1800, 4202, 4203, 269,
	4359, 4120, 4121, 4122, 1781, 4344, 3280, 5055, 3294, 3486,
	4277, 4125, 5469, 3454, 2796, 5474, 2081, 4141, 2050, 5472,
	3123, 5473, 5475, 2550, 2874, 2071, 2072, 2073, 1481, 2549,
	4044, 2877, 762, 5204, 2065, 2066, 2067, 2068, 2069, 2070,
	2876, 1312, 2887, 2782, 1182, 3443, 2810, 6088, 6086, 5938,
	5939, 4170, 6094, 6095, 4196, 4194, 3642, 4193, 4192, 4169,
	4168, 5937, 6082, 1592, 5804, 4333, 4334, 5201, 4215, 4475,
	870, 4427, 4428, 6331, 5753, 4343, 4209, 811, 1165, 5751,
	2875, 4246, 4227, 5516, 5484, 3407, 3408, 3547, 5942, 3267,
	5754, 4243, 4316, 2911, 794, 3641, 920, 5485, 941, 3643,
	943, 5941, 4164, 6093, 5233, 3377, 963, 4163, 5471, 4257,
	5476, 970, 5997, 4267, 5728, 4366, 5996, 2878, 3986, 6286,
	5996, 5997, 3555, 190, 191, 192, 3640, 3219, 3220, 4332,
	6087, 4293, 5731, 998, 999, 4407, 1001, 4314, 4315, 4319,
	190, 191, 192, 193, 4534, 5525, 4270, 4268, 4269, 1139,
	5521, 921, 921, 4163, 1032, 3551, 1035, 5515, 4410, 4329,
	4630, 4631, 5483, 1594, 3800, 1423, 2848, 5921, 921, 1935,
	5920, 3439, 3439, 4466, 4191, 4467, 4195, 5730, 5729, 3271,
	3272, 3273, 3274, 4213, 4214, 1114, 3268, 1034, 942, 3398,
	6093, 4358, 2742, 4360, 6191, 4921, 1581, 1723, 4897, 3553,
	4502, 1727, 4503, 4504, 3412, 1139, 1139, 4161, 962, 303,
	870, 6235, 2545, 4382, 4463, 6339, 3456, 4389, 5518, 5519,
	4433, 4396, 4400, 5598, 1005, 1585, 5860, 3099, 4580, 1580,
	3612, 4497, 139, 6236, 5297, 5068, 5067, 4577, 4790, 4560,
	4898, 870, 1764, 3397, 4446, 3038, 4558, 3956, 3955, 4465,
	1775, 5527, 5520, 1872, 5523, 5524, 5526, 5522, 4429, 3055,
	3439, 3550, 3053, 3608, 2915, 4469, 2914, 2699, 2646, 921,
	2645, 4766, 5213, 4899, 4900, 4901, 4498, 4255, 4761, 4760,
	1595, 4805, 4255, 1596, 6234, 5818, 6172, 1312, 6171, 5995,
	5993, 1312, 5918, 3437, 5719, 5684, 3548, 5263, 5041, 4906,
	4319, 4737, 4736, 4678, 1312, 4677, 129, 4764, 4185, 4183,
	4184, 4182, 4541, 4540, 1312, 4451, 870, 870, 4831, 3930,
	3857, 3769, 870, 4254, 1312, 1312, 4452, 3763, 1312, 1312,
	1312, 4459, 1312, 3759, 4473, 3739, 3546, 3737, 3659, 3497,
	3464, 3405, 3166, 1312, 3165, 1230, 4180, 4185, 4183, 4184,
	4182, 2900, 4178, 4181, 4586, 2783, 1312, 2734, 1312, 3552,
	4593, 2729, 1923, 1873, 4628, 1724, 3556, 1675, 1674, 4544,
	4545, 1640, 1489, 1312, 1401, 1167, 1156, 815, 5421, 4674,
	1312, 2060, 4596, 893, 1312, 1312, 5212, 4180, 4185, 4183,
	4184, 4182, 889, 4178, 4181, 5211, 5130, 860, 1312, 4633,
	3312, 6158, 6068, 1312, 6067, 5943, 1312, 1312, 1312, 1312,
	1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 5180,
	1312, 5443, 5374, 5244, 5131, 4979, 4975, 1312, 1312, 1312,
	4832, 4367, 4682, 4262, 4566, 1312, 4533, 1312, 3926, 2821,
	2818, 1278, 4535, 1119, 1312, 4550, 1102, 1271, 1312, 4341,
	4595, 2873, 813, 1312, 3193, 4614, 4623, 1312, 4003, 3990,
	4365, 5281, 5324, 4311, 5280, 1312, 1312, 1312, 3421, 4069,
	4719, 5325, 2650, 6261, 1312, 2649, 6038, 4552, 3411, 793,
	4553, 5583, 5449, 5414, 2642, 5322, 4622, 3043, 3436, 3989,
	5326, 3436, 4570, 5165, 5103, 3437, 4651, 3437, 792, 4771,
	4206, 1416, 4189, 4201, 4189, 4189, 4189, 4579, 4087, 4032,
	1139, 4778, 3898, 3224, 3115, 892, 881, 6260, 1312, 1312,
	6147, 1312, 175, 5660, 5657, 5413, 5397, 5367, 2770, 4594,
	5362, 4802, 4210, 4180, 4185, 4183, 4184, 4182, 5361, 4178,
	4181, 5020, 5009, 5008, 5006, 4993, 4986, 1150, 4895, 4838,
	4526, 4525, 898, 1312, 4521, 794, 4519, 4517, 4516, 4514,
	4512, 4506, 1312, 1312, 4505, 870, 4495, 1852, 4470, 897,
	4617, 4464, 4462, 4444, 3977, 4442, 896, 4439, 4371, 4370,
	4369, 4019, 3278, 5795, 4017, 3900, 870, 3853, 3832, 3784,
	3783, 3745, 3744, 921, 3277, 3278, 4013, 3260, 3083, 1312,
	870, 3036, 899, 4841, 3035, 3034, 3033, 895, 2996, 2980,
	4653, 2977, 4751, 4752, 2976, 2973, 2968, 3517, 4850, 2962,
	2954, 2946, 2943, 921, 2941, 2940, 2654, 2939, 4806, 2937,
	2934, 2933, 4755, 2928, 2926, 4803, 2923, 2918, 2910, 3294,
	2898, 2889, 2888, 4605, 2865, 4759, 4625, 2864, 4762, 4676,
	4812, 2863, 3998, 4672, 4816, 4666, 870, 2861, 4801, 4681,
	4893, 2859, 4818, 2857, 2843, 2841, 3436, 3571, 2809, 2804,
	2797, 4876, 2647, 4908, 4830, 3876, 4886, 4813, 3236, 4687,
	3237, 3875, 1189, 129, 1142, 4887, 1132, 3042, 5429, 4637,
	4638, 4639, 4640, 5121, 5110, 2770, 5108, 5106, 4543, 4927,
	4662, 3438, 3438, 1852, 5105, 3572, 1852, 4616, 1852, 4943,
	4296, 4615, 3597, 4199, 4920, 4613, 4612, 2848, 4718, 4611,
	4731, 4840, 4610, 4965, 4732, 4609, 4837, 4608, 2848, 2848,
	4733, 4607, 4603, 4747, 4938, 4754, 4601, 4746, 4295, 3963,
	4871, 3168, 4734, 4767, 4768, 4942, 4738, 4944, 4679, 4680,
	3439, 4884, 4870, 4763, 4757, 3167, 4745, 3294, 4773, 4576,
	4775, 4776, 1321, 4774, 3998, 3162, 3161, 4903, 4834, 3160,
	3159, 3158, 3157, 4787, 3156, 4950, 3155, 4714, 1309, 3310,
	6184, 4094, 4815, 4793, 6219, 4104, 4105, 4106, 5950, 4849,
	3438, 6218, 4912, 2549, 811, 5352, 5348, 4829, 1935, 4833,
	3478, 4835, 811, 4902, 811, 811, 5192, 4955, 4958, 5191,
	4930, 5158, 4109, 4937, 4825, 4939, 1461, 1462, 4027, 4108,
	4025, 4735, 4296, 2046, 4023, 3751, 4024, 4026, 3257, 4110,
	5157, 4478, 3738, 3731, 3947, 3255, 3258, 3254, 4919, 3256,
	3727, 5064, 5114, 4882, 4338, 2945, 3723, 2901, 794, 4861,
	4295, 5314, 3922, 4878, 4879, 3921, 3920, 4867, 3919, 3918,
	3579, 2835, 1680, 1535, 1526, 4875, 4922, 1498, 1274, 865,
	4049, 4877, 3293, 811, 6305, 5296, 231, 5345, 3998, 4869,
	4885, 4863, 3292, 4785, 915, 1221, 1222, 6323, 1275, 866,
	4904, 6322, 3461, 5260, 4907, 3896, 4910, 1495, 1719, 4918,
	5806, 5805, 1634, 1635, 5034, 5342, 1137, 5248, 129, 1720,
	2545, 5287, 4528, 129, 129, 4385, 3600, 3559, 3465, 2723,
	3050, 2715, 2662, 3925, 794, 3425, 2655, 1492, 3425, 4960,
	4956, 1480, 1474, 4957, 3062, 822, 5025, 1472, 1312, 1451,
	926, 6169, 5513, 3275, 881, 5077, 5646, 5645, 870, 870,
	870, 870, 3439, 4969, 3439, 1312, 1312, 5596, 5403, 5124,
	794, 1312, 1312, 5063, 5024, 4923, 4530, 4472, 1312, 1312,
	4414, 4963, 4412, 4384, 5027, 1312, 3470, 4345, 129, 4235,
	3543, 3539, 1312, 3463, 1620, 3457, 1770, 1772, 3064, 3056,
	3054, 3051, 2839, 1312, 2834, 2735, 2719, 2711, 2709, 2689,
	1786, 1785, 997, 5092, 5043, 1784, 1779, 1003, 3038, 1778,
	1776, 1769, 1003, 3796, 1003, 1765, 925, 5026, 4989, 1728,
	5128, 5021, 1725, 1721, 1716, 4995, 5104, 1694, 1312, 1641,
	1558, 1554, 5042, 1534, 1525, 5350, 1312, 4028, 5349, 1312,
	3819, 1312, 1092, 2688, 1438, 1090, 2893, 6071, 6000, 5988,
	1456, 5886, 5625, 5717, 5648, 5564, 5503, 3152, 5353, 5309,
	4943, 5095, 5295, 5284, 5066, 4811, 4230, 1312, 3964, 3882,
	3565, 3436, 3436, 3558, 794, 3436, 1796, 2747, 5086, 2677,
	1622, 824, 5205, 5085, 5093, 2656, 2637, 2611, 4189, 1826,
	3517, 5222, 797, 824, 794, 3189, 3190, 5101, 4944, 3019,
	3018, 3992, 4836, 3425, 811, 797, 797, 797, 5115, 5116,
	5117, 5118, 5119, 5120, 6330, 5122, 5123, 6315, 6145, 3448,
	921, 5838, 3563, 4353, 2871, 1906, 1907, 3271, 3272, 3273,
	3274, 5225, 5796, 2817, 4029, 4789, 1330, 1329, 5226, 1322,
	2628, 1135, 870, 1813, 5261, 5196, 5197, 5269, 5582, 870,
	6115, 5577, 5273, 1852, 5243, 5799, 5579, 5978, 5575, 2669,
	5571, 794, 4244, 1312, 5023, 5239, 4247, 3468, 1611, 4236,
	3475, 1624, 704, 2882, 921, 3492, 2675, 5253, 2674, 5590,
	5220, 5221, 5589, 2770, 5282, 5825, 5279, 5015, 3566, 3757,
	1621, 5160, 4894, 5179, 4896, 4351, 913, 3564, 1487, 824,
	2958, 5249, 5837, 4891, 1590, 1587, 5310, 3831, 3525, 2998,
	4309, 4308, 5264, 125, 124, 123, 122, 3571, 121, 5258,
	120, 119, 1312, 118, 117, 56, 5247, 55, 5208, 5209,
	1617, 54, 5214, 53, 2770, 52, 51, 5329, 50, 49,
	48, 5304, 76, 75, 74, 73, 3437, 72, 71, 3437,
	5199, 70, 5198, 1614, 5294, 3572, 1312, 69, 5256, 68,
	5285, 67, 66, 65, 64, 5328, 63, 5331, 62, 5303,
	61, 60, 59, 5156, 3471, 5291, 5292, 1619, 5159, 58,
	3438, 5107, 57, 5109, 47, 46, 5267, 45, 44, 43,
	42, 5301, 4101, 4102, 4103, 41, 40, 39, 5218, 2848,
	38, 4095, 4096, 4097, 4098, 4099, 4100, 37, 35, 34,
	33, 32, 5207, 31, 36, 30, 29, 28, 27, 1625,
	26, 3072, 3071, 817, 1253, 3011, 4588, 3923, 5189, 1710,
	770, 1198, 1196, 1861, 4950, 1175, 1185, 3012, 5276, 3544,
	116, 5381, 115, 114, 113, 91, 1312, 5289, 90, 5288,
	5237, 89, 88, 87, 139, 86, 85, 1612, 84, 2704,
	2705, 2706, 2707, 83, 2708, 82, 5346, 921, 81, 80,
	5174, 1618, 5, 79, 94, 96, 5317, 95, 93, 92,
	77, 18, 17, 4266, 1703, 2683, 6211, 1615, 6118, 740,
	212, 5983, 1421, 5315, 1613, 2695, 3225, 4405, 1623, 5300,
	4386, 4924, 1528, 6203, 3595, 5327, 5959, 4796, 198, 5813,
	2795, 3472, 4281, 5316, 4278, 4931, 4794, 5843, 4940, 4800,
	3450, 4798, 3446, 6282, 3437, 3437, 5470, 4075, 3374, 5096,
	5097, 5098, 5099, 5100, 3379, 1616, 5464, 3473, 5749, 5505,
	6076, 1312, 5265, 5502, 5223, 5351, 5357, 5354, 3514, 1312,
	1312, 1312, 181, 5355, 5727, 321, 3796, 5358, 5482, 3396,
	2644, 5423, 864, 863, 6070, 1283, 3796, 3437, 5765, 5954,
	5528, 5235, 5517, 4788, 195, 1312, 1312, 1154, 3133, 1312,
	1312, 1312, 3438, 1204, 3438, 757, 3122, 1181, 2648, 5232,
	5231, 5940, 5936, 5364, 5935, 5442, 4748, 5366, 3404, 5229,
	3417, 2632, 112, 111, 110, 108, 1312, 107, 3425, 3425,
	106, 105, 3425, 5468, 104, 103, 2908, 102, 101, 100,
	99, 98, 97, 1312, 3436, 25, 24, 23, 16, 15,
	5222, 14, 11, 5697, 5695, 5696, 5694, 794, 1312, 1312,
	3282, 928, 2089, 3212, 1272, 2049, 794, 794, 1264, 5702,
	4673, 870, 5153, 5688, 2566, 5548, 6072, 4802, 4769, 129,
	1054, 1055, 1744, 5415, 1052, 1082, 870, 1638, 5185, 4729,
	5478, 4720, 5530, 4943, 870, 3342, 3338, 3327, 3349, 5173,
	3298, 1307, 1306, 5547, 3308, 4060, 2564, 2981, 2982, 2983,
	2984, 2985, 3199, 1301, 1302, 5387, 5388, 2770, 5533, 1297,
	5391, 5392, 2040, 2037, 3914, 5437, 3097, 2844, 3639, 5585,
	3021, 4944, 4372, 4430, 3645, 5859, 870, 3024, 3818, 2096,
	5497, 5430, 1903, 5551, 4893, 3147, 1901, 809, 826, 1227,
	1005, 175, 3328, 921, 2091, 2, 1, 0, 5617, 0,
	3343, 5565, 0, 5623, 0, 0, 0, 5612, 0, 0,
	5457, 0, 4943, 926, 0, 921, 921, 5481, 0, 0,
	0, 9, 0, 5559, 0, 0, 0, 959, 5557, 1439,
	1440, 0, 0, 1443, 5599, 5490, 0, 0, 8, 959,
	959, 5493, 0, 5641, 4801, 7, 0, 5549, 4942, 0,
	4944, 0, 5510, 0, 5511, 826, 0, 5546, 926, 1005,
	826, 959, 5534, 3439, 5514, 826, 3439, 826, 5531, 5566,
	3998, 10, 5664, 5573, 959, 959, 6, 0, 0, 0,
	0, 5572, 78, 0, 5652, 0, 5654, 1080, 1080, 925,
	0, 5594, 5593, 5639, 5626, 0, 0, 959, 959, 959,
	5569, 0, 0, 0, 0, 0, 5690, 22, 1312, 151,
	0, 5620, 5632, 5618, 1312, 21, 5615, 20, 0, 19,
	1312, 0, 0, 0, 13, 1312, 12, 1312, 4296, 0,
	0, 5682, 5683, 959, 925, 0, 5638, 5635, 5662, 5637,
	1312, 5676, 5678, 0, 5628, 5425, 5426, 0, 5427, 5649,
	5428, 5463, 0, 0, 5477, 0, 4295, 0, 4943, 0,
	0, 0, 0, 0, 0, 1312, 0, 3163, 3164, 0,
	0, 0, 824, 0, 0, 5744, 0, 5732, 3437, 1312,
	0, 5663, 5666, 5661, 1312, 0, 0, 0, 0, 3437,
	3437, 0, 0, 3437, 5733, 0, 4944, 0, 0, 0,
	0, 5680, 0, 0, 0, 0, 0, 0, 0, 0,
	5225, 3437, 0, 0, 5686, 0, 0, 0, 0, 0,
	0, 0, 5771, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5772, 0, 0, 0, 0, 0, 0,
	0, 3439, 3439, 0, 0, 5710, 0, 0, 0, 0,
	0, 0, 5659, 0, 870, 5766, 0, 0, 0, 0,
	5774, 0, 5399, 5400, 0, 5402, 794, 870, 0, 0,
	5777, 0, 0, 0, 0, 1312, 0, 0, 0, 0,
	5802, 0, 0, 0, 3439, 5810, 0, 0, 824, 5740,
	5739, 5781, 3436, 0, 0, 0, 5734, 0, 5809, 5755,
	5756, 1312, 1312, 5757, 5758, 0, 0, 870, 0, 5828,
	0, 0, 0, 0, 0, 5833, 3235, 0, 1312, 0,
	0, 3425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 5782, 0, 5776, 3437, 0, 0, 0, 0,
	1312, 5783, 5790, 5780, 921, 5798, 5789, 921, 921, 921,
	0, 0, 0, 0, 5791, 0, 0, 0, 0, 0,
	997, 1003, 0, 0, 0, 1003, 1003, 0, 0, 1312,
	0, 5787, 0, 5767, 1312, 1312, 1312, 129, 1312, 5864,
	0, 0, 5834, 0, 0, 5831, 5883, 1312, 0, 0,
	5827, 5854, 129, 5839, 5267, 0, 5840, 5830, 0, 1852,
	5807, 0, 2642, 0, 0, 0, 0, 5855, 0, 0,
	860, 0, 3517, 5915, 0, 0, 1312, 129, 5848, 0,
	5850, 5934, 5852, 0, 5495, 5869, 5856, 5495, 0, 0,
	1852, 5870, 1852, 5871, 5872, 0, 0, 0, 0, 0,
	0, 5880, 5922, 5932, 5874, 0, 5961, 5875, 5882, 0,
	0, 0, 0, 0, 5958, 0, 5706, 0, 0, 0,
	5530, 5899, 5900, 0, 0, 0, 0, 5709, 0, 5687,
	0, 5914, 0, 794, 0, 0, 0, 5964, 0, 0,
	0, 0, 3317, 0, 5962, 5957, 0, 0, 0, 0,
	0, 5971, 0, 3344, 0, 5956, 0, 921, 0, 0,
	5966, 5930, 5925, 0, 0, 3370, 5919, 5736, 3317, 0,
	0, 0, 5933, 5953, 5965, 0, 0, 0, 0, 0,
	1852, 0, 0, 0, 926, 0, 0, 0, 0, 0,
	6002, 1312, 0, 0, 3854, 0, 3855, 5948, 3856, 5951,
	5967, 3858, 0, 0, 0, 5975, 0, 0, 0, 0,
	5968, 0, 0, 0, 0, 0, 5690, 0, 1312, 0,
	1312, 1312, 5992, 3880, 959, 5994, 1312, 5998, 1139, 0,
	0, 0, 3888, 0, 959, 0, 0, 959, 5981, 0,
	0, 6020, 0, 6055, 959, 0, 0, 959, 0, 6004,
	6014, 0, 6016, 3438, 6018, 0, 3438, 129, 5744, 2855,
	925, 6047, 1312, 6023, 6019, 6021, 0, 0, 0, 0,
	0, 6017, 6032, 6069, 0, 0, 0, 6037, 0, 0,
	0, 1852, 6041, 0, 6040, 6039, 0, 6015, 0, 0,
	6053, 6054, 3931, 0, 1312, 3439, 959, 6100, 0, 0,
	0, 0, 3437, 5846, 5847, 4943, 3439, 3439, 1312, 0,
	3439, 0, 6116, 0, 0, 0, 0, 1005, 1005, 0,
	2770, 0, 6113, 0, 6075, 6110, 6108, 5845, 3439, 0,
	6128, 6129, 129, 0, 0, 6127, 0, 6106, 6126, 826,
	826, 0, 0, 4944, 6107, 0, 0, 6103, 6104, 0,
	0, 3437, 0, 0, 826, 4041, 4042, 0, 0, 5735,
	0, 6109, 0, 0, 1005, 175, 6143, 0, 921, 6152,
	0, 2548, 6148, 6112, 6150, 1312, 0, 6159, 5253, 6120,
	0, 0, 826, 826, 0, 0, 826, 6137, 6096, 3425,
	6146, 2810, 6140, 0, 0, 6125, 0, 6176, 1852, 1852,
	0, 6175, 6179, 0, 0, 6151, 6155, 6156, 6154, 1312,
	1312, 0, 6124, 1312, 0, 0, 6161, 0, 2642, 6123,
	0, 0, 3411, 0, 4111, 4112, 4113, 0, 6164, 0,
	3437, 3438, 3438, 5961, 921, 921, 0, 0, 0, 6189,
	0, 0, 4943, 0, 824, 0, 6198, 0, 6011, 1080,
	6122, 0, 3439, 6181, 0, 6130, 0, 0, 6188, 6186,
	6202, 0, 6195, 6196, 0, 6190, 2549, 6199, 1139, 0,
	6194, 5962, 0, 6127, 3438, 6193, 6126, 0, 6204, 0,
	4944, 6200, 0, 0, 5956, 0, 0, 0, 6201, 921,
	0, 0, 0, 6209, 6216, 0, 0, 0, 0, 0,
	1312, 0, 6220, 175, 0, 6177, 6178, 0, 0, 0,
	6224, 1312, 0, 0, 6223, 0, 0, 0, 6243, 0,
	0, 0, 0, 1312, 0, 0, 0, 1080, 3235, 0,
	0, 1049, 1049, 6125, 0, 6231, 0, 0, 6225, 0,
	6250, 0, 6252, 0, 0, 0, 0, 5878, 0, 0,
	6124, 0, 0, 1312, 0, 0, 0, 6123, 0, 0,
	0, 6251, 6042, 6043, 0, 3453, 824, 6273, 6274, 6275,
	0, 5744, 6249, 6257, 0, 6255, 3437, 6270, 959, 921,
	0, 6266, 6264, 6248, 0, 4943, 6284, 6285, 6122, 6289,
	3437, 0, 0, 0, 6277, 959, 0, 0, 0, 0,
	0, 959, 0, 6291, 0, 959, 959, 6288, 6293, 0,
	6243, 6127, 6299, 6308, 6126, 5468, 6301, 1003, 1003, 1003,
	0, 6292, 3524, 4944, 6290, 0, 6312, 6309, 0, 0,
	6317, 1080, 0, 959, 0, 6316, 824, 1312, 6262, 6263,
	0, 175, 0, 6318, 0, 959, 6321, 6324, 3574, 0,
	6327, 959, 824, 6325, 6335, 6328, 6329, 0, 6334, 0,
	0, 0, 0, 6341, 6343, 0, 5468, 6342, 1005, 1005,
	6351, 6125, 0, 0, 6346, 6243, 6299, 6355, 6354, 6353,
	6357, 6349, 6350, 0, 0, 6347, 0, 6340, 6124, 0,
	0, 6243, 6358, 6362, 0, 6123, 0, 0, 0, 0,
	826, 0, 0, 0, 6299, 0, 0, 0, 5845, 0,
	3437, 1080, 1080, 826, 826, 0, 0, 0, 826, 826,
	1542, 0, 0, 0, 0, 0, 6122, 0, 0, 0,
	959, 0, 0, 826, 3667, 3668, 1940, 826, 0, 0,
	0, 0, 0, 0, 0, 826, 0, 826, 0, 0,
	0, 129, 0, 0, 826, 0, 129, 0, 0, 3439,
	0, 0, 0, 0, 0, 826, 826, 826, 826, 826,
	2092, 0, 0, 2062, 0, 0, 826, 2074, 2075, 2076,
	0, 0, 0, 0, 0, 0, 0, 1544, 0, 2617,
	0, 4413, 2618, 4415, 0, 0, 2623, 1139, 2615, 0,
	826, 0, 0, 2620, 2624, 2619, 0, 2621, 3439, 0,
	0, 2622, 2085, 2086, 2616, 0, 0, 0, 0, 0,
	0, 2625, 0, 0, 0, 3438, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2092, 3438, 3438, 2062, 0,
	3438, 0, 2074, 2075, 2076, 0, 0, 0, 3344, 3344,
	0, 0, 0, 0, 2617, 0, 0, 2618, 3438, 6296,
	0, 2623, 1620, 2615, 3437, 6247, 2892, 0, 2620, 2624,
	2619, 0, 2621, 0, 0, 0, 2622, 2085, 2086, 2616,
	0, 0, 826, 0, 0, 0, 2625, 3439, 0, 6210,
	0, 0, 0, 0, 0, 6265, 0, 0, 4471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1543, 0, 0, 3834, 0, 0, 0, 3344, 3344, 3344,
	0, 1080, 0, 6296, 2893, 959, 0, 0, 0, 0,
	0, 1080, 0, 0, 1940, 0, 1940, 2092, 0, 0,
	2062, 0, 0, 0, 2074, 2075, 2076, 0, 0, 0,
	0, 6296, 0, 0, 0, 0, 2617, 959, 1622, 2618,
	0, 0, 0, 2623, 959, 2615, 0, 3884, 0, 3886,
	2620, 2624, 2619, 0, 2621, 0, 0, 0, 2622, 2085,
	2086, 2616, 3438, 0, 0, 4951, 0, 0, 2625, 0,
	0, 0, 0, 0, 4529, 0, 0, 4531, 0, 0,
	0, 0, 1545, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1080, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 0,
	0, 0, 1546, 3439, 0, 1547, 0, 0, 0, 1548,
	0, 0, 0, 0, 0, 0, 1611, 3439, 1080, 0,
	0, 2661, 0, 0, 0, 4555, 0, 4557, 0, 4559,
	0, 1549, 0, 3437, 0, 0, 0, 0, 1621, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3957, 3959,
	0, 0, 0, 0, 2092, 3965, 3966, 2062, 0, 0,
	0, 2074, 2075, 2076, 0, 0, 0, 4647, 4648, 1552,
	0, 0, 0, 2617, 0, 0, 2618, 0, 1617, 0,
	2623, 0, 2615, 0, 0, 1080, 1550, 2620, 2624, 2619,
	0, 2621, 0, 0, 0, 2622, 2085, 2086, 2616, 0,
	0, 1614, 0, 1551, 0, 2625, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1509, 0, 0, 0, 1619, 1510, 0, 0, 959,
	1518, 0, 0, 0, 0, 0, 0, 3439, 0, 0,
	1553, 0, 0, 0, 4690, 4691, 4692, 4693, 4694, 4695,
	4696, 4697, 4698, 4699, 4700, 4701, 4702, 0, 4706, 0,
	0, 3437, 0, 0, 0, 0, 0, 1625, 0, 0,
	3437, 0, 1080, 0, 1080, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 826,
	0, 0, 4461, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 1497, 0, 1612, 0, 0, 0, 0,
	0, 1080, 0, 0, 1080, 0, 0, 0, 0, 1618,
	1080, 1517, 0, 0, 0, 0, 0, 959, 0, 959,
	959, 959, 959, 0, 0, 1615, 0, 0, 0, 0,
	0, 0, 1613, 0, 0, 2081, 1623, 0, 0, 0,
	0, 0, 1522, 1509, 2071, 2072, 2073, 0, 1510, 3438,
	0, 4088, 1518, 2065, 2066, 2067, 2068, 2069, 2070, 0,
	4089, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	826, 826, 826, 1616, 0, 0, 0, 0, 0, 0,
	0, 3439, 0, 0, 0, 1508, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 959, 0, 3438, 0,
	2081, 0, 0, 3437, 0, 0, 0, 0, 0, 2071,
	2072, 2073, 1512, 0, 1533, 0, 6052, 0, 2065, 2066,
	2067, 2068, 2069, 2070, 0, 4139, 0, 4853, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1517, 0, 0, 0, 1514, 0, 0,
	0, 0, 0, 1513, 0, 0, 1080, 0, 1080, 0,
	0, 0, 0, 0, 826, 826, 826, 0, 0, 0,
	0, 0, 0, 0, 1522, 1828, 0, 3438, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 822, 822,
	0, 0, 0, 0, 0, 0, 0, 0, 1515, 0,
	0, 0, 2081, 0, 0, 0, 0, 0, 0, 0,
	6051, 2071, 2072, 2073, 0, 0, 0, 1508, 0, 0,
	2065, 2066, 2067, 2068, 2069, 2070, 0, 4126, 1531, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1516, 1512, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1519, 1909, 1910, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 826, 822, 0, 1514,
	3439, 0, 0, 826, 826, 1513, 0, 4460, 0, 1521,
	1520, 0, 0, 0, 0, 0, 0, 826, 1080, 0,
	0, 826, 826, 826, 826, 826, 826, 826, 826, 826,
	826, 826, 826, 826, 826, 826, 826, 0, 826, 0,
	1509, 0, 0, 3438, 0, 1510, 1940, 0, 0, 1518,
	1515, 0, 0, 0, 0, 0, 0, 3438, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2081,
	3344, 3344, 0, 0, 0, 0, 0, 0, 2071, 2072,
	2073, 0, 0, 0, 0, 0, 1511, 2065, 2066, 2067,
	2068, 2069, 2070, 0, 0, 1532, 0, 0, 0, 0,
	0, 1106, 0, 0, 0, 0, 1519, 0, 0, 0,
	0, 4454, 0, 0, 0, 0, 1524, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3439, 0,
	0, 0, 0, 0, 0, 0, 0, 3439, 0, 1529,
	1517, 1521, 1520, 0, 0, 0, 0, 3344, 3344, 3344,
	3344, 3344, 3344, 3344, 3344, 3344, 3344, 3344, 3344, 3344,
	0, 3344, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1522, 0, 0, 0, 0, 0, 3438, 0, 0,
	0, 0, 0, 0, 0, 2678, 0, 0, 0, 4724,
	0, 0, 0, 0, 3317, 2692, 0, 0, 0, 0,
	0, 5079, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1508, 5084, 0, 0, 1511, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 4537, 4538, 0, 0, 0, 0, 0,
	0, 1512, 0, 0, 0, 0, 0, 5102, 1524, 0,
	4547, 0, 0, 0, 0, 0, 0, 0, 0, 4783,
	0, 0, 0, 0, 997, 2092, 0, 1003, 2062, 1003,
	1003, 0, 2074, 2075, 2076, 0, 1514, 0, 0, 0,
	3439, 0, 1513, 0, 2617, 0, 0, 2618, 0, 0,
	0, 2623, 0, 2615, 0, 0, 0, 0, 2620, 2624,
	2619, 0, 2621, 0, 0, 0, 2622, 2085, 2086, 2616,
	0, 0, 0, 953, 0, 2092, 2625, 0, 2062, 0,
	0, 0, 2074, 2075, 2076, 953, 953, 1515, 0, 0,
	0, 3438, 0, 0, 2617, 0, 0, 2618, 0, 0,
	3344, 2623, 0, 2615, 0, 0, 0, 1007, 2620, 2624,
	2619, 4602, 4116, 0, 0, 0, 2622, 2085, 2086, 2616,
	1025, 1029, 0, 0, 0, 0, 2625, 0, 4117, 0,
	0, 0, 1516, 0, 0, 0, 0, 0, 0, 2919,
	0, 0, 0, 1519, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4453, 0, 1521, 1520,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4118, 0, 0, 0, 0, 0,
	997, 1003, 0, 1003, 1003, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2092, 0, 0, 2062,
	0, 0, 0, 2074, 2075, 2076, 3026, 0, 1049, 0,
	0, 0, 0, 0, 0, 2617, 0, 0, 2618, 0,
	0, 0, 2623, 0, 2615, 0, 0, 822, 0, 2620,
	2624, 2619, 0, 2621, 0, 1511, 0, 2622, 2085, 2086,
	2616, 0, 0, 0, 0, 1049, 0, 2625, 3052, 0,
	826, 826, 0, 826, 3057, 0, 826, 0, 0, 0,
	0, 0, 0, 0, 0, 1524, 826, 826, 0, 0,
	3438, 0, 0, 826, 0, 826, 826, 826, 826, 826,
	826, 826, 826, 826, 826, 826, 0, 826, 0, 826,
	0, 826, 826, 826, 826, 826, 826, 0, 826, 826,
	826, 0, 0, 826, 0, 0, 0, 0, 0, 826,
	0, 0, 0, 826, 826, 826, 826, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 826, 826, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 5359,
	5360, 1509, 0, 1080, 0, 0, 1510, 0, 0, 0,
	1518, 0, 1080, 0, 4721, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1940,
	0, 0, 0, 0, 0, 0, 5380, 0, 3438, 0,
	3169, 0, 3171, 0, 0, 0, 0, 3438, 0, 0,
	0, 0, 0, 0, 0, 4847, 0, 0, 0, 0,
	0, 0, 0, 0, 826, 1940, 0, 0, 0, 822,
	826, 822, 3656, 0, 0, 0, 4722, 0, 0, 0,
	0, 0, 0, 1080, 0, 4866, 0, 0, 0, 0,
	0, 0, 0, 5404, 0, 0, 0, 0, 5407, 1940,
	0, 1517, 0, 0, 5448, 0, 1080, 0, 0, 0,
	0, 0, 0, 0, 0, 5416, 5417, 5418, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1522, 959, 0, 0, 0, 1940, 5424, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2081, 0, 0, 0, 0, 0, 0, 5181, 0, 2071,
	2072, 2073, 0, 0, 0, 0, 0, 0, 2065, 2066,
	2067, 2068, 2069, 2070, 0, 1508, 0, 0, 0, 959,
	0, 0, 3234, 1080, 1080, 0, 1506, 0, 0, 0,
	3438, 0, 1080, 0, 0, 959, 0, 0, 0, 959,
	2081, 959, 1512, 0, 0, 0, 0, 959, 0, 2071,
	2072, 2073, 0, 0, 0, 826, 0, 0, 2065, 2066,
	2067, 2068, 2069, 2070, 959, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 959, 1507, 0, 1514, 0, 0,
	0, 0, 0, 1513, 0, 0, 959, 959, 0, 0,
	0, 0, 0, 1940, 959, 0, 0, 0, 0, 0,
	0, 0, 959, 0, 0, 0, 0, 0, 0, 959,
	0, 0, 0, 959, 0, 0, 959, 0, 0, 959,
	0, 0, 0, 0, 0, 0, 0, 0, 1515, 0,
	959, 0, 0, 0, 0, 0, 0, 0, 959, 0,
	0, 0, 0, 0, 959, 0, 0, 0, 0, 0,
	0, 0, 959, 0, 0, 0, 959, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1940,
	0, 0, 959, 1516, 0, 0, 0, 826, 0, 1080,
	826, 2081, 826, 826, 1519, 1080, 0, 0, 0, 0,
	2071, 2072, 2073, 0, 0, 0, 0, 6276, 0, 2065,
	2066, 2067, 2068, 2069, 2070, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3655, 0, 1521,
	1520, 826, 0, 0, 0, 0, 0, 0, 5708, 0,
	0, 0, 2092, 0, 0, 2062, 0, 0, 0, 2074,
	2075, 2076, 0, 0, 5750, 0, 959, 0, 0, 0,
	0, 2617, 959, 0, 2618, 0, 0, 1080, 2623, 959,
	2615, 0, 0, 0, 0, 2620, 2624, 2619, 0, 2621,
	0, 0, 0, 2622, 2085, 2086, 2616, 0, 0, 0,
	0, 0, 0, 2625, 0, 1940, 0, 5748, 0, 0,
	0, 959, 0, 0, 0, 0, 1511, 0, 0, 0,
	133, 0, 0, 0, 132, 134, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1524, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 179, 0, 0, 0, 180, 0, 0, 0, 0,
	0, 1080, 1080, 826, 826, 0, 826, 826, 0, 0,
	826, 0, 0, 0, 184, 826, 826, 0, 826, 0,
	0, 138, 826, 0, 0, 2092, 0, 0, 2062, 0,
	826, 0, 2074, 2075, 2076, 0, 0, 171, 0, 131,
	0, 0, 826, 0, 2617, 0, 1003, 177, 0, 0,
	826, 2623, 0, 2615, 0, 0, 0, 0, 2620, 2624,
	2619, 0, 2621, 0, 0, 0, 2622, 2085, 2086, 2616,
	0, 0, 5254, 0, 0, 0, 2625, 0, 0, 0,
	826, 826, 0, 0, 0, 0, 826, 3344, 0, 0,
	1509, 0, 1509, 0, 0, 1510, 0, 1510, 0, 1518,
	0, 1518, 826, 826, 0, 0, 0, 826, 0, 0,
	0, 0, 0, 0, 0, 0, 826, 0, 0, 140,
	0, 0, 826, 0, 0, 0, 5298, 0, 0, 0,
	0, 178, 0, 0, 0, 0, 826, 0, 0, 0,
	0, 0, 172, 0, 0, 0, 0, 826, 155, 3344,
	160, 153, 0, 0, 169, 0, 142, 0, 0, 0,
	0, 1504, 0, 1533, 0, 0, 0, 0, 0, 0,
	0, 826, 826, 826, 0, 0, 0, 162, 157, 826,
	826, 826, 0, 0, 826, 0, 0, 156, 0, 0,
	1517, 1940, 1517, 0, 5570, 826, 0, 1940, 0, 0,
	0, 161, 149, 1080, 5879, 0, 0, 5881, 158, 0,
	5884, 0, 0, 0, 0, 0, 0, 826, 147, 0,
	0, 1522, 0, 1522, 0, 0, 0, 0, 0, 0,
	137, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 826, 0, 0, 0, 0, 826, 0, 0,
	0, 0, 826, 0, 826, 0, 163, 166, 0, 0,
	0, 167, 0, 0, 1508, 0, 1508, 0, 0, 0,
	0, 0, 0, 159, 1080, 1506, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 0, 0, 0,
	0, 1512, 1080, 1512, 0, 0, 0, 959, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 0, 0, 0,
	822, 0, 0, 822, 0, 0, 0, 0, 136, 5401,
	0, 0, 135, 154, 1507, 145, 1514, 0, 1514, 139,
	0, 4242, 1513, 148, 1513, 143, 1940, 1080, 0, 0,
	0, 144, 0, 1080, 0, 0, 170, 0, 0, 0,
	0, 0, 0, 959, 959, 0, 152, 3584, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 0, 0,
	0, 3344, 0, 959, 959, 0, 0, 1515, 0, 1515,
	3603, 0, 0, 959, 0, 0, 0, 2081, 0, 0,
	168, 0, 0, 0, 0, 0, 2071, 2072, 2073, 826,
	164, 0, 0, 150, 0, 2065, 2066, 2067, 2068, 2069,
	2070, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2682, 1516, 0, 1516, 0, 0, 0, 0, 1509,
	3344, 826, 0, 1519, 1510, 1519, 0, 0, 1518, 0,
	0, 0, 0, 0, 0, 0, 183, 0, 0, 0,
	0, 0, 0, 2721, 0, 0, 0, 0, 0, 176,
	2731, 0, 0, 0, 0, 0, 1503, 0, 1521, 1520,
	1521, 1520, 0, 0, 1940, 1940, 1940, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 822, 822,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3680, 0, 0, 0, 0, 0, 0, 6182, 6183, 0,
	0, 6185, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1080, 1080, 0, 1080, 1517,
	2081, 822, 0, 0, 0, 0, 0, 0, 0, 2071,
	2072, 2073, 0, 0, 0, 1511, 0, 1511, 2065, 2066,
	2067, 2068, 2069, 2070, 0, 0, 826, 0, 0, 0,
	1522, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 959, 0, 0, 0, 1524, 0, 1524, 0, 0,
	1080, 1080, 0, 0, 959, 5627, 0, 0, 0, 0,
	0, 0, 2092, 0, 0, 2062, 0, 0, 0, 2074,
	2075, 2076, 0, 1508, 0, 0, 0, 5642, 5643, 0,
	959, 2617, 0, 3837, 2618, 0, 0, 0, 2623, 3845,
	2615, 0, 0, 0, 0, 2620, 2624, 2619, 0, 2621,
	1512, 0, 0, 2622, 2085, 2086, 2616, 0, 0, 0,
	0, 0, 0, 2625, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2721, 0, 0, 959, 0,
	0, 0, 1080, 0, 0, 1514, 0, 3344, 0, 0,
	1080, 1513, 0, 0, 0, 0, 0, 959, 959, 959,
	0, 0, 0, 0, 0, 6227, 0, 0, 0, 0,
	0, 3905, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1080, 0,
	0, 0, 0, 0, 0, 0, 1515, 0, 0, 0,
	959, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 959, 0, 0, 0, 826,
	2092, 0, 0, 2062, 0, 0, 0, 2074, 2075, 2076,
	0, 0, 959, 2721, 0, 3065, 0, 0, 959, 2617,
	0, 1516, 2618, 0, 0, 0, 2623, 0, 2615, 0,
	0, 0, 1519, 2620, 2624, 2619, 0, 2621, 0, 0,
	0, 2622, 2085, 2086, 2616, 3968, 3969, 0, 0, 0,
	1080, 2625, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 826, 0, 0, 3679, 826, 1521, 1520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 826,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 826,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 826,
	826, 0, 0, 826, 826, 826, 0, 826, 0, 0,
	0, 0, 0, 6084, 0, 0, 0, 0, 826, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 826, 0, 826, 0, 0, 0, 0, 0, 0,
	0, 0, 822, 0, 1511, 0, 0, 0, 826, 0,
	0, 0, 0, 822, 822, 826, 0, 822, 0, 826,
	826, 0, 0, 5215, 0, 0, 0, 0, 0, 0,
	0, 1080, 0, 826, 1524, 822, 0, 0, 826, 0,
	1080, 826, 826, 826, 826, 826, 826, 826, 826, 826,
	826, 826, 826, 826, 0, 826, 0, 0, 0, 0,
	5876, 5877, 826, 826, 826, 1080, 0, 0, 0, 0,
	826, 0, 826, 0, 0, 0, 0, 0, 0, 826,
	1940, 0, 0, 826, 0, 0, 0, 0, 826, 0,
	0, 0, 826, 0, 0, 0, 0, 0, 0, 0,
	826, 826, 826, 0, 0, 0, 0, 4144, 0, 826,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3344, 3344, 0, 826, 3344, 0, 826, 0, 0, 2092,
	0, 0, 2062, 0, 0, 0, 2074, 2075, 2076, 0,
	0, 5311, 0, 0, 0, 0, 0, 0, 2617, 0,
	0, 2618, 0, 826, 826, 2623, 826, 2615, 0, 822,
	0, 0, 2620, 2624, 2619, 0, 2621, 0, 0, 0,
	2622, 2085, 2086, 2616, 0, 0, 0, 0, 3603, 0,
	2625, 0, 0, 0, 0, 0, 0, 0, 826, 0,
	0, 0, 0, 0, 0, 0, 1080, 826, 826, 0,
	0, 0, 0, 0, 0, 0, 0, 1080, 1080, 6001,
	0, 1080, 0, 0, 0, 0, 0, 2081, 0, 0,
	0, 0, 959, 0, 0, 0, 2071, 2072, 2073, 0,
	0, 0, 0, 6207, 826, 2065, 2066, 2067, 2068, 2069,
	2070, 0, 0, 0, 0, 0, 0, 4307, 0, 0,
	1080, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 959, 0, 0,
	0, 959, 959, 0, 0, 0, 0, 0, 0, 1044,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 826, 826, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2092, 0, 0, 2062, 0, 0, 0, 2074,
	2075, 2076, 1940, 1080, 1940, 0, 0, 0, 0, 0,
	0, 2617, 0, 0, 2618, 0, 0, 0, 2623, 0,
	2615, 0, 0, 0, 826, 2620, 2624, 2619, 0, 2621,
	0, 0, 0, 2622, 2085, 2086, 2616, 0, 0, 0,
	0, 0, 0, 2625, 0, 2081, 0, 0, 0, 0,
	0, 3470, 1940, 0, 2071, 2072, 2073, 0, 0, 1620,
	0, 6197, 0, 2065, 2066, 2067, 2068, 2069, 2070, 2092,
	0, 0, 2062, 0, 0, 0, 2074, 2075, 2076, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2617, 0,
	959, 2618, 0, 0, 0, 2623, 0, 2615, 0, 0,
	6160, 0, 2620, 2624, 2619, 0, 2621, 0, 0, 0,
	2622, 2085, 2086, 2616, 0, 1940, 730, 1080, 0, 0,
	2625, 2893, 0, 0, 0, 0, 0, 778, 778, 778,
	778, 801, 802, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 959, 0, 0, 0, 822, 959, 0, 0,
	0, 0, 876, 876, 0, 1622, 0, 0, 0, 0,
	0, 0, 0, 0, 4492, 4494, 970, 970, 0, 0,
	0, 0, 919, 0, 0, 0, 0, 0, 945, 0,
	949, 0, 0, 0, 0, 965, 966, 0, 0, 971,
	972, 0, 0, 0, 0, 822, 0, 0, 0, 959,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1000, 1940, 0, 0, 0, 0, 1013, 0,
	1016, 6226, 1018, 1019, 1020, 1021, 1022, 0, 0, 0,
	1031, 0, 0, 0, 1036, 0, 0, 0, 0, 0,
	1045, 0, 0, 1611, 0, 0, 4536, 1096, 1098, 1100,
	0, 0, 1003, 826, 4539, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1621, 0, 0, 0, 0,
	826, 826, 0, 0, 822, 0, 826, 826, 0, 0,
	0, 0, 0, 826, 826, 0, 0, 0, 0, 0,
	826, 0, 4556, 0, 0, 0, 0, 826, 0, 0,
	0, 0, 0, 0, 0, 1617, 0, 0, 826, 0,
	0, 970, 0, 0, 2081, 0, 0, 0, 0, 0,
	0, 1003, 0, 2071, 2072, 2073, 0, 0, 1614, 0,
	6036, 0, 2065, 2066, 2067, 2068, 2069, 2070, 0, 0,
	0, 0, 0, 826, 0, 0, 0, 0, 0, 3471,
	0, 826, 1619, 0, 826, 0, 826, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1080, 0, 0, 0, 4606, 826, 0, 0, 0, 0,
	0, 0, 826, 0, 0, 0, 826, 826, 0, 0,
	826, 0, 0, 0, 1625, 0, 826, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 826, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	822, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 0, 3466, 0, 822, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1080, 1618, 0, 2092, 1620,
	1080, 2062, 0, 0, 0, 2074, 2075, 2076, 1080, 0,
	0, 0, 1615, 0, 0, 0, 0, 2617, 0, 1613,
	2618, 0, 0, 1623, 2623, 0, 2615, 0, 826, 0,
	0, 2620, 2624, 2619, 0, 2621, 3472, 0, 0, 2622,
	2085, 2086, 2616, 0, 1940, 4685, 0, 2081, 0, 2625,
	0, 0, 0, 0, 4689, 0, 2071, 2072, 2073, 0,
	1616, 1654, 3473, 6022, 826, 2065, 2066, 2067, 2068, 2069,
	2070, 959, 0, 0, 0, 0, 0, 0, 0, 4710,
	0, 0, 826, 0, 0, 0, 0, 826, 0, 0,
	0, 0, 0, 0, 0, 1622, 0, 0, 0, 0,
	5836, 0, 0, 0, 822, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5707, 0, 3638,
	0, 826, 0, 0, 2081, 0, 0, 0, 0, 0,
	0, 0, 0, 2071, 2072, 2073, 0, 0, 1080, 0,
	5999, 0, 2065, 2066, 2067, 2068, 2069, 2070, 0, 0,
	0, 959, 0, 0, 0, 959, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3697, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3710, 0, 1611, 959, 3713, 0, 3715, 0, 0,
	1080, 0, 0, 0, 0, 0, 959, 0, 0, 0,
	0, 0, 0, 0, 0, 1621, 0, 0, 0, 0,
	3733, 826, 0, 0, 0, 0, 0, 0, 0, 0,
	3736, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 953, 0, 0, 0, 0, 0, 0, 0,
	3752, 1080, 1080, 0, 0, 1617, 0, 0, 3762, 0,
	0, 0, 0, 0, 0, 3765, 0, 0, 822, 3768,
	0, 0, 3771, 0, 4860, 3773, 0, 0, 1614, 1620,
	0, 0, 0, 0, 0, 0, 3779, 0, 0, 959,
	0, 0, 0, 0, 953, 0, 0, 0, 0, 1194,
	953, 0, 1619, 0, 0, 0, 0, 0, 3793, 0,
	0, 778, 3799, 0, 0, 0, 826, 0, 0, 0,
	0, 0, 0, 0, 826, 826, 826, 0, 3829, 0,
	0, 0, 1610, 1225, 0, 0, 0, 0, 827, 0,
	0, 1644, 0, 1655, 1625, 0, 0, 0, 0, 0,
	826, 826, 0, 0, 826, 826, 826, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1622, 1652, 0, 0, 139,
	0, 826, 1612, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1618, 0, 826, 826,
	0, 0, 3897, 0, 876, 0, 0, 0, 1080, 0,
	0, 0, 1615, 826, 826, 3908, 0, 0, 0, 1613,
	0, 0, 1940, 1623, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1441, 0,
	0, 1444, 0, 0, 0, 0, 0, 3908, 826, 0,
	0, 0, 0, 1080, 0, 0, 0, 0, 0, 0,
	1616, 0, 0, 1611, 0, 0, 0, 822, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1003,
	1003, 0, 0, 0, 0, 1621, 0, 0, 0, 0,
	0, 0, 0, 0, 1486, 0, 0, 1490, 0, 0,
	0, 0, 0, 0, 0, 826, 0, 0, 0, 1080,
	0, 0, 0, 2081, 0, 0, 0, 0, 0, 0,
	0, 0, 2071, 2072, 2073, 1617, 1003, 826, 0, 0,
	0, 2065, 2066, 2067, 2068, 2069, 2070, 0, 1633, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1614, 0,
	961, 0, 0, 1676, 0, 0, 0, 0, 0, 0,
	959, 0, 961, 961, 0, 0, 0, 0, 0, 0,
	0, 0, 1619, 0, 826, 0, 0, 0, 0, 0,
	0, 0, 0, 1004, 961, 0, 0, 0, 1004, 0,
	1004, 0, 0, 0, 0, 822, 0, 961, 961, 959,
	959, 0, 1610, 0, 822, 0, 6206, 0, 0, 0,
	0, 0, 0, 1645, 1625, 0, 0, 0, 0, 0,
	961, 961, 961, 826, 0, 0, 0, 0, 0, 826,
	0, 0, 0, 0, 0, 826, 0, 0, 0, 0,
	826, 0, 826, 0, 0, 0, 1642, 0, 0, 139,
	1794, 0, 1612, 0, 0, 826, 961, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1618, 0, 0, 0,
	0, 0, 0, 826, 0, 0, 0, 0, 0, 0,
	826, 0, 1615, 0, 0, 0, 0, 826, 0, 1613,
	0, 0, 0, 1623, 826, 0, 0, 0, 322, 826,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1509, 0, 0, 0, 959, 1510, 0, 0,
	0, 1518, 0, 0, 0, 0, 0, 0, 6271, 0,
	1616, 0, 0, 0, 0, 0, 778, 0, 778, 778,
	778, 0, 0, 778, 778, 778, 0, 822, 778, 0,
	0, 0, 0, 1080, 0, 0, 0, 0, 0, 0,
	1080, 0, 0, 0, 1908, 0, 0, 0, 0, 0,
	1916, 1917, 0, 0, 0, 0, 0, 1509, 0, 0,
	0, 0, 1510, 1533, 0, 0, 1518, 0, 0, 0,
	826, 0, 0, 1940, 5272, 0, 0, 0, 6271, 0,
	0, 0, 0, 826, 0, 0, 0, 826, 0, 0,
	0, 0, 1517, 0, 6336, 959, 826, 826, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1003, 1003, 0, 826, 0, 0, 0, 2092, 0, 0,
	2062, 0, 0, 1522, 2074, 2075, 2076, 0, 2838, 0,
	0, 1080, 0, 1080, 1080, 826, 2617, 0, 0, 2618,
	0, 0, 0, 2623, 0, 2615, 0, 0, 0, 0,
	2620, 2624, 2619, 0, 2621, 0, 0, 1517, 2622, 2085,
	2086, 2616, 0, 0, 826, 0, 1508, 0, 2625, 826,
	826, 826, 0, 826, 0, 0, 0, 0, 0, 0,
	0, 0, 826, 1940, 0, 0, 0, 0, 1522, 0,
	960, 0, 0, 1512, 0, 0, 0, 0, 0, 0,
	0, 0, 960, 960, 0, 0, 0, 0, 0, 0,
	1080, 826, 5356, 1940, 0, 0, 0, 876, 0, 0,
	1509, 0, 0, 0, 960, 1510, 0, 0, 1514, 1518,
	1940, 1508, 0, 0, 1513, 0, 959, 960, 960, 0,
	0, 826, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2673, 0, 0, 0, 0, 0, 1512, 0,
	960, 960, 960, 0, 5389, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1515,
	0, 0, 0, 0, 0, 2712, 0, 0, 0, 0,
	0, 2832, 0, 1514, 0, 0, 960, 0, 0, 1513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 5408, 5409, 0, 0, 0,
	1517, 0, 0, 0, 1516, 0, 826, 0, 0, 0,
	0, 0, 0, 0, 0, 1519, 0, 0, 0, 0,
	0, 0, 284, 0, 1515, 0, 0, 0, 0, 0,
	0, 1522, 0, 826, 0, 826, 826, 4480, 0, 0,
	287, 826, 0, 0, 0, 0, 0, 961, 3662, 0,
	1521, 1520, 0, 0, 2840, 0, 2092, 961, 0, 2062,
	961, 0, 0, 2074, 2075, 2076, 0, 961, 0, 1516,
	961, 0, 0, 0, 1508, 2617, 4509, 826, 2618, 0,
	1519, 0, 2623, 0, 2615, 0, 0, 0, 0, 2620,
	2624, 2619, 0, 2621, 0, 0, 0, 2622, 2085, 2086,
	2616, 1512, 0, 1620, 0, 0, 0, 2625, 0, 826,
	0, 0, 0, 2837, 0, 1521, 1520, 0, 0, 961,
	826, 0, 0, 826, 0, 0, 0, 1511, 0, 0,
	0, 2922, 826, 826, 0, 0, 1514, 0, 0, 0,
	0, 0, 1513, 0, 0, 4546, 0, 0, 0, 293,
	0, 0, 4307, 0, 3177, 1509, 959, 1524, 0, 0,
	1510, 0, 0, 0, 1518, 1606, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 826,
	289, 0, 0, 0, 959, 0, 2721, 1515, 0, 0,
	826, 290, 1511, 0, 0, 0, 0, 0, 0, 1622,
	0, 4575, 1249, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3023, 0, 0, 3025, 3176, 0, 4592, 0,
	0, 0, 1524, 294, 826, 826, 1557, 0, 826, 0,
	0, 295, 1532, 0, 0, 0, 0, 0, 0, 288,
	0, 3178, 0, 1519, 0, 959, 0, 0, 826, 0,
	0, 0, 0, 0, 0, 1517, 0, 826, 0, 826,
	0, 0, 1247, 0, 0, 0, 3058, 0, 3060, 3061,
	0, 0, 0, 0, 0, 0, 2831, 3179, 1521, 1520,
	0, 0, 0, 0, 0, 0, 1522, 1611, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2081, 0, 0, 0, 0, 0, 0, 1621,
	0, 2071, 2072, 2073, 0, 826, 0, 0, 5670, 0,
	2065, 2066, 2067, 2068, 2069, 2070, 826, 0, 0, 1508,
	0, 0, 0, 0, 0, 0, 0, 0, 826, 267,
	3180, 0, 297, 0, 0, 0, 0, 0, 0, 1617,
	0, 0, 0, 0, 0, 1511, 1512, 0, 0, 0,
	0, 1250, 3128, 0, 3181, 3131, 0, 0, 826, 298,
	0, 0, 1614, 0, 285, 0, 0, 299, 778, 778,
	0, 826, 0, 778, 778, 1524, 778, 778, 0, 1080,
	0, 1514, 0, 291, 0, 0, 1619, 1513, 1251, 0,
	826, 961, 1940, 0, 1252, 0, 0, 960, 0, 292,
	0, 0, 0, 0, 0, 0, 0, 960, 961, 3175,
	960, 0, 0, 0, 961, 0, 1610, 960, 961, 961,
	960, 0, 0, 0, 0, 286, 0, 1607, 1625, 0,
	0, 0, 1515, 0, 0, 0, 0, 0, 0, 0,
	0, 826, 826, 0, 0, 0, 961, 0, 133, 0,
	0, 0, 132, 134, 0, 0, 1940, 826, 961, 3173,
	1604, 0, 182, 139, 961, 0, 1612, 0, 0, 960,
	0, 0, 0, 826, 826, 0, 0, 1516, 0, 0,
	1618, 0, 0, 0, 1940, 0, 0, 0, 1519, 179,
	0, 0, 0, 180, 5793, 0, 1615, 0, 0, 0,
	0, 0, 0, 1613, 0, 0, 0, 1623, 0, 0,
	0, 0, 184, 0, 0, 0, 0, 0, 0, 138,
	0, 1556, 0, 1521, 1520, 0, 0, 1004, 0, 0,
	0, 1004, 1004, 0, 0, 171, 0, 131, 0, 0,
	0, 0, 0, 961, 1616, 177, 0, 0, 0, 1942,
	0, 2081, 0, 0, 0, 0, 0, 0, 4845, 0,
	2071, 2072, 2073, 0, 0, 0, 0, 5644, 0, 2065,
	2066, 2067, 2068, 2069, 2070, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1828, 0, 1828, 1828, 0,
	2092, 0, 0, 2062, 0, 0, 0, 2074, 2075, 2076,
	1511, 0, 0, 0, 0, 0, 0, 0, 0, 2617,
	0, 0, 2618, 2721, 0, 0, 2623, 140, 2615, 0,
	0, 0, 0, 2620, 2624, 2619, 0, 2621, 0, 178,
	1524, 2622, 2085, 2086, 2616, 0, 0, 0, 127, 0,
	172, 2625, 0, 0, 0, 0, 155, 0, 160, 153,
	0, 0, 169, 0, 142, 0, 0, 0, 0, 0,
	2092, 0, 0, 2062, 5928, 0, 0, 2074, 2075, 2076,
	0, 0, 0, 0, 0, 162, 157, 0, 0, 2617,
	0, 0, 2618, 0, 0, 156, 2623, 0, 2615, 0,
	0, 0, 126, 2620, 2624, 2619, 0, 2621, 0, 161,
	149, 2622, 2085, 2086, 2616, 0, 158, 0, 0, 0,
	0, 2625, 0, 0, 0, 0, 147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 137, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 961, 0,
	0, 0, 0, 0, 0, 0, 4998, 1942, 0, 1942,
	0, 960, 0, 0, 163, 166, 0, 0, 0, 167,
	0, 0, 0, 0, 0, 0, 0, 0, 960, 0,
	961, 159, 0, 0, 960, 0, 0, 961, 960, 960,
	0, 0, 0, 0, 165, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 5048, 0,
	0, 0, 0, 5053, 146, 0, 960, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 0, 960, 0,
	135, 154, 0, 145, 960, 0, 0, 139, 0, 0,
	0, 148, 0, 143, 0, 0, 0, 0, 0, 144,
	0, 0, 0, 0, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 152, 3908, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 168, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 164, 0,
	0, 150, 0, 960, 0, 0, 0, 0, 0, 1941,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2092, 0,
	0, 2062, 961, 0, 0, 2074, 2075, 2076, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2617, 0, 0,
	2618, 0, 0, 0, 2623, 0, 2615, 0, 0, 0,
	0, 2620, 2624, 2619, 0, 2621, 0, 0, 0, 2622,
	2085, 2086, 2616, 2092, 0, 0, 2062, 0, 0, 2625,
	2074, 2075, 2076, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2617, 0, 0, 2618, 0, 0, 0, 2623,
	0, 2615, 0, 0, 0, 0, 2620, 2624, 2619, 0,
	2621, 0, 0, 0, 2622, 2085, 2086, 2616, 0, 2092,
	0, 0, 2062, 0, 2625, 0, 2074, 2075, 2076, 0,
	961, 0, 961, 961, 961, 961, 0, 0, 2617, 0,
	0, 2618, 0, 0, 0, 2623, 0, 2615, 0, 0,
	0, 0, 2620, 2624, 2619, 2081, 2621, 0, 960, 0,
	2622, 2085, 2086, 2616, 2071, 2072, 2073, 1941, 0, 1941,
	2625, 5622, 0, 2065, 2066, 2067, 2068, 2069, 2070, 0,
	0, 0, 0, 1004, 1004, 1004, 0, 0, 0, 0,
	960, 0, 0, 0, 0, 0, 0, 960, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 961,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3499,
	0, 0, 0, 6281, 0, 2081, 0, 0, 0, 0,
	0, 0, 0, 0, 2071, 2072, 2073, 0, 0, 3513,
	0, 5600, 0, 2065, 2066, 2067, 2068, 2069, 2070, 0,
	0, 3530, 0, 0, 2092, 0, 0, 2062, 0, 3541,
	0, 2074, 2075, 2076, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2617, 0, 0, 2618, 0, 0, 0,
	2623, 0, 2615, 0, 0, 0, 0, 2620, 2624, 2619,
	0, 2621, 3587, 3588, 3589, 2622, 2085, 2086, 2616, 0,
	3593, 0, 3594, 0, 0, 2625, 0, 0, 0, 0,
	0, 3604, 0, 0, 0, 0, 0, 0, 0, 3615,
	0, 3619, 3620, 3621, 3622, 0, 0, 3629, 0, 3631,
	3634, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3657, 3658, 0, 0, 0, 3663, 3664,
	5384, 3665, 2092, 0, 0, 2062, 0, 0, 0, 2074,
	2075, 2076, 5394, 0, 0, 0, 3675, 3676, 3677, 0,
	0, 2617, 5195, 0, 2618, 0, 0, 0, 2623, 0,
	2615, 3695, 3696, 0, 0, 2620, 2624, 2619, 0, 2621,
	0, 0, 960, 2622, 2085, 2086, 2616, 3708, 3709, 0,
	0, 3711, 3712, 2625, 3714, 0, 0, 0, 3716, 0,
	0, 0, 0, 0, 3721, 3722, 0, 0, 3724, 0,
	0, 3728, 0, 3729, 0, 0, 0, 3732, 0, 3734,
	0, 0, 0, 0, 0, 3735, 0, 0, 0, 1942,
	0, 0, 0, 0, 0, 3908, 0, 0, 0, 0,
	0, 0, 0, 0, 3746, 3747, 3748, 0, 0, 0,
	0, 0, 0, 3760, 0, 3761, 0, 0, 3764, 0,
	0, 0, 0, 0, 3766, 0, 3767, 0, 0, 3770,
	0, 3772, 0, 0, 0, 0, 3774, 0, 0, 0,
	960, 0, 960, 960, 960, 960, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3789, 0, 0, 0,
	0, 0, 0, 3792, 0, 0, 0, 3794, 0, 3798,
	0, 0, 0, 0, 0, 0, 3815, 3816, 0, 0,
	0, 0, 0, 2081, 3825, 0, 0, 0, 0, 3833,
	0, 0, 2071, 2072, 2073, 0, 0, 0, 0, 5458,
	3846, 2065, 2066, 2067, 2068, 2069, 2070, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 960,
	0, 0, 0, 0, 0, 0, 0, 0, 2081, 0,
	0, 0, 0, 0, 0, 0, 0, 2071, 2072, 2073,
	0, 0, 0, 3883, 5441, 3885, 2065, 2066, 2067, 2068,
	2069, 2070, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2081, 0, 0, 0, 0, 0,
	0, 0, 0, 2071, 2072, 2073, 0, 0, 0, 0,
	5432, 0, 2065, 2066, 2067, 2068, 2069, 2070, 2092, 0,
	0, 2062, 0, 0, 0, 2074, 2075, 2076, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2617, 0, 0,
	2618, 0, 0, 0, 2623, 0, 2615, 0, 0, 0,
	0, 2620, 2624, 2619, 0, 2621, 0, 0, 5233, 2622,
	2085, 2086, 2616, 0, 0, 0, 0, 0, 0, 2625,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3967, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3908, 3908, 0, 0, 2081,
	0, 0, 0, 0, 0, 0, 0, 0, 2071, 2072,
	2073, 0, 0, 0, 0, 0, 0, 2065, 2066, 2067,
	2068, 2069, 2070, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1941,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2081, 0, 0,
	0, 0, 0, 0, 0, 0, 2071, 2072, 2073, 0,
	0, 0, 0, 5172, 0, 2065, 2066, 2067, 2068, 2069,
	2070, 2092, 0, 0, 2062, 0, 0, 0, 2074, 2075,
	2076, 0, 0, 0, 0, 0, 0, 1412, 0, 0,
	2617, 0, 0, 2618, 0, 0, 0, 2623, 0, 2615,
	0, 0, 0, 0, 2620, 2624, 2619, 0, 2621, 0,
	0, 0, 2622, 2085, 2086, 2616, 0, 0, 0, 0,
	0, 0, 2625, 0, 5170, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2092, 0, 0, 2062, 0, 0, 0, 2074, 2075, 2076,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2617,
	810, 0, 2618, 0, 0, 819, 2623, 0, 2615, 0,
	0, 0, 0, 2620, 2624, 2619, 4225, 2621, 0, 4229,
	0, 2622, 2085, 2086, 2616, 0, 0, 0, 0, 0,
	0, 2625, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4271, 0,
	0, 0, 1942, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2092, 0, 0, 2062, 4313, 0, 0, 2074,
	2075, 2076, 0, 0, 4321, 0, 4321, 0, 1942, 5169,
	0, 2617, 4330, 0, 2618, 0, 0, 0, 2623, 0,
	2615, 0, 0, 5168, 0, 2620, 2624, 2619, 0, 2621,
	0, 0, 0, 2622, 2085, 2086, 2616, 0, 0, 0,
	0, 0, 1942, 2625, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1133, 1134,
	1136, 1140, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 961, 0, 0, 0,
	1942, 0, 4399, 2081, 0, 0, 0, 0, 0, 0,
	0, 0, 2071, 2072, 2073, 4416, 4417, 4418, 4419, 0,
	0, 2065, 2066, 2067, 2068, 2069, 2070, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 961, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 961, 0,
	0, 0, 961, 0, 961, 0, 0, 0, 0, 0,
	961, 4448, 4449, 4450, 0, 0, 4455, 4456, 4457, 4458,
	0, 0, 0, 0, 0, 0, 0, 961, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 961, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 961,
	961, 0, 0, 0, 0, 0, 1942, 961, 0, 0,
	0, 0, 0, 0, 0, 961, 0, 0, 0, 0,
	0, 0, 961, 0, 4479, 0, 961, 0, 0, 961,
	0, 0, 961, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 961, 0, 0, 0, 0, 0, 0,
	0, 961, 0, 0, 0, 0, 0, 961, 0, 0,
	0, 0, 0, 4508, 0, 961, 0, 0, 0, 961,
	0, 4510, 0, 0, 3005, 0, 0, 0, 0, 284,
	2092, 0, 1942, 2062, 0, 961, 0, 2074, 2075, 2076,
	0, 0, 0, 1004, 0, 1004, 1004, 287, 0, 2617,
	0, 0, 2618, 0, 0, 0, 2623, 0, 2615, 0,
	0, 0, 0, 2620, 2624, 2619, 0, 2621, 0, 0,
	3908, 2622, 2085, 2086, 2616, 0, 2081, 0, 0, 0,
	0, 2625, 0, 5164, 0, 2071, 2072, 2073, 0, 0,
	0, 0, 1941, 0, 2065, 2066, 2067, 2068, 2069, 2070,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 961,
	0, 0, 0, 0, 0, 961, 0, 4561, 0, 0,
	0, 0, 961, 4565, 0, 0, 0, 0, 1941, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1942, 0,
	0, 0, 0, 0, 961, 2081, 293, 0, 0, 0,
	0, 3001, 1941, 0, 2071, 2072, 2073, 0, 0, 0,
	0, 0, 0, 2065, 2066, 2067, 2068, 2069, 2070, 0,
	0, 0, 0, 0, 0, 4599, 4600, 289, 0, 0,
	0, 0, 4604, 0, 0, 0, 960, 0, 290, 0,
	1941, 0, 0, 0, 0, 0, 0, 0, 0, 1249,
	0, 0, 0, 0, 0, 0, 0, 1004, 0, 1004,
	1004, 0, 0, 3003, 1148, 0, 1151, 0, 0, 0,
	294, 0, 0, 1153, 0, 0, 0, 0, 295, 0,
	0, 0, 960, 0, 0, 0, 288, 0, 3004, 0,
	0, 0, 0, 0, 0, 0, 0, 2081, 960, 0,
	0, 0, 960, 0, 960, 0, 2071, 2072, 2073, 1247,
	960, 0, 0, 0, 0, 2065, 2066, 2067, 2068, 2069,
	2070, 0, 0, 0, 0, 0, 0, 960, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 960, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 960,
	960, 0, 0, 0, 0, 0, 1941, 960, 0, 0,
	0, 819, 0, 0, 1140, 960, 0, 0, 0, 0,
	0, 0, 960, 0, 0, 0, 960, 0, 0, 960,
	0, 0, 960, 0, 0, 0, 267, 3006, 0, 297,
	0, 0, 0, 960, 0, 0, 0, 0, 0, 0,
	0, 960, 0, 0, 0, 0, 0, 960, 1250, 0,
	0, 3007, 0, 0, 0, 960, 298, 0, 0, 960,
	2092, 285, 0, 2062, 299, 0, 0, 2074, 2075, 2076,
	0, 0, 1941, 0, 0, 960, 0, 0, 0, 2617,
	291, 0, 2618, 0, 1942, 1251, 2623, 0, 2615, 0,
	1942, 1252, 0, 2620, 2624, 2619, 292, 2621, 0, 0,
	3008, 2622, 2085, 2086, 2616, 0, 3009, 0, 0, 0,
	0, 2625, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 1286, 1286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4817, 0, 0, 0, 960,
	0, 0, 0, 0, 3002, 960, 0, 0, 0, 0,
	0, 0, 960, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2092, 0, 0, 2062,
	0, 0, 4321, 2074, 2075, 2076, 0, 0, 1941, 4846,
	961, 0, 0, 0, 960, 2617, 0, 0, 2618, 0,
	0, 0, 2623, 0, 2615, 0, 0, 0, 0, 2620,
	2624, 2619, 0, 2621, 0, 2081, 0, 2622, 2085, 2086,
	2616, 0, 0, 0, 2071, 2072, 2073, 2625, 0, 1942,
	0, 0, 0, 2065, 2066, 2067, 2068, 2069, 2070, 0,
	0, 0, 0, 0, 0, 0, 961, 961, 0, 2092,
	0, 0, 2062, 0, 0, 0, 2074, 2075, 2076, 0,
	0, 0, 1323, 0, 4321, 0, 961, 961, 2617, 0,
	0, 2618, 0, 0, 0, 2623, 961, 2615, 0, 0,
	4916, 4917, 2620, 2624, 2619, 0, 2621, 0, 0, 0,
	2622, 2085, 2086, 2616, 0, 0, 0, 0, 0, 0,
	2625, 0, 0, 0, 4936, 0, 0, 0, 0, 1140,
	0, 1799, 0, 1140, 1140, 0, 1814, 0, 0, 0,
	0, 0, 0, 0, 4966, 0, 0, 0, 0, 0,
	0, 0, 0, 4968, 0, 0, 0, 0, 0, 0,
	0, 0, 4970, 4971, 4972, 4973, 0, 0, 4976, 4977,
	0, 0, 4980, 4981, 4982, 4983, 4984, 4985, 0, 1140,
	0, 0, 0, 0, 0, 0, 0, 1942, 1942, 1942,
	0, 0, 4997, 0, 0, 0, 0, 0, 0, 0,
	5001, 0, 5002, 0, 0, 0, 5004, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 5032, 0, 0, 0, 0,
	5037, 5038, 1899, 0, 0, 5039, 5040, 0, 0, 0,
	0, 0, 5044, 5045, 5046, 5047, 0, 5049, 5050, 5051,
	5052, 0, 0, 0, 0, 5059, 0, 0, 1140, 2092,
	0, 0, 2062, 0, 1941, 0, 2074, 2075, 2076, 0,
	1941, 0, 0, 0, 0, 0, 0, 0, 2617, 0,
	0, 2618, 0, 0, 961, 2623, 0, 2615, 5082, 0,
	5083, 0, 2620, 2624, 2619, 0, 2621, 961, 0, 5089,
	2622, 2085, 2086, 2616, 0, 0, 0, 0, 0, 0,
	2625, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 961, 0, 2559, 2561, 2562, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1932, 0, 0, 0, 2022,
	0, 0, 0, 0, 1057, 1057, 0, 2038, 0, 2045,
	0, 0, 0, 0, 0, 0, 2056, 0, 0, 0,
	960, 961, 0, 0, 0, 0, 0, 2538, 2539, 2540,
	2541, 2542, 0, 0, 0, 2081, 0, 0, 2547, 0,
	961, 961, 961, 0, 2071, 2072, 2073, 0, 0, 0,
	0, 5155, 0, 2065, 2066, 2067, 2068, 2069, 2070, 1941,
	0, 0, 2565, 0, 0, 0, 2092, 0, 0, 2062,
	0, 0, 0, 2074, 2075, 2076, 960, 960, 0, 0,
	0, 0, 0, 961, 0, 2617, 0, 0, 2618, 0,
	0, 0, 2623, 0, 2615, 0, 960, 960, 961, 2620,
	2624, 2619, 1004, 2621, 0, 0, 960, 2622, 2085, 2086,
	2616, 0, 0, 0, 0, 961, 0, 2625, 0, 0,
	0, 961, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2718, 0, 0, 0, 0, 778, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2746, 2081, 0, 0, 0, 0, 0, 0, 0, 0,
	2071, 2072, 2073, 0, 0, 0, 0, 5147, 0, 2065,
	2066, 2067, 2068, 2069, 2070, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1941, 1941, 1941,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2081, 0, 0, 0, 0, 0,
	0, 0, 0, 2071, 2072, 2073, 0, 0, 0, 0,
	5003, 0, 2065, 2066, 2067, 2068, 2069, 2070, 0, 0,
	0, 0, 0, 0, 5306, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2092, 0, 0,
	2062, 0, 0, 0, 2074, 2075, 2076, 0, 0, 4744,
	0, 0, 0, 0, 0, 0, 2617, 0, 0, 2618,
	0, 0, 0, 2623, 960, 2615, 0, 0, 0, 0,
	2620, 2624, 2619, 0, 2621, 0, 0, 960, 2622, 2085,
	2086, 2616, 0, 0, 0, 0, 0, 2944, 2625, 0,
	2949, 0, 0, 1942, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 960, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5363, 0, 0, 0, 5365, 0,
	0, 0, 0, 0, 0, 0, 5368, 5369, 5370, 5371,
	5372, 0, 0, 5375, 5376, 5377, 5378, 0, 0, 0,
	0, 960, 0, 0, 0, 0, 5382, 5383, 0, 5385,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 5393,
	960, 960, 960, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2081, 0, 0, 0, 0, 0,
	0, 0, 0, 2071, 2072, 2073, 0, 0, 0, 0,
	4929, 0, 2065, 2066, 2067, 2068, 2069, 2070, 0, 0,
	0, 0, 0, 960, 0, 0, 0, 5410, 5411, 5412,
	0, 0, 0, 0, 0, 0, 0, 0, 960, 0,
	0, 0, 0, 0, 0, 961, 0, 5420, 0, 0,
	3077, 0, 0, 0, 0, 960, 0, 0, 1291, 0,
	0, 960, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2092, 0, 0, 2062, 0, 0, 0,
	2074, 2075, 2076, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2617, 0, 0, 2618, 0, 0, 0, 2623,
	961, 2615, 0, 0, 961, 961, 2620, 2624, 2619, 0,
	2621, 0, 0, 0, 2622, 2085, 2086, 2616, 0, 0,
	0, 5446, 0, 0, 2625, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1942, 0, 1942, 0, 0,
	0, 2081, 0, 0, 0, 0, 0, 0, 0, 0,
	2071, 2072, 2073, 0, 5488, 0, 0, 4905, 0, 2065,
	2066, 2067, 2068, 2069, 2070, 0, 0, 0, 0, 0,
	0, 2092, 0, 0, 2062, 0, 0, 0, 2074, 2075,
	2076, 0, 0, 0, 0, 1942, 0, 0, 0, 0,
	2617, 0, 0, 2618, 0, 0, 0, 2623, 0, 2615,
	0, 5552, 0, 0, 2620, 2624, 2619, 5560, 2621, 0,
	0, 0, 2622, 2085, 2086, 2616, 0, 0, 0, 0,
	0, 0, 2625, 961, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 4321, 0, 0, 1932, 1932, 1932, 0,
	0, 0, 0, 0, 0, 0, 0, 5605, 1942, 0,
	0, 0, 5608, 1941, 0, 0, 0, 0, 5614, 0,
	0, 0, 0, 0, 0, 0, 4671, 0, 0, 0,
	0, 0, 0, 0, 0, 961, 1057, 0, 0, 0,
	961, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2092, 0, 0, 2062, 0, 0,
	0, 2074, 2075, 2076, 0, 0, 0, 0, 0, 0,
	0, 5650, 5651, 2617, 0, 0, 2618, 5656, 0, 0,
	2623, 0, 2615, 5658, 0, 0, 0, 2620, 2624, 2619,
	0, 2621, 961, 0, 0, 2622, 2085, 2086, 2616, 0,
	0, 0, 2081, 0, 0, 2625, 1942, 5671, 5672, 823,
	0, 2071, 2072, 2073, 1057, 2538, 2539, 0, 0, 0,
	2065, 2066, 2067, 2068, 2069, 2070, 0, 0, 0, 1286,
	0, 5685, 0, 3238, 3239, 3240, 3241, 3242, 3243, 3244,
	3245, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253, 0,
	3259, 0, 0, 0, 0, 960, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1816, 0, 0, 0, 0,
	2092, 0, 0, 2062, 0, 0, 0, 2074, 2075, 2076,
	960, 0, 0, 0, 960, 960, 0, 0, 1057, 2617,
	0, 0, 2618, 0, 0, 0, 2623, 0, 2615, 0,
	0, 0, 0, 2620, 2624, 2619, 0, 2621, 0, 0,
	0, 2622, 2085, 2086, 2616, 2092, 0, 0, 2062, 0,
	0, 2625, 2074, 2075, 2076, 1941, 0, 1941, 0, 0,
	0, 0, 0, 0, 2617, 0, 0, 2618, 0, 0,
	0, 2623, 0, 2615, 0, 0, 0, 0, 2620, 2624,
	2619, 0, 2621, 0, 0, 0, 2622, 2085, 2086, 2616,
	0, 0, 0, 0, 0, 0, 2625, 0, 1057, 1057,
	0, 4321, 0, 0, 0, 1941, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 5829,
	0, 0, 0, 0, 0, 0, 0, 0, 2081, 0,
	0, 0, 0, 0, 0, 0, 0, 2071, 2072, 2073,
	0, 0, 0, 960, 4684, 0, 2065, 2066, 2067, 2068,
	2069, 2070, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5863, 1941, 0,
	5866, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1059, 1059, 0, 0, 0, 0, 1942, 0, 2092,
	0, 0, 2062, 0, 0, 960, 2074, 2075, 2076, 0,
	960, 4134, 0, 0, 0, 0, 0, 0, 2617, 0,
	0, 2618, 0, 0, 961, 2623, 0, 2615, 0, 0,
	0, 0, 2620, 2624, 2619, 0, 2621, 0, 0, 0,
	2622, 2085, 2086, 2616, 0, 0, 2081, 0, 0, 0,
	2625, 2092, 0, 0, 2062, 2071, 2072, 2073, 2074, 2075,
	2076, 0, 960, 4119, 2065, 2066, 2067, 2068, 2069, 2070,
	2617, 0, 0, 2618, 0, 0, 1941, 2623, 0, 2615,
	0, 0, 0, 0, 2620, 2624, 2619, 0, 2621, 0,
	0, 0, 2622, 2085, 2086, 2616, 0, 0, 0, 0,
	0, 0, 2625, 0, 961, 0, 0, 0, 961, 0,
	0, 0, 0, 2092, 0, 0, 2062, 0, 1057, 0,
	2074, 2075, 2076, 0, 0, 0, 0, 0, 1057, 0,
	0, 0, 2617, 0, 0, 2618, 0, 961, 0, 2623,
	0, 2615, 0, 0, 0, 0, 2620, 2624, 2619, 961,
	2621, 0, 6005, 0, 2622, 2085, 2086, 2616, 0, 0,
	0, 0, 0, 0, 2625, 0, 4124, 0, 0, 2081,
	0, 0, 3336, 0, 0, 0, 0, 0, 2071, 2072,
	2073, 6025, 6026, 0, 0, 4665, 0, 2065, 2066, 2067,
	2068, 2069, 2070, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1057, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 961, 0, 0, 0, 0, 0, 1932, 0,
	0, 0, 0, 0, 0, 1057, 0, 0, 3318, 3320,
	0, 0, 0, 0, 0, 3326, 0, 3337, 3340, 0,
	3351, 3352, 3357, 3360, 0, 0, 0, 0, 0, 3368,
	0, 0, 0, 3372, 3378, 3320, 3320, 3385, 3320, 0,
	3320, 3320, 3320, 0, 0, 0, 0, 0, 0, 0,
	0, 3400, 0, 0, 0, 3251, 3252, 3253, 3259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	6131, 0, 1057, 0, 0, 2081, 0, 0, 0, 0,
	0, 0, 0, 6141, 2071, 2072, 2073, 0, 0, 0,
	1332, 4347, 0, 2065, 2066, 2067, 2068, 2069, 2070, 0,
	0, 0, 3585, 0, 0, 0, 0, 6157, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1941, 0, 0,
	2081, 0, 0, 0, 0, 1942, 0, 0, 0, 2071,
	2072, 2073, 0, 0, 0, 0, 4152, 0, 2065, 2066,
	2067, 2068, 2069, 2070, 960, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1057,
	0, 1057, 2092, 0, 0, 2062, 3561, 0, 0, 2074,
	2075, 2076, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2617, 0, 0, 2618, 0, 0, 0, 2623, 0,
	2615, 0, 0, 0, 0, 2620, 2624, 2619, 1057, 2621,
	0, 1057, 0, 2622, 2085, 2086, 2616, 1057, 1004, 0,
	0, 0, 0, 2625, 0, 0, 0, 0, 0, 0,
	0, 0, 6221, 0, 960, 1140, 0, 0, 960, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1134,
	0, 0, 0, 0, 0, 0, 0, 960, 0, 0,
	0, 0, 0, 961, 2081, 0, 0, 0, 0, 960,
	0, 0, 0, 2071, 2072, 2073, 0, 1004, 0, 1134,
	0, 0, 2065, 2066, 2067, 2068, 2069, 2070, 0, 0,
	1134, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 961, 961, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2081, 3726, 0, 0,
	0, 0, 0, 0, 0, 2071, 2072, 2073, 0, 0,
	0, 0, 0, 0, 2065, 2066, 2067, 2068, 2069, 2070,
	0, 0, 3817, 0, 0, 3821, 0, 0, 0, 0,
	0, 0, 960, 1057, 0, 1057, 0, 0, 0, 0,
	0, 0, 1058, 1058, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2081, 0,
	0, 0, 0, 0, 0, 0, 0, 2071, 2072, 2073,
	0, 0, 0, 0, 0, 0, 2065, 2066, 2067, 2068,
	2069, 2070, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 6345, 0, 0, 2092, 0, 0, 2062, 961,
	0, 0, 2074, 2075, 2076, 0, 0, 4085, 0, 0,
	1140, 0, 0, 0, 2617, 0, 0, 2618, 0, 0,
	0, 2623, 0, 2615, 0, 0, 0, 0, 2620, 2624,
	2619, 0, 2621, 1059, 0, 0, 2622, 2085, 2086, 2616,
	0, 0, 0, 0, 0, 2077, 2625, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1941, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1057, 1942, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3946,
	3946, 3946, 3946, 3946, 3946, 3946, 3946, 0, 961, 0,
	0, 3946, 3946, 4092, 0, 0, 0, 0, 0, 0,
	2092, 1059, 0, 2062, 0, 0, 0, 2074, 2075, 2076,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2617,
	0, 0, 2618, 0, 0, 0, 2623, 0, 2615, 0,
	0, 0, 0, 2620, 2624, 2619, 0, 2621, 0, 0,
	0, 2622, 2085, 2086, 2616, 0, 0, 0, 0, 0,
	0, 2625, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2077, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1942, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1932, 960, 0, 0, 0, 3982, 3983, 0,
	3985, 0, 0, 0, 2045, 1059, 1942, 0, 0, 0,
	0, 0, 2547, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1942, 2056, 0, 0, 0, 0, 961,
	0, 0, 960, 960, 0, 0, 0, 2081, 0, 0,
	0, 0, 0, 0, 0, 0, 2071, 2072, 2073, 0,
	0, 0, 0, 0, 0, 2065, 2066, 2067, 2068, 2069,
	2070, 0, 4015, 4016, 0, 0, 0, 0, 4022, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1059, 1059, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4051, 0, 0, 1934, 0, 0,
	0, 0, 0, 0, 200, 0, 0, 0, 4063, 0,
	0, 231, 0, 0, 0, 0, 0, 0, 0, 4080,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 227,
	0, 0, 0, 204, 0, 0, 0, 0, 0, 960,
	0, 0, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 3357, 3357, 3357, 0, 0, 4212, 0, 4212, 0,
	0, 0, 0, 0, 0, 0, 0, 4135, 0, 2092,
	0, 0, 2062, 0, 211, 0, 2074, 2075, 2076, 0,
	0, 0, 0, 0, 4245, 1140, 0, 0, 2617, 4157,
	0, 2618, 0, 0, 0, 2623, 0, 2615, 0, 0,
	0, 0, 2620, 2624, 2619, 0, 2621, 0, 0, 0,
	2622, 2085, 2086, 2616, 4171, 0, 1941, 0, 0, 4175,
	2625, 0, 0, 0, 0, 4299, 0, 0, 0, 0,
	0, 0, 4310, 0, 0, 1004, 1004, 0, 960, 0,
	0, 1140, 1140, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 961,
	0, 1397, 0, 0, 4337, 217, 0, 0, 0, 0,
	0, 0, 0, 213, 0, 0, 0, 0, 0, 0,
	2081, 0, 1004, 0, 0, 1059, 0, 961, 0, 2071,
	2072, 2073, 0, 0, 0, 1059, 207, 0, 2065, 2066,
	2067, 2068, 2069, 2070, 0, 0, 0, 0, 2092, 0,
	0, 2062, 0, 0, 0, 2074, 2075, 2076, 202, 0,
	0, 0, 0, 0, 0, 0, 1941, 2617, 0, 0,
	2618, 0, 203, 0, 2623, 0, 2615, 0, 0, 214,
	0, 2620, 2624, 2619, 0, 2621, 0, 208, 961, 2622,
	2085, 2086, 2616, 0, 0, 209, 1941, 0, 0, 2625,
	228, 0, 0, 0, 0, 4431, 0, 0, 0, 0,
	0, 4357, 0, 1941, 0, 0, 0, 0, 0, 960,
	0, 0, 1059, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4079, 2081, 0, 0, 0, 0,
	0, 0, 0, 4391, 2071, 2072, 2073, 0, 0, 0,
	0, 0, 2854, 2065, 2066, 2067, 2068, 2069, 2070, 0,
	0, 0, 2092, 0, 1058, 2062, 0, 0, 0, 2074,
	2075, 2076, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2617, 0, 0, 2618, 0, 216, 0, 2623, 0,
	2615, 0, 0, 0, 0, 2620, 2624, 2619, 219, 2621,
	1057, 0, 0, 2622, 2085, 2086, 2616, 0, 0, 1057,
	0, 2077, 0, 2625, 0, 0, 0, 223, 0, 1059,
	0, 0, 0, 0, 0, 201, 0, 0, 0, 0,
	0, 0, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 1058, 0, 0, 1942, 0, 0, 0, 218,
	0, 0, 0, 0, 220, 0, 0, 0, 0, 0,
	215, 0, 226, 0, 225, 206, 0, 0, 4474, 0,
	0, 0, 4527, 1072, 1072, 205, 0, 0, 0, 0,
	1057, 0, 230, 0, 229, 0, 1140, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2077, 0, 1057, 0, 0, 1059, 0, 1059, 1942,
	0, 0, 0, 0, 0, 0, 0, 2077, 0, 0,
	0, 0, 0, 221, 2077, 0, 1004, 1004, 0, 0,
	0, 0, 0, 0, 0, 2077, 0, 1942, 0, 0,
	0, 0, 0, 0, 0, 1059, 1058, 0, 1059, 0,
	0, 0, 0, 0, 1059, 1396, 0, 0, 0, 960,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1057, 1057, 0, 0, 0, 0, 0, 960, 0, 1057,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2081, 0, 0, 3946, 0, 0,
	0, 0, 0, 2071, 2072, 2073, 1058, 1058, 0, 0,
	3295, 0, 2065, 2066, 2067, 2068, 2069, 2070, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 960, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1059, 0, 1059, 0, 0, 0, 0, 0, 1934, 1934,
	1934, 0, 0, 4668, 1932, 0, 0, 0, 1932, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1057, 0, 0, 0,
	0, 4634, 1057, 0, 0, 0, 0, 0, 0, 0,
	0, 4642, 4643, 2081, 0, 4646, 0, 0, 0, 4649,
	0, 0, 2071, 2072, 2073, 0, 0, 3191, 0, 0,
	4654, 2065, 2066, 2067, 2068, 2069, 2070, 0, 0, 0,
	0, 0, 0, 4660, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4670, 0, 0, 0, 0, 1941, 0, 4675, 0, 0,
	0, 3320, 3320, 0, 1057, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4686, 0, 1071, 1071, 0,
	4688, 0, 0, 0, 0, 0, 1058, 0, 0, 0,
	0, 0, 1059, 0, 0, 0, 1058, 0, 0, 0,
	0, 0, 0, 0, 4707, 4708, 4709, 0, 0, 0,
	0, 0, 0, 0, 4715, 0, 0, 2081, 0, 1941,
	0, 3368, 0, 0, 0, 0, 2071, 2072, 2073, 0,
	3318, 0, 0, 0, 3320, 2065, 2066, 2067, 2068, 2069,
	2070, 0, 4741, 4742, 4743, 0, 0, 1941, 0, 0,
	0, 1286, 0, 0, 0, 0, 0, 0, 1057, 1057,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1058, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3320, 0, 4786, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1058, 0, 0, 0, 0, 0, 0,
	0, 0, 1239, 0, 0, 0, 0, 284, 0, 0,
	4821, 0, 0, 0, 0, 0, 0, 0, 0, 4826,
	4827, 0, 0, 4880, 4881, 287, 4883, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2077, 2077, 2077,
	2077, 2077, 0, 4915, 0, 0, 2077, 1240, 0, 0,
	1058, 4299, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2077, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3347, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 0, 0, 0, 0, 1237,
	1057, 0, 0, 0, 0, 0, 0, 1058, 0, 1058,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 5028, 290, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1058, 1249, 0, 1058,
	0, 0, 0, 0, 0, 1058, 0, 0, 0, 0,
	0, 1236, 0, 0, 0, 1072, 0, 0, 294, 0,
	5060, 1057, 0, 0, 0, 0, 295, 0, 0, 0,
	0, 0, 0, 0, 288, 0, 1238, 0, 0, 1057,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1247, 0, 0,
	0, 0, 0, 0, 0, 5091, 0, 0, 0, 0,
	0, 0, 1245, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1057, 0, 0, 0, 0, 0,
	1057, 0, 0, 1072, 0, 3946, 0, 3946, 0, 0,
	0, 5113, 5113, 5113, 5113, 5113, 5113, 5113, 0, 5113,
	5113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 300, 0, 0, 0, 0,
	0, 0, 0, 0, 267, 1242, 0, 297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1058, 0, 1058, 0, 0, 1250, 0, 0, 1243,
	0, 5150, 301, 0, 298, 0, 0, 0, 0, 285,
	0, 0, 299, 0, 0, 0, 0, 0, 0, 0,
	1934, 0, 0, 0, 0, 0, 0, 0, 291, 0,
	0, 0, 0, 1251, 0, 0, 0, 1072, 0, 1252,
	1934, 0, 1934, 0, 292, 5127, 0, 0, 1244, 0,
	302, 0, 0, 0, 1235, 0, 1934, 0, 0, 0,
	0, 0, 5136, 5137, 0, 0, 0, 0, 5141, 5142,
	286, 0, 0, 0, 0, 5145, 5146, 0, 0, 0,
	0, 0, 5149, 0, 0, 0, 0, 0, 0, 5151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2056, 0, 1246, 0, 1233, 0, 0, 0, 0, 0,
	0, 0, 1057, 1057, 0, 1057, 0, 1072, 1072, 0,
	0, 0, 0, 0, 0, 0, 0, 2854, 0, 0,
	0, 0, 0, 1058, 0, 0, 2854, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5184, 0, 5187, 0,
	1331, 0, 0, 0, 0, 0, 5270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1057, 1057, 0,
	0, 0, 0, 0, 5206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 5299,
	0, 0, 0, 0, 0, 0, 0, 1059, 0, 1071,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1059, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1057,
	0, 0, 0, 0, 0, 0, 0, 1057, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	5293, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1071, 0, 0,
	0, 0, 0, 0, 0, 1057, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2854, 3704, 0,
	0, 0, 0, 0, 0, 0, 3707, 0, 0, 1399,
	0, 0, 0, 0, 0, 0, 0, 1072, 0, 5318,
	0, 0, 0, 0, 0, 0, 0, 1072, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5347, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1057, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1071, 0, 0, 0, 5405, 5406, 2077, 2077, 2077,
	2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
	2077, 2077, 2077, 0, 0, 0, 0, 0, 2077, 0,
	0, 0, 1056, 1056, 1072, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3347, 3347, 0, 0, 3946,
	3946, 0, 3946, 0, 3946, 0, 0, 0, 0, 0,
	0, 0, 0, 5396, 1072, 5113, 0, 0, 0, 0,
	0, 0, 0, 1059, 0, 0, 0, 0, 0, 1059,
	0, 1071, 1071, 0, 0, 0, 0, 2077, 0, 2077,
	0, 0, 0, 0, 0, 2077, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2077, 0, 1057, 2077,
	0, 0, 4107, 0, 3347, 3347, 3347, 1057, 0, 0,
	2077, 2077, 0, 0, 0, 0, 2077, 0, 0, 2077,
	0, 1072, 0, 0, 0, 0, 0, 2077, 0, 0,
	0, 2077, 1057, 0, 0, 0, 0, 2077, 0, 0,
	0, 1059, 0, 0, 2077, 0, 0, 0, 5436, 0,
	0, 0, 0, 0, 0, 0, 5438, 5439, 5440, 2077,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 5532, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 5447, 0, 0, 0, 5450, 5451, 5452, 0,
	0, 1074, 1074, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1072, 0,
	1072, 0, 0, 3320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	5492, 0, 275, 0, 0, 1059, 1059, 284, 0, 0,
	0, 283, 0, 0, 1934, 0, 5509, 1072, 0, 0,
	1072, 0, 0, 0, 0, 287, 1072, 4299, 0, 0,
	0, 0, 0, 1057, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 281, 1057, 1057, 0, 0, 1057, 0,
	0, 1071, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1071, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1057, 0, 0,
	2077, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1058, 0,
	0, 0, 0, 0, 0, 0, 0, 1058, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3946, 293, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1071, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1057, 0, 0, 0, 0, 289, 0, 0, 0, 0,
	0, 0, 1072, 0, 1072, 0, 290, 0, 1071, 0,
	0, 0, 0, 0, 0, 0, 0, 278, 1058, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 272, 0, 0, 0, 0, 0, 1059, 294, 0,
	0, 1058, 0, 0, 0, 0, 295, 0, 0, 0,
	0, 0, 0, 0, 288, 5693, 0, 0, 0, 0,
	0, 5762, 0, 0, 1140, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3368, 1071, 0, 273, 0, 0,
	0, 0, 0, 0, 0, 2077, 0, 5720, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1057, 0, 0, 0, 1059, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1058, 1058,
	0, 0, 0, 0, 0, 0, 3704, 1058, 0, 0,
	0, 5752, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1072, 300, 0, 0, 1398, 0,
	0, 0, 0, 0, 267, 0, 0, 297, 0, 0,
	0, 0, 1071, 0, 1071, 0, 0, 0, 0, 0,
	0, 3704, 0, 0, 0, 0, 282, 1059, 0, 0,
	0, 0, 301, 0, 298, 0, 0, 0, 0, 285,
	0, 0, 299, 0, 0, 0, 0, 0, 0, 0,
	0, 1071, 0, 0, 1071, 0, 0, 0, 291, 0,
	1071, 0, 0, 277, 0, 0, 0, 0, 0, 279,
	0, 0, 5824, 0, 292, 0, 0, 0, 276, 0,
	302, 0, 0, 0, 271, 0, 0, 1509, 1542, 0,
	0, 0, 1510, 0, 0, 0, 1518, 0, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 5857, 0, 0, 0, 0,
	0, 0, 0, 0, 1058, 0, 0, 0, 0, 0,
	1058, 0, 274, 0, 0, 0, 0, 5873, 0, 5944,
	5945, 5946, 5947, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1140, 1544, 0, 0, 3674, 0,
	0, 0, 0, 0, 0, 0, 2547, 0, 0, 0,
	0, 5898, 5898, 5898, 1056, 5901, 0, 1328, 0, 0,
	0, 0, 0, 0, 3320, 0, 0, 1517, 0, 0,
	0, 2077, 2077, 0, 2077, 0, 0, 0, 0, 0,
	0, 0, 1058, 0, 0, 0, 1071, 1057, 1071, 2854,
	3704, 0, 3704, 0, 0, 0, 0, 0, 1522, 0,
	0, 0, 0, 0, 2077, 2077, 0, 3347, 3347, 0,
	0, 2077, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4107, 4107, 1056, 0, 0, 0, 0, 0, 0, 0,
	2077, 1508, 0, 0, 1059, 1059, 0, 0, 0, 0,
	1073, 1073, 2077, 0, 0, 0, 0, 0, 1543, 0,
	0, 0, 0, 0, 0, 0, 0, 1057, 1512, 2077,
	0, 0, 0, 0, 0, 1057, 1058, 1058, 0, 0,
	0, 0, 0, 0, 3347, 3347, 3347, 3347, 3347, 3347,
	3347, 3347, 3347, 3347, 3347, 3347, 3347, 0, 3347, 0,
	4107, 4107, 4107, 1514, 0, 0, 0, 0, 6024, 1513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1074, 2077, 0, 1059, 0, 1071, 0,
	0, 0, 0, 0, 1059, 5693, 1056, 0, 0, 0,
	0, 0, 0, 5898, 0, 0, 2077, 0, 0, 0,
	1545, 0, 0, 0, 1515, 0, 0, 0, 0, 0,
	2077, 0, 0, 0, 2077, 0, 0, 0, 0, 0,
	0, 0, 1059, 0, 0, 0, 0, 0, 0, 0,
	1546, 0, 0, 1547, 0, 0, 0, 1548, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1541,
	0, 1074, 0, 0, 0, 1057, 0, 0, 0, 1549,
	1519, 6105, 0, 0, 0, 0, 1056, 1056, 0, 0,
	0, 0, 0, 0, 0, 6114, 0, 0, 0, 1053,
	1053, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3672, 0, 1521, 1520, 1552, 0, 0,
	0, 0, 0, 0, 1059, 0, 0, 1057, 0, 0,
	0, 0, 0, 1140, 1550, 0, 1934, 0, 0, 0,
	1934, 0, 0, 0, 0, 0, 0, 3347, 1058, 0,
	0, 1551, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 5693, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1074, 0, 0, 1057, 1057,
	0, 0, 0, 0, 0, 0, 0, 0, 1553, 0,
	0, 0, 1511, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2077, 0, 0, 1058,
	0, 0, 1524, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1058, 0, 0,
	0, 0, 0, 0, 0, 1059, 0, 0, 0, 1072,
	2077, 0, 0, 0, 1059, 1074, 1074, 0, 1072, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1059,
	0, 0, 1058, 0, 0, 0, 0, 5898, 1058, 0,
	6298, 0, 0, 0, 0, 0, 1056, 0, 6239, 0,
	0, 0, 0, 0, 0, 2559, 1056, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1072,
	0, 0, 0, 2077, 0, 1057, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1072, 0, 6298, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1057, 0, 6298, 0, 0, 0, 5150, 0, 0, 0,
	0, 0, 0, 1056, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2854, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2854, 2854, 1056, 1932, 3704, 0, 0, 0, 1072,
	1072, 0, 0, 0, 0, 0, 1057, 0, 1072, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1059, 1074, 0, 0, 0, 0,
	1058, 1058, 0, 1058, 0, 1074, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1056, 0, 0, 2077, 0, 0, 0, 0, 0, 0,
	0, 2077, 2077, 0, 0, 2077, 4107, 4107, 2077, 0,
	0, 0, 0, 2077, 0, 0, 0, 0, 0, 2077,
	0, 0, 0, 0, 0, 1058, 1058, 1509, 1542, 2077,
	0, 0, 1510, 0, 2077, 0, 1518, 3704, 0, 0,
	0, 0, 0, 0, 0, 2077, 0, 2077, 0, 4107,
	4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107,
	4107, 4107, 1074, 0, 0, 4107, 2077, 2077, 2077, 0,
	0, 0, 0, 0, 2077, 0, 0, 1056, 0, 1056,
	0, 0, 0, 0, 0, 1072, 0, 0, 0, 0,
	0, 1072, 1074, 0, 0, 1544, 0, 0, 1539, 0,
	2077, 2077, 2077, 1071, 0, 0, 0, 1058, 0, 0,
	0, 0, 1071, 0, 0, 1058, 1056, 0, 0, 1056,
	0, 0, 1073, 0, 0, 1056, 0, 1517, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2077, 0, 0, 0, 0,
	0, 3704, 0, 1058, 0, 0, 0, 0, 1522, 1074,
	0, 0, 0, 1072, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2077, 0, 0, 1071, 0, 2077, 2077, 1057, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1073, 1508, 0, 0, 0, 0, 1071, 0, 0, 0,
	0, 0, 4107, 0, 0, 0, 0, 0, 1543, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1512, 0,
	0, 0, 0, 0, 0, 1058, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1074, 0, 1074, 0,
	0, 0, 0, 0, 0, 0, 0, 1072, 1072, 0,
	0, 0, 0, 1514, 0, 0, 0, 0, 0, 1513,
	0, 1056, 0, 1056, 0, 0, 0, 0, 1057, 0,
	1057, 1057, 0, 1071, 1071, 1074, 0, 0, 1074, 0,
	0, 0, 1071, 0, 1074, 0, 0, 0, 0, 0,
	0, 1053, 0, 0, 1073, 0, 0, 0, 0, 0,
	1545, 0, 0, 0, 1515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1546, 0, 0, 1547, 0, 0, 0, 1548, 0, 0,
	0, 0, 0, 0, 0, 0, 1058, 1057, 0, 1541,
	0, 0, 0, 0, 0, 1058, 0, 0, 0, 1549,
	1519, 0, 0, 0, 0, 0, 0, 0, 0, 1053,
	0, 0, 0, 0, 1073, 1073, 0, 0, 0, 0,
	1058, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1537, 1059, 1521, 1520, 1552, 0, 0,
	0, 0, 0, 1056, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1550, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1071,
	1074, 1551, 1074, 0, 0, 1071, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1072,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1553, 5268,
	0, 0, 1511, 1053, 1059, 0, 2077, 0, 0, 0,
	0, 0, 2854, 0, 0, 2077, 2077, 0, 0, 0,
	2077, 2077, 0, 0, 2077, 2077, 0, 0, 2077, 0,
	2077, 0, 1524, 0, 0, 0, 0, 1071, 0, 0,
	0, 1058, 0, 0, 3347, 0, 0, 0, 0, 0,
	1072, 0, 1058, 1058, 0, 0, 1058, 0, 0, 0,
	0, 0, 0, 2077, 0, 0, 2077, 0, 1072, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1053, 1053, 2077, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1058, 0, 0, 0, 0,
	0, 0, 1074, 0, 0, 0, 3347, 0, 0, 0,
	0, 0, 0, 1072, 1073, 0, 0, 0, 0, 1072,
	0, 0, 0, 0, 1073, 0, 0, 0, 0, 0,
	0, 1071, 1071, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1059, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1058, 0,
	0, 0, 2077, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1059, 0, 0, 2077, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1073, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2077, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1073, 0, 0, 0, 1059, 1059, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2077, 0, 0, 0, 0,
	0, 0, 1058, 0, 0, 0, 0, 868, 0, 0,
	0, 0, 0, 1053, 0, 0, 0, 0, 0, 0,
	0, 1072, 1072, 1053, 1072, 0, 0, 0, 1073, 0,
	0, 0, 0, 0, 0, 2077, 0, 2077, 2077, 2077,
	0, 0, 0, 0, 0, 0, 2077, 4107, 3347, 2077,
	2077, 2077, 0, 1071, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1072, 1072, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2077, 0, 0, 0, 0, 1057, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4107, 3347, 2077, 0,
	1053, 0, 0, 0, 0, 1073, 0, 1073, 0, 0,
	0, 0, 1059, 0, 1071, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1053, 0, 1071, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1073, 0, 0, 1073, 1072, 0,
	0, 0, 0, 1073, 0, 0, 1072, 3704, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1071, 0, 0,
	0, 0, 0, 1071, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 900, 1072, 0, 0, 1053, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3704, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 984, 987, 989, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1058, 0, 0, 1056, 0,
	0, 0, 0, 0, 0, 0, 0, 1056, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1072, 0, 0, 0,
	0, 0, 2077, 0, 1053, 0, 1053, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4107, 0, 1073,
	0, 1073, 0, 0, 0, 0, 0, 0, 0, 2077,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1053, 0, 1058, 1053, 0, 1056, 0,
	0, 0, 1053, 1058, 3347, 0, 0, 4107, 0, 0,
	0, 2077, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1056, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1071, 1071, 0, 1071, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1072, 0, 0,
	0, 0, 0, 0, 0, 0, 1072, 0, 0, 0,
	0, 0, 0, 2077, 0, 0, 0, 1074, 0, 0,
	1071, 1071, 0, 0, 0, 0, 1074, 0, 1056, 1056,
	0, 1072, 0, 0, 0, 0, 0, 1056, 0, 0,
	0, 1073, 0, 0, 265, 0, 2077, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5268, 0, 0,
	0, 0, 2077, 1058, 1059, 0, 247, 0, 0, 0,
	0, 232, 0, 0, 0, 245, 0, 0, 1053, 0,
	1053, 0, 0, 0, 0, 0, 0, 2077, 0, 236,
	2077, 0, 0, 0, 0, 0, 0, 1074, 0, 0,
	0, 0, 1071, 0, 0, 0, 0, 259, 238, 0,
	1071, 0, 0, 0, 0, 1058, 0, 0, 0, 0,
	1074, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1071, 0,
	0, 0, 0, 0, 0, 1059, 0, 1059, 1059, 0,
	0, 0, 1072, 0, 0, 0, 1058, 1058, 0, 0,
	0, 0, 0, 1072, 1072, 0, 0, 1072, 0, 0,
	0, 0, 0, 0, 1056, 0, 0, 0, 0, 0,
	1056, 0, 0, 0, 0, 0, 0, 1074, 1074, 0,
	0, 0, 0, 239, 0, 0, 1074, 0, 0, 0,
	0, 0, 0, 2077, 0, 0, 1072, 0, 0, 0,
	1053, 0, 0, 0, 0, 0, 0, 0, 0, 240,
	1071, 0, 0, 0, 1059, 0, 0, 0, 0, 0,
	241, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 242, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1056, 0, 0, 243, 0, 3347, 3347, 0,
	0, 3347, 257, 0, 0, 0, 0, 0, 0, 0,
	264, 0, 0, 0, 0, 0, 0, 0, 237, 1072,
	244, 0, 0, 0, 2077, 0, 0, 0, 0, 0,
	0, 0, 0, 2077, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1058, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1071, 0, 1074, 0, 0, 1056, 1056, 1187, 1074,
	1071, 0, 0, 0, 0, 0, 0, 1193, 1058, 0,
	0, 4107, 4107, 0, 4107, 0, 0, 0, 0, 248,
	0, 0, 0, 0, 0, 1071, 0, 0, 267, 249,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1072, 0, 0, 0, 0, 0, 0,
	258, 0, 0, 251, 0, 0, 255, 0, 252, 0,
	0, 0, 0, 234, 1058, 0, 253, 0, 2077, 0,
	0, 1074, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 261, 0, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 260, 0, 0, 0, 0, 262, 0,
	0, 0, 0, 0, 256, 0, 0, 0, 263, 1404,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 235, 0, 0, 1422, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1430,
	1433, 0, 1435, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1071, 0, 0, 0,
	0, 0, 0, 0, 0, 1074, 1074, 1071, 1071, 0,
	0, 1071, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1476, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1056, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1071, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1559,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1056,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1071, 0, 0, 1073, 1056, 0, 0,
	0, 0, 0, 0, 0, 1073, 1072, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1058, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1056, 0, 0, 0, 0, 0, 1056, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1073, 1074, 0, 0,
	0, 0, 0, 1059, 0, 0, 1072, 0, 0, 0,
	0, 0, 0, 0, 1072, 0, 0, 0, 0, 1073,
	0, 0, 0, 0, 1846, 0, 0, 1071, 0, 0,
	0, 0, 0, 0, 0, 1846, 1058, 0, 1058, 1058,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1934, 0, 1074, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1074, 0, 0, 0,
	0, 0, 0, 0, 0, 1053, 1073, 1073, 0, 0,
	0, 0, 0, 0, 1053, 1073, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1058, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1074, 0, 0, 0, 0, 0, 1074, 0, 0,
	0, 0, 0, 0, 1072, 0, 0, 0, 0, 0,
	1056, 1056, 0, 1056, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1053, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1072, 0, 1053, 0,
	0, 0, 0, 0, 0, 1056, 1056, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1072, 1072, 0,
	0, 0, 1073, 0, 0, 0, 0, 0, 1073, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2608, 0, 1053, 1053, 0, 0, 0,
	1071, 0, 0, 0, 1053, 0, 0, 1056, 0, 0,
	0, 0, 0, 0, 0, 1056, 0, 0, 0, 0,
	0, 0, 2658, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1074,
	1074, 0, 1074, 0, 0, 0, 0, 0, 0, 0,
	1073, 0, 0, 1056, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2727, 0, 0, 0, 0, 2732, 0, 0,
	1071, 0, 2744, 0, 0, 0, 0, 0, 1071, 0,
	0, 0, 0, 0, 1074, 1074, 0, 0, 0, 0,
	0, 0, 0, 2792, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2807, 0, 1072, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1056, 0, 0, 0, 0,
	0, 0, 2825, 0, 1073, 1073, 2829, 0, 0, 0,
	0, 1053, 0, 0, 0, 0, 0, 1053, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1072,
	0, 0, 0, 0, 0, 0, 1074, 0, 0, 0,
	0, 0, 0, 0, 1074, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1071, 0,
	0, 0, 1074, 0, 0, 1072, 0, 0, 2921, 1053,
	0, 0, 0, 0, 0, 0, 2744, 2744, 2744, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1056, 0, 0, 0,
	0, 0, 2955, 2956, 0, 1056, 0, 0, 0, 0,
	1071, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1056, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1074, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1071, 1071, 1053, 1053, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1058, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1073, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3069, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1073, 0, 1846,
	1846, 1056, 0, 0, 0, 1074, 0, 0, 0, 0,
	0, 0, 1056, 1056, 1074, 1073, 1056, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1187, 1187, 0, 1187, 0, 3127, 1074,
	0, 3129, 3130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1056, 1072, 0, 1071, 0,
	1073, 0, 0, 0, 0, 0, 1073, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1071, 0, 1053, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1056, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1072, 0, 1072,
	1072, 0, 0, 0, 0, 0, 0, 0, 0, 1071,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1074, 0, 0, 0, 0, 0, 1053, 0, 0, 0,
	0, 1074, 1074, 0, 0, 1074, 0, 0, 0, 0,
	0, 0, 0, 0, 1053, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1846, 0,
	0, 0, 0, 0, 1074, 0, 1072, 0, 3232, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1053,
	0, 0, 1056, 0, 0, 1053, 0, 0, 1073, 1073,
	0, 1073, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1074, 0, 0,
	0, 0, 0, 1073, 1073, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1073, 0, 0, 0, 0,
	0, 0, 0, 1073, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1071, 1074, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1053, 1053, 0,
	1053, 1073, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1053, 1053, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1056, 0, 0, 0, 0,
	0, 1071, 0, 1071, 1071, 0, 0, 0, 0, 0,
	0, 0, 0, 1073, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1053, 0, 0, 0, 0, 0,
	0, 0, 1053, 0, 0, 1056, 0, 0, 0, 0,
	1071, 0, 0, 1056, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1053, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1073, 0, 0, 0, 0, 0,
	0, 0, 0, 1073, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1074, 0, 0, 0, 1073, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1053, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1056, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1072, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1074, 0, 0, 0, 0, 0,
	0, 0, 1074, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1056, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1073,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1073, 1073, 0, 1053, 1073, 0, 1056, 1056, 0, 0,
	0, 0, 1053, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1053, 3500, 0,
	0, 0, 0, 1073, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1074, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1073, 0, 0, 0,
	0, 0, 3598, 3599, 1074, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3636, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1056, 3660, 0, 0, 0, 1053, 0,
	0, 0, 0, 0, 0, 1074, 1074, 0, 0, 1053,
	1053, 0, 0, 1053, 0, 0, 0, 0, 0, 0,
	0, 0, 3685, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1056, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1053, 0, 0, 0, 0, 0, 0, 0,
	1073, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1056, 0, 0, 0, 0, 1071,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1053, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1074, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1074, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1053,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1074, 0, 0, 0, 0, 0, 0,
	0, 0, 3910, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1187, 0, 0, 1073, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1056, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1073, 0, 0, 0, 0, 0, 0,
	0, 1073, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4012,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1056, 0, 1056, 1056,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1053, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1074, 1056, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1073, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1053, 0, 0, 0, 0, 0, 0, 0,
	1053, 0, 0, 1073, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1074, 0, 1074, 1074, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1073, 1073, 0, 0, 0, 0,
	4218, 0, 4221, 0, 0, 4226, 0, 0, 0, 0,
	0, 4233, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1074, 0, 0, 0, 0, 4274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1053, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4326, 4327, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1053, 0, 0, 2744, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1073, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1053, 1053, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1073, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1073, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4499, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1053, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1056, 1053, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1053, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1846, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1073, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1074, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 4635, 4636, 0, 0, 0, 0, 4641,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1073, 0, 1073, 1073, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1073, 0, 0, 0, 0, 0, 0,
	0, 0, 1053, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1053, 0, 1053, 1053, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 4828, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 4843, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4854, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1053, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2727, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1073, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 5132, 5133, 5134, 5135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1053, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 5275,
	0, 0, 0, 0, 0, 0, 5278, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 958, 0, 1712, 811,
	0, 0, 0, 0, 797, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 333, 0, 350, 831, 0, 399,
	436, 651, 0, 0, 496, 0, 549, 553, 0, 642,
	0, 0, 5769, 0, 407, 1807, 836, 0, 842, 0,
	848, 1806, 618, 0, 838, 839, 844, 338, 726, 641,
	712, 0, 0, 0, 503, 0, 0, 0, 0, 0,
	0, 0, 346, 0, 0, 0, 1808, 840, 837, 841,
	847, 835, 845, 832, 843, 0, 540, 474, 691, 567,
	345, 391, 378, 420, 462, 574, 0, 0, 452, 622,
	387, 476, 0, 366, 509, 0, 598, 473, 0, 581,
	601, 0, 493, 372, 532, 588, 589, 829, 834, 0,
	850, 0, 376, 377, 498, 358, 506, 703, 669, 561,
	519, 517, 0, 484, 541, 698, 0, 0, 406, 0,
	401, 497, 637, 364, 616, 535, 502, 456, 564, 593,
	403, 388, 389, 432, 534, 422, 374, 627, 666, 670,
	668, 664, 661, 665, 662, 663, 667, 423, 660, 0,
	635, 644, 678, 658, 686, 643, 683, 653, 398, 682,
	647, 646, 692, 673, 674, 628, 688, 659, 657, 650,
	649, 645, 0, 323, 324, 325, 326, 327, 328, 329,
	330, 331, 332, 334, 336, 0, 335, 337, 339, 340,
	341, 828, 342, 343, 344, 347, 348, 349, 351, 711,
	352, 353, 354, 355, 356, 357, 648, 830, 359, 360,
	361, 362, 363, 365, 367, 368, 369, 370, 371, 373,
	375, 0, 0, 0, 833, 0, 0, 0, 379, 380,
	381, 382, 383, 384, 0, 385, 386, 390, 392, 393,
	394, 395, 396, 397, 400, 0, 402, 404, 0, 405,
	408, 0, 409, 410, 411, 412, 413, 414, 415, 416,
	652, 417, 0, 418, 419, 421, 0, 424, 425, 426,
	427, 428, 0, 429, 654, 655, 430, 431, 433, 434,
	435, 437, 438, 439, 440, 441, 442, 443, 444, 445,
	446, 447, 448, 0, 449, 450, 451, 453, 1846, 454,
	455, 458, 459, 460, 461, 0, 463, 671, 0, 464,
	465, 466, 0, 5558, 467, 468, 469, 470, 471, 472,
	475, 672, 477, 478, 479, 480, 481, 482, 483, 713,
	485, 486, 487, 488, 489, 490, 491, 675, 676, 492,
	494, 495, 677, 679, 680, 846, 510, 511, 512, 513,
	514, 515, 516, 518, 0, 520, 521, 522, 681, 523,
	524, 525, 526, 5611, 527, 528, 529, 530, 531, 533,
	536, 537, 538, 539, 0, 542, 543, 544, 545, 546,
	547, 548, 550, 551, 552, 554, 555, 556, 714, 557,
	558, 559, 560, 684, 562, 563, 715, 565, 566, 568,
	569, 570, 571, 572, 573, 724, 0, 575, 685, 576,
	577, 578, 579, 580, 0, 582, 583, 584, 585, 586,
	587, 590, 591, 592, 594, 595, 687, 596, 597, 0,
	599, 600, 849, 602, 603, 604, 605, 606, 0, 725,
	607, 689, 608, 690, 609, 610, 611, 612, 613, 614,
	615, 617, 0, 0, 619, 620, 621, 623, 624, 625,
	626, 629, 630, 631, 632, 633, 0, 634, 636, 638,
	716, 693, 694, 695, 696, 697, 699, 700, 701, 702,
	639, 640, 656, 507, 501, 457, 499, 500, 504, 505,
	508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5770, 0, 0, 1713, 1714, 5768, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 5803, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5811, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1939, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5851, 1944, 333, 1950, 350, 831,
	1960, 399, 436, 651, 1947, 1992, 496, 1997, 549, 553,
	2021, 642, 1954, 1957, 1967, 1970, 407, 1975, 836, 1983,
	842, 1993, 848, 2012, 618, 2018, 838, 839, 844, 338,
	726, 641, 712, 2006, 1952, 2010, 503, 2003, 1979, 2019,
	1996, 2008, 1989, 1994, 346, 1981, 1982, 1986, 1995, 840,
	837, 841, 847, 835, 845, 832, 843, 2016, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 1951, 1969,
	452, 622, 387, 476, 2002, 366, 509, 2015, 598, 473,
	2009, 581, 601, 1971, 493, 372, 532, 588, 589, 829,
	834, 1959, 850, 1946, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 1977, 484, 541, 698, 1949, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 2017, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 1945, 335, 337,
	339, 340, 341, 828, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 830,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 1961, 1962, 1963, 833, 1964, 1965, 1966,
	379, 380, 381, 382, 383, 384, 1968, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 1972, 402, 404,
	1973, 405, 408, 1974, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 1976, 418, 419, 421, 1978, 424,
	425, 426, 427, 428, 1980, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 1984, 449, 450, 451, 453,
	1985, 454, 455, 458, 459, 460, 461, 1987, 463, 671,
	1988, 464, 465, 466, 1990, 1991, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 846, 510, 511,
	512, 513, 514, 515, 516, 518, 1999, 520, 521, 522,
	681, 523, 524, 525, 526, 2000, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 2001, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 2004, 575,
	685, 576, 577, 578, 579, 580, 2005, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 2007, 599, 600, 849, 602, 603, 604, 605, 606,
	2011, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 2013, 2014, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 2020, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 1998, 1948, 1953, 1955, 1956, 1958, 0,
	0, 0, 0, 0, 0, 0, 0, 2095, 0, 0,
	0, 0, 0, 0, 2092, 0, 0, 2062, 0, 0,
	1937, 2074, 2075, 2076, 2106, 2108, 2090, 2135, 2156, 0,
	2207, 2253, 2223, 2078, 2340, 2346, 2079, 2407, 2411, 0,
	2087, 2137, 2063, 2187, 2202, 2217, 2229, 2082, 2088, 2080,
	2344, 2083, 2488, 2499, 2519, 2084, 2085, 2086, 2064, 2480,
	2537, 2306, 2465, 2117, 0, 2093, 2431, 0, 0, 2354,
	2469, 0, 0, 2131, 0, 0, 0, 0, 2279, 2268,
	2302, 2415, 2240, 2360, 2168, 2327, 2505, 2397, 2316, 2511,
	2429, 2130, 2196, 2180, 2232, 2297, 2438, 2113, 2197, 2272,
	2503, 2192, 2318, 0, 2159, 2362, 2504, 2467, 2315, 2478,
	2448, 2473, 2203, 2341, 2166, 2388, 2455, 2456, 2126, 2239,
	2161, 2514, 2111, 2171, 2179, 2349, 2150, 2357, 2535, 2289,
	2422, 2372, 2370, 0, 2329, 2398, 2530, 0, 0, 2216,
	0, 2210, 2348, 2522, 2157, 2496, 2391, 2353, 2291, 2425,
	2460, 2212, 2193, 2194, 2250, 2390, 2235, 2169, 2510, 2286,
	2290, 2288, 2284, 2281, 2285, 2282, 2283, 2287, 2237, 2280,
	0, 0, 2127, 2347, 2275, 2445, 2125, 2394, 2233, 2206,
	0, 0, 0, 2512, 2326, 2328, 0, 2481, 2276, 2274,
	2185, 2184, 2128, 2513, 2097, 2098, 2099, 2100, 2101, 2102,
	2103, 2104, 2105, 2107, 2109, 2115, 2110, 2114, 2116, 2118,
	2119, 2120, 2121, 2122, 2123, 2124, 2132, 2133, 2134, 2136,
	2139, 2140, 2141, 2143, 2144, 2145, 2146, 2147, 2148, 2151,
	2152, 2153, 2154, 2155, 2158, 2160, 2162, 2163, 2164, 2165,
	2167, 2170, 2172, 2173, 2174, 2175, 2176, 2177, 2178, 2181,
	2182, 0, 2183, 2186, 2188, 2189, 2190, 2191, 2195, 2198,
	2199, 2200, 2201, 2204, 2205, 2208, 2209, 2211, 2213, 2214,
	2215, 2218, 0, 2219, 2220, 2221, 2222, 2224, 2225, 2226,
	2227, 2228, 2230, 0, 0, 2231, 2234, 2236, 2238, 2241,
	2242, 2243, 2244, 0, 2245, 2246, 2247, 2248, 2249, 2251,
	0, 2252, 2254, 2255, 2256, 2257, 2258, 2259, 2260, 2261,
	2262, 2263, 2264, 2265, 2266, 2267, 2270, 2271, 2273, 0,
	2277, 2278, 2293, 2294, 2295, 2296, 2298, 2300, 2301, 2299,
	2303, 2304, 2305, 2307, 2308, 2309, 2310, 2311, 2312, 2313,
	2314, 2317, 2319, 2320, 0, 2321, 2322, 0, 2323, 2324,
	2325, 2330, 2331, 2332, 2333, 2334, 2335, 2336, 2337, 2338,
	2339, 2342, 2343, 2345, 2359, 2361, 0, 2363, 2364, 2365,
	2366, 2367, 2368, 2369, 2371, 2373, 2374, 2375, 2376, 2377,
	2378, 2379, 2380, 2381, 2382, 2383, 2384, 2385, 2386, 2387,
	2389, 2392, 2393, 2395, 2396, 2399, 2400, 2401, 2402, 2403,
	2404, 2405, 2406, 2408, 2409, 2410, 2412, 2413, 2414, 2416,
	2417, 2418, 2419, 2420, 2421, 2423, 2424, 2426, 2427, 2428,
	0, 2430, 2432, 2433, 2434, 2435, 2436, 2437, 2440, 2439,
	2441, 2442, 2443, 2444, 2446, 2447, 2449, 2450, 2451, 2452,
	2453, 2454, 2457, 2458, 2459, 2461, 2462, 2463, 2464, 2466,
	2468, 2470, 2472, 2471, 2474, 2475, 2476, 2477, 2479, 2482,
	2483, 2484, 2485, 2486, 2487, 2489, 2490, 2491, 2492, 2493,
	2494, 2495, 2497, 0, 2498, 2500, 2501, 2502, 2506, 2507,
	2508, 2509, 2515, 2516, 2517, 2518, 2520, 0, 0, 2521,
	2523, 2524, 2525, 2526, 2527, 2528, 2529, 2531, 2532, 2533,
	2534, 0, 2536, 2269, 2358, 2352, 2292, 2350, 2351, 2355,
	2356, 0, 0, 2112, 2129, 2138, 2142, 2149, 0, 2081,
	0, 0, 0, 0, 0, 0, 0, 0, 2071, 2072,
	2073, 0, 0, 0, 0, 0, 0, 2065, 2066, 2067,
	2068, 2069, 2070, 1939, 0, 6297, 811, 0, 0, 0,
	0, 797, 0, 0, 0, 0, 0, 0, 0, 0,
	1944, 333, 1950, 350, 831, 1960, 399, 436, 651, 1947,
	1992, 496, 1997, 549, 553, 2021, 642, 1954, 1957, 1967,
	1970, 407, 1975, 836, 1983, 842, 1993, 848, 2012, 618,
	2018, 838, 839, 844, 338, 726, 641, 712, 2006, 1952,
	2010, 503, 2003, 1979, 2019, 1996, 2008, 1989, 1994, 346,
	1981, 1982, 1986, 1995, 840, 837, 841, 847, 835, 845,
	832, 843, 2016, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 1951, 1969, 452, 622, 387, 476, 2002,
	366, 509, 2015, 598, 473, 2009, 581, 601, 1971, 493,
	372, 532, 588, 589, 829, 834, 1959, 850, 1946, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 1977,
	484, 541, 698, 1949, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 2017,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 1945, 335, 337, 339, 340, 341, 828, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 830, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 1961, 1962,
	1963, 833, 1964, 1965, 1966, 379, 380, 381, 382, 383,
	384, 1968, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 1972, 402, 404, 1973, 405, 408, 1974, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 1976,
	418, 419, 421, 1978, 424, 425, 426, 427, 428, 1980,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	1984, 449, 450, 451, 453, 1985, 454, 455, 458, 459,
	460, 461, 1987, 463, 671, 1988, 464, 465, 466, 1990,
	1991, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 846, 510, 511, 512, 513, 514, 515, 516,
	518, 1999, 520, 521, 522, 681, 523, 524, 525, 526,
	2000, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 2001, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 2004, 575, 685, 576, 577, 578, 579,
	580, 2005, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 2007, 599, 600, 849,
	602, 603, 604, 605, 606, 2011, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 2013,
	2014, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 2020, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 1998, 1948,
	1953, 1955, 1956, 1958, 1939, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1944, 333, 1950, 350, 831, 1960, 399, 436, 651,
	1947, 1992, 496, 1997, 549, 553, 2021, 642, 1954, 1957,
	1967, 1970, 407, 1975, 836, 1983, 842, 1993, 848, 2012,
	618, 2018, 838, 839, 844, 338, 726, 641, 712, 2006,
	1952, 2010, 503, 2003, 1979, 2019, 1996, 2008, 1989, 1994,
	346, 1981, 1982, 1986, 1995, 840, 837, 841, 847, 835,
	845, 832, 843, 2016, 540, 474, 691, 567, 345, 391,
	378, 420, 462, 574, 1951, 1969, 452, 622, 387, 476,
	2002, 366, 509, 2015, 598, 473, 2009, 581, 601, 1971,
	493, 372, 532, 588, 589, 829, 834, 1959, 850, 1946,
	376, 377, 498, 358, 506, 703, 669, 561, 519, 517,
	1977, 484, 541, 698, 1949, 0, 406, 0, 401, 497,
	637, 364, 616, 535, 502, 456, 564, 593, 403, 388,
	389, 432, 534, 422, 374, 627, 666, 670, 668, 664,
	661, 665, 662, 663, 667, 423, 660, 0, 635, 644,
	678, 658, 686, 643, 683, 653, 398, 682, 647, 646,
	692, 673, 674, 628, 688, 659, 657, 650, 649, 645,
	2017, 323, 324, 325, 326, 327, 328, 329, 330, 331,
	332, 334, 336, 1945, 335, 337, 339, 340, 341, 828,
	342, 343, 344, 347, 348, 349, 351, 711, 352, 353,
	354, 355, 356, 357, 648, 830, 359, 360, 361, 362,
	363, 365, 367, 368, 369, 370, 371, 373, 375, 1961,
	1962, 1963, 833, 1964, 1965, 1966, 379, 380, 381, 382,
	383, 384, 1968, 385, 386, 390, 392, 393, 394, 395,
	396, 397, 400, 1972, 402, 404, 1973, 405, 408, 1974,
	409, 410, 411, 412, 413, 414, 415, 416, 652, 417,
	1976, 418, 419, 421, 1978, 424, 425, 426, 427, 428,
	1980, 429, 654, 655, 430, 431, 433, 434, 435, 437,
	438, 439, 440, 441, 442, 443, 444, 445, 446, 447,
	448, 1984, 449, 450, 451, 453, 1985, 454, 455, 458,
	459, 460, 461, 1987, 463, 671, 1988, 464, 465, 466,
	1990, 1991, 467, 468, 469, 470, 471, 472, 475, 672,
	477, 478, 479, 480, 481, 482, 483, 713, 485, 486,
	487, 488, 489, 490, 491, 675, 676, 492, 494, 495,
	677, 679, 680, 846, 510, 511, 512, 513, 514, 515,
	516, 518, 1999, 520, 521, 522, 681, 523, 524, 525,
	526, 2000, 527, 528, 529, 530, 531, 533, 536, 537,
	538, 539, 2001, 542, 543, 544, 545, 546, 547, 548,
	550, 551, 552, 554, 555, 556, 714, 557, 558, 559,
	560, 684, 562, 563, 715, 565, 566, 568, 569, 570,
	571, 572, 573, 724, 2004, 575, 685, 576, 577, 578,
	579, 580, 2005, 582, 583, 584, 585, 586, 587, 590,
	591, 592, 594, 595, 687, 596, 597, 2007, 599, 600,
	849, 602, 603, 604, 605, 606, 2011, 725, 607, 689,
	608, 690, 609, 610, 611, 612, 613, 614, 615, 617,
	2013, 2014, 619, 620, 621, 623, 624, 625, 626, 629,
	630, 631, 632, 633, 2020, 634, 636, 638, 716, 693,
	694, 695, 696, 697, 699, 700, 701, 702, 639, 640,
	656, 507, 501, 457, 499, 500, 504, 505, 508, 1998,
	1948, 1953, 1955, 1956, 1958, 1079, 0, 1712, 811, 0,
	0, 0, 927, 797, 0, 0, 0, 0, 0, 938,
	939, 940, 1944, 333, 1950, 350, 831, 1960, 399, 436,
	0, 1947, 1992, 496, 1997, 549, 553, 2021, 0, 1954,
	1957, 1967, 1970, 407, 1975, 836, 1983, 842, 1993, 848,
	2012, 618, 2018, 838, 839, 844, 338, 1076, 641, 712,
	2006, 1952, 2010, 4301, 2003, 1979, 2019, 1996, 2008, 1989,
	1994, 346, 1981, 1982, 1986, 1995, 840, 837, 841, 847,
	835, 845, 832, 843, 2016, 540, 474, 0, 567, 345,
	391, 378, 420, 462, 574, 1951, 1969, 452, 622, 387,
	476, 2002, 366, 509, 2015, 598, 473, 2009, 581, 601,
	1971, 493, 372, 532, 588, 589, 829, 834, 1959, 850,
	1946, 376, 377, 498, 358, 506, 0, 0, 561, 519,
	517, 1977, 484, 541, 0, 1949, 0, 406, 0, 401,
	497, 637, 364, 616, 535, 502, 456, 564, 593, 403,
	388, 389, 432, 534, 422, 374, 627, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 423, 1078, 0, 635,
	1081, 1069, 1061, 1062, 1063, 1064, 1065, 1066, 0, 1083,
	1084, 1085, 1086, 1087, 628, 1075, 1077, 1060, 1067, 1068,
	1070, 2017, 323, 324, 325, 326, 327, 328, 329, 330,
	331, 332, 334, 336, 1945, 335, 337, 339, 340, 341,
	828, 342, 343, 344, 347, 348, 349, 351, 711, 352,
	353, 354, 355, 356, 357, 0, 830, 359, 360, 361,
	362, 363, 365, 367, 368, 369, 370, 371, 373, 375,
	1961, 1962, 1963, 833, 1964, 1965, 1966, 379, 380, 381,
	382, 383, 384, 1968, 385, 386, 390, 392, 393, 394,
	395, 396, 397, 400, 1972, 402, 404, 1973, 405, 408,
	1974, 409, 410, 411, 412, 413, 414, 415, 416, 0,
	417, 1976, 418, 419, 421, 1978, 424, 425, 426, 427,
	428, 1980, 429, 0, 0, 430, 431, 433, 434, 435,
	437, 438, 439, 440, 441, 442, 443, 444, 445, 446,
	447, 448, 1984, 449, 450, 451, 453, 1985, 454, 455,
	458, 459, 460, 461, 1987, 463, 0, 1988, 464, 465,
	466, 1990, 1991, 467, 468, 469, 470, 471, 472, 475,
	0, 477, 478, 479, 480, 481, 482, 483, 713, 485,
	486, 487, 488, 489, 490, 491, 4300, 0, 492, 494,
	495, 0, 0, 0, 846, 510, 511, 512, 513, 514,
	515, 516, 518, 1999, 520, 521, 522, 0, 523, 524,
	525, 526, 2000, 527, 528, 529, 530, 531, 533, 536,
	537, 538, 539, 2001, 542, 543, 544, 545, 546, 547,
	548, 550, 551, 552, 554, 555, 556, 714, 557, 558,
	559, 560, 0, 562, 563, 715, 565, 566, 568, 569,
	570, 571, 572, 573, 724, 2004, 575, 2856, 576, 577,
	578, 579, 580, 2005, 582, 583, 584, 585, 586, 587,
	590, 591, 592, 594, 595, 0, 596, 597, 2007, 599,
	600, 849, 602, 603, 604, 605, 606, 2011, 725, 607,
	0, 608, 0, 609, 610, 611, 612, 613, 614, 615,
	617, 2013, 2014, 619, 620, 621, 623, 624, 625, 626,
	629, 630, 631, 632, 633, 2020, 634, 636, 638, 716,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 639,
	640, 0, 507, 501, 457, 499, 500, 504, 505, 508,
	1998, 1948, 1953, 1955, 1956, 1958, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 935, 936, 937, 0,
	0, 0, 0, 0, 0, 4302, 4303, 931, 932, 933,
	934, 1079, 0, 1712, 811, 0, 0, 0, 927, 797,
	0, 0, 0, 0, 0, 938, 939, 940, 1944, 333,
	1950, 350, 831, 1960, 399, 436, 0, 1947, 1992, 496,
	1997, 549, 553, 2021, 0, 1954, 1957, 1967, 1970, 407,
	1975, 836, 1983, 842, 1993, 848, 2012, 618, 2018, 838,
	839, 844, 338, 1076, 641, 712, 2006, 1952, 2010, 4301,
	2003, 1979, 2019, 1996, 2008, 1989, 1994, 346, 1981, 1982,
	1986, 1995, 840, 837, 841, 847, 835, 845, 832, 843,
	2016, 540, 474, 0, 567, 345, 391, 378, 420, 462,
	574, 1951, 1969, 452, 622, 387, 476, 2002, 366, 509,
	2015, 598, 473, 2009, 581, 601, 1971, 493, 372, 532,
	588, 589, 829, 834, 1959, 850, 1946, 376, 377, 498,
	358, 506, 0, 0, 561, 519, 517, 1977, 484, 541,
	0, 1949, 0, 406, 0, 401, 497, 637, 364, 616,
	535, 502, 456, 564, 593, 403, 388, 389, 432, 534,
	422, 374, 627, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 423, 1078, 0, 635, 1081, 1069, 1061, 1062,
	1063, 1064, 1065, 1066, 0, 1083, 1084, 1085, 1086, 1087,
	628, 1075, 1077, 1060, 1067, 1068, 1070, 2017, 323, 324,
	325, 326, 327, 328, 329, 330, 331, 332, 334, 336,
	1945, 335, 337, 339, 340, 341, 828, 342, 343, 344,
	347, 348, 349, 351, 711, 352, 353, 354, 355, 356,
	357, 0, 830, 359, 360, 361, 362, 363, 365, 367,
	368, 369, 370, 371, 373, 375, 1961, 1962, 1963, 833,
	1964, 1965, 1966, 379, 380, 381, 382, 383, 384, 1968,
	385, 386, 390, 392, 393, 394, 395, 396, 397, 400,
	1972, 402, 404, 1973, 405, 408, 1974, 409, 410, 411,
	412, 413, 414, 415, 416, 0, 417, 1976, 418, 419,
	421, 1978, 424, 425, 426, 427, 428, 1980, 429, 0,
	0, 430, 431, 433, 434, 435, 437, 438, 439, 440,
	441, 442, 443, 444, 445, 446, 447, 448, 1984, 449,
	450, 451, 453, 1985, 454, 455, 458, 459, 460, 461,
	1987, 463, 0, 1988, 464, 465, 466, 1990, 1991, 467,
	468, 469, 470, 471, 472, 475, 0, 477, 478, 479,
	480, 481, 482, 483, 713, 485, 486, 487, 488, 489,
	490, 491, 5022, 0, 492, 494, 495, 0, 0, 0,
	846, 510, 511, 512, 513, 514, 515, 516, 518, 1999,
	520, 521, 522, 0, 523, 524, 525, 526, 2000, 527,
	528, 529, 530, 531, 533, 536, 537, 538, 539, 2001,
	542, 543, 544, 545, 546, 547, 548, 550, 551, 552,
	554, 555, 556, 714, 557, 558, 559, 560, 0, 562,
	563, 715, 565, 566, 568, 569, 570, 571, 572, 573,
	724, 2004, 575, 2856, 576, 577, 578, 579, 580, 2005,
	582, 583, 584, 585, 586, 587, 590, 591, 592, 594,
	595, 0, 596, 597, 2007, 599, 600, 849, 602, 603,
	604, 605, 606, 2011, 725, 607, 0, 608, 0, 609,
	610, 611, 612, 613, 614, 615, 617, 2013, 2014, 619,
	620, 621, 623, 624, 625, 626, 629, 630, 631, 632,
	633, 2020, 634, 636, 638, 716, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 639, 640, 0, 507, 501,
	457, 499, 500, 504, 505, 508, 1998, 1948, 1953, 1955,
	1956, 1958, 0, 0, 0, 0, 0, 0, 0, 0,
	1939, 0, 935, 936, 937, 0, 0, 0, 0, 0,
	0, 4302, 4303, 931, 932, 933, 934, 1944, 333, 1950,
	350, 831, 1960, 3650, 436, 651, 1947, 1992, 496, 1997,
	549, 553, 2021, 642, 1954, 1957, 1967, 1970, 407, 1975,
	836, 1983, 842, 1993, 848, 2012, 618, 2018, 838, 839,
	844, 338, 726, 641, 712, 2006, 1952, 2010, 503, 2003,
	1979, 2019, 1996, 2008, 1989, 1994, 346, 1981, 1982, 1986,
	1995, 840, 837, 841, 847, 835, 845, 832, 843, 2016,
	540, 474, 691, 567, 345, 391, 378, 420, 462, 3648,
	1951, 1969, 452, 622, 387, 476, 2002, 366, 509, 2015,
	598, 473, 2009, 581, 601, 1971, 493, 372, 532, 588,
	589, 829, 834, 1959, 850, 1946, 376, 377, 498, 358,
	506, 703, 669, 561, 519, 517, 1977, 484, 541, 698,
	1949, 0, 406, 0, 401, 497, 637, 364, 616, 535,
	502, 456, 564, 593, 403, 388, 389, 432, 534, 422,
	374, 627, 666, 670, 668, 664, 661, 665, 662, 663,
	667, 423, 660, 0, 635, 644, 678, 658, 686, 643,
	683, 653, 398, 682, 647, 646, 692, 673, 674, 628,
	688, 659, 657, 650, 649, 645, 2017, 323, 324, 325,
	326, 327, 3649, 329, 330, 331, 332, 334, 336, 1945,
	335, 337, 339, 340, 341, 828, 342, 343, 344, 347,
	348, 349, 351, 711, 352, 353, 354, 355, 356, 357,
	648, 830, 359, 360, 361, 362, 363, 365, 367, 368,
	369, 370, 371, 373, 375, 1961, 1962, 1963, 833, 1964,
	1965, 1966, 379, 380, 381, 382, 383, 384, 1968, 385,
	386, 390, 392, 393, 394, 395, 396, 397, 400, 1972,
	402, 404, 1973, 405, 408, 1974, 409, 410, 411, 412,
	413, 414, 415, 416, 652, 417, 1976, 418, 419, 421,
	1978, 424, 425, 426, 427, 428, 1980, 429, 654, 655,
	430, 431, 433, 434, 435, 437, 438, 439, 440, 441,
	442, 443, 444, 445, 446, 447, 448, 1984, 449, 450,
	451, 453, 1985, 454, 455, 458, 459, 460, 461, 1987,
	463, 671, 1988, 464, 465, 466, 1990, 1991, 467, 468,
	469, 470, 471, 472, 475, 672, 477, 478, 479, 480,
	481, 482, 483, 713, 485, 486, 487, 488, 489, 490,
	491, 675, 676, 492, 494, 495, 677, 679, 680, 846,
	510, 511, 512, 513, 514, 515, 516, 518, 1999, 520,
	521, 522, 681, 523, 524, 525, 526, 2000, 527, 528,
	529, 530, 531, 533, 536, 537, 538, 539, 2001, 542,
	543, 544, 545, 546, 547, 548, 550, 551, 552, 554,
	555, 556, 714, 557, 558, 559, 560, 684, 562, 563,
	715, 565, 566, 568, 569, 570, 571, 572, 573, 724,
	2004, 575, 685, 576, 577, 578, 579, 580, 2005, 582,
	583, 584, 585, 586, 587, 590, 591, 592, 594, 595,
	687, 596, 597, 2007, 599, 600, 849, 602, 603, 604,
	605, 606, 2011, 725, 607, 689, 608, 690, 609, 610,
	611, 612, 613, 614, 615, 617, 2013, 2014, 619, 620,
	621, 623, 624, 625, 626, 629, 630, 631, 632, 633,
	2020, 634, 636, 638, 716, 693, 694, 695, 696, 697,
	699, 700, 701, 702, 639, 640, 656, 507, 501, 457,
	499, 500, 504, 505, 508, 1998, 1948, 1953, 1955, 1956,
	1958, 825, 0, 1314, 811, 0, 1319, 1320, 1309, 797,
	1299, 0, 0, 0, 0, 0, 0, 0, 1929, 333,
	0, 350, 831, 0, 399, 436, 1304, 0, 1292, 496,
	0, 549, 553, 0, 642, 1324, 0, 1296, 1930, 407,
	1317, 836, 0, 842, 1318, 848, 1316, 618, 0, 838,
	839, 844, 338, 1393, 641, 712, 0, 0, 0, 1310,
	0, 0, 0, 0, 0, 0, 0, 346, 0, 0,
	0, 0, 840, 837, 841, 847, 835, 845, 832, 843,
	0, 540, 474, 691, 567, 345, 391, 378, 420, 462,
	574, 0, 0, 452, 622, 387, 476, 0, 366, 509,
	1346, 598, 473, 0, 581, 601, 0, 493, 372, 532,
	588, 589, 829, 834, 0, 850, 0, 376, 377, 498,
	358, 506, 703, 669, 561, 519, 517, 0, 484, 541,
	698, 1305, 0, 406, 0, 401, 497, 637, 364, 616,
	535, 502, 456, 564, 593, 403, 388, 389, 432, 534,
	422, 374, 627, 1374, 1376, 1372, 1368, 1369, 1334, 1335,
	1375, 1371, 423, 1370, 0, 635, 1379, 1390, 1387, 1392,
	1378, 1391, 1385, 1066, 682, 1382, 1381, 1395, 1388, 1389,
	628, 1394, 1333, 1386, 1384, 1383, 1380, 1928, 323, 324,
	325, 326, 327, 328, 329, 330, 331, 332, 334, 336,
	0, 335, 337, 339, 340, 341, 828, 342, 343, 344,
	347, 348, 349, 351, 711, 352, 353, 354, 355, 356,
	357, 1358, 1336, 359, 360, 361, 362, 363, 365, 367,
	368, 369, 370, 371, 373, 375, 1347, 1337, 1342, 1348,
	1338, 1339, 1343, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 390, 392, 393, 394, 395, 396, 397, 400,
	0, 402, 404, 0, 405, 408, 0, 409, 410, 411,
	412, 413, 414, 415, 416, 1350, 417, 0, 418, 419,
	421, 0, 424, 425, 426, 427, 428, 0, 429, 1359,
	1308, 430, 431, 433, 434, 435, 437, 438, 439, 440,
	441, 442, 443, 444, 445, 446, 447, 448, 0, 449,
	450, 451, 453, 0, 454, 455, 458, 459, 460, 461,
	0, 463, 1360, 0, 464, 465, 466, 1340, 1341, 467,
	468, 469, 470, 471, 472, 475, 1373, 477, 478, 479,
	480, 481, 482, 483, 713, 485, 486, 487, 488, 489,
	490, 491, 675, 1351, 492, 494, 495, 1357, 679, 1352,
	846, 510, 511, 512, 513, 514, 515, 516, 518, 0,
	520, 521, 522, 1353, 523, 524, 525, 526, 0, 527,
	528, 529, 530, 531, 533, 536, 537, 538, 539, 0,
	542, 543, 544, 545, 546, 547, 548, 550, 551, 552,
	554, 555, 556, 714, 557, 558, 559, 560, 1311, 562,
	563, 715, 565, 566, 568, 569, 570, 571, 572, 573,
	724, 1344, 575, 685, 576, 577, 578, 579, 580, 0,
	582, 583, 584, 585, 586, 587, 590, 591, 592, 594,
	595, 1354, 596, 597, 1345, 599, 600, 849, 602, 603,
	604, 605, 606, 0, 725, 607, 1355, 608, 1356, 609,
	610, 611, 612, 613, 614, 615, 617, 0, 1295, 619,
	620, 621, 623, 624, 625, 626, 629, 630, 631, 632,
	633, 0, 634, 636, 638, 716, 693, 1361, 1362, 1365,
	1363, 1364, 1366, 1367, 1377, 639, 640, 656, 507, 501,
	457, 499, 500, 504, 505, 508, 0, 0, 0, 1349,
	0, 0, 0, 1293, 0, 0, 825, 0, 1314, 811,
	0, 1319, 1320, 1309, 797, 1299, 0, 0, 1300, 1925,
	0, 1289, 1290, 1926, 333, 0, 350, 831, 0, 399,
	436, 1304, 0, 1292, 496, 0, 549, 553, 182, 642,
	1324, 0, 1296, 0, 407, 1317, 836, 0, 842, 1318,
	848, 1316, 618, 0, 838, 839, 844, 338, 1393, 641,
	712, 0, 0, 0, 1310, 179, 0, 0, 0, 180,
	0, 0, 346, 0, 0, 0, 0, 840, 837, 841,
	847, 835, 845, 832, 843, 0, 540, 474, 1176, 567,
	345, 391, 378, 420, 462, 574, 0, 0, 452, 622,
	387, 476, 0, 366, 509, 1346, 598, 473, 0, 581,
	601, 0, 493, 372, 532, 588, 589, 829, 834, 0,
	850, 0, 376, 377, 498, 358, 506, 703, 669, 561,
	519, 517, 0, 484, 541, 698, 1305, 0, 406, 0,
	401, 497, 637, 364, 616, 535, 502, 456, 564, 593,
	403, 388, 389, 432, 534, 422, 374, 627, 1374, 1376,
	1372, 1368, 1369, 1334, 1335, 1375, 1371, 423, 1370, 0,
	635, 1379, 1390, 1387, 1392, 1378, 1391, 1385, 1066, 682,
	1382, 1381, 1395, 1388, 1389, 628, 1394, 1333, 1386, 1384,
	1383, 1380, 0, 323, 324, 325, 326, 327, 328, 329,
	330, 331, 332, 334, 336, 0, 335, 337, 339, 340,
	341, 828, 342, 343, 344, 347, 348, 349, 351, 711,
	352, 353, 354, 355, 356, 357, 1358, 1336, 359, 360,
	361, 362, 363, 365, 367, 368, 369, 370, 371, 373,
	375, 1347, 1337, 1342, 1348, 1338, 1339, 1343, 379, 380,
	381, 382, 383, 384, 0, 385, 386, 390, 392, 393,
	394, 395, 396, 397, 400, 0, 402, 404, 0, 405,
	408, 0, 409, 410, 411, 412, 413, 414, 415, 416,
	1350, 417, 0, 418, 419, 421, 0, 424, 425, 426,
	427, 428, 0, 429, 1359, 1308, 430, 431, 433, 434,
	435, 437, 438, 439, 440, 441, 442, 443, 444, 445,
	446, 447, 448, 0, 449, 450, 451, 453, 0, 454,
	455, 458, 459, 460, 461, 0, 463, 1360, 0, 464,
	465, 466, 1340, 1341, 467, 468, 469, 470, 471, 472,
	475, 1373, 477, 478, 479, 480, 481, 482, 483, 713,
	485, 486, 487, 488, 489, 490, 491, 675, 1351, 492,
	494, 495, 1357, 679, 1352, 846, 510, 511, 512, 513,
	514, 515, 516, 518, 0, 520, 521, 522, 1353, 523,
	524, 525, 526, 0, 527, 528, 529, 530, 531, 533,
	536, 537, 538, 539, 0, 542, 543, 544, 545, 546,
	547, 548, 550, 551, 552, 554, 555, 556, 714, 557,
	558, 559, 560, 1311, 562, 563, 715, 565, 566, 568,
	569, 570, 571, 572, 573, 724, 1344, 575, 685, 576,
	577, 578, 579, 580, 0, 582, 583, 584, 585, 586,
	587, 590, 591, 592, 594, 595, 1354, 596, 597, 1345,
	599, 600, 849, 602, 603, 604, 605, 606, 0, 725,
	607, 1355, 608, 1356, 609, 610, 611, 612, 613, 614,
	615, 617, 0, 1295, 619, 620, 621, 623, 624, 625,
	626, 629, 630, 631, 632, 633, 0, 634, 636, 638,
	716, 693, 1361, 1362, 1365, 1363, 1364, 1366, 1367, 1377,
	639, 640, 656, 507, 501, 457, 499, 500, 504, 505,
	508, 0, 0, 0, 1349, 0, 0, 0, 1293, 0,
	183, 825, 0, 1314, 811, 0, 1319, 1320, 1309, 797,
	1299, 0, 0, 1300, 5888, 0, 1289, 1290, 0, 333,
	0, 350, 831, 0, 399, 436, 1304, 0, 1292, 496,
	0, 549, 553, 182, 642, 1324, 0, 1296, 0, 407,
	1317, 836, 0, 842, 1318, 848, 1316, 618, 0, 838,
	839, 844, 338, 1393, 641, 712, 0, 0, 0, 1310,
	179, 0, 0, 0, 180, 0, 0, 346, 0, 0,
	0, 0, 840, 837, 841, 847, 835, 845, 832, 843,
	0, 540, 474, 1176, 567, 345, 391, 378, 420, 462,
	574, 0, 0, 452, 622, 387, 476, 3377, 366, 509,
	1346, 598, 473, 0, 581, 601, 0, 493, 372, 532,
	588, 589, 829, 834, 0, 850, 0, 376, 377, 498,
	358, 506, 703, 669, 561, 519, 517, 0, 484, 541,
	698, 1305, 0, 406, 0, 401, 497, 637, 364, 616,
	535, 502, 456, 564, 593, 403, 388, 389, 432, 534,
	422, 374, 627, 1374, 1376, 1372, 1368, 1369, 1334, 1335,
	1375, 1371, 423, 1370, 0, 635, 1379, 1390, 1387, 1392,
	1378, 1391, 1385, 1066, 682, 1382, 1381, 1395, 1388, 1389,
	628, 1394, 1333, 1386, 1384, 1383, 1380, 0, 323, 324,
	325, 326, 327, 328, 329, 330, 331, 332, 334, 336,
	0, 335, 337, 339, 340, 341, 828, 342, 343, 344,
	347, 348, 349, 351, 711, 352, 353, 354, 355, 356,
	357, 1358, 1336, 359, 360, 361, 362, 363, 365, 367,
	368, 369, 370, 371, 373, 375, 1347, 1337, 1342, 1348,
	1338, 1339, 1343, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 390, 392, 393, 394, 395, 396, 397, 400,
	0, 402, 404, 0, 405, 408, 0, 409, 410, 411,
	412, 413, 414, 415, 416, 1350, 417, 0, 418, 419,
	421, 0, 424, 425, 426, 427, 428, 0, 429, 1359,
	1308, 430, 431, 433, 434, 435, 437, 438, 439, 440,
	441, 442, 443, 444, 445, 446, 447, 448, 0, 449,
	450, 451, 453, 0, 454, 455, 458, 459, 460, 461,
	0, 463, 1360, 0, 464, 465, 466, 1340, 1341, 467,
	468, 469, 470, 471, 472, 475, 1373, 477, 478, 479,
	480, 481, 482, 483, 713, 485, 486, 487, 488, 489,
	490, 491, 675, 1351, 492, 494, 495, 1357, 679, 1352,
	846, 510, 511, 512, 513, 514, 515, 516, 518, 0,
	520, 521, 522, 1353, 523, 524, 525, 526, 0, 527,
	528, 529, 530, 531, 533, 536, 537, 538, 539, 0,
	542, 543, 544, 545, 546, 547, 548, 550, 551, 552,
	554, 555, 556, 714, 557, 558, 559, 560, 1311, 562,
	563, 715, 565, 566, 568, 569, 570, 571, 572, 573,
	724, 1344, 575, 685, 576, 577, 578, 579, 580, 0,
	582, 583, 584, 585, 586, 587, 590, 591, 592, 594,
	595, 1354, 596, 597, 1345, 599, 600, 849, 602, 603,
	604, 605, 606, 0, 725, 607, 1355, 608, 1356, 609,
	610, 611, 612, 613, 614, 615, 617, 0, 1295, 619,
	620, 621, 623, 624, 625, 626, 629, 630, 631, 632,
	633, 0, 634, 636, 638, 716, 693, 1361, 1362, 1365,
	1363, 1364, 1366, 1367, 1377, 639, 640, 656, 507, 501,
	457, 499, 500, 504, 505, 508, 0, 0, 0, 1349,
	0, 0, 0, 1293, 0, 183, 825, 0, 1314, 811,
	0, 1319, 1320, 1309, 797, 1299, 0, 0, 1300, 0,
	0, 1289, 1290, 0, 333, 0, 350, 831, 0, 399,
	436, 1304, 0, 1292, 496, 0, 549, 553, 182, 642,
	1324, 0, 1296, 0, 407, 1317, 836, 0, 842, 1318,
	848, 1316, 618, 0, 838, 839, 844, 338, 1393, 641,
	712, 0, 0, 0, 1310, 179, 0, 0, 0, 180,
	0, 0, 346, 0, 0, 0, 0, 840, 837, 841,
	847, 835, 845, 832, 843, 0, 540, 474, 1176, 567,
	345, 391, 378, 420, 462, 574, 0, 0, 452, 622,
	387, 476, 0, 366, 509, 1346, 598, 473, 0, 581,
	601, 0, 493, 372, 532, 588, 589, 829, 834, 0,
	850, 0, 376, 377, 498, 358, 506, 703, 669, 561,
	519, 517, 0, 484, 541, 698, 1305, 0, 406, 0,
	401, 497, 637, 364, 616, 535, 502, 456, 564, 593,
	403, 388, 389, 432, 534, 422, 374, 627, 1374, 1376,
	1372, 1368, 1369, 1334, 1335, 1375, 1371, 423, 1370, 0,
	635, 1379, 1390, 1387, 1392, 1378, 1391, 1385, 1066, 682,
	1382, 1381, 1395, 1388, 1389, 628, 1394, 1333, 1386, 1384,
	1383, 1380, 0, 323, 324, 325, 326, 327, 328, 329,
	330, 331, 332, 334, 336, 0, 335, 337, 339, 340,
	341, 828, 342, 343, 344, 347, 348, 349, 351, 711,
	352, 353, 354, 355, 356, 357, 1358, 1336, 359, 360,
	361, 362, 363, 365, 367, 368, 369, 370, 371, 373,
	375, 1347, 1337, 1342, 1348, 1338, 1339, 1343, 379, 380,
	381, 382, 383, 384, 0, 385, 386, 390, 392, 393,
	394, 395, 396, 397, 400, 0, 402, 404, 0, 405,
	408, 0, 409, 410, 411, 412, 413, 414, 415, 416,
	1350, 417, 0, 418, 419, 421, 0, 424, 425, 426,
	427, 428, 0, 429, 1359, 1308, 430, 431, 433, 434,
	435, 437, 438, 439, 440, 441, 442, 443, 444, 445,
	446, 447, 448, 0, 449, 450, 451, 453, 0, 454,
	455, 458, 459, 460, 461, 0, 463, 1360, 0, 464,
	465, 466, 1340, 1341, 467, 468, 469, 470, 471, 472,
	475, 1373, 477, 478, 479, 480, 481, 482, 483, 713,
	485, 486, 487, 488, 489, 490, 491, 675, 1351, 492,
	494, 495, 1357, 679, 1352, 846, 510, 511, 512, 513,
	514, 515, 516, 518, 0, 520, 521, 522, 1353, 523,
	524, 525, 526, 0, 527, 528, 529, 530, 531, 533,
	536, 537, 538, 539, 0, 542, 543, 544, 545, 546,
	547, 548, 550, 551, 552, 554, 555, 556, 714, 557,
	558, 559, 560, 1311, 562, 563, 715, 565, 566, 568,
	569, 570, 571, 572, 573, 724, 1344, 575, 685, 576,
	577, 578, 579, 580, 0, 582, 583, 584, 585, 586,
	587, 590, 591, 592, 594, 595, 1354, 596, 597, 1345,
	599, 600, 849, 602, 603, 604, 605, 606, 0, 725,
	607, 1355, 608, 1356, 609, 610, 611, 612, 613, 614,
	615, 617, 0, 1295, 619, 620, 621, 623, 624, 625,
	626, 629, 630, 631, 632, 633, 0, 634, 636, 638,
	716, 693, 1361, 1362, 1365, 1363, 1364, 1366, 1367, 1377,
	639, 640, 656, 507, 501, 457, 499, 500, 504, 505,
	508, 0, 0, 0, 1349, 0, 0, 0, 1293, 0,
	183, 825, 0, 1314, 811, 0, 1319, 1320, 1309, 797,
	1299, 0, 0, 1300, 0, 0, 1289, 1290, 0, 333,
	0, 350, 831, 0, 399, 436, 1304, 0, 1292, 496,
	0, 549, 553, 0, 642, 1324, 0, 1296, 0, 407,
	1317, 836, 0, 842, 1318, 848, 1316, 618, 0, 838,
	839, 844, 338, 1393, 641, 712, 0, 0, 0, 1310,
	0, 3358, 0, 0, 0, 0, 0, 346, 0, 0,
	0, 0, 840, 837, 841, 847, 835, 845, 832, 843,
	0, 540, 474, 691, 567, 345, 391, 378, 420, 462,
	574, 0, 0, 452, 622, 387, 476, 0, 366, 509,
	1346, 598, 473, 0, 581, 601, 0, 493, 372, 532,
	588, 589, 829, 834, 0, 850, 0, 376, 377, 498,
	358, 506, 703, 669, 561, 519, 517, 0, 484, 541,
	698, 1305, 0, 406, 0, 401, 497, 637, 364, 616,
	535, 502, 456, 564, 593, 403, 388, 389, 432, 534,
	422, 374, 627, 1374, 1376, 1372, 1368, 1369, 1334, 1335,
	1375, 1371, 423, 1370, 0, 635, 1379, 1390, 1387, 1392,
	1378, 1391, 1385, 1066, 682, 1382, 1381, 1395, 1388, 1389,
	628, 1394, 1333, 1386, 1384, 1383, 1380, 0, 323, 324,
	325, 326, 327, 328, 329, 330, 331, 332, 334, 336,
	0, 335, 337, 339, 340, 341, 828, 342, 343, 344,
	347, 348, 349, 351, 711, 352, 353, 354, 355, 356,
	357, 1358, 1336, 359, 360, 361, 362, 363, 365, 367,
	368, 369, 370, 371, 373, 375, 1347, 1337, 1342, 1348,
	1338, 1339, 1343, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 390, 392, 393, 394, 395, 396, 397, 400,
	0, 402, 404, 0, 405, 408, 0, 409, 410, 411,
	412, 413, 414, 415, 416, 1350, 417, 0, 418, 419,
	421, 0, 424, 425, 426, 427, 428, 0, 429, 1359,
	1308, 430, 431, 433, 434, 435, 437, 438, 439, 440,
	441, 442, 443, 444, 445, 446, 447, 448, 0, 449,
	450, 451, 453, 0, 454, 455, 458, 459, 460, 461,
	0, 463, 1360, 3354, 464, 465, 466, 1340, 1341, 467,
	468, 469, 470, 471, 472, 475, 1373, 477, 478, 479,
	480, 481, 482, 483, 713, 485, 486, 487, 488, 489,
	490, 491, 675, 1351, 492, 494, 495, 1357, 679, 1352,
	846, 510, 511, 512, 513, 514, 515, 516, 518, 0,
	520, 521, 522, 1353, 523, 524, 525, 526, 0, 527,
	528, 529, 530, 531, 533, 536, 537, 538, 539, 0,
	542, 543, 544, 545, 546, 547, 548, 550, 551, 552,
	554, 555, 556, 714, 557, 558, 559, 560, 1311, 562,
	563, 715, 565, 566, 568, 569, 570, 571, 572, 573,
	724, 1344, 575, 685, 576, 577, 578, 579, 580, 0,
	582, 583, 584, 585, 586, 587, 590, 591, 592, 594,
	595, 1354, 596, 597, 1345, 599, 600, 849, 602, 603,
	604, 605, 606, 3355, 725, 607, 1355, 608, 1356, 609,
	610, 611, 612, 613, 614, 615, 617, 0, 1295, 619,
	620, 621, 623, 624, 625, 626, 629, 630, 631, 632,
	633, 0, 634, 636, 638, 716, 693, 1361, 1362, 1365,
	1363, 1364, 1366, 1367, 1377, 639, 640, 656, 507, 501,
	457, 499, 500, 504, 505, 508, 0, 0, 3353, 1349,
	0, 0, 0, 1293, 0, 825, 0, 1314, 811, 0,
	1319, 1320, 1309, 797, 1299, 0, 0, 0, 1300, 0,
	0, 1289, 1290, 333, 0, 350, 831, 0, 399, 436,
	1304, 0, 1292, 496, 0, 549, 553, 0, 642, 1324,
	0, 1296, 0, 407, 1317, 836, 0, 842, 1318, 848,
	1316, 618, 0, 838, 839, 844, 338, 1393, 641, 712,
	0, 0, 0, 1310, 0, 0, 0, 0, 0, 0,
	0, 346, 0, 0, 0, 0, 840, 837, 841, 847,
	835, 845, 832, 843, 0, 540, 474, 691, 567, 345,
	391, 378, 420, 462, 574, 0, 0, 452, 622, 387,
	476, 0, 366, 509, 1346, 598, 473, 0, 581, 601,
	0, 493, 372, 532, 588, 589, 829, 834, 0, 850,
	0, 376, 377, 498, 358, 506, 703, 669, 561, 519,
	517, 0, 484, 541, 698, 1305, 0, 406, 0, 401,
	497, 637, 364, 616, 535, 502, 456, 564, 593, 403,
	388, 389, 432, 534, 422, 374, 627, 1374, 1376, 1372,
	1368, 1369, 1334, 1335, 1375, 1371, 423, 1370, 0, 635,
	1379, 1390, 1387, 1392, 1378, 1391, 1385, 1066, 682, 1382,
	1381, 1395, 1388, 1389, 628, 1394, 1333, 1386, 1384, 1383,
	1380, 0, 323, 324, 325, 326, 327, 328, 329, 330,
	331, 332, 334, 336, 0, 335, 337, 339, 340, 341,
	828, 342, 343, 344, 347, 348, 349, 351, 711, 352,
	353, 354, 355, 356, 357, 1358, 1336, 359, 360, 361,
	362, 363, 365, 367, 368, 369, 370, 371, 373, 375,
	1347, 1337, 1342, 1348, 1338, 1339, 1343, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 390, 392, 393, 394,
	395, 396, 397, 400, 0, 402, 404, 0, 405, 408,
	0, 409, 410, 411, 412, 413, 414, 415, 416, 1350,
	417, 0, 418, 419, 421, 0, 424, 425, 426, 427,
	428, 0, 429, 1359, 1308, 430, 431, 433, 434, 435,
	437, 438, 439, 440, 441, 442, 443, 444, 445, 446,
	447, 448, 0, 449, 450, 451, 453, 0, 454, 455,
	458, 459, 460, 461, 0, 463, 1360, 0, 464, 465,
	466, 1340, 1341, 467, 468, 469, 470, 471, 472, 475,
	1373, 477, 478, 479, 480, 481, 482, 483, 713, 485,
	486, 487, 488, 489, 490, 491, 675, 1351, 492, 494,
	495, 1357, 679, 1352, 846, 510, 511, 512, 513, 514,
	515, 516, 518, 0, 520, 521, 522, 1353, 523, 524,
	525, 526, 0, 527, 528, 529, 530, 531, 533, 536,
	537, 538, 539, 0, 542, 543, 544, 545, 546, 547,
	548, 550, 551, 552, 554, 555, 556, 714, 557, 558,
	559, 560, 1311, 562, 563, 715, 565, 566, 568, 569,
	570, 571, 572, 573, 724, 1344, 575, 685, 576, 577,
	578, 579, 580, 0, 582, 583, 584, 585, 586, 587,
	590, 591, 592, 594, 595, 1354, 596, 597, 1345, 599,
	600, 849, 602, 603, 604, 605, 606, 0, 725, 607,
	1355, 608, 1356, 609, 610, 611, 612, 613, 614, 615,
	617, 0, 1295, 619, 620, 621, 623, 624, 625, 626,
	629, 630, 631, 632, 633, 0, 634, 636, 638, 716,
	693, 1361, 1362, 1365, 1363, 1364, 1366, 1367, 1377, 639,
	640, 656, 507, 501, 457, 499, 500, 504, 505, 508,
	0, 0, 0, 1349, 0, 0, 0, 1293, 0, 0,
	825, 0, 1314, 811, 0, 1319, 1320, 1309, 797, 1299,
	0, 0, 1300, 0, 0, 1289, 1290, 1287, 333, 0,
	350, 831, 0, 399, 436, 1304, 0, 1292, 496, 0,
	549, 553, 0, 642, 1324, 0, 1296, 0, 407, 1317,
	836, 0, 842, 1318, 848, 1316, 618, 0, 838, 839,
	844, 338, 1393, 641, 712, 0, 0, 0, 1310, 0,
	0, 0, 0, 0, 0, 0, 346, 0, 0, 0,
	0, 840, 837, 841, 847, 835, 845, 832, 843, 0,
	540, 474, 691, 567, 345, 391, 378, 420, 462, 574,
	0, 0, 452, 622, 387, 476, 0, 366, 509, 1346,
	598, 473, 0, 581, 601, 0, 493, 372, 532, 588,
	589, 829, 834, 0, 850, 0, 376, 377, 498, 358,
	506, 703, 669, 561, 519, 517, 0, 484, 541, 698,
	1305, 0, 406, 0, 401, 497, 637, 364, 616, 535,
	502, 456, 564, 593, 403, 388, 389, 432, 534, 422,
	374, 627, 1374, 1376, 1372, 1368, 1369, 1334, 1335, 1375,
	1371, 423, 1370, 0, 635, 1379, 1390, 1387, 1392, 1378,
	1391, 1385, 1066, 682, 1382, 1381, 1395, 1388, 1389, 628,
	1394, 1333, 1386, 1384, 1383, 1380, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 331, 332, 334, 336, 0,
	335, 337, 339, 340, 341, 828, 342, 343, 344, 347,
	348, 349, 351, 711, 352, 353, 354, 355, 356, 357,
	1358, 1336, 359, 360, 361, 362, 363, 365, 367, 368,
	369, 370, 371, 373, 375, 1347, 1337, 1342, 1348, 1338,
	1339, 1343, 379, 380, 381, 382, 383, 384, 0, 385,
	386, 390, 392, 393, 394, 395, 396, 397, 400, 0,
	402, 404, 0, 405, 408, 0, 409, 410, 411, 412,
	413, 414, 415, 416, 1350, 417, 0, 418, 419, 421,
	0, 424, 425, 426, 427, 428, 0, 429, 1359, 1308,
	430, 431, 433, 434, 435, 437, 438, 439, 440, 441,
	442, 443, 444, 445, 446, 447, 448, 0, 449, 450,
	451, 453, 0, 454, 455, 458, 459, 460, 461, 0,
	463, 1360, 0, 464, 465, 466, 1340, 1341, 467, 468,
	469, 470, 471, 472, 475, 1373, 477, 478, 479, 480,
	481, 482, 483, 713, 485, 486, 487, 488, 489, 490,
	491, 675, 1351, 492, 494, 495, 1357, 679, 1352, 846,
	510, 511, 512, 513, 514, 515, 516, 518, 0, 520,
	521, 522, 1353, 523, 524, 525, 526, 0, 527, 528,
	529, 530, 531, 533, 536, 537, 538, 539, 0, 542,
	543, 544, 545, 546, 547, 548, 550, 551, 552, 554,
	555, 556, 714, 557, 558, 559, 560, 1311, 562, 563,
	715, 565, 566, 568, 569, 570, 571, 572, 573, 724,
	1344, 575, 685, 576, 577, 578, 579, 580, 0, 582,
	583, 584, 585, 586, 587, 590, 591, 592, 594, 595,
	1354, 596, 597, 1345, 599, 600, 849, 602, 603, 604,
	605, 606, 0, 725, 607, 1355, 608, 1356, 609, 610,
	611, 612, 613, 614, 615, 617, 0, 1295, 619, 620,
	621, 623, 624, 625, 626, 629, 630, 631, 632, 633,
	0, 634, 636, 638, 716, 693, 1361, 1362, 1365, 1363,
	1364, 1366, 1367, 1377, 639, 640, 656, 507, 501, 457,
	499, 500, 504, 505, 508, 0, 0, 0, 1349, 0,
	0, 0, 1293, 0, 825, 0, 1314, 811, 0, 1319,
	1320, 1309, 797, 1299, 0, 2554, 3299, 1300, 0, 0,
	1289, 1290, 333, 0, 350, 831, 0, 399, 436, 1304,
	0, 1292, 496, 0, 549, 553, 0, 642, 1324, 0,
	1296, 0, 407, 1317, 836, 0, 842, 1318, 848, 1316,
	618, 0, 838, 839, 844, 338, 1393, 641, 712, 0,
	0, 3260, 1310, 0, 0, 0, 0, 0, 0, 0,
	346, 0, 0, 0, 0, 840, 837, 841, 847, 835,
	845, 832, 843, 0, 540, 474, 691, 567, 345, 391,
	378, 420, 462, 574, 0, 0, 452, 622, 387, 476,
	0, 366, 509, 1346, 598, 473, 0, 581, 601, 0,
	493, 372, 532, 588, 589, 829, 834, 0, 850, 0,
	376, 377, 498, 358, 506, 703, 669, 561, 519, 517,
	0, 484, 541, 698, 1305, 0, 406, 0, 401, 497,
	637, 364, 616, 535, 502, 456, 564, 593, 403, 388,
	389, 432, 534, 422, 374, 627, 1374, 1376, 1372, 1368,
	1369, 1334, 1335, 1375, 1371, 423, 1370, 0, 635, 1379,
	1390, 1387, 1392, 1378, 1391, 1385, 1066, 682, 1382, 1381,
	1395, 1388, 1389, 628, 1394, 1333, 1386, 1384, 1383, 1380,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 331,
	332, 334, 336, 0, 335, 337, 339, 340, 341, 828,
	342, 343, 344, 347, 348, 349, 351, 711, 352, 353,
	354, 355, 356, 357, 1358, 1336, 359, 360, 361, 362,
	363, 365, 367, 368, 369, 370, 371, 373, 375, 1347,
	1337, 1342, 1348, 1338, 1339, 1343, 379, 380, 381, 382,
	383, 384, 0, 385, 386, 390, 392, 393, 394, 395,
	396, 397, 400, 0, 402, 404, 0, 405, 408, 0,
	409, 410, 411, 412, 413, 414, 415, 416, 1350, 417,
	0, 418, 419, 421, 0, 424, 425, 426, 427, 428,
	0, 429, 1359, 1308, 430, 431, 433, 434, 435, 437,
	438, 439, 440, 441, 442, 443, 444, 445, 446, 447,
	448, 0, 449, 450, 451, 453, 0, 454, 455, 458,
	459, 460, 461, 0, 463, 1360, 0, 464, 465, 466,
	1340, 1341, 467, 468, 469, 470, 471, 472, 475, 1373,
	477, 478, 479, 480, 481, 482, 483, 713, 485, 486,
	487, 488, 489, 490, 491, 675, 1351, 492, 494, 495,
	1357, 679, 1352, 846, 510, 511, 512, 513, 514, 515,
	516, 518, 0, 520, 521, 522, 1353, 523, 524, 525,
	526, 0, 527, 528, 529, 530, 531, 533, 536, 537,
	538, 539, 0, 542, 543, 544, 545, 546, 547, 548,
	550, 551, 552, 554, 555, 556, 714, 557, 558, 559,
	560, 1311, 562, 563, 715, 565, 566, 568, 569, 570,
	571, 572, 573, 724, 1344, 575, 685, 576, 577, 578,
	579, 580, 0, 582, 583, 584, 585, 586, 587, 590,
	591, 592, 594, 595, 1354, 596, 597, 1345, 599, 600,
	849, 602, 603, 604, 605, 606, 0, 725, 607, 1355,
	608, 1356, 609, 610, 611, 612, 613, 614, 615, 617,
	0, 1295, 619, 620, 621, 623, 624, 625, 626, 629,
	630, 631, 632, 633, 0, 634, 636, 638, 716, 693,
	1361, 1362, 1365, 1363, 1364, 1366, 1367, 1377, 639, 640,
	656, 507, 501, 457, 499, 500, 504, 505, 508, 0,
	0, 0, 1349, 0, 0, 0, 1293, 0, 825, 0,
	1314, 811, 0, 1319, 1320, 1309, 797, 1299, 0, 0,
	0, 1300, 0, 0, 1289, 1290, 333, 0, 350, 831,
	0, 399, 436, 1304, 0, 1292, 496, 0, 549, 553,
	0, 642, 1324, 0, 1296, 0, 407, 1317, 836, 0,
	842, 1318, 848, 1316, 618, 0, 838, 839, 844, 338,
	1393, 641, 712, 0, 0, 0, 1310, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 840,
	837, 841, 847, 835, 845, 832, 843, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 1346, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 829,
	834, 0, 850, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 1305, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	1374, 1376, 1372, 1368, 1369, 1334, 1335, 1375, 1371, 423,
	1370, 0, 635, 1379, 1390, 1387, 1392, 1378, 1391, 1385,
	1066, 682, 1382, 1381, 1395, 1388, 1389, 628, 1394, 1333,
	1386, 1384, 1383, 1380, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 828, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 1358, 1336,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 1347, 1337, 1342, 1348, 1338, 1339, 1343,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 1350, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 1359, 1308, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 1360,
	0, 464, 465, 466, 1340, 1341, 467, 468, 469, 470,
	471, 472, 475, 1373, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	1351, 492, 494, 495, 1357, 679, 1352, 846, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	1353, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 1311, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 1344, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 1354, 596,
	597, 1345, 599, 600, 849, 602, 603, 604, 605, 606,
	0, 725, 607, 1355, 608, 1356, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 1295, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 1361, 1362, 1365, 1363, 1364, 1366,
	1367, 1377, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 0, 0, 0, 1349, 0, 0, 0,
	1293, 0, 825, 0, 1314, 811, 0, 1319, 1320, 1309,
	797, 1299, 0, 0, 0, 1300, 4663, 0, 1289, 1290,
	333, 0, 350, 831, 0, 399, 436, 1304, 0, 1292,
	496, 0, 549, 553, 0, 642, 1324, 0, 1296, 0,
	407, 1317, 836, 0, 842, 1318, 848, 1316, 618, 0,
	838, 839, 844, 338, 1393, 641, 712, 0, 0, 0,
	1310, 0, 0, 0, 0, 0, 0, 0, 346, 0,
	0, 0, 0, 840, 837, 841, 847, 835, 845, 832,
	843, 0, 540, 474, 691, 567, 345, 391, 378, 420,
	462, 574, 0, 0, 452, 622, 387, 476, 0, 366,
	509, 1346, 598, 473, 0, 581, 601, 0, 493, 372,
	532, 588, 589, 829, 834, 0, 850, 0, 376, 377,
	498, 358, 506, 703, 669, 561, 519, 517, 0, 484,
	541, 698, 1305, 0, 406, 0, 401, 497, 637, 364,
	616, 535, 502, 456, 564, 593, 403, 388, 389, 432,
	534, 422, 374, 627, 1374, 1376, 1372, 1368, 1369, 1334,
	1335, 1375, 1371, 423, 1370, 0, 635, 1379, 1390, 1387,
	1392, 1378, 1391, 1385, 1066, 682, 1382, 1381, 1395, 1388,
	1389, 628, 1394, 1333, 1386, 1384, 1383, 1380, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 331, 332, 334,
	336, 0, 335, 337, 339, 340, 341, 828, 342, 343,
	344, 347, 348, 349, 351, 711, 352, 353, 354, 355,
	356, 357, 1358, 1336, 359, 360, 361, 362, 363, 365,
	367, 368, 369, 370, 371, 373, 375, 1347, 1337, 1342,
	1348, 1338, 1339, 1343, 379, 380, 381, 382, 383, 384,
	0, 385, 386, 390, 392, 393, 394, 395, 396, 397,
	400, 0, 402, 404, 0, 405, 408, 0, 409, 410,
	411, 412, 413, 414, 415, 416, 1350, 417, 0, 418,
	419, 421, 0, 424, 425, 426, 427, 428, 0, 429,
	1359, 1308, 430, 431, 433, 434, 435, 437, 438, 439,
	440, 441, 442, 443, 444, 445, 446, 447, 448, 0,
	449, 450, 451, 453, 0, 454, 455, 458, 459, 460,
	461, 0, 463, 1360, 0, 464, 465, 466, 1340, 1341,
	467, 468, 469, 470, 471, 472, 475, 1373, 477, 478,
	479, 480, 481, 482, 483, 713, 485, 486, 487, 488,
	489, 490, 491, 675, 1351, 492, 494, 495, 1357, 679,
	1352, 846, 510, 511, 512, 513, 514, 515, 516, 518,
	0, 520, 521, 522, 1353, 523, 524, 525, 526, 0,
	527, 528, 529, 530, 531, 533, 536, 537, 538, 539,
	0, 542, 543, 544, 545, 546, 547, 548, 550, 551,
	552, 554, 555, 556, 714, 557, 558, 559, 560, 1311,
	562, 563, 715, 565, 566, 568, 569, 570, 571, 572,
	573, 724, 1344, 575, 685, 576, 577, 578, 579, 580,
	0, 582, 583, 584, 585, 586, 587, 590, 591, 592,
	594, 595, 1354, 596, 597, 1345, 599, 600, 849, 602,
	603, 604, 605, 606, 0, 725, 607, 1355, 608, 1356,
	609, 610, 611, 612, 613, 614, 615, 617, 0, 1295,
	619, 620, 621, 623, 624, 625, 626, 629, 630, 631,
	632, 633, 0, 634, 636, 638, 716, 693, 1361, 1362,
	1365, 1363, 1364, 1366, 1367, 1377, 639, 640, 656, 507,
	501, 457, 499, 500, 504, 505, 508, 0, 0, 0,
	1349, 0, 0, 0, 1293, 0, 825, 0, 1314, 811,
	0, 1319, 1320, 1309, 797, 1299, 0, 0, 0, 1300,
	4626, 0, 1289, 1290, 333, 0, 350, 831, 0, 399,
	436, 1304, 0, 1292, 496, 0, 549, 553, 0, 642,
	1324, 0, 1296, 0, 407, 1317, 836, 0, 842, 1318,
	848, 1316, 618, 0, 838, 839, 844, 338, 1393, 641,
	712, 0, 0, 0, 1310, 0, 3358, 0, 0, 0,
	0, 0, 346, 0, 0, 0, 0, 840, 837, 841,
	847, 835, 845, 832, 843, 0, 540, 474, 691, 567,
	345, 391, 378, 420, 462, 574, 0, 0, 452, 622,
	387, 476, 0, 366, 509, 1346, 598, 473, 0, 581,
	601, 0, 493, 372, 532, 588, 589, 829, 834, 0,
	850, 0, 376, 377, 498, 358, 506, 703, 669, 561,
	519, 517, 0, 484, 541, 698, 1305, 0, 406, 0,
	401, 497, 637, 364, 616, 535, 502, 456, 564, 593,
	403, 388, 389, 432, 534, 422, 374, 627, 1374, 1376,
	1372, 1368, 1369, 1334, 1335, 1375, 1371, 423, 1370, 0,
	635, 1379, 1390, 1387, 1392, 1378, 1391, 1385, 1066, 682,
	1382, 1381, 1395, 1388, 1389, 628, 1394, 1333, 1386, 1384,
	1383, 1380, 0, 323, 324, 325, 326, 327, 328, 329,
	330, 331, 332, 334, 336, 0, 335, 337, 339, 340,
	341, 828, 342, 343, 344, 347, 348, 349, 351, 711,
	352, 353, 354, 355, 356, 357, 1358, 1336, 359, 360,
	361, 362, 363, 365, 367, 368, 369, 370, 371, 373,
	375, 1347, 1337, 1342, 1348, 1338, 1339, 1343, 379, 380,
	381, 382, 383, 384, 0, 385, 386, 390, 392, 393,
	394, 395, 396, 397, 400, 0, 402, 404, 0, 405,
	408, 0, 409, 410, 411, 412, 413, 414, 415, 416,
	1350, 417, 0, 418, 419, 421, 0, 424, 425, 426,
	427, 428, 0, 429, 1359, 1308, 430, 431, 433, 434,
	435, 437, 438, 439, 440, 441, 442, 443, 444, 445,
	446, 447, 448, 0, 449, 450, 451, 453, 0, 454,
	455, 458, 459, 460, 461, 0, 463, 1360, 0, 464,
	465, 466, 1340, 1341, 467, 468, 469, 470, 471, 472,
	475, 1373, 477, 478, 479, 480, 481, 482, 483, 713,
	485, 486, 487, 488, 489, 490, 491, 675, 1351, 492,
	494, 495, 1357, 679, 1352, 846, 510, 511, 512, 513,
	514, 515, 516, 518, 0, 520, 521, 522, 1353, 523,
	524, 525, 526, 0, 527, 528, 529, 530, 531, 533,
	536, 537, 538, 539, 0, 542, 543, 544, 545, 546,
	547, 548, 550, 551, 552, 554, 555, 556, 714, 557,
	558, 559, 560, 1311, 562, 563, 715, 565, 566, 568,
	569, 570, 571, 572, 573, 724, 1344, 575, 685, 576,
	577, 578, 579, 580, 0, 582, 583, 584, 585, 586,
	587, 590, 591, 592, 594, 595, 1354, 596, 597, 1345,
	599, 600, 849, 602, 603, 604, 605, 606, 0, 725,
	607, 1355, 608, 1356, 609, 610, 611, 612, 613, 614,
	615, 617, 0, 1295, 619, 620, 621, 623, 624, 625,
	626, 629, 630, 631, 632, 633, 0, 634, 636, 638,
	716, 693, 1361, 1362, 1365, 1363, 1364, 1366, 1367, 1377,
	639, 640, 656, 507, 501, 457, 499, 500, 504, 505,
	508, 0, 0, 0, 1349, 0, 0, 0, 1293, 0,
	825, 0, 1314, 811, 0, 1319, 1320, 1309, 797, 1299,
	0, 0, 0, 1300, 0, 0, 1289, 1290, 333, 0,
	350, 831, 0, 399, 436, 1304, 0, 1292, 496, 0,
	549, 553, 0, 642, 1324, 0, 1296, 0, 407, 1317,
	836, 0, 842, 1318, 848, 1316, 618, 0, 838, 839,
	844, 338, 1393, 641, 712, 0, 0, 0, 1310, 0,
	0, 0, 0, 0, 0, 0, 346, 0, 0, 0,
	0, 840, 837, 841, 847, 835, 845, 832, 843, 0,
	540, 474, 691, 567, 345, 391, 378, 420, 462, 574,
	0, 0, 452, 622, 387, 476, 0, 366, 509, 1346,
	598, 473, 0, 581, 601, 0, 493, 372, 532, 588,
	589, 829, 834, 0, 850, 0, 376, 377, 498, 358,
	506, 703, 669, 561, 519, 517, 0, 484, 541, 698,
	1305, 0, 406, 0, 401, 497, 637, 364, 616, 535,
	502, 456, 564, 593, 403, 388, 389, 432, 534, 422,
	374, 627, 1374, 1376, 1372, 1368, 1369, 1334, 1335, 1375,
	1371, 423, 1370, 0, 635, 1379, 1390, 1387, 1392, 1378,
	1391, 1385, 1066, 682, 1382, 1381, 1395, 1388, 1389, 628,
	1394, 1333, 1386, 1384, 1383, 1380, 3976, 323, 324, 325,
	326, 327, 328, 329, 330, 331, 332, 334, 336, 0,
	335, 337, 339, 340, 341, 828, 342, 343, 344, 347,
	348, 349, 351, 711, 352, 353, 354, 355, 356, 357,
	1358, 1336, 359, 360, 361, 362, 363, 365, 367, 368,
	369, 370, 371, 373, 375, 1347, 1337, 1342, 1348, 1338,
	1339, 1343, 379, 380, 381, 382, 383, 384, 0, 385,
	386, 390, 392, 393, 394, 395, 396, 397, 400, 0,
	402, 404, 0, 405, 408, 0, 409, 410, 411, 412,
	413, 414, 415, 416, 1350, 417, 0, 418, 419, 421,
	0, 424, 425, 426, 427, 428, 0, 429, 1359, 1308,
	430, 431, 433, 434, 435, 437, 438, 439, 440, 441,
	442, 443, 444, 445, 446, 447, 448, 0, 449, 450,
	451, 453, 0, 454, 455, 458, 459, 460, 461, 0,
	463, 1360, 0, 464, 465, 466, 1340, 1341, 467, 468,
	469, 470, 471, 472, 475, 1373, 477, 478, 479, 480,
	481, 482, 483, 713, 485, 486, 487, 488, 489, 490,
	491, 675, 1351, 492, 494, 495, 1357, 679, 1352, 846,
	510, 511, 512, 513, 514, 515, 516, 518, 0, 520,
	521, 522, 1353, 523, 524, 525, 526, 0, 527, 528,
	529, 530, 531, 533, 536, 537, 538, 539, 0, 542,
	543, 544, 545, 546, 547, 548, 550, 551, 552, 554,
	555, 556, 714, 557, 558, 559, 560, 1311, 562, 563,
	715, 565, 566, 568, 569, 570, 571, 572, 573, 724,
	1344, 575, 685, 576, 577, 578, 579, 580, 0, 582,
	583, 584, 585, 586, 587, 590, 591, 592, 594, 595,
	1354, 596, 597, 1345, 599, 600, 849, 602, 603, 604,
	605, 606, 0, 725, 607, 1355, 608, 1356, 609, 610,
	611, 612, 613, 614, 615, 617, 0, 1295, 619, 620,
	621, 623, 624, 625, 626, 629, 630, 631, 632, 633,
	0, 634, 636, 638, 716, 693, 1361, 1362, 1365, 1363,
	1364, 1366, 1367, 1377, 639, 640, 656, 507, 501, 457,
	499, 500, 504, 505, 508, 0, 0, 0, 1349, 0,
	0, 0, 1293, 0, 825, 0, 1314, 811, 0, 1319,
	1320, 1309, 797, 1299, 0, 0, 0, 1300, 0, 0,
	1289, 1290, 333, 0, 350, 831, 0, 399, 436, 1304,
	0, 1292, 496, 0, 549, 553, 0, 642, 1324, 0,
	1296, 0, 407, 1317, 836, 0, 842, 1318, 848, 1316,
	618, 0, 838, 839, 844, 338, 1393, 641, 712, 0,
	0, 0, 1310, 0, 0, 0, 0, 0, 0, 0,
	346, 0, 0, 0, 0, 840, 837, 841, 847, 835,
	845, 832, 843, 0, 540, 474, 691, 567, 345, 391,
	378, 420, 462, 574, 0, 0, 452, 622, 387, 476,
	3377, 366, 509, 1346, 598, 473, 0, 581, 601, 0,
	493, 372, 532, 588, 589, 829, 834, 0, 850, 0,
	376, 377, 498, 358, 506, 703, 669, 561, 519, 517,
	0, 484, 541, 698, 1305, 0, 406, 0, 401, 497,
	637, 364, 616, 535, 502, 456, 564, 593, 403, 388,
	389, 432, 534, 422, 374, 627, 1374, 1376, 1372, 1368,
	1369, 1334, 1335, 1375, 1371, 423, 1370, 0, 635, 1379,
	1390, 1387, 1392, 1378, 1391, 1385, 1066, 682, 1382, 1381,
	1395, 1388, 1389, 628, 1394, 1333, 1386, 1384, 1383, 1380,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 331,
	332, 334, 336, 0, 335, 337, 339, 340, 341, 828,
	342, 343, 344, 347, 348, 349, 351, 711, 352, 353,
	354, 355, 356, 357, 1358, 1336, 359, 360, 361, 362,
	363, 365, 367, 368, 369, 370, 371, 373, 375, 1347,
	1337, 1342, 1348, 1338, 1339, 1343, 379, 380, 381, 382,
	383, 384, 0, 385, 386, 390, 392, 393, 394, 395,
	396, 397, 400, 0, 402, 404, 0, 405, 408, 0,
	409, 410, 411, 412, 413, 414, 415, 416, 1350, 417,
	0, 418, 419, 421, 0, 424, 425, 426, 427, 428,
	0, 429, 1359, 1308, 430, 431, 433, 434, 435, 437,
	438, 439, 440, 441, 442, 443, 444, 445, 446, 447,
	448, 0, 449, 450, 451, 453, 0, 454, 455, 458,
	459, 460, 461, 0, 463, 1360, 0, 464, 465, 466,
	1340, 1341, 467, 468, 469, 470, 471, 472, 475, 1373,
	477, 478, 479, 480, 481, 482, 483, 713, 485, 486,
	487, 488, 489, 490, 491, 675, 1351, 492, 494, 495,
	1357, 679, 1352, 846, 510, 511, 512, 513, 514, 515,
	516, 518, 0, 520, 521, 522, 1353, 523, 524, 525,
	526, 0, 527, 528, 529, 530, 531, 533, 536, 537,
	538, 539, 0, 542, 543, 544, 545, 546, 547, 548,
	550, 551, 552, 554, 555, 556, 714, 557, 558, 559,
	560, 1311, 562, 563, 715, 565, 566, 568, 569, 570,
	571, 572, 573, 724, 1344, 575, 685, 576, 577, 578,
	579, 580, 0, 582, 583, 584, 585, 586, 587, 590,
	591, 592, 594, 595, 1354, 596, 597, 1345, 599, 600,
	849, 602, 603, 604, 605, 606, 0, 725, 607, 1355,
	608, 1356, 609, 610, 611, 612, 613, 614, 615, 617,
	0, 1295, 619, 620, 621, 623, 624, 625, 626, 629,
	630, 631, 632, 633, 0, 634, 636, 638, 716, 693,
	1361, 1362, 1365, 1363, 1364, 1366, 1367, 1377, 639, 640,
	656, 507, 501, 457, 499, 500, 504, 505, 508, 0,
	0, 0, 1349, 0, 0, 0, 1293, 0, 825, 0,
	1314, 811, 0, 1319, 1320, 1309, 797, 1299, 0, 0,
	0, 1300, 0, 0, 1289, 1290, 333, 0, 350, 831,
	0, 399, 436, 1304, 0, 1292, 496, 0, 549, 553,
	0, 642, 1324, 0, 1296, 0, 407, 1317, 836, 0,
	842, 1318, 848, 1316, 618, 0, 838, 839, 844, 338,
	1393, 641, 712, 0, 0, 0, 1310, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 840,
	837, 841, 847, 835, 845, 832, 843, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 1346, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 829,
	834, 0, 850, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 1305, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	1374, 1376, 1372, 1368, 1369, 1334, 1335, 1375, 1371, 423,
	1370, 0, 635, 1379, 1390, 1387, 1392, 1378, 1391, 1385,
	1066, 682, 1382, 1381, 1395, 1388, 1389, 628, 1394, 1333,
	1386, 1384, 1383, 1380, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 828, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 1358, 1336,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 1347, 1337, 1342, 1348, 1338, 1339, 1343,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 1350, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 1359, 1308, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 1360,
	0, 464, 465, 466, 1340, 1341, 467, 468, 469, 470,
	471, 472, 475, 1373, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	1351, 492, 494, 495, 1357, 679, 1352, 846, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	1353, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 1311, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 1344, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 1354, 596,
	597, 1345, 599, 600, 849, 602, 603, 604, 605, 606,
	0, 725, 607, 1355, 608, 1356, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 1295, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 1361, 1362, 1365, 1363, 1364, 1366,
	1367, 1377, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 0, 0, 0, 1349, 0, 0, 0,
	1293, 0, 0, 825, 0, 1314, 811, 0, 1319, 1320,
	1309, 797, 1299, 0, 0, 1300, 3304, 0, 1289, 1290,
	2039, 333, 0, 350, 831, 0, 399, 436, 1304, 0,
	1292, 496, 0, 549, 553, 0, 642, 1324, 0, 1296,
	0, 407, 1317, 836, 0, 842, 1318, 848, 1316, 618,
	0, 838, 839, 844, 338, 1393, 641, 712, 0, 0,
	0, 1310, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 840, 837, 841, 847, 835, 845,
	832, 843, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 1346, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 829, 834, 0, 850, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 1305, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 1374, 1376, 1372, 1368, 1369,
	1334, 1335, 1375, 1371, 423, 1370, 0, 635, 1379, 1390,
	1387, 1392, 1378, 1391, 1385, 1066, 682, 1382, 1381, 1395,
	1388, 1389, 628, 1394, 1333, 1386, 1384, 1383, 1380, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 828, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 1358, 1336, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 1347, 1337,
	1342, 1348, 1338, 1339, 1343, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 1350, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 1359, 1308, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 1360, 0, 464, 465, 466, 1340,
	1341, 467, 468, 469, 470, 471, 472, 475, 1373, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 1351, 492, 494, 495, 1357,
	679, 1352, 846, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 1353, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	1311, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 1344, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 1354, 596, 597, 1345, 599, 600, 849,
	602, 603, 604, 605, 606, 0, 725, 607, 1355, 608,
	1356, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	1295, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 1361,
	1362, 1365, 1363, 1364, 1366, 1367, 1377, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 0, 0,
	0, 1349, 0, 0, 0, 1293, 0, 825, 0, 1314,
	811, 0, 1319, 1320, 1309, 797, 1299, 0, 0, 0,
	1300, 0, 0, 1289, 1290, 333, 0, 350, 831, 0,
	399, 436, 1304, 0, 1292, 496, 0, 549, 553, 0,
	642, 1324, 0, 1296, 0, 407, 1317, 836, 0, 842,
	1318, 848, 1316, 618, 0, 838, 839, 844, 338, 1393,
	641, 712, 0, 0, 0, 1310, 0, 0, 0, 0,
	0, 0, 0, 346, 0, 0, 0, 0, 840, 837,
	841, 847, 835, 845, 832, 843, 0, 540, 474, 691,
	567, 345, 391, 378, 420, 462, 574, 0, 0, 452,
	622, 387, 476, 0, 366, 509, 1346, 598, 473, 0,
	581, 601, 0, 493, 372, 532, 588, 589, 829, 834,
	0, 850, 0, 376, 377, 498, 358, 506, 703, 669,
	561, 519, 517, 0, 484, 541, 698, 1305, 0, 406,
	0, 401, 497, 637, 364, 616, 535, 502, 456, 564,
	593, 403, 388, 389, 432, 534, 422, 374, 627, 1374,
	1376, 1372, 1368, 1369, 1334, 1335, 1375, 1371, 423, 1370,
	0, 635, 1379, 1390, 1387, 1392, 1378, 1391, 1385, 1066,
	682, 1382, 1381, 1395, 1388, 1389, 628, 1394, 1333, 1386,
	1384, 1383, 1380, 0, 323, 324, 325, 326, 327, 328,
	329, 330, 331, 332, 334, 336, 0, 335, 337, 339,
	340, 341, 828, 342, 343, 344, 347, 348, 349, 351,
	711, 352, 353, 354, 355, 356, 357, 1358, 1336, 359,
	360, 361, 362, 363, 365, 367, 368, 369, 370, 371,
	373, 375, 1347, 1337, 1342, 1348, 1338, 1339, 1343, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 390, 392,
	393, 394, 395, 396, 397, 400, 0, 402, 404, 0,
	405, 408, 0, 409, 410, 411, 412, 413, 414, 415,
	416, 1350, 417, 0, 418, 419, 421, 0, 424, 425,
	426, 427, 428, 0, 429, 1359, 1308, 430, 431, 433,
	434, 435, 437, 438, 439, 440, 441, 442, 443, 444,
	445, 446, 447, 448, 0, 449, 450, 451, 453, 0,
	454, 455, 458, 459, 460, 461, 0, 463, 1360, 0,
	464, 465, 466, 1340, 1341, 467, 468, 469, 470, 471,
	472, 475, 1373, 477, 478, 479, 480, 481, 482, 483,
	713, 485, 486, 487, 488, 489, 490, 491, 675, 1351,
	492, 494, 495, 1357, 679, 1352, 846, 510, 511, 512,
	513, 514, 515, 516, 518, 0, 520, 521, 522, 1353,
	523, 524, 525, 526, 0, 527, 528, 529, 530, 531,
	533, 536, 537, 538, 539, 0, 542, 543, 544, 545,
	546, 547, 548, 550, 551, 552, 554, 555, 556, 714,
	557, 558, 559, 560, 1311, 562, 563, 715, 565, 566,
	568, 569, 570, 571, 572, 573, 724, 1344, 575, 685,
	576, 577, 578, 579, 580, 0, 582, 583, 584, 585,
	586, 587, 590, 591, 592, 594, 595, 1354, 596, 597,
	1345, 599, 600, 849, 602, 603, 604, 605, 606, 0,
	725, 607, 1355, 608, 1356, 609, 610, 611, 612, 613,
	614, 615, 617, 0, 1295, 619, 620, 621, 623, 624,
	625, 626, 629, 630, 631, 632, 633, 0, 634, 636,
	638, 716, 693, 1361, 1362, 1365, 1363, 1364, 1366, 1367,
	1377, 639, 640, 656, 507, 501, 457, 499, 500, 504,
	505, 508, 0, 0, 0, 1349, 0, 0, 0, 1293,
	0, 825, 0, 1314, 811, 0, 1319, 1320, 1309, 797,
	1299, 0, 0, 0, 1300, 0, 0, 1289, 1290, 333,
	0, 350, 831, 0, 399, 436, 1304, 0, 1292, 496,
	0, 549, 553, 0, 642, 1324, 0, 1296, 0, 407,
	1317, 836, 0, 842, 1318, 848, 1316, 618, 0, 838,
	839, 844, 338, 1393, 641, 712, 0, 0, 0, 1310,
	0, 0, 0, 0, 0, 0, 0, 346, 0, 0,
	0, 0, 840, 837, 841, 847, 835, 845, 832, 843,
	0, 540, 474, 691, 567, 345, 391, 378, 420, 462,
	574, 0, 0, 452, 622, 387, 476, 0, 366, 509,
	1346, 598, 473, 0, 581, 601, 0, 493, 372, 532,
	588, 589, 829, 834, 0, 850, 0, 5897, 377, 498,
	358, 506, 703, 669, 561, 519, 517, 0, 484, 541,
	698, 1305, 0, 406, 0, 401, 497, 637, 364, 616,
	535, 502, 456, 564, 593, 403, 388, 389, 432, 534,
	422, 374, 627, 1374, 1376, 1372, 1368, 1369, 1334, 1335,
	1375, 1371, 423, 1370, 0, 635, 1379, 1390, 1387, 1392,
	1378, 1391, 1385, 1066, 682, 1382, 1381, 1395, 1388, 1389,
	628, 1394, 1333, 1386, 1384, 1383, 1380, 0, 323, 324,
	325, 326, 327, 328, 329, 330, 331, 332, 334, 336,
	0, 335, 337, 339, 340, 341, 828, 342, 343, 344,
	347, 348, 349, 351, 711, 352, 353, 354, 355, 356,
	357, 1358, 1336, 359, 360, 361, 362, 363, 365, 367,
	368, 369, 370, 371, 373, 375, 1347, 1337, 1342, 1348,
	1338, 1339, 1343, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 390, 392, 393, 394, 395, 396, 397, 400,
	0, 402, 404, 0, 405, 408, 0, 409, 410, 411,
	412, 413, 414, 415, 416, 1350, 417, 0, 418, 419,
	421, 0, 424, 425, 426, 427, 428, 0, 429, 1359,
	1308, 430, 431, 433, 434, 435, 437, 438, 439, 440,
	441, 442, 443, 444, 445, 446, 447, 448, 0, 449,
	450, 451, 453, 0, 454, 455, 458, 459, 460, 461,
	0, 463, 1360, 0, 464, 465, 466, 1340, 1341, 467,
	468, 469, 470, 471, 472, 475, 1373, 477, 478, 479,
	480, 481, 482, 483, 713, 485, 486, 487, 488, 489,
	490, 491, 675, 1351, 492, 494, 495, 1357, 679, 1352,
	846, 510, 511, 512, 513, 514, 515, 516, 518, 0,
	520, 521, 522, 1353, 523, 524, 525, 526, 0, 527,
	528, 529, 530, 531, 533, 536, 537, 538, 539, 0,
	542, 543, 544, 545, 546, 547, 548, 550, 551, 552,
	554, 555, 556, 714, 557, 558, 559, 560, 1311, 562,
	563, 715, 565, 566, 568, 569, 570, 571, 572, 573,
	724, 1344, 575, 685, 576, 577, 578, 579, 580, 0,
	582, 583, 584, 585, 586, 587, 590, 591, 592, 594,
	595, 1354, 596, 597, 1345, 599, 600, 849, 602, 603,
	604, 605, 606, 0, 725, 607, 1355, 608, 1356, 609,
	610, 611, 612, 613, 5896, 615, 617, 0, 1295, 619,
	620, 621, 623, 624, 625, 626, 629, 630, 631, 632,
	633, 0, 634, 636, 638, 716, 693, 1361, 1362, 1365,
	1363, 1364, 1366, 1367, 1377, 639, 640, 656, 507, 501,
	457, 499, 500, 504, 505, 508, 0, 0, 0, 1349,
	0, 0, 0, 1293, 0, 825, 0, 1314, 811, 0,
	1319, 1320, 1309, 797, 1299, 0, 0, 0, 1300, 0,
	0, 1289, 1290, 333, 0, 350, 831, 0, 399, 436,
	1304, 0, 1292, 496, 0, 549, 553, 0, 642, 1324,
	0, 1296, 0, 407, 1317, 836, 0, 842, 1318, 848,
	1316, 618, 0, 838, 839, 844, 338, 1393, 641, 712,
	0, 0, 0, 1310, 0, 0, 0, 0, 0, 0,
	0, 346, 0, 0, 0, 0, 840, 837, 841, 847,
	835, 845, 832, 843, 0, 540, 474, 691, 567, 345,
	391, 378, 420, 462, 574, 0, 0, 452, 622, 387,
	476, 0, 366, 509, 1346, 598, 473, 0, 581, 601,
	0, 493, 372, 532, 588, 589, 829, 834, 0, 850,
	0, 376, 377, 498, 358, 506, 703, 669, 561, 519,
	517, 0, 484, 541, 698, 1305, 0, 406, 0, 401,
	497, 637, 364, 616, 535, 502, 456, 564, 593, 403,
	388, 389, 432, 534, 422, 374, 627, 1374, 1376, 1372,
	1368, 1369, 1334, 1335, 1375, 1371, 423, 1370, 0, 635,
	1379, 1390, 1387, 1392, 1378, 1391, 1385, 1066, 682, 1382,
	1381, 1395, 1388, 1389, 628, 1394, 1333, 1386, 1384, 1383,
	1380, 0, 323, 324, 325, 326, 327, 328, 329, 330,
	331, 332, 334, 336, 0, 335, 337, 339, 340, 341,
	828, 342, 343, 344, 347, 348, 349, 351, 711, 352,
	353, 354, 355, 356, 357, 1358, 1336, 359, 360, 361,
	362, 363, 365, 367, 368, 369, 370, 371, 373, 5699,
	1347, 1337, 1342, 1348, 1338, 1339, 1343, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 390, 392, 393, 394,
	395, 396, 397, 400, 0, 402, 404, 0, 405, 408,
	0, 409, 410, 411, 412, 413, 414, 415, 416, 1350,
	417, 0, 418, 419, 421, 0, 424, 425, 426, 427,
	428, 0, 429, 1359, 5701, 430, 431, 433, 434, 435,
	437, 438, 439, 440, 441, 442, 443, 444, 445, 446,
	447, 448, 0, 449, 450, 451, 453, 0, 454, 455,
	458, 459, 460, 461, 0, 463, 1360, 0, 464, 465,
	466, 1340, 1341, 467, 468, 469, 470, 471, 472, 475,
	1373, 477, 478, 479, 480, 481, 482, 483, 713, 485,
	486, 487, 488, 489, 490, 491, 675, 1351, 492, 494,
	495, 1357, 679, 1352, 846, 510, 511, 512, 513, 514,
	515, 516, 518, 0, 520, 521, 522, 1353, 523, 524,
	525, 526, 0, 527, 528, 529, 530, 531, 533, 536,
	537, 538, 539, 0, 542, 543, 544, 545, 546, 547,
	548, 550, 551, 552, 554, 555, 556, 714, 557, 5700,
	559, 560, 1311, 562, 563, 715, 565, 566, 568, 569,
	570, 571, 572, 573, 724, 1344, 575, 685, 576, 577,
	578, 579, 580, 0, 582, 583, 584, 585, 586, 587,
	590, 591, 592, 594, 595, 1354, 596, 597, 1345, 599,
	600, 849, 602, 603, 604, 605, 606, 0, 725, 607,
	1355, 608, 1356, 609, 610, 611, 612, 613, 614, 615,
	617, 0, 1295, 619, 620, 621, 623, 624, 625, 626,
	629, 630, 631, 632, 633, 0, 634, 636, 638, 716,
	693, 1361, 1362, 1365, 1363, 1364, 1366, 1367, 1377, 639,
	640, 656, 507, 501, 457, 499, 500, 504, 505, 508,
	0, 0, 0, 1349, 0, 0, 0, 1293, 0, 825,
	0, 1314, 811, 0, 1319, 1320, 1309, 797, 1299, 0,
	0, 0, 5698, 0, 0, 1289, 1290, 333, 0, 350,
	831, 0, 399, 436, 1304, 0, 1292, 496, 0, 549,
	553, 0, 5895, 1324, 0, 1296, 0, 407, 1317, 836,
	0, 842, 1318, 848, 1316, 618, 0, 838, 839, 844,
	338, 1393, 641, 712, 0, 0, 0, 1310, 0, 0,
	0, 0, 0, 0, 0, 346, 0, 0, 0, 0,
	840, 837, 841, 847, 835, 845, 832, 843, 0, 540,
	474, 691, 567, 345, 391, 378, 420, 462, 574, 0,
	0, 452, 622, 387, 476, 0, 366, 509, 1346, 598,
	473, 0, 581, 601, 0, 493, 372, 532, 588, 589,
	829, 834, 0, 850, 0, 5897, 377, 498, 358, 506,
	703, 669, 561, 519, 517, 0, 484, 541, 698, 1305,
	0, 406, 0, 401, 497, 637, 364, 616, 535, 502,
	456, 564, 593, 403, 388, 389, 432, 534, 422, 374,
	627, 1374, 1376, 1372, 1368, 1369, 1334, 1335, 1375, 1371,
	423, 1370, 0, 635, 1379, 1390, 1387, 1392, 1378, 1391,
	1385, 1066, 682, 1382, 1381, 1395, 1388, 1389, 628, 1394,
	1333, 1386, 1384, 1383, 1380, 0, 323, 324, 325, 326,
	327, 328, 329, 330, 331, 332, 334, 336, 0, 335,
	337, 339, 340, 341, 828, 342, 343, 344, 347, 348,
	349, 351, 711, 352, 353, 354, 355, 356, 357, 1358,
	1336, 359, 360, 361, 362, 363, 365, 367, 368, 369,
	370, 371, 373, 375, 1347, 1337, 1342, 1348, 1338, 1339,
	1343, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	390, 392, 393, 394, 395, 396, 397, 400, 0, 402,
	404, 0, 405, 408, 0, 409, 410, 411, 412, 413,
	414, 415, 416, 1350, 417, 0, 418, 419, 421, 0,
	424, 425, 426, 427, 428, 0, 429, 1359, 1308, 430,
	431, 433, 434, 435, 437, 438, 439, 440, 441, 442,
	443, 444, 445, 446, 447, 448, 0, 449, 450, 451,
	453, 0, 454, 455, 458, 459, 460, 461, 0, 463,
	1360, 0, 464, 465, 466, 1340, 1341, 467, 468, 469,
	470, 471, 472, 475, 1373, 477, 478, 479, 480, 481,
	482, 483, 713, 485, 486, 487, 488, 489, 490, 491,
	675, 1351, 492, 494, 495, 1357, 679, 1352, 846, 510,
	511, 512, 513, 514, 515, 516, 518, 0, 520, 521,
	522, 1353, 523, 524, 525, 526, 0, 527, 528, 529,
	530, 531, 533, 536, 537, 538, 539, 0, 542, 543,
	544, 545, 546, 547, 548, 550, 551, 552, 554, 555,
	556, 714, 557, 558, 559, 560, 1311, 562, 563, 715,
	565, 566, 568, 569, 570, 571, 572, 573, 724, 1344,
	575, 685, 576, 577, 578, 579, 580, 0, 582, 583,
	584, 585, 586, 587, 590, 591, 592, 594, 595, 1354,
	596, 597, 1345, 599, 600, 849, 602, 603, 604, 605,
	606, 0, 725, 607, 1355, 608, 1356, 609, 610, 611,
	612, 613, 5896, 615, 617, 0, 1295, 619, 620, 621,
	623, 624, 625, 626, 629, 630, 631, 632, 633, 0,
	634, 636, 638, 716, 693, 1361, 1362, 1365, 1363, 1364,
	1366, 1367, 1377, 639, 640, 656, 507, 501, 457, 499,
	500, 504, 505, 508, 0, 0, 0, 1349, 0, 0,
	0, 1293, 0, 825, 0, 1314, 811, 0, 1319, 1320,
	1309, 797, 1299, 0, 0, 0, 1300, 0, 0, 1289,
	1290, 333, 0, 350, 831, 0, 399, 436, 1304, 0,
	1292, 496, 0, 549, 553, 0, 642, 1324, 0, 1296,
	0, 407, 1317, 836, 0, 842, 1318, 848, 1316, 618,
	0, 838, 839, 844, 338, 1393, 641, 712, 0, 0,
	0, 1310, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 840, 837, 841, 847, 835, 845,
	832, 843, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 1346, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 829, 834, 0, 850, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 1305, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 1374, 1376, 1372, 1368, 1369,
	1334, 1335, 1375, 1371, 423, 1370, 0, 635, 1379, 1390,
	1387, 1392, 1378, 1391, 1385, 1066, 682, 1382, 1381, 1395,
	1388, 1389, 628, 1394, 1333, 1386, 1384, 1383, 1380, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 828, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 1358, 1336, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 1347, 1337,
	1342, 1348, 1338, 1339, 1343, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 1350, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 1359, 1308, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 1360, 0, 464, 465, 466, 1340,
	1341, 467, 468, 469, 470, 471, 472, 475, 1373, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 5188, 675, 1351, 492, 494, 495, 1357,
	679, 1352, 846, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 1353, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	1311, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 1344, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 1354, 596, 597, 1345, 599, 600, 849,
	602, 603, 604, 605, 606, 0, 725, 607, 1355, 608,
	1356, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	1295, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 1361,
	1362, 1365, 1363, 1364, 1366, 1367, 1377, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 0, 0,
	0, 1349, 0, 0, 0, 1293, 0, 825, 0, 1314,
	811, 0, 1319, 1320, 1309, 797, 1299, 0, 0, 0,
	1300, 0, 0, 1289, 1290, 333, 0, 350, 831, 0,
	399, 436, 1304, 0, 1292, 496, 0, 549, 553, 0,
	642, 1324, 0, 1296, 0, 407, 1317, 836, 0, 842,
	1318, 848, 1316, 618, 0, 838, 839, 844, 338, 1393,
	641, 712, 0, 0, 0, 1310, 0, 0, 0, 0,
	0, 0, 0, 346, 0, 0, 0, 0, 840, 837,
	841, 847, 835, 845, 832, 843, 0, 540, 474, 691,
	567, 345, 391, 378, 420, 462, 574, 0, 0, 452,
	622, 387, 476, 0, 366, 509, 1346, 598, 473, 0,
	581, 601, 0, 493, 372, 532, 588, 589, 829, 834,
	0, 850, 0, 376, 377, 498, 358, 506, 703, 669,
	561, 519, 517, 0, 484, 541, 698, 1305, 0, 406,
	0, 401, 497, 637, 364, 616, 535, 502, 456, 564,
	593, 403, 388, 389, 432, 534, 422, 374, 627, 1374,
	1376, 1372, 1368, 1369, 1334, 1335, 1375, 1371, 423, 1370,
	0, 635, 1379, 1390, 1387, 1392, 1378, 1391, 1385, 1066,
	682, 1382, 1381, 1395, 1388, 1389, 628, 1394, 1333, 1386,
	1384, 1383, 1380, 0, 323, 324, 325, 326, 327, 328,
	329, 330, 331, 332, 334, 336, 0, 335, 337, 339,
	340, 341, 828, 342, 343, 344, 347, 348, 349, 351,
	711, 352, 353, 354, 355, 356, 357, 1358, 1336, 359,
	360, 361, 362, 363, 365, 367, 368, 369, 370, 371,
	373, 375, 1347, 1337, 1342, 1348, 1338, 1339, 1343, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 390, 392,
	393, 394, 395, 396, 397, 400, 0, 402, 404, 0,
	405, 408, 0, 409, 410, 411, 412, 413, 414, 415,
	416, 1350, 417, 0, 418, 419, 421, 0, 424, 425,
	426, 427, 428, 0, 429, 1359, 1308, 430, 431, 433,
	434, 435, 437, 438, 439, 440, 441, 442, 443, 444,
	445, 446, 447, 448, 0, 449, 450, 451, 453, 0,
	454, 455, 458, 459, 460, 461, 0, 463, 1360, 0,
	464, 465, 466, 1340, 1341, 467, 468, 469, 470, 471,
	472, 475, 1373, 477, 478, 479, 480, 481, 482, 483,
	713, 485, 486, 487, 488, 489, 490, 491, 675, 1351,
	492, 494, 495, 1357, 679, 1352, 846, 510, 511, 512,
	513, 514, 515, 516, 518, 0, 520, 521, 522, 1353,
	523, 524, 525, 526, 0, 527, 528, 529, 530, 531,
	533, 536, 537, 538, 539, 0, 542, 543, 544, 545,
	546, 547, 548, 550, 551, 552, 554, 555, 556, 714,
	557, 558, 559, 560, 1311, 562, 563, 715, 565, 566,
	568, 569, 570, 571, 572, 573, 724, 1344, 575, 685,
	576, 577, 578, 579, 580, 0, 582, 583, 584, 585,
	586, 587, 590, 591, 592, 594, 595, 1354, 596, 597,
	1345, 599, 600, 849, 602, 603, 604, 605, 606, 0,
	725, 607, 1355, 608, 1356, 609, 610, 611, 612, 613,
	614, 615, 617, 0, 1295, 619, 620, 621, 623, 624,
	625, 626, 629, 630, 631, 632, 633, 0, 634, 636,
	638, 716, 5175, 1361, 1362, 1365, 1363, 1364, 1366, 1367,
	1377, 639, 640, 656, 507, 501, 457, 499, 500, 504,
	505, 508, 0, 0, 0, 1349, 0, 0, 0, 1293,
	0, 825, 0, 1314, 811, 0, 1319, 1320, 1309, 797,
	1299, 0, 0, 0, 1300, 0, 0, 1289, 1290, 333,
	0, 350, 831, 0, 399, 436, 1304, 0, 1292, 496,
	0, 549, 553, 0, 642, 1324, 0, 1296, 0, 407,
	1317, 836, 0, 842, 1318, 848, 1316, 618, 0, 838,
	839, 844, 338, 1393, 641, 712, 0, 0, 0, 1310,
	0, 0, 0, 0, 0, 0, 0, 346, 0, 0,
	0, 0, 840, 837, 841, 847, 835, 845, 832, 843,
	0, 540, 474, 691, 567, 345, 391, 378, 420, 462,
	574, 0, 0, 452, 622, 387, 476, 0, 366, 509,
	1346, 598, 473, 0, 581, 601, 0, 493, 372, 532,
	588, 589, 829, 834, 0, 850, 0, 4176, 377, 498,
	358, 506, 703, 669, 561, 519, 517, 0, 484, 541,
	698, 1305, 0, 406, 0, 401, 497, 637, 364, 616,
	535, 502, 456, 564, 593, 403, 388, 389, 432, 534,
	422, 374, 627, 1374, 1376, 1372, 1368, 1369, 1334, 1335,
	1375, 1371, 423, 1370, 0, 635, 1379, 1390, 1387, 1392,
	1378, 1391, 1385, 1066, 682, 1382, 1381, 1395, 1388, 1389,
	628, 1394, 1333, 1386, 1384, 1383, 1380, 0, 323, 324,
	325, 326, 327, 328, 329, 330, 331, 332, 334, 336,
	0, 335, 337, 339, 340, 341, 828, 342, 343, 344,
	347, 348, 349, 351, 711, 352, 353, 354, 355, 356,
	357, 1358, 1336, 359, 360, 361, 362, 363, 365, 367,
	368, 369, 370, 371, 373, 375, 1347, 1337, 1342, 1348,
	1338, 1339, 1343, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 390, 392, 393, 394, 395, 396, 397, 400,
	0, 402, 404, 0, 405, 408, 0, 409, 410, 411,
	412, 413, 414, 415, 416, 1350, 417, 0, 418, 419,
	421, 0, 424, 425, 426, 427, 428, 0, 429, 1359,
	1308, 430, 431, 433, 434, 435, 437, 438, 439, 440,
	441, 442, 443, 444, 445, 446, 447, 448, 0, 449,
	450, 451, 453, 0, 454, 455, 458, 459, 460, 461,
	0, 463, 1360, 0, 464, 465, 466, 1340, 1341, 467,
	468, 469, 470, 471, 472, 475, 1373, 477, 478, 479,
	480, 481, 482, 483, 713, 485, 486, 487, 488, 489,
	490, 491, 675, 1351, 492, 494, 495, 1357, 679, 1352,
	846, 510, 511, 512, 513, 514, 515, 516, 518, 0,
	520, 521, 522, 1353, 523, 524, 525, 526, 0, 527,
	528, 529, 530, 531, 533, 536, 537, 538, 539, 0,
	542, 543, 544, 545, 546, 547, 548, 550, 551, 552,
	554, 555, 556, 714, 557, 558, 559, 560, 1311, 562,
	563, 715, 565, 566, 568, 569, 570, 571, 572, 573,
	724, 1344, 575, 685, 576, 577, 578, 579, 580, 0,
	582, 583, 584, 585, 586, 587, 590, 591, 592, 594,
	595, 1354, 596, 597, 1345, 599, 600, 849, 602, 603,
	604, 605, 606, 0, 725, 607, 1355, 608, 1356, 609,
	610, 611, 612, 613, 614, 615, 617, 0, 1295, 619,
	620, 621, 623, 624, 625, 626, 629, 630, 631, 632,
	633, 0, 634, 636, 638, 716, 693, 1361, 1362, 1365,
	1363, 1364, 1366, 1367, 1377, 639, 640, 656, 507, 501,
	457, 499, 500, 504, 505, 508, 0, 0, 0, 1349,
	0, 0, 0, 1293, 0, 825, 0, 3210, 811, 0,
	1319, 1320, 1309, 797, 1299, 0, 0, 0, 1300, 0,
	0, 1289, 1290, 333, 0, 350, 831, 0, 399, 436,
	1304, 0, 1292, 496, 0, 549, 553, 0, 642, 1324,
	0, 1296, 0, 407, 1317, 836, 0, 842, 1318, 848,
	1316, 618, 0, 838, 839, 844, 338, 1393, 641, 712,
	0, 0, 0, 1310, 0, 0, 0, 0, 0, 0,
	0, 346, 0, 0, 0, 0, 840, 837, 841, 847,
	835, 845, 832, 843, 0, 540, 474, 691, 567, 345,
	391, 378, 420, 462, 574, 0, 0, 452, 622, 387,
	476, 0, 366, 509, 1346, 598, 473, 0, 581, 601,
	0, 493, 372, 532, 588, 589, 829, 834, 0, 850,
	0, 376, 377, 498, 358, 506, 703, 669, 561, 519,
	517, 0, 484, 541, 698, 1305, 0, 406, 0, 401,
	497, 637, 364, 616, 535, 502, 456, 564, 593, 403,
	388, 389, 432, 534, 422, 374, 627, 1374, 1376, 1372,
	1368, 1369, 1334, 1335, 1375, 1371, 423, 1370, 0, 635,
	1379, 1390, 1387, 1392, 1378, 1391, 1385, 1066, 682, 1382,
	1381, 1395, 1388, 1389, 628, 1394, 1333, 1386, 1384, 1383,
	1380, 0, 323, 324, 325, 326, 327, 328, 329, 330,
	331, 332, 334, 336, 0, 335, 337, 339, 340, 341,
	828, 342, 343, 344, 347, 348, 349, 351, 711, 352,
	353, 354, 355, 356, 357, 1358, 1336, 359, 360, 361,
	362, 363, 365, 367, 368, 369, 370, 371, 373, 375,
	1347, 1337, 1342, 1348, 1338, 1339, 1343, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 390, 392, 393, 394,
	395, 396, 397, 400, 0, 402, 404, 0, 405, 408,
	0, 409, 410, 411, 412, 413, 414, 415, 416, 1350,
	417, 0, 418, 419, 421, 0, 424, 425, 426, 427,
	428, 0, 429, 1359, 1308, 430, 431, 433, 434, 435,
	437, 438, 439, 440, 441, 442, 443, 444, 445, 446,
	447, 448, 0, 449, 450, 451, 453, 0, 454, 455,
	458, 459, 460, 461, 0, 463, 1360, 0, 464, 465,
	466, 1340, 1341, 467, 468, 469, 470, 471, 472, 475,
	1373, 477, 478, 479, 480, 481, 482, 483, 713, 485,
	486, 487, 488, 489, 490, 491, 675, 1351, 492, 494,
	495, 1357, 679, 1352, 846, 510, 511, 512, 513, 514,
	515, 516, 518, 0, 520, 521, 522, 1353, 523, 524,
	525, 526, 0, 527, 528, 529, 530, 531, 533, 536,
	537, 538, 539, 0, 542, 543, 544, 545, 546, 547,
	548, 550, 551, 552, 554, 555, 556, 714, 557, 558,
	559, 560, 1311, 562, 563, 715, 565, 566, 568, 569,
	570, 571, 572, 573, 724, 1344, 575, 685, 576, 577,
	578, 579, 580, 0, 582, 583, 584, 585, 586, 587,
	590, 591, 592, 594, 595, 1354, 596, 597, 1345, 599,
	600, 849, 602, 603, 604, 605, 606, 0, 725, 607,
	1355, 608, 1356, 609, 610, 611, 612, 613, 614, 615,
	617, 0, 1295, 619, 620, 621, 623, 624, 625, 626,
	629, 630, 631, 632, 633, 0, 634, 636, 638, 716,
	693, 1361, 1362, 1365, 1363, 1364, 1366, 1367, 1377, 639,
	640, 656, 507, 501, 457, 499, 500, 504, 505, 508,
	0, 0, 0, 1349, 0, 0, 0, 1293, 0, 825,
	0, 1314, 811, 0, 1319, 1320, 1309, 797, 1299, 0,
	0, 0, 1300, 0, 0, 1289, 1290, 333, 0, 350,
	831, 0, 399, 436, 1304, 0, 1292, 496, 0, 549,
	553, 0, 642, 1324, 0, 1296, 0, 407, 1317, 836,
	0, 842, 1318, 848, 1316, 618, 0, 838, 839, 844,
	338, 1393, 641, 712, 0, 0, 0, 1310, 0, 0,
	0, 0, 0, 0, 0, 346, 0, 0, 0, 0,
	840, 837, 841, 847, 835, 845, 832, 843, 0, 540,
	474, 691, 567, 345, 391, 378, 420, 462, 574, 0,
	0, 452, 622, 387, 476, 0, 366, 509, 1346, 598,
	473, 0, 581, 601, 0, 493, 372, 532, 588, 589,
	829, 834, 0, 850, 0, 376, 377, 498, 358, 506,
	703, 669, 561, 519, 517, 0, 484, 541, 698, 1305,
	0, 406, 0, 401, 497, 637, 364, 616, 535, 502,
	456, 564, 593, 403, 388, 389, 432, 534, 422, 374,
	627, 1374, 1376, 1372, 1368, 1369, 1334, 1335, 1375, 1371,
	423, 1370, 0, 635, 1379, 1390, 1387, 1392, 1378, 1391,
	1385, 1066, 682, 1382, 1381, 1395, 1388, 1389, 628, 1394,
	1333, 1386, 1384, 1383, 1380, 0, 323, 324, 325, 326,
	327, 328, 329, 330, 331, 332, 334, 336, 0, 335,
	337, 339, 340, 341, 828, 342, 343, 344, 347, 348,
	349, 351, 711, 352, 353, 354, 355, 356, 357, 1358,
	1336, 359, 360, 361, 362, 363, 365, 367, 368, 369,
	370, 371, 373, 375, 1347, 1337, 1342, 1348, 1338, 1339,
	1343, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	390, 392, 393, 394, 395, 396, 397, 400, 0, 402,
	404, 0, 405, 408, 0, 409, 410, 411, 412, 413,
	414, 415, 416, 1350, 417, 0, 418, 419, 421, 0,
	424, 425, 426, 427, 428, 0, 429, 1359, 1308, 430,
	431, 433, 434, 435, 437, 438, 439, 440, 441, 442,
	443, 444, 445, 446, 447, 448, 0, 449, 450, 451,
	453, 0, 454, 455, 458, 459, 460, 461, 0, 463,
	1360, 0, 464, 465, 466, 1340, 1341, 467, 468, 469,
	470, 471, 472, 475, 1373, 477, 478, 479, 480, 481,
	482, 483, 713, 485, 486, 487, 488, 489, 490, 491,
	675, 1351, 492, 494, 495, 1357, 679, 1352, 846, 510,
	511, 512, 513, 514, 515, 516, 518, 0, 520, 521,
	522, 1353, 523, 524, 525, 526, 0, 527, 528, 529,
	530, 531, 533, 536, 537, 538, 539, 0, 542, 543,
	544, 545, 546, 547, 548, 550, 551, 552, 554, 555,
	556, 714, 557, 558, 559, 560, 1311, 562, 563, 715,
	565, 566, 568, 569, 570, 571, 572, 573, 724, 1344,
	575, 685, 576, 577, 578, 579, 580, 0, 582, 583,
	584, 585, 586, 587, 590, 591, 592, 594, 595, 1354,
	596, 597, 1345, 599, 600, 849, 602, 603, 604, 605,
	606, 0, 725, 607, 1355, 608, 1356, 609, 610, 611,
	612, 613, 614, 615, 617, 0, 1295, 619, 620, 621,
	623, 624, 625, 626, 629, 630, 631, 632, 633, 0,
	634, 636, 638, 716, 693, 1361, 1362, 1365, 1363, 1364,
	1366, 1367, 1377, 639, 640, 656, 507, 501, 457, 499,
	500, 504, 505, 508, 0, 0, 0, 1349, 0, 0,
	0, 1293, 0, 825, 0, 1314, 811, 0, 1319, 1320,
	1309, 797, 1299, 0, 0, 0, 1300, 0, 0, 2047,
	2048, 333, 0, 350, 831, 0, 399, 436, 1304, 0,
	0, 496, 0, 549, 553, 0, 642, 1324, 0, 5508,
	0, 407, 1317, 836, 0, 842, 1318, 848, 1316, 618,
	0, 838, 839, 844, 338, 1393, 641, 712, 0, 0,
	0, 1310, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 840, 837, 841, 847, 835, 845,
	832, 843, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 1346, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 829, 834, 0, 850, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 1305, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 1374, 1376, 1372, 1368, 1369,
	1334, 1335, 1375, 1371, 423, 1370, 0, 635, 1379, 1390,
	1387, 1392, 1378, 1391, 1385, 1066, 682, 1382, 1381, 1395,
	1388, 1389, 628, 1394, 1333, 1386, 1384, 1383, 1380, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 828, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 1358, 1336, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 1347, 1337,
	1342, 1348, 1338, 1339, 1343, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 1350, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 1359, 1308, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 1360, 0, 464, 465, 466, 1340,
	1341, 467, 468, 469, 470, 471, 472, 475, 1373, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 1351, 492, 494, 495, 1357,
	679, 1352, 846, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 1353, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	3348, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 1344, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 1354, 596, 597, 1345, 599, 600, 849,
	602, 603, 604, 605, 606, 0, 725, 607, 1355, 608,
	1356, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 1361,
	1362, 1365, 1363, 1364, 1366, 1367, 1377, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 0, 0,
	0, 1349, 0, 0, 0, 0, 0, 825, 0, 1314,
	811, 0, 1319, 1320, 1309, 797, 1299, 0, 0, 0,
	3204, 0, 0, 3345, 3346, 333, 0, 350, 831, 0,
	399, 436, 1304, 0, 0, 496, 0, 549, 553, 0,
	642, 1324, 0, 0, 0, 407, 1317, 836, 0, 842,
	1318, 848, 1316, 618, 0, 838, 839, 844, 338, 1393,
	641, 712, 0, 0, 0, 1310, 0, 0, 0, 0,
	0, 0, 0, 346, 0, 0, 0, 0, 840, 837,
	841, 847, 835, 845, 832, 843, 0, 540, 474, 691,
	567, 345, 391, 378, 420, 462, 574, 0, 0, 452,
	622, 387, 476, 0, 366, 509, 1346, 598, 473, 0,
	581, 601, 0, 493, 372, 532, 588, 589, 829, 834,
	0, 850, 0, 376, 377, 498, 358, 506, 703, 669,
	561, 519, 517, 0, 484, 541, 698, 1305, 0, 406,
	0, 401, 497, 637, 364, 616, 535, 502, 456, 564,
	593, 403, 388, 389, 432, 534, 422, 374, 627, 1374,
	1376, 1372, 1368, 1369, 1334, 1335, 1375, 1371, 423, 1370,
	0, 635, 1379, 1390, 1387, 1392, 1378, 1391, 1385, 1066,
	682, 1382, 1381, 1395, 1388, 1389, 628, 1394, 1333, 1386,
	1384, 1383, 1380, 0, 323, 324, 325, 326, 327, 328,
	329, 330, 331, 332, 334, 336, 0, 335, 337, 339,
	340, 341, 828, 342, 343, 344, 347, 348, 349, 351,
	711, 352, 353, 354, 355, 356, 357, 1358, 1336, 359,
	360, 361, 362, 363, 365, 367, 368, 369, 370, 371,
	373, 375, 1347, 1337, 1342, 1348, 1338, 1339, 1343, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 390, 392,
	393, 394, 395, 396, 397, 400, 0, 402, 404, 0,
	405, 408, 0, 409, 410, 411, 412, 413, 414, 415,
	416, 1350, 417, 0, 418, 419, 421, 0, 424, 425,
	426, 427, 428, 0, 429, 1359, 1308, 430, 431, 433,
	434, 435, 437, 438, 439, 440, 441, 442, 443, 444,
	445, 446, 447, 448, 0, 449, 450, 451, 453, 0,
	454, 455, 458, 459, 460, 461, 0, 463, 1360, 0,
	464, 465, 466, 1340, 1341, 467, 468, 469, 470, 471,
	472, 475, 1373, 477, 478, 479, 480, 481, 482, 483,
	713, 485, 486, 487, 488, 489, 490, 491, 675, 1351,
	492, 494, 495, 1357, 679, 1352, 846, 510, 511, 512,
	513, 514, 515, 516, 518, 0, 520, 521, 522, 1353,
	523, 524, 525, 526, 0, 527, 528, 529, 530, 531,
	533, 536, 537, 538, 539, 0, 542, 543, 544, 545,
	546, 547, 548, 550, 551, 552, 554, 555, 556, 714,
	557, 558, 559, 560, 3348, 562, 563, 715, 565, 566,
	568, 569, 570, 571, 572, 573, 724, 1344, 575, 685,
	576, 577, 578, 579, 580, 0, 582, 583, 584, 585,
	586, 587, 590, 591, 592, 594, 595, 1354, 596, 597,
	1345, 599, 600, 849, 602, 603, 604, 605, 606, 0,
	725, 607, 1355, 608, 1356, 609, 610, 611, 612, 613,
	614, 615, 617, 0, 0, 619, 620, 621, 623, 624,
	625, 626, 629, 630, 631, 632, 633, 0, 634, 636,
	638, 716, 693, 1361, 1362, 1365, 1363, 1364, 1366, 1367,
	1377, 639, 640, 656, 507, 501, 457, 499, 500, 504,
	505, 508, 0, 0, 0, 1349, 0, 0, 0, 0,
	0, 825, 0, 1314, 811, 0, 1319, 1320, 0, 797,
	1299, 0, 0, 0, 3204, 0, 0, 3345, 3346, 333,
	0, 350, 831, 0, 399, 436, 1304, 0, 0, 496,
	0, 549, 553, 0, 642, 1324, 0, 0, 0, 407,
	1317, 836, 0, 842, 1318, 848, 1316, 618, 0, 838,
	839, 844, 338, 1393, 641, 712, 0, 0, 0, 503,
	0, 0, 0, 0, 0, 0, 0, 346, 0, 0,
	0, 0, 840, 837, 841, 847, 835, 845, 832, 843,
	0, 540, 474, 691, 567, 345, 391, 378, 420, 462,
	574, 0, 0, 452, 622, 387, 476, 0, 366, 509,
	1346, 598, 473, 0, 581, 601, 0, 493, 372, 532,
	588, 589, 829, 834, 0, 850, 0, 376, 377, 498,
	358, 506, 703, 669, 3203, 519, 517, 0, 484, 541,
	698, 1305, 0, 406, 0, 401, 497, 637, 364, 616,
	535, 502, 456, 564, 593, 403, 388, 389, 432, 534,
	422, 374, 627, 1374, 1376, 1372, 1368, 1369, 1334, 1335,
	1375, 1371, 423, 1370, 0, 635, 1379, 1390, 1387, 1392,
	1378, 1391, 1385, 1066, 682, 1382, 1381, 1395, 1388, 1389,
	628, 1394, 1333, 1386, 1384, 1383, 1380, 0, 323, 324,
	325, 326, 327, 328, 329, 330, 331, 332, 334, 336,
	0, 335, 337, 339, 340, 341, 828, 342, 343, 344,
	347, 348, 349, 351, 711, 352, 353, 354, 355, 356,
	357, 1358, 1336, 359, 360, 361, 362, 363, 365, 367,
	368, 369, 370, 371, 373, 375, 1347, 1337, 1342, 1348,
	1338, 1339, 1343, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 390, 392, 393, 394, 395, 396, 397, 400,
	0, 402, 404, 0, 405, 408, 0, 409, 410, 411,
	412, 413, 414, 415, 416, 1350, 417, 0, 418, 419,
	421, 0, 424, 425, 426, 427, 428, 0, 429, 1359,
	1308, 430, 431, 433, 434, 435, 437, 438, 439, 440,
	441, 442, 443, 444, 445, 446, 447, 448, 0, 449,
	450, 451, 453, 0, 454, 455, 458, 459, 460, 461,
	0, 463, 1360, 0, 464, 465, 466, 1340, 1341, 467,
	468, 469, 470, 471, 472, 475, 1373, 477, 478, 479,
	480, 481, 482, 483, 713, 485, 486, 487, 488, 489,
	490, 491, 675, 1351, 492, 494, 495, 1357, 679, 1352,
	846, 510, 511, 512, 513, 514, 515, 516, 518, 0,
	520, 521, 522, 1353, 523, 524, 525, 526, 0, 527,
	528, 529, 530, 531, 533, 536, 537, 538, 539, 0,
	542, 543, 544, 545, 546, 547, 548, 550, 551, 552,
	554, 555, 556, 714, 557, 558, 559, 560, 3202, 562,
	563, 715, 565, 566, 568, 569, 570, 571, 572, 573,
	724, 1344, 575, 685, 576, 577, 578, 579, 580, 0,
	582, 583, 584, 585, 586, 587, 590, 591, 592, 594,
	595, 1354, 596, 597, 1345, 599, 600, 849, 602, 603,
	604, 605, 606, 0, 725, 607, 1355, 608, 1356, 609,
	610, 611, 612, 613, 614, 615, 617, 0, 0, 619,
	620, 621, 623, 624, 625, 626, 629, 630, 631, 632,
	633, 0, 634, 636, 638, 716, 693, 1361, 1362, 1365,
	1363, 1364, 1366, 1367, 1377, 639, 640, 656, 507, 501,
	457, 499, 500, 504, 505, 508, 0, 0, 0, 1349,
	0, 0, 0, 0, 0, 825, 0, 1314, 811, 0,
	1319, 1320, 1309, 797, 1299, 0, 0, 0, 3204, 0,
	0, 3200, 3201, 333, 0, 350, 831, 0, 399, 436,
	1304, 0, 1292, 496, 0, 549, 553, 0, 0, 1324,
	0, 1296, 0, 407, 1317, 0, 0, 0, 1318, 0,
	1316, 618, 0, 0, 0, 0, 338, 1393, 641, 712,
	0, 0, 0, 1310, 0, 0, 0, 0, 0, 0,
	0, 346, 0, 0, 0, 0, 840, 837, 841, 847,
	835, 845, 832, 843, 0, 540, 474, 691, 567, 345,
	391, 378, 420, 462, 574, 0, 0, 452, 622, 387,
	476, 0, 366, 509, 1346, 598, 473, 0, 581, 601,
	0, 493, 372, 532, 588, 589, 829, 834, 0, 850,
	0, 5897, 377, 498, 358, 506, 703, 669, 561, 519,
	517, 0, 484, 541, 698, 1305, 0, 406, 0, 401,
	497, 637, 364, 616, 535, 502, 456, 564, 593, 403,
	388, 389, 432, 534, 422, 374, 627, 1374, 1376, 1372,
	1368, 1369, 1334, 1335, 1375, 1371, 423, 1370, 0, 635,
	1379, 1390, 1387, 1392, 1378, 1391, 1385, 1066, 682, 1382,
	1381, 1395, 1388, 1389, 628, 1394, 1333, 1386, 1384, 1383,
	1380, 0, 323, 324, 325, 326, 327, 328, 329, 330,
	331, 332, 334, 336, 0, 335, 337, 339, 340, 341,
	828, 342, 343, 344, 347, 348, 349, 351, 711, 352,
	353, 354, 355, 356, 357, 1358, 1336, 359, 360, 361,
	362, 363, 365, 367, 368, 369, 370, 371, 373, 375,
	1347, 1337, 1342, 1348, 1338, 1339, 1343, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 390, 392, 393, 394,
	395, 396, 397, 400, 0, 402, 404, 0, 405, 408,
	0, 409, 410, 411, 412, 413, 414, 415, 416, 1350,
	417, 0, 418, 419, 421, 0, 424, 425, 426, 427,
	428, 0, 429, 1359, 1308, 430, 431, 433, 434, 435,
	437, 438, 439, 440, 441, 442, 443, 444, 445, 446,
	447, 448, 0, 449, 450, 451, 453, 0, 454, 455,
	458, 459, 460, 461, 0, 463, 1360, 0, 464, 465,
	466, 1340, 1341, 467, 468, 469, 470, 471, 472, 475,
	1373, 477, 478, 479, 480, 481, 482, 483, 713, 485,
	486, 487, 488, 489, 490, 491, 675, 1351, 492, 494,
	495, 1357, 679, 1352, 846, 510, 511, 512, 513, 514,
	515, 516, 518, 0, 520, 521, 522, 1353, 523, 524,
	525, 526, 0, 527, 528, 529, 530, 531, 533, 536,
	537, 538, 539, 0, 542, 543, 544, 545, 546, 547,
	548, 550, 551, 552, 554, 555, 556, 714, 557, 558,
	559, 560, 1311, 562, 563, 715, 565, 566, 568, 569,
	570, 571, 572, 573, 724, 1344, 575, 685, 576, 577,
	578, 579, 580, 0, 582, 583, 584, 585, 586, 587,
	590, 591, 592, 594, 595, 1354, 596, 597, 1345, 599,
	600, 849, 602, 603, 604, 605, 606, 0, 725, 607,
	1355, 608, 1356, 609, 610, 611, 612, 613, 5896, 615,
	617, 0, 1295, 619, 620, 621, 623, 624, 625, 626,
	629, 630, 631, 632, 633, 0, 634, 636, 638, 716,
	693, 1361, 1362, 1365, 1363, 1364, 1366, 1367, 1377, 639,
	640, 656, 507, 501, 457, 499, 500, 504, 505, 508,
	0, 0, 0, 1349, 0, 0, 0, 0, 0, 825,
	0, 1314, 811, 0, 1319, 1320, 0, 797, 1299, 0,
	0, 0, 1300, 0, 0, 1289, 1290, 333, 0, 350,
	831, 0, 399, 436, 1304, 0, 0, 496, 0, 549,
	553, 0, 642, 1324, 0, 0, 0, 407, 1317, 836,
	0, 842, 1318, 848, 1316, 618, 0, 838, 839, 844,
	338, 1393, 641, 712, 0, 0, 0, 503, 0, 0,
	0, 0, 0, 0, 0, 346, 0, 0, 0, 0,
	840, 837, 841, 847, 835, 845, 832, 843, 0, 540,
	474, 691, 567, 345, 391, 378, 420, 462, 574, 0,
	0, 452, 622, 387, 476, 0, 366, 509, 1346, 598,
	473, 0, 581, 601, 0, 493, 372, 532, 588, 589,
	829, 834, 0, 850, 0, 376, 377, 498, 358, 506,
	703, 669, 561, 519, 517, 0, 484, 541, 698, 1305,
	0, 406, 0, 401, 497, 637, 364, 616, 535, 502,
	456, 564, 593, 403, 388, 389, 432, 534, 422, 374,
	627, 1374, 1376, 1372, 1368, 1369, 1334, 1335, 1375, 1371,
	423, 1370, 0, 635, 1379, 1390, 1387, 1392, 1378, 1391,
	1385, 1066, 682, 1382, 1381, 1395, 1388, 1389, 628, 1394,
	1333, 1386, 1384, 1383, 1380, 0, 323, 324, 325, 326,
	327, 328, 329, 330, 331, 332, 334, 336, 0, 335,
	337, 339, 340, 341, 828, 342, 343, 344, 347, 348,
	349, 351, 711, 352, 353, 354, 355, 356, 357, 1358,
	1336, 359, 360, 361, 362, 363, 365, 367, 368, 369,
	370, 371, 373, 375, 1347, 1337, 1342, 1348, 1338, 1339,
	1343, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	390, 392, 393, 394, 395, 396, 397, 400, 0, 402,
	404, 0, 405, 408, 0, 409, 410, 411, 412, 413,
	414, 415, 416, 1350, 417, 0, 418, 419, 421, 0,
	424, 425, 426, 427, 428, 0, 429, 1359, 1308, 430,
	431, 433, 434, 435, 437, 438, 439, 440, 441, 442,
	443, 444, 445, 446, 447, 448, 0, 449, 450, 451,
	453, 0, 454, 455, 458, 459, 460, 461, 0, 463,
	1360, 0, 464, 465, 466, 1340, 1341, 467, 468, 469,
	470, 471, 472, 475, 1373, 477, 478, 479, 480, 481,
	482, 483, 713, 485, 486, 487, 488, 489, 490, 491,
	675, 1351, 492, 494, 495, 1357, 679, 1352, 846, 510,
	511, 512, 513, 514, 515, 516, 518, 0, 520, 521,
	522, 1353, 523, 524, 525, 526, 0, 527, 528, 529,
	530, 531, 533, 536, 537, 538, 539, 0, 542, 543,
	544, 545, 546, 547, 548, 550, 551, 552, 554, 555,
	556, 714, 557, 558, 559, 560, 3348, 562, 563, 715,
	565, 566, 568, 569, 570, 571, 572, 573, 724, 1344,
	575, 685, 576, 577, 578, 579, 580, 0, 582, 583,
	584, 585, 586, 587, 590, 591, 592, 594, 595, 1354,
	596, 597, 1345, 599, 600, 849, 602, 603, 604, 605,
	606, 0, 725, 607, 1355, 608, 1356, 609, 610, 611,
	612, 613, 614, 615, 617, 0, 0, 619, 620, 621,
	623, 624, 625, 626, 629, 630, 631, 632, 633, 0,
	634, 636, 638, 716, 693, 1361, 1362, 1365, 1363, 1364,
	1366, 1367, 1377, 639, 640, 656, 507, 501, 457, 499,
	500, 504, 505, 508, 0, 0, 0, 1349, 0, 825,
	0, 1314, 811, 0, 1319, 1320, 0, 797, 1299, 0,
	0, 0, 0, 0, 0, 0, 3204, 333, 0, 350,
	831, 0, 399, 436, 1304, 0, 0, 496, 0, 549,
	553, 0, 642, 1324, 0, 0, 0, 407, 1317, 836,
	0, 842, 1318, 848, 1316, 618, 0, 838, 839, 844,
	338, 1393, 641, 712, 0, 0, 0, 503, 0, 0,
	0, 0, 0, 0, 0, 346, 0, 0, 0, 0,
	840, 837, 841, 847, 835, 845, 832, 843, 0, 540,
	474, 691, 567, 345, 391, 378, 420, 462, 574, 0,
	0, 452, 622, 387, 476, 0, 366, 509, 1346, 598,
	473, 0, 581, 601, 0, 493, 372, 532, 588, 589,
	829, 834, 0, 850, 0, 376, 377, 498, 358, 506,
	703, 669, 561, 519, 517, 0, 484, 541, 4784, 1305,
	0, 406, 0, 401, 497, 637, 364, 616, 535, 502,
	456, 564, 593, 403, 388, 389, 432, 534, 422, 374,
	627, 1374, 1376, 1372, 1368, 1369, 1334, 1335, 1375, 1371,
	423, 1370, 0, 635, 1379, 1390, 1387, 1392, 1378, 1391,
	1385, 1066, 682, 1382, 1381, 1395, 1388, 1389, 628, 1394,
	1333, 1386, 1384, 1383, 1380, 0, 323, 324, 325, 326,
	327, 328, 329, 330, 331, 332, 334, 336, 0, 335,
	337, 339, 340, 341, 828, 342, 343, 344, 347, 348,
	349, 351, 711, 352, 353, 354, 355, 356, 357, 1358,
	1336, 359, 360, 361, 362, 363, 365, 367, 368, 369,
	370, 371, 373, 375, 1347, 1337, 1342, 1348, 1338, 1339,
	1343, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	390, 392, 393, 394, 395, 396, 397, 400, 0, 402,
	404, 0, 405, 408, 0, 409, 410, 411, 412, 413,
	414, 415, 416, 1350, 417, 0, 418, 419, 421, 0,
	424, 425, 426, 427, 428, 0, 429, 1359, 1308, 430,
	431, 433, 434, 435, 437, 438, 439, 440, 441, 442,
	443, 444, 445, 446, 447, 448, 0, 449, 450, 451,
	453, 0, 454, 455, 458, 459, 460, 461, 0, 463,
	1360, 0, 464, 465, 466, 1340, 1341, 467, 468, 469,
	470, 471, 472, 475, 1373, 477, 478, 479, 480, 481,
	482, 483, 713, 485, 486, 487, 488, 489, 490, 491,
	675, 1351, 492, 494, 495, 1357, 679, 1352, 846, 510,
	511, 512, 513, 514, 515, 516, 518, 0, 520, 521,
	522, 1353, 523, 524, 525, 526, 0, 527, 528, 529,
	530, 531, 533, 536, 537, 538, 539, 0, 542, 543,
	544, 545, 546, 547, 548, 550, 551, 552, 554, 555,
	556, 714, 557, 558, 559, 560, 3348, 562, 563, 715,
	565, 566, 568, 569, 570, 571, 572, 573, 724, 1344,
	575, 685, 576, 577, 578, 579, 580, 0, 582, 583,
	584, 585, 586, 587, 590, 591, 592, 594, 595, 1354,
	596, 597, 1345, 599, 600, 849, 602, 603, 604, 605,
	606, 0, 725, 607, 1355, 608, 1356, 609, 610, 611,
	612, 613, 614, 615, 617, 0, 0, 619, 620, 621,
	623, 624, 625, 626, 629, 630, 631, 632, 633, 0,
	634, 636, 638, 716, 693, 1361, 1362, 1365, 1363, 1364,
	1366, 1367, 1377, 639, 640, 656, 507, 501, 457, 499,
	500, 504, 505, 508, 0, 0, 0, 1349, 0, 825,
	0, 1314, 811, 0, 1319, 1320, 0, 797, 1299, 0,
	0, 0, 0, 0, 0, 0, 3204, 333, 0, 350,
	831, 0, 399, 436, 1304, 0, 0, 496, 0, 549,
	553, 0, 642, 1324, 0, 0, 0, 407, 1317, 836,
	0, 842, 1318, 848, 1316, 618, 0, 838, 839, 844,
	338, 1393, 641, 712, 0, 0, 0, 503, 0, 0,
	0, 0, 0, 0, 0, 4726, 0, 0, 0, 0,
	840, 837, 841, 847, 835, 845, 832, 843, 0, 540,
	474, 691, 567, 345, 391, 378, 420, 462, 574, 0,
	0, 452, 622, 387, 476, 0, 366, 509, 1346, 598,
	473, 0, 581, 601, 0, 493, 372, 532, 588, 589,
	829, 834, 0, 850, 0, 376, 377, 498, 358, 506,
	703, 669, 561, 519, 517, 0, 484, 541, 698, 1305,
	0, 406, 0, 401, 497, 637, 364, 616, 535, 502,
	456, 564, 593, 403, 388, 389, 432, 534, 422, 374,
	627, 1374, 1376, 1372, 1368, 1369, 1334, 1335, 1375, 1371,
	423, 1370, 0, 635, 1379, 1390, 1387, 1392, 1378, 1391,
	1385, 1066, 682, 1382, 1381, 1395, 1388, 1389, 628, 1394,
	1333, 1386, 1384, 1383, 1380, 0, 323, 324, 325, 326,
	327, 328, 329, 330, 331, 332, 334, 336, 0, 335,
	337, 339, 340, 341, 828, 342, 343, 344, 347, 348,
	349, 351, 711, 352, 353, 354, 355, 356, 357, 1358,
	1336, 359, 360, 361, 362, 363, 365, 367, 368, 369,
	370, 371, 373, 375, 1347, 1337, 1342, 1348, 1338, 1339,
	1343, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	390, 392, 393, 394, 395, 396, 397, 400, 0, 402,
	404, 0, 405, 408, 0, 409, 410, 411, 412, 413,
	414, 415, 416, 1350, 417, 0, 418, 419, 421, 0,
	424, 425, 426, 427, 428, 0, 429, 1359, 1308, 430,
	431, 433, 434, 435, 437, 438, 439, 440, 441, 442,
	443, 444, 445, 446, 447, 448, 0, 449, 450, 451,
	453, 0, 454, 455, 458, 459, 460, 461, 0, 463,
	1360, 0, 464, 465, 466, 1340, 1341, 467, 468, 469,
	470, 471, 472, 475, 1373, 477, 478, 479, 480, 481,
	482, 483, 713, 485, 486, 487, 488, 489, 490, 491,
	675, 1351, 492, 494, 495, 1357, 679, 1352, 846, 510,
	511, 512, 513, 514, 515, 516, 518, 0, 520, 521,
	522, 1353, 523, 524, 525, 526, 0, 527, 528, 529,
	530, 531, 533, 536, 537, 538, 539, 0, 542, 543,
	544, 545, 546, 547, 548, 550, 551, 552, 554, 555,
	556, 714, 557, 558, 559, 560, 3348, 562, 563, 715,
	565, 566, 568, 569, 570, 571, 572, 573, 724, 1344,
	575, 685, 576, 577, 578, 579, 580, 0, 582, 583,
	584, 585, 586, 587, 590, 591, 592, 594, 595, 1354,
	596, 597, 1345, 599, 600, 849, 602, 603, 604, 605,
	606, 0, 725, 607, 1355, 608, 1356, 609, 610, 611,
	612, 613, 614, 615, 617, 0, 0, 619, 620, 621,
	623, 624, 625, 626, 629, 630, 631, 632, 633, 0,
	634, 636, 638, 716, 693, 1361, 1362, 1365, 1363, 1364,
	1366, 1367, 1377, 639, 640, 656, 507, 501, 457, 499,
	500, 504, 505, 508, 825, 0, 0, 1349, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 333, 0, 350, 831, 3204, 399, 436, 651,
	0, 0, 496, 0, 549, 553, 182, 642, 0, 0,
	0, 0, 407, 0, 836, 0, 842, 0, 848, 0,
	618, 0, 838, 839, 844, 338, 726, 641, 712, 0,
	0, 0, 503, 179, 0, 0, 871, 180, 0, 0,
	346, 0, 0, 0, 0, 840, 837, 841, 847, 835,
	845, 832, 843, 0, 540, 474, 1176, 567, 345, 391,
	378, 420, 462, 574, 0, 0, 452, 622, 387, 476,
	0, 366, 509, 1346, 598, 473, 0, 581, 601, 0,
	493, 372, 532, 588, 589, 829, 834, 0, 850, 0,
	376, 377, 498, 358, 506, 3434, 3435, 3433, 519, 517,
	0, 484, 541, 698, 0, 0, 406, 0, 401, 497,
	637, 364, 616, 535, 502, 456, 564, 593, 403, 388,
	389, 432, 534, 422, 374, 627, 1374, 1376, 1372, 1368,
	1369, 1334, 1335, 1375, 1371, 423, 3440, 0, 635, 644,
	678, 658, 686, 643, 683, 653, 398, 682, 647, 646,
	692, 673, 674, 628, 688, 659, 657, 650, 649, 645,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 331,
	332, 334, 336, 0, 335, 337, 339, 340, 341, 828,
	342, 343, 344, 347, 348, 349, 351, 711, 352, 353,
	354, 355, 356, 357, 1358, 1336, 359, 360, 361, 362,
	363, 365, 367, 368, 369, 370, 371, 373, 375, 1347,
	1337, 1342, 1348, 1338, 1339, 1343, 379, 380, 381, 382,
	383, 384, 0, 385, 386, 390, 392, 393, 394, 395,
	396, 397, 400, 0, 402, 404, 0, 405, 408, 0,
	409, 410, 411, 412, 413, 414, 415, 416, 1350, 417,
	0, 418, 419, 421, 0, 424, 425, 426, 427, 428,
	0, 429, 1359, 655, 430, 431, 433, 434, 435, 437,
	438, 439, 440, 441, 442, 443, 444, 445, 446, 447,
	448, 0, 449, 450, 451, 453, 0, 454, 455, 458,
	459, 460, 461, 3426, 463, 1360, 0, 464, 465, 466,
	1340, 1341, 467, 468, 469, 470, 471, 472, 475, 1373,
	477, 478, 479, 480, 481, 482, 483, 713, 485, 486,
	487, 488, 489, 490, 491, 675, 1351, 492, 494, 495,
	1357, 679, 1352, 846, 510, 511, 512, 513, 514, 515,
	516, 518, 0, 520, 521, 522, 1353, 523, 524, 525,
	526, 0, 527, 528, 529, 530, 531, 533, 536, 537,
	538, 539, 0, 542, 543, 544, 545, 546, 547, 548,
	550, 551, 552, 554, 555, 556, 714, 557, 558, 559,
	560, 684, 562, 563, 715, 565, 566, 568, 569, 570,
	571, 572, 573, 724, 1344, 575, 685, 576, 577, 578,
	579, 580, 0, 582, 583, 584, 585, 586, 587, 590,
	591, 592, 594, 595, 1354, 596, 597, 1345, 599, 600,
	849, 602, 603, 604, 605, 606, 0, 725, 607, 1355,
	608, 1356, 609, 610, 611, 612, 613, 614, 615, 617,
	0, 0, 619, 620, 621, 623, 624, 625, 626, 629,
	630, 631, 632, 633, 0, 634, 636, 638, 716, 693,
	1361, 1362, 1365, 1363, 1364, 1366, 1367, 1377, 639, 640,
	656, 507, 501, 457, 499, 500, 504, 505, 508, 825,
	0, 0, 1349, 0, 0, 0, 0, 0, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 333, 0, 350,
	831, 3428, 399, 436, 651, 0, 0, 496, 0, 549,
	553, 0, 642, 0, 0, 0, 0, 407, 0, 836,
	0, 842, 0, 848, 0, 618, 0, 838, 839, 844,
	338, 726, 641, 712, 0, 0, 0, 503, 0, 0,
	0, 871, 0, 0, 0, 346, 0, 0, 0, 0,
	840, 837, 841, 847, 835, 845, 832, 843, 0, 540,
	474, 691, 567, 345, 391, 378, 420, 462, 574, 0,
	0, 452, 622, 387, 476, 0, 366, 509, 1346, 598,
	473, 0, 581, 601, 0, 493, 372, 532, 588, 589,
	829, 834, 0, 850, 0, 376, 377, 498, 358, 506,
	3434, 3435, 3433, 519, 517, 0, 484, 541, 698, 0,
	0, 406, 0, 401, 497, 637, 364, 616, 535, 502,
	456, 564, 593, 403, 388, 389, 432, 534, 422, 374,
	627, 1374, 1376, 1372, 1368, 1369, 1334, 1335, 1375, 1371,
	423, 3440, 0, 635, 644, 678, 658, 686, 643, 683,
	653, 398, 682, 647, 646, 692, 673, 674, 628, 688,
	659, 657, 650, 649, 645, 0, 323, 324, 325, 326,
	327, 328, 329, 330, 331, 332, 334, 336, 0, 335,
	337, 339, 340, 341, 828, 342, 343, 344, 347, 348,
	349, 351, 711, 352, 353, 354, 355, 356, 357, 1358,
	1336, 359, 360, 361, 362, 363, 365, 367, 368, 369,
	370, 371, 373, 375, 1347, 1337, 1342, 1348, 1338, 1339,
	1343, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	390, 392, 393, 394, 395, 396, 397, 400, 0, 402,
	404, 0, 405, 408, 0, 409, 410, 411, 412, 413,
	414, 415, 416, 1350, 417, 0, 418, 419, 421, 0,
	424, 425, 426, 427, 428, 0, 429, 1359, 655, 430,
	431, 433, 434, 435, 437, 438, 439, 440, 441, 442,
	443, 444, 445, 446, 447, 448, 0, 449, 450, 451,
	453, 0, 454, 455, 458, 459, 460, 461, 3426, 463,
	1360, 0, 464, 465, 466, 1340, 1341, 467, 468, 469,
	470, 471, 472, 475, 1373, 477, 478, 479, 480, 481,
	482, 483, 713, 485, 486, 487, 488, 489, 490, 491,
	675, 1351, 492, 494, 495, 1357, 679, 1352, 846, 510,
	511, 512, 513, 514, 515, 516, 518, 0, 520, 521,
	522, 1353, 523, 524, 525, 526, 0, 527, 528, 529,
	530, 531, 533, 536, 537, 538, 539, 0, 542, 543,
	544, 545, 546, 547, 548, 550, 551, 552, 554, 555,
	556, 714, 557, 558, 559, 560, 684, 562, 563, 715,
	565, 566, 568, 569, 570, 571, 572, 573, 724, 1344,
	575, 685, 576, 577, 578, 579, 580, 0, 582, 583,
	584, 585, 586, 587, 590, 591, 592, 594, 595, 1354,
	596, 597, 1345, 599, 600, 849, 602, 603, 604, 605,
	606, 0, 725, 607, 1355, 608, 1356, 609, 610, 611,
	612, 613, 614, 615, 617, 0, 0, 619, 620, 621,
	623, 624, 625, 626, 629, 630, 631, 632, 633, 0,
	634, 636, 638, 716, 693, 1361, 1362, 1365, 1363, 1364,
	1366, 1367, 1377, 639, 640, 656, 507, 501, 457, 499,
	500, 504, 505, 508, 825, 0, 0, 1349, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 333, 0, 350, 831, 3428, 399, 436, 651,
	0, 0, 496, 0, 549, 553, 0, 642, 0, 0,
	0, 0, 407, 0, 836, 0, 842, 0, 848, 0,
	618, 0, 838, 839, 844, 338, 726, 641, 712, 0,
	0, 0, 503, 0, 0, 0, 0, 0, 0, 0,
	346, 0, 0, 0, 0, 840, 837, 841, 847, 835,
	845, 832, 843, 0, 540, 474, 691, 567, 345, 391,
	378, 420, 462, 574, 0, 0, 452, 622, 387, 476,
	0, 366, 509, 1346, 598, 473, 0, 581, 601, 0,
	493, 372, 532, 588, 589, 829, 834, 0, 850, 0,
	376, 377, 498, 358, 506, 703, 669, 561, 519, 517,
	0, 484, 541, 698, 0, 0, 406, 0, 401, 497,
	637, 364, 616, 535, 502, 456, 564, 593, 403, 388,
	389, 432, 534, 422, 374, 627, 1374, 1376, 1372, 1368,
	1369, 1334, 1335, 1375, 1371, 423, 3440, 0, 635, 644,
	678, 658, 686, 643, 683, 653, 398, 682, 647, 646,
	692, 673, 674, 628, 688, 659, 657, 650, 649, 645,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 331,
	332, 334, 336, 0, 335, 337, 339, 340, 341, 828,
	342, 343, 344, 347, 348, 349, 351, 711, 352, 353,
	354, 355, 356, 357, 1358, 1336, 359, 360, 361, 362,
	363, 365, 367, 368, 369, 370, 371, 373, 375, 1347,
	1337, 1342, 1348, 1338, 1339, 1343, 379, 380, 381, 382,
	383, 384, 0, 385, 386, 390, 392, 393, 394, 395,
	396, 397, 400, 0, 402, 404, 0, 405, 408, 0,
	409, 410, 411, 412, 413, 414, 415, 416, 1350, 417,
	0, 418, 419, 421, 0, 424, 425, 426, 427, 428,
	0, 429, 1359, 655, 430, 431, 433, 434, 435, 437,
	438, 439, 440, 441, 442, 443, 444, 445, 446, 447,
	448, 0, 449, 450, 451, 453, 0, 454, 455, 458,
	459, 460, 461, 0, 463, 1360, 0, 464, 465, 466,
	1340, 1341, 467, 468, 469, 470, 471, 472, 475, 1373,
	477, 478, 479, 480, 481, 482, 483, 713, 485, 486,
	487, 488, 489, 490, 491, 675, 1351, 492, 494, 495,
	1357, 679, 1352, 846, 510, 511, 512, 513, 514, 515,
	516, 518, 0, 520, 521, 522, 1353, 523, 524, 525,
	526, 0, 527, 528, 529, 530, 531, 533, 536, 537,
	538, 539, 0, 542, 543, 544, 545, 546, 547, 548,
	550, 551, 552, 554, 555, 556, 714, 557, 558, 559,
	560, 684, 562, 563, 715, 565, 566, 568, 569, 570,
	571, 572, 573, 724, 1344, 575, 685, 576, 577, 578,
	579, 580, 0, 582, 583, 584, 585, 586, 587, 590,
	591, 592, 594, 595, 1354, 596, 597, 1345, 599, 600,
	849, 602, 603, 604, 605, 606, 0, 725, 607, 1355,
	608, 1356, 609, 610, 611, 612, 613, 614, 615, 617,
	0, 0, 619, 620, 621, 623, 624, 625, 626, 629,
	630, 631, 632, 633, 0, 634, 636, 638, 716, 693,
	1361, 1362, 1365, 1363, 1364, 1366, 1367, 1377, 639, 640,
	656, 507, 501, 457, 499, 500, 504, 505, 508, 825,
	0, 0, 1349, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 333, 0, 350,
	831, 4945, 399, 436, 651, 0, 0, 496, 0, 549,
	553, 0, 642, 0, 0, 0, 0, 407, 0, 836,
	0, 842, 0, 848, 0, 618, 0, 838, 839, 844,
	338, 726, 641, 712, 0, 0, 0, 503, 0, 0,
	0, 0, 0, 0, 0, 346, 0, 0, 0, 0,
	840, 837, 841, 847, 835, 845, 832, 843, 0, 540,
	474, 691, 567, 345, 391, 378, 420, 462, 574, 0,
	0, 452, 622, 387, 476, 0, 366, 509, 1346, 598,
	473, 0, 581, 601, 0, 493, 372, 532, 588, 589,
	829, 834, 0, 850, 0, 376, 377, 498, 358, 506,
	703, 669, 561, 519, 517, 0, 484, 541, 698, 0,
	0, 406, 0, 401, 497, 637, 364, 616, 535, 502,
	456, 564, 593, 403, 388, 389, 432, 534, 422, 374,
	627, 1374, 1376, 1372, 1368, 1369, 1334, 1335, 1375, 1371,
	423, 3440, 0, 635, 644, 678, 658, 686, 643, 683,
	653, 398, 682, 647, 646, 692, 673, 674, 628, 688,
	659, 657, 650, 649, 645, 0, 323, 324, 325, 326,
	327, 328, 329, 330, 331, 332, 334, 336, 0, 335,
	337, 339, 340, 341, 828, 342, 343, 344, 347, 348,
	349, 351, 711, 352, 353, 354, 355, 356, 357, 1358,
	1336, 359, 360, 361, 362, 363, 365, 367, 368, 369,
	370, 371, 373, 375, 1347, 1337, 1342, 1348, 1338, 1339,
	1343, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	390, 392, 393, 394, 395, 396, 397, 400, 0, 402,
	404, 0, 405, 408, 0, 409, 410, 411, 412, 413,
	414, 415, 416, 1350, 417, 0, 418, 419, 421, 0,
	424, 425, 426, 427, 428, 0, 429, 1359, 655, 430,
	431, 433, 434, 435, 437, 438, 439, 440, 441, 442,
	443, 444, 445, 446, 447, 448, 0, 449, 450, 451,
	453, 0, 454, 455, 458, 459, 460, 461, 0, 463,
	1360, 0, 464, 465, 466, 1340, 1341, 467, 468, 469,
	470, 471, 472, 475, 1373, 477, 478, 479, 480, 481,
	482, 483, 713, 485, 486, 487, 488, 489, 490, 491,
	675, 1351, 492, 494, 495, 1357, 679, 1352, 846, 510,
	511, 512, 513, 514, 515, 516, 518, 0, 520, 521,
	522, 1353, 523, 524, 525, 526, 0, 527, 528, 529,
	530, 531, 533, 536, 537, 538, 539, 0, 542, 543,
	544, 545, 546, 547, 548, 550, 551, 552, 554, 555,
	556, 714, 557, 558, 559, 560, 684, 562, 563, 715,
	565, 566, 568, 569, 570, 571, 572, 573, 724, 1344,
	575, 685, 576, 577, 578, 579, 580, 0, 582, 583,
	584, 585, 586, 587, 590, 591, 592, 594, 595, 1354,
	596, 597, 1345, 599, 600, 849, 602, 603, 604, 605,
	606, 0, 725, 607, 1355, 608, 1356, 609, 610, 611,
	612, 613, 614, 615, 617, 0, 0, 619, 620, 621,
	623, 624, 625, 626, 629, 630, 631, 632, 633, 0,
	634, 636, 638, 716, 693, 1361, 1362, 1365, 1363, 1364,
	1366, 1367, 1377, 639, 640, 656, 507, 501, 457, 499,
	500, 504, 505, 508, 825, 0, 0, 1349, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 333, 0, 350, 831, 5963, 399, 436, 651,
	0, 0, 496, 0, 549, 553, 0, 642, 0, 0,
	0, 0, 407, 0, 836, 0, 842, 0, 848, 0,
	618, 0, 838, 839, 844, 338, 726, 641, 712, 0,
	0, 0, 503, 0, 0, 0, 0, 0, 0, 0,
	346, 0, 0, 0, 0, 840, 837, 841, 847, 835,
	845, 832, 843, 0, 540, 474, 691, 567, 345, 391,
	378, 420, 462, 574, 0, 0, 452, 622, 387, 476,
	0, 366, 509, 1346, 598, 473, 0, 581, 601, 0,
	493, 372, 532, 588, 589, 829, 834, 0, 850, 0,
	376, 377, 498, 358, 506, 703, 669, 561, 519, 517,
	0, 484, 541, 698, 0, 0, 406, 0, 401, 497,
	637, 364, 616, 535, 502, 456, 564, 593, 403, 388,
	389, 432, 534, 422, 374, 627, 1374, 1376, 1372, 1368,
	1369, 1334, 1335, 1375, 1371, 423, 3440, 0, 635, 644,
	678, 658, 686, 643, 683, 653, 398, 682, 647, 646,
	692, 673, 674, 628, 688, 659, 657, 650, 649, 645,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 331,
	332, 334, 336, 0, 335, 337, 339, 340, 341, 828,
	342, 343, 344, 347, 348, 349, 351, 711, 352, 353,
	354, 355, 356, 357, 1358, 1336, 359, 360, 361, 362,
	363, 365, 367, 368, 369, 370, 371, 373, 375, 1347,
	1337, 1342, 1348, 1338, 1339, 1343, 379, 380, 381, 382,
	383, 384, 0, 385, 386, 390, 392, 393, 394, 395,
	396, 397, 400, 0, 402, 404, 0, 405, 408, 0,
	409, 410, 411, 412, 413, 414, 415, 416, 1350, 417,
	0, 418, 419, 421, 0, 424, 425, 426, 427, 428,
	0, 429, 1359, 655, 430, 431, 433, 434, 435, 437,
	438, 439, 440, 441, 442, 443, 444, 445, 446, 447,
	448, 0, 449, 450, 451, 453, 0, 454, 455, 458,
	459, 460, 461, 0, 463, 1360, 0, 464, 465, 466,
	1340, 1341, 467, 468, 469, 470, 471, 472, 475, 1373,
	477, 478, 479, 480, 481, 482, 483, 713, 485, 486,
	487, 488, 489, 490, 491, 675, 1351, 492, 494, 495,
	1357, 679, 1352, 846, 510, 511, 512, 513, 514, 515,
	516, 518, 0, 520, 521, 522, 1353, 523, 524, 525,
	526, 0, 527, 528, 529, 530, 531, 533, 536, 537,
	538, 539, 0, 542, 543, 544, 545, 546, 547, 548,
	550, 551, 552, 554, 555, 556, 714, 557, 558, 559,
	560, 684, 562, 563, 715, 565, 566, 568, 569, 570,
	571, 572, 573, 724, 1344, 575, 685, 576, 577, 578,
	579, 580, 0, 582, 583, 584, 585, 586, 587, 590,
	591, 592, 594, 595, 1354, 596, 597, 1345, 599, 600,
	849, 602, 603, 604, 605, 606, 0, 725, 607, 1355,
	608, 1356, 609, 610, 611, 612, 613, 614, 615, 617,
	0, 0, 619, 620, 621, 623, 624, 625, 626, 629,
	630, 631, 632, 633, 0, 634, 636, 638, 716, 693,
	1361, 1362, 1365, 1363, 1364, 1366, 1367, 1377, 639, 640,
	656, 507, 501, 457, 499, 500, 504, 505, 508, 825,
	0, 0, 1349, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 333, 0, 350,
	831, 3573, 399, 436, 651, 0, 0, 496, 0, 549,
	553, 0, 642, 0, 0, 0, 0, 407, 0, 836,
	0, 842, 0, 848, 0, 618, 0, 838, 839, 844,
	338, 726, 641, 712, 0, 0, 0, 503, 0, 0,
	0, 0, 0, 0, 0, 346, 0, 0, 0, 0,
	840, 837, 841, 847, 835, 845, 832, 843, 0, 540,
	474, 691, 567, 345, 391, 378, 420, 462, 574, 0,
	0, 452, 622, 387, 476, 0, 366, 509, 1346, 598,
	473, 0, 581, 601, 0, 493, 372, 532, 588, 589,
	829, 834, 0, 850, 0, 376, 377, 498, 358, 506,
	3434, 3435, 3433, 519, 517, 0, 484, 541, 698, 0,
	0, 406, 0, 401, 497, 637, 364, 616, 535, 502,
	456, 564, 593, 403, 388, 389, 432, 534, 422, 374,
	627, 1374, 1376, 1372, 1368, 1369, 1334, 1335, 1375, 1371,
	423, 3440, 0, 635, 644, 678, 658, 686, 643, 683,
	653, 398, 682, 647, 646, 692, 673, 674, 628, 688,
	659, 657, 650, 649, 645, 0, 323, 324, 325, 326,
	327, 328, 329, 330, 331, 332, 334, 336, 0, 335,
	337, 339, 340, 341, 828, 342, 343, 344, 347, 348,
	349, 351, 711, 352, 353, 354, 355, 356, 357, 1358,
	1336, 359, 360, 361, 362, 363, 365, 367, 368, 369,
	370, 371, 373, 375, 1347, 1337, 1342, 1348, 1338, 1339,
	1343, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	390, 392, 393, 394, 395, 396, 397, 400, 0, 402,
	404, 0, 405, 408, 0, 409, 410, 411, 412, 413,
	414, 415, 416, 1350, 417, 0, 418, 419, 421, 0,
	424, 425, 426, 427, 428, 0, 429, 1359, 655, 430,
	431, 433, 434, 435, 437, 438, 439, 440, 441, 442,
	443, 444, 445, 446, 447, 448, 0, 449, 450, 451,
	453, 0, 454, 455, 458, 459, 460, 461, 0, 463,
	1360, 0, 464, 465, 466, 1340, 1341, 467, 468, 469,
	470, 471, 472, 475, 1373, 477, 478, 479, 480, 481,
	482, 483, 713, 485, 486, 487, 488, 489, 490, 491,
	675, 1351, 492, 494, 495, 1357, 679, 1352, 846, 510,
	511, 512, 513, 514, 515, 516, 518, 0, 520, 521,
	522, 1353, 523, 524, 525, 526, 0, 527, 528, 529,
	530, 531, 533, 536, 537, 538, 539, 0, 542, 543,
	544, 545, 546, 547, 548, 550, 551, 552, 554, 555,
	556, 714, 557, 558, 559, 560, 684, 562, 563, 715,
	565, 566, 568, 569, 570, 571, 572, 573, 724, 1344,
	575, 685, 576, 577, 578, 579, 580, 0, 582, 583,
	584, 585, 586, 587, 590, 591, 592, 594, 595, 1354,
	596, 597, 1345, 599, 600, 849, 602, 603, 604, 605,
	606, 0, 725, 607, 1355, 608, 1356, 609, 610, 611,
	612, 613, 614, 615, 617, 0, 0, 619, 620, 621,
	623, 624, 625, 626, 629, 630, 631, 632, 633, 0,
	634, 636, 638, 716, 693, 1361, 1362, 1365, 1363, 1364,
	1366, 1367, 1377, 639, 640, 656, 507, 501, 457, 499,
	500, 504, 505, 508, 0, 0, 0, 1349, 0, 958,
	0, 1712, 811, 0, 0, 0, 0, 797, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 333, 0, 350,
	831, 0, 399, 436, 651, 0, 0, 496, 0, 549,
	553, 0, 642, 0, 0, 1811, 0, 407, 1807, 836,
	0, 842, 0, 848, 1806, 618, 0, 838, 839, 844,
	338, 726, 641, 712, 0, 0, 0, 503, 0, 0,
	0, 0, 0, 0, 0, 346, 0, 0, 0, 1808,
	840, 837, 841, 847, 835, 845, 832, 843, 0, 540,
	474, 691, 567, 345, 391, 378, 420, 462, 574, 0,
	0, 452, 622, 387, 476, 0, 366, 509, 0, 598,
	473, 0, 581, 601, 0, 493, 372, 532, 588, 589,
	829, 834, 0, 850, 0, 376, 377, 498, 358, 506,
	703, 669, 561, 519, 517, 0, 484, 541, 698, 0,
	0, 406, 0, 401, 497, 637, 364, 616, 535, 502,
	456, 564, 593, 403, 388, 389, 432, 534, 422, 374,
	627, 666, 670, 668, 664, 661, 665, 662, 663, 667,
	423, 660, 0, 635, 644, 678, 658, 686, 643, 683,
	653, 398, 682, 647, 646, 692, 673, 674, 628, 688,
	659, 657, 650, 649, 645, 0, 323, 324, 325, 326,
	327, 328, 329, 330, 331, 332, 334, 336, 0, 335,
	337, 339, 340, 341, 828, 342, 343, 344, 347, 348,
	349, 351, 711, 352, 353, 354, 355, 356, 357, 648,
	830, 359, 360, 361, 362, 363, 365, 367, 368, 369,
	370, 371, 373, 375, 0, 0, 0, 833, 0, 0,
	0, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	390, 392, 393, 394, 395, 396, 397, 400, 0, 402,
	404, 0, 405, 408, 0, 409, 410, 411, 412, 413,
	414, 415, 416, 652, 417, 0, 418, 419, 421, 0,
	424, 425, 426, 427, 428, 0, 429, 654, 655, 430,
	431, 433, 434, 435, 437, 438, 439, 440, 441, 442,
	443, 444, 445, 446, 447, 448, 0, 449, 450, 451,
	453, 0, 454, 455, 458, 459, 460, 461, 0, 463,
	671, 0, 464, 465, 466, 0, 0, 467, 468, 469,
	470, 471, 472, 475, 672, 477, 478, 479, 480, 481,
	482, 483, 713, 485, 486, 487, 488, 489, 490, 491,
	675, 676, 492, 494, 495, 677, 679, 680, 846, 510,
	511, 512, 513, 514, 515, 516, 518, 0, 520, 521,
	522, 681, 523, 524, 525, 526, 0, 527, 528, 529,
	530, 531, 533, 536, 537, 538, 539, 0, 542, 543,
	544, 545, 546, 547, 548, 550, 551, 552, 554, 555,
	556, 714, 557, 558, 559, 560, 684, 562, 563, 715,
	565, 566, 568, 569, 570, 571, 572, 573, 724, 0,
	575, 685, 576, 577, 578, 579, 580, 0, 582, 583,
	584, 585, 586, 587, 590, 591, 592, 594, 595, 687,
	596, 597, 0, 599, 600, 849, 602, 603, 604, 605,
	606, 0, 725, 607, 689, 608, 690, 609, 610, 611,
	612, 613, 614, 615, 617, 0, 0, 619, 620, 621,
	623, 624, 625, 626, 629, 630, 631, 632, 633, 0,
	634, 636, 638, 716, 693, 694, 695, 696, 697, 699,
	700, 701, 702, 639, 640, 656, 507, 501, 457, 499,
	500, 504, 505, 508, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 958, 0, 1712, 811, 0, 0, 0,
	0, 797, 0, 0, 0, 0, 0, 0, 0, 1713,
	1714, 333, 0, 350, 831, 0, 399, 436, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 1802,
	0, 407, 1807, 836, 0, 842, 0, 848, 1806, 618,
	0, 838, 839, 844, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 1808, 840, 837, 841, 847, 835, 845,
	832, 843, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 829, 834, 0, 850, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 828, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 830, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 833, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 846, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 849,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 958, 0, 1712,
	811, 0, 0, 0, 0, 797, 0, 0, 0, 0,
	0, 0, 0, 1713, 1714, 333, 0, 350, 831, 0,
	399, 436, 651, 0, 0, 496, 0, 549, 553, 0,
	642, 0, 0, 0, 0, 407, 1807, 836, 0, 842,
	0, 848, 1806, 618, 0, 838, 839, 844, 338, 726,
	641, 712, 0, 0, 0, 503, 0, 0, 0, 0,
	0, 0, 0, 346, 0, 0, 0, 1808, 840, 837,
	841, 847, 835, 845, 832, 843, 0, 540, 474, 691,
	567, 345, 391, 378, 420, 462, 574, 0, 0, 452,
	622, 387, 476, 0, 366, 509, 0, 598, 473, 0,
	581, 601, 0, 493, 372, 532, 588, 589, 829, 834,
	0, 850, 0, 376, 377, 498, 358, 506, 703, 669,
	561, 519, 517, 0, 484, 541, 698, 0, 0, 406,
	0, 401, 497, 637, 364, 616, 535, 502, 456, 564,
	593, 403, 388, 389, 432, 534, 422, 374, 627, 666,
	670, 668, 664, 661, 665, 662, 663, 667, 423, 660,
	0, 635, 644, 678, 658, 686, 643, 683, 653, 398,
	682, 647, 646, 692, 673, 674, 628, 688, 659, 657,
	650, 649, 645, 0, 323, 324, 325, 326, 327, 328,
	329, 330, 331, 332, 334, 336, 0, 335, 337, 339,
	340, 341, 828, 342, 343, 344, 347, 348, 349, 351,
	711, 352, 353, 354, 355, 356, 357, 648, 830, 359,
	360, 361, 362, 363, 365, 367, 368, 369, 370, 371,
	373, 375, 0, 0, 0, 833, 0, 0, 0, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 390, 392,
	393, 394, 395, 396, 397, 400, 0, 402, 404, 0,
	405, 408, 0, 409, 410, 411, 412, 413, 414, 415,
	416, 652, 417, 0, 418, 419, 421, 0, 424, 425,
	426, 427, 428, 0, 429, 654, 655, 430, 431, 433,
	434, 435, 437, 438, 439, 440, 441, 442, 443, 444,
	445, 446, 447, 448, 0, 449, 450, 451, 453, 0,
	454, 455, 458, 459, 460, 461, 0, 463, 671, 0,
	464, 465, 466, 0, 0, 467, 468, 469, 470, 471,
	472, 475, 672, 477, 478, 479, 480, 481, 482, 483,
	713, 485, 486, 487, 488, 489, 490, 491, 675, 676,
	492, 494, 495, 677, 679, 680, 846, 510, 511, 512,
	513, 514, 515, 516, 518, 0, 520, 521, 522, 681,
	523, 524, 525, 526, 0, 527, 528, 529, 530, 531,
	533, 536, 537, 538, 539, 0, 542, 543, 544, 545,
	546, 547, 548, 550, 551, 552, 554, 555, 556, 714,
	557, 558, 559, 560, 684, 562, 563, 715, 565, 566,
	568, 569, 570, 571, 572, 573, 724, 0, 575, 685,
	576, 577, 578, 579, 580, 0, 582, 583, 584, 585,
	586, 587, 590, 591, 592, 594, 595, 687, 596, 597,
	0, 599, 600, 849, 602, 603, 604, 605, 606, 0,
	725, 607, 689, 608, 690, 609, 610, 611, 612, 613,
	614, 615, 617, 0, 0, 619, 620, 621, 623, 624,
	625, 626, 629, 630, 631, 632, 633, 0, 634, 636,
	638, 716, 693, 694, 695, 696, 697, 699, 700, 701,
	702, 639, 640, 656, 507, 501, 457, 499, 500, 504,
	505, 508, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 958, 0, 0, 811, 0, 0, 0, 0, 797,
	0, 0, 0, 0, 0, 0, 0, 1713, 1714, 333,
	0, 350, 831, 0, 399, 436, 651, 0, 0, 496,
	0, 549, 553, 0, 642, 0, 0, 3720, 0, 407,
	1807, 836, 0, 842, 0, 848, 1806, 618, 0, 838,
	839, 844, 338, 726, 641, 712, 0, 0, 0, 503,
	0, 0, 0, 0, 0, 0, 0, 346, 0, 0,
	0, 1808, 840, 837, 841, 847, 835, 845, 832, 843,
	0, 540, 474, 691, 567, 345, 391, 378, 420, 462,
	574, 0, 0, 452, 622, 387, 476, 0, 366, 509,
	0, 598, 473, 0, 581, 601, 0, 493, 372, 532,
	588, 589, 829, 834, 0, 850, 0, 376, 377, 498,
	358, 506, 703, 669, 561, 519, 517, 0, 484, 541,
	698, 0, 0, 406, 0, 401, 497, 637, 364, 616,
	535, 502, 456, 564, 593, 403, 388, 389, 432, 534,
	422, 374, 627, 666, 670, 668, 664, 661, 665, 662,
	663, 667, 423, 660, 0, 635, 644, 678, 658, 686,
	643, 683, 653, 398, 682, 647, 646, 692, 673, 674,
	628, 688, 659, 657, 650, 649, 645, 0, 323, 324,
	325, 326, 327, 328, 329, 330, 331, 332, 334, 336,
	0, 335, 337, 339, 340, 341, 828, 342, 343, 344,
	347, 348, 349, 351, 711, 352, 353, 354, 355, 356,
	357, 648, 830, 359, 360, 361, 362, 363, 365, 367,
	368, 369, 370, 371, 373, 375, 0, 0, 0, 833,
	0, 0, 0, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 390, 392, 393, 394, 395, 396, 397, 400,
	0, 402, 404, 0, 405, 408, 0, 409, 410, 411,
	412, 413, 414, 415, 416, 652, 417, 0, 418, 419,
	421, 0, 424, 425, 426, 427, 428, 0, 429, 654,
	655, 430, 431, 433, 434, 435, 437, 438, 439, 440,
	441, 442, 443, 444, 445, 446, 447, 448, 0, 449,
	450, 451, 453, 0, 454, 455, 458, 459, 460, 461,
	0, 463, 671, 0, 464, 465, 466, 0, 0, 467,
	468, 469, 470, 471, 472, 475, 672, 477, 478, 479,
	480, 481, 482, 483, 713, 485, 486, 487, 488, 489,
	490, 491, 675, 676, 492, 494, 495, 677, 679, 680,
	846, 510, 511, 512, 513, 514, 515, 516, 518, 0,
	520, 521, 522, 681, 523, 524, 525, 526, 0, 527,
	528, 529, 530, 531, 533, 536, 537, 538, 539, 0,
	542, 543, 544, 545, 546, 547, 548, 550, 551, 552,
	554, 555, 556, 714, 557, 558, 559, 560, 684, 562,
	563, 715, 565, 566, 568, 569, 570, 571, 572, 573,
	724, 0, 575, 685, 576, 577, 578, 579, 580, 0,
	582, 583, 584, 585, 586, 587, 590, 591, 592, 594,
	595, 687, 596, 597, 0, 599, 600, 849, 602, 603,
	604, 605, 606, 0, 725, 607, 689, 608, 690, 609,
	610, 611, 612, 613, 614, 615, 617, 0, 0, 619,
	620, 621, 623, 624, 625, 626, 629, 630, 631, 632,
	633, 0, 634, 636, 638, 716, 693, 694, 695, 696,
	697, 699, 700, 701, 702, 639, 640, 656, 507, 501,
	457, 499, 500, 504, 505, 508, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 958, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 795, 796, 333, 0, 350, 831, 0, 399, 436,
	651, 0, 0, 496, 0, 549, 553, 182, 642, 0,
	0, 0, 0, 407, 0, 836, 0, 842, 0, 848,
	0, 618, 0, 838, 839, 844, 338, 726, 641, 712,
	0, 0, 0, 503, 179, 0, 0, 0, 180, 0,
	0, 346, 0, 0, 0, 0, 840, 837, 841, 847,
	835, 845, 832, 843, 0, 540, 474, 1176, 567, 345,
	391, 378, 420, 462, 574, 0, 0, 452, 622, 387,
	476, 0, 366, 509, 0, 598, 473, 0, 581, 601,
	0, 493, 372, 532, 588, 589, 829, 834, 0, 850,
	177, 376, 377, 498, 358, 506, 703, 669, 561, 519,
	517, 0, 484, 541, 698, 0, 0, 406, 0, 401,
	497, 637, 364, 616, 535, 502, 456, 564, 593, 403,
	388, 389, 432, 534, 422, 374, 627, 666, 670, 668,
	664, 661, 665, 662, 663, 667, 423, 660, 0, 635,
	644, 678, 658, 686, 643, 683, 653, 398, 682, 647,
	646, 692, 673, 674, 628, 688, 659, 657, 650, 649,
	645, 0, 323, 324, 325, 326, 327, 328, 329, 330,
	331, 332, 334, 336, 178, 335, 337, 339, 340, 341,
	828, 342, 343, 344, 347, 348, 349, 351, 711, 352,
	353, 354, 355, 356, 357, 648, 830, 359, 360, 361,
	362, 363, 365, 367, 368, 369, 370, 371, 373, 375,
	0, 0, 0, 833, 0, 0, 0, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 390, 392, 393, 394,
	395, 396, 397, 400, 0, 402, 404, 0, 405, 408,
	0, 409, 410, 411, 412, 413, 414, 415, 416, 652,
	417, 0, 418, 419, 421, 0, 424, 425, 426, 427,
	428, 0, 429, 654, 655, 430, 431, 433, 434, 435,
	437, 438, 439, 440, 441, 442, 443, 444, 445, 446,
	447, 448, 0, 449, 450, 451, 453, 0, 454, 455,
	458, 459, 460, 461, 0, 463, 671, 0, 464, 465,
	466, 0, 0, 467, 468, 469, 470, 471, 472, 475,
	672, 477, 478, 479, 480, 481, 482, 483, 713, 485,
	486, 487, 488, 489, 490, 491, 675, 676, 492, 494,
	495, 677, 679, 680, 846, 510, 511, 512, 513, 514,
	515, 516, 518, 0, 520, 521, 522, 681, 523, 524,
	525, 526, 0, 527, 528, 529, 530, 531, 533, 536,
	537, 538, 539, 0, 542, 543, 544, 545, 546, 547,
	548, 550, 551, 552, 554, 555, 556, 714, 557, 558,
	559, 560, 684, 562, 563, 715, 565, 566, 568, 569,
	570, 571, 572, 573, 724, 0, 575, 685, 576, 577,
	578, 579, 580, 0, 582, 583, 584, 585, 586, 587,
	590, 591, 592, 594, 595, 687, 596, 597, 0, 599,
	600, 849, 602, 603, 604, 605, 606, 0, 725, 607,
	689, 608, 690, 609, 610, 611, 612, 613, 614, 615,
	617, 0, 0, 619, 620, 621, 623, 624, 625, 626,
	629, 630, 631, 632, 633, 0, 634, 636, 638, 716,
	693, 694, 695, 696, 697, 699, 700, 701, 702, 639,
	640, 656, 507, 501, 457, 499, 500, 504, 505, 508,
	825, 0, 0, 0, 0, 0, 1179, 0, 0, 183,
	0, 0, 0, 0, 0, 0, 0, 0, 333, 0,
	350, 831, 176, 399, 436, 651, 0, 0, 496, 0,
	549, 553, 0, 642, 0, 0, 0, 0, 407, 0,
	836, 0, 842, 0, 848, 0, 618, 0, 838, 839,
	844, 338, 726, 641, 712, 0, 0, 0, 503, 0,
	0, 0, 0, 0, 0, 0, 346, 0, 0, 0,
	0, 840, 837, 841, 847, 835, 845, 832, 843, 0,
	540, 474, 691, 567, 345, 391, 378, 420, 462, 574,
	0, 0, 452, 622, 387, 476, 0, 366, 509, 0,
	598, 473, 0, 581, 601, 0, 493, 372, 532, 588,
	589, 829, 834, 0, 850, 0, 376, 377, 498, 358,
	506, 703, 669, 561, 519, 517, 0, 484, 541, 698,
	0, 0, 406, 0, 401, 497, 637, 364, 616, 535,
	502, 456, 564, 593, 403, 388, 389, 432, 534, 422,
	374, 627, 666, 670, 668, 664, 661, 665, 662, 663,
	667, 423, 660, 0, 635, 644, 678, 658, 686, 643,
	683, 653, 398, 682, 647, 646, 692, 673, 674, 628,
	688, 659, 657, 650, 649, 645, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 331, 332, 334, 336, 0,
	335, 337, 339, 340, 341, 828, 342, 343, 344, 347,
	348, 349, 351, 711, 352, 353, 354, 355, 356, 357,
	648, 830, 359, 360, 361, 362, 363, 365, 367, 368,
	369, 370, 371, 373, 375, 0, 0, 0, 833, 0,
	0, 0, 379, 380, 381, 382, 383, 384, 0, 385,
	386, 390, 392, 393, 394, 395, 396, 397, 400, 0,
	402, 404, 0, 405, 408, 0, 409, 410, 411, 412,
	413, 414, 415, 416, 652, 417, 0, 418, 419, 421,
	0, 424, 425, 426, 427, 428, 0, 429, 654, 655,
	430, 431, 433, 434, 435, 437, 438, 439, 440, 441,
	442, 443, 444, 445, 446, 447, 448, 0, 449, 450,
	451, 453, 0, 454, 455, 458, 459, 460, 461, 0,
	463, 671, 0, 464, 465, 466, 0, 0, 467, 468,
	469, 470, 471, 472, 475, 672, 477, 478, 479, 480,
	481, 482, 483, 713, 485, 486, 487, 488, 489, 490,
	491, 675, 676, 492, 494, 495, 677, 679, 680, 846,
	510, 511, 512, 513, 514, 515, 516, 518, 0, 520,
	521, 522, 681, 523, 524, 525, 526, 0, 527, 528,
	529, 530, 531, 533, 536, 537, 538, 539, 0, 542,
	543, 544, 545, 546, 547, 548, 550, 551, 552, 554,
	555, 556, 714, 557, 558, 559, 560, 684, 562, 563,
	715, 565, 566, 568, 569, 570, 571, 572, 573, 724,
	0, 575, 685, 576, 577, 578, 579, 580, 0, 582,
	583, 584, 585, 586, 587, 590, 591, 592, 594, 595,
	687, 596, 597, 0, 599, 600, 849, 602, 603, 604,
	605, 606, 0, 725, 607, 689, 608, 690, 609, 610,
	611, 612, 613, 614, 615, 617, 0, 0, 619, 620,
	621, 623, 624, 625, 626, 629, 630, 631, 632, 633,
	0, 634, 636, 638, 716, 693, 694, 695, 696, 697,
	699, 700, 701, 702, 639, 640, 656, 507, 501, 457,
	499, 500, 504, 505, 508, 320, 0, 0, 0, 0,
	0, 0, 927, 0, 0, 0, 0, 0, 0, 938,
	939, 940, 0, 333, 0, 350, 0, 5665, 399, 436,
	651, 0, 0, 496, 0, 549, 553, 0, 642, 0,
	0, 0, 0, 407, 0, 0, 0, 0, 0, 0,
	0, 618, 0, 0, 0, 0, 338, 726, 641, 712,
	0, 0, 0, 503, 0, 0, 0, 0, 0, 0,
	0, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 540, 474, 691, 567, 345,
	391, 378, 420, 462, 574, 0, 0, 452, 622, 387,
	476, 0, 366, 509, 0, 598, 473, 0, 581, 601,
	0, 493, 372, 532, 588, 589, 0, 0, 0, 0,
	0, 376, 377, 498, 358, 506, 703, 669, 561, 519,
	517, 0, 484, 541, 698, 0, 0, 406, 0, 401,
	497, 637, 364, 616, 535, 502, 456, 564, 593, 403,
	388, 389, 432, 534, 422, 374, 627, 666, 670, 668,
	664, 661, 665, 662, 663, 667, 423, 660, 0, 635,
	644, 678, 658, 686, 643, 683, 653, 398, 682, 647,
	646, 692, 673, 674, 628, 688, 659, 657, 650, 649,
	645, 0, 323, 324, 325, 326, 327, 328, 329, 330,
	331, 332, 334, 336, 0, 335, 337, 339, 340, 341,
	0, 342, 343, 344, 347, 348, 349, 351, 711, 352,
	353, 354, 355, 356, 357, 648, 0, 359, 360, 361,
	362, 363, 365, 367, 368, 369, 370, 371, 373, 375,
	0, 0, 0, 0, 0, 0, 0, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 390, 392, 393, 394,
	395, 396, 397, 400, 0, 402, 404, 0, 405, 408,
	0, 409, 410, 411, 412, 413, 414, 415, 416, 652,
	417, 0, 418, 419, 421, 0, 424, 425, 426, 427,
	428, 0, 429, 654, 655, 430, 431, 433, 434, 435,
	437, 438, 439, 440, 441, 442, 443, 444, 445, 446,
	447, 448, 0, 449, 450, 451, 453, 0, 454, 455,
	458, 459, 460, 461, 0, 463, 671, 0, 464, 465,
	466, 0, 0, 467, 468, 469, 470, 471, 472, 475,
	672, 477, 478, 479, 480, 481, 482, 483, 713, 485,
	486, 487, 488, 489, 490, 491, 675, 676, 492, 494,
	495, 677, 679, 680, 0, 510, 511, 512, 513, 514,
	515, 516, 518, 0, 520, 521, 522, 681, 523, 524,
	525, 526, 0, 527, 528, 529, 530, 531, 533, 536,
	537, 538, 539, 0, 542, 543, 544, 545, 546, 547,
	548, 550, 551, 552, 554, 555, 556, 714, 557, 558,
	559, 560, 684, 562, 563, 715, 565, 566, 568, 569,
	570, 571, 572, 573, 724, 0, 575, 685, 576, 577,
	578, 579, 580, 0, 582, 583, 584, 585, 586, 587,
	590, 591, 592, 594, 595, 687, 596, 597, 0, 599,
	600, 0, 602, 603, 604, 605, 606, 0, 725, 607,
	689, 608, 690, 609, 610, 611, 612, 613, 614, 615,
	617, 0, 0, 619, 620, 621, 623, 624, 625, 626,
	629, 630, 631, 632, 633, 0, 634, 636, 638, 716,
	693, 694, 695, 696, 697, 699, 700, 701, 702, 639,
	640, 656, 507, 501, 457, 499, 500, 504, 505, 508,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 935, 936, 937, 0,
	0, 0, 0, 0, 320, 929, 930, 931, 932, 933,
	934, 927, 0, 0, 0, 0, 0, 0, 938, 939,
	940, 0, 333, 0, 350, 0, 0, 399, 436, 651,
	0, 0, 496, 0, 549, 553, 0, 642, 0, 0,
	0, 0, 407, 0, 0, 0, 0, 0, 0, 0,
	618, 0, 0, 0, 0, 338, 726, 641, 712, 0,
	0, 0, 5640, 0, 0, 0, 0, 0, 0, 0,
	346, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 474, 691, 567, 345, 391,
	378, 420, 462, 574, 0, 0, 452, 622, 387, 476,
	0, 366, 509, 0, 598, 473, 0, 581, 601, 0,
	493, 372, 532, 588, 589, 0, 0, 0, 0, 0,
	376, 377, 498, 358, 506, 703, 669, 561, 519, 517,
	0, 484, 541, 698, 0, 0, 406, 0, 401, 497,
	637, 364, 616, 535, 502, 456, 564, 593, 403, 388,
	389, 432, 534, 422, 374, 627, 666, 670, 668, 664,
	661, 665, 662, 663, 667, 423, 660, 0, 635, 644,
	678, 658, 686, 643, 683, 653, 398, 682, 647, 646,
	692, 673, 674, 628, 688, 659, 657, 650, 649, 645,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 331,
	332, 334, 336, 0, 335, 337, 339, 340, 341, 0,
	342, 343, 344, 347, 348, 349, 351, 711, 352, 353,
	354, 355, 356, 357, 648, 0, 359, 360, 361, 362,
	363, 365, 367, 368, 369, 370, 371, 373, 375, 0,
	0, 0, 0, 0, 0, 0, 379, 380, 381, 382,
	383, 384, 0, 385, 386, 390, 392, 393, 394, 395,
	396, 397, 400, 0, 402, 404, 0, 405, 408, 0,
	409, 410, 411, 412, 413, 414, 415, 416, 652, 417,
	0, 418, 419, 421, 0, 424, 425, 426, 427, 428,
	0, 429, 654, 655, 430, 431, 433, 434, 435, 437,
	438, 439, 440, 441, 442, 443, 444, 445, 446, 447,
	448, 0, 449, 450, 451, 453, 0, 454, 455, 458,
	459, 460, 461, 0, 463, 671, 0, 464, 465, 466,
	0, 0, 467, 468, 469, 470, 471, 472, 475, 672,
	477, 478, 479, 480, 481, 482, 483, 713, 485, 486,
	487, 488, 489, 490, 491, 675, 676, 492, 494, 495,
	677, 679, 680, 0, 510, 511, 512, 513, 514, 515,
	516, 518, 0, 520, 521, 522, 681, 523, 524, 525,
	526, 0, 527, 528, 529, 530, 531, 533, 536, 537,
	538, 539, 0, 542, 543, 544, 545, 546, 547, 548,
	550, 551, 552, 554, 555, 556, 714, 557, 558, 559,
	560, 684, 562, 563, 715, 565, 566, 568, 569, 570,
	571, 572, 573, 724, 0, 575, 685, 576, 577, 578,
	579, 580, 0, 582, 583, 584, 585, 586, 587, 590,
	591, 592, 594, 595, 687, 596, 597, 0, 599, 600,
	0, 602, 603, 604, 605, 606, 0, 725, 607, 689,
	608, 690, 609, 610, 611, 612, 613, 614, 615, 617,
	0, 0, 619, 620, 621, 623, 624, 625, 626, 629,
	630, 631, 632, 633, 0, 634, 636, 638, 716, 693,
	694, 695, 696, 697, 699, 700, 701, 702, 639, 640,
	656, 507, 501, 457, 499, 500, 504, 505, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 935, 936, 937, 0, 0,
	0, 0, 0, 320, 929, 930, 931, 932, 933, 934,
	927, 0, 0, 0, 0, 0, 0, 938, 939, 940,
	0, 333, 0, 350, 0, 0, 399, 436, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	3840, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 3841, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 935, 936, 937, 0, 0, 0,
	0, 0, 320, 929, 930, 931, 932, 933, 934, 927,
	0, 0, 0, 0, 0, 0, 938, 939, 940, 0,
	333, 0, 350, 0, 0, 399, 436, 651, 0, 0,
	496, 0, 549, 553, 0, 642, 0, 0, 0, 0,
	407, 0, 0, 0, 0, 0, 0, 0, 618, 0,
	0, 0, 0, 338, 726, 641, 712, 0, 0, 0,
	503, 0, 0, 0, 0, 0, 0, 0, 346, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 540, 474, 691, 567, 345, 391, 378, 420,
	462, 574, 0, 0, 452, 622, 387, 476, 0, 366,
	509, 0, 598, 473, 0, 581, 601, 0, 493, 372,
	532, 588, 589, 0, 0, 0, 0, 0, 376, 377,
	498, 358, 506, 703, 669, 561, 519, 517, 0, 484,
	541, 698, 0, 0, 406, 0, 401, 497, 637, 364,
	616, 535, 502, 456, 564, 593, 403, 388, 389, 432,
	534, 422, 374, 627, 666, 670, 668, 664, 661, 665,
	662, 663, 667, 423, 660, 0, 635, 644, 678, 658,
	686, 643, 683, 653, 398, 682, 647, 646, 692, 673,
	674, 628, 688, 659, 657, 650, 649, 645, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 331, 332, 334,
	336, 0, 335, 337, 339, 340, 341, 0, 342, 343,
	344, 347, 348, 349, 351, 711, 352, 353, 354, 1914,
	356, 357, 648, 0, 359, 360, 361, 362, 363, 365,
	367, 368, 369, 370, 371, 373, 375, 0, 0, 0,
	0, 0, 0, 0, 379, 380, 381, 382, 383, 384,
	0, 385, 386, 390, 392, 393, 394, 395, 396, 397,
	400, 0, 402, 404, 0, 405, 408, 0, 409, 410,
	411, 412, 413, 414, 415, 416, 652, 1915, 0, 418,
	419, 421, 0, 424, 425, 426, 427, 428, 0, 429,
	654, 655, 430, 431, 433, 434, 435, 437, 438, 439,
	440, 441, 442, 443, 444, 445, 446, 447, 448, 0,
	449, 450, 451, 453, 0, 454, 455, 458, 459, 460,
	461, 0, 463, 671, 0, 464, 465, 466, 0, 0,
	467, 468, 469, 470, 471, 472, 475, 672, 477, 478,
	479, 480, 481, 482, 483, 713, 485, 486, 487, 488,
	489, 490, 491, 675, 676, 492, 494, 495, 677, 679,
	680, 0, 510, 511, 512, 513, 514, 515, 516, 518,
	0, 520, 521, 522, 681, 523, 524, 525, 526, 0,
	527, 528, 529, 530, 531, 533, 536, 537, 538, 539,
	0, 542, 543, 544, 545, 546, 547, 548, 550, 551,
	552, 554, 555, 556, 714, 557, 558, 559, 560, 684,
	562, 563, 715, 565, 566, 568, 569, 570, 571, 572,
	573, 724, 0, 575, 685, 576, 577, 578, 579, 580,
	0, 582, 583, 584, 585, 586, 587, 590, 591, 592,
	594, 595, 687, 596, 597, 0, 599, 600, 0, 602,
	603, 604, 605, 606, 0, 725, 607, 689, 608, 690,
	609, 610, 611, 612, 613, 614, 615, 617, 0, 0,
	619, 620, 621, 623, 624, 625, 626, 629, 630, 631,
	632, 633, 0, 634, 636, 638, 716, 693, 694, 695,
	696, 697, 699, 700, 701, 702, 639, 640, 656, 507,
	501, 457, 499, 500, 504, 505, 508, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 935, 936, 937, 0, 0, 0, 0,
	0, 320, 929, 930, 931, 932, 933, 934, 927, 0,
	0, 0, 0, 0, 0, 938, 939, 940, 0, 333,
	0, 350, 0, 0, 399, 436, 651, 0, 0, 496,
	0, 549, 553, 0, 642, 0, 0, 0, 0, 407,
	0, 0, 0, 0, 0, 0, 0, 618, 0, 0,
	0, 0, 338, 726, 641, 712, 0, 0, 0, 503,
	0, 0, 0, 0, 0, 0, 0, 346, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 540, 474, 691, 567, 345, 391, 378, 420, 462,
	574, 0, 0, 452, 622, 387, 476, 0, 366, 509,
	0, 598, 473, 0, 581, 601, 0, 493, 372, 532,
	588, 589, 0, 0, 0, 0, 0, 376, 377, 498,
	358, 506, 703, 669, 561, 519, 517, 0, 484, 541,
	698, 0, 0, 406, 0, 401, 497, 637, 364, 616,
	535, 502, 456, 564, 593, 403, 388, 389, 432, 534,
	422, 374, 627, 666, 670, 668, 664, 661, 665, 662,
	663, 667, 423, 660, 0, 635, 644, 678, 658, 686,
	643, 683, 653, 398, 682, 647, 646, 692, 673, 674,
	628, 688, 659, 657, 650, 649, 645, 0, 323, 324,
	325, 326, 327, 328, 329, 330, 331, 332, 334, 336,
	0, 335, 337, 339, 340, 341, 0, 342, 343, 344,
	347, 348, 349, 351, 711, 352, 353, 354, 1009, 356,
	357, 648, 0, 359, 360, 361, 362, 363, 365, 367,
	368, 369, 370, 371, 373, 375, 0, 0, 0, 0,
	0, 0, 0, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 390, 392, 393, 394, 395, 396, 397, 400,
	0, 402, 404, 0, 405, 408, 0, 409, 410, 411,
	412, 413, 414, 415, 416, 652, 1010, 0, 418, 419,
	421, 0, 424, 425, 426, 427, 428, 0, 429, 654,
	655, 430, 431, 433, 434, 435, 437, 438, 439, 440,
	441, 442, 443, 444, 445, 446, 447, 448, 0, 449,
	450, 451, 453, 0, 454, 455, 458, 459, 460, 461,
	0, 463, 671, 0, 464, 465, 466, 0, 0, 467,
	468, 469, 470, 471, 472, 475, 672, 477, 478, 479,
	480, 481, 482, 483, 713, 485, 486, 487, 488, 489,
	490, 491, 675, 676, 492, 494, 495, 677, 679, 680,
	0, 510, 511, 512, 513, 514, 515, 516, 518, 0,
	520, 521, 522, 681, 523, 524, 525, 526, 0, 527,
	528, 529, 530, 531, 533, 536, 537, 538, 539, 0,
	542, 543, 544, 545, 546, 547, 548, 550, 551, 552,
	554, 555, 556, 714, 557, 558, 559, 560, 684, 562,
	563, 715, 565, 566, 568, 569, 570, 571, 572, 573,
	724, 0, 575, 685, 576, 577, 578, 579, 580, 0,
	582, 583, 584, 585, 586, 587, 590, 591, 592, 594,
	595, 687, 596, 597, 0, 599, 600, 0, 602, 603,
	604, 605, 606, 0, 725, 607, 689, 608, 690, 609,
	610, 611, 612, 613, 614, 615, 617, 0, 0, 619,
	620, 621, 623, 624, 625, 626, 629, 630, 631, 632,
	633, 0, 634, 636, 638, 716, 693, 694, 695, 696,
	697, 699, 700, 701, 702, 639, 640, 656, 507, 501,
	457, 499, 500, 504, 505, 508, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 935, 936, 937, 0, 0, 0, 0, 0,
	320, 929, 930, 931, 932, 933, 934, 927, 0, 0,
	0, 0, 0, 0, 938, 939, 940, 0, 333, 0,
	350, 0, 0, 399, 436, 651, 0, 0, 496, 0,
	549, 553, 0, 642, 0, 0, 0, 0, 407, 0,
	0, 0, 0, 0, 0, 0, 618, 0, 0, 0,
	0, 338, 726, 641, 712, 0, 0, 0, 503, 0,
	0, 0, 0, 0, 0, 0, 346, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	540, 474, 691, 567, 345, 391, 378, 420, 462, 574,
	0, 0, 452, 622, 387, 476, 0, 366, 509, 0,
	598, 473, 0, 581, 601, 0, 493, 372, 532, 588,
	589, 0, 0, 0, 0, 0, 376, 377, 498, 358,
	506, 703, 669, 561, 519, 517, 0, 484, 541, 698,
	0, 0, 406, 0, 401, 497, 637, 364, 616, 535,
	502, 456, 564, 593, 403, 388, 389, 432, 534, 422,
	374, 627, 666, 670, 668, 664, 661, 665, 662, 663,
	667, 423, 660, 0, 635, 644, 678, 658, 686, 643,
	683, 653, 398, 682, 647, 646, 692, 673, 674, 628,
	688, 659, 657, 650, 649, 645, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 331, 332, 334, 336, 0,
	335, 337, 339, 340, 341, 0, 342, 343, 344, 347,
	348, 349, 351, 711, 352, 353, 354, 923, 356, 357,
	648, 0, 359, 360, 361, 362, 363, 365, 367, 368,
	369, 370, 371, 373, 375, 0, 0, 0, 0, 0,
	0, 0, 379, 380, 381, 382, 383, 384, 0, 385,
	386, 390, 392, 393, 394, 395, 396, 397, 400, 0,
	402, 404, 0, 405, 408, 0, 409, 410, 411, 412,
	413, 414, 415, 416, 652, 924, 0, 418, 419, 421,
	0, 424, 425, 426, 427, 428, 0, 429, 654, 655,
	430, 431, 433, 434, 435, 437, 438, 439, 440, 441,
	442, 443, 444, 445, 446, 447, 448, 0, 449, 450,
	451, 453, 0, 454, 455, 458, 459, 460, 461, 0,
	463, 671, 0, 464, 465, 466, 0, 0, 467, 468,
	469, 470, 471, 472, 475, 672, 477, 478, 479, 480,
	481, 482, 483, 713, 485, 486, 487, 488, 489, 490,
	491, 675, 676, 492, 494, 495, 677, 679, 680, 0,
	510, 511, 512, 513, 514, 515, 516, 518, 0, 520,
	521, 522, 681, 523, 524, 525, 526, 0, 527, 528,
	529, 530, 531, 533, 536, 537, 538, 539, 0, 542,
	543, 544, 545, 546, 547, 548, 550, 551, 552, 554,
	555, 556, 714, 557, 558, 559, 560, 684, 562, 563,
	715, 565, 566, 568, 569, 570, 571, 572, 573, 724,
	0, 575, 685, 576, 577, 578, 579, 580, 0, 582,
	583, 584, 585, 586, 587, 590, 591, 592, 594, 595,
	687, 596, 597, 0, 599, 600, 0, 602, 603, 604,
	605, 606, 0, 725, 607, 689, 608, 690, 609, 610,
	611, 612, 613, 614, 615, 617, 0, 0, 619, 620,
	621, 623, 624, 625, 626, 629, 630, 631, 632, 633,
	0, 634, 636, 638, 716, 693, 694, 695, 696, 697,
	699, 700, 701, 702, 639, 640, 656, 507, 501, 457,
	499, 500, 504, 505, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 825, 0,
	0, 935, 936, 937, 0, 0, 0, 0, 0, 0,
	929, 930, 931, 932, 933, 934, 333, 0, 350, 831,
	0, 399, 436, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 836, 0,
	842, 0, 848, 0, 618, 0, 838, 839, 844, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 840,
	837, 841, 847, 835, 845, 832, 843, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 1346, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 829,
	834, 0, 850, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	1374, 1376, 1372, 1368, 1369, 1334, 1335, 1375, 1371, 423,
	3440, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 828, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 1358, 1336,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 1347, 1337, 1342, 1348, 1338, 1339, 1343,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 1350, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 1359, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 1360,
	0, 464, 465, 466, 1340, 1341, 467, 468, 469, 470,
	471, 472, 475, 1373, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	1351, 492, 494, 495, 1357, 679, 1352, 846, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	1353, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 1344, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 1354, 596,
	597, 1345, 599, 600, 849, 602, 603, 604, 605, 606,
	0, 725, 607, 1355, 608, 1356, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 1361, 1362, 1365, 1363, 1364, 1366,
	1367, 1377, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 958, 0, 0, 1349, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 831, 0, 399, 436, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 836, 0, 842, 0, 848, 0, 618,
	0, 838, 839, 844, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 840, 837, 841, 847, 835, 845,
	832, 843, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 829, 834, 0, 850, 177, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 178, 335, 337, 339, 340, 341, 828, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 830, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 833, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 846, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 849,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 1179, 0, 797, 0, 0, 0,
	0, 0, 0, 0, 0, 789, 333, 0, 350, 0,
	0, 399, 436, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 793,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 792, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 784, 785, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 786, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 791, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 790,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 782, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 783, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	787, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 825, 0, 1314, 811, 0, 1319, 1320, 0,
	797, 0, 0, 0, 0, 0, 0, 0, 795, 796,
	333, 0, 350, 831, 0, 399, 436, 651, 0, 0,
	496, 0, 549, 553, 0, 642, 0, 0, 0, 0,
	407, 1317, 836, 0, 842, 1318, 848, 1316, 618, 0,
	838, 839, 844, 338, 1393, 641, 712, 0, 0, 0,
	503, 0, 0, 0, 0, 0, 0, 0, 346, 0,
	0, 0, 0, 840, 837, 841, 847, 835, 845, 832,
	843, 0, 540, 474, 691, 567, 345, 391, 378, 420,
	462, 574, 0, 0, 452, 622, 387, 476, 0, 366,
	509, 0, 598, 473, 0, 581, 601, 0, 493, 372,
	532, 588, 589, 829, 834, 0, 850, 0, 376, 377,
	498, 358, 506, 703, 669, 561, 519, 517, 0, 484,
	541, 698, 0, 0, 406, 0, 401, 497, 637, 364,
	616, 535, 502, 456, 564, 593, 403, 388, 389, 432,
	534, 422, 374, 627, 666, 670, 668, 664, 661, 665,
	662, 663, 667, 423, 6272, 0, 635, 1379, 1390, 1387,
	1392, 1378, 1391, 1385, 1066, 682, 1382, 1381, 1395, 1388,
	1389, 628, 1394, 1333, 1386, 1384, 1383, 1380, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 331, 332, 334,
	336, 0, 335, 337, 339, 340, 341, 828, 342, 343,
	344, 347, 348, 349, 351, 711, 352, 353, 354, 355,
	356, 357, 648, 830, 359, 360, 361, 362, 363, 365,
	367, 368, 369, 370, 371, 373, 375, 0, 0, 0,
	833, 0, 0, 0, 379, 380, 381, 382, 383, 384,
	0, 385, 386, 390, 392, 393, 394, 395, 396, 397,
	400, 0, 402, 404, 0, 405, 408, 0, 409, 410,
	411, 412, 413, 414, 415, 416, 652, 417, 0, 418,
	419, 421, 0, 424, 425, 426, 427, 428, 0, 429,
	654, 655, 430, 431, 433, 434, 435, 437, 438, 439,
	440, 441, 442, 443, 444, 445, 446, 447, 448, 0,
	449, 450, 451, 453, 0, 454, 455, 458, 459, 460,
	461, 0, 463, 671, 0, 464, 465, 466, 0, 0,
	467, 468, 469, 470, 471, 472, 475, 672, 477, 478,
	479, 480, 481, 482, 483, 713, 485, 486, 487, 488,
	489, 490, 491, 675, 676, 492, 494, 495, 677, 679,
	680, 846, 510, 511, 512, 513, 514, 515, 516, 518,
	0, 520, 521, 522, 681, 523, 524, 525, 526, 0,
	527, 528, 529, 530, 531, 533, 536, 537, 538, 539,
	0, 542, 543, 544, 545, 546, 547, 548, 550, 551,
	552, 554, 555, 556, 714, 557, 558, 559, 560, 684,
	562, 563, 715, 565, 566, 568, 569, 570, 571, 572,
	573, 724, 0, 575, 685, 576, 577, 578, 579, 580,
	0, 582, 583, 584, 585, 586, 587, 590, 591, 592,
	594, 595, 687, 596, 597, 0, 599, 600, 849, 602,
	603, 604, 605, 606, 0, 725, 607, 689, 608, 690,
	609, 610, 611, 612, 613, 614, 615, 617, 0, 0,
	619, 620, 621, 623, 624, 625, 626, 629, 630, 631,
	632, 633, 0, 634, 636, 638, 716, 693, 694, 695,
	696, 697, 699, 700, 701, 702, 639, 640, 656, 507,
	501, 457, 499, 500, 504, 505, 508, 320, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 333, 0, 350, 0, 0,
	399, 436, 651, 0, 0, 496, 0, 549, 553, 0,
	642, 0, 0, 0, 0, 407, 0, 0, 0, 0,
	0, 0, 0, 618, 0, 0, 0, 0, 338, 726,
	641, 712, 0, 0, 0, 503, 0, 0, 0, 0,
	0, 0, 0, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 474, 691,
	567, 345, 391, 378, 420, 462, 574, 0, 0, 452,
	622, 387, 476, 0, 366, 509, 0, 598, 473, 0,
	581, 601, 0, 493, 372, 532, 588, 589, 0, 0,
	0, 0, 0, 376, 377, 498, 358, 506, 703, 669,
	561, 519, 517, 0, 484, 541, 698, 0, 0, 406,
	0, 401, 497, 637, 364, 616, 535, 502, 456, 564,
	593, 403, 388, 389, 432, 534, 422, 374, 627, 666,
	670, 668, 664, 661, 665, 662, 663, 667, 423, 660,
	0, 635, 644, 678, 658, 686, 643, 683, 653, 398,
	682, 647, 646, 692, 673, 674, 628, 688, 659, 657,
	650, 649, 645, 0, 323, 324, 325, 326, 327, 328,
	329, 330, 331, 332, 334, 336, 0, 335, 337, 339,
	340, 341, 0, 342, 343, 344, 347, 348, 349, 351,
	711, 352, 353, 354, 355, 356, 357, 648, 0, 359,
	360, 361, 362, 363, 365, 367, 368, 369, 370, 371,
	373, 375, 0, 0, 0, 0, 0, 0, 0, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 390, 392,
	393, 394, 395, 396, 397, 400, 0, 402, 404, 0,
	405, 408, 0, 409, 410, 411, 412, 413, 414, 415,
	416, 652, 417, 0, 418, 419, 421, 0, 424, 425,
	426, 427, 428, 0, 429, 654, 655, 430, 431, 433,
	434, 435, 437, 438, 439, 440, 441, 442, 443, 444,
	445, 446, 447, 448, 0, 449, 450, 451, 453, 0,
	454, 455, 458, 459, 460, 461, 0, 463, 671, 0,
	464, 465, 466, 0, 0, 467, 468, 469, 470, 471,
	472, 475, 672, 477, 478, 479, 480, 481, 482, 483,
	713, 485, 486, 487, 488, 489, 490, 491, 675, 676,
	492, 494, 495, 677, 679, 680, 0, 510, 511, 512,
	513, 514, 515, 516, 518, 0, 520, 521, 522, 681,
	523, 524, 525, 526, 0, 527, 528, 529, 530, 531,
	533, 536, 537, 538, 539, 0, 542, 543, 544, 545,
	546, 547, 548, 550, 551, 552, 554, 555, 556, 714,
	557, 558, 559, 560, 684, 562, 563, 715, 565, 566,
	568, 569, 570, 571, 572, 573, 724, 0, 575, 685,
	576, 577, 578, 579, 580, 0, 582, 583, 584, 585,
	586, 587, 590, 591, 592, 594, 595, 687, 596, 597,
	0, 599, 600, 0, 602, 603, 604, 605, 606, 0,
	725, 607, 689, 608, 690, 609, 610, 611, 612, 613,
	614, 615, 617, 0, 0, 619, 620, 621, 623, 624,
	625, 626, 629, 630, 631, 632, 633, 0, 634, 636,
	638, 716, 693, 694, 695, 696, 697, 699, 700, 701,
	702, 639, 640, 656, 507, 501, 457, 499, 500, 504,
	505, 508, 320, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	333, 0, 350, 0, 0, 399, 436, 651, 0, 6097,
	496, 0, 549, 553, 0, 642, 0, 0, 0, 0,
	407, 0, 0, 0, 0, 0, 0, 0, 618, 0,
	0, 0, 0, 338, 726, 641, 712, 0, 0, 0,
	503, 0, 0, 0, 0, 0, 0, 0, 346, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 540, 474, 691, 567, 345, 391, 378, 420,
	462, 574, 0, 0, 452, 622, 387, 476, 0, 366,
	509, 0, 598, 473, 0, 581, 601, 0, 493, 372,
	532, 588, 589, 0, 0, 0, 0, 0, 376, 377,
	498, 358, 506, 703, 669, 561, 519, 517, 0, 484,
	541, 698, 0, 0, 406, 0, 401, 497, 637, 364,
	616, 535, 502, 456, 564, 593, 403, 388, 389, 432,
	534, 422, 374, 627, 666, 670, 668, 664, 661, 665,
	662, 663, 667, 423, 660, 0, 635, 644, 678, 658,
	686, 643, 683, 653, 398, 682, 647, 646, 692, 673,
	674, 628, 688, 659, 657, 650, 649, 645, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 331, 332, 334,
	336, 0, 335, 337, 339, 340, 341, 0, 342, 343,
	344, 347, 348, 349, 351, 711, 352, 353, 354, 355,
	356, 357, 648, 0, 359, 360, 361, 362, 363, 365,
	367, 368, 369, 370, 371, 373, 375, 0, 0, 0,
	0, 0, 0, 0, 379, 380, 381, 382, 383, 384,
	0, 385, 386, 390, 392, 393, 394, 395, 396, 397,
	400, 0, 402, 404, 0, 405, 408, 0, 409, 410,
	411, 412, 413, 414, 415, 416, 652, 417, 0, 418,
	419, 421, 0, 424, 425, 426, 427, 428, 0, 429,
	654, 655, 430, 431, 433, 434, 435, 437, 438, 439,
	440, 441, 442, 443, 444, 445, 446, 447, 448, 0,
	449, 450, 451, 453, 0, 454, 455, 458, 459, 460,
	461, 0, 463, 671, 0, 464, 465, 466, 0, 0,
	467, 468, 469, 470, 471, 472, 475, 672, 477, 478,
	479, 480, 481, 482, 483, 713, 485, 486, 487, 488,
	489, 490, 491, 675, 676, 492, 494, 495, 677, 679,
	680, 0, 510, 511, 512, 513, 514, 515, 516, 518,
	0, 520, 521, 522, 681, 523, 524, 525, 526, 0,
	527, 528, 529, 530, 531, 533, 536, 537, 538, 539,
	0, 542, 543, 544, 545, 546, 547, 548, 550, 551,
	552, 554, 555, 556, 714, 557, 558, 559, 560, 684,
	562, 563, 715, 565, 566, 568, 569, 570, 571, 572,
	573, 724, 0, 575, 685, 576, 577, 578, 579, 580,
	0, 582, 583, 584, 585, 586, 587, 590, 591, 592,
	594, 595, 687, 596, 597, 0, 599, 600, 0, 602,
	603, 604, 605, 606, 0, 725, 607, 689, 608, 690,
	609, 610, 611, 612, 613, 614, 615, 617, 0, 0,
	619, 620, 621, 623, 624, 625, 626, 629, 630, 631,
	632, 633, 0, 634, 636, 638, 716, 693, 694, 695,
	696, 697, 699, 700, 701, 702, 639, 640, 656, 507,
	501, 457, 499, 500, 504, 505, 508, 320, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 333, 0, 350, 0, 0,
	399, 436, 651, 0, 5952, 496, 0, 549, 553, 0,
	642, 0, 0, 0, 0, 407, 0, 0, 0, 0,
	0, 0, 0, 618, 0, 0, 0, 0, 338, 726,
	641, 712, 0, 0, 0, 503, 0, 0, 0, 0,
	0, 0, 0, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 474, 691,
	567, 345, 391, 378, 420, 462, 574, 0, 0, 452,
	622, 387, 476, 0, 366, 509, 0, 598, 473, 0,
	581, 601, 0, 493, 372, 532, 588, 589, 0, 0,
	0, 0, 0, 376, 377, 498, 358, 506, 703, 669,
	561, 519, 517, 0, 484, 541, 698, 0, 0, 406,
	0, 401, 497, 637, 364, 616, 535, 502, 456, 564,
	593, 403, 388, 389, 432, 534, 422, 374, 627, 666,
	670, 668, 664, 661, 665, 662, 663, 667, 423, 660,
	0, 635, 644, 678, 658, 686, 643, 683, 653, 398,
	682, 647, 646, 692, 673, 674, 628, 688, 659, 657,
	650, 649, 645, 0, 323, 324, 325, 326, 327, 328,
	329, 330, 331, 332, 334, 336, 0, 335, 337, 339,
	340, 341, 0, 342, 343, 344, 347, 348, 349, 351,
	711, 352, 353, 354, 355, 356, 357, 648, 0, 359,
	360, 361, 362, 363, 365, 367, 368, 369, 370, 371,
	373, 375, 0, 0, 0, 0, 0, 0, 0, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 390, 392,
	393, 394, 395, 396, 397, 400, 0, 402, 404, 0,
	405, 408, 0, 409, 410, 411, 412, 413, 414, 415,
	416, 652, 417, 0, 418, 419, 421, 0, 424, 425,
	426, 427, 428, 0, 429, 654, 655, 430, 431, 433,
	434, 435, 437, 438, 439, 440, 441, 442, 443, 444,
	445, 446, 447, 448, 0, 449, 450, 451, 453, 0,
	454, 455, 458, 459, 460, 461, 0, 463, 671, 0,
	464, 465, 466, 0, 0, 467, 468, 469, 470, 471,
	472, 475, 672, 477, 478, 479, 480, 481, 482, 483,
	713, 485, 486, 487, 488, 489, 490, 491, 675, 676,
	492, 494, 495, 677, 679, 680, 0, 510, 511, 512,
	513, 514, 515, 516, 518, 0, 520, 521, 522, 681,
	523, 524, 525, 526, 0, 527, 528, 529, 530, 531,
	533, 536, 537, 538, 539, 0, 542, 543, 544, 545,
	546, 547, 548, 550, 551, 552, 554, 555, 556, 714,
	557, 558, 559, 560, 684, 562, 563, 715, 565, 566,
	568, 569, 570, 571, 572, 573, 724, 0, 575, 685,
	576, 577, 578, 579, 580, 0, 582, 583, 584, 585,
	586, 587, 590, 591, 592, 594, 595, 687, 596, 597,
	0, 599, 600, 0, 602, 603, 604, 605, 606, 0,
	725, 607, 689, 608, 690, 609, 610, 611, 612, 613,
	614, 615, 617, 0, 0, 619, 620, 621, 623, 624,
	625, 626, 629, 630, 631, 632, 633, 0, 634, 636,
	638, 716, 693, 694, 695, 696, 697, 699, 700, 701,
	702, 639, 640, 656, 507, 501, 457, 499, 500, 504,
	505, 508, 320, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	333, 0, 350, 0, 0, 399, 436, 651, 0, 5949,
	496, 0, 549, 553, 0, 642, 0, 0, 0, 0,
	407, 0, 0, 0, 0, 0, 0, 0, 618, 0,
	0, 0, 0, 338, 726, 641, 712, 0, 0, 0,
	503, 0, 0, 0, 0, 0, 0, 0, 346, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 540, 474, 691, 567, 345, 391, 378, 420,
	462, 574, 0, 0, 452, 622, 387, 476, 0, 366,
	509, 0, 598, 473, 0, 581, 601, 0, 493, 372,
	532, 588, 589, 0, 0, 0, 0, 0, 376, 377,
	498, 358, 506, 703, 669, 561, 519, 517, 0, 484,
	541, 698, 0, 0, 406, 0, 401, 497, 637, 364,
	616, 535, 502, 456, 564, 593, 403, 388, 389, 432,
	534, 422, 374, 627, 666, 670, 668, 664, 661, 665,
	662, 663, 667, 423, 660, 0, 635, 644, 678, 658,
	686, 643, 683, 653, 398, 682, 647, 646, 692, 673,
	674, 628, 688, 659, 657, 650, 649, 645, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 331, 332, 334,
	336, 0, 335, 337, 339, 340, 341, 0, 342, 343,
	344, 347, 348, 349, 351, 711, 352, 353, 354, 355,
	356, 357, 648, 0, 359, 360, 361, 362, 363, 365,
	367, 368, 369, 370, 371, 373, 375, 0, 0, 0,
	0, 0, 0, 0, 379, 380, 381, 382, 383, 384,
	0, 385, 386, 390, 392, 393, 394, 395, 396, 397,
	400, 0, 402, 404, 0, 405, 408, 0, 409, 410,
	411, 412, 413, 414, 415, 416, 652, 417, 0, 418,
	419, 421, 0, 424, 425, 426, 427, 428, 0, 429,
	654, 655, 430, 431, 433, 434, 435, 437, 438, 439,
	440, 441, 442, 443, 444, 445, 446, 447, 448, 0,
	449, 450, 451, 453, 0, 454, 455, 458, 459, 460,
	461, 0, 463, 671, 0, 464, 465, 466, 0, 0,
	467, 468, 469, 470, 471, 472, 475, 672, 477, 478,
	479, 480, 481, 482, 483, 713, 485, 486, 487, 488,
	489, 490, 491, 675, 676, 492, 494, 495, 677, 679,
	680, 0, 510, 511, 512, 513, 514, 515, 516, 518,
	0, 520, 521, 522, 681, 523, 524, 525, 526, 0,
	527, 528, 529, 530, 531, 533, 536, 537, 538, 539,
	0, 542, 543, 544, 545, 546, 547, 548, 550, 551,
	552, 554, 555, 556, 714, 557, 558, 559, 560, 684,
	562, 563, 715, 565, 566, 568, 569, 570, 571, 572,
	573, 724, 0, 575, 685, 576, 577, 578, 579, 580,
	0, 582, 583, 584, 585, 586, 587, 590, 591, 592,
	594, 595, 687, 596, 597, 0, 599, 600, 0, 602,
	603, 604, 605, 606, 0, 725, 607, 689, 608, 690,
	609, 610, 611, 612, 613, 614, 615, 617, 0, 0,
	619, 620, 621, 623, 624, 625, 626, 629, 630, 631,
	632, 633, 0, 634, 636, 638, 716, 693, 694, 695,
	696, 697, 699, 700, 701, 702, 639, 640, 656, 507,
	501, 457, 499, 500, 504, 505, 508, 320, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 333, 0, 350, 0, 0,
	399, 436, 651, 0, 807, 496, 0, 549, 553, 182,
	642, 0, 0, 0, 0, 407, 0, 0, 0, 0,
	0, 0, 0, 618, 0, 0, 0, 0, 338, 726,
	641, 712, 0, 0, 0, 503, 179, 0, 0, 0,
	180, 0, 0, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 474, 1176,
	567, 345, 391, 378, 420, 462, 574, 0, 0, 452,
	622, 387, 476, 0, 366, 509, 0, 598, 473, 0,
	581, 601, 0, 493, 372, 532, 588, 589, 0, 0,
	0, 0, 0, 376, 377, 498, 358, 506, 703, 669,
	561, 519, 517, 0, 484, 541, 698, 0, 0, 406,
	0, 401, 497, 637, 364, 616, 535, 502, 456, 564,
	593, 403, 388, 389, 432, 534, 422, 374, 627, 666,
	670, 668, 664, 661, 665, 662, 663, 667, 423, 660,
	0, 635, 644, 678, 658, 686, 643, 683, 653, 398,
	682, 647, 646, 692, 673, 674, 628, 688, 659, 657,
	650, 649, 645, 0, 323, 324, 325, 326, 327, 328,
	329, 330, 331, 332, 334, 336, 0, 335, 337, 339,
	340, 341, 0, 342, 343, 344, 347, 348, 349, 351,
	711, 352, 353, 354, 355, 356, 357, 648, 0, 359,
	360, 361, 362, 363, 365, 367, 368, 369, 370, 371,
	373, 375, 0, 0, 0, 0, 0, 0, 0, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 390, 392,
	393, 394, 395, 396, 397, 400, 0, 402, 404, 0,
	405, 408, 0, 409, 410, 411, 412, 413, 414, 415,
	416, 652, 417, 0, 418, 419, 421, 0, 424, 425,
	426, 427, 428, 0, 429, 654, 655, 430, 431, 433,
	434, 435, 437, 438, 439, 440, 441, 442, 443, 444,
	445, 446, 447, 448, 0, 449, 450, 451, 453, 0,
	454, 455, 458, 459, 460, 461, 0, 463, 671, 0,
	464, 465, 466, 0, 0, 467, 468, 469, 470, 471,
	472, 475, 672, 477, 478, 479, 480, 481, 482, 483,
	713, 485, 486, 487, 488, 489, 490, 491, 675, 676,
	492, 494, 495, 677, 679, 680, 0, 510, 511, 512,
	513, 514, 515, 516, 518, 0, 520, 521, 522, 681,
	523, 524, 525, 526, 0, 527, 528, 529, 530, 531,
	533, 536, 537, 538, 539, 0, 542, 543, 544, 545,
	546, 547, 548, 550, 551, 552, 554, 555, 556, 714,
	557, 558, 559, 560, 684, 562, 563, 715, 565, 566,
	568, 569, 570, 571, 572, 573, 724, 0, 575, 685,
	576, 577, 578, 579, 580, 0, 582, 583, 584, 585,
	586, 587, 590, 591, 592, 594, 595, 687, 596, 597,
	0, 599, 600, 0, 602, 603, 604, 605, 606, 0,
	725, 607, 689, 608, 690, 609, 610, 611, 612, 613,
	614, 615, 617, 0, 0, 619, 620, 621, 623, 624,
	625, 626, 629, 630, 631, 632, 633, 0, 634, 636,
	638, 716, 693, 694, 695, 696, 697, 699, 700, 701,
	702, 639, 640, 656, 507, 501, 457, 499, 500, 504,
	505, 508, 958, 0, 0, 811, 0, 0, 0, 0,
	0, 183, 0, 0, 0, 0, 0, 0, 0, 0,
	333, 0, 350, 831, 176, 399, 436, 651, 0, 0,
	496, 0, 549, 553, 0, 642, 0, 0, 0, 0,
	407, 1807, 836, 0, 842, 0, 848, 1806, 618, 0,
	838, 839, 844, 338, 726, 641, 712, 0, 0, 0,
	503, 0, 0, 0, 0, 0, 0, 0, 346, 0,
	0, 0, 1808, 840, 837, 841, 847, 835, 845, 832,
	843, 0, 540, 474, 691, 567, 345, 391, 378, 420,
	462, 574, 0, 0, 452, 622, 387, 476, 0, 366,
	509, 0, 598, 473, 0, 581, 601, 0, 493, 372,
	532, 588, 589, 829, 834, 0, 850, 0, 376, 377,
	498, 358, 506, 703, 669, 561, 519, 517, 0, 484,
	541, 698, 0, 0, 406, 0, 401, 497, 637, 364,
	616, 535, 502, 456, 564, 593, 403, 388, 389, 432,
	534, 422, 374, 627, 666, 670, 668, 664, 661, 665,
	662, 663, 667, 423, 660, 0, 635, 644, 678, 658,
	686, 643, 683, 653, 398, 682, 647, 646, 692, 673,
	674, 628, 688, 659, 657, 650, 649, 645, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 331, 332, 334,
	336, 0, 335, 337, 339, 340, 341, 828, 342, 343,
	344, 347, 348, 349, 351, 711, 352, 353, 354, 355,
	356, 357, 648, 830, 359, 360, 361, 362, 363, 365,
	367, 368, 369, 370, 371, 373, 375, 0, 0, 0,
	833, 0, 0, 0, 379, 380, 381, 382, 383, 384,
	0, 385, 386, 390, 392, 393, 394, 395, 396, 397,
	400, 0, 402, 404, 0, 405, 408, 0, 409, 410,
	411, 412, 413, 414, 415, 416, 652, 417, 0, 418,
	419, 421, 0, 424, 425, 426, 427, 428, 0, 429,
	654, 655, 430, 431, 433, 434, 435, 437, 438, 439,
	440, 441, 442, 443, 444, 445, 446, 447, 448, 0,
	449, 450, 451, 453, 0, 454, 455, 458, 459, 460,
	461, 0, 463, 671, 0, 464, 465, 466, 0, 0,
	467, 468, 469, 470, 471, 472, 475, 672, 477, 478,
	479, 480, 481, 482, 483, 713, 485, 486, 487, 488,
	489, 490, 491, 675, 676, 492, 494, 495, 677, 679,
	680, 846, 510, 511, 512, 513, 514, 515, 516, 518,
	0, 520, 521, 522, 681, 523, 524, 525, 526, 0,
	527, 528, 529, 530, 531, 533, 536, 537, 538, 539,
	0, 542, 543, 544, 545, 546, 547, 548, 550, 551,
	552, 554, 555, 556, 714, 557, 558, 559, 560, 684,
	562, 563, 715, 565, 566, 568, 569, 570, 571, 572,
	573, 724, 0, 575, 685, 576, 577, 578, 579, 580,
	0, 582, 583, 584, 585, 586, 587, 590, 591, 592,
	594, 595, 687, 596, 597, 0, 599, 600, 849, 602,
	603, 604, 605, 606, 0, 725, 607, 689, 608, 690,
	609, 610, 611, 612, 613, 614, 615, 617, 0, 0,
	619, 620, 621, 623, 624, 625, 626, 629, 630, 631,
	632, 633, 0, 634, 636, 638, 716, 693, 694, 695,
	696, 697, 699, 700, 701, 702, 639, 640, 656, 507,
	501, 457, 499, 500, 504, 505, 508, 958, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 333, 0, 350, 831, 0,
	399, 436, 651, 0, 0, 496, 0, 549, 553, 0,
	642, 0, 0, 0, 0, 407, 0, 836, 0, 842,
	0, 848, 0, 618, 0, 838, 839, 844, 338, 726,
	641, 712, 0, 0, 0, 503, 0, 0, 0, 0,
	0, 0, 0, 346, 3909, 0, 0, 0, 840, 837,
	841, 847, 835, 845, 832, 843, 0, 540, 474, 691,
	567, 345, 391, 378, 420, 462, 574, 0, 0, 452,
	622, 387, 476, 0, 366, 509, 0, 598, 473, 0,
	581, 601, 0, 493, 372, 532, 588, 589, 829, 834,
	0, 850, 0, 376, 377, 498, 358, 506, 703, 669,
	561, 519, 517, 0, 484, 541, 698, 0, 0, 406,
	0, 401, 497, 637, 364, 616, 535, 502, 456, 564,
	593, 403, 388, 389, 432, 534, 422, 374, 627, 666,
	670, 668, 664, 661, 665, 662, 663, 667, 423, 660,
	0, 635, 644, 678, 658, 686, 643, 683, 653, 398,
	682, 647, 646, 692, 673, 674, 628, 688, 659, 657,
	650, 649, 645, 0, 323, 324, 325, 326, 327, 328,
	329, 330, 331, 332, 334, 336, 0, 335, 337, 339,
	340, 341, 828, 342, 343, 344, 347, 348, 349, 351,
	711, 352, 353, 354, 355, 356, 357, 648, 830, 359,
	360, 361, 362, 363, 365, 367, 368, 369, 370, 371,
	373, 375, 0, 0, 955, 833, 0, 0, 956, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 390, 392,
	393, 394, 395, 396, 397, 400, 0, 402, 404, 0,
	405, 408, 0, 409, 410, 411, 412, 413, 414, 415,
	416, 652, 417, 0, 418, 419, 421, 0, 424, 425,
	426, 427, 428, 0, 429, 654, 655, 430, 431, 433,
	434, 435, 437, 438, 439, 440, 441, 442, 443, 444,
	445, 446, 447, 448, 0, 449, 450, 451, 453, 0,
	454, 455, 458, 459, 460, 461, 0, 463, 671, 0,
	464, 465, 466, 0, 0, 467, 468, 469, 470, 471,
	472, 475, 672, 477, 478, 479, 480, 481, 482, 483,
	713, 485, 486, 487, 488, 489, 490, 491, 675, 676,
	492, 494, 495, 677, 679, 680, 846, 510, 511, 512,
	513, 514, 515, 516, 518, 0, 520, 521, 522, 681,
	523, 524, 525, 526, 0, 527, 528, 529, 530, 531,
	533, 536, 537, 538, 539, 0, 542, 543, 544, 545,
	546, 547, 548, 550, 551, 552, 554, 555, 556, 714,
	557, 558, 559, 560, 684, 562, 563, 715, 565, 566,
	568, 569, 570, 571, 572, 573, 724, 957, 575, 685,
	576, 577, 578, 579, 580, 0, 582, 583, 584, 585,
	586, 587, 590, 591, 592, 594, 595, 687, 596, 597,
	0, 599, 600, 849, 602, 603, 604, 605, 606, 0,
	725, 607, 689, 608, 690, 609, 610, 611, 612, 613,
	614, 615, 617, 0, 0, 619, 620, 621, 623, 624,
	625, 626, 629, 630, 631, 632, 633, 0, 634, 636,
	638, 716, 693, 694, 695, 696, 697, 699, 700, 701,
	702, 639, 640, 656, 507, 501, 457, 499, 500, 504,
	505, 508, 958, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	333, 0, 350, 831, 0, 399, 436, 651, 0, 0,
	496, 0, 549, 553, 0, 642, 0, 0, 0, 0,
	407, 0, 836, 0, 842, 0, 848, 0, 618, 0,
	838, 839, 844, 338, 726, 641, 712, 0, 0, 0,
	503, 0, 0, 0, 0, 0, 0, 0, 346, 0,
	0, 0, 0, 840, 837, 841, 847, 835, 845, 832,
	843, 0, 540, 474, 691, 567, 345, 391, 378, 420,
	462, 574, 0, 0, 452, 622, 387, 476, 0, 366,
	509, 2722, 598, 473, 0, 581, 601, 0, 493, 372,
	532, 588, 589, 829, 834, 0, 850, 0, 376, 377,
	498, 358, 506, 703, 669, 561, 519, 517, 0, 484,
	541, 698, 0, 0, 406, 0, 401, 497, 637, 364,
	616, 535, 502, 456, 564, 593, 403, 388, 389, 432,
	534, 422, 374, 627, 666, 670, 668, 664, 661, 665,
	662, 663, 667, 423, 660, 0, 635, 644, 678, 658,
	686, 643, 683, 653, 398, 682, 647, 646, 692, 673,
	674, 628, 688, 659, 657, 650, 649, 645, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 331, 332, 334,
	336, 0, 335, 337, 339, 340, 341, 828, 342, 343,
	344, 347, 348, 349, 351, 711, 352, 353, 354, 355,
	356, 357, 648, 830, 359, 360, 361, 362, 363, 365,
	367, 368, 369, 370, 371, 373, 375, 0, 0, 955,
	833, 0, 0, 956, 379, 380, 381, 382, 383, 384,
	0, 385, 386, 390, 392, 393, 394, 395, 396, 397,
	400, 0, 402, 404, 0, 405, 408, 0, 409, 410,
	411, 412, 413, 414, 415, 416, 652, 417, 0, 418,
	419, 421, 0, 424, 425, 426, 427, 428, 0, 429,
	654, 655, 430, 431, 433, 434, 435, 437, 438, 439,
	440, 441, 442, 443, 444, 445, 446, 447, 448, 0,
	449, 450, 451, 453, 0, 454, 455, 458, 459, 460,
	461, 0, 463, 671, 0, 464, 465, 466, 0, 0,
	467, 468, 469, 470, 471, 472, 475, 672, 477, 478,
	479, 480, 481, 482, 483, 713, 485, 486, 487, 488,
	489, 490, 491, 675, 676, 492, 494, 495, 677, 679,
	680, 846, 510, 511, 512, 513, 514, 515, 516, 518,
	0, 520, 521, 522, 681, 523, 524, 525, 526, 0,
	527, 528, 529, 530, 531, 533, 536, 537, 538, 539,
	0, 542, 543, 544, 545, 546, 547, 548, 550, 551,
	552, 554, 555, 556, 714, 557, 558, 559, 560, 684,
	562, 563, 715, 565, 566, 568, 569, 570, 571, 572,
	573, 724, 957, 575, 685, 576, 577, 578, 579, 580,
	0, 582, 583, 584, 585, 586, 587, 590, 591, 592,
	594, 595, 687, 596, 597, 0, 599, 600, 849, 602,
	603, 604, 605, 606, 0, 725, 607, 689, 608, 690,
	609, 610, 611, 612, 613, 614, 615, 617, 0, 0,
	619, 620, 621, 623, 624, 625, 626, 629, 630, 631,
	632, 633, 0, 634, 636, 638, 716, 693, 694, 695,
	696, 697, 699, 700, 701, 702, 639, 640, 656, 507,
	501, 457, 499, 500, 504, 505, 508, 320, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 333, 0, 350, 0, 0,
	399, 436, 651, 0, 0, 496, 0, 549, 553, 0,
	642, 0, 0, 0, 0, 407, 0, 0, 0, 0,
	0, 0, 0, 618, 0, 0, 0, 0, 338, 726,
	641, 712, 0, 0, 0, 503, 0, 0, 0, 871,
	2739, 0, 0, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 474, 691,
	567, 345, 391, 378, 420, 462, 574, 0, 0, 452,
	622, 387, 476, 0, 366, 509, 0, 598, 473, 0,
	581, 601, 0, 493, 372, 532, 588, 589, 0, 0,
	0, 0, 0, 376, 377, 498, 358, 506, 703, 669,
	561, 519, 517, 0, 484, 541, 698, 0, 0, 406,
	0, 401, 497, 637, 364, 616, 535, 502, 456, 564,
	593, 403, 388, 389, 432, 534, 422, 374, 627, 666,
	670, 668, 664, 661, 665, 662, 663, 667, 423, 660,
	0, 635, 644, 678, 658, 686, 643, 683, 653, 398,
	682, 647, 646, 692, 673, 674, 628, 688, 659, 657,
	650, 649, 645, 0, 323, 324, 325, 326, 327, 328,
	329, 330, 331, 332, 334, 336, 0, 335, 337, 339,
	340, 341, 0, 342, 343, 344, 347, 348, 349, 351,
	711, 352, 353, 354, 355, 356, 357, 648, 0, 359,
	360, 361, 362, 363, 365, 367, 368, 369, 370, 371,
	373, 375, 0, 0, 0, 2743, 0, 0, 0, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 390, 392,
	393, 394, 395, 396, 397, 400, 0, 402, 404, 0,
	405, 408, 0, 409, 410, 411, 412, 413, 414, 415,
	416, 652, 417, 0, 418, 419, 421, 0, 424, 425,
	426, 427, 428, 0, 429, 654, 655, 430, 431, 433,
	434, 435, 437, 438, 439, 440, 441, 442, 443, 444,
	445, 446, 447, 448, 0, 449, 450, 451, 453, 0,
	454, 455, 458, 459, 460, 461, 0, 463, 671, 0,
	464, 465, 466, 0, 0, 467, 468, 469, 470, 471,
	472, 475, 672, 477, 478, 479, 480, 481, 482, 483,
	713, 485, 486, 487, 488, 489, 490, 491, 675, 676,
	492, 494, 495, 677, 679, 680, 0, 510, 511, 512,
	513, 514, 515, 516, 518, 0, 520, 521, 522, 681,
	523, 524, 525, 526, 0, 527, 528, 529, 530, 531,
	533, 536, 537, 538, 539, 0, 542, 543, 544, 545,
	546, 547, 548, 550, 551, 552, 554, 555, 556, 714,
	557, 558, 559, 560, 684, 562, 563, 715, 565, 566,
	568, 569, 570, 571, 572, 573, 724, 0, 575, 685,
	576, 577, 578, 579, 580, 0, 582, 583, 584, 585,
	586, 587, 590, 591, 592, 594, 595, 687, 596, 597,
	0, 2740, 600, 0, 602, 603, 604, 605, 606, 0,
	725, 607, 689, 608, 690, 609, 610, 611, 612, 613,
	614, 615, 617, 0, 0, 619, 620, 621, 623, 624,
	625, 626, 629, 630, 631, 632, 633, 0, 634, 636,
	638, 716, 693, 694, 695, 696, 697, 699, 700, 701,
	702, 639, 640, 656, 507, 501, 457, 499, 500, 504,
	505, 508, 958, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1030,
	333, 0, 350, 831, 1460, 399, 436, 651, 0, 0,
	496, 0, 549, 553, 0, 642, 0, 0, 0, 0,
	407, 0, 836, 0, 842, 0, 848, 0, 618, 0,
	838, 839, 844, 338, 726, 641, 712, 0, 0, 0,
	503, 0, 0, 0, 0, 0, 0, 0, 346, 0,
	0, 0, 0, 840, 837, 841, 847, 835, 845, 832,
	843, 0, 540, 474, 691, 567, 345, 391, 378, 420,
	462, 574, 0, 0, 452, 622, 387, 476, 0, 366,
	509, 0, 598, 473, 0, 581, 601, 0, 493, 372,
	532, 588, 589, 829, 834, 0, 850, 0, 376, 377,
	498, 358, 506, 703, 669, 561, 519, 517, 0, 484,
	541, 698, 0, 0, 406, 0, 401, 497, 637, 364,
	616, 535, 502, 456, 564, 593, 403, 388, 389, 432,
	534, 422, 374, 627, 666, 670, 668, 664, 661, 665,
	662, 663, 667, 423, 660, 0, 635, 644, 678, 658,
	686, 643, 683, 653, 398, 682, 647, 646, 692, 673,
	674, 628, 688, 659, 657, 650, 649, 645, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 331, 332, 334,
	336, 0, 335, 337, 339, 340, 341, 828, 342, 343,
	344, 347, 348, 349, 351, 711, 352, 353, 354, 355,
	356, 357, 648, 830, 359, 360, 361, 362, 363, 365,
	367, 368, 369, 370, 371, 373, 375, 0, 0, 955,
	833, 0, 0, 956, 379, 380, 381, 382, 383, 384,
	0, 385, 386, 390, 392, 393, 394, 395, 396, 397,
	400, 0, 402, 404, 0, 405, 408, 0, 409, 410,
	411, 412, 413, 414, 415, 416, 652, 417, 0, 418,
	419, 421, 0, 424, 425, 426, 427, 428, 0, 429,
	654, 655, 430, 431, 433, 434, 435, 437, 438, 439,
	440, 441, 442, 443, 444, 445, 446, 447, 448, 0,
	449, 450, 451, 453, 0, 454, 455, 458, 459, 460,
	461, 0, 463, 671, 0, 464, 465, 466, 0, 0,
	467, 468, 469, 470, 1028, 472, 475, 672, 477, 478,
	479, 480, 481, 482, 483, 713, 485, 486, 487, 488,
	489, 490, 491, 675, 676, 492, 494, 495, 677, 679,
	680, 846, 510, 511, 512, 513, 514, 515, 516, 518,
	0, 520, 521, 522, 681, 523, 524, 525, 526, 0,
	527, 528, 529, 530, 531, 533, 536, 537, 538, 539,
	0, 542, 543, 544, 545, 546, 547, 548, 550, 551,
	552, 554, 555, 556, 714, 557, 558, 559, 560, 684,
	562, 563, 715, 565, 566, 568, 569, 570, 571, 572,
	573, 724, 957, 575, 685, 576, 577, 578, 579, 580,
	0, 582, 583, 584, 585, 586, 587, 590, 591, 592,
	594, 595, 687, 596, 597, 0, 599, 600, 849, 602,
	603, 604, 605, 606, 0, 725, 607, 689, 608, 690,
	609, 610, 611, 612, 613, 614, 615, 617, 0, 0,
	619, 620, 621, 623, 624, 625, 626, 629, 630, 631,
	632, 633, 0, 634, 636, 638, 716, 693, 694, 695,
	696, 697, 699, 700, 701, 702, 639, 640, 656, 507,
	501, 457, 499, 500, 504, 505, 508, 958, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1026, 333, 0, 350, 831, 0,
	399, 436, 651, 0, 0, 496, 0, 549, 553, 0,
	642, 0, 0, 0, 0, 407, 0, 836, 0, 842,
	0, 848, 0, 618, 0, 838, 839, 844, 338, 726,
	641, 712, 0, 0, 0, 503, 0, 0, 0, 0,
	0, 0, 0, 346, 0, 0, 0, 0, 840, 837,
	841, 847, 835, 845, 832, 843, 0, 540, 474, 691,
	567, 345, 391, 378, 420, 462, 574, 0, 0, 452,
	622, 387, 476, 0, 366, 509, 0, 598, 473, 0,
	581, 601, 0, 493, 372, 532, 588, 589, 829, 834,
	0, 850, 0, 376, 377, 498, 358, 506, 703, 669,
	561, 519, 517, 0, 484, 541, 698, 0, 0, 406,
	0, 401, 497, 637, 364, 616, 535, 502, 456, 564,
	593, 403, 388, 389, 432, 534, 422, 374, 627, 666,
	670, 668, 664, 661, 665, 662, 663, 667, 423, 660,
	0, 635, 644, 678, 658, 686, 643, 683, 653, 398,
	682, 647, 646, 692, 673, 674, 628, 688, 659, 657,
	650, 649, 645, 0, 323, 324, 325, 326, 327, 328,
	329, 330, 331, 332, 334, 336, 0, 335, 337, 339,
	340, 341, 828, 342, 343, 344, 347, 348, 349, 351,
	711, 352, 353, 354, 355, 356, 357, 648, 830, 359,
	360, 361, 362, 363, 365, 367, 368, 369, 370, 371,
	373, 375, 0, 0, 955, 833, 0, 0, 956, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 390, 392,
	393, 394, 395, 396, 397, 400, 0, 402, 404, 0,
	405, 408, 0, 409, 410, 411, 412, 413, 414, 415,
	416, 652, 417, 0, 418, 419, 421, 0, 424, 425,
	426, 427, 428, 0, 429, 654, 655, 430, 431, 433,
	434, 435, 437, 438, 439, 440, 441, 442, 443, 444,
	445, 446, 447, 448, 0, 449, 450, 451, 453, 0,
	454, 455, 458, 459, 460, 461, 0, 463, 671, 0,
	464, 465, 466, 0, 0, 467, 468, 469, 470, 471,
	472, 475, 672, 477, 478, 479, 480, 481, 482, 483,
	713, 485, 486, 487, 488, 489, 490, 491, 675, 676,
	492, 494, 495, 677, 679, 680, 846, 510, 511, 512,
	513, 514, 515, 516, 518, 0, 520, 521, 522, 681,
	523, 524, 525, 526, 0, 527, 528, 529, 530, 531,
	533, 536, 537, 538, 539, 0, 542, 543, 544, 545,
	546, 547, 548, 550, 551, 552, 554, 555, 556, 714,
	557, 558, 559, 560, 684, 562, 563, 715, 565, 566,
	568, 569, 570, 571, 572, 573, 724, 957, 575, 685,
	576, 577, 578, 579, 580, 0, 582, 583, 584, 585,
	586, 587, 590, 591, 592, 594, 595, 687, 596, 597,
	0, 599, 600, 849, 602, 603, 604, 605, 606, 0,
	725, 607, 689, 608, 690, 609, 610, 611, 612, 613,
	614, 615, 617, 0, 0, 619, 620, 621, 623, 624,
	625, 626, 629, 630, 631, 632, 633, 0, 634, 636,
	638, 716, 693, 694, 695, 696, 697, 699, 700, 701,
	702, 639, 640, 656, 507, 501, 457, 499, 500, 504,
	505, 508, 958, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	333, 0, 350, 831, 0, 399, 436, 651, 0, 0,
	496, 0, 549, 553, 0, 642, 0, 0, 0, 0,
	407, 0, 836, 0, 842, 0, 848, 0, 618, 0,
	838, 839, 844, 338, 726, 641, 712, 0, 0, 0,
	503, 0, 0, 0, 0, 0, 0, 0, 346, 0,
	0, 0, 0, 840, 837, 841, 847, 835, 845, 832,
	843, 0, 540, 474, 691, 567, 345, 391, 378, 420,
	462, 574, 0, 0, 452, 622, 387, 476, 0, 366,
	509, 0, 598, 473, 0, 581, 601, 0, 493, 372,
	532, 588, 589, 829, 834, 0, 850, 0, 376, 377,
	498, 358, 506, 703, 669, 561, 519, 517, 0, 484,
	541, 698, 0, 0, 406, 0, 401, 497, 637, 364,
	616, 535, 502, 456, 564, 593, 403, 388, 389, 432,
	534, 422, 374, 627, 666, 670, 668, 664, 661, 665,
	662, 663, 667, 423, 660, 0, 635, 644, 678, 658,
	686, 643, 683, 653, 398, 682, 647, 646, 692, 673,
	674, 628, 688, 659, 657, 650, 649, 645, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 331, 332, 334,
	336, 0, 335, 337, 339, 340, 341, 828, 342, 343,
	344, 347, 348, 349, 351, 711, 352, 353, 354, 355,
	356, 357, 648, 830, 359, 360, 361, 362, 363, 365,
	367, 368, 369, 370, 371, 373, 375, 0, 0, 955,
	833, 0, 0, 956, 379, 380, 381, 382, 383, 384,
	0, 385, 386, 390, 392, 393, 394, 395, 396, 397,
	400, 0, 402, 404, 0, 405, 408, 0, 409, 410,
	411, 412, 413, 414, 415, 416, 652, 417, 0, 418,
	419, 421, 0, 424, 425, 426, 427, 428, 0, 429,
	654, 655, 430, 431, 433, 434, 435, 437, 438, 439,
	440, 441, 442, 443, 444, 445, 446, 447, 448, 0,
	449, 450, 451, 453, 0, 454, 455, 458, 459, 460,
	461, 0, 463, 671, 0, 464, 465, 466, 0, 0,
	467, 468, 469, 470, 471, 472, 475, 672, 477, 478,
	479, 480, 481, 482, 483, 713, 485, 486, 487, 488,
	489, 490, 491, 675, 676, 492, 494, 495, 677, 679,
	680, 846, 510, 511, 512, 513, 514, 515, 516, 518,
	0, 520, 521, 522, 681, 523, 524, 525, 526, 0,
	527, 528, 529, 530, 531, 533, 536, 537, 538, 539,
	0, 542, 543, 544, 545, 546, 547, 548, 550, 551,
	552, 554, 555, 556, 714, 557, 558, 559, 560, 684,
	562, 563, 715, 565, 566, 568, 569, 570, 571, 572,
	573, 724, 957, 575, 685, 576, 577, 578, 579, 580,
	0, 582, 583, 584, 585, 586, 587, 590, 591, 592,
	594, 595, 687, 596, 597, 0, 599, 600, 849, 602,
	603, 604, 605, 606, 0, 725, 607, 689, 608, 690,
	609, 610, 611, 612, 613, 614, 615, 617, 0, 0,
	619, 620, 621, 623, 624, 625, 626, 629, 630, 631,
	632, 633, 0, 634, 636, 638, 716, 693, 694, 695,
	696, 697, 699, 700, 701, 702, 639, 640, 656, 507,
	501, 457, 499, 500, 504, 505, 508, 320, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 333, 4188, 350, 0, 0,
	399, 436, 651, 0, 0, 496, 0, 549, 553, 0,
	642, 0, 0, 0, 0, 407, 0, 0, 0, 0,
	0, 0, 0, 618, 0, 0, 0, 0, 338, 726,
	641, 712, 0, 0, 0, 503, 0, 0, 0, 0,
	0, 0, 0, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 474, 691,
	567, 345, 391, 378, 420, 462, 574, 0, 0, 452,
	622, 387, 476, 0, 366, 509, 0, 598, 473, 0,
	581, 601, 0, 493, 372, 532, 588, 589, 0, 0,
	0, 0, 0, 376, 377, 498, 358, 506, 703, 669,
	561, 519, 517, 0, 484, 541, 698, 0, 0, 406,
	0, 401, 497, 637, 364, 616, 535, 502, 456, 564,
	593, 403, 388, 389, 432, 534, 422, 374, 627, 666,
	670, 668, 664, 661, 665, 662, 663, 667, 423, 660,
	0, 635, 644, 678, 658, 686, 643, 683, 653, 398,
	682, 647, 646, 692, 673, 674, 628, 688, 659, 657,
	650, 649, 645, 0, 323, 324, 325, 326, 327, 328,
	329, 330, 331, 332, 334, 336, 0, 335, 337, 339,
	340, 341, 0, 342, 343, 344, 347, 348, 349, 351,
	711, 352, 353, 354, 355, 356, 357, 648, 0, 359,
	360, 361, 362, 363, 365, 367, 368, 369, 370, 371,
	373, 375, 0, 0, 0, 0, 0, 0, 0, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 390, 392,
	393, 394, 395, 396, 397, 400, 0, 402, 404, 0,
	405, 408, 0, 409, 410, 411, 412, 413, 414, 415,
	416, 652, 417, 0, 418, 419, 421, 0, 424, 425,
	426, 427, 428, 0, 429, 654, 655, 430, 431, 433,
	434, 435, 437, 438, 439, 440, 441, 442, 443, 444,
	445, 446, 447, 448, 0, 449, 450, 451, 453, 0,
	454, 455, 458, 459, 460, 461, 0, 463, 671, 0,
	464, 465, 466, 0, 0, 467, 468, 469, 470, 471,
	472, 475, 672, 477, 478, 479, 480, 481, 482, 483,
	713, 485, 486, 487, 488, 489, 490, 491, 675, 676,
	492, 494, 495, 677, 679, 680, 0, 510, 511, 512,
	513, 514, 515, 516, 518, 0, 520, 521, 522, 681,
	523, 524, 525, 526, 0, 527, 528, 529, 530, 531,
	533, 536, 537, 538, 539, 0, 542, 543, 544, 545,
	546, 547, 548, 550, 551, 552, 554, 555, 556, 714,
	557, 558, 559, 560, 684, 562, 563, 715, 565, 566,
	568, 569, 570, 571, 572, 573, 724, 0, 575, 685,
	576, 577, 578, 579, 580, 0, 582, 583, 584, 585,
	586, 587, 590, 591, 592, 594, 595, 687, 596, 597,
	0, 599, 600, 0, 602, 603, 604, 605, 606, 0,
	725, 607, 689, 608, 690, 609, 610, 611, 612, 613,
	614, 615, 617, 0, 0, 619, 620, 621, 623, 624,
	625, 626, 629, 630, 631, 632, 633, 0, 634, 636,
	638, 716, 693, 694, 695, 696, 697, 699, 700, 701,
	702, 639, 640, 656, 507, 501, 457, 499, 500, 504,
	505, 508, 0, 958, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 831, 1282, 399, 1110, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 836, 0, 842, 0, 848, 0, 618,
	0, 838, 839, 844, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 840, 837, 841, 847, 835, 845,
	832, 843, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 829, 834, 0, 850, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 828, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 830, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	955, 833, 0, 0, 956, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 846, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 957, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 849,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 958, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 831,
	0, 399, 1108, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 836, 0,
	842, 0, 848, 0, 618, 0, 838, 839, 844, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 840,
	837, 841, 847, 835, 845, 832, 843, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 829,
	834, 0, 850, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 828, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 830,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 955, 833, 0, 0, 956,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 846, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 957, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 849, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 958, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 831, 0, 399, 1105, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 836, 0, 842, 0, 848, 0, 618,
	0, 838, 839, 844, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 840, 837, 841, 847, 835, 845,
	832, 843, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 829, 834, 0, 850, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 828, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 830, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	955, 833, 0, 0, 956, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 1103, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 846, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 957, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 849,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 958, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 831,
	0, 399, 436, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 836, 0,
	842, 0, 848, 0, 618, 0, 838, 839, 844, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 840,
	837, 841, 847, 835, 845, 832, 843, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 829,
	834, 0, 850, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 828, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 830,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 955, 833, 0, 0, 956,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	951, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 846, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 957, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 849, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 958, 0, 0, 811, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 831, 0, 399, 436, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 1798,
	0, 407, 0, 836, 0, 842, 0, 848, 0, 618,
	0, 838, 839, 844, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 840, 837, 841, 847, 835, 845,
	832, 843, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 829, 834, 0, 850, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 828, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 830, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 833, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 846, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 849,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 0,
	0, 399, 436, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 0, 2641, 399, 436, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 958, 0,
	0, 811, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 831,
	4779, 399, 436, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 836, 0,
	842, 0, 848, 0, 618, 0, 838, 839, 844, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 840,
	837, 841, 847, 835, 845, 832, 843, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 829,
	834, 0, 850, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 828, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 830,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 833, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 846, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 849, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 0, 0, 399, 436, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 0,
	4068, 399, 436, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 825, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 831, 1405, 399, 436, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 836, 0, 842, 0, 848, 0, 618,
	0, 838, 839, 844, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 840, 837, 841, 847, 835, 845,
	832, 843, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 829, 834, 0, 850, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 828, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 830, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 833, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 846, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 849,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 958, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 831,
	0, 399, 436, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 836, 0,
	842, 0, 848, 0, 618, 0, 838, 839, 844, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 840,
	837, 841, 847, 835, 845, 832, 843, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 829,
	834, 0, 850, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 828, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 830,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 833, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 846, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 849, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 3496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 831, 0, 399, 436, 0, 0,
	0, 496, 0, 549, 553, 0, 0, 0, 0, 0,
	0, 407, 0, 836, 2850, 842, 0, 848, 0, 618,
	0, 838, 839, 844, 338, 1076, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 840, 837, 841, 847, 835, 845,
	832, 843, 0, 540, 474, 0, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 829, 834, 0, 850, 0, 376,
	377, 498, 358, 506, 0, 0, 561, 519, 517, 0,
	484, 541, 0, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 423, 1078, 0, 635, 1081, 1069,
	1061, 1062, 1063, 1064, 1065, 1066, 0, 1083, 1084, 1085,
	1086, 1087, 628, 1075, 1077, 1060, 1067, 1068, 1070, 2853,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 828, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 0, 830, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 833, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 0, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 0, 0, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 0, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 0, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 0, 0, 492, 494, 495, 0,
	2851, 0, 846, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 0, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	0, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 2856, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 0, 596, 597, 0, 599, 600, 849,
	602, 603, 604, 605, 606, 0, 725, 607, 0, 608,
	0, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 0, 0,
	0, 320, 0, 0, 0, 0, 0, 639, 640, 2852,
	507, 501, 457, 499, 500, 504, 505, 508, 3491, 333,
	0, 350, 0, 0, 399, 2767, 651, 0, 0, 496,
	0, 549, 553, 0, 642, 0, 0, 0, 0, 407,
	0, 0, 0, 0, 0, 3489, 0, 618, 0, 0,
	0, 0, 338, 726, 641, 712, 0, 0, 0, 503,
	0, 0, 0, 0, 0, 0, 0, 346, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 540, 474, 691, 567, 345, 391, 378, 420, 462,
	574, 0, 0, 452, 622, 387, 476, 0, 366, 509,
	0, 598, 473, 0, 581, 601, 0, 493, 372, 532,
	588, 589, 0, 0, 2771, 0, 0, 376, 377, 498,
	358, 506, 703, 669, 561, 519, 517, 0, 484, 541,
	698, 0, 0, 406, 0, 401, 497, 637, 364, 616,
	535, 502, 456, 564, 593, 403, 388, 389, 432, 534,
	422, 374, 627, 666, 670, 668, 664, 661, 665, 662,
	663, 667, 423, 660, 0, 635, 644, 678, 658, 686,
	643, 683, 653, 398, 682, 647, 646, 692, 673, 674,
	628, 688, 659, 657, 650, 649, 645, 0, 323, 324,
	325, 326, 327, 328, 329, 330, 331, 332, 334, 336,
	0, 335, 337, 339, 340, 341, 0, 342, 343, 344,
	347, 348, 349, 351, 711, 352, 353, 354, 355, 356,
	357, 648, 0, 359, 360, 361, 362, 363, 365, 367,
	368, 369, 370, 371, 373, 375, 0, 0, 0, 0,
	0, 0, 0, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 390, 392, 393, 394, 395, 396, 397, 400,
	0, 402, 404, 0, 405, 408, 0, 2777, 410, 411,
	412, 413, 414, 415, 416, 652, 417, 0, 418, 419,
	421, 2776, 424, 425, 426, 427, 428, 0, 429, 654,
	655, 430, 431, 433, 434, 435, 437, 438, 439, 440,
	441, 442, 443, 444, 445, 446, 447, 448, 0, 449,
	450, 451, 453, 0, 454, 455, 458, 459, 460, 461,
	0, 463, 671, 0, 464, 465, 466, 0, 0, 467,
	468, 469, 470, 471, 472, 475, 672, 477, 478, 479,
	480, 481, 482, 483, 713, 485, 486, 487, 488, 489,
	490, 491, 675, 676, 492, 494, 495, 677, 679, 680,
	0, 510, 511, 512, 513, 514, 515, 516, 518, 0,
	520, 521, 522, 681, 523, 524, 525, 526, 2775, 527,
	528, 529, 530, 531, 533, 536, 537, 538, 539, 0,
	542, 543, 544, 545, 546, 547, 548, 550, 551, 552,
	554, 555, 556, 714, 557, 558, 559, 560, 684, 562,
	563, 715, 565, 566, 568, 569, 570, 571, 572, 573,
	724, 0, 575, 685, 576, 577, 578, 579, 580, 0,
	582, 583, 584, 585, 586, 587, 590, 591, 592, 594,
	595, 687, 596, 597, 0, 599, 600, 0, 602, 603,
	604, 605, 606, 0, 725, 607, 689, 608, 690, 609,
	610, 611, 612, 613, 614, 615, 617, 0, 2774, 619,
	620, 621, 623, 624, 625, 626, 629, 630, 631, 632,
	633, 0, 634, 636, 638, 716, 693, 694, 695, 696,
	697, 699, 700, 701, 702, 639, 640, 656, 507, 501,
	457, 499, 500, 504, 505, 508, 320, 0, 0, 0,
	2773, 2768, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 333, 0, 350, 0, 0, 399,
	436, 651, 0, 0, 496, 0, 549, 553, 0, 642,
	0, 0, 0, 0, 407, 0, 0, 0, 3452, 0,
	0, 0, 618, 0, 0, 0, 0, 338, 726, 641,
	712, 0, 0, 0, 503, 0, 0, 0, 0, 0,
	0, 0, 346, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 540, 474, 691, 567,
	345, 391, 378, 420, 462, 574, 0, 0, 452, 622,
	387, 476, 0, 366, 509, 0, 598, 473, 0, 581,
	601, 0, 493, 372, 532, 588, 589, 0, 0, 2771,
	0, 0, 376, 377, 498, 358, 506, 703, 669, 561,
	519, 517, 0, 484, 541, 698, 0, 0, 406, 0,
	401, 497, 637, 364, 616, 535, 502, 456, 564, 593,
	403, 388, 389, 432, 534, 422, 374, 627, 666, 670,
	668, 664, 661, 665, 662, 663, 667, 423, 660, 0,
	635, 644, 678, 658, 686, 643, 683, 653, 398, 682,
	647, 646, 692, 673, 674, 628, 688, 659, 657, 650,
	649, 645, 0, 323, 324, 325, 326, 327, 328, 329,
	330, 331, 332, 334, 336, 0, 335, 337, 339, 340,
	341, 0, 342, 343, 344, 347, 348, 349, 351, 711,
	352, 353, 354, 355, 356, 357, 648, 0, 359, 360,
	361, 362, 363, 365, 367, 368, 369, 370, 371, 373,
	375, 0, 0, 0, 0, 0, 0, 0, 379, 380,
	381, 382, 383, 384, 0, 385, 386, 390, 392, 393,
	394, 395, 396, 397, 400, 0, 402, 404, 0, 405,
	408, 0, 2777, 410, 411, 412, 413, 414, 415, 416,
	652, 417, 0, 418, 419, 421, 2776, 424, 425, 426,
	427, 428, 0, 429, 654, 655, 430, 431, 433, 434,
	435, 437, 438, 439, 440, 441, 442, 443, 444, 445,
	446, 447, 448, 0, 449, 450, 451, 453, 0, 454,
	455, 458, 459, 460, 461, 0, 463, 671, 0, 464,
	465, 466, 0, 0, 467, 468, 469, 470, 471, 472,
	475, 672, 477, 478, 479, 480, 481, 482, 483, 713,
	485, 486, 487, 488, 489, 490, 491, 675, 676, 492,
	494, 495, 677, 679, 680, 0, 510, 511, 512, 513,
	514, 515, 516, 518, 0, 520, 521, 522, 681, 523,
	524, 525, 526, 2775, 527, 528, 529, 530, 531, 533,
	536, 537, 538, 539, 0, 542, 543, 544, 545, 546,
	547, 548, 550, 551, 552, 554, 555, 556, 714, 557,
	558, 559, 560, 684, 562, 563, 715, 565, 566, 568,
	569, 570, 571, 572, 573, 724, 0, 575, 685, 576,
	577, 578, 579, 580, 0, 582, 583, 584, 585, 586,
	587, 590, 591, 592, 594, 595, 687, 596, 597, 0,
	599, 600, 0, 602, 603, 604, 605, 606, 0, 725,
	607, 689, 608, 690, 609, 610, 611, 612, 613, 614,
	615, 617, 0, 2774, 619, 620, 621, 623, 624, 625,
	626, 629, 630, 631, 632, 633, 0, 634, 636, 638,
	716, 693, 694, 695, 696, 697, 699, 700, 701, 702,
	639, 640, 656, 507, 501, 457, 499, 500, 504, 505,
	508, 320, 0, 0, 0, 2773, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 333,
	0, 350, 0, 0, 399, 436, 651, 0, 0, 496,
	0, 549, 553, 0, 642, 0, 0, 0, 0, 407,
	0, 0, 0, 0, 0, 0, 0, 618, 0, 0,
	0, 0, 338, 726, 641, 712, 0, 0, 0, 503,
	0, 0, 0, 0, 0, 0, 0, 346, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 540, 474, 691, 567, 345, 391, 378, 420, 462,
	574, 0, 0, 452, 622, 387, 476, 0, 366, 509,
	0, 598, 473, 0, 581, 601, 0, 493, 372, 532,
	588, 589, 0, 0, 2771, 0, 0, 376, 377, 498,
	358, 506, 703, 669, 561, 519, 517, 0, 484, 541,
	698, 0, 0, 406, 0, 401, 497, 637, 364, 616,
	535, 502, 456, 564, 593, 403, 388, 389, 432, 534,
	422, 374, 627, 666, 670, 668, 664, 661, 665, 662,
	663, 667, 423, 660, 0, 635, 644, 678, 658, 686,
	643, 683, 653, 398, 682, 647, 646, 692, 673, 674,
	628, 688, 659, 657, 650, 649, 645, 0, 323, 324,
	325, 326, 327, 328, 329, 330, 331, 332, 334, 336,
	0, 335, 337, 339, 340, 341, 0, 342, 343, 344,
	347, 348, 349, 351, 711, 352, 353, 354, 355, 356,
	357, 648, 0, 359, 360, 361, 362, 363, 365, 367,
	368, 369, 370, 371, 373, 375, 0, 0, 0, 0,
	0, 0, 0, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 390, 392, 393, 394, 395, 396, 397, 400,
	0, 402, 404, 0, 405, 408, 0, 2777, 410, 411,
	412, 413, 414, 415, 416, 652, 417, 0, 418, 419,
	421, 2776, 424, 425, 426, 427, 428, 0, 429, 654,
	655, 430, 431, 433, 434, 435, 437, 438, 439, 440,
	441, 442, 443, 444, 445, 446, 447, 448, 0, 449,
	450, 451, 453, 0, 454, 455, 458, 459, 460, 461,
	0, 463, 671, 0, 464, 465, 466, 0, 0, 467,
	468, 469, 470, 471, 472, 475, 672, 477, 478, 479,
	480, 481, 482, 483, 713, 485, 486, 487, 488, 489,
	490, 491, 675, 676, 492, 494, 495, 677, 679, 680,
	0, 510, 511, 512, 513, 514, 515, 516, 518, 0,
	520, 521, 522, 681, 523, 524, 525, 526, 2775, 527,
	528, 529, 530, 531, 533, 536, 537, 538, 539, 0,
	542, 543, 544, 545, 546, 547, 548, 550, 551, 552,
	554, 555, 556, 714, 557, 558, 559, 560, 684, 562,
	563, 715, 565, 566, 568, 569, 570, 571, 572, 573,
	724, 0, 575, 685, 576, 577, 578, 579, 580, 0,
	582, 583, 584, 585, 586, 587, 590, 591, 592, 594,
	595, 687, 596, 597, 0, 599, 600, 0, 602, 603,
	604, 605, 606, 0, 725, 607, 689, 608, 690, 609,
	610, 611, 612, 613, 614, 615, 617, 0, 2774, 619,
	620, 621, 623, 624, 625, 626, 629, 630, 631, 632,
	633, 0, 634, 636, 638, 716, 693, 694, 695, 696,
	697, 699, 700, 701, 702, 639, 640, 656, 507, 501,
	457, 499, 500, 504, 505, 508, 1079, 0, 0, 0,
	2773, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 333, 0, 350, 831, 0, 399,
	436, 0, 0, 0, 496, 0, 549, 553, 0, 0,
	0, 0, 0, 0, 407, 0, 836, 2850, 842, 0,
	848, 0, 618, 0, 838, 839, 844, 338, 1076, 641,
	712, 0, 0, 0, 503, 0, 0, 0, 0, 0,
	0, 0, 346, 0, 0, 0, 0, 840, 837, 841,
	847, 835, 845, 832, 843, 0, 540, 474, 0, 567,
	345, 391, 378, 420, 462, 574, 0, 0, 452, 622,
	387, 476, 0, 366, 509, 0, 598, 473, 0, 581,
	601, 0, 493, 372, 532, 588, 589, 829, 834, 0,
	850, 0, 376, 377, 498, 358, 506, 0, 0, 561,
	519, 517, 0, 484, 541, 0, 0, 0, 406, 0,
	401, 497, 637, 364, 616, 535, 502, 456, 564, 593,
	403, 388, 389, 432, 534, 422, 374, 627, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 423, 1078, 0,
	635, 1081, 1069, 1061, 1062, 1063, 1064, 1065, 1066, 0,
	1083, 1084, 1085, 1086, 1087, 628, 1075, 1077, 1060, 1067,
	1068, 1070, 2853, 323, 324, 325, 326, 327, 328, 329,
	330, 331, 332, 334, 336, 0, 335, 337, 339, 340,
	341, 828, 342, 343, 344, 347, 348, 349, 351, 711,
	352, 353, 354, 355, 356, 357, 0, 830, 359, 360,
	361, 362, 363, 365, 367, 368, 369, 370, 371, 373,
	375, 0, 0, 0, 833, 0, 0, 0, 379, 380,
	381, 382, 383, 384, 0, 385, 386, 390, 392, 393,
	394, 395, 396, 397, 400, 0, 402, 404, 0, 405,
	408, 0, 409, 410, 411, 412, 413, 414, 415, 416,
	0, 417, 0, 418, 419, 421, 0, 424, 425, 426,
	427, 428, 0, 429, 0, 0, 430, 431, 433, 434,
	435, 437, 438, 439, 440, 441, 442, 443, 444, 445,
	446, 447, 448, 0, 449, 450, 451, 453, 0, 454,
	455, 458, 459, 460, 461, 0, 463, 0, 0, 464,
	465, 466, 0, 0, 467, 468, 469, 470, 471, 472,
	475, 0, 477, 478, 479, 480, 481, 482, 483, 713,
	485, 486, 487, 488, 489, 490, 491, 0, 0, 492,
	494, 495, 0, 2851, 0, 846, 510, 511, 512, 513,
	514, 515, 516, 518, 0, 520, 521, 522, 0, 523,
	524, 525, 526, 0, 527, 528, 529, 530, 531, 533,
	536, 537, 538, 539, 0, 542, 543, 544, 545, 546,
	547, 548, 550, 551, 552, 554, 555, 556, 714, 557,
	558, 559, 560, 0, 562, 563, 715, 565, 566, 568,
	569, 570, 571, 572, 573, 724, 0, 575, 2856, 576,
	577, 578, 579, 580, 0, 582, 583, 584, 585, 586,
	587, 590, 591, 592, 594, 595, 0, 596, 597, 0,
	599, 600, 849, 602, 603, 604, 605, 606, 0, 725,
	607, 0, 608, 0, 609, 610, 611, 612, 613, 614,
	615, 617, 0, 0, 619, 620, 621, 623, 624, 625,
	626, 629, 630, 631, 632, 633, 0, 634, 636, 638,
	716, 0, 0, 0, 0, 1079, 0, 0, 0, 0,
	639, 640, 2852, 507, 501, 457, 499, 500, 504, 505,
	508, 0, 0, 333, 0, 350, 831, 0, 399, 436,
	0, 0, 0, 496, 0, 549, 553, 0, 0, 0,
	0, 0, 0, 407, 3476, 836, 2850, 842, 0, 848,
	0, 618, 0, 838, 839, 844, 338, 1076, 641, 712,
	0, 0, 0, 503, 0, 0, 0, 0, 0, 0,
	0, 346, 0, 0, 0, 0, 840, 837, 841, 847,
	835, 845, 832, 843, 0, 540, 474, 0, 567, 345,
	391, 378, 420, 462, 574, 0, 0, 452, 622, 387,
	476, 0, 366, 509, 0, 598, 473, 0, 581, 601,
	0, 493, 372, 532, 588, 589, 829, 834, 0, 850,
	0, 376, 377, 498, 358, 506, 0, 0, 561, 519,
	517, 0, 484, 541, 0, 0, 0, 406, 0, 401,
	497, 637, 364, 616, 535, 502, 456, 564, 593, 403,
	388, 389, 432, 534, 422, 374, 627, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 423, 1078, 0, 635,
	1081, 1069, 1061, 1062, 1063, 1064, 1065, 1066, 0, 1083,
	1084, 1085, 1086, 1087, 628, 1075, 1077, 1060, 1067, 1068,
	1070, 2853, 323, 324, 325, 326, 327, 328, 329, 330,
	331, 332, 334, 336, 0, 335, 337, 339, 340, 341,
	828, 342, 343, 344, 347, 348, 349, 351, 711, 352,
	353, 354, 355, 356, 357, 0, 830, 359, 360, 361,
	362, 363, 365, 367, 368, 369, 370, 371, 373, 375,
	0, 0, 0, 833, 0, 0, 0, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 390, 392, 393, 394,
	395, 396, 397, 400, 0, 402, 404, 0, 405, 408,
	0, 409, 410, 411, 412, 413, 414, 415, 416, 0,
	417, 0, 418, 419, 421, 0, 424, 425, 426, 427,
	428, 0, 429, 0, 0, 430, 431, 433, 434, 435,
	437, 438, 439, 440, 441, 442, 443, 444, 445, 446,
	447, 448, 0, 449, 450, 451, 453, 0, 454, 455,
	458, 459, 460, 461, 0, 463, 0, 0, 464, 465,
	466, 0, 0, 467, 468, 469, 470, 471, 472, 475,
	0, 477, 478, 479, 480, 481, 482, 483, 713, 485,
	486, 487, 488, 489, 490, 491, 0, 0, 492, 494,
	495, 0, 2851, 0, 846, 510, 511, 512, 513, 514,
	515, 516, 518, 0, 520, 521, 522, 0, 523, 524,
	525, 526, 0, 527, 528, 529, 530, 531, 533, 536,
	537, 538, 539, 0, 542, 543, 544, 545, 546, 547,
	548, 550, 551, 552, 554, 555, 556, 714, 557, 558,
	559, 560, 0, 562, 563, 715, 565, 566, 568, 569,
	570, 571, 572, 573, 724, 0, 575, 2856, 576, 577,
	578, 579, 580, 0, 582, 583, 584, 585, 586, 587,
	590, 591, 592, 594, 595, 0, 596, 597, 0, 599,
	600, 849, 602, 603, 604, 605, 606, 0, 725, 607,
	0, 608, 0, 609, 610, 611, 612, 613, 614, 615,
	617, 0, 0, 619, 620, 621, 623, 624, 625, 626,
	629, 630, 631, 632, 633, 0, 634, 636, 638, 716,
	0, 0, 0, 320, 0, 0, 0, 0, 0, 639,
	640, 2852, 507, 501, 457, 499, 500, 504, 505, 508,
	734, 739, 0, 350, 0, 738, 399, 436, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 2845, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 736, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 3849,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 737, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 734, 739, 0, 350, 0,
	738, 399, 436, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 712, 0, 0, 0, 503, 736, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 742, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 737, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	734, 739, 0, 350, 0, 738, 399, 436, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 736, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 737, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2736, 333, 0, 350, 0,
	0, 399, 436, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	871, 2739, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 2743, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 2740, 600, 0, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1845, 333, 0, 350, 0, 0, 399, 436, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 1831, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 1837, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	1838, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 1833, 424, 1834, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	1839, 1840, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 1841, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 1835, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 1836, 560,
	684, 562, 563, 1842, 565, 566, 568, 569, 1832, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 1843, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 1844, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 0,
	0, 399, 436, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	871, 2739, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 2743, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 2740, 600, 0, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 739, 0, 350, 0, 738, 399, 436, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 736, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 737, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3632, 333, 0, 350, 0,
	0, 399, 436, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 3633, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3623, 333, 0, 350, 0, 0, 399, 436, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 3624, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 983, 333, 0, 350, 0,
	0, 399, 982, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	871, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 0, 0, 399, 436, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 871, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 0,
	0, 399, 436, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 5330, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 4188, 350, 0, 0, 399, 436, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 0,
	0, 399, 436, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 4928, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 0, 0, 399, 436, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 4909, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 4200, 350, 0,
	0, 399, 436, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 0, 0, 399, 436, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 4374,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 811, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 0,
	0, 399, 436, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 797, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 0, 0, 399, 436, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 0,
	0, 399, 436, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 3228, 0, 0, 0, 503, 0, 0, 0,
	0, 3231, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 3229, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 3227, 603, 3226, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 3230, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	710, 333, 0, 350, 0, 0, 399, 436, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 0,
	0, 399, 1563, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	871, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1561, 333, 0, 350, 0, 0, 399, 1560, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1226, 333, 0, 350, 0,
	0, 399, 436, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 0, 0, 399, 436, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 313, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 1125, 342,
	343, 344, 347, 348, 349, 351, 314, 352, 1124, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 316, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 317, 557, 558, 559, 560,
	684, 562, 563, 315, 565, 566, 568, 569, 570, 571,
	572, 573, 1122, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 309, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 318, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 986, 333, 0, 350, 0,
	0, 399, 985, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	804, 333, 0, 350, 0, 0, 399, 436, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 803, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 800, 333, 0, 350, 0,
	0, 399, 436, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	767, 333, 0, 350, 0, 0, 399, 436, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 764, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 766, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 765, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 710, 333, 0, 350, 0,
	0, 399, 436, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	706, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 708, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 707, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 0, 0, 399, 436, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	6244, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 0,
	0, 399, 436, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 0, 0, 399, 4844, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 0,
	0, 399, 436, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 3958, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 0, 0, 399, 3822, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 0,
	0, 399, 436, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	313, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 314, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 316, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	317, 557, 558, 559, 560, 684, 562, 563, 315, 565,
	566, 568, 569, 570, 571, 572, 573, 1122, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 309, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 318, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 0, 0, 399, 436, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 313, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 314, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 316, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 317, 557, 558, 559, 560,
	684, 562, 563, 315, 565, 566, 568, 569, 570, 571,
	572, 573, 2896, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 2897, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 318, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 0,
	0, 399, 3725, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 0, 0, 399, 3618, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 0,
	0, 399, 3616, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 0, 0, 399, 3602, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 0,
	0, 399, 436, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	313, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 314, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 316, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	317, 557, 558, 559, 560, 684, 562, 563, 2936, 565,
	566, 568, 569, 570, 571, 572, 573, 2896, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 2897, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 318, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 0, 0, 399, 436, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 313, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 314, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 316, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 317, 557, 558, 559, 560,
	684, 562, 563, 2925, 565, 566, 568, 569, 570, 571,
	572, 573, 2896, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 2897, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 318, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 0,
	0, 399, 436, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	313, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 314, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 316, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	317, 557, 558, 559, 560, 684, 562, 563, 2895, 565,
	566, 568, 569, 570, 571, 572, 573, 2896, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 2897, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 318, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 0, 0, 399, 436, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 313, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 314, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 316, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 317, 557, 558, 559, 560,
	684, 562, 563, 315, 565, 566, 568, 569, 570, 571,
	572, 573, 1122, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 2868, 0,
	602, 603, 604, 605, 606, 0, 309, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 318, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 0,
	0, 399, 2726, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 0, 0, 399, 2664, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 0,
	0, 399, 436, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 1824, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 0, 0, 399, 1773, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 0,
	0, 399, 1771, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 0, 0, 399, 1767, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 0,
	0, 399, 1477, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 0, 0, 399, 1436, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 0,
	0, 399, 1431, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 1425, 350, 0, 0, 399, 436, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 0, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 0,
	0, 399, 1101, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 0, 0, 399, 1099, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 0,
	0, 399, 1097, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 0, 0, 399, 1046, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 0,
	0, 399, 1042, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 0, 0, 399, 1039, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 0,
	0, 399, 1033, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 0, 0, 399, 1014, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 0,
	0, 399, 990, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 0, 0, 399, 988, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 0,
	0, 399, 969, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 0, 0, 399, 950, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 0,
	0, 399, 946, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 0, 0, 399, 944, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 0,
	0, 399, 918, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 725, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 0, 0, 399, 436, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 874, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 0,
	0, 399, 436, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	726, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 684, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 729, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 0, 0, 399, 436, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 561, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 727, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 0,
	0, 399, 436, 651, 0, 0, 496, 0, 549, 553,
	0, 642, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 0, 338,
	313, 641, 307, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 474,
	691, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 0,
	0, 0, 0, 0, 376, 377, 498, 358, 506, 703,
	669, 561, 519, 517, 0, 484, 541, 698, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	666, 670, 668, 664, 661, 665, 662, 663, 667, 423,
	660, 0, 635, 644, 678, 658, 686, 643, 683, 653,
	398, 682, 647, 646, 692, 673, 674, 628, 688, 659,
	657, 650, 649, 645, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 0, 342, 343, 344, 347, 348, 349,
	351, 314, 352, 353, 354, 355, 356, 357, 648, 0,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 652, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 654, 655, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 671,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 672, 477, 478, 479, 480, 481, 482,
	483, 316, 485, 486, 487, 488, 489, 490, 491, 675,
	676, 492, 494, 495, 677, 679, 680, 0, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	681, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	317, 557, 558, 559, 560, 684, 562, 563, 315, 565,
	566, 568, 569, 570, 571, 572, 573, 308, 0, 575,
	685, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 687, 596,
	597, 0, 599, 600, 0, 602, 603, 604, 605, 606,
	0, 309, 607, 689, 608, 690, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 318, 693, 694, 695, 696, 697, 699, 700,
	701, 702, 639, 640, 656, 507, 501, 457, 499, 500,
	504, 505, 508, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 350, 0, 0, 399, 436, 651, 0,
	0, 496, 0, 549, 553, 0, 642, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 338, 726, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 474, 691, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 0, 0, 0, 0, 0, 376,
	377, 498, 358, 506, 703, 669, 0, 519, 517, 0,
	484, 541, 698, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 666, 670, 668, 664, 661,
	665, 662, 663, 667, 423, 660, 0, 635, 644, 678,
	658, 686, 643, 683, 653, 398, 682, 647, 646, 692,
	673, 674, 628, 688, 659, 657, 650, 649, 645, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 0, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 648, 0, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 652, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 654, 655, 0, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 671, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 672, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 675, 676, 492, 494, 495, 677,
	679, 680, 0, 510, 511, 512, 513, 514, 515, 0,
	518, 0, 520, 521, 522, 681, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 0, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	684, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 685, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 687, 596, 597, 0, 599, 600, 0,
	602, 603, 604, 605, 606, 0, 725, 607, 689, 608,
	690, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 693, 694,
	695, 696, 697, 699, 700, 701, 702, 639, 640, 656,
	507, 501, 457, 499, 500, 504, 505, 508, 1079, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 350, 831,
	0, 399, 436, 0, 0, 0, 496, 0, 549, 553,
	0, 0, 0, 0, 0, 0, 407, 0, 836, 2850,
	842, 0, 848, 0, 618, 0, 838, 839, 844, 338,
	1076, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 840,
	837, 841, 847, 835, 845, 832, 843, 0, 540, 474,
	0, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 829,
	834, 0, 850, 0, 376, 377, 498, 358, 506, 0,
	0, 561, 519, 517, 0, 484, 541, 0, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 423,
	1078, 0, 635, 1081, 1069, 1061, 1062, 1063, 1064, 1065,
	1066, 0, 1083, 1084, 1085, 1086, 1087, 628, 1075, 1077,
	1060, 1067, 1068, 1070, 2853, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 828, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 0, 830,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 833, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 0, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 0, 0, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 0,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 0, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 0,
	0, 492, 494, 495, 0, 2851, 0, 846, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	0, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 0, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	2856, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 0, 596,
	597, 0, 599, 600, 849, 602, 603, 604, 605, 606,
	0, 725, 607, 0, 608, 0, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 0, 0, 1079, 0, 0, 0, 0,
	0, 0, 639, 640, 2852, 507, 501, 457, 499, 500,
	504, 505, 508, 333, 0, 350, 831, 0, 399, 436,
	0, 0, 0, 496, 0, 549, 553, 0, 0, 0,
	0, 0, 0, 407, 0, 836, 0, 842, 2901, 848,
	0, 618, 0, 838, 839, 844, 338, 1076, 641, 712,
	0, 0, 0, 503, 0, 0, 0, 0, 4237, 0,
	0, 346, 0, 0, 0, 0, 840, 837, 841, 847,
	835, 845, 832, 843, 0, 540, 474, 0, 567, 345,
	391, 378, 420, 462, 574, 0, 0, 452, 622, 387,
	476, 0, 366, 509, 0, 598, 473, 0, 581, 601,
	0, 493, 372, 532, 588, 589, 829, 834, 0, 850,
	0, 376, 377, 498, 358, 506, 0, 0, 561, 519,
	517, 0, 484, 541, 0, 0, 0, 406, 0, 401,
	497, 637, 364, 616, 535, 502, 456, 564, 593, 403,
	388, 389, 432, 534, 422, 374, 627, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 423, 1078, 0, 635,
	1081, 1069, 1061, 1062, 1063, 1064, 1065, 1066, 0, 1083,
	1084, 1085, 1086, 1087, 628, 1075, 1077, 1060, 1067, 1068,
	1070, 0, 323, 324, 325, 326, 327, 328, 329, 330,
	331, 332, 334, 336, 0, 335, 337, 339, 340, 341,
	828, 342, 343, 344, 347, 348, 349, 351, 711, 352,
	353, 354, 355, 356, 357, 0, 830, 359, 360, 361,
	362, 363, 365, 367, 368, 369, 370, 371, 373, 375,
	0, 0, 0, 833, 0, 0, 0, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 390, 392, 393, 394,
	395, 396, 397, 400, 0, 402, 404, 0, 405, 408,
	0, 409, 410, 411, 412, 413, 414, 415, 416, 0,
	417, 0, 418, 419, 421, 0, 424, 425, 426, 427,
	428, 0, 429, 0, 0, 430, 431, 433, 434, 435,
	437, 438, 439, 440, 441, 442, 443, 444, 445, 446,
	447, 448, 0, 449, 450, 451, 453, 0, 454, 455,
	458, 459, 460, 461, 0, 463, 0, 0, 464, 465,
	466, 0, 0, 467, 468, 469, 470, 471, 472, 475,
	0, 477, 478, 479, 480, 481, 482, 483, 713, 485,
	486, 487, 488, 489, 490, 491, 0, 0, 492, 494,
	495, 0, 0, 0, 846, 510, 511, 512, 513, 514,
	515, 516, 518, 0, 520, 521, 522, 0, 523, 524,
	525, 526, 0, 527, 528, 529, 530, 531, 533, 536,
	537, 538, 539, 0, 542, 543, 544, 545, 546, 547,
	548, 550, 551, 552, 554, 555, 556, 714, 557, 558,
	559, 560, 0, 562, 563, 715, 565, 566, 568, 569,
	570, 571, 572, 573, 724, 0, 575, 2856, 576, 577,
	578, 579, 580, 0, 582, 583, 584, 585, 586, 587,
	590, 591, 592, 594, 595, 0, 596, 597, 0, 599,
	600, 849, 602, 603, 604, 605, 606, 0, 725, 607,
	0, 608, 0, 609, 610, 611, 612, 613, 614, 615,
	617, 0, 0, 619, 620, 621, 623, 624, 625, 626,
	629, 630, 631, 632, 633, 0, 634, 636, 638, 716,
	0, 0, 1079, 0, 0, 0, 0, 0, 0, 639,
	640, 0, 507, 501, 457, 499, 500, 504, 505, 508,
	333, 0, 350, 831, 0, 399, 436, 0, 0, 0,
	496, 0, 549, 553, 0, 0, 0, 0, 0, 0,
	407, 0, 836, 0, 842, 0, 848, 0, 618, 0,
	838, 839, 844, 338, 1076, 641, 712, 0, 0, 0,
	503, 0, 0, 0, 0, 0, 0, 0, 346, 0,
	0, 0, 0, 840, 837, 841, 847, 835, 845, 832,
	843, 0, 540, 474, 0, 567, 345, 391, 378, 420,
	462, 574, 0, 0, 452, 622, 387, 476, 0, 366,
	509, 0, 598, 473, 0, 581, 601, 0, 493, 372,
	532, 588, 589, 829, 834, 0, 850, 0, 376, 377,
	498, 358, 506, 0, 0, 561, 519, 517, 6280, 484,
	541, 0, 0, 0, 406, 0, 401, 497, 637, 364,
	616, 535, 502, 456, 564, 593, 403, 388, 389, 432,
	534, 422, 374, 627, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 423, 1078, 0, 635, 1081, 1069, 1061,
	1062, 1063, 1064, 1065, 1066, 0, 1083, 1084, 1085, 1086,
	1087, 628, 1075, 1077, 1060, 1067, 1068, 1070, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 331, 332, 334,
	336, 0, 335, 337, 339, 340, 341, 828, 342, 343,
	344, 347, 348, 349, 351, 711, 352, 353, 354, 355,
	356, 357, 0, 830, 359, 360, 361, 362, 363, 365,
	367, 368, 369, 370, 371, 373, 375, 0, 0, 0,
	833, 0, 0, 0, 379, 380, 381, 382, 383, 384,
	0, 385, 386, 390, 392, 393, 394, 395, 396, 397,
	400, 0, 402, 404, 0, 405, 408, 0, 409, 410,
	411, 412, 413, 414, 415, 416, 0, 417, 0, 418,
	419, 421, 0, 424, 425, 426, 427, 428, 0, 429,
	0, 0, 430, 431, 433, 434, 435, 437, 438, 439,
	440, 441, 442, 443, 444, 445, 446, 447, 448, 0,
	449, 450, 451, 453, 0, 454, 455, 458, 459, 460,
	461, 0, 463, 0, 0, 464, 465, 466, 0, 0,
	467, 468, 469, 470, 471, 472, 475, 0, 477, 478,
	479, 480, 481, 482, 483, 713, 485, 486, 487, 488,
	489, 490, 491, 0, 0, 492, 494, 495, 0, 0,
	0, 846, 510, 511, 512, 513, 514, 515, 516, 518,
	0, 520, 521, 522, 0, 523, 524, 525, 526, 0,
	527, 528, 529, 530, 531, 533, 536, 537, 538, 539,
	0, 542, 543, 544, 545, 546, 547, 548, 550, 551,
	552, 554, 555, 556, 714, 557, 558, 559, 560, 0,
	562, 563, 715, 565, 566, 568, 569, 570, 571, 572,
	573, 724, 0, 575, 1051, 576, 577, 578, 579, 580,
	0, 582, 583, 584, 585, 586, 587, 590, 591, 592,
	594, 595, 0, 596, 597, 0, 599, 600, 849, 602,
	603, 604, 605, 606, 0, 725, 607, 0, 608, 0,
	609, 610, 611, 612, 613, 614, 615, 617, 0, 0,
	619, 620, 621, 623, 624, 625, 626, 629, 630, 631,
	632, 633, 0, 634, 636, 638, 716, 0, 0, 1079,
	0, 0, 0, 0, 0, 0, 639, 640, 0, 507,
	501, 457, 499, 500, 504, 505, 508, 333, 0, 350,
	831, 0, 399, 436, 0, 0, 0, 496, 0, 549,
	553, 0, 0, 0, 0, 0, 0, 407, 0, 836,
	0, 842, 0, 848, 0, 618, 0, 838, 839, 844,
	338, 1076, 641, 712, 0, 0, 0, 503, 0, 0,
	0, 0, 0, 0, 0, 346, 0, 0, 0, 0,
	840, 837, 841, 847, 835, 845, 832, 843, 0, 540,
	474, 0, 567, 345, 391, 378, 420, 462, 574, 0,
	0, 452, 622, 387, 476, 0, 366, 509, 0, 598,
	473, 0, 581, 601, 0, 493, 372, 532, 588, 589,
	829, 834, 0, 850, 0, 376, 377, 498, 358, 506,
	0, 0, 561, 519, 517, 5929, 484, 541, 0, 0,
	0, 406, 0, 401, 497, 637, 364, 616, 535, 502,
	456, 564, 593, 403, 388, 389, 432, 534, 422, 374,
	627, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	423, 1078, 0, 635, 1081, 1069, 1061, 1062, 1063, 1064,
	1065, 1066, 0, 1083, 1084, 1085, 1086, 1087, 628, 1075,
	1077, 1060, 1067, 1068, 1070, 0, 323, 324, 325, 326,
	327, 328, 329, 330, 331, 332, 334, 336, 0, 335,
	337, 339, 340, 341, 828, 342, 343, 344, 347, 348,
	349, 351, 711, 352, 353, 354, 355, 356, 357, 0,
	830, 359, 360, 361, 362, 363, 365, 367, 368, 369,
	370, 371, 373, 375, 0, 0, 0, 833, 0, 0,
	0, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	390, 392, 393, 394, 395, 396, 397, 400, 0, 402,
	404, 0, 405, 408, 0, 409, 410, 411, 412, 413,
	414, 415, 416, 0, 417, 0, 418, 419, 421, 0,
	424, 425, 426, 427, 428, 0, 429, 0, 0, 430,
	431, 433, 434, 435, 437, 438, 439, 440, 441, 442,
	443, 444, 445, 446, 447, 448, 0, 449, 450, 451,
	453, 0, 454, 455, 458, 459, 460, 461, 0, 463,
	0, 0, 464, 465, 466, 0, 0, 467, 468, 469,
	470, 471, 472, 475, 0, 477, 478, 479, 480, 481,
	482, 483, 713, 485, 486, 487, 488, 489, 490, 491,
	0, 0, 492, 494, 495, 0, 0, 0, 846, 510,
	511, 512, 513, 514, 515, 516, 518, 0, 520, 521,
	522, 0, 523, 524, 525, 526, 0, 527, 528, 529,
	530, 531, 533, 536, 537, 538, 539, 0, 542, 543,
	544, 545, 546, 547, 548, 550, 551, 552, 554, 555,
	556, 714, 557, 558, 559, 560, 0, 562, 563, 715,
	565, 566, 568, 569, 570, 571, 572, 573, 724, 0,
	575, 1051, 576, 577, 578, 579, 580, 0, 582, 583,
	584, 585, 586, 587, 590, 591, 592, 594, 595, 0,
	596, 597, 0, 599, 600, 849, 602, 603, 604, 605,
	606, 0, 725, 607, 0, 608, 0, 609, 610, 611,
	612, 613, 614, 615, 617, 0, 0, 619, 620, 621,
	623, 624, 625, 626, 629, 630, 631, 632, 633, 0,
	634, 636, 638, 716, 0, 0, 1079, 0, 0, 0,
	0, 0, 0, 639, 640, 0, 507, 501, 457, 499,
	500, 504, 505, 508, 333, 0, 350, 831, 0, 399,
	436, 0, 0, 0, 496, 0, 549, 553, 0, 0,
	0, 0, 0, 0, 407, 0, 836, 0, 842, 0,
	848, 0, 618, 0, 838, 839, 844, 338, 1076, 641,
	712, 0, 0, 0, 503, 0, 0, 0, 0, 0,
	0, 0, 346, 0, 0, 0, 0, 840, 837, 841,
	847, 835, 845, 832, 843, 0, 540, 474, 0, 567,
	345, 391, 378, 420, 462, 574, 0, 0, 452, 622,
	387, 476, 0, 366, 509, 0, 598, 473, 0, 581,
	601, 0, 493, 372, 532, 588, 589, 829, 834, 0,
	850, 0, 376, 377, 498, 358, 506, 0, 0, 561,
	519, 517, 0, 484, 541, 0, 0, 0, 406, 0,
	401, 497, 637, 364, 616, 535, 502, 456, 564, 593,
	403, 388, 389, 432, 534, 422, 374, 627, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 423, 1078, 0,
	635, 1081, 1069, 1061, 1062, 1063, 1064, 1065, 1066, 0,
	1083, 1084, 1085, 1086, 1087, 628, 1075, 1077, 1060, 1067,
	1068, 1070, 0, 323, 324, 325, 326, 327, 328, 329,
	330, 331, 332, 334, 336, 0, 335, 337, 339, 340,
	341, 828, 342, 343, 344, 347, 348, 349, 351, 711,
	352, 353, 354, 355, 356, 357, 0, 830, 359, 360,
	361, 362, 363, 365, 367, 368, 369, 370, 371, 373,
	375, 0, 0, 0, 833, 0, 0, 0, 379, 380,
	381, 382, 383, 384, 0, 385, 386, 390, 392, 393,
	394, 395, 396, 397, 400, 0, 402, 404, 0, 405,
	408, 0, 409, 410, 411, 412, 413, 414, 415, 416,
	0, 417, 0, 418, 419, 421, 0, 424, 425, 426,
	427, 428, 0, 429, 0, 0, 430, 431, 433, 434,
	435, 437, 438, 439, 440, 441, 442, 443, 444, 445,
	446, 447, 448, 0, 449, 450, 451, 453, 0, 454,
	455, 458, 459, 460, 461, 0, 463, 0, 0, 464,
	465, 466, 0, 0, 467, 468, 469, 470, 471, 472,
	475, 0, 477, 478, 479, 480, 481, 482, 483, 713,
	485, 486, 487, 488, 489, 490, 491, 4493, 0, 492,
	494, 495, 0, 0, 0, 846, 510, 511, 512, 513,
	514, 515, 516, 518, 0, 520, 521, 522, 0, 523,
	524, 525, 526, 0, 527, 528, 529, 530, 531, 533,
	536, 537, 538, 539, 0, 542, 543, 544, 545, 546,
	547, 548, 550, 551, 552, 554, 555, 556, 714, 557,
	558, 559, 560, 0, 562, 563, 715, 565, 566, 568,
	569, 570, 571, 572, 573, 724, 0, 575, 1051, 576,
	577, 578, 579, 580, 0, 582, 583, 584, 585, 586,
	587, 590, 591, 592, 594, 595, 0, 596, 597, 0,
	599, 600, 849, 602, 603, 604, 605, 606, 0, 725,
	607, 0, 608, 0, 609, 610, 611, 612, 613, 614,
	615, 617, 0, 0, 619, 620, 621, 623, 624, 625,
	626, 629, 630, 631, 632, 633, 0, 634, 636, 638,
	716, 0, 0, 1079, 0, 0, 0, 0, 0, 0,
	639, 640, 0, 507, 501, 457, 499, 500, 504, 505,
	508, 333, 0, 350, 831, 0, 399, 436, 0, 0,
	0, 496, 0, 549, 553, 0, 0, 0, 0, 0,
	0, 407, 0, 836, 0, 842, 0, 848, 0, 618,
	0, 838, 839, 844, 338, 1076, 641, 712, 0, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 840, 837, 841, 847, 835, 845,
	832, 843, 0, 540, 474, 0, 567, 345, 391, 378,
	420, 462, 574, 0, 0, 452, 622, 387, 476, 0,
	366, 509, 0, 598, 473, 0, 581, 601, 0, 493,
	372, 532, 588, 589, 829, 834, 0, 850, 0, 376,
	377, 498, 358, 506, 0, 0, 561, 519, 517, 0,
	484, 541, 0, 0, 0, 406, 0, 401, 497, 637,
	364, 616, 535, 502, 456, 564, 593, 403, 388, 389,
	432, 534, 422, 374, 627, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 423, 1078, 0, 635, 1081, 1069,
	1061, 1062, 1063, 1064, 1065, 1066, 0, 1083, 1084, 1085,
	1086, 1087, 628, 1075, 1077, 1060, 1067, 1068, 1070, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 336, 0, 335, 337, 339, 340, 341, 828, 342,
	343, 344, 347, 348, 349, 351, 711, 352, 353, 354,
	355, 356, 357, 0, 830, 359, 360, 361, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 833, 0, 0, 0, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 390, 392, 393, 394, 395, 396,
	397, 400, 0, 402, 404, 0, 405, 408, 0, 409,
	410, 411, 412, 413, 414, 415, 416, 0, 417, 0,
	418, 419, 421, 0, 424, 425, 426, 427, 428, 0,
	429, 0, 0, 430, 431, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	0, 449, 450, 451, 453, 0, 454, 455, 458, 459,
	460, 461, 0, 463, 0, 0, 464, 465, 466, 0,
	0, 467, 468, 469, 470, 471, 472, 475, 0, 477,
	478, 479, 480, 481, 482, 483, 713, 485, 486, 487,
	488, 489, 490, 491, 2920, 0, 492, 494, 495, 0,
	0, 0, 846, 510, 511, 512, 513, 514, 515, 516,
	518, 0, 520, 521, 522, 0, 523, 524, 525, 526,
	0, 527, 528, 529, 530, 531, 533, 536, 537, 538,
	539, 0, 542, 543, 544, 545, 546, 547, 548, 550,
	551, 552, 554, 555, 556, 714, 557, 558, 559, 560,
	0, 562, 563, 715, 565, 566, 568, 569, 570, 571,
	572, 573, 724, 0, 575, 1051, 576, 577, 578, 579,
	580, 0, 582, 583, 584, 585, 586, 587, 590, 591,
	592, 594, 595, 0, 596, 597, 0, 599, 600, 849,
	602, 603, 604, 605, 606, 0, 725, 607, 0, 608,
	0, 609, 610, 611, 612, 613, 614, 615, 617, 0,
	0, 619, 620, 621, 623, 624, 625, 626, 629, 630,
	631, 632, 633, 0, 634, 636, 638, 716, 0, 0,
	1079, 0, 0, 0, 0, 0, 0, 639, 640, 0,
	507, 501, 457, 499, 500, 504, 505, 508, 333, 0,
	350, 831, 0, 399, 436, 0, 0, 0, 496, 0,
	549, 553, 0, 0, 0, 0, 0, 0, 407, 0,
	836, 0, 842, 0, 848, 0, 618, 0, 838, 839,
	844, 338, 1076, 641, 712, 0, 0, 0, 503, 0,
	0, 0, 0, 0, 0, 0, 346, 0, 0, 0,
	0, 840, 837, 841, 847, 835, 845, 832, 843, 0,
	540, 474, 0, 567, 345, 391, 378, 420, 462, 574,
	0, 0, 452, 622, 387, 476, 0, 366, 509, 0,
	598, 473, 0, 581, 601, 0, 493, 372, 532, 588,
	589, 829, 834, 0, 850, 0, 376, 377, 498, 358,
	506, 0, 0, 561, 519, 517, 0, 484, 541, 0,
	0, 0, 406, 0, 401, 497, 637, 364, 616, 535,
	502, 456, 564, 593, 403, 388, 389, 432, 534, 422,
	374, 627, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 423, 1078, 0, 635, 1081, 1069, 1061, 1062, 1063,
	1064, 1065, 1066, 0, 1083, 1084, 1085, 1086, 1087, 628,
	1075, 1077, 1060, 1067, 1068, 1070, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 331, 332, 334, 336, 0,
	335, 337, 339, 340, 341, 828, 342, 343, 344, 347,
	348, 349, 351, 711, 352, 353, 354, 355, 356, 357,
	0, 830, 359, 360, 361, 362, 363, 365, 367, 368,
	369, 370, 371, 373, 375, 0, 0, 0, 833, 0,
	0, 0, 379, 380, 381, 382, 383, 384, 0, 385,
	386, 390, 392, 393, 394, 395, 396, 397, 400, 0,
	402, 404, 0, 405, 408, 0, 409, 410, 411, 412,
	413, 414, 415, 416, 0, 417, 0, 418, 419, 421,
	0, 424, 425, 426, 427, 428, 0, 429, 0, 0,
	430, 431, 433, 434, 435, 437, 438, 439, 440, 441,
	442, 443, 444, 445, 446, 447, 448, 0, 449, 450,
	451, 453, 0, 454, 455, 458, 459, 460, 461, 0,
	463, 0, 0, 464, 465, 466, 0, 0, 467, 468,
	469, 470, 471, 472, 475, 0, 477, 478, 479, 480,
	481, 482, 483, 713, 485, 486, 487, 488, 489, 490,
	491, 0, 0, 492, 494, 495, 0, 0, 0, 846,
	510, 511, 512, 513, 514, 515, 516, 518, 0, 520,
	521, 522, 0, 523, 524, 525, 526, 0, 527, 528,
	529, 530, 531, 533, 536, 537, 538, 539, 0, 542,
	543, 544, 545, 546, 547, 548, 550, 551, 552, 554,
	555, 556, 714, 557, 558, 559, 560, 0, 562, 563,
	715, 565, 566, 568, 569, 570, 571, 572, 573, 724,
	0, 575, 1051, 576, 577, 578, 579, 580, 0, 582,
	583, 584, 585, 586, 587, 590, 591, 592, 594, 595,
	0, 596, 597, 0, 599, 600, 849, 602, 603, 604,
	605, 606, 0, 725, 607, 0, 608, 0, 609, 610,
	611, 612, 613, 614, 615, 617, 0, 0, 619, 620,
	621, 623, 624, 625, 626, 629, 630, 631, 632, 633,
	0, 634, 636, 638, 716, 0, 0, 1079, 0, 0,
	0, 0, 0, 0, 639, 640, 0, 507, 501, 457,
	499, 500, 504, 505, 508, 333, 0, 350, 831, 0,
	399, 436, 0, 0, 0, 496, 0, 549, 553, 0,
	0, 0, 0, 0, 0, 407, 0, 836, 0, 842,
	0, 848, 0, 618, 0, 838, 839, 844, 338, 1076,
	641, 712, 0, 0, 0, 503, 0, 0, 0, 0,
	0, 0, 0, 346, 0, 0, 0, 0, 840, 837,
	841, 847, 835, 845, 832, 843, 0, 540, 474, 0,
	567, 345, 391, 378, 420, 462, 574, 0, 0, 452,
	622, 387, 476, 0, 366, 509, 0, 598, 473, 0,
	581, 601, 0, 493, 372, 532, 588, 589, 829, 834,
	0, 850, 0, 376, 377, 498, 358, 506, 0, 0,
	561, 519, 517, 0, 484, 541, 0, 0, 0, 406,
	0, 401, 497, 637, 364, 616, 535, 502, 456, 564,
	593, 403, 388, 389, 432, 534, 422, 374, 627, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 423, 1078,
	0, 635, 1081, 1069, 1061, 1062, 1063, 1064, 1065, 1066,
	0, 1083, 1084, 1085, 1086, 1087, 628, 1075, 1077, 1060,
	1067, 1068, 1070, 0, 323, 324, 325, 326, 327, 328,
	329, 330, 331, 332, 334, 336, 0, 335, 337, 339,
	340, 341, 828, 342, 343, 344, 347, 348, 349, 351,
	711, 352, 353, 354, 355, 356, 357, 0, 830, 359,
	360, 361, 362, 363, 365, 367, 368, 369, 370, 371,
	373, 375, 0, 0, 0, 833, 0, 0, 0, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 390, 392,
	393, 394, 395, 396, 397, 400, 0, 402, 404, 0,
	405, 408, 0, 409, 410, 411, 412, 413, 414, 415,
	416, 0, 417, 0, 418, 419, 421, 0, 424, 425,
	426, 427, 428, 0, 429, 0, 0, 430, 431, 433,
	434, 435, 437, 438, 439, 440, 441, 442, 443, 444,
	445, 446, 447, 448, 0, 449, 450, 451, 453, 0,
	454, 455, 458, 459, 460, 461, 0, 463, 0, 0,
	464, 465, 466, 0, 0, 467, 468, 469, 470, 471,
	472, 475, 0, 477, 478, 479, 480, 481, 482, 483,
	713, 485, 486, 487, 488, 489, 490, 491, 0, 0,
	492, 494, 495, 0, 0, 0, 846, 510, 511, 512,
	513, 514, 515, 516, 518, 0, 520, 521, 522, 0,
	523, 524, 525, 526, 0, 527, 528, 529, 530, 531,
	533, 536, 537, 538, 539, 0, 542, 543, 544, 545,
	546, 547, 548, 550, 551, 552, 554, 555, 556, 714,
	557, 558, 559, 560, 0, 562, 563, 715, 565, 566,
	568, 569, 570, 571, 572, 573, 724, 0, 575, 2856,
	576, 577, 578, 579, 580, 0, 582, 583, 584, 585,
	586, 587, 590, 591, 592, 594, 595, 0, 596, 597,
	0, 599, 600, 849, 602, 603, 604, 605, 606, 0,
	725, 607, 0, 608, 0, 609, 610, 611, 612, 613,
	614, 615, 617, 0, 0, 619, 620, 621, 623, 624,
	625, 626, 629, 630, 631, 632, 633, 0, 634, 636,
	638, 716, 0, 0, 1079, 0, 0, 0, 0, 0,
	0, 639, 640, 0, 507, 501, 457, 499, 500, 504,
	505, 508, 333, 0, 350, 831, 0, 399, 1089, 0,
	0, 0, 496, 0, 549, 553, 0, 0, 0, 0,
	0, 0, 407, 0, 836, 0, 842, 0, 848, 0,
	618, 0, 838, 839, 844, 338, 1076, 641, 712, 0,
	0, 0, 503, 0, 0, 0, 0, 0, 0, 0,
	346, 0, 0, 0, 0, 840, 837, 841, 847, 835,
	845, 832, 843, 0, 540, 474, 0, 567, 345, 391,
	378, 420, 462, 574, 0, 0, 452, 622, 387, 476,
	0, 366, 509, 0, 598, 473, 0, 581, 601, 0,
	493, 372, 532, 588, 589, 829, 834, 0, 850, 0,
	376, 377, 498, 358, 506, 0, 0, 561, 519, 517,
	0, 484, 541, 0, 0, 0, 406, 0, 401, 497,
	637, 364, 616, 535, 502, 456, 564, 593, 403, 388,
	389, 432, 534, 422, 374, 627, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 423, 1078, 0, 635, 1081,
	1069, 1061, 1062, 1063, 1064, 1065, 1066, 0, 1083, 1084,
	1085, 1086, 1087, 628, 1075, 1077, 1060, 1067, 1068, 1070,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 331,
	332, 334, 336, 0, 335, 337, 339, 340, 341, 828,
	342, 343, 344, 347, 348, 349, 351, 711, 352, 353,
	354, 355, 356, 357, 0, 830, 359, 360, 361, 362,
	363, 365, 367, 368, 369, 370, 371, 373, 375, 0,
	0, 0, 833, 0, 0, 0, 379, 380, 381, 382,
	383, 384, 0, 385, 386, 390, 392, 393, 394, 395,
	396, 397, 400, 0, 402, 404, 0, 405, 408, 0,
	409, 410, 411, 412, 413, 414, 415, 416, 0, 417,
	0, 418, 419, 421, 0, 424, 425, 426, 427, 428,
	0, 429, 0, 0, 430, 431, 433, 434, 435, 437,
	438, 439, 440, 441, 442, 443, 444, 445, 446, 447,
	448, 0, 449, 450, 451, 453, 0, 454, 455, 458,
	459, 460, 461, 0, 463, 0, 0, 464, 465, 466,
	0, 0, 467, 468, 469, 470, 471, 472, 475, 0,
	477, 478, 479, 480, 481, 482, 483, 713, 485, 486,
	487, 488, 489, 490, 491, 0, 0, 492, 494, 495,
	0, 0, 0, 846, 510, 511, 512, 513, 514, 515,
	516, 518, 0, 520, 521, 522, 0, 523, 524, 525,
	526, 0, 527, 528, 529, 530, 531, 533, 536, 537,
	538, 539, 0, 542, 543, 544, 545, 546, 547, 548,
	550, 551, 552, 554, 555, 556, 714, 557, 558, 559,
	560, 0, 562, 563, 715, 565, 566, 568, 569, 570,
	571, 572, 573, 724, 0, 575, 1051, 576, 577, 578,
	579, 580, 0, 582, 583, 584, 585, 586, 587, 590,
	591, 592, 594, 595, 0, 596, 597, 0, 599, 600,
	849, 602, 603, 604, 605, 606, 0, 725, 607, 0,
	608, 0, 609, 610, 611, 612, 613, 614, 615, 617,
	0, 0, 619, 620, 621, 623, 624, 625, 626, 629,
	630, 631, 632, 633, 0, 634, 636, 638, 716, 0,
	0, 1079, 0, 0, 0, 0, 0, 0, 639, 640,
	0, 507, 501, 457, 499, 500, 504, 505, 508, 333,
	0, 350, 831, 0, 399, 1048, 0, 0, 0, 496,
	0, 549, 553, 0, 0, 0, 0, 0, 0, 407,
	0, 836, 0, 842, 0, 848, 0, 618, 0, 838,
	839, 844, 338, 1076, 641, 712, 0, 0, 0, 503,
	0, 0, 0, 0, 0, 0, 0, 346, 0, 0,
	0, 0, 840, 837, 841, 847, 835, 845, 832, 843,
	0, 540, 474, 0, 567, 345, 391, 378, 420, 462,
	574, 0, 0, 452, 622, 387, 476, 0, 366, 509,
	0, 598, 473, 0, 581, 601, 0, 493, 372, 532,
	588, 589, 829, 834, 0, 850, 0, 376, 377, 498,
	358, 506, 0, 0, 561, 519, 517, 0, 484, 541,
	0, 0, 0, 406, 0, 401, 497, 637, 364, 616,
	535, 502, 456, 564, 593, 403, 388, 389, 432, 534,
	422, 374, 627, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 423, 1078, 0, 635, 1081, 1069, 1061, 1062,
	1063, 1064, 1065, 1066, 0, 1083, 1084, 1085, 1086, 1087,
	628, 1075, 1077, 1060, 1067, 1068, 1070, 0, 323, 324,
	325, 326, 327, 328, 329, 330, 331, 332, 334, 336,
	0, 335, 337, 339, 340, 341, 828, 342, 343, 344,
	347, 348, 349, 351, 711, 352, 353, 354, 355, 356,
	357, 0, 830, 359, 360, 361, 362, 363, 365, 367,
	368, 369, 370, 371, 373, 375, 0, 0, 0, 833,
	0, 0, 0, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 390, 392, 393, 394, 395, 396, 397, 400,
	0, 402, 404, 0, 405, 408, 0, 409, 410, 411,
	412, 413, 414, 415, 416, 0, 417, 0, 418, 419,
	421, 0, 424, 425, 426, 427, 428, 0, 429, 0,
	0, 430, 431, 433, 434, 435, 437, 438, 439, 440,
	441, 442, 443, 444, 445, 446, 447, 448, 0, 449,
	450, 451, 453, 0, 454, 455, 458, 459, 460, 461,
	0, 463, 0, 0, 464, 465, 466, 0, 0, 467,
	468, 469, 470, 471, 472, 475, 0, 477, 478, 479,
	480, 481, 482, 483, 713, 485, 486, 487, 488, 489,
	490, 491, 0, 0, 492, 494, 495, 0, 0, 0,
	846, 510, 511, 512, 513, 514, 515, 516, 518, 0,
	520, 521, 522, 0, 523, 524, 525, 526, 0, 527,
	528, 529, 530, 531, 533, 536, 537, 538, 539, 0,
	542, 543, 544, 545, 546, 547, 548, 550, 551, 552,
	554, 555, 556, 714, 557, 558, 559, 560, 0, 562,
	563, 715, 565, 566, 568, 569, 570, 571, 572, 573,
	724, 0, 575, 1051, 576, 577, 578, 579, 580, 0,
	582, 583, 584, 585, 586, 587, 590, 591, 592, 594,
	595, 0, 596, 597, 0, 599, 600, 849, 602, 603,
	604, 605, 606, 0, 725, 607, 0, 608, 0, 609,
	610, 611, 612, 613, 614, 615, 617, 0, 0, 619,
	620, 621, 623, 624, 625, 626, 629, 630, 631, 632,
	633, 0, 634, 636, 638, 716, 0, 0, 1079, 0,
	0, 0, 0, 0, 0, 639, 640, 0, 507, 501,
	457, 499, 500, 504, 505, 508, 333, 0, 350, 831,
	0, 399, 436, 0, 0, 0, 496, 0, 549, 553,
	0, 0, 0, 0, 0, 0, 407, 0, 836, 0,
	842, 0, 848, 0, 618, 0, 838, 839, 844, 338,
	1076, 641, 712, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 0, 0, 840,
	837, 841, 847, 835, 845, 832, 843, 0, 540, 474,
	0, 567, 345, 391, 378, 420, 462, 574, 0, 0,
	452, 622, 387, 476, 0, 366, 509, 0, 598, 473,
	0, 581, 601, 0, 493, 372, 532, 588, 589, 829,
	834, 0, 850, 0, 376, 377, 498, 358, 506, 0,
	0, 561, 519, 517, 0, 484, 541, 0, 0, 0,
	406, 0, 401, 497, 637, 364, 616, 535, 502, 456,
	564, 593, 403, 388, 389, 432, 534, 422, 374, 627,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 423,
	1078, 0, 635, 1081, 1069, 1061, 1062, 1063, 1064, 1065,
	1066, 0, 1083, 1084, 1085, 1086, 1087, 628, 1075, 1077,
	1060, 1067, 1068, 1070, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 336, 0, 335, 337,
	339, 340, 341, 828, 342, 343, 344, 347, 348, 349,
	351, 711, 352, 353, 354, 355, 356, 357, 0, 830,
	359, 360, 361, 362, 363, 365, 367, 368, 369, 370,
	371, 373, 375, 0, 0, 0, 833, 0, 0, 0,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 390,
	392, 393, 394, 395, 396, 397, 400, 0, 402, 404,
	0, 405, 408, 0, 409, 410, 411, 412, 413, 414,
	415, 416, 0, 417, 0, 418, 419, 421, 0, 424,
	425, 426, 427, 428, 0, 429, 0, 0, 430, 431,
	433, 434, 435, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 0, 449, 450, 451, 453,
	0, 454, 455, 458, 459, 460, 461, 0, 463, 0,
	0, 464, 465, 466, 0, 0, 467, 468, 469, 470,
	471, 472, 475, 0, 477, 478, 479, 480, 481, 482,
	483, 713, 485, 486, 487, 488, 489, 490, 491, 0,
	0, 492, 494, 495, 0, 0, 0, 846, 510, 511,
	512, 513, 514, 515, 516, 518, 0, 520, 521, 522,
	0, 523, 524, 525, 526, 0, 527, 528, 529, 530,
	531, 533, 536, 537, 538, 539, 0, 542, 543, 544,
	545, 546, 547, 548, 550, 551, 552, 554, 555, 556,
	714, 557, 558, 559, 560, 0, 562, 563, 715, 565,
	566, 568, 569, 570, 571, 572, 573, 724, 0, 575,
	0, 576, 577, 578, 579, 580, 0, 582, 583, 584,
	585, 586, 587, 590, 591, 592, 594, 595, 0, 596,
	597, 0, 599, 600, 849, 602, 603, 604, 605, 606,
	0, 725, 607, 0, 608, 0, 609, 610, 611, 612,
	613, 614, 615, 617, 0, 0, 619, 620, 621, 623,
	624, 625, 626, 629, 630, 631, 632, 633, 0, 634,
	636, 638, 716, 0, 0, 1079, 0, 0, 0, 0,
	0, 0, 639, 640, 0, 507, 501, 457, 499, 500,
	504, 505, 508, 333, 0, 350, 831, 0, 399, 436,
	0, 0, 0, 496, 0, 549, 553, 0, 0, 0,
	0, 0, 0, 407, 0, 836, 0, 842, 0, 848,
	0, 618, 0, 838, 839, 844, 338, 0, 641, 712,
	0, 0, 0, 503, 0, 0, 0, 0, 0, 0,
	0, 346, 0, 0, 0, 0, 840, 837, 841, 847,
	835, 845, 832, 843, 0, 540, 474, 0, 567, 345,
	391, 378, 420, 462, 574, 0, 0, 452, 622, 387,
	476, 0, 366, 509, 0, 598, 473, 0, 581, 601,
	0, 493, 372, 532, 588, 589, 829, 834, 0, 850,
	0, 376, 377, 498, 358, 506, 0, 0, 561, 519,
	517, 0, 484, 541, 0, 0, 0, 406, 0, 401,
	497, 637, 364, 616, 535, 502, 456, 564, 593, 403,
	388, 389, 432, 534, 422, 374, 627, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 423, 0, 0, 635,
	0, 0, 0, 0, 0, 0, 0, 398, 0, 0,
	0, 0, 0, 0, 628, 0, 0, 0, 0, 0,
	0, 0, 323, 324, 325, 326, 327, 328, 329, 330,
	331, 332, 334, 336, 0, 335, 337, 339, 340, 341,
	828, 342, 343, 344, 347, 348, 349, 351, 711, 352,
	353, 354, 355, 356, 357, 0, 830, 359, 360, 361,
	362, 363, 365, 367, 368, 369, 370, 371, 373, 375,
	0, 0, 0, 833, 0, 0, 0, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 390, 392, 393, 394,
	395, 396, 397, 400, 0, 402, 404, 0, 405, 408,
	0, 409, 410, 411, 412, 413, 414, 415, 416, 0,
	417, 0, 418, 419, 421, 0, 424, 425, 426, 427,
	428, 0, 429, 0, 0, 430, 431, 433, 434, 435,
	437, 438, 439, 440, 441, 442, 443, 444, 445, 446,
	447, 448, 0, 449, 450, 451, 453, 0, 454, 455,
	458, 459, 460, 461, 0, 463, 0, 0, 464, 465,
	466, 0, 0, 467, 468, 469, 470, 471, 472, 475,
	0, 477, 478, 479, 480, 481, 482, 483, 713, 485,
	486, 487, 488, 489, 490, 491, 0, 0, 492, 494,
	495, 0, 0, 0, 846, 510, 511, 512, 513, 514,
	515, 516, 518, 0, 520, 521, 522, 0, 523, 524,
	525, 526, 0, 527, 528, 529, 530, 531, 533, 536,
	537, 538, 539, 0, 542, 543, 544, 545, 546, 547,
	548, 550, 551, 552, 554, 555, 556, 714, 557, 558,
	559, 560, 0, 562, 563, 715, 565, 566, 568, 569,
	570, 571, 572, 573, 724, 0, 575, 0, 576, 577,
	578, 579, 580, 0, 582, 583, 584, 585, 586, 587,
	590, 591, 592, 594, 595, 0, 596, 597, 0, 599,
	600, 849, 602, 603, 604, 605, 606, 0, 725, 607,
	0, 608, 0, 609, 610, 611, 612, 613, 614, 615,
	617, 0, 0, 619, 620, 621, 623, 624, 625, 626,
	629, 630, 631, 632, 633, 0, 634, 636, 638, 716,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 639,
	640, 0, 507, 501, 457, 499, 500, 504, 505, 508,
}

var yyPact = [...]int32{
	11436, -1000, 407, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1671, 1671, -1000, -1000,
	3734, 1351, 16121, 20404, 18000, 3814, 2462, 2915, 108944, 86724,
	1671, 1822, 1794, 1741, 87734, 108439, 107934, 73089, 72584, 1485,
	1386, 1371, 86219, 1355, 1383, -1000, 2301, 87734, 55454, 55454,
	85714, 87734, 85209, 87734, 57988, 87734, 4787, 4075, 4075, 3993,
	2626, 2964, 68089, -1000, 1887, 1085, 1714, -1000, -1000, 4538,
	77129, 404, 107429, 87734, 1352, 11436, 4604, -1000, -1000, 2751,
	4009, 77129, 4141, 4000, 1714, 87734, -1000, 2113, 2774, 2320,
	4540, 106924, 87734, 87734, 53926, 87734, 3791, 106419, 105914, 3249,
	105409, 64554, 3813, 87734, 1815, 87734, 87734, 2548, 104904, 87734,
	87734, 1381, 3084, 62028, 62028, -1000, -1000, 1938, 1905, -1000,
	-1000, -1000, 76624, 84704, 104399, 103894, 1707, 3246, 2625, 68089,
	87734, 87734, 87734, 87734, 68089, 62028, 2673, 53397, 103389, 68089,
	87734, 68089, 87734, 87734, 87734, 87734, 87734, 1814, 61523, 61018,
	87734, 102884, 3790, 87734, 87734, 2402, 3433, -1000, 102379, 101874,
	101369, 114337, 113850, 4710, 4704, 3001, 4704, 100864, 100359, 99854,
	4066, 64049, 63544, 63039, -1000, -1000, -1000, 1706, 3241, -1000,
	-1000, -1000, 3788, 2546, 1813, -1000, 2668, -1000, -1000, -1000,
	-1000, -1000, -1000, 1705, 4063, 2217, -1000, 89754, 84199, 2399,
	-1000, -1000, 1073, 4319, 4787, 4787, 4556, 66574, 1584, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 4317, 2716, 3156, 513,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 4604, 2751, 4604,
	4787, 4176, 4787, -1000, -1000, -1000, -1000, 87734, -1000, 4787,
	1374, -1000, 3992, 580, 1077, -1000, 968, 968, 968, 3664,
	968, 3991, 1547, 578, 1016, -1000, 3604, 1479, 50271, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1738, 3618, 54949, -1000,
	87734, 54949, -1000, 513, 4315, 2712, 3154, -1000, 54949, 87734,
	2558, 54949, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 87734, 4124, 4124, 4124, 4124, 953, 953, 4124, 4124,
	1137, 993, -1000, -1000, -1000, 4770, 4770, -1000, -1000, -1000,
	-1000, 1053, -1000, 83694, -1000, -1000, -1000, -1000, 403, -1000,
	-1000, -1000, 77129, -1000, 77129, 17020, 3511, 2964, -1000, -1000,
	66574, -1000, 1373, -1000, 525, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3189, 4537, 4537, 4537, 4061, 1887, -1000, -1000,
	533, 498, 1085, 31831, 31831, -1000, 3990, -1000, 427, -1000,
	525, 67584, 1369, 401, 87734, -1000, 1163, 401, 36973, -1000,
	-1000, 2641, -1000, 419, -1000, 2614, 2059, -1000, 3052, 87734,
	3762, 99349, 77129, 77129, 907, -1000, -1000, -1000, -1000, -1000,
	968, 98844, 87734, 1704, 98339, 4709, 68089, 68089, 87734, 1780,
	68089, 87734, 3509, 2390, -1000, 2247, 3152, -1000, 4598, 1936,
	4717, 493, 1203, 87734, 87734, -1000, 504, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1420, 2292, 1391, 4596, 1936, 4591, 3380, 97834, 1797,
	4590, 3588, 1936, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1699, 1489, 87734, 2454, 3988, 87734, 1163, 4586,
	-1000, 3549, 3089, 112876, 87734, 1936, 1936, -1000, -1000, -1000,
	-1000, 8388, 4695, 4509, 6931, 4694, 4508, 19235, 4692, 11133,
	4691, 83189, 82684, 3370, 87734, 82179, 2722, 1368, 2705, 2709,
	3521, 2257, 11072, 1368, -1000, 525, 2333, 3350, 87734, 87734,
	87734, 2728, 1360, 3987, 4690, 10208, 2741, 9938, 2341, 1793,
	2895, 3984, 3983, 87734, 2329, 1928, 4507, 2318, 3506, 1928,
	4507, 2635, 2663, 4688, 2291, 2789, 3352, -1000, 1086, 4685,
	435, -1000, 4684, 453, -1000, 3981, 4683, 439, 4680, -1000,
	3445, 114824, -1000, -1000, -1000, -1000, -1000, 906, -1000, 556,
	-1000, -1000, -1000, -1000, -1000, 1239, 3204, 1238, 1238, 1238,
	-1000, -1000, -1000, -1000, -1000, 665, 671, -1000, -1000, -1000,
	-1000, 3197, 1357, 3197, 3197, -1000, 3215, 3197, 439, 4676,
	97329, 1356, 4672, 96824, 96319, 3502, 4564, 4671, 1936, 4670,
	-1000, 4667, 62028, 3564, 263, 4666, -1000, 263, 4662, 263,
	4661, -1000, 3359, -1000, 2273, -1000, -1000, -1000, 4709, 62028,
	87734, -1000, 3121, -1000, 4743, 65059, 419, 4787, 3566, 48729,
	48215, 87734, 646, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3049, -1000, 2607, -1000, -1000, -1000, -1000, -1000, -1000,
	95814, -1000, -1000, -1000, 4756, 112876, 74099, 62028, 75109, 1354,
	87734, -1000, 87734, -1000, -1000, -1000, -1000, 74099, 3501, 62028,
	3500, 1479, -1000, 382, -1000, 49243, 1352, -1000, -1000, -1000,
	-1000, 3604, -1000, 380, -1000, 402, -1000, 1163, 369, -1000,
	2597, -1000, 365, 3860, 3979, 525, 4709, 4709, 4709, -1000,
	-1000, -1000, -1000, 355, 2699, -1000, 87734, -1000, 87734, 87734,
	87734, 4124, 4124, 87734, 87734, 87734, 4124, 4124, 87734, 4124,
	4124, -1000, -1000, -1000, 36973, -1000, -1000, -1000, 4787, 537,
	-1000, 231, 87734, 87734, 87734, 112876, 112876, 68089, 68089, 52868,
	87734, 87734, 68089, 68089, 3497, 3426, 1339, -1000, -1000, -1000,
	-1000, -1000, -1000, 3978, 66574, -1000, -1000, 29257, 525, -1000,
	25614, 36973, 3196, 3489, 3493, 2011, 4068, 3128, -1000, 36459,
	2773, 41085, 3586, 1085, -1000, -1000, 1085, 1085, 36973, -1000,
	3189, -1000, -1000, 3998, 283, -1000, 26133, -1000, -1000, 36973,
	36973, 36973, 36973, 36973, 2465, 4568, -1000, -1000, -1000, -1000,
	30802, -1000, -1000, 525, 1215, 892, -1000, -1000, 1333, -1000,
	1143, 1332, 525, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1435, 4787, 1429, 36973, 1642, 2921, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1331, 1330, 3491, -1000, 1329, 1326,
	1321, 1320, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1318,
	1317, 1316, 1315, 1312, 1310, 1300, 1299, 1296, 1283, 1282,
	1279, 1276, 1275, 1267, 1266, 1265, 1261, 1260, 1259, 1258,
	1176, 1256, 1254, 1251, 1248, 1247, 1245, 1242, -1000, 3197,
	-1000, 3197, 3197, 1238, 1238, 1239, -1000, -1000, 3215, 3197,
	1238, -1000, -1000, 671, 665, -1000, -1000, -1000, -1000, -1000,
	576, 1237, -1000, 525, -1000, 87734, 36973, 87734, 401, 4754,
	87734, 354, 16461, -1000, 3123, 2751, -1000, 2126, -1000, -1000,
	-1000, 1591, 4753, 65564, -1000, 87734, 3877, 3875, 4301, 4101,
	1031, 4585, 4752, 968, 87734, 2767, 4581, 95309, -1000, 1232,
	1232, 2944, 87734, 1231, 4746, 112876, 2657, 2062, -1000, 62028,
	4707, 4660, 2560, -1000, -1000, 112876, -1000, 458, 27180, -1000,
	27180, 4526, 3874, 51281, -1000, 799, 87734, 87734, 87734, 87734,
	-1000, 87734, 4659, -1000, 4658, 87734, 1048, 4580, 1716, 4787,
	4657, 60008, 4578, -1000, 94804, 1230, 3977, 2579, 62028, 87734,
	1803, 3973, 4656, -1000, 73594, 1203, 4787, 4744, 3490, -1000,
	-1000, 293, -1000, 1965, 1958, -1000, 2442, 2440, 69587, 1871,
	1862, 3616, 3971, 2080, 1857, 87734, 2924, 87734, 3582, 4299,
	1042, 2826, 2252, -1000, 1222, 77129, 1918, 293, -1000, 4298,
	3043, 2439, 2924, 1395, 87734, 1910, 293, 4297, 2767, 1950,
	-1000, 2874, 114824, 1086, -1000, 4060, -1000, 1086, 1086, 4059,
	2520, 1936, 1936, -1000, 87734, 293, 1976, 1920, 87734, 10878,
	4655, 4506, 10715, 4653, 87734, -1000, 986, -1000, 4294, 2215,
	4293, -1000, 71591, 4292, 2214, 4290, 1726, 4286, 2210, 4280,
	4276, 4273, 2560, -1000, 94299, 3104, -1000, 2560, -1000, -1000,
	1422, -1000, 4073, -1000, -1000, -1000, -1000, 3653, -1000, 3690,
	2514, 1983, 3615, 4271, 4270, 6501, 93794, 4269, 3041, -1000,
	-1000, 3967, 4490, -1000, -1000, -1000, -1000, 2117, 2787, -1000,
	2618, 1086, 1086, 87734, -1000, 87734, -1000, -1000, 525, 4267,
	3680, -1000, -1000, 2339, 3873, 3871, 1005, 4266, -1000, 112389,
	87734, 87734, 4265, 6501, 93289, 4263, 3037, 4262, 60513, 74604,
	74604, 4260, 4259, 6501, 92784, 4258, 3035, 4256, 4254, 4253,
	1532, -1000, 4251, 4488, 4250, 1046, 4787, 2383, 2370, 2355,
	-1000, -1000, 1203, 4249, 87734, 87734, 2537, 4248, -1000, 2586,
	3059, 2586, 4245, 60008, -1000, 2586, 2586, 4244, 1042, 1042,
	4243, 4240, 1968, 4238, 87734, 87734, 87734, 87734, 87734, 3301,
	3202, 3198, 975, 400, 4237, -1000, 3163, -1000, 13222, 2201,
	2637, 2448, -1000, 4784, 4783, -1000, 87734, 87734, -1000, -1000,
	-1000, 87734, 87734, -1000, 87734, 87734, 112876, -1000, 112876, 1223,
	1398, 3442, -1000, 4770, 4235, -1000, 4234, 4233, 4230, -1000,
	1220, -1000, 557, 36973, -1000, 4770, -1000, -1000, -1000, -1000,
	4770, -1000, 4321, 4121, 4770, -1000, 1217, -1000, 4770, -1000,
	-1000, 3197, 3197, -1000, -1000, 112876, 435, 4652, 112876, -1000,
	3869, 4651, 3866, 4650, 112876, -1000, 87734, 1216, 87734, 87734,
	475, 60008, 4649, 62028, 62028, 62028, 62028, -1000, -1000, -1000,
	-1000, -1000, 87734, 536, 3208, 4743, 1762, -1000, -1000, -1000,
	-1000, 399, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	399, -1000, -1000, -1000, -1000, -1000, 1410, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 87734, -1000, 1714, 342, -1000, 4227,
	376, 87734, 87734, 2232, 68089, 68089, 68089, 87734, 87734, 87734,
	3422, 87734, 87734, 87734, 87734, 2225, -1000, 436, -1000, 87734,
	341, -1000, -1000, 322, 4140, 73089, 206, 75109, -1000, 1479,
	54949, -1000, -1000, -1000, 3591, 87734, 87734, -1000, 87734, -1000,
	87734, -1000, 87734, 87734, 87734, 87734, 87734, -1000, 3385, -1000,
	-1000, -1000, -1000, 2079, -1000, -1000, -1000, -1000, 87734, 87734,
	-1000, -1000, -1000, 87734, 87734, -1000, 87734, 87734, 317, -1000,
	77129, 2482, 2319, 4564, 2820, 2810, 4414, 4412, 4410, 4409,
	4408, 4407, 4404, 4403, 87734, 87734, 3960, 3958, 4393, 4379,
	112876, 1086, 112876, 10955, -1000, -1000, 867, 71, 36973, 36973,
	36973, -1000, 16461, 4769, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 16347, 13, -1000, -1000, -1000, -1000, -1000, 2008,
	4078, -1000, 1612, -1000, 2012, -1000, -1000, 398, 16461, -1000,
	42627, -1000, -1000, -1000, 2452, 16461, -1000, 40571, 40571, 2101,
	87734, 2707, -1000, 2707, 275, -1000, 2422, 3196, 3489, 4139,
	81674, 31831, 112876, 87734, 4312, 36973, 36973, 36973, 36973, 36973,
	36973, 36973, 36973, 36973, 36973, 36973, 36973, 36973, 36973, 36973,
	36973, 4481, 36973, 4226, 3519, -1000, -1000, 4225, 1193, 1987,
	27180, -1000, -1000, 1206, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 837, 837,
	823, 3190, 3190, 920, 1215, 4531, 525, 16208, 396, 488,
	525, -1000, -1000, -1000, 32346, 36973, 51281, 35944, 525, -1000,
	29257, -1000, 2030, 4770, 4418, 16461, 2921, 4019, 1513, 1210,
	36973, 36973, 1208, 4770, 4770, 4770, 4770, 36973, 2209, 36973,
	36973, 42113, 36973, 36973, 31317, 36973, 36973, 36973, 36973, 36973,
	2512, 36973, 3049, 43655, 2509, 36973, 35430, 30287, 36973, 36973,
	36973, 865, 36973, 36973, 36973, 3049, 4139, 36973, 858, 316,
	-1000, 3848, 315, 36973, -1000, 87734, 4312, 36973, 36973, 36973,
	36973, 4226, 3519, 4225, 1193, 1206, -1000, -1000, -1000, 2001,
	2352, -1000, 3957, -1000, 3672, 58493, 3808, 87734, 555, -1000,
	1411, 87734, -1000, -1000, 4093, 45685, 45685, 3623, 3623, -1000,
	-1000, 70092, 87734, 3581, 3823, 4646, 1870, 4546, 1205, -1000,
	2767, 2799, 4644, 3956, 4577, -1000, 9548, 71102, 4643, 2212,
	-1000, -1000, 3577, 3178, 1203, -1000, 69099, 3955, 2656, 87734,
	87734, 1690, -1000, -1000, -1000, -1000, -1000, -1000, 2238, 87734,
	-1000, -1000, -1000, 27180, -1000, 314, -1000, 1409, 3488, 87734,
	-1000, 87734, 1204, 1203, 1203, 1203, 1203, 1203, -1000, 87734,
	2151, 87734, 1853, 70092, 3562, 4642, 2914, -1000, -1000, 87734,
	2096, -1000, -1000, 4641, 3580, 4740, 4576, 968, 36973, 27180,
	4805, -1000, 4737, 2993, 47200, 87734, 1930, 538, -1000, 77129,
	4505, 611, 968, -1000, 427, -1000, 2351, 112876, 4787, 3580,
	3580, 8390, 87734, 87734, 87734, -1000, 1840, -1000, -1000, 2543,
	87734, -1000, 87734, 27180, 87734, 87734, -1000, 4575, 92279, -1000,
	112876, 87734, -1000, 1202, 3870, 1604, 1603, 3837, 81169, 87734,
	91774, 91269, 87734, 87734, 76119, 1892, 1880, 87734, 2596, 75614,
	87734, 2592, -1000, 87734, 2250, -1000, -1000, 62028, -1000, 3706,
	2591, 28746, 7789, 87734, 87734, 3954, 87734, 10650, 87734, 87734,
	-1000, 87734, -1000, -1000, -1000, -1000, -1000, 1086, -1000, -1000,
	-1000, 87734, 87734, 1086, 1086, 18445, 87734, 87734, 87734, 8727,
	293, 1973, 1839, 3032, 87734, 1893, 293, 1959, 1776, 77129,
	2029, 87734, 87734, 62028, 311, -1000, -1000, 113363, 109954, -1000,
	2477, -1000, -1000, -1000, 556, -1000, 114824, 87734, 87734, 62028,
	-1000, 87734, 87734, 62028, 87734, 62028, -1000, -1000, 87734, 1721,
	-1000, 49757, -1000, -1000, 87734, 87734, -1000, 4489, 90764, 36973,
	4483, 87734, -1000, 87734, -1000, 1201, 4476, 87734, 62028, 87734,
	-1000, -1000, -1000, 90259, -1000, 80664, 3134, 1978, 62028, 3953,
	4475, 3951, 2783, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	62028, 62028, 4221, 4220, 87734, 87734, 87734, 27180, 62028, 304,
	391, 2640, 3949, 87734, -1000, 80664, 62028, 3943, 87734, -1000,
	385, 385, 385, 62028, 87734, -1000, 80664, 62028, 3937, 87734,
	62028, 87734, -1000, 62028, -1000, -1000, 87734, -1000, 87734, -1000,
	4551, 87734, 87734, -1000, 62028, 2315, 2349, 4219, -1000, 4218,
	2487, -1000, 62028, 2674, -1000, 89754, 87734, -1000, 62028, 2088,
	2674, -1000, -1000, 87734, -1000, -1000, 62028, 87734, 1015, 87734,
	62028, 3761, 2633, 1022, 2631, 2749, 87734, 87734, 4787, 4702,
	87734, 4787, 89249, 27180, 87734, 3368, 62028, 87734, 4217, 87734,
	87734, 68089, 1200, 112876, 68089, 52339, 68089, 68089, 3487, 112876,
	87734, -1000, -1000, 73089, 72079, 2198, 2573, 4216, -1000, -1000,
	435, -1000, 453, -1000, 4564, 3936, -1000, 439, 1512, 4770,
	1223, 1088, 856, 2534, 2227, 2193, 2120, 4770, -1000, 303,
	854, 849, 4314, 4308, 848, 36973, 847, -1000, -1000, 439,
	-1000, 87734, 4736, 87734, 87734, 87734, 87734, 2655, 4564, 3271,
	1936, -1000, -1000, 2087, 3485, -1000, 263, 263, 263, 4549,
	62028, 4138, 1197, 4214, -1000, 2751, 49243, 2030, 4770, -1000,
	-1000, 112876, -1000, 59503, 87734, 376, 376, 3345, 87734, 381,
	-1000, 381, 381, 129, 155, 129, 1086, 379, 482, -1000,
	129, 129, 155, 4504, 4503, 4501, 4500, 4497, -1000, 27180,
	4058, 291, 87734, -1000, -1000, 59503, 3935, 377, 4564, 552,
	-1000, -1000, 87734, -1000, -1000, -1000, -1000, 3860, -1000, -1000,
	-1000, -1000, -1000, 3483, 2840, 2836, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2538, 2200, 2148,
	2510, -1000, -1000, -1000, -1000, 4477, 4477, 4477, 4477, 4477,
	4477, 4477, 4477, 3855, 3854, 88744, 87734, 4477, 4477, 2653,
	4377, 4735, 87734, 87734, 87734, 112876, 112876, 68089, 68089, 3384,
	68089, 68089, -1000, 846, 34916, -1000, 1504, -40, -40, 36973,
	36973, -1000, 36973, -1000, 3711, -1000, 36973, 2452, 4113, -1000,
	4785, 4785, 1181, -1000, 30802, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2575, 376, 36973, 1628, 1450, -1000,
	-1000, -1000, -1000, 4083, 45685, -1000, 4075, 4075, 1875, 1860,
	4075, 87734, -1000, -1000, -1000, -1000, 4229, -1000, 302, 302,
	415, 415, 415, -1000, 450, 450, 450, 450, 450, 450,
	823, 3190, 8334, 1221, 36973, 36973, 4213, 4212, 1193, 874,
	36973, -1000, 4467, -1000, -1000, -1000, 4135, -1000, -1000, 2494,
	3376, -1000, -1000, -1000, -1000, 3333, 42113, 42113, -1000, -1000,
	-1000, 30802, 1191, -1000, -1000, -1000, -1000, 51281, -1000, 1188,
	36973, -1000, -1000, 4519, -1000, -1000, 36973, 284, 219, -1000,
	-1000, 280, 836, 279, -1000, 71, -1000, 835, 3228, -1000,
	36973, 1513, 1182, -1000, 67079, 4094, 3360, 3263, 497, 1506,
	15929, 36973, 834, 832, 824, 822, 15814, 820, 4134, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 6429, 819, 817,
	15561, 374, 809, 4457, -1000, 42113, 42113, 42113, 1181, 805,
	804, 7494, 15210, 34402, 34402, 34402, 800, 15272, 36973, 222,
	6596, 278, 268, 265, 264, 27180, 262, -1000, 15158, 36973,
	3518, 27180, 6494, 261, 418, 796, -1000, 112876, 497, 411,
	1453, 794, -1000, 525, 3376, 15014, 3695, -1000, 359, 358,
	357, 36973, 4083, 260, -1000, -1000, 1179, -1000, 3812, -1000,
	16461, -1000, -1000, -1000, 3697, 3691, 3260, -1000, -1000, 250,
	-1000, -1000, -1000, -1000, 4093, 65564, 36973, 248, -1000, 525,
	3697, 40057, 169, 3961, 78139, 78139, 47705, -1000, 45180, 79654,
	78139, 78139, 1432, 4126, 1178, 1177, 525, -1000, -1000, -1000,
	1176, 4148, 3760, -1000, 3760, 792, 343, -1000, 112876, -1000,
	-1000, -1000, 87734, 1047, 87734, 3365, 87734, 87734, 4549, 87734,
	4733, 1042, 87734, 87734, 77129, 4640, 110441, 2474, 4643, -1000,
	4787, 66574, 3481, -1000, -1000, 247, -1000, -1000, 1894, 2474,
	3939, -1000, -1000, -1000, 3558, -1000, -1000, 2212, -1000, 790,
	-49, 4053, 246, -1000, -1000, -1000, 1397, 3740, 87734, 2851,
	968, 87734, 4707, 2137, 2114, 3133, -1000, 2251, -1000, -1000,
	27180, 27691, 1798, -1000, 789, 340, -1000, 112876, 4787, -1000,
	-1000, -1000, -1000, -1000, 1255, -1000, 87734, 66574, 66574, -1000,
	1936, 1517, 1853, -1000, 87734, 1906, 87734, 785, 87734, 87734,
	3072, 1797, 87734, 3480, -1000, -1000, 4770, 62028, 62028, 2578,
	4487, 2432, 2429, -1000, -1000, 4071, 1734, 62028, 1714, 4638,
	3823, 14969, 3211, 4546, 3475, 4809, 2850, -1000, -1000, 515,
	-1000, 525, -1000, 36973, 1163, 4551, -1000, 74604, 968, 2195,
	611, 4085, 4085, 87734, 782, 4209, -1000, -1000, 4208, 4207,
	-1000, -1000, 80159, -1000, -1000, 245, -1000, 614, 3547, 3175,
	4634, -1000, 4574, 1940, 1828, 36973, 1160, -1000, 2772, 1131,
	1158, 1150, 87734, 2165, 3755, -1000, 4633, 4564, 4631, 4564,
	-1000, -1000, -1000, -1000, -1000, 87734, 87734, 87734, 87734, -1000,
	2115, -1000, -1000, -1000, -1000, 2111, -1000, 2590, -1000, -1000,
	-1000, -1000, -1000, 2759, 2102, 243, -1000, -1000, 27180, 27180,
	27180, 4787, -1000, 293, -1000, 1929, 1775, 2746, -1000, 2977,
	-1000, 293, 4206, 2734, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 293, 4204, 2767, 1687, -1000, 4202, -1000, 293, 1948,
	1640, 87734, 87734, 87734, 3931, 7208, 87734, 87734, 87734, 87734,
	6799, 4201, 1532, 1853, 4200, -1000, -1000, -1000, -1000, 109954,
	113363, -1000, 113363, -1000, 556, -1000, 600, 556, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 4197, -1000, 4564, 4628, 16461, -1000, -1000, 1981,
	36973, -1000, -1000, -1000, -1000, -1000, -1000, 2972, 2727, 4474,
	-1000, -1000, -1000, 263, 87734, 62028, 2652, 2660, -1000, 242,
	-1000, 1408, -1000, -1000, 111902, 112876, 4195, 3838, 62028, 87734,
	-1000, -1000, -1000, 2971, -1000, -1000, -1000, -1000, -1000, 2961,
	-1000, -1000, -1000, -1000, -1000, 471, -1000, 471, 471, -1000,
	4193, 4190, 3029, 87734, 62028, -1000, -1000, -1000, -1000, -1000,
	-1000, 87734, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1957, 4189, 2188, 4188, 2181, 4187, -1000, 4186, 2162, 4185,
	2159, 4183, 2574, 2572, 2569, -1000, 4180, 4179, 4787, 4571,
	4564, -1000, 4627, 4564, 235, -1000, -1000, 3159, 3158, -1000,
	3741, -1000, 66574, -1000, -1000, -1000, 112876, -1000, -1000, -1000,
	87734, 87734, -1000, -1000, 112876, -1000, -1000, 3929, 3928, 1546,
	87734, 62028, 62028, 62028, -1000, -1000, -1000, 87734, -1000, -1000,
	1393, 1390, 4770, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 781, -1000, -1000, 1443, -1000, -1000, 1443, 230, -1000,
	-1000, 435, 112876, 4564, 3853, 4564, 3846, 87734, -1000, 224,
	-1000, -1000, 1147, 87734, 60008, -1000, 2598, -1000, 2086, 77129,
	-1000, 419, -1000, -1000, 776, -1000, 466, -1000, -1000, 62028,
	-1000, 87734, 129, 68089, 325, -1000, 87734, 87734, 2155, 2149,
	2146, 2145, 2138, 227, -1000, 1995, 62028, -1000, -1000, 164,
	74099, -1000, 62028, -1000, -1000, 1714, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2999, 2994, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 87734, 87734, 4374, 87734, 4370,
	-1000, -1000, 87734, 4477, 112876, 4369, 4365, 4363, 4360, 4357,
	4354, 4353, 1086, 4349, 4345, -1000, 36973, -1000, 774, 772,
	36973, 767, 16461, 16461, 1388, 16461, -1000, -1000, 4110, -1000,
	1847, -1000, -1000, 33888, 320, -1000, -1000, 1450, -1000, 1132,
	-1000, 3759, 4018, 36973, 169, 87734, 87734, 4075, 4075, 4075,
	4075, 87734, -1000, 36973, 36973, 640, 567, 36973, 42113, 42113,
	-1000, 36973, 514, -1000, -1000, -1000, -1000, 4122, -1000, -1000,
	2493, 3376, 36973, -1000, -1000, 1758, 1755, -1000, -1000, -1000,
	-1000, 2224, 2158, 216, -1000, 30802, 756, 33374, 319, -1000,
	525, 14823, -1000, -1000, 1058, -1000, -1000, -1000, 755, 4787,
	3007, -1000, 36973, 14700, -1000, 1504, -1000, -1000, 109449, 36973,
	3376, 3921, 3919, 36973, 36973, 3342, 4052, -1000, -1000, 3230,
	14592, -1000, -1000, -1000, -1000, 112876, -1000, 36973, -1000, 2563,
	-1000, -1000, 36973, -1000, 112876, 42113, 42113, 42113, 42113, 42113,
	42113, 42113, 42113, 42113, 42113, 42113, 42113, 42113, 3264, 42113,
	1143, 506, 506, 506, -1000, -1000, 32860, 36973, 36973, 112876,
	753, 752, 750, -1000, 36973, 222, 36973, -1000, -1000, -1000,
	-1000, 214, -1000, 36973, 27180, 7444, 739, 44675, 213, 1717,
	-1000, 3376, 36973, -1000, 1453, 3695, 36973, 3918, 3917, 3695,
	-1000, 737, -1000, 735, 36973, 36973, 36973, 14366, 4018, -1000,
	1714, -1000, -1000, 31831, 1098, 1714, 1817, 87734, 525, 3697,
	-1000, 16461, 1401, 87734, -1000, 16461, 3556, 45685, 3894, 3893,
	45685, 3922, 3881, 3881, 3881, -1000, 1865, -1000, 87734, 1142,
	-1000, 78139, 79654, 78139, 78139, 62533, 734, 3961, -1000, -1000,
	66069, 1139, -1000, -1000, -1000, 3536, 1138, 44165, 36973, 525,
	36973, 1936, -1000, -1000, -1000, 3845, 2738, 70092, -1000, 2436,
	70597, 1047, 3897, 1042, 1592, -1000, 1000, 4732, -1000, 1053,
	1714, -1000, 212, 2767, 3837, 87734, 4643, 1136, -1000, -1000,
	-1000, 3166, 36973, -1000, -1000, 318, -1000, 312, 1788, -1000,
	109954, 36973, 36973, -1000, 87734, 2212, 87734, 3934, -1000, -1000,
	4050, 109954, 109954, -1000, 4788, 27691, 4178, -1000, -1000, -1000,
	-1000, 1135, 87734, 4546, 1134, 88239, 62028, 4707, -1000, 87734,
	-1000, -1000, 87734, 3252, -1000, 4568, 1599, 1133, 42113, 87734,
	3304, -1000, 2877, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1132, 4784, 4783, 112876, -1000, 87734, 4532, 733, 301,
	-1000, -1000, 87734, -1000, -1000, -1000, -1000, -1000, 1129, -1000,
	-1000, 493, -1000, -1000, -1000, 2738, 1047, 910, 3343, 1716,
	1517, 60008, -1000, 263, 263, 62028, 62028, -1000, -1000, 4787,
	4787, 953, 4787, 263, 4549, 87734, 4546, -1000, 2505, 87734,
	-1000, 4177, 3867, -1000, 87734, 45685, 47200, 14165, 3915, -1000,
	-1000, 4085, 79149, 4085, -1000, 1128, -1000, 471, 3367, 4787,
	87734, 87734, -1000, -1000, -1000, -1000, 27180, 27691, 27180, -1000,
	3799, -1000, -1000, -1000, 87734, 4626, 3097, -1000, 78644, -1000,
	3837, 14008, 87734, 2860, 87734, 87734, -1000, 87734, 46190, -1000,
	-1000, 3085, 431, 1042, 2863, 2571, 1783, -1000, -1000, 1936,
	1891, 2860, 87734, -1000, 87734, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2084, 87734, -1000, -1000, 28746, -1000, -1000, -1000,
	-1000, -1000, 87734, 87734, 87734, 87734, 1890, 4046, 87734, 87734,
	1889, 4045, 87734, 87734, 87734, 87734, 87734, 87734, -1000, 4175,
	-1000, 2954, 293, 1944, 1586, 2725, -1000, 4174, -1000, 293,
	1915, 1161, 87734, -1000, 62028, -1000, -1000, -1000, 1782, 592,
	87734, -1000, 87734, -1000, 13818, 2860, 87734, -1000, 2726, -1000,
	-1000, 4173, 2130, 4172, 4171, 2348, 3096, 2129, 4170, 27180,
	-1000, 28227, 732, 723, 721, 87734, 4558, 1126, 263, 2314,
	87734, 87734, -1000, -1000, -1000, 87734, 87734, 3914, -1000, -1000,
	1532, 1015, 87734, 87734, 87734, 87734, 62028, 87734, 87734, 87734,
	87734, 62028, 3474, 3567, 3552, 87734, 4787, 3147, 4624, -1000,
	87734, -1000, -1000, 1770, 3071, -1000, 4731, 3843, 3842, 2634,
	2073, 2073, 3466, 129, 263, 263, -1000, 4564, -1000, -1000,
	987, -1000, -1000, -1000, -1000, -1000, 719, -1000, 87734, -1000,
	87734, 4564, -1000, 3271, 3271, -1000, 2078, -1000, 3068, 87734,
	211, 4787, 2857, 59503, 2867, -1000, 129, -1000, 1086, 482,
	-1000, 87734, 87734, 87734, 87734, 87734, -1000, 27180, -1000, -1000,
	-1000, -1000, -1000, 4564, 4120, 206, -1000, -1000, -1000, 4342,
	4335, 4477, 4334, 4477, 4332, -1000, 716, 4485, 4485, 4485,
	4485, 4485, 4485, 4485, 4331, 4485, 4485, 1504, -1000, -1000,
	-1000, -1000, -1000, 1834, -1000, 210, -1000, 36973, -1000, 51281,
	-1000, -1000, 4014, 4044, 16461, -1000, -1000, 87734, 87734, 87734,
	87734, -1000, 434, 942, 36973, 36973, 464, 2131, 1056, 942,
	36973, 36973, -1000, -1000, 546, 2703, 2697, 36973, 36973, -1000,
	13745, -1000, 209, -1000, 36973, -1000, -1000, 4787, -1000, -1000,
	16461, 36973, 714, 2438, -1000, 13629, 3695, 4473, 4454, -1000,
	-1000, 3695, 36973, 3290, -1000, 713, 16461, 710, 13279, -1000,
	196, 196, 412, 412, 412, -1000, 575, 575, 575, 575,
	575, 575, 506, 4119, 3240, -1000, 2335, 13001, 12899, 12820,
	709, -1000, -1000, -1000, 222, 12291, -1000, 39543, -1000, -1000,
	705, 1656, 1647, -1000, 4039, 43655, 3268, -1000, 36973, 288,
	39029, 3695, -1000, -1000, 704, -1000, 4452, 4449, 697, -1000,
	-1000, 12193, 12193, 12193, 114824, 4014, 694, 283, 3648, 46190,
	3606, -1000, -1000, 3672, -1000, -1000, 36973, -1000, 87734, 3961,
	45685, 45685, 4002, 3887, 45685, -1000, -1000, -1000, -1000, -1000,
	68089, 1125, 87734, -1000, -1000, -1000, -1000, 78139, 1122, 87734,
	87734, -1000, 54444, 3518, 1113, 277, 12587, 1097, 1936, 3284,
	-1000, 2436, 1109, -1000, 2830, 3823, -1000, 4043, 199, -1000,
	-1000, -1000, 4561, 3547, 1846, 3100, -1000, -1000, 70092, 87734,
	3554, 1752, 4549, 4547, 4546, -1000, 1107, 3913, 2474, 115311,
	-1000, 16461, 4787, 3464, 112876, -1000, 16461, 16461, 2230, -1000,
	125, 87734, 109954, -1000, 198, -1000, 1397, -1000, 87734, 4090,
	2732, 4730, 87734, 977, 4570, -1000, 1951, -1000, -1000, -1000,
	4551, 4551, 36973, 2335, 968, 4729, -1000, 4525, -1000, -1000,
	3841, -1000, -1000, 87734, -1000, 4787, -1000, 2151, 27180, 458,
	2077, 3547, 70092, 3550, 87734, 2900, -1000, 2076, 263, 263,
	-1000, -1000, -1000, -1000, -1000, 4726, 1846, 2860, 68089, -1000,
	-1000, 3224, -1000, 4496, 3838, 62028, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 169, -1000, -1000, 47200, -1000, -1000, -1000,
	-1000, 36973, -1000, 1837, 2891, 4111, -1000, -1000, -1000, -1000,
	1141, 4116, -1000, 87734, 1517, -1000, 77634, -1000, -1000, -1000,
	197, -1000, 1989, -1000, 2873, 2750, -1000, 185, 2860, 184,
	183, -1000, 4559, 916, 4528, 36973, 4439, 4700, 4697, -1000,
	-1000, 3304, 4438, 4725, 1015, -1000, -1000, -1000, -1000, 3304,
	-1000, 6367, 112876, 1086, 1015, 4564, 4564, -1000, -1000, -1000,
	-1000, 4167, 4159, -1000, 87734, 62028, -1000, -1000, 87734, 62028,
	-1000, -1000, -1000, -1000, 4156, -1000, 87734, 87734, 87734, 87734,
	87734, 1884, 4042, 87734, 87734, 87734, 87734, -1000, -1000, -1000,
	1769, -1000, 4564, -1000, -1000, -1000, 87734, 87734, 62028, 87734,
	85, -1000, 4770, 4770, 112876, 276, -1000, 4770, 4770, 87734,
	62028, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1486, 36973, 4155, -1000, -1000, -1000,
	-1000, 2952, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 87734, 87734, 87734, 87734, 4619, 4564,
	-1000, 4787, 4787, -1000, 4564, 112876, 112876, 87734, 87734, 87734,
	4154, -1000, -1000, -1000, -1000, -1000, -1000, 4109, 73089, -1000,
	-1000, 4564, 4564, 4564, -1000, -1000, 182, 87734, -1000, 3995,
	-1000, -1000, -1000, -1000, 1541, -1000, 129, 129, 129, 129,
	129, -1000, -1000, 59503, 4564, 4477, 4477, -1000, 4477, -1000,
	4477, 4326, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 4485, -1000, -1000, 692, -1000, -1000, 12058, 690, 1645,
	36973, 4537, -1000, -1000, -1000, -1000, 942, 942, 36973, 36973,
	36973, 942, 546, -1000, -1000, 942, 942, -1000, -1000, 12012,
	-1000, 16461, -1000, 1504, 4041, -1000, 688, -1000, -1000, 686,
	275, 87734, -1000, -1000, 36973, 42113, 4108, -1000, 36973, 36973,
	36973, -1000, -1000, 181, 180, 1104, -1000, -1000, -1000, -1000,
	3268, 4039, -1000, -1000, 11967, 685, 1963, 16461, 3259, 680,
	-1000, -1000, -1000, -1000, 3695, 36973, 3662, 3695, 2547, 1645,
	3765, 3677, 179, -1000, 87734, 3254, 16461, -1000, -1000, 4002,
	-1000, 1101, 36973, 45685, -1000, 1099, 87734, 177, -1000, 87734,
	167, 166, 112876, 162, -1000, 4723, 3544, 41599, 36973, 3743,
	-1000, 4602, 4602, 3742, -1000, 3793, 27180, 1097, 4787, 3823,
	87734, 3210, 3210, 3365, 87734, -1000, 70597, 2251, 1521, 2436,
	-1000, 87734, 2769, 673, 1047, 87734, 4549, 87734, -1000, -1000,
	1943, 4722, 46190, 77129, -1000, 160, -1000, 113363, -1000, 8248,
	-1000, 1759, -1000, 3461, 1748, 4107, 159, -1000, 4083, 667,
	1991, 1975, 1845, 87734, 1714, 156, 70092, 4618, 4707, -1000,
	4432, 3830, 3830, 11659, 2567, 909, -1000, 87734, -1000, -1000,
	152, -1000, 87734, 2064, 666, 87734, 1517, 3061, 87734, 1714,
	-1000, 1094, 2505, 87734, 1092, 4558, 263, 468, 11589, 68089,
	4719, 4719, 87734, 27691, 1087, 1083, 1071, -1000, -1000, -1000,
	-1000, 2860, 2785, -1000, -1000, -1000, -1000, -1000, 2785, 2307,
	2785, 46190, 51810, -1000, 87734, 87734, -1000, 11045, -1000, 4608,
	4607, -1000, -1000, 1068, -1000, 4721, 4532, -1000, -1000, -1000,
	-1000, 87734, 87734, 2482, 393, 2482, 392, 87734, -1000, -1000,
	-1000, 4153, -1000, 87734, 62028, -1000, -1000, 4152, -1000, -1000,
	-1000, 2860, -1000, -1000, -1000, -1000, 2348, 51281, 50776, -1000,
	3096, 1067, 1066, -1000, -1000, 1065, 10786, 87734, 87734, 420,
	417, 1916, 129, 3459, -1000, -1000, -1000, -1000, 4532, 663,
	-1000, -1000, -1000, 59503, 59503, 3911, -1000, -1000, -1000, -1000,
	-1000, 87734, -1000, 164, -1000, -1000, -1000, -1000, -1000, 4477,
	-1000, -1000, -1000, -1000, -1000, 87734, 16461, 38001, 942, 942,
	942, -1000, 2659, 36973, -1000, -1000, -1000, 9957, 1878, 42113,
	16461, 16461, 16461, -1000, 36973, -1000, 36973, -1000, -1000, -1000,
	1767, -1000, -1000, 3351, 257, -1000, 4720, 662, 3910, 36973,
	-1000, -1000, -1000, -1000, -1000, -1000, 3362, 3662, 661, -1000,
	2770, -1000, 3714, 3779, 3729, -1000, 4083, 46190, -1000, 1714,
	-1000, 87734, 16461, -1000, 36973, 149, -1000, 148, -1000, -1000,
	1432, 54444, -1000, 1057, 87734, 146, -1000, 857, 42113, 8191,
	-1000, -1000, 3663, 36973, 3658, -1000, 3675, -1000, -1000, -1000,
	4717, 4717, -1000, -1000, 4717, 4717, 3415, 4787, 142, -1000,
	24922, 4083, -1000, 3365, 135, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3897, 1055, -1000,
	-1000, 3823, -1000, -1000, 3530, 3523, 2738, 2436, 1047, -1000,
	1053, 1539, 1476, 1467, 1714, 132, 3837, 115311, 4643, -1000,
	-1000, 406, -1000, -1000, 112876, 4222, 3013, 1748, -1000, 2484,
	-1000, -1000, -1000, 87734, -1000, 3645, -1000, 4555, 4554, -1000,
	-1000, 87734, 1728, -1000, 4547, 4546, 87734, -1000, 2757, -1000,
	2500, 3901, 2346, 1014, 36973, 2927, -1000, 27180, 1517, 87734,
	2738, 1047, -1000, 3341, 1517, 4549, 634, 68089, -1000, 4804,
	-1000, 45685, -1000, 4719, -1000, 2912, -1000, -1000, -1000, 68594,
	36973, 36973, 2251, 4551, 1045, 4551, 87734, 4551, -1000, -1000,
	1043, 3723, 1042, -1000, 4528, -1000, -1000, 36973, 2797, 3833,
	-1000, -1000, -1000, 1881, -1000, 1876, -1000, 87734, 2482, 389,
	87734, -1000, 1037, 3451, -1000, 112876, -1000, 112876, 112876, 36973,
	-1000, -1000, -1000, 87734, -1000, -1000, 87734, 87734, 87734, 87734,
	4564, -1000, 466, 433, 2073, 1517, 4564, -1000, 240, -1000,
	4718, 223, -1000, 16461, -1000, -1000, -1000, -1000, 29772, 1035,
	1033, 682, 624, 38515, 38515, 38515, 222, 36973, 1878, 131,
	128, -1000, 3247, 3306, 3382, 3372, 36973, 27180, -1000, 3371,
	16461, -1000, -1000, 623, 3908, -1000, -1000, -1000, 87734, 3769,
	3766, 65564, -1000, -1000, -1000, 127, 124, -1000, -1000, -1000,
	-1000, 87734, 116, -1000, 111415, 41599, 218, 27180, 2335, 3522,
	87734, 3642, 16461, 3682, 4025, 4787, 4787, 4787, 4787, 57483,
	4431, 56978, -1000, -1000, 27180, -1000, -1000, -1000, -1000, -1000,
	58998, -1000, 3897, -1000, 1846, 46695, 2251, 3365, -1000, -1000,
	2436, 3823, 3547, 4549, -1000, 1537, 1534, 4547, 2777, 1030,
	-1000, 2474, -1000, -1000, 2997, 1025, 2007, -1000, -1000, 4717,
	-1000, -1000, 2913, -1000, 2849, 2889, 2882, -1000, -1000, -1000,
	4716, 884, 1867, -1000, 2747, -1000, 3906, 3905, 3713, -1000,
	-1000, -1000, -1000, 2767, 9578, 4715, 87734, -1000, -1000, 1517,
	2063, 3547, 87734, -1000, -1000, -1000, 1020, 114, -1000, 169,
	-1000, -1000, -1000, 106, -1000, 4770, 99, 98, 3830, 87734,
	3830, 968, 3830, 51281, 1450, 3723, -1000, 9501, 1014, -1000,
	36973, 87734, 87734, -1000, -1000, 1854, -1000, 2342, 1917, 2342,
	95, 83, 79, 9318, 155, 155, 1916, -1000, 129, -1000,
	-1000, -1000, 4102, -1000, -1000, 87734, 1010, 38001, -1000, 36973,
	36973, 1008, -1000, 3002, -1000, 43141, 2516, 2239, 6743, 3002,
	3002, 16461, -1000, -1000, -1000, 3662, 3317, 3309, -1000, 3340,
	-1000, 3338, 3381, 3377, -1000, -1000, -1000, -1000, 3439, 387,
	4024, 4022, 416, 4714, 2281, 66, -1000, 87734, 3624, 3535,
	-1000, 43655, -1000, 3543, -1000, -1000, -1000, 3628, 3727, -1000,
	-1000, 3627, 1106, 3635, -1000, -1000, -1000, -1000, 125, -1000,
	56473, 125, -1000, -1000, 64, -1000, -1000, 1846, -1000, 63,
	-1000, 916, 4528, 36973, 3897, 3823, 3365, 2436, -1000, -1000,
	-1000, -1000, 4568, 1007, 46190, -1000, 2505, 36973, -1000, -1000,
	-1000, 87734, 3012, 1447, -1000, -1000, 68089, 68089, 1714, 70092,
	87734, -1000, -1000, 3704, -1000, 3709, 2861, 2861, 2009, 1926,
	2348, -1000, -1000, 87734, 2041, 1517, 618, -1000, 4801, -1000,
	68594, -1000, -1000, 4149, -1000, 52, -1000, 2567, 4083, 595,
	-1000, 1450, -1000, -1000, 16461, 2482, 2482, 87734, -1000, -1000,
	-1000, 4021, -1000, 68089, -1000, -1000, -1000, 87734, 59503, -1000,
	-1000, -1000, 31, 30, 38001, -1000, 2216, 4601, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 568, 3904, 3902, -1000, -1000,
	3326, -1000, 3307, -1000, 3662, -1000, 87734, 87734, 87734, -1000,
	-1000, 87734, -1000, 1003, -1000, -1000, 3624, -1000, 42113, 42113,
	4423, -1000, 42113, -1000, 3518, 1001, -1000, 65564, -1000, -1000,
	3672, 87734, 3798, 999, -1000, -1000, 125, -1000, -1000, 58998,
	-1000, -1000, 46695, 87734, 87734, 9049, 1846, 3365, 3897, 3823,
	4546, 46190, 29, 68089, 8901, -1000, -1000, 2237, -1000, -1000,
	-1000, 1616, -1000, -1000, -1000, -1000, -1000, 3717, 104, 102,
	4547, -1000, -1000, 3183, -1000, -1000, 4434, -1000, -1000, -1000,
	85, 1517, 87734, -1000, -1000, -1000, -1000, 998, 2860, -1000,
	2860, 3901, -1000, -1000, -1000, -1000, -1000, 2482, 87734, -1000,
	-1000, 433, -1000, -1000, 26, 2229, -1000, -1000, 1618, 37487,
	-1000, 3308, 3296, -1000, -1000, 3900, 3840, 386, 350, -1000,
	36973, -1000, 2335, 2335, -1000, 2335, 3542, 87229, 27, 3244,
	7, -1000, 36973, -1000, -1000, -1000, -1000, 4528, -1000, 3897,
	1846, 3365, 1846, 3, -1000, 2777, 981, -1000, 4222, 533,
	498, 290, -1000, -1000, 4146, 4099, -1000, -1000, 968, 968,
	-1000, 1517, 36973, -1000, 2860, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3294, 3292, 3346, 55968, 87734, 87734, 87734, 7635,
	87734, -3, -1000, 110928, 3526, 3794, 3707, -8, 87734, 1846,
	-1000, 3897, 4083, -1000, 46190, 4568, 26669, 2990, -1000, 1616,
	1969, 1953, -1000, -1000, -1000, -10, 2860, -1000, -1000, -1000,
	4524, 960, -1000, -1000, -1000, -1000, -1000, -18, 3662, 87229,
	3534, 1956, 4800, -1000, -1000, -1000, 3672, -1000, -1000, -1000,
	1846, -1000, -1000, 4546, -28, -1000, -1000, -1000, -1000, -1000,
	2505, -1000, 4545, 4541, -1000, 55968, 36973, -1000, 476, -1000,
	-1000, 3351, 3524, 3524, 4797, 3640, 3243, -1000, 1846, -1000,
	26669, 68089, 2876, 2875, 3822, -40, -1000, 3306, 3351, 3662,
	-1000, 961, 87734, 3794, 4083, -1000, 951, 68089, 68089, 87734,
	432, 3662, 3306, -1000, 87229, 3538, -1000, -1000, 26669, -1000,
	-1000, -1000, 4787, -1000, 3662, -32, 932, -48, -1000, -1000,
	87229, -1000, -65, -1000,
}

var yyPgo = [...]int16{
	0, 5326, 5325, 3373, 141, 0, 25, 9489, 5324, 367,
	297, 375, 5322, 537, 107, 3582, 151, 100, 282, 388,
	5319, 5317, 5316, 5315, 50, 5312, 382, 5145, 10658, 10298,
	134, 5309, 306, 3226, 5308, 378, 303, 251, 5305, 211,
	5304, 5303, 182, 216, 5302, 280, 5298, 430, 5297, 29,
	5296, 5294, 287, 163, 392, 425, 416, 418, 5293, 344,
	391, 343, 346, 345, 5292, 12847, 2748, 3241, 11, 5289,
	5284, 1745, 5283, 5276, 5275, 335, 5274, 290, 5272, 5271,
	5270, 5269, 16, 387, 5269, 5268, 337, 5267, 5266, 5265,
	118, 5261, 5260, 5259, 5258, 283, 329, 338, 5257, 278,
	356, 272, 191, 12763, 14889, 5255, 381, 156, 5929, 197,
	13842, 5254, 18557, 5252, 5251, 18378, 17749, 17580, 5250, 16665,
	16311, 162, 247, 228, 357, 349, 403, 292, 419, 342,
	389, 31, 758, 384, 5248, 5246, 5244, 147, 5243, 5242,
	69, 67, 333, 5240, 5239, 86, 35, 60, 420, 390,
	5238, 5235, 422, 5234, 5233, 14588, 80, 215, 5232, 76,
	5231, 336, 339, 79, 56, 5230, 340, 279, 268, 53,
	277, 198, 64, 194, 341, 5226, 5225, 5224, 5223, 136,
	266, 41, 437, 449, 426, 105, 98, 81, 131, 5222,
	186, 184, 5221, 5219, 5218, 5217, 5216, 5215, 5212, 5211,
	5210, 5209, 5208, 5207, 5205, 5204, 5201, 5200, 5197, 5195,
	24, 5194, 5193, 5192, 5191, 43, 40, 5190, 5189, 257,
	270, 274, 325, 5188, 334, 152, 10, 55, 154, 161,
	5186, 5184, 5182, 5181, 36, 111, 18, 5180, 5179, 5178,
	383, 5177, 423, 5176, 5175, 243, 313, 5173, 5168, 3448,
	554, 3411, 5167, 110, 314, 5164, 5163, 5162, 160, 5161,
	5160, 5159, 89, 5159, 68, 78, 5158, 45, 172, 359,
	295, 402, 54, 299, 435, 259, 5155, 429, 386, 385,
	101, 157, 20, 222, 210, 256, 5154, 260, 5153, 5152,
	5152, 417, 315, 261, 249, 155, 51, 21, 434, 5150,
	415, 5149, 5148, 5144, 5142, 321, 38, 90, 5138, 232,
	5134, 117, 5133, 5132, 119, 320, 23, 66, 5130, 46,
	122, 44, 158, 5129, 85, 318, 2, 17, 12, 5128,
	364, 5126, 84, 5124, 1215, 271, 5118, 332, 273, 5117,
	286, 92, 4, 6, 5116, 7, 8, 5, 14, 275,
	5113, 58, 5112, 103, 5111, 255, 171, 127, 5110, 130,
	5109, 87, 49, 124, 5108, 5107, 5106, 144, 27, 5105,
	113, 5104, 190, 302, 5102, 5099, 5098, 22, 57, 128,
	77, 75, 59, 32, 116, 63, 5097, 5096, 37, 94,
	5094, 212, 42, 9, 71, 301, 109, 5093, 39, 28,
	19, 330, 207, 376, 377, 5092, 298, 394, 395, 445,
	3554, 150, 379, 48, 220, 5091, 217, 5090, 30, 5089,
	112, 72, 183, 73, 74, 5087, 62, 213, 5086, 114,
	628, 5085, 310, 2843, 19997, 5082, 135, 304, 440, 96,
	5081, 5080, 224, 193, 5078, 5076, 5075, 65, 26, 13,
	373, 123, 428, 400, 5074, 354, 5073, 5072, 5071, 179,
	177, 133, 5070, 142, 5069, 5068, 5067, 5065, 397, 5064,
	5063, 5062, 5059, 5058, 5055, 5053, 5048, 5046, 5045, 5043,
	5042, 5041, 5038, 5035, 5034, 5033, 5032, 5030, 444, 442,
	5029, 360, 5027, 447, 348, 5026, 399, 5025, 169, 5023,
	396, 347, 5022, 5021, 5020, 352, 446, 409, 410, 5019,
	174, 398, 47, 5017, 93, 421, 7291, 200, 120, 88,
	5016, 5015, 199, 369, 5014, 189, 5013, 441, 288, 5012,
	5011, 424, 175, 167, 5010, 5008, 5007, 5006, 5005, 5004,
	5003, 5001, 5000, 4999, 4998, 4997, 4990, 4987, 4986, 4985,
	4980, 4979, 4978, 4977, 4975, 4974, 4972, 4969, 4962, 4961,
	4960, 4958, 4956, 4954, 4953, 4952, 4951, 4949, 4947, 4941,
	4938, 4937, 4935, 4934, 4933, 4932, 4930, 4929, 4928, 4926,
	4925, 4923, 4921, 4917, 4915, 4914, 4913, 4911, 4910, 4908,
	4906, 4905, 4904, 4903, 4901, 4900, 238, 230, 4899, 4898,
	4897, 380, 366, 412, 4895, 203, 296, 408, 209, 4894,
	307, 427, 225, 229, 138, 4893, 4892, 129, 4890, 4888,
	4887, 414, 4886, 439, 4885, 4884, 4882, 4879, 188, 125,
	4878, 102, 159, 407, 61, 4877, 4876, 223, 305, 126,
	121, 4875, 4874, 4872, 4869, 4868, 195, 4866, 4865, 226,
	108, 4863, 294, 227, 433, 3111, 374, 436, 4862, 405,
	4861, 4452, 413, 4860, 253, 239, 104, 362, 4859, 115,
	4857, 4856, 312, 411, 221, 358, 4854, 4852, 83, 4850,
	4849, 231, 311, 4848, 4847, 4846, 4845, 4842, 4841, 1,
	97, 34, 3, 4840, 4838, 33, 4837, 4833, 289, 4831,
	4830, 393, 91, 95, 4829, 4827, 4826, 15500, 371, 4825,
	4823, 254, 15, 4822, 4822, 3494, 406, 4814, 70,
}

var yyR1 = [...]int16{
	0, 1, 2, 2, 3, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 19, 19, 399,
	399, 433, 433, 433, 33, 33, 34, 34, 35, 35,
	36, 36, 49, 49, 49, 5, 5, 5, 6, 6,
	6, 6, 6, 8, 8, 7, 13, 13, 14, 14,
	62, 434, 434, 32, 32, 16, 16, 18, 18, 708,
	708, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	15, 15, 17, 17, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 704, 704, 704, 704, 704, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 101,
	103, 102, 102, 102, 110, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 125,
	125, 69, 69, 96, 96, 100, 100, 99, 99, 99,
	99, 97, 97, 70, 70, 70, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 83, 83, 85, 85,
	85, 85, 85, 86, 86, 86, 87, 12, 12, 12,
	12, 12, 12, 12, 12, 88, 88, 89, 81, 90,
	90, 221, 221, 91, 91, 91, 92, 92, 92, 93,
	93, 94, 94, 94, 94, 306, 306, 306, 661, 661,
	132, 132, 132, 132, 132, 132, 132, 82, 82, 95,
	95, 95, 72, 73, 73, 76, 76, 75, 74, 74,
	77, 77, 77, 80, 80, 130, 130, 130, 78, 78,
	79, 165, 165, 165, 158, 158, 158, 158, 158, 158,
	167, 167, 167, 167, 166, 166, 166, 166, 166, 168,
	168, 168, 168, 168, 129, 129, 108, 108, 108, 108,
	108, 108, 126, 126, 126, 109, 109, 109, 109, 109,
	109, 109, 109, 104, 104, 104, 106, 107, 21, 122,
	122, 123, 123, 111, 111, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 118, 118, 114, 114,
	705, 705, 706, 706, 105, 105, 105, 105, 105, 105,
	115, 116, 119, 120, 117, 117, 117, 117, 707, 127,
	127, 127, 128, 128, 113, 113, 155, 155, 157, 157,
	159, 159, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 156, 156, 131, 131, 136, 136,
	133, 133, 162, 162, 161, 161, 179, 179, 182, 182,
	183, 183, 181, 181, 181, 181, 181, 181, 181, 181,
	148, 148, 149, 149, 150, 150, 152, 153, 153, 153,
	153, 151, 151, 154, 154, 154, 184, 184, 184, 184,
	184, 184, 184, 276, 276, 275, 275, 278, 278, 278,
	278, 279, 279, 280, 280, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 436, 436, 437,
	437, 437, 438, 438, 438, 292, 292, 292, 292, 292,
	292, 293, 293, 293, 293, 294, 294, 295, 295, 296,
	296, 296, 297, 297, 298, 298, 300, 301, 301, 301,
	302, 302, 302, 303, 303, 303, 304, 304, 282, 282,
	224, 224, 224, 245, 285, 285, 284, 284, 284, 284,
	287, 287, 287, 287, 287, 286, 286, 288, 288, 289,
	289, 290, 290, 291, 291, 305, 305, 314, 314, 310,
	310, 311, 312, 312, 313, 313, 666, 308, 308, 307,
	307, 309, 320, 320, 322, 322, 321, 321, 321, 321,
	323, 323, 324, 324, 315, 315, 316, 316, 317, 317,
	317, 318, 318, 319, 319, 319, 319, 319, 325, 330,
	329, 329, 341, 341, 331, 331, 332, 333, 333, 336,
	336, 335, 335, 337, 337, 337, 338, 338, 338, 339,
	339, 334, 334, 340, 340, 343, 343, 344, 344, 344,
	344, 344, 344, 344, 344, 345, 345, 345, 345, 342,
	342, 346, 346, 346, 346, 346, 346, 346, 346, 346,
	347, 347, 347, 347, 347, 348, 348, 349, 349, 350,
	350, 326, 326, 327, 327, 327, 327, 327, 327, 328,
	328, 185, 435, 435, 214, 214, 214, 214, 214, 236,
	236, 215, 215, 219, 186, 216, 216, 222, 222, 220,
	217, 217, 187, 299, 299, 188, 218, 218, 189, 189,
	239, 239, 240, 240, 246, 246, 246, 255, 255, 256,
	256, 258, 258, 259, 259, 257, 257, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	260, 260, 265, 266, 266, 266, 266, 266, 266, 261,
	261, 267, 272, 272, 272, 272, 268, 268, 268, 268,
	42, 42, 410, 410, 410, 410, 410, 410, 410, 410,
	409, 409, 409, 408, 408, 408, 408, 408, 271, 271,
	623, 623, 270, 270, 709, 709, 650, 650, 241, 241,
	242, 242, 243, 243, 244, 244, 228, 228, 228, 228,
	228, 237, 237, 238, 238, 229, 229, 231, 232, 233,
	233, 233, 233, 233, 226, 223, 223, 223, 230, 230,
	230, 263, 263, 264, 264, 234, 234, 234, 235, 235,
	227, 227, 163, 163, 163, 164, 164, 164, 225, 225,
	190, 190, 190, 190, 190, 190, 412, 412, 412, 412,
	412, 412, 412, 412, 351, 351, 352, 352, 355, 355,
	355, 358, 366, 366, 366, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 414, 414, 415, 415, 416,
	416, 417, 417, 353, 353, 354, 354, 359, 359, 360,
	360, 361, 361, 361, 361, 362, 365, 365, 418, 418,
	419, 419, 420, 10, 41, 356, 370, 370, 371, 371,
	371, 371, 374, 374, 374, 374, 377, 377, 377, 422,
	422, 425, 425, 427, 427, 427, 427, 423, 423, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 710, 710, 37, 37, 37,
	421, 421, 424, 424, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 357, 357, 373, 373, 373, 373, 373,
	373, 373, 375, 375, 364, 364, 363, 363, 379, 379,
	378, 378, 378, 378, 383, 383, 383, 383, 383, 380,
	381, 382, 382, 382, 382, 382, 384, 384, 385, 385,
	386, 387, 387, 388, 388, 388, 413, 413, 392, 392,
	392, 392, 393, 393, 394, 394, 395, 191, 191, 376,
	376, 396, 396, 398, 398, 397, 397, 400, 400, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	401, 401, 24, 24, 402, 402, 11, 516, 516, 516,
	516, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 404, 404, 404, 405, 406, 406, 711, 711,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 540, 541, 541, 542, 542, 543, 544, 544,
	462, 462, 462, 655, 655, 655, 658, 658, 658, 658,
	657, 657, 659, 659, 463, 464, 464, 464, 464, 493,
	493, 496, 497, 497, 497, 499, 499, 499, 468, 468,
	468, 468, 468, 468, 468, 465, 465, 469, 469, 494,
	494, 495, 495, 500, 498, 498, 466, 466, 466, 466,
	466, 467, 467, 198, 198, 198, 198, 198, 501, 501,
	199, 199, 199, 502, 502, 503, 503, 504, 504, 200,
	201, 201, 201, 201, 201, 407, 407, 407, 407, 407,
	407, 407, 407, 407, 407, 407, 407, 407, 47, 47,
	48, 48, 451, 98, 98, 98, 98, 450, 84, 84,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 368, 368, 369, 369, 369,
	369, 369, 369, 389, 390, 390, 391, 391, 391, 391,
	457, 457, 457, 457, 662, 662, 663, 663, 664, 664,
	664, 665, 665, 665, 665, 665, 667, 667, 667, 667,
	667, 668, 121, 121, 121, 669, 669, 670, 670, 672,
	672, 672, 672, 672, 677, 677, 671, 671, 678, 678,
	678, 461, 696, 696, 679, 679, 660, 660, 459, 459,
	680, 680, 680, 682, 682, 681, 681, 681, 681, 681,
	687, 687, 688, 688, 690, 685, 685, 686, 686, 693,
	683, 683, 713, 713, 684, 684, 691, 691, 712, 712,
	689, 689, 689, 692, 692, 692, 692, 694, 694, 460,
	460, 460, 460, 262, 262, 695, 695, 695, 695, 534,
	534, 534, 534, 535, 536, 536, 536, 536, 605, 605,
	608, 537, 537, 538, 539, 545, 546, 546, 546, 546,
	546, 546, 546, 547, 547, 547, 547, 547, 547, 547,
	547, 547, 547, 547, 547, 547, 547, 547, 547, 551,
	551, 596, 596, 714, 714, 552, 552, 553, 553, 597,
	597, 599, 599, 599, 599, 554, 598, 598, 600, 555,
	555, 555, 555, 555, 555, 555, 555, 555, 555, 555,
	555, 555, 576, 577, 577, 606, 606, 606, 606, 602,
	602, 601, 601, 614, 614, 578, 578, 579, 579, 579,
	610, 610, 611, 611, 612, 612, 580, 580, 580, 580,
	581, 529, 529, 530, 530, 582, 582, 583, 584, 584,
	613, 613, 645, 645, 645, 645, 646, 646, 653, 647,
	648, 648, 649, 550, 550, 550, 550, 550, 594, 594,
	595, 595, 651, 651, 652, 652, 532, 532, 533, 196,
	195, 195, 197, 444, 444, 444, 445, 445, 447, 447,
	447, 447, 447, 448, 448, 440, 440, 440, 441, 441,
	442, 439, 439, 439, 443, 443, 446, 446, 446, 446,
	656, 656, 656, 656, 656, 656, 656, 656, 656, 656,
	656, 654, 654, 654, 654, 274, 274, 277, 277, 269,
	269, 697, 697, 697, 697, 697, 697, 697, 699, 699,
	699, 273, 273, 9, 9, 9, 9, 701, 701, 505,
	505, 505, 698, 698, 698, 698, 698, 700, 700, 700,
	700, 506, 506, 411, 411, 411, 411, 411, 411, 429,
	429, 38, 38, 39, 40, 40, 43, 43, 43, 43,
	44, 44, 46, 46, 46, 46, 430, 431, 431, 432,
	432, 556, 556, 557, 618, 618, 618, 618, 615, 615,
	617, 616, 616, 558, 619, 619, 559, 559, 560, 561,
	620, 620, 624, 624, 625, 625, 625, 625, 625, 626,
	626, 627, 627, 628, 628, 629, 629, 562, 630, 630,
	563, 563, 564, 564, 632, 632, 637, 637, 637, 565,
	565, 565, 566, 566, 566, 566, 633, 633, 638, 638,
	638, 638, 638, 638, 638, 283, 283, 567, 568, 568,
	568, 568, 568, 568, 568, 568, 568, 569, 569, 569,
	631, 631, 631, 570, 641, 641, 634, 634, 639, 639,
	639, 639, 639, 621, 621, 702, 702, 702, 703, 703,
	571, 572, 572, 635, 635, 640, 640, 573, 574, 636,
	636, 636, 636, 575, 575, 622, 622, 642, 642, 643,
	643, 644, 644, 53, 53, 53, 52, 52, 169, 169,
	172, 172, 172, 172, 172, 175, 176, 177, 178, 173,
	173, 170, 171, 171, 174, 174, 137, 137, 138, 138,
	140, 142, 142, 142, 141, 143, 143, 139, 139, 144,
	144, 144, 144, 145, 145, 146, 146, 146, 146, 146,
	147, 147, 147, 147, 147, 55, 55, 55, 55, 54,
	54, 56, 56, 56, 56, 56, 56, 57, 57, 58,
	58, 59, 60, 60, 60, 61, 61, 63, 63, 64,
	64, 470, 470, 470, 470, 470, 470, 470, 470, 470,
	470, 470, 470, 471, 471, 715, 715, 715, 489, 489,
	489, 472, 478, 476, 473, 473, 474, 474, 474, 474,
	488, 488, 477, 475, 475, 475, 475, 475, 475, 507,
	507, 508, 508, 490, 490, 490, 490, 490, 490, 491,
	491, 491, 491, 491, 491, 491, 491, 491, 531, 531,
	479, 480, 480, 481, 481, 482, 482, 483, 509, 509,
	492, 492, 492, 521, 521, 521, 514, 514, 514, 514,
	514, 514, 510, 510, 510, 510, 510, 511, 511, 515,
	515, 515, 515, 515, 528, 528, 528, 528, 528, 528,
	528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
	528, 528, 528, 528, 528, 512, 512, 517, 517, 519,
	519, 513, 513, 522, 520, 520, 520, 518, 518, 50,
	50, 45, 45, 51, 51, 134, 135, 135, 458, 458,
	458, 452, 452, 673, 673, 673, 673, 673, 673, 673,
	673, 673, 673, 673, 673, 673, 673, 673, 673, 673,
	675, 675, 674, 674, 674, 676, 676, 676, 676, 676,
	716, 716, 449, 449, 449, 449, 453, 453, 548, 549,
	454, 454, 455, 455, 455, 455, 456, 456, 456, 456,
	202, 247, 247, 247, 247, 247, 247, 248, 248, 248,
	203, 203, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 249, 249,
	250, 250, 204, 204, 205, 252, 252, 180, 180, 180,
	180, 180, 206, 206, 206, 253, 253, 254, 207, 207,
	207, 207, 208, 209, 209, 210, 20, 20, 211, 212,
	22, 22, 23, 23, 23, 23, 23, 23, 23, 23,
	213, 484, 484, 484, 484, 484, 484, 484, 484, 484,
	484, 484, 484, 484, 484, 484, 484, 484, 484, 523,
	523, 485, 485, 485, 485, 485, 485, 485, 485, 485,
	485, 524, 524, 525, 525, 486, 526, 526, 527, 527,
	487, 585, 585, 585, 585, 585, 585, 585, 585, 585,
	585, 585, 585, 585, 585, 585, 585, 585, 585, 585,
	585, 585, 585, 585, 585, 585, 585, 585, 586, 586,
	586, 586, 586, 586, 586, 586, 586, 586, 586, 586,
	586, 586, 586, 586, 586, 586, 586, 586, 586, 586,
	586, 586, 587, 588, 588, 588, 588, 588, 588, 26,
	26, 589, 590, 590, 590, 590, 603, 603, 604, 604,
	607, 607, 607, 609, 609, 609, 609, 609, 609, 609,
	717, 717, 591, 592, 592, 592, 592, 592, 592, 718,
	718, 593, 25, 25, 25,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 2, 0, 3, 0, 2, 0,
	1, 0, 2, 2, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 3,
	1, 1, 2, 3, 0, 1, 3, 1, 3, 1,
	0, 3, 3, 4, 4, 4, 4, 3, 2, 1,
	1, 2, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	5, 3, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 3, 3,
	2, 2, 3, 5, 4, 6, 3, 5, 4, 6,
	4, 6, 5, 7, 3, 2, 4, 2, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 3, 4, 4, 6, 3, 3, 4, 3, 4,
	4, 5, 4, 5, 1, 1, 3, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 5, 6, 3, 4, 1, 1, 2,
	4, 1, 1, 1, 2, 2, 2, 2, 1, 1,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 6, 2, 3, 5, 1,
	1, 1, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	4, 1, 2, 1, 2, 1, 0, 2, 2, 3,
	5, 0, 2, 4, 3, 1, 5, 1, 1, 4,
	1, 4, 1, 4, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 6, 4, 4, 6, 4, 4, 4,
	4, 4, 6, 5, 5, 5, 4, 6, 4, 4,
	4, 4, 5, 7, 7, 9, 4, 6, 5, 5,
	7, 7, 4, 7, 4, 6, 6, 4, 5, 4,
	5, 3, 11, 8, 9, 8, 1, 0, 5, 5,
	3, 3, 5, 3, 2, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 5, 3, 4, 1,
	3, 3, 1, 2, 2, 0, 1, 2, 0, 2,
	3, 3, 3, 4, 0, 1, 1, 1, 1, 2,
	3, 4, 5, 6, 8, 6, 6, 1, 3, 1,
	3, 3, 5, 1, 0, 1, 2, 4, 2, 0,
	3, 3, 2, 1, 3, 4, 3, 5, 4, 3,
	5, 1, 1, 1, 1, 4, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 3,
	2, 3, 2, 0, 1, 3, 2, 3, 5, 6,
	2, 3, 3, 4, 0, 1, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 2,
	3, 3, 0, 2, 3, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 1, 3, 3, 2,
	4, 1, 5, 2, 5, 2, 5, 2, 1, 3,
	3, 0, 1, 0, 3, 0, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 0, 5, 0,
	5, 0, 0, 1, 1, 3, 1, 1, 3, 3,
	1, 1, 1, 2, 4, 4, 2, 3, 5, 5,
	1, 3, 1, 0, 1, 2, 3, 2, 4, 2,
	3, 2, 0, 1, 2, 0, 9, 9, 2, 1,
	4, 4, 4, 1, 0, 1, 3, 3, 2, 1,
	1, 2, 0, 1, 3, 2, 3, 2, 3, 1,
	4, 2, 3, 2, 3, 2, 3, 1, 1, 2,
	2, 4, 1, 2, 3, 3, 4, 5, 4, 5,
	4, 2, 2, 2, 1, 1, 0, 5, 2, 2,
	2, 3, 1, 0, 1, 3, 9, 1, 2, 0,
	7, 7, 0, 10, 6, 0, 4, 5, 2, 0,
	2, 4, 0, 1, 1, 0, 5, 2, 4, 1,
	1, 4, 5, 4, 0, 2, 0, 1, 0, 1,
	5, 1, 0, 2, 0, 2, 6, 2, 0, 1,
	3, 2, 4, 0, 1, 3, 2, 1, 0, 1,
	3, 3, 2, 0, 2, 2, 2, 3, 3, 4,
	1, 3, 3, 2, 7, 12, 1, 3, 2, 3,
	3, 1, 2, 2, 2, 2, 1, 2, 13, 2,
	2, 0, 2, 0, 1, 3, 3, 1, 3, 1,
	3, 3, 3, 3, 3, 0, 3, 3, 0, 3,
	0, 7, 7, 3, 0, 2, 1, 1, 1, 1,
	1, 1, 2, 2, 1, 3, 3, 6, 0, 3,
	0, 2, 3, 2, 3, 4, 4, 3, 3, 0,
	5, 2, 5, 2, 0, 4, 2, 1, 0, 1,
	0, 1, 3, 3, 6, 7, 5, 7, 9, 2,
	0, 7, 1, 3, 1, 4, 4, 7, 2, 1,
	1, 1, 3, 2, 8, 1, 3, 3, 5, 2,
	1, 3, 7, 2, 0, 10, 1, 2, 9, 11,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 3,
	0, 1, 3, 2, 0, 1, 1, 3, 3, 1,
	1, 3, 3, 3, 3, 4, 4, 3, 3, 2,
	1, 3, 2, 1, 1, 1, 1, 3, 0, 1,
	3, 1, 1, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 2, 2, 1, 3, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 0, 2, 0, 1, 0, 1, 0, 1, 0,
	1, 0, 1, 0, 1, 0, 4, 4, 4, 5,
	5, 2, 5, 3, 5, 2, 0, 3, 1, 2,
	5, 5, 8, 3, 4, 8, 5, 0, 4, 3,
	0, 1, 3, 1, 3, 2, 2, 4, 4, 5,
	2, 0, 1, 1, 0, 2, 2, 0, 2, 0,
	13, 16, 12, 15, 14, 17, 1, 1, 2, 2,
	2, 2, 1, 0, 1, 0, 1, 3, 1, 1,
	1, 3, 3, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 1, 0, 2,
	2, 1, 0, 3, 0, 1, 3, 1, 1, 2,
	4, 6, 6, 10, 1, 2, 1, 3, 4, 0,
	1, 3, 2, 1, 1, 6, 2, 0, 3, 1,
	1, 2, 1, 2, 2, 2, 2, 3, 0, 1,
	2, 1, 2, 1, 3, 2, 3, 1, 2, 2,
	2, 1, 2, 3, 1, 2, 2, 2, 2, 3,
	3, 3, 1, 3, 1, 1, 0, 1, 1, 0,
	1, 0, 3, 0, 2, 1, 4, 4, 5, 2,
	5, 5, 7, 3, 1, 5, 9, 3, 9, 4,
	11, 10, 2, 0, 1, 3, 3, 6, 4, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 3, 3, 4, 0, 1, 0,
	6, 1, 3, 3, 3, 5, 2, 0, 3, 4,
	4, 0, 2, 0, 4, 0, 3, 16, 19, 1,
	0, 2, 0, 4, 0, 1, 3, 2, 0, 4,
	6, 4, 6, 4, 4, 6, 4, 6, 5, 7,
	5, 7, 4, 6, 10, 13, 10, 13, 11, 14,
	1, 3, 1, 0, 1, 3, 1, 1, 1, 1,
	1, 2, 5, 3, 6, 4, 6, 6, 9, 5,
	7, 6, 6, 5, 5, 5, 5, 9, 4, 5,
	7, 6, 4, 8, 4, 2, 4, 3, 6, 4,
	3, 3, 3, 2, 2, 3, 4, 4, 3, 3,
	3, 3, 3, 3, 4, 4, 3, 2, 3, 2,
	2, 3, 4, 3, 2, 2, 3, 4, 4, 4,
	5, 1, 4, 4, 4, 3, 3, 2, 1, 0,
	6, 4, 6, 4, 6, 8, 4, 6, 4, 6,
	5, 7, 9, 7, 9, 7, 9, 8, 4, 6,
	2, 3, 3, 2, 5, 1, 1, 2, 3, 2,
	1, 1, 2, 1, 2, 2, 4, 3, 5, 1,
	3, 2, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 1, 1, 6, 5, 3, 5, 1,
	0, 1, 3, 2, 1, 1, 2, 3, 4, 3,
	2, 4, 4, 6, 4, 4, 2, 5, 2, 0,
	5, 5, 5, 1, 1, 1, 1, 3, 0, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 1,
	2, 1, 1, 1, 3, 3, 3, 3, 3, 2,
	1, 3, 2, 3, 5, 5, 5, 2, 1, 3,
	6, 6, 6, 6, 6, 8, 8, 6, 6, 7,
	9, 9, 8, 10, 6, 6, 6, 6, 6, 6,
	6, 8, 6, 8, 6, 8, 7, 9, 6, 8,
	7, 9, 8, 10, 8, 10, 9, 11, 8, 10,
	9, 11, 8, 8, 7, 6, 6, 6, 6, 8,
	8, 8, 8, 6, 9, 0, 2, 2, 1, 2,
	2, 2, 2, 3, 1, 3, 3, 1, 5, 3,
	9, 12, 7, 7, 3, 2, 1, 3, 1, 3,
	3, 3, 3, 2, 2, 1, 1, 1, 1, 2,
	1, 1, 1, 4, 5, 1, 0, 1, 2, 2,
	2, 2, 1, 1, 1, 3, 3, 5, 1, 4,
	0, 2, 3, 0, 1, 1, 2, 1, 17, 21,
	1, 1, 2, 1, 3, 1, 1, 1, 3, 1,
	2, 0, 1, 2, 4, 1, 1, 1, 1, 1,
	3, 0, 1, 0, 1, 1, 4, 0, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 2, 0, 9,
	11, 12, 14, 3, 0, 3, 4, 4, 0, 6,
	4, 9, 7, 5, 3, 5, 7, 9, 1, 3,
	1, 3, 5, 5, 6, 6, 4, 6, 6, 5,
	7, 9, 6, 6, 5, 4, 4, 3, 6, 6,
	6, 6, 4, 7, 5, 8, 7, 8, 6, 5,
	8, 1, 0, 1, 0, 4, 6, 5, 8, 2,
	0, 2, 2, 2, 1, 5, 2, 0, 2, 6,
	6, 6, 10, 6, 6, 6, 9, 9, 6, 6,
	9, 6, 7, 7, 6, 2, 2, 2, 2, 1,
	2, 1, 0, 1, 2, 10, 13, 5, 4, 4,
	2, 0, 2, 2, 1, 0, 11, 14, 12, 15,
	11, 4, 0, 2, 1, 8, 11, 8, 7, 9,
	1, 1, 3, 3, 5, 6, 1, 3, 1, 3,
	1, 3, 3, 7, 9, 9, 8, 6, 1, 0,
	1, 3, 3, 1, 5, 3, 8, 11, 6, 8,
	7, 10, 13, 1, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 0, 1, 0,
	5, 2, 3, 0, 2, 0, 1, 1, 1, 1,
	1, 3, 3, 2, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 3, 1, 3, 1,
	1, 1, 1, 3, 5, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 3, 2, 2, 1, 2, 2, 2, 2,
	1, 1, 0, 1, 1, 1, 1, 1, 1, 2,
	0, 2, 0, 4, 1, 3, 1, 2, 2, 2,
	1, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	3, 11, 13, 5, 1, 2, 2, 1, 1, 3,
	5, 1, 3, 7, 2, 0, 5, 5, 10, 8,
	2, 0, 2, 0, 1, 1, 1, 1, 1, 2,
	0, 2, 0, 4, 0, 5, 0, 8, 1, 1,
	8, 11, 6, 8, 1, 3, 1, 1, 3, 4,
	7, 6, 5, 5, 5, 5, 1, 3, 4, 4,
	4, 3, 4, 3, 1, 4, 0, 8, 5, 5,
	6, 7, 7, 7, 4, 4, 5, 11, 10, 10,
	2, 2, 0, 13, 2, 0, 1, 3, 5, 5,
	3, 6, 2, 1, 0, 2, 4, 0, 1, 3,
	6, 8, 8, 1, 3, 5, 5, 10, 10, 11,
	11, 5, 5, 6, 10, 1, 0, 2, 0, 1,
	0, 2, 2, 1, 1, 0, 4, 0, 1, 3,
	1, 1, 1, 1, 1, 2, 4, 4, 5, 2,
	0, 3, 1, 3, 4, 3, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 3,
	3, 3, 0, 1, 4, 2, 2, 2, 2, 2,
	3, 2, 2, 3, 0, 2, 2, 1, 1, 1,
	0, 2, 4, 5, 6, 4, 5, 2, 3, 1,
	1, 1, 1, 2, 2, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 2, 3, 2, 5, 4,
	3, 3, 3, 3, 3, 1, 1, 0, 2, 3,
	0, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	0, 3, 6, 3, 5, 3, 5, 3, 5, 2,
	0, 2, 0, 1, 2, 2, 2, 3, 3, 2,
	2, 3, 3, 1, 1, 3, 3, 2, 1, 1,
	8, 8, 11, 5, 7, 6, 9, 5, 2, 0,
	3, 3, 3, 7, 7, 10, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 4, 5, 1, 3, 2,
	2, 2, 2, 2, 1, 2, 2, 4, 3, 2,
	2, 2, 2, 2, 2, 3, 2, 2, 2, 2,
	5, 5, 5, 5, 5, 1, 3, 1, 2, 3,
	0, 3, 1, 2, 1, 1, 1, 3, 0, 1,
	3, 1, 3, 1, 3, 6, 4, 0, 5, 5,
	5, 1, 2, 4, 5, 1, 1, 1, 1, 3,
	3, 2, 2, 1, 2, 2, 2, 2, 1, 2,
	1, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 2, 1, 3, 7, 4,
	1, 3, 4, 6, 4, 8, 1, 1, 1, 1,
	7, 2, 2, 2, 2, 3, 0, 2, 2, 0,
	2, 2, 1, 2, 3, 3, 3, 3, 4, 4,
	3, 3, 3, 4, 4, 3, 4, 4, 1, 1,
	1, 0, 2, 2, 5, 3, 0, 1, 1, 1,
	1, 1, 3, 9, 12, 3, 0, 6, 2, 3,
	2, 3, 2, 2, 2, 3, 2, 0, 2, 5,
	3, 0, 2, 2, 2, 3, 1, 3, 1, 2,
	5, 6, 6, 6, 6, 6, 6, 6, 6, 8,
	9, 8, 6, 6, 9, 9, 9, 7, 10, 1,
	1, 8, 8, 8, 8, 8, 8, 8, 9, 8,
	8, 2, 0, 1, 1, 2, 1, 2, 1, 2,
	2, 6, 6, 6, 6, 6, 6, 6, 9, 9,
	6, 6, 6, 8, 6, 8, 8, 8, 8, 6,
	8, 6, 8, 7, 9, 7, 9, 6, 6, 6,
	6, 6, 6, 6, 7, 7, 6, 9, 9, 6,
	6, 6, 6, 6, 6, 8, 8, 8, 6, 7,
	6, 6, 7, 8, 8, 8, 10, 9, 8, 1,
	0, 5, 5, 4, 6, 6, 1, 0, 1, 2,
	3, 3, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 0, 4, 11, 11, 11, 13, 9, 11, 1,
	1, 6, 2, 2, 0,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -471, -179, -185, -186, -187,
	-188, -189, -190, -191, -192, -193, -194, -457, -458, -459,
	-460, -532, -533, -195, -196, -197, -534, -535, -536, -537,
	-538, -540, -541, -542, -543, -544, -539, -545, -546, -547,
	-548, -549, -550, -551, -552, -553, -554, -555, -576, -577,
	-578, -579, -580, -581, -582, -583, -584, -556, -557, -558,
	-559, -560, -561, -562, -563, -564, -565, -566, -567, -568,
	-569, -570, -571, -572, -573, -574, -575, -462, -463, -470,
	-472, -473, -474, -475, -476, -477, -478, -479, -480, -481,
	-482, -483, -464, -465, -469, -466, -467, -198, -199, -200,
	-201, -202, -203, -204, -205, -206, -207, -208, -209, -210,
	-211, -212, -213, -484, -485, -486, -487, -585, -586, -587,
	-588, -589, -590, -591, -592, -593, 266, 212, -181, -182,
	-297, 111, 26, 22, 27, 394, 390, 302, 93, 401,
	191, 436, 228, 407, 413, 397, 378, 290, 405, 274,
	475, -498, 428, 223, 395, 220, 259, 250, 280, 345,
	222, 273, 249, 328, 472, 358, 329, 333, 462, 226,
	418, 109, 214, -184, -183, -296, 531, 119, 203, 63,
	67, -304, 36, 518, 86, 540, -715, 486, 457, -715,
	96, 97, 98, 99, 531, -255, 115, -412, -376, -35,
	33, 414, 247, 261, 62, 464, 454, 225, 276, 284,
	422, 103, -441, 202, 268, 449, 375, 194, 438, 387,
	443, 512, -621, 406, 71, 453, 451, 58, 289, 473,
	471, 40, 67, 307, 419, 480, 85, 284, 104, 199,
	225, 236, 247, 261, 286, 71, -623, 62, 375, 385,
	387, 409, 414, 422, 443, 412, 460, 268, 406, 103,
	449, 438, 454, 464, 276, 40, 322, 384, -407, -410,
	-409, 464, 261, 307, 512, 62, 458, 443, 247, 449,
	364, 103, 406, 71, 67, 419, 480, 85, 284, 225,
	236, 438, 454, 194, 268, 276, -623, 387, 414, 422,
	375, 412, 460, 85, 364, 284, -655, 58, 423, 457,
	-656, -654, -274, 56, 217, 414, 347, 406, 488, -5,
	4, -27, -28, 191, 192, 193, 194, 195, 196, 197,
	198, 199, 200, 22, 201, 204, 202, 205, 55, 206,
	207, 208, 210, 211, 212, 88, 70, 213, 214, 215,
	24, 216, 218, 219, 220, 221, 222, 223, 123, 226,
	227, 228, 229, 230, 141, 231, 101, 232, 233, 234,
	235, 236, 111, 237, 154, 238, 120, 121, 90, 246,
	247, 248, 249, 250, 251, 253, 254, 98, 149, 150,
	255, 89, 256, 257, 258, 259, 260, 261, 176, 27,
	262, 138, 264, 148, 265, 267, 136, 42, 268, 270,
	271, 272, 273, 274, 275, 276, 277, 279, 281, 282,
	91, 283, 153, 165, 285, 286, 287, 288, 289, 291,
	294, 295, 151, 296, 297, 298, 28, 299, 300, 301,
	302, 303, 304, 305, 306, 307, 308, 309, 310, 312,
	313, 314, 96, 315, 317, 318, 145, 503, 319, 320,
	321, 322, 92, 324, 327, 328, 329, 332, 333, 334,
	335, 336, 337, 105, 85, 338, 99, 340, 341, 342,
	343, 344, 345, 346, 131, 348, 349, 350, 351, 352,
	353, 354, 357, 110, 358, 359, 32, 139, 122, 504,
	505, 502, 144, 62, 506, 507, 124, 501, 508, 102,
	364, 365, 366, 367, 368, 369, 370, 129, 371, 128,
	373, 374, 375, 377, 378, 379, 380, 382, 383, 384,
	385, 386, 112, 387, 152, 143, 388, 389, 390, 391,
	84, 132, 393, 394, 395, 396, 397, 398, 399, 34,
	400, 401, 402, 35, 403, 404, 405, 407, 408, 409,
	410, 127, 412, 413, 146, 415, 416, 87, 417, 418,
	419, 420, 421, 422, 93, 425, 427, 428, 429, 430,
	431, 107, 433, 434, 435, 436, 437, 438, 113, 114,
	439, 440, 441, 147, 442, 443, 445, 446, 104, 448,
	449, 108, 451, 452, 453, 454, 455, 458, 460, 462,
	463, 464, 465, 466, 467, 468, 142, 469, 50, 472,
	473, 474, 97, 475, 476, 477, 478, 155, 183, 479,
	480, 481, 482, 483, 485, 168, 486, 140, 487, 498,
	499, 57, 37, 173, 169, 189, 179, 178, 224, 188,
	187, 29, 278, 175, 292, 293, 500, 186, 171, 185,
	166, 160, 162, 163, 159, 161, 156, 164, 158, 126,
	157, 325, 339, 181, 182, 355, 356, 360, 170, 361,
	362, 376, 177, 174, 411, 426, 172, 444, 184, 459,
	461, 86, 180, 489, 490, 491, 492, 493, 133, 494,
	495, 496, 497, 125, -658, -657, 56, 457, 423, -274,
	21, 217, 58, 347, 406, 414, 488, -715, 457, -715,
	379, -715, 379, -5, 423, 457, 56, 413, -5, 457,
	-7, -5, -510, -511, 21, -515, 63, 392, 26, 22,
	-5, -510, 290, -511, -5, -468, -498, 118, 531, -179,
	-185, -186, -187, -188, -532, -533, 26, -244, 531, 79,
	-242, 531, 118, -274, 56, 457, 423, 21, 531, -242,
	-504, 531, 21, 451, 453, 374, 420, -245, -7, -251,
	-245, -249, 349, 382, 91, 92, 193, 396, -102, 21,
	285, 210, 64, 45, -101, 534, 535, 12, -251, -245,
	21, -7, -7, 378, 21, -5, -5, 536, -5, -21,
	-103, 7, -708, 67, -708, 74, 320, -526, -527, -103,
	321, -132, -661, -104, -5, 4, -27, -29, 209, 115,
	225, 25, 81, 242, 116, 79, 44, 76, 52, 53,
	75, 77, 46, 82, 54, 80, 363, 78, 48, 450,
	118, -170, -131, 470, 316, 269, 509, -183, -184, -182,
	-181, -182, -296, -288, -289, 21, 41, -436, -434, -437,
	-5, 66, 541, -298, 84, -300, -7, -298, 531, -3,
	-489, 30, -506, -505, -698, 318, 389, 252, 31, 73,
	-438, -436, 64, 73, -180, -179, -185, -186, -187, -188,
	-434, 67, 480, 84, 419, 307, 286, 385, 460, 117,
	199, 412, 458, -622, 463, 34, -19, -5, 28, -7,
	-15, -5, -156, 221, 279, -159, -5, 11, -160, 534,
	535, 536, 537, 538, 539, 525, 526, 527, 18, 19,
	20, -15, 87, -15, 28, -7, 28, 246, 67, -7,
	28, 336, -11, -516, -9, 241, 245, 424, 4, -27,
	-28, -29, 85, -15, 460, -7, -7, 340, -399, 28,
	-15, -7, -7, 531, 236, -11, -11, 453, 451, 453,
	451, -436, 28, 21, -434, 28, 21, -434, 28, -434,
	28, 480, 67, 246, 93, 401, -450, -661, -15, -15,
	-7, -15, -449, -661, -29, -5, -11, -516, 321, 221,
	279, -451, -156, -7, 28, -449, -7, -449, -7, -7,
	-7, -7, -7, 460, -11, -516, 21, -11, 336, -516,
	21, -7, -15, 28, 87, -15, -7, 383, 139, 28,
	-17, -15, 28, -13, -7, -7, 28, -271, 28, -108,
	-109, 426, -111, -112, -118, -114, -117, -110, -707, -104,
	186, 171, 172, 173, 174, 175, 176, 187, 188, 170,
	189, -119, -120, -115, -116, 184, 56, 185, 166, 4,
	-27, 169, -105, 178, 179, 180, 181, 182, -271, 28,
	25, -33, 28, 221, 279, -33, -7, 28, -7, 28,
	-7, 28, 70, 336, -402, 28, -516, -402, 28, -402,
	28, 480, 246, 67, 87, 340, 460, 321, 480, 70,
	414, -655, 423, -655, 219, 209, -505, 431, 64, 61,
	527, 533, 57, -103, -103, -699, -103, 40, -273, -9,
	-103, 506, 57, 318, 209, -489, -506, -489, -103, -489,
	61, -103, -5, -103, -252, 531, 74, 61, 541, 383,
	531, -262, 531, -262, -262, 104, -262, 74, 506, 64,
	506, -242, -468, -493, -496, -497, 86, -9, -498, 515,
	473, -241, 116, -493, -494, -495, -500, -434, -493, 57,
	318, 209, -493, -434, -7, -5, -502, 414, -503, 307,
	67, 104, 247, -493, -247, -245, -250, -249, -250, -250,
	-250, -102, -102, -250, -250, -250, -102, 21, -250, -102,
	21, -101, -101, -253, 531, -7, 21, -20, 541, -18,
	-436, -18, -407, 514, -408, 464, 261, 199, 286, 62,
	117, -409, 385, 409, 458, 322, 512, 307, -410, 247,
	406, 443, 449, -524, 130, -527, -273, 531, -96, -99,
	533, 529, -148, -55, -150, 130, -56, -57, -152, 68,
	280, 69, -153, -53, 21, 41, -53, -53, 70, -170,
	-131, 532, 532, -276, -275, -278, -65, 536, -67, 534,
	535, -155, 31, 516, -130, 471, 40, -69, -68, 13,
	531, -72, -70, -182, 29, 134, -78, -79, 293, 11,
	62, 411, -5, -101, 6, -103, 49, 43, 47, 9,
	10, -661, -704, -110, 38, -132, -334, -71, -112, -705,
	-706, -117, -707, 185, 161, 162, 225, 240, 243, 244,
	330, 331, 241, 245, 424, 447, 103, 239, 242, 512,
	278, 356, 362, 376, 444, 459, 461, 360, 224, 292,
	325, 490, 491, 493, 494, 492, 495, 496, 159, 160,
	166, 164, 158, 339, 156, 163, 157, 497, 173, 169,
	189, 179, 178, 188, 187, 175, 186, 171, 181, 182,
	170, 174, 172, 56, 184, 180, -119, -120, -115, -116,
	-275, 74, 536, -96, -434, 531, 531, 541, -298, -32,
	531, -129, -65, 218, 354, 541, -698, 327, 66, 487,
	252, -435, -434, 93, -5, 23, -438, -438, 532, -262,
	-434, 28, -254, -434, 480, -434, 28, -36, 25, -661,
	-661, -7, 460, -661, -7, 130, -623, -412, 473, 209,
	-443, 31, -37, 36, 518, -650, 23, -122, 533, -430,
	531, -15, -15, 533, -430, 23, 368, 257, 452, 231,
	-430, 64, 31, -37, 31, 140, -434, 28, -610, 464,
	31, 130, 28, -37, 480, 513, -7, -619, 365, 74,
	-7, -32, 31, -429, 130, 36, 232, -108, -15, -37,
	-37, -401, -404, 398, 93, -403, 207, 256, 196, 22,
	27, 477, 223, 264, 258, 309, 354, 122, 31, 365,
	401, 400, 153, -39, 507, 29, 45, -401, -405, 398,
	-26, 207, 354, 93, 29, 45, -401, 398, -423, 93,
	-426, 354, 23, 213, 90, 305, 335, 338, 342, 364,
	419, 436, 402, 473, 29, -401, 398, 93, 29, -434,
	28, 21, -436, 28, 140, -654, -274, -657, 398, 93,
	365, -47, 531, 398, 93, 365, 394, 398, 93, 365,
	398, 365, 36, -603, 93, 394, -659, -604, -463, -607,
	-609, 4, 232, 148, 332, 449, 452, 398, -406, 27,
	93, 196, 477, 365, 398, -452, 93, 365, -26, -673,
	354, 215, 404, 441, 300, 434, 482, 277, 418, 324,
	31, 237, 127, 445, -660, 366, -463, -47, -96, 398,
	-531, 196, 27, -7, -15, -15, 93, 365, -98, 531,
	74, 29, 398, -452, 93, 365, -26, 398, 93, 196,
	27, 365, 398, -452, 93, 365, -26, 398, 365, 398,
	-611, -39, 365, 479, 398, 93, 232, 394, 196, 27,
	264, 258, 430, 365, 74, 74, -7, 398, -37, -488,
	45, -488, 398, 130, -37, -488, -488, 398, 93, 401,
	365, 398, 93, 365, 29, 368, 257, 452, 231, 398,
	196, 27, 93, -454, 365, -455, 22, 97, -531, 93,
	-509, -268, 6, 534, 535, -102, 29, 541, -433, 24,
	35, 29, 541, -433, 74, 29, 541, -433, 29, -126,
	134, -109, -124, 531, 498, 344, 248, 297, 341, -125,
	417, -123, -122, 531, -113, 531, 177, -123, -123, -123,
	531, -127, 518, 519, 531, -127, -128, 183, 531, -128,
	-128, 178, 179, -128, -433, 29, -17, 28, 531, 29,
	-15, 28, -15, 28, 130, -433, 29, -37, 29, 29,
	-402, 130, 28, 541, 29, 29, 29, 140, 368, 257,
	452, 231, -36, -402, -7, 219, 23, -273, 40, -103,
	120, -277, 40, -269, -272, -268, 49, 43, 74, -273,
	-277, 40, -5, -697, -103, 4, -110, -268, 40, 58,
	-701, 260, 234, 327, 413, -5, 23, -703, -108, -528,
	-16, 67, 419, 284, 286, 385, 409, 247, 261, 321,
	322, 367, 414, 449, 464, 21, -434, -402, -515, 531,
	-14, -62, -5, -14, -528, 130, -402, 130, -468, 532,
	541, -499, -272, -268, -242, 532, 541, -32, 532, 327,
	532, -501, 83, 74, -36, -36, -36, 532, 121, 115,
	314, 204, 416, 354, -245, -245, -245, -245, -250, -250,
	-245, -245, -245, -250, -250, -245, -250, -250, -129, -103,
	541, -22, 45, -25, 235, 402, -15, -15, -7, -108,
	-108, -450, -449, -451, 221, 279, -7, -7, -449, -449,
	130, 139, 531, 74, -273, 532, 536, -82, 190, 21,
	41, -95, -65, -107, -104, -99, -106, 536, -6, 4,
	-27, -28, -29, -30, 21, 203, 119, 30, 510, 134,
	23, 94, 60, 511, 38, 512, 513, 39, 514, 117,
	26, 239, 240, 241, 243, 244, 245, 40, 252, 95,
	41, 109, 263, 266, 269, 43, 280, 130, 284, 64,
	290, 71, 72, 45, 311, 316, 73, 323, 326, 68,
	330, 331, 31, 47, 69, 74, 66, 33, 509, 372,
	381, 392, 100, 63, 424, 432, 59, 447, 67, 106,
	61, 456, 49, 470, 471, 103, 83, 190, 51, 65,
	484, 36, -65, -100, -54, -55, -149, -148, -152, 130,
	389, 97, 354, 427, 503, -57, -56, -58, -65, 21,
	-64, 91, 349, -59, -60, -65, -67, 534, 535, -151,
	122, -183, -183, -183, -171, -174, -65, -148, -55, -291,
	73, 541, 14, 39, 55, 534, 535, 536, 537, 538,
	539, 525, 526, 527, 18, 19, 20, -155, 30, 33,
	46, 516, 44, 48, 52, 53, 54, 37, 45, -158,
	23, -8, 11, 62, -159, 4, -31, 191, 192, 193,
	194, 195, 196, 197, 198, 199, 21, 200, 22, 201,
	203, 119, 510, 94, 204, 202, 205, 60, 206, 207,
	208, 209, 210, 211, 212, 173, 115, 169, 189, 511,
	88, 70, 213, 214, 215, 24, 216, 38, 512, 217,
	218, 219, 513, 220, 221, 222, 223, 224, 225, 514,
	123, 226, 227, 228, 229, 230, 25, 141, 231, 101,
	232, 117, 233, 234, 235, 236, 111, 237, 81, 154,
	238, 120, 239, 240, 241, 242, 243, 244, 245, 121,
	90, 246, 247, 249, 188, 187, 250, 40, 251, 252,
	253, 254, 98, 149, 150, 255, 89, 95, 256, 257,
	258, 259, 41, 109, 260, 261, 176, 27, 262, 263,
	138, 264, 148, 265, 266, 267, 136, 42, 268, 270,
	271, 272, 273, 29, 274, 275, 276, 277, 278, 43,
	279, 282, 91, 175, 283, 153, 284, 165, 285, 116,
	79, 286, 287, 288, 289, 291, 292, 293, 294, 295,
	151, 296, 298, 28, 299, 300, 301, 302, 303, 304,
	305, 306, 307, 308, 309, 310, 311, 312, 76, 500,
	313, 314, 96, 315, 186, 171, 185, 317, 318, 75,
	166, 160, 162, 163, 159, 161, 156, 164, 158, 126,
	157, 145, 503, 319, 320, 321, 322, 92, 323, 326,
	324, 325, 77, 327, 328, 329, 58, 330, 331, 332,
	333, 334, 335, 336, 337, 105, 85, 338, 99, 339,
	340, 342, 343, 345, 346, 347, 181, 82, 182, 131,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	31, 110, 358, 359, 47, 360, 32, 170, 139, 122,
	504, 505, 502, 144, 66, 506, 507, 124, 501, 361,
	80, 362, 102, 364, 365, 366, 367, 368, 369, 370,
	129, 371, 128, 372, 373, 374, 375, 376, 377, 378,
	379, 380, 381, 382, 383, 384, 385, 386, 112, 387,
	152, 143, 388, 389, 174, 390, 391, 84, 132, 392,
	393, 394, 395, 396, 397, 398, 399, 34, 400, 401,
	402, 35, 403, 404, 405, 78, 406, 407, 408, 409,
	410, 411, 127, 412, 413, 146, 414, 415, 416, 87,
	418, 63, 419, 420, 421, 422, 423, 424, 93, 426,
	425, 427, 428, 429, 430, 172, 431, 432, 107, 433,
	434, 435, 436, 437, 438, 113, 114, 439, 440, 441,
	147, 442, 443, 444, 445, 59, 446, 104, 447, 67,
	448, 450, 449, 108, 451, 452, 453, 454, 106, 455,
	56, 184, 456, 457, 458, 459, 460, 461, 49, 462,
	463, 464, 465, 466, 467, 468, 142, 469, 471, 50,
	472, 473, 474, 97, 103, 83, 475, 476, 477, 478,
	155, 86, 180, 190, 118, 479, 480, 481, 482, 51,
	483, 486, 140, 487, 488, 489, 490, 491, 492, 493,
	133, 494, 495, 496, 497, 125, 499, 57, -65, -65,
	-65, -65, -65, 363, -377, 32, -97, -65, -129, -182,
	-96, -182, -182, -77, 529, 531, 531, 531, -96, -103,
	531, -103, -103, 531, -73, -65, -136, 485, -133, 281,
	531, 531, 130, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, -291, 531, -434, -129,
	-300, 23, -13, 541, 532, 39, 55, 30, 33, 46,
	44, 48, 52, 37, 45, 62, 218, -698, -700, 389,
	399, 421, -214, -179, 102, 531, 40, 23, -216, -222,
	-220, 531, -5, -5, -299, 83, 83, 61, -239, 64,
	61, 531, 122, 370, -262, 31, 23, -262, -434, -596,
	-423, 354, 31, -19, 28, -5, -662, 531, -662, -680,
	211, 198, 315, -7, -645, -647, 531, 23, -108, 321,
	480, 84, -516, -446, -190, -191, -459, -460, 26, 29,
	-603, 365, -108, 533, -106, -431, -432, -6, -621, 83,
	-156, 531, 267, 388, -15, -15, -15, -15, -15, 29,
	-597, 29, -7, 531, 370, 31, -612, -611, -103, 29,
	-613, -516, 103, 31, -507, -442, 28, -434, 531, 74,
	332, -516, -434, 464, 74, 29, 21, -633, -638, 67,
	448, -5, -437, 242, -434, -430, -103, 23, 130, -507,
	-507, 541, 61, -711, 117, 514, 168, 335, 473, 194,
	449, -389, 414, 531, 370, 370, -356, 28, 514, -357,
	-5, 117, -373, 513, 471, 381, 284, 270, -711, 117,
	-711, 117, 117, 74, 460, 201, 400, 412, 411, 460,
	412, 411, -434, 309, 153, -15, 122, 61, -389, 298,
	411, 531, -436, 449, 61, 255, 370, -434, 449, 61,
	-426, 414, 90, 338, 342, -109, -268, -710, 70, -268,
	-268, 70, 346, -37, -37, -434, 61, -711, 414, -434,
	-401, 398, 93, -26, 29, 45, -401, 398, 93, 29,
	-7, 61, 414, 61, -48, 532, -665, -667, -107, -121,
	45, 361, 500, 190, -104, -108, 426, 61, 414, 61,
	479, 61, 414, 61, 61, 61, -603, -655, 449, 225,
	-607, -717, 527, 68, 61, 117, 40, 31, 117, 40,
	31, 414, -651, 117, -652, 513, 31, 117, 61, 61,
	-716, -673, 35, 93, -656, 414, 423, 457, 61, 255,
	74, 47, 418, 254, 317, 324, -268, -268, -15, -5,
	61, 103, 398, 365, 83, 83, 414, 531, 61, -108,
	355, -434, -7, 61, -716, 414, 61, 255, 61, -430,
	-633, -633, -633, 61, 61, -716, 414, 61, 255, 61,
	61, 61, -39, 61, -103, 47, 61, -430, 387, -103,
	387, 387, 387, -430, 61, -434, -434, 398, -618, 365,
	264, 258, 61, -508, -659, 93, 247, -659, 61, -613,
	-508, -659, -659, 61, -389, -389, 61, 61, 438, 414,
	61, -15, -15, -15, -15, -15, 61, 208, 155, 155,
	208, 155, 208, 531, 414, 541, 61, 208, -598, -408,
	-407, 199, 512, 261, 286, 62, 385, 409, 458, 464,
	414, -521, -492, 290, 405, 45, 130, 365, 6, 6,
	-17, -15, -13, -7, -15, -7, -108, -271, 529, 529,
	-126, 134, -101, 61, 61, 61, 61, 531, -123, -129,
	-101, -101, 56, 56, -101, 531, -101, -128, -128, -271,
	-433, 29, -108, 83, 29, 83, 29, -108, -7, 531,
	-7, -7, -433, -613, 29, -516, -402, -402, -402, -434,
	61, -529, -530, 68, 269, 457, 541, -103, 531, -5,
	-180, 541, 532, 61, 541, -16, -16, 246, 422, -453,
	-449, -453, -453, -13, -17, -13, 139, -50, -45, -5,
	-13, -13, -17, 448, 420, 287, 386, 410, -518, 36,
	291, -14, 541, 532, 532, 64, -510, -511, -518, -511,
	-468, -496, -243, 119, -494, -500, -494, -434, -7, -434,
	-434, -7, -19, -248, 36, 168, 416, -245, -245, -245,
	-245, -245, -245, 532, -436, -24, 359, -23, 194, 411,
	427, 272, -433, 298, 298, 52, 52, 52, 52, 52,
	52, 52, 52, -15, -15, 74, 74, 52, 52, -108,
	-268, -108, -407, 514, -408, 464, 261, 199, 286, 322,
	385, 409, 532, -131, 541, -170, -95, -82, -82, 16,
	17, 530, 542, 66, 503, 427, 541, -60, -63, -67,
	534, 535, 411, 127, 531, -63, 411, 127, -61, -101,
	6, -61, -154, 359, 430, -16, 541, 83, -163, 94,
	95, -54, -149, -279, 64, -428, 453, 451, 58, 289,
	473, 67, -434, -278, -108, -15, 56, 58, -65, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, 46, 44, 48, 37, 45, -65,
	61, 47, 31, 49, 43, 50, 41, 260, 357, -167,
	-166, 350, 351, 352, 353, 166, -162, 59, 60, -161,
	-182, 531, -165, 510, 432, 21, -6, 531, -130, 411,
	531, -182, 41, 31, -99, 532, 541, -129, -80, 530,
	-77, -129, -156, -129, 532, -82, -124, -101, -76, -75,
	51, -133, 71, -142, 508, 531, -335, -67, -65, -330,
	-65, 531, -101, -101, -101, -101, -65, -87, -12, 4,
	498, 344, 248, 297, 341, 417, -103, -65, -88, -83,
	-65, -82, -89, -66, -67, 534, 535, -155, 411, -85,
	-83, -65, -65, 511, 326, 456, -86, -65, 64, -129,
	-65, -129, -129, -129, -129, 346, -90, -221, -65, -701,
	-67, 346, -65, -82, -336, -340, -335, 100, -65, -333,
	-181, -340, -330, -182, -330, -65, -330, 532, -330, -330,
	-330, -701, -279, -129, 532, 532, -301, 85, 31, 532,
	-65, 468, 229, 389, -223, 74, -236, 103, 104, -215,
	-219, -5, 86, -5, -279, 541, 527, -217, -220, -97,
	-224, 65, -280, -281, -436, -182, 323, -292, 531, -305,
	-315, -325, -306, 127, 125, 126, -5, -132, -71, -334,
	166, -281, -240, 112, -240, -351, -352, -355, -5, -356,
	-358, -357, 46, -15, 122, -413, 83, 29, -179, 273,
	-400, 36, 531, 29, 74, 31, 404, -669, -670, -672,
	23, 321, 458, 484, -673, -663, 532, -664, -665, -669,
	-682, -681, 96, 98, 97, 462, 122, 198, -430, 536,
	-646, 509, -648, -653, -649, -665, 4, 74, 321, -7,
	-434, 480, -443, -412, -35, -19, -5, -370, -106, 532,
	541, 527, 130, -7, -308, -307, -309, -5, 531, -430,
	-430, -430, -430, -430, -15, -599, 414, 479, 64, 24,
	-7, -601, -602, -606, 295, 354, 478, -351, 122, 29,
	284, -7, 422, 29, -490, -491, 446, 197, 406, 45,
	371, 265, 469, 309, 4, 232, 476, 103, 23, 31,
	-262, -65, -6, 7, -620, 23, -630, 307, 67, -632,
	-637, -5, -306, 531, -15, 448, -429, 541, -436, 45,
	-96, -262, -262, 387, -108, -103, -403, -7, -7, -7,
	505, 223, 340, -7, -7, -390, -391, -6, -434, -434,
	31, -356, 28, -108, -7, 531, -377, -395, 83, 503,
	503, -396, 83, -5, -101, -7, 28, -5, 28, -7,
	-7, -7, -7, 21, 103, 460, 412, 460, 412, -7,
	327, -7, 21, 103, -7, 327, -434, 411, -516, -46,
	110, 79, 40, 83, 327, -40, -43, -420, 93, 196,
	27, -10, -6, -401, -404, 398, 93, -7, -7, 74,
	-434, -401, 398, -7, -7, -7, -268, -15, -15, -268,
	-268, -401, 398, -423, 93, -7, -7, -7, -401, 398,
	93, 61, -711, 414, 255, -434, 449, 61, -711, 414,
	-436, 398, -601, -602, 365, -7, -7, -516, 532, 541,
	-107, -121, -667, -121, -104, 361, -122, -104, -7, -7,
	-516, -7, -7, -516, -7, -516, -7, 479, -102, -272,
	40, -7, -7, 47, -7, 28, -65, 47, -7, -7,
	531, 47, -7, -516, -7, -7, -516, 74, 47, 74,
	254, 317, -11, -402, 61, 61, -7, -7, -7, -675,
	-674, -6, -516, 532, 541, 541, 398, -627, 61, 74,
	-7, -7, -516, 74, -7, -516, -7, -7, -516, 74,
	-7, -516, -7, -516, -7, -13, -429, -13, -13, -516,
	398, 398, -26, 61, 61, 400, 201, -11, -491, -7,
	-11, 422, -7, -516, -7, -42, -102, 40, -7, -516,
	93, 398, 93, 398, 93, 365, -430, 398, 93, 398,
	93, 365, 196, 22, 27, -7, -7, -103, -34, 28,
	-309, -103, 28, -5, -675, -7, -455, 196, 27, -516,
	-5, -600, 61, -7, -15, -450, 531, -108, -449, -451,
	221, 279, -449, -449, 130, -108, -7, -510, -510, 290,
	414, 406, 103, 61, -433, -433, -433, 74, -433, 530,
	-101, -101, 529, 532, 344, 297, 341, -125, 341, -125,
	-125, -101, 532, 532, 532, 57, 57, 532, -129, 532,
	-433, -17, 23, -7, -15, -7, -15, 321, -433, -605,
	-608, 153, -37, 422, 130, -439, 36, -516, 64, 531,
	61, -505, -269, -124, -101, -108, -512, -517, -516, 71,
	-434, 140, -13, 541, -51, -268, 541, 533, 45, 45,
	45, 45, 45, -513, -522, -6, 70, 532, -62, -512,
	74, -433, 64, -494, -501, 130, 296, 296, 343, 427,
	272, 427, 272, 97, 411, -523, -103, 47, -523, -523,
	-523, -523, -523, -523, -523, 83, 83, -15, 261, -15,
	-523, -523, 321, 52, 23, -15, -15, -7, -108, -108,
	-450, -449, 139, -449, -449, 532, 190, -95, -131, -131,
	541, -131, -65, -65, -100, -65, 97, -59, -63, 66,
	36, -101, 6, 531, -129, 334, -174, -157, -159, 62,
	-164, 517, -282, 65, -280, -708, -708, 453, 451, 453,
	451, -708, -434, 57, 42, -65, -65, 61, -162, 59,
	-161, 42, -65, 47, 49, 43, 50, 41, 260, 357,
	-167, -166, 64, 357, -168, 36, 168, 155, 134, 139,
	146, -66, -66, -129, -182, 531, -156, 531, -129, 41,
	-97, -65, 530, 530, 541, 532, 532, 532, -131, 532,
	-74, -75, 263, -65, -142, 531, -141, -5, 531, 65,
	-337, 47, 192, 155, 542, -339, 509, -349, -348, 515,
	-65, 532, 532, 532, 532, 23, 532, 64, 532, 541,
	532, 532, 372, 532, 14, 534, 535, 536, 537, 538,
	539, 525, 526, 527, 18, 19, 20, -155, 52, 45,
	62, -66, -66, -66, 532, 532, 48, 64, 130, 23,
	-86, -86, -86, 532, 64, -129, 541, 532, 532, 532,
	532, -6, 532, 541, 23, -65, -321, 129, -6, 541,
	532, -337, 541, 532, -108, -338, 541, 47, 192, -349,
	532, -168, 532, -340, 541, 541, 541, -65, -282, 532,
	531, 85, -225, 100, 101, 155, 532, 541, -97, -224,
	-222, -65, 532, 541, -225, -65, 120, 541, 81, -293,
	75, 82, 79, 77, 78, 76, -285, -284, 23, -5,
	-285, -182, -305, -315, -325, -182, -292, -281, -287, -284,
	23, -5, -285, -285, -314, 518, 64, 531, 531, -96,
	74, -246, -103, 113, 114, -246, 532, 541, -434, -353,
	531, -434, -49, 36, 168, -7, -434, -254, -439, -7,
	23, -389, -14, -434, -436, 29, -668, 67, -121, -678,
	-461, 212, 403, -672, -677, -103, -273, -671, 130, 532,
	541, 40, 527, -678, 74, 33, 122, -682, 532, 532,
	509, 541, 70, 532, 541, 527, -456, 63, 97, 98,
	96, -7, 295, -262, -434, 67, 209, -443, -371, 117,
	-372, -374, 39, 31, 47, 471, 381, 513, 40, 392,
	288, 252, 311, -432, -411, -121, -30, -157, -268, -103,
	355, 62, 534, 535, 464, 532, 541, -108, -594, -595,
	-103, -430, 64, -7, -273, -273, -37, -418, 507, -606,
	-614, -7, 295, 478, -614, 532, -434, -434, 246, -610,
	-7, 130, -101, -402, -402, 406, 71, -103, 47, 371,
	371, 68, 474, -402, -179, 29, -413, 532, 273, 51,
	-400, -624, 130, 4, 295, 64, 541, -65, -32, -429,
	-638, -262, 414, -262, -283, 65, -283, -13, 532, 61,
	61, 61, -44, -5, 40, 532, 541, 527, 533, -361,
	130, 40, -36, 282, 29, 31, -417, -416, 439, -373,
	270, -65, 531, -368, 307, 531, -395, 531, 531, -7,
	-406, 27, 93, 401, 196, -425, -270, -39, -427, 402,
	93, -368, 29, -433, 29, -433, -7, -7, -7, -7,
	418, 418, 327, 307, 418, 532, 541, -420, -420, -10,
	-41, -103, 61, -711, 117, 414, 93, 364, 276, 61,
	93, 364, 61, 414, 61, 61, -711, 414, -7, -7,
	-7, 74, -401, 398, 93, -7, -7, -7, -7, -401,
	398, 93, 61, -39, 61, -665, -121, -121, 538, -122,
	61, -433, 29, -652, -65, -368, 276, 313, 47, -7,
	-516, 398, 93, 365, 398, 196, 27, 93, 365, 541,
	532, 527, -108, 355, -108, 61, -628, 83, -402, -434,
	276, 276, -429, -429, -429, 61, 61, 255, -7, -516,
	-7, 438, 61, 414, 61, 414, 61, 61, 414, 61,
	414, 61, 336, 336, 336, 61, 61, -103, 31, -433,
	29, -433, 532, -270, 93, -273, -108, -15, -15, -108,
	74, 74, 506, -13, -402, -402, -516, -15, 530, 530,
	-101, 532, -127, -127, 532, -433, -108, -433, 83, -433,
	83, -7, 532, 541, 531, -7, -613, 246, 354, 422,
	-18, 532, -519, 541, 36, -516, -13, -449, 541, -45,
	-5, 414, 414, 414, 414, 414, -518, 541, -520, 506,
	49, 43, -516, -518, -528, -402, -179, 272, 272, -7,
	-7, 52, -15, 52, -7, -523, -108, 52, 52, 52,
	52, 52, 52, 52, -268, 52, 52, -95, 532, 532,
	532, 530, 66, 36, 455, -129, 532, 541, -164, 531,
	91, 92, -52, 71, -65, -434, -434, -708, -708, -708,
	-708, -434, -65, -65, 42, 42, -65, -66, -66, -65,
	42, 64, 357, -168, -65, 471, 471, 30, 30, 532,
	-65, 532, -129, 532, 541, 532, -77, 532, -103, 266,
	-65, 106, -170, -143, -5, -65, -168, 74, 74, -330,
	-330, -338, 70, 166, 532, -108, -65, -167, -65, -108,
	-66, -66, -66, -66, -66, -66, -66, -66, -66, -66,
	-66, -66, -66, 41, 31, 260, -66, -65, -65, -65,
	-108, 532, 532, 532, -129, -65, 532, 541, -221, -6,
	-91, 380, 442, 532, -67, -322, 70, 532, 541, -93,
	479, -168, -335, -349, -340, -330, 74, 74, -340, 532,
	532, -65, -65, -65, 23, -52, -180, -275, -230, 531,
	74, -179, -179, 102, -219, -225, 527, -220, 122, -281,
	75, 75, -281, -293, 75, -294, 80, -294, -294, -134,
	450, -5, 531, -285, -287, -285, -285, 532, -5, 531,
	531, 124, 531, -67, 133, -330, -65, -37, -256, -709,
	83, -384, 310, -355, -366, -385, -386, 370, -354, -359,
	-360, -357, -5, -353, -392, 74, -389, 505, 531, 122,
	370, 23, -253, -179, 532, -596, -396, -7, -669, 531,
	206, -65, 541, 541, 464, -664, -65, -65, -434, -681,
	-14, 74, 70, -653, -646, -649, 4, -411, 61, 531,
	-614, -400, 531, -434, 28, -516, -7, -15, 252, 47,
	-377, 503, 531, -66, -434, -422, 201, 70, 253, 299,
	-108, -309, -320, 39, 532, 541, -15, -597, 531, -122,
	-384, -353, 531, 370, 140, -612, -418, -613, -402, -402,
	-103, -103, -102, -103, -439, -442, -400, -368, -712, 286,
	385, -615, -617, -5, -626, 61, -625, 21, 63, 96,
	97, 98, -614, -280, -637, 532, 74, -283, -5, 242,
	-283, 531, -429, 36, 168, -103, -7, -7, -391, -411,
	-6, 86, -356, 29, -415, -414, 230, -5, 40, 532,
	-14, -369, 31, 252, 311, 354, -7, -14, -368, -14,
	-364, -363, -234, -5, -306, 531, 31, 275, 298, 246,
	-426, 288, 31, 275, 438, -389, -416, -414, -389, 288,
	-427, 93, 464, -37, 438, -5, -7, 418, -7, -43,
	-7, -7, -7, -7, 449, 70, -7, -7, 449, 70,
	-7, -7, -7, -7, -7, -7, 61, 276, 61, -711,
	414, 93, 364, 61, 61, -711, 414, -7, -516, 464,
	538, -7, -7, 532, -7, 313, 61, 414, 61, 61,
	-634, -639, 62, 286, 439, -635, -640, 62, 286, 414,
	61, -674, 355, -676, -121, -30, -157, -268, -103, 532,
	532, 532, -7, -629, 36, 531, 398, -7, -7, -7,
	-7, 74, -39, -42, -7, -7, -7, -7, -516, -7,
	-7, -7, -7, -516, 130, 130, 34, 130, 28, -7,
	-103, 211, 198, 29, -5, 464, 23, 83, 83, 321,
	-514, 448, 287, 410, 420, 465, 415, -514, 130, -433,
	530, 532, -7, -7, -433, -608, -605, 422, 246, -7,
	532, -103, -518, -517, 290, -268, -13, -13, -13, -13,
	-13, -522, -433, 64, -518, 52, 52, -523, 52, -523,
	52, 532, -525, -103, 47, -525, -525, -525, -525, -525,
	-525, 52, -525, -525, -131, 455, 532, -65, -156, -173,
	72, 70, -434, -434, -434, -434, -65, -65, 42, 30,
	30, -65, -65, 319, 319, -65, -65, 532, 532, -65,
	-103, -65, 532, -139, 370, 532, -340, 47, 47, -340,
	-171, 148, 532, 532, 64, 64, 41, 260, 42, 130,
	64, 532, 532, -81, -129, 489, 532, 483, 483, -322,
	70, -67, 132, 155, -65, -94, 541, -65, 354, -340,
	532, 47, 47, 532, -341, 129, -341, -341, -109, -173,
	532, 109, -264, -234, 117, -236, -65, -245, -281, -281,
	-295, 83, 74, 75, -281, -661, 531, -13, -284, 531,
	-307, -307, -5, -310, -311, -306, -321, 531, 541, -218,
	-228, -237, -238, 51, -258, -259, 531, -37, 150, -385,
	531, 304, 271, -413, 70, 532, 541, -370, 36, -361,
	-393, 449, 228, -351, -15, 122, -179, 273, -439, -695,
	36, -400, 531, 74, -678, -313, -666, -107, -104, -696,
	-103, 130, -108, -687, 393, -434, -646, 532, -434, -636,
	64, 61, -642, 312, 23, -14, 531, 31, -443, -372,
	31, -429, -429, -65, -262, 23, 40, 83, -15, -103,
	-419, -420, 422, -361, -351, 122, -7, 284, 422, 23,
	-393, -661, 273, 30, 45, -628, -402, -632, -65, 286,
	500, 286, 64, 527, 36, 45, 64, -356, -418, -5,
	40, -368, 532, 252, 476, 299, 253, 309, 532, 532,
	532, 541, 36, -235, -227, 39, -235, -65, 47, 28,
	28, -422, 47, 23, -42, -422, -108, -268, -42, -433,
	-433, 61, 61, -7, -402, -7, -402, 61, -7, -7,
	-7, -7, -7, 449, 70, -7, -7, -7, -7, 464,
	-433, -368, -7, -7, -516, -7, 541, -101, -101, -108,
	541, -101, -101, -7, -516, 513, -65, 61, 276, -13,
	-13, -15, -13, 29, -433, -103, -103, -433, -108, -108,
	-7, -7, -7, 61, 64, -510, -433, -433, -433, 532,
	-7, 73, 506, -512, -433, -523, -523, -523, -523, 52,
	-525, 532, 532, 532, -137, 484, -65, -53, -65, -65,
	-65, 532, -131, 70, 532, 532, -7, -65, -66, 64,
	-65, -65, -65, 532, 541, 532, 531, -322, 532, 532,
	435, 155, 532, -340, -331, -332, -330, -342, -343, 40,
	-344, 136, 47, 49, 43, 50, 138, -340, -92, 306,
	354, -137, -302, 87, 97, 110, 532, 541, -7, 155,
	-295, 531, -65, -281, 531, -13, 532, -307, 532, 532,
	532, 541, -312, 23, 123, -323, -324, -66, 40, -65,
	-225, -228, -229, 30, -229, 105, 31, -257, 115, 116,
	149, 47, 154, 151, 152, 42, 153, 148, -260, -265,
	-6, -258, -103, -413, -16, -367, 227, 230, 233, 251,
	298, 288, 308, 438, 439, 21, -367, -49, -5, -359,
	507, -385, -7, 27, 98, 380, 532, -353, -434, -439,
	-7, 513, 216, 58, 23, -264, -436, 541, 532, -121,
	266, -679, -4, -461, 464, -683, 130, -688, -690, -685,
	348, 502, -694, 64, 532, -282, 532, 433, 433, -643,
	-644, 478, 354, -614, -179, 532, 29, -394, 83, -394,
	532, -378, 337, 298, 531, -7, 532, 541, -7, 422,
	532, -434, -418, 246, -7, -179, 531, -712, -617, 531,
	-629, 64, 532, -449, -631, 23, -631, -15, -411, 531,
	531, 531, -370, -379, 303, -379, 392, -379, -363, -156,
	62, -399, -15, -15, 532, 29, 29, 531, 23, -320,
	-7, -7, -24, 93, -24, 93, -7, 61, -7, -402,
	61, -639, -156, -451, -449, 531, -640, 531, 531, 531,
	532, -7, -7, -718, 36, 518, -718, 34, -718, 130,
	-320, 532, -512, -512, 74, -7, -518, -523, -138, -140,
	-5, -169, -172, -65, -175, -177, -176, -178, 531, 238,
	408, 293, -144, 388, 127, 294, -129, 130, -66, -129,
	-90, 499, 354, -346, 168, 36, 541, 23, 532, 74,
	-65, 134, 139, -345, -343, 532, 306, -303, 90, 89,
	88, 93, -282, -234, -179, -13, -129, 532, 532, -314,
	-311, 531, -316, -317, -5, 541, 532, 23, -66, -329,
	23, 106, -65, 106, 105, -650, -650, -650, -650, 152,
	31, 47, -103, 532, 541, -266, -272, -268, 536, 40,
	531, -282, -49, 532, -392, 531, -370, -413, 127, 127,
	-384, -385, -353, -253, 506, 513, 513, -179, 532, -396,
	-666, -669, 540, -108, -691, 51, -713, 262, -690, -686,
	67, 411, -368, -434, 109, 36, 36, -614, 478, -695,
	-400, -434, 307, -375, 354, -383, -380, -381, 74, 79,
	369, 429, -424, 531, -65, -641, 279, -420, -418, -7,
	-384, -353, 140, -418, -439, 532, -661, -616, 7, -280,
	-631, 301, 205, -365, -362, -9, -129, -129, -429, 531,
	-429, -434, -429, 531, -163, -389, -235, -65, 298, -38,
	83, 449, 449, -7, -24, 93, -7, -702, 130, -702,
	-703, -703, -703, -65, -17, -17, -15, -15, -13, -433,
	-519, -433, -514, -418, -433, 541, 23, 541, 532, 531,
	531, 425, 532, -145, -146, 37, 467, 120, -65, -145,
	-145, -65, 532, 532, 155, -347, 145, 144, 140, 134,
	140, 134, 141, 142, -332, -6, 136, 532, 74, -14,
	91, 91, -216, 532, 532, -307, 532, 541, -108, 130,
	-324, 541, -6, -341, -5, -231, -232, 109, 97, 98,
	-233, 109, 96, 70, -103, -103, -103, -103, -14, 536,
	47, -14, 536, -265, -261, -267, -272, -392, -393, -387,
	-388, -5, -306, 531, -49, -385, -413, -361, -439, 506,
	506, -695, -398, 303, 531, -678, 273, 531, -684, 411,
	437, -650, 130, -440, 315, 200, 286, 286, 23, 531,
	449, 309, -381, 74, -380, 74, 97, 98, -423, 532,
	23, -15, -418, 422, -361, -7, 531, 532, 541, 532,
	541, -101, 532, 532, -394, -14, -394, -262, -394, -156,
	-164, -163, 532, -424, -65, -7, -7, 449, -421, 391,
	87, 509, -421, 532, 532, 532, 532, -718, 64, -140,
	-141, -172, -129, -129, 531, -147, 270, -146, 377, 283,
	411, 377, 283, -147, -147, -345, 143, 143, 140, 140,
	134, 140, 134, 140, 138, 136, 93, 70, 70, -282,
	-286, 23, -135, 399, 532, -317, -318, -319, 4, 40,
	31, 47, 128, 124, -67, 123, 110, 93, 110, -226,
	102, 531, 40, 86, 107, 108, -14, 536, 532, 541,
	-393, 532, 541, -227, -227, -65, -392, -413, -49, -385,
	-377, 531, -264, -712, -65, -693, -5, 262, -444, 110,
	-447, 531, -179, -185, -186, -187, -210, -297, -449, -449,
	-179, -7, -382, 354, 35, 24, 93, -382, 532, 440,
	-634, -7, 422, -418, 532, 7, -362, 61, -368, 532,
	-368, -378, -282, 532, -164, -24, -24, -7, 70, -449,
	-15, -512, 532, 532, -169, 120, 71, 455, 354, 30,
	532, 74, 74, 140, 140, -343, -5, -14, -14, -5,
	531, -319, -66, -66, 47, -66, -321, 531, -216, -236,
	-215, 86, 531, -267, -388, -399, -399, 532, -393, -49,
	-392, -413, -400, -397, -234, 532, -661, 532, 411, -181,
	-182, -445, -448, -447, 541, 541, -695, 195, 47, 40,
	-418, -7, 531, -383, -368, -24, -15, -433, 532, 411,
	501, -146, 146, 146, 74, 61, 83, 93, 93, -65,
	123, -326, -327, -5, 131, 155, 532, -129, -227, -392,
	-393, -49, -393, 532, 541, -398, 531, -691, 532, 540,
	61, 64, -262, -262, -418, -129, -368, 147, 147, 136,
	-68, -661, 166, -5, -5, -5, 532, -316, 532, 541,
	130, -108, -350, 128, -226, -226, 102, 532, -399, -393,
	-392, -282, -234, -377, -689, -692, -101, 6, -103, -6,
	273, -448, 433, 433, 532, 40, 531, 532, -342, -327,
	124, -328, -348, 29, 128, 7, -236, -393, -400, 532,
	541, -712, 36, 36, -68, -82, 532, -346, -328, -328,
	7, 123, 23, 155, -393, -692, -661, 286, 286, 83,
	-131, -347, -346, -342, 531, -7, -226, -282, 531, -449,
	-449, -5, 532, -345, -347, -326, 123, -689, -345, 532,
	531, 532, -326, 532,
}

var yyDef = [...]int16{
	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
	90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 2997, 2997, 1546, -2,
	0, 1828, -2, 1891, 1891, 0, 0, 0, 0, 0,
	2997, 0, 2997, 2997, 0, 0, 0, 0, 0, 1633,
	1905, 1901, 0, 1901, 2328, 2329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 170, 170, 0,
	0, 0, 0, -2, 1537, 1632, 0, 2304, 2305, 1668,
	0, 1579, 0, 0, 0, -2, 3000, 2995, 2996, 2752,
	0, 0, 0, 0, 1633, 0, 1827, 0, 0, 2896,
	0, 128, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 0,
	0, 0, 0, 0, 0, 1956, 1957, 0, 0, -2,
	2129, 2873, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1890, 0, 0,
	0, 0, 0, 2339, 135, 0, 135, 0, 0, 0,
	0, 0, 0, 0, 2335, 2336, 2337, 0, 0, 2341,
	2342, 2343, 0, 0, 0, 1874, 0, 1877, 1878, 1879,
	1880, 1881, 1882, 0, 0, 0, 2260, 329, 440, 474,
	2265, 2700, 0, 557, 213, 430, -2, 421, 507, 2715,
	145, 146, 147, 184, 185, 186, 187, 188, 189, 190,
	191, 192, 193, 194, 195, 196, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 206, 207, 208, 209, 210,
	211, 212, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 288, 289, 290, 291,
	292, 293, 294, 295, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 306, 307, 308, 309, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 323, 324, 325, 326, 327, 328, 330, 331, 332,
	333, 334, 335, 336, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 358, 359, 360, 361, 362, 363,
	364, 365, 366, 367, 368, 369, 370, 371, 372, 373,
	374, 375, 376, 377, 378, 379, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 392, 393,
	394, 395, 396, 397, 398, 399, 400, 401, 402, 403,
	404, 405, 406, 407, 408, 409, 410, 411, 412, 413,
	414, 415, 416, 417, 418, 419, 420, 422, 423, 424,
	425, 426, 427, 428, 429, 431, 432, 433, 434, 435,
	436, 437, 438, 439, 441, 442, 443, 444, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	457, 458, 459, 460, 461, 462, 463, 464, 465, 466,
	467, 468, 469, 470, 471, 472, 473, 475, 476, 477,
	478, 479, 480, 481, 482, 483, 484, 485, 486, 487,
	488, 489, 490, 491, 492, 493, 494, 495, 496, 497,
	498, 499, 500, 501, 502, 503, 504, 505, 506, 508,
	509, 510, 511, 512, 513, 514, 515, 516, 517, 518,
	519, 520, 521, 522, 523, 524, 525, 526, 527, 528,
	529, 530, 531, 532, 533, 534, 535, 536, 537, 538,
	539, 540, 541, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 553, 554, 555, 556, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 2274, 2266, 557, 474, 440, 2270,
	2271, 213, 329, 347, 421, 430, 507, 3000, 2752, 3000,
	0, 3000, 0, 2985, 440, 474, 557, 428, 2987, 474,
	3206, 155, 0, 3062, 3063, 3067, 2524, 2524, 2524, 194,
	2524, 0, 0, 3062, 2524, 2275, 1901, 1633, 0, 2288,
	2289, 2290, 2291, 2292, 2293, 2294, 2689, 1899, 0, 1904,
	2300, 0, 1900, 2306, 557, 474, 440, 2310, 0, 2316,
	0, 0, 2330, 2331, 2332, 2333, 2334, 3176, 1653, 3180,
	3182, 0, -2, -2, -2, -2, 186, 409, 3201, 3201,
	-2, -2, 3198, 3199, 1251, 0, 0, 1249, 3181, 3202,
	3203, 3216, 3218, 388, 3220, 3222, 3223, 3224, 3227, 3228,
	1468, 1250, 0, 169, 0, 1891, 3272, 3275, 3276, 3278,
	0, 3280, 0, 1388, 0, -2, -2, 1465, 574, 575,
	576, 577, 578, 579, 580, 581, 582, 583, 584, 585,
	586, 587, 588, 589, 590, 591, 592, 593, 594, 595,
	596, -2, 0, 2905, 2905, 2905, 0, -2, 1550, 1551,
	0, 1551, 0, 1584, 0, 1667, 1669, 1578, 1607, 1608,
	161, 0, 0, 1629, 404, 1634, 164, 1630, 0, 2,
	2993, 0, 2994, 2751, 2739, 0, 0, 2745, 0, 0,
	0, 1612, 0, 0, 0, 3207, 3208, 3209, 3210, 3211,
	2524, 0, 0, 0, 0, 141, 0, 0, 0, 0,
	0, 0, 0, 1891, 2895, -2, 0, -2, 298, 2059,
	1897, 180, 0, 217, 279, 1534, 0, 1520, 1521, 1522,
	1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532,
	1533, 2557, 0, 0, 298, 2059, 298, 0, 0, 2621,
	298, 334, 2059, 2166, 2167, 2168, 2169, 2170, 2733, 2734,
	2735, 2736, 0, 0, 0, 2795, 0, 0, 164, 298,
	129, 2760, 0, 0, 0, 2059, 2059, 1958, 1959, 1960,
	1961, 0, 298, 0, 3340, 298, 0, 0, 298, 0,
	298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3347, 0, 3340, 0, -2, 3154, 0, 2166, 0, 217,
	279, 0, 0, 0, 298, 3340, 0, 3340, 0, 0,
	0, 0, 0, 0, 0, -2, 3010, 0, 334, -2,
	3010, 0, 0, 298, 0, 0, 0, 3049, 0, 298,
	133, 182, 298, 133, 156, 0, 298, 133, 298, 1888,
	1454, 0, 1455, 1456, 1457, 1458, 1459, 1268, 1462, 1472,
	1475, 1476, 1477, 1478, 1479, 1515, 260, 1472, 1472, 1472,
	1485, 1486, 1487, 1488, 1489, 1511, 1511, 1254, 1508, 1463,
	1464, 1513, 1501, 1513, 1513, 1496, 0, 1513, 133, 298,
	0, 0, 0, 0, 0, 0, 133, 298, -2, 298,
	2541, 298, 0, 334, 3015, 298, 2164, 3013, 298, 3017,
	298, 2338, 0, 2340, 0, 1872, 1873, 1876, 141, 0,
	0, 2261, 440, 2262, 215, 0, 2263, 0, 0, 0,
	0, 0, 0, 2703, 2704, 2705, 2728, 2729, 2706, 2731,
	2732, 0, 2267, 0, 2269, 2981, 2982, 2983, 2991, 2984,
	0, 2992, 2986, 2990, 0, 0, 0, 0, 0, 3064,
	0, 3069, 0, 3070, 3071, 3072, 3073, 0, 0, 0,
	0, 1633, 2277, 0, 2279, 2287, 561, 2282, 2283, 2284,
	2688, 1901, 1898, 0, 2297, 2299, 2301, 164, 0, 2307,
	0, 2309, 0, 2319, 0, -2, 141, 141, 141, 2323,
	2324, 2325, 2326, 0, 0, 3183, 0, 3200, 0, 0,
	0, 3201, 3201, 0, 0, 0, 3201, 3201, 0, 3201,
	3201, 1252, 1253, 3212, 0, 3219, 3221, 3225, 0, 3231,
	167, 3374, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2339, 1883, 1884,
	1885, 1886, 1887, 0, 0, 3277, 3279, 0, 1389, 1273,
	0, 1276, 2960, 1563, 1560, 0, 2957, 2958, 1564, 0,
	0, 0, 1572, 0, 2903, 2904, 0, 0, 0, -2,
	0, 1548, 1549, 1674, 1583, 1585, 1589, 1590, 1127, 0,
	0, 0, 0, 0, 0, 2028, 1194, 1217, 1218, 1281,
	0, 1221, 1222, 1223, 520, 0, 1228, 1229, 524, 1516,
	367, 553, 1271, 1236, 1237, 1238, 1239, 1240, 1241, 1242,
	1243, 0, 0, 0, 1404, 1539, 1541, 1285, 1231, 1232,
	1233, 1234, 1235, -2, 534, 531, 576, 1287, 1288, 1290,
	1292, 1294, 1296, 1297, 1298, 1299, 1300, 1301, -2, 0,
	521, 545, 549, 550, 556, 559, 560, 546, 517, 523,
	540, 564, 565, 567, 569, 566, 570, 571, 533, 530,
	-2, 536, 537, 541, 535, 532, 539, 572, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 542, -2,
	-2, -2, -2, -2, -2, -2, 1490, 1491, 1492, 1493,
	1674, 0, 1609, 162, 1610, 0, 0, 0, 1631, 0,
	0, 0, 1444, 2998, 0, 0, 2741, 0, 2743, 2744,
	2746, 0, 1792, 0, 1613, 0, 1814, 0, 0, 0,
	2524, 298, 0, 2524, 0, 2572, 298, 128, 140, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1962, 0,
	2530, 0, 3347, 2057, 2058, 0, 1896, 181, 0, 2555,
	0, 2874, 0, 0, 2556, 0, 0, 0, 0, 0,
	2562, 0, 0, 2580, 0, 0, 0, 298, 2625, 0,
	0, 0, 0, 3020, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2829, 0, 0, 0, 0, 0, 3020,
	3020, 2139, 2152, 2239, 0, 2160, 0, 0, 0, 2239,
	2239, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2231, 0, 0, 0, 2141, 2143, 0,
	0, 0, 3339, 0, 0, 0, 2144, 0, 2575, 0,
	2037, 0, 0, 0, 2041, 2056, 2044, 0, 0, 0,
	0, 2059, -2, 2054, 0, 2146, 2239, 0, 0, 3340,
	298, 0, 0, 298, 0, 2311, 0, 2312, 0, 0,
	0, 2357, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3357, 3347, 3343, 0, 0, 3362, 3346, 2273, 3348,
	3361, 3353, 0, 3355, 3356, 3358, 3359, 0, 2546, 0,
	0, 0, 0, 0, 0, 3151, 0, 0, 0, 3121,
	3339, 0, 0, 3125, 3126, 3127, 3128, 0, 0, 3133,
	0, 0, 0, 0, 3138, 0, 2477, 3152, -2, 0,
	0, 3038, 3039, 0, 0, 0, 0, 0, 2352, 0,
	0, 0, 0, 3151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3151, 0, 0, 0, 0, 0, 0,
	2618, 2619, 0, 0, 0, 0, 0, 0, 0, 0,
	2854, 2855, 0, 0, 0, 0, 0, 0, 3022, 0,
	0, 0, 0, 0, 3022, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3159, 0, 3160, 0, 2587, 1891, 0,
	0, 0, 1866, 0, 0, 1869, 0, 0, 2241, 131,
	132, 0, 0, 2243, 0, 0, 0, 2246, 0, 1446,
	1450, 1454, 1460, 0, 1255, 1256, 1257, 1258, 1259, 1260,
	1269, 1473, 1472, 0, 1480, 0, 1481, 1482, 1483, 1484,
	0, 1505, 0, 0, 0, 1507, 1503, 1512, 0, 1494,
	1495, 1513, 1513, 1499, 2248, 0, 133, 298, 0, 134,
	0, 298, 0, 298, 0, 2258, 0, 0, 0, 0,
	133, 0, 0, 0, 0, 0, 0, 1875, 2344, 2345,
	2346, 2347, 0, 0, 2632, 0, 0, 2707, 2708, 2710,
	2701, 2711, 2713, 2717, 2719, 2720, 1862, 1863, 1864, 1865,
	2712, 2714, 2716, 2702, 2721, 2722, 0, 2725, 2726, 2727,
	2709, 2737, 2738, 2268, 428, 2989, 1633, 0, 2878, 0,
	3074, 0, 436, 0, 287, 394, 424, 242, 259, 322,
	323, 377, 430, 467, 479, 0, 165, 3108, 3068, 0,
	0, 158, 160, 0, 0, 0, 3108, 0, 2276, 1633,
	0, 2281, 2285, 2286, 1903, 2300, 0, 2303, 2300, 2308,
	2314, 2315, 0, 0, 0, 0, 128, 2327, 3179, 3171,
	3172, 3173, 3174, 0, 3184, 3185, 3186, 3187, 0, 0,
	3190, 3191, 3192, 0, 0, 3195, 0, 0, 0, 3226,
	0, 2163, 0, 133, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 217, 279, 0, 0, 0, 0,
	0, 0, 0, 1891, 3271, 1390, 0, 1537, 0, 0,
	0, 1397, 1399, 0, -2, 1274, 1277, 1278, 1466, 148,
	149, 150, 151, 152, 597, 598, 599, 600, 601, 602,
	603, 604, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 614, 615, 616, 617, 618, 619, 620, 621, 622,
	623, 624, 625, 626, 627, 628, 629, 630, 631, 632,
	633, 634, 635, 636, 637, 638, 639, 640, 641, 642,
	643, 644, 645, 646, 647, 648, 649, 650, 651, 652,
	653, 654, 655, 656, 657, 658, 659, 660, 661, 662,
	663, 664, 665, 666, 667, 668, 669, 670, 671, 672,
	673, 674, 1275, 0, 1554, 2959, 1555, 1562, 1565, 0,
	0, 1567, 0, 1569, 0, 2955, 2956, 2961, 2969, 2970,
	0, 2979, 2980, 2967, 0, 2971, -2, 0, 0, 1575,
	0, 1580, 1581, 1582, 2921, 2922, 1944, 2960, 1563, 1592,
	0, 0, 0, 729, 697, 1522, 1523, 1524, 1525, 1526,
	1527, 1528, 1529, 1530, 1531, 1532, 1533, 0, 690, 944,
	-2, 0, -2, 1031, 862, 1165, 1167, -2, 841, 0,
	0, 1588, -2, 941, 1424, 153, 154, 675, 676, 677,
	678, 679, 680, 681, 682, 683, 684, 685, 686, 687,
	688, 689, 691, 692, 693, 694, 695, 696, 698, 699,
	700, 701, 702, 703, 704, 706, 707, 708, 709, 710,
	711, 712, 713, 714, 715, 716, 717, 718, 719, 720,
	721, 722, 723, 724, 725, 726, 727, 728, 730, 731,
	732, 733, 734, 735, 736, 737, 738, 739, 740, 741,
	742, 743, 744, 745, 746, 747, 748, 749, 750, 751,
	752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 776, 777, 778, 779, 780, 781,
	782, 783, 784, 785, 786, 787, 788, 789, 790, 791,
	792, 793, 794, 795, 796, 797, 798, 799, 800, 801,
	802, 803, 804, 805, 806, 807, 808, 809, 810, 811,
	812, 813, 814, 815, 816, 817, 818, 819, 820, 821,
	822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
	832, 833, 834, 835, 837, 838, 839, 840, 842, 843,
	844, 845, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 861, 863, 864,
	865, 866, 867, 868, 869, 870, 871, 872, 873, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 888, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 942, 943, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 973, 974, 975, 976, 977,
	978, 979, 980, 981, 982, 983, 984, 985, 986, 987,
	988, 989, 990, 991, 992, 993, 994, 995, 996, 997,
	998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
	1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
	1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
	1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068,
	1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078,
	1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088,
	1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098,
	1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108,
	1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118,
	1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1132, 1133,
	1147, 1150, 1151, 0, 0, 0, 1219, 1444, 0, -2,
	1224, 1225, 1226, 1227, 0, 0, 0, 0, -2, 1244,
	0, 1246, 1268, 0, 0, 1403, 1541, 0, 2933, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1347, 0, 1347, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1744, 1744, 0, 0,
	0, 0, 0, 0, 0, 0, 1592, 0, 0, 0,
	1635, 1639, 0, 0, 1646, 0, 0, 0, 0, 1426,
	1428, 0, 0, 1542, 0, 0, 2999, 2740, 2742, 0,
	0, 2750, 1927, 1794, 0, 0, 0, 0, 1592, 1805,
	0, 0, 1281, 1614, 1652, 0, 0, 1823, 1823, 1820,
	1821, 1965, 0, 0, 2117, 0, 0, 2138, 0, 2569,
	2571, 0, 0, 0, 298, 127, 2456, 0, 2456, 0,
	2480, 2481, 0, 0, 0, 2554, 0, 0, 0, 0,
	0, 0, 2695, 2694, 2696, 2697, 2698, 2699, -2, 128,
	2533, 3357, 2017, 0, 1469, 0, 2777, 2779, 0, 0,
	1535, 1688, 0, 0, 0, 0, 0, 0, 2564, 0,
	2577, 0, 2612, 1965, 0, 0, 0, 2624, 2620, 0,
	0, 2640, 2641, 0, 3002, 0, 298, 2524, 0, 0,
	0, 2794, 2801, 0, 0, 0, 0, 2760, 2836, 0,
	466, -2, 2524, 2844, 0, 2759, 0, 0, 0, 3001,
	3003, 0, 0, 0, 0, 2238, 0, 2203, 2204, 0,
	0, 2224, 0, 0, 0, 0, 2171, 298, 0, 2195,
	0, 0, 2074, 0, 2028, 0, 0, -2, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2217, 0, 0, 2219, 2220, 0, 2225, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2038, 0, 2042, 2047, 2048, 2039, 2040, 0, 2055, 2045,
	2046, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2148, 2239, 0, 0, 0, 0, 2150, 2239, 0, 0,
	2612, 0, 0, 0, 0, 2349, 2350, 0, 0, 2445,
	2446, 2447, 2448, 2450, -2, 2452, 0, 0, 0, 0,
	3341, 0, 0, 0, 0, 0, 3342, 2272, 467, 0,
	3349, 0, 3360, 3354, 0, 0, 2237, 0, 0, 0,
	0, 0, 2549, 0, 2663, 0, 0, 0, 0, 0,
	3118, 3122, 3150, 0, 2476, 430, 440, 474, 0, 0,
	0, 0, 0, 3131, 3132, 3134, 3135, 3136, 3137, 3139,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2812, 0, 0, 3119, 430, 0, 0, 0, 2832,
	2834, 2833, 2835, 0, 0, 3120, 430, 0, 0, 0,
	0, 0, 2617, 0, 2622, 2623, 0, 2848, 0, 2849,
	2760, 0, 0, 2856, 0, 0, 3340, 0, 2783, 0,
	2784, 2787, 0, 3004, 3006, 0, 0, 3007, 0, 0,
	3005, 3008, 3009, 0, 2796, 2797, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 137,
	0, 0, 0, 0, 0, 0, 0, 0, 2585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3047, 3048, 0, 0, 0, 0, 0, 1867, 1868,
	133, 183, 133, 157, 133, 0, 1889, 133, 0, 0,
	1447, 1451, 0, 0, 0, 0, 0, 0, 1474, 0,
	0, 0, 0, 0, 0, 0, 0, 1497, 1498, 133,
	2250, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	-2, 2542, 2543, 0, 0, 2165, 3016, 3014, 3018, 2693,
	0, 0, 0, 0, 2634, 0, 0, 1268, 0, 2988,
	3204, 0, 3205, 0, 0, 3075, 3076, 0, 0, 3079,
	3156, 3080, 3081, 3082, 3083, 3084, 0, 3086, 3109, 3111,
	3087, 3088, 3089, 0, 0, 0, 0, 0, 3043, 0,
	0, 0, 0, 3065, 2523, 0, 0, 3062, 133, 0,
	2278, 2280, 2300, 1902, 2296, 2302, 2298, 2319, 2318, 2317,
	2320, 2321, 2322, 0, 0, 0, 3175, 3188, 3189, 3193,
	3194, 3196, 3197, 3215, 168, 3229, 2162, 0, 0, 0,
	3236, 3238, 3240, 3372, 3373, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1391, 0, 0, 1536, 1537, 1537, 1537, 0,
	0, 1279, 1276, 1561, 0, 1570, 0, 0, 0, 2972,
	0, 0, -2, -2, 0, 2968, 2977, 2978, 2973, -2,
	-2, 2974, 1566, 1573, 0, 1571, 0, 0, 1947, 1942,
	1943, 1558, 1559, 1649, 0, 1673, -2, -2, 329, 290,
	-2, 0, 179, 1586, 1128, 1129, 0, 1131, 1134, 1135,
	1136, 1137, 1138, 1139, -2, -2, -2, -2, -2, -2,
	1146, 1148, 1149, -2, 1427, 1429, 0, 1542, 0, -2,
	0, 1164, 0, 1169, 1171, 1173, 0, 1186, 1188, 0,
	1443, 1430, 1431, 1432, 1433, 1434, 0, 0, 1543, 1181,
	1544, 0, 0, 1421, 1422, 1423, 1587, 0, 1168, 0,
	0, 1185, 2026, 0, 1282, 1281, 0, 0, 0, 1412,
	1413, 0, 0, 0, -2, 1537, 1247, 0, 1409, 1405,
	0, 2933, 0, 1284, 0, 0, 1735, 1127, 0, 1740,
	1778, 0, 0, 0, 0, 0, 0, 0, 0, 1357,
	1358, 1359, 1360, 1361, 1362, 1363, 1364, 0, 0, 0,
	1399, 1346, 0, 0, 1195, 0, 0, 0, 553, 0,
	0, 1399, 0, 0, 0, 0, 0, 1444, 0, 1355,
	0, 0, 0, 0, 0, 0, 0, 1369, 1372, 0,
	0, 0, 0, 0, 1735, 0, 1729, 0, 1399, 1738,
	1778, 0, 1727, -2, 1443, 0, 1744, 1341, 0, 0,
	0, 0, 1649, 0, 1611, 1647, 0, 1637, 0, 163,
	1445, 2747, 2748, 2749, 1949, 0, 0, 1799, 1800, 0,
	1801, 1281, 1798, 1793, 1652, 0, 0, 0, 1810, 1809,
	1949, 0, 1813, 1593, 1655, 1655, 0, 1599, 0, 1664,
	1655, 1655, 1678, 426, 573, 538, 161, 1385, 1386, 1387,
	529, 0, 0, 1822, 0, 0, 1964, 1966, 160, 1968,
	1969, 1970, 0, 1994, 0, 144, 0, 0, 2693, 0,
	0, 0, 0, 0, 0, 0, 0, 2470, 2455, 2457,
	0, 0, 0, 2462, 2463, 0, 2435, 2436, 2438, 2470,
	0, 2483, 2485, 2486, 2487, 2489, 2482, 0, 2553, 0,
	0, 0, 0, 2646, 2650, 2648, 1463, 0, 0, 2893,
	2524, 0, 2529, 0, 0, 0, -2, 2545, 1470, 2776,
	0, 0, 0, 2880, 0, 1687, 1689, 0, 2659, 2568,
	2558, 2559, 2560, 2561, 0, 2579, 0, 0, 0, 2584,
	2059, 2009, 2611, 2609, 0, 0, 0, 0, 0, 0,
	0, 2621, 0, 0, 3019, 3023, 0, 0, 0, 0,
	0, 0, 0, 3033, 3034, 0, 0, 0, 0, 0,
	2117, 0, 0, 2138, 2803, 0, 0, 2818, 2819, 0,
	2824, 2826, 2827, 0, 164, 2760, 2831, 0, 2524, 0,
	-2, 2846, 2846, 0, 0, 0, 2161, 2380, 0, 0,
	2200, 2202, 0, 2223, 3292, 0, 2424, 2427, 0, 141,
	0, 2173, 298, 1992, 0, 0, 0, 2415, 0, 0,
	0, 0, 0, 1893, 0, 2415, 298, 133, 298, 133,
	2197, 2201, 2205, 2208, 2209, 0, 0, 0, 0, 2213,
	0, 2210, 2211, 2212, 2216, 0, 2218, 0, 2221, 2226,
	2772, 2773, 2774, 0, 0, 0, 2764, 2766, 441, 189,
	261, 0, 2013, 2140, 2153, 2239, 0, 0, 2388, 0,
	2235, 2142, 0, 0, 2382, 3299, 2043, 2049, 2050, 2051,
	2053, 2145, 0, 2576, 0, 2384, 0, 3301, 2147, 2239,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, -2, 0, 2360, 3281, 3308, 2348, 0,
	0, 2444, 0, 2443, 1472, 2449, 1472, 1472, 2361, 3282,
	3309, 2362, 3283, 3310, 2363, 3311, 3344, 3345, 3350, 3351,
	3352, 2364, 0, 2547, 133, 298, 2236, 2548, 3284, 0,
	0, 2415, 2552, 3312, 2367, 3286, 3313, 0, 0, 0,
	3129, 3130, 2368, 3012, 0, 0, 0, 0, 3287, 0,
	3140, 3144, 3316, 2353, 0, 0, 0, 2814, 0, 0,
	2374, 3290, 3319, 0, 2375, 3330, 2376, 3291, 3320, 0,
	2377, 3321, 2378, 3328, 2379, 2760, 2850, 2760, 2760, 3331,
	0, 0, 0, 0, 0, 2785, 2786, 2405, 3021, 3011,
	2406, 0, 2407, 3323, 2408, 2822, 1870, 1871, 3294, 3324,
	0, 0, 0, 0, 0, 0, 3371, 0, 0, 0,
	0, 0, 0, 0, 0, 2413, 0, 0, 0, 0,
	133, 2657, 298, 133, 0, 3307, 3161, 0, 0, 3322,
	1893, 2586, 0, 2589, 2590, 2591, 0, 2593, 2594, 2595,
	217, 279, 2598, 2599, 0, 2601, 3285, 0, 0, 0,
	0, 0, 0, 0, 2240, 2242, 2244, 0, 2247, 1452,
	0, 0, 0, 1461, 1261, 1262, 1263, 1264, 1265, 1266,
	1267, 0, 1471, 1514, 1511, 1509, 1510, 1511, 0, 1500,
	2249, 133, 0, 133, 0, 133, 0, 0, 2259, 0,
	2538, 2540, 0, 0, 0, 2668, 0, 2544, 0, 0,
	2633, 2264, 2718, 2723, 0, 2879, 3100, 3095, 3097, 0,
	166, 0, 3078, 0, 3085, 3113, 0, 0, 0, 0,
	0, 0, 0, 3108, 3102, 0, 0, 3066, 159, 3108,
	0, 3045, 0, 2295, 2313, 0, 3177, 3178, 3230, 3232,
	3239, 3233, 3234, 0, 0, 3241, 3259, 3260, 3242, 3243,
	3244, 3245, 3246, 3247, 3248, 0, 0, 0, 259, 0,
	3252, 3253, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1392, 0, 1398, 0, 0,
	0, 0, 1400, 1401, 0, 1275, 1568, 2962, 0, 2965,
	0, 2975, 2976, 0, 0, 1574, 2923, 1947, 1518, 0,
	2925, 0, 2907, 0, 1591, 0, 0, 170, 170, 170,
	170, 0, 178, 0, 0, -2, -2, 0, 0, 0,
	1182, 0, -2, 1166, 1170, 1172, 1174, 0, 1187, 1190,
	0, 1443, 0, 1189, 1192, 0, 0, 1435, 1436, 1437,
	1438, 0, 0, 0, 1183, 0, 0, 0, 0, 2027,
	1220, 1445, 1410, 1411, 0, 1230, 1517, -2, 0, 0,
	0, 1406, 0, 0, 1283, 0, 2931, 2932, 2936, 0,
	1443, 0, 0, 0, 0, 1738, 0, 1719, 1777, 0,
	0, 1289, 1291, 1293, 1295, 0, 1304, 0, 1305, 0,
	1307, 1308, 0, 1309, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1197, 1198, 1212, 1310, 1311, 0, 0, 0, 0,
	0, 0, 0, 1316, 0, 1354, 0, 1318, 1319, 1320,
	1321, 0, 1326, 0, 0, 1375, 0, 0, 0, 0,
	1332, 1443, 0, 1334, 1778, 1744, 0, 0, 0, 1744,
	1337, 0, 1339, 0, 0, 0, 0, 0, 2907, 1670,
	1633, 1638, 1791, 0, 1930, 0, 0, 0, 1803, 1949,
	1806, 1807, 0, 0, 1812, 1650, 238, 0, 0, 0,
	0, 0, 1626, 1626, 1626, 1624, 1595, 1654, 0, 1659,
	1597, 1655, 1664, 1655, 1655, -2, 1599, 0, 1601, 1660,
	0, 1659, 1603, 1605, 1675, 0, 0, 0, 0, -2,
	0, 2059, 1824, 1825, 1826, -2, 2107, 0, 1974, 2109,
	0, 1994, 2121, 0, 0, 2116, 2524, 0, 2670, 3216,
	0, 2137, 0, 2572, 2132, 0, 2456, 0, 2451, 2432,
	2468, 0, 0, 2458, 2459, 2464, 2460, 2461, 0, 2434,
	0, 0, 0, 2433, 0, 0, 0, 0, 2642, 2643,
	0, 0, 0, 2649, 0, 0, 0, 3166, 3167, 3168,
	3169, 0, 0, 2138, 0, 0, 0, 2532, 2016, 0,
	2019, 2020, 0, 0, 2065, 2028, 0, 0, 0, 0,
	0, 2022, 0, 2778, 2780, 2753, 2754, 2755, 2756, 2757,
	2758, 367, 1522, 1523, 0, 2566, 0, 1693, 0, 2658,
	2660, 2563, 0, 2581, 2582, 2583, 2580, 2602, 0, 2610,
	2605, 2613, 2606, 2608, 2607, 2107, 1994, 0, 0, 2625,
	2009, 0, 3024, 3025, 3026, 0, 0, 3029, 3030, 0,
	0, 0, 0, 3037, 2693, 0, 2138, 2415, 0, 0,
	2793, 2810, 0, 2800, 0, 0, 0, 0, 0, 2830,
	2837, 2846, 0, 2846, 2841, 0, 2843, 2760, 0, 0,
	0, 0, 2222, 2770, 2771, 2423, 0, 0, 0, 2232,
	0, 2004, 2233, 2234, 0, 0, 1988, 1991, 0, 2073,
	2132, 0, 0, 2077, 0, 0, 2415, 0, 0, 2131,
	2175, 0, 0, 0, 0, 2188, 0, 2194, 2031, -2,
	0, 2196, 0, 2192, 0, 2199, 2206, 2214, 2207, 2215,
	2227, 2228, 0, 0, 2229, 2763, 0, 2767, 2768, 2769,
	2012, 2014, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2386, 0,
	3303, 0, 2149, 2239, 0, 0, 2390, 0, 3305, 2151,
	2239, 0, 0, 2603, 0, 2351, 2441, 2442, 0, 1472,
	0, 2550, 0, 2662, 0, 2665, 0, 3123, 0, 2369,
	3314, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3332, 0, 0, 0, 0, 0, 2816, 0, 2811, 0,
	0, 0, 2853, 2851, 2852, 0, 0, 0, 2404, 3329,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2653, 0, 3162,
	0, 3164, 3158, 0, 0, 2588, 0, 0, 0, 0,
	0, 0, 0, 3050, 3051, 3052, 3315, 133, 1453, 1448,
	0, 1270, 1504, 1506, 1502, 2251, 0, 2253, 0, 2255,
	0, 133, 2536, 0, 0, 2638, 0, 2691, 0, 0,
	0, 0, 3108, 0, 0, 3098, 3077, 3157, 0, 3110,
	3112, 0, 0, 0, 0, 0, 3044, 0, 3103, 3104,
	3105, 3106, 3107, 133, 0, 3108, 3170, 3235, 3237, 0,
	0, 0, 0, 0, 0, 3257, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1537, 1393, 1395,
	1396, 1280, 2963, 0, 2966, 0, 1419, 0, 2924, 0,
	1945, 1946, 2920, 0, 1648, 171, 172, 0, 0, 0,
	0, 177, 1130, -2, 0, 0, -2, 0, 0, -2,
	0, 0, 1191, 1193, -2, 1440, 1442, 0, 0, 1545,
	0, -2, 0, 1416, 0, -2, 1414, 1392, 1248, 1402,
	1408, 0, 0, 2938, 2935, 0, 1744, 0, 0, 1731,
	1732, 1744, 0, 1776, 1286, 0, 1356, 0, 0, 1196,
	1199, 1200, 1201, 1202, 1203, 1204, -2, -2, -2, -2,
	-2, -2, 1211, 0, 0, 1215, 1367, 0, 1350, 1351,
	0, 1313, 1314, 1315, 1353, 0, 1322, 0, 1370, 1371,
	0, 0, 0, 1328, 1696, 0, 207, 1329, 0, 1384,
	0, 1744, 1730, 1743, 0, 1728, 0, 0, 0, 1338,
	1340, 1723, 1723, 1723, 0, 2920, 0, 1948, 0, 0,
	0, 1795, 1796, 0, 1802, 1804, 0, 1811, 0, 1594,
	0, 0, 0, 0, 0, 1621, 1625, 1622, 1623, 1596,
	0, 1657, 0, 1598, 1602, 1604, 1606, 1615, 1657, 0,
	0, 1677, 0, 0, 568, 0, 0, 1834, 2059, 0,
	1894, 2109, 0, 1967, 1971, 2117, 2108, 0, 0, 1995,
	1997, 1998, 2017, 0, 2123, 0, 142, 143, 1965, 0,
	0, 0, 2693, 2528, 2138, 2570, 0, 0, 2470, 0,
	2473, 2471, 0, 0, 0, 2437, 2439, 2440, 2491, 2484,
	2488, 0, 0, 2647, 0, 2651, 0, 2652, 0, 0,
	2898, 0, 0, 0, 298, 2695, 0, 2021, 2023, 2064,
	2760, 2760, 0, 2069, 2524, 0, 2029, 0, 2024, 2025,
	0, 1690, 1691, 0, 2567, 0, 2565, 2578, 0, 2614,
	0, 0, 1965, 0, 0, 0, 2635, 0, 3027, 3028,
	3031, 3032, 3035, 3036, 2666, 0, 2123, 2669, 0, 2508,
	2509, 0, 2788, 0, 2814, 0, 2802, 2804, 2805, 2806,
	2807, 2808, 2817, 2820, 2825, 2828, 0, 2838, 2839, 2840,
	2842, 0, 2847, 0, 0, 0, 2392, 2398, 2425, 2426,
	2429, 0, 2172, 0, 2009, 1987, 0, 1989, 1990, 2415,
	0, 2416, 0, 2418, 0, 0, 2126, 0, 2079, 0,
	0, 2084, 0, 1941, 1941, 0, 0, 2179, 2189, 1892,
	2035, 0, 0, 0, 0, 2183, 2185, 2186, 2184, 0,
	2032, 0, 0, 0, 0, 133, 133, 2230, 2775, 2765,
	2381, 0, 0, 3293, 0, 0, 3338, 2389, 0, 0,
	2383, 3300, 2394, 2385, 0, 3302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2366, 3327, 2453,
	0, 2365, 133, 2415, 3333, 3124, 0, 0, 0, 0,
	2881, 2866, 0, 0, 0, 2882, 2883, 0, 0, 0,
	0, 3141, 3142, 3143, 3145, 3146, 3147, 3148, 3149, 2354,
	2356, 2355, 2372, 2799, 0, 0, 0, 3334, 3335, 2402,
	2403, 0, 2637, 2823, 2409, 3295, 2410, 3296, 3325, 2411,
	3297, 2412, 3298, 3326, 0, 0, 0, 0, 0, 133,
	2656, 0, 0, 136, 133, 0, 0, 0, 0, 0,
	0, 3056, 3057, 3058, 3059, 3060, 3061, 0, 0, 2245,
	1449, 133, 133, 133, 2257, 2539, 0, 0, 2692, 0,
	2631, 2724, 3040, 3096, 0, 3114, 3090, 3091, 3092, 3093,
	3094, 3101, 3041, 0, 133, 0, 0, 3249, 0, 3251,
	0, 0, 3261, 3273, 3274, 3262, 3263, 3264, 3265, 3266,
	3267, 0, 3269, 3270, 0, 2964, 1418, 1445, 0, 2927,
	0, 2905, 173, 174, 175, 176, -2, -2, 0, 0,
	0, -2, -2, 1439, 1441, -2, -2, 1184, 1415, 1445,
	1245, 1407, 1538, 1537, 0, 1540, 0, 1733, 1734, 0,
	1739, 0, 1303, 1306, 0, 0, 0, 1216, 0, 0,
	0, 1312, 1317, 0, 0, 563, 1327, 1373, 1374, 1697,
	0, 1698, 1694, 1695, 0, 0, 0, 1379, 355, 0,
	1335, 1736, 1737, 1336, 1744, 0, 1760, 1744, 1378, 2927,
	1642, 0, 0, 1933, 0, 0, 1808, 1651, 1616, 0,
	1618, 0, 0, 0, 1620, 0, 0, 0, 1600, 0,
	0, 0, 155, 0, 1679, 1683, 0, 0, 0, 1949,
	1816, 1916, 1916, 0, 1818, 1831, 0, 1834, 0, 2117,
	0, 0, 0, 144, 0, 1993, 0, 1999, 0, 2109,
	3217, 0, 0, 0, 1994, 0, 2693, 0, 3213, 2519,
	0, 0, 0, 0, 2430, 0, 1684, 0, 1467, -2,
	2465, 0, 2466, 2501, 0, 2518, 0, 2644, 1649, 0,
	0, 0, 2900, 0, 0, 0, 1965, 0, 2531, 2018,
	0, 2125, 2125, 0, 2093, 0, 2030, 0, 1692, 2661,
	0, 2010, 0, 0, 0, 0, 2009, 0, 0, 0,
	2690, 0, 0, 0, 0, 2816, 2809, 0, 0, 0,
	2862, 2862, 0, 0, 0, 0, 0, 2174, 2017, 1985,
	1986, 2075, 2089, 2417, 2421, 2419, 2420, 2422, 2089, 0,
	2089, 0, 0, 1935, 130, 0, 1936, 0, 2176, 0,
	0, 2036, 2177, 0, 2181, 0, 1693, 2034, 2182, 2191,
	2198, 0, 0, 2163, 0, 2163, 0, 0, 2396, 3337,
	2387, 0, 3304, 0, 0, 2400, 2391, 0, 3306, 2454,
	2551, 2664, 2370, 3288, 3317, 2371, 0, 0, 0, 2872,
	0, 0, 0, 3289, 3318, 0, 0, 0, 0, 0,
	0, 0, 3367, 0, 2414, 2654, 2655, 3163, 1693, 0,
	2596, 2597, 2600, 0, 0, 0, 2252, 2254, 2256, 2537,
	2639, 0, 3099, 3108, 3046, 3255, 3256, 3250, 3254, 0,
	3268, 1394, 1420, 1519, 1576, 0, 2919, 0, -2, -2,
	-2, 1417, 2942, 0, 1741, 1742, 1775, 1366, -2, 0,
	1352, 1348, 1349, 1323, 0, 1324, 0, 1699, 1330, 1331,
	0, 1380, 1333, 1769, 1722, 1724, 0, 0, 0, 0,
	1746, 1747, 1748, 1749, 1750, 1751, 1754, 1758, 0, 1376,
	0, 1577, 1645, 0, 0, 1926, 1649, 0, 1929, 0,
	1617, 0, 1628, 1619, 0, 0, 1658, 0, 1661, 1663,
	1678, 0, 1681, 0, 0, 0, 1700, 0, 0, 1721,
	1815, 1817, 0, 0, 0, 1911, 0, 1833, 1835, 1836,
	1897, 1897, 1839, 1840, 1897, 1897, 0, 0, 0, 1850,
	1858, 1649, 1829, 144, 0, 1972, 1975, 1976, 1977, 1978,
	1979, 1980, 1981, 1982, 1983, 1984, 1973, 2121, 0, 1996,
	2017, 2117, 2122, 2118, 0, 0, 2107, 2109, 1994, 2671,
	3216, 0, 0, 0, 0, 0, 2132, 0, 2456, 1686,
	2469, 0, 2474, 2475, 0, 2507, 2503, 2490, 2492, 0,
	2495, 2496, 2415, 0, 2645, 0, 2888, 0, 0, 2894,
	2899, 0, 0, 2897, 2528, 2138, 0, 2066, 0, 2067,
	2083, 2098, 0, 2063, 0, 2865, 2008, 0, 2009, 0,
	2107, 1994, 2615, 0, 2009, 2693, 0, 0, 2789, 0,
	2798, 0, 2845, 2862, 2859, 0, 2858, 2887, 2428, 0,
	0, 0, 2015, 2760, 0, 2760, 0, 2760, 2085, 2086,
	367, 1944, 129, 1940, 1941, 2180, 2190, 0, 0, 2762,
	2393, 2399, 2154, 0, 2156, 0, 2395, 0, 2163, 0,
	0, 2867, 2877, 2877, 2870, 0, 2884, 0, 0, 0,
	2813, 2373, 3336, 0, 3369, 3370, 0, 0, 0, 0,
	133, 2592, 3100, 133, 0, 2009, 133, 3258, 2926, 2928,
	0, 2906, 2908, 2910, 2911, 2912, 2913, 2914, 0, 237,
	423, 524, 0, 0, 0, 0, 2937, 0, -2, 0,
	0, 1381, 1382, 1774, 0, 0, 0, 0, 1343, 0,
	1745, 1752, 1753, 0, 0, 1345, 1377, 1636, 0, 0,
	0, 0, 1928, 1934, 1797, 0, 0, 1656, 1662, 1676,
	1680, 0, 0, 1706, 0, 0, 0, 0, 1703, 1723,
	0, 0, 1915, 0, 1913, 0, 0, 0, 0, 0,
	0, 0, 1849, 1832, 0, 1852, 1853, 1854, 1855, 1856,
	0, 1819, 2121, 2106, 2123, 0, 2000, 144, 2119, 2120,
	2109, 2117, 0, 2693, 2525, 0, 0, 2528, 2134, 0,
	1685, 2470, 2472, 2467, 0, 0, 0, 2502, 2493, 1897,
	2497, 2498, 0, 2517, 2687, 0, 0, 2901, 2902, 2520,
	0, 0, 0, 2068, 0, 2070, 2094, 2095, 0, 2090,
	2091, 2092, 2071, 0, 0, 0, 0, 2011, 2626, 2009,
	0, 0, 0, 2636, 2667, 2781, 0, 0, 2791, 2821,
	2857, 2860, 2861, 0, 2006, 0, 0, 0, 2125, 0,
	2125, 2524, 2125, 0, 1947, 1944, 1937, 0, 2063, 2193,
	0, 0, 0, 2397, 2158, 0, 2401, 2061, 0, 2061,
	0, 0, 0, 0, 3363, 3364, 0, 3365, 3368, 3165,
	3053, 3054, 0, 2630, 3042, 0, 0, 0, 2915, 0,
	0, 0, 2934, 2954, 2943, -2, 482, 238, 0, 2954,
	2954, 1365, 1325, 1368, 1383, 1758, 0, 0, 1761, 0,
	1763, 0, 0, 0, 1725, 1726, 1759, 1344, 0, 0,
	0, 0, 1649, 1666, 3117, 0, 1704, 0, 1708, 0,
	1701, 0, 1702, 0, 1720, 1906, 1907, 0, 0, 1918,
	1908, 0, 0, 0, 1837, 1838, 1841, 1842, 1843, 1844,
	0, 1847, 1848, 1851, 0, 1859, 1861, 2123, 1952, 0,
	2111, 1941, 1941, 0, 2121, 2117, 144, 2109, 3214, 2526,
	2527, 2521, 2028, 0, 0, 2431, 0, 0, 2500, 2504,
	2505, 0, 0, 1633, 2685, 2686, 0, 0, 0, 1965,
	0, 2082, 2096, 0, 2097, 0, 0, 0, 0, 0,
	0, 2864, 2628, 0, 0, 2009, 0, 2790, 0, 2001,
	0, 2005, 2002, 0, 2415, 0, 2415, 2093, 1649, 0,
	1938, 1947, 2178, 2187, 2761, 2163, 2163, 0, 2868, 2060,
	2875, 0, 2869, 0, 2885, 2886, 2815, 0, 0, 2929,
	2930, 2909, 0, 0, 0, 2939, 0, 0, 2945, 2946,
	2947, 2948, 2949, 2940, 2941, 0, 1771, 1773, 1762, 1764,
	0, 1767, 0, 1768, 1755, 1756, 0, 0, 0, 1925,
	1627, 0, 3115, 0, 1682, 1707, 1710, 1711, 0, 0,
	0, 1716, 0, 1709, 0, 0, 1909, 0, 1910, 1919,
	0, 0, 0, 0, 1912, 1914, 1845, 1846, 1857, 0,
	1950, 2110, 0, 130, 130, 0, 2123, 144, 2121, 2117,
	2138, 0, 0, 0, 0, 2494, 2499, 0, 2672, 2673,
	2674, -2, 2678, 2679, 2680, 2681, 2682, 0, 2891, 2892,
	2528, 2124, 2099, 0, 2102, 2103, 0, 2100, 2062, 2072,
	2863, 2009, 0, 2616, 2782, 2792, 2007, 0, 2076, 2088,
	2078, 2098, 2415, 2087, 1939, 2155, 2157, 2163, 0, 2871,
	3366, 133, 2917, 2916, 0, 0, 2951, 2952, 0, 0,
	1342, 0, 0, 1765, 1766, 0, 0, 0, 0, 1665,
	0, 1712, 1713, 1714, 1715, 1717, 0, 0, 1917, 0,
	0, 1923, 0, 1860, 2112, 2113, 2114, 1941, 1954, 2121,
	2123, 144, 2123, 0, 2135, 2134, 0, 2506, 2507, 1546,
	-2, 0, 2677, 2683, 0, 0, 2522, 2101, 2524, 2524,
	2627, 2009, 0, 2415, 2081, 2159, 2876, 3055, 2918, 2950,
	2953, 2944, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1781, 0, -2, 0, 0, 0, 130, 2123,
	1953, 2121, 1649, 2133, 0, 2028, 2512, 0, 2675, -2,
	0, 0, 2104, 2105, 2629, 0, 2080, 1770, 1772, 1757,
	0, 0, -2, 1644, 1640, 1641, 3116, 0, 1760, 0,
	0, 1790, 0, 1779, 1920, 1921, 0, 1924, 2115, 1951,
	2123, 2127, 2136, 2138, 0, 2510, 2513, 2514, 2515, 2516,
	0, 2676, 0, 0, 2003, 0, 0, 1705, 0, 1782,
	1783, 1769, 1790, 1790, 0, 0, 0, 1955, 2123, 2478,
	0, 0, 0, 0, 0, 1537, 1718, 1774, 1769, 1760,
	1789, 0, 0, 0, 1649, 2511, 0, 0, 0, 0,
	0, 1758, 1774, 1786, 0, 0, 1922, 2128, 2512, 2889,
	2890, 1643, 0, 1784, 1758, 0, 0, 0, 1785, 1787,
	0, 2479, 0, 1788,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 538, 3, 3,
	531, 532, 536, 534, 541, 535, 533, 537, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 542, 540,
	525, 527, 526, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 529, 3, 530, 539,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var yyTok3 = [...]uint16{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 464, 57807, 465, 57808, 466, 57809, 467,
	57810, 468, 57811, 469, 57812, 470, 57813, 471, 57814, 472,
	57815, 473, 57816, 474, 57817, 475, 57818, 476, 57819, 477,
	57820, 478, 57821, 479, 57822, 480, 57823, 481, 57824, 482,
	57825, 483, 57826, 484, 57827, 485, 57828, 486, 57829, 487,
	57830, 488, 57831, 489, 57832, 490, 57833, 491, 57834, 492,
	57835, 493, 57836, 494, 57837, 495, 57838, 496, 57839, 497,
	57840, 498, 57841, 499, 57842, 500, 57843, 501, 57844, 502,
	57845, 503, 57846, 504, 57847, 505, 57848, 506, 57849, 507,
	57850, 508, 57851, 509, 57852, 510, 57853, 511, 57854, 512,
	57855, 513, 57856, 514, 57857, 515, 57858, 516, 57859, 517,
	57860, 518, 57861, 519, 57862, 520, 57863, 521, 57864, 522,
	57865, 523, 57866, 524, 57867, 528, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:609
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:624
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:632
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:647
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:650
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:659
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:660
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:661
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:662
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:663
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:664
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:665
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:666
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:667
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:668
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:669
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:670
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:671
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:672
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:673
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:674
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:675
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:676
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:677
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:678
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:679
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:680
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:681
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:682
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:683
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:684
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:685
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:686
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:687
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:688
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:689
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:690
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:691
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:692
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:693
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:694
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:695
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:696
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:697
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:698
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:699
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:700
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:701
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:702
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:703
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:704
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:705
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:706
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:707
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:708
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:709
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:710
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:711
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:712
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:713
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:714
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:715
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:716
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:717
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:718
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:719
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:720
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:721
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:722
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:723
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:724
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:725
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:726
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:727
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:728
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:729
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:730
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:731
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:732
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:733
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:734
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:735
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:736
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:737
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:738
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:739
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:740
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:741
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:742
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:743
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:744
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:745
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:746
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:747
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:748
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:749
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:750
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:751
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:752
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:753
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:754
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:755
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:756
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:757
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:758
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:759
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:760
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:761
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:762
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:763
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:764
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:765
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:766
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:767
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:768
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:769
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:770
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:771
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:772
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:773
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:774
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:775
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:776
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:777
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:778
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:780
		{
			yyVAL.stmt = nil
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:791
		{
			yyVAL.str = yyDollar[1].str
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:792
		{
			yyVAL.str = ""
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:796
		{
			yyVAL.list = yyDollar[1].list
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:797
		{
			yyVAL.list = nil
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:801
		{
			yyVAL.dropBehav = ast.DropCascade
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:802
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:803
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:807
		{
			yyVAL.ival = 1
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:808
		{
			yyVAL.ival = 0
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:812
		{
			yyVAL.ival = 1
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:813
		{
			yyVAL.ival = 0
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:817
		{
			yyVAL.bval = true
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:818
		{
			yyVAL.bval = false
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:822
		{
			yyVAL.bval = true
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:823
		{
			yyVAL.bval = false
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:827
		{
			yyVAL.list = yyDollar[2].list
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:828
		{
			yyVAL.list = nil
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:829
		{
			yyVAL.list = nil
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:838
		{
			yyVAL.str = yyDollar[1].str
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:839
		{
			yyVAL.str = yyDollar[1].str
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:840
		{
			yyVAL.str = yyDollar[1].str
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:844
		{
			yyVAL.str = yyDollar[1].str
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:845
		{
			yyVAL.str = yyDollar[1].str
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:846
		{
			yyVAL.str = yyDollar[1].str
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:847
		{
			yyVAL.str = yyDollar[1].str
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:848
		{
			yyVAL.str = yyDollar[1].str
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:851
		{
			yyVAL.str = yyDollar[1].str
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:852
		{
			yyVAL.str = yyDollar[1].str
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:855
		{
			yyVAL.str = yyDollar[1].str
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:860
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:864
		{
			list := yyDollar[1].list
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = list
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:873
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:877
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:884
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:891
		{
			yyVAL.rangevar = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:898
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list.Items) == 1 {
				if str, ok := yyDollar[2].list.Items[0].(*ast.String); ok {
					yyVAL.rangevar = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.rangevar = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.rangevar = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:927
		{
			yyVAL.list = yyDollar[2].list
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:928
		{
			yyVAL.list = nil
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:933
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:937
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:946
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:950
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:963
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:969
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:975
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:981
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:987
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:994
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1001
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_UNLOGGED
			yyVAL.node = rangeVar
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1007
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1013
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1022
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1026
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				nodes.Append(item)
			}
			yyVAL.list = nodes
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1038
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1042
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].list)
			yyVAL.list = list
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1052
		{
			yyVAL.str = "abort"
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1053
		{
			yyVAL.str = "absent"
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1054
		{
			yyVAL.str = "absolute"
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1055
		{
			yyVAL.str = "access"
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1056
		{
			yyVAL.str = "action"
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1057
		{
			yyVAL.str = "add"
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1058
		{
			yyVAL.str = "admin"
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1059
		{
			yyVAL.str = "after"
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1060
		{
			yyVAL.str = "aggregate"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1061
		{
			yyVAL.str = "also"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1062
		{
			yyVAL.str = "alter"
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1063
		{
			yyVAL.str = "always"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1064
		{
			yyVAL.str = "asensitive"
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1065
		{
			yyVAL.str = "assertion"
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1066
		{
			yyVAL.str = "assignment"
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1067
		{
			yyVAL.str = "at"
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1068
		{
			yyVAL.str = "atomic"
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1069
		{
			yyVAL.str = "attach"
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1070
		{
			yyVAL.str = "attribute"
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1071
		{
			yyVAL.str = "backward"
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1072
		{
			yyVAL.str = "before"
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1073
		{
			yyVAL.str = "begin"
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1074
		{
			yyVAL.str = "breadth"
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1075
		{
			yyVAL.str = "by"
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1076
		{
			yyVAL.str = "cache"
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1077
		{
			yyVAL.str = "call"
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1078
		{
			yyVAL.str = "called"
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1079
		{
			yyVAL.str = "cascade"
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1080
		{
			yyVAL.str = "cascaded"
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1081
		{
			yyVAL.str = "catalog"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1082
		{
			yyVAL.str = "chain"
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1083
		{
			yyVAL.str = "characteristics"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1084
		{
			yyVAL.str = "checkpoint"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1085
		{
			yyVAL.str = "class"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1086
		{
			yyVAL.str = "close"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1087
		{
			yyVAL.str = "cluster"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1088
		{
			yyVAL.str = "columns"
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1089
		{
			yyVAL.str = "comment"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1090
		{
			yyVAL.str = "comments"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1091
		{
			yyVAL.str = "commit"
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1092
		{
			yyVAL.str = "committed"
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1093
		{
			yyVAL.str = "compression"
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1094
		{
			yyVAL.str = "conditional"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1095
		{
			yyVAL.str = "configuration"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1096
		{
			yyVAL.str = "conflict"
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1097
		{
			yyVAL.str = "connection"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1098
		{
			yyVAL.str = "constraints"
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1099
		{
			yyVAL.str = "content"
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1100
		{
			yyVAL.str = "continue"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1101
		{
			yyVAL.str = "conversion"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1102
		{
			yyVAL.str = "copy"
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1103
		{
			yyVAL.str = "cost"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1104
		{
			yyVAL.str = "csv"
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1105
		{
			yyVAL.str = "cube"
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1106
		{
			yyVAL.str = "current"
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1107
		{
			yyVAL.str = "cursor"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1108
		{
			yyVAL.str = "cycle"
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1109
		{
			yyVAL.str = "data"
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1110
		{
			yyVAL.str = "database"
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1111
		{
			yyVAL.str = "day"
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1112
		{
			yyVAL.str = "deallocate"
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1113
		{
			yyVAL.str = "declare"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1114
		{
			yyVAL.str = "defaults"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1115
		{
			yyVAL.str = "deferred"
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1116
		{
			yyVAL.str = "definer"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1117
		{
			yyVAL.str = "delete"
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1118
		{
			yyVAL.str = "delimiter"
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1119
		{
			yyVAL.str = "delimiters"
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1120
		{
			yyVAL.str = "depends"
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1121
		{
			yyVAL.str = "depth"
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1122
		{
			yyVAL.str = "detach"
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1123
		{
			yyVAL.str = "dictionary"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1124
		{
			yyVAL.str = "disable"
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1125
		{
			yyVAL.str = "discard"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1126
		{
			yyVAL.str = "document"
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1127
		{
			yyVAL.str = "domain"
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1128
		{
			yyVAL.str = "double"
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1129
		{
			yyVAL.str = "drop"
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1130
		{
			yyVAL.str = "each"
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1131
		{
			yyVAL.str = "empty"
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1132
		{
			yyVAL.str = "enable"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1133
		{
			yyVAL.str = "encoding"
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1134
		{
			yyVAL.str = "encrypted"
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1135
		{
			yyVAL.str = "enum"
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1136
		{
			yyVAL.str = "error"
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1137
		{
			yyVAL.str = "escape"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1138
		{
			yyVAL.str = "event"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1139
		{
			yyVAL.str = "exclude"
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1140
		{
			yyVAL.str = "excluding"
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1141
		{
			yyVAL.str = "exclusive"
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1142
		{
			yyVAL.str = "execute"
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1143
		{
			yyVAL.str = "explain"
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1144
		{
			yyVAL.str = "expression"
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1145
		{
			yyVAL.str = "extension"
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1146
		{
			yyVAL.str = "external"
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1147
		{
			yyVAL.str = "family"
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1148
		{
			yyVAL.str = "filter"
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1149
		{
			yyVAL.str = "finalize"
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1150
		{
			yyVAL.str = "first"
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1151
		{
			yyVAL.str = "following"
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1152
		{
			yyVAL.str = "force"
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1153
		{
			yyVAL.str = "format"
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1154
		{
			yyVAL.str = "forward"
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1155
		{
			yyVAL.str = "function"
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1156
		{
			yyVAL.str = "functions"
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1157
		{
			yyVAL.str = "generated"
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1158
		{
			yyVAL.str = "global"
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1159
		{
			yyVAL.str = "granted"
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1160
		{
			yyVAL.str = "groups"
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1161
		{
			yyVAL.str = "handler"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1162
		{
			yyVAL.str = "header"
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1163
		{
			yyVAL.str = "hold"
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1164
		{
			yyVAL.str = "hour"
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1165
		{
			yyVAL.str = "identity"
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1166
		{
			yyVAL.str = "if"
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1167
		{
			yyVAL.str = "immediate"
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1168
		{
			yyVAL.str = "immutable"
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1169
		{
			yyVAL.str = "implicit"
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1170
		{
			yyVAL.str = "import"
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1171
		{
			yyVAL.str = "include"
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1172
		{
			yyVAL.str = "including"
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1173
		{
			yyVAL.str = "increment"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1174
		{
			yyVAL.str = "indent"
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1175
		{
			yyVAL.str = "index"
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1176
		{
			yyVAL.str = "indexes"
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1177
		{
			yyVAL.str = "inherit"
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1178
		{
			yyVAL.str = "inherits"
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1179
		{
			yyVAL.str = "inline"
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1180
		{
			yyVAL.str = "input"
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1181
		{
			yyVAL.str = "insensitive"
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1182
		{
			yyVAL.str = "insert"
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1183
		{
			yyVAL.str = "instead"
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1184
		{
			yyVAL.str = "invoker"
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1185
		{
			yyVAL.str = "isolation"
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1186
		{
			yyVAL.str = "keep"
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1187
		{
			yyVAL.str = "key"
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1188
		{
			yyVAL.str = "keys"
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1189
		{
			yyVAL.str = "label"
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1190
		{
			yyVAL.str = "language"
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1191
		{
			yyVAL.str = "large"
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1192
		{
			yyVAL.str = "last"
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1193
		{
			yyVAL.str = "leakproof"
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1194
		{
			yyVAL.str = "level"
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1195
		{
			yyVAL.str = "listen"
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1196
		{
			yyVAL.str = "load"
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1197
		{
			yyVAL.str = "local"
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1198
		{
			yyVAL.str = "location"
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1199
		{
			yyVAL.str = "lock"
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1200
		{
			yyVAL.str = "locked"
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1201
		{
			yyVAL.str = "logged"
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1202
		{
			yyVAL.str = "mapping"
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1203
		{
			yyVAL.str = "match"
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1204
		{
			yyVAL.str = "matched"
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1205
		{
			yyVAL.str = "materialized"
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1206
		{
			yyVAL.str = "maxvalue"
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1207
		{
			yyVAL.str = "merge"
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1208
		{
			yyVAL.str = "method"
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1209
		{
			yyVAL.str = "minute"
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1210
		{
			yyVAL.str = "minvalue"
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1211
		{
			yyVAL.str = "mode"
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1212
		{
			yyVAL.str = "month"
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1213
		{
			yyVAL.str = "move"
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1214
		{
			yyVAL.str = "name"
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1215
		{
			yyVAL.str = "names"
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1216
		{
			yyVAL.str = "nested"
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1217
		{
			yyVAL.str = "new"
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1218
		{
			yyVAL.str = "next"
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1219
		{
			yyVAL.str = "nfc"
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1220
		{
			yyVAL.str = "nfd"
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1221
		{
			yyVAL.str = "nfkc"
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1222
		{
			yyVAL.str = "nfkd"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1223
		{
			yyVAL.str = "no"
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1224
		{
			yyVAL.str = "normalized"
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1225
		{
			yyVAL.str = "nothing"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1226
		{
			yyVAL.str = "notify"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1227
		{
			yyVAL.str = "nowait"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1228
		{
			yyVAL.str = "nulls"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1229
		{
			yyVAL.str = "object"
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1230
		{
			yyVAL.str = "of"
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1231
		{
			yyVAL.str = "off"
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1232
		{
			yyVAL.str = "oids"
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1233
		{
			yyVAL.str = "old"
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1234
		{
			yyVAL.str = "omit"
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1235
		{
			yyVAL.str = "operator"
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1236
		{
			yyVAL.str = "option"
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1237
		{
			yyVAL.str = "options"
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1238
		{
			yyVAL.str = "ordinality"
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1239
		{
			yyVAL.str = "others"
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1240
		{
			yyVAL.str = "over"
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1241
		{
			yyVAL.str = "overriding"
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1242
		{
			yyVAL.str = "owned"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1243
		{
			yyVAL.str = "owner"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1244
		{
			yyVAL.str = "parallel"
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1245
		{
			yyVAL.str = "parameter"
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1246
		{
			yyVAL.str = "parser"
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1247
		{
			yyVAL.str = "partial"
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1248
		{
			yyVAL.str = "partition"
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1249
		{
			yyVAL.str = "passing"
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1250
		{
			yyVAL.str = "password"
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1251
		{
			yyVAL.str = "path"
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1252
		{
			yyVAL.str = "plan"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1253
		{
			yyVAL.str = "plans"
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1254
		{
			yyVAL.str = "policy"
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1255
		{
			yyVAL.str = "preceding"
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1256
		{
			yyVAL.str = "prepare"
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1257
		{
			yyVAL.str = "prepared"
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1258
		{
			yyVAL.str = "preserve"
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1259
		{
			yyVAL.str = "prior"
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1260
		{
			yyVAL.str = "privileges"
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1261
		{
			yyVAL.str = "procedural"
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1262
		{
			yyVAL.str = "procedure"
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1263
		{
			yyVAL.str = "procedures"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1264
		{
			yyVAL.str = "program"
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1265
		{
			yyVAL.str = "publication"
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1266
		{
			yyVAL.str = "quote"
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1267
		{
			yyVAL.str = "quotes"
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1268
		{
			yyVAL.str = "range"
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1269
		{
			yyVAL.str = "read"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1270
		{
			yyVAL.str = "reassign"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1271
		{
			yyVAL.str = "recheck"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1272
		{
			yyVAL.str = "recursive"
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1273
		{
			yyVAL.str = "ref"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1274
		{
			yyVAL.str = "referencing"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1275
		{
			yyVAL.str = "refresh"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1276
		{
			yyVAL.str = "reindex"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1277
		{
			yyVAL.str = "relative"
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1278
		{
			yyVAL.str = "release"
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1279
		{
			yyVAL.str = "rename"
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1280
		{
			yyVAL.str = "repeatable"
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1281
		{
			yyVAL.str = "replace"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1282
		{
			yyVAL.str = "replica"
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1283
		{
			yyVAL.str = "reset"
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1284
		{
			yyVAL.str = "restart"
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1285
		{
			yyVAL.str = "restrict"
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1286
		{
			yyVAL.str = "return"
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1287
		{
			yyVAL.str = "returns"
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1288
		{
			yyVAL.str = "revoke"
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1289
		{
			yyVAL.str = "role"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1290
		{
			yyVAL.str = "rollback"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1291
		{
			yyVAL.str = "rollup"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1292
		{
			yyVAL.str = "routine"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1293
		{
			yyVAL.str = "routines"
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1294
		{
			yyVAL.str = "rows"
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1295
		{
			yyVAL.str = "rule"
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1296
		{
			yyVAL.str = "savepoint"
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1297
		{
			yyVAL.str = "scalar"
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1298
		{
			yyVAL.str = "schema"
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1299
		{
			yyVAL.str = "schemas"
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1300
		{
			yyVAL.str = "scroll"
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1301
		{
			yyVAL.str = "search"
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1302
		{
			yyVAL.str = "second"
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1303
		{
			yyVAL.str = "security"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1304
		{
			yyVAL.str = "sequence"
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1305
		{
			yyVAL.str = "sequences"
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1306
		{
			yyVAL.str = "serializable"
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1307
		{
			yyVAL.str = "server"
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1308
		{
			yyVAL.str = "session"
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1309
		{
			yyVAL.str = "set"
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1310
		{
			yyVAL.str = "sets"
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1311
		{
			yyVAL.str = "share"
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1312
		{
			yyVAL.str = "show"
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1313
		{
			yyVAL.str = "simple"
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1314
		{
			yyVAL.str = "skip"
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1315
		{
			yyVAL.str = "snapshot"
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1316
		{
			yyVAL.str = "source"
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1317
		{
			yyVAL.str = "sql"
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1318
		{
			yyVAL.str = "stable"
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1319
		{
			yyVAL.str = "standalone"
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1320
		{
			yyVAL.str = "start"
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1321
		{
			yyVAL.str = "statement"
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1322
		{
			yyVAL.str = "statistics"
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1323
		{
			yyVAL.str = "stdin"
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1324
		{
			yyVAL.str = "stdout"
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1325
		{
			yyVAL.str = "storage"
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1326
		{
			yyVAL.str = "stored"
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1327
		{
			yyVAL.str = "strict"
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1328
		{
			yyVAL.str = "string"
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1329
		{
			yyVAL.str = "strip"
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1330
		{
			yyVAL.str = "subscription"
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1331
		{
			yyVAL.str = "support"
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1332
		{
			yyVAL.str = "sysid"
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1333
		{
			yyVAL.str = "system"
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1334
		{
			yyVAL.str = "tables"
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1335
		{
			yyVAL.str = "tablespace"
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1336
		{
			yyVAL.str = "target"
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1337
		{
			yyVAL.str = "temp"
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1338
		{
			yyVAL.str = "template"
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1339
		{
			yyVAL.str = "temporary"
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1340
		{
			yyVAL.str = "text"
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1341
		{
			yyVAL.str = "ties"
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1342
		{
			yyVAL.str = "transaction"
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1343
		{
			yyVAL.str = "transform"
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1344
		{
			yyVAL.str = "trigger"
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1345
		{
			yyVAL.str = "truncate"
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1346
		{
			yyVAL.str = "trusted"
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1347
		{
			yyVAL.str = "type"
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1348
		{
			yyVAL.str = "types"
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1349
		{
			yyVAL.str = "uescape"
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1350
		{
			yyVAL.str = "unbounded"
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1351
		{
			yyVAL.str = "uncommitted"
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1352
		{
			yyVAL.str = "unconditional"
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1353
		{
			yyVAL.str = "unencrypted"
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1354
		{
			yyVAL.str = "unknown"
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1355
		{
			yyVAL.str = "unlisten"
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1356
		{
			yyVAL.str = "unlogged"
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1357
		{
			yyVAL.str = "until"
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1358
		{
			yyVAL.str = "update"
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1359
		{
			yyVAL.str = "vacuum"
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1360
		{
			yyVAL.str = "valid"
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1361
		{
			yyVAL.str = "validate"
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1362
		{
			yyVAL.str = "validator"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1363
		{
			yyVAL.str = "value"
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1364
		{
			yyVAL.str = "varying"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1365
		{
			yyVAL.str = "version"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1366
		{
			yyVAL.str = "view"
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1367
		{
			yyVAL.str = "views"
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1368
		{
			yyVAL.str = "volatile"
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1369
		{
			yyVAL.str = "whitespace"
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1370
		{
			yyVAL.str = "within"
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1371
		{
			yyVAL.str = "without"
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1372
		{
			yyVAL.str = "work"
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1373
		{
			yyVAL.str = "wrapper"
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1374
		{
			yyVAL.str = "write"
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1375
		{
			yyVAL.str = "xml"
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1376
		{
			yyVAL.str = "year"
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1377
		{
			yyVAL.str = "yes"
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1378
		{
			yyVAL.str = "zone"
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1392
		{
			yyVAL.str = "between"
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1393
		{
			yyVAL.str = "bigint"
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1394
		{
			yyVAL.str = "bit"
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1395
		{
			yyVAL.str = "boolean"
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1396
		{
			yyVAL.str = "char"
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1397
		{
			yyVAL.str = "character"
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1398
		{
			yyVAL.str = "coalesce"
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1399
		{
			yyVAL.str = "dec"
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1400
		{
			yyVAL.str = "decimal"
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1401
		{
			yyVAL.str = "exists"
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1402
		{
			yyVAL.str = "extract"
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1403
		{
			yyVAL.str = "float"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1404
		{
			yyVAL.str = "greatest"
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1405
		{
			yyVAL.str = "grouping"
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1406
		{
			yyVAL.str = "inout"
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1407
		{
			yyVAL.str = "int"
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1408
		{
			yyVAL.str = "integer"
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1409
		{
			yyVAL.str = "interval"
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1410
		{
			yyVAL.str = "json"
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1411
		{
			yyVAL.str = "json_array"
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1412
		{
			yyVAL.str = "json_arrayagg"
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1413
		{
			yyVAL.str = "json_exists"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1414
		{
			yyVAL.str = "json_object"
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1415
		{
			yyVAL.str = "json_objectagg"
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1416
		{
			yyVAL.str = "json_query"
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1417
		{
			yyVAL.str = "json_scalar"
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1418
		{
			yyVAL.str = "json_serialize"
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1419
		{
			yyVAL.str = "json_table"
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1420
		{
			yyVAL.str = "json_value"
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1421
		{
			yyVAL.str = "least"
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1422
		{
			yyVAL.str = "merge_action"
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1423
		{
			yyVAL.str = "national"
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1424
		{
			yyVAL.str = "nchar"
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1425
		{
			yyVAL.str = "none"
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1426
		{
			yyVAL.str = "normalize"
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1427
		{
			yyVAL.str = "nullif"
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1428
		{
			yyVAL.str = "numeric"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1429
		{
			yyVAL.str = "out"
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1430
		{
			yyVAL.str = "overlay"
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1431
		{
			yyVAL.str = "position"
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1432
		{
			yyVAL.str = "precision"
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1433
		{
			yyVAL.str = "real"
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1434
		{
			yyVAL.str = "row"
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1435
		{
			yyVAL.str = "setof"
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1436
		{
			yyVAL.str = "smallint"
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1437
		{
			yyVAL.str = "substring"
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1438
		{
			yyVAL.str = "time"
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1439
		{
			yyVAL.str = "timestamp"
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1440
		{
			yyVAL.str = "treat"
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1441
		{
			yyVAL.str = "trim"
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1442
		{
			yyVAL.str = "values"
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1443
		{
			yyVAL.str = "varchar"
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1444
		{
			yyVAL.str = "xmlattributes"
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1445
		{
			yyVAL.str = "xmlconcat"
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1446
		{
			yyVAL.str = "xmlelement"
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1447
		{
			yyVAL.str = "xmlexists"
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1448
		{
			yyVAL.str = "xmlforest"
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1449
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1450
		{
			yyVAL.str = "xmlparse"
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1451
		{
			yyVAL.str = "xmlpi"
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1452
		{
			yyVAL.str = "xmlroot"
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1453
		{
			yyVAL.str = "xmlserialize"
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1454
		{
			yyVAL.str = "xmltable"
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1468
		{
			yyVAL.str = "authorization"
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1469
		{
			yyVAL.str = "binary"
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1470
		{
			yyVAL.str = "collation"
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1471
		{
			yyVAL.str = "concurrently"
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1472
		{
			yyVAL.str = "cross"
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1473
		{
			yyVAL.str = "current_schema"
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1474
		{
			yyVAL.str = "freeze"
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1475
		{
			yyVAL.str = "full"
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1476
		{
			yyVAL.str = "ilike"
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1477
		{
			yyVAL.str = "inner"
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1478
		{
			yyVAL.str = "is"
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1479
		{
			yyVAL.str = "isnull"
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1480
		{
			yyVAL.str = "join"
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1481
		{
			yyVAL.str = "left"
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1482
		{
			yyVAL.str = "like"
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1483
		{
			yyVAL.str = "natural"
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1484
		{
			yyVAL.str = "notnull"
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1485
		{
			yyVAL.str = "outer"
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1486
		{
			yyVAL.str = "overlaps"
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1487
		{
			yyVAL.str = "right"
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1488
		{
			yyVAL.str = "similar"
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1489
		{
			yyVAL.str = "tablesample"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1490
		{
			yyVAL.str = "verbose"
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1500
		{
			yyVAL.str = "all"
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1501
		{
			yyVAL.str = "analyse"
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1502
		{
			yyVAL.str = "analyze"
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1503
		{
			yyVAL.str = "and"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1504
		{
			yyVAL.str = "any"
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1505
		{
			yyVAL.str = "array"
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1506
		{
			yyVAL.str = "as"
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1507
		{
			yyVAL.str = "asc"
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1508
		{
			yyVAL.str = "asymmetric"
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1509
		{
			yyVAL.str = "both"
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1510
		{
			yyVAL.str = "case"
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1511
		{
			yyVAL.str = "cast"
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1512
		{
			yyVAL.str = "check"
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1513
		{
			yyVAL.str = "collate"
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1514
		{
			yyVAL.str = "column"
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1515
		{
			yyVAL.str = "constraint"
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1516
		{
			yyVAL.str = "create"
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1517
		{
			yyVAL.str = "current_catalog"
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1518
		{
			yyVAL.str = "current_date"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1519
		{
			yyVAL.str = "current_role"
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1520
		{
			yyVAL.str = "current_time"
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1521
		{
			yyVAL.str = "current_timestamp"
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1522
		{
			yyVAL.str = "current_user"
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1523
		{
			yyVAL.str = "default"
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1524
		{
			yyVAL.str = "deferrable"
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1525
		{
			yyVAL.str = "desc"
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1526
		{
			yyVAL.str = "distinct"
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1527
		{
			yyVAL.str = "do"
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1528
		{
			yyVAL.str = "else"
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1529
		{
			yyVAL.str = "end"
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1530
		{
			yyVAL.str = "except"
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1531
		{
			yyVAL.str = "false"
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1532
		{
			yyVAL.str = "fetch"
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1533
		{
			yyVAL.str = "for"
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1534
		{
			yyVAL.str = "foreign"
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1535
		{
			yyVAL.str = "from"
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1536
		{
			yyVAL.str = "grant"
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1537
		{
			yyVAL.str = "group"
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1538
		{
			yyVAL.str = "having"
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1539
		{
			yyVAL.str = "in"
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1540
		{
			yyVAL.str = "initially"
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1541
		{
			yyVAL.str = "intersect"
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1542
		{
			yyVAL.str = "into"
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1543
		{
			yyVAL.str = "lateral"
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1544
		{
			yyVAL.str = "leading"
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1545
		{
			yyVAL.str = "limit"
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1546
		{
			yyVAL.str = "localtime"
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1547
		{
			yyVAL.str = "localtimestamp"
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1548
		{
			yyVAL.str = "not"
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1549
		{
			yyVAL.str = "null"
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1550
		{
			yyVAL.str = "offset"
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1551
		{
			yyVAL.str = "on"
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1552
		{
			yyVAL.str = "only"
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1553
		{
			yyVAL.str = "or"
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1554
		{
			yyVAL.str = "order"
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1555
		{
			yyVAL.str = "placing"
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1556
		{
			yyVAL.str = "primary"
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1557
		{
			yyVAL.str = "references"
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1558
		{
			yyVAL.str = "returning"
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1559
		{
			yyVAL.str = "select"
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1560
		{
			yyVAL.str = "session_user"
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1561
		{
			yyVAL.str = "some"
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1562
		{
			yyVAL.str = "symmetric"
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1563
		{
			yyVAL.str = "system_user"
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1564
		{
			yyVAL.str = "table"
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1565
		{
			yyVAL.str = "then"
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1566
		{
			yyVAL.str = "to"
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1567
		{
			yyVAL.str = "trailing"
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1568
		{
			yyVAL.str = "true"
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1569
		{
			yyVAL.str = "union"
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1570
		{
			yyVAL.str = "unique"
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1571
		{
			yyVAL.str = "user"
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1572
		{
			yyVAL.str = "using"
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1573
		{
			yyVAL.str = "variadic"
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1574
		{
			yyVAL.str = "when"
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1575
		{
			yyVAL.str = "where"
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1576
		{
			yyVAL.str = "window"
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1577
		{
			yyVAL.str = "with"
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1590
		{
			yyVAL.str = "abort"
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1591
		{
			yyVAL.str = "absent"
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1592
		{
			yyVAL.str = "absolute"
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1593
		{
			yyVAL.str = "access"
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1594
		{
			yyVAL.str = "action"
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1595
		{
			yyVAL.str = "add"
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1596
		{
			yyVAL.str = "admin"
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1597
		{
			yyVAL.str = "after"
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1598
		{
			yyVAL.str = "aggregate"
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1599
		{
			yyVAL.str = "all"
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1600
		{
			yyVAL.str = "also"
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1601
		{
			yyVAL.str = "alter"
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1602
		{
			yyVAL.str = "always"
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1603
		{
			yyVAL.str = "analyse"
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1604
		{
			yyVAL.str = "analyze"
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1605
		{
			yyVAL.str = "and"
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1606
		{
			yyVAL.str = "any"
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1607
		{
			yyVAL.str = "asc"
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1608
		{
			yyVAL.str = "asensitive"
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1609
		{
			yyVAL.str = "assertion"
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1610
		{
			yyVAL.str = "assignment"
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1611
		{
			yyVAL.str = "asymmetric"
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1612
		{
			yyVAL.str = "at"
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1613
		{
			yyVAL.str = "atomic"
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1614
		{
			yyVAL.str = "attach"
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1615
		{
			yyVAL.str = "attribute"
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1616
		{
			yyVAL.str = "authorization"
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1617
		{
			yyVAL.str = "backward"
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1618
		{
			yyVAL.str = "before"
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1619
		{
			yyVAL.str = "begin"
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1620
		{
			yyVAL.str = "between"
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1621
		{
			yyVAL.str = "bigint"
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1622
		{
			yyVAL.str = "binary"
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1623
		{
			yyVAL.str = "bit"
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1624
		{
			yyVAL.str = "boolean"
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1625
		{
			yyVAL.str = "both"
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1626
		{
			yyVAL.str = "breadth"
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1627
		{
			yyVAL.str = "by"
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1628
		{
			yyVAL.str = "cache"
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1629
		{
			yyVAL.str = "call"
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1630
		{
			yyVAL.str = "called"
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1631
		{
			yyVAL.str = "cascade"
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1632
		{
			yyVAL.str = "cascaded"
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1633
		{
			yyVAL.str = "case"
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1634
		{
			yyVAL.str = "cast"
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1635
		{
			yyVAL.str = "catalog"
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1636
		{
			yyVAL.str = "chain"
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1637
		{
			yyVAL.str = "characteristics"
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1638
		{
			yyVAL.str = "check"
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1639
		{
			yyVAL.str = "checkpoint"
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1640
		{
			yyVAL.str = "class"
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1641
		{
			yyVAL.str = "close"
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1642
		{
			yyVAL.str = "cluster"
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1643
		{
			yyVAL.str = "coalesce"
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1644
		{
			yyVAL.str = "collate"
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1645
		{
			yyVAL.str = "collation"
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1646
		{
			yyVAL.str = "column"
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1647
		{
			yyVAL.str = "columns"
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1648
		{
			yyVAL.str = "comment"
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1649
		{
			yyVAL.str = "comments"
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1650
		{
			yyVAL.str = "commit"
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1651
		{
			yyVAL.str = "committed"
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1652
		{
			yyVAL.str = "compression"
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1653
		{
			yyVAL.str = "concurrently"
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1654
		{
			yyVAL.str = "conditional"
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1655
		{
			yyVAL.str = "configuration"
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1656
		{
			yyVAL.str = "conflict"
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1657
		{
			yyVAL.str = "connection"
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1658
		{
			yyVAL.str = "constraint"
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1659
		{
			yyVAL.str = "constraints"
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1660
		{
			yyVAL.str = "content"
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1661
		{
			yyVAL.str = "continue"
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1662
		{
			yyVAL.str = "conversion"
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1663
		{
			yyVAL.str = "copy"
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1664
		{
			yyVAL.str = "cost"
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1665
		{
			yyVAL.str = "cross"
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1666
		{
			yyVAL.str = "csv"
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1667
		{
			yyVAL.str = "cube"
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1668
		{
			yyVAL.str = "current"
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1669
		{
			yyVAL.str = "current_catalog"
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1670
		{
			yyVAL.str = "current_date"
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1671
		{
			yyVAL.str = "current_role"
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1672
		{
			yyVAL.str = "current_schema"
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1673
		{
			yyVAL.str = "current_time"
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1674
		{
			yyVAL.str = "current_timestamp"
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1675
		{
			yyVAL.str = "current_user"
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1676
		{
			yyVAL.str = "cursor"
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1677
		{
			yyVAL.str = "cycle"
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1678
		{
			yyVAL.str = "data"
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1679
		{
			yyVAL.str = "database"
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1680
		{
			yyVAL.str = "deallocate"
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1681
		{
			yyVAL.str = "dec"
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1682
		{
			yyVAL.str = "decimal"
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1683
		{
			yyVAL.str = "declare"
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1684
		{
			yyVAL.str = "default"
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1685
		{
			yyVAL.str = "defaults"
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1686
		{
			yyVAL.str = "deferrable"
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1687
		{
			yyVAL.str = "deferred"
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1688
		{
			yyVAL.str = "definer"
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1689
		{
			yyVAL.str = "delete"
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1690
		{
			yyVAL.str = "delimiter"
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1691
		{
			yyVAL.str = "delimiters"
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1692
		{
			yyVAL.str = "depends"
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1693
		{
			yyVAL.str = "depth"
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1694
		{
			yyVAL.str = "desc"
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1695
		{
			yyVAL.str = "detach"
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1696
		{
			yyVAL.str = "dictionary"
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1697
		{
			yyVAL.str = "disable"
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1698
		{
			yyVAL.str = "discard"
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1699
		{
			yyVAL.str = "distinct"
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1700
		{
			yyVAL.str = "do"
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1701
		{
			yyVAL.str = "document"
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1702
		{
			yyVAL.str = "domain"
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1703
		{
			yyVAL.str = "double"
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1704
		{
			yyVAL.str = "drop"
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1705
		{
			yyVAL.str = "each"
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1706
		{
			yyVAL.str = "else"
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1707
		{
			yyVAL.str = "empty"
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1708
		{
			yyVAL.str = "enable"
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1709
		{
			yyVAL.str = "encoding"
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1710
		{
			yyVAL.str = "encrypted"
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1711
		{
			yyVAL.str = "end"
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1712
		{
			yyVAL.str = "enum"
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1713
		{
			yyVAL.str = "error"
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1714
		{
			yyVAL.str = "escape"
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1715
		{
			yyVAL.str = "event"
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1716
		{
			yyVAL.str = "exclude"
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1717
		{
			yyVAL.str = "excluding"
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1718
		{
			yyVAL.str = "exclusive"
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1719
		{
			yyVAL.str = "execute"
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1720
		{
			yyVAL.str = "exists"
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1721
		{
			yyVAL.str = "explain"
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1722
		{
			yyVAL.str = "expression"
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1723
		{
			yyVAL.str = "extension"
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1724
		{
			yyVAL.str = "external"
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1725
		{
			yyVAL.str = "extract"
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1726
		{
			yyVAL.str = "false"
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1727
		{
			yyVAL.str = "family"
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1728
		{
			yyVAL.str = "finalize"
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1729
		{
			yyVAL.str = "first"
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1730
		{
			yyVAL.str = "float"
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1731
		{
			yyVAL.str = "following"
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1732
		{
			yyVAL.str = "force"
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1733
		{
			yyVAL.str = "foreign"
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1734
		{
			yyVAL.str = "format"
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1735
		{
			yyVAL.str = "forward"
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1736
		{
			yyVAL.str = "freeze"
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1737
		{
			yyVAL.str = "full"
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1738
		{
			yyVAL.str = "function"
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1739
		{
			yyVAL.str = "functions"
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1740
		{
			yyVAL.str = "generated"
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1741
		{
			yyVAL.str = "global"
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1742
		{
			yyVAL.str = "granted"
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1743
		{
			yyVAL.str = "greatest"
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1744
		{
			yyVAL.str = "grouping"
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1745
		{
			yyVAL.str = "groups"
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1746
		{
			yyVAL.str = "handler"
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1747
		{
			yyVAL.str = "header"
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1748
		{
			yyVAL.str = "hold"
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1749
		{
			yyVAL.str = "identity"
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1750
		{
			yyVAL.str = "if"
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1751
		{
			yyVAL.str = "ilike"
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1752
		{
			yyVAL.str = "immediate"
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1753
		{
			yyVAL.str = "immutable"
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1754
		{
			yyVAL.str = "implicit"
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1755
		{
			yyVAL.str = "import"
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1756
		{
			yyVAL.str = "in"
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1757
		{
			yyVAL.str = "include"
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1758
		{
			yyVAL.str = "including"
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1759
		{
			yyVAL.str = "increment"
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1760
		{
			yyVAL.str = "indent"
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1761
		{
			yyVAL.str = "index"
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1762
		{
			yyVAL.str = "indexes"
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1763
		{
			yyVAL.str = "inherit"
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1764
		{
			yyVAL.str = "inherits"
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1765
		{
			yyVAL.str = "initially"
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1766
		{
			yyVAL.str = "inline"
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1767
		{
			yyVAL.str = "inner"
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1768
		{
			yyVAL.str = "inout"
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1769
		{
			yyVAL.str = "input"
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1770
		{
			yyVAL.str = "insensitive"
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1771
		{
			yyVAL.str = "insert"
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1772
		{
			yyVAL.str = "instead"
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1773
		{
			yyVAL.str = "int"
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1774
		{
			yyVAL.str = "integer"
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1775
		{
			yyVAL.str = "interval"
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1776
		{
			yyVAL.str = "invoker"
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1777
		{
			yyVAL.str = "is"
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1778
		{
			yyVAL.str = "isolation"
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1779
		{
			yyVAL.str = "join"
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1780
		{
			yyVAL.str = "json"
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1781
		{
			yyVAL.str = "json_array"
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1782
		{
			yyVAL.str = "json_arrayagg"
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1783
		{
			yyVAL.str = "json_exists"
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1784
		{
			yyVAL.str = "json_object"
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1785
		{
			yyVAL.str = "json_objectagg"
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1786
		{
			yyVAL.str = "json_query"
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1787
		{
			yyVAL.str = "json_scalar"
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1788
		{
			yyVAL.str = "json_serialize"
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1789
		{
			yyVAL.str = "json_table"
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1790
		{
			yyVAL.str = "json_value"
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1791
		{
			yyVAL.str = "keep"
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1792
		{
			yyVAL.str = "key"
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1793
		{
			yyVAL.str = "keys"
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1794
		{
			yyVAL.str = "label"
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1795
		{
			yyVAL.str = "language"
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1796
		{
			yyVAL.str = "large"
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1797
		{
			yyVAL.str = "last"
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1798
		{
			yyVAL.str = "lateral"
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1799
		{
			yyVAL.str = "leading"
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1800
		{
			yyVAL.str = "leakproof"
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1801
		{
			yyVAL.str = "least"
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1802
		{
			yyVAL.str = "left"
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1803
		{
			yyVAL.str = "level"
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1804
		{
			yyVAL.str = "like"
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1805
		{
			yyVAL.str = "listen"
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1806
		{
			yyVAL.str = "load"
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1807
		{
			yyVAL.str = "local"
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1808
		{
			yyVAL.str = "localtime"
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1809
		{
			yyVAL.str = "localtimestamp"
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1810
		{
			yyVAL.str = "location"
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1811
		{
			yyVAL.str = "lock"
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1812
		{
			yyVAL.str = "locked"
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1813
		{
			yyVAL.str = "logged"
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1814
		{
			yyVAL.str = "mapping"
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1815
		{
			yyVAL.str = "match"
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1816
		{
			yyVAL.str = "matched"
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1817
		{
			yyVAL.str = "materialized"
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1818
		{
			yyVAL.str = "maxvalue"
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1819
		{
			yyVAL.str = "merge"
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1820
		{
			yyVAL.str = "merge_action"
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1821
		{
			yyVAL.str = "method"
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1822
		{
			yyVAL.str = "minvalue"
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1823
		{
			yyVAL.str = "mode"
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1824
		{
			yyVAL.str = "move"
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1825
		{
			yyVAL.str = "name"
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1826
		{
			yyVAL.str = "names"
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1827
		{
			yyVAL.str = "national"
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1828
		{
			yyVAL.str = "natural"
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1829
		{
			yyVAL.str = "nchar"
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1830
		{
			yyVAL.str = "nested"
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1831
		{
			yyVAL.str = "new"
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1832
		{
			yyVAL.str = "next"
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1833
		{
			yyVAL.str = "nfc"
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1834
		{
			yyVAL.str = "nfd"
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1835
		{
			yyVAL.str = "nfkc"
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1836
		{
			yyVAL.str = "nfkd"
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1837
		{
			yyVAL.str = "no"
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1838
		{
			yyVAL.str = "none"
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1839
		{
			yyVAL.str = "normalize"
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1840
		{
			yyVAL.str = "normalized"
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1841
		{
			yyVAL.str = "not"
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1842
		{
			yyVAL.str = "nothing"
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1843
		{
			yyVAL.str = "notify"
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1844
		{
			yyVAL.str = "nowait"
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1845
		{
			yyVAL.str = "null"
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1846
		{
			yyVAL.str = "nullif"
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1847
		{
			yyVAL.str = "nulls"
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1848
		{
			yyVAL.str = "numeric"
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1849
		{
			yyVAL.str = "object"
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1850
		{
			yyVAL.str = "of"
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1851
		{
			yyVAL.str = "off"
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1852
		{
			yyVAL.str = "oids"
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1853
		{
			yyVAL.str = "old"
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1854
		{
			yyVAL.str = "omit"
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1855
		{
			yyVAL.str = "only"
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1856
		{
			yyVAL.str = "operator"
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1857
		{
			yyVAL.str = "option"
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1858
		{
			yyVAL.str = "options"
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1859
		{
			yyVAL.str = "or"
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1860
		{
			yyVAL.str = "ordinality"
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1861
		{
			yyVAL.str = "others"
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1862
		{
			yyVAL.str = "out"
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1863
		{
			yyVAL.str = "outer"
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1864
		{
			yyVAL.str = "overlay"
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1865
		{
			yyVAL.str = "overriding"
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1866
		{
			yyVAL.str = "owned"
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1867
		{
			yyVAL.str = "owner"
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1868
		{
			yyVAL.str = "parallel"
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1869
		{
			yyVAL.str = "parameter"
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1870
		{
			yyVAL.str = "parser"
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1871
		{
			yyVAL.str = "partial"
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1872
		{
			yyVAL.str = "partition"
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1873
		{
			yyVAL.str = "passing"
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1874
		{
			yyVAL.str = "password"
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1875
		{
			yyVAL.str = "path"
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1876
		{
			yyVAL.str = "placing"
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1877
		{
			yyVAL.str = "plan"
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1878
		{
			yyVAL.str = "plans"
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1879
		{
			yyVAL.str = "policy"
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1880
		{
			yyVAL.str = "position"
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1881
		{
			yyVAL.str = "preceding"
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1882
		{
			yyVAL.str = "prepare"
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1883
		{
			yyVAL.str = "prepared"
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1884
		{
			yyVAL.str = "preserve"
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1885
		{
			yyVAL.str = "primary"
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1886
		{
			yyVAL.str = "prior"
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1887
		{
			yyVAL.str = "privileges"
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1888
		{
			yyVAL.str = "procedural"
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1889
		{
			yyVAL.str = "procedure"
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1890
		{
			yyVAL.str = "procedures"
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1891
		{
			yyVAL.str = "program"
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1892
		{
			yyVAL.str = "publication"
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1893
		{
			yyVAL.str = "quote"
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1894
		{
			yyVAL.str = "quotes"
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1895
		{
			yyVAL.str = "range"
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1896
		{
			yyVAL.str = "read"
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1897
		{
			yyVAL.str = "real"
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1898
		{
			yyVAL.str = "reassign"
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1899
		{
			yyVAL.str = "recheck"
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1900
		{
			yyVAL.str = "recursive"
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1901
		{
			yyVAL.str = "ref"
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1902
		{
			yyVAL.str = "references"
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1903
		{
			yyVAL.str = "referencing"
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1904
		{
			yyVAL.str = "refresh"
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1905
		{
			yyVAL.str = "reindex"
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1906
		{
			yyVAL.str = "relative"
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1907
		{
			yyVAL.str = "release"
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1908
		{
			yyVAL.str = "rename"
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1909
		{
			yyVAL.str = "repeatable"
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1910
		{
			yyVAL.str = "replace"
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1911
		{
			yyVAL.str = "replica"
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1912
		{
			yyVAL.str = "reset"
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1913
		{
			yyVAL.str = "restart"
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1914
		{
			yyVAL.str = "restrict"
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1915
		{
			yyVAL.str = "return"
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1916
		{
			yyVAL.str = "returns"
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1917
		{
			yyVAL.str = "revoke"
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1918
		{
			yyVAL.str = "right"
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1919
		{
			yyVAL.str = "role"
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1920
		{
			yyVAL.str = "rollback"
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1921
		{
			yyVAL.str = "rollup"
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1922
		{
			yyVAL.str = "routine"
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1923
		{
			yyVAL.str = "routines"
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1924
		{
			yyVAL.str = "row"
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1925
		{
			yyVAL.str = "rows"
		}
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1926
		{
			yyVAL.str = "rule"
		}
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1927
		{
			yyVAL.str = "savepoint"
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1928
		{
			yyVAL.str = "scalar"
		}
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1929
		{
			yyVAL.str = "schema"
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1930
		{
			yyVAL.str = "schemas"
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1931
		{
			yyVAL.str = "scroll"
		}
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1932
		{
			yyVAL.str = "search"
		}
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1933
		{
			yyVAL.str = "security"
		}
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1934
		{
			yyVAL.str = "select"
		}
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1935
		{
			yyVAL.str = "sequence"
		}
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1936
		{
			yyVAL.str = "sequences"
		}
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1937
		{
			yyVAL.str = "serializable"
		}
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1938
		{
			yyVAL.str = "server"
		}
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1939
		{
			yyVAL.str = "session"
		}
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1940
		{
			yyVAL.str = "session_user"
		}
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1941
		{
			yyVAL.str = "set"
		}
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1942
		{
			yyVAL.str = "setof"
		}
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1943
		{
			yyVAL.str = "sets"
		}
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1944
		{
			yyVAL.str = "share"
		}
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1945
		{
			yyVAL.str = "show"
		}
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1946
		{
			yyVAL.str = "similar"
		}
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1947
		{
			yyVAL.str = "simple"
		}
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1948
		{
			yyVAL.str = "skip"
		}
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1949
		{
			yyVAL.str = "smallint"
		}
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1950
		{
			yyVAL.str = "snapshot"
		}
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1951
		{
			yyVAL.str = "some"
		}
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1952
		{
			yyVAL.str = "source"
		}
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1953
		{
			yyVAL.str = "sql"
		}
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1954
		{
			yyVAL.str = "stable"
		}
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1955
		{
			yyVAL.str = "standalone"
		}
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1956
		{
			yyVAL.str = "start"
		}
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1957
		{
			yyVAL.str = "statement"
		}
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1958
		{
			yyVAL.str = "statistics"
		}
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1959
		{
			yyVAL.str = "stdin"
		}
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1960
		{
			yyVAL.str = "stdout"
		}
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1961
		{
			yyVAL.str = "storage"
		}
	case 1047:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1962
		{
			yyVAL.str = "stored"
		}
	case 1048:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1963
		{
			yyVAL.str = "strict"
		}
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1964
		{
			yyVAL.str = "string"
		}
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1965
		{
			yyVAL.str = "strip"
		}
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1966
		{
			yyVAL.str = "subscription"
		}
	case 1052:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1967
		{
			yyVAL.str = "substring"
		}
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1968
		{
			yyVAL.str = "support"
		}
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1969
		{
			yyVAL.str = "symmetric"
		}
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1970
		{
			yyVAL.str = "sysid"
		}
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1971
		{
			yyVAL.str = "system"
		}
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1972
		{
			yyVAL.str = "system_user"
		}
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1973
		{
			yyVAL.str = "table"
		}
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1974
		{
			yyVAL.str = "tables"
		}
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1975
		{
			yyVAL.str = "tablesample"
		}
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1976
		{
			yyVAL.str = "tablespace"
		}
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1977
		{
			yyVAL.str = "target"
		}
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1978
		{
			yyVAL.str = "temp"
		}
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1979
		{
			yyVAL.str = "template"
		}
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1980
		{
			yyVAL.str = "temporary"
		}
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1981
		{
			yyVAL.str = "text"
		}
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1982
		{
			yyVAL.str = "then"
		}
	case 1068:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1983
		{
			yyVAL.str = "ties"
		}
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1984
		{
			yyVAL.str = "time"
		}
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1985
		{
			yyVAL.str = "timestamp"
		}
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1986
		{
			yyVAL.str = "trailing"
		}
	case 1072:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1987
		{
			yyVAL.str = "transaction"
		}
	case 1073:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1988
		{
			yyVAL.str = "transform"
		}
	case 1074:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1989
		{
			yyVAL.str = "treat"
		}
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1990
		{
			yyVAL.str = "trigger"
		}
	case 1076:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1991
		{
			yyVAL.str = "trim"
		}
	case 1077:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1992
		{
			yyVAL.str = "true"
		}
	case 1078:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1993
		{
			yyVAL.str = "truncate"
		}
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1994
		{
			yyVAL.str = "trusted"
		}
	case 1080:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1995
		{
			yyVAL.str = "type"
		}
	case 1081:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1996
		{
			yyVAL.str = "types"
		}
	case 1082:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1997
		{
			yyVAL.str = "uescape"
		}
	case 1083:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1998
		{
			yyVAL.str = "unbounded"
		}
	case 1084:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1999
		{
			yyVAL.str = "uncommitted"
		}
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2000
		{
			yyVAL.str = "unconditional"
		}
	case 1086:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2001
		{
			yyVAL.str = "unencrypted"
		}
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2002
		{
			yyVAL.str = "unique"
		}
	case 1088:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2003
		{
			yyVAL.str = "unknown"
		}
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2004
		{
			yyVAL.str = "unlisten"
		}
	case 1090:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2005
		{
			yyVAL.str = "unlogged"
		}
	case 1091:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2006
		{
			yyVAL.str = "until"
		}
	case 1092:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2007
		{
			yyVAL.str = "update"
		}
	case 1093:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2008
		{
			yyVAL.str = "user"
		}
	case 1094:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2009
		{
			yyVAL.str = "using"
		}
	case 1095:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2010
		{
			yyVAL.str = "vacuum"
		}
	case 1096:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2011
		{
			yyVAL.str = "valid"
		}
	case 1097:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2012
		{
			yyVAL.str = "validate"
		}
	case 1098:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2013
		{
			yyVAL.str = "validator"
		}
	case 1099:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2014
		{
			yyVAL.str = "value"
		}
	case 1100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2015
		{
			yyVAL.str = "values"
		}
	case 1101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2016
		{
			yyVAL.str = "varchar"
		}
	case 1102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2017
		{
			yyVAL.str = "variadic"
		}
	case 1103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2018
		{
			yyVAL.str = "verbose"
		}
	case 1104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2019
		{
			yyVAL.str = "version"
		}
	case 1105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2020
		{
			yyVAL.str = "view"
		}
	case 1106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2021
		{
			yyVAL.str = "views"
		}
	case 1107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2022
		{
			yyVAL.str = "volatile"
		}
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2023
		{
			yyVAL.str = "when"
		}
	case 1109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2024
		{
			yyVAL.str = "whitespace"
		}
	case 1110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2025
		{
			yyVAL.str = "work"
		}
	case 1111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2026
		{
			yyVAL.str = "wrapper"
		}
	case 1112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2027
		{
			yyVAL.str = "write"
		}
	case 1113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2028
		{
			yyVAL.str = "xml"
		}
	case 1114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2029
		{
			yyVAL.str = "xmlattributes"
		}
	case 1115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2030
		{
			yyVAL.str = "xmlconcat"
		}
	case 1116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2031
		{
			yyVAL.str = "xmlelement"
		}
	case 1117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2032
		{
			yyVAL.str = "xmlexists"
		}
	case 1118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2033
		{
			yyVAL.str = "xmlforest"
		}
	case 1119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2034
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 1120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2035
		{
			yyVAL.str = "xmlparse"
		}
	case 1121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2036
		{
			yyVAL.str = "xmlpi"
		}
	case 1122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2037
		{
			yyVAL.str = "xmlroot"
		}
	case 1123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2038
		{
			yyVAL.str = "xmlserialize"
		}
	case 1124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2039
		{
			yyVAL.str = "xmltable"
		}
	case 1125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2040
		{
			yyVAL.str = "yes"
		}
	case 1126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2041
		{
			yyVAL.str = "zone"
		}
	case 1127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2056
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2058
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2062
		{
			collateClause := ast.NewCollateClause(yyDollar[3].list)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 1130:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2068
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[1].node), 0)
		}
	case 1131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2073
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[1].node), 0)
		}
	case 1132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2078
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2083
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2088
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2093
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2098
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2103
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2108
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2113
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2118
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2123
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2128
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2133
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2138
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2143
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2148
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2152
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2156
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2160
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2164
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2168
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2172
		{
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1153:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2177
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2184
		{
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1155:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2189
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2196
		{
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1157:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2201
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1158:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2208
		{
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1159:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2213
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1160:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2220
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1161:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2227
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1162:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2234
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1163:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2241
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2248
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2252
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1166:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2256
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2260
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2264
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlaps"))
			leftList := yyDollar[1].list
			rightList := yyDollar[3].list
			combinedList := ast.NewNodeList()
			combinedList.Items = append(leftList.Items, rightList.Items...)
			yyVAL.node = ast.NewFuncCall(funcName, combinedList, 0)
		}
	case 1169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2273
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_TRUE)
		}
	case 1170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2277
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_TRUE)
		}
	case 1171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2281
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_FALSE)
		}
	case 1172:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2285
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_FALSE)
		}
	case 1173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2289
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_UNKNOWN)
		}
	case 1174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2293
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_UNKNOWN)
		}
	case 1175:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2297
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1176:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2302
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1177:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2307
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1178:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2312
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1179:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2317
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1180:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2322
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2327
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1182:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2332
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1183:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2337
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			sublink := ast.NewSubLink(subLinkType, yyDollar[4].stmt)
			sublink.Testexpr = yyDollar[1].node
			sublink.OperName = operName
			yyVAL.node = sublink
		}
	case 1184:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2346
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			if subLinkType == ast.ANY_SUBLINK {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ANY, operName, yyDollar[1].node, yyDollar[5].node, 0)
			} else {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ALL, operName, yyDollar[1].node, yyDollar[5].node, 0)
			}
		}
	case 1185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2356
		{
			yylex.Error("UNIQUE predicate is not yet implemented")
		}
	case 1186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2360
		{
			args := ast.NewNodeList(yyDollar[1].node.(ast.Expression))
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
		}
	case 1187:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2365
		{
			args := ast.NewNodeList(yyDollar[1].node.(ast.Expression))
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2371
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2377
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[3].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1190:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2384
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1191:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2391
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[4].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1192:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2399
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[3].ival)
			uniqueKeys := yyDollar[4].bval
			yyVAL.node = ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
		}
	case 1193:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2416
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[4].ival)
			uniqueKeys := yyDollar[5].bval
			jsonPredicate := ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(jsonPredicate))
		}
	case 1194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2435
		{
			yyVAL.node = ast.NewSetToDefault(0, 0, 0)
		}
	case 1195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2440
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2442
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2446
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2451
		{
			yyVAL.node = doNegate(yyDollar[2].node, 0)
		}
	case 1199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2455
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2460
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2465
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2470
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2475
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2480
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2485
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2490
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2495
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2500
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2505
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2510
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2515
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2519
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1213:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2523
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1214:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2528
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2533
		{
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1216:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2538
		{
			args := ast.NewNodeList(yyDollar[1].node)
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2545
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2546
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2548
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 1220:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2557
		{
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewParenExpr(ast.NewA_Indirection(yyDollar[2].node, yyDollar[4].list, 0), 0)
			} else {
				yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
			}
		}
	case 1221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2564
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2565
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2567
		{
			yyVAL.node = ast.NewExprSublink(yyDollar[1].stmt)
		}
	case 1224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2571
		{
			sublink := ast.NewExprSublink(yyDollar[1].stmt)
			yyVAL.node = ast.NewA_Indirection(sublink, yyDollar[2].list, 0)
		}
	case 1225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2576
		{
			yyVAL.node = ast.NewExistsSublink(yyDollar[2].stmt)
		}
	case 1226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2580
		{
			yyVAL.node = ast.NewArraySublink(yyDollar[2].stmt)
		}
	case 1227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2584
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2588
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = rowExpr
		}
	case 1229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2594
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_IMPLICIT_CAST
			yyVAL.node = rowExpr
		}
	case 1230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2600
		{
			exprList := yyDollar[3].list
			grouping := &ast.GroupingFunc{
				BaseExpr: ast.BaseExpr{BaseNode: ast.BaseNode{Tag: ast.T_GroupingFunc}},
				Args:     exprList,
			}
			yyVAL.node = grouping
		}
	case 1231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2617
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2618
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2619
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2620
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2621
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2625
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 1237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2629
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 1238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2633
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 1239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2637
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 1240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2641
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 1241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2645
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 1242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2649
		{
			yyVAL.node = ast.NewA_Const(ast.NewBitString(yyDollar[1].str), 0)
		}
	case 1243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2653
		{
			// This is a bit constant per SQL99
			yyVAL.node = ast.NewA_Const(ast.NewBitString(yyDollar[1].str), 0)
		}
	case 1244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2658
		{
			// generic type 'literal' syntax
			typeName := makeTypeNameFromNodeList(yyDollar[1].list)
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, typeName, 0)
		}
	case 1245:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2665
		{
			// generic syntax with a type modifier
			typeName := makeTypeNameFromNodeList(yyDollar[1].list)
			// For now, we'll skip the error checking for NamedArgExpr and ORDER BY
			// TODO: Add proper validation when needed
			typeName.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[6].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, typeName, 0)
		}
	case 1246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2675
		{
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, yyDollar[1].typnam, 0)
		}
	case 1247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2680
		{
			t := yyDollar[1].typnam
			t.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 1248:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2687
		{
			t := yyDollar[1].typnam
			// INTERVAL_FULL_RANGE equivalent and precision
			fullRange := ast.NewInteger(ast.INTERVAL_FULL_RANGE)
			precision := ast.NewInteger(yyDollar[3].ival)
			t.Typmods = ast.NewNodeList(fullRange, precision)
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[5].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 1249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2698
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2701
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2704
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2705
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 1253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2706
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 1254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2710
		{
			yyVAL.typnam = makeTypeNameFromNodeList(ast.NewNodeList(ast.NewString("interval")))
		}
	case 1255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2717
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_YEAR))
		}
	case 1256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2719
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_MONTH))
		}
	case 1257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2721
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY))
		}
	case 1258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2723
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_HOUR))
		}
	case 1259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2725
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_MINUTE))
		}
	case 1260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2727
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2729
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_YEAR | ast.INTERVAL_MASK_MONTH))
		}
	case 1262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2733
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR))
		}
	case 1263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2737
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE))
		}
	case 1264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2741
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2752
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE))
		}
	case 1266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2756
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2767
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1268:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2778
		{
			yyVAL.list = nil
		}
	case 1269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2783
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_SECOND))
		}
	case 1270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2787
		{
			yyVAL.list = ast.NewNodeList(
				ast.NewInteger(ast.INTERVAL_MASK_SECOND),
				ast.NewInteger(yyDollar[3].ival), // precision
			)
		}
	case 1271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2797
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 1272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2801
		{
			// Create all fields: first ColId followed by indirection items
			allFields := []ast.Node{ast.NewString(yyDollar[1].str)}
			allFields = append(allFields, yyDollar[2].list.Items...)
			yyVAL.node = ast.NewColumnRef(allFields...)
		}
	case 1273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2811
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2815
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2821
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1276:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2822
		{
			yyVAL.node = nil
		}
	case 1277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2826
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2830
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 1279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2834
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 1280:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2838
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 1281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2843
		{
			yyVAL.list = nil
		}
	case 1282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2845
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2857
		{
			funcCall := yyDollar[1].node.(*ast.FuncCall)

			// Apply within_group_clause if present
			if yyDollar[2].list != nil {
				// WITHIN GROUP (ORDER BY ...) - store the sort list
				funcCall.AggOrder = yyDollar[2].list
				funcCall.AggWithinGroup = true
			}

			// Apply filter_clause if present
			if yyDollar[3].node != nil {
				// FILTER (WHERE condition) - store the filter expression
				funcCall.AggFilter = yyDollar[3].node
			}

			// Apply over_clause if present (window functions)
			if yyDollar[4].windef != nil {
				funcCall.Over = yyDollar[4].windef
			}

			yyVAL.node = funcCall
		}
	case 1284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2881
		{
			jsonAgg := yyDollar[1].node

			// Create or get the Constructor
			var constructor *ast.JsonAggConstructor

			// Handle the filter_clause and over_clause by setting them in the Constructor
			switch jsonFunc := jsonAgg.(type) {
			case *ast.JsonObjectAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			case *ast.JsonArrayAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			}

			// Set filter and over clauses outside the switch (DRY)
			if constructor != nil {
				if yyDollar[2].node != nil {
					constructor.AggFilter = yyDollar[2].node.(ast.Node)
				}
				if yyDollar[3].windef != nil {
					constructor.Over = yyDollar[3].windef
				}
			}

			yyVAL.node = jsonAgg
		}
	case 1285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2914
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1286:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2920
		{
			// SystemFuncName("pg_collation_for")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("pg_collation_for"))
			funcCall := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2928
		{
			// makeSQLValueFunction(SVFOP_CURRENT_DATE, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_DATE, 0, -1, 0)
		}
	case 1288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2933
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIME, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIME, 0, -1, 0)
		}
	case 1289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2938
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIME_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIME_N, 0, yyDollar[3].ival, 0)
		}
	case 1290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2943
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIMESTAMP, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIMESTAMP, 0, -1, 0)
		}
	case 1291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2948
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIMESTAMP_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIMESTAMP_N, 0, yyDollar[3].ival, 0)
		}
	case 1292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2953
		{
			// makeSQLValueFunction(SVFOP_LOCALTIME, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIME, 0, -1, 0)
		}
	case 1293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2958
		{
			// makeSQLValueFunction(SVFOP_LOCALTIME_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIME_N, 0, yyDollar[3].ival, 0)
		}
	case 1294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2963
		{
			// makeSQLValueFunction(SVFOP_LOCALTIMESTAMP, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIMESTAMP, 0, -1, 0)
		}
	case 1295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2968
		{
			// makeSQLValueFunction(SVFOP_LOCALTIMESTAMP_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIMESTAMP_N, 0, yyDollar[3].ival, 0)
		}
	case 1296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2973
		{
			// makeSQLValueFunction(SVFOP_CURRENT_ROLE, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_ROLE, 0, -1, 0)
		}
	case 1297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2978
		{
			// makeSQLValueFunction(SVFOP_CURRENT_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_USER, 0, -1, 0)
		}
	case 1298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2983
		{
			// makeSQLValueFunction(SVFOP_SESSION_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_SESSION_USER, 0, -1, 0)
		}
	case 1299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2988
		{
			// SystemFuncName("system_user")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("system_user"))
			funcCall := ast.NewFuncCall(funcName, nil, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2996
		{
			// makeSQLValueFunction(SVFOP_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_USER, 0, -1, 0)
		}
	case 1301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3001
		{
			// makeSQLValueFunction(SVFOP_CURRENT_CATALOG, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_CATALOG, 0, -1, 0)
		}
	case 1302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3006
		{
			// makeSQLValueFunction(SVFOP_CURRENT_SCHEMA, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_SCHEMA, 0, -1, 0)
		}
	case 1303:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3011
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[3].node, yyDollar[5].typnam, 0)
		}
	case 1304:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3015
		{
			// SystemFuncName("extract")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("extract"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1305:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3023
		{
			// SystemFuncName("normalize")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("normalize"))
			funcCall := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node), 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1306:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3031
		{
			// SystemFuncName("normalize")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("normalize"))
			args := ast.NewNodeList(yyDollar[3].node)
			args.Items = append(args.Items, ast.NewA_Const(ast.NewString(yyDollar[5].str), -1))
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1307:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3041
		{
			// SystemFuncName("overlay")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlay"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1308:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3049
		{
			// SystemFuncName("overlay")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlay"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1309:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3057
		{
			// SystemFuncName("position")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("position"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1310:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3065
		{
			// SystemFuncName("substring")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("substring"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1311:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3073
		{
			// SystemFuncName("substring")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("substring"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1312:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3081
		{
			// SystemFuncName("treat")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), llast(yyDollar[5].typnam.Names))
			args := ast.NewNodeList(yyDollar[3].node)
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1313:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3090
		{
			// SystemFuncName("btrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("btrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1314:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3098
		{
			// SystemFuncName("ltrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("ltrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1315:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3106
		{
			// SystemFuncName("rtrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("rtrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1316:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3114
		{
			// SystemFuncName("btrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("btrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1317:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3122
		{
			// makeSimpleA_Expr(AEXPR_NULLIF, "=", $3, $5, @1)
			operName := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NULLIF, operName, yyDollar[3].node, yyDollar[5].node, 0)
		}
	case 1318:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3128
		{
			// CoalesceExpr *c = makeNode(CoalesceExpr); c->args = $3; c->location = @1
			yyVAL.node = ast.NewCoalesceExpr(0, yyDollar[3].list)
		}
	case 1319:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3133
		{
			// MinMaxExpr *v = makeNode(MinMaxExpr); v->args = $3; v->op = IS_GREATEST; v->location = @1
			yyVAL.node = ast.NewMinMaxExpr(0, 0, 0, ast.IS_GREATEST, yyDollar[3].list, 0)
		}
	case 1320:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3138
		{
			// MinMaxExpr *v = makeNode(MinMaxExpr); v->args = $3; v->op = IS_LEAST; v->location = @1
			yyVAL.node = ast.NewMinMaxExpr(0, 0, 0, ast.IS_LEAST, yyDollar[3].list, 0)
		}
	case 1321:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3143
		{
			// makeXmlExpr(IS_XMLCONCAT, NULL, NIL, $3, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLCONCAT, "", nil, nil, yyDollar[3].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1322:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3148
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, NIL, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, nil, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1323:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3153
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, $6, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, yyDollar[6].list, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1324:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3158
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, NIL, $6, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, nil, nil, yyDollar[6].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1325:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3163
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, $6, $8, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, yyDollar[6].list, nil, yyDollar[8].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1326:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3168
		{
			// makeXmlExpr(IS_XMLFOREST, NULL, $3, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLFOREST, "", yyDollar[3].list, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1327:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3173
		{
			// makeXmlExpr(IS_XMLPARSE, NULL, NIL, list_make2($4, makeBoolAConst($5, -1)), @1)
			// x->xmloption = $3
			wsOption := ast.NewA_Const(ast.NewBoolean(yyDollar[5].bval), -1)
			args := ast.NewNodeList(yyDollar[4].node, wsOption)
			xmlOption := ast.XmlOptionType(yyDollar[3].ival)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPARSE, "", nil, nil, args, xmlOption, false, 0, -1, 0)
		}
	case 1328:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3182
		{
			// SystemFuncName("xmlexists") - xmlexists(A PASSING [BY REF] B [BY REF]) is converted to xmlexists(A, B)
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("xmlexists"))
			args := ast.NewNodeList(yyDollar[3].node, yyDollar[4].node)
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1329:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3191
		{
			// makeXmlExpr(IS_XMLPI, $4, NIL, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPI, yyDollar[4].str, nil, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1330:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3196
		{
			// makeXmlExpr(IS_XMLPI, $4, NIL, list_make1($6), @1)
			args := ast.NewNodeList(yyDollar[6].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPI, yyDollar[4].str, nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1331:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3202
		{
			// makeXmlExpr(IS_XMLROOT, NULL, NIL, list_make3(...), @1)
			args := ast.NewNodeList(yyDollar[3].node, yyDollar[5].node, yyDollar[6].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLROOT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1332:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3208
		{
			/* Support for legacy (non-standard) json_object() */
			funcName := ast.NewNodeList(ast.NewString("json_object"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1333:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3219
		{
			n := ast.NewJsonObjectConstructor(yyDollar[3].list, yyDollar[4].bval, yyDollar[5].bval)
			if yyDollar[6].node != nil {
				n.Output = yyDollar[6].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1334:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3227
		{
			n := ast.NewJsonObjectConstructor(nil, false, false)
			if yyDollar[3].node != nil {
				n.Output = yyDollar[3].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1335:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3239
		{
			n := ast.NewJsonArrayConstructor(yyDollar[3].list, yyDollar[4].bval)
			if yyDollar[5].node != nil {
				n.Output = yyDollar[5].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1336:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3251
		{
			n := ast.NewJsonArrayQueryConstructor(yyDollar[3].stmt, true) /* XXX: absent_on_null = true */
			if yyDollar[4].node != nil {
				n.Format = yyDollar[4].node.(*ast.JsonFormat)
			}
			if yyDollar[5].node != nil {
				n.Output = yyDollar[5].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1337:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3264
		{
			n := ast.NewJsonArrayConstructor(nil, true)
			if yyDollar[3].node != nil {
				n.Output = yyDollar[3].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1338:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3272
		{
			n := ast.NewJsonParseExpr(yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[4].bval)
			n.Output = nil
			yyVAL.node = n
		}
	case 1339:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3278
		{
			n := ast.NewJsonScalarExpr(yyDollar[3].node.(ast.Expr))
			n.Output = nil
			yyVAL.node = n
		}
	case 1340:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3284
		{
			n := ast.NewJsonSerializeExpr(yyDollar[3].node.(*ast.JsonValueExpr))
			if yyDollar[4].node != nil {
				n.Output = yyDollar[4].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3292
		{
			m := ast.NewMergeSupportFunc(ast.TEXTOID, ast.InvalidOid, 0)
			yyVAL.node = m
		}
	case 1342:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:3303
		{
			n := ast.NewJsonFuncExpr(ast.JSON_QUERY_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			if yyDollar[7].node != nil {
				n.Output = yyDollar[7].node.(*ast.JsonOutput)
			}
			n.Wrapper = ast.JsonWrapper(yyDollar[8].ival)
			n.Quotes = ast.JsonQuotes(yyDollar[9].ival)
			if yyDollar[10].node != nil {
				behaviors := yyDollar[10].node.(*ast.NodeList)
				if linitial(behaviors) != nil {
					n.OnEmpty = linitial(behaviors).(*ast.JsonBehavior)
				}
				if lsecond(behaviors) != nil {
					n.OnError = lsecond(behaviors).(*ast.JsonBehavior)
				}
			}
			yyVAL.node = n
		}
	case 1343:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3328
		{
			n := ast.NewJsonFuncExpr(ast.JSON_EXISTS_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			n.Output = nil
			if yyDollar[7].node != nil {
				n.OnError = yyDollar[7].node.(*ast.JsonBehavior)
			}
			yyVAL.node = n
		}
	case 1344:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3344
		{
			n := ast.NewJsonFuncExpr(ast.JSON_VALUE_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			if yyDollar[7].node != nil {
				n.Output = yyDollar[7].node.(*ast.JsonOutput)
			}
			if yyDollar[8].node != nil {
				behaviors := yyDollar[8].node.(*ast.NodeList)
				if linitial(behaviors) != nil {
					n.OnEmpty = linitial(behaviors).(*ast.JsonBehavior)
				}
				if lsecond(behaviors) != nil {
					n.OnError = lsecond(behaviors).(*ast.JsonBehavior)
				}
			}
			yyVAL.node = n
		}
	case 1345:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3364
		{
			// XmlSerialize node - n->xmloption = $3; n->expr = $4; n->typeName = $6; n->indent = $7;
			xmlOption := ast.XmlOptionType(yyDollar[3].ival)
			yyVAL.node = ast.NewXmlSerialize(xmlOption, yyDollar[4].node, yyDollar[6].typnam, yyDollar[7].bval, 0)
		}
	case 1346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3374
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3378
		{
			yyVAL.list = nil
		}
	case 1348:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3385
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1349:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3389
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3393
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node)
		}
	case 1351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3397
		{
			sysTypeName := &ast.TypeName{
				Names:   ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("int4")),
				Typemod: -1,
			}
			tc := ast.NewTypeCast(yyDollar[3].node, sysTypeName, -1)
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, ast.NewInteger(1), tc)
		}
	case 1352:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3406
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3413
		{
			yyDollar[3].list.Append(yyDollar[1].node)
			yyVAL.list = yyDollar[3].list
		}
	case 1354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3418
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3422
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3429
		{
			// list_make2(makeStringConst($1, @1), $3)
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str), yyDollar[3].node)
		}
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3439
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3440
		{
			yyVAL.str = "year"
		}
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3441
		{
			yyVAL.str = "month"
		}
	case 1360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3442
		{
			yyVAL.str = "day"
		}
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3443
		{
			yyVAL.str = "hour"
		}
	case 1362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3444
		{
			yyVAL.str = "minute"
		}
	case 1363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3445
		{
			yyVAL.str = "second"
		}
	case 1364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3446
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1365:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3451
		{
			/* overlay(A PLACING B FROM C FOR D) is converted to overlay(A, B, C, D) */
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 1366:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3456
		{
			/* overlay(A PLACING B FROM C) is converted to overlay(A, B, C) */
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3464
		{
			yyVAL.list = ast.NewNodeList(yyDollar[3].node, yyDollar[1].node)
		}
	case 1368:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3467
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3472
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3476
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3484
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3488
		{
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3493
		{
			yyVAL.bval = true
		}
	case 1374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3494
		{
			yyVAL.bval = false
		}
	case 1375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3495
		{
			yyVAL.bval = false
		}
	case 1376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3498
		{
			yyVAL.bval = true
		}
	case 1377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3499
		{
			yyVAL.bval = false
		}
	case 1378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3500
		{
			yyVAL.bval = false
		}
	case 1379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3505
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3509
		{
			yyVAL.node = ast.NewA_Const(ast.NewNull(), 0)
		}
	case 1381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3516
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_YES)), 0)
		}
	case 1382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3520
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_NO)), 0)
		}
	case 1383:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3524
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_NO_VALUE)), 0)
		}
	case 1384:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3528
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_OMITTED)), 0)
		}
	case 1385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3535
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3536
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3537
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3541
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3545
		{
			// PostgreSQL uses check_func_name here
			// We implement the logic inline - prepend ColId to indirection list
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[2].list.Items...)
			result := ast.NewNodeList(items...)
			yyVAL.list = result
		}
	case 1390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3556
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].list, nil, 0)
		}
	case 1391:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3560
		{
			// Special case for aggregates like COUNT(*) - set AggStar to true
			funcCall := ast.NewFuncCall(yyDollar[1].list, nil, 0)
			funcCall.AggStar = true
			yyVAL.node = funcCall
		}
	case 1392:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3567
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[3].list, 0)
			// Note: In full implementation, would set agg_order from $4
			yyVAL.node = funcCall
		}
	case 1393:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3573
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, ast.NewNodeList(yyDollar[4].node), 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1394:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3579
		{
			yyDollar[3].list.Append(yyDollar[6].node)
			args := yyDollar[3].list
			funcCall := ast.NewFuncCall(yyDollar[1].list, args, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $7
			yyVAL.node = funcCall
		}
	case 1395:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3587
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would mark as aggregate and set agg_order from $5
			yyVAL.node = funcCall
		}
	case 1396:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3593
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would set agg_distinct = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3601
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3605
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3612
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3616
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3620
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1402:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3627
		{
			yyVAL.node = ast.NewCaseExpr(0, yyDollar[2].node, yyDollar[3].list, yyDollar[4].node)
		}
	case 1403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3632
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3633
		{
			yyVAL.node = nil
		}
	case 1405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3637
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3639
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1407:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3647
		{
			yyVAL.node = ast.NewCaseWhen(yyDollar[2].node, yyDollar[4].node)
		}
	case 1408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3653
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1409:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3654
		{
			yyVAL.node = nil
		}
	case 1410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3659
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3663
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3667
		{
			yyVAL.node = ast.NewArrayConstructor(ast.NewNodeList())
		}
	case 1413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3672
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3674
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1415:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3681
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3682
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1417:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3684
		{
			nodeList := yyDollar[2].list
			nodeList.Append(yyDollar[4].node)
			yyVAL.list = nodeList
		}
	case 1418:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3691
		{
			yyVAL.node = yyDollar[3].list
		}
	case 1419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3692
		{
			yyVAL.node = ast.NewNodeList()
		}
	case 1420:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3696
		{
			yyDollar[2].list.Append(yyDollar[4].node)
			yyVAL.node = yyDollar[2].list
		}
	case 1421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3702
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3703
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3704
		{
			yyVAL.ival = int(ast.ALL_SUBLINK)
		}
	case 1424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3709
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1425:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3713
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3717
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~"))
		}
	case 1427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3721
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~"))
		}
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3725
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~*"))
		}
	case 1429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3729
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~*"))
		}
	case 1430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3735
		{
			yyVAL.str = "NFC"
		}
	case 1431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3736
		{
			yyVAL.str = "NFD"
		}
	case 1432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3737
		{
			yyVAL.str = "NFKC"
		}
	case 1433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3738
		{
			yyVAL.str = "NFKD"
		}
	case 1434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3742
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3743
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3744
		{
			yyVAL.ival = int(ast.JS_TYPE_ARRAY)
		}
	case 1437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3745
		{
			yyVAL.ival = int(ast.JS_TYPE_OBJECT)
		}
	case 1438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3746
		{
			yyVAL.ival = int(ast.JS_TYPE_SCALAR)
		}
	case 1439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3750
		{
			yyVAL.bval = true
		}
	case 1440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3751
		{
			yyVAL.bval = true
		}
	case 1441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3752
		{
			yyVAL.bval = false
		}
	case 1442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3753
		{
			yyVAL.bval = false
		}
	case 1443:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3754
		{
			yyVAL.bval = false
		}
	case 1444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3759
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3763
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3772
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.ArrayBounds = yyDollar[2].list
		}
	case 1447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3777
		{
			yyVAL.typnam = yyDollar[2].typnam
			yyVAL.typnam.ArrayBounds = yyDollar[3].list
			yyVAL.typnam.Setof = true
		}
	case 1448:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3783
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(yyDollar[4].ival))
		}
	case 1449:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3788
		{
			yyVAL.typnam = yyDollar[2].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(yyDollar[5].ival))
			yyVAL.typnam.Setof = true
		}
	case 1450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3794
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(-1))
		}
	case 1451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3799
		{
			yyVAL.typnam = yyDollar[2].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(-1))
			yyVAL.typnam.Setof = true
		}
	case 1452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3808
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList()
			} else {
				yyVAL.list = yyDollar[1].list
			}
			yyVAL.list.Append(ast.NewInteger(-1))
		}
	case 1453:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3817
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList()
			} else {
				yyVAL.list = yyDollar[1].list
			}
			yyVAL.list.Append(ast.NewInteger(yyDollar[3].ival))
		}
	case 1454:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3826
		{
			yyVAL.list = nil
		}
	case 1455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3831
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3832
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3833
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3834
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3835
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3837
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1461:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3842
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.Typmods = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_FULL_RANGE), ast.NewInteger(yyDollar[3].ival))
		}
	case 1462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3846
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3849
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3850
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3851
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3854
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3857
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3860
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3864
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[2].str))
		}
	case 1470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3868
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3875
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1472:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3879
		{
			yyVAL.list = nil
		}
	case 1473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3885
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3891
		{
			// Create qualified type name from name + attrs
			name := ast.NewString(yyDollar[1].str)
			names := &ast.NodeList{Items: append([]ast.Node{name}, yyDollar[2].list.Items...)}
			typeName := makeTypeNameFromNodeList(names)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3902
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3906
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3910
		{
			yyVAL.typnam = makeTypeNameFromString("int2")
		}
	case 1478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3914
		{
			yyVAL.typnam = makeTypeNameFromString("int8")
		}
	case 1479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3918
		{
			yyVAL.typnam = makeTypeNameFromString("float4")
		}
	case 1480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3922
		{
			yyVAL.typnam = yyDollar[2].typnam
		}
	case 1481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3926
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3930
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3935
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3940
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3945
		{
			yyVAL.typnam = makeTypeNameFromString("bool")
		}
	case 1486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3951
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3955
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3961
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3965
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3971
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3975
		{
			yyVAL.typnam = yyDollar[1].typnam
			// Set typmods to nil for BitWithoutLength in const context
			yyVAL.typnam.Typmods = nil
		}
	case 1492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3983
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3987
		{
			yyVAL.typnam = yyDollar[1].typnam
			// Set typmods to nil for CharacterWithoutLength in const context
			yyVAL.typnam.Typmods = nil
		}
	case 1494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3995
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4003
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4011
		{
			yyVAL.str = "varchar"
		}
	case 1497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4015
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4023
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4031
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1500:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4041
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Set typmods with the length parameter, similar to PostgreSQL's approach
			lengthConst := ast.NewInteger(int(yyDollar[3].ival))
			typeName.Typmods = ast.NewNodeList()
			typeName.Typmods.Append(lengthConst)
			yyVAL.typnam = typeName
		}
	case 1501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4052
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// CHAR defaults to CHAR(1)
				lengthConst := ast.NewInteger(1)
				typeName.Typmods = ast.NewNodeList()
				typeName.Typmods.Append(lengthConst)
			}
			yyVAL.typnam = typeName
		}
	case 1502:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4066
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			tn := makeTypeNameFromString(typeName)
			tn.Typmods = yyDollar[4].list
			yyVAL.typnam = tn
		}
	case 1503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4080
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1504:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4092
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			tn := makeTypeNameFromString(typeName)
			tn.Typmods = ast.NewNodeList(ast.NewInteger(yyDollar[3].ival))
			yyVAL.typnam = tn
		}
	case 1505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4104
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1506:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4114
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			tn := makeTypeNameFromString(typeName)
			tn.Typmods = ast.NewNodeList(ast.NewInteger(yyDollar[3].ival))
			yyVAL.typnam = tn
		}
	case 1507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4126
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4138
		{
			yyVAL.typnam = makeTypeNameFromString("json")
		}
	case 1509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4143
		{
			yyVAL.ival = 1
		}
	case 1510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4144
		{
			yyVAL.ival = 0
		}
	case 1511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4145
		{
			yyVAL.ival = 0
		}
	case 1512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4148
		{
			yyVAL.ival = 1
		}
	case 1513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4149
		{
			yyVAL.ival = 0
		}
	case 1514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4153
		{
			if yyDollar[2].ival < 1 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else if yyDollar[2].ival <= 7 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else {
				yyVAL.typnam = makeTypeNameFromString("float8")
			}
		}
	case 1515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4163
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4170
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1517:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4174
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4181
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1519:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4185
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4190
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4191
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4194
		{
			yyVAL.str = "+"
		}
	case 1523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4195
		{
			yyVAL.str = "-"
		}
	case 1524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4196
		{
			yyVAL.str = "*"
		}
	case 1525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4197
		{
			yyVAL.str = "/"
		}
	case 1526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4198
		{
			yyVAL.str = "%"
		}
	case 1527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4199
		{
			yyVAL.str = "^"
		}
	case 1528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4200
		{
			yyVAL.str = "<"
		}
	case 1529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4201
		{
			yyVAL.str = ">"
		}
	case 1530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4202
		{
			yyVAL.str = "="
		}
	case 1531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4203
		{
			yyVAL.str = "<="
		}
	case 1532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4204
		{
			yyVAL.str = ">="
		}
	case 1533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4205
		{
			yyVAL.str = "<>"
		}
	case 1534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4209
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4213
		{
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[3].list.Items...)
			yyVAL.list = ast.NewNodeList(items...)
		}
	case 1536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4222
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1537:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4223
		{
			yyVAL.list = nil
		}
	case 1538:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4228
		{
			// WITHIN GROUP (ORDER BY ...) for ordered-set aggregates
			yyVAL.list = yyDollar[4].list
		}
	case 1539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4232
		{
			yyVAL.list = nil
		}
	case 1540:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4237
		{
			// FILTER (WHERE condition) for aggregate filtering
			yyVAL.node = yyDollar[4].node
		}
	case 1541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4241
		{
			yyVAL.node = nil
		}
	case 1542:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4245
		{
			yyVAL.ival = 0
		}
	case 1543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4246
		{
			yyVAL.ival = 0
		}
	case 1544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4250
		{
			subLink := ast.NewSubLink(ast.ANY_SUBLINK, yyDollar[1].stmt.(*ast.SelectStmt))
			yyVAL.node = subLink
		}
	case 1545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4255
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4270
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4271
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4275
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4276
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4285
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4286
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4295
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4297
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			// Use NodeList directly for SortClause
			selectStmt.SortClause = yyDollar[2].list
			yyVAL.stmt = selectStmt
		}
	case 1554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4304
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			selectStmt.LockingClause = yyDollar[3].list // Set the locking clause
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1555:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4316
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			if yyDollar[3].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[3].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[3].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[3].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4328
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			yyVAL.stmt = selectStmt
		}
	case 1557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4334
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			yyVAL.stmt = selectStmt
		}
	case 1558:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4341
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			if yyDollar[5].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[5].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[5].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[5].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1559:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4354
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[5].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4373
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4374
		{
			yyVAL.list = nil
		}
	case 1562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4378
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1563:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4379
		{
			yyVAL.list = nil
		}
	case 1564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4384
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4388
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4396
		{
			lockingClause := &ast.LockingClause{
				BaseNode:   ast.BaseNode{Tag: ast.T_LockingClause},
				Strength:   ast.LockClauseStrength(yyDollar[1].ival),
				LockedRels: yyDollar[2].list, // Store as *NodeList directly
				WaitPolicy: ast.LockWaitPolicy(yyDollar[3].ival),
			}
			yyVAL.node = lockingClause
		}
	case 1567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4408
		{
			yyVAL.ival = int(ast.LCS_FORUPDATE)
		}
	case 1568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4409
		{
			yyVAL.ival = int(ast.LCS_FORNOKEYUPDATE)
		}
	case 1569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4410
		{
			yyVAL.ival = int(ast.LCS_FORSHARE)
		}
	case 1570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4411
		{
			yyVAL.ival = int(ast.LCS_FORKEYSHARE)
		}
	case 1571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4415
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4416
		{
			yyVAL.list = nil
		}
	case 1573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4421
		{
			yyVAL.ival = int(ast.LockWaitError)
		}
	case 1574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4422
		{
			yyVAL.ival = int(ast.LockWaitSkip)
		}
	case 1575:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4423
		{
			yyVAL.ival = int(ast.LockWaitBlock)
		}
	case 1576:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4434
		{
			selectStmt := ast.NewSelectStmt()
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1577:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4453
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].list
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4471
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = ast.NewNodeList(starTarget)
			selectStmt.FromClause = ast.NewNodeList(yyDollar[2].rangevar)
			yyVAL.stmt = selectStmt
		}
	case 1579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4481
		{
			// VALUES clause is a SelectStmt with ValuesLists
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1580:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4486
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_UNION, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1581:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4491
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_INTERSECT, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1582:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4496
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_EXCEPT, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4507
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4508
		{
			yyVAL.list = nil
		}
	case 1585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4512
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4513
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4518
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4522
		{
			// Implicit alias (no AS keyword)
			yyVAL.target = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 1589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4527
		{
			// No alias - use default naming
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4532
		{
			// SELECT * - all columns
			yyVAL.target = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 1591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4543
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4544
		{
			yyVAL.list = nil
		}
	case 1593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4548
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4549
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4558
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeVar
		}
	case 1596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4566
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			rangeTableSample := yyDollar[3].node.(*ast.RangeTableSample)
			rangeTableSample.Relation = rangeVar
			yyVAL.node = rangeTableSample
		}
	case 1597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4576
		{
			/* Subquery in FROM clause */
			subquery := yyDollar[1].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[2].alias != nil {
				alias = yyDollar[2].alias
			}
			rangeSubselect := ast.NewRangeSubselect(false, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4587
		{
			/* LATERAL subquery in FROM clause */
			subquery := yyDollar[2].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[3].alias != nil {
				alias = yyDollar[3].alias
			}
			rangeSubselect := ast.NewRangeSubselect(true, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4598
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1600:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4602
		{
			joinExpr := yyDollar[2].node.(*ast.JoinExpr)
			joinExpr.Alias = yyDollar[4].alias
			yyVAL.node = joinExpr
		}
	case 1601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4608
		{
			rangeFunc := yyDollar[1].node.(*ast.RangeFunction)
			funcAliasList := yyDollar[2].list
			if funcAliasList != nil && funcAliasList.Len() >= 2 {
				// func_alias_clause returns [alias, coldeflist]
				if alias := linitial(funcAliasList); alias != nil {
					rangeFunc.Alias = alias.(*ast.Alias)
				}
				if coldeflist := lsecond(funcAliasList); coldeflist != nil {
					// ColDefList is now *NodeList, no conversion needed
					if nodeList, ok := coldeflist.(*ast.NodeList); ok && nodeList != nil {
						rangeFunc.ColDefList = nodeList
					}
				}
			}
			yyVAL.node = rangeFunc
		}
	case 1602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4626
		{
			rangeFunc := yyDollar[2].node.(*ast.RangeFunction)
			rangeFunc.Lateral = true
			funcAliasList := yyDollar[3].list
			if funcAliasList != nil && funcAliasList.Len() >= 2 {
				// func_alias_clause returns [alias, coldeflist]
				if alias := linitial(funcAliasList); alias != nil {
					rangeFunc.Alias = alias.(*ast.Alias)
				}
				if coldeflist := lsecond(funcAliasList); coldeflist != nil {
					// ColDefList is now *NodeList, no conversion needed
					if nodeList, ok := coldeflist.(*ast.NodeList); ok && nodeList != nil {
						rangeFunc.ColDefList = nodeList
					}
				}
			}
			yyVAL.node = rangeFunc
		}
	case 1603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4645
		{
			rangeTableFunc := yyDollar[1].node.(*ast.RangeTableFunc)
			if yyDollar[2].alias != nil {
				rangeTableFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4653
		{
			rangeTableFunc := yyDollar[2].node.(*ast.RangeTableFunc)
			rangeTableFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeTableFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4662
		{
			jsonTable := yyDollar[1].node.(*ast.JsonTable)
			if yyDollar[2].alias != nil {
				jsonTable.Alias = yyDollar[2].alias
			}
			yyVAL.node = jsonTable
		}
	case 1606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4670
		{
			jsonTable := yyDollar[2].node.(*ast.JsonTable)
			jsonTable.Lateral = true
			if yyDollar[3].alias != nil {
				jsonTable.Alias = yyDollar[3].alias
			}
			yyVAL.node = jsonTable
		}
	case 1607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4682
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.rangevar = rangeVar
		}
	case 1608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4688
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4695
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.rangevar = rangeVar
		}
	case 1610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4701
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1611:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4707
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4717
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4721
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4727
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4744
		{
			yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
		}
	case 1616:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4748
		{
			/* CROSS JOIN is same as unqualified inner join */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewJoinExpr(ast.JOIN_INNER, left, right, nil)
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1617:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4757
		{
			left := yyDollar[1].node
			right := yyDollar[4].node
			joinType := ast.JoinType(yyDollar[2].ival)
			joinQual := yyDollar[5].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(joinType, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(joinType, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1618:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4783
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[3].node
			joinQual := yyDollar[4].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(ast.JOIN_INNER, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(ast.JOIN_INNER, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1619:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4809
		{
			left := yyDollar[1].node
			right := yyDollar[5].node
			joinType := ast.JoinType(yyDollar[3].ival)
			join := ast.NewNaturalJoinExpr(joinType, left, right)
			yyVAL.node = join
		}
	case 1620:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4817
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewNaturalJoinExpr(ast.JOIN_INNER, left, right)
			yyVAL.node = join
		}
	case 1621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4827
		{
			yyVAL.ival = int(ast.JOIN_FULL)
		}
	case 1622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4828
		{
			yyVAL.ival = int(ast.JOIN_LEFT)
		}
	case 1623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4829
		{
			yyVAL.ival = int(ast.JOIN_RIGHT)
		}
	case 1624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4830
		{
			yyVAL.ival = int(ast.JOIN_INNER)
		}
	case 1625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4835
		{
			yyVAL.ival = 1
		}
	case 1626:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4836
		{
			yyVAL.ival = 0
		}
	case 1627:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4846
		{
			/* Create a two-element list: [name_list, alias_or_null] following PostgreSQL */
			nameList := yyDollar[3].list
			var aliasNode ast.Node = nil
			if yyDollar[5].alias != nil {
				aliasNode = yyDollar[5].alias
			}
			usingList := ast.NewNodeList(nameList, aliasNode)
			yyVAL.node = usingList
		}
	case 1628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4857
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4868
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4872
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4876
		{
			yyVAL.with = ast.NewWithClause(yyDollar[3].list, true, 0)
		}
	case 1632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4882
		{
			yyVAL.with = yyDollar[1].with
		}
	case 1633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4883
		{
			yyVAL.with = nil
		}
	case 1634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4888
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4892
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1636:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4900
		{
			ctename := yyDollar[1].str
			query := yyDollar[6].stmt
			cte := ast.NewCommonTableExpr(ctename, query)

			// Set column names if provided
			if yyDollar[2].list != nil {
				cte.Aliascolnames = yyDollar[2].list
			}

			// Set materialized option
			cte.Ctematerialized = ast.CTEMaterialized(yyDollar[4].ival)

			// Set search clause if provided
			if yyDollar[8].node != nil {
				cte.SearchClause = yyDollar[8].node.(*ast.CTESearchClause)
			}

			// Set cycle clause if provided
			if yyDollar[9].node != nil {
				cte.CycleClause = yyDollar[9].node.(*ast.CTECycleClause)
			}

			yyVAL.node = cte
		}
	case 1637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4928
		{
			yyVAL.ival = int(ast.CTEMaterializeAlways)
		}
	case 1638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4929
		{
			yyVAL.ival = int(ast.CTEMaterializeNever)
		}
	case 1639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4930
		{
			yyVAL.ival = int(ast.CTEMaterializeDefault)
		}
	case 1640:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4935
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, false, seqColumn)
		}
	case 1641:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4941
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, true, seqColumn)
		}
	case 1642:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4947
		{
			yyVAL.node = nil
		}
	case 1643:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:4954
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			markValue := yyDollar[6].node.(ast.Expression)
			markDefault := yyDollar[8].node.(ast.Expression)
			pathColumn := yyDollar[10].str
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, markValue, markDefault, pathColumn)
		}
	case 1644:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4963
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			pathColumn := yyDollar[6].str
			// For simple CYCLE clause, use nil for mark values to avoid TO/DEFAULT in deparsing
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, nil, nil, pathColumn)
		}
	case 1645:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4971
		{
			yyVAL.node = nil
		}
	case 1646:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4982
		{
			/* Create a SelectStmt with VALUES clause following PostgreSQL */
			selectStmt := ast.NewSelectStmt()
			exprList := yyDollar[3].list
			selectStmt.ValuesLists = ast.NewNodeList(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1647:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4990
		{
			/* Add additional VALUES row to existing SelectStmt */
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			exprList := yyDollar[4].list
			selectStmt.ValuesLists.Append(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5004
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1649:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5005
		{
			yyVAL.node = nil
		}
	case 1650:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5013
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1651:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5015
		{
			cursorExpr := ast.NewCurrentOfExpr(0, yyDollar[4].str) // cvarno filled in by parse analysis
			yyVAL.node = cursorExpr
		}
	case 1652:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5019
		{
			yyVAL.node = nil
		}
	case 1653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5023
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5031
		{
			yyVAL.alias = yyDollar[1].alias
		}
	case 1655:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5032
		{
			yyVAL.alias = nil
		}
	case 1656:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5037
		{
			nameList := yyDollar[4].list
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nameList)
		}
	case 1657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5042
		{
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 1658:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5046
		{
			nameList := yyDollar[3].list
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nameList)
		}
	case 1659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5051
		{
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 1660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5062
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].alias, nil)
		}
	case 1661:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5066
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[3].list)
		}
	case 1662:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5070
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.list = ast.NewNodeList(alias, yyDollar[4].list)
		}
	case 1663:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5075
		{
			alias := ast.NewAlias(yyDollar[1].str, nil)
			yyVAL.list = ast.NewNodeList(alias, yyDollar[3].list)
		}
	case 1664:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5080
		{
			yyVAL.list = ast.NewNodeList(nil, nil)
		}
	case 1665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5088
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.alias = alias
		}
	case 1666:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5092
		{
			yyVAL.alias = nil
		}
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5100
		{
			yyVAL.ival = 1
		}
	case 1668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5101
		{
			yyVAL.ival = 0
		}
	case 1669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5105
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1670:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5106
		{
			yyVAL.list = yyDollar[4].list
		}
	case 1671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5110
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1672:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5111
		{
			yyVAL.list = nil
		}
	case 1673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5121
		{
			yyVAL.into = ast.NewIntoClause(yyDollar[2].node.(*ast.RangeVar), nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 1674:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5124
		{
			yyVAL.into = nil
		}
	case 1675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5135
		{
			hasOrdinality := yyDollar[2].ival == 1
			// For a simple function, create a NodeList containing a single NodeList with the function
			funcList := ast.NewNodeList(yyDollar[1].node)
			functions := ast.NewNodeList(funcList)
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, false, functions, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1676:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5144
		{
			hasOrdinality := yyDollar[6].ival == 1
			// rowsfrom_list is already a NodeList containing NodeLists
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, true, yyDollar[4].list, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5154
		{
			yyVAL.ival = 1
		}
	case 1678:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5155
		{
			yyVAL.ival = 0
		}
	case 1679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5161
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 1680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5165
		{
			yyDollar[1].list.Append(yyDollar[3].list)
			yyVAL.list = yyDollar[1].list
		}
	case 1681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5172
		{
			funcList := ast.NewNodeList(yyDollar[1].node)
			if yyDollar[2].list != nil {
				funcList.Append(yyDollar[2].list)
			}
			yyVAL.list = funcList
		}
	case 1682:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5181
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1683:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5182
		{
			yyVAL.list = nil
		}
	case 1684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5192
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 1685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5196
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 1686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5208
		{
			yyVAL.funparam = &ast.FunctionParameter{
				BaseNode: ast.BaseNode{Tag: ast.T_FunctionParameter},
				Name:     yyDollar[1].str,
				ArgType:  yyDollar[2].typnam,
				Mode:     ast.FUNC_PARAM_TABLE,
				DefExpr:  nil,
			}
		}
	case 1687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5221
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1688:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5222
		{
			yyVAL.list = nil
		}
	case 1689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5228
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5232
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5241
		{
			columnDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			// Note: opt_collate_clause support can be added when needed
			// PostgreSQL sets: n->collClause = (CollateClause *) $3;
			yyVAL.node = columnDef
		}
	case 1692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5252
		{
			// Pass the NodeList directly to NewCollateClause
			nameList := yyDollar[2].list
			yyVAL.node = ast.NewCollateClause(nameList)
		}
	case 1693:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5257
		{
			yyVAL.node = nil
		}
	case 1694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5262
		{
			yyVAL.str = "BY REF"
		}
	case 1695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5263
		{
			yyVAL.str = "BY VALUE"
		}
	case 1696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5269
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5273
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5277
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1699:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5281
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5289
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5293
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5301
		{
			target := ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
			yyVAL.node = target
		}
	case 1703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5306
		{
			target := ast.NewResTarget("", yyDollar[2].node)
			yyVAL.node = target
		}
	case 1704:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5315
		{
			// XMLTABLE(xpath_expr PASSING doc_expr COLUMNS ...)
			// $3 is xpath_expr (should be RowExpr), $4 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[4].node.(ast.Expression), yyDollar[3].node.(ast.Expression), nil, yyDollar[6].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1705:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:5323
		{
			// XMLTABLE(XMLNAMESPACES(...), xpath_expr PASSING doc_expr COLUMNS ...)
			// $8 is xpath_expr (should be RowExpr), $9 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[9].node.(ast.Expression), yyDollar[8].node.(ast.Expression), yyDollar[5].list, yyDollar[11].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5334
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1707:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5338
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1708:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5347
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5352
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, nil, true, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5357
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			// TODO: Process column options from $3
			yyVAL.node = rangeTableFuncCol
		}
	case 1711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5367
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5371
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1713:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5380
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5384
		{
			yyVAL.node = ast.NewDefElem("default", yyDollar[2].node)
		}
	case 1715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5388
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(true))
		}
	case 1716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5392
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(false))
		}
	case 1717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5396
		{
			yyVAL.node = ast.NewDefElem("path", yyDollar[2].node)
		}
	case 1718:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:5409
		{
			// Extract path name from optional path name node
			var pathName string
			if yyDollar[6].node != nil {
				if strNode, ok := yyDollar[6].node.(*ast.String); ok {
					pathName = strNode.SVal
				}
			}

			// Create JsonTablePathSpec from the a_expr (path expression) and optional path name
			pathSpec := ast.NewJsonTablePathSpec(yyDollar[5].node, pathName, 0)

			// Create JsonTable with context item and path spec
			jsonTable := ast.NewJsonTable(yyDollar[3].node.(*ast.JsonValueExpr), pathSpec)
			if yyDollar[10].list != nil {
				jsonTable.Columns = yyDollar[10].list
			}
			yyVAL.node = jsonTable
		}
	case 1719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5433
		{
			var format *ast.JsonFormat
			if yyDollar[2].node != nil {
				format = yyDollar[2].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonValueExpr(yyDollar[1].node, format)
		}
	case 1720:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5444
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1721:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5445
		{
			yyVAL.node = nil
		}
	case 1722:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5450
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1723:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5451
		{
			yyVAL.node = nil
		}
	case 1724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5455
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1725:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5456
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1726:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5461
		{
			jsonArg := ast.NewJsonArgument(yyDollar[1].node.(*ast.JsonValueExpr), yyDollar[3].str)
			yyVAL.node = jsonArg
		}
	case 1727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5467
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1728:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5468
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5474
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1730:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5478
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1731:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5490
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1732:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5494
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1733:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5501
		{
			yyVAL.bval = false
		}
	case 1734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5502
		{
			yyVAL.bval = true
		}
	case 1735:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5503
		{
			yyVAL.bval = false
		}
	case 1736:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5507
		{
			yyVAL.bval = false
		}
	case 1737:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5508
		{
			yyVAL.bval = true
		}
	case 1738:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5509
		{
			yyVAL.bval = true
		}
	case 1739:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5514
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1740:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5515
		{
			yyVAL.list = nil
		}
	case 1741:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5526
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)

			yyVAL.node = ast.NewJsonObjectAgg(constructor, yyDollar[3].node.(*ast.JsonKeyValue), yyDollar[4].bval, yyDollar[5].bval)
		}
	case 1742:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5541
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)
			constructor.AggOrder = yyDollar[4].list
			yyVAL.node = ast.NewJsonArrayAgg(constructor, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].bval)
		}
	case 1743:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5554
		{
			var jsonFormat *ast.JsonFormat
			if yyDollar[3].node != nil {
				jsonFormat = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonOutput(yyDollar[2].typnam, ast.NewJsonReturning(jsonFormat, 0, 0))
		}
	case 1744:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5561
		{
			yyVAL.node = nil
		}
	case 1745:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5567
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JSON_BEHAVIOR_DEFAULT,
				Expr:     yyDollar[2].node,
			}
		}
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5575
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JsonBehaviorType(yyDollar[1].ival),
				Expr:     nil,
			}
		}
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5586
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_ERROR)
		}
	case 1748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5587
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_NULL)
		}
	case 1749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5588
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_TRUE)
		}
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5589
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_FALSE)
		}
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5590
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_UNKNOWN)
		}
	case 1752:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5591
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_ARRAY)
		}
	case 1753:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5592
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_OBJECT)
		}
	case 1754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5593
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY)
		}
	case 1755:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5598
		{
			// Return a list with ON EMPTY behavior and nil for ON ERROR
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, nil}}
		}
	case 1756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5602
		{
			// Return a list with nil for ON EMPTY and ON ERROR behavior
			yyVAL.node = &ast.NodeList{Items: []ast.Node{nil, yyDollar[1].node}}
		}
	case 1757:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5606
		{
			// Return a list with both ON EMPTY and ON ERROR behaviors
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, yyDollar[4].node}}
		}
	case 1758:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5610
		{
			yyVAL.node = nil
		}
	case 1759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5615
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1760:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5616
		{
			yyVAL.node = nil
		}
	case 1761:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5621
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1762:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5622
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1763:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5623
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5624
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1765:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5625
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1766:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5626
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5627
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1768:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5628
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1769:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5629
		{
			yyVAL.ival = int(ast.JSW_UNSPEC)
		}
	case 1770:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5634
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1771:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5635
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1772:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5636
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1773:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5637
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1774:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5638
		{
			yyVAL.ival = int(ast.JS_QUOTES_UNSPEC)
		}
	case 1775:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5644
		{
			// Parse the encoding name and map to JsonEncoding constant
			var encoding ast.JsonEncoding
			switch yyDollar[4].str {
			case "utf8":
				encoding = ast.JS_ENC_UTF8
			case "utf16":
				encoding = ast.JS_ENC_UTF16
			case "utf32":
				encoding = ast.JS_ENC_UTF32
			default:
				encoding = ast.JS_ENC_DEFAULT
			}
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   encoding,
			}
		}
	case 1776:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5664
		{
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   ast.JS_ENC_DEFAULT,
			}
		}
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5674
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1778:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5675
		{
			yyVAL.node = nil
		}
	case 1779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5680
		{
			yyVAL.node = ast.NewString("path")
		}
	case 1780:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5681
		{
			yyVAL.node = nil
		}
	case 1781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5687
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1782:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5691
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1783:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5700
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FOR_ORDINALITY, yyDollar[1].str)
			yyVAL.node = jsonTableCol
		}
	case 1784:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5709
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_REGULAR, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[3].node != nil {
				strNode := yyDollar[3].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1785:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5723
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FORMATTED, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			if yyDollar[3].node != nil {
				jsonTableCol.Format = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = jsonTableCol
		}
	case 1786:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5737
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_EXISTS, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1787:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5748
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, "")
			jsonTableCol.Columns = yyDollar[6].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1788:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5757
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, yyDollar[5].str)
			jsonTableCol.Columns = yyDollar[8].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1789:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5768
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1790:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5769
		{
			yyVAL.node = nil
		}
	case 1791:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5785
		{
			insertStmt := yyDollar[5].node.(*ast.InsertStmt)
			insertStmt.Relation = yyDollar[4].rangevar
			insertStmt.WithClause = yyDollar[1].with
			insertStmt.OnConflictClause = yyDollar[6].onconflict
			insertStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = insertStmt
		}
	case 1792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5797
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1793:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5801
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5810
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.SelectStmt = yyDollar[1].stmt
			yyVAL.node = insertStmt
		}
	case 1795:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5816
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Override = ast.OverridingKind(yyDollar[2].ival)
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1796:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5823
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1797:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5830
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.Override = ast.OverridingKind(yyDollar[5].ival)
			insertStmt.SelectStmt = yyDollar[7].stmt
			yyVAL.node = insertStmt
		}
	case 1798:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5838
		{
			insertStmt := ast.NewInsertStmt(nil)
			// For DEFAULT VALUES, SelectStmt should be nil
			insertStmt.SelectStmt = nil
			yyVAL.node = insertStmt
		}
	case 1799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5847
		{
			yyVAL.ival = int(ast.OVERRIDING_USER_VALUE)
		}
	case 1800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5848
		{
			yyVAL.ival = int(ast.OVERRIDING_SYSTEM_VALUE)
		}
	case 1801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5853
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1802:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5857
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1803:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5865
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1804:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:5877
		{
			updateStmt := ast.NewUpdateStmt(yyDollar[3].rangevar)
			updateStmt.WithClause = yyDollar[1].with
			updateStmt.TargetList = yyDollar[5].list
			updateStmt.FromClause = yyDollar[6].list
			updateStmt.WhereClause = yyDollar[7].node
			updateStmt.ReturningList = yyDollar[8].list
			yyVAL.stmt = updateStmt
		}
	case 1805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5890
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1806:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5894
		{
			// Concatenate the lists - equivalent to PostgreSQL's list_concat
			for _, item := range yyDollar[3].list.Items {
				yyDollar[1].list.Append(item)
			}
			yyVAL.list = yyDollar[1].list
		}
	case 1807:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5905
		{
			target := yyDollar[1].target
			target.Val = yyDollar[3].node
			yyVAL.list = ast.NewNodeList(target)
		}
	case 1808:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5911
		{
			// Multi-column assignment: (col1, col2) = (val1, val2)
			// Create MultiAssignRef nodes for each target, matching PostgreSQL exactly
			targetList := yyDollar[2].list
			ncolumns := len(targetList.Items)

			// Create a MultiAssignRef source for each target
			for i, item := range targetList.Items {
				resCol := item.(*ast.ResTarget)
				multiAssignRef := ast.NewMultiAssignRef(yyDollar[5].node, i+1, ncolumns, 0)
				resCol.Val = multiAssignRef
			}

			// Return the entire target list
			yyVAL.list = targetList
		}
	case 1809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5931
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5937
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1811:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5938
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1812:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5948
		{
			deleteStmt := ast.NewDeleteStmt(yyDollar[4].rangevar)
			deleteStmt.WithClause = yyDollar[1].with
			deleteStmt.UsingClause = yyDollar[5].list
			deleteStmt.WhereClause = yyDollar[6].node
			deleteStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = deleteStmt
		}
	case 1813:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5960
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1814:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5964
		{
			yyVAL.list = nil
		}
	case 1815:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5979
		{
			mergeStmt := &ast.MergeStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_MergeStmt},
			}
			mergeStmt.WithClause = yyDollar[1].with
			mergeStmt.Relation = yyDollar[4].rangevar
			mergeStmt.SourceRelation = yyDollar[6].node
			mergeStmt.JoinCondition = yyDollar[8].node
			mergeStmt.MergeWhenClauses = yyDollar[9].list
			mergeStmt.ReturningList = yyDollar[10].list
			yyVAL.stmt = mergeStmt
		}
	case 1816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5996
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1817:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6000
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1818:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6011
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Query:     yyDollar[3].stmt,
				IsFrom:    false,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Initialize Options as empty NodeList
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[9].list != nil {
				nodeList := yyDollar[9].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			yyVAL.stmt = copyStmt
		}
	case 1819:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:6035
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Relation:  yyDollar[3].rangevar,
				IsFrom:    yyDollar[5].ival != 0,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Assign column list directly as NodeList
			copyStmt.Attlist = yyDollar[4].list

			// Initialize Options as empty NodeList and add options
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[2].node != nil {
				copyStmt.Options.Append(yyDollar[2].node)
			}
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[10].list != nil {
				nodeList := yyDollar[10].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			if yyDollar[11].node != nil {
				copyStmt.WhereClause = yyDollar[11].node
			}
			yyVAL.stmt = copyStmt
		}
	case 1820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6071
		{
			yyVAL.ival = 1
		}
	case 1821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6072
		{
			yyVAL.ival = 0
		}
	case 1822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6076
		{
			yyVAL.ival = 1
		}
	case 1823:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6077
		{
			yyVAL.ival = 0
		}
	case 1824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6081
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6082
		{
			yyVAL.str = ""
		}
	case 1826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6083
		{
			yyVAL.str = ""
		}
	case 1827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6088
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1828:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6091
		{
			yyVAL.node = nil
		}
	case 1829:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6096
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1830:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6099
		{
			yyVAL.node = nil
		}
	case 1831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6103
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1832:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6104
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1833:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6109
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1834:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6117
		{
			yyVAL.list = nil
		}
	case 1835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6124
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6128
		{
			yyVAL.node = ast.NewDefElem("freeze", ast.NewString("true"))
		}
	case 1837:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6132
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1838:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6136
		{
			yyVAL.node = ast.NewDefElem("null", ast.NewString(yyDollar[3].str))
		}
	case 1839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6140
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("csv"))
		}
	case 1840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6144
		{
			yyVAL.node = ast.NewDefElem("header", ast.NewString("true"))
		}
	case 1841:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6148
		{
			yyVAL.node = ast.NewDefElem("quote", ast.NewString(yyDollar[3].str))
		}
	case 1842:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6152
		{
			yyVAL.node = ast.NewDefElem("escape", ast.NewString(yyDollar[3].str))
		}
	case 1843:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6156
		{
			yyVAL.node = ast.NewDefElem("force_quote", yyDollar[3].list)
		}
	case 1844:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6160
		{
			yyVAL.node = ast.NewDefElem("force_quote", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1845:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6164
		{
			yyVAL.node = ast.NewDefElem("force_not_null", yyDollar[4].list)
		}
	case 1846:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6168
		{
			yyVAL.node = ast.NewDefElem("force_not_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1847:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6172
		{
			yyVAL.node = ast.NewDefElem("force_null", yyDollar[3].list)
		}
	case 1848:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6176
		{
			yyVAL.node = ast.NewDefElem("force_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1849:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6180
		{
			yyVAL.node = ast.NewDefElem("encoding", ast.NewString(yyDollar[2].str))
		}
	case 1850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6188
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1851:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6192
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1852:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6199
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6205
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6206
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6207
		{
			yyVAL.node = ast.NewA_Star(0)
		}
	case 1856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6208
		{
			yyVAL.node = ast.NewString("default")
		}
	case 1857:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6209
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1858:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6210
		{
			yyVAL.node = nil
		}
	case 1859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6215
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1860:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6219
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6225
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6229
		{
			yyVAL.str = "true"
		}
	case 1863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6230
		{
			yyVAL.str = "false"
		}
	case 1864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6231
		{
			yyVAL.str = "on"
		}
	case 1865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6232
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6236
		{
			yyVAL.node = ast.NewFloat(yyDollar[1].str)
		}
	case 1867:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6237
		{
			yyVAL.node = ast.NewFloat(yyDollar[2].str)
		}
	case 1868:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6239
		{
			f := ast.NewFloat(yyDollar[2].str)
			doNegateFloat(f)
			yyVAL.node = f
		}
	case 1869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6244
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6248
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6249
		{
			yyVAL.node = nil
		}
	case 1872:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6253
		{
			yyVAL.objType = ast.OBJECT_ACCESS_METHOD
		}
	case 1873:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6254
		{
			yyVAL.objType = ast.OBJECT_EVENT_TRIGGER
		}
	case 1874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6255
		{
			yyVAL.objType = ast.OBJECT_EXTENSION
		}
	case 1875:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6256
		{
			yyVAL.objType = ast.OBJECT_FDW
		}
	case 1876:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6257
		{
			yyVAL.objType = ast.OBJECT_LANGUAGE
		}
	case 1877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6258
		{
			yyVAL.objType = ast.OBJECT_PUBLICATION
		}
	case 1878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6259
		{
			yyVAL.objType = ast.OBJECT_SCHEMA
		}
	case 1879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6260
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_SERVER
		}
	case 1880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6264
		{
			yyVAL.objType = ast.OBJECT_POLICY
		}
	case 1881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6265
		{
			yyVAL.objType = ast.OBJECT_RULE
		}
	case 1882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6266
		{
			yyVAL.objType = ast.OBJECT_TRIGGER
		}
	case 1883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6270
		{
			yyVAL.objType = yyDollar[1].objType
		}
	case 1884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6271
		{
			yyVAL.objType = ast.OBJECT_DATABASE
		}
	case 1885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6272
		{
			yyVAL.objType = ast.OBJECT_ROLE
		}
	case 1886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6273
		{
			yyVAL.objType = ast.OBJECT_SUBSCRIPTION
		}
	case 1887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6274
		{
			yyVAL.objType = ast.OBJECT_TABLESPACE
		}
	case 1888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6279
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].typnam)
		}
	case 1889:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6284
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 1890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6291
		{
			yyVAL.bval = true
		}
	case 1891:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6292
		{
			yyVAL.bval = false
		}
	case 1892:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6296
		{
			yyVAL.ival = 1
		}
	case 1893:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6297
		{
			yyVAL.ival = 0
		}
	case 1896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6313
		{
			yyVAL.node = nil
		}
	case 1897:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6315
		{
			yyVAL.node = nil
		}
	case 1898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6323
		{
			yyVAL.ival = 1
		}
	case 1899:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6324
		{
			yyVAL.ival = 0
		}
	case 1900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6328
		{
			yyVAL.ival = 1
		}
	case 1901:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6329
		{
			yyVAL.ival = 0
		}
	case 1902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6333
		{
			yyVAL.ival = 1
		}
	case 1903:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6334
		{
			yyVAL.ival = 0
		}
	case 1904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6338
		{
			yyVAL.ival = 1
		}
	case 1905:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6339
		{
			yyVAL.ival = 0
		}
	case 1906:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6348
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1907:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6354
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1908:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6360
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1909:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6366
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1910:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6372
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1911:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6380
		{
			yyVAL.ival = int(ast.MERGE_WHEN_MATCHED)
		}
	case 1912:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6381
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_SOURCE)
		}
	case 1913:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6385
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1914:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6386
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1915:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6390
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1916:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6391
		{
			yyVAL.node = nil
		}
	case 1917:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6396
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_UPDATE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			yyVAL.node = mergeWhen
		}
	case 1918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6411
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_DELETE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1919:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6420
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			mergeWhen.Values = yyDollar[2].list
			yyVAL.node = mergeWhen
		}
	case 1920:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6427
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[3].ival)
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1921:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6434
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1922:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6447
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[6].ival)
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[8].list
			yyVAL.node = mergeWhen
		}
	case 1923:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6460
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1924:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6469
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1925:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6484
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_UPDATE)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			onConflict.TargetList = yyDollar[7].list
			onConflict.WhereClause = yyDollar[8].node
			yyVAL.onconflict = onConflict
		}
	case 1926:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6494
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_NOTHING)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			yyVAL.onconflict = onConflict
		}
	case 1927:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6502
		{
			yyVAL.onconflict = nil
		}
	case 1928:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6513
		{
			// Create InferClause for column-based conflict detection
			infer := ast.NewInferClause()
			// Assign IndexElems directly as NodeList
			infer.IndexElems = yyDollar[2].list
			infer.WhereClause = yyDollar[4].node
			yyVAL.node = infer
		}
	case 1929:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6522
		{
			// Create InferClause for constraint-based conflict detection
			infer := ast.NewInferClause()
			infer.Conname = yyDollar[3].str
			yyVAL.node = infer
		}
	case 1930:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6529
		{
			yyVAL.node = nil
		}
	case 1931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6540
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1932:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6544
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6551
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1934:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6555
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1935:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6562
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Name = yyDollar[1].str
		}
	case 1936:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6567
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[1].node
		}
	case 1937:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6572
		{
			yyVAL.node = yyDollar[4].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[2].node
		}
	case 1938:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6580
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Ordering = ast.SortByDir(yyDollar[3].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[4].ival)
			yyVAL.node = indexElem
		}
	case 1939:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6591
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Opclassopts = yyDollar[3].list
			indexElem.Ordering = ast.SortByDir(yyDollar[4].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[5].ival)
			yyVAL.node = indexElem
		}
	case 1940:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6605
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1941:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6606
		{
			yyVAL.list = nil
		}
	case 1942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6610
		{
			yyVAL.ival = int(ast.SORTBY_ASC)
		}
	case 1943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6611
		{
			yyVAL.ival = int(ast.SORTBY_DESC)
		}
	case 1944:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6612
		{
			yyVAL.ival = int(ast.SORTBY_DEFAULT)
		}
	case 1945:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6616
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_FIRST)
		}
	case 1946:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6617
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_LAST)
		}
	case 1947:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6618
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_DEFAULT)
		}
	case 1948:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6623
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1949:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6627
		{
			yyVAL.list = nil
		}
	case 1950:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6648
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[6].list
			createStmt.InhRelations = yyDollar[8].list
			createStmt.PartSpec = yyDollar[9].partspec
			createStmt.AccessMethod = yyDollar[10].str
			createStmt.Options = yyDollar[11].list
			createStmt.OnCommit = yyDollar[12].oncommit
			createStmt.TableSpaceName = yyDollar[13].str
			yyVAL.stmt = createStmt
		}
	case 1951:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:6664
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[9].list
			createStmt.InhRelations = yyDollar[11].list
			createStmt.PartSpec = yyDollar[12].partspec
			createStmt.AccessMethod = yyDollar[13].str
			createStmt.Options = yyDollar[14].list
			createStmt.OnCommit = yyDollar[15].oncommit
			createStmt.TableSpaceName = yyDollar[16].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1952:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:6681
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[6].list)
			createStmt.TableElts = yyDollar[7].list
			createStmt.PartSpec = yyDollar[8].partspec
			createStmt.AccessMethod = yyDollar[9].str
			createStmt.Options = yyDollar[10].list
			createStmt.OnCommit = yyDollar[11].oncommit
			createStmt.TableSpaceName = yyDollar[12].str
			yyVAL.stmt = createStmt
		}
	case 1953:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:6697
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[9].list)
			createStmt.TableElts = yyDollar[10].list
			createStmt.PartSpec = yyDollar[11].partspec
			createStmt.AccessMethod = yyDollar[12].str
			createStmt.Options = yyDollar[13].list
			createStmt.OnCommit = yyDollar[14].oncommit
			createStmt.TableSpaceName = yyDollar[15].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1954:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:6714
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[7].rangevar)
			createStmt.TableElts = yyDollar[8].list
			createStmt.PartBound = yyDollar[9].partboundspec
			createStmt.PartSpec = yyDollar[10].partspec
			createStmt.AccessMethod = yyDollar[11].str
			createStmt.Options = yyDollar[12].list
			createStmt.OnCommit = yyDollar[13].oncommit
			createStmt.TableSpaceName = yyDollar[14].str
			yyVAL.stmt = createStmt
		}
	case 1955:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:6731
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[10].rangevar)
			createStmt.TableElts = yyDollar[11].list
			createStmt.PartBound = yyDollar[12].partboundspec
			createStmt.PartSpec = yyDollar[13].partspec
			createStmt.AccessMethod = yyDollar[14].str
			createStmt.Options = yyDollar[15].list
			createStmt.OnCommit = yyDollar[16].oncommit
			createStmt.TableSpaceName = yyDollar[17].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6749
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6750
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1958:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6751
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1959:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6752
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1960:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6753
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1961:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6754
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6755
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 1963:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6756
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 1964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6760
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1965:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6761
		{
			yyVAL.list = nil
		}
	case 1966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6766
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1967:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6771
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6778
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6779
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6780
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1971:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6785
		{
			yyVAL.node = ast.NewTableLikeClause(yyDollar[2].rangevar, ast.TableLikeOption(yyDollar[3].ival))
		}
	case 1972:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6792
		{
			yyVAL.ival = yyDollar[1].ival | yyDollar[3].ival
		}
	case 1973:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6796
		{
			yyVAL.ival = yyDollar[1].ival & ^yyDollar[3].ival
		}
	case 1974:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6800
		{
			yyVAL.ival = 0
		}
	case 1975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6806
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMMENTS)
		}
	case 1976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6807
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMPRESSION)
		}
	case 1977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6808
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_CONSTRAINTS)
		}
	case 1978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6809
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_DEFAULTS)
		}
	case 1979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6810
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_IDENTITY)
		}
	case 1980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6811
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_GENERATED)
		}
	case 1981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6812
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_INDEXES)
		}
	case 1982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6813
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STATISTICS)
		}
	case 1983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6814
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STORAGE)
		}
	case 1984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6815
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_ALL)
		}
	case 1985:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6820
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1986:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6821
		{
			yyVAL.str = "default"
		}
	case 1987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6825
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1988:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6826
		{
			yyVAL.str = ""
		}
	case 1989:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6830
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1990:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6831
		{
			yyVAL.str = "default"
		}
	case 1991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6835
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1992:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6836
		{
			yyVAL.str = ""
		}
	case 1993:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6841
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1994:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6842
		{
			yyVAL.list = nil
		}
	case 1995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6847
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1996:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6853
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6860
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6861
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1999:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6866
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[2].list
			yyVAL.node = colDef
		}
	case 2000:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6872
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[4].list
			yyVAL.node = colDef
		}
	case 2001:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6883
		{
			hashSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_HASH)
			hashSpec.IsDefault = false

			// Parse hash partition bounds (modulus and remainder)
			hashOptions := yyDollar[5].list
			for _, optNode := range hashOptions.Items {
				if defElem, ok := optNode.(*ast.DefElem); ok {
					if defElem.Defname == "modulus" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Modulus = integerVal.IVal
							}
						}
					} else if defElem.Defname == "remainder" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Remainder = integerVal.IVal
							}
						}
					}
				}
			}

			yyVAL.partboundspec = hashSpec
		}
	case 2002:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6912
		{
			listSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			listSpec.IsDefault = false
			listSpec.ListDatums = yyDollar[5].list
			yyVAL.partboundspec = listSpec
		}
	case 2003:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6921
		{
			rangeSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_RANGE)
			rangeSpec.IsDefault = false
			rangeSpec.LowDatums = yyDollar[5].list
			rangeSpec.HighDatums = yyDollar[9].list
			yyVAL.partboundspec = rangeSpec
		}
	case 2004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6931
		{
			defaultSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			defaultSpec.IsDefault = true
			yyVAL.partboundspec = defaultSpec
		}
	case 2005:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6940
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, ast.NewA_Const(ast.NewInteger(yyDollar[2].ival), 0))
		}
	case 2006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6947
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2007:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6951
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 2008:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6959
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2009:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6960
		{
			yyVAL.list = nil
		}
	case 2010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6965
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2011:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6969
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2012:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6977
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 2013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6983
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6988
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2015:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6993
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			colDef.StorageName = yyDollar[3].str
			colDef.Compression = yyDollar[4].str
			colDef.Fdwoptions = yyDollar[5].list
			colDef.Constraints = yyDollar[6].list
			yyVAL.node = colDef
		}
	case 2016:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7005
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2017:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7010
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2018:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7017
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 2019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7022
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7023
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2021:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7025
		{
			/*
			 * Note: the CollateClause is momentarily included in
			 * the list built by ColQualList, but we split it out
			 * again in SplitColQualList.
			 */
			collateClause := ast.NewCollateClause(yyDollar[2].list)
			yyVAL.node = collateClause
		}
	case 2022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7038
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 2023:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7043
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_NOT_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 2024:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7048
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRED)
			yyVAL.node = constraint
		}
	case 2025:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7053
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_IMMEDIATE)
			yyVAL.node = constraint
		}
	case 2026:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7061
		{
			yyVAL.bval = true
		}
	case 2027:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7062
		{
			yyVAL.bval = false
		}
	case 2028:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7063
		{
			yyVAL.bval = true
		}
	case 2029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7067
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_ALWAYS
		}
	case 2030:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7068
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_BY_DEFAULT
		}
	case 2031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7073
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2032:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7075
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7080
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 2034:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7084
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 2035:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7088
		{
			// SeqOptElem already returns a DefElem, so we can use it directly
			// Check for invalid options as per PostgreSQL
			defElem := yyDollar[2].defelt
			if defElem.Defname == "as" || defElem.Defname == "restart" || defElem.Defname == "owned_by" {
				yylex.Error("sequence option not supported here")
			}
			yyVAL.defelt = yyDollar[2].defelt
		}
	case 2036:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7098
		{
			yyVAL.defelt = ast.NewDefElem("generated", ast.NewInteger(int(yyDollar[3].byt)))
		}
	case 2037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7104
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2038:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7105
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2039:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7110
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].typnam)
		}
	case 2040:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7114
		{
			yyVAL.defelt = ast.NewDefElem("cache", yyDollar[2].node)
		}
	case 2041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7118
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(true))
		}
	case 2042:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7122
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(false))
		}
	case 2043:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7126
		{
			yyVAL.defelt = ast.NewDefElem("increment", yyDollar[3].node)
		}
	case 2044:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7130
		{
			yyVAL.defelt = ast.NewDefElem("logged", nil)
		}
	case 2045:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7134
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", yyDollar[2].node)
		}
	case 2046:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7138
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", yyDollar[2].node)
		}
	case 2047:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7142
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", nil)
		}
	case 2048:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7146
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", nil)
		}
	case 2049:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7150
		{
			yyVAL.defelt = ast.NewDefElem("owned_by", yyDollar[3].list)
		}
	case 2050:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7154
		{
			yyVAL.defelt = ast.NewDefElem("sequence_name", yyDollar[3].list)
		}
	case 2051:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7158
		{
			yyVAL.defelt = ast.NewDefElem("start", yyDollar[3].node)
		}
	case 2052:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7162
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 2053:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7166
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 2054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7170
		{
			yyVAL.defelt = ast.NewDefElem("unlogged", nil)
		}
	case 2055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7176
		{
		}
	case 2056:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7177
		{
		}
	case 2057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7181
		{
		}
	case 2058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7182
		{
		}
	case 2059:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7183
		{
		}
	case 2060:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7188
		{
			// RECHECK no longer does anything in opclass definitions,
			// but we still accept it to ease porting of old database dumps.
			// When this is used, we should emit a notice.
			// For now, just return true to indicate RECHECK was present
			yyVAL.bval = true
		}
	case 2061:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7195
		{
			yyVAL.bval = false
		}
	case 2062:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7199
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2063:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7200
		{
			yyVAL.list = nil
		}
	case 2064:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7205
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NOTNULL)
		}
	case 2065:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7209
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NULL)
		}
	case 2066:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7213
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Keys = nil // Will be filled by the parser
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Options = yyDollar[3].list
			constraint.Indexspace = yyDollar[4].str
			yyVAL.node = constraint
		}
	case 2067:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7222
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = nil // Will be filled by the parser
			yyVAL.node = constraint
		}
	case 2068:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7228
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			yyVAL.node = constraint
		}
	case 2069:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7234
		{
			constraint := ast.NewConstraint(ast.CONSTR_DEFAULT)
			constraint.RawExpr = yyDollar[2].node
			yyVAL.node = constraint
		}
	case 2070:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7240
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Pktable = yyDollar[2].rangevar
			constraint.PkAttrs = yyDollar[3].list
			constraint.FkMatchtype = yyDollar[4].byt
			if actions := yyDollar[5].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			yyVAL.node = constraint
		}
	case 2071:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7257
		{
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.Options = yyDollar[5].list
			yyVAL.node = constraint
		}
	case 2072:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7264
		{
			constraint := ast.NewConstraint(ast.CONSTR_GENERATED)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.RawExpr = yyDollar[5].node
			yyVAL.node = constraint
		}
	case 2073:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7274
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 2074:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7279
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2075:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7284
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			processConstraintAttributeSpec(yyDollar[5].ival, constraint)
			yyVAL.node = constraint
		}
	case 2076:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7292
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 2077:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7303
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Indexname = yyDollar[2].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[3].ival, constraint)
			yyVAL.node = constraint
		}
	case 2078:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7314
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 2079:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7324
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Indexname = yyDollar[3].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[4].ival, constraint)
			yyVAL.node = constraint
		}
	case 2080:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7335
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.FkAttrs = yyDollar[4].list
			constraint.Pktable = yyDollar[7].rangevar
			constraint.PkAttrs = yyDollar[8].list
			constraint.FkMatchtype = yyDollar[9].byt
			if actions := yyDollar[10].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			processConstraintAttributeSpec(yyDollar[11].ival, constraint)
			yyVAL.node = constraint
		}
	case 2081:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7356
		{
			constraint := ast.NewConstraint(ast.CONSTR_EXCLUSION)
			constraint.AccessMethod = yyDollar[2].str
			constraint.Exclusions = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			constraint.WhereClause = yyDollar[9].node
			processConstraintAttributeSpec(yyDollar[10].ival, constraint)
			yyVAL.node = constraint
		}
	case 2082:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7370
		{
			yyVAL.bval = true
		}
	case 2083:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7371
		{
			yyVAL.bval = false
		}
	case 2084:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7377
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2085:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7383
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2086:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7391
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[3].list)
		}
	case 2087:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7396
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[5].list)
		}
	case 2088:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7404
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2089:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7408
		{
			yyVAL.list = nil
		}
	case 2090:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7415
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_FULL
		}
	case 2091:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7419
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_PARTIAL
		}
	case 2092:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7423
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 2093:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7427
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 2094:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7434
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 2095:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7444
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 2096:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7454
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = yyDollar[2].keyaction
			yyVAL.keyactions = n
		}
	case 2097:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7461
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[2].keyaction
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 2098:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7468
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 2099:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7483
		{
			// Check for unsupported column lists on UPDATE actions
			keyAction := yyDollar[3].keyaction
			if keyAction.Cols != nil {
				if len(keyAction.Cols.Items) > 0 {
					yylex.Error("column list with SET NULL/SET DEFAULT is only supported for ON DELETE actions")
				}
			}
			yyVAL.keyaction = keyAction
		}
	case 2100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7496
		{
			yyVAL.keyaction = yyDollar[3].keyaction
		}
	case 2101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7503
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_NOACTION
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7510
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_RESTRICT
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7517
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_CASCADE
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7524
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETNULL
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 2105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7531
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETDEFAULT
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 2106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7540
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2107:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7541
		{
			yyVAL.list = nil
		}
	case 2108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7545
		{
			yyVAL.partspec = yyDollar[1].partspec
		}
	case 2109:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7546
		{
			yyVAL.partspec = nil
		}
	case 2110:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7551
		{
			partitionSpec := ast.NewPartitionSpec(ast.PartitionStrategy(yyDollar[3].str), yyDollar[5].list)
			yyVAL.partspec = partitionSpec
		}
	case 2111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7559
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7564
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7572
		{
			partElem := ast.NewPartitionElem(yyDollar[1].str, nil, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 2114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7579
		{
			partElem := ast.NewPartitionElem("", yyDollar[1].node, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 2115:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7586
		{
			partElem := ast.NewPartitionElem("", yyDollar[2].node, 0)
			partElem.Collation = yyDollar[4].list
			partElem.Opclass = yyDollar[5].list
			yyVAL.node = partElem
		}
	case 2116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7595
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2117:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7596
		{
			yyVAL.str = ""
		}
	case 2118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7600
		{
			yyVAL.oncommit = ast.ONCOMMIT_DROP
		}
	case 2119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7601
		{
			yyVAL.oncommit = ast.ONCOMMIT_DELETE_ROWS
		}
	case 2120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7602
		{
			yyVAL.oncommit = ast.ONCOMMIT_PRESERVE_ROWS
		}
	case 2121:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7603
		{
			yyVAL.oncommit = ast.ONCOMMIT_NOOP
		}
	case 2122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7607
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2123:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7608
		{
			yyVAL.str = ""
		}
	case 2124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7612
		{
			yyVAL.str = yyDollar[4].str
		}
	case 2125:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7613
		{
			yyVAL.str = ""
		}
	case 2126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7617
		{
			yyVAL.str = yyDollar[3].str
		}
	case 2127:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:7630
		{
			indexStmt := ast.NewIndexStmt(yyDollar[5].str, yyDollar[7].rangevar, yyDollar[10].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.AccessMethod = yyDollar[8].str
			indexStmt.IndexIncludingParams = yyDollar[12].list
			indexStmt.NullsNotDistinct = !yyDollar[13].bval
			indexStmt.Options = yyDollar[14].list
			indexStmt.TableSpace = yyDollar[15].str
			indexStmt.WhereClause = yyDollar[16].node
			yyVAL.stmt = indexStmt
		}
	case 2128:
		yyDollar = yyS[yypt-19 : yypt+1]
//line postgres.y:7645
		{
			indexStmt := ast.NewIndexStmt(yyDollar[8].str, yyDollar[10].rangevar, yyDollar[13].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.IfNotExists = true
			indexStmt.AccessMethod = yyDollar[11].str
			indexStmt.IndexIncludingParams = yyDollar[15].list
			indexStmt.NullsNotDistinct = !yyDollar[16].bval
			indexStmt.Options = yyDollar[17].list
			indexStmt.TableSpace = yyDollar[18].str
			indexStmt.WhereClause = yyDollar[19].node
			yyVAL.stmt = indexStmt
		}
	case 2129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7661
		{
			yyVAL.bval = true
		}
	case 2130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7662
		{
			yyVAL.bval = false
		}
	case 2131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7666
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7667
		{
			yyVAL.str = "btree"
		}
	case 2133:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7671
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7672
		{
			yyVAL.list = nil
		}
	case 2135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7677
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7682
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7690
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2138:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7691
		{
			yyVAL.list = nil
		}
	case 2139:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7703
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2140:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7709
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7716
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 2142:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7722
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2143:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7729
		{
			// Index partition attachment - dedicated rule
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 2144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7738
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			yyVAL.stmt = alterStmt
		}
	case 2145:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7744
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7751
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			yyVAL.stmt = alterStmt
		}
	case 2147:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7757
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2148:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7764
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			yyVAL.stmt = alterStmt
		}
	case 2149:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7770
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2150:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7777
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2151:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7783
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2152:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7790
		{
			// Partition commands - dedicated rule for partition-only operations
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2153:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7799
		{
			// Partition commands with IF EXISTS
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[6].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2154:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7809
		{
			// Bulk tablespace move for tables
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 2155:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:7816
		{
			// Bulk tablespace move for tables owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 2156:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7824
		{
			// Bulk tablespace move for indexes
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 2157:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:7831
		{
			// Bulk tablespace move for indexes owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 2158:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7839
		{
			// Bulk tablespace move for materialized views
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[10].str)
			moveStmt.Nowait = yyDollar[11].bval
			yyVAL.stmt = moveStmt
		}
	case 2159:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:7846
		{
			// Bulk tablespace move for materialized views owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[13].str)
			moveStmt.Roles = yyDollar[10].list
			moveStmt.Nowait = yyDollar[14].bval
			yyVAL.stmt = moveStmt
		}
	case 2160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7857
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7862
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7870
		{
			yyVAL.bval = true
		}
	case 2163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7871
		{
			yyVAL.bval = false
		}
	case 2164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7876
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].rolespec)
		}
	case 2165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7881
		{
			yyDollar[1].list.Append(yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 2166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7889
		{
			roleSpec := yyDollar[1].rolespec

			switch roleSpec.Roletype {
			case ast.ROLESPEC_CSTRING:
				yyVAL.str = roleSpec.Rolename
			case ast.ROLESPEC_PUBLIC:
				// PostgreSQL throws an error for "public" role name
				yylex.Error(`role name "public" is reserved`)
				return 1
			case ast.ROLESPEC_SESSION_USER:
				// PostgreSQL throws an error: SESSION_USER cannot be used as a role name here
				yylex.Error(`SESSION_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_USER:
				// PostgreSQL throws an error: CURRENT_USER cannot be used as a role name here
				yylex.Error(`CURRENT_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_ROLE:
				// PostgreSQL throws an error: CURRENT_ROLE cannot be used as a role name here
				yylex.Error(`CURRENT_ROLE cannot be used as a role name here`)
				return 1
			default:
				yylex.Error(`invalid role specification`)
				return 1
			}
		}
	case 2167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7920
		{
			// Handle special role names: "public" and "none"
			var roleSpec *ast.RoleSpec

			if yyDollar[1].str == "public" {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_PUBLIC,
				}
			} else if yyDollar[1].str == "none" {
				// PostgreSQL throws an error for "none" - role name "none" is reserved
				yylex.Error(`role name "none" is reserved`)
				return 1
			} else {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_CSTRING,
					Rolename: yyDollar[1].str,
				}
			}
			yyVAL.rolespec = roleSpec
		}
	case 2168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7943
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_ROLE,
			}
		}
	case 2169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7950
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_USER,
			}
		}
	case 2170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7957
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_SESSION_USER,
			}
		}
	case 2171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7968
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[2].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2172:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7975
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[5].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7982
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2174:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7989
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[6].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2175:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7996
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ColumnDefault, yyDollar[3].str, yyDollar[4].node)
		}
	case 2176:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8001
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropNotNull, yyDollar[3].str, nil)
		}
	case 2177:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8006
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetNotNull, yyDollar[3].str, nil)
		}
	case 2178:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8011
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetExpression, yyDollar[3].str, yyDollar[8].node)
		}
	case 2179:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8016
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
		}
	case 2180:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8021
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2181:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8028
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStatistics, yyDollar[3].str, yyDollar[6].node)
		}
	case 2182:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8033
		{
			cmd := ast.NewAlterTableCmd(ast.AT_SetStatistics, "", yyDollar[6].node)
			cmd.Num = int16(yyDollar[3].ival)
			yyVAL.node = cmd
		}
	case 2183:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8040
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 2184:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8045
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 2185:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8050
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStorage, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 2186:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8055
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetCompression, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 2187:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8060
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddIdentity, yyDollar[3].str, nil)
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[6].byt
			constraint.Options = yyDollar[9].list
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 2188:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8070
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetIdentity, yyDollar[3].str, yyDollar[4].list)
		}
	case 2189:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8075
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2190:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8082
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2191:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8089
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2192:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8097
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2193:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8108
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, nil)
			def := ast.NewColumnDef("", yyDollar[6].typnam, 0)
			def.Collclause = yyDollar[7].node.(*ast.CollateClause)
			def.RawDefault = yyDollar[8].node
			cmd.Def = def
			yyVAL.node = cmd
		}
	case 2194:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8118
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AlterColumnGenericOptions, yyDollar[3].str, yyDollar[4].list)
		}
	case 2195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8123
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddConstraint, "", yyDollar[2].node)
		}
	case 2196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8128
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterConstraint, "", nil)
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Conname = yyDollar[3].str
			constraint.Deferrable = (yyDollar[4].ival & ast.CAS_DEFERRABLE) != 0
			constraint.Initdeferred = (yyDollar[4].ival & ast.CAS_INITIALLY_DEFERRED) != 0
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 2197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8139
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ValidateConstraint, yyDollar[3].str, nil)
		}
	case 2198:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8144
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2199:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8152
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8160
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOids, "", nil)
		}
	case 2201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8165
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ClusterOn, yyDollar[3].str, nil)
		}
	case 2202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8170
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropCluster, "", nil)
		}
	case 2203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8175
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetLogged, "", nil)
		}
	case 2204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8180
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetUnLogged, "", nil)
		}
	case 2205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8185
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrig, yyDollar[3].str, nil)
		}
	case 2206:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8190
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysTrig, yyDollar[4].str, nil)
		}
	case 2207:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8195
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaTrig, yyDollar[4].str, nil)
		}
	case 2208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8200
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigAll, "", nil)
		}
	case 2209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8205
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigUser, "", nil)
		}
	case 2210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8210
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrig, yyDollar[3].str, nil)
		}
	case 2211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8215
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigAll, "", nil)
		}
	case 2212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8220
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigUser, "", nil)
		}
	case 2213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8225
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRule, yyDollar[3].str, nil)
		}
	case 2214:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8230
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysRule, yyDollar[4].str, nil)
		}
	case 2215:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8235
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaRule, yyDollar[4].str, nil)
		}
	case 2216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8240
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRule, yyDollar[3].str, nil)
		}
	case 2217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8245
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddInherit, "", yyDollar[2].rangevar)
		}
	case 2218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8250
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropInherit, "", yyDollar[3].rangevar)
		}
	case 2219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8255
		{
			typeName := makeTypeNameFromNodeList(yyDollar[2].list)
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddOf, "", typeName)
		}
	case 2220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8261
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOf, "", nil)
		}
	case 2221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8266
		{
			cmd := ast.NewAlterTableCmd(ast.AT_ChangeOwner, "", nil)
			cmd.Newowner = yyDollar[3].rolespec
			yyVAL.node = cmd
		}
	case 2222:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8273
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetAccessMethod, yyDollar[4].str, nil)
		}
	case 2223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8278
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetTableSpace, yyDollar[3].str, nil)
		}
	case 2224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8283
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetRelOptions, "", yyDollar[2].list)
		}
	case 2225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8288
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetRelOptions, "", yyDollar[2].list)
		}
	case 2226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8293
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ReplicaIdentity, "", yyDollar[3].node)
		}
	case 2227:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8298
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRowSecurity, "", nil)
		}
	case 2228:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8303
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRowSecurity, "", nil)
		}
	case 2229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8308
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ForceRowSecurity, "", nil)
		}
	case 2230:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8313
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_NoForceRowSecurity, "", nil)
		}
	case 2231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8317
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_GenericOptions, "", yyDollar[1].list)
		}
	case 2232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8325
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, yyDollar[4].partboundspec, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8333
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, yyDollar[4].bval, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8340
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartitionFinalize, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8351
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8360
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8361
		{
			yyVAL.node = nil
		}
	case 2238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8365
		{
		}
	case 2239:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8366
		{
		}
	case 2240:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8377
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8390
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2242:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8403
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8416
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2244:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8429
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[5].list
			objects.Append(ast.NewString(yyDollar[3].str))
			n.Objects = objects
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2245:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8444
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[7].list
			objects.Append(ast.NewString(yyDollar[5].str))
			n.Objects = objects
			n.Behavior = yyDollar[8].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8459
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2247:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8472
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8485
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2249:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8498
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2250:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8511
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = false
			n.Objects = yyDollar[4].list
			n.Behavior = yyDollar[5].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2251:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8524
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = true
			n.Objects = yyDollar[6].list
			n.Behavior = yyDollar[7].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2252:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8538
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_CAST
			n.Objects = ast.NewNodeList(ast.NewNodeList(yyDollar[5].typnam, yyDollar[7].typnam))
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = (yyDollar[3].ival == 1)
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2253:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8552
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			// Create a new list with the USING name prepended to any_name
			objects := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				objects.Append(item)
			}
			n.Objects = ast.NewNodeList(objects)
			n.RemoveType = ast.OBJECT_OPCLASS
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2254:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8570
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			// Create a new list with the USING name prepended to any_name
			objects := ast.NewNodeList(ast.NewString(yyDollar[8].str))
			for _, item := range yyDollar[6].list.Items {
				objects.Append(item)
			}
			n.Objects = ast.NewNodeList(objects)
			n.RemoveType = ast.OBJECT_OPCLASS
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2255:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8589
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			// Create a new list with the USING name prepended to any_name
			objects := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				objects.Append(item)
			}
			n.Objects = ast.NewNodeList(objects)
			n.RemoveType = ast.OBJECT_OPFAMILY
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2256:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8607
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			// Create a new list with the USING name prepended to any_name
			objects := ast.NewNodeList(ast.NewString(yyDollar[8].str))
			for _, item := range yyDollar[6].list.Items {
				objects.Append(item)
			}
			n.Objects = ast.NewNodeList(objects)
			n.RemoveType = ast.OBJECT_OPFAMILY
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2257:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8626
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TRANSFORM
			n.Objects = ast.NewNodeList(ast.NewNodeList(yyDollar[5].typnam, ast.NewString(yyDollar[7].str)))
			n.Behavior = yyDollar[8].dropBehav
			n.MissingOk = (yyDollar[3].ival == 1)
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8640
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_SUBSCRIPTION
			n.Objects = ast.NewNodeList(ast.NewNodeList(ast.NewString(yyDollar[3].str)))
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2259:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8653
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_SUBSCRIPTION
			n.Objects = ast.NewNodeList(ast.NewNodeList(ast.NewString(yyDollar[5].str)))
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8669
		{
			stmt := yyDollar[2].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8675
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = true
			yyVAL.stmt = stmt
		}
	case 2262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8681
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8690
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "TRANSACTION", yyDollar[2].list, false)
		}
	case 2264:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8694
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "SESSION CHARACTERISTICS AS TRANSACTION", yyDollar[5].list, false)
		}
	case 2265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8697
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8701
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8703
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "timezone", nil, false)
		}
	case 2268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8707
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "transaction_isolation", nil, false)
		}
	case 2269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8711
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "session_authorization", nil, false)
		}
	case 2270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8718
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, yyDollar[1].str, nil, false)
		}
	case 2271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8722
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET_ALL, "", nil, false)
		}
	case 2272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8728
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8729
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8733
		{
			yyVAL.stmt = ast.Stmt(yyDollar[2].vsetstmt)
		}
	case 2275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8742
		{
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[2].stmt, nil)
		}
	case 2276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8746
		{
			options := ast.NewNodeList(ast.NewDefElem("analyze", nil))
			if yyDollar[3].ival != 0 {
				options.Append(ast.NewDefElem("verbose", nil))
			}
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[4].stmt, options)
		}
	case 2277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8754
		{
			options := ast.NewNodeList(ast.NewDefElem("verbose", nil))
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[3].stmt, options)
		}
	case 2278:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8759
		{
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[5].stmt, yyDollar[3].list)
		}
	case 2279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8766
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8770
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8778
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 2282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8784
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8785
		{
			yyVAL.str = "analyze"
		}
	case 2284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8786
		{
			yyVAL.str = "format"
		}
	case 2285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8790
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8791
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2287:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8792
		{
			yyVAL.node = nil
		}
	case 2288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8796
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8797
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8798
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8799
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8800
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8801
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8802
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2295:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8811
		{
			var optionsList *ast.NodeList
			if yyDollar[2].ival != 0 || yyDollar[3].ival != 0 || yyDollar[4].ival != 0 || yyDollar[5].ival != 0 {
				optionsList = ast.NewNodeList()
				if yyDollar[2].ival != 0 {
					optionsList.Append(ast.NewDefElem("full", ast.NewBoolean(true)))
				}
				if yyDollar[3].ival != 0 {
					optionsList.Append(ast.NewDefElem("freeze", ast.NewBoolean(true)))
				}
				if yyDollar[4].ival != 0 {
					optionsList.Append(ast.NewDefElem("verbose", ast.NewBoolean(true)))
				}
				if yyDollar[5].ival != 0 {
					optionsList.Append(ast.NewDefElem("analyze", ast.NewBoolean(true)))
				}
			}

			yyVAL.stmt = ast.NewVacuumStmt(optionsList, yyDollar[6].list)
		}
	case 2296:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8832
		{
			yyVAL.stmt = ast.NewVacuumStmt(yyDollar[3].list, yyDollar[5].list)
		}
	case 2297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8839
		{
			var optionsList *ast.NodeList
			if yyDollar[2].ival != 0 {
				optionsList = ast.NewNodeList(ast.NewDefElem("verbose", ast.NewBoolean(true)))
			}

			yyVAL.stmt = ast.NewAnalyzeStmt(optionsList, yyDollar[3].list)
		}
	case 2298:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8848
		{
			yyVAL.stmt = ast.NewAnalyzeStmt(yyDollar[3].list, yyDollar[5].list)
		}
	case 2299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8854
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8855
		{
			yyVAL.list = nil
		}
	case 2301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8860
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].vacrel)
		}
	case 2302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8864
		{
			yyDollar[1].list.Append(yyDollar[3].vacrel)
			yyVAL.list = yyDollar[1].list
		}
	case 2303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8872
		{
			yyVAL.vacrel = ast.NewVacuumRelation(yyDollar[1].rangevar, yyDollar[2].list)
		}
	case 2304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8878
		{
			yyVAL.str = "analyze"
		}
	case 2305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8879
		{
			yyVAL.str = "analyse"
		}
	case 2306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8888
		{
			yyVAL.stmt = ast.NewVariableShowStmt(yyDollar[2].str)
		}
	case 2307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8892
		{
			yyVAL.stmt = ast.NewVariableShowStmt("timezone")
		}
	case 2308:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8896
		{
			yyVAL.stmt = ast.NewVariableShowStmt("transaction_isolation")
		}
	case 2309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8900
		{
			yyVAL.stmt = ast.NewVariableShowStmt("session_authorization")
		}
	case 2310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8904
		{
			yyVAL.stmt = ast.NewVariableShowStmt("all")
		}
	case 2311:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8915
		{
			yyVAL.stmt = ast.NewAlterSystemStmt(yyDollar[4].vsetstmt)
		}
	case 2312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8919
		{
			yyVAL.stmt = ast.NewAlterSystemStmt(yyDollar[4].vsetstmt)
		}
	case 2313:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8930
		{
			yyVAL.stmt = ast.NewClusterStmt(yyDollar[5].rangevar, yyDollar[6].str, yyDollar[3].list)
		}
	case 2314:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8934
		{
			yyVAL.stmt = ast.NewClusterStmt(nil, "", yyDollar[3].list)
		}
	case 2315:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8938
		{
			var params *ast.NodeList
			if yyDollar[2].ival != 0 {
				verboseDefElem := ast.NewDefElem("verbose", nil)
				params = ast.NewNodeList(verboseDefElem)
			}
			yyVAL.stmt = ast.NewClusterStmt(yyDollar[3].rangevar, yyDollar[4].str, params)
		}
	case 2316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8947
		{
			var params *ast.NodeList
			if yyDollar[2].ival != 0 {
				verboseDefElem := ast.NewDefElem("verbose", nil)
				params = ast.NewNodeList(verboseDefElem)
			}
			yyVAL.stmt = ast.NewClusterStmt(nil, "", params)
		}
	case 2317:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8956
		{
			var params *ast.NodeList
			if yyDollar[2].ival != 0 {
				verboseDefElem := ast.NewDefElem("verbose", nil)
				params = ast.NewNodeList(verboseDefElem)
			}
			yyVAL.stmt = ast.NewClusterStmt(yyDollar[5].rangevar, yyDollar[3].str, params)
		}
	case 2318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8967
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8968
		{
			yyVAL.str = ""
		}
	case 2320:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8977
		{
			params := yyDollar[2].list
			if yyDollar[4].bval {
				concurrentlyDefElem := ast.NewDefElem("concurrently", nil)
				if params == nil {
					params = ast.NewNodeList(concurrentlyDefElem)
				} else {
					params.Append(concurrentlyDefElem)
				}
			}
			yyVAL.stmt = ast.NewReindexStmt(ast.ReindexObjectType(yyDollar[3].ival), yyDollar[5].rangevar, "", params)
		}
	case 2321:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8990
		{
			params := yyDollar[2].list
			if yyDollar[4].bval {
				concurrentlyDefElem := ast.NewDefElem("concurrently", nil)
				if params == nil {
					params = ast.NewNodeList(concurrentlyDefElem)
				} else {
					params.Append(concurrentlyDefElem)
				}
			}
			yyVAL.stmt = ast.NewReindexStmt(ast.REINDEX_OBJECT_SCHEMA, nil, yyDollar[5].str, params)
		}
	case 2322:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9003
		{
			params := yyDollar[2].list
			if yyDollar[4].bval {
				concurrentlyDefElem := ast.NewDefElem("concurrently", nil)
				if params == nil {
					params = ast.NewNodeList(concurrentlyDefElem)
				} else {
					params.Append(concurrentlyDefElem)
				}
			}
			yyVAL.stmt = ast.NewReindexStmt(ast.ReindexObjectType(yyDollar[3].ival), nil, yyDollar[5].str, params)
		}
	case 2323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9018
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_INDEX)
		}
	case 2324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9019
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_TABLE)
		}
	case 2325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9023
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_SYSTEM)
		}
	case 2326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9024
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_DATABASE)
		}
	case 2327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9028
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9029
		{
			yyVAL.list = nil
		}
	case 2329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9038
		{
			yyVAL.stmt = ast.NewCheckPointStmt()
		}
	case 2330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9049
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_ALL)
		}
	case 2331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9053
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_TEMP)
		}
	case 2332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9057
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_TEMP)
		}
	case 2333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9061
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_PLANS)
		}
	case 2334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9065
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_SEQUENCES)
		}
	case 2335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9072
		{
			yyVAL.objType = ast.OBJECT_TABLE
		}
	case 2336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9073
		{
			yyVAL.objType = ast.OBJECT_SEQUENCE
		}
	case 2337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9074
		{
			yyVAL.objType = ast.OBJECT_VIEW
		}
	case 2338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9075
		{
			yyVAL.objType = ast.OBJECT_MATVIEW
		}
	case 2339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9076
		{
			yyVAL.objType = ast.OBJECT_INDEX
		}
	case 2340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9077
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_TABLE
		}
	case 2341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9078
		{
			yyVAL.objType = ast.OBJECT_COLLATION
		}
	case 2342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9079
		{
			yyVAL.objType = ast.OBJECT_CONVERSION
		}
	case 2343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9080
		{
			yyVAL.objType = ast.OBJECT_STATISTIC_EXT
		}
	case 2344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9081
		{
			yyVAL.objType = ast.OBJECT_TSPARSER
		}
	case 2345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9082
		{
			yyVAL.objType = ast.OBJECT_TSDICTIONARY
		}
	case 2346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9083
		{
			yyVAL.objType = ast.OBJECT_TSTEMPLATE
		}
	case 2347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9084
		{
			yyVAL.objType = ast.OBJECT_TSCONFIGURATION
		}
	case 2348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9097
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9098
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9103
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9107
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9115
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode: ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:  yyDollar[1].list,
				Objargs:  yyDollar[2].list,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9127
		{
			yylex.Error("Use NONE to denote the missing argument of a unary operator.")
			return 1
		}
	case 2354:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9132
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, yyDollar[4].typnam)
		}
	case 2355:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9134
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[4].typnam)
		}
	case 2356:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9136
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, nil)
		}
	case 2357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9140
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9153
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 2359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9155
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 2360:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9159
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2361:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9170
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2362:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9181
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2363:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9192
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DATABASE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2364:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9203
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2365:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9214
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMCONSTRAINT,
				Object:     yyDollar[3].list,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2366:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9226
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2367:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9237
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2368:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9248
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2369:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9259
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2370:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9270
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2371:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9287
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2372:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9304
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2373:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9316
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[7].rangevar,
				Subname:    yyDollar[5].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2374:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9328
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2375:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9339
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2376:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9350
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2377:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9361
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SCHEMA,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2378:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9372
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2379:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9383
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2380:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9394
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2381:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9405
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2382:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9416
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2383:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9427
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2384:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9438
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2385:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9449
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2386:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9460
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2387:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9471
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2388:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9482
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2389:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9493
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2390:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9504
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2391:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9515
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2392:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9526
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2393:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9539
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2394:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9552
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2395:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9565
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2396:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9578
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2397:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9591
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2398:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9604
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[3].rangevar,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2399:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9616
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[8].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2400:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9628
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2401:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9641
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2402:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9654
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_RULE,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2403:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9666
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TRIGGER,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2404:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9678
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2405:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9689
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2406:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9700
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2407:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9711
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLESPACE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2408:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9722
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2409:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9733
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSPARSER,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2410:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9744
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2411:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9755
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSTEMPLATE,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2412:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9766
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2413:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9777
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2414:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9788
		{
			rv, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(err.Error())
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_ATTRIBUTE,
				RelationType: ast.OBJECT_TYPE,
				Relation:     rv,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				Behavior:     ast.DropBehavior(yyDollar[9].dropBehav),
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9814
		{
			yyVAL.ival = 0
		}
	case 2416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9816
		{
			// Combine constraint attribute bits
			newspec := yyDollar[1].ival | yyDollar[2].ival

			// Check for conflicts (NOT DEFERRABLE + INITIALLY DEFERRED)
			if (newspec & (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED)) == (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED) {
				// This would be an error in real PostgreSQL parser
			}

			yyVAL.ival = newspec
		}
	case 2417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9830
		{
			yyVAL.ival = ast.CAS_NOT_DEFERRABLE
		}
	case 2418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9831
		{
			yyVAL.ival = ast.CAS_DEFERRABLE
		}
	case 2419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9832
		{
			yyVAL.ival = ast.CAS_INITIALLY_IMMEDIATE
		}
	case 2420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9833
		{
			yyVAL.ival = ast.CAS_INITIALLY_DEFERRED
		}
	case 2421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9834
		{
			yyVAL.ival = ast.CAS_NOT_VALID
		}
	case 2422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9835
		{
			yyVAL.ival = ast.CAS_NO_INHERIT
		}
	case 2423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9839
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9844
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9849
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9857
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9861
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2428:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9865
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, yyDollar[5].node, ast.DEFELEM_UNSPEC)
		}
	case 2429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9869
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, nil, ast.DEFELEM_UNSPEC)
		}
	case 2430:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9883
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  yyDollar[7].typnam,
				Options:     yyDollar[8].list,
				SQLBody:     yyDollar[9].node,
			}
			yyVAL.stmt = stmt
		}
	case 2431:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:9897
		{
			// Handle RETURNS TABLE variant
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil, // TODO: Handle table return type
				Options:     yyDollar[11].list,
				SQLBody:     yyDollar[12].node,
			}
			// TODO: Process table_func_column_list into appropriate return type
			yyVAL.stmt = stmt
		}
	case 2432:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9913
		{
			// No explicit return type (for procedures disguised as functions)
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2433:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9928
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: true,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9943
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9944
		{
			yyVAL.list = nil
		}
	case 2436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9949
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9953
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9961
		{
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9965
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9970
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9978
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    yyDollar[2].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9987
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[2].funparammode,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9996
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10005
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    "",
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10014
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    "",
				ArgType: yyDollar[1].typnam,
			}
			yyVAL.funparam = param
		}
	case 2446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10025
		{
			yyVAL.funparammode = ast.FUNC_PARAM_IN
		}
	case 2447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10026
		{
			yyVAL.funparammode = ast.FUNC_PARAM_OUT
		}
	case 2448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10027
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10028
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10029
		{
			yyVAL.funparammode = ast.FUNC_PARAM_VARIADIC
		}
	case 2451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10033
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10037
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2453:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10039
		{
			// Handle %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				// TODO: Add %TYPE indicator
			}
		}
	case 2454:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10049
		{
			// Handle SETOF %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[2].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				Setof: true,
			}
		}
	case 2455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10061
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10062
		{
			yyVAL.list = nil
		}
	case 2457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10067
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].defelt)
			yyVAL.list = list
		}
	case 2458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10073
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10081
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].node)
		}
	case 2460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10085
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 2461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10089
		{
			yyVAL.defelt = ast.NewDefElem("transform", yyDollar[2].list)
		}
	case 2462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10093
		{
			yyVAL.defelt = ast.NewDefElem("window", ast.NewBoolean(true))
		}
	case 2463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10097
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10104
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.node = list
		}
	case 2465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10110
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 2466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10120
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[3].typnam)
			yyVAL.list = list
		}
	case 2467:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10126
		{
			yyDollar[1].list.Append(yyDollar[5].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10134
		{
			yyVAL.node = yyDollar[1].stmt
		}
	case 2469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10138
		{
			/*
			 * A compound statement is stored as a single-item list
			 * containing the list of statements as its member.  That
			 * way, the parse analysis code can tell apart an empty
			 * body from no body at all.
			 */
			list := ast.NewNodeList()
			list.Append(yyDollar[3].list)
			yyVAL.node = list
		}
	case 2470:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10150
		{
			yyVAL.node = nil
		}
	case 2471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10157
		{
			yyVAL.stmt = &ast.ReturnStmt{
				ReturnVal: yyDollar[2].node,
			}
		}
	case 2472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10166
		{
			/* As in stmtmulti, discard empty statements */
			if yyDollar[2].stmt != nil {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			} else {
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2473:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10176
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10182
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10183
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10188
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10192
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2478:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:10208
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[6].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: false,
				Trigname:     yyDollar[4].str,
				Relation:     yyDollar[8].rangevar,
				Funcname:     yyDollar[14].list,
				Args:         yyDollar[16].list,
				Row:          yyDollar[10].bval,
				Timing:       int16(yyDollar[5].ival),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[11].node,
				Transitions:  yyDollar[9].list,
				Deferrable:   false,
				Initdeferred: false,
				Constrrel:    nil,
			}
			yyVAL.stmt = stmt
		}
	case 2479:
		yyDollar = yyS[yypt-21 : yypt+1]
//line postgres.y:10240
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[7].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: true,
				Trigname:     yyDollar[5].str,
				Relation:     yyDollar[9].rangevar,
				Funcname:     yyDollar[18].list,
				Args:         yyDollar[20].list,
				Row:          true,
				Timing:       int16(ast.TRIGGER_TIMING_AFTER),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[15].node,
				Transitions:  nil,
				Deferrable:   true, // Default for constraint triggers
				Initdeferred: false,
				Constrrel:    yyDollar[10].rangevar,
			}
			yyVAL.stmt = stmt
		}
	case 2480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10271
		{
			yyVAL.ival = ast.TRIGGER_TIMING_BEFORE
		}
	case 2481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10272
		{
			yyVAL.ival = ast.TRIGGER_TIMING_AFTER
		}
	case 2482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10273
		{
			yyVAL.ival = ast.TRIGGER_TIMING_INSTEAD
		}
	case 2483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10278
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10280
		{
			// Extract event types and column lists from both sides
			events1 := yyDollar[1].list.Items[0].(*ast.Integer).IVal
			events2 := yyDollar[3].list.Items[0].(*ast.Integer).IVal
			columns1 := yyDollar[1].list.Items[1]
			columns2 := yyDollar[3].list.Items[1]

			// Check for duplicate events
			if events1&events2 != 0 {
				// TODO: Generate parse error for duplicate trigger events
			}

			// Create combined result [events1|events2, combined_columns]
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(events1 | events2))

			// Concatenate column lists (if any)
			if columns1 != nil && columns2 != nil {
				// Both have columns - concatenate
				combinedCols := columns1.(*ast.NodeList)
				if columns2List, ok := columns2.(*ast.NodeList); ok {
					for _, item := range columns2List.Items {
						combinedCols.Append(item)
					}
				}
				list.Append(combinedCols)
			} else if columns1 != nil {
				list.Append(columns1)
			} else if columns2 != nil {
				list.Append(columns2)
			} else {
				list.Append(nil)
			}

			yyVAL.list = list
		}
	case 2485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10320
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_INSERT)))
			list.Append(nil) // No columns for INSERT
			yyVAL.list = list
		}
	case 2486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10327
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_DELETE)))
			list.Append(nil) // No columns for DELETE
			yyVAL.list = list
		}
	case 2487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10334
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(nil) // No columns for UPDATE
			yyVAL.list = list
		}
	case 2488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10341
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(yyDollar[3].list) // Column list for UPDATE OF
			yyVAL.list = list
		}
	case 2489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10348
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_TRUNCATE)))
			list.Append(nil) // No columns for TRUNCATE
			yyVAL.list = list
		}
	case 2490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10357
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2491:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10358
		{
			yyVAL.list = nil
		}
	case 2492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10362
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10367
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10375
		{
			trans := &ast.TriggerTransition{
				Name:    yyDollar[4].str,
				IsNew:   yyDollar[1].bval,
				IsTable: yyDollar[2].bval,
			}
			yyVAL.node = trans
		}
	case 2495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10386
		{
			yyVAL.bval = true
		}
	case 2496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10387
		{
			yyVAL.bval = false
		}
	case 2497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10391
		{
			yyVAL.bval = true
		}
	case 2498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10392
		{
			yyVAL.bval = false
		}
	case 2499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10396
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10401
		{
			yyVAL.bval = yyDollar[3].bval
		}
	case 2501:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10405
		{
			// If ROW/STATEMENT not specified, default to STATEMENT
			yyVAL.bval = false
		}
	case 2504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10417
		{
			yyVAL.bval = true
		}
	case 2505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10418
		{
			yyVAL.bval = false
		}
	case 2506:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10422
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10423
		{
			yyVAL.node = nil
		}
	case 2510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10432
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10437
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2512:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10441
		{
			yyVAL.list = nil
		}
	case 2513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10446
		{
			yyVAL.node = ast.NewString(fmt.Sprintf("%d", yyDollar[1].ival))
		}
	case 2514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10449
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10450
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10451
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10455
		{
			yyVAL.rangevar = yyDollar[2].rangevar
		}
	case 2518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10456
		{
			yyVAL.rangevar = nil
		}
	case 2519:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10469
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[4].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[5].list,
				Query:           yyDollar[8].stmt,
				Replace:         false,
				Options:         yyDollar[6].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[9].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2520:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10485
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[6].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[10].stmt,
				Replace:         true,
				Options:         yyDollar[8].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[11].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2521:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:10501
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[5].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[11].stmt,
				Replace:         false,
				Options:         yyDollar[9].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[12].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2522:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:10517
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[7].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[9].list,
				Query:           yyDollar[13].stmt,
				Replace:         true,
				Options:         yyDollar[11].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[14].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10534
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10535
		{
			yyVAL.list = nil
		}
	case 2525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10539
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10540
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2527:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10541
		{
			yyVAL.ival = int(ast.LOCAL_CHECK_OPTION)
		}
	case 2528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10542
		{
			yyVAL.ival = int(ast.NO_CHECK_OPTION)
		}
	case 2529:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10553
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = yyDollar[5].rolespec
			n.SchemaElts = yyDollar[6].list
			yyVAL.stmt = n
		}
	case 2530:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10560
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = nil
			n.SchemaElts = yyDollar[4].list
			yyVAL.stmt = n
		}
	case 2531:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10567
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = yyDollar[8].rolespec
			n.SchemaElts = yyDollar[9].list
			yyVAL.stmt = n
		}
	case 2532:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10574
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = nil
			n.SchemaElts = yyDollar[7].list
			yyVAL.stmt = n
		}
	case 2533:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10590
		{
			n := ast.NewCreatedbStmt(yyDollar[3].str, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10603
		{
			n := ast.NewDropdbStmt(yyDollar[3].str, false, nil)
			yyVAL.stmt = n
		}
	case 2535:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10608
		{
			n := ast.NewDropdbStmt(yyDollar[5].str, true, nil)
			yyVAL.stmt = n
		}
	case 2536:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10613
		{
			n := ast.NewDropdbStmt(yyDollar[3].str, false, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2537:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10618
		{
			n := ast.NewDropdbStmt(yyDollar[5].str, true, yyDollar[8].list)
			yyVAL.stmt = n
		}
	case 2538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10625
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10626
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Append(yyDollar[3].defelt)
		}
	case 2540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10630
		{
			yyVAL.defelt = ast.NewDefElem("force", nil)
		}
	case 2541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10640
		{
			n := ast.NewDropTableSpaceStmt(yyDollar[3].str, false)
			yyVAL.stmt = n
		}
	case 2542:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10645
		{
			n := ast.NewDropTableSpaceStmt(yyDollar[5].str, true)
			yyVAL.stmt = n
		}
	case 2543:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10659
		{
			n := ast.NewDropOwnedStmt(yyDollar[4].list, yyDollar[5].dropBehav)
			yyVAL.stmt = n
		}
	case 2544:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10667
		{
			n := ast.NewReassignOwnedStmt(yyDollar[4].list, yyDollar[6].rolespec)
			yyVAL.stmt = n
		}
	case 2545:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10681
		{
			n := ast.NewCreateDomainStmt(yyDollar[3].list, yyDollar[5].typnam)
			// Use SplitColQualList to separate constraints and collate clause
			constraints, collClause := SplitColQualList(yyDollar[6].list)
			n.Constraints = constraints
			n.CollClause = collClause
			yyVAL.stmt = n
		}
	case 2546:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10699
		{
			n := ast.NewAlterDomainStmt('T', yyDollar[3].list)
			n.Def = yyDollar[4].node
			yyVAL.stmt = n
		}
	case 2547:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10705
		{
			n := ast.NewAlterDomainStmt('N', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2548:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10710
		{
			n := ast.NewAlterDomainStmt('O', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2549:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10715
		{
			n := ast.NewAlterDomainStmt('C', yyDollar[3].list)
			n.Def = yyDollar[5].node
			yyVAL.stmt = n
		}
	case 2550:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10721
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[6].str
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			yyVAL.stmt = n
		}
	case 2551:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10729
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[8].str
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			yyVAL.stmt = n
		}
	case 2552:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10737
		{
			n := ast.NewAlterDomainStmt('V', yyDollar[3].list)
			n.Name = yyDollar[6].str
			yyVAL.stmt = n
		}
	case 2553:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10752
		{
			// Extract actual arguments from aggr_args which returns [args, position_indicator]
			var args *ast.NodeList
			if yyDollar[5].list != nil && yyDollar[5].list.Len() > 0 {
				// First element contains the actual arguments (or nil for *)
				if firstElem, ok := yyDollar[5].list.Items[0].(*ast.NodeList); ok {
					args = firstElem
				} else if yyDollar[5].list.Items[0] == nil {
					// Special case for COUNT(*) - create a list with a single nil element
					args = ast.NewNodeList(nil)
				}
			}
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, false, yyDollar[4].list, args, yyDollar[6].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2554:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10768
		{
			// old-style (pre-8.2) syntax for CREATE AGGREGATE
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, true, yyDollar[4].list, nil, yyDollar[5].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2555:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10774
		{
			n := ast.NewDefineStmt(ast.OBJECT_OPERATOR, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2556:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10779
		{
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10784
		{
			// Shell type (identified by lack of definition)
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, nil, false, false)
			yyVAL.stmt = n
		}
	case 2558:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10790
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSPARSER, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2559:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10795
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSDICTIONARY, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2560:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10800
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSTEMPLATE, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2561:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10805
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSCONFIGURATION, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2562:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10810
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2563:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10815
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, yyDollar[7].list, true, false)
			yyVAL.stmt = n
		}
	case 2564:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10820
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, ast.NewNodeList(yyDollar[5].list), false, false)
			yyVAL.stmt = n
		}
	case 2565:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10825
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, ast.NewNodeList(yyDollar[8].list), true, false)
			yyVAL.stmt = n
		}
	case 2566:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10830
		{
			typevar, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(fmt.Sprintf("invalid type name: %v", err))
				return 1
			}

			n := ast.NewCompositeTypeStmt(typevar, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2567:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10841
		{
			n := ast.NewCreateEnumStmt(yyDollar[3].list, yyDollar[7].list)
			yyVAL.stmt = n
		}
	case 2568:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10846
		{
			n := ast.NewCreateRangeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2569:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10860
		{
			n := ast.NewCreateSeqStmt(yyDollar[4].rangevar, yyDollar[5].list, 0, false, false)
			yyVAL.stmt = n
		}
	case 2570:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10865
		{
			n := ast.NewCreateSeqStmt(yyDollar[7].rangevar, yyDollar[8].list, 0, false, true)
			yyVAL.stmt = n
		}
	case 2571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10872
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10873
		{
			yyVAL.list = nil
		}
	case 2573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10876
		{
		}
	case 2574:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10877
		{
		}
	case 2575:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10888
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[3].rangevar, yyDollar[4].list, false, false)
		}
	case 2576:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10892
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[5].rangevar, yyDollar[6].list, false, true)
		}
	case 2577:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10905
		{
			n := ast.NewCreateExtensionStmt(yyDollar[3].str, false, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2578:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10910
		{
			n := ast.NewCreateExtensionStmt(yyDollar[6].str, true, yyDollar[8].list)
			yyVAL.stmt = n
		}
	case 2579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10918
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2580:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10927
		{
			yyVAL.list = nil
		}
	case 2581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10934
		{
			yyVAL.defelt = ast.NewDefElem("schema", ast.NewString(yyDollar[2].str))
		}
	case 2582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10938
		{
			yyVAL.defelt = ast.NewDefElem("version", ast.NewString(yyDollar[2].str))
		}
	case 2583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10942
		{
			yylex.Error("CREATE EXTENSION ... FROM is no longer supported")
			return 1
		}
	case 2584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10947
		{
			yyVAL.defelt = ast.NewDefElem("cascade", ast.NewBoolean(true))
		}
	case 2585:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10960
		{
			n := ast.NewAlterExtensionStmt(yyDollar[3].str, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10968
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2587:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10977
		{
			yyVAL.list = nil
		}
	case 2588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10984
		{
			yyVAL.defelt = ast.NewDefElem("to", ast.NewString(yyDollar[2].str))
		}
	case 2589:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10997
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), ast.NewString(yyDollar[6].str))
		}
	case 2590:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11001
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), yyDollar[6].list)
		}
	case 2591:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11005
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_AGGREGATE), yyDollar[6].objwithargs)
		}
	case 2592:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11009
		{
			// CAST takes two TypeNames as a NodeList
			list := ast.NewNodeList(yyDollar[7].typnam)
			list.Append(yyDollar[9].typnam)
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_CAST), list)
		}
	case 2593:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11016
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_DOMAIN), yyDollar[6].typnam)
		}
	case 2594:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11020
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_FUNCTION), yyDollar[6].objwithargs)
		}
	case 2595:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11024
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPERATOR), yyDollar[6].objwithargs)
		}
	case 2596:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11028
		{
			// OPERATOR CLASS takes method name + class name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then class name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPCLASS), list)
		}
	case 2597:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11037
		{
			// OPERATOR FAMILY takes method name + family name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then family name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPFAMILY), list)
		}
	case 2598:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11046
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_PROCEDURE), yyDollar[6].objwithargs)
		}
	case 2599:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11050
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_ROUTINE), yyDollar[6].objwithargs)
		}
	case 2600:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11054
		{
			list := ast.NewNodeList(yyDollar[7].typnam, ast.NewString(yyDollar[9].str))
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TRANSFORM), list)
		}
	case 2601:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11059
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TYPE), yyDollar[6].typnam)
		}
	case 2602:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11071
		{
			yyVAL.stmt = ast.NewCreateFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2603:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11077
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2604:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11081
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, nil)
		}
	case 2605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11087
		{
			yyVAL.defelt = ast.NewDefElem("handler", yyDollar[2].list)
		}
	case 2606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11088
		{
			yyVAL.defelt = ast.NewDefElem("handler", nil)
		}
	case 2607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11089
		{
			yyVAL.defelt = ast.NewDefElem("validator", yyDollar[2].list)
		}
	case 2608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11090
		{
			yyVAL.defelt = ast.NewDefElem("validator", nil)
		}
	case 2609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11094
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11095
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11099
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2612:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11100
		{
			yyVAL.list = nil
		}
	case 2613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11104
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11105
		{
			result := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				result.Append(item)
			}
			yyVAL.list = result
		}
	case 2615:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11122
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].str, yyDollar[9].str, yyDollar[10].list, false)
		}
	case 2616:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:11127
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[6].str, yyDollar[7].str, yyDollar[8].str, yyDollar[12].str, yyDollar[13].list, true)
		}
	case 2617:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11133
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].list, true)
		}
	case 2618:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11137
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, nil, true)
		}
	case 2619:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11141
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, "", yyDollar[4].list, false)
		}
	case 2620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11147
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11148
		{
			yyVAL.str = ""
		}
	case 2622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11152
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11153
		{
			yyVAL.str = ""
		}
	case 2624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11157
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2625:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11158
		{
			yyVAL.str = ""
		}
	case 2626:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11171
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[6].list, yyDollar[8].list, yyDollar[10].str, yyDollar[11].list, nil, false)
		}
	case 2627:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:11177
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[9].list, yyDollar[11].list, yyDollar[13].str, yyDollar[14].list, nil, true)
		}
	case 2628:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:11183
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[8].list, ast.NewNodeList(yyDollar[7].rangevar), yyDollar[11].str, yyDollar[12].list, yyDollar[9].partboundspec, false)
		}
	case 2629:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:11189
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[11].list, ast.NewNodeList(yyDollar[10].rangevar), yyDollar[14].str, yyDollar[15].list, yyDollar[12].partboundspec, true)
		}
	case 2630:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11203
		{
			stmt := ast.NewImportForeignSchemaStmt(
				ast.NewString(yyDollar[8].str),    // server name
				ast.NewString(yyDollar[4].str),    // remote schema
				ast.NewString(yyDollar[10].str),   // local schema
				yyDollar[5].importqual.typ,        // list type
				yyDollar[5].importqual.tableNames, // table list
				yyDollar[11].list,                 // options
			)
			yyVAL.stmt = stmt
		}
	case 2631:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11218
		{
			qual := &ImportQual{
				typ:        yyDollar[1].importqualtype,
				tableNames: yyDollar[3].list,
			}
			yyVAL.importqual = qual
		}
	case 2632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11226
		{
			qual := &ImportQual{
				typ:        ast.FDW_IMPORT_SCHEMA_ALL,
				tableNames: nil,
			}
			yyVAL.importqual = qual
		}
	case 2633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11236
		{
			yyVAL.importqualtype = ast.FDW_IMPORT_SCHEMA_LIMIT_TO
		}
	case 2634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11237
		{
			yyVAL.importqualtype = ast.FDW_IMPORT_SCHEMA_EXCEPT
		}
	case 2635:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11247
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list, false)
		}
	case 2636:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11251
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[8].rolespec, yyDollar[10].str, yyDollar[11].list, true)
		}
	case 2637:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11257
		{
			yyVAL.stmt = ast.NewAlterUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list)
		}
	case 2638:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11263
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, false)
		}
	case 2639:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11267
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[7].rolespec, yyDollar[9].str, true)
		}
	case 2640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11273
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 2641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11274
		{
			yyVAL.rolespec = ast.NewRoleSpec(ast.ROLESPEC_CURRENT_USER, "")
		}
	case 2642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11279
		{
			// For aggregates like COUNT(*)
			// Return a list with [nil, -1] matching PostgreSQL's list_make2(NIL, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(nil, ast.NewInteger(-1))
		}
	case 2643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11285
		{
			// Regular aggregate arguments
			// Return a list with [args, -1] matching PostgreSQL's list_make2($2, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(yyDollar[2].list, ast.NewInteger(-1))
		}
	case 2644:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11291
		{
			// Ordered-set aggregate without direct arguments
			// Return a list with [args, 0] matching PostgreSQL's list_make2($4, makeInteger(0))
			yyVAL.list = ast.NewNodeList(yyDollar[4].list, ast.NewInteger(0))
		}
	case 2645:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11297
		{
			// Hypothetical-set aggregate
			// This is the only case requiring consistency checking in PostgreSQL
			result, err := makeOrderedSetArgs(yyDollar[2].list, yyDollar[5].list)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.list = result
		}
	case 2646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11311
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11315
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11323
		{
			yyVAL.node = yyDollar[1].funparam
		}
	case 2649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11330
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11337
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2651:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11341
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11349
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2653:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11356
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			n.NewValIsAfter = true
			yyVAL.stmt = n
		}
	case 2654:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11364
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = false
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2655:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11373
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = true
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2656:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11382
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.OldVal = yyDollar[6].str
			n.NewVal = yyDollar[8].str
			n.SkipIfNewValExists = false
			yyVAL.stmt = n
		}
	case 2657:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11390
		{
			// Following PostgreSQL's approach - DROP VALUE is parsed but not implemented
			// PostgreSQL throws an error saying "dropping an enum value is not implemented"
			yylex.Error("dropping an enum value is not implemented")
			return 1
		}
	case 2658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11406
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2659:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11408
		{
			yyVAL.list = nil
		}
	case 2660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11413
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11415
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2662:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11420
		{
			if constraint, ok := yyDollar[3].node.(*ast.Constraint); ok {
				constraint.Conname = yyDollar[2].str
				yyVAL.node = constraint
			} else {
				yyVAL.node = yyDollar[3].node
			}
		}
	case 2663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11429
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2664:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11434
		{
			n := ast.NewConstraint(ast.CONSTR_CHECK)
			n.RawExpr = yyDollar[3].node
			n.CookedExpr = "" // Empty string, not nil
			// Process constraint attributes from $5
			processConstraintAttributeSpec(yyDollar[5].ival, n)
			// PostgreSQL: n->initially_valid = !n->skip_validation
			n.InitiallyValid = !n.SkipValidation
			yyVAL.node = n
		}
	case 2665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11445
		{
			n := ast.NewConstraint(ast.CONSTR_NOTNULL)
			// In PostgreSQL, domain NOT NULL constraints have keys = list_make1(makeString("value"))
			n.Keys = ast.NewNodeList(ast.NewString("value"))
			// Process constraint attributes from $3
			processConstraintAttributeSpec(yyDollar[3].ival, n)
			// PostgreSQL sets initially_valid = true for NOT NULL (no NOT VALID support yet)
			n.InitiallyValid = true
			yyVAL.node = n
		}
	case 2666:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11465
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[7].stmt, yyDollar[5].into, ast.OBJECT_MATVIEW, false, false)
			/* cram additional flags into the IntoClause */
			yyDollar[5].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[5].into.SkipData = !yyDollar[8].bval
			yyVAL.stmt = ctas
		}
	case 2667:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11473
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[10].stmt, yyDollar[8].into, ast.OBJECT_MATVIEW, false, true)
			/* cram additional flags into the IntoClause */
			yyDollar[8].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[8].into.SkipData = !yyDollar[11].bval
			yyVAL.stmt = ctas
		}
	case 2668:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11484
		{
			n := ast.NewRefreshMatViewStmt(yyDollar[4].bval, !yyDollar[6].bval, yyDollar[5].rangevar)
			yyVAL.stmt = n
		}
	case 2669:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11499
		{
			yylex.Error("CREATE ASSERTION is not yet implemented")
			return 1
			// PostgreSQL doesn't actually implement CREATE ASSERTION yet.
			// $$ = ast.NewCreateAssertionStmt($3, $6, nil)
		}
	case 2670:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11515
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[6].stmt, yyDollar[4].into, ast.OBJECT_TABLE, false, false)
			/* cram additional flags into the IntoClause */
			if yyDollar[4].into.Rel != nil {
				yyDollar[4].into.Rel.RelPersistence = yyDollar[2].rune
			}
			yyDollar[4].into.SkipData = !yyDollar[7].bval
			yyVAL.stmt = ctas
		}
	case 2671:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11525
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[9].stmt, yyDollar[7].into, ast.OBJECT_TABLE, false, true)
			/* cram additional flags into the IntoClause */
			if yyDollar[7].into.Rel != nil {
				yyDollar[7].into.Rel.RelPersistence = yyDollar[2].rune
			}
			yyDollar[7].into.SkipData = !yyDollar[10].bval
			yyVAL.stmt = ctas
		}
	case 2672:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:11545
		{
			n := &ast.RuleStmt{
				BaseNode:    ast.BaseNode{Tag: ast.T_RuleStmt},
				Replace:     yyDollar[2].bval,
				Relation:    yyDollar[9].rangevar,
				Rulename:    yyDollar[4].str,
				WhereClause: yyDollar[10].node,
				Event:       ast.CmdType(yyDollar[7].ival),
				Instead:     yyDollar[12].bval,
				Actions:     yyDollar[13].list,
			}
			yyVAL.stmt = n
		}
	case 2673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11561
		{
			yyVAL.list = nil
		}
	case 2674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11562
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].stmt)
		}
	case 2675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11563
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11568
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].list != nil {
					yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].stmt)
					yyVAL.list = yyDollar[1].list
				} else {
					yyVAL.list = ast.NewNodeList(yyDollar[3].stmt)
				}
			}
		}
	case 2677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11579
		{
			if yyDollar[1].stmt != nil {
				yyVAL.list = ast.NewNodeList(yyDollar[1].stmt)
			} else {
				yyVAL.list = nil
			}
		}
	case 2683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11597
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2684:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11598
		{
			yyVAL.stmt = nil
		}
	case 2685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11602
		{
			yyVAL.bval = true
		}
	case 2686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11603
		{
			yyVAL.bval = false
		}
	case 2687:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11604
		{
			yyVAL.bval = false
		}
	case 2688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11607
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 2689:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11608
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 2690:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11613
		{
			yyVAL.into = &ast.IntoClause{
				Rel:            yyDollar[1].rangevar,
				ColNames:       yyDollar[2].list,
				AccessMethod:   yyDollar[3].str,
				Options:        yyDollar[4].list,
				TableSpaceName: yyDollar[5].str,
			}
		}
	case 2691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11625
		{
			yyVAL.bval = true
		}
	case 2692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11626
		{
			yyVAL.bval = false
		}
	case 2693:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11627
		{
			yyVAL.bval = true
		}
	case 2694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11632
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].stmt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2695:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11641
		{
			yyVAL.list = nil
		}
	case 2700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11652
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11654
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_CURRENT, yyDollar[1].str, nil, false)
		}
	case 2702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11658
		{
			args := ast.NewNodeList(yyDollar[3].node)
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "timezone", args, false)
		}
	case 2703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11663
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "catalog", args, false)
		}
	case 2704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11668
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "search_path", args, false)
		}
	case 2705:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11673
		{
			var args *ast.NodeList
			if yyDollar[2].str != "" {
				args = ast.NewNodeList(ast.NewString(yyDollar[2].str))
			}
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "client_encoding", args, false)
		}
	case 2706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11681
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "role", args, false)
		}
	case 2707:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11686
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "session_authorization", args, false)
		}
	case 2708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11691
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, "session_authorization", nil, false)
		}
	case 2709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11695
		{
			var value string
			if yyDollar[3].ival == int(ast.XMLOPTION_DOCUMENT) {
				value = "document"
			} else {
				value = "content"
			}
			args := ast.NewNodeList(ast.NewString(value))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "xmloption", args, false)
		}
	case 2710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11706
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "transaction_snapshot", args, false)
		}
	case 2711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11714
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2712:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11718
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2713:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11722
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11726
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11733
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2716:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11737
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 2717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11744
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2718:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11750
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11757
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11758
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11762
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11763
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2723:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11765
		{
			t := yyDollar[1].typnam
			t.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 2724:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11772
		{
			t := yyDollar[1].typnam
			// INTERVAL_FULL_RANGE equivalent and precision
			t.Typmods = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_FULL_RANGE), ast.NewInteger(yyDollar[3].ival))
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[5].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 2725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11779
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11780
		{
			yyVAL.node = ast.NewString("default")
		}
	case 2727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11781
		{
			yyVAL.node = ast.NewString("local")
		}
	case 2728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11785
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11786
		{
			yyVAL.str = "default"
		}
	case 2730:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11787
		{
			yyVAL.str = ""
		}
	case 2731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11791
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11792
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11796
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11797
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11798
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11799
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11803
		{
			yyVAL.ival = int(ast.XMLOPTION_DOCUMENT)
		}
	case 2738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11804
		{
			yyVAL.ival = int(ast.XMLOPTION_CONTENT)
		}
	case 2739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11809
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2740:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11815
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11820
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2742:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11828
		{
			yyVAL.node = ast.NewDefElem("transaction_isolation", ast.NewString(yyDollar[3].str))
		}
	case 2743:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11832
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(true))
		}
	case 2744:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11836
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(false))
		}
	case 2745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11840
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(true))
		}
	case 2746:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11844
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(false))
		}
	case 2747:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11850
		{
			yyVAL.str = "read uncommitted"
		}
	case 2748:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11851
		{
			yyVAL.str = "read committed"
		}
	case 2749:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11852
		{
			yyVAL.str = "repeatable read"
		}
	case 2750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11853
		{
			yyVAL.str = "serializable"
		}
	case 2751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11857
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2752:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11858
		{
			yyVAL.list = nil
		}
	case 2753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11862
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 2754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11863
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11864
		{
			yyVAL.node = yyDollar[1].list
		}
	case 2756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11867
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11868
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11869
		{
			yyVAL.node = ast.NewString("none")
		}
	case 2759:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11873
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2760:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11874
		{
			yyVAL.list = nil
		}
	case 2761:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11878
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2762:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11879
		{
			yyVAL.node = nil
		}
	case 2763:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11883
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11888
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2765:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11893
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11901
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11905
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_SET
			yyVAL.defelt = elem
		}
	case 2768:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11911
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_ADD
			yyVAL.defelt = elem
		}
	case 2769:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11917
		{
			yyVAL.defelt = ast.NewDefElemExtended("", yyDollar[2].str, nil, ast.DEFELEM_DROP)
		}
	case 2770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11923
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11924
		{
			yyVAL.str = ""
		}
	case 2772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11928
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_NOTHING, "")
		}
	case 2773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11929
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_FULL, "")
		}
	case 2774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11930
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_DEFAULT, "")
		}
	case 2775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11931
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_INDEX, yyDollar[3].str)
		}
	case 2776:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11935
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11940
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2778:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11945
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11952
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2780:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11953
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2781:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11964
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[9].list, nil)
		}
	case 2782:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:11968
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[11].list, yyDollar[8].list)
		}
	case 2783:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11974
		{
			yyVAL.stmt = ast.NewAlterEventTrigStmt(yyDollar[4].str, ast.TriggerFires(yyDollar[5].ival))
		}
	case 2784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11980
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_ORIGIN)
		}
	case 2785:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11981
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_REPLICA)
		}
	case 2786:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11982
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ALWAYS)
		}
	case 2787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11983
		{
			yyVAL.ival = int(ast.TRIGGER_DISABLED)
		}
	case 2788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11988
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2789:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11993
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2790:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12001
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[4].list)
		}
	case 2791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12008
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(ast.NewString(yyDollar[1].str))
		}
	case 2792:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12013
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2793:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12027
		{
			yyVAL.stmt = ast.NewCreateTableSpaceStmt(yyDollar[3].str, yyDollar[4].rolespec, yyDollar[6].str, yyDollar[7].list)
		}
	case 2794:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12033
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 2795:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12034
		{
			yyVAL.rolespec = nil
		}
	case 2796:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12039
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, false)
		}
	case 2797:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12043
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, true)
		}
	case 2798:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12058
		{
			yyVAL.stmt = ast.NewCreatePolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].bval, yyDollar[7].str, yyDollar[8].list, yyDollar[9].node, yyDollar[10].node)
		}
	case 2799:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12066
		{
			yyVAL.stmt = ast.NewAlterPolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].list, yyDollar[7].node, yyDollar[8].node)
		}
	case 2800:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12073
		{
			// Check for "permissive" or "restrictive" (case-insensitive)
			if strings.EqualFold(yyDollar[2].str, "permissive") {
				yyVAL.bval = true
			} else if strings.EqualFold(yyDollar[2].str, "restrictive") {
				yyVAL.bval = false
			} else {
				// Parser will error on invalid value
				yylex.Error("unrecognized row security option")
				return 1
			}
		}
	case 2801:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12085
		{
			yyVAL.bval = true
		}
	case 2802:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12089
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2803:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12090
		{
			yyVAL.str = "all"
		}
	case 2804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12094
		{
			yyVAL.str = "all"
		}
	case 2805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12095
		{
			yyVAL.str = "select"
		}
	case 2806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12096
		{
			yyVAL.str = "insert"
		}
	case 2807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12097
		{
			yyVAL.str = "update"
		}
	case 2808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12098
		{
			yyVAL.str = "delete"
		}
	case 2809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12102
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2810:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12103
		{
			// Default to PUBLIC when no TO clause is specified
			publicRole := ast.NewRoleSpec(ast.ROLESPEC_PUBLIC, "")
			yyVAL.list = ast.NewNodeList(publicRole)
		}
	case 2811:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12111
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2812:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12112
		{
			yyVAL.list = nil
		}
	case 2813:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12116
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2814:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12117
		{
			yyVAL.node = nil
		}
	case 2815:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12121
		{
			yyVAL.node = yyDollar[4].node
		}
	case 2816:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12122
		{
			yyVAL.node = nil
		}
	case 2817:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12133
		{
			yyVAL.stmt = ast.NewCreateAmStmt(yyDollar[4].str, ast.AmType(yyDollar[6].ival), yyDollar[8].list)
		}
	case 2818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12139
		{
			yyVAL.ival = int(ast.AMTYPE_INDEX)
		}
	case 2819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12140
		{
			yyVAL.ival = int(ast.AMTYPE_TABLE)
		}
	case 2820:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12151
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[3].list, yyDollar[4].list, yyDollar[6].list, yyDollar[8].list, "", false, false)
		}
	case 2821:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12155
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[6].list, yyDollar[7].list, yyDollar[9].list, yyDollar[11].list, "", false, true)
		}
	case 2822:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12162
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[3].list, yyDollar[6].node, false)
		}
	case 2823:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12166
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[5].list, yyDollar[8].node, true)
		}
	case 2824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12172
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].statelem)
		}
	case 2825:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12173
		{
			yyDollar[1].list.Append(yyDollar[3].statelem)
			yyVAL.list = yyDollar[1].list
		}
	case 2826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12177
		{
			yyVAL.statelem = ast.NewStatsElem(yyDollar[1].str)
		}
	case 2827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12178
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[1].node)
		}
	case 2828:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12179
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[2].node)
		}
	case 2829:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12190
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, false, yyDollar[4].list)
		}
	case 2830:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12194
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, true, yyDollar[7].list)
		}
	case 2831:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12198
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, yyDollar[5].list, false, yyDollar[6].list)
		}
	case 2832:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12205
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, yyDollar[5].list, nil, ast.AP_SetOptions)
		}
	case 2833:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12209
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_AddObjects)
		}
	case 2834:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12213
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_SetObjects)
		}
	case 2835:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12217
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_DropObjects)
		}
	case 2836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12223
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2837:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12224
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2838:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12229
		{
			pubTable := ast.NewPublicationTable(yyDollar[2].rangevar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_TABLE, pubTable)
		}
	case 2839:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12234
		{
			yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_TABLES_IN_SCHEMA, yyDollar[4].str)
		}
	case 2840:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12238
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA)
		}
	case 2841:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12242
		{
			// If either a row filter or column list is specified, create a PublicationTable object
			if yyDollar[2].list != nil || yyDollar[3].node != nil {
				// Create a simple RangeVar from the ColId
				rangeVar := ast.NewRangeVar(yyDollar[1].str, "", "")
				pubTable := ast.NewPublicationTable(rangeVar, yyDollar[3].node, yyDollar[2].list)
				yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
			} else {
				yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_CONTINUATION, yyDollar[1].str)
			}
		}
	case 2842:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12254
		{
			rangeVar := makeRangeVarFromQualifiedName(yyDollar[1].str, yyDollar[2].list, -1)
			pubTable := ast.NewPublicationTable(rangeVar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2843:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12260
		{
			pubTable := ast.NewPublicationTable(yyDollar[1].rangevar, yyDollar[3].node, yyDollar[2].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12265
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_CONTINUATION)
		}
	case 2845:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12271
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2846:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12272
		{
			yyVAL.node = nil
		}
	case 2847:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12283
		{
			yyVAL.stmt = ast.NewCreateSubscriptionStmt(yyDollar[3].str, yyDollar[5].str, yyDollar[7].list, yyDollar[8].list)
		}
	case 2848:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12290
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_OPTIONS, "", nil, yyDollar[5].list)
		}
	case 2849:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12294
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_CONNECTION, yyDollar[5].str, nil, nil)
		}
	case 2850:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12298
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_REFRESH, "", nil, yyDollar[6].list)
		}
	case 2851:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12302
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ADD_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2852:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12306
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_DROP_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2853:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12310
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SET_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2854:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12314
		{
			enableOpt := ast.NewNodeList()
			enableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(true)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, enableOpt)
		}
	case 2855:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12320
		{
			disableOpt := ast.NewNodeList()
			disableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(false)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, disableOpt)
		}
	case 2856:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12326
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SKIP, "", nil, yyDollar[5].list)
		}
	case 2857:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12339
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, yyDollar[10].objwithargs, ast.CoercionContext(yyDollar[11].ival), false)
		}
	case 2858:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12343
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), false)
		}
	case 2859:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12347
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), true)
		}
	case 2860:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12353
		{
			yyVAL.ival = int(ast.COERCION_IMPLICIT)
		}
	case 2861:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12354
		{
			yyVAL.ival = int(ast.COERCION_ASSIGNMENT)
		}
	case 2862:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12355
		{
			yyVAL.ival = int(ast.COERCION_EXPLICIT)
		}
	case 2863:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:12367
		{
			yyVAL.stmt = ast.NewCreateOpClassStmt(yyDollar[4].list, yyDollar[11].list, yyDollar[10].str, yyDollar[8].typnam, yyDollar[13].list, yyDollar[5].bval)
		}
	case 2864:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12373
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2865:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12374
		{
			yyVAL.list = nil
		}
	case 2866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12378
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2867:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12379
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2868:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12384
		{
			// Create ObjectWithArgs for simple operator
			owa := ast.NewObjectWithArgs(yyDollar[3].list, nil, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, yyDollar[4].list)
		}
	case 2869:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12390
		{
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, yyDollar[3].objwithargs, yyDollar[4].list)
		}
	case 2870:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12394
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[3].objwithargs, nil)
		}
	case 2871:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12398
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[6].objwithargs, yyDollar[4].list)
		}
	case 2872:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12402
		{
			yyVAL.node = ast.NewOpClassItemStorage(yyDollar[2].typnam)
		}
	case 2873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12408
		{
			yyVAL.bval = true
		}
	case 2874:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12409
		{
			yyVAL.bval = false
		}
	case 2875:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12413
		{
			yyVAL.list = nil
		}
	case 2876:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12414
		{
			yyVAL.list = yyDollar[4].list
		}
	case 2877:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12415
		{
			yyVAL.list = nil
		}
	case 2878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12419
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].typnam)
		}
	case 2879:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12420
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2880:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12431
		{
			yyVAL.stmt = ast.NewCreateOpFamilyStmt(yyDollar[4].list, yyDollar[6].str)
		}
	case 2881:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12444
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, false, yyDollar[8].list)
		}
	case 2882:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12448
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, true, yyDollar[8].list)
		}
	case 2883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12454
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2884:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12455
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2885:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12460
		{
			// Create ObjectWithArgs for operator with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, nil)
		}
	case 2886:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12466
		{
			// Create ObjectWithArgs for function with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, owa, nil)
		}
	case 2887:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12481
		{
			yyVAL.stmt = ast.NewCreateConversionStmt(yyDollar[4].list, yyDollar[6].str, yyDollar[8].str, yyDollar[10].list, yyDollar[2].bval)
		}
	case 2888:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12494
		{
			yyVAL.stmt = ast.NewCreateTransformStmt(yyDollar[2].bval, yyDollar[5].typnam, yyDollar[7].str, linitial(yyDollar[9].list), lsecond(yyDollar[9].list))
		}
	case 2889:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12501
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs)  // fromsql
			yyVAL.list.Append(yyDollar[11].objwithargs) // tosql
		}
	case 2890:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12507
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[11].objwithargs) // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs)  // tosql
		}
	case 2891:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12513
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs) // fromsql
			yyVAL.list.Append(nil)                     // tosql
		}
	case 2892:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12519
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(nil)                     // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs) // tosql
		}
	case 2893:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12534
		{
			// Parameterless CREATE LANGUAGE is now treated as CREATE EXTENSION
			yyVAL.stmt = ast.NewCreateExtensionStmt(yyDollar[6].str, yyDollar[2].bval, nil)
		}
	case 2894:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12540
		{
			yyVAL.stmt = ast.NewCreatePLangStmt(yyDollar[2].bval, yyDollar[6].str, yyDollar[8].list, yyDollar[9].list, yyDollar[10].list, yyDollar[3].bval)
		}
	case 2895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12546
		{
			yyVAL.bval = true
		}
	case 2896:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12547
		{
			yyVAL.bval = false
		}
	case 2897:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12552
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2898:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12553
		{
			yyVAL.list = nil
		}
	case 2899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12557
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2900:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12558
		{
			yyVAL.list = nil
		}
	case 2901:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12562
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2902:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12563
		{
			yyVAL.list = nil
		}
	case 2903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12566
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_ALL
		}
	case 2904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12567
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DISTINCT
		}
	case 2905:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12568
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DEFAULT
		}
	case 2906:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12573
		{
			yyVAL.groupClause = &ast.GroupClause{
				Distinct: yyDollar[3].setquant == ast.SET_QUANTIFIER_DISTINCT,
				List:     yyDollar[4].list,
			}
		}
	case 2907:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12580
		{
			yyVAL.groupClause = nil
		}
	case 2908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12586
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2909:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12587
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12591
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12592
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12593
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12594
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12595
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2915:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12600
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_EMPTY, ast.NewNodeList(), 0)
		}
	case 2916:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12607
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_ROLLUP, yyDollar[3].list, 0)
		}
	case 2917:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12614
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_CUBE, yyDollar[3].list, 0)
		}
	case 2918:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12621
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_SETS, yyDollar[4].list, 0)
		}
	case 2919:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12630
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2920:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12631
		{
			yyVAL.node = nil
		}
	case 2921:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12638
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12642
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2923:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12643
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2924:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12648
		{
			sortBy := ast.NewSortBy(yyDollar[1].node, ast.SORTBY_USING, ast.SortByNulls(yyDollar[4].ival), 0)
			// Use qual_all_Op (NodeList) directly for UseOp
			sortBy.UseOp = yyDollar[3].list
			yyVAL.node = sortBy
		}
	case 2925:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12655
		{
			yyVAL.node = ast.NewSortBy(yyDollar[1].node, ast.SortByDir(yyDollar[2].ival), ast.SortByNulls(yyDollar[3].ival), 0)
		}
	case 2926:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12666
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2927:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12668
		{
			yyVAL.list = nil
		}
	case 2928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12673
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[1].windef)
		}
	case 2929:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12678
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[3].windef)
		}
	case 2930:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12686
		{
			n := yyDollar[3].windef
			n.Name = yyDollar[1].str
			yyVAL.windef = n
		}
	case 2931:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12695
		{
			yyVAL.windef = yyDollar[2].windef
		}
	case 2932:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12697
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			yyVAL.windef = n
		}
	case 2933:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12704
		{
			yyVAL.windef = nil
		}
	case 2934:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12709
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.PartitionClause = yyDollar[3].list
			n.OrderClause = yyDollar[4].list

			n.FrameOptions = yyDollar[5].windef.FrameOptions
			n.StartOffset = yyDollar[5].windef.StartOffset
			n.EndOffset = yyDollar[5].windef.EndOffset
			yyVAL.windef = n
		}
	case 2935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12723
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2936:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12724
		{
			yyVAL.str = ""
		}
	case 2937:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12728
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2938:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12729
		{
			yyVAL.list = nil
		}
	case 2939:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12734
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_RANGE
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2940:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12741
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_ROWS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2941:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12748
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_GROUPS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2942:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12755
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12766
		{
			n := yyDollar[1].windef
			// reject invalid cases - these would be runtime errors in PostgreSQL
			if (n.FrameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (n.FrameOptions & ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 {
				yylex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			n.FrameOptions |= ast.FRAMEOPTION_END_CURRENT_ROW
			yyVAL.windef = n
		}
	case 2944:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12780
		{
			n1 := yyDollar[2].windef
			n2 := yyDollar[4].windef

			// form merged options
			frameOptions := n1.FrameOptions
			// shift converts START_ options to END_ options
			frameOptions |= (n2.FrameOptions << 1)
			frameOptions |= ast.FRAMEOPTION_BETWEEN

			// reject invalid cases
			if (frameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (frameOptions & ast.FRAMEOPTION_END_UNBOUNDED_PRECEDING) != 0 {
				yylex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_CURRENT_ROW) != 0 &&
				(frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 {
				yylex.Error("frame starting from current row cannot have preceding rows")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 &&
				((frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 ||
					(frameOptions&ast.FRAMEOPTION_END_CURRENT_ROW) != 0) {
				yylex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			n1.FrameOptions = frameOptions
			n1.EndOffset = n2.StartOffset
			yyVAL.windef = n1
		}
	case 2945:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12815
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_PRECEDING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2946:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12823
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2947:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12831
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_CURRENT_ROW
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2948:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12839
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_PRECEDING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2949:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12847
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_FOLLOWING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2950:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12857
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_CURRENT_ROW
		}
	case 2951:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12858
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_GROUP
		}
	case 2952:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12859
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_TIES
		}
	case 2953:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12860
		{
			yyVAL.ival = 0
		}
	case 2954:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12861
		{
			yyVAL.ival = 0
		}
	case 2955:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12870
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[2].node
		}
	case 2956:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12875
		{
			yyVAL.selectLimit = yyDollar[2].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[1].node
		}
	case 2957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12880
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12884
		{
			n := &selectLimit{}
			n.limitOffset = yyDollar[1].node
			n.limitCount = nil
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12894
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2960:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12895
		{
			yyVAL.selectLimit = nil
		}
	case 2961:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12900
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[2].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2962:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12908
		{
			// Disabled because it was too confusing - PostgreSQL error
			yylex.Error("LIMIT #,# syntax is not supported. Use separate LIMIT and OFFSET clauses.")
			return 1
		}
	case 2963:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12915
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2964:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12923
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2965:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12931
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2966:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12939
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2967:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12950
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2968:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12953
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12957
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12959
		{
			/* LIMIT ALL is represented as a NULL constant */
			yyVAL.node = ast.NewA_Const(ast.NewNull(), -1)
		}
	case 2971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12966
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12979
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2973:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12981
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("+")}}, nil, yyDollar[2].node, -1)
		}
	case 2974:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12985
		{
			// Create a unary minus expression
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("-")}}, nil, yyDollar[2].node, -1)
		}
	case 2975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12992
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), -1)
		}
	case 2976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12993
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), -1)
		}
	case 2977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12998
		{
			yyVAL.ival = 0
		}
	case 2978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12999
		{
			yyVAL.ival = 0
		}
	case 2979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13003
		{
			yyVAL.ival = 0
		}
	case 2980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13004
		{
			yyVAL.ival = 0
		}
	case 2981:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13017
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2982:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13023
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_START)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 2983:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13029
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2984:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13035
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2985:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13041
		{
			stmt := ast.NewSavepointStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 2986:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13046
		{
			stmt := ast.NewReleaseStmt(yyDollar[3].str)
			yyVAL.stmt = stmt
		}
	case 2987:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13051
		{
			stmt := ast.NewReleaseStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 2988:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13056
		{
			stmt := ast.NewRollbackToStmt(yyDollar[5].str)
			yyVAL.stmt = stmt
		}
	case 2989:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13061
		{
			stmt := ast.NewRollbackToStmt(yyDollar[4].str)
			yyVAL.stmt = stmt
		}
	case 2990:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13066
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_PREPARE)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2991:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13072
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2992:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13078
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2993:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13087
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2994:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13093
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_BEGIN)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 2995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13100
		{
		}
	case 2996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13101
		{
		}
	case 2997:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13102
		{
		}
	case 2998:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13106
		{
			yyVAL.bval = true
		}
	case 2999:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13107
		{
			yyVAL.bval = false
		}
	case 3000:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13108
		{
			yyVAL.bval = false
		}
	case 3001:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13121
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_ROLE, yyDollar[3].str, yyDollar[5].list)
		}
	case 3002:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13128
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_USER, yyDollar[3].str, yyDollar[5].list)
		}
	case 3003:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13135
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_GROUP, yyDollar[3].str, yyDollar[5].list)
		}
	case 3004:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13142
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 3005:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13148
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 3006:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13157
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 3007:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13161
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 3008:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13165
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 3009:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13169
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 3010:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13175
		{
			yyVAL.str = ""
		}
	case 3011:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13176
		{
			yyVAL.str = yyDollar[3].str
		}
	case 3012:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13181
		{
			options := ast.NewNodeList(ast.NewDefElem("rolemembers", yyDollar[6].list))
			stmt := ast.NewAlterRoleStmt(yyDollar[3].rolespec, options)
			stmt.Action = yyDollar[4].ival
			yyVAL.stmt = stmt
		}
	case 3013:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13191
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 3014:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13195
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 3015:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13199
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 3016:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13203
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 3017:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13207
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 3018:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13211
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 3019:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13219
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 3020:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13230
		{
			yyVAL.list = nil
		}
	case 3021:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13235
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 3022:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13246
		{
			yyVAL.list = nil
		}
	case 3023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13250
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 3024:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13252
		{
			yyVAL.defelt = ast.NewDefElem("sysid", ast.NewInteger(yyDollar[2].ival))
		}
	case 3025:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13256
		{
			yyVAL.defelt = ast.NewDefElem("adminmembers", yyDollar[2].list)
		}
	case 3026:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13260
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 3027:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13264
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 3028:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13268
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 3029:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13275
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[2].str))
		}
	case 3030:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13279
		{
			yyVAL.defelt = ast.NewDefElem("password", nil)
		}
	case 3031:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13283
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[3].str))
		}
	case 3032:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13287
		{
			yylex.Error("UNENCRYPTED PASSWORD is no longer supported")
			return 1
		}
	case 3033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13292
		{
			yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(true))
		}
	case 3034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13296
		{
			// Handle identifiers like PostgreSQL does with string comparisons
			if yyDollar[1].str == "superuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nosuperuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createrole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreaterole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createdb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreatedb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(false))
			} else if yyDollar[1].str == "login" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nologin" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(false))
			} else if yyDollar[1].str == "replication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(true))
			} else if yyDollar[1].str == "noreplication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(false))
			} else if yyDollar[1].str == "bypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nobypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(false))
			} else if yyDollar[1].str == "noinherit" {
				yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(false))
			} else {
				// Return error for unrecognized role option
				yylex.Error("unrecognized role option \"" + yyDollar[1].str + "\"")
				yyVAL.defelt = nil
			}
		}
	case 3035:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13331
		{
			yyVAL.defelt = ast.NewDefElem("connectionlimit", ast.NewInteger(yyDollar[3].ival))
		}
	case 3036:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13335
		{
			yyVAL.defelt = ast.NewDefElem("validUntil", ast.NewString(yyDollar[3].str))
		}
	case 3037:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13339
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 3038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13345
		{
			yyVAL.ival = 1
		}
	case 3039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13346
		{
			yyVAL.ival = -1
		}
	case 3040:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:13358
		{
			n := ast.NewGrantStmt(yyDollar[4].privtarget.objtype, yyDollar[4].privtarget.objs, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = yyDollar[4].privtarget.targtype
			n.GrantOption = yyDollar[7].bval
			n.Grantor = yyDollar[8].rolespec
			yyVAL.stmt = n
		}
	case 3041:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:13370
		{
			n := ast.NewRevokeStmt(yyDollar[4].privtarget.objtype, yyDollar[4].privtarget.objs, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = yyDollar[4].privtarget.targtype
			n.Grantor = yyDollar[7].rolespec
			n.Behavior = yyDollar[8].dropBehav
			yyVAL.stmt = n
		}
	case 3042:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:13379
		{
			n := ast.NewRevokeStmt(yyDollar[7].privtarget.objtype, yyDollar[7].privtarget.objs, yyDollar[5].list, yyDollar[9].list)
			n.Targtype = yyDollar[7].privtarget.targtype
			n.GrantOption = true
			n.Grantor = yyDollar[10].rolespec
			n.Behavior = yyDollar[11].dropBehav
			yyVAL.stmt = n
		}
	case 3043:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13391
		{
			stmt := ast.NewGrantRoleStmt(yyDollar[2].list, yyDollar[4].list)
			stmt.Grantor = yyDollar[5].rolespec
			yyVAL.stmt = stmt
		}
	case 3044:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13397
		{
			stmt := ast.NewGrantRoleStmtWithOptions(yyDollar[2].list, yyDollar[4].list, yyDollar[6].list)
			stmt.Grantor = yyDollar[7].rolespec
			yyVAL.stmt = stmt
		}
	case 3045:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13406
		{
			stmt := ast.NewRevokeRoleStmt(yyDollar[2].list, yyDollar[4].list)
			stmt.Grantor = yyDollar[5].rolespec
			stmt.Behavior = yyDollar[6].dropBehav
			yyVAL.stmt = stmt
		}
	case 3046:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:13413
		{
			opt := ast.NewDefElem(yyDollar[2].str, ast.NewBoolean(false))
			stmt := ast.NewRevokeRoleStmt(yyDollar[5].list, yyDollar[7].list)
			stmt.Opt = &ast.NodeList{Items: []ast.Node{opt}}
			stmt.Grantor = yyDollar[8].rolespec
			stmt.Behavior = yyDollar[9].dropBehav
			yyVAL.stmt = stmt
		}
	case 3047:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13432
		{
			yyVAL.stmt = ast.NewAlterDefaultPrivilegesStmt(yyDollar[4].list, yyDollar[5].node.(*ast.GrantStmt))
		}
	case 3048:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13438
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3049:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13439
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 3050:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13444
		{
			yyVAL.defelt = ast.NewDefElem("schemas", yyDollar[3].list)
		}
	case 3051:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13448
		{
			yyVAL.defelt = ast.NewDefElem("roles", yyDollar[3].list)
		}
	case 3052:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13452
		{
			yyVAL.defelt = ast.NewDefElem("roles", yyDollar[3].list)
		}
	case 3053:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13464
		{
			n := ast.NewGrantStmt(ast.ObjectType(yyDollar[4].ival), nil, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.GrantOption = yyDollar[7].bval
			yyVAL.node = n
		}
	case 3054:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13472
		{
			n := ast.NewRevokeStmt(ast.ObjectType(yyDollar[4].ival), nil, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.Behavior = yyDollar[7].dropBehav
			yyVAL.node = n
		}
	case 3055:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:13480
		{
			n := ast.NewRevokeStmt(ast.ObjectType(yyDollar[7].ival), nil, yyDollar[5].list, yyDollar[9].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.GrantOption = true
			n.Behavior = yyDollar[10].dropBehav
			yyVAL.node = n
		}
	case 3056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13490
		{
			yyVAL.ival = int(ast.OBJECT_TABLE)
		}
	case 3057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13491
		{
			yyVAL.ival = int(ast.OBJECT_FUNCTION)
		}
	case 3058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13492
		{
			yyVAL.ival = int(ast.OBJECT_FUNCTION)
		}
	case 3059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13493
		{
			yyVAL.ival = int(ast.OBJECT_SEQUENCE)
		}
	case 3060:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13494
		{
			yyVAL.ival = int(ast.OBJECT_TYPE)
		}
	case 3061:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13495
		{
			yyVAL.ival = int(ast.OBJECT_SCHEMA)
		}
	case 3062:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13500
		{
			yyVAL.list = yyDollar[1].list
		}
	case 3063:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13502
		{
			yyVAL.list = nil
		}
	case 3064:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13504
		{
			yyVAL.list = nil
		}
	case 3065:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13506
		{
			ap := ast.NewAccessPriv("", yyDollar[3].list)
			yyVAL.list = ast.NewNodeList(ap)
		}
	case 3066:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13511
		{
			ap := ast.NewAccessPriv("", yyDollar[4].list)
			yyVAL.list = ast.NewNodeList(ap)
		}
	case 3067:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13517
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].accesspriv)
		}
	case 3068:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13518
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].accesspriv)
			yyVAL.list = yyDollar[1].list
		}
	case 3069:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13522
		{
			yyVAL.accesspriv = ast.NewAccessPriv("SELECT", yyDollar[2].list)
		}
	case 3070:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13526
		{
			yyVAL.accesspriv = ast.NewAccessPriv("REFERENCES", yyDollar[2].list)
		}
	case 3071:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13530
		{
			yyVAL.accesspriv = ast.NewAccessPriv("CREATE", yyDollar[2].list)
		}
	case 3072:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13534
		{
			yyVAL.accesspriv = ast.NewAccessPriv("ALTER SYSTEM", nil)
		}
	case 3073:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13538
		{
			yyVAL.accesspriv = ast.NewAccessPriv(yyDollar[1].str, yyDollar[2].list)
		}
	case 3074:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13548
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[1].list,
			}
		}
	case 3075:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13556
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[2].list,
			}
		}
	case 3076:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13564
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_SEQUENCE,
				objs:     yyDollar[2].list,
			}
		}
	case 3077:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13572
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FDW,
				objs:     yyDollar[4].list,
			}
		}
	case 3078:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13580
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FOREIGN_SERVER,
				objs:     yyDollar[3].list,
			}
		}
	case 3079:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13588
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FUNCTION,
				objs:     yyDollar[2].list,
			}
		}
	case 3080:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13596
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_PROCEDURE,
				objs:     yyDollar[2].list,
			}
		}
	case 3081:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13604
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_ROUTINE,
				objs:     yyDollar[2].list,
			}
		}
	case 3082:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13612
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_DATABASE,
				objs:     yyDollar[2].list,
			}
		}
	case 3083:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13620
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_DOMAIN,
				objs:     yyDollar[2].list,
			}
		}
	case 3084:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13628
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_LANGUAGE,
				objs:     yyDollar[2].list,
			}
		}
	case 3085:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13636
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_LARGEOBJECT,
				objs:     yyDollar[3].list,
			}
		}
	case 3086:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13644
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_PARAMETER_ACL,
				objs:     yyDollar[2].list,
			}
		}
	case 3087:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13652
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_SCHEMA,
				objs:     yyDollar[2].list,
			}
		}
	case 3088:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13660
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLESPACE,
				objs:     yyDollar[2].list,
			}
		}
	case 3089:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13668
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TYPE,
				objs:     yyDollar[2].list,
			}
		}
	case 3090:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13676
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[5].list,
			}
		}
	case 3091:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13684
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_SEQUENCE,
				objs:     yyDollar[5].list,
			}
		}
	case 3092:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13692
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_FUNCTION,
				objs:     yyDollar[5].list,
			}
		}
	case 3093:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13700
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_PROCEDURE,
				objs:     yyDollar[5].list,
			}
		}
	case 3094:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13708
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_ROUTINE,
				objs:     yyDollar[5].list,
			}
		}
	case 3095:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13719
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rolespec)
		}
	case 3096:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13720
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 3097:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13724
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 3098:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13725
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 3099:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13730
		{
			yyVAL.bval = true
		}
	case 3100:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13731
		{
			yyVAL.bval = false
		}
	case 3101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13735
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13736
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13741
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 3104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13747
		{
			yyVAL.node = ast.NewBoolean(true)
		}
	case 3105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13748
		{
			yyVAL.node = ast.NewBoolean(true)
		}
	case 3106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13749
		{
			yyVAL.node = ast.NewBoolean(false)
		}
	case 3107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13752
		{
			yyVAL.rolespec = yyDollar[3].rolespec
		}
	case 3108:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13753
		{
			yyVAL.rolespec = nil
		}
	case 3109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13758
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 3110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13762
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 3111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13770
		{
			yyVAL.str = yyDollar[1].str
		}
	case 3112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13774
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 3113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13779
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 3114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13780
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 3115:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13784
		{
			n := ast.NewRangeTableSample(nil, yyDollar[2].list, yyDollar[4].list, yyDollar[6].node, 0)
			yyVAL.node = n
		}
	case 3116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13792
		{
			yyVAL.node = yyDollar[3].node
		}
	case 3117:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13796
		{
			yyVAL.node = nil
		}
	case 3118:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13810
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_FUNCTION, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 3119:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13815
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_PROCEDURE, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 3120:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13820
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_ROUTINE, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 3121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13828
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13829
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13835
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(false))
		}
	case 3124:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13839
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 3125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13843
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 3126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13847
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("immutable"))
		}
	case 3127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13851
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("stable"))
		}
	case 3128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13855
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("volatile"))
		}
	case 3129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13859
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 3130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13863
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 3131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13867
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 3132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13871
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 3133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13875
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(true))
		}
	case 3134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13879
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(false))
		}
	case 3135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13883
		{
			yyVAL.defelt = ast.NewDefElem("cost", yyDollar[2].node)
		}
	case 3136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13887
		{
			yyVAL.defelt = ast.NewDefElem("rows", yyDollar[2].node)
		}
	case 3137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13891
		{
			yyVAL.defelt = ast.NewDefElem("support", yyDollar[2].list)
		}
	case 3138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13895
		{
			/* we abuse the normal content of a DefElem here */
			yyVAL.defelt = ast.NewDefElem("set", yyDollar[1].vsetstmt)
		}
	case 3139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13900
		{
			yyVAL.defelt = ast.NewDefElem("parallel", ast.NewString(yyDollar[2].str))
		}
	case 3140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13906
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13907
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13912
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 3143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13916
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 3144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13920
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 3145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13926
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 3146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13927
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 3147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13928
		{
			yyVAL.node = yyDollar[1].list
		}
	case 3148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13929
		{
			yyVAL.node = yyDollar[1].node
		}
	case 3149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13930
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 3152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13941
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = yyDollar[1].list
			n.Objargs = ast.ExtractArgTypes(yyDollar[2].list)
			n.ObjfuncArgs = yyDollar[2].list
			yyVAL.objwithargs = n
		}
	case 3153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13954
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = ast.NewNodeList(ast.NewString(yyDollar[1].str))
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13961
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = ast.NewNodeList(ast.NewString(yyDollar[1].str))
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13968
		{
			n := ast.NewEmptyObjectWithArgs()
			nameList := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			// Append indirection elements
			for i := 0; i < yyDollar[2].list.Len(); i++ {
				nameList.Append(yyDollar[2].list.Items[i])
			}
			n.Objname = nameList
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13982
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 3157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13984
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 3158:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13996
		{
			n := ast.NewAlterTypeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 3159:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14004
		{
			relation, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error("invalid type name")
				return 1
			}
			n := ast.NewAlterTableStmt(relation, yyDollar[4].list)
			n.Objtype = ast.OBJECT_TYPE // Mark this as a composite type alteration
			yyVAL.stmt = n
		}
	case 3160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14017
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 3161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14018
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 3162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14024
		{
			n := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			n.Behavior = yyDollar[4].dropBehav
			yyVAL.node = n
		}
	case 3163:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14031
		{
			n := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			yyVAL.node = n
		}
	case 3164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14039
		{
			n := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			yyVAL.node = n
		}
	case 3165:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14047
		{
			def := ast.NewColumnDef(yyDollar[3].str, yyDollar[6].typnam, -1)
			n := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, def)
			n.Behavior = yyDollar[8].dropBehav
			/* We only use these fields of the ColumnDef node */
			def.TypeName = yyDollar[6].typnam
			if collClause, ok := yyDollar[7].node.(*ast.CollateClause); ok {
				def.Collclause = collClause
			}
			def.RawDefault = nil
			yyVAL.node = n
		}
	case 3166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14068
		{
			yyVAL.ival = int(ast.CMD_SELECT)
		}
	case 3167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14069
		{
			yyVAL.ival = int(ast.CMD_UPDATE)
		}
	case 3168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14070
		{
			yyVAL.ival = int(ast.CMD_DELETE)
		}
	case 3169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14071
		{
			yyVAL.ival = int(ast.CMD_INSERT)
		}
	case 3170:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14081
		{
			yyVAL.stmt = ast.NewDeclareCursorStmt(yyDollar[2].str, yyDollar[3].ival|yyDollar[5].ival|ast.CURSOR_OPT_FAST_PLAN, yyDollar[7].stmt)
		}
	case 3171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14088
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_BINARY
		}
	case 3172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14092
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_INSENSITIVE
		}
	case 3173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14096
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_ASENSITIVE
		}
	case 3174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14100
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_SCROLL
		}
	case 3175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14104
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_NO_SCROLL
		}
	case 3176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14107
		{
			yyVAL.ival = 0
		}
	case 3177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14110
		{
			yyVAL.ival = ast.CURSOR_OPT_HOLD
		}
	case 3178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14111
		{
			yyVAL.ival = 0
		}
	case 3179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14112
		{
			yyVAL.ival = 0
		}
	case 3180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14116
		{
			stmt := yyDollar[2].stmt.(*ast.FetchStmt)
			stmt.IsMove = false
			yyVAL.stmt = stmt
		}
	case 3181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14122
		{
			stmt := yyDollar[2].stmt.(*ast.FetchStmt)
			stmt.IsMove = true
			yyVAL.stmt = stmt
		}
	case 3182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14130
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[1].str, false)
		}
	case 3183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14134
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[2].str, false)
		}
	case 3184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14138
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[3].str, false)
		}
	case 3185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14142
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, 1, yyDollar[3].str, false)
		}
	case 3186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14146
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_ABSOLUTE, 1, yyDollar[3].str, false)
		}
	case 3187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14150
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_ABSOLUTE, -1, yyDollar[3].str, false)
		}
	case 3188:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14154
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_ABSOLUTE, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14158
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_RELATIVE, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14162
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, int64(yyDollar[1].ival), yyDollar[3].str, false)
		}
	case 3191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14166
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, ast.FETCH_ALL, yyDollar[3].str, false)
		}
	case 3192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14170
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[3].str, false)
		}
	case 3193:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14174
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3194:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14178
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, ast.FETCH_ALL, yyDollar[4].str, false)
		}
	case 3195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14182
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, 1, yyDollar[3].str, false)
		}
	case 3196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14186
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3197:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14190
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, ast.FETCH_ALL, yyDollar[4].str, false)
		}
	case 3198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14195
		{
			yyVAL.ival = 0
		}
	case 3199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14196
		{
			yyVAL.ival = 0
		}
	case 3200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14200
		{
			yyVAL.ival = 0
		}
	case 3201:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14201
		{
			yyVAL.ival = 0
		}
	case 3202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14206
		{
			name := yyDollar[2].str
			yyVAL.stmt = ast.NewClosePortalStmt(&name)
		}
	case 3203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14211
		{
			yyVAL.stmt = ast.NewClosePortalStmt(nil)
		}
	case 3204:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:14223
		{
			yyVAL.stmt = ast.NewPrepareStmt(yyDollar[2].str, yyDollar[3].list, yyDollar[5].stmt)
		}
	case 3205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14230
		{
			yyVAL.list = yyDollar[2].list
		}
	case 3206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14233
		{
			yyVAL.list = nil
		}
	case 3207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14237
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14238
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14239
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14240
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14241
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14245
		{
			yyVAL.stmt = ast.NewExecuteStmt(yyDollar[2].str, yyDollar[3].list)
		}
	case 3213:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14249
		{
			executeStmt := ast.NewExecuteStmt(yyDollar[7].str, yyDollar[8].list)
			ctas := ast.NewCreateTableAsStmt(executeStmt, yyDollar[4].into, ast.OBJECT_TABLE, false, false)
			// Set relpersistence from OptTemp (following PostgreSQL pattern)
			yyDollar[4].into.Rel.RelPersistence = yyDollar[2].rune
			// Set skipData from opt_with_data (following PostgreSQL pattern)
			yyDollar[4].into.SkipData = !yyDollar[9].bval
			yyVAL.stmt = ctas
		}
	case 3214:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:14259
		{
			executeStmt := ast.NewExecuteStmt(yyDollar[10].str, yyDollar[11].list)
			ctas := ast.NewCreateTableAsStmt(executeStmt, yyDollar[7].into, ast.OBJECT_TABLE, false, true)
			// Set relpersistence from OptTemp (following PostgreSQL pattern)
			yyDollar[7].into.Rel.RelPersistence = yyDollar[2].rune
			// Set skipData from opt_with_data (following PostgreSQL pattern)
			yyDollar[7].into.SkipData = !yyDollar[12].bval
			yyVAL.stmt = ctas
		}
	case 3215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14272
		{
			yyVAL.list = yyDollar[2].list
		}
	case 3216:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14275
		{
			yyVAL.list = nil
		}
	case 3217:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14281
		{
			into := ast.NewIntoClause(yyDollar[1].rangevar, yyDollar[2].list, yyDollar[3].str, yyDollar[4].list, yyDollar[5].oncommit, yyDollar[6].str, nil, false, 0)
			yyVAL.into = into
		}
	case 3218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14289
		{
			yyVAL.stmt = ast.NewDeallocateStmt(yyDollar[2].str)
		}
	case 3219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14293
		{
			yyVAL.stmt = ast.NewDeallocateStmt(yyDollar[3].str)
		}
	case 3220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14297
		{
			yyVAL.stmt = ast.NewDeallocateAllStmt()
		}
	case 3221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14301
		{
			yyVAL.stmt = ast.NewDeallocateAllStmt()
		}
	case 3222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14312
		{
			yyVAL.stmt = ast.NewListenStmt(yyDollar[2].str)
		}
	case 3223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14323
		{
			yyVAL.stmt = ast.NewUnlistenStmt(yyDollar[2].str)
		}
	case 3224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14327
		{
			yyVAL.stmt = ast.NewUnlistenAllStmt()
		}
	case 3225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14338
		{
			yyVAL.stmt = ast.NewNotifyStmt(yyDollar[2].str, yyDollar[3].str)
		}
	case 3226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14348
		{
			yyVAL.str = yyDollar[2].str
		}
	case 3227:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14349
		{
			yyVAL.str = ""
		}
	case 3228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14358
		{
			yyVAL.stmt = ast.NewLoadStmt(yyDollar[2].str)
		}
	case 3229:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:14369
		{
			stmt := ast.NewLockStmt(yyDollar[3].list, ast.LockMode(yyDollar[4].ival))
			stmt.Nowait = yyDollar[5].bval
			yyVAL.stmt = stmt
		}
	case 3230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14381
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 3231:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14382
		{
			yyVAL.ival = int(ast.AccessExclusiveLock)
		}
	case 3232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14386
		{
			yyVAL.ival = int(ast.AccessShareLock)
		}
	case 3233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14387
		{
			yyVAL.ival = int(ast.RowShareLock)
		}
	case 3234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14388
		{
			yyVAL.ival = int(ast.RowExclusiveLock)
		}
	case 3235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14389
		{
			yyVAL.ival = int(ast.ShareUpdateExclusiveLock)
		}
	case 3236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14390
		{
			yyVAL.ival = int(ast.ShareLock)
		}
	case 3237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14391
		{
			yyVAL.ival = int(ast.ShareRowExclusiveLock)
		}
	case 3238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14392
		{
			yyVAL.ival = int(ast.ExclusiveLock)
		}
	case 3239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14393
		{
			yyVAL.ival = int(ast.AccessExclusiveLock)
		}
	case 3240:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:14402
		{
			stmt := ast.NewTruncateStmt(yyDollar[3].list)
			stmt.RestartSeqs = yyDollar[4].bval
			stmt.Behavior = yyDollar[5].dropBehav
			yyVAL.stmt = stmt
		}
	case 3241:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14416
		{
			yyVAL.stmt = ast.NewCommentStmt(yyDollar[3].objType, yyDollar[4].list, yyDollar[6].str)
		}
	case 3242:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14420
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_COLUMN, yyDollar[4].list, yyDollar[6].str)
		}
	case 3243:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14424
		{
			yyVAL.stmt = ast.NewCommentStmt(yyDollar[3].objType, ast.NewString(yyDollar[4].str), yyDollar[6].str)
		}
	case 3244:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14428
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_TYPE, yyDollar[4].typnam, yyDollar[6].str)
		}
	case 3245:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14432
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_DOMAIN, yyDollar[4].typnam, yyDollar[6].str)
		}
	case 3246:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14436
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_AGGREGATE, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3247:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14440
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_FUNCTION, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3248:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14444
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_OPERATOR, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3249:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14448
		{
			// For table constraints, append constraint name to table name list
			newObj := yyDollar[6].list
			newObj.Append(ast.NewString(yyDollar[4].str))
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_TABCONSTRAINT, newObj, yyDollar[8].str)
		}
	case 3250:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14455
		{
			// For domain constraints, we need a list of [TypeName, constraint_name]
			// This matches PostgreSQL's approach where they comment:
			// "should use Typename not any_name in the production, but
			// there's a shift/reduce conflict if we do that, so fix it up here."
			objList := ast.NewNodeList()
			objList.Append(makeTypeNameFromNodeList(yyDollar[7].list)) // Convert any_name to TypeName
			objList.Append(ast.NewString(yyDollar[4].str))             // Add constraint name
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_DOMCONSTRAINT, objList, yyDollar[9].str)
		}
	case 3251:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14466
		{
			// For object types that need name ON any_name: append name to any_name list
			newObj := yyDollar[6].list
			newObj.Append(ast.NewString(yyDollar[4].str))
			yyVAL.stmt = ast.NewCommentStmt(yyDollar[3].objType, newObj, yyDollar[8].str)
		}
	case 3252:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14473
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_PROCEDURE, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3253:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14477
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_ROUTINE, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3254:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14481
		{
			// Transform: typename + language name
			transformObj := ast.NewNodeList()
			transformObj.Append(yyDollar[5].typnam)             // Typename
			transformObj.Append(ast.NewString(yyDollar[7].str)) // Language name
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_TRANSFORM, transformObj, yyDollar[9].str)
		}
	case 3255:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14489
		{
			// Operator class: access method + class name
			opclassObj := ast.NewNodeList()
			opclassObj.Append(ast.NewString(yyDollar[7].str)) // Access method name first
			for _, item := range yyDollar[5].list.Items {
				opclassObj.Append(item) // Class name parts
			}
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_OPCLASS, opclassObj, yyDollar[9].str)
		}
	case 3256:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14499
		{
			// Operator family: access method + family name
			opfamilyObj := ast.NewNodeList()
			opfamilyObj.Append(ast.NewString(yyDollar[7].str)) // Access method name first
			for _, item := range yyDollar[5].list.Items {
				opfamilyObj.Append(item) // Family name parts
			}
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_OPFAMILY, opfamilyObj, yyDollar[9].str)
		}
	case 3257:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14509
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_LARGEOBJECT, yyDollar[5].node, yyDollar[7].str)
		}
	case 3258:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:14513
		{
			// Cast: source type + target type
			castObj := ast.NewNodeList()
			castObj.Append(yyDollar[5].typnam) // Source typename
			castObj.Append(yyDollar[7].typnam) // Target typename
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_CAST, castObj, yyDollar[10].str)
		}
	case 3259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14527
		{
			yyVAL.str = yyDollar[1].str
		}
	case 3260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14528
		{
			yyVAL.str = ""
		}
	case 3261:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14537
		{
			yyVAL.stmt = ast.NewSecLabelStmt(yyDollar[5].objType, yyDollar[6].list, yyDollar[3].str, yyDollar[8].str)
		}
	case 3262:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14541
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_COLUMN, yyDollar[6].list, yyDollar[3].str, yyDollar[8].str)
		}
	case 3263:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14545
		{
			yyVAL.stmt = ast.NewSecLabelStmt(yyDollar[5].objType, ast.NewString(yyDollar[6].str), yyDollar[3].str, yyDollar[8].str)
		}
	case 3264:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14549
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_TYPE, yyDollar[6].typnam, yyDollar[3].str, yyDollar[8].str)
		}
	case 3265:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14553
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_DOMAIN, yyDollar[6].typnam, yyDollar[3].str, yyDollar[8].str)
		}
	case 3266:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14557
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_AGGREGATE, yyDollar[6].objwithargs, yyDollar[3].str, yyDollar[8].str)
		}
	case 3267:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14561
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_FUNCTION, yyDollar[6].objwithargs, yyDollar[3].str, yyDollar[8].str)
		}
	case 3268:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14565
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_LARGEOBJECT, yyDollar[7].node, yyDollar[3].str, yyDollar[9].str)
		}
	case 3269:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14569
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_PROCEDURE, yyDollar[6].objwithargs, yyDollar[3].str, yyDollar[8].str)
		}
	case 3270:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14573
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_ROUTINE, yyDollar[6].objwithargs, yyDollar[3].str, yyDollar[8].str)
		}
	case 3271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14583
		{
			yyVAL.str = yyDollar[2].str
		}
	case 3272:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14584
		{
			yyVAL.str = ""
		}
	case 3273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14588
		{
			yyVAL.str = yyDollar[1].str
		}
	case 3274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14589
		{
			yyVAL.str = ""
		}
	case 3275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14598
		{
			yyVAL.stmt = ast.NewDoStmt(yyDollar[2].list)
		}
	case 3276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14608
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14609
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Append(yyDollar[2].defelt)
		}
	case 3278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14614
		{
			yyVAL.defelt = ast.NewDefElem("as", ast.NewString(yyDollar[1].str))
		}
	case 3279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14618
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 3280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14629
		{
			yyVAL.stmt = ast.NewCallStmt(yyDollar[2].node.(*ast.FuncCall))
		}
	case 3281:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14642
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_AGGREGATE, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3282:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14649
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_COLLATION, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3283:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14656
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_CONVERSION, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3284:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14663
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_DOMAIN, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3285:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14670
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_EXTENSION, yyDollar[6].str)
			stmt.Object = ast.NewString(yyDollar[3].str)
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3286:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14677
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_FUNCTION, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3287:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14684
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_OPERATOR, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3288:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14691
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_OPCLASS, yyDollar[9].str)
			// Create list with access method name first, then class name
			objList := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				objList.Append(item)
			}
			stmt.Object = objList
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3289:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14703
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_OPFAMILY, yyDollar[9].str)
			// Create list with access method name first, then family name
			objList := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				objList.Append(item)
			}
			stmt.Object = objList
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3290:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14715
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_PROCEDURE, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3291:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14722
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_ROUTINE, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3292:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14729
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TABLE, yyDollar[6].str)
			stmt.Relation = yyDollar[3].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3293:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14736
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TABLE, yyDollar[8].str)
			stmt.Relation = yyDollar[5].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3294:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14743
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_STATISTIC_EXT, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3295:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14750
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TSPARSER, yyDollar[8].str)
			stmt.Object = yyDollar[5].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3296:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14757
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TSDICTIONARY, yyDollar[8].str)
			stmt.Object = yyDollar[5].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3297:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14764
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TSTEMPLATE, yyDollar[8].str)
			stmt.Object = yyDollar[5].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3298:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14771
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TSCONFIGURATION, yyDollar[8].str)
			stmt.Object = yyDollar[5].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3299:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14778
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_SEQUENCE, yyDollar[6].str)
			stmt.Relation = yyDollar[3].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3300:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14785
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_SEQUENCE, yyDollar[8].str)
			stmt.Relation = yyDollar[5].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3301:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14792
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_VIEW, yyDollar[6].str)
			stmt.Relation = yyDollar[3].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3302:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14799
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_VIEW, yyDollar[8].str)
			stmt.Relation = yyDollar[5].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3303:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14806
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_MATVIEW, yyDollar[7].str)
			stmt.Relation = yyDollar[4].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3304:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14813
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_MATVIEW, yyDollar[9].str)
			stmt.Relation = yyDollar[6].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3305:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14820
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_FOREIGN_TABLE, yyDollar[7].str)
			stmt.Relation = yyDollar[4].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3306:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14827
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_FOREIGN_TABLE, yyDollar[9].str)
			stmt.Relation = yyDollar[6].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3307:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14834
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TYPE, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3308:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14850
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3309:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14859
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3310:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14868
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3311:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14877
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_DATABASE,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3312:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14886
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3313:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14895
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3314:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14904
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newowner:   yyDollar[7].rolespec,
			}
		}
	case 3315:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14913
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_LARGEOBJECT,
				Object:     yyDollar[4].node,
				Newowner:   yyDollar[7].rolespec,
			}
		}
	case 3316:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14922
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_OPERATOR,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3317:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14931
		{
			list := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newowner:   yyDollar[9].rolespec,
			}
		}
	case 3318:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14944
		{
			list := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newowner:   yyDollar[9].rolespec,
			}
		}
	case 3319:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14957
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3320:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14966
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3321:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14975
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_SCHEMA,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3322:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14984
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3323:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14993
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_TABLESPACE,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3324:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15002
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3325:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15011
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newowner:   yyDollar[8].rolespec,
			}
		}
	case 3326:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15020
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newowner:   yyDollar[8].rolespec,
			}
		}
	case 3327:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15029
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newowner:   yyDollar[8].rolespec,
			}
		}
	case 3328:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15038
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3329:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:15047
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newowner:   yyDollar[7].rolespec,
			}
		}
	case 3330:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15056
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3331:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15065
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3332:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:15083
		{
			yyVAL.stmt = ast.NewAlterOperatorStmt(yyDollar[3].objwithargs, yyDollar[6].list)
		}
	case 3333:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15096
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_FUNCTION, ast.NewString(yyDollar[8].str), yyDollar[4].bval)
			stmt.Object = yyDollar[3].objwithargs
			yyVAL.stmt = stmt
		}
	case 3334:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15102
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_PROCEDURE, ast.NewString(yyDollar[8].str), yyDollar[4].bval)
			stmt.Object = yyDollar[3].objwithargs
			yyVAL.stmt = stmt
		}
	case 3335:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15108
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_ROUTINE, ast.NewString(yyDollar[8].str), yyDollar[4].bval)
			stmt.Object = yyDollar[3].objwithargs
			yyVAL.stmt = stmt
		}
	case 3336:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:15114
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_TRIGGER, ast.NewString(yyDollar[10].str), yyDollar[6].bval)
			stmt.Relation = yyDollar[5].rangevar
			stmt.Object = ast.NewString(yyDollar[3].str)
			yyVAL.stmt = stmt
		}
	case 3337:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:15121
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_MATVIEW, ast.NewString(yyDollar[9].str), yyDollar[5].bval)
			stmt.Relation = yyDollar[4].rangevar
			yyVAL.stmt = stmt
		}
	case 3338:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15127
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_INDEX, ast.NewString(yyDollar[8].str), yyDollar[4].bval)
			stmt.Relation = yyDollar[3].rangevar
			yyVAL.stmt = stmt
		}
	case 3339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15134
		{
			yyVAL.bval = true
		}
	case 3340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:15135
		{
			yyVAL.bval = false
		}
	case 3341:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:15146
		{
			yyVAL.stmt = ast.NewAlterCollationStmt(yyDollar[3].list)
		}
	case 3342:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:15159
		{
			yyVAL.stmt = ast.NewAlterDatabaseStmt(yyDollar[3].str, yyDollar[5].list)
		}
	case 3343:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:15163
		{
			yyVAL.stmt = ast.NewAlterDatabaseStmt(yyDollar[3].str, yyDollar[4].list)
		}
	case 3344:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15167
		{
			optList := ast.NewNodeList()
			optList.Append(ast.NewDefElem("tablespace", ast.NewString(yyDollar[6].str)))
			yyVAL.stmt = ast.NewAlterDatabaseStmt(yyDollar[3].str, optList)
		}
	case 3345:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15173
		{
			yyVAL.stmt = ast.NewAlterDatabaseRefreshCollStmt(yyDollar[3].str)
		}
	case 3346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15179
		{
			yyVAL.list = yyDollar[1].list
		}
	case 3347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:15180
		{
			yyVAL.list = nil
		}
	case 3348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15184
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:15185
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:15190
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, ast.NewInteger(yyDollar[3].ival))
		}
	case 3351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:15194
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, ast.NewString(yyDollar[3].str))
		}
	case 3352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:15198
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 3353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15204
		{
			yyVAL.str = yyDollar[1].str
		}
	case 3354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:15205
		{
			yyVAL.str = "connection_limit"
		}
	case 3355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15206
		{
			yyVAL.str = "encoding"
		}
	case 3356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15207
		{
			yyVAL.str = "location"
		}
	case 3357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15208
		{
			yyVAL.str = "owner"
		}
	case 3358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15209
		{
			yyVAL.str = "tablespace"
		}
	case 3359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15210
		{
			yyVAL.str = "template"
		}
	case 3360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15213
		{
		}
	case 3361:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:15214
		{
		}
	case 3362:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:15219
		{
			yyVAL.stmt = ast.NewAlterDatabaseSetStmt(yyDollar[3].str, yyDollar[4].vsetstmt)
		}
	case 3363:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:15232
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_ADD_MAPPING, yyDollar[5].list)
			stmt.Tokentype = yyDollar[9].list
			stmt.Dicts = yyDollar[11].list
			stmt.Override = false
			stmt.Replace = false
			yyVAL.stmt = stmt
		}
	case 3364:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:15241
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN, yyDollar[5].list)
			stmt.Tokentype = yyDollar[9].list
			stmt.Dicts = yyDollar[11].list
			stmt.Override = true
			stmt.Replace = false
			yyVAL.stmt = stmt
		}
	case 3365:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:15250
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_REPLACE_DICT, yyDollar[5].list)
			stmt.Tokentype = nil
			// Create a list with two elements: old dict and new dict
			stmt.Dicts = ast.NewNodeList()
			stmt.Dicts.Append(yyDollar[9].list)
			stmt.Dicts.Append(yyDollar[11].list)
			stmt.Override = false
			stmt.Replace = true
			yyVAL.stmt = stmt
		}
	case 3366:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:15262
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN, yyDollar[5].list)
			stmt.Tokentype = yyDollar[9].list
			// Create a list with two elements: old dict and new dict
			stmt.Dicts = ast.NewNodeList()
			stmt.Dicts.Append(yyDollar[11].list)
			stmt.Dicts.Append(yyDollar[13].list)
			stmt.Override = false
			stmt.Replace = true
			yyVAL.stmt = stmt
		}
	case 3367:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:15274
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_DROP_MAPPING, yyDollar[5].list)
			stmt.Tokentype = yyDollar[9].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3368:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:15281
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_DROP_MAPPING, yyDollar[5].list)
			stmt.Tokentype = yyDollar[11].list
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3371:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15302
		{
			yyVAL.stmt = ast.NewAlterTSDictionaryStmt(yyDollar[5].list, yyDollar[6].list)
		}
	case 3372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:15312
		{
			yyVAL.bval = false
		}
	case 3373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:15313
		{
			yyVAL.bval = true
		}
	case 3374:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:15314
		{
			yyVAL.bval = false
		}
	}
	goto yystack /* stack new state and value */
}
