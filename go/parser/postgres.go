// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
)

// Parser state for handling complex grammar constructs
var parserState struct {
	// Future parser state variables can be added here
}

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:34
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string
	bval    bool
	byt     byte
	rune    rune

	// AST nodes
	node     ast.Node
	stmt     ast.Stmt
	stmtList []ast.Stmt
	list     *ast.NodeList

	// Specific AST node types
	into          *ast.IntoClause
	onconflict    *ast.OnConflictClause
	createStmt    *ast.CreateStmt
	indexStmt     *ast.IndexStmt
	alterStmt     *ast.AlterTableStmt
	dropStmt      *ast.DropStmt
	columnDef     *ast.ColumnDef
	constraint    *ast.Constraint
	indexElem     *ast.IndexElem
	alterCmd      *ast.AlterTableCmd
	with          *ast.WithClause
	rangevar      *ast.RangeVar
	objType       ast.ObjectType
	dropBehav     ast.DropBehavior
	typnam        *ast.TypeName
	partspec      *ast.PartitionSpec
	partboundspec *ast.PartitionBoundSpec
	oncommit      ast.OnCommitAction
	defelt        *ast.DefElem
	target        *ast.ResTarget            // For select targets, insert columns
	alias         *ast.Alias                // For table and column aliases
	jtype         ast.JoinType              // For join type specifications
	jexpr         *ast.JoinExpr             // For joined table expressions
	keyaction     *ast.KeyAction            // For foreign key actions
	keyactions    *ast.KeyActions           // For foreign key action sets
	funparam      *ast.FunctionParameter    // For function parameters
	funparammode  ast.FunctionParameterMode // For parameter modes (IN/OUT/INOUT/VARIADIC)
	vsetstmt      *ast.VariableSetStmt      // For SET/RESET statements

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const UNKNOWN = 57392
const WHEN = 57393
const IS = 57394
const ISNULL = 57395
const NOTNULL = 57396
const AT = 57397
const TIME = 57398
const ZONE = 57399
const LOCAL = 57400
const SYMMETRIC = 57401
const ASYMMETRIC = 57402
const TO = 57403
const OPERATOR = 57404
const SELECT = 57405
const FROM = 57406
const WHERE = 57407
const ONLY = 57408
const TABLE = 57409
const LIMIT = 57410
const OFFSET = 57411
const ORDER_P = 57412
const BY = 57413
const GROUP_P = 57414
const HAVING = 57415
const INTO = 57416
const ON = 57417
const JOIN = 57418
const INNER_P = 57419
const LEFT = 57420
const RIGHT = 57421
const FULL = 57422
const OUTER_P = 57423
const CROSS = 57424
const NATURAL = 57425
const USING = 57426
const RECURSIVE = 57427
const MATERIALIZED = 57428
const LATERAL = 57429
const VALUES = 57430
const SEARCH = 57431
const BREADTH = 57432
const DEPTH = 57433
const CYCLE = 57434
const FIRST_P = 57435
const LAST_P = 57436
const SET = 57437
const ASC = 57438
const DESC = 57439
const INSERT = 57440
const UPDATE = 57441
const DELETE_P = 57442
const MERGE = 57443
const RETURNING = 57444
const CONFLICT = 57445
const OVERRIDING = 57446
const USER = 57447
const SYSTEM_P = 57448
const MATCHED = 57449
const THEN = 57450
const SOURCE = 57451
const TARGET = 57452
const DO = 57453
const NOTHING = 57454
const COPY = 57455
const PROGRAM = 57456
const STDIN = 57457
const STDOUT = 57458
const BINARY = 57459
const FREEZE = 57460
const CONSTRAINT = 57461
const VERBOSE = 57462
const ANALYZE = 57463
const CURRENT_P = 57464
const CURSOR = 57465
const OF = 57466
const COLUMNS = 57467
const ORDINALITY = 57468
const XMLTABLE = 57469
const JSON_TABLE = 57470
const ROWS = 57471
const PATH = 57472
const PASSING = 57473
const FOR = 57474
const NESTED = 57475
const REF_P = 57476
const XMLNAMESPACES = 57477
const ARRAY = 57478
const ERROR = 57479
const ERROR_P = 57480
const EMPTY = 57481
const EMPTY_P = 57482
const OBJECT_P = 57483
const WRAPPER = 57484
const CONDITIONAL = 57485
const UNCONDITIONAL = 57486
const QUOTES = 57487
const OMIT = 57488
const KEEP = 57489
const SCALAR = 57490
const STRING_P = 57491
const ENCODING = 57492
const DELIMITER = 57493
const DELIMITERS = 57494
const HEADER_P = 57495
const QUOTE = 57496
const FORCE = 57497
const CSV = 57498
const VALUE_P = 57499
const JSON_QUERY = 57500
const JSON_VALUE = 57501
const JSON_SERIALIZE = 57502
const JSON_OBJECT = 57503
const JSON_ARRAY = 57504
const JSON_OBJECTAGG = 57505
const JSON_ARRAYAGG = 57506
const JSON_EXISTS = 57507
const JSON_SCALAR = 57508
const FORMAT = 57509
const JSON = 57510
const UTF8 = 57511
const WITHOUT = 57512
const BIT = 57513
const NUMERIC = 57514
const INTEGER = 57515
const SMALLINT = 57516
const BIGINT = 57517
const REAL = 57518
const FLOAT_P = 57519
const DOUBLE_P = 57520
const PRECISION = 57521
const CHARACTER = 57522
const CHAR_P = 57523
const VARCHAR = 57524
const NATIONAL = 57525
const NCHAR = 57526
const VARYING = 57527
const TIMESTAMP = 57528
const INTERVAL = 57529
const INT_P = 57530
const DECIMAL_P = 57531
const DEC = 57532
const BOOLEAN_P = 57533
const VARIADIC = 57534
const ABORT_P = 57535
const ABSENT = 57536
const ABSOLUTE_P = 57537
const ACCESS = 57538
const ACTION = 57539
const ADD_P = 57540
const ADMIN = 57541
const AFTER = 57542
const AGGREGATE = 57543
const ALSO = 57544
const ALWAYS = 57545
const ANALYSE = 57546
const ASENSITIVE = 57547
const ASSERTION = 57548
const ASSIGNMENT = 57549
const ATOMIC = 57550
const ATTACH = 57551
const ATTRIBUTE = 57552
const AUTHORIZATION = 57553
const BACKWARD = 57554
const BEFORE = 57555
const BEGIN_P = 57556
const CACHE = 57557
const CALL = 57558
const CALLED = 57559
const CASCADED = 57560
const CATALOG_P = 57561
const CHAIN = 57562
const CHARACTERISTICS = 57563
const CHECKPOINT = 57564
const CLASS = 57565
const CLOSE = 57566
const CLUSTER = 57567
const COALESCE = 57568
const COLLATION = 57569
const COMMENT = 57570
const COMMENTS = 57571
const COMMIT = 57572
const COMMITTED = 57573
const COMPRESSION = 57574
const CONFIGURATION = 57575
const CONNECTION = 57576
const CONSTRAINTS = 57577
const CONTENT_P = 57578
const CONTINUE_P = 57579
const CONVERSION_P = 57580
const COST = 57581
const CUBE = 57582
const CURRENT_CATALOG = 57583
const CURRENT_DATE = 57584
const CURRENT_ROLE = 57585
const CURRENT_SCHEMA = 57586
const CURRENT_TIME = 57587
const CURRENT_TIMESTAMP = 57588
const CURRENT_USER = 57589
const DATA_P = 57590
const DATABASE = 57591
const DAY_P = 57592
const DEALLOCATE = 57593
const DECLARE = 57594
const DEFAULTS = 57595
const DEFERRABLE = 57596
const DEFERRED = 57597
const DEFINER = 57598
const DEPENDS = 57599
const DETACH = 57600
const DICTIONARY = 57601
const DISABLE_P = 57602
const DISCARD = 57603
const DOCUMENT_P = 57604
const DOMAIN_P = 57605
const EACH = 57606
const ELSE = 57607
const ENABLE_P = 57608
const ENCRYPTED = 57609
const END_P = 57610
const ENUM_P = 57611
const EVENT = 57612
const EXCEPT = 57613
const EXCLUDE = 57614
const EXCLUDING = 57615
const EXCLUSIVE = 57616
const EXECUTE = 57617
const EXPLAIN = 57618
const EXPRESSION = 57619
const EXTENSION = 57620
const EXTERNAL = 57621
const EXTRACT = 57622
const FAMILY = 57623
const FETCH = 57624
const FILTER = 57625
const FINALIZE = 57626
const FOLLOWING = 57627
const FOREIGN = 57628
const FORWARD = 57629
const FUNCTION = 57630
const FUNCTIONS = 57631
const GENERATED = 57632
const GLOBAL = 57633
const GRANT = 57634
const GRANTED = 57635
const GREATEST = 57636
const GROUPING = 57637
const GROUPS = 57638
const HANDLER = 57639
const HOLD = 57640
const HOUR_P = 57641
const IDENTITY_P = 57642
const IMMEDIATE = 57643
const IMMUTABLE = 57644
const IMPLICIT_P = 57645
const IMPORT_P = 57646
const INCLUDE = 57647
const INCLUDING = 57648
const INCREMENT = 57649
const INDENT = 57650
const INDEX = 57651
const INDEXES = 57652
const INHERIT = 57653
const INHERITS = 57654
const INITIALLY = 57655
const INLINE_P = 57656
const INPUT_P = 57657
const INSENSITIVE = 57658
const INSTEAD = 57659
const INTERSECT = 57660
const INVOKER = 57661
const ISOLATION = 57662
const KEYS = 57663
const LABEL = 57664
const LANGUAGE = 57665
const LARGE_P = 57666
const LATERAL_P = 57667
const LEAKPROOF = 57668
const LEAST = 57669
const LEADING = 57670
const LEVEL = 57671
const LISTEN = 57672
const LOAD = 57673
const LOCALTIME = 57674
const LOCALTIMESTAMP = 57675
const LOCATION = 57676
const LOCK_P = 57677
const LOCKED = 57678
const LOGGED = 57679
const MAPPING = 57680
const MATCH = 57681
const MAXVALUE = 57682
const MERGE_ACTION = 57683
const METHOD = 57684
const MINUTE_P = 57685
const MINVALUE = 57686
const MODE = 57687
const MONTH_P = 57688
const MOVE = 57689
const NAME_P = 57690
const NAMES = 57691
const NEW = 57692
const NEXT = 57693
const NFC = 57694
const NFD = 57695
const NFKC = 57696
const NFKD = 57697
const NO = 57698
const NONE = 57699
const NORMALIZE = 57700
const NORMALIZED = 57701
const NOTIFY = 57702
const NOWAIT = 57703
const NULLIF = 57704
const OUT_P = 57705
const OVERLAY = 57706
const OVERLAPS = 57707
const OWNED = 57708
const OWNER = 57709
const PARALLEL = 57710
const PARAMETER = 57711
const PARSER = 57712
const PARTIAL = 57713
const PARTITION = 57714
const PASSWORD = 57715
const PLACING = 57716
const PLAN = 57717
const PLANS = 57718
const POLICY = 57719
const POSITION = 57720
const PRECEDING = 57721
const PREPARE = 57722
const PREPARED = 57723
const PRESERVE = 57724
const PRIMARY = 57725
const PRIOR = 57726
const PRIVILEGES = 57727
const PROCEDURAL = 57728
const PROCEDURE = 57729
const PROCEDURES = 57730
const PUBLICATION = 57731
const RANGE = 57732
const READ = 57733
const REASSIGN = 57734
const RECHECK = 57735
const REFERENCES = 57736
const REFERENCING = 57737
const REFRESH = 57738
const REINDEX = 57739
const RELATIVE_P = 57740
const RELEASE = 57741
const RENAME = 57742
const REPEATABLE = 57743
const REPLICA = 57744
const RESET = 57745
const RESTART = 57746
const RETURN = 57747
const RETURNS = 57748
const REVOKE = 57749
const ROLE = 57750
const ROLLBACK = 57751
const ROLLUP = 57752
const ROUTINE = 57753
const ROUTINES = 57754
const ROW = 57755
const RULE = 57756
const SAVEPOINT = 57757
const SCHEMA = 57758
const SCHEMAS = 57759
const SCROLL = 57760
const SECOND_P = 57761
const SECURITY = 57762
const SEQUENCE = 57763
const SEQUENCES = 57764
const SERIALIZABLE = 57765
const SERVER = 57766
const SESSION = 57767
const SESSION_USER = 57768
const SETS = 57769
const SETOF = 57770
const SHARE = 57771
const SHOW = 57772
const SIMPLE = 57773
const SKIP = 57774
const SNAPSHOT = 57775
const SOME = 57776
const SQL_P = 57777
const STABLE = 57778
const STANDALONE_P = 57779
const START = 57780
const STATEMENT = 57781
const STATISTICS = 57782
const STORAGE = 57783
const STORED = 57784
const STRICT_P = 57785
const STRIP_P = 57786
const SUBSCRIPTION = 57787
const SUBSTRING = 57788
const SUPPORT = 57789
const SYSID = 57790
const SYSTEM_USER = 57791
const TABLES = 57792
const TABLESPACE = 57793
const TABLESAMPLE = 57794
const TEMP = 57795
const TEMPLATE = 57796
const TEMPORARY = 57797
const TEXT_P = 57798
const TIES = 57799
const TRAILING = 57800
const TRANSACTION = 57801
const TRANSFORM = 57802
const TREAT = 57803
const TRIGGER = 57804
const TRIM = 57805
const TRUNCATE = 57806
const TRUSTED = 57807
const TYPE_P = 57808
const TYPES_P = 57809
const UESCAPE = 57810
const UNBOUNDED = 57811
const UNCOMMITTED = 57812
const UNENCRYPTED = 57813
const UNION = 57814
const UNIQUE = 57815
const UNLISTEN = 57816
const UNLOGGED = 57817
const UNTIL = 57818
const VACUUM = 57819
const VALID = 57820
const VALIDATE = 57821
const VALIDATOR = 57822
const VERSION_P = 57823
const VIEW = 57824
const VIEWS = 57825
const VOLATILE = 57826
const WHITESPACE_P = 57827
const WINDOW = 57828
const WITHIN = 57829
const WORK = 57830
const WRITE = 57831
const XML_P = 57832
const XMLATTRIBUTES = 57833
const XMLCONCAT = 57834
const XMLELEMENT = 57835
const XMLEXISTS = 57836
const XMLFOREST = 57837
const XMLPARSE = 57838
const XMLPI = 57839
const XMLROOT = 57840
const XMLSERIALIZE = 57841
const YEAR_P = 57842
const YES_P = 57843
const INOUT = 57844
const OTHERS = 57845
const OLD = 57846
const KEY = 57847
const OFF = 57848
const OIDS = 57849
const OPTION = 57850
const OPTIONS = 57851
const OVER = 57852
const ORDER = 57853
const ANY = 57854
const BOTH = 57855
const CAST = 57856
const CHECK = 57857
const COLUMN = 57858
const FORMAT_LA = 57859
const NOT_LA = 57860
const NULLS_LA = 57861
const WITH_LA = 57862
const WITHOUT_LA = 57863
const MODE_TYPE_NAME = 57864
const MODE_PLPGSQL_EXPR = 57865
const MODE_PLPGSQL_ASSIGN1 = 57866
const MODE_PLPGSQL_ASSIGN2 = 57867
const MODE_PLPGSQL_ASSIGN3 = 57868
const UMINUS = 57869

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"UNKNOWN",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"ORDER_P",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"JOIN",
	"INNER_P",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER_P",
	"CROSS",
	"NATURAL",
	"USING",
	"RECURSIVE",
	"MATERIALIZED",
	"LATERAL",
	"VALUES",
	"SEARCH",
	"BREADTH",
	"DEPTH",
	"CYCLE",
	"FIRST_P",
	"LAST_P",
	"SET",
	"ASC",
	"DESC",
	"INSERT",
	"UPDATE",
	"DELETE_P",
	"MERGE",
	"RETURNING",
	"CONFLICT",
	"OVERRIDING",
	"USER",
	"SYSTEM_P",
	"MATCHED",
	"THEN",
	"SOURCE",
	"TARGET",
	"DO",
	"NOTHING",
	"COPY",
	"PROGRAM",
	"STDIN",
	"STDOUT",
	"BINARY",
	"FREEZE",
	"CONSTRAINT",
	"VERBOSE",
	"ANALYZE",
	"CURRENT_P",
	"CURSOR",
	"OF",
	"COLUMNS",
	"ORDINALITY",
	"XMLTABLE",
	"JSON_TABLE",
	"ROWS",
	"PATH",
	"PASSING",
	"FOR",
	"NESTED",
	"REF_P",
	"XMLNAMESPACES",
	"ARRAY",
	"ERROR",
	"ERROR_P",
	"EMPTY",
	"EMPTY_P",
	"OBJECT_P",
	"WRAPPER",
	"CONDITIONAL",
	"UNCONDITIONAL",
	"QUOTES",
	"OMIT",
	"KEEP",
	"SCALAR",
	"STRING_P",
	"ENCODING",
	"DELIMITER",
	"DELIMITERS",
	"HEADER_P",
	"QUOTE",
	"FORCE",
	"CSV",
	"VALUE_P",
	"JSON_QUERY",
	"JSON_VALUE",
	"JSON_SERIALIZE",
	"JSON_OBJECT",
	"JSON_ARRAY",
	"JSON_OBJECTAGG",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_SCALAR",
	"FORMAT",
	"JSON",
	"UTF8",
	"WITHOUT",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"ABORT_P",
	"ABSENT",
	"ABSOLUTE_P",
	"ACCESS",
	"ACTION",
	"ADD_P",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALSO",
	"ALWAYS",
	"ANALYSE",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"BACKWARD",
	"BEFORE",
	"BEGIN_P",
	"CACHE",
	"CALL",
	"CALLED",
	"CASCADED",
	"CATALOG_P",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATION",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPRESSION",
	"CONFIGURATION",
	"CONNECTION",
	"CONSTRAINTS",
	"CONTENT_P",
	"CONTINUE_P",
	"CONVERSION_P",
	"COST",
	"CUBE",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"DATA_P",
	"DATABASE",
	"DAY_P",
	"DEALLOCATE",
	"DECLARE",
	"DEFAULTS",
	"DEFERRABLE",
	"DEFERRED",
	"DEFINER",
	"DEPENDS",
	"DETACH",
	"DICTIONARY",
	"DISABLE_P",
	"DISCARD",
	"DOCUMENT_P",
	"DOMAIN_P",
	"EACH",
	"ELSE",
	"ENABLE_P",
	"ENCRYPTED",
	"END_P",
	"ENUM_P",
	"EVENT",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXCLUSIVE",
	"EXECUTE",
	"EXPLAIN",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"EXTRACT",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FINALIZE",
	"FOLLOWING",
	"FOREIGN",
	"FORWARD",
	"FUNCTION",
	"FUNCTIONS",
	"GENERATED",
	"GLOBAL",
	"GRANT",
	"GRANTED",
	"GREATEST",
	"GROUPING",
	"GROUPS",
	"HANDLER",
	"HOLD",
	"HOUR_P",
	"IDENTITY_P",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT_P",
	"IMPORT_P",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INDEX",
	"INDEXES",
	"INHERIT",
	"INHERITS",
	"INITIALLY",
	"INLINE_P",
	"INPUT_P",
	"INSENSITIVE",
	"INSTEAD",
	"INTERSECT",
	"INVOKER",
	"ISOLATION",
	"KEYS",
	"LABEL",
	"LANGUAGE",
	"LARGE_P",
	"LATERAL_P",
	"LEAKPROOF",
	"LEAST",
	"LEADING",
	"LEVEL",
	"LISTEN",
	"LOAD",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCATION",
	"LOCK_P",
	"LOCKED",
	"LOGGED",
	"MAPPING",
	"MATCH",
	"MAXVALUE",
	"MERGE_ACTION",
	"METHOD",
	"MINUTE_P",
	"MINVALUE",
	"MODE",
	"MONTH_P",
	"MOVE",
	"NAME_P",
	"NAMES",
	"NEW",
	"NEXT",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NO",
	"NONE",
	"NORMALIZE",
	"NORMALIZED",
	"NOTIFY",
	"NOWAIT",
	"NULLIF",
	"OUT_P",
	"OVERLAY",
	"OVERLAPS",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PARSER",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECEDING",
	"PREPARE",
	"PREPARED",
	"PRESERVE",
	"PRIMARY",
	"PRIOR",
	"PRIVILEGES",
	"PROCEDURAL",
	"PROCEDURE",
	"PROCEDURES",
	"PUBLICATION",
	"RANGE",
	"READ",
	"REASSIGN",
	"RECHECK",
	"REFERENCES",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE_P",
	"RELEASE",
	"RENAME",
	"REPEATABLE",
	"REPLICA",
	"RESET",
	"RESTART",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLE",
	"ROLLBACK",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"RULE",
	"SAVEPOINT",
	"SCHEMA",
	"SCHEMAS",
	"SCROLL",
	"SECOND_P",
	"SECURITY",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSION_USER",
	"SETS",
	"SETOF",
	"SHARE",
	"SHOW",
	"SIMPLE",
	"SKIP",
	"SNAPSHOT",
	"SOME",
	"SQL_P",
	"STABLE",
	"STANDALONE_P",
	"START",
	"STATEMENT",
	"STATISTICS",
	"STORAGE",
	"STORED",
	"STRICT_P",
	"STRIP_P",
	"SUBSCRIPTION",
	"SUBSTRING",
	"SUPPORT",
	"SYSID",
	"SYSTEM_USER",
	"TABLES",
	"TABLESPACE",
	"TABLESAMPLE",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TEXT_P",
	"TIES",
	"TRAILING",
	"TRANSACTION",
	"TRANSFORM",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUNCATE",
	"TRUSTED",
	"TYPE_P",
	"TYPES_P",
	"UESCAPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNENCRYPTED",
	"UNION",
	"UNIQUE",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VERSION_P",
	"VIEW",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE_P",
	"WINDOW",
	"WITHIN",
	"WORK",
	"WRITE",
	"XML_P",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"YEAR_P",
	"YES_P",
	"INOUT",
	"OTHERS",
	"OLD",
	"KEY",
	"OFF",
	"OIDS",
	"OPTION",
	"OPTIONS",
	"OVER",
	"ORDER",
	"ANY",
	"BOTH",
	"CAST",
	"CHECK",
	"COLUMN",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"'<'",
	"'>'",
	"'='",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"';'",
	"','",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:8651

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

// processConstraintAttributeSpec processes constraint attribute specification bitmask
// This is a simplified version of processCASbits from PostgreSQL
func processConstraintAttributeSpec(casbits int, constraint *ast.Constraint) {
	if casbits&ast.CAS_DEFERRABLE != 0 {
		constraint.Deferrable = true
	} else if casbits&ast.CAS_NOT_DEFERRABLE != 0 {
		constraint.Deferrable = false
	}

	if casbits&ast.CAS_INITIALLY_DEFERRED != 0 {
		constraint.Initdeferred = true
	} else if casbits&ast.CAS_INITIALLY_IMMEDIATE != 0 {
		constraint.Initdeferred = false
	}

	if casbits&ast.CAS_NOT_VALID != 0 {
		constraint.SkipValidation = true
		constraint.InitiallyValid = false
	} else {
		constraint.SkipValidation = false
		constraint.InitiallyValid = true
	}

	if casbits&ast.CAS_NO_INHERIT != 0 {
		constraint.IsNoInherit = true
	}
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 21,
	542, 21,
	-2, 1292,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 25,
	67, 1600,
	85, 1600,
	309, 1767,
	482, 1600,
	-2, 34,
	-1, 39,
	1, 21,
	542, 21,
	-2, 1292,
	-1, 124,
	61, 239,
	64, 239,
	529, 239,
	535, 239,
	-2, 2143,
	-1, 566,
	85, 1600,
	482, 1600,
	-2, 33,
	-1, 588,
	16, 1157,
	17, 1157,
	533, 1157,
	-2, 40,
	-1, 589,
	16, 1158,
	17, 1158,
	533, 1158,
	-2, 41,
	-1, 1005,
	1, 597,
	36, 597,
	64, 597,
	65, 597,
	74, 597,
	75, 597,
	102, 597,
	534, 597,
	542, 597,
	543, 597,
	-2, 1228,
	-1, 1470,
	533, 1121,
	-2, 1107,
	-1, 1643,
	533, 1769,
	-2, 163,
	-1, 1773,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1029,
	-1, 1774,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1030,
	-1, 1775,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1031,
	-1, 1776,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1032,
	-1, 1777,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1033,
	-1, 1778,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1034,
	-1, 1783,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1042,
	-1, 1789,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1046,
	-1, 1841,
	533, 1120,
	-2, 1161,
	-1, 1944,
	40, 1165,
	529, 1165,
	534, 1165,
	543, 1165,
	-2, 1161,
	-1, 2108,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1044,
	-1, 2109,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1048,
	-1, 2122,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1061,
	-1, 2194,
	533, 1121,
	-2, 56,
	-1, 2200,
	152, 1532,
	-2, 1467,
	-1, 2293,
	6, 1696,
	12, 1696,
	536, 1696,
	537, 1696,
	-2, 1670,
	-1, 2365,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1043,
	-1, 2370,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1063,
	-1, 2371,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1047,
	-1, 2548,
	6, 1696,
	12, 1696,
	536, 1696,
	537, 1696,
	-2, 1689,
	-1, 2609,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1045,
	-1, 2610,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1049,
	-1, 2614,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1055,
	-1, 2622,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1075,
	-1, 2623,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1076,
	-1, 2624,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1077,
	-1, 2625,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1078,
	-1, 2626,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1079,
	-1, 2627,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1080,
	-1, 2628,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1057,
	-1, 2629,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1062,
	-1, 2700,
	542, 21,
	-2, 1292,
	-1, 2792,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1056,
	-1, 2793,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1058,
	-1, 2794,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1064,
	-1, 3353,
	7, 1417,
	-2, 240,
}

const yyPrivate = 57344

const yyLast = 53109

var yyAct = [...]int16{
	546, 3421, 3350, 3468, 3410, 3485, 3420, 3220, 2103, 3452,
	797, 3411, 748, 3432, 2662, 762, 3255, 3351, 1971, 3398,
	1903, 1855, 2974, 772, 3269, 3156, 586, 1811, 2638, 127,
	127, 3134, 2733, 1486, 1945, 536, 3014, 3046, 3316, 3215,
	2528, 2560, 536, 3314, 2689, 3315, 536, 787, 2678, 2928,
	3205, 1858, 3188, 3138, 3059, 2275, 1810, 2020, 536, 536,
	536, 536, 2657, 2862, 587, 615, 615, 1591, 615, 587,
	1881, 3244, 3130, 3072, 587, 2637, 587, 2219, 2975, 2261,
	950, 2942, 3175, 2870, 2455, 2816, 615, 585, 615, 3065,
	615, 2843, 620, 3096, 2820, 2819, 3184, 620, 2732, 620,
	2948, 2907, 2993, 2696, 2451, 2205, 2740, 2683, 622, 1909,
	1977, 2655, 951, 2775, 1840, 2189, 127, 127, 2920, 668,
	668, 2518, 1873, 2669, 655, 2459, 2850, 661, 661, 2826,
	1932, 20, 528, 31, 2220, 4, 2646, 662, 2150, 1893,
	959, 2745, 2175, 1992, 5, 2665, 1896, 764, 2137, 1898,
	769, 2445, 1838, 2292, 2025, 2269, 1950, 533, 1895, 2501,
	2561, 3216, 2250, 777, 552, 2019, 1593, 1654, 555, 1872,
	20, 2427, 31, 1935, 903, 1859, 1466, 738, 2024, 913,
	571, 2167, 803, 623, 832, 712, 1937, 1972, 1949, 556,
	1638, 118, 1911, 2196, 1592, 955, 1876, 1566, 1869, 1880,
	1794, 1879, 857, 1828, 21, 1878, 1458, 1627, 1871, 1797,
	710, 1834, 949, 621, 1479, 652, 813, 811, 1888, 1762,
	739, 659, 1615, 918, 978, 544, 947, 3348, 855, 47,
	551, 759, 3516, 893, 981, 3347, 716, 526, 3507, 3505,
	590, 3388, 2104, 3443, 894, 542, 3194, 3444, 3388, 2374,
	1763, 893, 3444, 2384, 2385, 2386, 3088, 1581, 2984, 1579,
	3419, 2953, 894, 2950, 1578, 1582, 1577, 893, 1583, 3099,
	722, 724, 726, 730, 1845, 1580, 2126, 966, 894, 956,
	723, 3417, 1584, 547, 1864, 771, 3396, 2127, 2125, 26,
	1572, 3387, 3372, 25, 27, 1572, 645, 646, 3357, 1572,
	3388, 3373, 3337, 36, 1891, 3330, 3297, 2155, 653, 729,
	630, 3338, 979, 968, 2801, 695, 971, 3271, 3236, 3229,
	3200, 728, 970, 630, 630, 130, 1891, 3237, 3230, 3201,
	33, 969, 3173, 3172, 34, 3171, 3104, 3168, 3098, 2660,
	3094, 3174, 1572, 3040, 1572, 2178, 3169, 3099, 972, 896,
	3013, 3002, 2801, 980, 2983, 38, 2970, 1625, 2914, 3012,
	3003, 2895, 28, 2982, 2477, 896, 630, 1891, 2810, 2809,
	2894, 2476, 2800, 614, 616, 2403, 618, 2811, 896, 2729,
	24, 2801, 2377, 2378, 2379, 2380, 2165, 2380, 2730, 2728,
	810, 2727, 2721, 2681, 648, 629, 650, 2468, 1891, 2203,
	1891, 1891, 2682, 2390, 2362, 2316, 1891, 2303, 629, 629,
	2241, 2160, 1572, 1572, 2317, 2154, 2304, 2145, 2136, 2242,
	2161, 892, 2128, 2138, 2155, 1804, 1572, 1572, 1757, 2088,
	1892, 1572, 984, 985, 986, 987, 1851, 1847, 1572, 1891,
	1573, 783, 541, 3044, 860, 896, 1572, 39, 905, 1572,
	1697, 629, 1697, 987, 775, 2487, 3223, 2706, 905, 715,
	860, 36, 2130, 779, 36, 1604, 736, 778, 1589, 2465,
	718, 2305, 779, 717, 1697, 2734, 778, 2306, 905, 720,
	1697, 956, 3447, 914, 915, 1607, 3275, 771, 33, 771,
	3246, 33, 34, 914, 915, 34, 916, 3038, 3082, 2960,
	2885, 2635, 2634, 2633, 3224, 2632, 912, 2190, 2437, 2398,
	2202, 2129, 2095, 38, 981, 2093, 38, 2747, 2412, 2090,
	3221, 1649, 2089, 1974, 1846, 713, 1695, 796, 736, 2415,
	761, 761, 1587, 735, 3506, 2898, 2374, 3483, 536, 1579,
	2384, 2385, 2386, 981, 1467, 3479, 32, 1652, 798, 761,
	36, 536, 2612, 792, 536, 536, 3375, 3335, 3189, 536,
	536, 46, 3303, 587, 587, 3296, 759, 3253, 1579, 981,
	3178, 3161, 3158, 991, 992, 993, 1655, 33, 3071, 3067,
	2206, 34, 536, 536, 1580, 1574, 805, 806, 1575, 3025,
	3018, 2973, 1581, 2935, 1579, 2919, 714, 2917, 2916, 1578,
	1582, 1577, 38, 1583, 2915, 2671, 2805, 1576, 997, 998,
	1580, 2770, 2692, 759, 2675, 2659, 981, 1584, 2651, 2494,
	991, 992, 993, 2472, 2439, 2432, 2282, 2281, 2274, 2193,
	2192, 2148, 1574, 615, 615, 1575, 1799, 1970, 1905, 1581,
	1469, 1579, 548, 1744, 1674, 1616, 1578, 1582, 1577, 1477,
	1583, 1475, 1474, 1468, 1576, 997, 998, 1580, 32, 920,
	905, 907, 856, 786, 1584, 1467, 782, 2407, 3339, 2243,
	29, 2771, 2222, 2418, 1865, 1891, 552, 552, 914, 915,
	30, 2446, 3185, 1891, 3037, 2883, 3154, 3434, 1650, 2593,
	1647, 2588, 2717, 1645, 1891, 2890, 2272, 3153, 615, 3036,
	2333, 2046, 731, 3017, 2951, 851, 3024, 1976, 773, 2951,
	1642, 2951, 525, 1975, 2042, 1683, 2909, 2466, 558, 1988,
	1864, 963, 943, 3247, 1958, 2903, 802, 698, 581, 1864,
	2100, 2374, 2902, 1608, 960, 960, 560, 960, 1000, 776,
	1624, 2705, 2554, 981, 761, 761, 761, 761, 939, 2374,
	2323, 761, 891, 2384, 2385, 2386, 982, 983, 984, 985,
	986, 987, 2381, 2382, 2383, 2611, 1951, 1953, 1952, 761,
	900, 2375, 2376, 2377, 2378, 2379, 2380, 2478, 859, 973,
	761, 980, 536, 761, 794, 795, 896, 37, 3435, 784,
	1664, 1663, 1595, 2722, 1596, 2001, 809, 808, 1460, 1605,
	32, 703, 1653, 536, 1614, 1626, 1999, 1641, 2325, 957,
	958, 644, 1610, 1751, 2556, 3135, 570, 1636, 569, 3336,
	568, 3193, 567, 3085, 3083, 536, 1651, 615, 3404, 2783,
	1568, 904, 3163, 2581, 967, 536, 2578, 565, 2045, 1662,
	1680, 536, 1676, 2000, 2270, 536, 711, 2572, 536, 865,
	2315, 909, 910, 911, 1998, 2889, 2374, 730, 3164, 941,
	2384, 2385, 2386, 1628, 3333, 917, 730, 730, 2312, 965,
	2910, 536, 2389, 3318, 2311, 1658, 2230, 2374, 2464, 536,
	536, 2384, 2385, 2386, 1655, 53, 615, 615, 615, 615,
	716, 615, 615, 729, 1606, 934, 940, 1640, 3052, 615,
	2010, 50, 729, 729, 2374, 937, 761, 2285, 2384, 2385,
	2386, 1571, 2221, 928, 921, 922, 1673, 2600, 925, 2348,
	2373, 932, 2708, 1739, 2553, 2347, 53, 668, 1740, 668,
	2080, 2079, 1743, 1481, 1586, 1735, 1745, 661, 719, 1639,
	1478, 868, 869, 2078, 720, 37, 961, 2077, 37, 3222,
	630, 2071, 2070, 1738, 668, 526, 1463, 1675, 32, 630,
	630, 1588, 661, 1632, 1470, 836, 1635, 779, 842, 2099,
	845, 778, 2279, 1758, 1760, 2286, 2411, 44, 888, 759,
	536, 761, 981, 761, 761, 761, 761, 761, 761, 761,
	761, 761, 761, 761, 761, 761, 761, 1671, 1476, 2062,
	761, 1987, 761, 615, 886, 761, 562, 1579, 668, 1569,
	2613, 957, 958, 2748, 2749, 1481, 1766, 2723, 2049, 1485,
	1731, 1478, 1718, 1580, 1705, 1644, 1646, 889, 2923, 1617,
	1584, 884, 931, 883, 37, 629, 982, 983, 984, 985,
	986, 987, 2537, 882, 629, 629, 881, 32, 877, 2381,
	2382, 2383, 876, 2457, 1684, 716, 2101, 875, 2375, 2376,
	2377, 2378, 2379, 2380, 874, 982, 983, 984, 985, 986,
	987, 873, 2249, 1000, 1659, 1698, 872, 897, 2288, 1737,
	866, 901, 988, 989, 990, 1661, 1660, 1629, 864, 3367,
	1629, 982, 983, 984, 985, 986, 987, 863, 3143, 862,
	861, 1485, 858, 2222, 1484, 563, 1729, 2878, 854, 1678,
	3233, 2539, 1631, 715, 2874, 885, 933, 926, 54, 1630,
	1000, 3256, 2949, 759, 1736, 1752, 981, 2590, 2508, 988,
	989, 990, 1954, 559, 1657, 1668, 3332, 1623, 982, 983,
	984, 985, 986, 987, 1629, 944, 1629, 1746, 1747, 1748,
	1754, 1579, 2888, 2329, 2391, 1629, 1629, 26, 2244, 54,
	1755, 25, 27, 1801, 3319, 2447, 3313, 1580, 2537, 1629,
	1629, 36, 2326, 2508, 1584, 2663, 2530, 1989, 2761, 713,
	564, 702, 1756, 3234, 759, 2536, 1484, 981, 3245, 2313,
	2017, 991, 992, 993, 1723, 1724, 1725, 1726, 33, 887,
	1730, 1765, 34, 1574, 2008, 1629, 1575, 1733, 759, 525,
	1581, 981, 1579, 2003, 2753, 977, 942, 1578, 1582, 1577,
	3257, 1583, 2233, 38, 3320, 1576, 997, 998, 1580, 3166,
	28, 704, 631, 2293, 2538, 1584, 1579, 2539, 2480, 1686,
	733, 2897, 1690, 2231, 3053, 2704, 2452, 3360, 24, 1485,
	714, 1667, 1580, 2375, 2376, 2377, 2378, 2379, 2380, 1584,
	1629, 2726, 2381, 2382, 2383, 982, 983, 984, 985, 986,
	987, 2375, 2376, 2377, 2378, 2379, 2380, 2677, 715, 3267,
	52, 2314, 51, 2287, 2293, 2278, 561, 3401, 3157, 2921,
	3029, 2523, 711, 3078, 1620, 1672, 759, 2551, 3400, 981,
	2526, 2481, 55, 991, 992, 993, 2232, 1619, 2725, 632,
	2676, 1790, 804, 3416, 3160, 1574, 2395, 1829, 1575, 3261,
	3049, 52, 1581, 51, 1579, 3022, 2541, 976, 945, 1578,
	1582, 1577, 700, 1583, 1484, 2502, 3030, 1576, 997, 998,
	1580, 56, 709, 55, 713, 3136, 582, 1584, 709, 734,
	1749, 2509, 935, 975, 2724, 2474, 2542, 2880, 3402, 2543,
	2538, 1956, 3438, 2544, 2742, 1727, 919, 633, 908, 2381,
	2382, 2383, 923, 924, 2823, 2540, 3460, 2502, 2375, 2376,
	2377, 2378, 2379, 2380, 3356, 2545, 3454, 2803, 2153, 833,
	2381, 2382, 2383, 2527, 2863, 2673, 2509, 2988, 2591, 2375,
	2376, 2377, 2378, 2379, 2380, 3515, 3514, 1666, 3518, 2980,
	2510, 1621, 3511, 3470, 3469, 714, 3510, 2381, 2382, 2383,
	2999, 3488, 2531, 2548, 2330, 3487, 2375, 2376, 2377, 2378,
	2379, 2380, 2981, 3493, 3503, 2529, 3000, 817, 3491, 3494,
	2546, 3474, 818, 2327, 3492, 3472, 827, 3473, 3475, 3476,
	2876, 3471, 2541, 2511, 3502, 2510, 3490, 2547, 3489, 930,
	853, 2879, 2754, 3467, 3422, 3235, 2755, 3427, 761, 761,
	1812, 3425, 3450, 3426, 3428, 761, 761, 3451, 761, 3509,
	2263, 3508, 2542, 2905, 2702, 2543, 2228, 2658, 3107, 2544,
	759, 3435, 3392, 981, 2549, 3306, 2741, 3305, 2511, 3206,
	3459, 2540, 1841, 3431, 982, 983, 984, 985, 986, 987,
	820, 2545, 3211, 699, 1728, 1805, 1809, 2438, 1579, 3497,
	3453, 2367, 1831, 742, 3349, 1843, 3208, 583, 2864, 3213,
	2814, 2133, 3021, 2688, 1580, 3207, 2420, 2524, 29, 826,
	2875, 1584, 3209, 2998, 2255, 1955, 1901, 1669, 946, 2548,
	2639, 1648, 1889, 3343, 1701, 3219, 114, 723, 3217, 2636,
	2525, 2015, 3424, 2991, 3429, 759, 2546, 2989, 981, 2992,
	831, 2265, 2262, 761, 2798, 761, 761, 2668, 761, 761,
	615, 3117, 2877, 2547, 2152, 2532, 2270, 2799, 2151, 1860,
	3224, 1862, 3366, 1579, 3116, 1595, 2366, 3225, 3226, 1885,
	1885, 2014, 3458, 3365, 2830, 2016, 3395, 1636, 615, 1580,
	2839, 3218, 1702, 816, 2965, 2835, 1584, 3113, 3114, 3399,
	2549, 2962, 1802, 2294, 536, 3210, 3092, 1478, 2151, 3112,
	791, 536, 536, 2013, 1478, 1636, 1856, 1857, 3365, 3366,
	821, 3073, 3074, 1944, 1808, 1979, 3091, 1983, 982, 983,
	984, 985, 986, 987, 2797, 37, 40, 41, 42, 43,
	1980, 2964, 2963, 668, 1463, 2198, 2199, 536, 32, 3276,
	3277, 1968, 705, 707, 701, 823, 649, 3224, 1655, 536,
	2829, 822, 3302, 33, 2497, 2832, 2833, 34, 1861, 536,
	2149, 1000, 3345, 536, 3466, 2679, 1842, 3176, 3080, 1978,
	988, 989, 990, 1850, 2428, 2450, 1707, 3311, 38, 982,
	983, 984, 985, 986, 987, 3346, 1973, 1706, 2841, 2834,
	1599, 2837, 2838, 2840, 2836, 1598, 824, 1947, 2649, 2423,
	619, 1938, 2254, 982, 983, 984, 985, 986, 987, 2648,
	2168, 2173, 2171, 2172, 2170, 761, 2166, 2169, 2647, 1886,
	1886, 615, 2195, 2168, 2173, 2171, 2172, 2170, 1849, 2166,
	2169, 1867, 2422, 3517, 1885, 2254, 3501, 3500, 1974, 1887,
	3499, 825, 3448, 960, 2492, 3015, 3364, 1939, 3362, 2011,
	3317, 1966, 828, 2693, 2473, 761, 761, 2426, 2173, 2171,
	2172, 2170, 2094, 526, 2229, 761, 761, 2086, 2063, 1906,
	761, 761, 1868, 1000, 636, 761, 638, 2253, 1854, 1656,
	1993, 1863, 988, 989, 990, 2048, 898, 830, 829, 3243,
	1890, 982, 983, 984, 985, 986, 987, 879, 878, 870,
	761, 774, 979, 554, 550, 3196, 761, 761, 761, 3195,
	3118, 2978, 1959, 2784, 2760, 2757, 761, 2121, 2104, 2680,
	2582, 2144, 1481, 2168, 2173, 2171, 2172, 2170, 2579, 2166,
	2169, 1870, 1841, 1841, 1841, 1595, 761, 1603, 2912, 2191,
	1602, 761, 1763, 2712, 2177, 2177, 587, 553, 1885, 2177,
	2177, 2177, 2713, 3264, 2958, 2955, 2790, 2779, 1790, 2116,
	2120, 2773, 2201, 2027, 819, 2043, 1485, 2772, 2115, 2047,
	536, 2714, 536, 536, 2598, 730, 1605, 536, 2597, 2592,
	2587, 630, 2052, 2358, 1886, 1485, 1900, 2357, 2058, 2356,
	2355, 2354, 2352, 2351, 833, 2349, 2345, 2344, 2332, 615,
	2331, 2237, 127, 2073, 2074, 2218, 2328, 2260, 1485, 2259,
	2113, 729, 960, 960, 2072, 630, 2111, 1796, 2092, 2059,
	1800, 1795, 1796, 2512, 1722, 1721, 1720, 1719, 1715, 536,
	630, 630, 2098, 1714, 1944, 2218, 2097, 1713, 2257, 1712,
	2102, 761, 2105, 2251, 1711, 1710, 1704, 1703, 1700, 1699,
	1696, 1484, 1694, 1681, 1677, 1670, 1600, 2110, 2139, 1791,
	2301, 1792, 2091, 732, 721, 1742, 629, 2112, 630, 1741,
	1484, 3047, 1829, 3293, 526, 3440, 1782, 3022, 2162, 3125,
	2123, 2743, 3439, 2737, 2699, 982, 983, 984, 985, 986,
	987, 2479, 1781, 1484, 2216, 2252, 1886, 2106, 1886, 2212,
	629, 2132, 1802, 1689, 841, 835, 2197, 2295, 2197, 2234,
	2235, 2277, 3418, 2146, 2934, 629, 629, 2185, 2140, 2141,
	2734, 2276, 2245, 723, 2943, 1904, 3, 2690, 531, 2158,
	2225, 730, 2157, 3066, 536, 2731, 2026, 2156, 2684, 2217,
	2032, 1973, 2210, 2036, 2184, 2182, 2040, 2181, 532, 2318,
	2319, 2180, 526, 629, 2200, 566, 727, 615, 2194, 893,
	982, 983, 984, 985, 986, 987, 549, 729, 2246, 2248,
	894, 2267, 1965, 2223, 1907, 761, 1609, 2827, 761, 2226,
	120, 761, 761, 2739, 761, 761, 761, 2933, 2932, 761,
	761, 1786, 2499, 2238, 2298, 2247, 2296, 2266, 1785, 1787,
	1784, 1812, 1788, 2213, 761, 1902, 1750, 1692, 1688, 761,
	517, 927, 902, 761, 761, 2256, 899, 2264, 895, 890,
	871, 2083, 761, 2084, 630, 2085, 1860, 847, 2087, 844,
	2271, 840, 1595, 2280, 2291, 1841, 1885, 834, 2738, 1885,
	2096, 70, 2322, 804, 697, 3298, 3199, 2431, 3167, 2994,
	2177, 2177, 2177, 2177, 2177, 3148, 2941, 2394, 2891, 759,
	2813, 2744, 981, 761, 761, 2710, 761, 2209, 936, 107,
	1590, 771, 2320, 1570, 1636, 2368, 2369, 2462, 3457, 763,
	723, 2142, 2143, 2387, 2388, 771, 1761, 1579, 3436, 2174,
	2114, 1759, 771, 761, 2186, 2187, 2188, 771, 723, 3048,
	2756, 2449, 974, 1580, 1753, 725, 2324, 2236, 964, 629,
	1584, 2700, 2911, 3259, 761, 761, 766, 2906, 2707, 2334,
	767, 3051, 765, 2908, 536, 3162, 1605, 2904, 1618, 2899,
	2224, 1916, 1485, 1485, 1485, 2227, 1910, 1636, 2214, 1944,
	2360, 2503, 2218, 2361, 2218, 1605, 129, 1936, 2493, 1933,
	1605, 1929, 1605, 2520, 940, 512, 513, 1802, 2401, 2402,
	2404, 2400, 119, 556, 19, 18, 2417, 2557, 2413, 2414,
	17, 16, 535, 789, 2393, 3268, 3177, 2289, 3279, 3063,
	2716, 2519, 2268, 2463, 2500, 90, 1886, 2408, 91, 1886,
	1802, 960, 89, 2469, 2471, 2284, 837, 3328, 2419, 2409,
	1991, 2416, 2218, 2567, 3137, 2421, 2515, 2456, 2424, 2562,
	589, 48, 3312, 2429, 2430, 589, 628, 1484, 1484, 1484,
	589, 2425, 589, 2521, 2467, 2442, 2461, 1938, 1478, 628,
	628, 2871, 2453, 2868, 2507, 2454, 3058, 761, 761, 687,
	687, 2211, 2517, 2460, 761, 1897, 761, 761, 761, 761,
	761, 761, 761, 761, 761, 761, 761, 761, 2458, 1894,
	761, 3391, 761, 2661, 3423, 2359, 3106, 3214, 761, 2986,
	761, 668, 628, 1939, 761, 2297, 2485, 2299, 2486, 2615,
	2818, 2490, 2520, 2498, 2488, 3204, 2482, 2695, 2564, 761,
	2812, 2654, 3095, 1885, 1885, 1737, 1841, 1885, 35, 2961,
	1841, 2796, 1848, 1886, 1597, 2337, 23, 2640, 2177, 2342,
	587, 530, 2534, 2552, 529, 2555, 2535, 3198, 2559, 737,
	2290, 3004, 3129, 2565, 2533, 2550, 2842, 2670, 2831, 1993,
	2448, 2571, 45, 2642, 1601, 1636, 615, 2667, 2666, 3115,
	2616, 2617, 2618, 2619, 2620, 2621, 2622, 2623, 2624, 2625,
	2626, 2627, 2521, 2574, 3111, 3110, 2410, 1853, 2664, 2691,
	1866, 1585, 15, 536, 14, 1605, 13, 12, 11, 2698,
	1636, 10, 9, 2718, 8, 668, 7, 6, 1814, 2563,
	2656, 2135, 1830, 2703, 1473, 681, 680, 665, 667, 2363,
	683, 682, 666, 761, 906, 2433, 2434, 2435, 2436, 664,
	663, 689, 1806, 757, 756, 1827, 2674, 761, 2131, 1471,
	751, 752, 747, 2685, 584, 1485, 2589, 1485, 960, 2694,
	2012, 2594, 2631, 2300, 960, 2321, 2400, 2652, 1485, 960,
	960, 2720, 1886, 2018, 668, 3079, 49, 785, 1012, 1612,
	2848, 960, 960, 1886, 1886, 1009, 2, 1886, 1, 0,
	2653, 668, 0, 0, 0, 1758, 1760, 2697, 0, 2765,
	1886, 0, 2644, 2645, 0, 0, 2650, 0, 0, 0,
	2672, 0, 0, 0, 2686, 0, 0, 0, 0, 0,
	0, 0, 761, 761, 761, 0, 0, 0, 0, 0,
	2735, 0, 0, 0, 2701, 0, 0, 0, 0, 0,
	1484, 0, 1484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1484, 0, 0, 2715, 0, 0, 761,
	1885, 2752, 0, 0, 0, 0, 2758, 2759, 2764, 761,
	761, 761, 0, 0, 0, 0, 0, 0, 2766, 0,
	0, 0, 0, 2746, 0, 2751, 536, 0, 0, 0,
	0, 2866, 0, 2462, 0, 0, 0, 0, 2776, 536,
	0, 2776, 0, 2520, 536, 0, 2778, 2746, 2767, 2762,
	2763, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 982, 983, 984, 985, 986, 987,
	0, 2491, 0, 2847, 2218, 0, 0, 0, 0, 0,
	0, 2520, 1812, 0, 615, 615, 0, 0, 0, 0,
	2506, 0, 0, 0, 0, 2514, 0, 2516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2519,
	0, 615, 615, 2521, 1758, 1760, 0, 0, 2892, 0,
	2884, 1812, 960, 0, 2687, 0, 2808, 0, 960, 960,
	2795, 2608, 2804, 0, 0, 0, 0, 960, 2926, 0,
	2537, 0, 0, 2886, 0, 0, 2845, 2828, 2218, 2567,
	1886, 2521, 2520, 2824, 2861, 2562, 589, 589, 2867, 2966,
	2825, 0, 587, 2945, 0, 2976, 2893, 761, 0, 2807,
	630, 2846, 761, 630, 2918, 589, 2844, 2944, 761, 0,
	2967, 20, 2461, 31, 0, 2901, 2900, 0, 0, 589,
	589, 0, 0, 1886, 0, 0, 2922, 0, 2924, 0,
	0, 0, 2925, 0, 3010, 2913, 0, 0, 2896, 2539,
	960, 0, 0, 0, 0, 0, 0, 0, 0, 2936,
	0, 0, 2521, 615, 0, 2939, 2940, 0, 2952, 761,
	536, 1886, 2656, 0, 2564, 0, 0, 0, 0, 0,
	0, 0, 0, 2776, 3023, 0, 0, 0, 2957, 0,
	0, 2977, 0, 0, 0, 629, 0, 0, 629, 0,
	0, 3011, 1485, 536, 0, 0, 2985, 761, 761, 2565,
	0, 2698, 0, 2972, 536, 3005, 2971, 0, 0, 668,
	2969, 0, 0, 3032, 0, 3057, 761, 3045, 2995, 0,
	0, 2996, 2997, 0, 615, 0, 0, 0, 2968, 0,
	0, 0, 1886, 0, 0, 0, 0, 3006, 3056, 0,
	2711, 0, 1886, 1605, 3061, 3062, 1595, 3054, 0, 0,
	0, 3034, 0, 3026, 3097, 0, 0, 3064, 0, 2768,
	2769, 0, 2538, 761, 0, 0, 628, 3028, 3108, 3001,
	3033, 3031, 730, 3035, 0, 628, 628, 1484, 3042, 1605,
	0, 1605, 0, 668, 3041, 3043, 0, 0, 3050, 2697,
	0, 3100, 3068, 536, 3070, 0, 0, 0, 0, 3139,
	589, 589, 589, 589, 0, 630, 761, 589, 729, 2791,
	3076, 3016, 0, 3093, 0, 0, 3039, 0, 3147, 0,
	0, 0, 2929, 2930, 0, 589, 0, 0, 3132, 0,
	0, 0, 0, 0, 0, 1483, 589, 3087, 0, 589,
	3084, 0, 0, 0, 0, 3102, 0, 0, 1605, 2937,
	2938, 0, 1812, 0, 2541, 0, 3170, 0, 3103, 0,
	3181, 761, 0, 3151, 3155, 630, 0, 0, 0, 3140,
	3131, 0, 0, 0, 0, 3128, 3149, 3075, 0, 3060,
	2976, 0, 3197, 3142, 2542, 761, 0, 2543, 761, 0,
	629, 2544, 0, 3144, 3145, 3152, 0, 0, 3150, 0,
	0, 3159, 0, 2540, 668, 0, 1605, 0, 3183, 0,
	0, 0, 3202, 2545, 0, 0, 0, 1483, 0, 3105,
	0, 3119, 761, 3120, 3121, 3122, 0, 0, 0, 3186,
	0, 3180, 0, 3182, 3165, 0, 630, 730, 2844, 2520,
	1485, 0, 761, 0, 3231, 0, 3260, 0, 0, 1886,
	629, 2548, 3238, 3239, 0, 3252, 0, 687, 3203, 687,
	0, 3020, 589, 0, 0, 0, 3248, 0, 2546, 0,
	0, 3274, 630, 729, 0, 3284, 1605, 1605, 0, 3249,
	3287, 0, 3097, 0, 687, 2547, 0, 761, 761, 0,
	0, 761, 0, 0, 0, 3250, 0, 0, 0, 1595,
	0, 0, 0, 1860, 3263, 1485, 0, 3241, 3242, 2521,
	3280, 3266, 3265, 0, 3254, 0, 3272, 3251, 3139, 615,
	615, 629, 2549, 3300, 1485, 1484, 0, 2860, 761, 0,
	630, 0, 3081, 3273, 2520, 3290, 587, 589, 687, 589,
	589, 589, 589, 589, 589, 589, 589, 589, 589, 589,
	589, 589, 589, 3327, 3301, 3295, 589, 629, 589, 3331,
	3323, 589, 3329, 3278, 3289, 1483, 3299, 3325, 3308, 3310,
	0, 3307, 3281, 3282, 0, 3288, 0, 3352, 761, 3321,
	3326, 3291, 3292, 3304, 761, 3294, 0, 3334, 3140, 1886,
	1484, 3131, 3262, 3324, 0, 0, 0, 3340, 2117, 2117,
	3342, 0, 0, 0, 2521, 0, 0, 0, 0, 1484,
	3341, 0, 0, 3270, 0, 629, 761, 3354, 0, 0,
	0, 0, 0, 0, 3359, 0, 0, 3383, 3384, 3385,
	2976, 3358, 0, 3060, 3361, 960, 3374, 3369, 3382, 3371,
	615, 3368, 3363, 3379, 3393, 3394, 2218, 2567, 0, 0,
	0, 3376, 3386, 2562, 2520, 0, 0, 0, 730, 668,
	3407, 3380, 0, 3377, 3344, 0, 3403, 3390, 1886, 3352,
	3370, 3412, 0, 3409, 0, 0, 3381, 0, 0, 0,
	3405, 0, 3408, 0, 1886, 3433, 3430, 3406, 0, 3397,
	630, 0, 0, 0, 729, 1485, 0, 3437, 0, 1485,
	0, 0, 0, 761, 0, 0, 0, 0, 3090, 0,
	3442, 3446, 0, 3445, 0, 0, 0, 0, 3441, 0,
	0, 0, 0, 0, 2521, 0, 587, 3455, 3456, 0,
	3461, 3462, 2564, 3355, 0, 2851, 3464, 0, 2852, 0,
	3412, 2853, 0, 3478, 3123, 3477, 3126, 3484, 3481, 3465,
	3486, 630, 3482, 0, 3463, 0, 2873, 0, 0, 2854,
	3352, 3495, 3496, 0, 2872, 2878, 0, 2565, 3498, 0,
	0, 0, 2874, 3270, 0, 629, 0, 3486, 0, 3412,
	1484, 3504, 0, 656, 1484, 0, 0, 3352, 0, 3512,
	3513, 0, 0, 0, 0, 0, 2856, 0, 0, 0,
	0, 0, 0, 3414, 1886, 0, 2855, 0, 0, 0,
	3415, 0, 0, 3179, 0, 0, 2857, 746, 0, 1485,
	545, 545, 0, 0, 0, 0, 0, 3309, 3309, 0,
	0, 0, 0, 0, 0, 0, 629, 0, 0, 0,
	0, 0, 0, 0, 2869, 0, 0, 0, 0, 759,
	617, 0, 981, 0, 0, 0, 634, 0, 637, 1485,
	639, 640, 641, 642, 643, 0, 0, 0, 647, 0,
	0, 3227, 3414, 0, 0, 657, 0, 1579, 0, 3415,
	2107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1580, 0, 0, 1485, 0, 0, 0,
	1584, 0, 0, 0, 1484, 0, 0, 0, 0, 0,
	0, 3414, 0, 0, 2117, 2117, 0, 0, 3415, 0,
	0, 0, 2117, 2117, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3285, 3286, 0, 1484, 0, 2858, 2859, 3309, 0,
	759, 0, 0, 981, 0, 0, 0, 991, 992, 993,
	0, 0, 0, 0, 0, 1485, 0, 0, 0, 1574,
	0, 0, 1575, 0, 0, 0, 1581, 0, 1579, 2881,
	0, 1484, 0, 1578, 1582, 1577, 0, 1583, 0, 0,
	0, 1576, 997, 998, 1580, 0, 2440, 0, 0, 0,
	0, 1584, 0, 0, 1485, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 759, 2880, 0, 981, 0, 0,
	0, 991, 992, 993, 589, 589, 2987, 0, 0, 0,
	0, 589, 589, 1574, 589, 0, 1575, 0, 2882, 0,
	1581, 0, 1579, 0, 0, 0, 0, 1578, 1582, 1577,
	1484, 1583, 0, 0, 0, 1576, 997, 998, 1580, 759,
	0, 0, 981, 0, 0, 1584, 991, 992, 993, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1574, 0,
	0, 1575, 0, 0, 0, 1581, 0, 1579, 0, 1484,
	0, 0, 1578, 1582, 1577, 0, 1583, 0, 0, 0,
	1576, 997, 998, 1580, 0, 0, 0, 0, 2876, 0,
	1584, 0, 0, 0, 0, 0, 0, 753, 22, 2879,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 589,
	0, 589, 589, 0, 589, 589, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 534, 0, 0, 0,
	527, 0, 0, 0, 0, 589, 589, 22, 0, 0,
	0, 0, 22, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 687, 0, 0, 2537, 0, 0, 2117,
	2117, 2117, 2117, 2117, 2117, 2117, 2117, 2117, 2117, 2117,
	2117, 0, 557, 687, 0, 0, 0, 0, 2875, 0,
	0, 0, 0, 0, 0, 574, 577, 579, 0, 0,
	0, 0, 1483, 0, 0, 0, 759, 0, 0, 981,
	0, 0, 0, 991, 992, 993, 0, 628, 0, 0,
	0, 1483, 0, 0, 0, 1574, 0, 0, 1575, 0,
	2877, 0, 1581, 0, 1579, 2539, 0, 0, 0, 1578,
	1582, 1577, 0, 1583, 1483, 0, 2668, 1576, 997, 998,
	1580, 628, 0, 0, 0, 759, 0, 1584, 981, 0,
	0, 0, 991, 992, 993, 0, 628, 628, 0, 0,
	0, 0, 0, 0, 1574, 0, 0, 1575, 0, 0,
	0, 1581, 0, 1579, 0, 0, 0, 0, 1578, 1582,
	1577, 589, 1583, 0, 0, 0, 1576, 997, 998, 1580,
	0, 0, 0, 0, 628, 0, 1584, 0, 0, 0,
	589, 0, 0, 0, 0, 0, 0, 545, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 589, 589, 0, 0, 0, 0, 0, 807, 0,
	0, 589, 589, 0, 0, 0, 589, 589, 0, 0,
	0, 589, 0, 759, 0, 0, 981, 0, 2538, 0,
	991, 992, 993, 0, 982, 983, 984, 985, 986, 987,
	0, 0, 1574, 0, 0, 1575, 589, 0, 0, 1581,
	0, 1579, 589, 589, 589, 0, 1578, 1582, 1577, 0,
	1583, 0, 589, 0, 1576, 997, 998, 1580, 0, 0,
	0, 0, 0, 0, 1584, 867, 0, 0, 0, 0,
	0, 0, 589, 0, 0, 0, 0, 589, 880, 0,
	0, 0, 589, 0, 589, 0, 0, 0, 0, 0,
	0, 0, 0, 2529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1000, 0, 0,
	2541, 0, 2815, 2117, 0, 687, 988, 989, 990, 0,
	628, 0, 0, 3187, 0, 982, 983, 984, 985, 986,
	987, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2542, 0, 0, 2543, 687, 687, 0, 2544, 0, 0,
	0, 0, 0, 687, 0, 0, 0, 0, 0, 2540,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2545,
	0, 1000, 0, 0, 0, 0, 0, 589, 0, 0,
	988, 989, 990, 0, 0, 0, 0, 0, 0, 982,
	983, 984, 985, 986, 987, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2548, 1004, 0,
	0, 0, 0, 0, 0, 0, 1000, 545, 0, 0,
	0, 0, 0, 0, 2546, 988, 989, 990, 1483, 1483,
	1483, 0, 2931, 0, 982, 983, 984, 985, 986, 987,
	0, 2547, 1622, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 759, 1004, 0, 981, 0,
	0, 0, 991, 992, 993, 0, 0, 0, 0, 0,
	2979, 0, 0, 0, 1574, 2117, 0, 1575, 2549, 0,
	0, 1581, 0, 1579, 0, 0, 0, 1693, 1578, 1582,
	1577, 0, 1583, 0, 0, 0, 1576, 997, 998, 1580,
	0, 0, 0, 0, 0, 1709, 1584, 0, 0, 0,
	0, 589, 0, 0, 589, 0, 0, 589, 589, 0,
	589, 589, 589, 0, 0, 589, 589, 0, 0, 0,
	1732, 0, 2117, 1734, 780, 0, 0, 0, 0, 0,
	589, 0, 0, 0, 0, 589, 0, 790, 0, 589,
	589, 0, 2397, 0, 0, 799, 801, 0, 589, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 589, 1000, 0, 589, 0, 0, 848, 0,
	0, 0, 988, 989, 990, 0, 0, 0, 0, 0,
	0, 982, 983, 984, 985, 986, 987, 0, 0, 589,
	589, 0, 589, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2663, 1000, 0, 0, 0, 0, 0, 0, 589,
	0, 988, 989, 990, 0, 0, 2117, 0, 0, 0,
	982, 983, 984, 985, 986, 987, 0, 0, 0, 687,
	589, 589, 687, 0, 687, 0, 0, 759, 0, 0,
	981, 0, 0, 0, 991, 992, 993, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1574, 0, 0, 1575,
	0, 0, 0, 1581, 0, 1579, 0, 0, 0, 589,
	1578, 1582, 1577, 0, 1583, 0, 0, 0, 1576, 997,
	998, 1580, 0, 0, 0, 0, 0, 0, 1584, 0,
	0, 1483, 687, 1483, 0, 0, 0, 0, 1461, 0,
	1000, 0, 1464, 1465, 1483, 0, 0, 0, 788, 988,
	989, 990, 0, 0, 0, 0, 2505, 0, 982, 983,
	984, 985, 986, 987, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 817, 0, 22, 3212, 0,
	818, 0, 0, 817, 827, 0, 0, 0, 818, 0,
	0, 0, 827, 589, 589, 0, 0, 0, 1567, 0,
	589, 687, 589, 589, 589, 589, 589, 589, 589, 589,
	589, 589, 589, 589, 0, 0, 589, 0, 589, 1611,
	0, 0, 0, 0, 589, 0, 589, 0, 0, 0,
	589, 0, 0, 0, 0, 0, 0, 0, 589, 0,
	0, 1665, 0, 0, 0, 589, 817, 0, 820, 589,
	589, 818, 0, 589, 0, 827, 820, 1679, 0, 0,
	0, 1682, 0, 0, 1685, 0, 589, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 826, 0, 0,
	2117, 2117, 0, 0, 2117, 826, 0, 1708, 0, 0,
	0, 0, 0, 0, 0, 1716, 1717, 0, 0, 687,
	0, 0, 0, 0, 0, 687, 0, 0, 831, 0,
	0, 0, 0, 0, 0, 0, 831, 0, 0, 820,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 826, 589,
	0, 816, 0, 0, 0, 0, 0, 0, 0, 816,
	0, 0, 814, 589, 687, 0, 0, 0, 0, 0,
	839, 0, 0, 0, 0, 0, 0, 0, 821, 831,
	0, 687, 1000, 0, 0, 0, 821, 0, 0, 0,
	0, 988, 989, 990, 1798, 0, 1764, 0, 0, 0,
	982, 983, 984, 985, 986, 987, 628, 0, 0, 628,
	0, 815, 0, 823, 0, 0, 0, 0, 0, 822,
	0, 823, 816, 0, 0, 0, 759, 822, 0, 981,
	0, 0, 0, 991, 992, 993, 0, 0, 589, 589,
	589, 0, 0, 0, 0, 1574, 0, 0, 1575, 821,
	0, 0, 1581, 0, 1579, 0, 0, 0, 0, 1578,
	1582, 1577, 0, 1583, 824, 0, 0, 1576, 997, 998,
	1580, 0, 824, 0, 0, 589, 589, 1584, 0, 0,
	0, 0, 0, 0, 823, 589, 589, 589, 0, 0,
	822, 0, 0, 0, 0, 0, 0, 759, 1483, 0,
	981, 0, 0, 0, 991, 992, 993, 0, 0, 825,
	0, 0, 0, 0, 0, 0, 1574, 825, 0, 589,
	828, 0, 0, 1581, 687, 1579, 0, 0, 828, 0,
	1578, 1582, 1577, 0, 1583, 824, 0, 0, 1576, 997,
	998, 1580, 1004, 1004, 1004, 1004, 0, 1004, 1584, 0,
	0, 0, 0, 2028, 0, 830, 829, 589, 0, 0,
	1004, 838, 0, 830, 829, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	825, 0, 0, 0, 1000, 0, 0, 0, 0, 0,
	0, 828, 0, 988, 989, 990, 0, 0, 687, 0,
	2392, 0, 982, 983, 984, 985, 986, 987, 0, 0,
	0, 628, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2343, 0, 830, 829, 589, 0,
	0, 0, 819, 0, 0, 0, 0, 0, 589, 0,
	819, 0, 0, 589, 0, 0, 0, 0, 589, 0,
	0, 0, 0, 1004, 589, 0, 0, 0, 0, 0,
	0, 0, 833, 0, 0, 0, 0, 0, 0, 0,
	833, 628, 0, 0, 0, 0, 0, 0, 740, 740,
	1960, 1961, 1962, 0, 0, 0, 0, 0, 0, 0,
	0, 1969, 0, 0, 0, 0, 0, 0, 0, 1981,
	0, 1985, 1986, 819, 0, 589, 0, 1990, 0, 0,
	1994, 1995, 0, 0, 2002, 0, 2004, 2007, 0, 0,
	0, 687, 0, 0, 0, 0, 0, 0, 0, 687,
	2029, 2030, 0, 833, 2034, 2035, 0, 2038, 2039, 0,
	0, 0, 628, 589, 589, 0, 1483, 0, 2050, 0,
	2051, 0, 0, 2053, 2054, 2055, 2056, 2057, 0, 0,
	2060, 2061, 589, 0, 2064, 2065, 2066, 2067, 2068, 2069,
	0, 0, 0, 0, 0, 2075, 2076, 0, 628, 0,
	0, 2081, 2082, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 687, 0, 0, 0, 0, 0, 589,
	0, 1483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 0, 0, 0, 628, 0, 0, 0,
	0, 0, 0, 0, 0, 589, 0, 0, 0, 0,
	0, 0, 589, 0, 0, 1004, 1004, 1004, 1004, 1004,
	1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 0,
	0, 1004, 0, 0, 0, 0, 0, 1004, 0, 0,
	0, 1004, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1454, 1455, 1456, 1457, 0, 0, 0, 1459,
	0, 0, 0, 0, 0, 0, 0, 589, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1472, 0, 0,
	0, 0, 0, 0, 687, 0, 0, 1004, 1565, 0,
	0, 589, 0, 1000, 589, 0, 0, 0, 0, 0,
	1004, 0, 988, 989, 990, 0, 0, 1844, 0, 0,
	0, 982, 983, 984, 985, 986, 987, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 589, 0,
	1798, 0, 0, 0, 0, 0, 527, 0, 0, 0,
	0, 0, 0, 0, 0, 589, 1874, 1874, 589, 0,
	0, 0, 0, 0, 0, 0, 628, 0, 0, 0,
	0, 1483, 0, 0, 1000, 1483, 0, 0, 0, 0,
	0, 0, 817, 988, 989, 990, 0, 818, 0, 0,
	0, 827, 982, 983, 984, 985, 986, 987, 0, 0,
	0, 0, 2283, 589, 589, 0, 0, 589, 0, 0,
	1957, 0, 0, 0, 0, 0, 0, 1963, 1964, 0,
	0, 0, 2307, 2308, 2309, 2310, 0, 628, 0, 0,
	0, 0, 0, 0, 589, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 589, 0, 0, 0, 0, 0,
	589, 0, 589, 2009, 0, 820, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2031, 2335, 2336, 0, 2339,
	2340, 2341, 0, 0, 0, 2044, 0, 0, 0, 0,
	0, 0, 0, 2346, 826, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 589, 1483, 2353, 0, 0, 740,
	589, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775,
	1776, 1777, 1778, 1779, 1780, 831, 0, 0, 1783, 0,
	1789, 1874, 0, 1793, 0, 0, 0, 0, 0, 0,
	0, 0, 589, 0, 0, 1483, 687, 0, 0, 0,
	0, 0, 0, 0, 0, 1798, 0, 0, 0, 687,
	0, 0, 0, 759, 0, 0, 981, 1461, 816, 0,
	991, 992, 993, 0, 0, 0, 1004, 1004, 0, 814,
	589, 0, 1483, 0, 0, 0, 0, 0, 0, 1581,
	1004, 1579, 1004, 0, 0, 821, 1578, 1582, 1577, 0,
	1583, 0, 1004, 0, 1576, 997, 998, 1580, 0, 0,
	0, 0, 0, 0, 1584, 1004, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1004, 815, 589,
	823, 1004, 0, 0, 0, 0, 822, 0, 0, 0,
	0, 759, 0, 2179, 981, 2183, 0, 2470, 991, 992,
	993, 1483, 589, 0, 0, 0, 0, 0, 0, 0,
	1574, 0, 0, 1575, 0, 0, 0, 1581, 0, 1579,
	0, 0, 0, 0, 1578, 1582, 1577, 0, 1583, 0,
	0, 824, 1576, 997, 998, 1580, 0, 0, 0, 0,
	1483, 0, 1584, 2495, 2496, 0, 2204, 0, 2207, 2208,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2513, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 825, 0, 0, 0,
	0, 0, 2558, 0, 0, 0, 0, 828, 0, 0,
	0, 1004, 0, 0, 0, 0, 0, 0, 2573, 0,
	0, 0, 0, 0, 0, 2258, 0, 2575, 2576, 2577,
	0, 0, 2580, 0, 0, 2583, 2584, 2585, 2586, 0,
	812, 0, 830, 829, 0, 0, 0, 0, 2595, 2596,
	0, 0, 0, 2599, 0, 2601, 2602, 0, 2603, 2604,
	2605, 2606, 2607, 759, 0, 0, 981, 0, 817, 0,
	991, 992, 993, 818, 0, 0, 0, 827, 0, 0,
	0, 0, 1574, 0, 0, 1575, 0, 0, 0, 1581,
	0, 1579, 0, 0, 0, 0, 1578, 1582, 1577, 0,
	1583, 0, 1004, 1004, 1576, 997, 998, 1580, 1004, 1004,
	1004, 0, 0, 0, 1584, 0, 0, 0, 0, 819,
	0, 0, 0, 0, 2643, 0, 0, 0, 0, 0,
	2350, 0, 0, 0, 1004, 0, 0, 0, 0, 0,
	0, 820, 0, 1004, 1004, 0, 0, 0, 0, 833,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 817, 0, 0, 0, 0, 818, 0, 0,
	826, 827, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1004, 1004, 0, 0, 0, 22, 0, 0, 0,
	0, 22, 22, 0, 0, 0, 0, 0, 0, 0,
	0, 831, 0, 1874, 0, 0, 1874, 0, 0, 0,
	0, 0, 0, 1004, 0, 0, 0, 0, 0, 0,
	0, 1004, 1004, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 820, 0, 0, 0, 0,
	0, 0, 0, 0, 816, 0, 0, 22, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 826, 0, 0, 0, 0, 0,
	0, 821, 0, 0, 1839, 0, 0, 0, 0, 0,
	0, 0, 2774, 0, 0, 2777, 0, 0, 0, 0,
	0, 2780, 2781, 2782, 0, 831, 2785, 2786, 2787, 0,
	0, 2788, 2789, 0, 0, 0, 823, 0, 0, 0,
	0, 0, 822, 0, 0, 0, 0, 0, 0, 0,
	2489, 0, 0, 817, 0, 0, 0, 0, 818, 0,
	0, 0, 827, 0, 0, 0, 0, 0, 816, 0,
	1000, 0, 0, 2802, 0, 0, 0, 1004, 1004, 988,
	989, 990, 1004, 0, 0, 0, 0, 824, 982, 983,
	984, 985, 986, 987, 0, 821, 1004, 1004, 1004, 0,
	0, 1852, 0, 1779, 1780, 0, 1783, 1789, 0, 1004,
	0, 0, 0, 2865, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 820, 0, 0, 0,
	823, 0, 825, 0, 0, 0, 822, 0, 0, 0,
	0, 0, 0, 828, 1912, 0, 0, 0, 1000, 0,
	0, 0, 1925, 0, 0, 826, 0, 988, 989, 990,
	0, 0, 0, 0, 1803, 0, 982, 983, 984, 985,
	986, 987, 0, 0, 0, 0, 2338, 0, 830, 829,
	0, 824, 0, 0, 0, 0, 831, 0, 0, 0,
	1874, 1874, 817, 0, 1874, 0, 0, 818, 0, 0,
	0, 827, 0, 0, 1004, 0, 2946, 2947, 0, 0,
	0, 0, 0, 2954, 0, 0, 1931, 2956, 1004, 0,
	0, 0, 0, 0, 2959, 0, 825, 0, 0, 816,
	0, 0, 0, 0, 0, 0, 0, 828, 0, 0,
	0, 0, 817, 0, 0, 0, 0, 818, 0, 0,
	1927, 827, 0, 0, 0, 819, 821, 0, 0, 0,
	1004, 1004, 1004, 0, 0, 820, 0, 0, 0, 0,
	2041, 0, 830, 829, 1004, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 833, 0, 0, 0, 2709,
	1004, 823, 0, 0, 826, 0, 0, 822, 0, 0,
	1000, 0, 0, 3019, 0, 0, 0, 0, 0, 988,
	989, 990, 0, 2108, 2109, 820, 0, 0, 982, 983,
	984, 985, 986, 987, 0, 831, 0, 0, 0, 2122,
	0, 0, 0, 2124, 0, 0, 817, 0, 1917, 0,
	0, 818, 824, 0, 826, 827, 0, 0, 0, 819,
	0, 0, 0, 0, 0, 0, 0, 0, 2134, 0,
	1926, 0, 817, 0, 1839, 1839, 1839, 818, 816, 0,
	0, 827, 0, 0, 2147, 831, 0, 0, 0, 833,
	0, 0, 0, 0, 0, 0, 0, 825, 0, 3086,
	0, 0, 3089, 0, 2159, 821, 0, 0, 828, 2163,
	1922, 817, 0, 0, 0, 0, 818, 0, 0, 820,
	827, 0, 0, 0, 0, 0, 0, 1874, 816, 0,
	0, 0, 3109, 1919, 0, 0, 0, 0, 0, 0,
	823, 2037, 0, 830, 829, 820, 822, 0, 826, 0,
	0, 0, 0, 0, 1913, 821, 0, 1924, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1004, 0,
	0, 0, 0, 0, 826, 0, 0, 0, 22, 831,
	0, 0, 2849, 0, 820, 0, 0, 0, 22, 0,
	823, 824, 0, 0, 0, 2887, 822, 0, 1912, 1930,
	0, 0, 0, 0, 0, 831, 1925, 0, 0, 2273,
	0, 0, 0, 826, 0, 0, 0, 0, 0, 0,
	819, 0, 816, 0, 0, 0, 0, 3191, 0, 3192,
	0, 0, 0, 0, 29, 0, 825, 1948, 0, 0,
	0, 824, 0, 0, 831, 0, 0, 828, 816, 821,
	833, 1923, 0, 0, 0, 1004, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1920, 0, 0,
	1931, 0, 0, 0, 1918, 821, 0, 0, 1928, 3232,
	2033, 22, 830, 829, 823, 0, 825, 816, 0, 0,
	822, 1914, 0, 0, 0, 0, 0, 828, 0, 0,
	0, 0, 0, 0, 1927, 0, 0, 0, 0, 0,
	823, 0, 0, 0, 821, 1921, 822, 1915, 0, 0,
	0, 0, 0, 0, 1004, 0, 0, 0, 0, 0,
	1691, 0, 830, 829, 0, 824, 0, 3283, 0, 0,
	71, 0, 0, 2364, 95, 57, 2365, 0, 0, 823,
	69, 0, 2370, 2371, 2372, 822, 0, 0, 0, 819,
	0, 824, 0, 98, 61, 0, 0, 0, 1004, 22,
	0, 0, 2396, 0, 0, 0, 0, 1839, 0, 0,
	825, 2405, 2406, 83, 0, 0, 3027, 0, 0, 833,
	740, 828, 1917, 0, 0, 0, 0, 0, 0, 0,
	824, 0, 0, 0, 0, 0, 825, 0, 0, 819,
	0, 0, 0, 0, 1926, 0, 0, 828, 1004, 3055,
	0, 0, 0, 0, 1687, 0, 830, 829, 0, 0,
	3069, 0, 2443, 0, 2444, 0, 1004, 0, 0, 833,
	0, 0, 0, 0, 0, 825, 0, 0, 0, 0,
	846, 0, 830, 829, 1922, 0, 828, 0, 0, 0,
	0, 2475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 1919, 0, 63,
	3378, 0, 2483, 2484, 0, 0, 0, 0, 0, 843,
	0, 830, 829, 0, 0, 0, 0, 0, 1913, 0,
	1004, 1924, 0, 819, 100, 64, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 65, 0, 0, 3133,
	0, 0, 0, 0, 0, 0, 0, 66, 0, 819,
	0, 0, 0, 833, 0, 0, 0, 0, 0, 0,
	93, 67, 0, 1930, 0, 0, 0, 105, 81, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 833,
	0, 0, 0, 99, 62, 0, 68, 0, 819, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 29, 0,
	0, 1908, 0, 0, 0, 0, 94, 58, 0, 0,
	0, 0, 0, 0, 0, 1923, 0, 0, 833, 0,
	0, 0, 0, 3480, 0, 2609, 2610, 0, 0, 0,
	0, 1920, 2614, 0, 0, 0, 0, 0, 1918, 0,
	0, 0, 1928, 0, 0, 0, 0, 1004, 2628, 0,
	2629, 0, 0, 0, 0, 1914, 2630, 0, 1839, 0,
	0, 0, 1839, 0, 0, 22, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 72, 0, 2641, 0, 1921,
	0, 1915, 0, 88, 88, 73, 108, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 0, 75,
	0, 112, 79, 109, 76, 0, 0, 0, 96, 59,
	0, 110, 77, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 102, 85, 0,
	0, 0, 0, 78, 0, 0, 0, 0, 0, 84,
	0, 0, 0, 103, 86, 0, 0, 0, 0, 113,
	80, 0, 0, 92, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	60, 2736, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2750, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2792, 2793, 2794, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2806, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2822,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2990, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3077, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3146, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3190,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2443, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3240, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3258, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3322, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1482, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2443, 0, 0, 0,
	0, 0, 0, 1487, 141, 1493, 158, 594, 1503, 207,
	244, 459, 1490, 1535, 304, 1540, 357, 361, 1564, 450,
	1497, 1500, 1510, 1513, 215, 1518, 599, 1526, 605, 1536,
	611, 1555, 426, 1561, 601, 602, 607, 146, 540, 449,
	520, 1549, 1495, 1553, 311, 1546, 1522, 1562, 1539, 1551,
	1532, 1537, 0, 154, 1524, 1525, 1529, 1538, 603, 600,
	604, 610, 598, 608, 595, 606, 1559, 348, 282, 0,
	499, 375, 153, 199, 186, 228, 270, 382, 1494, 1512,
	260, 430, 195, 284, 1545, 174, 317, 1558, 406, 281,
	1552, 389, 409, 1514, 301, 180, 340, 396, 397, 592,
	597, 1502, 613, 1489, 184, 185, 306, 166, 314, 511,
	477, 369, 327, 325, 1520, 292, 349, 506, 1492, 0,
	214, 3449, 209, 305, 445, 172, 424, 343, 310, 264,
	372, 401, 211, 196, 197, 240, 342, 230, 182, 435,
	474, 478, 476, 472, 469, 473, 470, 471, 475, 231,
	468, 0, 443, 452, 486, 466, 494, 451, 491, 461,
	206, 490, 455, 454, 500, 481, 482, 436, 496, 467,
	465, 458, 457, 453, 1560, 131, 132, 133, 134, 135,
	136, 137, 138, 139, 140, 142, 1488, 143, 144, 145,
	147, 148, 149, 591, 150, 151, 152, 155, 156, 157,
	159, 519, 160, 161, 162, 163, 164, 165, 456, 593,
	167, 168, 169, 170, 171, 173, 175, 176, 177, 178,
	179, 181, 183, 1504, 1505, 1506, 596, 1507, 1508, 1509,
	187, 188, 189, 190, 191, 192, 1511, 193, 194, 198,
	200, 201, 202, 203, 204, 205, 208, 1515, 210, 212,
	1516, 213, 216, 1517, 217, 218, 219, 220, 221, 222,
	223, 224, 460, 225, 1519, 226, 227, 229, 1521, 232,
	233, 234, 235, 236, 1523, 237, 462, 463, 238, 239,
	241, 242, 243, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 1527, 257, 258, 259, 261,
	1528, 262, 263, 266, 267, 268, 269, 1530, 271, 479,
	1531, 272, 273, 274, 1533, 1534, 275, 276, 277, 278,
	279, 280, 283, 480, 285, 286, 287, 288, 289, 290,
	291, 521, 293, 294, 295, 296, 297, 298, 299, 483,
	484, 300, 302, 303, 485, 487, 488, 609, 318, 319,
	320, 321, 322, 323, 324, 326, 1542, 328, 329, 330,
	489, 331, 332, 333, 334, 1543, 335, 336, 337, 338,
	339, 341, 344, 345, 346, 347, 1544, 350, 351, 352,
	353, 354, 355, 356, 358, 359, 360, 362, 363, 364,
	522, 365, 366, 367, 368, 492, 370, 371, 523, 373,
	374, 376, 377, 378, 379, 380, 381, 538, 1547, 383,
	493, 384, 385, 386, 387, 388, 1548, 390, 391, 392,
	393, 394, 395, 398, 399, 400, 402, 403, 495, 404,
	405, 1550, 407, 408, 612, 410, 411, 412, 413, 414,
	1554, 539, 415, 497, 416, 498, 417, 418, 419, 420,
	421, 422, 423, 425, 1556, 1557, 427, 428, 429, 431,
	432, 433, 434, 437, 438, 439, 440, 441, 1563, 442,
	444, 446, 524, 501, 502, 503, 504, 505, 507, 508,
	509, 510, 447, 448, 464, 315, 309, 265, 307, 308,
	312, 313, 316, 1541, 1491, 1496, 1498, 1499, 1501, 0,
	0, 0, 0, 0, 0, 0, 0, 1011, 0, 0,
	0, 0, 0, 0, 759, 0, 0, 981, 0, 0,
	1480, 991, 992, 993, 1022, 1024, 1008, 1051, 1072, 0,
	1123, 1169, 1139, 994, 1256, 1262, 995, 1323, 1327, 0,
	1005, 1053, 1002, 1103, 1118, 1133, 1145, 1001, 1006, 999,
	1260, 1007, 1404, 1415, 1435, 996, 997, 998, 1003, 1396,
	1453, 1222, 1381, 1033, 0, 1010, 1347, 0, 0, 1270,
	1385, 0, 0, 0, 1047, 0, 0, 0, 0, 1195,
	1184, 1218, 1331, 1156, 1276, 1084, 1243, 1421, 1313, 1232,
	0, 1427, 1345, 1046, 1112, 1096, 1148, 1213, 1354, 1029,
	1113, 1188, 1419, 1108, 1234, 0, 1075, 1278, 1420, 1383,
	1231, 1394, 1364, 1389, 1119, 1257, 1082, 1304, 1371, 1372,
	1042, 1155, 1077, 1430, 1027, 1087, 1095, 1265, 1066, 1273,
	1451, 1205, 1338, 1288, 1286, 0, 1245, 1314, 1446, 0,
	0, 1132, 0, 1126, 1264, 1438, 1073, 1412, 1307, 1269,
	1207, 1341, 1376, 1128, 1109, 1110, 1166, 1306, 1151, 1085,
	1426, 1202, 1206, 1204, 1200, 1197, 1201, 1198, 1199, 1203,
	1153, 1196, 0, 0, 1043, 1263, 1191, 1361, 1041, 1310,
	1149, 1122, 0, 0, 0, 1428, 1242, 1244, 0, 1397,
	1192, 1190, 1101, 1100, 1044, 1429, 1013, 1014, 1015, 1016,
	1017, 1018, 1019, 1020, 1021, 1023, 1025, 1026, 1030, 1031,
	1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1048, 1049,
	1050, 1052, 1055, 1056, 1057, 1059, 1060, 1061, 1062, 1063,
	1064, 1067, 1068, 1069, 1070, 1071, 1074, 1076, 1078, 1079,
	1080, 1081, 1083, 1086, 1088, 1089, 1090, 1091, 1092, 1093,
	1094, 1097, 1098, 0, 1099, 1102, 1104, 1105, 1106, 1107,
	1111, 1114, 1115, 1116, 1117, 1120, 1121, 1124, 1125, 1127,
	1129, 1130, 1131, 1134, 0, 1135, 1136, 1137, 1138, 1140,
	1141, 1142, 1143, 1144, 1146, 0, 0, 1147, 1150, 1152,
	1154, 1157, 1158, 1159, 1160, 0, 1161, 1162, 1163, 1164,
	1165, 1167, 0, 1168, 1170, 1171, 1172, 1173, 1174, 1175,
	1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1186, 1187,
	1189, 0, 1193, 1194, 1209, 1210, 1211, 1212, 1214, 1216,
	1217, 1215, 1219, 1220, 1221, 1223, 1224, 1225, 1226, 1227,
	1228, 1229, 1230, 1233, 1235, 1236, 0, 1237, 1238, 0,
	1239, 1240, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252,
	1253, 1254, 1255, 1258, 1259, 1261, 1275, 1277, 0, 1279,
	1280, 1281, 1282, 1283, 1284, 1285, 1287, 1289, 1290, 1291,
	1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301,
	1302, 1303, 1305, 1308, 1309, 1311, 1312, 1315, 1316, 1317,
	1318, 1319, 1320, 1321, 1322, 1324, 1325, 1326, 1328, 1329,
	1330, 1332, 1333, 1334, 1335, 1336, 1337, 1339, 1340, 1342,
	1343, 1344, 0, 1346, 1348, 1349, 1350, 1351, 1352, 1353,
	1356, 1355, 1357, 1358, 1359, 1360, 1362, 1363, 1365, 1366,
	1367, 1368, 1369, 1370, 1373, 1374, 1375, 1377, 1378, 1379,
	1380, 1382, 1384, 1386, 1388, 1387, 1390, 1391, 1392, 1393,
	1395, 1398, 1399, 1400, 1401, 1402, 1403, 1405, 1406, 1407,
	1408, 1409, 1410, 1411, 1413, 0, 1414, 1416, 1417, 1418,
	1422, 1423, 1424, 1425, 1431, 1432, 1433, 1434, 1436, 0,
	0, 1437, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1447,
	1448, 1449, 1450, 0, 1452, 1185, 1274, 1268, 1208, 1266,
	1267, 1271, 1272, 0, 0, 1028, 1045, 1054, 1058, 1065,
	0, 1000, 0, 0, 0, 0, 0, 0, 0, 0,
	988, 989, 990, 0, 0, 0, 0, 0, 0, 982,
	983, 984, 985, 986, 987, 1482, 0, 3413, 723, 0,
	0, 0, 0, 771, 0, 0, 0, 0, 0, 0,
	0, 0, 1487, 141, 1493, 158, 594, 1503, 207, 244,
	459, 1490, 1535, 304, 1540, 357, 361, 1564, 450, 1497,
	1500, 1510, 1513, 215, 1518, 599, 1526, 605, 1536, 611,
	1555, 426, 1561, 601, 602, 607, 146, 540, 449, 520,
	1549, 1495, 1553, 311, 1546, 1522, 1562, 1539, 1551, 1532,
	1537, 0, 154, 1524, 1525, 1529, 1538, 603, 600, 604,
	610, 598, 608, 595, 606, 1559, 348, 282, 0, 499,
	375, 153, 199, 186, 228, 270, 382, 1494, 1512, 260,
	430, 195, 284, 1545, 174, 317, 1558, 406, 281, 1552,
	389, 409, 1514, 301, 180, 340, 396, 397, 592, 597,
	1502, 613, 1489, 184, 185, 306, 166, 314, 511, 477,
	369, 327, 325, 1520, 292, 349, 506, 1492, 0, 214,
	0, 209, 305, 445, 172, 424, 343, 310, 264, 372,
	401, 211, 196, 197, 240, 342, 230, 182, 435, 474,
	478, 476, 472, 469, 473, 470, 471, 475, 231, 468,
	0, 443, 452, 486, 466, 494, 451, 491, 461, 206,
	490, 455, 454, 500, 481, 482, 436, 496, 467, 465,
	458, 457, 453, 1560, 131, 132, 133, 134, 135, 136,
	137, 138, 139, 140, 142, 1488, 143, 144, 145, 147,
	148, 149, 591, 150, 151, 152, 155, 156, 157, 159,
	519, 160, 161, 162, 163, 164, 165, 456, 593, 167,
	168, 169, 170, 171, 173, 175, 176, 177, 178, 179,
	181, 183, 1504, 1505, 1506, 596, 1507, 1508, 1509, 187,
	188, 189, 190, 191, 192, 1511, 193, 194, 198, 200,
	201, 202, 203, 204, 205, 208, 1515, 210, 212, 1516,
	213, 216, 1517, 217, 218, 219, 220, 221, 222, 223,
	224, 460, 225, 1519, 226, 227, 229, 1521, 232, 233,
	234, 235, 236, 1523, 237, 462, 463, 238, 239, 241,
	242, 243, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 1527, 257, 258, 259, 261, 1528,
	262, 263, 266, 267, 268, 269, 1530, 271, 479, 1531,
	272, 273, 274, 1533, 1534, 275, 276, 277, 278, 279,
	280, 283, 480, 285, 286, 287, 288, 289, 290, 291,
	521, 293, 294, 295, 296, 297, 298, 299, 483, 484,
	300, 302, 303, 485, 487, 488, 609, 318, 319, 320,
	321, 322, 323, 324, 326, 1542, 328, 329, 330, 489,
	331, 332, 333, 334, 1543, 335, 336, 337, 338, 339,
	341, 344, 345, 346, 347, 1544, 350, 351, 352, 353,
	354, 355, 356, 358, 359, 360, 362, 363, 364, 522,
	365, 366, 367, 368, 492, 370, 371, 523, 373, 374,
	376, 377, 378, 379, 380, 381, 538, 1547, 383, 493,
	384, 385, 386, 387, 388, 1548, 390, 391, 392, 393,
	394, 395, 398, 399, 400, 402, 403, 495, 404, 405,
	1550, 407, 408, 612, 410, 411, 412, 413, 414, 1554,
	539, 415, 497, 416, 498, 417, 418, 419, 420, 421,
	422, 423, 425, 1556, 1557, 427, 428, 429, 431, 432,
	433, 434, 437, 438, 439, 440, 441, 1563, 442, 444,
	446, 524, 501, 502, 503, 504, 505, 507, 508, 509,
	510, 447, 448, 464, 315, 309, 265, 307, 308, 312,
	313, 316, 1541, 1491, 1496, 1498, 1499, 1501, 1482, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1487, 141, 1493, 158, 594,
	1503, 207, 244, 459, 1490, 1535, 304, 1540, 357, 361,
	1564, 450, 1497, 1500, 1510, 1513, 215, 1518, 599, 1526,
	605, 1536, 611, 1555, 426, 1561, 601, 602, 607, 146,
	540, 449, 520, 1549, 1495, 1553, 311, 1546, 1522, 1562,
	1539, 1551, 1532, 1537, 0, 154, 1524, 1525, 1529, 1538,
	603, 600, 604, 610, 598, 608, 595, 606, 1559, 348,
	282, 0, 499, 375, 153, 199, 186, 228, 270, 382,
	1494, 1512, 260, 430, 195, 284, 1545, 174, 317, 1558,
	406, 281, 1552, 389, 409, 1514, 301, 180, 340, 396,
	397, 592, 597, 1502, 613, 1489, 184, 185, 306, 166,
	314, 511, 477, 369, 327, 325, 1520, 292, 349, 506,
	1492, 0, 214, 0, 209, 305, 445, 172, 424, 343,
	310, 264, 372, 401, 211, 196, 197, 240, 342, 230,
	182, 435, 474, 478, 476, 472, 469, 473, 470, 471,
	475, 231, 468, 0, 443, 452, 486, 466, 494, 451,
	491, 461, 206, 490, 455, 454, 500, 481, 482, 436,
	496, 467, 465, 458, 457, 453, 1560, 131, 132, 133,
	134, 135, 136, 137, 138, 139, 140, 142, 1488, 143,
	144, 145, 147, 148, 149, 591, 150, 151, 152, 155,
	156, 157, 159, 519, 160, 161, 162, 163, 164, 165,
	456, 593, 167, 168, 169, 170, 171, 173, 175, 176,
	177, 178, 179, 181, 183, 1504, 1505, 1506, 596, 1507,
	1508, 1509, 187, 188, 189, 190, 191, 192, 1511, 193,
	194, 198, 200, 201, 202, 203, 204, 205, 208, 1515,
	210, 212, 1516, 213, 216, 1517, 217, 218, 219, 220,
	221, 222, 223, 224, 460, 225, 1519, 226, 227, 229,
	1521, 232, 233, 234, 235, 236, 1523, 237, 462, 463,
	238, 239, 241, 242, 243, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 1527, 257, 258,
	259, 261, 1528, 262, 263, 266, 267, 268, 269, 1530,
	271, 479, 1531, 272, 273, 274, 1533, 1534, 275, 276,
	277, 278, 279, 280, 283, 480, 285, 286, 287, 288,
	289, 290, 291, 521, 293, 294, 295, 296, 297, 298,
	299, 483, 484, 300, 302, 303, 485, 487, 488, 609,
	318, 319, 320, 321, 322, 323, 324, 326, 1542, 328,
	329, 330, 489, 331, 332, 333, 334, 1543, 335, 336,
	337, 338, 339, 341, 344, 345, 346, 347, 1544, 350,
	351, 352, 353, 354, 355, 356, 358, 359, 360, 362,
	363, 364, 522, 365, 366, 367, 368, 492, 370, 371,
	523, 373, 374, 376, 377, 378, 379, 380, 381, 538,
	1547, 383, 493, 384, 385, 386, 387, 388, 1548, 390,
	391, 392, 393, 394, 395, 398, 399, 400, 402, 403,
	495, 404, 405, 1550, 407, 408, 612, 410, 411, 412,
	413, 414, 1554, 539, 415, 497, 416, 498, 417, 418,
	419, 420, 421, 422, 423, 425, 1556, 1557, 427, 428,
	429, 431, 432, 433, 434, 437, 438, 439, 440, 441,
	1563, 442, 444, 446, 524, 501, 502, 503, 504, 505,
	507, 508, 509, 510, 447, 448, 464, 315, 309, 265,
	307, 308, 312, 313, 316, 1541, 1491, 1496, 1498, 1499,
	1501, 1482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1487, 141,
	1493, 158, 594, 1503, 2023, 244, 459, 1490, 1535, 304,
	1540, 357, 361, 1564, 450, 1497, 1500, 1510, 1513, 215,
	1518, 599, 1526, 605, 1536, 611, 1555, 426, 1561, 601,
	602, 607, 146, 540, 449, 520, 1549, 1495, 1553, 311,
	1546, 1522, 1562, 1539, 1551, 1532, 1537, 0, 154, 1524,
	1525, 1529, 1538, 603, 600, 604, 610, 598, 608, 595,
	606, 1559, 348, 282, 0, 499, 375, 153, 199, 186,
	228, 270, 2021, 1494, 1512, 260, 430, 195, 284, 1545,
	174, 317, 1558, 406, 281, 1552, 389, 409, 1514, 301,
	180, 340, 396, 397, 592, 597, 1502, 613, 1489, 184,
	185, 306, 166, 314, 511, 477, 369, 327, 325, 1520,
	292, 349, 506, 1492, 0, 214, 0, 209, 305, 445,
	172, 424, 343, 310, 264, 372, 401, 211, 196, 197,
	240, 342, 230, 182, 435, 474, 478, 476, 472, 469,
	473, 470, 471, 475, 231, 468, 0, 443, 452, 486,
	466, 494, 451, 491, 461, 206, 490, 455, 454, 500,
	481, 482, 436, 496, 467, 465, 458, 457, 453, 1560,
	131, 132, 133, 134, 135, 2022, 137, 138, 139, 140,
	142, 1488, 143, 144, 145, 147, 148, 149, 591, 150,
	151, 152, 155, 156, 157, 159, 519, 160, 161, 162,
	163, 164, 165, 456, 593, 167, 168, 169, 170, 171,
	173, 175, 176, 177, 178, 179, 181, 183, 1504, 1505,
	1506, 596, 1507, 1508, 1509, 187, 188, 189, 190, 191,
	192, 1511, 193, 194, 198, 200, 201, 202, 203, 204,
	205, 208, 1515, 210, 212, 1516, 213, 216, 1517, 217,
	218, 219, 220, 221, 222, 223, 224, 460, 225, 1519,
	226, 227, 229, 1521, 232, 233, 234, 235, 236, 1523,
	237, 462, 463, 238, 239, 241, 242, 243, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	1527, 257, 258, 259, 261, 1528, 262, 263, 266, 267,
	268, 269, 1530, 271, 479, 1531, 272, 273, 274, 1533,
	1534, 275, 276, 277, 278, 279, 280, 283, 480, 285,
	286, 287, 288, 289, 290, 291, 521, 293, 294, 295,
	296, 297, 298, 299, 483, 484, 300, 302, 303, 485,
	487, 488, 609, 318, 319, 320, 321, 322, 323, 324,
	326, 1542, 328, 329, 330, 489, 331, 332, 333, 334,
	1543, 335, 336, 337, 338, 339, 341, 344, 345, 346,
	347, 1544, 350, 351, 352, 353, 354, 355, 356, 358,
	359, 360, 362, 363, 364, 522, 365, 366, 367, 368,
	492, 370, 371, 523, 373, 374, 376, 377, 378, 379,
	380, 381, 538, 1547, 383, 493, 384, 385, 386, 387,
	388, 1548, 390, 391, 392, 393, 394, 395, 398, 399,
	400, 402, 403, 495, 404, 405, 1550, 407, 408, 612,
	410, 411, 412, 413, 414, 1554, 539, 415, 497, 416,
	498, 417, 418, 419, 420, 421, 422, 423, 425, 1556,
	1557, 427, 428, 429, 431, 432, 433, 434, 437, 438,
	439, 440, 441, 1563, 442, 444, 446, 524, 501, 502,
	503, 504, 505, 507, 508, 509, 510, 447, 448, 464,
	315, 309, 265, 307, 308, 312, 313, 316, 1541, 1491,
	1496, 1498, 1499, 1501, 686, 0, 956, 723, 0, 0,
	0, 1813, 771, 0, 0, 0, 0, 0, 1824, 1825,
	1826, 1487, 141, 1493, 158, 594, 1503, 207, 244, 0,
	1490, 1535, 304, 1540, 357, 361, 1564, 0, 1497, 1500,
	1510, 1513, 215, 1518, 599, 1526, 605, 1536, 611, 1555,
	426, 1561, 601, 602, 607, 146, 685, 449, 520, 1549,
	1495, 1553, 2568, 1546, 1522, 1562, 1539, 1551, 1532, 1537,
	0, 154, 1524, 1525, 1529, 1538, 603, 600, 604, 610,
	598, 608, 595, 606, 1559, 348, 282, 0, 0, 375,
	153, 199, 186, 228, 270, 382, 1494, 1512, 260, 430,
	195, 284, 1545, 174, 317, 1558, 406, 281, 1552, 389,
	409, 1514, 301, 180, 340, 396, 397, 592, 597, 1502,
	613, 1489, 184, 185, 306, 166, 314, 0, 0, 369,
	327, 325, 1520, 292, 349, 0, 1492, 0, 214, 0,
	209, 305, 445, 172, 424, 343, 310, 264, 372, 401,
	211, 196, 197, 240, 342, 230, 182, 435, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 231, 0, 0,
	443, 688, 678, 670, 671, 672, 673, 674, 675, 0,
	690, 691, 692, 693, 694, 436, 684, 0, 669, 676,
	677, 679, 1560, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 142, 1488, 143, 144, 145, 147, 148,
	149, 591, 150, 151, 152, 155, 156, 157, 159, 519,
	160, 161, 162, 163, 164, 165, 0, 593, 167, 168,
	169, 170, 171, 173, 175, 176, 177, 178, 179, 181,
	183, 1504, 1505, 1506, 596, 1507, 1508, 1509, 187, 188,
	189, 190, 191, 192, 1511, 193, 194, 198, 200, 201,
	202, 203, 204, 205, 208, 1515, 210, 212, 1516, 213,
	216, 1517, 217, 218, 219, 220, 221, 222, 223, 224,
	0, 225, 1519, 226, 227, 229, 1521, 232, 233, 234,
	235, 236, 1523, 237, 0, 0, 238, 239, 241, 242,
	243, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 1527, 257, 258, 259, 261, 1528, 262,
	263, 266, 267, 268, 269, 1530, 271, 0, 1531, 272,
	273, 274, 1533, 1534, 275, 276, 277, 278, 279, 280,
	283, 0, 285, 286, 287, 288, 289, 290, 291, 521,
	293, 294, 295, 296, 297, 298, 299, 2566, 0, 300,
	302, 303, 0, 0, 0, 609, 318, 319, 320, 321,
	322, 323, 324, 326, 1542, 328, 329, 330, 0, 331,
	332, 333, 334, 1543, 335, 336, 337, 338, 339, 341,
	344, 345, 346, 347, 1544, 350, 351, 352, 353, 354,
	355, 356, 358, 359, 360, 362, 363, 364, 522, 365,
	366, 367, 368, 0, 370, 371, 523, 373, 374, 376,
	377, 378, 379, 380, 381, 538, 1547, 383, 1946, 384,
	385, 386, 387, 388, 1548, 390, 391, 392, 393, 394,
	395, 398, 399, 400, 402, 403, 0, 404, 405, 1550,
	407, 408, 612, 410, 411, 412, 413, 414, 1554, 539,
	415, 0, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 425, 1556, 1557, 427, 428, 429, 431, 432, 433,
	434, 437, 438, 439, 440, 441, 1563, 442, 444, 446,
	524, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	447, 448, 0, 315, 309, 265, 307, 308, 312, 313,
	316, 1541, 1491, 1496, 1498, 1499, 1501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1821, 1822, 1823,
	0, 0, 0, 0, 0, 0, 2569, 2570, 1817, 1818,
	1819, 1820, 588, 0, 763, 723, 0, 0, 0, 759,
	771, 749, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 158, 594, 0, 207, 244, 754, 0, 745,
	304, 0, 357, 361, 36, 450, 768, 0, 0, 0,
	215, 766, 599, 0, 605, 767, 611, 765, 426, 0,
	601, 602, 607, 146, 540, 449, 520, 0, 0, 0,
	760, 33, 0, 0, 0, 34, 0, 0, 0, 154,
	0, 0, 0, 0, 603, 600, 604, 610, 598, 608,
	595, 606, 0, 348, 282, 0, 1462, 375, 153, 199,
	186, 228, 270, 382, 0, 0, 260, 430, 195, 284,
	0, 174, 317, 0, 406, 281, 0, 389, 409, 0,
	301, 180, 340, 396, 397, 592, 597, 0, 613, 0,
	184, 185, 306, 166, 314, 511, 477, 369, 327, 325,
	0, 292, 349, 506, 755, 0, 214, 0, 209, 305,
	445, 172, 424, 343, 310, 264, 372, 401, 211, 196,
	197, 240, 342, 230, 182, 435, 474, 478, 476, 472,
	469, 473, 470, 471, 475, 231, 468, 0, 443, 452,
	486, 466, 494, 451, 491, 461, 206, 490, 455, 454,
	500, 481, 482, 436, 496, 467, 465, 458, 457, 453,
	0, 131, 132, 133, 134, 135, 136, 137, 138, 139,
	140, 142, 0, 143, 144, 145, 147, 148, 149, 591,
	150, 151, 152, 155, 156, 157, 159, 519, 160, 161,
	162, 163, 164, 165, 456, 593, 167, 168, 169, 170,
	171, 173, 175, 176, 177, 178, 179, 181, 183, 0,
	0, 0, 596, 0, 0, 0, 187, 188, 189, 190,
	191, 192, 0, 193, 194, 198, 200, 201, 202, 203,
	204, 205, 208, 0, 210, 212, 0, 213, 216, 0,
	217, 218, 219, 220, 221, 222, 223, 224, 460, 225,
	0, 226, 227, 229, 0, 232, 233, 234, 235, 236,
	0, 237, 462, 758, 238, 239, 241, 242, 243, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 0, 257, 258, 259, 261, 0, 262, 263, 266,
	267, 268, 269, 0, 271, 479, 0, 272, 273, 274,
	0, 0, 275, 276, 277, 278, 279, 280, 283, 480,
	285, 286, 287, 288, 289, 290, 291, 521, 293, 294,
	295, 296, 297, 298, 299, 483, 484, 300, 302, 303,
	485, 487, 488, 609, 318, 319, 320, 321, 322, 323,
	324, 326, 0, 328, 329, 330, 489, 331, 332, 333,
	334, 0, 335, 336, 337, 338, 339, 341, 344, 345,
	346, 347, 0, 350, 351, 352, 353, 354, 355, 356,
	358, 359, 360, 362, 363, 364, 522, 365, 366, 367,
	368, 770, 370, 371, 523, 373, 374, 376, 377, 378,
	379, 380, 381, 538, 0, 383, 493, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 393, 394, 395, 398,
	399, 400, 402, 403, 495, 404, 405, 0, 407, 408,
	612, 410, 411, 412, 413, 414, 0, 539, 415, 497,
	416, 498, 417, 418, 419, 420, 421, 422, 423, 425,
	0, 0, 427, 428, 429, 431, 432, 433, 434, 437,
	438, 439, 440, 441, 0, 442, 444, 446, 524, 501,
	502, 503, 504, 505, 507, 508, 509, 510, 447, 448,
	464, 315, 309, 265, 307, 308, 312, 313, 316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 37, 588,
	0, 763, 723, 0, 0, 0, 759, 771, 749, 0,
	0, 750, 0, 0, 743, 744, 1836, 141, 0, 158,
	594, 0, 207, 244, 754, 0, 745, 304, 0, 357,
	361, 0, 450, 768, 0, 0, 1837, 215, 766, 599,
	0, 605, 767, 611, 765, 426, 0, 601, 602, 607,
	146, 540, 449, 520, 0, 0, 0, 760, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 603, 600, 604, 610, 598, 608, 595, 606, 0,
	348, 282, 0, 499, 375, 153, 199, 186, 228, 270,
	382, 0, 0, 260, 430, 195, 284, 0, 174, 317,
	0, 406, 281, 0, 389, 409, 0, 301, 180, 340,
	396, 397, 592, 597, 0, 613, 0, 184, 185, 306,
	166, 314, 511, 477, 369, 327, 325, 0, 292, 349,
	506, 755, 0, 214, 0, 209, 305, 445, 172, 424,
	343, 310, 264, 372, 401, 211, 196, 197, 240, 342,
	230, 182, 435, 474, 478, 476, 472, 469, 473, 470,
	471, 475, 231, 468, 0, 443, 452, 486, 466, 494,
	451, 491, 461, 206, 490, 455, 454, 500, 481, 482,
	436, 496, 467, 465, 458, 457, 453, 1835, 131, 132,
	133, 134, 135, 136, 137, 138, 139, 140, 142, 0,
	143, 144, 145, 147, 148, 149, 591, 150, 151, 152,
	155, 156, 157, 159, 519, 160, 161, 162, 163, 164,
	165, 456, 593, 167, 168, 169, 170, 171, 173, 175,
	176, 177, 178, 179, 181, 183, 0, 0, 0, 596,
	0, 0, 0, 187, 188, 189, 190, 191, 192, 0,
	193, 194, 198, 200, 201, 202, 203, 204, 205, 208,
	0, 210, 212, 0, 213, 216, 0, 217, 218, 219,
	220, 221, 222, 223, 224, 460, 225, 0, 226, 227,
	229, 0, 232, 233, 234, 235, 236, 0, 237, 462,
	758, 238, 239, 241, 242, 243, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 0, 257,
	258, 259, 261, 0, 262, 263, 266, 267, 268, 269,
	0, 271, 479, 0, 272, 273, 274, 0, 0, 275,
	276, 277, 278, 279, 280, 283, 480, 285, 286, 287,
	288, 289, 290, 291, 521, 293, 294, 295, 296, 297,
	298, 299, 483, 484, 300, 302, 303, 485, 487, 488,
	609, 318, 319, 320, 321, 322, 323, 324, 326, 0,
	328, 329, 330, 489, 331, 332, 333, 334, 0, 335,
	336, 337, 338, 339, 341, 344, 345, 346, 347, 0,
	350, 351, 352, 353, 354, 355, 356, 358, 359, 360,
	362, 363, 364, 522, 365, 366, 367, 368, 770, 370,
	371, 523, 373, 374, 376, 377, 378, 379, 380, 381,
	538, 0, 383, 493, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 393, 394, 395, 398, 399, 400, 402,
	403, 495, 404, 405, 0, 407, 408, 612, 410, 411,
	412, 413, 414, 0, 539, 415, 497, 416, 498, 417,
	418, 419, 420, 421, 422, 423, 425, 0, 0, 427,
	428, 429, 431, 432, 433, 434, 437, 438, 439, 440,
	441, 0, 442, 444, 446, 524, 501, 502, 503, 504,
	505, 507, 508, 509, 510, 447, 448, 464, 315, 309,
	265, 307, 308, 312, 313, 316, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 588, 0, 763, 723, 0,
	0, 0, 759, 771, 749, 0, 0, 0, 750, 1833,
	0, 743, 744, 141, 0, 158, 594, 0, 207, 244,
	754, 0, 745, 304, 0, 357, 361, 0, 450, 768,
	0, 0, 0, 215, 766, 599, 0, 605, 767, 611,
	765, 426, 0, 601, 602, 607, 146, 540, 449, 520,
	0, 0, 0, 760, 0, 0, 0, 0, 0, 0,
	0, 0, 154, 0, 0, 0, 0, 603, 600, 604,
	610, 598, 608, 595, 606, 0, 348, 282, 0, 499,
	375, 153, 199, 186, 228, 270, 382, 0, 0, 260,
	430, 195, 284, 0, 174, 317, 0, 406, 281, 0,
	389, 409, 0, 301, 180, 340, 396, 397, 592, 597,
	0, 613, 0, 184, 185, 306, 166, 314, 511, 477,
	369, 327, 325, 0, 292, 349, 506, 755, 0, 214,
	0, 209, 305, 445, 172, 424, 343, 310, 264, 372,
	401, 211, 196, 197, 240, 342, 230, 182, 435, 474,
	478, 476, 472, 469, 473, 470, 471, 475, 231, 468,
	0, 443, 452, 486, 466, 494, 451, 491, 461, 206,
	490, 455, 454, 500, 481, 482, 436, 496, 467, 465,
	458, 457, 453, 0, 131, 132, 133, 134, 135, 136,
	137, 138, 139, 140, 142, 0, 143, 144, 145, 147,
	148, 149, 591, 150, 151, 152, 155, 156, 157, 159,
	519, 160, 161, 162, 163, 164, 165, 456, 593, 167,
	168, 169, 170, 171, 173, 175, 176, 177, 178, 179,
	181, 183, 0, 0, 0, 596, 0, 0, 0, 187,
	188, 189, 190, 191, 192, 0, 193, 194, 198, 200,
	201, 202, 203, 204, 205, 208, 0, 210, 212, 0,
	213, 216, 0, 217, 218, 219, 220, 221, 222, 223,
	224, 460, 225, 0, 226, 227, 229, 0, 232, 233,
	234, 235, 236, 0, 237, 462, 758, 238, 239, 241,
	242, 243, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 0, 257, 258, 259, 261, 0,
	262, 263, 266, 267, 268, 269, 0, 271, 479, 0,
	272, 273, 274, 0, 0, 275, 276, 277, 278, 279,
	280, 283, 480, 285, 286, 287, 288, 289, 290, 291,
	521, 293, 294, 295, 296, 297, 298, 299, 483, 484,
	300, 302, 303, 485, 487, 488, 609, 318, 319, 320,
	321, 322, 323, 324, 326, 0, 328, 329, 330, 489,
	331, 332, 333, 334, 0, 335, 336, 337, 338, 339,
	341, 344, 345, 346, 347, 0, 350, 351, 352, 353,
	354, 355, 356, 358, 359, 360, 362, 363, 364, 522,
	365, 366, 367, 368, 770, 370, 371, 523, 373, 374,
	376, 377, 378, 379, 380, 381, 538, 0, 383, 493,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 393,
	394, 395, 398, 399, 400, 402, 403, 495, 404, 405,
	0, 407, 408, 612, 410, 411, 412, 413, 414, 0,
	539, 415, 497, 416, 498, 417, 418, 419, 420, 421,
	422, 423, 425, 0, 0, 427, 428, 429, 431, 432,
	433, 434, 437, 438, 439, 440, 441, 0, 442, 444,
	446, 524, 501, 502, 503, 504, 505, 507, 508, 509,
	510, 447, 448, 464, 315, 309, 265, 307, 308, 312,
	313, 316, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 588, 0, 763, 723, 0, 0, 0, 759,
	771, 749, 0, 0, 750, 0, 0, 743, 744, 741,
	141, 0, 158, 594, 0, 207, 244, 754, 0, 745,
	304, 0, 357, 361, 0, 450, 768, 0, 0, 0,
	215, 766, 599, 0, 605, 767, 611, 765, 426, 0,
	601, 602, 607, 146, 540, 449, 520, 0, 0, 0,
	760, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 603, 600, 604, 610, 598, 608,
	595, 606, 0, 348, 282, 0, 499, 375, 153, 199,
	186, 228, 270, 382, 0, 0, 260, 430, 195, 284,
	0, 174, 317, 0, 406, 281, 0, 389, 409, 0,
	301, 180, 340, 396, 397, 592, 597, 0, 613, 0,
	184, 185, 306, 166, 314, 511, 477, 369, 327, 325,
	0, 292, 349, 506, 755, 0, 214, 0, 209, 305,
	445, 172, 424, 343, 310, 264, 372, 401, 211, 196,
	197, 240, 342, 230, 182, 435, 474, 478, 476, 472,
	469, 473, 470, 471, 475, 231, 468, 0, 443, 452,
	486, 466, 494, 451, 491, 461, 206, 490, 455, 454,
	500, 481, 482, 436, 496, 467, 465, 458, 457, 453,
	0, 131, 132, 133, 134, 135, 136, 137, 138, 139,
	140, 142, 0, 143, 144, 145, 147, 148, 149, 591,
	150, 151, 152, 155, 156, 157, 159, 519, 160, 161,
	162, 163, 164, 165, 456, 593, 167, 168, 169, 170,
	171, 173, 175, 176, 177, 178, 179, 181, 183, 0,
	0, 0, 596, 0, 0, 0, 187, 188, 189, 190,
	191, 192, 0, 193, 194, 198, 200, 201, 202, 203,
	204, 205, 208, 0, 210, 212, 0, 213, 216, 0,
	217, 218, 219, 220, 221, 222, 223, 224, 460, 225,
	0, 226, 227, 229, 0, 232, 233, 234, 235, 236,
	0, 237, 462, 758, 238, 239, 241, 242, 243, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 0, 257, 258, 259, 261, 0, 262, 263, 266,
	267, 268, 269, 0, 271, 479, 0, 272, 273, 274,
	0, 0, 275, 276, 277, 278, 279, 280, 283, 480,
	285, 286, 287, 288, 289, 290, 291, 521, 293, 294,
	295, 296, 297, 298, 299, 483, 484, 300, 302, 303,
	485, 487, 488, 609, 318, 319, 320, 321, 322, 323,
	324, 326, 0, 328, 329, 330, 489, 331, 332, 333,
	334, 0, 335, 336, 337, 338, 339, 341, 344, 345,
	346, 347, 0, 350, 351, 352, 353, 354, 355, 356,
	358, 359, 360, 362, 363, 364, 522, 365, 366, 367,
	368, 770, 370, 371, 523, 373, 374, 376, 377, 378,
	379, 380, 381, 538, 0, 383, 493, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 393, 394, 395, 398,
	399, 400, 402, 403, 495, 404, 405, 0, 407, 408,
	612, 410, 411, 412, 413, 414, 0, 539, 415, 497,
	416, 498, 417, 418, 419, 420, 421, 422, 423, 425,
	0, 0, 427, 428, 429, 431, 432, 433, 434, 437,
	438, 439, 440, 441, 0, 442, 444, 446, 524, 501,
	502, 503, 504, 505, 507, 508, 509, 510, 447, 448,
	464, 315, 309, 265, 307, 308, 312, 313, 316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 588, 0,
	763, 723, 0, 0, 0, 759, 771, 749, 0, 1467,
	1807, 750, 0, 0, 743, 744, 141, 0, 158, 594,
	0, 207, 244, 754, 0, 745, 304, 0, 357, 361,
	0, 450, 768, 0, 0, 0, 215, 766, 599, 0,
	605, 767, 611, 765, 426, 0, 601, 602, 607, 146,
	540, 449, 520, 0, 0, 0, 760, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	603, 600, 604, 610, 598, 608, 595, 606, 0, 348,
	282, 0, 499, 375, 153, 199, 186, 228, 270, 382,
	0, 0, 260, 430, 195, 284, 0, 174, 317, 0,
	406, 281, 0, 389, 409, 0, 301, 180, 340, 396,
	397, 592, 597, 0, 613, 0, 184, 185, 306, 166,
	314, 511, 477, 369, 327, 325, 0, 292, 349, 506,
	755, 0, 214, 0, 209, 305, 445, 172, 424, 343,
	310, 264, 372, 401, 211, 196, 197, 240, 342, 230,
	182, 435, 474, 478, 476, 472, 469, 473, 470, 471,
	475, 231, 468, 0, 443, 452, 486, 466, 494, 451,
	491, 461, 206, 490, 455, 454, 500, 481, 482, 436,
	496, 467, 465, 458, 457, 453, 2399, 131, 132, 133,
	134, 135, 136, 137, 138, 139, 140, 142, 0, 143,
	144, 145, 147, 148, 149, 591, 150, 151, 152, 155,
	156, 157, 159, 519, 160, 161, 162, 163, 164, 165,
	456, 593, 167, 168, 169, 170, 171, 173, 175, 176,
	177, 178, 179, 181, 183, 0, 0, 0, 596, 0,
	0, 0, 187, 188, 189, 190, 191, 192, 0, 193,
	194, 198, 200, 201, 202, 203, 204, 205, 208, 0,
	210, 212, 0, 213, 216, 0, 217, 218, 219, 220,
	221, 222, 223, 224, 460, 225, 0, 226, 227, 229,
	0, 232, 233, 234, 235, 236, 0, 237, 462, 758,
	238, 239, 241, 242, 243, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 0, 257, 258,
	259, 261, 0, 262, 263, 266, 267, 268, 269, 0,
	271, 479, 0, 272, 273, 274, 0, 0, 275, 276,
	277, 278, 279, 280, 283, 480, 285, 286, 287, 288,
	289, 290, 291, 521, 293, 294, 295, 296, 297, 298,
	299, 483, 484, 300, 302, 303, 485, 487, 488, 609,
	318, 319, 320, 321, 322, 323, 324, 326, 0, 328,
	329, 330, 489, 331, 332, 333, 334, 0, 335, 336,
	337, 338, 339, 341, 344, 345, 346, 347, 0, 350,
	351, 352, 353, 354, 355, 356, 358, 359, 360, 362,
	363, 364, 522, 365, 366, 367, 368, 770, 370, 371,
	523, 373, 374, 376, 377, 378, 379, 380, 381, 538,
	0, 383, 493, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 393, 394, 395, 398, 399, 400, 402, 403,
	495, 404, 405, 0, 407, 408, 612, 410, 411, 412,
	413, 414, 0, 539, 415, 497, 416, 498, 417, 418,
	419, 420, 421, 422, 423, 425, 0, 0, 427, 428,
	429, 431, 432, 433, 434, 437, 438, 439, 440, 441,
	0, 442, 444, 446, 524, 501, 502, 503, 504, 505,
	507, 508, 509, 510, 447, 448, 464, 315, 309, 265,
	307, 308, 312, 313, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 588, 0, 763, 723, 0, 0,
	0, 759, 771, 749, 0, 0, 0, 750, 0, 0,
	743, 744, 141, 0, 158, 594, 0, 207, 244, 754,
	0, 745, 304, 0, 357, 361, 0, 450, 768, 0,
	0, 0, 215, 766, 599, 0, 605, 767, 611, 765,
	426, 0, 601, 602, 607, 146, 540, 449, 520, 0,
	0, 0, 760, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 603, 600, 604, 610,
	598, 608, 595, 606, 0, 348, 282, 0, 499, 375,
	153, 199, 186, 228, 270, 382, 0, 0, 260, 430,
	195, 284, 0, 174, 317, 0, 406, 281, 0, 389,
	409, 0, 301, 180, 340, 396, 397, 592, 597, 0,
	613, 0, 184, 185, 306, 166, 314, 511, 477, 369,
	327, 325, 0, 292, 349, 506, 755, 0, 214, 0,
	209, 305, 445, 172, 424, 343, 310, 264, 372, 401,
	211, 196, 197, 240, 342, 230, 182, 435, 474, 478,
	476, 472, 469, 473, 470, 471, 475, 231, 468, 0,
	443, 452, 486, 466, 494, 451, 491, 461, 206, 490,
	455, 454, 500, 481, 482, 436, 496, 467, 465, 458,
	457, 453, 0, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 142, 0, 143, 144, 145, 147, 148,
	149, 591, 150, 151, 152, 155, 156, 157, 159, 519,
	160, 161, 162, 163, 164, 165, 456, 593, 167, 168,
	169, 170, 171, 173, 175, 176, 177, 178, 179, 181,
	183, 0, 0, 0, 596, 0, 0, 0, 187, 188,
	189, 190, 191, 192, 0, 193, 194, 198, 200, 201,
	202, 203, 204, 205, 208, 0, 210, 212, 0, 213,
	216, 0, 217, 218, 219, 220, 221, 222, 223, 224,
	460, 225, 0, 226, 227, 229, 0, 232, 233, 234,
	235, 236, 0, 237, 462, 758, 238, 239, 241, 242,
	243, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 0, 257, 258, 259, 261, 0, 262,
	263, 266, 267, 268, 269, 0, 271, 479, 0, 272,
	273, 274, 0, 0, 275, 276, 277, 278, 279, 280,
	283, 480, 285, 286, 287, 288, 289, 290, 291, 521,
	293, 294, 295, 296, 297, 298, 299, 483, 484, 300,
	302, 303, 485, 487, 488, 609, 318, 319, 320, 321,
	322, 323, 324, 326, 0, 328, 329, 330, 489, 331,
	332, 333, 334, 0, 335, 336, 337, 338, 339, 341,
	344, 345, 346, 347, 0, 350, 351, 352, 353, 354,
	355, 356, 358, 359, 360, 362, 363, 364, 522, 365,
	366, 367, 368, 770, 370, 371, 523, 373, 374, 376,
	377, 378, 379, 380, 381, 538, 0, 383, 493, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 393, 394,
	395, 398, 399, 400, 402, 403, 495, 404, 405, 0,
	407, 408, 612, 410, 411, 412, 413, 414, 0, 539,
	415, 497, 416, 498, 417, 418, 419, 420, 421, 422,
	423, 425, 0, 0, 427, 428, 429, 431, 432, 433,
	434, 437, 438, 439, 440, 441, 0, 442, 444, 446,
	524, 501, 502, 503, 504, 505, 507, 508, 509, 510,
	447, 448, 464, 315, 309, 265, 307, 308, 312, 313,
	316, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	588, 0, 763, 723, 0, 0, 0, 759, 771, 749,
	0, 0, 0, 750, 1832, 0, 743, 744, 141, 0,
	158, 594, 0, 207, 244, 754, 0, 745, 304, 0,
	357, 361, 0, 450, 768, 0, 0, 0, 215, 766,
	599, 0, 605, 767, 611, 765, 426, 0, 601, 602,
	607, 146, 540, 449, 520, 0, 0, 0, 760, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 603, 600, 604, 610, 598, 608, 595, 606,
	0, 348, 282, 0, 499, 375, 153, 199, 186, 228,
	270, 382, 0, 0, 260, 430, 195, 284, 0, 174,
	317, 0, 406, 281, 0, 389, 409, 0, 301, 180,
	340, 396, 397, 592, 597, 0, 613, 0, 184, 185,
	306, 166, 314, 511, 477, 369, 327, 325, 0, 292,
	349, 506, 755, 0, 214, 0, 209, 305, 445, 172,
	424, 343, 310, 264, 372, 401, 211, 196, 197, 240,
	342, 230, 182, 435, 474, 478, 476, 472, 469, 473,
	470, 471, 475, 231, 468, 0, 443, 452, 486, 466,
	494, 451, 491, 461, 206, 490, 455, 454, 500, 481,
	482, 436, 496, 467, 465, 458, 457, 453, 0, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 142,
	0, 143, 144, 145, 147, 148, 149, 591, 150, 151,
	152, 155, 156, 157, 159, 519, 160, 161, 162, 163,
	164, 165, 456, 593, 167, 168, 169, 170, 171, 173,
	175, 176, 177, 178, 179, 181, 183, 0, 0, 0,
	596, 0, 0, 0, 187, 188, 189, 190, 191, 192,
	0, 193, 194, 198, 200, 201, 202, 203, 204, 205,
	208, 0, 210, 212, 0, 213, 216, 0, 217, 218,
	219, 220, 221, 222, 223, 224, 460, 225, 0, 226,
	227, 229, 0, 232, 233, 234, 235, 236, 0, 237,
	462, 758, 238, 239, 241, 242, 243, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 0,
	257, 258, 259, 261, 0, 262, 263, 266, 267, 268,
	269, 0, 271, 479, 0, 272, 273, 274, 0, 0,
	275, 276, 277, 278, 279, 280, 283, 480, 285, 286,
	287, 288, 289, 290, 291, 521, 293, 294, 295, 296,
	297, 298, 299, 483, 484, 300, 302, 303, 485, 487,
	488, 609, 318, 319, 320, 321, 322, 323, 324, 326,
	0, 328, 329, 330, 489, 331, 332, 333, 334, 0,
	335, 336, 337, 338, 339, 341, 344, 345, 346, 347,
	0, 350, 351, 352, 353, 354, 355, 356, 358, 359,
	360, 362, 363, 364, 522, 365, 366, 367, 368, 770,
	370, 371, 523, 373, 374, 376, 377, 378, 379, 380,
	381, 538, 0, 383, 493, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 393, 394, 395, 398, 399, 400,
	402, 403, 495, 404, 405, 0, 407, 408, 612, 410,
	411, 412, 413, 414, 0, 539, 415, 497, 416, 498,
	417, 418, 419, 420, 421, 422, 423, 425, 0, 0,
	427, 428, 429, 431, 432, 433, 434, 437, 438, 439,
	440, 441, 0, 442, 444, 446, 524, 501, 502, 503,
	504, 505, 507, 508, 509, 510, 447, 448, 464, 315,
	309, 265, 307, 308, 312, 313, 316, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 588, 0, 763, 723,
	0, 0, 0, 759, 771, 749, 0, 0, 0, 750,
	0, 0, 743, 744, 141, 0, 158, 594, 0, 207,
	244, 754, 0, 745, 304, 0, 357, 361, 0, 450,
	768, 0, 0, 0, 215, 766, 599, 0, 605, 767,
	611, 765, 426, 0, 601, 602, 607, 146, 540, 449,
	520, 0, 0, 0, 760, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 603, 600,
	604, 610, 598, 608, 595, 606, 0, 348, 282, 0,
	499, 375, 153, 199, 186, 228, 270, 382, 0, 0,
	260, 430, 195, 284, 0, 174, 317, 0, 406, 281,
	0, 389, 409, 0, 301, 180, 340, 396, 397, 592,
	597, 0, 613, 0, 2164, 185, 306, 166, 314, 511,
	477, 369, 327, 325, 0, 292, 349, 506, 755, 0,
	214, 0, 209, 305, 445, 172, 424, 343, 310, 264,
	372, 401, 211, 196, 197, 240, 342, 230, 182, 435,
	474, 478, 476, 472, 469, 473, 470, 471, 475, 231,
	468, 0, 443, 452, 486, 466, 494, 451, 491, 461,
	206, 490, 455, 454, 500, 481, 482, 436, 496, 467,
	465, 458, 457, 453, 0, 131, 132, 133, 134, 135,
	136, 137, 138, 139, 140, 142, 0, 143, 144, 145,
	147, 148, 149, 591, 150, 151, 152, 155, 156, 157,
	159, 519, 160, 161, 162, 163, 164, 165, 456, 593,
	167, 168, 169, 170, 171, 173, 175, 176, 177, 178,
	179, 181, 183, 0, 0, 0, 596, 0, 0, 0,
	187, 188, 189, 190, 191, 192, 0, 193, 194, 198,
	200, 201, 202, 203, 204, 205, 208, 0, 210, 212,
	0, 213, 216, 0, 217, 218, 219, 220, 221, 222,
	223, 224, 460, 225, 0, 226, 227, 229, 0, 232,
	233, 234, 235, 236, 0, 237, 462, 758, 238, 239,
	241, 242, 243, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 0, 257, 258, 259, 261,
	0, 262, 263, 266, 267, 268, 269, 0, 271, 479,
	0, 272, 273, 274, 0, 0, 275, 276, 277, 278,
	279, 280, 283, 480, 285, 286, 287, 288, 289, 290,
	291, 521, 293, 294, 295, 296, 297, 298, 299, 483,
	484, 300, 302, 303, 485, 487, 488, 609, 318, 319,
	320, 321, 322, 323, 324, 326, 0, 328, 329, 330,
	489, 331, 332, 333, 334, 0, 335, 336, 337, 338,
	339, 341, 344, 345, 346, 347, 0, 350, 351, 352,
	353, 354, 355, 356, 358, 359, 360, 362, 363, 364,
	522, 365, 366, 367, 368, 770, 370, 371, 523, 373,
	374, 376, 377, 378, 379, 380, 381, 538, 0, 383,
	493, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	393, 394, 395, 398, 399, 400, 402, 403, 495, 404,
	405, 0, 407, 408, 612, 410, 411, 412, 413, 414,
	0, 539, 415, 497, 416, 498, 417, 418, 419, 420,
	421, 422, 423, 425, 0, 0, 427, 428, 429, 431,
	432, 433, 434, 437, 438, 439, 440, 441, 0, 442,
	444, 446, 524, 501, 502, 503, 504, 505, 507, 508,
	509, 510, 447, 448, 464, 315, 309, 265, 307, 308,
	312, 313, 316, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 588, 0, 763, 723, 0, 0, 0, 0,
	771, 749, 0, 0, 0, 750, 0, 0, 743, 744,
	141, 0, 158, 594, 0, 207, 244, 754, 0, 0,
	304, 0, 357, 361, 0, 450, 768, 0, 2821, 0,
	215, 766, 599, 0, 605, 767, 611, 765, 426, 0,
	601, 602, 607, 146, 540, 449, 520, 0, 0, 0,
	311, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 603, 600, 604, 610, 598, 608,
	595, 606, 0, 348, 282, 0, 499, 375, 153, 199,
	186, 228, 270, 382, 0, 0, 260, 430, 195, 284,
	0, 174, 317, 0, 406, 281, 0, 389, 409, 0,
	301, 180, 340, 396, 397, 592, 597, 0, 613, 0,
	184, 185, 306, 166, 314, 511, 477, 369, 327, 325,
	0, 292, 349, 506, 755, 0, 214, 0, 209, 305,
	445, 172, 424, 343, 310, 264, 372, 401, 211, 196,
	197, 240, 342, 230, 182, 435, 474, 478, 476, 472,
	469, 473, 470, 471, 475, 231, 468, 0, 443, 452,
	486, 466, 494, 451, 491, 461, 206, 490, 455, 454,
	500, 481, 482, 436, 496, 467, 465, 458, 457, 453,
	0, 131, 132, 133, 134, 135, 136, 137, 138, 139,
	140, 142, 0, 143, 144, 145, 147, 148, 149, 591,
	150, 151, 152, 155, 156, 157, 159, 519, 160, 161,
	162, 163, 164, 165, 456, 593, 167, 168, 169, 170,
	171, 173, 175, 176, 177, 178, 179, 181, 183, 0,
	0, 0, 596, 0, 0, 0, 187, 188, 189, 190,
	191, 192, 0, 193, 194, 198, 200, 201, 202, 203,
	204, 205, 208, 0, 210, 212, 0, 213, 216, 0,
	217, 218, 219, 220, 221, 222, 223, 224, 460, 225,
	0, 226, 227, 229, 0, 232, 233, 234, 235, 236,
	0, 237, 462, 758, 238, 239, 241, 242, 243, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 0, 257, 258, 259, 261, 0, 262, 263, 266,
	267, 268, 269, 0, 271, 479, 0, 272, 273, 274,
	0, 0, 275, 276, 277, 278, 279, 280, 283, 480,
	285, 286, 287, 288, 289, 290, 291, 521, 293, 294,
	295, 296, 297, 298, 299, 483, 484, 300, 302, 303,
	485, 487, 488, 609, 318, 319, 320, 321, 322, 323,
	324, 326, 0, 328, 329, 330, 489, 331, 332, 333,
	334, 0, 335, 336, 337, 338, 339, 341, 344, 345,
	346, 347, 0, 350, 351, 352, 353, 354, 355, 356,
	358, 359, 360, 362, 363, 364, 522, 365, 366, 367,
	368, 770, 370, 371, 523, 373, 374, 376, 377, 378,
	379, 380, 381, 538, 0, 383, 493, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 393, 394, 395, 398,
	399, 400, 402, 403, 495, 404, 405, 0, 407, 408,
	612, 410, 411, 412, 413, 414, 0, 539, 415, 497,
	416, 498, 417, 418, 419, 420, 421, 422, 423, 425,
	0, 0, 427, 428, 429, 431, 432, 433, 434, 437,
	438, 439, 440, 441, 0, 442, 444, 446, 524, 501,
	502, 503, 504, 505, 507, 508, 509, 510, 447, 448,
	464, 315, 309, 265, 307, 308, 312, 313, 316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 588, 0,
	763, 723, 0, 0, 0, 0, 771, 749, 0, 0,
	0, 750, 0, 0, 2118, 2119, 141, 0, 158, 594,
	0, 207, 244, 754, 0, 0, 304, 0, 357, 361,
	0, 450, 768, 0, 0, 0, 215, 766, 599, 0,
	605, 767, 611, 765, 426, 0, 601, 602, 607, 146,
	540, 449, 520, 0, 0, 0, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	603, 600, 604, 610, 598, 608, 595, 606, 0, 348,
	282, 0, 499, 375, 153, 199, 186, 228, 270, 382,
	0, 0, 260, 430, 195, 284, 0, 174, 317, 0,
	406, 281, 0, 389, 409, 0, 301, 180, 340, 396,
	397, 592, 597, 0, 613, 0, 184, 185, 306, 166,
	314, 511, 477, 369, 327, 325, 0, 292, 349, 506,
	755, 0, 214, 0, 209, 305, 445, 172, 424, 343,
	310, 264, 372, 401, 211, 196, 197, 240, 342, 230,
	182, 435, 474, 478, 476, 472, 469, 473, 470, 471,
	475, 231, 468, 0, 443, 452, 486, 466, 494, 451,
	491, 461, 206, 490, 455, 454, 500, 481, 482, 436,
	496, 467, 465, 458, 457, 453, 0, 131, 132, 133,
	134, 135, 136, 137, 138, 139, 140, 142, 0, 143,
	144, 145, 147, 148, 149, 591, 150, 151, 152, 155,
	156, 157, 159, 519, 160, 161, 162, 163, 164, 165,
	456, 593, 167, 168, 169, 170, 171, 173, 175, 176,
	177, 178, 179, 181, 183, 0, 0, 0, 596, 0,
	0, 0, 187, 188, 189, 190, 191, 192, 0, 193,
	194, 198, 200, 201, 202, 203, 204, 205, 208, 0,
	210, 212, 0, 213, 216, 0, 217, 218, 219, 220,
	221, 222, 223, 224, 460, 225, 0, 226, 227, 229,
	0, 232, 233, 234, 235, 236, 0, 237, 462, 758,
	238, 239, 241, 242, 243, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 0, 257, 258,
	259, 261, 0, 262, 263, 266, 267, 268, 269, 0,
	271, 479, 0, 272, 273, 274, 0, 0, 275, 276,
	277, 278, 279, 280, 283, 480, 285, 286, 287, 288,
	289, 290, 291, 521, 293, 294, 295, 296, 297, 298,
	299, 483, 484, 300, 302, 303, 485, 487, 488, 609,
	318, 319, 320, 321, 322, 323, 324, 326, 0, 328,
	329, 330, 489, 331, 332, 333, 334, 0, 335, 336,
	337, 338, 339, 341, 344, 345, 346, 347, 0, 350,
	351, 352, 353, 354, 355, 356, 358, 359, 360, 362,
	363, 364, 522, 365, 366, 367, 368, 770, 370, 371,
	523, 373, 374, 376, 377, 378, 379, 380, 381, 538,
	0, 383, 493, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 393, 394, 395, 398, 399, 400, 402, 403,
	495, 404, 405, 0, 407, 408, 612, 410, 411, 412,
	413, 414, 0, 539, 415, 497, 416, 498, 417, 418,
	419, 420, 421, 422, 423, 425, 0, 0, 427, 428,
	429, 431, 432, 433, 434, 437, 438, 439, 440, 441,
	0, 442, 444, 446, 524, 501, 502, 503, 504, 505,
	507, 508, 509, 510, 447, 448, 464, 315, 309, 265,
	307, 308, 312, 313, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 956, 723, 0, 0,
	0, 0, 771, 0, 0, 0, 0, 750, 0, 0,
	2118, 2119, 141, 0, 158, 594, 0, 207, 244, 459,
	0, 0, 304, 0, 357, 361, 0, 450, 0, 0,
	3008, 0, 215, 953, 599, 0, 605, 0, 611, 952,
	426, 0, 601, 602, 607, 146, 540, 449, 520, 0,
	0, 0, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 954, 603, 600, 604, 610,
	598, 608, 595, 606, 0, 348, 282, 0, 499, 375,
	153, 199, 186, 228, 270, 382, 0, 0, 260, 430,
	195, 284, 0, 174, 317, 0, 406, 281, 0, 389,
	409, 0, 301, 180, 340, 396, 397, 592, 597, 0,
	613, 0, 184, 185, 306, 166, 314, 511, 477, 369,
	327, 325, 0, 292, 349, 506, 0, 0, 214, 0,
	209, 305, 445, 172, 424, 343, 310, 264, 372, 401,
	211, 196, 197, 240, 342, 230, 182, 435, 474, 478,
	476, 472, 469, 473, 470, 471, 475, 231, 468, 0,
	443, 452, 486, 466, 494, 451, 491, 461, 206, 490,
	455, 454, 500, 481, 482, 436, 496, 467, 465, 458,
	457, 453, 0, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 142, 0, 143, 144, 145, 147, 148,
	149, 591, 150, 151, 152, 155, 156, 157, 159, 519,
	160, 161, 162, 163, 164, 165, 456, 593, 167, 168,
	169, 170, 171, 173, 175, 176, 177, 178, 179, 181,
	183, 0, 0, 0, 596, 0, 0, 0, 187, 188,
	189, 190, 191, 192, 0, 193, 194, 198, 200, 201,
	202, 203, 204, 205, 208, 0, 210, 212, 0, 213,
	216, 0, 217, 218, 219, 220, 221, 222, 223, 224,
	460, 225, 0, 226, 227, 229, 0, 232, 233, 234,
	235, 236, 0, 237, 462, 463, 238, 239, 241, 242,
	243, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 0, 257, 258, 259, 261, 0, 262,
	263, 266, 267, 268, 269, 0, 271, 479, 0, 272,
	273, 274, 0, 0, 275, 276, 277, 278, 279, 280,
	283, 480, 285, 286, 287, 288, 289, 290, 291, 521,
	293, 294, 295, 296, 297, 298, 299, 483, 484, 300,
	302, 303, 485, 487, 488, 609, 318, 319, 320, 321,
	322, 323, 324, 326, 0, 328, 329, 330, 489, 331,
	332, 333, 334, 0, 335, 336, 337, 338, 339, 341,
	344, 345, 346, 347, 0, 350, 351, 352, 353, 354,
	355, 356, 358, 359, 360, 362, 363, 364, 522, 365,
	366, 367, 368, 492, 370, 371, 523, 373, 374, 376,
	377, 378, 379, 380, 381, 538, 0, 383, 493, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 393, 394,
	395, 398, 399, 400, 402, 403, 495, 404, 405, 0,
	407, 408, 612, 410, 411, 412, 413, 414, 0, 539,
	415, 497, 416, 498, 417, 418, 419, 420, 421, 422,
	423, 425, 0, 0, 427, 428, 429, 431, 432, 433,
	434, 437, 438, 439, 440, 441, 0, 442, 444, 446,
	524, 501, 502, 503, 504, 505, 507, 508, 509, 510,
	447, 448, 464, 315, 309, 265, 307, 308, 312, 313,
	316, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 627, 0, 956, 723, 0, 0, 0, 0, 771,
	0, 0, 0, 3009, 0, 0, 957, 958, 3007, 141,
	0, 158, 594, 0, 207, 244, 459, 0, 0, 304,
	0, 357, 361, 0, 450, 0, 0, 962, 0, 215,
	953, 599, 0, 605, 0, 611, 952, 426, 0, 601,
	602, 607, 146, 540, 449, 520, 0, 0, 0, 311,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 0,
	0, 0, 954, 603, 600, 604, 610, 598, 608, 595,
	606, 0, 348, 282, 0, 499, 375, 153, 199, 186,
	228, 270, 382, 0, 0, 260, 430, 195, 284, 0,
	174, 317, 0, 406, 281, 0, 389, 409, 0, 301,
	180, 340, 396, 397, 592, 597, 0, 613, 0, 184,
	185, 306, 166, 314, 511, 477, 369, 327, 325, 0,
	292, 349, 506, 0, 0, 214, 0, 209, 305, 445,
	172, 424, 343, 310, 264, 372, 401, 211, 196, 197,
	240, 342, 230, 182, 435, 474, 478, 476, 472, 469,
	473, 470, 471, 475, 231, 468, 0, 443, 452, 486,
	466, 494, 451, 491, 461, 206, 490, 455, 454, 500,
	481, 482, 436, 496, 467, 465, 458, 457, 453, 0,
	131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
	142, 0, 143, 144, 145, 147, 148, 149, 591, 150,
	151, 152, 155, 156, 157, 159, 519, 160, 161, 162,
	163, 164, 165, 456, 593, 167, 168, 169, 170, 171,
	173, 175, 176, 177, 178, 179, 181, 183, 0, 0,
	0, 596, 0, 0, 0, 187, 188, 189, 190, 191,
	192, 0, 193, 194, 198, 200, 201, 202, 203, 204,
	205, 208, 0, 210, 212, 0, 213, 216, 0, 217,
	218, 219, 220, 221, 222, 223, 224, 460, 225, 0,
	226, 227, 229, 0, 232, 233, 234, 235, 236, 0,
	237, 462, 463, 238, 239, 241, 242, 243, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	0, 257, 258, 259, 261, 0, 262, 263, 266, 267,
	268, 269, 0, 271, 479, 0, 272, 273, 274, 0,
	0, 275, 276, 277, 278, 279, 280, 283, 480, 285,
	286, 287, 288, 289, 290, 291, 521, 293, 294, 295,
	296, 297, 298, 299, 483, 484, 300, 302, 303, 485,
	487, 488, 609, 318, 319, 320, 321, 322, 323, 324,
	326, 0, 328, 329, 330, 489, 331, 332, 333, 334,
	0, 335, 336, 337, 338, 339, 341, 344, 345, 346,
	347, 0, 350, 351, 352, 353, 354, 355, 356, 358,
	359, 360, 362, 363, 364, 522, 365, 366, 367, 368,
	492, 370, 371, 523, 373, 374, 376, 377, 378, 379,
	380, 381, 538, 0, 383, 493, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 393, 394, 395, 398, 399,
	400, 402, 403, 495, 404, 405, 0, 407, 408, 612,
	410, 411, 412, 413, 414, 0, 539, 415, 497, 416,
	498, 417, 418, 419, 420, 421, 422, 423, 425, 0,
	0, 427, 428, 429, 431, 432, 433, 434, 437, 438,
	439, 440, 441, 0, 442, 444, 446, 524, 501, 502,
	503, 504, 505, 507, 508, 509, 510, 447, 448, 464,
	315, 309, 265, 307, 308, 312, 313, 316, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 627, 0, 956,
	723, 0, 0, 0, 0, 771, 0, 0, 0, 0,
	0, 0, 0, 957, 958, 141, 0, 158, 594, 0,
	207, 244, 459, 0, 0, 304, 0, 357, 361, 0,
	450, 0, 0, 948, 0, 215, 953, 599, 0, 605,
	0, 611, 952, 426, 0, 601, 602, 607, 146, 540,
	449, 520, 0, 0, 0, 311, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 954, 603,
	600, 604, 610, 598, 608, 595, 606, 0, 348, 282,
	0, 499, 375, 153, 199, 186, 228, 270, 382, 0,
	0, 260, 430, 195, 284, 0, 174, 317, 0, 406,
	281, 0, 389, 409, 0, 301, 180, 340, 396, 397,
	592, 597, 0, 613, 0, 184, 185, 306, 166, 314,
	511, 477, 369, 327, 325, 0, 292, 349, 506, 0,
	0, 214, 0, 209, 305, 445, 172, 424, 343, 310,
	264, 372, 401, 211, 196, 197, 240, 342, 230, 182,
	435, 474, 478, 476, 472, 469, 473, 470, 471, 475,
	231, 468, 0, 443, 452, 486, 466, 494, 451, 491,
	461, 206, 490, 455, 454, 500, 481, 482, 436, 496,
	467, 465, 458, 457, 453, 0, 131, 132, 133, 134,
	135, 136, 137, 138, 139, 140, 142, 0, 143, 144,
	145, 147, 148, 149, 591, 150, 151, 152, 155, 156,
	157, 159, 519, 160, 161, 162, 163, 164, 165, 456,
	593, 167, 168, 169, 170, 171, 173, 175, 176, 177,
	178, 179, 181, 183, 0, 0, 0, 596, 0, 0,
	0, 187, 188, 189, 190, 191, 192, 0, 193, 194,
	198, 200, 201, 202, 203, 204, 205, 208, 0, 210,
	212, 0, 213, 216, 0, 217, 218, 219, 220, 221,
	222, 223, 224, 460, 225, 0, 226, 227, 229, 0,
	232, 233, 234, 235, 236, 0, 237, 462, 463, 238,
	239, 241, 242, 243, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 0, 257, 258, 259,
	261, 0, 262, 263, 266, 267, 268, 269, 0, 271,
	479, 0, 272, 273, 274, 0, 0, 275, 276, 277,
	278, 279, 280, 283, 480, 285, 286, 287, 288, 289,
	290, 291, 521, 293, 294, 295, 296, 297, 298, 299,
	483, 484, 300, 302, 303, 485, 487, 488, 609, 318,
	319, 320, 321, 322, 323, 324, 326, 0, 328, 329,
	330, 489, 331, 332, 333, 334, 0, 335, 336, 337,
	338, 339, 341, 344, 345, 346, 347, 0, 350, 351,
	352, 353, 354, 355, 356, 358, 359, 360, 362, 363,
	364, 522, 365, 366, 367, 368, 492, 370, 371, 523,
	373, 374, 376, 377, 378, 379, 380, 381, 538, 0,
	383, 493, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 393, 394, 395, 398, 399, 400, 402, 403, 495,
	404, 405, 0, 407, 408, 612, 410, 411, 412, 413,
	414, 0, 539, 415, 497, 416, 498, 417, 418, 419,
	420, 421, 422, 423, 425, 0, 0, 427, 428, 429,
	431, 432, 433, 434, 437, 438, 439, 440, 441, 0,
	442, 444, 446, 524, 501, 502, 503, 504, 505, 507,
	508, 509, 510, 447, 448, 464, 315, 309, 265, 307,
	308, 312, 313, 316, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 627, 0, 956, 723, 0, 0, 0,
	0, 771, 0, 0, 0, 0, 0, 0, 0, 957,
	958, 141, 0, 158, 594, 0, 207, 244, 459, 0,
	0, 304, 0, 357, 361, 0, 450, 0, 0, 0,
	0, 215, 953, 599, 0, 605, 0, 611, 952, 426,
	0, 601, 602, 607, 146, 540, 449, 520, 0, 0,
	0, 311, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 0, 954, 603, 600, 604, 610, 598,
	608, 595, 606, 0, 348, 282, 0, 499, 375, 153,
	199, 186, 228, 270, 382, 0, 0, 260, 430, 195,
	284, 0, 174, 317, 0, 406, 281, 0, 389, 409,
	0, 301, 180, 340, 396, 397, 592, 597, 0, 613,
	0, 184, 185, 306, 166, 314, 511, 477, 369, 327,
	325, 0, 292, 349, 506, 0, 0, 214, 0, 209,
	305, 445, 172, 424, 343, 310, 264, 372, 401, 211,
	196, 197, 240, 342, 230, 182, 435, 474, 478, 476,
	472, 469, 473, 470, 471, 475, 231, 468, 0, 443,
	452, 486, 466, 494, 451, 491, 461, 206, 490, 455,
	454, 500, 481, 482, 436, 496, 467, 465, 458, 457,
	453, 0, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 142, 0, 143, 144, 145, 147, 148, 149,
	591, 150, 151, 152, 155, 156, 157, 159, 519, 160,
	161, 162, 163, 164, 165, 456, 593, 167, 168, 169,
	170, 171, 173, 175, 176, 177, 178, 179, 181, 183,
	0, 0, 0, 596, 0, 0, 0, 187, 188, 189,
	190, 191, 192, 0, 193, 194, 198, 200, 201, 202,
	203, 204, 205, 208, 0, 210, 212, 0, 213, 216,
	0, 217, 218, 219, 220, 221, 222, 223, 224, 460,
	225, 0, 226, 227, 229, 0, 232, 233, 234, 235,
	236, 0, 237, 462, 463, 238, 239, 241, 242, 243,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 0, 257, 258, 259, 261, 0, 262, 263,
	266, 267, 268, 269, 0, 271, 479, 0, 272, 273,
	274, 0, 0, 275, 276, 277, 278, 279, 280, 283,
	480, 285, 286, 287, 288, 289, 290, 291, 521, 293,
	294, 295, 296, 297, 298, 299, 483, 484, 300, 302,
	303, 485, 487, 488, 609, 318, 319, 320, 321, 322,
	323, 324, 326, 0, 328, 329, 330, 489, 331, 332,
	333, 334, 0, 335, 336, 337, 338, 339, 341, 344,
	345, 346, 347, 0, 350, 351, 352, 353, 354, 355,
	356, 358, 359, 360, 362, 363, 364, 522, 365, 366,
	367, 368, 492, 370, 371, 523, 373, 374, 376, 377,
	378, 379, 380, 381, 538, 0, 383, 493, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 393, 394, 395,
	398, 399, 400, 402, 403, 495, 404, 405, 0, 407,
	408, 612, 410, 411, 412, 413, 414, 0, 539, 415,
	497, 416, 498, 417, 418, 419, 420, 421, 422, 423,
	425, 0, 0, 427, 428, 429, 431, 432, 433, 434,
	437, 438, 439, 440, 441, 0, 442, 444, 446, 524,
	501, 502, 503, 504, 505, 507, 508, 509, 510, 447,
	448, 464, 315, 309, 265, 307, 308, 312, 313, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 588,
	0, 763, 723, 0, 0, 0, 0, 771, 749, 0,
	0, 0, 0, 0, 0, 957, 958, 141, 0, 158,
	594, 0, 207, 244, 754, 0, 0, 304, 0, 357,
	361, 0, 450, 768, 0, 0, 0, 215, 766, 599,
	0, 605, 767, 611, 765, 426, 0, 601, 602, 607,
	146, 540, 449, 520, 0, 0, 0, 311, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 603, 600, 604, 610, 598, 608, 595, 606, 0,
	348, 282, 0, 499, 375, 153, 199, 186, 228, 270,
	382, 0, 0, 260, 430, 195, 284, 0, 174, 317,
	0, 406, 281, 0, 389, 409, 0, 301, 180, 340,
	396, 397, 592, 597, 0, 613, 0, 184, 185, 306,
	166, 314, 511, 477, 369, 327, 325, 0, 292, 349,
	506, 755, 0, 214, 0, 209, 305, 445, 172, 424,
	343, 310, 264, 372, 401, 211, 196, 197, 240, 342,
	230, 182, 435, 474, 478, 476, 472, 469, 473, 470,
	471, 475, 231, 468, 0, 443, 452, 486, 466, 494,
	451, 491, 461, 206, 490, 455, 454, 500, 481, 482,
	436, 496, 467, 465, 458, 457, 453, 0, 131, 132,
	133, 134, 135, 136, 137, 138, 139, 140, 142, 0,
	143, 144, 145, 147, 148, 149, 591, 150, 151, 152,
	155, 156, 157, 159, 519, 160, 161, 162, 163, 164,
	165, 456, 593, 167, 168, 169, 170, 171, 173, 175,
	176, 177, 178, 179, 181, 183, 0, 0, 0, 596,
	0, 0, 0, 187, 188, 189, 190, 191, 192, 0,
	193, 194, 198, 200, 201, 202, 203, 204, 205, 208,
	0, 210, 212, 0, 213, 216, 0, 217, 218, 219,
	220, 221, 222, 223, 224, 460, 225, 0, 226, 227,
	229, 0, 232, 233, 234, 235, 236, 0, 237, 462,
	758, 238, 239, 241, 242, 243, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 0, 257,
	258, 259, 261, 0, 262, 263, 266, 267, 268, 269,
	0, 271, 479, 0, 272, 273, 274, 0, 0, 275,
	276, 277, 278, 279, 280, 283, 480, 285, 286, 287,
	288, 289, 290, 291, 521, 293, 294, 295, 296, 297,
	298, 299, 483, 484, 300, 302, 303, 485, 487, 488,
	609, 318, 319, 320, 321, 322, 323, 324, 326, 0,
	328, 329, 330, 489, 331, 332, 333, 334, 0, 335,
	336, 337, 338, 339, 341, 344, 345, 346, 347, 0,
	350, 351, 352, 353, 354, 355, 356, 358, 359, 360,
	362, 363, 364, 522, 365, 366, 367, 368, 770, 370,
	371, 523, 373, 374, 376, 377, 378, 379, 380, 381,
	538, 0, 383, 493, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 393, 394, 395, 398, 399, 400, 402,
	403, 495, 404, 405, 0, 407, 408, 612, 410, 411,
	412, 413, 414, 0, 539, 415, 497, 416, 498, 417,
	418, 419, 420, 421, 422, 423, 425, 0, 0, 427,
	428, 429, 431, 432, 433, 434, 437, 438, 439, 440,
	441, 0, 442, 444, 446, 524, 501, 502, 503, 504,
	505, 507, 508, 509, 510, 447, 448, 464, 315, 309,
	265, 307, 308, 312, 313, 316, 588, 0, 763, 723,
	0, 0, 0, 0, 771, 749, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 158, 594, 750, 207,
	244, 754, 0, 0, 304, 0, 357, 361, 0, 450,
	768, 0, 0, 0, 215, 766, 599, 0, 605, 767,
	611, 765, 426, 0, 601, 602, 607, 146, 540, 449,
	520, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 2817, 0, 0, 0, 0, 603, 600,
	604, 610, 598, 608, 595, 606, 0, 348, 282, 0,
	499, 375, 153, 199, 186, 228, 270, 382, 0, 0,
	260, 430, 195, 284, 0, 174, 317, 0, 406, 281,
	0, 389, 409, 0, 301, 180, 340, 396, 397, 592,
	597, 0, 613, 0, 184, 185, 306, 166, 314, 511,
	477, 369, 327, 325, 0, 292, 349, 506, 755, 0,
	214, 0, 209, 305, 445, 172, 424, 343, 310, 264,
	372, 401, 211, 196, 197, 240, 342, 230, 182, 435,
	474, 478, 476, 472, 469, 473, 470, 471, 475, 231,
	468, 0, 443, 452, 486, 466, 494, 451, 491, 461,
	206, 490, 455, 454, 500, 481, 482, 436, 496, 467,
	465, 458, 457, 453, 0, 131, 132, 133, 134, 135,
	136, 137, 138, 139, 140, 142, 0, 143, 144, 145,
	147, 148, 149, 591, 150, 151, 152, 155, 156, 157,
	159, 519, 160, 161, 162, 163, 164, 165, 456, 593,
	167, 168, 169, 170, 171, 173, 175, 176, 177, 178,
	179, 181, 183, 0, 0, 0, 596, 0, 0, 0,
	187, 188, 189, 190, 191, 192, 0, 193, 194, 198,
	200, 201, 202, 203, 204, 205, 208, 0, 210, 212,
	0, 213, 216, 0, 217, 218, 219, 220, 221, 222,
	223, 224, 460, 225, 0, 226, 227, 229, 0, 232,
	233, 234, 235, 236, 0, 237, 462, 758, 238, 239,
	241, 242, 243, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 0, 257, 258, 259, 261,
	0, 262, 263, 266, 267, 268, 269, 0, 271, 479,
	0, 272, 273, 274, 0, 0, 275, 276, 277, 278,
	279, 280, 283, 480, 285, 286, 287, 288, 289, 290,
	291, 521, 293, 294, 295, 296, 297, 298, 299, 483,
	484, 300, 302, 303, 485, 487, 488, 609, 318, 319,
	320, 321, 322, 323, 324, 326, 0, 328, 329, 330,
	489, 331, 332, 333, 334, 0, 335, 336, 337, 338,
	339, 341, 344, 345, 346, 347, 0, 350, 351, 352,
	353, 354, 355, 356, 358, 359, 360, 362, 363, 364,
	522, 365, 366, 367, 368, 770, 370, 371, 523, 373,
	374, 376, 377, 378, 379, 380, 381, 538, 0, 383,
	493, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	393, 394, 395, 398, 399, 400, 402, 403, 495, 404,
	405, 0, 407, 408, 612, 410, 411, 412, 413, 414,
	0, 539, 415, 497, 416, 498, 417, 418, 419, 420,
	421, 422, 423, 425, 0, 0, 427, 428, 429, 431,
	432, 433, 434, 437, 438, 439, 440, 441, 0, 442,
	444, 446, 524, 501, 502, 503, 504, 505, 507, 508,
	509, 510, 447, 448, 464, 315, 309, 265, 307, 308,
	312, 313, 316, 588, 0, 763, 723, 0, 0, 0,
	0, 771, 749, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 158, 594, 750, 207, 244, 754, 0,
	0, 304, 0, 357, 361, 0, 450, 768, 0, 0,
	0, 215, 766, 599, 0, 605, 767, 611, 765, 426,
	0, 601, 602, 607, 146, 540, 449, 520, 0, 0,
	0, 311, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 0, 0, 603, 600, 604, 610, 598,
	608, 595, 606, 0, 348, 282, 0, 499, 375, 153,
	199, 186, 228, 270, 382, 0, 0, 260, 430, 195,
	284, 0, 174, 317, 0, 406, 281, 0, 389, 409,
	0, 301, 180, 340, 396, 397, 592, 597, 0, 613,
	0, 184, 185, 306, 166, 314, 511, 477, 369, 327,
	325, 0, 292, 349, 2441, 755, 0, 214, 0, 209,
	305, 445, 172, 424, 343, 310, 264, 372, 401, 211,
	196, 197, 240, 342, 230, 182, 435, 474, 478, 476,
	472, 469, 473, 470, 471, 475, 231, 468, 0, 443,
	452, 486, 466, 494, 451, 491, 461, 206, 490, 455,
	454, 500, 481, 482, 436, 496, 467, 465, 458, 457,
	453, 0, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 142, 0, 143, 144, 145, 147, 148, 149,
	591, 150, 151, 152, 155, 156, 157, 159, 519, 160,
	161, 162, 163, 164, 165, 456, 593, 167, 168, 169,
	170, 171, 173, 175, 176, 177, 178, 179, 181, 183,
	0, 0, 0, 596, 0, 0, 0, 187, 188, 189,
	190, 191, 192, 0, 193, 194, 198, 200, 201, 202,
	203, 204, 205, 208, 0, 210, 212, 0, 213, 216,
	0, 217, 218, 219, 220, 221, 222, 223, 224, 460,
	225, 0, 226, 227, 229, 0, 232, 233, 234, 235,
	236, 0, 237, 462, 758, 238, 239, 241, 242, 243,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 0, 257, 258, 259, 261, 0, 262, 263,
	266, 267, 268, 269, 0, 271, 479, 0, 272, 273,
	274, 0, 0, 275, 276, 277, 278, 279, 280, 283,
	480, 285, 286, 287, 288, 289, 290, 291, 521, 293,
	294, 295, 296, 297, 298, 299, 483, 484, 300, 302,
	303, 485, 487, 488, 609, 318, 319, 320, 321, 322,
	323, 324, 326, 0, 328, 329, 330, 489, 331, 332,
	333, 334, 0, 335, 336, 337, 338, 339, 341, 344,
	345, 346, 347, 0, 350, 351, 352, 353, 354, 355,
	356, 358, 359, 360, 362, 363, 364, 522, 365, 366,
	367, 368, 770, 370, 371, 523, 373, 374, 376, 377,
	378, 379, 380, 381, 538, 0, 383, 493, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 393, 394, 395,
	398, 399, 400, 402, 403, 495, 404, 405, 0, 407,
	408, 612, 410, 411, 412, 413, 414, 0, 539, 415,
	497, 416, 498, 417, 418, 419, 420, 421, 422, 423,
	425, 0, 0, 427, 428, 429, 431, 432, 433, 434,
	437, 438, 439, 440, 441, 0, 442, 444, 446, 524,
	501, 502, 503, 504, 505, 507, 508, 509, 510, 447,
	448, 464, 315, 309, 265, 307, 308, 312, 313, 316,
	588, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	158, 594, 750, 207, 244, 459, 0, 0, 304, 0,
	357, 361, 36, 450, 0, 0, 0, 0, 215, 0,
	599, 0, 605, 0, 611, 0, 426, 0, 601, 602,
	607, 146, 540, 449, 520, 0, 0, 0, 311, 33,
	0, 0, 537, 34, 0, 0, 0, 154, 0, 0,
	0, 0, 603, 600, 604, 610, 598, 608, 595, 606,
	0, 348, 282, 1875, 1462, 375, 153, 199, 186, 228,
	270, 382, 0, 0, 260, 430, 195, 284, 0, 174,
	317, 0, 406, 281, 0, 389, 409, 0, 301, 180,
	340, 396, 397, 592, 597, 0, 613, 0, 184, 185,
	306, 166, 314, 1883, 1884, 1882, 327, 325, 0, 292,
	349, 506, 0, 0, 214, 0, 209, 305, 445, 172,
	424, 343, 310, 264, 372, 401, 211, 196, 197, 240,
	342, 230, 182, 435, 474, 478, 476, 472, 469, 473,
	470, 471, 475, 231, 468, 0, 443, 452, 486, 466,
	494, 451, 491, 461, 206, 490, 455, 454, 500, 481,
	482, 436, 496, 467, 465, 458, 457, 453, 0, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 142,
	0, 143, 144, 145, 147, 148, 149, 591, 150, 151,
	152, 155, 156, 157, 159, 519, 160, 161, 162, 163,
	164, 165, 456, 593, 167, 168, 169, 170, 171, 173,
	175, 176, 177, 178, 179, 181, 183, 0, 0, 0,
	596, 0, 0, 0, 187, 188, 189, 190, 191, 192,
	0, 193, 194, 198, 200, 201, 202, 203, 204, 205,
	208, 0, 210, 212, 0, 213, 216, 0, 217, 218,
	219, 220, 221, 222, 223, 224, 460, 225, 0, 226,
	227, 229, 0, 232, 233, 234, 235, 236, 0, 237,
	462, 463, 238, 239, 241, 242, 243, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 0,
	257, 258, 259, 261, 0, 262, 263, 266, 267, 268,
	269, 0, 271, 479, 0, 272, 273, 274, 0, 0,
	275, 276, 277, 278, 279, 280, 283, 480, 285, 286,
	287, 288, 289, 290, 291, 521, 293, 294, 295, 296,
	297, 298, 299, 483, 484, 300, 302, 303, 485, 487,
	488, 609, 318, 319, 320, 321, 322, 323, 324, 326,
	0, 328, 329, 330, 489, 331, 332, 333, 334, 0,
	335, 336, 337, 338, 339, 341, 344, 345, 346, 347,
	0, 350, 351, 352, 353, 354, 355, 356, 358, 359,
	360, 362, 363, 364, 522, 365, 366, 367, 368, 492,
	370, 371, 523, 373, 374, 376, 377, 378, 379, 380,
	381, 538, 0, 383, 493, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 393, 394, 395, 398, 399, 400,
	402, 403, 495, 404, 405, 0, 407, 408, 612, 410,
	411, 412, 413, 414, 0, 539, 415, 497, 416, 498,
	417, 418, 419, 420, 421, 422, 423, 425, 0, 0,
	427, 428, 429, 431, 432, 433, 434, 437, 438, 439,
	440, 441, 0, 442, 444, 446, 524, 501, 502, 503,
	504, 505, 507, 508, 509, 510, 447, 448, 464, 315,
	309, 265, 307, 308, 312, 313, 316, 588, 0, 0,
	0, 0, 0, 0, 0, 0, 37, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 158, 594, 1877,
	207, 244, 459, 0, 0, 304, 0, 357, 361, 0,
	450, 0, 0, 0, 0, 215, 0, 599, 0, 605,
	0, 611, 0, 426, 0, 601, 602, 607, 146, 540,
	449, 520, 0, 0, 0, 311, 0, 0, 0, 537,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 603,
	600, 604, 610, 598, 608, 595, 606, 0, 348, 282,
	1875, 499, 375, 153, 199, 186, 228, 270, 382, 0,
	0, 260, 430, 195, 284, 0, 174, 317, 0, 406,
	281, 0, 389, 409, 0, 301, 180, 340, 396, 397,
	592, 597, 0, 613, 0, 184, 185, 306, 166, 314,
	1883, 1884, 1882, 327, 325, 0, 292, 349, 506, 0,
	0, 214, 0, 209, 305, 445, 172, 424, 343, 310,
	264, 372, 401, 211, 196, 197, 240, 342, 230, 182,
	435, 474, 478, 476, 472, 469, 473, 470, 471, 475,
	231, 468, 0, 443, 452, 486, 466, 494, 451, 491,
	461, 206, 490, 455, 454, 500, 481, 482, 436, 496,
	467, 465, 458, 457, 453, 0, 131, 132, 133, 134,
	135, 136, 137, 138, 139, 140, 142, 0, 143, 144,
	145, 147, 148, 149, 591, 150, 151, 152, 155, 156,
	157, 159, 519, 160, 161, 162, 163, 164, 165, 456,
	593, 167, 168, 169, 170, 171, 173, 175, 176, 177,
	178, 179, 181, 183, 0, 0, 0, 596, 0, 0,
	0, 187, 188, 189, 190, 191, 192, 0, 193, 194,
	198, 200, 201, 202, 203, 204, 205, 208, 0, 210,
	212, 0, 213, 216, 0, 217, 218, 219, 220, 221,
	222, 223, 224, 460, 225, 0, 226, 227, 229, 0,
	232, 233, 234, 235, 236, 0, 237, 462, 463, 238,
	239, 241, 242, 243, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 0, 257, 258, 259,
	261, 0, 262, 263, 266, 267, 268, 269, 0, 271,
	479, 0, 272, 273, 274, 0, 0, 275, 276, 277,
	278, 279, 280, 283, 480, 285, 286, 287, 288, 289,
	290, 291, 521, 293, 294, 295, 296, 297, 298, 299,
	483, 484, 300, 302, 303, 485, 487, 488, 609, 318,
	319, 320, 321, 322, 323, 324, 326, 0, 328, 329,
	330, 489, 331, 332, 333, 334, 0, 335, 336, 337,
	338, 339, 341, 344, 345, 346, 347, 0, 350, 351,
	352, 353, 354, 355, 356, 358, 359, 360, 362, 363,
	364, 522, 365, 366, 367, 368, 492, 370, 371, 523,
	373, 374, 376, 377, 378, 379, 380, 381, 538, 0,
	383, 493, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 393, 394, 395, 398, 399, 400, 402, 403, 495,
	404, 405, 0, 407, 408, 612, 410, 411, 412, 413,
	414, 0, 539, 415, 497, 416, 498, 417, 418, 419,
	420, 421, 422, 423, 425, 0, 0, 427, 428, 429,
	431, 432, 433, 434, 437, 438, 439, 440, 441, 0,
	442, 444, 446, 524, 501, 502, 503, 504, 505, 507,
	508, 509, 510, 447, 448, 464, 315, 309, 265, 307,
	308, 312, 313, 316, 588, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 158, 594, 1877, 207, 244, 459,
	0, 0, 304, 0, 357, 361, 0, 450, 0, 0,
	0, 0, 215, 0, 599, 0, 605, 0, 611, 0,
	426, 0, 601, 602, 607, 146, 540, 449, 520, 0,
	0, 0, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 603, 600, 604, 610,
	598, 608, 595, 606, 0, 348, 282, 0, 499, 375,
	153, 199, 186, 228, 270, 382, 0, 0, 260, 430,
	195, 284, 0, 174, 317, 0, 406, 281, 0, 389,
	409, 0, 301, 180, 340, 396, 397, 592, 597, 0,
	613, 0, 184, 185, 306, 166, 314, 511, 477, 369,
	327, 325, 0, 292, 349, 506, 0, 0, 214, 0,
	209, 305, 445, 172, 424, 343, 310, 264, 372, 401,
	211, 196, 197, 240, 342, 230, 182, 435, 474, 478,
	476, 472, 469, 473, 470, 471, 475, 231, 468, 0,
	443, 452, 486, 466, 494, 451, 491, 461, 206, 490,
	455, 454, 500, 481, 482, 436, 496, 467, 465, 458,
	457, 453, 0, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 142, 0, 143, 144, 145, 147, 148,
	149, 591, 150, 151, 152, 155, 156, 157, 159, 519,
	160, 161, 162, 163, 164, 165, 456, 593, 167, 168,
	169, 170, 171, 173, 175, 176, 177, 178, 179, 181,
	183, 0, 0, 0, 596, 0, 0, 0, 187, 188,
	189, 190, 191, 192, 0, 193, 194, 198, 200, 201,
	202, 203, 204, 205, 208, 0, 210, 212, 0, 213,
	216, 0, 217, 218, 219, 220, 221, 222, 223, 224,
	460, 225, 0, 226, 227, 229, 0, 232, 233, 234,
	235, 236, 0, 237, 462, 463, 238, 239, 241, 242,
	243, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 0, 257, 258, 259, 261, 0, 262,
	263, 266, 267, 268, 269, 0, 271, 479, 0, 272,
	273, 274, 0, 0, 275, 276, 277, 278, 279, 280,
	283, 480, 285, 286, 287, 288, 289, 290, 291, 521,
	293, 294, 295, 296, 297, 298, 299, 483, 484, 300,
	302, 303, 485, 487, 488, 609, 318, 319, 320, 321,
	322, 323, 324, 326, 0, 328, 329, 330, 489, 331,
	332, 333, 334, 0, 335, 336, 337, 338, 339, 341,
	344, 345, 346, 347, 0, 350, 351, 352, 353, 354,
	355, 356, 358, 359, 360, 362, 363, 364, 522, 365,
	366, 367, 368, 492, 370, 371, 523, 373, 374, 376,
	377, 378, 379, 380, 381, 538, 0, 383, 493, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 393, 394,
	395, 398, 399, 400, 402, 403, 495, 404, 405, 0,
	407, 408, 612, 410, 411, 412, 413, 414, 0, 539,
	415, 497, 416, 498, 417, 418, 419, 420, 421, 422,
	423, 425, 0, 0, 427, 428, 429, 431, 432, 433,
	434, 437, 438, 439, 440, 441, 0, 442, 444, 446,
	524, 501, 502, 503, 504, 505, 507, 508, 509, 510,
	447, 448, 464, 315, 309, 265, 307, 308, 312, 313,
	316, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 158, 594, 2522, 207, 244, 459, 0, 0, 304,
	0, 357, 361, 0, 450, 0, 0, 0, 0, 215,
	0, 599, 0, 605, 0, 611, 0, 426, 0, 601,
	602, 607, 146, 540, 449, 520, 0, 0, 0, 311,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 0,
	0, 0, 0, 603, 600, 604, 610, 598, 608, 595,
	606, 0, 348, 282, 0, 499, 375, 153, 199, 186,
	228, 270, 382, 0, 0, 260, 430, 195, 284, 0,
	174, 317, 0, 406, 281, 0, 389, 409, 0, 301,
	180, 340, 396, 397, 592, 597, 0, 613, 0, 184,
	185, 306, 166, 314, 511, 477, 369, 327, 325, 0,
	292, 349, 506, 0, 0, 214, 0, 209, 305, 445,
	172, 424, 343, 310, 264, 372, 401, 211, 196, 197,
	240, 342, 230, 182, 435, 474, 478, 476, 472, 469,
	473, 470, 471, 475, 231, 468, 0, 443, 452, 486,
	466, 494, 451, 491, 461, 206, 490, 455, 454, 500,
	481, 482, 436, 496, 467, 465, 458, 457, 453, 0,
	131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
	142, 0, 143, 144, 145, 147, 148, 149, 591, 150,
	151, 152, 155, 156, 157, 159, 519, 160, 161, 162,
	163, 164, 165, 456, 593, 167, 168, 169, 170, 171,
	173, 175, 176, 177, 178, 179, 181, 183, 0, 0,
	0, 596, 0, 0, 0, 187, 188, 189, 190, 191,
	192, 0, 193, 194, 198, 200, 201, 202, 203, 204,
	205, 208, 0, 210, 212, 0, 213, 216, 0, 217,
	218, 219, 220, 221, 222, 223, 224, 460, 225, 0,
	226, 227, 229, 0, 232, 233, 234, 235, 236, 0,
	237, 462, 463, 238, 239, 241, 242, 243, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	0, 257, 258, 259, 261, 0, 262, 263, 266, 267,
	268, 269, 0, 271, 479, 0, 272, 273, 274, 0,
	0, 275, 276, 277, 278, 279, 280, 283, 480, 285,
	286, 287, 288, 289, 290, 291, 521, 293, 294, 295,
	296, 297, 298, 299, 483, 484, 300, 302, 303, 485,
	487, 488, 609, 318, 319, 320, 321, 322, 323, 324,
	326, 0, 328, 329, 330, 489, 331, 332, 333, 334,
	0, 335, 336, 337, 338, 339, 341, 344, 345, 346,
	347, 0, 350, 351, 352, 353, 354, 355, 356, 358,
	359, 360, 362, 363, 364, 522, 365, 366, 367, 368,
	492, 370, 371, 523, 373, 374, 376, 377, 378, 379,
	380, 381, 538, 0, 383, 493, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 393, 394, 395, 398, 399,
	400, 402, 403, 495, 404, 405, 0, 407, 408, 612,
	410, 411, 412, 413, 414, 0, 539, 415, 497, 416,
	498, 417, 418, 419, 420, 421, 422, 423, 425, 0,
	0, 427, 428, 429, 431, 432, 433, 434, 437, 438,
	439, 440, 441, 0, 442, 444, 446, 524, 501, 502,
	503, 504, 505, 507, 508, 509, 510, 447, 448, 464,
	315, 309, 265, 307, 308, 312, 313, 316, 588, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 158, 594,
	3141, 207, 244, 459, 0, 0, 304, 0, 357, 361,
	0, 450, 0, 0, 0, 0, 215, 0, 599, 0,
	605, 0, 611, 0, 426, 0, 601, 602, 607, 146,
	540, 449, 520, 0, 0, 0, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	603, 600, 604, 610, 598, 608, 595, 606, 0, 348,
	282, 0, 499, 375, 153, 199, 186, 228, 270, 382,
	0, 0, 260, 430, 195, 284, 0, 174, 317, 0,
	406, 281, 0, 389, 409, 0, 301, 180, 340, 396,
	397, 592, 597, 0, 613, 0, 184, 185, 306, 166,
	314, 1883, 1884, 1882, 327, 325, 0, 292, 349, 506,
	0, 0, 214, 0, 209, 305, 445, 172, 424, 343,
	310, 264, 372, 401, 211, 196, 197, 240, 342, 230,
	182, 435, 474, 478, 476, 472, 469, 473, 470, 471,
	475, 231, 468, 0, 443, 452, 486, 466, 494, 451,
	491, 461, 206, 490, 455, 454, 500, 481, 482, 436,
	496, 467, 465, 458, 457, 453, 0, 131, 132, 133,
	134, 135, 136, 137, 138, 139, 140, 142, 0, 143,
	144, 145, 147, 148, 149, 591, 150, 151, 152, 155,
	156, 157, 159, 519, 160, 161, 162, 163, 164, 165,
	456, 593, 167, 168, 169, 170, 171, 173, 175, 176,
	177, 178, 179, 181, 183, 0, 0, 0, 596, 0,
	0, 0, 187, 188, 189, 190, 191, 192, 0, 193,
	194, 198, 200, 201, 202, 203, 204, 205, 208, 0,
	210, 212, 0, 213, 216, 0, 217, 218, 219, 220,
	221, 222, 223, 224, 460, 225, 0, 226, 227, 229,
	0, 232, 233, 234, 235, 236, 0, 237, 462, 463,
	238, 239, 241, 242, 243, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 0, 257, 258,
	259, 261, 0, 262, 263, 266, 267, 268, 269, 0,
	271, 479, 0, 272, 273, 274, 0, 0, 275, 276,
	277, 278, 279, 280, 283, 480, 285, 286, 287, 288,
	289, 290, 291, 521, 293, 294, 295, 296, 297, 298,
	299, 483, 484, 300, 302, 303, 485, 487, 488, 609,
	318, 319, 320, 321, 322, 323, 324, 326, 0, 328,
	329, 330, 489, 331, 332, 333, 334, 0, 335, 336,
	337, 338, 339, 341, 344, 345, 346, 347, 0, 350,
	351, 352, 353, 354, 355, 356, 358, 359, 360, 362,
	363, 364, 522, 365, 366, 367, 368, 492, 370, 371,
	523, 373, 374, 376, 377, 378, 379, 380, 381, 538,
	0, 383, 493, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 393, 394, 395, 398, 399, 400, 402, 403,
	495, 404, 405, 0, 407, 408, 612, 410, 411, 412,
	413, 414, 0, 539, 415, 497, 416, 498, 417, 418,
	419, 420, 421, 422, 423, 425, 0, 0, 427, 428,
	429, 431, 432, 433, 434, 437, 438, 439, 440, 441,
	0, 442, 444, 446, 524, 501, 502, 503, 504, 505,
	507, 508, 509, 510, 447, 448, 464, 315, 309, 265,
	307, 308, 312, 313, 316, 128, 0, 0, 0, 0,
	0, 0, 1813, 0, 0, 0, 0, 0, 0, 1824,
	1825, 1826, 0, 141, 0, 158, 0, 32, 207, 244,
	459, 0, 0, 304, 0, 357, 361, 0, 450, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 0,
	0, 426, 0, 0, 0, 0, 146, 540, 449, 520,
	0, 0, 0, 311, 0, 0, 0, 0, 0, 0,
	0, 0, 154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 348, 282, 0, 499,
	375, 153, 199, 186, 228, 270, 382, 0, 0, 260,
	430, 195, 284, 0, 174, 317, 0, 406, 281, 0,
	389, 409, 0, 301, 180, 340, 396, 397, 0, 0,
	0, 0, 0, 184, 185, 306, 166, 314, 511, 477,
	369, 327, 325, 0, 292, 349, 506, 0, 0, 214,
	0, 209, 305, 445, 172, 424, 343, 310, 264, 372,
	401, 211, 196, 197, 240, 342, 230, 182, 435, 474,
	478, 476, 472, 469, 473, 470, 471, 475, 231, 468,
	0, 443, 452, 486, 466, 494, 451, 491, 461, 206,
	490, 455, 454, 500, 481, 482, 436, 496, 467, 465,
	458, 457, 453, 0, 131, 132, 133, 134, 135, 136,
	137, 138, 139, 140, 142, 0, 143, 144, 145, 147,
	148, 149, 0, 150, 151, 152, 155, 156, 157, 159,
	519, 160, 161, 162, 163, 164, 165, 456, 0, 167,
	168, 169, 170, 171, 173, 175, 176, 177, 178, 179,
	181, 183, 0, 0, 0, 0, 0, 0, 0, 187,
	188, 189, 190, 191, 192, 0, 193, 194, 198, 200,
	201, 202, 203, 204, 205, 208, 0, 210, 212, 0,
	213, 216, 0, 217, 218, 219, 220, 221, 222, 223,
	224, 460, 225, 0, 226, 227, 229, 0, 232, 233,
	234, 235, 236, 0, 237, 462, 463, 238, 239, 241,
	242, 243, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 0, 257, 258, 259, 261, 0,
	262, 263, 266, 267, 268, 269, 0, 271, 479, 0,
	272, 273, 274, 0, 0, 275, 276, 277, 278, 279,
	280, 283, 480, 285, 286, 287, 288, 289, 290, 291,
	521, 293, 294, 295, 296, 297, 298, 299, 483, 484,
	300, 302, 303, 485, 487, 488, 0, 318, 319, 320,
	321, 322, 323, 324, 326, 0, 328, 329, 330, 489,
	331, 332, 333, 334, 0, 335, 336, 337, 338, 339,
	341, 344, 345, 346, 347, 0, 350, 351, 352, 353,
	354, 355, 356, 358, 359, 360, 362, 363, 364, 522,
	365, 366, 367, 368, 492, 370, 371, 523, 373, 374,
	376, 377, 378, 379, 380, 381, 538, 0, 383, 493,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 393,
	394, 395, 398, 399, 400, 402, 403, 495, 404, 405,
	0, 407, 408, 0, 410, 411, 412, 413, 414, 0,
	539, 415, 497, 416, 498, 417, 418, 419, 420, 421,
	422, 423, 425, 0, 0, 427, 428, 429, 431, 432,
	433, 434, 437, 438, 439, 440, 441, 0, 442, 444,
	446, 524, 501, 502, 503, 504, 505, 507, 508, 509,
	510, 447, 448, 464, 315, 309, 265, 307, 308, 312,
	313, 316, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1821, 1822,
	1823, 0, 0, 0, 0, 0, 128, 1815, 1816, 1817,
	1818, 1819, 1820, 1813, 0, 0, 0, 0, 0, 0,
	1824, 1825, 1826, 0, 141, 0, 158, 0, 0, 207,
	244, 459, 0, 0, 304, 0, 357, 361, 0, 450,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 0,
	0, 0, 426, 0, 0, 0, 0, 146, 540, 449,
	520, 0, 0, 0, 2927, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 348, 282, 0,
	499, 375, 153, 199, 186, 228, 270, 382, 0, 0,
	260, 430, 195, 284, 0, 174, 317, 0, 406, 281,
	0, 389, 409, 0, 301, 180, 340, 396, 397, 0,
	0, 0, 0, 0, 184, 185, 306, 166, 314, 511,
	477, 369, 327, 325, 0, 292, 349, 506, 0, 0,
	214, 0, 209, 305, 445, 172, 424, 343, 310, 264,
	372, 401, 211, 196, 197, 240, 342, 230, 182, 435,
	474, 478, 476, 472, 469, 473, 470, 471, 475, 231,
	468, 0, 443, 452, 486, 466, 494, 451, 491, 461,
	206, 490, 455, 454, 500, 481, 482, 436, 496, 467,
	465, 458, 457, 453, 0, 131, 132, 133, 134, 135,
	136, 137, 138, 139, 140, 142, 0, 143, 144, 145,
	147, 148, 149, 0, 150, 151, 152, 155, 156, 157,
	159, 519, 160, 161, 162, 163, 164, 165, 456, 0,
	167, 168, 169, 170, 171, 173, 175, 176, 177, 178,
	179, 181, 183, 0, 0, 0, 0, 0, 0, 0,
	187, 188, 189, 190, 191, 192, 0, 193, 194, 198,
	200, 201, 202, 203, 204, 205, 208, 0, 210, 212,
	0, 213, 216, 0, 217, 218, 219, 220, 221, 222,
	223, 224, 460, 225, 0, 226, 227, 229, 0, 232,
	233, 234, 235, 236, 0, 237, 462, 463, 238, 239,
	241, 242, 243, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 0, 257, 258, 259, 261,
	0, 262, 263, 266, 267, 268, 269, 0, 271, 479,
	0, 272, 273, 274, 0, 0, 275, 276, 277, 278,
	279, 280, 283, 480, 285, 286, 287, 288, 289, 290,
	291, 521, 293, 294, 295, 296, 297, 298, 299, 483,
	484, 300, 302, 303, 485, 487, 488, 0, 318, 319,
	320, 321, 322, 323, 324, 326, 0, 328, 329, 330,
	489, 331, 332, 333, 334, 0, 335, 336, 337, 338,
	339, 341, 344, 345, 346, 347, 0, 350, 351, 352,
	353, 354, 355, 356, 358, 359, 360, 362, 363, 364,
	522, 365, 366, 367, 368, 492, 370, 371, 523, 373,
	374, 376, 377, 378, 379, 380, 381, 538, 0, 383,
	493, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	393, 394, 395, 398, 399, 400, 402, 403, 495, 404,
	405, 0, 407, 408, 0, 410, 411, 412, 413, 414,
	0, 539, 415, 497, 416, 498, 417, 418, 419, 420,
	421, 422, 423, 425, 0, 0, 427, 428, 429, 431,
	432, 433, 434, 437, 438, 439, 440, 441, 0, 442,
	444, 446, 524, 501, 502, 503, 504, 505, 507, 508,
	509, 510, 447, 448, 464, 315, 309, 265, 307, 308,
	312, 313, 316, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 0, 0, 1821,
	1822, 1823, 0, 0, 0, 0, 0, 0, 1815, 1816,
	1817, 1818, 1819, 1820, 141, 0, 158, 0, 0, 207,
	244, 459, 0, 0, 304, 0, 357, 361, 0, 450,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 0,
	0, 0, 426, 0, 0, 0, 0, 146, 540, 449,
	520, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 348, 282, 0,
	499, 375, 153, 199, 186, 228, 270, 382, 0, 0,
	260, 430, 195, 284, 0, 174, 317, 0, 406, 281,
	0, 389, 409, 0, 301, 180, 340, 396, 397, 0,
	0, 0, 0, 0, 184, 185, 306, 166, 314, 511,
	477, 369, 327, 325, 0, 292, 349, 506, 0, 0,
	214, 0, 209, 305, 445, 172, 424, 343, 310, 264,
	372, 401, 211, 196, 197, 240, 342, 230, 182, 435,
	474, 478, 476, 472, 469, 473, 470, 471, 475, 231,
	468, 0, 443, 452, 486, 466, 494, 451, 491, 461,
	206, 490, 455, 454, 500, 481, 482, 436, 496, 467,
	465, 458, 457, 453, 0, 131, 132, 133, 134, 135,
	136, 137, 138, 139, 140, 142, 0, 143, 144, 145,
	147, 148, 149, 0, 150, 151, 152, 155, 156, 157,
	159, 519, 160, 161, 162, 163, 164, 165, 456, 0,
	167, 168, 169, 170, 171, 173, 175, 176, 177, 178,
	179, 181, 183, 0, 0, 0, 0, 0, 0, 0,
	187, 188, 189, 190, 191, 192, 0, 193, 194, 198,
	200, 201, 202, 203, 204, 205, 208, 0, 210, 212,
	0, 213, 216, 0, 217, 218, 219, 220, 221, 222,
	223, 224, 460, 225, 0, 226, 227, 229, 0, 232,
	233, 234, 235, 236, 0, 237, 462, 463, 238, 239,
	241, 242, 243, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 0, 257, 258, 259, 261,
	0, 262, 263, 266, 267, 268, 269, 0, 271, 479,
	0, 272, 273, 274, 0, 0, 275, 276, 277, 278,
	279, 280, 283, 480, 285, 286, 287, 288, 289, 290,
	291, 521, 293, 294, 295, 296, 297, 298, 299, 483,
	484, 300, 302, 303, 485, 487, 488, 0, 318, 319,
	320, 321, 322, 323, 324, 326, 0, 328, 329, 330,
	489, 331, 332, 333, 334, 0, 335, 336, 337, 338,
	339, 341, 344, 345, 346, 347, 0, 350, 351, 352,
	353, 354, 355, 356, 358, 359, 360, 362, 363, 364,
	522, 365, 366, 367, 368, 492, 370, 371, 523, 373,
	374, 376, 377, 378, 379, 380, 381, 538, 0, 383,
	493, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	393, 394, 395, 398, 399, 400, 402, 403, 495, 404,
	405, 0, 407, 408, 0, 410, 411, 412, 413, 414,
	0, 539, 415, 497, 416, 498, 417, 418, 419, 420,
	421, 422, 423, 425, 0, 0, 427, 428, 429, 431,
	432, 433, 434, 437, 438, 439, 440, 441, 0, 442,
	444, 446, 524, 501, 502, 503, 504, 505, 507, 508,
	509, 510, 447, 448, 464, 315, 309, 265, 307, 308,
	312, 313, 316, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 158, 0, 0, 207, 244, 459, 0,
	3228, 304, 0, 357, 361, 0, 450, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 0, 426,
	0, 0, 0, 0, 146, 540, 449, 520, 0, 0,
	0, 311, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 348, 282, 0, 499, 375, 153,
	199, 186, 228, 270, 382, 0, 0, 260, 430, 195,
	284, 0, 174, 317, 0, 406, 281, 0, 389, 409,
	0, 301, 180, 340, 396, 397, 0, 0, 0, 0,
	0, 184, 185, 306, 166, 314, 511, 477, 369, 327,
	325, 0, 292, 349, 506, 0, 0, 214, 0, 209,
	305, 445, 172, 424, 343, 310, 264, 372, 401, 211,
	196, 197, 240, 342, 230, 182, 435, 474, 478, 476,
	472, 469, 473, 470, 471, 475, 231, 468, 0, 443,
	452, 486, 466, 494, 451, 491, 461, 206, 490, 455,
	454, 500, 481, 482, 436, 496, 467, 465, 458, 457,
	453, 0, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 142, 0, 143, 144, 145, 147, 148, 149,
	0, 150, 151, 152, 155, 156, 157, 159, 519, 160,
	161, 162, 163, 164, 165, 456, 0, 167, 168, 169,
	170, 171, 173, 175, 176, 177, 178, 179, 181, 183,
	0, 0, 0, 0, 0, 0, 0, 187, 188, 189,
	190, 191, 192, 0, 193, 194, 198, 200, 201, 202,
	203, 204, 205, 208, 0, 210, 212, 0, 213, 216,
	0, 217, 218, 219, 220, 221, 222, 223, 224, 460,
	225, 0, 226, 227, 229, 0, 232, 233, 234, 235,
	236, 0, 237, 462, 463, 238, 239, 241, 242, 243,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 0, 257, 258, 259, 261, 0, 262, 263,
	266, 267, 268, 269, 0, 271, 479, 0, 272, 273,
	274, 0, 0, 275, 276, 277, 278, 279, 280, 283,
	480, 285, 286, 287, 288, 289, 290, 291, 521, 293,
	294, 295, 296, 297, 298, 299, 483, 484, 300, 302,
	303, 485, 487, 488, 0, 318, 319, 320, 321, 322,
	323, 324, 326, 0, 328, 329, 330, 489, 331, 332,
	333, 334, 0, 335, 336, 337, 338, 339, 341, 344,
	345, 346, 347, 0, 350, 351, 352, 353, 354, 355,
	356, 358, 359, 360, 362, 363, 364, 522, 365, 366,
	367, 368, 492, 370, 371, 523, 373, 374, 376, 377,
	378, 379, 380, 381, 538, 0, 383, 493, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 393, 394, 395,
	398, 399, 400, 402, 403, 495, 404, 405, 0, 407,
	408, 0, 410, 411, 412, 413, 414, 0, 539, 415,
	497, 416, 498, 417, 418, 419, 420, 421, 422, 423,
	425, 0, 0, 427, 428, 429, 431, 432, 433, 434,
	437, 438, 439, 440, 441, 0, 442, 444, 446, 524,
	501, 502, 503, 504, 505, 507, 508, 509, 510, 447,
	448, 464, 315, 309, 265, 307, 308, 312, 313, 316,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	158, 0, 0, 207, 244, 459, 0, 3127, 304, 0,
	357, 361, 0, 450, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 0, 426, 0, 0, 0,
	0, 146, 540, 449, 520, 0, 0, 0, 311, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 348, 282, 0, 499, 375, 153, 199, 186, 228,
	270, 382, 0, 0, 260, 430, 195, 284, 0, 174,
	317, 0, 406, 281, 0, 389, 409, 0, 301, 180,
	340, 396, 397, 0, 0, 0, 0, 0, 184, 185,
	306, 166, 314, 511, 477, 369, 327, 325, 0, 292,
	349, 506, 0, 0, 214, 0, 209, 305, 445, 172,
	424, 343, 310, 264, 372, 401, 211, 196, 197, 240,
	342, 230, 182, 435, 474, 478, 476, 472, 469, 473,
	470, 471, 475, 231, 468, 0, 443, 452, 486, 466,
	494, 451, 491, 461, 206, 490, 455, 454, 500, 481,
	482, 436, 496, 467, 465, 458, 457, 453, 0, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 142,
	0, 143, 144, 145, 147, 148, 149, 0, 150, 151,
	152, 155, 156, 157, 159, 519, 160, 161, 162, 163,
	164, 165, 456, 0, 167, 168, 169, 170, 171, 173,
	175, 176, 177, 178, 179, 181, 183, 0, 0, 0,
	0, 0, 0, 0, 187, 188, 189, 190, 191, 192,
	0, 193, 194, 198, 200, 201, 202, 203, 204, 205,
	208, 0, 210, 212, 0, 213, 216, 0, 217, 218,
	219, 220, 221, 222, 223, 224, 460, 225, 0, 226,
	227, 229, 0, 232, 233, 234, 235, 236, 0, 237,
	462, 463, 238, 239, 241, 242, 243, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 0,
	257, 258, 259, 261, 0, 262, 263, 266, 267, 268,
	269, 0, 271, 479, 0, 272, 273, 274, 0, 0,
	275, 276, 277, 278, 279, 280, 283, 480, 285, 286,
	287, 288, 289, 290, 291, 521, 293, 294, 295, 296,
	297, 298, 299, 483, 484, 300, 302, 303, 485, 487,
	488, 0, 318, 319, 320, 321, 322, 323, 324, 326,
	0, 328, 329, 330, 489, 331, 332, 333, 334, 0,
	335, 336, 337, 338, 339, 341, 344, 345, 346, 347,
	0, 350, 351, 352, 353, 354, 355, 356, 358, 359,
	360, 362, 363, 364, 522, 365, 366, 367, 368, 492,
	370, 371, 523, 373, 374, 376, 377, 378, 379, 380,
	381, 538, 0, 383, 493, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 393, 394, 395, 398, 399, 400,
	402, 403, 495, 404, 405, 0, 407, 408, 0, 410,
	411, 412, 413, 414, 0, 539, 415, 497, 416, 498,
	417, 418, 419, 420, 421, 422, 423, 425, 0, 0,
	427, 428, 429, 431, 432, 433, 434, 437, 438, 439,
	440, 441, 0, 442, 444, 446, 524, 501, 502, 503,
	504, 505, 507, 508, 509, 510, 447, 448, 464, 315,
	309, 265, 307, 308, 312, 313, 316, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 158, 0, 0,
	207, 244, 459, 0, 3124, 304, 0, 357, 361, 36,
	450, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 0, 0, 426, 0, 0, 0, 0, 146, 540,
	449, 520, 0, 0, 0, 311, 33, 0, 0, 0,
	34, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 348, 282,
	0, 1462, 375, 153, 199, 186, 228, 270, 382, 0,
	0, 260, 430, 195, 284, 0, 174, 317, 0, 406,
	281, 0, 389, 409, 0, 301, 180, 340, 396, 397,
	0, 0, 0, 0, 0, 184, 185, 306, 166, 314,
	511, 477, 369, 327, 325, 0, 292, 349, 506, 0,
	0, 214, 0, 209, 305, 445, 172, 424, 343, 310,
	264, 372, 401, 211, 196, 197, 240, 342, 230, 182,
	435, 474, 478, 476, 472, 469, 473, 470, 471, 475,
	231, 468, 0, 443, 452, 486, 466, 494, 451, 491,
	461, 206, 490, 455, 454, 500, 481, 482, 436, 496,
	467, 465, 458, 457, 453, 0, 131, 132, 133, 134,
	135, 136, 137, 138, 139, 140, 142, 0, 143, 144,
	145, 147, 148, 149, 0, 150, 151, 152, 155, 156,
	157, 159, 519, 160, 161, 162, 163, 164, 165, 456,
	0, 167, 168, 169, 170, 171, 173, 175, 176, 177,
	178, 179, 181, 183, 0, 0, 0, 0, 0, 0,
	0, 187, 188, 189, 190, 191, 192, 0, 193, 194,
	198, 200, 201, 202, 203, 204, 205, 208, 0, 210,
	212, 0, 213, 216, 0, 217, 218, 219, 220, 221,
	222, 223, 224, 460, 225, 0, 226, 227, 229, 0,
	232, 233, 234, 235, 236, 0, 237, 462, 463, 238,
	239, 241, 242, 243, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 0, 257, 258, 259,
	261, 0, 262, 263, 266, 267, 268, 269, 0, 271,
	479, 0, 272, 273, 274, 0, 0, 275, 276, 277,
	278, 279, 280, 283, 480, 285, 286, 287, 288, 289,
	290, 291, 521, 293, 294, 295, 296, 297, 298, 299,
	483, 484, 300, 302, 303, 485, 487, 488, 0, 318,
	319, 320, 321, 322, 323, 324, 326, 0, 328, 329,
	330, 489, 331, 332, 333, 334, 0, 335, 336, 337,
	338, 339, 341, 344, 345, 346, 347, 0, 350, 351,
	352, 353, 354, 355, 356, 358, 359, 360, 362, 363,
	364, 522, 365, 366, 367, 368, 492, 370, 371, 523,
	373, 374, 376, 377, 378, 379, 380, 381, 538, 0,
	383, 493, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 393, 394, 395, 398, 399, 400, 402, 403, 495,
	404, 405, 0, 407, 408, 0, 410, 411, 412, 413,
	414, 0, 539, 415, 497, 416, 498, 417, 418, 419,
	420, 421, 422, 423, 425, 0, 0, 427, 428, 429,
	431, 432, 433, 434, 437, 438, 439, 440, 441, 0,
	442, 444, 446, 524, 501, 502, 503, 504, 505, 507,
	508, 509, 510, 447, 448, 464, 315, 309, 265, 307,
	308, 312, 313, 316, 627, 0, 0, 723, 0, 0,
	0, 0, 0, 37, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 158, 594, 32, 207, 244, 459,
	0, 0, 304, 0, 357, 361, 0, 450, 0, 0,
	0, 0, 215, 953, 599, 0, 605, 0, 611, 952,
	426, 0, 601, 602, 607, 146, 540, 449, 520, 0,
	0, 0, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 954, 603, 600, 604, 610,
	598, 608, 595, 606, 0, 348, 282, 0, 499, 375,
	153, 199, 186, 228, 270, 382, 0, 0, 260, 430,
	195, 284, 0, 174, 317, 0, 406, 281, 0, 389,
	409, 0, 301, 180, 340, 396, 397, 592, 597, 0,
	613, 0, 184, 185, 306, 166, 314, 511, 477, 369,
	327, 325, 0, 292, 349, 506, 0, 0, 214, 0,
	209, 305, 445, 172, 424, 343, 310, 264, 372, 401,
	211, 196, 197, 240, 342, 230, 182, 435, 474, 478,
	476, 472, 469, 473, 470, 471, 475, 231, 468, 0,
	443, 452, 486, 466, 494, 451, 491, 461, 206, 490,
	455, 454, 500, 481, 482, 436, 496, 467, 465, 458,
	457, 453, 0, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 142, 0, 143, 144, 145, 147, 148,
	149, 591, 150, 151, 152, 155, 156, 157, 159, 519,
	160, 161, 162, 163, 164, 165, 456, 593, 167, 168,
	169, 170, 171, 173, 175, 176, 177, 178, 179, 181,
	183, 0, 0, 0, 596, 0, 0, 0, 187, 188,
	189, 190, 191, 192, 0, 193, 194, 198, 200, 201,
	202, 203, 204, 205, 208, 0, 210, 212, 0, 213,
	216, 0, 217, 218, 219, 220, 221, 222, 223, 224,
	460, 225, 0, 226, 227, 229, 0, 232, 233, 234,
	235, 236, 0, 237, 462, 463, 238, 239, 241, 242,
	243, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 0, 257, 258, 259, 261, 0, 262,
	263, 266, 267, 268, 269, 0, 271, 479, 0, 272,
	273, 274, 0, 0, 275, 276, 277, 278, 279, 280,
	283, 480, 285, 286, 287, 288, 289, 290, 291, 521,
	293, 294, 295, 296, 297, 298, 299, 483, 484, 300,
	302, 303, 485, 487, 488, 609, 318, 319, 320, 321,
	322, 323, 324, 326, 0, 328, 329, 330, 489, 331,
	332, 333, 334, 0, 335, 336, 337, 338, 339, 341,
	344, 345, 346, 347, 0, 350, 351, 352, 353, 354,
	355, 356, 358, 359, 360, 362, 363, 364, 522, 365,
	366, 367, 368, 492, 370, 371, 523, 373, 374, 376,
	377, 378, 379, 380, 381, 538, 0, 383, 493, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 393, 394,
	395, 398, 399, 400, 402, 403, 495, 404, 405, 0,
	407, 408, 612, 410, 411, 412, 413, 414, 0, 539,
	415, 497, 416, 498, 417, 418, 419, 420, 421, 422,
	423, 425, 0, 0, 427, 428, 429, 431, 432, 433,
	434, 437, 438, 439, 440, 441, 0, 442, 444, 446,
	524, 501, 502, 503, 504, 505, 507, 508, 509, 510,
	447, 448, 464, 315, 309, 265, 307, 308, 312, 313,
	316, 627, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 158, 594, 0, 207, 244, 459, 0, 0, 304,
	0, 357, 361, 0, 450, 0, 0, 0, 0, 215,
	0, 599, 0, 605, 0, 611, 0, 426, 0, 601,
	602, 607, 146, 540, 449, 520, 0, 0, 0, 311,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 0,
	0, 0, 0, 603, 600, 604, 610, 598, 608, 595,
	606, 0, 348, 282, 0, 499, 375, 153, 199, 186,
	228, 270, 382, 0, 0, 260, 430, 195, 284, 0,
	174, 317, 0, 406, 281, 0, 389, 409, 0, 301,
	180, 340, 396, 397, 592, 597, 0, 613, 0, 184,
	185, 306, 166, 314, 511, 477, 369, 327, 325, 0,
	292, 349, 506, 0, 0, 214, 0, 209, 305, 445,
	172, 424, 343, 310, 264, 372, 401, 211, 196, 197,
	240, 342, 230, 182, 435, 474, 478, 476, 472, 469,
	473, 470, 471, 475, 231, 468, 0, 443, 452, 486,
	466, 494, 451, 491, 461, 206, 490, 455, 454, 500,
	481, 482, 436, 496, 467, 465, 458, 457, 453, 0,
	131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
	142, 0, 143, 144, 145, 147, 148, 149, 591, 150,
	151, 152, 155, 156, 157, 159, 519, 160, 161, 162,
	163, 164, 165, 456, 593, 167, 168, 169, 170, 171,
	173, 175, 176, 177, 178, 179, 181, 183, 0, 0,
	624, 596, 0, 0, 625, 187, 188, 189, 190, 191,
	192, 0, 193, 194, 198, 200, 201, 202, 203, 204,
	205, 208, 0, 210, 212, 0, 213, 216, 0, 217,
	218, 219, 220, 221, 222, 223, 224, 460, 225, 0,
	226, 227, 229, 0, 232, 233, 234, 235, 236, 0,
	237, 462, 463, 238, 239, 241, 242, 243, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	0, 257, 258, 259, 261, 0, 262, 263, 266, 267,
	268, 269, 0, 271, 479, 0, 272, 273, 274, 0,
	0, 275, 276, 277, 278, 279, 280, 283, 480, 285,
	286, 287, 288, 289, 290, 291, 521, 293, 294, 295,
	296, 297, 298, 299, 483, 484, 300, 302, 303, 485,
	487, 488, 609, 318, 319, 320, 321, 322, 323, 324,
	326, 0, 328, 329, 330, 489, 331, 332, 333, 334,
	0, 335, 336, 337, 338, 339, 341, 344, 345, 346,
	347, 0, 350, 351, 352, 353, 354, 355, 356, 358,
	359, 360, 362, 363, 364, 522, 365, 366, 367, 368,
	492, 370, 371, 523, 373, 374, 376, 377, 378, 379,
	380, 381, 538, 626, 383, 493, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 393, 394, 395, 398, 399,
	400, 402, 403, 495, 404, 405, 0, 407, 408, 612,
	410, 411, 412, 413, 414, 0, 539, 415, 497, 416,
	498, 417, 418, 419, 420, 421, 422, 423, 425, 0,
	0, 427, 428, 429, 431, 432, 433, 434, 437, 438,
	439, 440, 441, 0, 442, 444, 446, 524, 501, 502,
	503, 504, 505, 507, 508, 509, 510, 447, 448, 464,
	315, 309, 265, 307, 308, 312, 313, 316, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 2176, 158, 0,
	0, 207, 244, 459, 0, 0, 304, 0, 357, 361,
	0, 450, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 0, 0, 0, 426, 0, 0, 0, 0, 146,
	540, 449, 520, 0, 0, 0, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 348,
	282, 0, 499, 375, 153, 199, 186, 228, 270, 382,
	0, 0, 260, 430, 195, 284, 0, 174, 317, 0,
	406, 281, 0, 389, 409, 0, 301, 180, 340, 396,
	397, 0, 0, 0, 0, 0, 184, 185, 306, 166,
	314, 511, 477, 369, 327, 325, 0, 292, 349, 506,
	0, 0, 214, 0, 209, 305, 445, 172, 424, 343,
	310, 264, 372, 401, 211, 196, 197, 240, 342, 230,
	182, 435, 474, 478, 476, 472, 469, 473, 470, 471,
	475, 231, 468, 0, 443, 452, 486, 466, 494, 451,
	491, 461, 206, 490, 455, 454, 500, 481, 482, 436,
	496, 467, 465, 458, 457, 453, 0, 131, 132, 133,
	134, 135, 136, 137, 138, 139, 140, 142, 0, 143,
	144, 145, 147, 148, 149, 0, 150, 151, 152, 155,
	156, 157, 159, 519, 160, 161, 162, 163, 164, 165,
	456, 0, 167, 168, 169, 170, 171, 173, 175, 176,
	177, 178, 179, 181, 183, 0, 0, 0, 0, 0,
	0, 0, 187, 188, 189, 190, 191, 192, 0, 193,
	194, 198, 200, 201, 202, 203, 204, 205, 208, 0,
	210, 212, 0, 213, 216, 0, 217, 218, 219, 220,
	221, 222, 223, 224, 460, 225, 0, 226, 227, 229,
	0, 232, 233, 234, 235, 236, 0, 237, 462, 463,
	238, 239, 241, 242, 243, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 0, 257, 258,
	259, 261, 0, 262, 263, 266, 267, 268, 269, 0,
	271, 479, 0, 272, 273, 274, 0, 0, 275, 276,
	277, 278, 279, 280, 283, 480, 285, 286, 287, 288,
	289, 290, 291, 521, 293, 294, 295, 296, 297, 298,
	299, 483, 484, 300, 302, 303, 485, 487, 488, 0,
	318, 319, 320, 321, 322, 323, 324, 326, 0, 328,
	329, 330, 489, 331, 332, 333, 334, 0, 335, 336,
	337, 338, 339, 341, 344, 345, 346, 347, 0, 350,
	351, 352, 353, 354, 355, 356, 358, 359, 360, 362,
	363, 364, 522, 365, 366, 367, 368, 492, 370, 371,
	523, 373, 374, 376, 377, 378, 379, 380, 381, 538,
	0, 383, 493, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 393, 394, 395, 398, 399, 400, 402, 403,
	495, 404, 405, 0, 407, 408, 0, 410, 411, 412,
	413, 414, 0, 539, 415, 497, 416, 498, 417, 418,
	419, 420, 421, 422, 423, 425, 0, 0, 427, 428,
	429, 431, 432, 433, 434, 437, 438, 439, 440, 441,
	0, 442, 444, 446, 524, 501, 502, 503, 504, 505,
	507, 508, 509, 510, 447, 448, 464, 315, 309, 265,
	307, 308, 312, 313, 316, 0, 627, 0, 0, 723,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 158, 594, 736, 207,
	244, 459, 0, 0, 304, 0, 357, 361, 0, 450,
	0, 0, 938, 0, 215, 0, 599, 0, 605, 0,
	611, 0, 426, 0, 601, 602, 607, 146, 540, 449,
	520, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 603, 600,
	604, 610, 598, 608, 595, 606, 0, 348, 282, 0,
	499, 375, 153, 199, 186, 228, 270, 382, 0, 0,
	260, 430, 195, 284, 0, 174, 317, 0, 406, 281,
	0, 389, 409, 0, 301, 180, 340, 396, 397, 592,
	597, 0, 613, 0, 184, 185, 306, 166, 314, 511,
	477, 369, 327, 325, 0, 292, 349, 506, 0, 0,
	214, 0, 209, 305, 445, 172, 424, 343, 310, 264,
	372, 401, 211, 196, 197, 240, 342, 230, 182, 435,
	474, 478, 476, 472, 469, 473, 470, 471, 475, 231,
	468, 0, 443, 452, 486, 466, 494, 451, 491, 461,
	206, 490, 455, 454, 500, 481, 482, 436, 496, 467,
	465, 458, 457, 453, 0, 131, 132, 133, 134, 135,
	136, 137, 138, 139, 140, 142, 0, 143, 144, 145,
	147, 148, 149, 591, 150, 151, 152, 155, 156, 157,
	159, 519, 160, 161, 162, 163, 164, 165, 456, 593,
	167, 168, 169, 170, 171, 173, 175, 176, 177, 178,
	179, 181, 183, 0, 0, 0, 596, 0, 0, 0,
	187, 188, 189, 190, 191, 192, 0, 193, 194, 198,
	200, 201, 202, 203, 204, 205, 208, 0, 210, 212,
	0, 213, 216, 0, 217, 218, 219, 220, 221, 222,
	223, 224, 460, 225, 0, 226, 227, 229, 0, 232,
	233, 234, 235, 236, 0, 237, 462, 463, 238, 239,
	241, 242, 243, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 0, 257, 258, 259, 261,
	0, 262, 263, 266, 267, 268, 269, 0, 271, 479,
	0, 272, 273, 274, 0, 0, 275, 276, 277, 278,
	279, 280, 283, 480, 285, 286, 287, 288, 289, 290,
	291, 521, 293, 294, 295, 296, 297, 298, 299, 483,
	484, 300, 302, 303, 485, 487, 488, 609, 318, 319,
	320, 321, 322, 323, 324, 326, 0, 328, 329, 330,
	489, 331, 332, 333, 334, 0, 335, 336, 337, 338,
	339, 341, 344, 345, 346, 347, 0, 350, 351, 352,
	353, 354, 355, 356, 358, 359, 360, 362, 363, 364,
	522, 365, 366, 367, 368, 492, 370, 371, 523, 373,
	374, 376, 377, 378, 379, 380, 381, 538, 0, 383,
	493, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	393, 394, 395, 398, 399, 400, 402, 403, 495, 404,
	405, 0, 407, 408, 612, 410, 411, 412, 413, 414,
	0, 539, 415, 497, 416, 498, 417, 418, 419, 420,
	421, 422, 423, 425, 0, 0, 427, 428, 429, 431,
	432, 433, 434, 437, 438, 439, 440, 441, 0, 442,
	444, 446, 524, 501, 502, 503, 504, 505, 507, 508,
	509, 510, 447, 448, 464, 315, 309, 265, 307, 308,
	312, 313, 316, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 158, 0, 0, 207, 244, 459, 0,
	0, 304, 0, 357, 361, 0, 450, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 0, 426,
	0, 0, 0, 0, 146, 540, 449, 520, 0, 0,
	0, 311, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 348, 282, 0, 499, 375, 153,
	199, 186, 228, 270, 382, 0, 0, 260, 430, 195,
	284, 0, 174, 317, 0, 406, 281, 0, 389, 409,
	0, 301, 180, 340, 396, 397, 0, 0, 0, 0,
	0, 184, 185, 306, 166, 314, 511, 477, 369, 327,
	325, 0, 292, 349, 506, 0, 0, 214, 0, 209,
	305, 445, 172, 424, 343, 310, 264, 372, 401, 211,
	196, 197, 240, 342, 230, 182, 435, 474, 478, 476,
	472, 469, 473, 470, 471, 475, 231, 468, 0, 443,
	452, 486, 466, 494, 451, 491, 461, 206, 490, 455,
	454, 500, 481, 482, 436, 496, 467, 465, 458, 457,
	453, 0, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 142, 0, 143, 144, 145, 147, 148, 149,
	0, 150, 151, 152, 155, 156, 157, 159, 519, 160,
	161, 162, 163, 164, 165, 456, 0, 167, 168, 169,
	170, 171, 173, 175, 176, 177, 178, 179, 181, 183,
	0, 0, 0, 0, 0, 0, 0, 187, 188, 189,
	190, 191, 192, 0, 193, 194, 198, 200, 201, 202,
	203, 204, 205, 208, 0, 210, 212, 0, 213, 216,
	0, 217, 218, 219, 220, 221, 222, 223, 224, 460,
	225, 0, 226, 227, 229, 0, 232, 233, 234, 235,
	236, 0, 237, 462, 463, 238, 239, 241, 242, 243,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 0, 257, 258, 259, 261, 0, 262, 263,
	266, 267, 268, 269, 0, 271, 479, 0, 272, 273,
	274, 0, 0, 275, 276, 277, 278, 279, 280, 283,
	480, 285, 286, 287, 288, 289, 290, 291, 521, 293,
	294, 295, 296, 297, 298, 299, 483, 484, 300, 302,
	303, 485, 487, 488, 0, 318, 319, 320, 321, 322,
	323, 324, 326, 0, 328, 329, 330, 489, 331, 332,
	333, 334, 0, 335, 336, 337, 338, 339, 341, 344,
	345, 346, 347, 0, 350, 351, 352, 353, 354, 355,
	356, 358, 359, 360, 362, 363, 364, 522, 365, 366,
	367, 368, 492, 370, 371, 523, 373, 374, 376, 377,
	378, 379, 380, 381, 538, 0, 383, 493, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 393, 394, 395,
	398, 399, 400, 402, 403, 495, 404, 405, 0, 407,
	408, 0, 410, 411, 412, 413, 414, 0, 539, 415,
	497, 416, 498, 417, 418, 419, 420, 421, 422, 423,
	425, 0, 0, 427, 428, 429, 431, 432, 433, 434,
	437, 438, 439, 440, 441, 0, 442, 444, 446, 524,
	501, 502, 503, 504, 505, 507, 508, 509, 510, 447,
	448, 464, 315, 309, 265, 307, 308, 312, 313, 316,
	627, 0, 0, 723, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	158, 594, 1594, 207, 244, 459, 0, 0, 304, 0,
	357, 361, 0, 450, 0, 0, 0, 0, 215, 0,
	599, 0, 605, 0, 611, 0, 426, 0, 601, 602,
	607, 146, 540, 449, 520, 0, 0, 0, 311, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 603, 600, 604, 610, 598, 608, 595, 606,
	0, 348, 282, 0, 499, 375, 153, 199, 186, 228,
	270, 382, 0, 0, 260, 430, 195, 284, 0, 174,
	317, 0, 406, 281, 0, 389, 409, 0, 301, 180,
	340, 396, 397, 592, 597, 0, 613, 0, 184, 185,
	306, 166, 314, 511, 477, 369, 327, 325, 0, 292,
	349, 506, 0, 0, 214, 0, 209, 305, 445, 172,
	424, 343, 310, 264, 372, 401, 211, 196, 197, 240,
	342, 230, 182, 435, 474, 478, 476, 472, 469, 473,
	470, 471, 475, 231, 468, 0, 443, 452, 486, 466,
	494, 451, 491, 461, 206, 490, 455, 454, 500, 481,
	482, 436, 496, 467, 465, 458, 457, 453, 0, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 142,
	0, 143, 144, 145, 147, 148, 149, 591, 150, 151,
	152, 155, 156, 157, 159, 519, 160, 161, 162, 163,
	164, 165, 456, 593, 167, 168, 169, 170, 171, 173,
	175, 176, 177, 178, 179, 181, 183, 0, 0, 0,
	596, 0, 0, 0, 187, 188, 189, 190, 191, 192,
	0, 193, 194, 198, 200, 201, 202, 203, 204, 205,
	208, 0, 210, 212, 0, 213, 216, 0, 217, 218,
	219, 220, 221, 222, 223, 224, 460, 225, 0, 226,
	227, 229, 0, 232, 233, 234, 235, 236, 0, 237,
	462, 463, 238, 239, 241, 242, 243, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 0,
	257, 258, 259, 261, 0, 262, 263, 266, 267, 268,
	269, 0, 271, 479, 0, 272, 273, 274, 0, 0,
	275, 276, 277, 278, 279, 280, 283, 480, 285, 286,
	287, 288, 289, 290, 291, 521, 293, 294, 295, 296,
	297, 298, 299, 483, 484, 300, 302, 303, 485, 487,
	488, 609, 318, 319, 320, 321, 322, 323, 324, 326,
	0, 328, 329, 330, 489, 331, 332, 333, 334, 0,
	335, 336, 337, 338, 339, 341, 344, 345, 346, 347,
	0, 350, 351, 352, 353, 354, 355, 356, 358, 359,
	360, 362, 363, 364, 522, 365, 366, 367, 368, 492,
	370, 371, 523, 373, 374, 376, 377, 378, 379, 380,
	381, 538, 0, 383, 493, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 393, 394, 395, 398, 399, 400,
	402, 403, 495, 404, 405, 0, 407, 408, 612, 410,
	411, 412, 413, 414, 0, 539, 415, 497, 416, 498,
	417, 418, 419, 420, 421, 422, 423, 425, 0, 0,
	427, 428, 429, 431, 432, 433, 434, 437, 438, 439,
	440, 441, 0, 442, 444, 446, 524, 501, 502, 503,
	504, 505, 507, 508, 509, 510, 447, 448, 464, 315,
	309, 265, 307, 308, 312, 313, 316, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 158, 0, 0,
	207, 244, 459, 0, 0, 304, 0, 357, 361, 0,
	450, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 0, 0, 426, 0, 0, 0, 0, 146, 540,
	449, 520, 0, 0, 0, 311, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 348, 282,
	0, 499, 375, 153, 199, 186, 228, 270, 382, 0,
	0, 260, 430, 195, 284, 0, 174, 317, 0, 406,
	281, 0, 389, 409, 0, 301, 180, 340, 396, 397,
	0, 0, 0, 0, 0, 184, 185, 306, 166, 314,
	511, 477, 369, 327, 325, 0, 292, 349, 506, 0,
	0, 214, 0, 209, 305, 445, 172, 424, 343, 310,
	264, 372, 401, 211, 196, 197, 240, 342, 230, 182,
	435, 474, 478, 476, 472, 469, 473, 470, 471, 475,
	231, 468, 0, 443, 452, 486, 466, 494, 451, 491,
	461, 206, 490, 455, 454, 500, 481, 482, 436, 496,
	467, 465, 458, 457, 453, 0, 131, 132, 133, 134,
	135, 136, 137, 138, 139, 140, 142, 0, 143, 144,
	145, 147, 148, 149, 0, 150, 151, 152, 155, 156,
	157, 159, 519, 160, 161, 162, 163, 164, 165, 456,
	0, 167, 168, 169, 170, 171, 173, 175, 176, 177,
	178, 179, 181, 183, 0, 0, 0, 0, 0, 0,
	0, 187, 188, 189, 190, 191, 192, 0, 193, 194,
	198, 200, 201, 202, 203, 204, 205, 208, 0, 210,
	212, 0, 213, 216, 0, 217, 218, 219, 220, 221,
	222, 223, 224, 460, 225, 0, 226, 227, 229, 0,
	232, 233, 234, 235, 236, 0, 237, 462, 463, 238,
	239, 241, 242, 243, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 0, 257, 258, 259,
	261, 0, 262, 263, 266, 267, 268, 269, 0, 271,
	479, 0, 272, 273, 274, 0, 0, 275, 276, 277,
	278, 279, 280, 283, 480, 285, 286, 287, 288, 289,
	290, 291, 521, 293, 294, 295, 296, 297, 298, 299,
	483, 484, 300, 302, 303, 485, 487, 488, 0, 318,
	319, 320, 321, 322, 323, 324, 326, 0, 328, 329,
	330, 489, 331, 332, 333, 334, 0, 335, 336, 337,
	338, 339, 341, 344, 345, 346, 347, 0, 350, 351,
	352, 353, 354, 355, 356, 358, 359, 360, 362, 363,
	364, 522, 365, 366, 367, 368, 492, 370, 371, 523,
	373, 374, 376, 377, 378, 379, 380, 381, 538, 0,
	383, 493, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 393, 394, 395, 398, 399, 400, 402, 403, 495,
	404, 405, 0, 407, 408, 0, 410, 411, 412, 413,
	414, 0, 539, 415, 497, 416, 498, 417, 418, 419,
	420, 421, 422, 423, 425, 0, 0, 427, 428, 429,
	431, 432, 433, 434, 437, 438, 439, 440, 441, 0,
	442, 444, 446, 524, 501, 502, 503, 504, 505, 507,
	508, 509, 510, 447, 448, 464, 315, 309, 265, 307,
	308, 312, 313, 316, 588, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 158, 594, 781, 207, 244, 459,
	0, 0, 304, 0, 357, 361, 0, 450, 0, 0,
	0, 0, 215, 0, 599, 0, 605, 0, 611, 0,
	426, 0, 601, 602, 607, 146, 540, 449, 520, 0,
	0, 0, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 603, 600, 604, 610,
	598, 608, 595, 606, 0, 348, 282, 0, 499, 375,
	153, 199, 186, 228, 270, 382, 0, 0, 260, 430,
	195, 284, 0, 174, 317, 0, 406, 281, 0, 389,
	409, 0, 301, 180, 340, 396, 397, 592, 597, 0,
	613, 0, 184, 185, 306, 166, 314, 511, 477, 369,
	327, 325, 0, 292, 349, 506, 0, 0, 214, 0,
	209, 305, 445, 172, 424, 343, 310, 264, 372, 401,
	211, 196, 197, 240, 342, 230, 182, 435, 474, 478,
	476, 472, 469, 473, 470, 471, 475, 231, 468, 0,
	443, 452, 486, 466, 494, 451, 491, 461, 206, 490,
	455, 454, 500, 481, 482, 436, 496, 467, 465, 458,
	457, 453, 0, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 142, 0, 143, 144, 145, 147, 148,
	149, 591, 150, 151, 152, 155, 156, 157, 159, 519,
	160, 161, 162, 163, 164, 165, 456, 593, 167, 168,
	169, 170, 171, 173, 175, 176, 177, 178, 179, 181,
	183, 0, 0, 0, 596, 0, 0, 0, 187, 188,
	189, 190, 191, 192, 0, 193, 194, 198, 200, 201,
	202, 203, 204, 205, 208, 0, 210, 212, 0, 213,
	216, 0, 217, 218, 219, 220, 221, 222, 223, 224,
	460, 225, 0, 226, 227, 229, 0, 232, 233, 234,
	235, 236, 0, 237, 462, 463, 238, 239, 241, 242,
	243, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 0, 257, 258, 259, 261, 0, 262,
	263, 266, 267, 268, 269, 0, 271, 479, 0, 272,
	273, 274, 0, 0, 275, 276, 277, 278, 279, 280,
	283, 480, 285, 286, 287, 288, 289, 290, 291, 521,
	293, 294, 295, 296, 297, 298, 299, 483, 484, 300,
	302, 303, 485, 487, 488, 609, 318, 319, 320, 321,
	322, 323, 324, 326, 0, 328, 329, 330, 489, 331,
	332, 333, 334, 0, 335, 336, 337, 338, 339, 341,
	344, 345, 346, 347, 0, 350, 351, 352, 353, 354,
	355, 356, 358, 359, 360, 362, 363, 364, 522, 365,
	366, 367, 368, 492, 370, 371, 523, 373, 374, 376,
	377, 378, 379, 380, 381, 538, 0, 383, 493, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 393, 394,
	395, 398, 399, 400, 402, 403, 495, 404, 405, 0,
	407, 408, 612, 410, 411, 412, 413, 414, 0, 539,
	415, 497, 416, 498, 417, 418, 419, 420, 421, 422,
	423, 425, 0, 0, 427, 428, 429, 431, 432, 433,
	434, 437, 438, 439, 440, 441, 0, 442, 444, 446,
	524, 501, 502, 503, 504, 505, 507, 508, 509, 510,
	447, 448, 464, 315, 309, 265, 307, 308, 312, 313,
	316, 627, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 158, 594, 0, 207, 244, 459, 0, 0, 304,
	0, 357, 361, 0, 450, 0, 0, 0, 0, 215,
	0, 599, 0, 605, 0, 611, 0, 426, 0, 601,
	602, 607, 146, 540, 449, 520, 0, 0, 0, 311,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 0,
	0, 0, 0, 603, 600, 604, 610, 598, 608, 595,
	606, 0, 348, 282, 0, 499, 375, 153, 199, 186,
	228, 270, 382, 0, 0, 260, 430, 195, 284, 0,
	174, 317, 0, 406, 281, 0, 389, 409, 0, 301,
	180, 340, 396, 397, 592, 597, 0, 613, 0, 184,
	185, 306, 166, 314, 511, 477, 369, 327, 325, 0,
	292, 349, 506, 0, 0, 214, 0, 209, 305, 445,
	172, 424, 343, 310, 264, 372, 401, 211, 196, 197,
	240, 342, 230, 182, 435, 474, 478, 476, 472, 469,
	473, 470, 471, 475, 231, 468, 0, 443, 452, 486,
	466, 494, 451, 491, 461, 206, 490, 455, 454, 500,
	481, 482, 436, 496, 467, 465, 458, 457, 453, 0,
	131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
	142, 0, 143, 144, 145, 147, 148, 149, 591, 150,
	151, 152, 155, 156, 157, 159, 519, 160, 161, 162,
	163, 164, 165, 456, 593, 167, 168, 169, 170, 171,
	173, 175, 176, 177, 178, 179, 181, 183, 0, 0,
	0, 596, 0, 0, 0, 187, 188, 189, 190, 191,
	192, 0, 193, 194, 198, 200, 201, 202, 203, 204,
	205, 208, 0, 210, 212, 0, 213, 216, 0, 217,
	218, 219, 220, 221, 222, 223, 224, 460, 225, 0,
	226, 227, 229, 0, 232, 233, 234, 235, 236, 0,
	237, 462, 463, 238, 239, 241, 242, 243, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	0, 257, 258, 259, 261, 0, 262, 263, 266, 267,
	268, 269, 0, 271, 479, 0, 272, 273, 274, 0,
	0, 275, 276, 277, 278, 279, 280, 283, 480, 285,
	286, 287, 288, 289, 290, 291, 521, 293, 294, 295,
	296, 297, 298, 299, 483, 484, 300, 302, 303, 485,
	487, 488, 609, 318, 319, 320, 321, 322, 323, 324,
	326, 0, 328, 329, 330, 489, 331, 332, 333, 334,
	0, 335, 336, 337, 338, 339, 341, 344, 345, 346,
	347, 0, 350, 351, 352, 353, 354, 355, 356, 358,
	359, 360, 362, 363, 364, 522, 365, 366, 367, 368,
	492, 370, 371, 523, 373, 374, 376, 377, 378, 379,
	380, 381, 538, 0, 383, 493, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 393, 394, 395, 398, 399,
	400, 402, 403, 495, 404, 405, 0, 407, 408, 612,
	410, 411, 412, 413, 414, 0, 539, 415, 497, 416,
	498, 417, 418, 419, 420, 421, 422, 423, 425, 0,
	0, 427, 428, 429, 431, 432, 433, 434, 437, 438,
	439, 440, 441, 0, 442, 444, 446, 524, 501, 502,
	503, 504, 505, 507, 508, 509, 510, 447, 448, 464,
	315, 309, 265, 307, 308, 312, 313, 316, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 158, 0,
	0, 207, 1633, 459, 0, 0, 304, 0, 357, 361,
	0, 450, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 0, 0, 0, 426, 0, 0, 0, 0, 146,
	540, 449, 520, 0, 0, 0, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 348,
	282, 0, 499, 375, 153, 199, 186, 228, 270, 382,
	0, 0, 260, 430, 195, 284, 0, 174, 317, 0,
	406, 281, 0, 389, 409, 0, 301, 180, 340, 396,
	397, 0, 0, 1637, 0, 0, 184, 185, 306, 166,
	314, 511, 477, 369, 327, 325, 0, 292, 349, 506,
	0, 0, 214, 0, 209, 305, 445, 172, 424, 343,
	310, 264, 372, 401, 211, 196, 197, 240, 342, 230,
	182, 435, 474, 478, 476, 472, 469, 473, 470, 471,
	475, 231, 468, 0, 443, 452, 486, 466, 494, 451,
	491, 461, 206, 490, 455, 454, 500, 481, 482, 436,
	496, 467, 465, 458, 457, 453, 0, 131, 132, 133,
	134, 135, 136, 137, 138, 139, 140, 142, 0, 143,
	144, 145, 147, 148, 149, 0, 150, 151, 152, 155,
	156, 157, 159, 519, 160, 161, 162, 163, 164, 165,
	456, 0, 167, 168, 169, 170, 171, 173, 175, 176,
	177, 178, 179, 181, 183, 0, 0, 0, 0, 0,
	0, 0, 187, 188, 189, 190, 191, 192, 0, 193,
	194, 198, 200, 201, 202, 203, 204, 205, 208, 0,
	210, 212, 0, 213, 216, 0, 1643, 218, 219, 220,
	221, 222, 223, 224, 460, 225, 0, 226, 227, 229,
	1642, 232, 233, 234, 235, 236, 0, 237, 462, 463,
	238, 239, 241, 242, 243, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 0, 257, 258,
	259, 261, 0, 262, 263, 266, 267, 268, 269, 0,
	271, 479, 0, 272, 273, 274, 0, 0, 275, 276,
	277, 278, 279, 280, 283, 480, 285, 286, 287, 288,
	289, 290, 291, 521, 293, 294, 295, 296, 297, 298,
	299, 483, 484, 300, 302, 303, 485, 487, 488, 0,
	318, 319, 320, 321, 322, 323, 324, 326, 0, 328,
	329, 330, 489, 331, 332, 333, 334, 1641, 335, 336,
	337, 338, 339, 341, 344, 345, 346, 347, 0, 350,
	351, 352, 353, 354, 355, 356, 358, 359, 360, 362,
	363, 364, 522, 365, 366, 367, 368, 492, 370, 371,
	523, 373, 374, 376, 377, 378, 379, 380, 381, 538,
	0, 383, 493, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 393, 394, 395, 398, 399, 400, 402, 403,
	495, 404, 405, 0, 407, 408, 0, 410, 411, 412,
	413, 414, 0, 539, 415, 497, 416, 498, 417, 418,
	419, 420, 421, 422, 423, 425, 0, 1640, 427, 428,
	429, 431, 432, 433, 434, 437, 438, 439, 440, 441,
	0, 442, 444, 446, 524, 501, 502, 503, 504, 505,
	507, 508, 509, 510, 447, 448, 464, 315, 309, 265,
	307, 308, 312, 313, 316, 128, 0, 0, 0, 1639,
	1634, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 158, 0, 0, 207, 244,
	459, 0, 0, 304, 0, 357, 361, 0, 450, 0,
	0, 0, 0, 215, 0, 0, 0, 1899, 0, 0,
	0, 426, 0, 0, 0, 0, 146, 540, 449, 520,
	0, 0, 0, 311, 0, 0, 0, 0, 0, 0,
	0, 0, 154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 348, 282, 0, 499,
	375, 153, 199, 186, 228, 270, 382, 0, 0, 260,
	430, 195, 284, 0, 174, 317, 0, 406, 281, 0,
	389, 409, 0, 301, 180, 340, 396, 397, 0, 0,
	1637, 0, 0, 184, 185, 306, 166, 314, 511, 477,
	369, 327, 325, 0, 292, 349, 506, 0, 0, 214,
	0, 209, 305, 445, 172, 424, 343, 310, 264, 372,
	401, 211, 196, 197, 240, 342, 230, 182, 435, 474,
	478, 476, 472, 469, 473, 470, 471, 475, 231, 468,
	0, 443, 452, 486, 466, 494, 451, 491, 461, 206,
	490, 455, 454, 500, 481, 482, 436, 496, 467, 465,
	458, 457, 453, 0, 131, 132, 133, 134, 135, 136,
	137, 138, 139, 140, 142, 0, 143, 144, 145, 147,
	148, 149, 0, 150, 151, 152, 155, 156, 157, 159,
	519, 160, 161, 162, 163, 164, 165, 456, 0, 167,
	168, 169, 170, 171, 173, 175, 176, 177, 178, 179,
	181, 183, 0, 0, 0, 0, 0, 0, 0, 187,
	188, 189, 190, 191, 192, 0, 193, 194, 198, 200,
	201, 202, 203, 204, 205, 208, 0, 210, 212, 0,
	213, 216, 0, 1643, 218, 219, 220, 221, 222, 223,
	224, 460, 225, 0, 226, 227, 229, 1642, 232, 233,
	234, 235, 236, 0, 237, 462, 463, 238, 239, 241,
	242, 243, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 0, 257, 258, 259, 261, 0,
	262, 263, 266, 267, 268, 269, 0, 271, 479, 0,
	272, 273, 274, 0, 0, 275, 276, 277, 278, 279,
	280, 283, 480, 285, 286, 287, 288, 289, 290, 291,
	521, 293, 294, 295, 296, 297, 298, 299, 483, 484,
	300, 302, 303, 485, 487, 488, 0, 318, 319, 320,
	321, 322, 323, 324, 326, 0, 328, 329, 330, 489,
	331, 332, 333, 334, 1641, 335, 336, 337, 338, 339,
	341, 344, 345, 346, 347, 0, 350, 351, 352, 353,
	354, 355, 356, 358, 359, 360, 362, 363, 364, 522,
	365, 366, 367, 368, 492, 370, 371, 523, 373, 374,
	376, 377, 378, 379, 380, 381, 538, 0, 383, 493,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 393,
	394, 395, 398, 399, 400, 402, 403, 495, 404, 405,
	0, 407, 408, 0, 410, 411, 412, 413, 414, 0,
	539, 415, 497, 416, 498, 417, 418, 419, 420, 421,
	422, 423, 425, 0, 1640, 427, 428, 429, 431, 432,
	433, 434, 437, 438, 439, 440, 441, 0, 442, 444,
	446, 524, 501, 502, 503, 504, 505, 507, 508, 509,
	510, 447, 448, 464, 315, 309, 265, 307, 308, 312,
	313, 316, 128, 0, 0, 0, 1639, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 158, 0, 0, 207, 244, 459, 0, 0,
	304, 0, 357, 361, 0, 450, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 0, 0, 0, 426, 0,
	0, 0, 0, 146, 540, 449, 520, 0, 0, 0,
	311, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 348, 282, 0, 499, 375, 153, 199,
	186, 228, 270, 382, 0, 0, 260, 430, 195, 284,
	0, 174, 317, 0, 406, 281, 0, 389, 409, 0,
	301, 180, 340, 396, 397, 0, 0, 1637, 0, 0,
	184, 185, 306, 166, 314, 511, 477, 369, 327, 325,
	0, 292, 349, 506, 0, 0, 214, 0, 209, 305,
	445, 172, 424, 343, 310, 264, 372, 401, 211, 196,
	197, 240, 342, 230, 182, 435, 474, 478, 476, 472,
	469, 473, 470, 471, 475, 231, 468, 0, 443, 452,
	486, 466, 494, 451, 491, 461, 206, 490, 455, 454,
	500, 481, 482, 436, 496, 467, 465, 458, 457, 453,
	0, 131, 132, 133, 134, 135, 136, 137, 138, 139,
	140, 142, 0, 143, 144, 145, 147, 148, 149, 0,
	150, 151, 152, 155, 156, 157, 159, 519, 160, 161,
	162, 163, 164, 165, 456, 0, 167, 168, 169, 170,
	171, 173, 175, 176, 177, 178, 179, 181, 183, 0,
	0, 0, 0, 0, 0, 0, 187, 188, 189, 190,
	191, 192, 0, 193, 194, 198, 200, 201, 202, 203,
	204, 205, 208, 0, 210, 212, 0, 213, 216, 0,
	1643, 218, 219, 220, 221, 222, 223, 224, 460, 225,
	0, 226, 227, 229, 1642, 232, 233, 234, 235, 236,
	0, 237, 462, 463, 238, 239, 241, 242, 243, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 0, 257, 258, 259, 261, 0, 262, 263, 266,
	267, 268, 269, 0, 271, 479, 0, 272, 273, 274,
	0, 0, 275, 276, 277, 278, 279, 280, 283, 480,
	285, 286, 287, 288, 289, 290, 291, 521, 293, 294,
	295, 296, 297, 298, 299, 483, 484, 300, 302, 303,
	485, 487, 488, 0, 318, 319, 320, 321, 322, 323,
	324, 326, 0, 328, 329, 330, 489, 331, 332, 333,
	334, 1641, 335, 336, 337, 338, 339, 341, 344, 345,
	346, 347, 0, 350, 351, 352, 353, 354, 355, 356,
	358, 359, 360, 362, 363, 364, 522, 365, 366, 367,
	368, 492, 370, 371, 523, 373, 374, 376, 377, 378,
	379, 380, 381, 538, 0, 383, 493, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 393, 394, 395, 398,
	399, 400, 402, 403, 495, 404, 405, 0, 407, 408,
	0, 410, 411, 412, 413, 414, 0, 539, 415, 497,
	416, 498, 417, 418, 419, 420, 421, 422, 423, 425,
	0, 1640, 427, 428, 429, 431, 432, 433, 434, 437,
	438, 439, 440, 441, 0, 442, 444, 446, 524, 501,
	502, 503, 504, 505, 507, 508, 509, 510, 447, 448,
	464, 315, 309, 265, 307, 308, 312, 313, 316, 686,
	0, 0, 0, 1639, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 158,
	594, 0, 207, 244, 0, 0, 0, 304, 0, 357,
	361, 0, 0, 0, 0, 0, 0, 215, 0, 599,
	1940, 605, 0, 611, 0, 426, 0, 601, 602, 607,
	146, 685, 449, 520, 0, 0, 0, 311, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 603, 600, 604, 610, 598, 608, 595, 606, 0,
	348, 282, 0, 0, 375, 153, 199, 186, 228, 270,
	382, 0, 0, 260, 430, 195, 284, 0, 174, 317,
	0, 406, 281, 0, 389, 409, 0, 301, 180, 340,
	396, 397, 592, 597, 0, 613, 0, 184, 185, 306,
	166, 314, 0, 0, 369, 327, 325, 0, 292, 349,
	0, 0, 0, 214, 0, 209, 305, 445, 172, 424,
	343, 310, 264, 372, 401, 211, 196, 197, 240, 342,
	230, 182, 435, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 443, 688, 678, 670, 671,
	672, 673, 674, 675, 0, 690, 691, 692, 693, 694,
	436, 684, 0, 669, 676, 677, 679, 1943, 131, 132,
	133, 134, 135, 136, 137, 138, 139, 140, 142, 0,
	143, 144, 145, 147, 148, 149, 591, 150, 151, 152,
	155, 156, 157, 159, 519, 160, 161, 162, 163, 164,
	165, 0, 593, 167, 168, 169, 170, 171, 173, 175,
	176, 177, 178, 179, 181, 183, 0, 0, 0, 596,
	0, 0, 0, 187, 188, 189, 190, 191, 192, 0,
	193, 194, 198, 200, 201, 202, 203, 204, 205, 208,
	0, 210, 212, 0, 213, 216, 0, 217, 218, 219,
	220, 221, 222, 223, 224, 0, 225, 0, 226, 227,
	229, 0, 232, 233, 234, 235, 236, 0, 237, 0,
	0, 238, 239, 241, 242, 243, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 0, 257,
	258, 259, 261, 0, 262, 263, 266, 267, 268, 269,
	0, 271, 0, 0, 272, 273, 274, 0, 0, 275,
	276, 277, 278, 279, 280, 283, 0, 285, 286, 287,
	288, 289, 290, 291, 521, 293, 294, 295, 296, 297,
	298, 299, 0, 0, 300, 302, 303, 0, 1941, 0,
	609, 318, 319, 320, 321, 322, 323, 324, 326, 0,
	328, 329, 330, 0, 331, 332, 333, 334, 0, 335,
	336, 337, 338, 339, 341, 344, 345, 346, 347, 0,
	350, 351, 352, 353, 354, 355, 356, 358, 359, 360,
	362, 363, 364, 522, 365, 366, 367, 368, 0, 370,
	371, 523, 373, 374, 376, 377, 378, 379, 380, 381,
	538, 0, 383, 1946, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 393, 394, 395, 398, 399, 400, 402,
	403, 0, 404, 405, 0, 407, 408, 612, 410, 411,
	412, 413, 414, 0, 539, 415, 0, 416, 0, 417,
	418, 419, 420, 421, 422, 423, 425, 0, 0, 427,
	428, 429, 431, 432, 433, 434, 437, 438, 439, 440,
	441, 0, 442, 444, 446, 524, 0, 0, 0, 128,
	0, 0, 0, 0, 0, 447, 448, 1942, 315, 309,
	265, 307, 308, 312, 313, 316, 2005, 141, 0, 158,
	0, 0, 207, 244, 459, 0, 0, 304, 0, 357,
	361, 0, 450, 0, 0, 0, 0, 215, 0, 1934,
	0, 0, 0, 0, 0, 426, 0, 0, 0, 0,
	146, 540, 449, 520, 0, 0, 0, 311, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	348, 282, 0, 499, 375, 153, 199, 186, 228, 270,
	382, 0, 0, 260, 430, 195, 284, 0, 174, 317,
	2006, 406, 281, 0, 389, 409, 0, 301, 180, 340,
	396, 397, 0, 0, 0, 0, 0, 184, 185, 306,
	166, 314, 511, 477, 369, 327, 325, 0, 292, 349,
	506, 0, 0, 214, 0, 209, 305, 445, 172, 424,
	343, 310, 264, 372, 401, 211, 196, 197, 240, 342,
	230, 182, 435, 474, 478, 476, 472, 469, 473, 470,
	471, 475, 231, 468, 0, 443, 452, 486, 466, 494,
	451, 491, 461, 206, 490, 455, 454, 500, 481, 482,
	436, 496, 467, 465, 458, 457, 453, 0, 131, 132,
	133, 134, 135, 136, 137, 138, 139, 140, 142, 0,
	143, 144, 145, 147, 148, 149, 0, 150, 151, 152,
	155, 156, 157, 159, 519, 160, 161, 162, 163, 164,
	165, 456, 0, 167, 168, 169, 170, 171, 173, 175,
	176, 177, 178, 179, 181, 183, 0, 0, 0, 0,
	0, 0, 0, 187, 188, 189, 190, 191, 192, 0,
	193, 194, 198, 200, 201, 202, 203, 204, 205, 208,
	0, 210, 212, 0, 213, 216, 0, 217, 218, 219,
	220, 221, 222, 223, 224, 460, 225, 0, 226, 227,
	229, 0, 232, 233, 234, 235, 236, 0, 237, 462,
	463, 238, 239, 241, 242, 243, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 0, 257,
	258, 259, 261, 0, 262, 263, 266, 267, 268, 269,
	0, 271, 479, 0, 272, 273, 274, 0, 0, 275,
	276, 277, 278, 279, 280, 283, 480, 285, 286, 287,
	288, 289, 290, 291, 521, 293, 294, 295, 296, 297,
	298, 299, 483, 484, 300, 302, 303, 485, 487, 488,
	0, 318, 319, 320, 321, 322, 323, 324, 326, 0,
	328, 329, 330, 489, 331, 332, 333, 334, 0, 335,
	336, 337, 338, 339, 341, 344, 345, 346, 347, 0,
	350, 351, 352, 353, 354, 355, 356, 358, 359, 360,
	362, 363, 364, 522, 365, 366, 367, 368, 492, 370,
	371, 523, 373, 374, 376, 377, 378, 379, 380, 381,
	538, 0, 383, 493, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 393, 394, 395, 398, 399, 400, 402,
	403, 495, 404, 405, 0, 407, 408, 0, 410, 411,
	412, 413, 414, 0, 539, 415, 497, 416, 498, 417,
	418, 419, 420, 421, 422, 423, 425, 0, 0, 427,
	428, 429, 431, 432, 433, 434, 437, 438, 439, 440,
	441, 0, 442, 444, 446, 524, 501, 502, 503, 504,
	505, 507, 508, 509, 510, 447, 448, 464, 315, 309,
	265, 307, 308, 312, 313, 316, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1996, 141, 0, 158, 0, 0, 207,
	244, 459, 0, 0, 304, 0, 357, 361, 0, 450,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 0,
	0, 0, 426, 0, 0, 0, 0, 146, 540, 449,
	520, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 348, 282, 0,
	499, 375, 153, 199, 186, 228, 270, 382, 0, 0,
	260, 430, 195, 284, 0, 174, 317, 1997, 406, 281,
	0, 389, 409, 0, 301, 180, 340, 396, 397, 0,
	0, 0, 0, 0, 184, 185, 306, 166, 314, 511,
	477, 369, 327, 325, 0, 292, 349, 506, 0, 0,
	214, 0, 209, 305, 445, 172, 424, 343, 310, 264,
	372, 401, 211, 196, 197, 240, 342, 230, 182, 435,
	474, 478, 476, 472, 469, 473, 470, 471, 475, 231,
	468, 0, 443, 452, 486, 466, 494, 451, 491, 461,
	206, 490, 455, 454, 500, 481, 482, 436, 496, 467,
	465, 458, 457, 453, 0, 131, 132, 133, 134, 135,
	136, 137, 138, 139, 140, 142, 0, 143, 144, 145,
	147, 148, 149, 0, 150, 151, 152, 155, 156, 157,
	159, 519, 160, 161, 162, 163, 164, 165, 456, 0,
	167, 168, 169, 170, 171, 173, 175, 176, 177, 178,
	179, 181, 183, 0, 0, 0, 0, 0, 0, 0,
	187, 188, 189, 190, 191, 192, 0, 193, 194, 198,
	200, 201, 202, 203, 204, 205, 208, 0, 210, 212,
	0, 213, 216, 0, 217, 218, 219, 220, 221, 222,
	223, 224, 460, 225, 0, 226, 227, 229, 0, 232,
	233, 234, 235, 236, 0, 237, 462, 463, 238, 239,
	241, 242, 243, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 0, 257, 258, 259, 261,
	0, 262, 263, 266, 267, 268, 269, 0, 271, 479,
	0, 272, 273, 274, 0, 0, 275, 276, 277, 278,
	279, 280, 283, 480, 285, 286, 287, 288, 289, 290,
	291, 521, 293, 294, 295, 296, 297, 298, 299, 483,
	484, 300, 302, 303, 485, 487, 488, 0, 318, 319,
	320, 321, 322, 323, 324, 326, 0, 328, 329, 330,
	489, 331, 332, 333, 334, 0, 335, 336, 337, 338,
	339, 341, 344, 345, 346, 347, 0, 350, 351, 352,
	353, 354, 355, 356, 358, 359, 360, 362, 363, 364,
	522, 365, 366, 367, 368, 492, 370, 371, 523, 373,
	374, 376, 377, 378, 379, 380, 381, 538, 0, 383,
	493, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	393, 394, 395, 398, 399, 400, 402, 403, 495, 404,
	405, 0, 407, 408, 0, 410, 411, 412, 413, 414,
	0, 539, 415, 497, 416, 498, 417, 418, 419, 420,
	421, 422, 423, 425, 0, 0, 427, 428, 429, 431,
	432, 433, 434, 437, 438, 439, 440, 441, 0, 442,
	444, 446, 524, 501, 502, 503, 504, 505, 507, 508,
	509, 510, 447, 448, 464, 315, 309, 265, 307, 308,
	312, 313, 316, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	573, 141, 0, 158, 0, 0, 207, 572, 459, 0,
	0, 304, 0, 357, 361, 0, 450, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 0, 426,
	0, 0, 0, 0, 146, 540, 449, 520, 0, 0,
	0, 311, 0, 0, 0, 537, 0, 0, 0, 0,
	154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 348, 282, 0, 499, 375, 153,
	199, 186, 228, 270, 382, 0, 0, 260, 430, 195,
	284, 0, 174, 317, 0, 406, 281, 0, 389, 409,
	0, 301, 180, 340, 396, 397, 0, 0, 0, 0,
	0, 184, 185, 306, 166, 314, 511, 477, 369, 327,
	325, 0, 292, 349, 506, 0, 0, 214, 0, 209,
	305, 445, 172, 424, 343, 310, 264, 372, 401, 211,
	196, 197, 240, 342, 230, 182, 435, 474, 478, 476,
	472, 469, 473, 470, 471, 475, 231, 468, 0, 443,
	452, 486, 466, 494, 451, 491, 461, 206, 490, 455,
	454, 500, 481, 482, 436, 496, 467, 465, 458, 457,
	453, 0, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 142, 0, 143, 144, 145, 147, 148, 149,
	0, 150, 151, 152, 155, 156, 157, 159, 519, 160,
	161, 162, 163, 164, 165, 456, 0, 167, 168, 169,
	170, 171, 173, 175, 176, 177, 178, 179, 181, 183,
	0, 0, 0, 0, 0, 0, 0, 187, 188, 189,
	190, 191, 192, 0, 193, 194, 198, 200, 201, 202,
	203, 204, 205, 208, 0, 210, 212, 0, 213, 216,
	0, 217, 218, 219, 220, 221, 222, 223, 224, 460,
	225, 0, 226, 227, 229, 0, 232, 233, 234, 235,
	236, 0, 237, 462, 463, 238, 239, 241, 242, 243,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 0, 257, 258, 259, 261, 0, 262, 263,
	266, 267, 268, 269, 0, 271, 479, 0, 272, 273,
	274, 0, 0, 275, 276, 277, 278, 279, 280, 283,
	480, 285, 286, 287, 288, 289, 290, 291, 521, 293,
	294, 295, 296, 297, 298, 299, 483, 484, 300, 302,
	303, 485, 487, 488, 0, 318, 319, 320, 321, 322,
	323, 324, 326, 0, 328, 329, 330, 489, 331, 332,
	333, 334, 0, 335, 336, 337, 338, 339, 341, 344,
	345, 346, 347, 0, 350, 351, 352, 353, 354, 355,
	356, 358, 359, 360, 362, 363, 364, 522, 365, 366,
	367, 368, 492, 370, 371, 523, 373, 374, 376, 377,
	378, 379, 380, 381, 538, 0, 383, 493, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 393, 394, 395,
	398, 399, 400, 402, 403, 495, 404, 405, 0, 407,
	408, 0, 410, 411, 412, 413, 414, 0, 539, 415,
	497, 416, 498, 417, 418, 419, 420, 421, 422, 423,
	425, 0, 0, 427, 428, 429, 431, 432, 433, 434,
	437, 438, 439, 440, 441, 0, 442, 444, 446, 524,
	501, 502, 503, 504, 505, 507, 508, 509, 510, 447,
	448, 464, 315, 309, 265, 307, 308, 312, 313, 316,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	158, 0, 0, 207, 244, 459, 0, 0, 304, 0,
	357, 361, 0, 450, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 0, 426, 0, 0, 0,
	0, 146, 540, 449, 520, 0, 0, 0, 311, 0,
	0, 0, 537, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 348, 282, 0, 499, 375, 153, 199, 186, 228,
	270, 382, 0, 0, 260, 430, 195, 284, 0, 174,
	317, 0, 406, 281, 0, 389, 409, 0, 301, 180,
	340, 396, 397, 0, 0, 0, 0, 0, 184, 185,
	306, 166, 314, 511, 477, 369, 327, 325, 0, 292,
	349, 506, 0, 0, 214, 0, 209, 305, 445, 172,
	424, 343, 310, 264, 372, 401, 211, 196, 197, 240,
	342, 230, 182, 435, 474, 478, 476, 472, 469, 473,
	470, 471, 475, 231, 468, 0, 443, 452, 486, 466,
	494, 451, 491, 461, 206, 490, 455, 454, 500, 481,
	482, 436, 496, 467, 465, 458, 457, 453, 0, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 142,
	0, 143, 144, 145, 147, 148, 149, 0, 150, 151,
	152, 155, 156, 157, 159, 519, 160, 161, 162, 163,
	164, 165, 456, 0, 167, 168, 169, 170, 171, 173,
	175, 176, 177, 178, 179, 181, 183, 0, 0, 0,
	0, 0, 0, 0, 187, 188, 189, 190, 191, 192,
	0, 193, 194, 198, 200, 201, 202, 203, 204, 205,
	208, 0, 210, 212, 0, 213, 216, 0, 217, 218,
	219, 220, 221, 222, 223, 224, 460, 225, 0, 226,
	227, 229, 0, 232, 233, 234, 235, 236, 0, 237,
	462, 463, 238, 239, 241, 242, 243, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 0,
	257, 258, 259, 261, 0, 262, 263, 266, 267, 268,
	269, 0, 271, 479, 0, 272, 273, 274, 0, 0,
	275, 276, 277, 278, 279, 280, 283, 480, 285, 286,
	287, 288, 289, 290, 291, 521, 293, 294, 295, 296,
	297, 298, 299, 483, 484, 300, 302, 303, 485, 487,
	488, 0, 318, 319, 320, 321, 322, 323, 324, 326,
	0, 328, 329, 330, 489, 331, 332, 333, 334, 0,
	335, 336, 337, 338, 339, 341, 344, 345, 346, 347,
	0, 350, 351, 352, 353, 354, 355, 356, 358, 359,
	360, 362, 363, 364, 522, 365, 366, 367, 368, 492,
	370, 371, 523, 373, 374, 376, 377, 378, 379, 380,
	381, 538, 0, 383, 493, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 393, 394, 395, 398, 399, 400,
	402, 403, 495, 404, 405, 0, 407, 408, 0, 410,
	411, 412, 413, 414, 0, 539, 415, 497, 416, 498,
	417, 418, 419, 420, 421, 422, 423, 425, 0, 0,
	427, 428, 429, 431, 432, 433, 434, 437, 438, 439,
	440, 441, 0, 442, 444, 446, 524, 501, 502, 503,
	504, 505, 507, 508, 509, 510, 447, 448, 464, 315,
	309, 265, 307, 308, 312, 313, 316, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 158, 0, 0,
	207, 244, 459, 0, 0, 304, 0, 357, 361, 0,
	450, 0, 0, 2719, 0, 215, 0, 0, 0, 0,
	0, 0, 0, 426, 0, 0, 0, 0, 146, 540,
	449, 520, 0, 0, 0, 311, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 348, 282,
	0, 499, 375, 153, 199, 186, 228, 270, 382, 0,
	0, 260, 430, 195, 284, 0, 174, 317, 0, 406,
	281, 0, 389, 409, 0, 301, 180, 340, 396, 397,
	0, 0, 0, 0, 0, 184, 185, 306, 166, 314,
	511, 477, 369, 327, 325, 0, 292, 349, 506, 0,
	0, 214, 0, 209, 305, 445, 172, 424, 343, 310,
	264, 372, 401, 211, 196, 197, 240, 342, 230, 182,
	435, 474, 478, 476, 472, 469, 473, 470, 471, 475,
	231, 468, 0, 443, 452, 486, 466, 494, 451, 491,
	461, 206, 490, 455, 454, 500, 481, 482, 436, 496,
	467, 465, 458, 457, 453, 0, 131, 132, 133, 134,
	135, 136, 137, 138, 139, 140, 142, 0, 143, 144,
	145, 147, 148, 149, 0, 150, 151, 152, 155, 156,
	157, 159, 519, 160, 161, 162, 163, 164, 165, 456,
	0, 167, 168, 169, 170, 171, 173, 175, 176, 177,
	178, 179, 181, 183, 0, 0, 0, 0, 0, 0,
	0, 187, 188, 189, 190, 191, 192, 0, 193, 194,
	198, 200, 201, 202, 203, 204, 205, 208, 0, 210,
	212, 0, 213, 216, 0, 217, 218, 219, 220, 221,
	222, 223, 224, 460, 225, 0, 226, 227, 229, 0,
	232, 233, 234, 235, 236, 0, 237, 462, 463, 238,
	239, 241, 242, 243, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 0, 257, 258, 259,
	261, 0, 262, 263, 266, 267, 268, 269, 0, 271,
	479, 0, 272, 273, 274, 0, 0, 275, 276, 277,
	278, 279, 280, 283, 480, 285, 286, 287, 288, 289,
	290, 291, 521, 293, 294, 295, 296, 297, 298, 299,
	483, 484, 300, 302, 303, 485, 487, 488, 0, 318,
	319, 320, 321, 322, 323, 324, 326, 0, 328, 329,
	330, 489, 331, 332, 333, 334, 0, 335, 336, 337,
	338, 339, 341, 344, 345, 346, 347, 0, 350, 351,
	352, 353, 354, 355, 356, 358, 359, 360, 362, 363,
	364, 522, 365, 366, 367, 368, 492, 370, 371, 523,
	373, 374, 376, 377, 378, 379, 380, 381, 538, 0,
	383, 493, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 393, 394, 395, 398, 399, 400, 402, 403, 495,
	404, 405, 0, 407, 408, 0, 410, 411, 412, 413,
	414, 0, 539, 415, 497, 416, 498, 417, 418, 419,
	420, 421, 422, 423, 425, 0, 0, 427, 428, 429,
	431, 432, 433, 434, 437, 438, 439, 440, 441, 0,
	442, 444, 446, 524, 501, 502, 503, 504, 505, 507,
	508, 509, 510, 447, 448, 464, 315, 309, 265, 307,
	308, 312, 313, 316, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 2176, 158, 0, 0, 207, 244, 459,
	0, 0, 304, 0, 357, 361, 0, 450, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 146, 540, 449, 520, 0,
	0, 0, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 348, 282, 0, 499, 375,
	153, 199, 186, 228, 270, 382, 0, 0, 260, 430,
	195, 284, 0, 174, 317, 0, 406, 281, 0, 389,
	409, 0, 301, 180, 340, 396, 397, 0, 0, 0,
	0, 0, 184, 185, 306, 166, 314, 511, 477, 369,
	327, 325, 0, 292, 349, 506, 0, 0, 214, 0,
	209, 305, 445, 172, 424, 343, 310, 264, 372, 401,
	211, 196, 197, 240, 342, 230, 182, 435, 474, 478,
	476, 472, 469, 473, 470, 471, 475, 231, 468, 0,
	443, 452, 486, 466, 494, 451, 491, 461, 206, 490,
	455, 454, 500, 481, 482, 436, 496, 467, 465, 458,
	457, 453, 0, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 142, 0, 143, 144, 145, 147, 148,
	149, 0, 150, 151, 152, 155, 156, 157, 159, 519,
	160, 161, 162, 163, 164, 165, 456, 0, 167, 168,
	169, 170, 171, 173, 175, 176, 177, 178, 179, 181,
	183, 0, 0, 0, 0, 0, 0, 0, 187, 188,
	189, 190, 191, 192, 0, 193, 194, 198, 200, 201,
	202, 203, 204, 205, 208, 0, 210, 212, 0, 213,
	216, 0, 217, 218, 219, 220, 221, 222, 223, 224,
	460, 225, 0, 226, 227, 229, 0, 232, 233, 234,
	235, 236, 0, 237, 462, 463, 238, 239, 241, 242,
	243, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 0, 257, 258, 259, 261, 0, 262,
	263, 266, 267, 268, 269, 0, 271, 479, 0, 272,
	273, 274, 0, 0, 275, 276, 277, 278, 279, 280,
	283, 480, 285, 286, 287, 288, 289, 290, 291, 521,
	293, 294, 295, 296, 297, 298, 299, 483, 484, 300,
	302, 303, 485, 487, 488, 0, 318, 319, 320, 321,
	322, 323, 324, 326, 0, 328, 329, 330, 489, 331,
	332, 333, 334, 0, 335, 336, 337, 338, 339, 341,
	344, 345, 346, 347, 0, 350, 351, 352, 353, 354,
	355, 356, 358, 359, 360, 362, 363, 364, 522, 365,
	366, 367, 368, 492, 370, 371, 523, 373, 374, 376,
	377, 378, 379, 380, 381, 538, 0, 383, 493, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 393, 394,
	395, 398, 399, 400, 402, 403, 495, 404, 405, 0,
	407, 408, 0, 410, 411, 412, 413, 414, 0, 539,
	415, 497, 416, 498, 417, 418, 419, 420, 421, 422,
	423, 425, 0, 0, 427, 428, 429, 431, 432, 433,
	434, 437, 438, 439, 440, 441, 0, 442, 444, 446,
	524, 501, 502, 503, 504, 505, 507, 508, 509, 510,
	447, 448, 464, 315, 309, 265, 307, 308, 312, 313,
	316, 128, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 158, 0, 0, 207, 244, 459, 0, 0, 304,
	0, 357, 361, 0, 450, 0, 0, 2504, 0, 215,
	0, 0, 0, 0, 0, 0, 0, 426, 0, 0,
	0, 0, 146, 540, 449, 520, 0, 0, 0, 311,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 348, 282, 0, 499, 375, 153, 199, 186,
	228, 270, 382, 0, 0, 260, 430, 195, 284, 0,
	174, 317, 0, 406, 281, 0, 389, 409, 0, 301,
	180, 340, 396, 397, 0, 0, 0, 0, 0, 184,
	185, 306, 166, 314, 511, 477, 369, 327, 325, 0,
	292, 349, 506, 0, 0, 214, 0, 209, 305, 445,
	172, 424, 343, 310, 264, 372, 401, 211, 196, 197,
	240, 342, 230, 182, 435, 474, 478, 476, 472, 469,
	473, 470, 471, 475, 231, 468, 0, 443, 452, 486,
	466, 494, 451, 491, 461, 206, 490, 455, 454, 500,
	481, 482, 436, 496, 467, 465, 458, 457, 453, 0,
	131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
	142, 0, 143, 144, 145, 147, 148, 149, 0, 150,
	151, 152, 155, 156, 157, 159, 519, 160, 161, 162,
	163, 164, 165, 456, 0, 167, 168, 169, 170, 171,
	173, 175, 176, 177, 178, 179, 181, 183, 0, 0,
	0, 0, 0, 0, 0, 187, 188, 189, 190, 191,
	192, 0, 193, 194, 198, 200, 201, 202, 203, 204,
	205, 208, 0, 210, 212, 0, 213, 216, 0, 217,
	218, 219, 220, 221, 222, 223, 224, 460, 225, 0,
	226, 227, 229, 0, 232, 233, 234, 235, 236, 0,
	237, 462, 463, 238, 239, 241, 242, 243, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	0, 257, 258, 259, 261, 0, 262, 263, 266, 267,
	268, 269, 0, 271, 479, 0, 272, 273, 274, 0,
	0, 275, 276, 277, 278, 279, 280, 283, 480, 285,
	286, 287, 288, 289, 290, 291, 521, 293, 294, 295,
	296, 297, 298, 299, 483, 484, 300, 302, 303, 485,
	487, 488, 0, 318, 319, 320, 321, 322, 323, 324,
	326, 0, 328, 329, 330, 489, 331, 332, 333, 334,
	0, 335, 336, 337, 338, 339, 341, 344, 345, 346,
	347, 0, 350, 351, 352, 353, 354, 355, 356, 358,
	359, 360, 362, 363, 364, 522, 365, 366, 367, 368,
	492, 370, 371, 523, 373, 374, 376, 377, 378, 379,
	380, 381, 538, 0, 383, 493, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 393, 394, 395, 398, 399,
	400, 402, 403, 495, 404, 405, 0, 407, 408, 0,
	410, 411, 412, 413, 414, 0, 539, 415, 497, 416,
	498, 417, 418, 419, 420, 421, 422, 423, 425, 0,
	0, 427, 428, 429, 431, 432, 433, 434, 437, 438,
	439, 440, 441, 0, 442, 444, 446, 524, 501, 502,
	503, 504, 505, 507, 508, 509, 510, 447, 448, 464,
	315, 309, 265, 307, 308, 312, 313, 316, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 158, 0,
	0, 207, 244, 459, 0, 0, 304, 0, 357, 361,
	0, 450, 0, 0, 2302, 0, 215, 0, 0, 0,
	0, 0, 0, 0, 426, 0, 0, 0, 0, 146,
	540, 449, 520, 0, 0, 0, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 348,
	282, 0, 499, 375, 153, 199, 186, 228, 270, 382,
	0, 0, 260, 430, 195, 284, 0, 174, 317, 0,
	406, 281, 0, 389, 409, 0, 301, 180, 340, 396,
	397, 0, 0, 0, 0, 0, 184, 185, 306, 166,
	314, 511, 477, 369, 327, 325, 0, 292, 349, 506,
	0, 0, 214, 0, 209, 305, 445, 172, 424, 343,
	310, 264, 372, 401, 211, 196, 197, 240, 342, 230,
	182, 435, 474, 478, 476, 472, 469, 473, 470, 471,
	475, 231, 468, 0, 443, 452, 486, 466, 494, 451,
	491, 461, 206, 490, 455, 454, 500, 481, 482, 436,
	496, 467, 465, 458, 457, 453, 0, 131, 132, 133,
	134, 135, 136, 137, 138, 139, 140, 142, 0, 143,
	144, 145, 147, 148, 149, 0, 150, 151, 152, 155,
	156, 157, 159, 519, 160, 161, 162, 163, 164, 165,
	456, 0, 167, 168, 169, 170, 171, 173, 175, 176,
	177, 178, 179, 181, 183, 0, 0, 0, 0, 0,
	0, 0, 187, 188, 189, 190, 191, 192, 0, 193,
	194, 198, 200, 201, 202, 203, 204, 205, 208, 0,
	210, 212, 0, 213, 216, 0, 217, 218, 219, 220,
	221, 222, 223, 224, 460, 225, 0, 226, 227, 229,
	0, 232, 233, 234, 235, 236, 0, 237, 462, 463,
	238, 239, 241, 242, 243, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 0, 257, 258,
	259, 261, 0, 262, 263, 266, 267, 268, 269, 0,
	271, 479, 0, 272, 273, 274, 0, 0, 275, 276,
	277, 278, 279, 280, 283, 480, 285, 286, 287, 288,
	289, 290, 291, 521, 293, 294, 295, 296, 297, 298,
	299, 483, 484, 300, 302, 303, 485, 487, 488, 0,
	318, 319, 320, 321, 322, 323, 324, 326, 0, 328,
	329, 330, 489, 331, 332, 333, 334, 0, 335, 336,
	337, 338, 339, 341, 344, 345, 346, 347, 0, 350,
	351, 352, 353, 354, 355, 356, 358, 359, 360, 362,
	363, 364, 522, 365, 366, 367, 368, 492, 370, 371,
	523, 373, 374, 376, 377, 378, 379, 380, 381, 538,
	0, 383, 493, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 393, 394, 395, 398, 399, 400, 402, 403,
	495, 404, 405, 0, 407, 408, 0, 410, 411, 412,
	413, 414, 0, 539, 415, 497, 416, 498, 417, 418,
	419, 420, 421, 422, 423, 425, 0, 0, 427, 428,
	429, 431, 432, 433, 434, 437, 438, 439, 440, 441,
	0, 442, 444, 446, 524, 501, 502, 503, 504, 505,
	507, 508, 509, 510, 447, 448, 464, 315, 309, 265,
	307, 308, 312, 313, 316, 128, 0, 0, 0, 0,
	0, 0, 0, 771, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 158, 0, 0, 207, 244,
	459, 0, 0, 304, 0, 357, 361, 0, 450, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 0,
	0, 426, 0, 0, 0, 0, 146, 540, 449, 520,
	0, 0, 0, 311, 0, 0, 0, 0, 0, 0,
	0, 0, 154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 348, 282, 0, 499,
	375, 153, 199, 186, 228, 270, 382, 0, 0, 260,
	430, 195, 284, 0, 174, 317, 0, 406, 281, 0,
	389, 409, 0, 301, 180, 340, 396, 397, 0, 0,
	0, 0, 0, 184, 185, 306, 166, 314, 511, 477,
	369, 327, 325, 0, 292, 349, 506, 0, 0, 214,
	0, 209, 305, 445, 172, 424, 343, 310, 264, 372,
	401, 211, 196, 197, 240, 342, 230, 182, 435, 474,
	478, 476, 472, 469, 473, 470, 471, 475, 231, 468,
	0, 443, 452, 486, 466, 494, 451, 491, 461, 206,
	490, 455, 454, 500, 481, 482, 436, 496, 467, 465,
	458, 457, 453, 0, 131, 132, 133, 134, 135, 136,
	137, 138, 139, 140, 142, 0, 143, 144, 145, 147,
	148, 149, 0, 150, 151, 152, 155, 156, 157, 159,
	519, 160, 161, 162, 163, 164, 165, 456, 0, 167,
	168, 169, 170, 171, 173, 175, 176, 177, 178, 179,
	181, 183, 0, 0, 0, 0, 0, 0, 0, 187,
	188, 189, 190, 191, 192, 0, 193, 194, 198, 200,
	201, 202, 203, 204, 205, 208, 0, 210, 212, 0,
	213, 216, 0, 217, 218, 219, 220, 221, 222, 223,
	224, 460, 225, 0, 226, 227, 229, 0, 232, 233,
	234, 235, 236, 0, 237, 462, 463, 238, 239, 241,
	242, 243, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 0, 257, 258, 259, 261, 0,
	262, 263, 266, 267, 268, 269, 0, 271, 479, 0,
	272, 273, 274, 0, 0, 275, 276, 277, 278, 279,
	280, 283, 480, 285, 286, 287, 288, 289, 290, 291,
	521, 293, 294, 295, 296, 297, 298, 299, 483, 484,
	300, 302, 303, 485, 487, 488, 0, 318, 319, 320,
	321, 322, 323, 324, 326, 0, 328, 329, 330, 489,
	331, 332, 333, 334, 0, 335, 336, 337, 338, 339,
	341, 344, 345, 346, 347, 0, 350, 351, 352, 353,
	354, 355, 356, 358, 359, 360, 362, 363, 364, 522,
	365, 366, 367, 368, 492, 370, 371, 523, 373, 374,
	376, 377, 378, 379, 380, 381, 538, 0, 383, 493,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 393,
	394, 395, 398, 399, 400, 402, 403, 495, 404, 405,
	0, 407, 408, 0, 410, 411, 412, 413, 414, 0,
	539, 415, 497, 416, 498, 417, 418, 419, 420, 421,
	422, 423, 425, 0, 0, 427, 428, 429, 431, 432,
	433, 434, 437, 438, 439, 440, 441, 0, 442, 444,
	446, 524, 501, 502, 503, 504, 505, 507, 508, 509,
	510, 447, 448, 464, 315, 309, 265, 307, 308, 312,
	313, 316, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 158, 0, 0, 207, 852, 459, 0, 0,
	304, 0, 357, 361, 0, 450, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 0, 0, 0, 426, 0,
	0, 0, 0, 146, 540, 449, 520, 0, 0, 0,
	311, 0, 0, 0, 537, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 348, 282, 0, 499, 375, 153, 199,
	186, 228, 270, 382, 0, 0, 260, 430, 195, 284,
	0, 174, 317, 0, 406, 281, 0, 389, 409, 0,
	301, 180, 340, 396, 397, 0, 0, 0, 0, 0,
	184, 185, 306, 166, 314, 511, 477, 369, 327, 325,
	0, 292, 349, 506, 0, 0, 214, 0, 209, 305,
	445, 172, 424, 343, 310, 264, 372, 401, 211, 196,
	197, 240, 342, 230, 182, 435, 474, 478, 476, 472,
	469, 473, 470, 471, 475, 231, 468, 0, 443, 452,
	486, 466, 494, 451, 491, 461, 206, 490, 455, 454,
	500, 481, 482, 436, 496, 467, 465, 458, 457, 453,
	0, 131, 132, 133, 134, 135, 136, 137, 138, 139,
	140, 142, 0, 143, 144, 145, 147, 148, 149, 0,
	150, 151, 152, 155, 156, 157, 159, 519, 160, 161,
	162, 163, 164, 165, 456, 0, 167, 168, 169, 170,
	171, 173, 175, 176, 177, 178, 179, 181, 183, 0,
	0, 0, 0, 0, 0, 0, 187, 188, 189, 190,
	191, 192, 0, 193, 194, 198, 200, 201, 202, 203,
	204, 205, 208, 0, 210, 212, 0, 213, 216, 0,
	217, 218, 219, 220, 221, 222, 223, 224, 460, 225,
	0, 226, 227, 229, 0, 232, 233, 234, 235, 236,
	0, 237, 462, 463, 238, 239, 241, 242, 243, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 0, 257, 258, 259, 261, 0, 262, 263, 266,
	267, 268, 269, 0, 271, 479, 0, 272, 273, 274,
	0, 0, 275, 276, 277, 278, 279, 280, 283, 480,
	285, 286, 287, 288, 289, 290, 291, 521, 293, 294,
	295, 296, 297, 298, 299, 483, 484, 300, 302, 303,
	485, 487, 488, 0, 318, 319, 320, 321, 322, 323,
	324, 326, 0, 328, 329, 330, 489, 331, 332, 333,
	334, 0, 335, 336, 337, 338, 339, 341, 344, 345,
	346, 347, 0, 350, 351, 352, 353, 354, 355, 356,
	358, 359, 360, 362, 363, 364, 522, 365, 366, 367,
	368, 492, 370, 371, 523, 373, 374, 376, 377, 378,
	379, 380, 381, 538, 0, 383, 493, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 393, 394, 395, 398,
	399, 400, 402, 403, 495, 404, 405, 0, 407, 408,
	0, 410, 411, 412, 413, 414, 0, 539, 415, 497,
	416, 498, 417, 418, 419, 420, 421, 422, 423, 425,
	0, 0, 427, 428, 429, 431, 432, 433, 434, 437,
	438, 439, 440, 441, 0, 442, 444, 446, 524, 501,
	502, 503, 504, 505, 507, 508, 509, 510, 447, 448,
	464, 315, 309, 265, 307, 308, 312, 313, 316, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 850, 141, 0, 158,
	0, 0, 207, 849, 459, 0, 0, 304, 0, 357,
	361, 0, 450, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 0, 426, 0, 0, 0, 0,
	146, 540, 449, 520, 0, 0, 0, 311, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	348, 282, 0, 499, 375, 153, 199, 186, 228, 270,
	382, 0, 0, 260, 430, 195, 284, 0, 174, 317,
	0, 406, 281, 0, 389, 409, 0, 301, 180, 340,
	396, 397, 0, 0, 0, 0, 0, 184, 185, 306,
	166, 314, 511, 477, 369, 327, 325, 0, 292, 349,
	506, 0, 0, 214, 0, 209, 305, 445, 172, 424,
	343, 310, 264, 372, 401, 211, 196, 197, 240, 342,
	230, 182, 435, 474, 478, 476, 472, 469, 473, 470,
	471, 475, 231, 468, 0, 443, 452, 486, 466, 494,
	451, 491, 461, 206, 490, 455, 454, 500, 481, 482,
	436, 496, 467, 465, 458, 457, 453, 0, 131, 132,
	133, 134, 135, 136, 137, 138, 139, 140, 142, 0,
	143, 144, 145, 147, 148, 149, 0, 150, 151, 152,
	155, 156, 157, 159, 519, 160, 161, 162, 163, 164,
	165, 456, 0, 167, 168, 169, 170, 171, 173, 175,
	176, 177, 178, 179, 181, 183, 0, 0, 0, 0,
	0, 0, 0, 187, 188, 189, 190, 191, 192, 0,
	193, 194, 198, 200, 201, 202, 203, 204, 205, 208,
	0, 210, 212, 0, 213, 216, 0, 217, 218, 219,
	220, 221, 222, 223, 224, 460, 225, 0, 226, 227,
	229, 0, 232, 233, 234, 235, 236, 0, 237, 462,
	463, 238, 239, 241, 242, 243, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 0, 257,
	258, 259, 261, 0, 262, 263, 266, 267, 268, 269,
	0, 271, 479, 0, 272, 273, 274, 0, 0, 275,
	276, 277, 278, 279, 280, 283, 480, 285, 286, 287,
	288, 289, 290, 291, 521, 293, 294, 295, 296, 297,
	298, 299, 483, 484, 300, 302, 303, 485, 487, 488,
	0, 318, 319, 320, 321, 322, 323, 324, 326, 0,
	328, 329, 330, 489, 331, 332, 333, 334, 0, 335,
	336, 337, 338, 339, 341, 344, 345, 346, 347, 0,
	350, 351, 352, 353, 354, 355, 356, 358, 359, 360,
	362, 363, 364, 522, 365, 366, 367, 368, 492, 370,
	371, 523, 373, 374, 376, 377, 378, 379, 380, 381,
	538, 0, 383, 493, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 393, 394, 395, 398, 399, 400, 402,
	403, 495, 404, 405, 0, 407, 408, 0, 410, 411,
	412, 413, 414, 0, 539, 415, 497, 416, 498, 417,
	418, 419, 420, 421, 422, 423, 425, 0, 0, 427,
	428, 429, 431, 432, 433, 434, 437, 438, 439, 440,
	441, 0, 442, 444, 446, 524, 501, 502, 503, 504,
	505, 507, 508, 509, 510, 447, 448, 464, 315, 309,
	265, 307, 308, 312, 313, 316, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 158, 0, 0, 207,
	244, 459, 0, 0, 304, 0, 357, 361, 0, 450,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 0,
	0, 0, 426, 0, 0, 0, 0, 146, 121, 449,
	520, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 348, 282, 0,
	499, 375, 153, 199, 186, 228, 270, 382, 0, 0,
	260, 430, 195, 284, 0, 174, 317, 0, 406, 281,
	0, 389, 409, 0, 301, 180, 340, 396, 397, 0,
	0, 0, 0, 0, 184, 185, 306, 166, 314, 511,
	477, 369, 327, 325, 0, 292, 349, 506, 0, 0,
	214, 0, 209, 305, 445, 172, 424, 343, 310, 264,
	372, 401, 211, 196, 197, 240, 342, 230, 182, 435,
	474, 478, 476, 472, 469, 473, 470, 471, 475, 231,
	468, 0, 443, 452, 486, 466, 494, 451, 491, 461,
	206, 490, 455, 454, 500, 481, 482, 436, 496, 467,
	465, 458, 457, 453, 0, 131, 132, 133, 134, 135,
	136, 137, 138, 139, 140, 142, 0, 143, 144, 145,
	147, 148, 149, 709, 150, 151, 152, 155, 156, 157,
	159, 122, 160, 708, 162, 163, 164, 165, 456, 0,
	167, 168, 169, 170, 171, 173, 175, 176, 177, 178,
	179, 181, 183, 0, 0, 0, 0, 0, 0, 0,
	187, 188, 189, 190, 191, 192, 0, 193, 194, 198,
	200, 201, 202, 203, 204, 205, 208, 0, 210, 212,
	0, 213, 216, 0, 217, 218, 219, 220, 221, 222,
	223, 224, 460, 225, 0, 226, 227, 229, 0, 232,
	233, 234, 235, 236, 0, 237, 462, 463, 238, 239,
	241, 242, 243, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 0, 257, 258, 259, 261,
	0, 262, 263, 266, 267, 268, 269, 0, 271, 479,
	0, 272, 273, 274, 0, 0, 275, 276, 277, 278,
	279, 280, 283, 480, 285, 286, 287, 288, 289, 290,
	291, 124, 293, 294, 295, 296, 297, 298, 299, 483,
	484, 300, 302, 303, 485, 487, 488, 0, 318, 319,
	320, 321, 322, 323, 324, 326, 0, 328, 329, 330,
	489, 331, 332, 333, 334, 0, 335, 336, 337, 338,
	339, 341, 344, 345, 346, 347, 0, 350, 351, 352,
	353, 354, 355, 356, 358, 359, 360, 362, 363, 364,
	125, 365, 366, 367, 368, 492, 370, 371, 123, 373,
	374, 376, 377, 378, 379, 380, 381, 706, 0, 383,
	493, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	393, 394, 395, 398, 399, 400, 402, 403, 495, 404,
	405, 0, 407, 408, 0, 410, 411, 412, 413, 414,
	0, 117, 415, 497, 416, 498, 417, 418, 419, 420,
	421, 422, 423, 425, 0, 0, 427, 428, 429, 431,
	432, 433, 434, 437, 438, 439, 440, 441, 0, 442,
	444, 446, 126, 501, 502, 503, 504, 505, 507, 508,
	509, 510, 447, 448, 464, 315, 309, 265, 307, 308,
	312, 313, 316, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	576, 141, 0, 158, 0, 0, 207, 575, 459, 0,
	0, 304, 0, 357, 361, 0, 450, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 0, 426,
	0, 0, 0, 0, 146, 540, 449, 520, 0, 0,
	0, 311, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 348, 282, 0, 499, 375, 153,
	199, 186, 228, 270, 382, 0, 0, 260, 430, 195,
	284, 0, 174, 317, 0, 406, 281, 0, 389, 409,
	0, 301, 180, 340, 396, 397, 0, 0, 0, 0,
	0, 184, 185, 306, 166, 314, 511, 477, 369, 327,
	325, 0, 292, 349, 506, 0, 0, 214, 0, 209,
	305, 445, 172, 424, 343, 310, 264, 372, 401, 211,
	196, 197, 240, 342, 230, 182, 435, 474, 478, 476,
	472, 469, 473, 470, 471, 475, 231, 468, 0, 443,
	452, 486, 466, 494, 451, 491, 461, 206, 490, 455,
	454, 500, 481, 482, 436, 496, 467, 465, 458, 457,
	453, 0, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 142, 0, 143, 144, 145, 147, 148, 149,
	0, 150, 151, 152, 155, 156, 157, 159, 519, 160,
	161, 162, 163, 164, 165, 456, 0, 167, 168, 169,
	170, 171, 173, 175, 176, 177, 178, 179, 181, 183,
	0, 0, 0, 0, 0, 0, 0, 187, 188, 189,
	190, 191, 192, 0, 193, 194, 198, 200, 201, 202,
	203, 204, 205, 208, 0, 210, 212, 0, 213, 216,
	0, 217, 218, 219, 220, 221, 222, 223, 224, 460,
	225, 0, 226, 227, 229, 0, 232, 233, 234, 235,
	236, 0, 237, 462, 463, 238, 239, 241, 242, 243,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 0, 257, 258, 259, 261, 0, 262, 263,
	266, 267, 268, 269, 0, 271, 479, 0, 272, 273,
	274, 0, 0, 275, 276, 277, 278, 279, 280, 283,
	480, 285, 286, 287, 288, 289, 290, 291, 521, 293,
	294, 295, 296, 297, 298, 299, 483, 484, 300, 302,
	303, 485, 487, 488, 0, 318, 319, 320, 321, 322,
	323, 324, 326, 0, 328, 329, 330, 489, 331, 332,
	333, 334, 0, 335, 336, 337, 338, 339, 341, 344,
	345, 346, 347, 0, 350, 351, 352, 353, 354, 355,
	356, 358, 359, 360, 362, 363, 364, 522, 365, 366,
	367, 368, 492, 370, 371, 523, 373, 374, 376, 377,
	378, 379, 380, 381, 538, 0, 383, 493, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 393, 394, 395,
	398, 399, 400, 402, 403, 495, 404, 405, 0, 407,
	408, 0, 410, 411, 412, 413, 414, 0, 539, 415,
	497, 416, 498, 417, 418, 419, 420, 421, 422, 423,
	425, 0, 0, 427, 428, 429, 431, 432, 433, 434,
	437, 438, 439, 440, 441, 0, 442, 444, 446, 524,
	501, 502, 503, 504, 505, 507, 508, 509, 510, 447,
	448, 464, 315, 309, 265, 307, 308, 312, 313, 316,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 518, 141, 0,
	158, 0, 0, 207, 244, 459, 0, 0, 304, 0,
	357, 361, 0, 450, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 0, 426, 0, 0, 0,
	0, 146, 514, 449, 520, 0, 0, 0, 311, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 348, 282, 0, 499, 375, 153, 199, 186, 228,
	270, 382, 0, 0, 260, 430, 195, 284, 0, 174,
	317, 0, 406, 281, 0, 389, 409, 0, 301, 180,
	340, 396, 397, 0, 0, 0, 0, 0, 184, 185,
	306, 166, 314, 511, 477, 369, 327, 325, 0, 292,
	349, 506, 0, 0, 214, 0, 209, 305, 445, 172,
	424, 343, 310, 264, 372, 401, 211, 196, 197, 240,
	342, 230, 182, 435, 474, 478, 476, 472, 469, 473,
	470, 471, 475, 231, 468, 0, 443, 452, 486, 466,
	494, 451, 491, 461, 206, 490, 455, 454, 500, 481,
	482, 436, 496, 467, 465, 458, 457, 453, 0, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 142,
	0, 143, 144, 145, 147, 148, 149, 0, 150, 151,
	152, 155, 156, 157, 159, 519, 160, 161, 162, 163,
	164, 165, 456, 0, 167, 168, 169, 170, 171, 173,
	175, 176, 177, 178, 179, 181, 183, 0, 0, 0,
	0, 0, 0, 0, 187, 188, 189, 190, 191, 192,
	0, 193, 194, 198, 200, 201, 202, 203, 204, 205,
	208, 0, 210, 212, 0, 213, 216, 0, 217, 218,
	219, 220, 221, 222, 223, 224, 460, 225, 0, 226,
	227, 229, 0, 232, 233, 234, 235, 236, 0, 237,
	462, 463, 238, 239, 241, 242, 243, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 0,
	257, 258, 259, 261, 0, 262, 263, 266, 267, 268,
	269, 0, 271, 479, 0, 272, 273, 274, 0, 0,
	275, 276, 277, 278, 279, 280, 283, 480, 285, 286,
	287, 288, 289, 290, 291, 521, 293, 294, 295, 296,
	297, 298, 299, 483, 484, 300, 302, 303, 485, 487,
	488, 0, 318, 319, 320, 321, 322, 323, 324, 326,
	0, 328, 329, 330, 489, 331, 332, 333, 334, 0,
	335, 336, 337, 338, 339, 341, 344, 345, 346, 347,
	0, 350, 351, 352, 353, 354, 355, 356, 358, 359,
	360, 362, 363, 364, 522, 365, 366, 367, 368, 492,
	370, 371, 523, 373, 374, 376, 377, 378, 379, 380,
	381, 516, 0, 383, 493, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 393, 394, 395, 398, 399, 400,
	402, 403, 495, 404, 405, 0, 407, 408, 0, 410,
	411, 412, 413, 414, 0, 515, 415, 497, 416, 498,
	417, 418, 419, 420, 421, 422, 423, 425, 0, 0,
	427, 428, 429, 431, 432, 433, 434, 437, 438, 439,
	440, 441, 0, 442, 444, 446, 524, 501, 502, 503,
	504, 505, 507, 508, 509, 510, 447, 448, 464, 315,
	309, 265, 307, 308, 312, 313, 316, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 158, 0, 0,
	207, 244, 459, 0, 0, 304, 0, 357, 361, 0,
	450, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 0, 0, 426, 0, 0, 0, 0, 146, 540,
	449, 520, 0, 0, 0, 311, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 348, 282,
	0, 499, 375, 153, 199, 186, 228, 270, 382, 0,
	0, 260, 430, 195, 284, 0, 174, 317, 0, 406,
	281, 0, 389, 409, 0, 301, 180, 340, 396, 397,
	0, 0, 0, 0, 0, 184, 185, 306, 166, 314,
	511, 477, 369, 327, 325, 0, 3353, 349, 506, 0,
	0, 214, 0, 209, 305, 445, 172, 424, 343, 310,
	264, 372, 401, 211, 196, 197, 240, 342, 230, 182,
	435, 474, 478, 476, 472, 469, 473, 470, 471, 475,
	231, 468, 0, 443, 452, 486, 466, 494, 451, 491,
	461, 206, 490, 455, 454, 500, 481, 482, 436, 496,
	467, 465, 458, 457, 453, 0, 131, 132, 133, 134,
	135, 136, 137, 138, 139, 140, 142, 0, 143, 144,
	145, 147, 148, 149, 0, 150, 151, 152, 155, 156,
	157, 159, 519, 160, 161, 162, 163, 164, 165, 456,
	0, 167, 168, 169, 170, 171, 173, 175, 176, 177,
	178, 179, 181, 183, 0, 0, 0, 0, 0, 0,
	0, 187, 188, 189, 190, 191, 192, 0, 193, 194,
	198, 200, 201, 202, 203, 204, 205, 208, 0, 210,
	212, 0, 213, 216, 0, 217, 218, 219, 220, 221,
	222, 223, 224, 460, 225, 0, 226, 227, 229, 0,
	232, 233, 234, 235, 236, 0, 237, 462, 463, 238,
	239, 241, 242, 243, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 0, 257, 258, 259,
	261, 0, 262, 263, 266, 267, 268, 269, 0, 271,
	479, 0, 272, 273, 274, 0, 0, 275, 276, 277,
	278, 279, 280, 283, 480, 285, 286, 287, 288, 289,
	290, 291, 521, 293, 294, 295, 296, 297, 298, 299,
	483, 484, 300, 302, 303, 485, 487, 488, 0, 318,
	319, 320, 321, 322, 323, 324, 326, 0, 328, 329,
	330, 489, 331, 332, 333, 334, 0, 335, 336, 337,
	338, 339, 341, 344, 345, 346, 347, 0, 350, 351,
	352, 353, 354, 355, 356, 358, 359, 360, 362, 363,
	364, 522, 365, 366, 367, 368, 492, 370, 371, 523,
	373, 374, 376, 377, 378, 379, 380, 381, 538, 0,
	383, 493, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 393, 394, 395, 398, 399, 400, 402, 403, 495,
	404, 405, 0, 407, 408, 0, 410, 411, 412, 413,
	414, 0, 539, 415, 497, 416, 498, 417, 418, 419,
	420, 421, 422, 423, 425, 0, 0, 427, 428, 429,
	431, 432, 433, 434, 437, 438, 439, 440, 441, 0,
	442, 444, 446, 524, 501, 502, 503, 504, 505, 507,
	508, 509, 510, 447, 448, 464, 315, 309, 265, 307,
	308, 312, 313, 316, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 158, 0, 0, 207, 244, 459,
	0, 0, 304, 0, 357, 361, 0, 450, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 146, 540, 449, 520, 0,
	0, 0, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 348, 282, 0, 499, 375,
	153, 199, 186, 228, 270, 382, 0, 0, 260, 430,
	195, 284, 0, 174, 317, 0, 406, 281, 0, 389,
	409, 0, 301, 180, 340, 396, 397, 0, 0, 0,
	0, 0, 184, 185, 306, 166, 314, 511, 477, 369,
	327, 325, 0, 292, 349, 506, 0, 0, 214, 0,
	209, 305, 445, 172, 424, 343, 310, 264, 372, 401,
	211, 196, 197, 240, 342, 230, 182, 435, 474, 478,
	476, 472, 469, 473, 470, 471, 475, 231, 468, 0,
	443, 452, 486, 466, 494, 451, 491, 461, 206, 490,
	455, 454, 500, 481, 482, 436, 496, 467, 465, 458,
	457, 453, 0, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 142, 0, 143, 144, 145, 147, 148,
	149, 0, 150, 151, 152, 155, 156, 157, 159, 519,
	160, 161, 162, 163, 164, 165, 456, 0, 167, 168,
	169, 170, 171, 173, 175, 176, 177, 178, 179, 181,
	183, 0, 0, 0, 0, 0, 0, 0, 187, 188,
	189, 190, 191, 192, 0, 193, 194, 198, 200, 201,
	202, 203, 204, 205, 208, 0, 210, 212, 0, 213,
	216, 0, 217, 218, 219, 220, 221, 222, 223, 224,
	460, 225, 0, 226, 227, 229, 0, 232, 233, 234,
	235, 236, 0, 237, 462, 463, 238, 239, 241, 242,
	243, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 0, 257, 258, 259, 261, 0, 262,
	263, 266, 267, 268, 269, 0, 271, 479, 0, 272,
	273, 274, 0, 0, 275, 276, 277, 278, 279, 280,
	283, 480, 285, 286, 287, 288, 289, 290, 291, 521,
	293, 294, 295, 296, 297, 298, 299, 483, 484, 300,
	302, 303, 485, 487, 488, 0, 318, 319, 320, 321,
	322, 323, 324, 326, 0, 328, 329, 330, 489, 331,
	332, 333, 334, 0, 335, 336, 337, 338, 339, 341,
	344, 345, 346, 347, 0, 350, 351, 352, 353, 354,
	355, 356, 358, 359, 360, 362, 363, 364, 522, 365,
	366, 367, 368, 492, 370, 371, 523, 373, 374, 376,
	377, 378, 379, 380, 381, 538, 0, 383, 493, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 393, 394,
	395, 398, 399, 400, 402, 403, 495, 404, 405, 0,
	407, 408, 0, 410, 411, 412, 413, 414, 0, 539,
	415, 497, 416, 498, 417, 418, 419, 420, 421, 422,
	423, 425, 0, 0, 427, 428, 429, 431, 432, 433,
	434, 437, 438, 439, 440, 441, 0, 442, 444, 446,
	524, 501, 502, 503, 504, 505, 507, 508, 509, 510,
	447, 448, 464, 315, 309, 265, 307, 308, 312, 313,
	316, 128, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 158, 0, 0, 207, 244, 459, 0, 0, 304,
	0, 357, 361, 0, 450, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 0, 0, 0, 426, 0, 0,
	0, 0, 146, 121, 449, 520, 0, 0, 0, 311,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 348, 282, 0, 499, 375, 153, 199, 186,
	228, 270, 382, 0, 0, 260, 430, 195, 284, 0,
	174, 317, 0, 406, 281, 0, 389, 409, 0, 301,
	180, 340, 396, 397, 0, 0, 0, 0, 0, 184,
	185, 306, 166, 314, 511, 477, 369, 327, 325, 0,
	292, 349, 506, 0, 0, 214, 0, 209, 305, 445,
	172, 424, 343, 310, 264, 372, 401, 211, 196, 197,
	240, 342, 230, 182, 435, 474, 478, 476, 472, 469,
	473, 470, 471, 475, 231, 468, 0, 443, 452, 486,
	466, 494, 451, 491, 461, 206, 490, 455, 454, 500,
	481, 482, 436, 496, 467, 465, 458, 457, 453, 0,
	131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
	142, 0, 143, 144, 145, 147, 148, 149, 0, 150,
	151, 152, 155, 156, 157, 159, 122, 160, 161, 162,
	163, 164, 165, 456, 0, 167, 168, 169, 170, 171,
	173, 175, 176, 177, 178, 179, 181, 183, 0, 0,
	0, 0, 0, 0, 0, 187, 188, 189, 190, 191,
	192, 0, 193, 194, 198, 200, 201, 202, 203, 204,
	205, 208, 0, 210, 212, 0, 213, 216, 0, 217,
	218, 219, 220, 221, 222, 223, 224, 460, 225, 0,
	226, 227, 229, 0, 232, 233, 234, 235, 236, 0,
	237, 462, 463, 238, 239, 241, 242, 243, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	0, 257, 258, 259, 261, 0, 262, 263, 266, 267,
	268, 269, 0, 271, 479, 0, 272, 273, 274, 0,
	0, 275, 276, 277, 278, 279, 280, 283, 480, 285,
	286, 287, 288, 289, 290, 291, 124, 293, 294, 295,
	296, 297, 298, 299, 483, 484, 300, 302, 303, 485,
	487, 488, 0, 318, 319, 320, 321, 322, 323, 324,
	326, 0, 328, 329, 330, 489, 331, 332, 333, 334,
	0, 335, 336, 337, 338, 339, 341, 344, 345, 346,
	347, 0, 350, 351, 352, 353, 354, 355, 356, 358,
	359, 360, 362, 363, 364, 125, 365, 366, 367, 368,
	492, 370, 371, 123, 373, 374, 376, 377, 378, 379,
	380, 381, 2239, 0, 383, 493, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 393, 394, 395, 398, 399,
	400, 402, 403, 495, 404, 405, 0, 407, 408, 0,
	410, 411, 412, 413, 414, 0, 2240, 415, 497, 416,
	498, 417, 418, 419, 420, 421, 422, 423, 425, 0,
	0, 427, 428, 429, 431, 432, 433, 434, 437, 438,
	439, 440, 441, 0, 442, 444, 446, 126, 501, 502,
	503, 504, 505, 507, 508, 509, 510, 447, 448, 464,
	315, 309, 265, 307, 308, 312, 313, 316, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 158, 0,
	0, 207, 1984, 459, 0, 0, 304, 0, 357, 361,
	0, 450, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 0, 0, 0, 426, 0, 0, 0, 0, 146,
	540, 449, 520, 0, 0, 0, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 348,
	282, 0, 499, 375, 153, 199, 186, 228, 270, 382,
	0, 0, 260, 430, 195, 284, 0, 174, 317, 0,
	406, 281, 0, 389, 409, 0, 301, 180, 340, 396,
	397, 0, 0, 0, 0, 0, 184, 185, 306, 166,
	314, 511, 477, 369, 327, 325, 0, 292, 349, 506,
	0, 0, 214, 0, 209, 305, 445, 172, 424, 343,
	310, 264, 372, 401, 211, 196, 197, 240, 342, 230,
	182, 435, 474, 478, 476, 472, 469, 473, 470, 471,
	475, 231, 468, 0, 443, 452, 486, 466, 494, 451,
	491, 461, 206, 490, 455, 454, 500, 481, 482, 436,
	496, 467, 465, 458, 457, 453, 0, 131, 132, 133,
	134, 135, 136, 137, 138, 139, 140, 142, 0, 143,
	144, 145, 147, 148, 149, 0, 150, 151, 152, 155,
	156, 157, 159, 519, 160, 161, 162, 163, 164, 165,
	456, 0, 167, 168, 169, 170, 171, 173, 175, 176,
	177, 178, 179, 181, 183, 0, 0, 0, 0, 0,
	0, 0, 187, 188, 189, 190, 191, 192, 0, 193,
	194, 198, 200, 201, 202, 203, 204, 205, 208, 0,
	210, 212, 0, 213, 216, 0, 217, 218, 219, 220,
	221, 222, 223, 224, 460, 225, 0, 226, 227, 229,
	0, 232, 233, 234, 235, 236, 0, 237, 462, 463,
	238, 239, 241, 242, 243, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 0, 257, 258,
	259, 261, 0, 262, 263, 266, 267, 268, 269, 0,
	271, 479, 0, 272, 273, 274, 0, 0, 275, 276,
	277, 278, 279, 280, 283, 480, 285, 286, 287, 288,
	289, 290, 291, 521, 293, 294, 295, 296, 297, 298,
	299, 483, 484, 300, 302, 303, 485, 487, 488, 0,
	318, 319, 320, 321, 322, 323, 324, 326, 0, 328,
	329, 330, 489, 331, 332, 333, 334, 0, 335, 336,
	337, 338, 339, 341, 344, 345, 346, 347, 0, 350,
	351, 352, 353, 354, 355, 356, 358, 359, 360, 362,
	363, 364, 522, 365, 366, 367, 368, 492, 370, 371,
	523, 373, 374, 376, 377, 378, 379, 380, 381, 538,
	0, 383, 493, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 393, 394, 395, 398, 399, 400, 402, 403,
	495, 404, 405, 0, 407, 408, 0, 410, 411, 412,
	413, 414, 0, 539, 415, 497, 416, 498, 417, 418,
	419, 420, 421, 422, 423, 425, 0, 0, 427, 428,
	429, 431, 432, 433, 434, 437, 438, 439, 440, 441,
	0, 442, 444, 446, 524, 501, 502, 503, 504, 505,
	507, 508, 509, 510, 447, 448, 464, 315, 309, 265,
	307, 308, 312, 313, 316, 128, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 158, 0, 0, 207, 1982,
	459, 0, 0, 304, 0, 357, 361, 0, 450, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 0,
	0, 426, 0, 0, 0, 0, 146, 540, 449, 520,
	0, 0, 0, 311, 0, 0, 0, 0, 0, 0,
	0, 0, 154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 348, 282, 0, 499,
	375, 153, 199, 186, 228, 270, 382, 0, 0, 260,
	430, 195, 284, 0, 174, 317, 0, 406, 281, 0,
	389, 409, 0, 301, 180, 340, 396, 397, 0, 0,
	0, 0, 0, 184, 185, 306, 166, 314, 511, 477,
	369, 327, 325, 0, 292, 349, 506, 0, 0, 214,
	0, 209, 305, 445, 172, 424, 343, 310, 264, 372,
	401, 211, 196, 197, 240, 342, 230, 182, 435, 474,
	478, 476, 472, 469, 473, 470, 471, 475, 231, 468,
	0, 443, 452, 486, 466, 494, 451, 491, 461, 206,
	490, 455, 454, 500, 481, 482, 436, 496, 467, 465,
	458, 457, 453, 0, 131, 132, 133, 134, 135, 136,
	137, 138, 139, 140, 142, 0, 143, 144, 145, 147,
	148, 149, 0, 150, 151, 152, 155, 156, 157, 159,
	519, 160, 161, 162, 163, 164, 165, 456, 0, 167,
	168, 169, 170, 171, 173, 175, 176, 177, 178, 179,
	181, 183, 0, 0, 0, 0, 0, 0, 0, 187,
	188, 189, 190, 191, 192, 0, 193, 194, 198, 200,
	201, 202, 203, 204, 205, 208, 0, 210, 212, 0,
	213, 216, 0, 217, 218, 219, 220, 221, 222, 223,
	224, 460, 225, 0, 226, 227, 229, 0, 232, 233,
	234, 235, 236, 0, 237, 462, 463, 238, 239, 241,
	242, 243, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 0, 257, 258, 259, 261, 0,
	262, 263, 266, 267, 268, 269, 0, 271, 479, 0,
	272, 273, 274, 0, 0, 275, 276, 277, 278, 279,
	280, 283, 480, 285, 286, 287, 288, 289, 290, 291,
	521, 293, 294, 295, 296, 297, 298, 299, 483, 484,
	300, 302, 303, 485, 487, 488, 0, 318, 319, 320,
	321, 322, 323, 324, 326, 0, 328, 329, 330, 489,
	331, 332, 333, 334, 0, 335, 336, 337, 338, 339,
	341, 344, 345, 346, 347, 0, 350, 351, 352, 353,
	354, 355, 356, 358, 359, 360, 362, 363, 364, 522,
	365, 366, 367, 368, 492, 370, 371, 523, 373, 374,
	376, 377, 378, 379, 380, 381, 538, 0, 383, 493,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 393,
	394, 395, 398, 399, 400, 402, 403, 495, 404, 405,
	0, 407, 408, 0, 410, 411, 412, 413, 414, 0,
	539, 415, 497, 416, 498, 417, 418, 419, 420, 421,
	422, 423, 425, 0, 0, 427, 428, 429, 431, 432,
	433, 434, 437, 438, 439, 440, 441, 0, 442, 444,
	446, 524, 501, 502, 503, 504, 505, 507, 508, 509,
	510, 447, 448, 464, 315, 309, 265, 307, 308, 312,
	313, 316, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 158, 0, 0, 207, 1967, 459, 0, 0,
	304, 0, 357, 361, 0, 450, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 0, 0, 0, 426, 0,
	0, 0, 0, 146, 540, 449, 520, 0, 0, 0,
	311, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 348, 282, 0, 499, 375, 153, 199,
	186, 228, 270, 382, 0, 0, 260, 430, 195, 284,
	0, 174, 317, 0, 406, 281, 0, 389, 409, 0,
	301, 180, 340, 396, 397, 0, 0, 0, 0, 0,
	184, 185, 306, 166, 314, 511, 477, 369, 327, 325,
	0, 292, 349, 506, 0, 0, 214, 0, 209, 305,
	445, 172, 424, 343, 310, 264, 372, 401, 211, 196,
	197, 240, 342, 230, 182, 435, 474, 478, 476, 472,
	469, 473, 470, 471, 475, 231, 468, 0, 443, 452,
	486, 466, 494, 451, 491, 461, 206, 490, 455, 454,
	500, 481, 482, 436, 496, 467, 465, 458, 457, 453,
	0, 131, 132, 133, 134, 135, 136, 137, 138, 139,
	140, 142, 0, 143, 144, 145, 147, 148, 149, 0,
	150, 151, 152, 155, 156, 157, 159, 519, 160, 161,
	162, 163, 164, 165, 456, 0, 167, 168, 169, 170,
	171, 173, 175, 176, 177, 178, 179, 181, 183, 0,
	0, 0, 0, 0, 0, 0, 187, 188, 189, 190,
	191, 192, 0, 193, 194, 198, 200, 201, 202, 203,
	204, 205, 208, 0, 210, 212, 0, 213, 216, 0,
	217, 218, 219, 220, 221, 222, 223, 224, 460, 225,
	0, 226, 227, 229, 0, 232, 233, 234, 235, 236,
	0, 237, 462, 463, 238, 239, 241, 242, 243, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 0, 257, 258, 259, 261, 0, 262, 263, 266,
	267, 268, 269, 0, 271, 479, 0, 272, 273, 274,
	0, 0, 275, 276, 277, 278, 279, 280, 283, 480,
	285, 286, 287, 288, 289, 290, 291, 521, 293, 294,
	295, 296, 297, 298, 299, 483, 484, 300, 302, 303,
	485, 487, 488, 0, 318, 319, 320, 321, 322, 323,
	324, 326, 0, 328, 329, 330, 489, 331, 332, 333,
	334, 0, 335, 336, 337, 338, 339, 341, 344, 345,
	346, 347, 0, 350, 351, 352, 353, 354, 355, 356,
	358, 359, 360, 362, 363, 364, 522, 365, 366, 367,
	368, 492, 370, 371, 523, 373, 374, 376, 377, 378,
	379, 380, 381, 538, 0, 383, 493, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 393, 394, 395, 398,
	399, 400, 402, 403, 495, 404, 405, 0, 407, 408,
	0, 410, 411, 412, 413, 414, 0, 539, 415, 497,
	416, 498, 417, 418, 419, 420, 421, 422, 423, 425,
	0, 0, 427, 428, 429, 431, 432, 433, 434, 437,
	438, 439, 440, 441, 0, 442, 444, 446, 524, 501,
	502, 503, 504, 505, 507, 508, 509, 510, 447, 448,
	464, 315, 309, 265, 307, 308, 312, 313, 316, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 158,
	0, 0, 207, 1613, 459, 0, 0, 304, 0, 357,
	361, 0, 450, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 0, 426, 0, 0, 0, 0,
	146, 540, 449, 520, 0, 0, 0, 311, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	348, 282, 0, 499, 375, 153, 199, 186, 228, 270,
	382, 0, 0, 260, 430, 195, 284, 0, 174, 317,
	0, 406, 281, 0, 389, 409, 0, 301, 180, 340,
	396, 397, 0, 0, 0, 0, 0, 184, 185, 306,
	166, 314, 511, 477, 369, 327, 325, 0, 292, 349,
	506, 0, 0, 214, 0, 209, 305, 445, 172, 424,
	343, 310, 264, 372, 401, 211, 196, 197, 240, 342,
	230, 182, 435, 474, 478, 476, 472, 469, 473, 470,
	471, 475, 231, 468, 0, 443, 452, 486, 466, 494,
	451, 491, 461, 206, 490, 455, 454, 500, 481, 482,
	436, 496, 467, 465, 458, 457, 453, 0, 131, 132,
	133, 134, 135, 136, 137, 138, 139, 140, 142, 0,
	143, 144, 145, 147, 148, 149, 0, 150, 151, 152,
	155, 156, 157, 159, 519, 160, 161, 162, 163, 164,
	165, 456, 0, 167, 168, 169, 170, 171, 173, 175,
	176, 177, 178, 179, 181, 183, 0, 0, 0, 0,
	0, 0, 0, 187, 188, 189, 190, 191, 192, 0,
	193, 194, 198, 200, 201, 202, 203, 204, 205, 208,
	0, 210, 212, 0, 213, 216, 0, 217, 218, 219,
	220, 221, 222, 223, 224, 460, 225, 0, 226, 227,
	229, 0, 232, 233, 234, 235, 236, 0, 237, 462,
	463, 238, 239, 241, 242, 243, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 0, 257,
	258, 259, 261, 0, 262, 263, 266, 267, 268, 269,
	0, 271, 479, 0, 272, 273, 274, 0, 0, 275,
	276, 277, 278, 279, 280, 283, 480, 285, 286, 287,
	288, 289, 290, 291, 521, 293, 294, 295, 296, 297,
	298, 299, 483, 484, 300, 302, 303, 485, 487, 488,
	0, 318, 319, 320, 321, 322, 323, 324, 326, 0,
	328, 329, 330, 489, 331, 332, 333, 334, 0, 335,
	336, 337, 338, 339, 341, 344, 345, 346, 347, 0,
	350, 351, 352, 353, 354, 355, 356, 358, 359, 360,
	362, 363, 364, 522, 365, 366, 367, 368, 492, 370,
	371, 523, 373, 374, 376, 377, 378, 379, 380, 381,
	538, 0, 383, 493, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 393, 394, 395, 398, 399, 400, 402,
	403, 495, 404, 405, 0, 407, 408, 0, 410, 411,
	412, 413, 414, 0, 539, 415, 497, 416, 498, 417,
	418, 419, 420, 421, 422, 423, 425, 0, 0, 427,
	428, 429, 431, 432, 433, 434, 437, 438, 439, 440,
	441, 0, 442, 444, 446, 524, 501, 502, 503, 504,
	505, 507, 508, 509, 510, 447, 448, 464, 315, 309,
	265, 307, 308, 312, 313, 316, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 158, 0, 0, 207,
	929, 459, 0, 0, 304, 0, 357, 361, 0, 450,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 0,
	0, 0, 426, 0, 0, 0, 0, 146, 540, 449,
	520, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 348, 282, 0,
	499, 375, 153, 199, 186, 228, 270, 382, 0, 0,
	260, 430, 195, 284, 0, 174, 317, 0, 406, 281,
	0, 389, 409, 0, 301, 180, 340, 396, 397, 0,
	0, 0, 0, 0, 184, 185, 306, 166, 314, 511,
	477, 369, 327, 325, 0, 292, 349, 506, 0, 0,
	214, 0, 209, 305, 445, 172, 424, 343, 310, 264,
	372, 401, 211, 196, 197, 240, 342, 230, 182, 435,
	474, 478, 476, 472, 469, 473, 470, 471, 475, 231,
	468, 0, 443, 452, 486, 466, 494, 451, 491, 461,
	206, 490, 455, 454, 500, 481, 482, 436, 496, 467,
	465, 458, 457, 453, 0, 131, 132, 133, 134, 135,
	136, 137, 138, 139, 140, 142, 0, 143, 144, 145,
	147, 148, 149, 0, 150, 151, 152, 155, 156, 157,
	159, 519, 160, 161, 162, 163, 164, 165, 456, 0,
	167, 168, 169, 170, 171, 173, 175, 176, 177, 178,
	179, 181, 183, 0, 0, 0, 0, 0, 0, 0,
	187, 188, 189, 190, 191, 192, 0, 193, 194, 198,
	200, 201, 202, 203, 204, 205, 208, 0, 210, 212,
	0, 213, 216, 0, 217, 218, 219, 220, 221, 222,
	223, 224, 460, 225, 0, 226, 227, 229, 0, 232,
	233, 234, 235, 236, 0, 237, 462, 463, 238, 239,
	241, 242, 243, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 0, 257, 258, 259, 261,
	0, 262, 263, 266, 267, 268, 269, 0, 271, 479,
	0, 272, 273, 274, 0, 0, 275, 276, 277, 278,
	279, 280, 283, 480, 285, 286, 287, 288, 289, 290,
	291, 521, 293, 294, 295, 296, 297, 298, 299, 483,
	484, 300, 302, 303, 485, 487, 488, 0, 318, 319,
	320, 321, 322, 323, 324, 326, 0, 328, 329, 330,
	489, 331, 332, 333, 334, 0, 335, 336, 337, 338,
	339, 341, 344, 345, 346, 347, 0, 350, 351, 352,
	353, 354, 355, 356, 358, 359, 360, 362, 363, 364,
	522, 365, 366, 367, 368, 492, 370, 371, 523, 373,
	374, 376, 377, 378, 379, 380, 381, 538, 0, 383,
	493, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	393, 394, 395, 398, 399, 400, 402, 403, 495, 404,
	405, 0, 407, 408, 0, 410, 411, 412, 413, 414,
	0, 539, 415, 497, 416, 498, 417, 418, 419, 420,
	421, 422, 423, 425, 0, 0, 427, 428, 429, 431,
	432, 433, 434, 437, 438, 439, 440, 441, 0, 442,
	444, 446, 524, 501, 502, 503, 504, 505, 507, 508,
	509, 510, 447, 448, 464, 315, 309, 265, 307, 308,
	312, 313, 316, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 158, 0, 0, 207, 800, 459, 0,
	0, 304, 0, 357, 361, 0, 450, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 0, 426,
	0, 0, 0, 0, 146, 540, 449, 520, 0, 0,
	0, 311, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 348, 282, 0, 499, 375, 153,
	199, 186, 228, 270, 382, 0, 0, 260, 430, 195,
	284, 0, 174, 317, 0, 406, 281, 0, 389, 409,
	0, 301, 180, 340, 396, 397, 0, 0, 0, 0,
	0, 184, 185, 306, 166, 314, 511, 477, 369, 327,
	325, 0, 292, 349, 506, 0, 0, 214, 0, 209,
	305, 445, 172, 424, 343, 310, 264, 372, 401, 211,
	196, 197, 240, 342, 230, 182, 435, 474, 478, 476,
	472, 469, 473, 470, 471, 475, 231, 468, 0, 443,
	452, 486, 466, 494, 451, 491, 461, 206, 490, 455,
	454, 500, 481, 482, 436, 496, 467, 465, 458, 457,
	453, 0, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 142, 0, 143, 144, 145, 147, 148, 149,
	0, 150, 151, 152, 155, 156, 157, 159, 519, 160,
	161, 162, 163, 164, 165, 456, 0, 167, 168, 169,
	170, 171, 173, 175, 176, 177, 178, 179, 181, 183,
	0, 0, 0, 0, 0, 0, 0, 187, 188, 189,
	190, 191, 192, 0, 193, 194, 198, 200, 201, 202,
	203, 204, 205, 208, 0, 210, 212, 0, 213, 216,
	0, 217, 218, 219, 220, 221, 222, 223, 224, 460,
	225, 0, 226, 227, 229, 0, 232, 233, 234, 235,
	236, 0, 237, 462, 463, 238, 239, 241, 242, 243,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 0, 257, 258, 259, 261, 0, 262, 263,
	266, 267, 268, 269, 0, 271, 479, 0, 272, 273,
	274, 0, 0, 275, 276, 277, 278, 279, 280, 283,
	480, 285, 286, 287, 288, 289, 290, 291, 521, 293,
	294, 295, 296, 297, 298, 299, 483, 484, 300, 302,
	303, 485, 487, 488, 0, 318, 319, 320, 321, 322,
	323, 324, 326, 0, 328, 329, 330, 489, 331, 332,
	333, 334, 0, 335, 336, 337, 338, 339, 341, 344,
	345, 346, 347, 0, 350, 351, 352, 353, 354, 355,
	356, 358, 359, 360, 362, 363, 364, 522, 365, 366,
	367, 368, 492, 370, 371, 523, 373, 374, 376, 377,
	378, 379, 380, 381, 538, 0, 383, 493, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 393, 394, 395,
	398, 399, 400, 402, 403, 495, 404, 405, 0, 407,
	408, 0, 410, 411, 412, 413, 414, 0, 539, 415,
	497, 416, 498, 417, 418, 419, 420, 421, 422, 423,
	425, 0, 0, 427, 428, 429, 431, 432, 433, 434,
	437, 438, 439, 440, 441, 0, 442, 444, 446, 524,
	501, 502, 503, 504, 505, 507, 508, 509, 510, 447,
	448, 464, 315, 309, 265, 307, 308, 312, 313, 316,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 793,
	158, 0, 0, 207, 244, 459, 0, 0, 304, 0,
	357, 361, 0, 450, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 0, 426, 0, 0, 0,
	0, 146, 540, 449, 520, 0, 0, 0, 311, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 348, 282, 0, 499, 375, 153, 199, 186, 228,
	270, 0, 0, 0, 260, 430, 195, 284, 0, 174,
	317, 0, 406, 281, 0, 389, 409, 0, 301, 180,
	340, 396, 397, 0, 0, 0, 0, 0, 184, 185,
	306, 166, 314, 511, 477, 369, 327, 325, 0, 292,
	349, 506, 0, 0, 214, 0, 209, 305, 445, 172,
	424, 343, 310, 264, 372, 401, 211, 196, 197, 240,
	342, 230, 182, 435, 474, 478, 476, 472, 469, 473,
	470, 471, 475, 231, 468, 0, 443, 452, 486, 466,
	494, 451, 491, 461, 206, 490, 455, 454, 500, 481,
	482, 436, 496, 467, 465, 458, 457, 453, 0, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 142,
	0, 143, 144, 145, 147, 148, 149, 0, 150, 151,
	152, 155, 156, 157, 159, 519, 160, 161, 162, 163,
	164, 165, 456, 0, 167, 168, 169, 170, 171, 173,
	175, 176, 177, 178, 179, 181, 183, 0, 0, 0,
	0, 0, 0, 0, 187, 188, 189, 190, 191, 192,
	0, 193, 194, 198, 200, 201, 202, 203, 204, 205,
	208, 0, 210, 212, 0, 213, 216, 0, 217, 218,
	219, 220, 221, 222, 223, 224, 460, 225, 0, 226,
	227, 229, 0, 232, 233, 234, 235, 236, 0, 237,
	462, 463, 238, 239, 241, 242, 243, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 0,
	257, 258, 259, 261, 0, 262, 263, 266, 267, 268,
	269, 0, 271, 479, 0, 272, 273, 274, 0, 0,
	275, 276, 277, 278, 279, 280, 283, 480, 285, 286,
	287, 288, 289, 290, 291, 521, 293, 294, 295, 296,
	297, 298, 299, 483, 484, 300, 302, 303, 485, 487,
	488, 0, 318, 319, 320, 321, 322, 323, 324, 326,
	0, 328, 329, 330, 489, 331, 332, 333, 334, 0,
	335, 336, 337, 338, 339, 341, 344, 345, 346, 347,
	0, 350, 351, 352, 353, 354, 355, 356, 358, 359,
	360, 362, 363, 364, 522, 365, 366, 367, 368, 492,
	370, 371, 523, 373, 374, 376, 377, 378, 379, 380,
	381, 538, 0, 383, 493, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 393, 394, 395, 398, 399, 400,
	402, 403, 495, 404, 405, 0, 407, 408, 0, 410,
	411, 412, 413, 414, 0, 539, 415, 497, 416, 498,
	417, 418, 419, 420, 421, 422, 423, 425, 0, 0,
	427, 428, 429, 431, 432, 433, 434, 437, 438, 439,
	440, 441, 0, 442, 444, 446, 524, 501, 502, 503,
	504, 505, 507, 508, 509, 510, 447, 448, 464, 315,
	309, 265, 307, 308, 312, 313, 316, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 158, 0, 0,
	207, 244, 459, 0, 0, 304, 0, 357, 361, 0,
	450, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 0, 0, 426, 0, 0, 0, 0, 146, 121,
	449, 520, 0, 0, 0, 311, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 348, 282,
	0, 499, 375, 153, 199, 186, 228, 270, 382, 0,
	0, 260, 430, 195, 284, 0, 174, 317, 0, 406,
	281, 0, 389, 409, 0, 301, 180, 340, 396, 397,
	0, 0, 0, 0, 0, 184, 185, 306, 166, 314,
	511, 477, 369, 327, 325, 0, 292, 349, 506, 0,
	0, 214, 0, 209, 305, 445, 172, 424, 343, 310,
	264, 372, 401, 211, 196, 197, 240, 342, 230, 182,
	435, 474, 478, 476, 472, 469, 473, 470, 471, 475,
	231, 468, 0, 443, 452, 486, 466, 494, 451, 491,
	461, 206, 490, 455, 454, 500, 481, 482, 436, 496,
	467, 465, 458, 457, 453, 0, 131, 132, 133, 134,
	135, 136, 137, 138, 139, 140, 142, 0, 143, 144,
	145, 147, 148, 149, 0, 150, 151, 152, 155, 156,
	157, 159, 122, 160, 161, 162, 163, 164, 165, 456,
	0, 167, 168, 169, 170, 171, 173, 175, 176, 177,
	178, 179, 181, 183, 0, 0, 0, 0, 0, 0,
	0, 187, 188, 189, 190, 191, 192, 0, 193, 194,
	198, 200, 201, 202, 203, 204, 205, 208, 0, 210,
	212, 0, 213, 216, 0, 217, 218, 219, 220, 221,
	222, 223, 224, 460, 225, 0, 226, 227, 229, 0,
	232, 233, 234, 235, 236, 0, 237, 462, 463, 238,
	239, 241, 242, 243, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 0, 257, 258, 259,
	261, 0, 262, 263, 266, 267, 268, 269, 0, 271,
	479, 0, 272, 273, 274, 0, 0, 275, 276, 277,
	278, 279, 280, 283, 480, 285, 286, 287, 288, 289,
	290, 291, 124, 293, 294, 295, 296, 297, 298, 299,
	483, 484, 300, 302, 303, 485, 487, 488, 0, 318,
	319, 320, 321, 322, 323, 324, 326, 0, 328, 329,
	330, 489, 331, 332, 333, 334, 0, 335, 336, 337,
	338, 339, 341, 344, 345, 346, 347, 0, 350, 351,
	352, 353, 354, 355, 356, 358, 359, 360, 362, 363,
	364, 125, 365, 366, 367, 368, 492, 370, 371, 123,
	373, 374, 376, 377, 378, 379, 380, 381, 706, 0,
	383, 493, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 393, 394, 395, 398, 399, 400, 402, 403, 495,
	404, 405, 0, 407, 408, 0, 410, 411, 412, 413,
	414, 0, 117, 415, 497, 416, 498, 417, 418, 419,
	420, 421, 422, 423, 425, 0, 0, 427, 428, 429,
	431, 432, 433, 434, 437, 438, 439, 440, 441, 0,
	442, 444, 446, 126, 501, 502, 503, 504, 505, 507,
	508, 509, 510, 447, 448, 464, 315, 309, 265, 307,
	308, 312, 313, 316, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 158, 0, 0, 207, 658, 459,
	0, 0, 304, 0, 357, 361, 0, 450, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 146, 540, 449, 520, 0,
	0, 0, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 348, 282, 0, 499, 375,
	153, 199, 186, 228, 270, 382, 0, 0, 260, 430,
	195, 284, 0, 174, 317, 0, 406, 281, 0, 389,
	409, 0, 301, 180, 340, 396, 397, 0, 0, 0,
	0, 0, 184, 185, 306, 166, 314, 511, 477, 369,
	327, 325, 0, 292, 349, 506, 0, 0, 214, 0,
	209, 305, 445, 172, 424, 343, 310, 264, 372, 401,
	211, 196, 197, 240, 342, 230, 182, 435, 474, 478,
	476, 472, 469, 473, 470, 471, 475, 231, 468, 0,
	443, 452, 486, 466, 494, 451, 491, 461, 206, 490,
	455, 454, 500, 481, 482, 436, 496, 467, 465, 458,
	457, 453, 0, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 142, 0, 143, 144, 145, 147, 148,
	149, 0, 150, 151, 152, 155, 156, 157, 159, 519,
	160, 161, 162, 163, 164, 165, 456, 0, 167, 168,
	169, 170, 171, 173, 175, 176, 177, 178, 179, 181,
	183, 0, 0, 0, 0, 0, 0, 0, 187, 188,
	189, 190, 191, 192, 0, 193, 194, 198, 200, 201,
	202, 203, 204, 205, 208, 0, 210, 212, 0, 213,
	216, 0, 217, 218, 219, 220, 221, 222, 223, 224,
	460, 225, 0, 226, 227, 229, 0, 232, 233, 234,
	235, 236, 0, 237, 462, 463, 238, 239, 241, 242,
	243, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 0, 257, 258, 259, 261, 0, 262,
	263, 266, 267, 268, 269, 0, 271, 479, 0, 272,
	273, 274, 0, 0, 275, 276, 277, 278, 279, 280,
	283, 480, 285, 286, 287, 288, 289, 290, 291, 521,
	293, 294, 295, 296, 297, 298, 299, 483, 484, 300,
	302, 303, 485, 487, 488, 0, 318, 319, 320, 321,
	322, 323, 324, 326, 0, 328, 329, 330, 489, 331,
	332, 333, 334, 0, 335, 336, 337, 338, 339, 341,
	344, 345, 346, 347, 0, 350, 351, 352, 353, 354,
	355, 356, 358, 359, 360, 362, 363, 364, 522, 365,
	366, 367, 368, 492, 370, 371, 523, 373, 374, 376,
	377, 378, 379, 380, 381, 538, 0, 383, 493, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 393, 394,
	395, 398, 399, 400, 402, 403, 495, 404, 405, 0,
	407, 408, 0, 410, 411, 412, 413, 414, 0, 539,
	415, 497, 416, 498, 417, 418, 419, 420, 421, 422,
	423, 425, 0, 0, 427, 428, 429, 431, 432, 433,
	434, 437, 438, 439, 440, 441, 0, 442, 444, 446,
	524, 501, 502, 503, 504, 505, 507, 508, 509, 510,
	447, 448, 464, 315, 309, 265, 307, 308, 312, 313,
	316, 128, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 158, 0, 0, 207, 654, 459, 0, 0, 304,
	0, 357, 361, 0, 450, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 0, 0, 0, 426, 0, 0,
	0, 0, 146, 540, 449, 520, 0, 0, 0, 311,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 348, 282, 0, 499, 375, 153, 199, 186,
	228, 270, 382, 0, 0, 260, 430, 195, 284, 0,
	174, 317, 0, 406, 281, 0, 389, 409, 0, 301,
	180, 340, 396, 397, 0, 0, 0, 0, 0, 184,
	185, 306, 166, 314, 511, 477, 369, 327, 325, 0,
	292, 349, 506, 0, 0, 214, 0, 209, 305, 445,
	172, 424, 343, 310, 264, 372, 401, 211, 196, 197,
	240, 342, 230, 182, 435, 474, 478, 476, 472, 469,
	473, 470, 471, 475, 231, 468, 0, 443, 452, 486,
	466, 494, 451, 491, 461, 206, 490, 455, 454, 500,
	481, 482, 436, 496, 467, 465, 458, 457, 453, 0,
	131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
	142, 0, 143, 144, 145, 147, 148, 149, 0, 150,
	151, 152, 155, 156, 157, 159, 519, 160, 161, 162,
	163, 164, 165, 456, 0, 167, 168, 169, 170, 171,
	173, 175, 176, 177, 178, 179, 181, 183, 0, 0,
	0, 0, 0, 0, 0, 187, 188, 189, 190, 191,
	192, 0, 193, 194, 198, 200, 201, 202, 203, 204,
	205, 208, 0, 210, 212, 0, 213, 216, 0, 217,
	218, 219, 220, 221, 222, 223, 224, 460, 225, 0,
	226, 227, 229, 0, 232, 233, 234, 235, 236, 0,
	237, 462, 463, 238, 239, 241, 242, 243, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	0, 257, 258, 259, 261, 0, 262, 263, 266, 267,
	268, 269, 0, 271, 479, 0, 272, 273, 274, 0,
	0, 275, 276, 277, 278, 279, 280, 283, 480, 285,
	286, 287, 288, 289, 290, 291, 521, 293, 294, 295,
	296, 297, 298, 299, 483, 484, 300, 302, 303, 485,
	487, 488, 0, 318, 319, 320, 321, 322, 323, 324,
	326, 0, 328, 329, 330, 489, 331, 332, 333, 334,
	0, 335, 336, 337, 338, 339, 341, 344, 345, 346,
	347, 0, 350, 351, 352, 353, 354, 355, 356, 358,
	359, 360, 362, 363, 364, 522, 365, 366, 367, 368,
	492, 370, 371, 523, 373, 374, 376, 377, 378, 379,
	380, 381, 538, 0, 383, 493, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 393, 394, 395, 398, 399,
	400, 402, 403, 495, 404, 405, 0, 407, 408, 0,
	410, 411, 412, 413, 414, 0, 539, 415, 497, 416,
	498, 417, 418, 419, 420, 421, 422, 423, 425, 0,
	0, 427, 428, 429, 431, 432, 433, 434, 437, 438,
	439, 440, 441, 0, 442, 444, 446, 524, 501, 502,
	503, 504, 505, 507, 508, 509, 510, 447, 448, 464,
	315, 309, 265, 307, 308, 312, 313, 316, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 158, 0,
	0, 207, 651, 459, 0, 0, 304, 0, 357, 361,
	0, 450, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 0, 0, 0, 426, 0, 0, 0, 0, 146,
	540, 449, 520, 0, 0, 0, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 348,
	282, 0, 499, 375, 153, 199, 186, 228, 270, 382,
	0, 0, 260, 430, 195, 284, 0, 174, 317, 0,
	406, 281, 0, 389, 409, 0, 301, 180, 340, 396,
	397, 0, 0, 0, 0, 0, 184, 185, 306, 166,
	314, 511, 477, 369, 327, 325, 0, 292, 349, 506,
	0, 0, 214, 0, 209, 305, 445, 172, 424, 343,
	310, 264, 372, 401, 211, 196, 197, 240, 342, 230,
	182, 435, 474, 478, 476, 472, 469, 473, 470, 471,
	475, 231, 468, 0, 443, 452, 486, 466, 494, 451,
	491, 461, 206, 490, 455, 454, 500, 481, 482, 436,
	496, 467, 465, 458, 457, 453, 0, 131, 132, 133,
	134, 135, 136, 137, 138, 139, 140, 142, 0, 143,
	144, 145, 147, 148, 149, 0, 150, 151, 152, 155,
	156, 157, 159, 519, 160, 161, 162, 163, 164, 165,
	456, 0, 167, 168, 169, 170, 171, 173, 175, 176,
	177, 178, 179, 181, 183, 0, 0, 0, 0, 0,
	0, 0, 187, 188, 189, 190, 191, 192, 0, 193,
	194, 198, 200, 201, 202, 203, 204, 205, 208, 0,
	210, 212, 0, 213, 216, 0, 217, 218, 219, 220,
	221, 222, 223, 224, 460, 225, 0, 226, 227, 229,
	0, 232, 233, 234, 235, 236, 0, 237, 462, 463,
	238, 239, 241, 242, 243, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 0, 257, 258,
	259, 261, 0, 262, 263, 266, 267, 268, 269, 0,
	271, 479, 0, 272, 273, 274, 0, 0, 275, 276,
	277, 278, 279, 280, 283, 480, 285, 286, 287, 288,
	289, 290, 291, 521, 293, 294, 295, 296, 297, 298,
	299, 483, 484, 300, 302, 303, 485, 487, 488, 0,
	318, 319, 320, 321, 322, 323, 324, 326, 0, 328,
	329, 330, 489, 331, 332, 333, 334, 0, 335, 336,
	337, 338, 339, 341, 344, 345, 346, 347, 0, 350,
	351, 352, 353, 354, 355, 356, 358, 359, 360, 362,
	363, 364, 522, 365, 366, 367, 368, 492, 370, 371,
	523, 373, 374, 376, 377, 378, 379, 380, 381, 538,
	0, 383, 493, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 393, 394, 395, 398, 399, 400, 402, 403,
	495, 404, 405, 0, 407, 408, 0, 410, 411, 412,
	413, 414, 0, 539, 415, 497, 416, 498, 417, 418,
	419, 420, 421, 422, 423, 425, 0, 0, 427, 428,
	429, 431, 432, 433, 434, 437, 438, 439, 440, 441,
	0, 442, 444, 446, 524, 501, 502, 503, 504, 505,
	507, 508, 509, 510, 447, 448, 464, 315, 309, 265,
	307, 308, 312, 313, 316, 128, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 158, 0, 0, 207, 635,
	459, 0, 0, 304, 0, 357, 361, 0, 450, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 0,
	0, 426, 0, 0, 0, 0, 146, 540, 449, 520,
	0, 0, 0, 311, 0, 0, 0, 0, 0, 0,
	0, 0, 154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 348, 282, 0, 499,
	375, 153, 199, 186, 228, 270, 382, 0, 0, 260,
	430, 195, 284, 0, 174, 317, 0, 406, 281, 0,
	389, 409, 0, 301, 180, 340, 396, 397, 0, 0,
	0, 0, 0, 184, 185, 306, 166, 314, 511, 477,
	369, 327, 325, 0, 292, 349, 506, 0, 0, 214,
	0, 209, 305, 445, 172, 424, 343, 310, 264, 372,
	401, 211, 196, 197, 240, 342, 230, 182, 435, 474,
	478, 476, 472, 469, 473, 470, 471, 475, 231, 468,
	0, 443, 452, 486, 466, 494, 451, 491, 461, 206,
	490, 455, 454, 500, 481, 482, 436, 496, 467, 465,
	458, 457, 453, 0, 131, 132, 133, 134, 135, 136,
	137, 138, 139, 140, 142, 0, 143, 144, 145, 147,
	148, 149, 0, 150, 151, 152, 155, 156, 157, 159,
	519, 160, 161, 162, 163, 164, 165, 456, 0, 167,
	168, 169, 170, 171, 173, 175, 176, 177, 178, 179,
	181, 183, 0, 0, 0, 0, 0, 0, 0, 187,
	188, 189, 190, 191, 192, 0, 193, 194, 198, 200,
	201, 202, 203, 204, 205, 208, 0, 210, 212, 0,
	213, 216, 0, 217, 218, 219, 220, 221, 222, 223,
	224, 460, 225, 0, 226, 227, 229, 0, 232, 233,
	234, 235, 236, 0, 237, 462, 463, 238, 239, 241,
	242, 243, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 0, 257, 258, 259, 261, 0,
	262, 263, 266, 267, 268, 269, 0, 271, 479, 0,
	272, 273, 274, 0, 0, 275, 276, 277, 278, 279,
	280, 283, 480, 285, 286, 287, 288, 289, 290, 291,
	521, 293, 294, 295, 296, 297, 298, 299, 483, 484,
	300, 302, 303, 485, 487, 488, 0, 318, 319, 320,
	321, 322, 323, 324, 326, 0, 328, 329, 330, 489,
	331, 332, 333, 334, 0, 335, 336, 337, 338, 339,
	341, 344, 345, 346, 347, 0, 350, 351, 352, 353,
	354, 355, 356, 358, 359, 360, 362, 363, 364, 522,
	365, 366, 367, 368, 492, 370, 371, 523, 373, 374,
	376, 377, 378, 379, 380, 381, 538, 0, 383, 493,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 393,
	394, 395, 398, 399, 400, 402, 403, 495, 404, 405,
	0, 407, 408, 0, 410, 411, 412, 413, 414, 0,
	539, 415, 497, 416, 498, 417, 418, 419, 420, 421,
	422, 423, 425, 0, 0, 427, 428, 429, 431, 432,
	433, 434, 437, 438, 439, 440, 441, 0, 442, 444,
	446, 524, 501, 502, 503, 504, 505, 507, 508, 509,
	510, 447, 448, 464, 315, 309, 265, 307, 308, 312,
	313, 316, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 158, 0, 0, 207, 580, 459, 0, 0,
	304, 0, 357, 361, 0, 450, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 0, 0, 0, 426, 0,
	0, 0, 0, 146, 540, 449, 520, 0, 0, 0,
	311, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 348, 282, 0, 499, 375, 153, 199,
	186, 228, 270, 382, 0, 0, 260, 430, 195, 284,
	0, 174, 317, 0, 406, 281, 0, 389, 409, 0,
	301, 180, 340, 396, 397, 0, 0, 0, 0, 0,
	184, 185, 306, 166, 314, 511, 477, 369, 327, 325,
	0, 292, 349, 506, 0, 0, 214, 0, 209, 305,
	445, 172, 424, 343, 310, 264, 372, 401, 211, 196,
	197, 240, 342, 230, 182, 435, 474, 478, 476, 472,
	469, 473, 470, 471, 475, 231, 468, 0, 443, 452,
	486, 466, 494, 451, 491, 461, 206, 490, 455, 454,
	500, 481, 482, 436, 496, 467, 465, 458, 457, 453,
	0, 131, 132, 133, 134, 135, 136, 137, 138, 139,
	140, 142, 0, 143, 144, 145, 147, 148, 149, 0,
	150, 151, 152, 155, 156, 157, 159, 519, 160, 161,
	162, 163, 164, 165, 456, 0, 167, 168, 169, 170,
	171, 173, 175, 176, 177, 178, 179, 181, 183, 0,
	0, 0, 0, 0, 0, 0, 187, 188, 189, 190,
	191, 192, 0, 193, 194, 198, 200, 201, 202, 203,
	204, 205, 208, 0, 210, 212, 0, 213, 216, 0,
	217, 218, 219, 220, 221, 222, 223, 224, 460, 225,
	0, 226, 227, 229, 0, 232, 233, 234, 235, 236,
	0, 237, 462, 463, 238, 239, 241, 242, 243, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 0, 257, 258, 259, 261, 0, 262, 263, 266,
	267, 268, 269, 0, 271, 479, 0, 272, 273, 274,
	0, 0, 275, 276, 277, 278, 279, 280, 283, 480,
	285, 286, 287, 288, 289, 290, 291, 521, 293, 294,
	295, 296, 297, 298, 299, 483, 484, 300, 302, 303,
	485, 487, 488, 0, 318, 319, 320, 321, 322, 323,
	324, 326, 0, 328, 329, 330, 489, 331, 332, 333,
	334, 0, 335, 336, 337, 338, 339, 341, 344, 345,
	346, 347, 0, 350, 351, 352, 353, 354, 355, 356,
	358, 359, 360, 362, 363, 364, 522, 365, 366, 367,
	368, 492, 370, 371, 523, 373, 374, 376, 377, 378,
	379, 380, 381, 538, 0, 383, 493, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 393, 394, 395, 398,
	399, 400, 402, 403, 495, 404, 405, 0, 407, 408,
	0, 410, 411, 412, 413, 414, 0, 539, 415, 497,
	416, 498, 417, 418, 419, 420, 421, 422, 423, 425,
	0, 0, 427, 428, 429, 431, 432, 433, 434, 437,
	438, 439, 440, 441, 0, 442, 444, 446, 524, 501,
	502, 503, 504, 505, 507, 508, 509, 510, 447, 448,
	464, 315, 309, 265, 307, 308, 312, 313, 316, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 158,
	0, 0, 207, 578, 459, 0, 0, 304, 0, 357,
	361, 0, 450, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 0, 426, 0, 0, 0, 0,
	146, 540, 449, 520, 0, 0, 0, 311, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	348, 282, 0, 499, 375, 153, 199, 186, 228, 270,
	382, 0, 0, 260, 430, 195, 284, 0, 174, 317,
	0, 406, 281, 0, 389, 409, 0, 301, 180, 340,
	396, 397, 0, 0, 0, 0, 0, 184, 185, 306,
	166, 314, 511, 477, 369, 327, 325, 0, 292, 349,
	506, 0, 0, 214, 0, 209, 305, 445, 172, 424,
	343, 310, 264, 372, 401, 211, 196, 197, 240, 342,
	230, 182, 435, 474, 478, 476, 472, 469, 473, 470,
	471, 475, 231, 468, 0, 443, 452, 486, 466, 494,
	451, 491, 461, 206, 490, 455, 454, 500, 481, 482,
	436, 496, 467, 465, 458, 457, 453, 0, 131, 132,
	133, 134, 135, 136, 137, 138, 139, 140, 142, 0,
	143, 144, 145, 147, 148, 149, 0, 150, 151, 152,
	155, 156, 157, 159, 519, 160, 161, 162, 163, 164,
	165, 456, 0, 167, 168, 169, 170, 171, 173, 175,
	176, 177, 178, 179, 181, 183, 0, 0, 0, 0,
	0, 0, 0, 187, 188, 189, 190, 191, 192, 0,
	193, 194, 198, 200, 201, 202, 203, 204, 205, 208,
	0, 210, 212, 0, 213, 216, 0, 217, 218, 219,
	220, 221, 222, 223, 224, 460, 225, 0, 226, 227,
	229, 0, 232, 233, 234, 235, 236, 0, 237, 462,
	463, 238, 239, 241, 242, 243, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 0, 257,
	258, 259, 261, 0, 262, 263, 266, 267, 268, 269,
	0, 271, 479, 0, 272, 273, 274, 0, 0, 275,
	276, 277, 278, 279, 280, 283, 480, 285, 286, 287,
	288, 289, 290, 291, 521, 293, 294, 295, 296, 297,
	298, 299, 483, 484, 300, 302, 303, 485, 487, 488,
	0, 318, 319, 320, 321, 322, 323, 324, 326, 0,
	328, 329, 330, 489, 331, 332, 333, 334, 0, 335,
	336, 337, 338, 339, 341, 344, 345, 346, 347, 0,
	350, 351, 352, 353, 354, 355, 356, 358, 359, 360,
	362, 363, 364, 522, 365, 366, 367, 368, 492, 370,
	371, 523, 373, 374, 376, 377, 378, 379, 380, 381,
	538, 0, 383, 493, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 393, 394, 395, 398, 399, 400, 402,
	403, 495, 404, 405, 0, 407, 408, 0, 410, 411,
	412, 413, 414, 0, 539, 415, 497, 416, 498, 417,
	418, 419, 420, 421, 422, 423, 425, 0, 0, 427,
	428, 429, 431, 432, 433, 434, 437, 438, 439, 440,
	441, 0, 442, 444, 446, 524, 501, 502, 503, 504,
	505, 507, 508, 509, 510, 447, 448, 464, 315, 309,
	265, 307, 308, 312, 313, 316, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 158, 0, 0, 207,
	244, 459, 0, 0, 304, 0, 357, 361, 0, 450,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 0,
	0, 0, 426, 0, 0, 0, 0, 146, 540, 449,
	520, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 543, 282, 0,
	499, 375, 153, 199, 186, 228, 270, 382, 0, 0,
	260, 430, 195, 284, 0, 174, 317, 0, 406, 281,
	0, 389, 409, 0, 301, 180, 340, 396, 397, 0,
	0, 0, 0, 0, 184, 185, 306, 166, 314, 511,
	477, 369, 327, 325, 0, 292, 349, 506, 0, 0,
	214, 0, 209, 305, 445, 172, 424, 343, 310, 264,
	372, 401, 211, 196, 197, 240, 342, 230, 182, 435,
	474, 478, 476, 472, 469, 473, 470, 471, 475, 231,
	468, 0, 443, 452, 486, 466, 494, 451, 491, 461,
	206, 490, 455, 454, 500, 481, 482, 436, 496, 467,
	465, 458, 457, 453, 0, 131, 132, 133, 134, 135,
	136, 137, 138, 139, 140, 142, 0, 143, 144, 145,
	147, 148, 149, 0, 150, 151, 152, 155, 156, 157,
	159, 519, 160, 161, 162, 163, 164, 165, 456, 0,
	167, 168, 169, 170, 171, 173, 175, 176, 177, 178,
	179, 181, 183, 0, 0, 0, 0, 0, 0, 0,
	187, 188, 189, 190, 191, 192, 0, 193, 194, 198,
	200, 201, 202, 203, 204, 205, 208, 0, 210, 212,
	0, 213, 216, 0, 217, 218, 219, 220, 221, 222,
	223, 224, 460, 225, 0, 226, 227, 229, 0, 232,
	233, 234, 235, 236, 0, 237, 462, 463, 238, 239,
	241, 242, 243, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 0, 257, 258, 259, 261,
	0, 262, 263, 266, 267, 268, 269, 0, 271, 479,
	0, 272, 273, 274, 0, 0, 275, 276, 277, 278,
	279, 280, 283, 480, 285, 286, 287, 288, 289, 290,
	291, 521, 293, 294, 295, 296, 297, 298, 299, 483,
	484, 300, 302, 303, 485, 487, 488, 0, 318, 319,
	320, 321, 322, 323, 324, 326, 0, 328, 329, 330,
	489, 331, 332, 333, 334, 0, 335, 336, 337, 338,
	339, 341, 344, 345, 346, 347, 0, 350, 351, 352,
	353, 354, 355, 356, 358, 359, 360, 362, 363, 364,
	522, 365, 366, 367, 368, 492, 370, 371, 523, 373,
	374, 376, 377, 378, 379, 380, 381, 538, 0, 383,
	493, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	393, 394, 395, 398, 399, 400, 402, 403, 495, 404,
	405, 0, 407, 408, 0, 410, 411, 412, 413, 414,
	0, 539, 415, 497, 416, 498, 417, 418, 419, 420,
	421, 422, 423, 425, 0, 0, 427, 428, 429, 431,
	432, 433, 434, 437, 438, 439, 440, 441, 0, 442,
	444, 446, 524, 501, 502, 503, 504, 505, 507, 508,
	509, 510, 447, 448, 464, 315, 309, 265, 307, 308,
	312, 313, 316, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 158, 0, 0, 207, 244, 459, 0,
	0, 304, 0, 357, 361, 0, 450, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 0, 426,
	0, 0, 0, 0, 146, 121, 449, 115, 0, 0,
	0, 311, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 348, 282, 0, 499, 375, 153,
	199, 186, 228, 270, 382, 0, 0, 260, 430, 195,
	284, 0, 174, 317, 0, 406, 281, 0, 389, 409,
	0, 301, 180, 340, 396, 397, 0, 0, 0, 0,
	0, 184, 185, 306, 166, 314, 511, 477, 369, 327,
	325, 0, 292, 349, 506, 0, 0, 214, 0, 209,
	305, 445, 172, 424, 343, 310, 264, 372, 401, 211,
	196, 197, 240, 342, 230, 182, 435, 474, 478, 476,
	472, 469, 473, 470, 471, 475, 231, 468, 0, 443,
	452, 486, 466, 494, 451, 491, 461, 206, 490, 455,
	454, 500, 481, 482, 436, 496, 467, 465, 458, 457,
	453, 0, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 142, 0, 143, 144, 145, 147, 148, 149,
	0, 150, 151, 152, 155, 156, 157, 159, 122, 160,
	161, 162, 163, 164, 165, 456, 0, 167, 168, 169,
	170, 171, 173, 175, 176, 177, 178, 179, 181, 183,
	0, 0, 0, 0, 0, 0, 0, 187, 188, 189,
	190, 191, 192, 0, 193, 194, 198, 200, 201, 202,
	203, 204, 205, 208, 0, 210, 212, 0, 213, 216,
	0, 217, 218, 219, 220, 221, 222, 223, 224, 460,
	225, 0, 226, 227, 229, 0, 232, 233, 234, 235,
	236, 0, 237, 462, 463, 238, 239, 241, 242, 243,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 0, 257, 258, 259, 261, 0, 262, 263,
	266, 267, 268, 269, 0, 271, 479, 0, 272, 273,
	274, 0, 0, 275, 276, 277, 278, 279, 280, 283,
	480, 285, 286, 287, 288, 289, 290, 291, 124, 293,
	294, 295, 296, 297, 298, 299, 483, 484, 300, 302,
	303, 485, 487, 488, 0, 318, 319, 320, 321, 322,
	323, 324, 326, 0, 328, 329, 330, 489, 331, 332,
	333, 334, 0, 335, 336, 337, 338, 339, 341, 344,
	345, 346, 347, 0, 350, 351, 352, 353, 354, 355,
	356, 358, 359, 360, 362, 363, 364, 125, 365, 366,
	367, 368, 492, 370, 371, 123, 373, 374, 376, 377,
	378, 379, 380, 381, 116, 0, 383, 493, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 393, 394, 395,
	398, 399, 400, 402, 403, 495, 404, 405, 0, 407,
	408, 0, 410, 411, 412, 413, 414, 0, 117, 415,
	497, 416, 498, 417, 418, 419, 420, 421, 422, 423,
	425, 0, 0, 427, 428, 429, 431, 432, 433, 434,
	437, 438, 439, 440, 441, 0, 442, 444, 446, 126,
	501, 502, 503, 504, 505, 507, 508, 509, 510, 447,
	448, 464, 315, 309, 265, 307, 308, 312, 313, 316,
	686, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	158, 594, 0, 207, 244, 0, 0, 0, 304, 0,
	357, 361, 0, 0, 0, 0, 0, 0, 215, 0,
	599, 1940, 605, 0, 611, 0, 426, 0, 601, 602,
	607, 146, 685, 449, 520, 0, 0, 0, 311, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 603, 600, 604, 610, 598, 608, 595, 606,
	0, 348, 282, 0, 0, 375, 153, 199, 186, 228,
	270, 382, 0, 0, 260, 430, 195, 284, 0, 174,
	317, 0, 406, 281, 0, 389, 409, 0, 301, 180,
	340, 396, 397, 592, 597, 0, 613, 0, 184, 185,
	306, 166, 314, 0, 0, 369, 327, 325, 0, 292,
	349, 0, 0, 0, 214, 0, 209, 305, 445, 172,
	424, 343, 310, 264, 372, 401, 211, 196, 197, 240,
	342, 230, 182, 435, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 231, 0, 0, 443, 688, 678, 670,
	671, 672, 673, 674, 675, 0, 690, 691, 692, 693,
	694, 436, 684, 0, 669, 676, 677, 679, 1943, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 142,
	0, 143, 144, 145, 147, 148, 149, 591, 150, 151,
	152, 155, 156, 157, 159, 519, 160, 161, 162, 163,
	164, 165, 0, 593, 167, 168, 169, 170, 171, 173,
	175, 176, 177, 178, 179, 181, 183, 0, 0, 0,
	596, 0, 0, 0, 187, 188, 189, 190, 191, 192,
	0, 193, 194, 198, 200, 201, 202, 203, 204, 205,
	208, 0, 210, 212, 0, 213, 216, 0, 217, 218,
	219, 220, 221, 222, 223, 224, 0, 225, 0, 226,
	227, 229, 0, 232, 233, 234, 235, 236, 0, 237,
	0, 0, 238, 239, 241, 242, 243, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 0,
	257, 258, 259, 261, 0, 262, 263, 266, 267, 268,
	269, 0, 271, 0, 0, 272, 273, 274, 0, 0,
	275, 276, 277, 278, 279, 280, 283, 0, 285, 286,
	287, 288, 289, 290, 291, 521, 293, 294, 295, 296,
	297, 298, 299, 0, 0, 300, 302, 303, 0, 1941,
	0, 609, 318, 319, 320, 321, 322, 323, 324, 326,
	0, 328, 329, 330, 0, 331, 332, 333, 334, 0,
	335, 336, 337, 338, 339, 341, 344, 345, 346, 347,
	0, 350, 351, 352, 353, 354, 355, 356, 358, 359,
	360, 362, 363, 364, 522, 365, 366, 367, 368, 0,
	370, 371, 523, 373, 374, 376, 377, 378, 379, 380,
	381, 538, 0, 383, 1946, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 393, 394, 395, 398, 399, 400,
	402, 403, 0, 404, 405, 0, 407, 408, 612, 410,
	411, 412, 413, 414, 0, 539, 415, 0, 416, 0,
	417, 418, 419, 420, 421, 422, 423, 425, 0, 0,
	427, 428, 429, 431, 432, 433, 434, 437, 438, 439,
	440, 441, 0, 442, 444, 446, 524, 0, 0, 686,
	0, 0, 0, 0, 0, 0, 447, 448, 1942, 315,
	309, 265, 307, 308, 312, 313, 316, 141, 0, 158,
	594, 0, 207, 244, 0, 0, 0, 304, 0, 357,
	361, 0, 0, 0, 0, 0, 0, 215, 0, 599,
	0, 605, 2216, 611, 0, 426, 0, 601, 602, 607,
	146, 685, 449, 520, 0, 0, 0, 311, 0, 0,
	0, 0, 2215, 0, 0, 0, 154, 0, 0, 0,
	0, 603, 600, 604, 610, 598, 608, 595, 606, 0,
	348, 282, 0, 0, 375, 153, 199, 186, 228, 270,
	382, 0, 0, 260, 430, 195, 284, 0, 174, 317,
	0, 406, 281, 0, 389, 409, 0, 301, 180, 340,
	396, 397, 592, 597, 0, 613, 0, 184, 185, 306,
	166, 314, 0, 0, 369, 327, 325, 0, 292, 349,
	0, 0, 0, 214, 0, 209, 305, 445, 172, 424,
	343, 310, 264, 372, 401, 211, 196, 197, 240, 342,
	230, 182, 435, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 443, 688, 678, 670, 671,
	672, 673, 674, 675, 0, 690, 691, 692, 693, 694,
	436, 684, 0, 669, 676, 677, 679, 0, 131, 132,
	133, 134, 135, 136, 137, 138, 139, 140, 142, 0,
	143, 144, 145, 147, 148, 149, 591, 150, 151, 152,
	155, 156, 157, 159, 519, 160, 161, 162, 163, 164,
	165, 0, 593, 167, 168, 169, 170, 171, 173, 175,
	176, 177, 178, 179, 181, 183, 0, 0, 0, 596,
	0, 0, 0, 187, 188, 189, 190, 191, 192, 0,
	193, 194, 198, 200, 201, 202, 203, 204, 205, 208,
	0, 210, 212, 0, 213, 216, 0, 217, 218, 219,
	220, 221, 222, 223, 224, 0, 225, 0, 226, 227,
	229, 0, 232, 233, 234, 235, 236, 0, 237, 0,
	0, 238, 239, 241, 242, 243, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 0, 257,
	258, 259, 261, 0, 262, 263, 266, 267, 268, 269,
	0, 271, 0, 0, 272, 273, 274, 0, 0, 275,
	276, 277, 278, 279, 280, 283, 0, 285, 286, 287,
	288, 289, 290, 291, 521, 293, 294, 295, 296, 297,
	298, 299, 0, 0, 300, 302, 303, 0, 0, 0,
	609, 318, 319, 320, 321, 322, 323, 324, 326, 0,
	328, 329, 330, 0, 331, 332, 333, 334, 0, 335,
	336, 337, 338, 339, 341, 344, 345, 346, 347, 0,
	350, 351, 352, 353, 354, 355, 356, 358, 359, 360,
	362, 363, 364, 522, 365, 366, 367, 368, 0, 370,
	371, 523, 373, 374, 376, 377, 378, 379, 380, 381,
	538, 0, 383, 1946, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 393, 394, 395, 398, 399, 400, 402,
	403, 0, 404, 405, 0, 407, 408, 612, 410, 411,
	412, 413, 414, 0, 539, 415, 0, 416, 0, 417,
	418, 419, 420, 421, 422, 423, 425, 0, 0, 427,
	428, 429, 431, 432, 433, 434, 437, 438, 439, 440,
	441, 0, 442, 444, 446, 524, 0, 0, 686, 0,
	0, 0, 0, 0, 0, 447, 448, 0, 315, 309,
	265, 307, 308, 312, 313, 316, 141, 0, 158, 594,
	0, 207, 244, 0, 0, 0, 304, 0, 357, 361,
	0, 0, 0, 0, 0, 0, 215, 0, 599, 0,
	605, 0, 611, 0, 426, 0, 601, 602, 607, 146,
	685, 449, 520, 0, 0, 0, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	603, 600, 604, 610, 598, 608, 595, 606, 0, 348,
	282, 0, 0, 375, 153, 199, 186, 228, 270, 382,
	0, 0, 260, 430, 195, 284, 0, 174, 317, 0,
	406, 281, 0, 389, 409, 0, 301, 180, 340, 396,
	397, 592, 597, 0, 613, 0, 184, 185, 306, 166,
	314, 0, 0, 369, 327, 325, 3389, 292, 349, 0,
	0, 0, 214, 0, 209, 305, 445, 172, 424, 343,
	310, 264, 372, 401, 211, 196, 197, 240, 342, 230,
	182, 435, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 231, 0, 0, 443, 688, 678, 670, 671, 672,
	673, 674, 675, 0, 690, 691, 692, 693, 694, 436,
	684, 0, 669, 676, 677, 679, 0, 131, 132, 133,
	134, 135, 136, 137, 138, 139, 140, 142, 0, 143,
	144, 145, 147, 148, 149, 591, 150, 151, 152, 155,
	156, 157, 159, 519, 160, 161, 162, 163, 164, 165,
	0, 593, 167, 168, 169, 170, 171, 173, 175, 176,
	177, 178, 179, 181, 183, 0, 0, 0, 596, 0,
	0, 0, 187, 188, 189, 190, 191, 192, 0, 193,
	194, 198, 200, 201, 202, 203, 204, 205, 208, 0,
	210, 212, 0, 213, 216, 0, 217, 218, 219, 220,
	221, 222, 223, 224, 0, 225, 0, 226, 227, 229,
	0, 232, 233, 234, 235, 236, 0, 237, 0, 0,
	238, 239, 241, 242, 243, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 0, 257, 258,
	259, 261, 0, 262, 263, 266, 267, 268, 269, 0,
	271, 0, 0, 272, 273, 274, 0, 0, 275, 276,
	277, 278, 279, 280, 283, 0, 285, 286, 287, 288,
	289, 290, 291, 521, 293, 294, 295, 296, 297, 298,
	299, 0, 0, 300, 302, 303, 0, 0, 0, 609,
	318, 319, 320, 321, 322, 323, 324, 326, 0, 328,
	329, 330, 0, 331, 332, 333, 334, 0, 335, 336,
	337, 338, 339, 341, 344, 345, 346, 347, 0, 350,
	351, 352, 353, 354, 355, 356, 358, 359, 360, 362,
	363, 364, 522, 365, 366, 367, 368, 0, 370, 371,
	523, 373, 374, 376, 377, 378, 379, 380, 381, 538,
	0, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 393, 394, 395, 398, 399, 400, 402, 403,
	0, 404, 405, 0, 407, 408, 612, 410, 411, 412,
	413, 414, 0, 539, 415, 0, 416, 0, 417, 418,
	419, 420, 421, 422, 423, 425, 0, 0, 427, 428,
	429, 431, 432, 433, 434, 437, 438, 439, 440, 441,
	0, 442, 444, 446, 524, 0, 0, 686, 0, 0,
	0, 0, 0, 0, 447, 448, 0, 315, 309, 265,
	307, 308, 312, 313, 316, 141, 0, 158, 594, 0,
	207, 244, 0, 0, 0, 304, 0, 357, 361, 0,
	0, 0, 0, 0, 0, 215, 0, 599, 0, 605,
	0, 611, 0, 426, 0, 601, 602, 607, 146, 685,
	449, 520, 0, 0, 0, 311, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 603,
	600, 604, 610, 598, 608, 595, 606, 0, 348, 282,
	0, 0, 375, 153, 199, 186, 228, 270, 382, 0,
	0, 260, 430, 195, 284, 0, 174, 317, 0, 406,
	281, 0, 389, 409, 0, 301, 180, 340, 396, 397,
	592, 597, 0, 613, 0, 184, 185, 306, 166, 314,
	0, 0, 369, 327, 325, 3101, 292, 349, 0, 0,
	0, 214, 0, 209, 305, 445, 172, 424, 343, 310,
	264, 372, 401, 211, 196, 197, 240, 342, 230, 182,
	435, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	231, 0, 0, 443, 688, 678, 670, 671, 672, 673,
	674, 675, 0, 690, 691, 692, 693, 694, 436, 684,
	0, 669, 676, 677, 679, 0, 131, 132, 133, 134,
	135, 136, 137, 138, 139, 140, 142, 0, 143, 144,
	145, 147, 148, 149, 591, 150, 151, 152, 155, 156,
	157, 159, 519, 160, 161, 162, 163, 164, 165, 0,
	593, 167, 168, 169, 170, 171, 173, 175, 176, 177,
	178, 179, 181, 183, 0, 0, 0, 596, 0, 0,
	0, 187, 188, 189, 190, 191, 192, 0, 193, 194,
	198, 200, 201, 202, 203, 204, 205, 208, 0, 210,
	212, 0, 213, 216, 0, 217, 218, 219, 220, 221,
	222, 223, 224, 0, 225, 0, 226, 227, 229, 0,
	232, 233, 234, 235, 236, 0, 237, 0, 0, 238,
	239, 241, 242, 243, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 0, 257, 258, 259,
	261, 0, 262, 263, 266, 267, 268, 269, 0, 271,
	0, 0, 272, 273, 274, 0, 0, 275, 276, 277,
	278, 279, 280, 283, 0, 285, 286, 287, 288, 289,
	290, 291, 521, 293, 294, 295, 296, 297, 298, 299,
	0, 0, 300, 302, 303, 0, 0, 0, 609, 318,
	319, 320, 321, 322, 323, 324, 326, 0, 328, 329,
	330, 0, 331, 332, 333, 334, 0, 335, 336, 337,
	338, 339, 341, 344, 345, 346, 347, 0, 350, 351,
	352, 353, 354, 355, 356, 358, 359, 360, 362, 363,
	364, 522, 365, 366, 367, 368, 0, 370, 371, 523,
	373, 374, 376, 377, 378, 379, 380, 381, 538, 0,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 393, 394, 395, 398, 399, 400, 402, 403, 0,
	404, 405, 0, 407, 408, 612, 410, 411, 412, 413,
	414, 0, 539, 415, 0, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 425, 0, 0, 427, 428, 429,
	431, 432, 433, 434, 437, 438, 439, 440, 441, 0,
	442, 444, 446, 524, 0, 0, 686, 0, 0, 0,
	0, 0, 0, 447, 448, 0, 315, 309, 265, 307,
	308, 312, 313, 316, 141, 0, 158, 594, 0, 207,
	244, 0, 0, 0, 304, 0, 357, 361, 0, 0,
	0, 0, 0, 0, 215, 0, 599, 0, 605, 0,
	611, 0, 426, 0, 601, 602, 607, 146, 685, 449,
	520, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 603, 600,
	604, 610, 598, 608, 595, 606, 0, 348, 282, 0,
	0, 375, 153, 199, 186, 228, 270, 382, 0, 0,
	260, 430, 195, 284, 0, 174, 317, 0, 406, 281,
	0, 389, 409, 0, 301, 180, 340, 396, 397, 592,
	597, 0, 613, 0, 184, 185, 306, 166, 314, 0,
	0, 369, 327, 325, 0, 292, 349, 0, 0, 0,
	214, 0, 209, 305, 445, 172, 424, 343, 310, 264,
	372, 401, 211, 196, 197, 240, 342, 230, 182, 435,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 231,
	0, 0, 443, 688, 678, 670, 671, 672, 673, 674,
	675, 0, 690, 691, 692, 693, 694, 436, 684, 0,
	669, 676, 677, 679, 0, 131, 132, 133, 134, 135,
	136, 137, 138, 139, 140, 142, 0, 143, 144, 145,
	147, 148, 149, 591, 150, 151, 152, 155, 156, 157,
	159, 519, 160, 161, 162, 163, 164, 165, 0, 593,
	167, 168, 169, 170, 171, 173, 175, 176, 177, 178,
	179, 181, 183, 0, 0, 0, 596, 0, 0, 0,
	187, 188, 189, 190, 191, 192, 0, 193, 194, 198,
	200, 201, 202, 203, 204, 205, 208, 0, 210, 212,
	0, 213, 216, 0, 217, 218, 219, 220, 221, 222,
	223, 224, 0, 225, 0, 226, 227, 229, 0, 232,
	233, 234, 235, 236, 0, 237, 0, 0, 238, 239,
	241, 242, 243, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 0, 257, 258, 259, 261,
	0, 262, 263, 266, 267, 268, 269, 0, 271, 0,
	0, 272, 273, 274, 0, 0, 275, 276, 277, 278,
	279, 280, 283, 0, 285, 286, 287, 288, 289, 290,
	291, 521, 293, 294, 295, 296, 297, 298, 299, 0,
	0, 300, 302, 303, 0, 0, 0, 609, 318, 319,
	320, 321, 322, 323, 324, 326, 0, 328, 329, 330,
	0, 331, 332, 333, 334, 0, 335, 336, 337, 338,
	339, 341, 344, 345, 346, 347, 0, 350, 351, 352,
	353, 354, 355, 356, 358, 359, 360, 362, 363, 364,
	522, 365, 366, 367, 368, 0, 370, 371, 523, 373,
	374, 376, 377, 378, 379, 380, 381, 538, 0, 383,
	1946, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	393, 394, 395, 398, 399, 400, 402, 403, 0, 404,
	405, 0, 407, 408, 612, 410, 411, 412, 413, 414,
	0, 539, 415, 0, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 425, 0, 0, 427, 428, 429, 431,
	432, 433, 434, 437, 438, 439, 440, 441, 0, 442,
	444, 446, 524, 0, 0, 686, 0, 0, 0, 0,
	0, 0, 447, 448, 0, 315, 309, 265, 307, 308,
	312, 313, 316, 141, 0, 158, 594, 0, 207, 244,
	0, 0, 0, 304, 0, 357, 361, 0, 0, 0,
	0, 0, 0, 215, 0, 599, 0, 605, 0, 611,
	0, 426, 0, 601, 602, 607, 146, 685, 449, 520,
	0, 0, 0, 311, 0, 0, 0, 0, 0, 0,
	0, 0, 154, 0, 0, 0, 0, 603, 600, 604,
	610, 598, 608, 595, 606, 0, 348, 282, 0, 0,
	375, 153, 199, 186, 228, 270, 382, 0, 0, 260,
	430, 195, 284, 0, 174, 317, 0, 406, 281, 0,
	389, 409, 0, 301, 180, 340, 396, 397, 592, 597,
	0, 613, 0, 184, 185, 306, 166, 314, 0, 0,
	369, 327, 325, 0, 292, 349, 0, 0, 0, 214,
	0, 209, 305, 445, 172, 424, 343, 310, 264, 372,
	401, 211, 196, 197, 240, 342, 230, 182, 435, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 231, 0,
	0, 443, 688, 678, 670, 671, 672, 673, 674, 675,
	0, 690, 691, 692, 693, 694, 436, 684, 0, 669,
	676, 677, 679, 0, 131, 132, 133, 134, 135, 136,
	137, 138, 139, 140, 142, 0, 143, 144, 145, 147,
	148, 149, 591, 150, 151, 152, 155, 156, 157, 159,
	519, 160, 161, 162, 163, 164, 165, 0, 593, 167,
	168, 169, 170, 171, 173, 175, 176, 177, 178, 179,
	181, 183, 0, 0, 0, 596, 0, 0, 0, 187,
	188, 189, 190, 191, 192, 0, 193, 194, 198, 200,
	201, 202, 203, 204, 205, 208, 0, 210, 212, 0,
	213, 216, 0, 217, 218, 219, 220, 221, 222, 223,
	224, 0, 225, 0, 226, 227, 229, 0, 232, 233,
	234, 235, 236, 0, 237, 0, 0, 238, 239, 241,
	242, 243, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 0, 257, 258, 259, 261, 0,
	262, 263, 266, 267, 268, 269, 0, 271, 0, 0,
	272, 273, 274, 0, 0, 275, 276, 277, 278, 279,
	280, 283, 0, 285, 286, 287, 288, 289, 290, 291,
	521, 293, 294, 295, 296, 297, 298, 299, 0, 0,
	300, 302, 303, 0, 0, 0, 609, 318, 319, 320,
	321, 322, 323, 324, 326, 0, 328, 329, 330, 0,
	331, 332, 333, 334, 0, 335, 336, 337, 338, 339,
	341, 344, 345, 346, 347, 0, 350, 351, 352, 353,
	354, 355, 356, 358, 359, 360, 362, 363, 364, 522,
	365, 366, 367, 368, 0, 370, 371, 523, 373, 374,
	376, 377, 378, 379, 380, 381, 538, 0, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 393,
	394, 395, 398, 399, 400, 402, 403, 0, 404, 405,
	0, 407, 408, 612, 410, 411, 412, 413, 414, 0,
	539, 415, 0, 416, 0, 417, 418, 419, 420, 421,
	422, 423, 425, 0, 0, 427, 428, 429, 431, 432,
	433, 434, 437, 438, 439, 440, 441, 0, 442, 444,
	446, 524, 0, 0, 686, 0, 0, 0, 0, 0,
	0, 447, 448, 0, 315, 309, 265, 307, 308, 312,
	313, 316, 141, 0, 158, 594, 0, 207, 696, 0,
	0, 0, 304, 0, 357, 361, 0, 0, 0, 0,
	0, 0, 215, 0, 599, 0, 605, 0, 611, 0,
	426, 0, 601, 602, 607, 146, 685, 449, 520, 0,
	0, 0, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 603, 600, 604, 610,
	598, 608, 595, 606, 0, 348, 282, 0, 0, 375,
	153, 199, 186, 228, 270, 382, 0, 0, 260, 430,
	195, 284, 0, 174, 317, 0, 406, 281, 0, 389,
	409, 0, 301, 180, 340, 396, 397, 592, 597, 0,
	613, 0, 184, 185, 306, 166, 314, 0, 0, 369,
	327, 325, 0, 292, 349, 0, 0, 0, 214, 0,
	209, 305, 445, 172, 424, 343, 310, 264, 372, 401,
	211, 196, 197, 240, 342, 230, 182, 435, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 231, 0, 0,
	443, 688, 678, 670, 671, 672, 673, 674, 675, 0,
	690, 691, 692, 693, 694, 436, 684, 0, 669, 676,
	677, 679, 0, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 142, 0, 143, 144, 145, 147, 148,
	149, 591, 150, 151, 152, 155, 156, 157, 159, 519,
	160, 161, 162, 163, 164, 165, 0, 593, 167, 168,
	169, 170, 171, 173, 175, 176, 177, 178, 179, 181,
	183, 0, 0, 0, 596, 0, 0, 0, 187, 188,
	189, 190, 191, 192, 0, 193, 194, 198, 200, 201,
	202, 203, 204, 205, 208, 0, 210, 212, 0, 213,
	216, 0, 217, 218, 219, 220, 221, 222, 223, 224,
	0, 225, 0, 226, 227, 229, 0, 232, 233, 234,
	235, 236, 0, 237, 0, 0, 238, 239, 241, 242,
	243, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 0, 257, 258, 259, 261, 0, 262,
	263, 266, 267, 268, 269, 0, 271, 0, 0, 272,
	273, 274, 0, 0, 275, 276, 277, 278, 279, 280,
	283, 0, 285, 286, 287, 288, 289, 290, 291, 521,
	293, 294, 295, 296, 297, 298, 299, 0, 0, 300,
	302, 303, 0, 0, 0, 609, 318, 319, 320, 321,
	322, 323, 324, 326, 0, 328, 329, 330, 0, 331,
	332, 333, 334, 0, 335, 336, 337, 338, 339, 341,
	344, 345, 346, 347, 0, 350, 351, 352, 353, 354,
	355, 356, 358, 359, 360, 362, 363, 364, 522, 365,
	366, 367, 368, 0, 370, 371, 523, 373, 374, 376,
	377, 378, 379, 380, 381, 538, 0, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 393, 394,
	395, 398, 399, 400, 402, 403, 0, 404, 405, 0,
	407, 408, 612, 410, 411, 412, 413, 414, 0, 539,
	415, 0, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 425, 0, 0, 427, 428, 429, 431, 432, 433,
	434, 437, 438, 439, 440, 441, 0, 442, 444, 446,
	524, 0, 0, 686, 0, 0, 0, 0, 0, 0,
	447, 448, 0, 315, 309, 265, 307, 308, 312, 313,
	316, 141, 0, 158, 594, 0, 207, 660, 0, 0,
	0, 304, 0, 357, 361, 0, 0, 0, 0, 0,
	0, 215, 0, 599, 0, 605, 0, 611, 0, 426,
	0, 601, 602, 607, 146, 685, 449, 520, 0, 0,
	0, 311, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 0, 0, 603, 600, 604, 610, 598,
	608, 595, 606, 0, 348, 282, 0, 0, 375, 153,
	199, 186, 228, 270, 382, 0, 0, 260, 430, 195,
	284, 0, 174, 317, 0, 406, 281, 0, 389, 409,
	0, 301, 180, 340, 396, 397, 592, 597, 0, 613,
	0, 184, 185, 306, 166, 314, 0, 0, 369, 327,
	325, 0, 292, 349, 0, 0, 0, 214, 0, 209,
	305, 445, 172, 424, 343, 310, 264, 372, 401, 211,
	196, 197, 240, 342, 230, 182, 435, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 231, 0, 0, 443,
	688, 678, 670, 671, 672, 673, 674, 675, 0, 690,
	691, 692, 693, 694, 436, 684, 0, 669, 676, 677,
	679, 0, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 142, 0, 143, 144, 145, 147, 148, 149,
	591, 150, 151, 152, 155, 156, 157, 159, 519, 160,
	161, 162, 163, 164, 165, 0, 593, 167, 168, 169,
	170, 171, 173, 175, 176, 177, 178, 179, 181, 183,
	0, 0, 0, 596, 0, 0, 0, 187, 188, 189,
	190, 191, 192, 0, 193, 194, 198, 200, 201, 202,
	203, 204, 205, 208, 0, 210, 212, 0, 213, 216,
	0, 217, 218, 219, 220, 221, 222, 223, 224, 0,
	225, 0, 226, 227, 229, 0, 232, 233, 234, 235,
	236, 0, 237, 0, 0, 238, 239, 241, 242, 243,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 0, 257, 258, 259, 261, 0, 262, 263,
	266, 267, 268, 269, 0, 271, 0, 0, 272, 273,
	274, 0, 0, 275, 276, 277, 278, 279, 280, 283,
	0, 285, 286, 287, 288, 289, 290, 291, 521, 293,
	294, 295, 296, 297, 298, 299, 0, 0, 300, 302,
	303, 0, 0, 0, 609, 318, 319, 320, 321, 322,
	323, 324, 326, 0, 328, 329, 330, 0, 331, 332,
	333, 334, 0, 335, 336, 337, 338, 339, 341, 344,
	345, 346, 347, 0, 350, 351, 352, 353, 354, 355,
	356, 358, 359, 360, 362, 363, 364, 522, 365, 366,
	367, 368, 0, 370, 371, 523, 373, 374, 376, 377,
	378, 379, 380, 381, 538, 0, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 393, 394, 395,
	398, 399, 400, 402, 403, 0, 404, 405, 0, 407,
	408, 612, 410, 411, 412, 413, 414, 0, 539, 415,
	0, 416, 0, 417, 418, 419, 420, 421, 422, 423,
	425, 0, 0, 427, 428, 429, 431, 432, 433, 434,
	437, 438, 439, 440, 441, 0, 442, 444, 446, 524,
	0, 0, 686, 0, 0, 0, 0, 0, 0, 447,
	448, 0, 315, 309, 265, 307, 308, 312, 313, 316,
	141, 0, 158, 594, 0, 207, 244, 0, 0, 0,
	304, 0, 357, 361, 0, 0, 0, 0, 0, 0,
	215, 0, 599, 0, 605, 0, 611, 0, 426, 0,
	601, 602, 607, 146, 0, 449, 520, 0, 0, 0,
	311, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 603, 600, 604, 610, 598, 608,
	595, 606, 0, 348, 282, 0, 0, 375, 153, 199,
	186, 228, 270, 382, 0, 0, 260, 430, 195, 284,
	0, 174, 317, 0, 406, 281, 0, 389, 409, 0,
	301, 180, 340, 396, 397, 592, 597, 0, 613, 0,
	184, 185, 306, 166, 314, 0, 0, 369, 327, 325,
	0, 292, 349, 0, 0, 0, 214, 0, 209, 305,
	445, 172, 424, 343, 310, 264, 372, 401, 211, 196,
	197, 240, 342, 230, 182, 435, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 231, 0, 0, 443, 0,
	0, 0, 0, 0, 0, 0, 206, 0, 0, 0,
	0, 0, 0, 436, 0, 0, 0, 0, 0, 0,
	0, 131, 132, 133, 134, 135, 136, 137, 138, 139,
	140, 142, 0, 143, 144, 145, 147, 148, 149, 591,
	150, 151, 152, 155, 156, 157, 159, 519, 160, 161,
	162, 163, 164, 165, 0, 593, 167, 168, 169, 170,
	171, 173, 175, 176, 177, 178, 179, 181, 183, 0,
	0, 0, 596, 0, 0, 0, 187, 188, 189, 190,
	191, 192, 0, 193, 194, 198, 200, 201, 202, 203,
	204, 205, 208, 0, 210, 212, 0, 213, 216, 0,
	217, 218, 219, 220, 221, 222, 223, 224, 0, 225,
	0, 226, 227, 229, 0, 232, 233, 234, 235, 236,
	0, 237, 0, 0, 238, 239, 241, 242, 243, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 0, 257, 258, 259, 261, 0, 262, 263, 266,
	267, 268, 269, 0, 271, 0, 0, 272, 273, 274,
	0, 0, 275, 276, 277, 278, 279, 280, 283, 0,
	285, 286, 287, 288, 289, 290, 291, 521, 293, 294,
	295, 296, 297, 298, 299, 0, 0, 300, 302, 303,
	0, 0, 0, 609, 318, 319, 320, 321, 322, 323,
	324, 326, 0, 328, 329, 330, 0, 331, 332, 333,
	334, 0, 335, 336, 337, 338, 339, 341, 344, 345,
	346, 347, 0, 350, 351, 352, 353, 354, 355, 356,
	358, 359, 360, 362, 363, 364, 522, 365, 366, 367,
	368, 0, 370, 371, 523, 373, 374, 376, 377, 378,
	379, 380, 381, 538, 0, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 393, 394, 395, 398,
	399, 400, 402, 403, 0, 404, 405, 0, 407, 408,
	612, 410, 411, 412, 413, 414, 0, 539, 415, 0,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 425,
	0, 0, 427, 428, 429, 431, 432, 433, 434, 437,
	438, 439, 440, 441, 0, 442, 444, 446, 524, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 447, 448,
	0, 315, 309, 265, 307, 308, 312, 313, 316,
}

var yyPact = [...]int32{
	1135, -1000, -95, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1558, 444, 868, 6638, 6637, 48179, 38546,
	-1000, 1620, 514, 2037, 33476, -101, 47672, 39560, 109, 1135,
	1760, 33476, 1813, 1759, 514, 39560, -1000, 651, 977, 718,
	2051, -1000, -1000, 367, 363, -1000, -1000, 32969, 38039, 47165,
	46658, 246, 1279, 28930, 39560, 39560, 39560, 39560, 28930, 25887,
	909, 1086, 46151, 28930, 39560, 28930, 39560, 39560, 39560, 39560,
	39560, 349, 25887, 25887, 39560, 39560, 1587, 39560, -1000, 45644,
	45137, 44630, 52109, 51620, 2149, -1000, -1000, -1000, 245, 1265,
	-1000, -1000, -1000, 1585, 839, 339, -1000, 908, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 44123, 37532, 859, -1000, -1000,
	409, 1937, 2221, 2221, 2046, 27916, 194, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1936, 920, 1138, -56, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1, -6, 1620, 12051,
	12051, -1000, 1756, -1000, -84, -1000, -59, 28423, -1000, -1000,
	-1000, 133, -102, 39560, -1000, 130, -1000, -102, 14116, -1000,
	39560, 1535, 43616, 33476, 33476, -7, -1000, 15, 43109, 39560,
	244, 2148, 28930, 28930, 39560, 335, 827, -1000, -1000, -1000,
	-1000, 5440, 2138, 1990, 4611, 2132, 1989, 6449, 2130, 6410,
	2128, 37025, 36518, 1318, 708, 129, -1000, -59, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 702, -91, 700, 699, 697, 688,
	129, 680, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 39560, 39560, 39560, 1754, 2121, 676, 671, 664, 657,
	652, 648, 1753, 1752, 39560, 646, 643, 633, 631, 745,
	627, 2120, 209, -1000, 2119, 243, -1000, 1741, 2117, 227,
	2113, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -75, -1000,
	-1000, -1000, -1000, -1000, 128, 1189, 127, 127, 127, -1000,
	-1000, -1000, -1000, -1000, -27, -37, -1000, -1000, 1181, 126,
	1181, 1181, -1000, 1192, 1181, 227, 2112, 42602, -1000, 1317,
	-1000, 662, -1000, -1000, -1000, -1000, 1131, -1000, 2175, 26902,
	205, 2221, -1000, 887, 656, -1000, 1074, 1426, 17213, 16697,
	39560, 273, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1091, -1000, 886, -1000, -1000, -1000, 1758, -190, -1000,
	8403, -1000, -1000, 14116, 14116, 14116, 14116, -1000, -1000, -1000,
	11018, -1000, -1000, -59, 125, 13, -1000, -1000, 120, -1000,
	107, -59, -1000, -1000, -1000, -1000, -1000, -1000, 14116, -1000,
	119, -1000, 118, 238, 116, -1000, -59, -1000, 7882, 14116,
	-1000, 39560, 14116, 39560, -102, 2180, 39560, -94, 5852, 428,
	2177, 27409, -1000, 39560, 1641, 1636, 1925, 1806, 39560, 361,
	2075, 15, 39560, 42095, -1000, 112, 112, 1094, 39560, 655,
	-186, -1000, 744, -1000, 747, 740, 29944, 574, 571, 1432,
	351, 1734, 672, 377, 39560, 1096, 39560, 1423, 1924, 43,
	995, 503, -1000, 111, 33476, 391, -186, -1000, 1923, 737,
	39560, 389, -186, 1922, 39560, -186, 654, 39560, 6384, 2109,
	1988, 6290, 2108, 39560, 1921, -1000, -8, -59, 1919, -61,
	9454, 1918, 1917, 1493, 1916, -1000, 1915, 624, 1633, 1622,
	39560, 39560, 1914, 1913, 1908, 1906, 1902, 1897, 39560, 39560,
	622, 1896, 1895, 1894, 1893, 39560, 39560, 39560, 39560, 1304,
	39560, 39560, -1000, -1000, -1000, 39560, 39560, -1000, 39560, 39560,
	51131, -1000, 51131, -1000, -55, 14116, -1000, 2189, -1000, -1000,
	-1000, -1000, 2189, -1000, 1943, 1939, 2189, -1000, 110, -1000,
	2189, -1000, -1000, 1181, 1181, -1000, -1000, 51131, 209, 2107,
	-1000, -1000, -1000, -1000, -1000, 2175, 354, -1000, -1000, 1024,
	-1000, -1000, 759, -1000, -1000, -1000, -1000, -115, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2215, 2210, -1000,
	-1000, -115, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1808, 39560,
	12051, 51131, 14116, 14116, 14116, 14116, 14116, 14116, 14116, 14116,
	14116, 14116, 14116, 14116, 14116, 14116, 1975, -1000, -1000, 14116,
	2084, 14116, 39560, 1933, 14116, 1892, 103, 1889, 9454, -1000,
	107, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 729, 729, 5622, 529, -59, 5700,
	-118, -68, 109, -59, -1000, -1000, -1000, 12568, 14116, 22301,
	-59, 1951, 5852, -1000, 13600, 11535, 1808, 14116, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 4865, -270, -10, -97, -1000,
	1672, -98, 14116, -1000, 14116, 14116, 1975, 14116, 14116, 39560,
	1933, 1892, 103, 1889, 107, 1733, -1000, 1531, 24873, 1600,
	39560, 186, -1000, 145, 39560, -1000, -1000, 1796, 20273, 20273,
	1438, 1438, -1000, -1000, -104, -1000, 30451, 39560, 1422, 2106,
	2019, 105, 1724, 2073, -1000, 6535, 31465, 6191, 668, -1000,
	-1000, 1421, 1161, 39560, 242, 1415, 39560, 39560, 39560, -1000,
	39560, 39560, -1000, 2071, 41588, -1000, 51131, 39560, -1000, 104,
	1684, 208, 202, 1615, 36011, 39560, 41081, 40574, 39560, 494,
	-1000, -1000, 835, 39560, -1000, 9454, 39560, 32462, 392, 381,
	39560, 884, 31955, 39560, 875, -1000, 39560, 487, -1000, -1000,
	25887, -1000, 1521, 861, 9967, 4603, 39560, 39560, 39560, 6240,
	39560, 39560, 6101, 39560, 39560, 5940, -186, 653, 39560, 387,
	-186, 640, 33476, 618, 39560, -1000, 39560, 9454, -1000, 39560,
	39560, 39560, 39560, 39560, 25887, 1888, 39560, 39560, 599, 1723,
	39560, 39560, 39560, 39560, 39560, 39560, 552, 551, 1883, 25887,
	25887, 39560, 39560, 547, 543, 531, 530, 39560, 39560, 209,
	-1000, 243, -1000, 2065, 1722, -1000, 227, -1000, -105, -12,
	-15, 1935, 1891, -19, 14116, -22, -1000, -1000, 227, -1000,
	39560, 1024, -1000, -1000, 499, 665, -1000, 17729, -1000, -1000,
	-1000, -1000, 1783, 20273, -1000, -1000, -1000, -106, -106, -88,
	-88, -88, -1000, 220, 220, 220, 220, 220, 220, 5622,
	4936, -1000, 1980, 3558, 14116, 14116, 1887, 103, 1879, 2178,
	-1000, 1841, -1000, 529, 15664, 15664, -1000, -1000, -1000, 11018,
	14116, -1000, -1000, -1000, 14116, -244, -256, -1000, -1000, -112,
	-23, -1000, -73, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1266, -1000, 14116,
	-1000, -116, -1000, -1000, -120, 14116, 14116, 14116, -1000, 5852,
	2195, -1000, 1783, -117, -1000, 14116, -1000, -1000, 98, -1000,
	1604, -1000, 5852, 1486, 1481, 1231, -1000, -1000, -119, -1000,
	-1000, -1000, -1000, 1796, 27409, 14116, -123, -1000, -59, 1486,
	14632, -157, 1777, 34490, 34490, 21794, -1000, 19766, 34490, 34490,
	34490, -13, 1805, 97, 96, -59, -1000, 1677, 1550, -1000,
	1550, 39560, -1000, -24, -144, -1000, -1000, -1000, -1000, 39560,
	47, 39560, 39560, 2174, 43, 39560, 33476, 2104, 49175, 698,
	6191, -1000, 2221, 27916, 1354, -1000, -1000, 1719, -1000, -1000,
	-1000, -1000, 456, 987, -1000, 896, 475, 475, 39560, -1000,
	39560, 40067, -1000, -124, -1000, -1000, 629, 50642, 48686, -1000,
	709, -1000, -1000, -1000, -75, -1000, 52598, 698, 1977, 1732,
	-1000, -1000, -1000, 1420, -1000, -1000, 668, 15, 39560, -1000,
	-1000, 1878, 1876, 1440, 1287, 2098, -1000, 2070, 403, 424,
	14116, 95, -1000, 2010, 976, 439, 94, 93, 39560, 880,
	1528, -1000, 2097, 2065, 2095, 2065, -1000, -1000, -1000, 35504,
	-1000, -127, -1000, -58, -1000, -1000, -1000, -1000, 39560, 39560,
	39560, 39560, -1000, 454, -1000, -1000, -1000, -1000, 448, -1000,
	860, -1000, -1000, -1000, -1000, -1000, 972, 430, -129, -1000,
	-1000, 9454, 9454, 9454, 2221, -1000, -186, -1000, 689, 1077,
	-1000, -1000, -186, 1875, 1058, -1000, -186, 1869, -1000, 1867,
	-186, 639, 39560, 39560, 5846, 39560, 39560, 39560, 4674, 1866,
	-1000, -1000, -1000, -1000, -1000, -1000, 1865, -1000, -1000, 39560,
	525, 519, 1864, 39560, -1000, -1000, -1000, -1000, -1000, -1000,
	1862, 1861, 39560, -1000, -1000, -1000, -1000, 1860, 1859, 1858,
	1856, -1000, 1852, -1000, -1000, -1000, 39560, -1000, -1000, -1000,
	158, -1000, -1000, 158, -130, -1000, -1000, 209, 205, -1000,
	-1000, -1000, -1000, -1000, 14116, -157, -1000, 14116, 1554, 1479,
	15664, 15664, -1000, 14116, 14116, 14116, 890, -1000, 15664, 15664,
	842, -131, 1112, -59, 4516, -1000, -1000, 134, -1000, -1000,
	22301, 1048, -1000, 14116, 4314, -1000, -1000, -25, 13084, -1000,
	-168, -168, 14116, 14116, -1000, -1000, 135, 5852, 514, -1000,
	-1000, 12051, 443, 514, 425, 39560, -59, 1486, -1000, 5852,
	144, 39560, -1000, 5852, 1412, 20273, 1686, 1653, 20273, 1711,
	1623, 1623, 1623, -1000, -1000, -1000, 39560, 92, -1000, 34490,
	34490, 34490, 34490, 26394, -26, 1777, -1000, -1000, -1000, -1000,
	1391, 91, 19259, 14116, -59, 14116, 645, -1000, -1000, -1000,
	1621, -1000, 934, 30451, -1000, 681, 30958, 47, 345, 514,
	-1000, -137, 1615, 39560, 6191, 90, 1709, -1000, -75, -1000,
	-1000, 1147, 14116, -1000, -1000, -172, -1000, -179, 311, 1974,
	982, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1137,
	413, -1000, 48686, 14116, 14116, 50642, -1000, 50642, -1000, -1000,
	-85, -91, -1000, 39560, 668, 39560, 1699, 2019, 86, 39560,
	39560, -1000, 1596, -1000, -1000, -1000, 39560, 2093, 1103, -1000,
	34997, -1000, 1615, 4072, 39560, 1142, -1000, 1912, 39560, 39560,
	-1000, 39560, 20780, -1000, -1000, 1260, 1145, 43, 1007, 829,
	276, -1000, -1000, 645, 374, 1142, 39560, -1000, 39560, -1000,
	-1000, -1000, -1000, -1000, 9454, 10480, 9454, -1000, -1000, -1000,
	-1000, -1000, -1000, 427, 39560, -1000, -1000, 9967, -1000, -1000,
	-1000, -1000, -1000, 39560, 39560, 39560, 385, 1787, 39560, 382,
	1779, 39560, 39560, 39560, 39560, -1000, 1849, -186, 630, 1032,
	-1000, 1848, -186, 628, 39560, 39560, -1000, 1847, 1843, 39560,
	517, 39560, 39560, -1000, 39560, 39560, 39560, 39560, 39560, 2065,
	-1000, -1000, -1000, -1000, 5852, 1197, 14116, 14116, 735, 522,
	968, 1197, 500, 14116, 51131, 15664, 15664, 15664, 15664, 15664,
	15664, 15664, 15664, 15664, 15664, 15664, 15664, 717, 717, 14116,
	-1000, 14116, -1000, -1000, -1000, -1000, 5852, 14116, -1000, 14116,
	-1000, -29, -31, 14116, -32, 5852, 5852, -1000, -33, -190,
	1448, 20780, 1431, -1000, -1000, 1531, -1000, -1000, 14116, -1000,
	39560, 1777, 20273, 20273, 1664, 1652, 20273, -1000, -1000, -1000,
	-1000, 85, 39560, -1000, -1000, -1000, -1000, 34490, -1000, 28930,
	1356, 82, -204, 3974, 3925, 72, -1000, -1000, 645, 1243,
	-1000, 681, 81, -1000, 1004, 1611, -1000, 1778, -141, -1000,
	-1000, -1000, 2032, 1440, 30451, 39560, 1409, 2021, 2019, 79,
	1708, 698, 52598, 1967, -1000, 5852, 2221, 1352, 51131, 930,
	-1000, -1000, -1000, 5852, 5852, -1000, -1000, 275, -83, 527,
	-1000, -239, 39560, 2172, 39560, -1000, -1000, 1837, -1000, 39560,
	183, -1000, 33983, -1000, -1000, -1000, -142, -1000, 539, -1000,
	1053, 950, -1000, -1000, -143, 1142, -145, -155, -1000, 2029,
	436, 2011, 14116, 1966, 2140, 2085, -1000, -1000, -1000, 1293,
	1964, 2168, 477, -1000, -1000, -1000, 14116, 51131, 475, -1000,
	1122, 1774, -1000, 475, 475, 1773, 830, 645, 645, -1000,
	-1000, 1293, -1000, 3873, 51131, 475, 477, 2065, 2065, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 78, 2215,
	2210, 142, -1000, -1000, -1000, -1000, 1836, 1830, 39560, 25887,
	-1000, 39560, 25887, -1000, -1000, -1000, 1826, 39560, 39560, 39560,
	378, 1772, 39560, 39560, 39560, -1000, -1000, 39560, 39560, -1000,
	1825, -1000, -1000, -1000, -1000, -1000, -1000, 2065, -1000, 1197,
	1197, 14116, 14116, 14116, 1197, -1000, -156, -156, -154, -154,
	-154, -1000, 717, 717, 717, 717, 717, 717, 1197, 1197,
	5852, -1000, -1000, -1000, -1000, 1565, 1475, -162, -1000, 39560,
	1230, 5852, -1000, -1000, -1000, 1664, -1000, 73, 14116, 20273,
	-1000, 39560, -165, -1000, -166, -1000, 2167, 1405, 18752, 15148,
	14116, -1000, -1000, 1206, 1526, -1000, 2077, 2077, 1573, -1000,
	1568, 9454, 72, 2221, 1611, 39560, 3226, 3226, 1358, 39560,
	39560, -1000, 30958, 3445, 176, 681, -34, 47, 39560, -1000,
	637, 2165, 20780, 33476, -1000, -173, -1000, 50642, -1000, 926,
	267, -1000, 266, -1000, -1000, -1000, 259, 1351, 366, 1804,
	514, -176, 71, 65, 64, -1000, -1000, 62, -1000, -1000,
	1142, 984, -1000, -1000, -1000, -1000, -1000, 984, 634, 984,
	20780, 22832, -1000, 39560, 39560, -1000, 3768, -1000, 2089, 2088,
	-1000, -1000, 2004, -1000, 60, -1000, -1000, -1000, 2189, 2189,
	5852, -1000, -1000, -1000, -1000, -1000, 475, -1000, -1000, -1000,
	39560, 39560, 475, 475, 2163, 2015, -1000, -1000, -1000, -1000,
	22301, 10480, 39560, 39560, 761, 168, -1000, 761, 166, 39560,
	-1000, -1000, 1824, 39560, 25887, -1000, -1000, 1823, -1000, -1000,
	39560, -1000, 1197, 1197, 1197, -35, 1529, 1571, 1519, -1000,
	1783, 20780, -1000, 514, -1000, 39560, 5852, -1000, -178, -1000,
	-13, 28930, -1000, 58, 39560, 1770, 18245, 1275, -180, -1000,
	235, 15664, 3723, 1247, -1000, -1000, 1459, 14116, 1455, -1000,
	1462, -1000, -1000, -1000, 2156, 2156, -1000, -1000, 2156, 2156,
	1389, 2221, -183, -1000, 16180, 1783, -1000, 1358, -184, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1700, 43, 196, -1000, 57, -1000, -1000, 39560,
	-1000, -1000, 39560, 1278, -1000, 2039, 201, 56, 15664, 39560,
	1293, -1000, 1035, -1000, 1611, 934, 681, 47, 191, 169,
	-18, 514, -191, 1615, 52598, 6191, -1000, -1000, -1000, -99,
	-1000, -1000, 51131, -1000, 1950, 1056, 366, -1000, 831, -1000,
	-1000, -1000, 39560, 2021, 2019, 29437, 14116, 14116, 3445, 9454,
	2027, 46, 2027, 39560, 2027, -1000, -1000, 45, 1545, 43,
	-1000, 2011, -1000, -1000, -1000, 14116, -1000, -1000, -1000, -1000,
	-1000, 993, 1614, 39560, -36, -1000, -1000, -1000, -1000, -1000,
	373, 25887, -1000, 372, -1000, 39560, 761, 161, 39560, -1000,
	-1000, -1000, 39560, 1553, 1533, 27409, -1000, -1000, -1000, -194,
	-1000, -1000, -1000, 39560, -196, -1000, 50153, -1000, 1275, 1770,
	-1000, -1000, 15148, -207, 9454, 863, 1357, 39560, 39560, 1518,
	5852, 1483, 1769, 2221, -1000, 2221, 2221, 2221, 24366, 1962,
	23859, -1000, -1000, 9454, -1000, -1000, -1000, -1000, -1000, 25380,
	-1000, 1700, 39560, -1000, 364, 1115, -1000, -1000, 21287, 1067,
	-1000, -1000, -1000, 2027, 2027, 14116, 863, 15, 2162, -1000,
	-1000, 3445, 1358, 681, 1611, 1440, -1000, 189, 178, 2021,
	983, 39, -1000, 698, -1000, -1000, 1039, 38, 419, -1000,
	-1000, 2156, -1000, -1000, 1097, -1000, -1000, 2155, -197, -1000,
	2189, -199, -201, -202, -1000, 1613, 37, 39560, 1613, 15,
	1613, 22301, 163, -1000, -1000, 1545, -1000, 3659, 25, -1000,
	14116, -1000, -1000, 39560, -1000, 39560, -1000, -1000, 370, -1000,
	151, 1768, 1764, 177, 2153, -214, -1000, 51131, -1000, 39560,
	1495, 1386, -1000, -1000, 18245, -1000, 1404, 14116, -1000, -1000,
	-1000, -1000, 1446, 1516, -1000, -1000, 1443, 416, 1488, -1000,
	-1000, -1000, -1000, -239, -1000, 23352, -239, -1000, -1000, -215,
	-1000, -1000, 364, -1000, -1000, 39560, 1083, -216, -1000, 436,
	2011, 14116, -1000, 1960, 1613, 1613, 1285, 849, 190, 1700,
	1611, 1358, 681, -1000, -1000, -1000, 2039, 34, 20780, -1000,
	833, 14116, -1000, -1000, -1000, 39560, 1055, 514, -1000, 29437,
	-1000, -1000, 1822, -1000, 9454, -1000, 970, -1000, 9454, -217,
	-1000, 849, 1783, -48, -1000, 1576, 163, -1000, -1000, 2767,
	5852, 761, 761, 39560, 39560, 39560, 39560, -1000, -1000, 39560,
	-1000, 39560, 2015, -1000, 1495, -1000, 15664, 15664, 1956, -1000,
	15664, -1000, 1356, 32, -237, -1000, 2152, -1000, 27409, -1000,
	-1000, 1531, 39560, 1594, 29, -1000, -1000, -239, -1000, -1000,
	25380, -1000, -1000, -1000, 1368, 1366, -1000, 21287, 39560, 39560,
	1173, -1000, -1000, 810, 1705, 793, 25, 14116, 364, 1358,
	1700, 1611, 2019, 20780, -229, 28930, -1000, -1000, 602, -1000,
	-1000, 451, 2021, -1000, 24, -1000, 1142, 368, -232, -1000,
	139, -1000, 1142, 1705, -1000, -1000, -1000, -1000, -1000, 1019,
	-1000, -1000, -1000, 761, 1631, 140, 132, -1000, -1000, -1000,
	-1000, 863, 863, -1000, 863, 1399, 39053, 14116, 9454, -259,
	1227, -236, -1000, 14116, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2011, -1000, 936, -1000, 1703, 1701, 1539, -1000, -1000,
	-1000, -1000, 555, -1000, 1700, 364, 1358, 364, -242, -1000,
	983, 23, -1000, 1950, -1000, 14116, 39560, -1000, 9454, 10480,
	-1000, 1142, -1000, -1000, -1000, 2203, 39560, 39560, 39560, 39560,
	-243, -1000, 49664, 1362, -1000, -1000, 1589, 1502, -248, 39560,
	-1000, -1000, 1492, -1000, 1504, 1263, 1263, 386, 364, -1000,
	1700, 1783, -1000, 20780, 2039, 8941, 1038, -253, -1000, -1000,
	-1000, 1142, 2002, -1000, -1000, -1000, -274, 1424, 39053, 1377,
	658, 2211, -1000, -1000, -1000, 1531, -1000, -1000, -1000, 1165,
	-1000, -1000, 1965, -1000, -1000, -1000, 364, -1000, -1000, 2019,
	-291, -1000, -1000, -1000, -1000, -1000, 833, -1000, 2203, -1000,
	-52, 1697, 14116, -1000, -1000, -1000, -1000, -1000, -1000, 1336,
	-1000, -1000, 1350, 1361, 1361, 2201, 1477, 1219, -1000, 15,
	15, -1000, 364, -1000, 8941, 28930, 1610, -1000, 1325, 5852,
	-1000, -1000, 1267, 1309, 1305, 1350, 1424, -1000, 12, 39560,
	1589, -1000, -1000, 1783, -1000, 4, 39560, -1000, 1424, 1280,
	1276, -1000, 1316, -1000, 1314, 1302, 1297, 1267, -1000, 39053,
	1394, -1000, -1000, 8941, -1000, -1000, 1695, 1692, 1691, -1000,
	-1000, 1312, -1000, 1292, -1000, 1424, -295, 1, -296, 1341,
	1268, 1264, -1000, -1000, -1000, -1000, 39053, -1000, 1424, -1000,
	1257, 1256, -302, 1688, -1000, -1000, -1000, 1270, -1000,
}

var yyPgo = [...]int16{
	0, 2578, 2576, 2056, 135, 0, 154, 3503, 2575, 183,
	178, 213, 124, 465, 308, 2570, 215, 2569, 2276, 325,
	240, 33, 2568, 2567, 2567, 2567, 2566, 182, 151, 2565,
	184, 2563, 2555, 165, 2553, 2550, 228, 63, 1730, 2544,
	4598, 94, 1523, 12, 2542, 2541, 2540, 2539, 2538, 203,
	2535, 176, 2534, 2533, 2532, 211, 152, 202, 206, 163,
	197, 15, 140, 147, 26, 2531, 214, 114, 34, 137,
	2530, 2529, 2524, 2522, 2521, 2520, 2518, 2517, 2516, 2515,
	160, 162, 174, 179, 223, 47, 148, 150, 2514, 2512,
	2511, 3537, 56, 2509, 27, 2508, 209, 200, 144, 168,
	204, 3837, 680, 2507, 2506, 2504, 2502, 2501, 2498, 2497,
	2496, 2494, 2492, 2491, 51, 67, 2490, 2488, 175, 166,
	194, 2487, 198, 138, 7, 32, 145, 129, 2486, 2485,
	2484, 2469, 28, 98, 21, 2468, 2467, 73, 96, 2464,
	218, 2464, 2464, 2464, 2464, 2463, 193, 2462, 2460, 2458,
	123, 2457, 2456, 2452, 10, 2452, 75, 91, 2451, 72,
	112, 212, 141, 2450, 221, 80, 195, 2110, 177, 2449,
	226, 220, 219, 208, 169, 8, 2449, 142, 345, 2447,
	2444, 2441, 2441, 224, 196, 181, 171, 136, 132, 2436,
	245, 2434, 225, 2432, 2431, 2429, 2428, 205, 70, 2422,
	2422, 93, 2421, 111, 2420, 2417, 115, 201, 22, 78,
	2415, 50, 81, 62, 85, 2410, 95, 199, 2, 17,
	13, 2399, 161, 2397, 39, 2396, 6, 1, 2394, 5,
	9, 3, 14, 2393, 2391, 139, 2389, 105, 2388, 158,
	146, 149, 2375, 125, 2373, 79, 54, 121, 2372, 2366,
	2365, 126, 55, 2364, 107, 2363, 83, 190, 2361, 2342,
	2341, 18, 71, 118, 45, 38, 19, 43, 104, 84,
	2337, 2334, 53, 167, 2330, 143, 36, 31, 82, 187,
	110, 2327, 25, 49, 20, 390, 113, 216, 217, 2326,
	108, 100, 2325, 2322, 2322, 2318, 2315, 41, 229, 48,
	159, 2314, 155, 2312, 2310, 2309, 57, 2309, 106, 2308,
	52, 2307, 40, 153, 2307, 89, 2306, 2305, 24, 421,
	3866, 2303, 122, 2302, 230, 2301, 2300, 2295, 134, 2294,
	130, 2292, 1556, 191, 2286, 2285, 2285, 2281, 23, 222,
	2279, 173, 2277, 103, 186, 2268, 109, 2266, 2265, 192,
	2261, 2260, 77, 2259, 2258, 156, 188, 2257, 2255, 2253,
	2251, 2248, 2247, 4, 101, 37, 11, 2243, 2242, 44,
	2241, 2238, 210, 185, 2235, 2234, 2232, 2232, 2231, 102,
	2171, 2230, 207, 16, 2229,
}

var yyR1 = [...]int16{
	0, 1, 2, 2, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 17, 17, 283, 283, 319, 319, 319, 24,
	24, 25, 25, 26, 26, 27, 27, 37, 37, 37,
	5, 5, 5, 6, 6, 6, 6, 6, 8, 8,
	7, 12, 12, 13, 13, 320, 320, 23, 23, 15,
	15, 377, 377, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 14, 14, 16, 16, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 41, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 42, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 42, 42, 42, 43, 43, 43, 43, 43,
	43, 61, 63, 62, 62, 62, 44, 44, 57, 57,
	60, 60, 59, 59, 59, 59, 58, 58, 45, 198,
	338, 338, 87, 87, 87, 87, 87, 87, 55, 55,
	56, 56, 56, 46, 47, 47, 50, 50, 49, 48,
	48, 51, 51, 51, 54, 54, 52, 52, 53, 85,
	85, 68, 69, 69, 69, 69, 69, 64, 64, 64,
	66, 67, 81, 81, 82, 82, 70, 70, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 77,
	77, 73, 73, 65, 65, 65, 65, 65, 65, 74,
	75, 78, 79, 76, 76, 76, 76, 83, 83, 83,
	84, 84, 72, 72, 91, 91, 93, 93, 94, 94,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 92, 92, 86, 88, 89, 90, 97, 97,
	96, 96, 98, 98, 99, 101, 101, 100, 100, 102,
	102, 102, 102, 169, 169, 168, 168, 171, 171, 171,
	171, 172, 172, 173, 173, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 322, 322, 323, 323,
	323, 324, 324, 324, 184, 184, 184, 184, 184, 184,
	185, 185, 185, 185, 186, 186, 187, 187, 188, 188,
	188, 189, 189, 190, 190, 192, 193, 193, 193, 194,
	194, 194, 195, 195, 195, 196, 196, 175, 175, 176,
	122, 122, 122, 145, 178, 178, 177, 177, 177, 177,
	179, 179, 180, 180, 181, 181, 182, 182, 183, 183,
	197, 197, 206, 206, 202, 202, 203, 204, 204, 205,
	205, 343, 200, 200, 199, 199, 201, 212, 212, 214,
	214, 213, 213, 213, 213, 215, 215, 216, 216, 207,
	207, 208, 208, 209, 209, 209, 210, 210, 211, 211,
	211, 211, 211, 217, 222, 221, 221, 225, 225, 223,
	223, 224, 227, 227, 228, 228, 228, 228, 228, 228,
	228, 228, 229, 229, 229, 229, 226, 226, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 231, 231, 231,
	231, 231, 232, 232, 233, 233, 234, 234, 218, 218,
	219, 219, 219, 219, 219, 219, 220, 220, 103, 321,
	321, 113, 113, 113, 113, 113, 134, 134, 114, 114,
	118, 104, 115, 115, 120, 120, 119, 116, 116, 105,
	191, 191, 106, 117, 117, 107, 107, 139, 139, 140,
	140, 146, 146, 146, 147, 147, 148, 148, 150, 150,
	151, 151, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 152, 152, 157,
	158, 158, 158, 158, 158, 158, 153, 153, 159, 165,
	165, 165, 165, 160, 160, 160, 160, 162, 162, 296,
	296, 296, 296, 296, 296, 296, 296, 295, 295, 295,
	294, 294, 294, 294, 294, 164, 164, 380, 380, 163,
	163, 378, 378, 379, 379, 141, 141, 142, 142, 143,
	143, 144, 144, 126, 126, 126, 126, 126, 135, 135,
	136, 136, 127, 127, 129, 130, 131, 131, 131, 131,
	131, 124, 121, 121, 121, 128, 128, 128, 155, 155,
	156, 156, 132, 132, 132, 133, 133, 125, 125, 137,
	137, 137, 138, 138, 138, 123, 123, 108, 108, 108,
	108, 108, 108, 298, 298, 298, 298, 298, 298, 298,
	298, 235, 235, 236, 236, 239, 239, 239, 242, 250,
	250, 250, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 300, 300, 301, 301, 302, 302, 303, 303,
	237, 237, 238, 238, 243, 243, 244, 244, 245, 245,
	245, 245, 246, 249, 249, 304, 304, 305, 305, 306,
	10, 32, 240, 254, 254, 255, 255, 255, 255, 258,
	258, 258, 258, 261, 261, 261, 308, 308, 311, 311,
	313, 313, 313, 313, 309, 309, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 381, 381, 28, 28, 28, 307, 307, 310,
	310, 256, 256, 256, 256, 256, 256, 256, 256, 256,
	241, 241, 257, 257, 257, 257, 257, 257, 257, 259,
	259, 248, 248, 247, 247, 263, 263, 262, 262, 262,
	262, 267, 267, 267, 267, 267, 264, 265, 266, 266,
	266, 266, 266, 268, 268, 269, 269, 270, 271, 271,
	272, 272, 272, 299, 299, 276, 276, 276, 276, 277,
	277, 278, 278, 279, 109, 109, 260, 260, 280, 280,
	282, 282, 281, 281, 284, 284, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 285, 285, 291,
	291, 286, 286, 11, 290, 290, 290, 290, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 288,
	288, 288, 289, 292, 292, 382, 382, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 329,
	329, 329, 332, 332, 332, 335, 335, 335, 335, 334,
	334, 336, 336, 330, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 294, 294, 294,
	294, 294, 36, 38, 39, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	252, 252, 253, 253, 253, 253, 253, 253, 273, 274,
	274, 275, 275, 275, 275, 325, 325, 325, 325, 339,
	339, 340, 340, 341, 341, 341, 342, 342, 342, 342,
	342, 344, 344, 344, 344, 344, 345, 80, 80, 80,
	346, 346, 347, 347, 349, 349, 349, 349, 349, 351,
	351, 348, 348, 352, 352, 352, 328, 370, 370, 353,
	353, 350, 350, 350, 350, 350, 350, 350, 350, 350,
	350, 350, 350, 350, 350, 350, 350, 350, 337, 337,
	326, 326, 354, 354, 354, 356, 356, 355, 355, 355,
	355, 355, 361, 361, 362, 362, 364, 359, 359, 360,
	360, 367, 357, 357, 384, 384, 358, 358, 365, 365,
	383, 383, 363, 363, 363, 366, 366, 366, 366, 368,
	368, 327, 327, 327, 327, 154, 154, 369, 369, 369,
	369, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 331, 331, 331, 331, 167, 167, 170, 170,
	161, 161, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 374, 374, 374, 166, 166, 9, 9, 9, 9,
	376, 376, 372, 372, 372, 373, 373, 373, 373, 373,
	375, 375, 375, 375, 297, 297, 297, 297, 297, 297,
	315, 315, 29, 29, 30, 31, 31, 33, 33, 33,
	33, 34, 34, 35, 35, 35, 35, 316, 317, 317,
	318, 318,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 2,
	0, 3, 0, 2, 0, 1, 0, 2, 2, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 3, 1, 2, 3, 0, 1,
	3, 1, 0, 3, 3, 4, 4, 4, 4, 3,
	2, 1, 1, 2, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 3, 2,
	4, 2, 3, 5, 4, 6, 3, 5, 4, 6,
	3, 5, 3, 3, 2, 6, 7, 6, 7, 3,
	4, 4, 6, 5, 7, 1, 3, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 1, 1, 2, 4, 1, 1, 1, 2, 2,
	2, 2, 1, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 1, 2, 1, 2,
	1, 0, 2, 2, 3, 5, 0, 2, 4, 1,
	1, 2, 3, 5, 6, 8, 6, 6, 1, 3,
	1, 3, 3, 5, 1, 0, 1, 2, 4, 2,
	0, 3, 3, 2, 1, 3, 4, 3, 5, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 3, 3, 0, 2, 3, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 2, 2, 1, 3, 3, 2, 4,
	1, 5, 2, 5, 2, 5, 2, 3, 3, 0,
	1, 0, 3, 0, 1, 4, 1, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 0, 0, 0, 0, 1,
	1, 3, 1, 1, 1, 3, 3, 1, 2, 6,
	6, 2, 1, 1, 0, 1, 3, 3, 2, 1,
	1, 2, 0, 1, 3, 2, 2, 3, 1, 4,
	2, 3, 2, 3, 2, 3, 1, 1, 2, 2,
	4, 1, 2, 3, 3, 4, 5, 4, 5, 4,
	2, 2, 2, 1, 1, 0, 5, 2, 2, 2,
	3, 1, 0, 1, 3, 9, 1, 2, 0, 7,
	7, 0, 10, 6, 0, 4, 5, 2, 0, 1,
	2, 4, 0, 1, 1, 0, 5, 2, 4, 1,
	2, 0, 1, 0, 1, 5, 1, 0, 2, 0,
	2, 6, 2, 0, 1, 3, 2, 4, 0, 1,
	3, 2, 4, 0, 1, 3, 3, 2, 0, 2,
	2, 2, 3, 3, 4, 1, 3, 3, 2, 7,
	12, 1, 3, 2, 3, 3, 1, 2, 2, 2,
	2, 1, 2, 13, 2, 2, 0, 2, 0, 1,
	3, 3, 2, 1, 1, 1, 1, 1, 1, 2,
	2, 1, 3, 3, 6, 0, 3, 0, 2, 3,
	2, 3, 4, 4, 3, 3, 0, 5, 2, 5,
	2, 0, 4, 2, 1, 0, 1, 0, 1, 3,
	3, 6, 7, 5, 7, 9, 2, 0, 7, 1,
	3, 1, 4, 4, 7, 2, 1, 1, 1, 3,
	2, 8, 1, 3, 3, 5, 2, 1, 3, 7,
	2, 0, 10, 1, 2, 9, 11, 1, 1, 1,
	0, 1, 1, 1, 1, 0, 3, 0, 1, 3,
	2, 0, 1, 1, 3, 3, 1, 1, 3, 3,
	3, 3, 4, 4, 3, 3, 2, 1, 3, 2,
	1, 1, 1, 1, 3, 0, 1, 3, 1, 1,
	1, 1, 1, 1, 2, 2, 1, 1, 1, 2,
	2, 1, 3, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 0, 2,
	0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
	0, 1, 0, 4, 4, 4, 5, 5, 2, 5,
	3, 5, 2, 0, 3, 1, 2, 5, 5, 8,
	3, 4, 8, 5, 0, 4, 3, 0, 1, 3,
	1, 3, 2, 2, 4, 4, 5, 2, 0, 1,
	1, 0, 2, 2, 0, 2, 0, 13, 16, 12,
	15, 14, 17, 1, 1, 2, 2, 2, 2, 1,
	0, 1, 0, 1, 3, 1, 1, 1, 3, 3,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 1, 0, 2, 2, 1, 0,
	3, 0, 1, 3, 1, 1, 2, 4, 6, 6,
	10, 1, 2, 1, 3, 4, 0, 1, 3, 2,
	1, 1, 6, 2, 0, 3, 1, 1, 2, 1,
	2, 2, 2, 2, 3, 0, 1, 2, 1, 2,
	1, 3, 2, 3, 1, 2, 2, 2, 1, 2,
	3, 1, 2, 2, 2, 2, 3, 3, 3, 1,
	3, 1, 1, 0, 1, 1, 0, 1, 0, 3,
	0, 2, 1, 4, 4, 5, 2, 5, 5, 7,
	3, 1, 5, 9, 3, 9, 4, 11, 10, 2,
	0, 1, 3, 3, 6, 4, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 3, 3, 4, 0, 1, 0, 6, 1, 3,
	3, 3, 5, 2, 0, 3, 4, 4, 0, 2,
	0, 4, 0, 3, 16, 19, 1, 0, 2, 0,
	4, 0, 1, 3, 2, 0, 4, 6, 4, 6,
	4, 4, 6, 4, 6, 5, 7, 5, 7, 4,
	6, 10, 13, 10, 13, 11, 14, 1, 3, 1,
	0, 1, 3, 1, 1, 1, 1, 1, 2, 5,
	3, 6, 4, 6, 6, 9, 5, 7, 6, 6,
	5, 5, 5, 5, 9, 4, 5, 7, 6, 4,
	8, 4, 2, 4, 3, 6, 4, 3, 3, 3,
	2, 2, 3, 4, 4, 3, 3, 3, 3, 3,
	3, 4, 4, 3, 2, 3, 2, 2, 3, 4,
	3, 2, 2, 3, 4, 4, 4, 5, 1, 4,
	4, 4, 3, 3, 2, 1, 0, 6, 4, 6,
	4, 6, 8, 4, 6, 4, 6, 5, 7, 2,
	3, 3, 2, 5, 1, 1, 2, 3, 2, 1,
	1, 2, 1, 2, 1, 1, 1, 2, 1, 2,
	1, 1, 1, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 6, 6, 6, 6,
	8, 8, 6, 6, 7, 9, 9, 8, 10, 6,
	6, 6, 6, 6, 6, 6, 8, 6, 8, 6,
	8, 7, 9, 6, 8, 7, 9, 8, 10, 8,
	10, 9, 11, 8, 10, 9, 11, 8, 8, 7,
	6, 6, 6, 6, 8, 8, 8, 8, 6, 9,
	0, 2, 2, 1, 2, 2, 2, 2, 3, 1,
	3, 3, 1, 5, 3, 9, 12, 7, 7, 3,
	2, 1, 3, 1, 3, 3, 3, 3, 2, 2,
	1, 1, 1, 1, 2, 1, 1, 1, 4, 5,
	1, 0, 1, 2, 2, 2, 2, 1, 1, 1,
	3, 3, 5, 1, 4, 0, 2, 3, 0, 1,
	1, 4, 5, 1, 1, 1, 1, 3, 3, 2,
	2, 1, 2, 2, 2, 2, 1, 2, 2, 1,
	17, 21, 1, 1, 2, 1, 3, 1, 1, 1,
	3, 1, 2, 0, 1, 2, 4, 1, 1, 1,
	1, 1, 3, 0, 1, 0, 1, 1, 4, 0,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 2,
	0, 9, 11, 12, 14, 3, 0, 3, 4, 4,
	0, 1, 3, 3, 2, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 2, 2, 1, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	2, 0, 2, 0, 4, 1, 3, 1, 2, 2,
	2, 1, 1, 1, 1, 1, 3, 3, 1, 3,
	1, 3,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -98, -103, -104, -105, -106,
	-107, -108, -109, -110, -111, -112, -325, -326, -327, -329,
	-330, -100, -101, -189, 113, 26, 22, 27, 95, 403,
	-102, -188, 533, 63, 67, -196, 36, 520, 88, 542,
	98, 99, 100, 101, 533, -147, 117, -298, -260, -26,
	33, 455, 453, 58, 291, 475, 473, 67, 309, 421,
	482, 86, 286, 201, 227, 238, 249, 263, 288, 72,
	-380, 62, 377, 387, 389, 411, 416, 424, 445, 414,
	462, 270, 408, 105, 451, 440, 456, 466, 386, -293,
	-296, -295, 466, 263, 309, 67, 421, 482, 86, 286,
	227, 238, 440, 456, 196, 270, 278, -380, 389, 416,
	424, 377, 414, 462, -332, 58, 425, 459, -333, -331,
	-167, 56, 219, 416, 349, 408, 490, -5, 4, -18,
	-19, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 22, 203, 205, 206, 207, 55, 208, 209, 210,
	212, 213, 214, 90, 71, 215, 216, 217, 24, 218,
	220, 221, 222, 223, 224, 225, 125, 228, 229, 230,
	231, 232, 143, 233, 103, 234, 235, 236, 237, 238,
	113, 239, 156, 240, 122, 123, 92, 248, 249, 250,
	251, 252, 253, 255, 256, 100, 151, 152, 257, 91,
	258, 259, 260, 261, 262, 263, 178, 27, 264, 140,
	266, 150, 267, 269, 138, 42, 270, 272, 273, 274,
	275, 276, 277, 278, 279, 281, 283, 284, 93, 285,
	155, 167, 287, 288, 289, 290, 291, 293, 296, 297,
	153, 298, 299, 300, 28, 301, 302, 303, 304, 305,
	306, 307, 308, 309, 310, 311, 312, 314, 315, 316,
	98, 317, 319, 320, 147, 505, 321, 322, 323, 324,
	94, 326, 329, 330, 331, 334, 335, 336, 337, 338,
	339, 107, 86, 340, 101, 342, 343, 344, 345, 346,
	347, 348, 133, 350, 351, 352, 353, 354, 355, 356,
	359, 112, 360, 361, 32, 141, 124, 506, 507, 504,
	146, 62, 508, 509, 126, 503, 510, 104, 366, 367,
	368, 369, 370, 371, 372, 131, 373, 130, 375, 376,
	377, 379, 380, 381, 382, 384, 385, 386, 387, 388,
	114, 389, 154, 145, 390, 391, 392, 393, 85, 134,
	395, 396, 397, 398, 399, 400, 401, 34, 402, 403,
	404, 35, 405, 406, 407, 409, 410, 411, 412, 129,
	414, 415, 148, 417, 418, 89, 419, 420, 421, 422,
	423, 424, 95, 427, 429, 430, 431, 432, 433, 109,
	435, 436, 437, 438, 439, 440, 115, 116, 441, 442,
	443, 149, 444, 445, 447, 448, 106, 450, 451, 110,
	453, 454, 455, 456, 457, 460, 462, 464, 465, 466,
	467, 468, 469, 470, 144, 471, 50, 474, 475, 476,
	99, 477, 478, 479, 480, 157, 185, 481, 482, 483,
	484, 485, 487, 170, 488, 142, 489, 500, 501, 57,
	37, 175, 171, 191, 181, 180, 226, 190, 189, 29,
	280, 177, 294, 295, 502, 188, 173, 187, 168, 162,
	164, 165, 161, 163, 158, 166, 160, 128, 159, 327,
	341, 183, 184, 357, 358, 362, 172, 363, 364, 378,
	179, 176, 413, 428, 174, 446, 186, 461, 463, 88,
	182, 491, 492, 493, 494, 495, 135, 496, 497, 498,
	499, 127, -335, -334, 56, 459, 425, -167, 21, 219,
	58, 349, 408, 416, 490, -102, -100, -101, -188, -180,
	-181, 21, 41, -322, -320, -323, -5, 66, 425, 459,
	56, 543, -190, 85, -192, -7, -5, -190, 533, -3,
	74, -324, -322, 64, 74, -99, -98, -320, 67, 482,
	85, 309, 288, 387, 462, 119, 34, 455, 453, 455,
	453, -322, 28, 21, -320, 28, 21, -320, 28, -320,
	28, 482, 67, 248, -39, -338, -64, -5, 4, -18,
	-20, 211, 117, 227, 25, 82, 244, 118, 80, 44,
	77, 52, 53, 76, 78, 46, 83, 54, 81, 365,
	79, 48, 452, 120, -14, -5, -14, -7, -14, -38,
	-338, -11, -290, -9, 243, 247, 426, 4, -18, -19,
	-20, 323, 223, 281, -7, 28, -38, -7, -38, -7,
	-7, -7, -7, -7, 462, -11, -11, -7, -14, 89,
	-14, 28, -16, -14, 28, -12, -7, -7, 28, -164,
	28, -68, -69, -70, -71, -77, -73, -76, -64, 188,
	173, 174, 175, 176, 177, 178, 189, 190, 172, 191,
	-78, -79, -74, -75, 186, 56, 4, -18, 171, -65,
	180, 181, 182, 183, 184, -164, 28, 25, 482, 248,
	67, 89, 342, 462, 323, -332, 425, -332, 221, 211,
	-372, 433, -373, 320, 391, 254, 31, 64, 61, 529,
	535, 57, -63, 7, -63, -374, -63, 40, -166, -9,
	-63, 508, 57, 320, 211, 534, 534, -169, -168, -171,
	-40, 538, -42, 536, 537, 31, -91, -44, -43, 13,
	533, -46, -45, -101, 29, 136, -52, -53, 295, 11,
	62, -5, -61, 6, -63, 49, 43, 47, 38, -87,
	413, 12, -338, -168, 75, 538, -57, -59, 535, 531,
	-320, 533, 533, 543, -190, -23, 533, -85, -40, -321,
	-320, 95, -5, 23, -324, -324, 534, -154, 533, -320,
	28, -320, 482, -27, 25, -338, -338, -7, 462, -298,
	-285, -288, 400, -287, 209, 258, 198, 22, 27, 479,
	95, 225, 266, 260, 311, 356, 124, 31, 367, 403,
	402, 155, -30, 509, 29, 45, -285, -289, 400, 209,
	29, 45, -285, 400, 29, -285, 400, 29, -320, 28,
	21, -322, 28, 142, 400, -36, 533, -57, 400, -81,
	535, 400, 400, 400, 400, -36, 400, -7, -14, -14,
	75, 29, 400, 400, 400, 400, 400, 400, 75, 75,
	-7, 400, 400, 400, 400, 370, 259, 454, 233, 400,
	29, 543, -319, 24, 35, 29, 543, -319, 75, 29,
	543, -319, 29, -82, -81, 533, -72, 533, 179, -82,
	-82, -82, 533, -83, 520, 521, 533, -83, -84, 185,
	533, -84, -84, 180, 181, -84, -319, 29, -16, 28,
	142, 370, 259, 454, 233, 221, 23, -166, 40, 543,
	-373, -63, 329, 66, 489, 254, 122, -170, 40, -161,
	-165, -160, 49, 43, 75, -166, 6, 536, 537, -62,
	-61, -170, 40, -5, -371, -63, 4, -160, 40, 58,
	49, 43, 75, 506, -376, 262, 236, 329, -183, 74,
	543, 14, 536, 537, 538, 539, 540, 541, 527, 528,
	529, 18, 19, 20, 30, 33, 52, 53, 54, 46,
	518, 44, 39, 55, -91, 37, 45, 48, 23, -8,
	62, 4, -22, 193, 194, 195, 196, 197, 198, 199,
	200, 201, 21, 202, 22, 203, 204, 121, 512, 96,
	205, 206, 207, 60, 208, 209, 210, 211, 212, 213,
	214, 175, 117, 171, 191, 513, 90, 71, 215, 216,
	217, 24, 218, 38, 514, 219, 220, 221, 515, 222,
	223, 224, 225, 226, 227, 516, 125, 228, 229, 230,
	231, 232, 25, 143, 233, 103, 234, 119, 235, 236,
	237, 238, 113, 239, 82, 156, 240, 122, 241, 242,
	243, 244, 245, 246, 247, 123, 92, 248, 249, 251,
	190, 189, 252, 40, 253, 254, 255, 256, 100, 151,
	152, 257, 91, 97, 258, 259, 260, 261, 41, 111,
	262, 263, 178, 27, 264, 265, 140, 266, 150, 267,
	268, 269, 138, 42, 270, 272, 273, 274, 275, 29,
	276, 277, 278, 279, 280, 43, 281, 284, 93, 177,
	285, 155, 286, 167, 287, 118, 80, 288, 289, 290,
	291, 293, 294, 295, 296, 297, 153, 298, 300, 28,
	301, 302, 303, 304, 305, 306, 307, 308, 309, 310,
	311, 312, 313, 314, 77, 502, 315, 316, 98, 317,
	188, 173, 187, 319, 320, 76, 168, 162, 164, 165,
	161, 163, 158, 166, 160, 128, 159, 147, 505, 321,
	322, 323, 324, 94, 325, 328, 326, 327, 78, 329,
	330, 331, 58, 332, 333, 334, 335, 336, 337, 338,
	339, 107, 86, 340, 101, 341, 342, 344, 345, 347,
	348, 349, 183, 83, 184, 133, 350, 351, 352, 353,
	354, 355, 356, 357, 358, 359, 31, 112, 360, 361,
	47, 362, 32, 172, 141, 124, 506, 507, 504, 146,
	66, 508, 509, 126, 503, 363, 81, 364, 104, 366,
	367, 368, 369, 370, 371, 372, 131, 373, 130, 374,
	375, 376, 377, 378, 379, 380, 381, 382, 383, 384,
	385, 386, 387, 388, 114, 389, 154, 145, 390, 391,
	176, 392, 393, 85, 134, 394, 395, 396, 397, 398,
	399, 400, 401, 34, 402, 403, 404, 35, 405, 406,
	407, 79, 408, 409, 410, 411, 412, 413, 129, 414,
	415, 148, 416, 417, 418, 89, 420, 63, 421, 422,
	423, 424, 425, 426, 95, 428, 427, 429, 430, 431,
	432, 174, 433, 434, 109, 435, 436, 437, 438, 439,
	440, 115, 116, 441, 442, 443, 149, 444, 445, 446,
	447, 59, 448, 106, 449, 67, 450, 452, 451, 110,
	453, 454, 455, 456, 108, 457, 56, 186, 458, 459,
	460, 461, 462, 463, 49, 464, 465, 466, 467, 468,
	469, 470, 144, 471, 473, 50, 474, 475, 476, 99,
	105, 84, 477, 478, 479, 480, 157, 88, 182, 192,
	120, 481, 482, 483, 484, 51, 485, 488, 142, 489,
	490, 491, 492, 493, 494, 495, 135, 496, 497, 498,
	499, 127, 501, 57, -40, -40, -40, -40, -58, -40,
	-85, -101, 88, -57, -101, -101, -51, 531, 533, 533,
	-57, -47, -40, -88, 533, 533, -183, 533, -59, -66,
	538, -6, 4, -18, -19, -20, -21, 21, 204, 121,
	30, 512, 136, 23, 96, 60, 513, 38, 514, 515,
	39, 516, 119, 26, 241, 242, 243, 245, 246, 247,
	40, 254, 97, 41, 111, 265, 268, 271, 43, 282,
	132, 286, 64, 292, 72, 73, 45, 313, 318, 74,
	325, 328, 68, 332, 333, 31, 47, 69, 75, 66,
	33, 511, 374, 383, 394, 102, 63, 426, 434, 59,
	449, 67, 108, 61, 458, 49, 472, 473, 105, 84,
	192, 51, 65, 486, 36, -40, -60, -320, -85, -192,
	23, -12, 543, 534, 30, 33, 52, 46, 44, 39,
	55, 37, 45, 48, 62, -113, -98, 104, 533, 40,
	23, -115, -120, -119, 533, -5, -5, -191, 84, 84,
	61, -139, 64, 61, -13, -5, 533, 124, 372, 31,
	-154, -320, -17, 28, -5, -339, 533, -339, -354, 213,
	200, 317, -7, 482, 85, 543, 61, -382, 119, 516,
	372, 372, -240, 28, 516, -241, -5, 119, -257, 515,
	473, 383, 286, 272, -382, 119, -382, 119, 119, 170,
	337, 475, 196, 451, -273, 533, 75, 462, 203, 402,
	414, 413, 462, 414, 413, -320, 311, 155, -14, 124,
	61, -273, 300, 413, 533, -322, 451, 61, 372, -320,
	451, 61, -320, 61, -382, -320, -285, 400, 29, 45,
	-285, 400, 29, -7, 61, 534, 61, 535, -66, 61,
	61, 61, 119, 61, 61, 400, 84, 84, -320, -7,
	61, 61, 61, 61, 61, 61, -320, -320, 400, 61,
	61, 61, 61, -14, -14, -14, -14, 61, 210, -16,
	-14, -12, -7, -14, -7, -68, -164, -82, -85, -61,
	-61, 56, 56, -61, 533, -61, -84, -84, -164, -319,
	29, 459, -373, -375, 391, 401, 423, 543, -61, 6,
	-61, 6, -172, 64, -320, -171, -68, -40, -40, -40,
	-40, -40, -40, -40, -40, -40, -40, -40, -40, -40,
	-40, 47, 31, -40, 46, 44, 37, 45, 48, -40,
	-14, 56, 58, -40, -97, 59, 60, -96, -101, 533,
	61, -6, -59, 534, 543, -85, -54, 532, -51, -85,
	-92, -94, -5, 11, -95, 536, 537, 538, 539, 540,
	541, 527, 528, 529, 18, 19, 20, -50, -49, 51,
	-89, -85, 534, 534, -55, 192, 21, 41, -56, -40,
	-67, -64, -172, -85, 532, 544, 534, 534, -193, 86,
	31, 534, -40, -121, 75, -134, 105, 106, -114, -118,
	-5, 88, -5, -172, 543, 529, -116, -119, -58, -122,
	65, -173, -174, -322, -101, 87, -184, 533, -197, -207,
	-217, -198, 129, 127, 128, -5, -87, -174, -140, 114,
	-140, 543, 534, -235, -236, -239, -240, -242, -241, 46,
	-14, 124, 29, -284, 36, 533, 75, 31, 406, -346,
	-347, -349, 23, 323, 460, 486, -350, 217, 443, 302,
	436, 484, 279, 420, 326, 31, 239, 129, 447, -337,
	368, 95, -330, -340, 534, -341, -342, -344, -67, -80,
	45, 363, 502, 192, -64, -68, 428, -346, 406, -356,
	-355, 98, 100, 99, 464, 124, 200, -320, 482, -287,
	-7, -7, -7, -320, -320, 31, -240, 28, -68, -7,
	533, -261, -279, 32, 84, 505, 505, -280, 84, -5,
	-61, -7, 28, -5, 28, -7, -7, 507, 225, 342,
	-7, -274, -275, -6, -7, -7, 21, 105, 462, 414,
	462, 414, -7, 329, -7, 21, 105, -7, 329, -320,
	413, -290, -35, 112, 80, 40, 84, 329, -31, -33,
	-306, 95, 198, 27, -10, -6, -285, -288, 400, -7,
	-7, -320, -285, 400, -7, -7, -285, 400, -7, -7,
	-285, 400, 61, -382, -320, 451, 61, -382, -322, 400,
	-7, -7, -66, -7, -7, -7, -7, -7, -11, 61,
	-7, -7, 400, 75, -7, -7, -7, -7, -7, -7,
	400, 400, 61, -11, -11, -7, -7, 400, 400, 400,
	400, -7, -7, -319, -319, -319, 75, -319, 534, 534,
	534, 57, 57, 534, -85, 534, -319, -16, -372, 470,
	231, 391, -161, -175, 65, -173, 47, 42, -40, -40,
	-97, 59, -96, 61, 42, 57, -41, -42, 536, 537,
	-41, -85, -40, -58, -40, 532, 532, 543, 534, 534,
	535, -48, -49, 265, -40, -90, 534, -86, 543, -56,
	-55, -55, 16, 17, -175, 534, -60, -40, 533, 86,
	-123, 102, 103, 157, 534, 543, -58, -122, -120, -40,
	534, 543, -123, -40, 122, 543, 82, -185, 76, 83,
	80, 78, 79, 77, -178, -177, 23, -5, -178, -101,
	-197, -207, -217, -101, -184, -174, -178, -178, -178, -206,
	520, 64, 533, 533, -57, 75, -146, -63, 115, 116,
	-146, -5, 534, 543, -320, -237, 533, -320, -320, 23,
	-273, -13, -322, 29, -345, 67, 47, -80, -64, -352,
	-328, 214, 405, -349, -351, -63, -166, -348, 132, 75,
	420, 256, 319, 326, -160, -160, -14, -5, -333, 425,
	459, 534, 543, 40, 529, -67, -80, -344, -80, 363,
	-81, -64, -352, 75, 33, 124, -356, -154, -320, 61,
	61, -245, 132, 40, -27, 284, 29, 31, -303, -302,
	441, -257, 272, -40, 533, -252, 41, 31, 309, 533,
	-279, 533, 533, -7, -292, 27, 95, 403, 198, -311,
	-163, -30, -313, 404, 95, -252, 29, -319, 29, -319,
	-34, -5, 40, 534, 543, 529, 535, -7, -7, -7,
	-7, 420, 420, 329, 309, 420, 534, 543, -306, -306,
	-10, -32, -63, 61, -382, 119, 95, 366, 61, 95,
	366, 61, 61, 61, -382, -7, -7, -285, 400, -7,
	-7, -7, -285, 400, 61, 61, -7, 400, 400, 61,
	-320, 61, 61, -7, 61, 61, 61, 61, 61, -14,
	-83, -83, 534, -319, -40, -40, 42, 42, -41, -41,
	-40, -40, -40, 30, 14, 536, 537, 538, 539, 540,
	541, 527, 528, 529, 18, 19, 20, -41, -41, 30,
	534, 42, 534, -51, -92, 268, -40, 108, 534, 192,
	-56, -86, -86, 543, -86, -40, -40, 532, -99, -168,
	-128, 533, 75, -98, -98, 104, -118, -123, 529, -119,
	124, -174, 76, 76, -174, -185, 76, -186, 81, -186,
	-186, -5, 533, -178, -178, -178, -178, 534, 126, 533,
	-42, 135, -222, -40, -40, -28, 36, 520, -148, -378,
	84, -268, 312, -239, -250, -269, -270, 372, -238, -243,
	-244, -241, -5, -237, 533, 124, 372, -98, 534, -280,
	-7, -346, 533, 75, 208, -40, 543, 543, 466, 47,
	256, 319, -341, -40, -40, -80, -80, 540, -81, -320,
	-355, -13, 75, -284, 533, -7, -7, 88, -240, 29,
	-301, -300, 232, -5, 40, 534, -13, -253, 31, 254,
	313, 356, 41, -7, -13, -252, -13, -248, -247, -132,
	-5, -198, 533, 31, 277, 300, 40, 248, -312, 290,
	31, 277, 440, -273, -302, -300, 40, 23, 215, 92,
	356, 307, 337, 340, 344, 366, 421, 438, 404, 475,
	-273, 290, -313, 95, 466, -28, 440, -5, -7, -275,
	-297, -80, -21, -93, -160, -63, 357, -94, 62, 536,
	537, -6, 420, -7, -33, -7, -7, -7, 451, 71,
	-7, 451, 71, -7, -7, -7, -7, 61, 61, -382,
	95, 366, 61, 61, -382, -7, -7, 61, 61, -7,
	400, -7, -7, -7, -7, -7, -7, -7, -319, -40,
	-40, 30, 30, 42, -40, -68, -41, -41, -41, -41,
	-41, -41, -41, -41, -41, -41, -41, -41, -40, -40,
	-40, -56, 534, 534, 534, 534, 111, -156, -132, 119,
	-134, -40, -145, -7, -174, -174, -187, 84, 75, 76,
	-174, 533, -12, -177, -202, -203, -198, -213, 131, 533,
	543, -233, -232, 517, -117, -126, -135, -136, 51, -150,
	-151, 533, -28, 152, -269, 533, 306, 273, -299, 84,
	71, 534, 543, -254, 36, -245, -235, -14, 124, -369,
	36, -284, 533, 75, -352, -205, -343, -67, -64, 47,
	-370, -63, 132, -68, 315, 466, 540, -361, 395, -320,
	23, -13, 36, 45, 64, -240, -304, 509, -5, 40,
	-252, 534, 254, 478, 301, 255, 311, 534, 534, 534,
	543, 36, -133, -125, 39, -133, -40, 47, 28, 28,
	-308, 203, 71, 47, 23, -162, -62, 40, 536, 537,
	-40, -69, -160, 92, 340, 344, -381, 71, -160, -160,
	71, 348, -28, -28, -308, -68, -160, -162, -319, -319,
	533, 529, 61, 61, -7, -286, -290, -7, -286, 61,
	-7, -7, -7, 451, 71, -7, -7, -7, -7, -7,
	61, -319, -40, -40, -40, -86, -194, 89, 99, 112,
	534, 543, -7, 157, -187, 533, -40, -174, -12, 534,
	534, 543, -204, 23, 125, -42, -214, 71, -215, -216,
	-41, 40, -40, 168, -123, -126, -127, 30, -127, 107,
	31, -149, 117, 118, 151, 47, 156, 153, 154, 42,
	155, 150, -152, -157, -6, -150, -63, -299, -15, -320,
	-251, 229, 232, 235, 253, 300, 290, 310, 440, 441,
	21, -251, -37, 36, 170, -7, -5, -243, -255, 119,
	-256, -258, 39, 31, 47, 473, 383, 515, 40, 394,
	290, 254, 313, 509, -269, 534, -237, -320, 515, 218,
	58, 23, -156, -322, 543, 534, -80, 315, 268, -353,
	-4, -328, 466, 466, -357, 132, -362, -364, -359, 350,
	504, -368, 64, -98, 534, 533, 533, 533, -254, 533,
	-263, 305, -263, 394, -263, -247, -92, 62, -283, -14,
	-14, 534, 29, 29, 40, 533, -160, -14, -14, -160,
	-160, 23, -212, 39, -92, -297, -7, -7, -291, 361,
	95, 543, -291, 95, -7, 61, -7, -286, 61, -7,
	534, -195, 92, 91, 90, 95, -175, -132, -98, -12,
	534, -206, -203, 533, -208, -209, -5, -214, 71, -42,
	134, 157, 543, 534, 23, -41, -221, 23, 150, 108,
	-40, 108, 107, -379, 23, -379, -379, -379, 154, 31,
	47, -63, 534, 543, -158, -165, -160, 538, 40, 533,
	-175, -37, 543, 534, -276, 75, -273, 507, 533, -7,
	-14, 254, 47, -261, 505, 533, -41, -320, -308, 255,
	301, -254, -299, -268, -269, -237, 508, 515, 515, -98,
	534, -280, -343, -346, 542, -68, -365, 51, -384, 264,
	-364, -360, 67, 413, -252, -320, -369, -284, -249, -246,
	-9, -85, -85, -305, -306, -315, 36, 533, -315, -320,
	-315, 533, -137, 96, 97, -273, -133, -40, 300, -29,
	84, -14, 534, 451, -290, 451, -7, -291, 95, -7,
	-13, 93, 93, -115, 534, -199, -201, -5, 534, 543,
	-68, 132, -214, -216, 543, -6, -225, 131, -5, -7,
	-129, -130, 111, 99, 100, -131, 111, 98, 71, -63,
	-63, -63, -63, -13, 538, 47, -13, 538, -157, -153,
	-159, -165, -276, -320, -277, 451, 230, -271, -272, -5,
	-198, 533, -256, 31, -315, -315, -40, -154, 23, -37,
	-269, -299, -245, 508, 508, -369, -282, 305, 533, -352,
	275, 533, -358, 413, 439, -379, 132, 23, 534, 543,
	-61, 534, 534, 534, 543, -278, 84, -316, 533, -13,
	-278, -154, -278, -92, -138, 519, -137, 534, -310, 533,
	-40, -7, -7, 451, 95, 71, 71, -175, -179, 23,
	534, 543, -68, -209, -210, -211, 4, 40, 31, 47,
	130, 126, -42, 125, -223, -224, -222, 112, 95, 112,
	-124, 104, 533, 40, 88, 109, 110, -13, 538, 534,
	543, -277, -7, 27, 100, 382, 534, 543, -125, -125,
	-40, -278, -278, 534, -262, 339, 300, 533, -276, -299,
	-37, -269, -261, 533, -156, -383, 288, 387, -40, -367,
	-5, 264, -98, -246, 61, -306, -252, 309, -317, -318,
	-6, 534, -252, -262, -175, 534, 93, 94, -138, -309,
	-312, -291, -291, -7, -5, -13, -13, -5, -201, -212,
	-211, -41, -41, 47, -41, -213, 533, 543, 23, -115,
	-134, -114, 88, 533, -159, 129, 129, -272, -283, -14,
	-283, 534, -259, 356, -267, -264, -265, 75, 80, 371,
	431, -310, -40, -277, -37, -276, -299, -284, -281, -132,
	534, -338, 534, 413, -369, 533, 451, 534, 543, 529,
	-267, -252, -312, 534, -291, 61, 84, 95, 95, 125,
	-218, -219, -5, 133, -224, -6, 157, 534, -85, -125,
	311, -265, 75, -264, 75, 99, 100, 534, -276, -277,
	-37, -277, 534, 543, -282, 533, -365, -85, -7, -318,
	-297, -252, -43, -5, -5, -5, -208, 534, 543, 132,
	-68, -234, 130, -124, -124, 104, 534, -283, -266, 356,
	35, 24, 95, -266, 442, -277, -276, -175, -132, -261,
	-363, -366, -61, 6, -63, -6, 275, 534, 40, 534,
	-226, -227, 40, -228, 138, 47, 49, 43, 50, 140,
	-219, 126, -220, -232, 29, 130, 7, -134, 197, 47,
	40, -277, -284, 534, 543, -383, -43, 534, 75, -40,
	136, 141, -230, 170, 36, -220, -220, 7, 125, 23,
	157, -154, -154, -277, -366, -338, 84, 138, -231, 147,
	146, 142, 136, 142, 136, 143, 144, -230, -226, 533,
	-7, -124, -175, 533, -5, -229, -227, 145, 145, 142,
	142, 136, 142, 136, 142, -231, -218, 125, -363, 75,
	75, 75, 142, 142, -229, 534, 533, 534, 140, 138,
	148, 148, -218, -227, 149, 149, 534, 75, 138,
}

var yyDef = [...]int16{
	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 1232, 1233, 0, 1465, -2, 1528, 1528, 0, 0,
	1237, 1291, 0, 1323, 0, 1242, 0, 0, 0, -2,
	0, 0, 0, 0, 0, 0, 1464, 0, 0, 0,
	0, 1593, 1594, 0, 0, 1599, 1766, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1527, 0,
	0, 0, 0, 0, 1908, 1904, 1905, 1906, 0, 0,
	1910, 1911, 1912, 0, 0, 0, 1511, 0, 1514, 1515,
	1516, 1517, 1518, 1519, 1889, 221, 332, 366, 1894, 2111,
	0, 449, 105, 322, -2, 313, 399, 2126, 40, 41,
	42, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 138, 139, 140, 141, 142, 143, 144, 145,
	146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
	156, 157, 158, 159, 160, 161, 162, 163, 164, 165,
	166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
	176, 177, 178, 179, 180, 181, 182, 183, 184, 185,
	186, 187, 188, 189, 190, 191, 192, 193, 194, 195,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 207, 208, 209, 210, 211, 212, 213, 214, 215,
	216, 217, 218, 219, 220, 222, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 233, 234, 235, 236,
	237, 238, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 280, 281, 282, 283, 284, 285, 286, 287,
	288, 289, 290, 291, 292, 293, 294, 295, 296, 297,
	298, 299, 300, 301, 302, 303, 304, 305, 306, 307,
	308, 309, 310, 311, 312, 314, 315, 316, 317, 318,
	319, 320, 321, 323, 324, 325, 326, 327, 328, 329,
	330, 331, 333, 334, 335, 336, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 349, 350,
	351, 352, 353, 354, 355, 356, 357, 358, 359, 360,
	361, 362, 363, 364, 365, 367, 368, 369, 370, 371,
	372, 373, 374, 375, 376, 377, 378, 379, 380, 381,
	382, 383, 384, 385, 386, 387, 388, 389, 390, 391,
	392, 393, 394, 395, 396, 397, 398, 400, 401, 402,
	403, 404, 405, 406, 407, 408, 409, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 422,
	423, 424, 425, 426, 427, 428, 429, 430, 431, 432,
	433, 434, 435, 436, 437, 438, 439, 440, 441, 442,
	443, 444, 445, 446, 447, 448, 450, 451, 452, 453,
	454, 455, 456, 457, 458, 459, 460, 461, 462, 463,
	464, 465, 1903, 1895, 449, 366, 332, 1899, 1900, 105,
	221, 239, 313, 322, 399, 1238, 0, 0, 0, 1244,
	0, 1322, 1324, 1241, 1266, 1267, 55, 0, 332, 366,
	449, 0, 1288, 296, 1293, 58, 50, 1289, 0, 2,
	0, 0, 1271, 0, 0, 0, 1234, 2106, 0, 0,
	0, 36, 0, 0, 0, 0, -2, 1595, 1596, 1597,
	1598, 0, 190, 0, 0, 190, 0, 0, 190, 0,
	190, 0, 0, 0, 0, 0, 1120, 0, -2, -2,
	1159, 466, 467, 468, 469, 470, 471, 472, 473, 474,
	475, 476, 477, 478, 479, 480, 481, 482, 483, 484,
	485, 486, 487, 488, 0, 72, 0, 0, 0, 0,
	0, 0, 1803, 1804, 1805, 1806, 1807, 2146, 2147, 2148,
	2149, 0, 0, 0, 0, 190, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 28, 74, 190, 28, 51, 0, 190, 28,
	190, 1525, 1151, 1152, 1153, 1154, 1155, 1156, 1165, 1168,
	1169, 1170, 1171, 1172, 1203, 152, 1165, 1165, 1165, 1178,
	1179, 1180, 1181, 1182, 1199, 1199, 1157, 1158, 1201, 1190,
	1201, 1201, 1185, 0, 1201, 28, 190, 0, 1907, 0,
	1909, 0, 1509, 1510, 1513, 1890, 332, 1891, 107, 0,
	1892, 0, 2152, 0, 0, 2158, 0, 0, 0, 0,
	0, 0, 2114, 1102, 2115, 2116, 2141, 2142, 2117, 2144,
	2145, 0, 1896, 0, 1898, 1235, 1236, 1329, 1243, 1245,
	1249, 1250, 1019, 0, 0, 0, 0, 1081, 1082, 1116,
	0, 1085, 1086, 1087, 412, 0, 1092, 1093, 416, 1204,
	259, 1106, 1095, 1096, 1097, 1098, 1099, 1100, 1135, 1225,
	445, 1101, 0, 1329, 0, 1268, 56, 1108, 0, 1111,
	1269, 0, 0, 0, 1290, 0, 0, 0, 1149, 0,
	1429, 0, 1272, 0, 1451, 0, 0, 0, 0, 0,
	190, 2106, 0, 23, 35, 0, 0, 0, 0, 0,
	1776, 1789, 1876, 1797, 0, 0, 0, 1876, 1876, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1868, 0, 0, 0, 1778, 1780, 0, 0,
	0, 0, 1781, 0, 0, 1783, 1876, 0, 0, 190,
	0, 0, 190, 0, 0, 1924, 0, 1121, 0, 73,
	0, 0, 0, 0, 0, 1923, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1878, 26, 27, 0, 0, 1880, 0, 0,
	0, 1883, 0, 1166, 1165, 0, 1173, 0, 1174, 1175,
	1176, 1177, 0, 1194, 0, 0, 0, 1196, 1192, 1200,
	0, 1183, 1184, 1201, 1201, 1188, 1885, 0, 28, 190,
	1512, 1913, 1914, 1915, 1916, 0, 0, 2118, 2119, 0,
	2154, 2121, 0, 2156, 2157, 2159, 2112, 2122, 2124, 2128,
	2130, 2131, 1499, 1500, 1501, 1502, 1503, 0, 0, 1506,
	1103, 2123, 2125, 2127, 2113, 2132, 2133, 2134, 2135, 2136,
	2137, 2138, 2139, 2140, 2120, 2150, 2151, 1897, 1252, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 582, 836, 754, 1039, 1041, 781,
	0, 728, 621, 589, 0, -2, 733, 923, 0, 1248,
	833, 48, 49, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, 578, 579, 580, 581, 583, 584,
	585, 586, 587, 588, 590, 591, 592, 593, 594, 595,
	596, 598, 599, 600, 601, 602, 603, 604, 605, 606,
	607, 608, 609, 610, 611, 612, 613, 614, 615, 616,
	617, 618, 619, 620, 622, 623, 624, 625, 626, 627,
	628, 629, 630, 631, 632, 633, 634, 635, 636, 637,
	638, 639, 640, 641, 642, 643, 644, 645, 646, 647,
	648, 649, 650, 651, 652, 653, 654, 655, 656, 657,
	658, 659, 660, 661, 662, 663, 664, 665, 666, 667,
	668, 669, 670, 671, 672, 673, 674, 675, 676, 677,
	678, 679, 680, 681, 682, 683, 684, 685, 686, 687,
	688, 689, 690, 691, 692, 693, 694, 695, 696, 697,
	698, 699, 700, 701, 702, 703, 704, 705, 706, 707,
	708, 709, 710, 711, 712, 713, 714, 715, 716, 717,
	718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
	729, 730, 731, 732, 734, 735, 736, 737, 738, 739,
	740, 741, 742, 743, 744, 745, 746, 747, 748, 749,
	750, 751, 752, 753, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	782, 783, 784, 785, 786, 787, 788, 789, 790, 791,
	792, 793, 794, 795, 796, 797, 798, 799, 800, 801,
	802, 803, 804, 805, 806, 807, 808, 809, 810, 811,
	812, 813, 814, 815, 816, 817, 818, 819, 820, 821,
	822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
	832, 834, 835, 837, 838, 839, 840, 841, 842, 843,
	844, 845, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 897, 898, 899, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 920, 921, 922, 924,
	925, 926, 927, 928, 929, 930, 931, 932, 933, 934,
	935, 936, 937, 938, 939, 940, 941, 942, 943, 944,
	945, 946, 947, 948, 949, 950, 951, 952, 953, 954,
	955, 956, 957, 958, 959, 960, 961, 962, 963, 964,
	965, 966, 967, 968, 969, 970, 971, 972, 973, 974,
	975, 976, 977, 978, 979, 980, 981, 982, 983, 984,
	985, 986, 987, 988, 989, 990, 991, 992, 993, 994,
	995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004,
	1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
	1015, 1016, 1017, 1018, 1020, 1021, 1037, 1054, 1083, 1149,
	0, 1087, 453, 1088, 1089, 1090, 1091, 0, 0, 0,
	-2, 0, 1134, 1226, 0, 0, 1252, 0, 1109, 1112,
	1113, 1160, 43, 44, 45, 46, 47, 489, 490, 491,
	492, 493, 494, 495, 496, 497, 498, 499, 500, 501,
	502, 503, 504, 505, 506, 507, 508, 509, 510, 511,
	512, 513, 514, 515, 516, 517, 518, 519, 520, 521,
	522, 523, 524, 525, 526, 527, 528, 529, 530, 531,
	532, 533, 534, 535, 536, 537, 538, 539, 540, 541,
	542, 543, 544, 545, 546, 547, 548, 549, 550, 551,
	552, 553, 554, 555, 556, 557, 558, 559, 560, 561,
	562, 563, 564, 565, 566, 1110, 0, 0, 0, 1294,
	1298, 0, 0, 1305, 0, 0, 0, 0, 0, 0,
	0, 1228, 0, 0, 0, 1564, 1431, 0, 0, 0,
	0, 1252, 1442, 0, 0, 1116, 1273, 1312, 0, 0,
	1460, 1460, 1457, 1458, 0, 53, 1602, 0, 0, 0,
	1775, 0, 0, 190, 22, 2021, 0, 2021, 0, 2062,
	2063, 0, 0, 0, 0, 0, 0, 0, 0, 1875,
	0, 0, 1808, 190, 0, 1832, 0, 0, 1711, 0,
	1665, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	1840, 1841, 0, 0, 1861, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1854, 0, 0, 1856, 1857,
	0, 1862, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1785, 1876, 0, 0,
	1787, 1876, 0, 0, 0, 1922, 0, 0, 1162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 28,
	75, 28, 52, 28, 0, 1526, 28, 1167, 0, 0,
	0, 0, 0, 0, 0, 0, 1186, 1187, 28, 1887,
	0, 0, 2153, 2155, 0, 0, 2163, 0, 1104, 1504,
	1105, 1505, 1308, 0, 1328, 1246, 1022, 1023, 1024, 1025,
	1026, 1027, 1028, -2, -2, -2, -2, -2, -2, 1035,
	1036, 1038, 0, -2, 0, 0, 1228, 0, 0, -2,
	1050, 0, 1052, 1053, 0, 0, 1229, 1059, 1230, 0,
	0, 1247, 1117, 1116, 0, 0, 0, 1143, 1144, 0,
	0, 1222, 0, 1208, 1209, 1210, 1211, 1212, 1213, 1214,
	1215, 1216, 1217, 1218, 1219, 1220, 1221, 1140, 1136, 0,
	1227, 0, 1147, 1122, 1224, 0, 0, 0, 1128, 1130,
	0, -2, 1308, 0, 1114, 1111, 1270, 1306, 0, 1296,
	0, 57, 1150, 1586, 0, 0, 1436, 1437, 0, 1438,
	1116, 1435, 1430, 1312, 0, 0, 0, 1447, 1446, 1586,
	0, 1450, 1253, 1315, 1315, 0, 1258, 0, 1315, 1315,
	1315, 1333, 318, 465, 430, 55, 1119, 0, 0, 1459,
	0, 0, 2105, 0, 1601, 1603, 1605, 1606, 1607, 0,
	1631, 0, 0, 0, 0, 0, 0, 0, 0, 2035,
	2020, 2022, 0, 0, 0, 2027, 2028, 0, 2043, 2044,
	2045, 2046, 0, 0, 2051, 0, 0, 0, 0, 2056,
	0, 0, 2059, 0, 2000, 2001, 2003, 0, 0, 2010,
	2011, 2012, 2013, 2015, -2, 2017, 0, 2035, 0, 0,
	2065, 2067, 2068, 2069, 2071, 2064, 0, 2106, 0, 1798,
	1945, 0, 0, 0, 36, 0, 1810, 190, 1629, 0,
	0, 0, 1980, 0, 0, 0, 0, 0, 0, 1530,
	0, 1980, 190, 28, 190, 28, 1834, 1837, 1839, 0,
	1860, 0, 1989, 1992, 1838, 1842, 1845, 1846, 0, 0,
	0, 0, 1850, 0, 1847, 1848, 1849, 1853, 0, 1855,
	0, 1858, 1863, 2183, 2184, 2185, 0, 0, 0, 2175,
	2177, 333, 81, 153, 0, 1650, 1777, 1790, 1876, 0,
	1953, 1872, 1779, 0, 0, 1947, 1782, 0, 1949, 0,
	1784, 1876, 0, 0, 0, 0, 0, 0, 0, 0,
	1925, 1926, 1163, 1927, 1928, 1929, 0, 1932, 1933, 0,
	0, 0, 0, 0, 1939, 1940, 1941, 1942, 1943, 1944,
	0, 0, 0, 1970, 1971, 1972, 1973, 0, 0, 0,
	0, 1978, 0, 1877, 1879, 1881, 0, 1884, 1164, 1202,
	1199, 1197, 1198, 1199, 0, 1189, 1886, 28, 1893, 2160,
	2161, 2162, 2129, 1239, 0, 1251, 1040, 0, -2, -2,
	0, 0, 1060, 0, 0, 0, 0, 1065, 0, 0,
	0, 0, -2, 1084, 1150, 1141, 1142, 0, 1094, 1205,
	0, 0, 1137, 0, 0, 1118, 1146, 0, 0, 1224,
	1224, 1224, 0, 0, 1240, 1325, 0, 1110, 0, 1297,
	1428, 0, 1567, 0, 0, 0, 1440, 1586, 1443, 1444,
	0, 0, 1449, 1310, 130, 0, 0, 0, 0, 0,
	1285, 1285, 1285, 1283, 1255, 1314, 0, 1319, 1256, 1315,
	1315, 1315, 1315, 1315, 1258, 0, 1260, 1262, 1264, 1330,
	0, 0, 0, 0, -2, 0, 1696, 1461, 1462, 1463,
	-2, 54, 1744, 0, 1611, 1746, 0, 1631, 0, 0,
	1774, 0, 1769, 0, 2021, 0, 0, 2016, 1165, 1997,
	2033, 0, 0, 2023, 2024, 2029, 2025, 2026, 0, 0,
	0, 2049, 2050, 2052, 2053, 2054, 2055, 2057, 2058, 332,
	366, 1999, 0, 0, 0, 0, 2009, 0, 2008, 2014,
	1165, 0, 1998, 0, 0, 0, 0, 1775, 0, 0,
	0, 1869, 0, 1641, 1870, 1871, 0, 0, 1625, 1628,
	0, 1710, 1769, 0, 0, 1714, 1663, 0, 0, 0,
	1980, 0, 0, 1768, 1812, 0, 0, 0, 0, 1825,
	0, 1831, 1668, -2, 0, 1833, 0, 1829, 0, 1836,
	1859, 2181, 2182, 1988, 0, 0, 0, 1843, 1851, 1844,
	1852, 1864, 1865, 0, 0, 1866, 2174, 0, 2178, 2179,
	2180, 1649, 1651, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1951, 0, 1786, 1876, 0,
	1955, 0, 1788, 1876, 0, 0, 1934, 0, 0, 0,
	0, 0, 0, 1969, 0, 0, 0, 0, 0, 28,
	1193, 1195, 1191, 1888, 1307, -2, 0, 0, 0, 0,
	-2, -2, 1051, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1067, 1068, 0,
	1231, 0, 1148, 1145, 1223, 1133, 1139, 0, 1123, 0,
	1129, 0, 0, 0, 0, 1131, 1132, 1115, 0, 1585,
	0, 0, 0, 1432, 1433, 0, 1439, 1441, 0, 1448,
	0, 1254, 0, 0, 0, 0, 0, 1280, 1284, 1281,
	1282, 1317, 0, 1257, 1261, 1263, 1265, 1274, 1332, 0,
	0, 460, 0, 1415, 0, 1471, 1694, 1695, 1696, 0,
	1531, 1746, 0, 1604, 1608, 1754, 1745, 0, 0, 1632,
	1634, 1635, 1654, 0, 1602, 0, 0, 2110, 1775, 0,
	0, 2035, 0, 0, 2038, 2036, 0, 0, 0, 0,
	2047, 2048, 2002, 2004, 2005, 2006, 2007, 0, 0, 2073,
	2066, 2070, 0, 0, 0, 1957, 1963, 0, 1809, 0,
	1646, 1624, 0, 1626, 1627, 1980, 0, 1981, 0, 1983,
	0, 0, 1664, 1763, 0, 1716, 0, 0, 1721, 0,
	1578, 1578, 0, 0, 1816, 1826, 1874, 1529, 1672, 0,
	0, 0, 0, 1820, 1822, 1823, 0, 0, 0, 1678,
	0, 1693, 1681, 0, 0, 0, 0, 1696, -2, 1691,
	1821, 0, 1669, 0, 0, 0, 0, 28, 28, 1990,
	1991, 2164, 2165, 2166, 2167, 2168, 2169, 1206, 259, 1210,
	1211, 1994, 1867, 2186, 2176, 1946, 0, 0, 0, 0,
	1954, 0, 0, 1948, 1959, 1950, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1931, 1930, 0, 0, 1937,
	0, 1967, 1968, 1974, 1975, 1976, 1977, 28, 1882, -2,
	-2, 0, 0, 0, -2, 1066, 1069, 1070, 1071, 1072,
	1073, 1074, -2, -2, -2, -2, -2, -2, -2, -2,
	1138, 1224, 1124, 1126, 1127, 1301, 0, 0, 1570, 0,
	0, 1445, 1311, 1313, 1275, 0, 1277, 0, 0, 0,
	1279, 0, 0, 1259, 0, 1334, 1338, 0, 0, 0,
	0, 1374, 1414, 0, 1586, 1453, 1553, 1553, 0, 1455,
	1468, 0, 1471, 0, 1754, 0, 0, 0, 39, 0,
	0, 1630, 0, 1636, 0, 1746, 0, 1631, 0, 2101,
	0, 0, 0, 0, 1995, 0, 1339, 0, 1161, 0,
	-2, 2030, 0, 2031, 2041, 2018, 0, 2083, 0, 2100,
	0, 0, 0, 0, 0, 1811, 1654, 0, 1622, 1623,
	1712, 1726, 1982, 1986, 1984, 1985, 1987, 1726, 0, 1726,
	0, 0, 1572, 25, 0, 1573, 0, 1813, 0, 0,
	1673, 1666, 0, 1814, 0, 1818, 1507, 1508, 0, 0,
	1873, 1676, 1677, 1679, 1684, 1685, 0, 1692, 1682, 1683,
	0, 0, 0, 0, 0, 1348, 1671, 1819, 1828, 1835,
	0, 0, 0, 0, 1800, 0, 1801, 1800, 0, 0,
	1961, 1952, 0, 0, 0, 1965, 1956, 0, 1935, 1936,
	0, 1979, -2, -2, -2, 0, 1304, 0, 0, 1563,
	1308, 0, 1566, 0, 1276, 0, 1287, 1278, 0, 1318,
	1333, 0, 1336, 0, 0, 1351, 0, 99, 0, 1355,
	0, 0, 1376, 1413, 1452, 1454, 0, 0, 0, 1548,
	0, 1470, 1472, 1473, 1534, 1534, 1476, 1477, 1534, 1534,
	0, 0, 0, 1487, 1495, 1308, 1466, 39, 0, 59,
	1609, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620,
	1621, 1610, 1758, 0, 0, 1753, 0, 1633, 1653, 0,
	1656, 1657, 0, 0, 1702, 1665, 0, 0, 0, 0,
	0, 1659, 0, 1654, 1754, 1744, 1746, 1631, 0, 0,
	0, 0, 0, 1769, 0, 2021, 1341, 2042, 2034, 0,
	2039, 2040, 0, 2019, 2089, 2085, 2072, 2074, 0, 2077,
	2078, 1980, 0, 2110, 1775, 0, 0, 0, 1652, 0,
	2171, 0, 2171, 0, 2171, 1722, 1723, 259, 1581, 24,
	1577, 1578, 1817, 1827, 1667, 0, 1680, 1686, 1687, 1688,
	1690, 0, 2173, 0, 0, 1993, 1958, 1964, 1791, 1799,
	0, 0, 1793, 0, 1960, 0, 1800, 0, 0, 1938,
	1125, 1295, 0, 0, 0, 0, 1565, 1571, 1434, 0,
	1316, 1331, 1335, 0, 0, 1361, 0, 1352, 0, 1353,
	1349, 1350, 0, 0, 0, 1358, 1378, 0, 0, 0,
	1552, 0, 1550, 0, 1533, 0, 0, 0, 0, 0,
	0, 1486, 1469, 0, 1489, 1490, 1491, 1492, 1493, 0,
	1456, 1758, 0, 1743, 1760, 0, 37, 38, 0, 0,
	1658, 1660, 1701, 2171, 2171, 0, 1706, 2106, 0, 1661,
	1662, 1637, 39, 1746, 1754, 0, 2107, 0, 0, 2110,
	1771, 0, 1340, 2035, 2037, 2032, 0, 0, 0, 2084,
	2075, 1534, 2079, 2080, 0, 2099, 2102, 0, 0, 1643,
	0, 0, 0, 0, 1647, 1762, 0, 0, 1762, 2106,
	1762, 0, 1584, 1579, 1580, 1581, 1574, 0, 1700, 1830,
	0, 1347, 1207, 0, 1802, 0, 1962, 1795, 0, 1966,
	0, 0, 0, 1308, 1321, 0, 1344, 0, 1359, 0,
	1363, 0, 1354, 1356, 0, 1357, 0, 0, 1375, 1412,
	1543, 1544, 0, 0, 1555, 1545, 0, 0, 0, 1474,
	1475, 1478, 1479, 1480, 1481, 0, 1484, 1485, 1488, 0,
	1496, 1498, 1760, 60, 1589, 0, 0, 0, 1748, 1578,
	1578, 0, 1655, 0, 1762, 1762, 0, 1730, 0, 1758,
	1754, 39, 1746, 2108, 2109, 2103, 1665, 0, 0, 1996,
	0, 0, 2082, 2086, 2087, 0, 0, 0, 1638, 0,
	1642, 1639, 0, 1645, 0, 1980, 0, 2170, 0, 0,
	1980, 1730, 1308, 0, 1575, 0, 1584, 1815, 1824, 0,
	2172, 1800, 1800, 0, 0, 0, 0, 1562, 1286, 0,
	1337, 0, 1348, 1362, 1365, 1366, 0, 0, 0, 1371,
	0, 1364, 0, 0, 1377, 1379, 0, 1546, 0, 1547,
	1556, 0, 0, 0, 0, 1549, 1551, 1482, 1483, 1494,
	0, 1587, 1759, 1755, 0, 0, 1747, 0, 25, 25,
	0, 1703, 1704, 1720, 1735, 0, 1700, 0, 1760, 39,
	1758, 1754, 1775, 0, 0, 0, 2090, 2091, 0, 2076,
	2081, 0, 2110, 1644, 0, 1648, 1713, 0, 0, 2188,
	2190, 1725, 1715, 1735, 1980, 1724, 1582, 1583, 1576, 0,
	1674, 1792, 1794, 1800, 0, 0, 0, 1320, 1345, 1346,
	1367, 1368, 1369, 1370, 1372, 0, 0, 0, 0, 1554,
	0, 0, 1560, 0, 1497, 1756, 1757, 1749, 1750, 24,
	1751, 1578, 1705, 0, 1707, 1731, 1732, 0, 1727, 1728,
	1729, 1708, 0, 1591, 1758, 1760, 39, 1760, 0, 1772,
	1771, 0, 2088, 2089, 2104, 0, 0, 2187, 0, 0,
	1980, 1718, 1675, 1699, 1796, 0, 0, 0, 0, 0,
	0, 1418, 0, -2, 1380, 1381, 0, 0, 0, 25,
	1719, 1733, 0, 1734, 0, 0, 0, 0, 1760, 1590,
	1758, 1308, 1770, 0, 1665, 2094, 0, 0, 1761, 2189,
	2191, 1717, 0, 1303, 1299, 1300, 0, 1397, 0, 0,
	1427, 0, 1416, 1557, 1558, 0, 1561, 1752, 1736, 0,
	1739, 1740, 0, 1737, 1709, 1588, 1760, 1764, 1773, 1775,
	0, 2092, 2095, 2096, 2097, 2098, 0, 1640, 0, 1360,
	0, 0, 0, 1383, 1384, 1385, 1386, 1387, 1388, 1391,
	1419, 1420, 1406, 1427, 1427, 0, 0, 0, 1738, 2106,
	2106, 1592, 1760, 2060, 0, 0, 0, 1373, 0, 1382,
	1389, 1390, 1411, 0, 0, 1406, 1397, 1426, 0, 0,
	0, 1741, 1742, 1308, 2093, 0, 0, 1396, 1395, 0,
	0, 1398, 0, 1400, 0, 0, 0, 1411, 1423, 0,
	0, 1559, 1765, 2094, 1302, 1421, 0, 1408, 1410, 1399,
	1401, 0, 1404, 0, 1405, 1395, 0, 0, 0, 0,
	0, 0, 1402, 1403, 1422, 1424, 0, 2061, 1392, 1393,
	0, 0, 0, 0, 1407, 1409, 1425, 0, 1394,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 540, 3, 3,
	533, 534, 538, 536, 543, 537, 535, 539, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 544, 542,
	527, 529, 528, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 531, 3, 532, 541,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var yyTok3 = [...]uint16{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 464, 57807, 465, 57808, 466, 57809, 467,
	57810, 468, 57811, 469, 57812, 470, 57813, 471, 57814, 472,
	57815, 473, 57816, 474, 57817, 475, 57818, 476, 57819, 477,
	57820, 478, 57821, 479, 57822, 480, 57823, 481, 57824, 482,
	57825, 483, 57826, 484, 57827, 485, 57828, 486, 57829, 487,
	57830, 488, 57831, 489, 57832, 490, 57833, 491, 57834, 492,
	57835, 493, 57836, 494, 57837, 495, 57838, 496, 57839, 497,
	57840, 498, 57841, 499, 57842, 500, 57843, 501, 57844, 502,
	57845, 503, 57846, 504, 57847, 505, 57848, 506, 57849, 507,
	57850, 508, 57851, 509, 57852, 510, 57853, 511, 57854, 512,
	57855, 513, 57856, 514, 57857, 515, 57858, 516, 57859, 517,
	57860, 518, 57861, 519, 57862, 520, 57863, 521, 57864, 522,
	57865, 523, 57866, 524, 57867, 525, 57868, 526, 57869, 530,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:446
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:461
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:469
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:484
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:495
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:496
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:497
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:498
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:499
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:500
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:501
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:502
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:503
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:504
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:505
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:506
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:507
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:508
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:509
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:510
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:512
		{
			yyVAL.stmt = nil
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:523
		{
			yyVAL.str = yyDollar[1].str
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:524
		{
			yyVAL.str = ""
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:528
		{
			yyVAL.list = yyDollar[1].list
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:529
		{
			yyVAL.list = nil
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:533
		{
			yyVAL.dropBehav = ast.DropCascade
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:534
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 28:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:535
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 29:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:539
		{
			yyVAL.ival = 1
		}
	case 30:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:540
		{
			yyVAL.ival = 0
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:544
		{
			yyVAL.ival = 1
		}
	case 32:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:545
		{
			yyVAL.ival = 0
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:549
		{
			yyVAL.ival = 1
		}
	case 34:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:550
		{
			yyVAL.ival = 0
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:554
		{
			yyVAL.bval = true
		}
	case 36:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:555
		{
			yyVAL.bval = false
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:559
		{
			yyVAL.list = yyDollar[2].list
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:560
		{
			yyVAL.list = nil
		}
	case 39:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:561
		{
			yyVAL.list = nil
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:570
		{
			yyVAL.str = yyDollar[1].str
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:571
		{
			yyVAL.str = yyDollar[1].str
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:572
		{
			yyVAL.str = yyDollar[1].str
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:576
		{
			yyVAL.str = yyDollar[1].str
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:577
		{
			yyVAL.str = yyDollar[1].str
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:578
		{
			yyVAL.str = yyDollar[1].str
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:579
		{
			yyVAL.str = yyDollar[1].str
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:580
		{
			yyVAL.str = yyDollar[1].str
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:583
		{
			yyVAL.str = yyDollar[1].str
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:584
		{
			yyVAL.str = yyDollar[1].str
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:587
		{
			yyVAL.str = yyDollar[1].str
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:592
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:596
		{
			list := yyDollar[1].list
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = list
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:605
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:609
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:617
		{
			yyVAL.rangevar = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:624
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list.Items) == 1 {
				if str, ok := yyDollar[2].list.Items[0].(*ast.String); ok {
					yyVAL.rangevar = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.rangevar = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.rangevar = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:653
		{
			yyVAL.list = yyDollar[2].list
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:654
		{
			yyVAL.list = nil
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:659
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:663
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:676
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:682
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:688
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:694
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:700
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:707
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:714
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_UNLOGGED
			yyVAL.node = rangeVar
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:720
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:726
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:735
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:739
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				nodes.Append(item)
			}
			yyVAL.list = nodes
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:751
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:755
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].list)
			yyVAL.list = list
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:765
		{
			yyVAL.str = "abort"
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:766
		{
			yyVAL.str = "absent"
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:767
		{
			yyVAL.str = "absolute"
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:768
		{
			yyVAL.str = "access"
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:769
		{
			yyVAL.str = "action"
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:770
		{
			yyVAL.str = "add"
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:771
		{
			yyVAL.str = "admin"
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:772
		{
			yyVAL.str = "after"
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:773
		{
			yyVAL.str = "aggregate"
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:774
		{
			yyVAL.str = "also"
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:775
		{
			yyVAL.str = "alter"
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:776
		{
			yyVAL.str = "always"
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:777
		{
			yyVAL.str = "asensitive"
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:778
		{
			yyVAL.str = "assertion"
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:779
		{
			yyVAL.str = "assignment"
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:780
		{
			yyVAL.str = "at"
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:781
		{
			yyVAL.str = "atomic"
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:782
		{
			yyVAL.str = "attach"
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:783
		{
			yyVAL.str = "attribute"
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:784
		{
			yyVAL.str = "backward"
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:785
		{
			yyVAL.str = "before"
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:786
		{
			yyVAL.str = "begin"
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:787
		{
			yyVAL.str = "breadth"
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:788
		{
			yyVAL.str = "by"
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:789
		{
			yyVAL.str = "cache"
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:790
		{
			yyVAL.str = "call"
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:791
		{
			yyVAL.str = "called"
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:792
		{
			yyVAL.str = "cascade"
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:793
		{
			yyVAL.str = "cascaded"
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:794
		{
			yyVAL.str = "catalog"
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:795
		{
			yyVAL.str = "chain"
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:796
		{
			yyVAL.str = "characteristics"
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:797
		{
			yyVAL.str = "checkpoint"
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:798
		{
			yyVAL.str = "class"
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:799
		{
			yyVAL.str = "close"
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:800
		{
			yyVAL.str = "cluster"
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:801
		{
			yyVAL.str = "columns"
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:802
		{
			yyVAL.str = "comment"
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:803
		{
			yyVAL.str = "comments"
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:804
		{
			yyVAL.str = "commit"
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:805
		{
			yyVAL.str = "committed"
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:806
		{
			yyVAL.str = "compression"
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:807
		{
			yyVAL.str = "conditional"
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:808
		{
			yyVAL.str = "configuration"
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:809
		{
			yyVAL.str = "conflict"
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:810
		{
			yyVAL.str = "connection"
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:811
		{
			yyVAL.str = "constraints"
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:812
		{
			yyVAL.str = "content"
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:813
		{
			yyVAL.str = "continue"
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:814
		{
			yyVAL.str = "conversion"
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:815
		{
			yyVAL.str = "copy"
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:816
		{
			yyVAL.str = "cost"
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:817
		{
			yyVAL.str = "csv"
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:818
		{
			yyVAL.str = "cube"
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:819
		{
			yyVAL.str = "current"
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:820
		{
			yyVAL.str = "cursor"
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:821
		{
			yyVAL.str = "cycle"
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:822
		{
			yyVAL.str = "data"
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:823
		{
			yyVAL.str = "database"
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:824
		{
			yyVAL.str = "day"
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:825
		{
			yyVAL.str = "deallocate"
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:826
		{
			yyVAL.str = "declare"
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:827
		{
			yyVAL.str = "defaults"
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:828
		{
			yyVAL.str = "deferred"
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:829
		{
			yyVAL.str = "definer"
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:830
		{
			yyVAL.str = "delete"
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:831
		{
			yyVAL.str = "delimiter"
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:832
		{
			yyVAL.str = "delimiters"
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:833
		{
			yyVAL.str = "depends"
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:834
		{
			yyVAL.str = "depth"
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:835
		{
			yyVAL.str = "detach"
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:836
		{
			yyVAL.str = "dictionary"
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:837
		{
			yyVAL.str = "disable"
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:838
		{
			yyVAL.str = "discard"
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:839
		{
			yyVAL.str = "document"
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:840
		{
			yyVAL.str = "domain"
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:841
		{
			yyVAL.str = "double"
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:842
		{
			yyVAL.str = "drop"
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:843
		{
			yyVAL.str = "each"
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:844
		{
			yyVAL.str = "empty"
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:845
		{
			yyVAL.str = "enable"
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:846
		{
			yyVAL.str = "encoding"
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:847
		{
			yyVAL.str = "encrypted"
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:848
		{
			yyVAL.str = "enum"
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:849
		{
			yyVAL.str = "error"
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:850
		{
			yyVAL.str = "escape"
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:851
		{
			yyVAL.str = "event"
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:852
		{
			yyVAL.str = "exclude"
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:853
		{
			yyVAL.str = "excluding"
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:854
		{
			yyVAL.str = "exclusive"
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:855
		{
			yyVAL.str = "execute"
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:856
		{
			yyVAL.str = "explain"
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:857
		{
			yyVAL.str = "expression"
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:858
		{
			yyVAL.str = "extension"
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:859
		{
			yyVAL.str = "external"
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:860
		{
			yyVAL.str = "family"
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:861
		{
			yyVAL.str = "filter"
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:862
		{
			yyVAL.str = "finalize"
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:863
		{
			yyVAL.str = "first"
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:864
		{
			yyVAL.str = "following"
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:865
		{
			yyVAL.str = "force"
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:866
		{
			yyVAL.str = "format"
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:867
		{
			yyVAL.str = "forward"
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:868
		{
			yyVAL.str = "function"
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:869
		{
			yyVAL.str = "functions"
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:870
		{
			yyVAL.str = "generated"
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:871
		{
			yyVAL.str = "global"
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:872
		{
			yyVAL.str = "granted"
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:873
		{
			yyVAL.str = "groups"
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:874
		{
			yyVAL.str = "handler"
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:875
		{
			yyVAL.str = "header"
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:876
		{
			yyVAL.str = "hold"
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:877
		{
			yyVAL.str = "hour"
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:878
		{
			yyVAL.str = "identity"
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:879
		{
			yyVAL.str = "if"
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:880
		{
			yyVAL.str = "immediate"
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:881
		{
			yyVAL.str = "immutable"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:882
		{
			yyVAL.str = "implicit"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:883
		{
			yyVAL.str = "import"
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:884
		{
			yyVAL.str = "include"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:885
		{
			yyVAL.str = "including"
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:886
		{
			yyVAL.str = "increment"
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:887
		{
			yyVAL.str = "indent"
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:888
		{
			yyVAL.str = "index"
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:889
		{
			yyVAL.str = "indexes"
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:890
		{
			yyVAL.str = "inherit"
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:891
		{
			yyVAL.str = "inherits"
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:892
		{
			yyVAL.str = "inline"
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:893
		{
			yyVAL.str = "input"
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:894
		{
			yyVAL.str = "insensitive"
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:895
		{
			yyVAL.str = "insert"
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:896
		{
			yyVAL.str = "instead"
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:897
		{
			yyVAL.str = "invoker"
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:898
		{
			yyVAL.str = "isolation"
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:899
		{
			yyVAL.str = "keep"
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:900
		{
			yyVAL.str = "key"
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:901
		{
			yyVAL.str = "keys"
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:902
		{
			yyVAL.str = "label"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:903
		{
			yyVAL.str = "language"
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:904
		{
			yyVAL.str = "large"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:905
		{
			yyVAL.str = "last"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:906
		{
			yyVAL.str = "leakproof"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:907
		{
			yyVAL.str = "level"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:908
		{
			yyVAL.str = "listen"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:909
		{
			yyVAL.str = "load"
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:910
		{
			yyVAL.str = "local"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:911
		{
			yyVAL.str = "location"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:912
		{
			yyVAL.str = "lock"
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:913
		{
			yyVAL.str = "locked"
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:914
		{
			yyVAL.str = "logged"
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:915
		{
			yyVAL.str = "mapping"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:916
		{
			yyVAL.str = "match"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:917
		{
			yyVAL.str = "matched"
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:918
		{
			yyVAL.str = "materialized"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:919
		{
			yyVAL.str = "maxvalue"
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:920
		{
			yyVAL.str = "merge"
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:921
		{
			yyVAL.str = "method"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:922
		{
			yyVAL.str = "minute"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:923
		{
			yyVAL.str = "minvalue"
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:924
		{
			yyVAL.str = "mode"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:925
		{
			yyVAL.str = "month"
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:926
		{
			yyVAL.str = "move"
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:927
		{
			yyVAL.str = "name"
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:928
		{
			yyVAL.str = "names"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:929
		{
			yyVAL.str = "nested"
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:930
		{
			yyVAL.str = "new"
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:931
		{
			yyVAL.str = "next"
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:932
		{
			yyVAL.str = "nfc"
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:933
		{
			yyVAL.str = "nfd"
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:934
		{
			yyVAL.str = "nfkc"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:935
		{
			yyVAL.str = "nfkd"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:936
		{
			yyVAL.str = "no"
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:937
		{
			yyVAL.str = "normalized"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:938
		{
			yyVAL.str = "nothing"
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:939
		{
			yyVAL.str = "notify"
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:940
		{
			yyVAL.str = "nowait"
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:941
		{
			yyVAL.str = "nulls"
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:942
		{
			yyVAL.str = "object"
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:943
		{
			yyVAL.str = "of"
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:944
		{
			yyVAL.str = "off"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:945
		{
			yyVAL.str = "oids"
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:946
		{
			yyVAL.str = "old"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:947
		{
			yyVAL.str = "omit"
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:948
		{
			yyVAL.str = "operator"
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:949
		{
			yyVAL.str = "option"
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:950
		{
			yyVAL.str = "options"
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:951
		{
			yyVAL.str = "ordinality"
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:952
		{
			yyVAL.str = "others"
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:953
		{
			yyVAL.str = "over"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:954
		{
			yyVAL.str = "overriding"
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:955
		{
			yyVAL.str = "owned"
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:956
		{
			yyVAL.str = "owner"
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:957
		{
			yyVAL.str = "parallel"
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:958
		{
			yyVAL.str = "parameter"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:959
		{
			yyVAL.str = "parser"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:960
		{
			yyVAL.str = "partial"
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:961
		{
			yyVAL.str = "partition"
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:962
		{
			yyVAL.str = "passing"
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:963
		{
			yyVAL.str = "password"
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:964
		{
			yyVAL.str = "path"
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:965
		{
			yyVAL.str = "plan"
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:966
		{
			yyVAL.str = "plans"
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:967
		{
			yyVAL.str = "policy"
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:968
		{
			yyVAL.str = "preceding"
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:969
		{
			yyVAL.str = "prepare"
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:970
		{
			yyVAL.str = "prepared"
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:971
		{
			yyVAL.str = "preserve"
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:972
		{
			yyVAL.str = "prior"
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:973
		{
			yyVAL.str = "privileges"
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:974
		{
			yyVAL.str = "procedural"
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:975
		{
			yyVAL.str = "procedure"
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:976
		{
			yyVAL.str = "procedures"
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:977
		{
			yyVAL.str = "program"
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:978
		{
			yyVAL.str = "publication"
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:979
		{
			yyVAL.str = "quote"
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:980
		{
			yyVAL.str = "quotes"
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:981
		{
			yyVAL.str = "range"
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:982
		{
			yyVAL.str = "read"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:983
		{
			yyVAL.str = "reassign"
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:984
		{
			yyVAL.str = "recheck"
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:985
		{
			yyVAL.str = "recursive"
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:986
		{
			yyVAL.str = "ref"
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:987
		{
			yyVAL.str = "referencing"
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:988
		{
			yyVAL.str = "refresh"
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:989
		{
			yyVAL.str = "reindex"
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:990
		{
			yyVAL.str = "relative"
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:991
		{
			yyVAL.str = "release"
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:992
		{
			yyVAL.str = "rename"
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:993
		{
			yyVAL.str = "repeatable"
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:994
		{
			yyVAL.str = "replace"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:995
		{
			yyVAL.str = "replica"
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:996
		{
			yyVAL.str = "reset"
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:997
		{
			yyVAL.str = "restart"
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:998
		{
			yyVAL.str = "restrict"
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:999
		{
			yyVAL.str = "return"
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1000
		{
			yyVAL.str = "returns"
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1001
		{
			yyVAL.str = "revoke"
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1002
		{
			yyVAL.str = "role"
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1003
		{
			yyVAL.str = "rollback"
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1004
		{
			yyVAL.str = "rollup"
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1005
		{
			yyVAL.str = "routine"
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1006
		{
			yyVAL.str = "routines"
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1007
		{
			yyVAL.str = "rows"
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1008
		{
			yyVAL.str = "rule"
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1009
		{
			yyVAL.str = "savepoint"
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1010
		{
			yyVAL.str = "scalar"
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1011
		{
			yyVAL.str = "schema"
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1012
		{
			yyVAL.str = "schemas"
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1013
		{
			yyVAL.str = "scroll"
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1014
		{
			yyVAL.str = "search"
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1015
		{
			yyVAL.str = "second"
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1016
		{
			yyVAL.str = "security"
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1017
		{
			yyVAL.str = "sequence"
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1018
		{
			yyVAL.str = "sequences"
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1019
		{
			yyVAL.str = "serializable"
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1020
		{
			yyVAL.str = "server"
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1021
		{
			yyVAL.str = "session"
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1022
		{
			yyVAL.str = "set"
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1023
		{
			yyVAL.str = "sets"
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1024
		{
			yyVAL.str = "share"
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1025
		{
			yyVAL.str = "show"
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1026
		{
			yyVAL.str = "simple"
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1027
		{
			yyVAL.str = "skip"
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1028
		{
			yyVAL.str = "snapshot"
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1029
		{
			yyVAL.str = "source"
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1030
		{
			yyVAL.str = "sql"
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1031
		{
			yyVAL.str = "stable"
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1032
		{
			yyVAL.str = "standalone"
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1033
		{
			yyVAL.str = "start"
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1034
		{
			yyVAL.str = "statement"
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1035
		{
			yyVAL.str = "statistics"
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1036
		{
			yyVAL.str = "stdin"
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1037
		{
			yyVAL.str = "stdout"
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1038
		{
			yyVAL.str = "storage"
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1039
		{
			yyVAL.str = "stored"
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1040
		{
			yyVAL.str = "strict"
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1041
		{
			yyVAL.str = "string"
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1042
		{
			yyVAL.str = "strip"
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1043
		{
			yyVAL.str = "subscription"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1044
		{
			yyVAL.str = "support"
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1045
		{
			yyVAL.str = "sysid"
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1046
		{
			yyVAL.str = "system"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1047
		{
			yyVAL.str = "tables"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1048
		{
			yyVAL.str = "tablespace"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1049
		{
			yyVAL.str = "target"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1050
		{
			yyVAL.str = "temp"
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1051
		{
			yyVAL.str = "template"
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1052
		{
			yyVAL.str = "temporary"
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1053
		{
			yyVAL.str = "text"
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1054
		{
			yyVAL.str = "ties"
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1055
		{
			yyVAL.str = "transaction"
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1056
		{
			yyVAL.str = "transform"
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1057
		{
			yyVAL.str = "trigger"
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1058
		{
			yyVAL.str = "truncate"
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1059
		{
			yyVAL.str = "trusted"
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1060
		{
			yyVAL.str = "type"
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1061
		{
			yyVAL.str = "types"
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1062
		{
			yyVAL.str = "uescape"
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1063
		{
			yyVAL.str = "unbounded"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1064
		{
			yyVAL.str = "uncommitted"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1065
		{
			yyVAL.str = "unconditional"
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1066
		{
			yyVAL.str = "unencrypted"
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1067
		{
			yyVAL.str = "unknown"
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1068
		{
			yyVAL.str = "unlisten"
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1069
		{
			yyVAL.str = "unlogged"
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1070
		{
			yyVAL.str = "until"
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1071
		{
			yyVAL.str = "update"
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1072
		{
			yyVAL.str = "vacuum"
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1073
		{
			yyVAL.str = "valid"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1074
		{
			yyVAL.str = "validate"
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1075
		{
			yyVAL.str = "validator"
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1076
		{
			yyVAL.str = "value"
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1077
		{
			yyVAL.str = "varying"
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1078
		{
			yyVAL.str = "version"
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1079
		{
			yyVAL.str = "view"
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1080
		{
			yyVAL.str = "views"
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1081
		{
			yyVAL.str = "volatile"
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1082
		{
			yyVAL.str = "whitespace"
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1083
		{
			yyVAL.str = "within"
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1084
		{
			yyVAL.str = "without"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1085
		{
			yyVAL.str = "work"
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1086
		{
			yyVAL.str = "wrapper"
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1087
		{
			yyVAL.str = "write"
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1088
		{
			yyVAL.str = "xml"
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1089
		{
			yyVAL.str = "year"
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1090
		{
			yyVAL.str = "yes"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1091
		{
			yyVAL.str = "zone"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1105
		{
			yyVAL.str = "between"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1106
		{
			yyVAL.str = "bigint"
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1107
		{
			yyVAL.str = "bit"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1108
		{
			yyVAL.str = "boolean"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1109
		{
			yyVAL.str = "char"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1110
		{
			yyVAL.str = "character"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1111
		{
			yyVAL.str = "coalesce"
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1112
		{
			yyVAL.str = "dec"
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1113
		{
			yyVAL.str = "decimal"
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1114
		{
			yyVAL.str = "exists"
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1115
		{
			yyVAL.str = "extract"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1116
		{
			yyVAL.str = "float"
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1117
		{
			yyVAL.str = "greatest"
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1118
		{
			yyVAL.str = "grouping"
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1119
		{
			yyVAL.str = "inout"
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1120
		{
			yyVAL.str = "int"
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1121
		{
			yyVAL.str = "integer"
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1122
		{
			yyVAL.str = "interval"
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1123
		{
			yyVAL.str = "json"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1124
		{
			yyVAL.str = "json_array"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1125
		{
			yyVAL.str = "json_arrayagg"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1126
		{
			yyVAL.str = "json_exists"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1127
		{
			yyVAL.str = "json_object"
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1128
		{
			yyVAL.str = "json_objectagg"
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1129
		{
			yyVAL.str = "json_query"
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1130
		{
			yyVAL.str = "json_scalar"
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1131
		{
			yyVAL.str = "json_serialize"
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1132
		{
			yyVAL.str = "json_table"
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1133
		{
			yyVAL.str = "json_value"
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1134
		{
			yyVAL.str = "least"
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1135
		{
			yyVAL.str = "merge_action"
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1136
		{
			yyVAL.str = "national"
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1137
		{
			yyVAL.str = "nchar"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1138
		{
			yyVAL.str = "none"
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1139
		{
			yyVAL.str = "normalize"
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1140
		{
			yyVAL.str = "nullif"
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1141
		{
			yyVAL.str = "numeric"
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1142
		{
			yyVAL.str = "out"
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1143
		{
			yyVAL.str = "overlay"
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1144
		{
			yyVAL.str = "position"
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1145
		{
			yyVAL.str = "precision"
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1146
		{
			yyVAL.str = "real"
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1147
		{
			yyVAL.str = "row"
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1148
		{
			yyVAL.str = "setof"
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1149
		{
			yyVAL.str = "smallint"
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1150
		{
			yyVAL.str = "substring"
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1151
		{
			yyVAL.str = "time"
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1152
		{
			yyVAL.str = "timestamp"
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1153
		{
			yyVAL.str = "treat"
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1154
		{
			yyVAL.str = "trim"
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1155
		{
			yyVAL.str = "values"
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1156
		{
			yyVAL.str = "varchar"
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1157
		{
			yyVAL.str = "xmlattributes"
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1158
		{
			yyVAL.str = "xmlconcat"
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1159
		{
			yyVAL.str = "xmlelement"
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1160
		{
			yyVAL.str = "xmlexists"
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1161
		{
			yyVAL.str = "xmlforest"
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1162
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1163
		{
			yyVAL.str = "xmlparse"
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1164
		{
			yyVAL.str = "xmlpi"
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1165
		{
			yyVAL.str = "xmlroot"
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1166
		{
			yyVAL.str = "xmlserialize"
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1167
		{
			yyVAL.str = "xmltable"
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1181
		{
			yyVAL.str = "authorization"
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1182
		{
			yyVAL.str = "binary"
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1183
		{
			yyVAL.str = "collation"
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1184
		{
			yyVAL.str = "concurrently"
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1185
		{
			yyVAL.str = "cross"
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1186
		{
			yyVAL.str = "current_schema"
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1187
		{
			yyVAL.str = "freeze"
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1188
		{
			yyVAL.str = "full"
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1189
		{
			yyVAL.str = "ilike"
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1190
		{
			yyVAL.str = "inner"
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1191
		{
			yyVAL.str = "is"
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1192
		{
			yyVAL.str = "isnull"
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1193
		{
			yyVAL.str = "join"
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1194
		{
			yyVAL.str = "left"
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1195
		{
			yyVAL.str = "like"
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1196
		{
			yyVAL.str = "natural"
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1197
		{
			yyVAL.str = "notnull"
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1198
		{
			yyVAL.str = "outer"
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1199
		{
			yyVAL.str = "overlaps"
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1200
		{
			yyVAL.str = "right"
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1201
		{
			yyVAL.str = "similar"
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1202
		{
			yyVAL.str = "tablesample"
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1203
		{
			yyVAL.str = "verbose"
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1213
		{
			yyVAL.str = "all"
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1214
		{
			yyVAL.str = "analyse"
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1215
		{
			yyVAL.str = "analyze"
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1216
		{
			yyVAL.str = "and"
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1217
		{
			yyVAL.str = "any"
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1218
		{
			yyVAL.str = "array"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1219
		{
			yyVAL.str = "as"
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1220
		{
			yyVAL.str = "asc"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1221
		{
			yyVAL.str = "asymmetric"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1222
		{
			yyVAL.str = "both"
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1223
		{
			yyVAL.str = "case"
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1224
		{
			yyVAL.str = "cast"
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1225
		{
			yyVAL.str = "check"
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1226
		{
			yyVAL.str = "collate"
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1227
		{
			yyVAL.str = "column"
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1228
		{
			yyVAL.str = "constraint"
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1229
		{
			yyVAL.str = "create"
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1230
		{
			yyVAL.str = "current_catalog"
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1231
		{
			yyVAL.str = "current_date"
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1232
		{
			yyVAL.str = "current_role"
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1233
		{
			yyVAL.str = "current_time"
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1234
		{
			yyVAL.str = "current_timestamp"
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1235
		{
			yyVAL.str = "current_user"
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1236
		{
			yyVAL.str = "default"
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1237
		{
			yyVAL.str = "deferrable"
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1238
		{
			yyVAL.str = "desc"
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1239
		{
			yyVAL.str = "distinct"
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1240
		{
			yyVAL.str = "do"
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1241
		{
			yyVAL.str = "else"
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1242
		{
			yyVAL.str = "end"
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1243
		{
			yyVAL.str = "except"
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1244
		{
			yyVAL.str = "false"
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1245
		{
			yyVAL.str = "fetch"
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1246
		{
			yyVAL.str = "for"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1247
		{
			yyVAL.str = "foreign"
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1248
		{
			yyVAL.str = "from"
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1249
		{
			yyVAL.str = "grant"
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1250
		{
			yyVAL.str = "group"
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1251
		{
			yyVAL.str = "having"
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1252
		{
			yyVAL.str = "in"
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1253
		{
			yyVAL.str = "initially"
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1254
		{
			yyVAL.str = "intersect"
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1255
		{
			yyVAL.str = "into"
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1256
		{
			yyVAL.str = "lateral"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1257
		{
			yyVAL.str = "leading"
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1258
		{
			yyVAL.str = "limit"
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1259
		{
			yyVAL.str = "localtime"
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1260
		{
			yyVAL.str = "localtimestamp"
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1261
		{
			yyVAL.str = "not"
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1262
		{
			yyVAL.str = "null"
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1263
		{
			yyVAL.str = "offset"
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1264
		{
			yyVAL.str = "on"
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1265
		{
			yyVAL.str = "only"
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1266
		{
			yyVAL.str = "or"
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1267
		{
			yyVAL.str = "order"
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1268
		{
			yyVAL.str = "placing"
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1269
		{
			yyVAL.str = "primary"
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1270
		{
			yyVAL.str = "references"
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1271
		{
			yyVAL.str = "returning"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1272
		{
			yyVAL.str = "select"
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1273
		{
			yyVAL.str = "session_user"
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1274
		{
			yyVAL.str = "some"
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1275
		{
			yyVAL.str = "symmetric"
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1276
		{
			yyVAL.str = "system_user"
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1277
		{
			yyVAL.str = "table"
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1278
		{
			yyVAL.str = "then"
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1279
		{
			yyVAL.str = "to"
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1280
		{
			yyVAL.str = "trailing"
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1281
		{
			yyVAL.str = "true"
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1282
		{
			yyVAL.str = "union"
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1283
		{
			yyVAL.str = "unique"
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1284
		{
			yyVAL.str = "user"
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1285
		{
			yyVAL.str = "using"
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1286
		{
			yyVAL.str = "variadic"
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1287
		{
			yyVAL.str = "when"
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1288
		{
			yyVAL.str = "where"
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1289
		{
			yyVAL.str = "window"
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1290
		{
			yyVAL.str = "with"
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1303
		{
			yyVAL.str = "abort"
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1304
		{
			yyVAL.str = "absent"
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1305
		{
			yyVAL.str = "absolute"
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1306
		{
			yyVAL.str = "access"
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1307
		{
			yyVAL.str = "action"
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1308
		{
			yyVAL.str = "add"
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1309
		{
			yyVAL.str = "admin"
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1310
		{
			yyVAL.str = "after"
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1311
		{
			yyVAL.str = "aggregate"
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1312
		{
			yyVAL.str = "all"
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1313
		{
			yyVAL.str = "also"
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1314
		{
			yyVAL.str = "alter"
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1315
		{
			yyVAL.str = "always"
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1316
		{
			yyVAL.str = "analyse"
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1317
		{
			yyVAL.str = "analyze"
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1318
		{
			yyVAL.str = "and"
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1319
		{
			yyVAL.str = "any"
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1320
		{
			yyVAL.str = "asc"
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1321
		{
			yyVAL.str = "asensitive"
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1322
		{
			yyVAL.str = "assertion"
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1323
		{
			yyVAL.str = "assignment"
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1324
		{
			yyVAL.str = "asymmetric"
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1325
		{
			yyVAL.str = "at"
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1326
		{
			yyVAL.str = "atomic"
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1327
		{
			yyVAL.str = "attach"
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1328
		{
			yyVAL.str = "attribute"
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1329
		{
			yyVAL.str = "authorization"
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1330
		{
			yyVAL.str = "backward"
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1331
		{
			yyVAL.str = "before"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1332
		{
			yyVAL.str = "begin"
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1333
		{
			yyVAL.str = "between"
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1334
		{
			yyVAL.str = "bigint"
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1335
		{
			yyVAL.str = "binary"
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1336
		{
			yyVAL.str = "bit"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1337
		{
			yyVAL.str = "boolean"
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1338
		{
			yyVAL.str = "both"
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1339
		{
			yyVAL.str = "breadth"
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1340
		{
			yyVAL.str = "by"
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1341
		{
			yyVAL.str = "cache"
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1342
		{
			yyVAL.str = "call"
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1343
		{
			yyVAL.str = "called"
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1344
		{
			yyVAL.str = "cascade"
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1345
		{
			yyVAL.str = "cascaded"
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1346
		{
			yyVAL.str = "case"
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1347
		{
			yyVAL.str = "cast"
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1348
		{
			yyVAL.str = "catalog"
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1349
		{
			yyVAL.str = "chain"
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1350
		{
			yyVAL.str = "characteristics"
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1351
		{
			yyVAL.str = "check"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1352
		{
			yyVAL.str = "checkpoint"
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1353
		{
			yyVAL.str = "class"
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1354
		{
			yyVAL.str = "close"
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1355
		{
			yyVAL.str = "cluster"
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1356
		{
			yyVAL.str = "coalesce"
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1357
		{
			yyVAL.str = "collate"
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1358
		{
			yyVAL.str = "collation"
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1359
		{
			yyVAL.str = "column"
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1360
		{
			yyVAL.str = "columns"
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1361
		{
			yyVAL.str = "comment"
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1362
		{
			yyVAL.str = "comments"
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1363
		{
			yyVAL.str = "commit"
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1364
		{
			yyVAL.str = "committed"
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1365
		{
			yyVAL.str = "compression"
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1366
		{
			yyVAL.str = "concurrently"
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1367
		{
			yyVAL.str = "conditional"
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1368
		{
			yyVAL.str = "configuration"
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1369
		{
			yyVAL.str = "conflict"
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1370
		{
			yyVAL.str = "connection"
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1371
		{
			yyVAL.str = "constraint"
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1372
		{
			yyVAL.str = "constraints"
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1373
		{
			yyVAL.str = "content"
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1374
		{
			yyVAL.str = "continue"
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1375
		{
			yyVAL.str = "conversion"
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1376
		{
			yyVAL.str = "copy"
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1377
		{
			yyVAL.str = "cost"
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1378
		{
			yyVAL.str = "cross"
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1379
		{
			yyVAL.str = "csv"
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1380
		{
			yyVAL.str = "cube"
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1381
		{
			yyVAL.str = "current"
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1382
		{
			yyVAL.str = "current_catalog"
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1383
		{
			yyVAL.str = "current_date"
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1384
		{
			yyVAL.str = "current_role"
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1385
		{
			yyVAL.str = "current_schema"
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1386
		{
			yyVAL.str = "current_time"
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1387
		{
			yyVAL.str = "current_timestamp"
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1388
		{
			yyVAL.str = "current_user"
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1389
		{
			yyVAL.str = "cursor"
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1390
		{
			yyVAL.str = "cycle"
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1391
		{
			yyVAL.str = "data"
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1392
		{
			yyVAL.str = "database"
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1393
		{
			yyVAL.str = "deallocate"
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1394
		{
			yyVAL.str = "dec"
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1395
		{
			yyVAL.str = "decimal"
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1396
		{
			yyVAL.str = "declare"
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1397
		{
			yyVAL.str = "default"
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1398
		{
			yyVAL.str = "defaults"
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1399
		{
			yyVAL.str = "deferrable"
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1400
		{
			yyVAL.str = "deferred"
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1401
		{
			yyVAL.str = "definer"
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1402
		{
			yyVAL.str = "delete"
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1403
		{
			yyVAL.str = "delimiter"
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1404
		{
			yyVAL.str = "delimiters"
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1405
		{
			yyVAL.str = "depends"
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1406
		{
			yyVAL.str = "depth"
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1407
		{
			yyVAL.str = "desc"
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1408
		{
			yyVAL.str = "detach"
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1409
		{
			yyVAL.str = "dictionary"
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1410
		{
			yyVAL.str = "disable"
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1411
		{
			yyVAL.str = "discard"
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1412
		{
			yyVAL.str = "distinct"
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1413
		{
			yyVAL.str = "do"
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1414
		{
			yyVAL.str = "document"
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1415
		{
			yyVAL.str = "domain"
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1416
		{
			yyVAL.str = "double"
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1417
		{
			yyVAL.str = "drop"
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1418
		{
			yyVAL.str = "each"
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1419
		{
			yyVAL.str = "else"
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1420
		{
			yyVAL.str = "empty"
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1421
		{
			yyVAL.str = "enable"
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1422
		{
			yyVAL.str = "encoding"
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1423
		{
			yyVAL.str = "encrypted"
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1424
		{
			yyVAL.str = "end"
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1425
		{
			yyVAL.str = "enum"
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1426
		{
			yyVAL.str = "error"
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1427
		{
			yyVAL.str = "escape"
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1428
		{
			yyVAL.str = "event"
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1429
		{
			yyVAL.str = "exclude"
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1430
		{
			yyVAL.str = "excluding"
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1431
		{
			yyVAL.str = "exclusive"
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1432
		{
			yyVAL.str = "execute"
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1433
		{
			yyVAL.str = "exists"
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1434
		{
			yyVAL.str = "explain"
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1435
		{
			yyVAL.str = "expression"
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1436
		{
			yyVAL.str = "extension"
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1437
		{
			yyVAL.str = "external"
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1438
		{
			yyVAL.str = "extract"
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1439
		{
			yyVAL.str = "false"
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1440
		{
			yyVAL.str = "family"
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1441
		{
			yyVAL.str = "finalize"
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1442
		{
			yyVAL.str = "first"
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1443
		{
			yyVAL.str = "float"
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1444
		{
			yyVAL.str = "following"
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1445
		{
			yyVAL.str = "force"
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1446
		{
			yyVAL.str = "foreign"
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1447
		{
			yyVAL.str = "format"
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1448
		{
			yyVAL.str = "forward"
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1449
		{
			yyVAL.str = "freeze"
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1450
		{
			yyVAL.str = "full"
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1451
		{
			yyVAL.str = "function"
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1452
		{
			yyVAL.str = "functions"
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1453
		{
			yyVAL.str = "generated"
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1454
		{
			yyVAL.str = "global"
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1455
		{
			yyVAL.str = "granted"
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1456
		{
			yyVAL.str = "greatest"
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1457
		{
			yyVAL.str = "grouping"
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1458
		{
			yyVAL.str = "groups"
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1459
		{
			yyVAL.str = "handler"
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1460
		{
			yyVAL.str = "header"
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1461
		{
			yyVAL.str = "hold"
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1462
		{
			yyVAL.str = "identity"
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1463
		{
			yyVAL.str = "if"
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1464
		{
			yyVAL.str = "ilike"
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1465
		{
			yyVAL.str = "immediate"
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1466
		{
			yyVAL.str = "immutable"
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1467
		{
			yyVAL.str = "implicit"
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1468
		{
			yyVAL.str = "import"
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1469
		{
			yyVAL.str = "in"
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1470
		{
			yyVAL.str = "include"
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1471
		{
			yyVAL.str = "including"
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1472
		{
			yyVAL.str = "increment"
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1473
		{
			yyVAL.str = "indent"
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1474
		{
			yyVAL.str = "index"
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1475
		{
			yyVAL.str = "indexes"
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1476
		{
			yyVAL.str = "inherit"
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1477
		{
			yyVAL.str = "inherits"
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1478
		{
			yyVAL.str = "initially"
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1479
		{
			yyVAL.str = "inline"
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1480
		{
			yyVAL.str = "inner"
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1481
		{
			yyVAL.str = "inout"
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1482
		{
			yyVAL.str = "input"
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1483
		{
			yyVAL.str = "insensitive"
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1484
		{
			yyVAL.str = "insert"
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1485
		{
			yyVAL.str = "instead"
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1486
		{
			yyVAL.str = "int"
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1487
		{
			yyVAL.str = "integer"
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1488
		{
			yyVAL.str = "interval"
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1489
		{
			yyVAL.str = "invoker"
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1490
		{
			yyVAL.str = "is"
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1491
		{
			yyVAL.str = "isolation"
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1492
		{
			yyVAL.str = "join"
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1493
		{
			yyVAL.str = "json"
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1494
		{
			yyVAL.str = "json_array"
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1495
		{
			yyVAL.str = "json_arrayagg"
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1496
		{
			yyVAL.str = "json_exists"
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1497
		{
			yyVAL.str = "json_object"
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1498
		{
			yyVAL.str = "json_objectagg"
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1499
		{
			yyVAL.str = "json_query"
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1500
		{
			yyVAL.str = "json_scalar"
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1501
		{
			yyVAL.str = "json_serialize"
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1502
		{
			yyVAL.str = "json_table"
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1503
		{
			yyVAL.str = "json_value"
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1504
		{
			yyVAL.str = "keep"
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1505
		{
			yyVAL.str = "key"
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1506
		{
			yyVAL.str = "keys"
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1507
		{
			yyVAL.str = "label"
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1508
		{
			yyVAL.str = "language"
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1509
		{
			yyVAL.str = "large"
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1510
		{
			yyVAL.str = "last"
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1511
		{
			yyVAL.str = "lateral"
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1512
		{
			yyVAL.str = "leading"
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1513
		{
			yyVAL.str = "leakproof"
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1514
		{
			yyVAL.str = "least"
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1515
		{
			yyVAL.str = "left"
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1516
		{
			yyVAL.str = "level"
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1517
		{
			yyVAL.str = "like"
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1518
		{
			yyVAL.str = "listen"
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1519
		{
			yyVAL.str = "load"
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1520
		{
			yyVAL.str = "local"
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1521
		{
			yyVAL.str = "localtime"
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1522
		{
			yyVAL.str = "localtimestamp"
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1523
		{
			yyVAL.str = "location"
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1524
		{
			yyVAL.str = "lock"
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1525
		{
			yyVAL.str = "locked"
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1526
		{
			yyVAL.str = "logged"
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1527
		{
			yyVAL.str = "mapping"
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1528
		{
			yyVAL.str = "match"
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1529
		{
			yyVAL.str = "matched"
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1530
		{
			yyVAL.str = "materialized"
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1531
		{
			yyVAL.str = "maxvalue"
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1532
		{
			yyVAL.str = "merge"
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1533
		{
			yyVAL.str = "merge_action"
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1534
		{
			yyVAL.str = "method"
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1535
		{
			yyVAL.str = "minvalue"
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1536
		{
			yyVAL.str = "mode"
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1537
		{
			yyVAL.str = "move"
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1538
		{
			yyVAL.str = "name"
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1539
		{
			yyVAL.str = "names"
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1540
		{
			yyVAL.str = "national"
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1541
		{
			yyVAL.str = "natural"
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1542
		{
			yyVAL.str = "nchar"
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1543
		{
			yyVAL.str = "nested"
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1544
		{
			yyVAL.str = "new"
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1545
		{
			yyVAL.str = "next"
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1546
		{
			yyVAL.str = "nfc"
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1547
		{
			yyVAL.str = "nfd"
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1548
		{
			yyVAL.str = "nfkc"
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1549
		{
			yyVAL.str = "nfkd"
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1550
		{
			yyVAL.str = "no"
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1551
		{
			yyVAL.str = "none"
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1552
		{
			yyVAL.str = "normalize"
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1553
		{
			yyVAL.str = "normalized"
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1554
		{
			yyVAL.str = "not"
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1555
		{
			yyVAL.str = "nothing"
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1556
		{
			yyVAL.str = "notify"
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1557
		{
			yyVAL.str = "nowait"
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1558
		{
			yyVAL.str = "null"
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1559
		{
			yyVAL.str = "nullif"
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1560
		{
			yyVAL.str = "nulls"
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1561
		{
			yyVAL.str = "numeric"
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1562
		{
			yyVAL.str = "object"
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1563
		{
			yyVAL.str = "of"
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1564
		{
			yyVAL.str = "off"
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1565
		{
			yyVAL.str = "oids"
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1566
		{
			yyVAL.str = "old"
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1567
		{
			yyVAL.str = "omit"
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1568
		{
			yyVAL.str = "only"
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1569
		{
			yyVAL.str = "operator"
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1570
		{
			yyVAL.str = "option"
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1571
		{
			yyVAL.str = "options"
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1572
		{
			yyVAL.str = "or"
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1573
		{
			yyVAL.str = "ordinality"
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1574
		{
			yyVAL.str = "others"
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1575
		{
			yyVAL.str = "out"
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1576
		{
			yyVAL.str = "outer"
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1577
		{
			yyVAL.str = "overlay"
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1578
		{
			yyVAL.str = "overriding"
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1579
		{
			yyVAL.str = "owned"
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1580
		{
			yyVAL.str = "owner"
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1581
		{
			yyVAL.str = "parallel"
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1582
		{
			yyVAL.str = "parameter"
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1583
		{
			yyVAL.str = "parser"
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1584
		{
			yyVAL.str = "partial"
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1585
		{
			yyVAL.str = "partition"
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1586
		{
			yyVAL.str = "passing"
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1587
		{
			yyVAL.str = "password"
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1588
		{
			yyVAL.str = "path"
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1589
		{
			yyVAL.str = "placing"
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1590
		{
			yyVAL.str = "plan"
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1591
		{
			yyVAL.str = "plans"
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1592
		{
			yyVAL.str = "policy"
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1593
		{
			yyVAL.str = "position"
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1594
		{
			yyVAL.str = "preceding"
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1595
		{
			yyVAL.str = "prepare"
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1596
		{
			yyVAL.str = "prepared"
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1597
		{
			yyVAL.str = "preserve"
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1598
		{
			yyVAL.str = "primary"
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1599
		{
			yyVAL.str = "prior"
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1600
		{
			yyVAL.str = "privileges"
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1601
		{
			yyVAL.str = "procedural"
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1602
		{
			yyVAL.str = "procedure"
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1603
		{
			yyVAL.str = "procedures"
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1604
		{
			yyVAL.str = "program"
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1605
		{
			yyVAL.str = "publication"
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1606
		{
			yyVAL.str = "quote"
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1607
		{
			yyVAL.str = "quotes"
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1608
		{
			yyVAL.str = "range"
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1609
		{
			yyVAL.str = "read"
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1610
		{
			yyVAL.str = "real"
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1611
		{
			yyVAL.str = "reassign"
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1612
		{
			yyVAL.str = "recheck"
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1613
		{
			yyVAL.str = "recursive"
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1614
		{
			yyVAL.str = "ref"
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1615
		{
			yyVAL.str = "references"
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1616
		{
			yyVAL.str = "referencing"
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1617
		{
			yyVAL.str = "refresh"
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1618
		{
			yyVAL.str = "reindex"
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1619
		{
			yyVAL.str = "relative"
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1620
		{
			yyVAL.str = "release"
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1621
		{
			yyVAL.str = "rename"
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1622
		{
			yyVAL.str = "repeatable"
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1623
		{
			yyVAL.str = "replace"
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1624
		{
			yyVAL.str = "replica"
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1625
		{
			yyVAL.str = "reset"
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1626
		{
			yyVAL.str = "restart"
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1627
		{
			yyVAL.str = "restrict"
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1628
		{
			yyVAL.str = "return"
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1629
		{
			yyVAL.str = "returns"
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1630
		{
			yyVAL.str = "revoke"
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1631
		{
			yyVAL.str = "right"
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1632
		{
			yyVAL.str = "role"
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1633
		{
			yyVAL.str = "rollback"
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1634
		{
			yyVAL.str = "rollup"
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1635
		{
			yyVAL.str = "routine"
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1636
		{
			yyVAL.str = "routines"
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1637
		{
			yyVAL.str = "row"
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1638
		{
			yyVAL.str = "rows"
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1639
		{
			yyVAL.str = "rule"
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1640
		{
			yyVAL.str = "savepoint"
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1641
		{
			yyVAL.str = "scalar"
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1642
		{
			yyVAL.str = "schema"
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1643
		{
			yyVAL.str = "schemas"
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1644
		{
			yyVAL.str = "scroll"
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1645
		{
			yyVAL.str = "search"
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1646
		{
			yyVAL.str = "security"
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1647
		{
			yyVAL.str = "select"
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1648
		{
			yyVAL.str = "sequence"
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1649
		{
			yyVAL.str = "sequences"
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1650
		{
			yyVAL.str = "serializable"
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1651
		{
			yyVAL.str = "server"
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1652
		{
			yyVAL.str = "session"
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1653
		{
			yyVAL.str = "session_user"
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1654
		{
			yyVAL.str = "set"
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1655
		{
			yyVAL.str = "setof"
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1656
		{
			yyVAL.str = "sets"
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1657
		{
			yyVAL.str = "share"
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1658
		{
			yyVAL.str = "show"
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1659
		{
			yyVAL.str = "similar"
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1660
		{
			yyVAL.str = "simple"
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1661
		{
			yyVAL.str = "skip"
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1662
		{
			yyVAL.str = "smallint"
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1663
		{
			yyVAL.str = "snapshot"
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1664
		{
			yyVAL.str = "some"
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1665
		{
			yyVAL.str = "source"
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1666
		{
			yyVAL.str = "sql"
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1667
		{
			yyVAL.str = "stable"
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1668
		{
			yyVAL.str = "standalone"
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1669
		{
			yyVAL.str = "start"
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1670
		{
			yyVAL.str = "statement"
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1671
		{
			yyVAL.str = "statistics"
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1672
		{
			yyVAL.str = "stdin"
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1673
		{
			yyVAL.str = "stdout"
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1674
		{
			yyVAL.str = "storage"
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1675
		{
			yyVAL.str = "stored"
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1676
		{
			yyVAL.str = "strict"
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1677
		{
			yyVAL.str = "string"
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1678
		{
			yyVAL.str = "strip"
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1679
		{
			yyVAL.str = "subscription"
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1680
		{
			yyVAL.str = "substring"
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1681
		{
			yyVAL.str = "support"
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1682
		{
			yyVAL.str = "symmetric"
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1683
		{
			yyVAL.str = "sysid"
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1684
		{
			yyVAL.str = "system"
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1685
		{
			yyVAL.str = "system_user"
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1686
		{
			yyVAL.str = "table"
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1687
		{
			yyVAL.str = "tables"
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1688
		{
			yyVAL.str = "tablesample"
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1689
		{
			yyVAL.str = "tablespace"
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1690
		{
			yyVAL.str = "target"
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1691
		{
			yyVAL.str = "temp"
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1692
		{
			yyVAL.str = "template"
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1693
		{
			yyVAL.str = "temporary"
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1694
		{
			yyVAL.str = "text"
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1695
		{
			yyVAL.str = "then"
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1696
		{
			yyVAL.str = "ties"
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1697
		{
			yyVAL.str = "time"
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1698
		{
			yyVAL.str = "timestamp"
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1699
		{
			yyVAL.str = "trailing"
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1700
		{
			yyVAL.str = "transaction"
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1701
		{
			yyVAL.str = "transform"
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1702
		{
			yyVAL.str = "treat"
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1703
		{
			yyVAL.str = "trigger"
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1704
		{
			yyVAL.str = "trim"
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1705
		{
			yyVAL.str = "true"
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1706
		{
			yyVAL.str = "truncate"
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1707
		{
			yyVAL.str = "trusted"
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1708
		{
			yyVAL.str = "type"
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1709
		{
			yyVAL.str = "types"
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1710
		{
			yyVAL.str = "uescape"
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1711
		{
			yyVAL.str = "unbounded"
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1712
		{
			yyVAL.str = "uncommitted"
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1713
		{
			yyVAL.str = "unconditional"
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1714
		{
			yyVAL.str = "unencrypted"
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1715
		{
			yyVAL.str = "unique"
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1716
		{
			yyVAL.str = "unknown"
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1717
		{
			yyVAL.str = "unlisten"
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1718
		{
			yyVAL.str = "unlogged"
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1719
		{
			yyVAL.str = "until"
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1720
		{
			yyVAL.str = "update"
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1721
		{
			yyVAL.str = "user"
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1722
		{
			yyVAL.str = "using"
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1723
		{
			yyVAL.str = "vacuum"
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1724
		{
			yyVAL.str = "valid"
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1725
		{
			yyVAL.str = "validate"
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1726
		{
			yyVAL.str = "validator"
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1727
		{
			yyVAL.str = "value"
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1728
		{
			yyVAL.str = "values"
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1729
		{
			yyVAL.str = "varchar"
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1730
		{
			yyVAL.str = "variadic"
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1731
		{
			yyVAL.str = "verbose"
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1732
		{
			yyVAL.str = "version"
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1733
		{
			yyVAL.str = "view"
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1734
		{
			yyVAL.str = "views"
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1735
		{
			yyVAL.str = "volatile"
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1736
		{
			yyVAL.str = "when"
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1737
		{
			yyVAL.str = "whitespace"
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1738
		{
			yyVAL.str = "work"
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1739
		{
			yyVAL.str = "wrapper"
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1740
		{
			yyVAL.str = "write"
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1741
		{
			yyVAL.str = "xml"
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1742
		{
			yyVAL.str = "xmlattributes"
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1743
		{
			yyVAL.str = "xmlconcat"
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1744
		{
			yyVAL.str = "xmlelement"
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1745
		{
			yyVAL.str = "xmlexists"
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1746
		{
			yyVAL.str = "xmlforest"
		}
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1747
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1748
		{
			yyVAL.str = "xmlparse"
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1749
		{
			yyVAL.str = "xmlpi"
		}
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1750
		{
			yyVAL.str = "xmlroot"
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1751
		{
			yyVAL.str = "xmlserialize"
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1752
		{
			yyVAL.str = "xmltable"
		}
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1753
		{
			yyVAL.str = "yes"
		}
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1754
		{
			yyVAL.str = "zone"
		}
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1769
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1020:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1771
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1021:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1776
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1022:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1781
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1023:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1785
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1024:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1790
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1025:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1795
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1026:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1800
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1027:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1805
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1028:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1810
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1029:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1815
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1030:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1820
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1031:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1825
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1032:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1830
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1033:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1835
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1034:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1840
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1035:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1845
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1036:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1849
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1037:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1853
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1038:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1857
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1039:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1861
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1040:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1865
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1041:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1869
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1042:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1873
		{
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1043:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1878
		{
			// Create like_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1044:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1886
		{
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1045:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1891
		{
			// Create like_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1046:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1899
		{
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1047:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1904
		{
			// Create like_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1048:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1912
		{
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1049:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1917
		{
			// Create like_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1050:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1925
		{
			// Pass the NodeList directly to NewCollateClause
			nodeList := yyDollar[3].list
			collateClause := ast.NewCollateClause(nodeList)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 1051:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1933
		{
			// Create timezone function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[1].node), 0)
		}
	case 1052:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1939
		{
			// Create timezone function call with no argument
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[1].node), 0)
		}
	case 1053:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1945
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1054:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1949
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1055:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1953
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1056:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:1958
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1057:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1963
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1058:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:1968
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1059:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1973
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1060:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1978
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1061:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1983
		{
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1062:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1988
		{
			// Create similar_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1063:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1996
		{
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1064:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2001
		{
			// Create similar_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2010
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1066:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2012
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1067:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2016
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1068:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2021
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1069:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2026
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1070:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2031
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1071:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2036
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1072:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2041
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2046
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1074:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2051
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1075:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2056
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1076:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2061
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1077:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2066
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1078:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2071
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1079:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2076
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1080:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2081
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1081:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2087
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1082:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2088
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1083:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2090
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 1084:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2099
		{
			parenExpr := ast.NewParenExpr(yyDollar[2].node, 0)
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewA_Indirection(parenExpr, yyDollar[4].list, 0)
			} else {
				yyVAL.node = parenExpr
			}
		}
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2107
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1086:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2108
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2110
		{
			yyVAL.node = ast.NewExprSublink(yyDollar[1].stmt)
		}
	case 1088:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2114
		{
			sublink := ast.NewExprSublink(yyDollar[1].stmt)
			yyVAL.node = ast.NewA_Indirection(sublink, yyDollar[2].list, 0)
		}
	case 1089:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2119
		{
			yyVAL.node = ast.NewExistsSublink(yyDollar[2].stmt)
		}
	case 1090:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2123
		{
			yyVAL.node = ast.NewArraySublink(yyDollar[2].stmt)
		}
	case 1091:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2127
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1092:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2131
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = rowExpr
		}
	case 1093:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2137
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_IMPLICIT_CAST
			yyVAL.node = rowExpr
		}
	case 1094:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2143
		{
			// TODO: Fix GROUPING function implementation
			// Current implementation is simplified and needs proper expr_list handling
			// The expr_list should be properly converted to NodeList and assigned to Args
			grouping := &ast.GroupingFunc{
				BaseExpr: ast.BaseExpr{BaseNode: ast.BaseNode{Tag: ast.T_GroupingFunc}},
				Args:     nil, // We'll need to convert expr_list properly
			}
			yyVAL.node = grouping
		}
	case 1095:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2157
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 1096:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2161
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 1097:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2165
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 1098:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2169
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 1099:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2173
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 1100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2177
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 1101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2182
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2185
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2188
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2189
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 1105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2190
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 1106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2195
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 1107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2199
		{
			// Create all fields: first ColId followed by indirection items
			allFields := []ast.Node{ast.NewString(yyDollar[1].str)}
			allFields = append(allFields, yyDollar[2].list.Items...)
			yyVAL.node = ast.NewColumnRef(allFields...)
		}
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2209
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2213
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2219
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1111:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2220
		{
			yyVAL.node = nil
		}
	case 1112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2224
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2228
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 1114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2232
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 1115:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2236
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 1116:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2241
		{
			yyVAL.list = nil
		}
	case 1117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2243
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2255
		{
			// For now, just return the func_application
			// Note: In full implementation, would apply within_group_clause, filter_clause, over_clause
			yyVAL.node = yyDollar[1].node
		}
	case 1119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2264
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2268
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2272
		{
			// PostgreSQL uses check_func_name here
			// We implement the logic inline - prepend ColId to indirection list
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[2].list.Items...)
			result := ast.NewNodeList(items...)
			yyVAL.list = result
		}
	case 1122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2283
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].list, nil, 0)
		}
	case 1123:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2287
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[3].list, 0)
			// Note: In full implementation, would set agg_order from $4
			yyVAL.node = funcCall
		}
	case 1124:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2293
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, ast.NewNodeList(yyDollar[4].node), 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1125:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:2299
		{
			yyDollar[3].list.Append(yyDollar[6].node)
			args := yyDollar[3].list
			funcCall := ast.NewFuncCall(yyDollar[1].list, args, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $7
			yyVAL.node = funcCall
		}
	case 1126:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2307
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would mark as aggregate and set agg_order from $5
			yyVAL.node = funcCall
		}
	case 1127:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2313
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would set agg_distinct = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2321
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2325
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2332
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2336
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2340
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1133:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2347
		{
			yyVAL.node = ast.NewCaseExpr(0, yyDollar[2].node, yyDollar[3].list, yyDollar[4].node)
		}
	case 1134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2352
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1135:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2353
		{
			yyVAL.node = nil
		}
	case 1136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2357
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2359
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2367
		{
			yyVAL.node = ast.NewCaseWhen(yyDollar[2].node, yyDollar[4].node)
		}
	case 1139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2373
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2374
		{
			yyVAL.node = nil
		}
	case 1141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2379
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2383
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2387
		{
			yyVAL.node = ast.NewArrayConstructor(ast.NewNodeList())
		}
	case 1144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2392
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2394
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2401
		{
			yyVAL.node = yyDollar[3].list
		}
	case 1147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2402
		{
			yyVAL.node = ast.NewNodeList()
		}
	case 1148:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2406
		{
			yyDollar[2].list.Append(yyDollar[4].node)
			yyVAL.node = yyDollar[2].list
		}
	case 1149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2414
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2418
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2427
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2432
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2433
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2434
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2435
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2436
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2439
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2440
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2441
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2444
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2447
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2451
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[2].str))
		}
	case 1163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2455
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2462
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2466
		{
			yyVAL.list = nil
		}
	case 1166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2472
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2478
		{
			// Create qualified type name from name + attrs
			name := ast.NewString(yyDollar[1].str)
			names := &ast.NodeList{Items: append([]ast.Node{name}, yyDollar[2].list.Items...)}
			typeName := makeTypeNameFromNodeList(names)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2489
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2493
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2497
		{
			yyVAL.typnam = makeTypeNameFromString("int2")
		}
	case 1171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2501
		{
			yyVAL.typnam = makeTypeNameFromString("int8")
		}
	case 1172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2505
		{
			yyVAL.typnam = makeTypeNameFromString("float4")
		}
	case 1173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2509
		{
			yyVAL.typnam = yyDollar[2].typnam
		}
	case 1174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2513
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2517
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
		}
	case 1176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2521
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
		}
	case 1177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2525
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
		}
	case 1178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2529
		{
			yyVAL.typnam = makeTypeNameFromString("bool")
		}
	case 1179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2535
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2539
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2545
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2549
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2555
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2563
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2571
		{
			yyVAL.str = "varchar"
		}
	case 1186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2575
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2583
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2591
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2601
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Set typmods with the length parameter, similar to PostgreSQL's approach
			lengthConst := ast.NewInteger(int(yyDollar[3].ival))
			typeName.Typmods = ast.NewNodeList()
			typeName.Typmods.Append(lengthConst)
			yyVAL.typnam = typeName
		}
	case 1190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2612
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// CHAR defaults to CHAR(1)
				lengthConst := ast.NewInteger(1)
				typeName.Typmods = ast.NewNodeList()
				typeName.Typmods.Append(lengthConst)
			}
			yyVAL.typnam = typeName
		}
	case 1191:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2626
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2638
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1193:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2650
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2660
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1195:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2670
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2680
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2691
		{
			yyVAL.ival = 1
		}
	case 1198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2692
		{
			yyVAL.ival = 0
		}
	case 1199:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2693
		{
			yyVAL.ival = 0
		}
	case 1200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2696
		{
			yyVAL.ival = 1
		}
	case 1201:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2697
		{
			yyVAL.ival = 0
		}
	case 1202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2701
		{
			if yyDollar[2].ival < 1 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else if yyDollar[2].ival <= 7 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else {
				yyVAL.typnam = makeTypeNameFromString("float8")
			}
		}
	case 1203:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2711
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2718
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1205:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2722
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2729
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1207:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2733
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2738
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2739
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2742
		{
			yyVAL.str = "+"
		}
	case 1211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2743
		{
			yyVAL.str = "-"
		}
	case 1212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2744
		{
			yyVAL.str = "*"
		}
	case 1213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2745
		{
			yyVAL.str = "/"
		}
	case 1214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2746
		{
			yyVAL.str = "%"
		}
	case 1215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2747
		{
			yyVAL.str = "^"
		}
	case 1216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2748
		{
			yyVAL.str = "<"
		}
	case 1217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2749
		{
			yyVAL.str = ">"
		}
	case 1218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2750
		{
			yyVAL.str = "="
		}
	case 1219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2751
		{
			yyVAL.str = "<="
		}
	case 1220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2752
		{
			yyVAL.str = ">="
		}
	case 1221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2753
		{
			yyVAL.str = "<>"
		}
	case 1222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2757
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2761
		{
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[3].list.Items...)
			yyVAL.list = ast.NewNodeList(items...)
		}
	case 1224:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2769
		{
			yyVAL.list = nil
		}
	case 1225:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2772
		{
			yyVAL.node = nil
		}
	case 1226:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2775
		{
			yyVAL.node = nil
		}
	case 1227:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2778
		{
			yyVAL.node = nil
		}
	case 1228:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2781
		{
			yyVAL.ival = 0
		}
	case 1229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2782
		{
			yyVAL.ival = 0
		}
	case 1230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2786
		{
			subLink := ast.NewSubLink(ast.ANY_SUBLINK, yyDollar[1].stmt.(*ast.SelectStmt))
			yyVAL.node = subLink
		}
	case 1231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2791
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2806
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2807
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2811
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2816
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2817
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2825
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2827
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			yyVAL.stmt = selectStmt
		}
	case 1239:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2841
		{
			selectStmt := ast.NewSelectStmt()
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			yyVAL.stmt = selectStmt
		}
	case 1240:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2853
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].list
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			yyVAL.stmt = selectStmt
		}
	case 1241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2865
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = ast.NewNodeList(starTarget)
			selectStmt.FromClause = ast.NewNodeList(yyDollar[2].rangevar)
			yyVAL.stmt = selectStmt
		}
	case 1242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2875
		{
			// VALUES clause is a SelectStmt with ValuesLists
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2886
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1244:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2887
		{
			yyVAL.list = nil
		}
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2891
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2892
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2897
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2901
		{
			// Implicit alias (no AS keyword)
			yyVAL.target = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 1249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2906
		{
			// No alias - use default naming
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2911
		{
			// SELECT * - all columns
			yyVAL.target = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 1251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2922
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1252:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2923
		{
			yyVAL.list = nil
		}
	case 1253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2927
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2928
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2937
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeVar
		}
	case 1256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2945
		{
			/* Subquery in FROM clause */
			subquery := yyDollar[1].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[2].alias != nil {
				alias = yyDollar[2].alias
			}
			rangeSubselect := ast.NewRangeSubselect(false, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2956
		{
			/* LATERAL subquery in FROM clause */
			subquery := yyDollar[2].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[3].alias != nil {
				alias = yyDollar[3].alias
			}
			rangeSubselect := ast.NewRangeSubselect(true, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2967
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2971
		{
			joinExpr := yyDollar[2].node.(*ast.JoinExpr)
			joinExpr.Alias = yyDollar[4].alias
			yyVAL.node = joinExpr
		}
	case 1260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2977
		{
			rangeFunc := yyDollar[1].node.(*ast.RangeFunction)
			if yyDollar[2].alias != nil {
				rangeFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeFunc
		}
	case 1261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2985
		{
			rangeFunc := yyDollar[2].node.(*ast.RangeFunction)
			rangeFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeFunc
		}
	case 1262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2994
		{
			rangeTableFunc := yyDollar[1].node.(*ast.RangeTableFunc)
			if yyDollar[2].alias != nil {
				rangeTableFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3002
		{
			rangeTableFunc := yyDollar[2].node.(*ast.RangeTableFunc)
			rangeTableFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeTableFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3011
		{
			jsonTable := yyDollar[1].node.(*ast.JsonTable)
			if yyDollar[2].alias != nil {
				jsonTable.Alias = yyDollar[2].alias
			}
			yyVAL.node = jsonTable
		}
	case 1265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3019
		{
			jsonTable := yyDollar[2].node.(*ast.JsonTable)
			jsonTable.Lateral = true
			if yyDollar[3].alias != nil {
				jsonTable.Alias = yyDollar[3].alias
			}
			yyVAL.node = jsonTable
		}
	case 1266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3031
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.rangevar = rangeVar
		}
	case 1267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3037
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3044
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.rangevar = rangeVar
		}
	case 1269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3050
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3056
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3066
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3070
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3076
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3093
		{
			yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
		}
	case 1275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3097
		{
			/* CROSS JOIN is same as unqualified inner join */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewJoinExpr(ast.JOIN_INNER, left, right, nil)
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1276:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3106
		{
			left := yyDollar[1].node
			right := yyDollar[4].node
			joinType := ast.JoinType(yyDollar[2].ival)
			joinQual := yyDollar[5].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(joinType, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(joinType, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3132
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[3].node
			joinQual := yyDollar[4].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(ast.JOIN_INNER, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(ast.JOIN_INNER, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1278:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3158
		{
			left := yyDollar[1].node
			right := yyDollar[5].node
			joinType := ast.JoinType(yyDollar[3].ival)
			join := ast.NewNaturalJoinExpr(joinType, left, right)
			yyVAL.node = join
		}
	case 1279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3166
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewNaturalJoinExpr(ast.JOIN_INNER, left, right)
			yyVAL.node = join
		}
	case 1280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3176
		{
			yyVAL.ival = int(ast.JOIN_FULL)
		}
	case 1281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3177
		{
			yyVAL.ival = int(ast.JOIN_LEFT)
		}
	case 1282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3178
		{
			yyVAL.ival = int(ast.JOIN_RIGHT)
		}
	case 1283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3179
		{
			yyVAL.ival = int(ast.JOIN_INNER)
		}
	case 1284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3184
		{
			yyVAL.ival = 1
		}
	case 1285:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3185
		{
			yyVAL.ival = 0
		}
	case 1286:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3195
		{
			/* Create a two-element list: [name_list, alias_or_null] following PostgreSQL */
			nameList := yyDollar[3].list
			var aliasNode ast.Node = nil
			if yyDollar[5].alias != nil {
				aliasNode = yyDollar[5].alias
			}
			usingList := ast.NewNodeList(nameList, aliasNode)
			yyVAL.node = usingList
		}
	case 1287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3206
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3217
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3221
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3225
		{
			yyVAL.with = ast.NewWithClause(yyDollar[3].list, true, 0)
		}
	case 1291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3231
		{
			yyVAL.with = yyDollar[1].with
		}
	case 1292:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3232
		{
			yyVAL.with = nil
		}
	case 1293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3237
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3241
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1295:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3249
		{
			ctename := yyDollar[1].str
			query := yyDollar[6].stmt
			cte := ast.NewCommonTableExpr(ctename, query)

			// Set column names if provided
			if yyDollar[2].list != nil {
				cte.Aliascolnames = yyDollar[2].list
			}

			// Set materialized option
			cte.Ctematerialized = ast.CTEMaterialized(yyDollar[4].ival)

			// Set search clause if provided
			if yyDollar[8].node != nil {
				cte.SearchClause = yyDollar[8].node.(*ast.CTESearchClause)
			}

			// Set cycle clause if provided
			if yyDollar[9].node != nil {
				cte.CycleClause = yyDollar[9].node.(*ast.CTECycleClause)
			}

			yyVAL.node = cte
		}
	case 1296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3277
		{
			yyVAL.ival = int(ast.CTEMaterializeAlways)
		}
	case 1297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3278
		{
			yyVAL.ival = int(ast.CTEMaterializeNever)
		}
	case 1298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3279
		{
			yyVAL.ival = int(ast.CTEMaterializeDefault)
		}
	case 1299:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3284
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, false, seqColumn)
		}
	case 1300:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3290
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, true, seqColumn)
		}
	case 1301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3296
		{
			yyVAL.node = nil
		}
	case 1302:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:3303
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			markValue := yyDollar[6].node.(ast.Expression)
			markDefault := yyDollar[8].node.(ast.Expression)
			pathColumn := yyDollar[10].str
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, markValue, markDefault, pathColumn)
		}
	case 1303:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3312
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			pathColumn := yyDollar[6].str
			// For simple CYCLE clause, use nil for mark values to avoid TO/DEFAULT in deparsing
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, nil, nil, pathColumn)
		}
	case 1304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3320
		{
			yyVAL.node = nil
		}
	case 1305:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3331
		{
			/* Create a SelectStmt with VALUES clause following PostgreSQL */
			selectStmt := ast.NewSelectStmt()
			exprList := yyDollar[3].list
			selectStmt.ValuesLists = []*ast.NodeList{exprList}
			yyVAL.stmt = selectStmt
		}
	case 1306:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3339
		{
			/* Add additional VALUES row to existing SelectStmt */
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			exprList := yyDollar[4].list
			selectStmt.ValuesLists = append(selectStmt.ValuesLists, exprList)
			yyVAL.stmt = selectStmt
		}
	case 1307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3353
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3354
		{
			yyVAL.node = nil
		}
	case 1309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3358
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3366
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1311:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3368
		{
			cursorExpr := ast.NewCurrentOfExpr(0, yyDollar[4].str) // cvarno filled in by parse analysis
			yyVAL.node = cursorExpr
		}
	case 1312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3372
		{
			yyVAL.node = nil
		}
	case 1313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3376
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3384
		{
			yyVAL.alias = yyDollar[1].alias
		}
	case 1315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3385
		{
			yyVAL.alias = nil
		}
	case 1316:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3390
		{
			nameList := yyDollar[4].list
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nameList)
		}
	case 1317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3395
		{
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 1318:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3399
		{
			nameList := yyDollar[3].list
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nameList)
		}
	case 1319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3404
		{
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 1320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3412
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.alias = alias
		}
	case 1321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3416
		{
			yyVAL.alias = nil
		}
	case 1322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3424
		{
			yyVAL.ival = 1
		}
	case 1323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3425
		{
			yyVAL.ival = 0
		}
	case 1324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3429
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1325:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3430
		{
			yyVAL.list = yyDollar[4].list
		}
	case 1326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3434
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3435
		{
			yyVAL.list = nil
		}
	case 1328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3445
		{
			yyVAL.into = ast.NewIntoClause(yyDollar[2].rangevar, nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 1329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3448
		{
			yyVAL.into = nil
		}
	case 1330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3459
		{
			hasOrdinality := yyDollar[2].ival == 1
			// For a simple function, create a NodeList containing a single NodeList with the function
			funcList := ast.NewNodeList(yyDollar[1].node)
			functions := ast.NewNodeList(funcList)
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, false, functions, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1331:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3468
		{
			hasOrdinality := yyDollar[6].ival == 1
			// rowsfrom_list is already a NodeList containing NodeLists
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, true, yyDollar[4].list, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3478
		{
			yyVAL.ival = 1
		}
	case 1333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3479
		{
			yyVAL.ival = 0
		}
	case 1334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3485
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 1335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3489
		{
			yyDollar[1].list.Append(yyDollar[3].list)
			yyVAL.list = yyDollar[1].list
		}
	case 1336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3496
		{
			funcList := ast.NewNodeList(yyDollar[1].node)
			if yyDollar[2].list != nil {
				funcList.Append(yyDollar[2].list)
			}
			yyVAL.list = funcList
		}
	case 1337:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3505
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3506
		{
			yyVAL.list = nil
		}
	case 1339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3516
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 1340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3520
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 1341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3532
		{
			yyVAL.funparam = &ast.FunctionParameter{
				BaseNode: ast.BaseNode{Tag: ast.T_FunctionParameter},
				Name:     yyDollar[1].str,
				ArgType:  yyDollar[2].typnam,
				Mode:     ast.FUNC_PARAM_TABLE,
				DefExpr:  nil,
			}
		}
	case 1342:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3545
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3546
		{
			yyVAL.list = nil
		}
	case 1344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3552
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3556
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3565
		{
			columnDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			// Note: opt_collate_clause support can be added when needed
			// PostgreSQL sets: n->collClause = (CollateClause *) $3;
			yyVAL.node = columnDef
		}
	case 1347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3576
		{
			// Pass the NodeList directly to NewCollateClause
			nameList := yyDollar[2].list
			yyVAL.node = ast.NewCollateClause(nameList)
		}
	case 1348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3581
		{
			yyVAL.node = nil
		}
	case 1349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3586
		{
			yyVAL.str = "BY REF"
		}
	case 1350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3587
		{
			yyVAL.str = "BY VALUE"
		}
	case 1351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3593
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3597
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3601
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1354:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3605
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3613
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3617
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3625
		{
			target := ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
			yyVAL.node = target
		}
	case 1358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3630
		{
			target := ast.NewResTarget("", yyDollar[2].node)
			yyVAL.node = target
		}
	case 1359:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3639
		{
			// XMLTABLE(xpath_expr PASSING doc_expr COLUMNS ...)
			// $3 is xpath_expr (should be RowExpr), $4 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[4].node.(ast.Expression), yyDollar[3].node.(ast.Expression), nil, yyDollar[6].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1360:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:3647
		{
			// XMLTABLE(XMLNAMESPACES(...), xpath_expr PASSING doc_expr COLUMNS ...)
			// $8 is xpath_expr (should be RowExpr), $9 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[9].node.(ast.Expression), yyDollar[8].node.(ast.Expression), yyDollar[5].list, yyDollar[11].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3658
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3662
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3671
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3676
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, nil, true, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3681
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			// TODO: Process column options from $3
			yyVAL.node = rangeTableFuncCol
		}
	case 1366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3691
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3695
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3704
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3708
		{
			yyVAL.node = ast.NewDefElem("default", yyDollar[2].node)
		}
	case 1370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3712
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(true))
		}
	case 1371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3716
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(false))
		}
	case 1372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3720
		{
			yyVAL.node = ast.NewDefElem("path", yyDollar[2].node)
		}
	case 1373:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:3733
		{
			// Extract path name from optional path name node
			var pathName string
			if yyDollar[6].node != nil {
				if strNode, ok := yyDollar[6].node.(*ast.String); ok {
					pathName = strNode.SVal
				}
			}

			// Create JsonTablePathSpec from the a_expr (path expression) and optional path name
			pathSpec := ast.NewJsonTablePathSpec(yyDollar[5].node, pathName, 0)

			// Create JsonTable with context item and path spec
			jsonTable := ast.NewJsonTable(yyDollar[3].node.(*ast.JsonValueExpr), pathSpec)
			if yyDollar[10].list != nil {
				jsonTable.Columns = yyDollar[10].list
			}
			yyVAL.node = jsonTable
		}
	case 1374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3757
		{
			var format *ast.JsonFormat
			if yyDollar[2].node != nil {
				format = yyDollar[2].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonValueExpr(yyDollar[1].node, format)
		}
	case 1375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3768
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3769
		{
			yyVAL.node = nil
		}
	case 1377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3774
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3775
		{
			yyVAL.node = nil
		}
	case 1379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3779
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3780
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3785
		{
			jsonArg := ast.NewJsonArgument(yyDollar[1].node.(*ast.JsonValueExpr), yyDollar[3].str)
			yyVAL.node = jsonArg
		}
	case 1382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3793
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JSON_BEHAVIOR_DEFAULT,
				Expr:     yyDollar[2].node,
			}
		}
	case 1383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3801
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JsonBehaviorType(yyDollar[1].ival),
				Expr:     nil,
			}
		}
	case 1384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3812
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_ERROR)
		}
	case 1385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3813
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_NULL)
		}
	case 1386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3814
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_TRUE)
		}
	case 1387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3815
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_FALSE)
		}
	case 1388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3816
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_UNKNOWN)
		}
	case 1389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3817
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_ARRAY)
		}
	case 1390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3818
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_OBJECT)
		}
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3819
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY)
		}
	case 1392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3824
		{
			// Return a list with ON EMPTY behavior and nil for ON ERROR
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, nil}}
		}
	case 1393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3828
		{
			// Return a list with nil for ON EMPTY and ON ERROR behavior
			yyVAL.node = &ast.NodeList{Items: []ast.Node{nil, yyDollar[1].node}}
		}
	case 1394:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3832
		{
			// Return a list with both ON EMPTY and ON ERROR behaviors
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, yyDollar[4].node}}
		}
	case 1395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3836
		{
			yyVAL.node = nil
		}
	case 1396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3841
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3842
		{
			yyVAL.node = nil
		}
	case 1398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3847
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3848
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3849
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3850
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1402:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3851
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1403:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3852
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3853
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3854
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3855
		{
			yyVAL.ival = int(ast.JSW_UNSPEC)
		}
	case 1407:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3860
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3861
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1409:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3862
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3863
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3864
		{
			yyVAL.ival = int(ast.JS_QUOTES_UNSPEC)
		}
	case 1412:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3870
		{
			// Parse the encoding name and map to JsonEncoding constant
			var encoding ast.JsonEncoding
			switch yyDollar[4].str {
			case "utf8":
				encoding = ast.JS_ENC_UTF8
			case "utf16":
				encoding = ast.JS_ENC_UTF16
			case "utf32":
				encoding = ast.JS_ENC_UTF32
			default:
				encoding = ast.JS_ENC_DEFAULT
			}
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   encoding,
			}
		}
	case 1413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3890
		{
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   ast.JS_ENC_DEFAULT,
			}
		}
	case 1414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3900
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3901
		{
			yyVAL.node = nil
		}
	case 1416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3906
		{
			yyVAL.node = ast.NewString("path")
		}
	case 1417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3907
		{
			yyVAL.node = nil
		}
	case 1418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3913
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3917
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3926
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FOR_ORDINALITY, yyDollar[1].str)
			yyVAL.node = jsonTableCol
		}
	case 1421:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3935
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_REGULAR, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[3].node != nil {
				strNode := yyDollar[3].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1422:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3949
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FORMATTED, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			if yyDollar[3].node != nil {
				jsonTableCol.Format = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = jsonTableCol
		}
	case 1423:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3963
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_EXISTS, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1424:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3974
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, "")
			jsonTableCol.Columns = yyDollar[6].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1425:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3983
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, yyDollar[5].str)
			jsonTableCol.Columns = yyDollar[8].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3994
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3995
		{
			yyVAL.node = nil
		}
	case 1428:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4011
		{
			insertStmt := yyDollar[5].node.(*ast.InsertStmt)
			insertStmt.Relation = yyDollar[4].rangevar
			insertStmt.WithClause = yyDollar[1].with
			insertStmt.OnConflictClause = yyDollar[6].onconflict
			insertStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = insertStmt
		}
	case 1429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4023
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4027
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4036
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.SelectStmt = yyDollar[1].stmt
			yyVAL.node = insertStmt
		}
	case 1432:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4042
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Override = ast.OverridingKind(yyDollar[2].ival)
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1433:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4049
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1434:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4056
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.Override = ast.OverridingKind(yyDollar[5].ival)
			insertStmt.SelectStmt = yyDollar[7].stmt
			yyVAL.node = insertStmt
		}
	case 1435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4064
		{
			insertStmt := ast.NewInsertStmt(nil)
			// For DEFAULT VALUES, SelectStmt should be nil
			insertStmt.SelectStmt = nil
			yyVAL.node = insertStmt
		}
	case 1436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4073
		{
			yyVAL.ival = int(ast.OVERRIDING_USER_VALUE)
		}
	case 1437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4074
		{
			yyVAL.ival = int(ast.OVERRIDING_SYSTEM_VALUE)
		}
	case 1438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4079
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4083
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4091
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1441:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:4103
		{
			updateStmt := ast.NewUpdateStmt(yyDollar[3].rangevar)
			updateStmt.WithClause = yyDollar[1].with
			updateStmt.TargetList = yyDollar[5].list
			updateStmt.FromClause = yyDollar[6].list
			updateStmt.WhereClause = yyDollar[7].node
			updateStmt.ReturningList = yyDollar[8].list
			yyVAL.stmt = updateStmt
		}
	case 1442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4116
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4120
		{
			// Concatenate the lists - equivalent to PostgreSQL's list_concat
			for _, item := range yyDollar[3].list.Items {
				yyDollar[1].list.Append(item)
			}
			yyVAL.list = yyDollar[1].list
		}
	case 1444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4131
		{
			target := yyDollar[1].target
			target.Val = yyDollar[3].node
			yyVAL.list = ast.NewNodeList(target)
		}
	case 1445:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4137
		{
			// Multi-column assignment: (col1, col2) = (val1, val2)
			// Create MultiAssignRef nodes for each target, matching PostgreSQL exactly
			targetList := yyDollar[2].list
			ncolumns := len(targetList.Items)

			// Create a MultiAssignRef source for each target
			for i, item := range targetList.Items {
				resCol := item.(*ast.ResTarget)
				multiAssignRef := ast.NewMultiAssignRef(yyDollar[5].node, i+1, ncolumns, 0)
				resCol.Val = multiAssignRef
			}

			// Return the entire target list
			yyVAL.list = targetList
		}
	case 1446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4157
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4163
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4164
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1449:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4174
		{
			deleteStmt := ast.NewDeleteStmt(yyDollar[4].rangevar)
			deleteStmt.WithClause = yyDollar[1].with
			deleteStmt.UsingClause = yyDollar[5].list
			deleteStmt.WhereClause = yyDollar[6].node
			deleteStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = deleteStmt
		}
	case 1450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4186
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4190
		{
			yyVAL.list = nil
		}
	case 1452:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:4205
		{
			mergeStmt := &ast.MergeStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_MergeStmt},
			}
			mergeStmt.WithClause = yyDollar[1].with
			mergeStmt.Relation = yyDollar[4].rangevar
			mergeStmt.SourceRelation = yyDollar[6].node
			mergeStmt.JoinCondition = yyDollar[8].node
			mergeStmt.MergeWhenClauses = yyDollar[9].list
			mergeStmt.ReturningList = yyDollar[10].list
			yyVAL.stmt = mergeStmt
		}
	case 1453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4222
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4226
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1455:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4237
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Query:     yyDollar[3].stmt,
				IsFrom:    false,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Initialize Options as empty NodeList
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[9].list != nil {
				nodeList := yyDollar[9].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			yyVAL.stmt = copyStmt
		}
	case 1456:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:4261
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Relation:  yyDollar[3].rangevar,
				IsFrom:    yyDollar[5].ival != 0,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Assign column list directly as NodeList
			copyStmt.Attlist = yyDollar[4].list

			// Initialize Options as empty NodeList and add options
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[2].node != nil {
				copyStmt.Options.Append(yyDollar[2].node)
			}
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[10].list != nil {
				nodeList := yyDollar[10].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			if yyDollar[11].node != nil {
				copyStmt.WhereClause = yyDollar[11].node
			}
			yyVAL.stmt = copyStmt
		}
	case 1457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4297
		{
			yyVAL.ival = 1
		}
	case 1458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4298
		{
			yyVAL.ival = 0
		}
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4302
		{
			yyVAL.ival = 1
		}
	case 1460:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4303
		{
			yyVAL.ival = 0
		}
	case 1461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4307
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4308
		{
			yyVAL.str = ""
		}
	case 1463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4309
		{
			yyVAL.str = ""
		}
	case 1464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4314
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4317
		{
			yyVAL.node = nil
		}
	case 1466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4322
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4325
		{
			yyVAL.node = nil
		}
	case 1468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4329
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4330
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4335
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1471:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4343
		{
			yyVAL.list = nil
		}
	case 1472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4350
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4354
		{
			yyVAL.node = ast.NewDefElem("freeze", ast.NewString("true"))
		}
	case 1474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4358
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4362
		{
			yyVAL.node = ast.NewDefElem("null", ast.NewString(yyDollar[3].str))
		}
	case 1476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4366
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("csv"))
		}
	case 1477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4370
		{
			yyVAL.node = ast.NewDefElem("header", ast.NewString("true"))
		}
	case 1478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4374
		{
			yyVAL.node = ast.NewDefElem("quote", ast.NewString(yyDollar[3].str))
		}
	case 1479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4378
		{
			yyVAL.node = ast.NewDefElem("escape", ast.NewString(yyDollar[3].str))
		}
	case 1480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4382
		{
			yyVAL.node = ast.NewDefElem("force_quote", yyDollar[3].list)
		}
	case 1481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4386
		{
			yyVAL.node = ast.NewDefElem("force_quote", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1482:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4390
		{
			yyVAL.node = ast.NewDefElem("force_not_null", yyDollar[4].list)
		}
	case 1483:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4394
		{
			yyVAL.node = ast.NewDefElem("force_not_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4398
		{
			yyVAL.node = ast.NewDefElem("force_null", yyDollar[3].list)
		}
	case 1485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4402
		{
			yyVAL.node = ast.NewDefElem("force_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4406
		{
			yyVAL.node = ast.NewDefElem("encoding", ast.NewString(yyDollar[2].str))
		}
	case 1487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4414
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4418
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4425
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4431
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4432
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4433
		{
			yyVAL.node = ast.NewA_Star(0)
		}
	case 1493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4434
		{
			yyVAL.node = ast.NewString("default")
		}
	case 1494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4435
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1495:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4436
		{
			yyVAL.node = nil
		}
	case 1496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4441
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4445
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4451
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4455
		{
			yyVAL.str = "true"
		}
	case 1500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4456
		{
			yyVAL.str = "false"
		}
	case 1501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4457
		{
			yyVAL.str = "on"
		}
	case 1502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4458
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4462
		{
			yyVAL.node = ast.NewFloat(yyDollar[1].str)
		}
	case 1504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4463
		{
			yyVAL.node = ast.NewFloat(yyDollar[2].str)
		}
	case 1505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4465
		{
			f := ast.NewFloat(yyDollar[2].str)
			f.FVal = "-" + f.FVal
			yyVAL.node = f
		}
	case 1506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4470
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4474
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4475
		{
			yyVAL.node = nil
		}
	case 1509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4479
		{
			yyVAL.objType = ast.OBJECT_ACCESS_METHOD
		}
	case 1510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4480
		{
			yyVAL.objType = ast.OBJECT_EVENT_TRIGGER
		}
	case 1511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4481
		{
			yyVAL.objType = ast.OBJECT_EXTENSION
		}
	case 1512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4482
		{
			yyVAL.objType = ast.OBJECT_FDW
		}
	case 1513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4483
		{
			yyVAL.objType = ast.OBJECT_LANGUAGE
		}
	case 1514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4484
		{
			yyVAL.objType = ast.OBJECT_PUBLICATION
		}
	case 1515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4485
		{
			yyVAL.objType = ast.OBJECT_SCHEMA
		}
	case 1516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4486
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_SERVER
		}
	case 1517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4490
		{
			yyVAL.objType = ast.OBJECT_POLICY
		}
	case 1518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4491
		{
			yyVAL.objType = ast.OBJECT_RULE
		}
	case 1519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4492
		{
			yyVAL.objType = ast.OBJECT_TRIGGER
		}
	case 1520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4496
		{
			yyVAL.objType = yyDollar[1].objType
		}
	case 1521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4497
		{
			yyVAL.objType = ast.OBJECT_DATABASE
		}
	case 1522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4498
		{
			yyVAL.objType = ast.OBJECT_ROLE
		}
	case 1523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4499
		{
			yyVAL.objType = ast.OBJECT_SUBSCRIPTION
		}
	case 1524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4500
		{
			yyVAL.objType = ast.OBJECT_TABLESPACE
		}
	case 1525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4505
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].typnam)
		}
	case 1526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4510
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 1529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4522
		{
			yyVAL.ival = 1
		}
	case 1530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4523
		{
			yyVAL.ival = 0
		}
	case 1535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4547
		{
			yyVAL.ival = 1
		}
	case 1536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4548
		{
			yyVAL.ival = 0
		}
	case 1537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4552
		{
			yyVAL.ival = 1
		}
	case 1538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4553
		{
			yyVAL.ival = 0
		}
	case 1539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4557
		{
			yyVAL.ival = 1
		}
	case 1540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4558
		{
			yyVAL.ival = 0
		}
	case 1541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4562
		{
			yyVAL.ival = 1
		}
	case 1542:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4563
		{
			yyVAL.ival = 0
		}
	case 1543:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4572
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1544:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4578
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1545:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4584
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1546:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4590
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1547:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4596
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4604
		{
			yyVAL.ival = int(ast.MERGE_WHEN_MATCHED)
		}
	case 1549:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4605
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_SOURCE)
		}
	case 1550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4609
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1551:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4610
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4614
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4615
		{
			yyVAL.node = nil
		}
	case 1554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4620
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_UPDATE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			yyVAL.node = mergeWhen
		}
	case 1555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4635
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_DELETE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4644
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			mergeWhen.Values = yyDollar[2].list
			yyVAL.node = mergeWhen
		}
	case 1557:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4651
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[3].ival)
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1558:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4658
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1559:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:4671
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[6].ival)
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[8].list
			yyVAL.node = mergeWhen
		}
	case 1560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4684
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1561:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4693
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1562:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:4708
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_UPDATE)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			onConflict.TargetList = yyDollar[7].list
			onConflict.WhereClause = yyDollar[8].node
			yyVAL.onconflict = onConflict
		}
	case 1563:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4718
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_NOTHING)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			yyVAL.onconflict = onConflict
		}
	case 1564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4726
		{
			yyVAL.onconflict = nil
		}
	case 1565:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4737
		{
			// Create InferClause for column-based conflict detection
			infer := ast.NewInferClause()
			// Assign IndexElems directly as NodeList
			infer.IndexElems = yyDollar[2].list
			infer.WhereClause = yyDollar[4].node
			yyVAL.node = infer
		}
	case 1566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4746
		{
			// Create InferClause for constraint-based conflict detection
			infer := ast.NewInferClause()
			infer.Conname = yyDollar[3].str
			yyVAL.node = infer
		}
	case 1567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4753
		{
			yyVAL.node = nil
		}
	case 1568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4764
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4768
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4775
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4779
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4786
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Name = yyDollar[1].str
		}
	case 1573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4791
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[1].node
		}
	case 1574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4796
		{
			yyVAL.node = yyDollar[4].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[2].node
		}
	case 1575:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4804
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Ordering = ast.SortByDir(yyDollar[3].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[4].ival)
			yyVAL.node = indexElem
		}
	case 1576:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4815
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Opclassopts = yyDollar[3].list
			indexElem.Ordering = ast.SortByDir(yyDollar[4].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[5].ival)
			yyVAL.node = indexElem
		}
	case 1577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4829
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1578:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4830
		{
			yyVAL.list = nil
		}
	case 1579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4834
		{
			yyVAL.ival = int(ast.SORTBY_ASC)
		}
	case 1580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4835
		{
			yyVAL.ival = int(ast.SORTBY_DESC)
		}
	case 1581:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4836
		{
			yyVAL.ival = int(ast.SORTBY_DEFAULT)
		}
	case 1582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4840
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_FIRST)
		}
	case 1583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4841
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_LAST)
		}
	case 1584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4842
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_DEFAULT)
		}
	case 1585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4847
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4851
		{
			yyVAL.list = nil
		}
	case 1587:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:4872
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[6].list
			createStmt.InhRelations = yyDollar[8].list
			createStmt.PartSpec = yyDollar[9].partspec
			createStmt.AccessMethod = yyDollar[10].str
			createStmt.Options = yyDollar[11].list
			createStmt.OnCommit = yyDollar[12].oncommit
			createStmt.TableSpaceName = yyDollar[13].str
			yyVAL.stmt = createStmt
		}
	case 1588:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:4888
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[9].list
			createStmt.InhRelations = yyDollar[11].list
			createStmt.PartSpec = yyDollar[12].partspec
			createStmt.AccessMethod = yyDollar[13].str
			createStmt.Options = yyDollar[14].list
			createStmt.OnCommit = yyDollar[15].oncommit
			createStmt.TableSpaceName = yyDollar[16].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1589:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:4905
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[6].list)
			createStmt.TableElts = yyDollar[7].list
			createStmt.PartSpec = yyDollar[8].partspec
			createStmt.AccessMethod = yyDollar[9].str
			createStmt.Options = yyDollar[10].list
			createStmt.OnCommit = yyDollar[11].oncommit
			createStmt.TableSpaceName = yyDollar[12].str
			yyVAL.stmt = createStmt
		}
	case 1590:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:4921
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[9].list)
			createStmt.TableElts = yyDollar[10].list
			createStmt.PartSpec = yyDollar[11].partspec
			createStmt.AccessMethod = yyDollar[12].str
			createStmt.Options = yyDollar[13].list
			createStmt.OnCommit = yyDollar[14].oncommit
			createStmt.TableSpaceName = yyDollar[15].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1591:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:4938
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[7].rangevar)
			createStmt.TableElts = yyDollar[8].list
			createStmt.PartBound = yyDollar[9].partboundspec
			createStmt.PartSpec = yyDollar[10].partspec
			createStmt.AccessMethod = yyDollar[11].str
			createStmt.Options = yyDollar[12].list
			createStmt.OnCommit = yyDollar[13].oncommit
			createStmt.TableSpaceName = yyDollar[14].str
			yyVAL.stmt = createStmt
		}
	case 1592:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:4955
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[10].rangevar)
			createStmt.TableElts = yyDollar[11].list
			createStmt.PartBound = yyDollar[12].partboundspec
			createStmt.PartSpec = yyDollar[13].partspec
			createStmt.AccessMethod = yyDollar[14].str
			createStmt.Options = yyDollar[15].list
			createStmt.OnCommit = yyDollar[16].oncommit
			createStmt.TableSpaceName = yyDollar[17].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4973
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4974
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4975
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4976
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4977
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4978
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4979
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 1600:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4980
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 1601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4984
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1602:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4985
		{
			yyVAL.list = nil
		}
	case 1603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4990
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4995
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5002
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5003
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5004
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5009
		{
			yyVAL.node = ast.NewTableLikeClause(yyDollar[2].rangevar, ast.TableLikeOption(yyDollar[3].ival))
		}
	case 1609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5016
		{
			yyVAL.ival = yyDollar[1].ival | yyDollar[3].ival
		}
	case 1610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5020
		{
			yyVAL.ival = yyDollar[1].ival & ^yyDollar[3].ival
		}
	case 1611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5024
		{
			yyVAL.ival = 0
		}
	case 1612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5030
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMMENTS)
		}
	case 1613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5031
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMPRESSION)
		}
	case 1614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5032
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_CONSTRAINTS)
		}
	case 1615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5033
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_DEFAULTS)
		}
	case 1616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5034
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_IDENTITY)
		}
	case 1617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5035
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_GENERATED)
		}
	case 1618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5036
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_INDEXES)
		}
	case 1619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5037
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STATISTICS)
		}
	case 1620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5038
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STORAGE)
		}
	case 1621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5039
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_ALL)
		}
	case 1622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5044
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5045
		{
			yyVAL.str = "default"
		}
	case 1624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5049
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1625:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5050
		{
			yyVAL.str = ""
		}
	case 1626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5054
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5055
		{
			yyVAL.str = "default"
		}
	case 1628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5059
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5060
		{
			yyVAL.str = ""
		}
	case 1630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5065
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1631:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5066
		{
			yyVAL.list = nil
		}
	case 1632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5071
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5077
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5084
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5085
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5090
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[2].list
			yyVAL.node = colDef
		}
	case 1637:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5096
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[4].list
			yyVAL.node = colDef
		}
	case 1638:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5107
		{
			hashSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_HASH)
			hashSpec.IsDefault = false

			// Parse hash partition bounds (modulus and remainder)
			hashOptions := yyDollar[5].list
			for _, optNode := range hashOptions.Items {
				if defElem, ok := optNode.(*ast.DefElem); ok {
					if defElem.Defname == "modulus" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Modulus = integerVal.IVal
							}
						}
					} else if defElem.Defname == "remainder" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Remainder = integerVal.IVal
							}
						}
					}
				}
			}

			yyVAL.partboundspec = hashSpec
		}
	case 1639:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5136
		{
			listSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			listSpec.IsDefault = false
			listSpec.ListDatums = yyDollar[5].list
			yyVAL.partboundspec = listSpec
		}
	case 1640:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5145
		{
			rangeSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_RANGE)
			rangeSpec.IsDefault = false
			rangeSpec.LowDatums = yyDollar[5].list
			rangeSpec.HighDatums = yyDollar[9].list
			yyVAL.partboundspec = rangeSpec
		}
	case 1641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5155
		{
			defaultSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			defaultSpec.IsDefault = true
			yyVAL.partboundspec = defaultSpec
		}
	case 1642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5164
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, ast.NewA_Const(ast.NewInteger(yyDollar[2].ival), 0))
		}
	case 1643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5171
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5175
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1645:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5183
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1646:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5184
		{
			yyVAL.list = nil
		}
	case 1647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5189
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5193
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5201
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5207
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5212
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1652:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5217
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			colDef.StorageName = yyDollar[3].str
			colDef.Compression = yyDollar[4].str
			colDef.Fdwoptions = yyDollar[5].list
			colDef.Constraints = yyDollar[6].list
			yyVAL.node = colDef
		}
	case 1653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5229
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1654:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5234
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5241
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5246
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5247
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5249
		{
			/*
			 * Note: the CollateClause is momentarily included in
			 * the list built by ColQualList, but we split it out
			 * again in SplitColQualList.
			 */
			collateClause := ast.NewCollateClause(yyDollar[2].list)
			yyVAL.node = collateClause
		}
	case 1659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5262
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5267
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_NOT_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5272
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRED)
			yyVAL.node = constraint
		}
	case 1662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5277
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_IMMEDIATE)
			yyVAL.node = constraint
		}
	case 1663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5285
		{
			yyVAL.bval = true
		}
	case 1664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5286
		{
			yyVAL.bval = false
		}
	case 1665:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5287
		{
			yyVAL.bval = true
		}
	case 1666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5291
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_ALWAYS
		}
	case 1667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5292
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_BY_DEFAULT
		}
	case 1668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5297
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5299
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5304
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5308
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5312
		{
			// SeqOptElem already returns a DefElem, so we can use it directly
			// Check for invalid options as per PostgreSQL
			defElem := yyDollar[2].defelt
			if defElem.Defname == "as" || defElem.Defname == "restart" || defElem.Defname == "owned_by" {
				yylex.Error("sequence option not supported here")
			}
			yyVAL.defelt = yyDollar[2].defelt
		}
	case 1673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5322
		{
			yyVAL.defelt = ast.NewDefElem("generated", ast.NewInteger(int(yyDollar[3].byt)))
		}
	case 1674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5328
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5329
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1676:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5334
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].typnam)
		}
	case 1677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5338
		{
			yyVAL.defelt = ast.NewDefElem("cache", yyDollar[2].node)
		}
	case 1678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5342
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(true))
		}
	case 1679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5346
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(false))
		}
	case 1680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5350
		{
			yyVAL.defelt = ast.NewDefElem("increment", yyDollar[3].node)
		}
	case 1681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5354
		{
			yyVAL.defelt = ast.NewDefElem("logged", nil)
		}
	case 1682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5358
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", yyDollar[2].node)
		}
	case 1683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5362
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", yyDollar[2].node)
		}
	case 1684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5366
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", nil)
		}
	case 1685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5370
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", nil)
		}
	case 1686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5374
		{
			yyVAL.defelt = ast.NewDefElem("owned_by", yyDollar[3].list)
		}
	case 1687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5378
		{
			yyVAL.defelt = ast.NewDefElem("sequence_name", yyDollar[3].list)
		}
	case 1688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5382
		{
			yyVAL.defelt = ast.NewDefElem("start", yyDollar[3].node)
		}
	case 1689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5386
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5390
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5394
		{
			yyVAL.defelt = ast.NewDefElem("unlogged", nil)
		}
	case 1692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5400
		{
		}
	case 1693:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5401
		{
		}
	case 1694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5405
		{
		}
	case 1695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5406
		{
		}
	case 1696:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5407
		{
		}
	case 1697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5412
		{
			// RECHECK no longer does anything in opclass definitions,
			// but we still accept it to ease porting of old database dumps.
			// When this is used, we should emit a notice.
			// For now, just return true to indicate RECHECK was present
			yyVAL.bval = true
		}
	case 1698:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5419
		{
			yyVAL.bval = false
		}
	case 1699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5423
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1700:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5424
		{
			yyVAL.list = nil
		}
	case 1701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5429
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NOTNULL)
		}
	case 1702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5433
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NULL)
		}
	case 1703:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5437
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Keys = nil // Will be filled by the parser
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Options = yyDollar[3].list
			constraint.Indexspace = yyDollar[4].str
			yyVAL.node = constraint
		}
	case 1704:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5446
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = nil // Will be filled by the parser
			yyVAL.node = constraint
		}
	case 1705:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5452
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			yyVAL.node = constraint
		}
	case 1706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5458
		{
			constraint := ast.NewConstraint(ast.CONSTR_DEFAULT)
			constraint.RawExpr = yyDollar[2].node
			yyVAL.node = constraint
		}
	case 1707:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5464
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Pktable = yyDollar[2].rangevar
			constraint.PkAttrs = yyDollar[3].list
			constraint.FkMatchtype = yyDollar[4].byt
			if actions := yyDollar[5].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			yyVAL.node = constraint
		}
	case 1708:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5481
		{
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.Options = yyDollar[5].list
			yyVAL.node = constraint
		}
	case 1709:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5488
		{
			constraint := ast.NewConstraint(ast.CONSTR_GENERATED)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.RawExpr = yyDollar[5].node
			yyVAL.node = constraint
		}
	case 1710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5498
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5503
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1712:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5508
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			processConstraintAttributeSpec(yyDollar[5].ival, constraint)
			yyVAL.node = constraint
		}
	case 1713:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5516
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 1714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5527
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Indexname = yyDollar[2].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[3].ival, constraint)
			yyVAL.node = constraint
		}
	case 1715:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5538
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 1716:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5548
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Indexname = yyDollar[3].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[4].ival, constraint)
			yyVAL.node = constraint
		}
	case 1717:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:5559
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.FkAttrs = yyDollar[4].list
			constraint.Pktable = yyDollar[7].rangevar
			constraint.PkAttrs = yyDollar[8].list
			constraint.FkMatchtype = yyDollar[9].byt
			if actions := yyDollar[10].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			processConstraintAttributeSpec(yyDollar[11].ival, constraint)
			yyVAL.node = constraint
		}
	case 1718:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5580
		{
			constraint := ast.NewConstraint(ast.CONSTR_EXCLUSION)
			constraint.AccessMethod = yyDollar[2].str
			constraint.Exclusions = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			constraint.WhereClause = yyDollar[9].node
			processConstraintAttributeSpec(yyDollar[10].ival, constraint)
			yyVAL.node = constraint
		}
	case 1719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5594
		{
			yyVAL.bval = true
		}
	case 1720:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5595
		{
			yyVAL.bval = false
		}
	case 1721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5601
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1722:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5607
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1723:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5615
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[3].list)
		}
	case 1724:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5620
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[5].list)
		}
	case 1725:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5628
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1726:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5632
		{
			yyVAL.list = nil
		}
	case 1727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5639
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_FULL
		}
	case 1728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5643
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_PARTIAL
		}
	case 1729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5647
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 1730:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5651
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5658
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 1732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5668
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 1733:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5678
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = yyDollar[2].keyaction
			yyVAL.keyactions = n
		}
	case 1734:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5685
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[2].keyaction
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 1735:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5692
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 1736:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5707
		{
			// Check for unsupported column lists on UPDATE actions
			keyAction := yyDollar[3].keyaction
			if keyAction.Cols != nil {
				if len(keyAction.Cols.Items) > 0 {
					yylex.Error("column list with SET NULL/SET DEFAULT is only supported for ON DELETE actions")
				}
			}
			yyVAL.keyaction = keyAction
		}
	case 1737:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5720
		{
			yyVAL.keyaction = yyDollar[3].keyaction
		}
	case 1738:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5727
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_NOACTION
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5734
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_RESTRICT
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5741
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_CASCADE
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1741:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5748
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETNULL
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 1742:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5755
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETDEFAULT
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 1743:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5764
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1744:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5765
		{
			yyVAL.list = nil
		}
	case 1745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5769
		{
			yyVAL.partspec = yyDollar[1].partspec
		}
	case 1746:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5770
		{
			yyVAL.partspec = nil
		}
	case 1747:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5775
		{
			partitionSpec := ast.NewPartitionSpec(ast.PartitionStrategy(yyDollar[3].str), yyDollar[5].list)
			yyVAL.partspec = partitionSpec
		}
	case 1748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5783
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5788
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1750:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5796
		{
			partElem := ast.NewPartitionElem(yyDollar[1].str, nil, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 1751:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5803
		{
			partElem := ast.NewPartitionElem("", yyDollar[1].node, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 1752:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5810
		{
			partElem := ast.NewPartitionElem("", yyDollar[2].node, 0)
			partElem.Collation = yyDollar[4].list
			partElem.Opclass = yyDollar[5].list
			yyVAL.node = partElem
		}
	case 1753:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5819
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1754:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5820
		{
			yyVAL.str = ""
		}
	case 1755:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5824
		{
			yyVAL.oncommit = ast.ONCOMMIT_DROP
		}
	case 1756:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5825
		{
			yyVAL.oncommit = ast.ONCOMMIT_DELETE_ROWS
		}
	case 1757:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5826
		{
			yyVAL.oncommit = ast.ONCOMMIT_PRESERVE_ROWS
		}
	case 1758:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5827
		{
			yyVAL.oncommit = ast.ONCOMMIT_NOOP
		}
	case 1759:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5831
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1760:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5832
		{
			yyVAL.str = ""
		}
	case 1761:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5836
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1762:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5837
		{
			yyVAL.str = ""
		}
	case 1763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5841
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1764:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:5854
		{
			indexStmt := ast.NewIndexStmt(yyDollar[5].str, yyDollar[7].rangevar, yyDollar[10].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.AccessMethod = yyDollar[8].str
			indexStmt.IndexIncludingParams = yyDollar[12].list
			indexStmt.NullsNotDistinct = !yyDollar[13].bval
			indexStmt.Options = yyDollar[14].list
			indexStmt.TableSpace = yyDollar[15].str
			indexStmt.WhereClause = yyDollar[16].node
			yyVAL.stmt = indexStmt
		}
	case 1765:
		yyDollar = yyS[yypt-19 : yypt+1]
//line postgres.y:5869
		{
			indexStmt := ast.NewIndexStmt(yyDollar[8].str, yyDollar[10].rangevar, yyDollar[13].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.IfNotExists = true
			indexStmt.AccessMethod = yyDollar[11].str
			indexStmt.IndexIncludingParams = yyDollar[15].list
			indexStmt.NullsNotDistinct = !yyDollar[16].bval
			indexStmt.Options = yyDollar[17].list
			indexStmt.TableSpace = yyDollar[18].str
			indexStmt.WhereClause = yyDollar[19].node
			yyVAL.stmt = indexStmt
		}
	case 1766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5885
		{
			yyVAL.bval = true
		}
	case 1767:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5886
		{
			yyVAL.bval = false
		}
	case 1768:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5890
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1769:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5891
		{
			yyVAL.str = "btree"
		}
	case 1770:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5895
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1771:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5896
		{
			yyVAL.list = nil
		}
	case 1772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5901
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1773:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5906
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1774:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5914
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1775:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5915
		{
			yyVAL.list = nil
		}
	case 1776:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5927
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1777:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5933
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1778:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5940
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 1779:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5946
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1780:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5953
		{
			// Index partition attachment - dedicated rule
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 1781:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5962
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			yyVAL.stmt = alterStmt
		}
	case 1782:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5968
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1783:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5975
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			yyVAL.stmt = alterStmt
		}
	case 1784:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5981
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1785:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5988
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			yyVAL.stmt = alterStmt
		}
	case 1786:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5994
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1787:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6001
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1788:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6007
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1789:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6014
		{
			// Partition commands - dedicated rule for partition-only operations
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1790:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6023
		{
			// Partition commands with IF EXISTS
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[6].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1791:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6033
		{
			// Bulk tablespace move for tables
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 1792:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6040
		{
			// Bulk tablespace move for tables owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 1793:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6048
		{
			// Bulk tablespace move for indexes
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 1794:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6055
		{
			// Bulk tablespace move for indexes owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 1795:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:6063
		{
			// Bulk tablespace move for materialized views
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[10].str)
			moveStmt.Nowait = yyDollar[11].bval
			yyVAL.stmt = moveStmt
		}
	case 1796:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:6070
		{
			// Bulk tablespace move for materialized views owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[13].str)
			moveStmt.Roles = yyDollar[10].list
			moveStmt.Nowait = yyDollar[14].bval
			yyVAL.stmt = moveStmt
		}
	case 1797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6081
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1798:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6086
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6094
		{
			yyVAL.bval = true
		}
	case 1800:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6095
		{
			yyVAL.bval = false
		}
	case 1801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6100
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1802:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6105
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6113
		{
			roleSpec := yyDollar[1].node.(*ast.RoleSpec)

			switch roleSpec.Roletype {
			case ast.ROLESPEC_CSTRING:
				yyVAL.str = roleSpec.Rolename
			case ast.ROLESPEC_PUBLIC:
				// PostgreSQL throws an error for "public" role name
				yylex.Error(`role name "public" is reserved`)
				return 1
			case ast.ROLESPEC_SESSION_USER:
				// PostgreSQL throws an error: SESSION_USER cannot be used as a role name here
				yylex.Error(`SESSION_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_USER:
				// PostgreSQL throws an error: CURRENT_USER cannot be used as a role name here
				yylex.Error(`CURRENT_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_ROLE:
				// PostgreSQL throws an error: CURRENT_ROLE cannot be used as a role name here
				yylex.Error(`CURRENT_ROLE cannot be used as a role name here`)
				return 1
			default:
				yylex.Error(`invalid role specification`)
				return 1
			}
		}
	case 1804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6144
		{
			// Handle special role names: "public" and "none"
			var roleSpec *ast.RoleSpec

			if yyDollar[1].str == "public" {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_PUBLIC,
				}
			} else if yyDollar[1].str == "none" {
				// PostgreSQL throws an error for "none" - role name "none" is reserved
				yylex.Error(`role name "none" is reserved`)
				return 1
			} else {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_CSTRING,
					Rolename: yyDollar[1].str,
				}
			}
			yyVAL.node = roleSpec
		}
	case 1805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6167
		{
			yyVAL.node = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_ROLE,
			}
		}
	case 1806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6174
		{
			yyVAL.node = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_USER,
			}
		}
	case 1807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6181
		{
			yyVAL.node = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_SESSION_USER,
			}
		}
	case 1808:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6192
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[2].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1809:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6199
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[5].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1810:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6206
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1811:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6213
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[6].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1812:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6220
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ColumnDefault, yyDollar[3].str, yyDollar[4].node)
		}
	case 1813:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6225
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropNotNull, yyDollar[3].str, nil)
		}
	case 1814:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6230
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetNotNull, yyDollar[3].str, nil)
		}
	case 1815:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6235
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetExpression, yyDollar[3].str, yyDollar[8].node)
		}
	case 1816:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6240
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
		}
	case 1817:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6245
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1818:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6252
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStatistics, yyDollar[3].str, yyDollar[6].node)
		}
	case 1819:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6257
		{
			cmd := ast.NewAlterTableCmd(ast.AT_SetStatistics, "", yyDollar[6].node)
			cmd.Num = int16(yyDollar[3].ival)
			yyVAL.node = cmd
		}
	case 1820:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6264
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 1821:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6269
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 1822:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6274
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStorage, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 1823:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6279
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetCompression, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 1824:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6284
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddIdentity, yyDollar[3].str, nil)
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[6].byt
			constraint.Options = yyDollar[9].list
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 1825:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6294
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetIdentity, yyDollar[3].str, yyDollar[4].list)
		}
	case 1826:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6299
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1827:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6306
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1828:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6313
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1829:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6321
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1830:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6332
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, nil)
			def := ast.NewColumnDef("", yyDollar[6].typnam, 0)
			def.Collclause = yyDollar[7].node.(*ast.CollateClause)
			def.RawDefault = yyDollar[8].node
			cmd.Def = def
			yyVAL.node = cmd
		}
	case 1831:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6342
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AlterColumnGenericOptions, yyDollar[3].str, yyDollar[4].list)
		}
	case 1832:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6347
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddConstraint, "", yyDollar[2].node)
		}
	case 1833:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6352
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterConstraint, "", nil)
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Conname = yyDollar[3].str
			constraint.Deferrable = (yyDollar[4].ival & ast.CAS_DEFERRABLE) != 0
			constraint.Initdeferred = (yyDollar[4].ival & ast.CAS_INITIALLY_DEFERRED) != 0
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 1834:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6363
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ValidateConstraint, yyDollar[3].str, nil)
		}
	case 1835:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6368
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1836:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6376
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1837:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6384
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOids, "", nil)
		}
	case 1838:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6389
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ClusterOn, yyDollar[3].str, nil)
		}
	case 1839:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6394
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropCluster, "", nil)
		}
	case 1840:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6399
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetLogged, "", nil)
		}
	case 1841:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6404
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetUnLogged, "", nil)
		}
	case 1842:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6409
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrig, yyDollar[3].str, nil)
		}
	case 1843:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6414
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysTrig, yyDollar[4].str, nil)
		}
	case 1844:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6419
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaTrig, yyDollar[4].str, nil)
		}
	case 1845:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6424
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigAll, "", nil)
		}
	case 1846:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6429
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigUser, "", nil)
		}
	case 1847:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6434
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrig, yyDollar[3].str, nil)
		}
	case 1848:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6439
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigAll, "", nil)
		}
	case 1849:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6444
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigUser, "", nil)
		}
	case 1850:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6449
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRule, yyDollar[3].str, nil)
		}
	case 1851:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6454
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysRule, yyDollar[4].str, nil)
		}
	case 1852:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6459
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaRule, yyDollar[4].str, nil)
		}
	case 1853:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6464
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRule, yyDollar[3].str, nil)
		}
	case 1854:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6469
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddInherit, "", yyDollar[2].rangevar)
		}
	case 1855:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6474
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropInherit, "", yyDollar[3].rangevar)
		}
	case 1856:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6479
		{
			typeName := makeTypeNameFromNodeList(yyDollar[2].list)
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddOf, "", typeName)
		}
	case 1857:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6485
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOf, "", nil)
		}
	case 1858:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6490
		{
			cmd := ast.NewAlterTableCmd(ast.AT_ChangeOwner, "", nil)
			cmd.Newowner = yyDollar[3].node.(*ast.RoleSpec)
			yyVAL.node = cmd
		}
	case 1859:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6497
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetAccessMethod, yyDollar[4].str, nil)
		}
	case 1860:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6502
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetTableSpace, yyDollar[3].str, nil)
		}
	case 1861:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6507
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetRelOptions, "", yyDollar[2].list)
		}
	case 1862:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6512
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetRelOptions, "", yyDollar[2].list)
		}
	case 1863:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6517
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ReplicaIdentity, "", yyDollar[3].node)
		}
	case 1864:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6522
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRowSecurity, "", nil)
		}
	case 1865:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6527
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRowSecurity, "", nil)
		}
	case 1866:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6532
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ForceRowSecurity, "", nil)
		}
	case 1867:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6537
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_NoForceRowSecurity, "", nil)
		}
	case 1868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6541
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_GenericOptions, "", yyDollar[1].list)
		}
	case 1869:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6549
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, yyDollar[4].partboundspec, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1870:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6557
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, yyDollar[4].bval, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1871:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6564
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartitionFinalize, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1872:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6575
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1873:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6584
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1874:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6585
		{
			yyVAL.node = nil
		}
	case 1875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6589
		{
		}
	case 1876:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6590
		{
		}
	case 1877:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6601
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1878:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6614
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1879:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6627
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1880:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6640
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1881:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6653
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[5].list
			objects.Append(ast.NewString(yyDollar[3].str))
			n.Objects = objects
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1882:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6668
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[7].list
			objects.Append(ast.NewString(yyDollar[5].str))
			n.Objects = objects
			n.Behavior = yyDollar[8].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1883:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6683
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1884:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6696
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1885:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6709
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1886:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6722
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1887:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6735
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = false
			n.Objects = yyDollar[4].list
			n.Behavior = yyDollar[5].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 1888:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6748
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = true
			n.Objects = yyDollar[6].list
			n.Behavior = yyDollar[7].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 1889:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6764
		{
			stmt := yyDollar[2].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 1890:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6770
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = true
			yyVAL.stmt = stmt
		}
	case 1891:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6776
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 1892:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6785
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "TRANSACTION", yyDollar[2].list, false)
		}
	case 1893:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6789
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "SESSION CHARACTERISTICS AS TRANSACTION", yyDollar[5].list, false)
		}
	case 1894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6792
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 1895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6796
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 1896:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6798
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "timezone", nil, false)
		}
	case 1897:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6802
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "transaction_isolation", nil, false)
		}
	case 1898:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6806
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "session_authorization", nil, false)
		}
	case 1899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6813
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, yyDollar[1].str, nil, false)
		}
	case 1900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6817
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET_ALL, "", nil, false)
		}
	case 1901:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6823
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 1902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6824
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 1903:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6828
		{
			yyVAL.stmt = ast.Stmt(yyDollar[2].vsetstmt)
		}
	case 1904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6833
		{
			yyVAL.objType = ast.OBJECT_TABLE
		}
	case 1905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6834
		{
			yyVAL.objType = ast.OBJECT_SEQUENCE
		}
	case 1906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6835
		{
			yyVAL.objType = ast.OBJECT_VIEW
		}
	case 1907:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6836
		{
			yyVAL.objType = ast.OBJECT_MATVIEW
		}
	case 1908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6837
		{
			yyVAL.objType = ast.OBJECT_INDEX
		}
	case 1909:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6838
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_TABLE
		}
	case 1910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6839
		{
			yyVAL.objType = ast.OBJECT_COLLATION
		}
	case 1911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6840
		{
			yyVAL.objType = ast.OBJECT_CONVERSION
		}
	case 1912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6841
		{
			yyVAL.objType = ast.OBJECT_STATISTIC_EXT
		}
	case 1913:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6842
		{
			yyVAL.objType = ast.OBJECT_TSPARSER
		}
	case 1914:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6843
		{
			yyVAL.objType = ast.OBJECT_TSDICTIONARY
		}
	case 1915:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6844
		{
			yyVAL.objType = ast.OBJECT_TSTEMPLATE
		}
	case 1916:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6845
		{
			yyVAL.objType = ast.OBJECT_TSCONFIGURATION
		}
	case 1917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6855
		{
			yyVAL.objType = yyDollar[1].objType
		}
	case 1918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6856
		{
			yyVAL.objType = ast.OBJECT_DATABASE
		}
	case 1919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6857
		{
			yyVAL.objType = ast.OBJECT_ROLE
		}
	case 1920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6858
		{
			yyVAL.objType = ast.OBJECT_SUBSCRIPTION
		}
	case 1921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6859
		{
			yyVAL.objType = ast.OBJECT_TABLESPACE
		}
	case 1922:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6872
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1923:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6877
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.node = objWithArgs
		}
	case 1924:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6891
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.node = objWithArgs
		}
	case 1925:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6905
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].node,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1926:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6916
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1927:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6927
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1928:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6938
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DATABASE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1929:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6949
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1930:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6960
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMCONSTRAINT,
				Object:     yyDollar[3].list,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1931:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6972
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1932:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6983
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].node,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1933:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6994
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1934:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7005
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1935:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7016
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1936:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7033
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1937:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7050
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1938:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7062
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[7].rangevar,
				Subname:    yyDollar[5].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1939:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7074
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].node,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1940:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7085
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1941:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7096
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].node,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1942:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7107
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SCHEMA,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1943:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7118
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1944:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7129
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1945:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7140
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1946:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7151
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1947:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7162
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1948:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7173
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1949:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7184
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1950:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7195
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1951:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7206
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1952:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7217
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1953:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7228
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1954:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7239
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1955:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7250
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1956:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7261
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1957:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7272
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1958:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7285
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1959:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7298
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1960:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7311
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1961:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7324
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1962:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7337
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1963:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7350
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[3].rangevar,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1964:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7362
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[8].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1965:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7374
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1966:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7387
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1967:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7400
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_RULE,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1968:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7412
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TRIGGER,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1969:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7424
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1970:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7435
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1971:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7446
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1972:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7457
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLESPACE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1973:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7468
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1974:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7479
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSPARSER,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1975:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7490
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1976:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7501
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSTEMPLATE,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1977:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7512
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1978:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7523
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1979:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7534
		{
			rv, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(err.Error())
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_ATTRIBUTE,
				RelationType: ast.OBJECT_TYPE,
				Relation:     rv,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				Behavior:     ast.DropBehavior(yyDollar[9].dropBehav),
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1980:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7560
		{
			yyVAL.ival = 0
		}
	case 1981:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7562
		{
			// Combine constraint attribute bits
			newspec := yyDollar[1].ival | yyDollar[2].ival

			// Check for conflicts (NOT DEFERRABLE + INITIALLY DEFERRED)
			if (newspec & (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED)) == (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED) {
				// This would be an error in real PostgreSQL parser
			}

			yyVAL.ival = newspec
		}
	case 1982:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7576
		{
			yyVAL.ival = ast.CAS_NOT_DEFERRABLE
		}
	case 1983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7577
		{
			yyVAL.ival = ast.CAS_DEFERRABLE
		}
	case 1984:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7578
		{
			yyVAL.ival = ast.CAS_INITIALLY_IMMEDIATE
		}
	case 1985:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7579
		{
			yyVAL.ival = ast.CAS_INITIALLY_DEFERRED
		}
	case 1986:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7580
		{
			yyVAL.ival = ast.CAS_NOT_VALID
		}
	case 1987:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7581
		{
			yyVAL.ival = ast.CAS_NO_INHERIT
		}
	case 1988:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7585
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7590
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 1990:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7595
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1991:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7603
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 1992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7607
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 1993:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7611
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, yyDollar[5].node, ast.DEFELEM_UNSPEC)
		}
	case 1994:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7615
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, nil, ast.DEFELEM_UNSPEC)
		}
	case 1995:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7629
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].ival != 0,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  yyDollar[7].typnam,
				Options:     yyDollar[8].list,
				SQLBody:     yyDollar[9].node,
			}
			yyVAL.stmt = stmt
		}
	case 1996:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:7643
		{
			// Handle RETURNS TABLE variant
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].ival != 0,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil, // TODO: Handle table return type
				Options:     yyDollar[11].list,
				SQLBody:     yyDollar[12].node,
			}
			// TODO: Process table_func_column_list into appropriate return type
			yyVAL.stmt = stmt
		}
	case 1997:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7659
		{
			// No explicit return type (for procedures disguised as functions)
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].ival != 0,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 1998:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7674
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: true,
				Replace:     yyDollar[2].ival != 0,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 1999:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7689
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2000:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7690
		{
			yyVAL.list = nil
		}
	case 2001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7695
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2002:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7699
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7707
		{
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2004:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7711
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2005:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7716
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2006:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7724
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    yyDollar[2].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2007:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7733
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[2].funparammode,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2008:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7742
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2009:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7751
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    "",
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7760
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    "",
				ArgType: yyDollar[1].typnam,
			}
			yyVAL.funparam = param
		}
	case 2011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7771
		{
			yyVAL.funparammode = ast.FUNC_PARAM_IN
		}
	case 2012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7772
		{
			yyVAL.funparammode = ast.FUNC_PARAM_OUT
		}
	case 2013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7773
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2014:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7774
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7775
		{
			yyVAL.funparammode = ast.FUNC_PARAM_VARIADIC
		}
	case 2016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7779
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7783
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2018:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7785
		{
			// Handle %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				// TODO: Add %TYPE indicator
			}
		}
	case 2019:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7795
		{
			// Handle SETOF %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[2].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				Setof: true,
			}
		}
	case 2020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7807
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2021:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7808
		{
			yyVAL.list = nil
		}
	case 2022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7813
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].defelt)
			yyVAL.list = list
		}
	case 2023:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7819
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2024:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7827
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].node)
		}
	case 2025:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7831
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 2026:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7835
		{
			yyVAL.defelt = ast.NewDefElem("transform", yyDollar[2].list)
		}
	case 2027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7839
		{
			yyVAL.defelt = ast.NewDefElem("window", ast.NewBoolean(true))
		}
	case 2028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7843
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7850
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.node = list
		}
	case 2030:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7856
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 2031:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7866
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[3].typnam)
			yyVAL.list = list
		}
	case 2032:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7872
		{
			yyDollar[1].list.Append(yyDollar[5].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7880
		{
			yyVAL.node = yyDollar[1].stmt
		}
	case 2034:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7884
		{
			/*
			 * A compound statement is stored as a single-item list
			 * containing the list of statements as its member.  That
			 * way, the parse analysis code can tell apart an empty
			 * body from no body at all.
			 */
			list := ast.NewNodeList()
			list.Append(yyDollar[3].list)
			yyVAL.node = list
		}
	case 2035:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7896
		{
			yyVAL.node = nil
		}
	case 2036:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7903
		{
			yyVAL.stmt = &ast.ReturnStmt{
				ReturnVal: yyDollar[2].node,
			}
		}
	case 2037:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7912
		{
			/* As in stmtmulti, discard empty statements */
			if yyDollar[2].stmt != nil {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			} else {
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2038:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7922
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7928
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7929
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2041:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7934
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(false))
		}
	case 2042:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7938
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 2043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7942
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 2044:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7946
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("immutable"))
		}
	case 2045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7950
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("stable"))
		}
	case 2046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7954
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("volatile"))
		}
	case 2047:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7958
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 2048:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7962
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 2049:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7966
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 2050:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7970
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 2051:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7974
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(true))
		}
	case 2052:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7978
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(false))
		}
	case 2053:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7982
		{
			yyVAL.defelt = ast.NewDefElem("cost", yyDollar[2].node)
		}
	case 2054:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7986
		{
			yyVAL.defelt = ast.NewDefElem("rows", yyDollar[2].node)
		}
	case 2055:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7990
		{
			yyVAL.defelt = ast.NewDefElem("support", yyDollar[2].list)
		}
	case 2056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7994
		{
			yyVAL.defelt = ast.NewDefElem("set", yyDollar[1].vsetstmt)
		}
	case 2057:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7998
		{
			yyVAL.defelt = ast.NewDefElem("parallel", ast.NewString(yyDollar[2].str))
		}
	case 2058:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8005
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8009
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2060:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:8025
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[6].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].ival != 0,
				IsConstraint: false,
				Trigname:     yyDollar[4].str,
				Relation:     yyDollar[8].rangevar,
				Funcname:     yyDollar[14].list,
				Args:         yyDollar[16].list,
				Row:          yyDollar[10].bval,
				Timing:       int16(yyDollar[5].ival),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[11].node,
				Transitions:  yyDollar[9].list,
				Deferrable:   false,
				Initdeferred: false,
				Constrrel:    nil,
			}
			yyVAL.stmt = stmt
		}
	case 2061:
		yyDollar = yyS[yypt-21 : yypt+1]
//line postgres.y:8057
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[7].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].ival != 0,
				IsConstraint: true,
				Trigname:     yyDollar[5].str,
				Relation:     yyDollar[9].rangevar,
				Funcname:     yyDollar[18].list,
				Args:         yyDollar[20].list,
				Row:          true,
				Timing:       int16(ast.TRIGGER_TIMING_AFTER),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[15].node,
				Transitions:  nil,
				Deferrable:   true, // Default for constraint triggers
				Initdeferred: false,
				Constrrel:    yyDollar[10].rangevar,
			}
			yyVAL.stmt = stmt
		}
	case 2062:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8088
		{
			yyVAL.ival = ast.TRIGGER_TIMING_BEFORE
		}
	case 2063:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8089
		{
			yyVAL.ival = ast.TRIGGER_TIMING_AFTER
		}
	case 2064:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8090
		{
			yyVAL.ival = ast.TRIGGER_TIMING_INSTEAD
		}
	case 2065:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8095
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2066:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8097
		{
			// Extract event types and column lists from both sides
			events1 := yyDollar[1].list.Items[0].(*ast.Integer).IVal
			events2 := yyDollar[3].list.Items[0].(*ast.Integer).IVal
			columns1 := yyDollar[1].list.Items[1]
			columns2 := yyDollar[3].list.Items[1]

			// Check for duplicate events
			if events1&events2 != 0 {
				// TODO: Generate parse error for duplicate trigger events
			}

			// Create combined result [events1|events2, combined_columns]
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(events1 | events2))

			// Concatenate column lists (if any)
			if columns1 != nil && columns2 != nil {
				// Both have columns - concatenate
				combinedCols := columns1.(*ast.NodeList)
				if columns2List, ok := columns2.(*ast.NodeList); ok {
					for _, item := range columns2List.Items {
						combinedCols.Append(item)
					}
				}
				list.Append(combinedCols)
			} else if columns1 != nil {
				list.Append(columns1)
			} else if columns2 != nil {
				list.Append(columns2)
			} else {
				list.Append(nil)
			}

			yyVAL.list = list
		}
	case 2067:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8137
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_INSERT)))
			list.Append(nil) // No columns for INSERT
			yyVAL.list = list
		}
	case 2068:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8144
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_DELETE)))
			list.Append(nil) // No columns for DELETE
			yyVAL.list = list
		}
	case 2069:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8151
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(nil) // No columns for UPDATE
			yyVAL.list = list
		}
	case 2070:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8158
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(yyDollar[3].list) // Column list for UPDATE OF
			yyVAL.list = list
		}
	case 2071:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8165
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_TRUNCATE)))
			list.Append(nil) // No columns for TRUNCATE
			yyVAL.list = list
		}
	case 2072:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8174
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2073:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8175
		{
			yyVAL.list = nil
		}
	case 2074:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8179
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2075:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8184
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2076:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8192
		{
			trans := &ast.TriggerTransition{
				Name:    yyDollar[4].str,
				IsNew:   yyDollar[1].bval,
				IsTable: yyDollar[2].bval,
			}
			yyVAL.node = trans
		}
	case 2077:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8203
		{
			yyVAL.bval = true
		}
	case 2078:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8204
		{
			yyVAL.bval = false
		}
	case 2079:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8208
		{
			yyVAL.bval = true
		}
	case 2080:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8209
		{
			yyVAL.bval = false
		}
	case 2081:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8213
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2082:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8218
		{
			yyVAL.bval = yyDollar[3].bval
		}
	case 2083:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8222
		{
			// If ROW/STATEMENT not specified, default to STATEMENT
			yyVAL.bval = false
		}
	case 2086:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8234
		{
			yyVAL.bval = true
		}
	case 2087:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8235
		{
			yyVAL.bval = false
		}
	case 2088:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8239
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2089:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8240
		{
			yyVAL.node = nil
		}
	case 2092:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8249
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2093:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8254
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2094:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8258
		{
			yyVAL.list = nil
		}
	case 2095:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8263
		{
			yyVAL.node = ast.NewString(fmt.Sprintf("%d", yyDollar[1].ival))
		}
	case 2096:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8266
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2097:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8267
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2098:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8268
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2099:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8272
		{
			yyVAL.rangevar = yyDollar[2].rangevar
		}
	case 2100:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8273
		{
			yyVAL.rangevar = nil
		}
	case 2101:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8286
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[4].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[5].list,
				Query:           yyDollar[8].stmt,
				Replace:         false,
				Options:         yyDollar[6].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[9].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2102:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:8302
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[6].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[10].stmt,
				Replace:         true,
				Options:         yyDollar[8].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[11].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2103:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:8318
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[5].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[11].stmt,
				Replace:         false,
				Options:         yyDollar[9].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[12].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2104:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:8334
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[7].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[9].list,
				Query:           yyDollar[13].stmt,
				Replace:         true,
				Options:         yyDollar[11].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[14].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8351
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8352
		{
			yyVAL.list = nil
		}
	case 2107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8356
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8357
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8358
		{
			yyVAL.ival = int(ast.LOCAL_CHECK_OPTION)
		}
	case 2110:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8359
		{
			yyVAL.ival = int(ast.NO_CHECK_OPTION)
		}
	case 2111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8363
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8365
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_CURRENT, yyDollar[1].str, nil, false)
		}
	case 2113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8369
		{
			args := ast.NewNodeList(yyDollar[3].node)
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "timezone", args, false)
		}
	case 2114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8374
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "catalog", args, false)
		}
	case 2115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8379
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "search_path", args, false)
		}
	case 2116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8384
		{
			var args *ast.NodeList
			if yyDollar[2].str != "" {
				args = ast.NewNodeList(ast.NewString(yyDollar[2].str))
			}
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "client_encoding", args, false)
		}
	case 2117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8392
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "role", args, false)
		}
	case 2118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8397
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "session_authorization", args, false)
		}
	case 2119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8402
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, "session_authorization", nil, false)
		}
	case 2120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8406
		{
			var value string
			if yyDollar[3].ival == int(ast.XMLOPTION_DOCUMENT) {
				value = "document"
			} else {
				value = "content"
			}
			args := ast.NewNodeList(ast.NewString(value))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "xmloption", args, false)
		}
	case 2121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8417
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "transaction_snapshot", args, false)
		}
	case 2122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8425
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8429
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8433
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8437
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8444
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8448
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 2128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8455
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8461
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8468
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8469
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8473
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8474
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8475
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8476
		{
			yyVAL.node = ast.NewString("default")
		}
	case 2136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8477
		{
			yyVAL.node = ast.NewString("local")
		}
	case 2137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8478
		{
			yyVAL.node = ast.NewString("true")
		}
	case 2138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8479
		{
			yyVAL.node = ast.NewString("false")
		}
	case 2139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8480
		{
			yyVAL.node = ast.NewString("on")
		}
	case 2140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8481
		{
			yyVAL.node = ast.NewString("off")
		}
	case 2141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8485
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8486
		{
			yyVAL.str = "default"
		}
	case 2143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8487
		{
			yyVAL.str = ""
		}
	case 2144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8491
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8492
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8496
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8497
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8498
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8499
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8503
		{
			yyVAL.ival = int(ast.XMLOPTION_DOCUMENT)
		}
	case 2151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8504
		{
			yyVAL.ival = int(ast.XMLOPTION_CONTENT)
		}
	case 2152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8509
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8515
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8520
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8528
		{
			yyVAL.node = ast.NewDefElem("transaction_isolation", ast.NewString(yyDollar[3].str))
		}
	case 2156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8532
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(true))
		}
	case 2157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8536
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(false))
		}
	case 2158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8540
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(true))
		}
	case 2159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8544
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(false))
		}
	case 2160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8550
		{
			yyVAL.str = "read uncommitted"
		}
	case 2161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8551
		{
			yyVAL.str = "read committed"
		}
	case 2162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8552
		{
			yyVAL.str = "repeatable read"
		}
	case 2163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8553
		{
			yyVAL.str = "serializable"
		}
	case 2164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8557
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 2165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8558
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8559
		{
			yyVAL.node = yyDollar[1].list
		}
	case 2167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8562
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8563
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8564
		{
			yyVAL.node = ast.NewString("none")
		}
	case 2170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8568
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8569
		{
			yyVAL.list = nil
		}
	case 2172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8573
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8574
		{
			yyVAL.node = nil
		}
	case 2174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8578
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8583
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8588
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8596
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8600
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_SET
			yyVAL.defelt = elem
		}
	case 2179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8606
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_ADD
			yyVAL.defelt = elem
		}
	case 2180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8612
		{
			yyVAL.defelt = ast.NewDefElemExtended("", yyDollar[2].str, nil, ast.DEFELEM_DROP)
		}
	case 2181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8618
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8619
		{
			yyVAL.str = ""
		}
	case 2183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8623
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_NOTHING, "")
		}
	case 2184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8624
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_FULL, "")
		}
	case 2185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8625
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_DEFAULT, "")
		}
	case 2186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8626
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_INDEX, yyDollar[3].str)
		}
	case 2187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8630
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8635
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8640
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8647
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8648
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	}
	goto yystack /* stack new state and value */
}
