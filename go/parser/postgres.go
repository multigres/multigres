// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
	"strings"
)

// Parser state for handling complex grammar constructs
var parserState struct {
	// Future parser state variables can be added here
}

// SelectLimit - Private struct for the result of opt_select_limit production
// Mirrors PostgreSQL's SelectLimit from gram.y:126-132
type selectLimit struct {
	limitOffset ast.Node
	limitCount  ast.Node
	limitOption ast.LimitOption
}

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// PrivTarget - represents a privilege target for GRANT/REVOKE statements
// Internal struct for handling privilege_target grammar rule
type PrivTarget struct {
	targtype ast.GrantTargetType
	objtype  ast.ObjectType
	objs     *ast.NodeList
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:51
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string
	bval    bool
	byt     byte
	rune    rune

	// AST nodes
	node        ast.Node
	stmt        ast.Stmt
	stmtList    []ast.Stmt
	list        *ast.NodeList
	groupClause *ast.GroupClause
	selectLimit *selectLimit

	// Specific AST node types
	into          *ast.IntoClause
	onconflict    *ast.OnConflictClause
	windef        *ast.WindowDef
	createStmt    *ast.CreateStmt
	indexStmt     *ast.IndexStmt
	alterStmt     *ast.AlterTableStmt
	dropStmt      *ast.DropStmt
	columnDef     *ast.ColumnDef
	constraint    *ast.Constraint
	indexElem     *ast.IndexElem
	alterCmd      *ast.AlterTableCmd
	with          *ast.WithClause
	rangevar      *ast.RangeVar
	objType       ast.ObjectType
	dropBehav     ast.DropBehavior
	setquant      ast.SetQuantifier
	typnam        *ast.TypeName
	partspec      *ast.PartitionSpec
	partboundspec *ast.PartitionBoundSpec
	oncommit      ast.OnCommitAction
	defelt        *ast.DefElem
	target        *ast.ResTarget            // For select targets, insert columns
	alias         *ast.Alias                // For table and column aliases
	jtype         ast.JoinType              // For join type specifications
	jexpr         *ast.JoinExpr             // For joined table expressions
	keyaction     *ast.KeyAction            // For foreign key actions
	keyactions    *ast.KeyActions           // For foreign key action sets
	funparam      *ast.FunctionParameter    // For function parameters
	funparammode  ast.FunctionParameterMode // For parameter modes (IN/OUT/INOUT/VARIADIC)
	vsetstmt      *ast.VariableSetStmt      // For SET/RESET statements
	rolespec      *ast.RoleSpec
	objwithargs   *ast.ObjectWithArgs
	statelem      *ast.StatsElem
	accesspriv    *ast.AccessPriv // For privilege specifications
	privtarget    *PrivTarget     // For privilege target specifications

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const UNKNOWN = 57392
const WHEN = 57393
const IS = 57394
const ISNULL = 57395
const NOTNULL = 57396
const AT = 57397
const TIME = 57398
const ZONE = 57399
const LOCAL = 57400
const SYMMETRIC = 57401
const ASYMMETRIC = 57402
const TO = 57403
const OPERATOR = 57404
const SELECT = 57405
const FROM = 57406
const WHERE = 57407
const ONLY = 57408
const TABLE = 57409
const LIMIT = 57410
const OFFSET = 57411
const BY = 57412
const GROUP_P = 57413
const HAVING = 57414
const INTO = 57415
const ON = 57416
const JOIN = 57417
const INNER_P = 57418
const LEFT = 57419
const RIGHT = 57420
const FULL = 57421
const OUTER_P = 57422
const CROSS = 57423
const NATURAL = 57424
const USING = 57425
const RECURSIVE = 57426
const MATERIALIZED = 57427
const VALUES = 57428
const SEARCH = 57429
const BREADTH = 57430
const DEPTH = 57431
const CYCLE = 57432
const FIRST_P = 57433
const LAST_P = 57434
const SET = 57435
const ASC = 57436
const DESC = 57437
const INSERT = 57438
const UPDATE = 57439
const DELETE_P = 57440
const MERGE = 57441
const RETURNING = 57442
const CONFLICT = 57443
const OVERRIDING = 57444
const USER = 57445
const SYSTEM_P = 57446
const MATCHED = 57447
const THEN = 57448
const SOURCE = 57449
const TARGET = 57450
const DO = 57451
const NOTHING = 57452
const COPY = 57453
const PROGRAM = 57454
const STDIN = 57455
const STDOUT = 57456
const BINARY = 57457
const FREEZE = 57458
const CONSTRAINT = 57459
const VERBOSE = 57460
const ANALYZE = 57461
const CURRENT_P = 57462
const CURSOR = 57463
const OF = 57464
const COLUMNS = 57465
const ORDINALITY = 57466
const XMLTABLE = 57467
const JSON_TABLE = 57468
const ROWS = 57469
const PATH = 57470
const PASSING = 57471
const FOR = 57472
const NESTED = 57473
const REF_P = 57474
const XMLNAMESPACES = 57475
const ARRAY = 57476
const ERROR = 57477
const ERROR_P = 57478
const EMPTY = 57479
const EMPTY_P = 57480
const OBJECT_P = 57481
const WRAPPER = 57482
const CONDITIONAL = 57483
const UNCONDITIONAL = 57484
const QUOTES = 57485
const OMIT = 57486
const KEEP = 57487
const SCALAR = 57488
const STRING_P = 57489
const ENCODING = 57490
const DELIMITER = 57491
const DELIMITERS = 57492
const HEADER_P = 57493
const QUOTE = 57494
const FORCE = 57495
const CSV = 57496
const VALUE_P = 57497
const JSON_QUERY = 57498
const JSON_VALUE = 57499
const JSON_SERIALIZE = 57500
const JSON_OBJECT = 57501
const JSON_ARRAY = 57502
const JSON_OBJECTAGG = 57503
const JSON_ARRAYAGG = 57504
const JSON_EXISTS = 57505
const JSON_SCALAR = 57506
const FORMAT = 57507
const JSON = 57508
const UTF8 = 57509
const WITHOUT = 57510
const BIT = 57511
const NUMERIC = 57512
const INTEGER = 57513
const SMALLINT = 57514
const BIGINT = 57515
const REAL = 57516
const FLOAT_P = 57517
const DOUBLE_P = 57518
const PRECISION = 57519
const CHARACTER = 57520
const CHAR_P = 57521
const VARCHAR = 57522
const NATIONAL = 57523
const NCHAR = 57524
const VARYING = 57525
const TIMESTAMP = 57526
const INTERVAL = 57527
const INT_P = 57528
const DECIMAL_P = 57529
const DEC = 57530
const BOOLEAN_P = 57531
const VARIADIC = 57532
const ABORT_P = 57533
const ABSENT = 57534
const ABSOLUTE_P = 57535
const ACCESS = 57536
const ACTION = 57537
const ADD_P = 57538
const ADMIN = 57539
const AFTER = 57540
const AGGREGATE = 57541
const ALSO = 57542
const ALWAYS = 57543
const ANALYSE = 57544
const ASENSITIVE = 57545
const ASSERTION = 57546
const ASSIGNMENT = 57547
const ATOMIC = 57548
const ATTACH = 57549
const ATTRIBUTE = 57550
const AUTHORIZATION = 57551
const BACKWARD = 57552
const BEFORE = 57553
const BEGIN_P = 57554
const CACHE = 57555
const CALL = 57556
const CALLED = 57557
const CASCADED = 57558
const CATALOG_P = 57559
const CHAIN = 57560
const CHARACTERISTICS = 57561
const CHECKPOINT = 57562
const CLASS = 57563
const CLOSE = 57564
const CLUSTER = 57565
const COALESCE = 57566
const COLLATION = 57567
const COMMENT = 57568
const COMMENTS = 57569
const COMMIT = 57570
const COMMITTED = 57571
const COMPRESSION = 57572
const CONFIGURATION = 57573
const CONNECTION = 57574
const CONSTRAINTS = 57575
const CONTENT_P = 57576
const CONTINUE_P = 57577
const CONVERSION_P = 57578
const COST = 57579
const CUBE = 57580
const CURRENT_CATALOG = 57581
const CURRENT_DATE = 57582
const CURRENT_ROLE = 57583
const CURRENT_SCHEMA = 57584
const CURRENT_TIME = 57585
const CURRENT_TIMESTAMP = 57586
const CURRENT_USER = 57587
const DATA_P = 57588
const DATABASE = 57589
const DAY_P = 57590
const DEALLOCATE = 57591
const DECLARE = 57592
const DEFAULTS = 57593
const DEFERRABLE = 57594
const DEFERRED = 57595
const DEFINER = 57596
const DEPENDS = 57597
const DETACH = 57598
const DICTIONARY = 57599
const DISABLE_P = 57600
const DISCARD = 57601
const DOCUMENT_P = 57602
const DOMAIN_P = 57603
const EACH = 57604
const ELSE = 57605
const ENABLE_P = 57606
const ENCRYPTED = 57607
const END_P = 57608
const ENUM_P = 57609
const EVENT = 57610
const EXCEPT = 57611
const EXCLUDE = 57612
const EXCLUDING = 57613
const EXCLUSIVE = 57614
const EXECUTE = 57615
const EXPLAIN = 57616
const EXPRESSION = 57617
const EXTENSION = 57618
const EXTERNAL = 57619
const EXTRACT = 57620
const FAMILY = 57621
const FETCH = 57622
const FILTER = 57623
const FINALIZE = 57624
const FOLLOWING = 57625
const FOREIGN = 57626
const FORWARD = 57627
const FUNCTION = 57628
const FUNCTIONS = 57629
const GENERATED = 57630
const GLOBAL = 57631
const GRANT = 57632
const GRANTED = 57633
const GREATEST = 57634
const GROUPING = 57635
const GROUPS = 57636
const HANDLER = 57637
const HOLD = 57638
const HOUR_P = 57639
const IDENTITY_P = 57640
const IMMEDIATE = 57641
const IMMUTABLE = 57642
const IMPLICIT_P = 57643
const IMPORT_P = 57644
const INCLUDE = 57645
const INCLUDING = 57646
const INCREMENT = 57647
const INDENT = 57648
const INDEX = 57649
const INDEXES = 57650
const INHERIT = 57651
const INHERITS = 57652
const INITIALLY = 57653
const INLINE_P = 57654
const INPUT_P = 57655
const INSENSITIVE = 57656
const INSTEAD = 57657
const INTERSECT = 57658
const INVOKER = 57659
const ISOLATION = 57660
const KEYS = 57661
const LABEL = 57662
const LANGUAGE = 57663
const LARGE_P = 57664
const LATERAL_P = 57665
const LEAKPROOF = 57666
const LEAST = 57667
const LEADING = 57668
const LEVEL = 57669
const LISTEN = 57670
const LOAD = 57671
const LOCALTIME = 57672
const LOCALTIMESTAMP = 57673
const LOCATION = 57674
const LOCK_P = 57675
const LOCKED = 57676
const LOGGED = 57677
const MAPPING = 57678
const MATCH = 57679
const MAXVALUE = 57680
const MERGE_ACTION = 57681
const METHOD = 57682
const MINUTE_P = 57683
const MINVALUE = 57684
const MODE = 57685
const MONTH_P = 57686
const MOVE = 57687
const NAME_P = 57688
const NAMES = 57689
const NEW = 57690
const NEXT = 57691
const NFC = 57692
const NFD = 57693
const NFKC = 57694
const NFKD = 57695
const NO = 57696
const NONE = 57697
const NORMALIZE = 57698
const NORMALIZED = 57699
const NOTIFY = 57700
const NOWAIT = 57701
const NULLIF = 57702
const OUT_P = 57703
const OVERLAY = 57704
const OVERLAPS = 57705
const OWNED = 57706
const OWNER = 57707
const PARALLEL = 57708
const PARAMETER = 57709
const PARSER = 57710
const PARTIAL = 57711
const PARTITION = 57712
const PASSWORD = 57713
const PLACING = 57714
const PLAN = 57715
const PLANS = 57716
const POLICY = 57717
const POSITION = 57718
const PRECEDING = 57719
const PREPARE = 57720
const PREPARED = 57721
const PRESERVE = 57722
const PRIMARY = 57723
const PRIOR = 57724
const PRIVILEGES = 57725
const PROCEDURAL = 57726
const PROCEDURE = 57727
const PROCEDURES = 57728
const PUBLICATION = 57729
const RANGE = 57730
const READ = 57731
const REASSIGN = 57732
const RECHECK = 57733
const REFERENCES = 57734
const REFERENCING = 57735
const REFRESH = 57736
const REINDEX = 57737
const RELATIVE_P = 57738
const RELEASE = 57739
const RENAME = 57740
const REPEATABLE = 57741
const REPLICA = 57742
const RESET = 57743
const RESTART = 57744
const RETURN = 57745
const RETURNS = 57746
const REVOKE = 57747
const ROLE = 57748
const ROLLBACK = 57749
const ROLLUP = 57750
const ROUTINE = 57751
const ROUTINES = 57752
const ROW = 57753
const RULE = 57754
const SAVEPOINT = 57755
const SCHEMA = 57756
const SCHEMAS = 57757
const SCROLL = 57758
const SECOND_P = 57759
const SECURITY = 57760
const SEQUENCE = 57761
const SEQUENCES = 57762
const SERIALIZABLE = 57763
const SERVER = 57764
const SESSION = 57765
const SESSION_USER = 57766
const SETS = 57767
const SETOF = 57768
const SHARE = 57769
const SHOW = 57770
const SIMPLE = 57771
const SKIP = 57772
const SNAPSHOT = 57773
const SOME = 57774
const SQL_P = 57775
const STABLE = 57776
const STANDALONE_P = 57777
const START = 57778
const STATEMENT = 57779
const STATISTICS = 57780
const STORAGE = 57781
const STORED = 57782
const STRICT_P = 57783
const STRIP_P = 57784
const SUBSCRIPTION = 57785
const SUBSTRING = 57786
const SUPPORT = 57787
const SYSID = 57788
const SYSTEM_USER = 57789
const TABLES = 57790
const TABLESPACE = 57791
const TABLESAMPLE = 57792
const TEMP = 57793
const TEMPLATE = 57794
const TEMPORARY = 57795
const TEXT_P = 57796
const TIES = 57797
const TRAILING = 57798
const TRANSACTION = 57799
const TRANSFORM = 57800
const TREAT = 57801
const TRIGGER = 57802
const TRIM = 57803
const TRUNCATE = 57804
const TRUSTED = 57805
const TYPE_P = 57806
const TYPES_P = 57807
const UESCAPE = 57808
const UNBOUNDED = 57809
const UNCOMMITTED = 57810
const UNENCRYPTED = 57811
const UNION = 57812
const UNIQUE = 57813
const UNLISTEN = 57814
const UNLOGGED = 57815
const UNTIL = 57816
const VACUUM = 57817
const VALID = 57818
const VALIDATE = 57819
const VALIDATOR = 57820
const VERSION_P = 57821
const VIEW = 57822
const VIEWS = 57823
const VOLATILE = 57824
const WHITESPACE_P = 57825
const WINDOW = 57826
const WITHIN = 57827
const WORK = 57828
const WRITE = 57829
const XML_P = 57830
const XMLATTRIBUTES = 57831
const XMLCONCAT = 57832
const XMLELEMENT = 57833
const XMLEXISTS = 57834
const XMLFOREST = 57835
const XMLPARSE = 57836
const XMLPI = 57837
const XMLROOT = 57838
const XMLSERIALIZE = 57839
const YEAR_P = 57840
const YES_P = 57841
const INOUT = 57842
const OTHERS = 57843
const OLD = 57844
const KEY = 57845
const OFF = 57846
const OIDS = 57847
const OPTION = 57848
const OPTIONS = 57849
const OVER = 57850
const ORDER = 57851
const ANY = 57852
const BOTH = 57853
const CAST = 57854
const CHECK = 57855
const COLUMN = 57856
const FORMAT_LA = 57857
const NOT_LA = 57858
const NULLS_LA = 57859
const WITH_LA = 57860
const WITHOUT_LA = 57861
const MODE_TYPE_NAME = 57862
const MODE_PLPGSQL_EXPR = 57863
const MODE_PLPGSQL_ASSIGN1 = 57864
const MODE_PLPGSQL_ASSIGN2 = 57865
const MODE_PLPGSQL_ASSIGN3 = 57866
const UMINUS = 57867

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"UNKNOWN",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"JOIN",
	"INNER_P",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER_P",
	"CROSS",
	"NATURAL",
	"USING",
	"RECURSIVE",
	"MATERIALIZED",
	"VALUES",
	"SEARCH",
	"BREADTH",
	"DEPTH",
	"CYCLE",
	"FIRST_P",
	"LAST_P",
	"SET",
	"ASC",
	"DESC",
	"INSERT",
	"UPDATE",
	"DELETE_P",
	"MERGE",
	"RETURNING",
	"CONFLICT",
	"OVERRIDING",
	"USER",
	"SYSTEM_P",
	"MATCHED",
	"THEN",
	"SOURCE",
	"TARGET",
	"DO",
	"NOTHING",
	"COPY",
	"PROGRAM",
	"STDIN",
	"STDOUT",
	"BINARY",
	"FREEZE",
	"CONSTRAINT",
	"VERBOSE",
	"ANALYZE",
	"CURRENT_P",
	"CURSOR",
	"OF",
	"COLUMNS",
	"ORDINALITY",
	"XMLTABLE",
	"JSON_TABLE",
	"ROWS",
	"PATH",
	"PASSING",
	"FOR",
	"NESTED",
	"REF_P",
	"XMLNAMESPACES",
	"ARRAY",
	"ERROR",
	"ERROR_P",
	"EMPTY",
	"EMPTY_P",
	"OBJECT_P",
	"WRAPPER",
	"CONDITIONAL",
	"UNCONDITIONAL",
	"QUOTES",
	"OMIT",
	"KEEP",
	"SCALAR",
	"STRING_P",
	"ENCODING",
	"DELIMITER",
	"DELIMITERS",
	"HEADER_P",
	"QUOTE",
	"FORCE",
	"CSV",
	"VALUE_P",
	"JSON_QUERY",
	"JSON_VALUE",
	"JSON_SERIALIZE",
	"JSON_OBJECT",
	"JSON_ARRAY",
	"JSON_OBJECTAGG",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_SCALAR",
	"FORMAT",
	"JSON",
	"UTF8",
	"WITHOUT",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"ABORT_P",
	"ABSENT",
	"ABSOLUTE_P",
	"ACCESS",
	"ACTION",
	"ADD_P",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALSO",
	"ALWAYS",
	"ANALYSE",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"BACKWARD",
	"BEFORE",
	"BEGIN_P",
	"CACHE",
	"CALL",
	"CALLED",
	"CASCADED",
	"CATALOG_P",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATION",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPRESSION",
	"CONFIGURATION",
	"CONNECTION",
	"CONSTRAINTS",
	"CONTENT_P",
	"CONTINUE_P",
	"CONVERSION_P",
	"COST",
	"CUBE",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"DATA_P",
	"DATABASE",
	"DAY_P",
	"DEALLOCATE",
	"DECLARE",
	"DEFAULTS",
	"DEFERRABLE",
	"DEFERRED",
	"DEFINER",
	"DEPENDS",
	"DETACH",
	"DICTIONARY",
	"DISABLE_P",
	"DISCARD",
	"DOCUMENT_P",
	"DOMAIN_P",
	"EACH",
	"ELSE",
	"ENABLE_P",
	"ENCRYPTED",
	"END_P",
	"ENUM_P",
	"EVENT",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXCLUSIVE",
	"EXECUTE",
	"EXPLAIN",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"EXTRACT",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FINALIZE",
	"FOLLOWING",
	"FOREIGN",
	"FORWARD",
	"FUNCTION",
	"FUNCTIONS",
	"GENERATED",
	"GLOBAL",
	"GRANT",
	"GRANTED",
	"GREATEST",
	"GROUPING",
	"GROUPS",
	"HANDLER",
	"HOLD",
	"HOUR_P",
	"IDENTITY_P",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT_P",
	"IMPORT_P",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INDEX",
	"INDEXES",
	"INHERIT",
	"INHERITS",
	"INITIALLY",
	"INLINE_P",
	"INPUT_P",
	"INSENSITIVE",
	"INSTEAD",
	"INTERSECT",
	"INVOKER",
	"ISOLATION",
	"KEYS",
	"LABEL",
	"LANGUAGE",
	"LARGE_P",
	"LATERAL_P",
	"LEAKPROOF",
	"LEAST",
	"LEADING",
	"LEVEL",
	"LISTEN",
	"LOAD",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCATION",
	"LOCK_P",
	"LOCKED",
	"LOGGED",
	"MAPPING",
	"MATCH",
	"MAXVALUE",
	"MERGE_ACTION",
	"METHOD",
	"MINUTE_P",
	"MINVALUE",
	"MODE",
	"MONTH_P",
	"MOVE",
	"NAME_P",
	"NAMES",
	"NEW",
	"NEXT",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NO",
	"NONE",
	"NORMALIZE",
	"NORMALIZED",
	"NOTIFY",
	"NOWAIT",
	"NULLIF",
	"OUT_P",
	"OVERLAY",
	"OVERLAPS",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PARSER",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECEDING",
	"PREPARE",
	"PREPARED",
	"PRESERVE",
	"PRIMARY",
	"PRIOR",
	"PRIVILEGES",
	"PROCEDURAL",
	"PROCEDURE",
	"PROCEDURES",
	"PUBLICATION",
	"RANGE",
	"READ",
	"REASSIGN",
	"RECHECK",
	"REFERENCES",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE_P",
	"RELEASE",
	"RENAME",
	"REPEATABLE",
	"REPLICA",
	"RESET",
	"RESTART",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLE",
	"ROLLBACK",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"RULE",
	"SAVEPOINT",
	"SCHEMA",
	"SCHEMAS",
	"SCROLL",
	"SECOND_P",
	"SECURITY",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSION_USER",
	"SETS",
	"SETOF",
	"SHARE",
	"SHOW",
	"SIMPLE",
	"SKIP",
	"SNAPSHOT",
	"SOME",
	"SQL_P",
	"STABLE",
	"STANDALONE_P",
	"START",
	"STATEMENT",
	"STATISTICS",
	"STORAGE",
	"STORED",
	"STRICT_P",
	"STRIP_P",
	"SUBSCRIPTION",
	"SUBSTRING",
	"SUPPORT",
	"SYSID",
	"SYSTEM_USER",
	"TABLES",
	"TABLESPACE",
	"TABLESAMPLE",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TEXT_P",
	"TIES",
	"TRAILING",
	"TRANSACTION",
	"TRANSFORM",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUNCATE",
	"TRUSTED",
	"TYPE_P",
	"TYPES_P",
	"UESCAPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNENCRYPTED",
	"UNION",
	"UNIQUE",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VERSION_P",
	"VIEW",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE_P",
	"WINDOW",
	"WITHIN",
	"WORK",
	"WRITE",
	"XML_P",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"YEAR_P",
	"YES_P",
	"INOUT",
	"OTHERS",
	"OLD",
	"KEY",
	"OFF",
	"OIDS",
	"OPTION",
	"OPTIONS",
	"OVER",
	"ORDER",
	"ANY",
	"BOTH",
	"CAST",
	"CHECK",
	"COLUMN",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"'<'",
	"'>'",
	"'='",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"';'",
	"','",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:13167

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 78,
	540, 78,
	-2, 1571,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 81,
	1, 1484,
	26, 1484,
	36, 1484,
	74, 1484,
	100, 1484,
	532, 1484,
	540, 1484,
	-2, 1489,
	-1, 84,
	67, 1901,
	84, 1901,
	85, 2523,
	236, 2710,
	307, 2068,
	419, 1901,
	480, 1901,
	-2, 91,
	-1, 99,
	68, 1488,
	69, 1488,
	130, 1488,
	269, 1488,
	280, 1488,
	316, 1488,
	470, 1488,
	509, 1488,
	-2, 1490,
	-1, 109,
	1, 78,
	540, 78,
	-2, 1571,
	-1, 151,
	85, 2522,
	-2, 1900,
	-1, 227,
	61, 296,
	64, 296,
	527, 296,
	533, 296,
	-2, 2566,
	-1, 654,
	68, 1473,
	69, 1473,
	130, 1473,
	280, 1473,
	-2, 1491,
	-1, 660,
	68, 1474,
	69, 1474,
	130, 1474,
	280, 1474,
	-2, 1494,
	-1, 714,
	84, 1901,
	480, 1901,
	-2, 90,
	-1, 716,
	209, 79,
	-2, 2529,
	-1, 818,
	7, 1401,
	16, 1401,
	17, 1401,
	531, 1401,
	-2, 97,
	-1, 819,
	7, 1402,
	16, 1402,
	17, 1402,
	531, 1402,
	-2, 98,
	-1, 827,
	531, 1403,
	-2, 2989,
	-1, 846,
	93, 2846,
	398, 2104,
	401, 2846,
	-2, 1997,
	-1, 850,
	93, 2846,
	398, 2104,
	401, 2846,
	-2, 1997,
	-1, 988,
	68, 1473,
	69, 1473,
	130, 1473,
	280, 1473,
	-2, 1495,
	-1, 1043,
	7, 1203,
	531, 1203,
	-2, 477,
	-1, 1058,
	7, 528,
	16, 528,
	17, 528,
	531, 528,
	-2, 1251,
	-1, 1080,
	7, 1445,
	-2, 478,
	-1, 1088,
	7, 1415,
	-2, 461,
	-1, 1089,
	7, 1450,
	531, 1450,
	-2, 462,
	-1, 1090,
	7, 1422,
	-2, 463,
	-1, 1091,
	7, 1450,
	531, 1450,
	-2, 464,
	-1, 1092,
	7, 1450,
	531, 1450,
	-2, 465,
	-1, 1093,
	7, 1409,
	-2, 467,
	-1, 1094,
	7, 1409,
	-2, 468,
	-1, 1095,
	7, 1452,
	-2, 471,
	-1, 1096,
	7, 1412,
	-2, 475,
	-1, 1097,
	7, 1413,
	-2, 476,
	-1, 1099,
	7, 1450,
	531, 1450,
	-2, 492,
	-1, 1100,
	7, 1409,
	-2, 496,
	-1, 1101,
	7, 1416,
	-2, 501,
	-1, 1102,
	7, 1414,
	-2, 504,
	-1, 1103,
	7, 1448,
	-2, 506,
	-1, 1104,
	7, 1448,
	-2, 507,
	-1, 1105,
	7, 1433,
	531, 1433,
	-2, 511,
	-1, 1257,
	6, 1997,
	12, 1997,
	534, 1997,
	535, 1997,
	-2, 1990,
	-1, 1303,
	531, 1338,
	-2, 2991,
	-1, 1509,
	127, 2808,
	411, 2808,
	-2, 1076,
	-1, 1543,
	21, 1375,
	432, 1375,
	510, 1375,
	-2, 838,
	-1, 1545,
	21, 1377,
	432, 1377,
	510, 1377,
	-2, 785,
	-1, 1550,
	1, 654,
	26, 654,
	36, 654,
	64, 654,
	65, 654,
	68, 654,
	69, 654,
	71, 654,
	72, 654,
	73, 654,
	74, 654,
	100, 654,
	130, 654,
	269, 654,
	280, 654,
	316, 654,
	470, 654,
	484, 654,
	509, 654,
	515, 654,
	532, 654,
	540, 654,
	541, 654,
	-2, 1479,
	-1, 1555,
	21, 1457,
	432, 1457,
	510, 1457,
	-2, 1453,
	-1, 2012,
	68, 1489,
	69, 1489,
	130, 1489,
	269, 1489,
	280, 1489,
	316, 1489,
	470, 1489,
	509, 1489,
	-2, 1172,
	-1, 2022,
	7, 1338,
	531, 1338,
	-2, 1221,
	-1, 2238,
	117, 91,
	307, 2068,
	460, 91,
	-2, 1901,
	-1, 2288,
	536, 112,
	-2, 2394,
	-1, 2316,
	531, 2070,
	-2, 220,
	-1, 2392,
	40, 1409,
	509, 1409,
	527, 1409,
	532, 1409,
	541, 1409,
	-2, 1405,
	-1, 2601,
	36, 2813,
	66, 2813,
	-2, 502,
	-1, 2602,
	36, 2814,
	66, 2814,
	-2, 375,
	-1, 2608,
	127, 2811,
	411, 2811,
	-2, 1185,
	-1, 2609,
	127, 2812,
	411, 2812,
	-2, 1186,
	-1, 2625,
	1, 420,
	26, 420,
	36, 420,
	64, 420,
	65, 420,
	68, 420,
	69, 420,
	71, 420,
	72, 420,
	74, 420,
	100, 420,
	130, 420,
	269, 420,
	280, 420,
	316, 420,
	470, 420,
	484, 420,
	509, 420,
	515, 420,
	529, 420,
	532, 420,
	533, 420,
	540, 420,
	-2, 119,
	-1, 2626,
	1, 418,
	26, 418,
	36, 418,
	64, 418,
	65, 418,
	68, 418,
	69, 418,
	71, 418,
	72, 418,
	74, 418,
	100, 418,
	130, 418,
	269, 418,
	280, 418,
	316, 418,
	470, 418,
	484, 418,
	509, 418,
	515, 418,
	529, 418,
	532, 418,
	533, 418,
	540, 418,
	-2, 119,
	-1, 2629,
	1, 437,
	26, 437,
	36, 437,
	64, 437,
	65, 437,
	68, 437,
	69, 437,
	71, 437,
	72, 437,
	74, 437,
	100, 437,
	130, 437,
	269, 437,
	280, 437,
	316, 437,
	470, 437,
	484, 437,
	509, 437,
	515, 437,
	529, 437,
	532, 437,
	533, 437,
	540, 437,
	-2, 119,
	-1, 2643,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1089,
	-1, 2644,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1090,
	-1, 2645,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1091,
	-1, 2646,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1092,
	-1, 2647,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1093,
	-1, 2648,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1094,
	-1, 2652,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1101,
	-1, 2658,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1105,
	-1, 2703,
	363, 1365,
	-2, 1368,
	-1, 2713,
	16, 1405,
	17, 1405,
	-2, 1337,
	-1, 2798,
	68, 1489,
	69, 1489,
	130, 1489,
	269, 1489,
	280, 1489,
	316, 1489,
	470, 1489,
	509, 1489,
	-2, 1172,
	-1, 2918,
	209, 79,
	-2, 2529,
	-1, 2991,
	536, 113,
	-2, 2394,
	-1, 3094,
	507, 2469,
	-2, 2462,
	-1, 3283,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1103,
	-1, 3284,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1107,
	-1, 3290,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1109,
	-1, 3325,
	363, 1364,
	-2, 1367,
	-1, 3479,
	75, 1593,
	76, 1593,
	77, 1593,
	78, 1593,
	79, 1593,
	81, 1593,
	82, 1593,
	-2, 1489,
	-1, 3493,
	531, 1338,
	-2, 113,
	-1, 3500,
	150, 1833,
	-2, 1768,
	-1, 3674,
	6, 1997,
	12, 1997,
	534, 1997,
	535, 1997,
	-2, 1971,
	-1, 3841,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1102,
	-1, 3844,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1111,
	-1, 3847,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1106,
	-1, 3852,
	52, 0,
	53, 0,
	54, 0,
	-2, 1124,
	-1, 3859,
	21, 1374,
	432, 1374,
	510, 1374,
	-2, 1454,
	-1, 3863,
	363, 1366,
	-2, 1369,
	-1, 3909,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1154,
	-1, 3910,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1155,
	-1, 3911,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1156,
	-1, 3912,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1157,
	-1, 3913,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1158,
	-1, 3914,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1159,
	-1, 4284,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1104,
	-1, 4285,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1108,
	-1, 4289,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1110,
	-1, 4290,
	52, 0,
	53, 0,
	54, 0,
	-2, 1125,
	-1, 4293,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1126,
	-1, 4294,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1128,
	-1, 4418,
	540, 78,
	-2, 1571,
	-1, 4563,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1112,
	-1, 4564,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1127,
	-1, 4565,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1129,
	-1, 4574,
	52, 0,
	-2, 1162,
	-1, 4825,
	52, 0,
	-2, 1163,
	-1, 5008,
	37, 0,
	44, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 460,
	-1, 5343,
	7, 1718,
	-2, 297,
	-1, 5369,
	7, 1445,
	-2, 478,
}

const yyPrivate = 57344

const yyLast = 95660

var yyAct = [...]int16{
	1021, 5340, 4840, 5391, 5018, 4830, 4841, 3269, 5392, 655,
	5407, 4094, 2756, 2823, 1007, 5198, 3359, 788, 4593, 5341,
	4911, 2873, 4456, 5007, 2007, 2191, 4859, 4891, 4490, 3589,
	4356, 5085, 2562, 4774, 4930, 4408, 5074, 1429, 4674, 5186,
	5068, 2826, 4807, 3618, 3418, 3226, 4722, 4959, 3267, 1245,
	752, 4205, 5234, 4355, 5154, 4808, 4937, 3347, 4010, 4805,
	5137, 4860, 2617, 4718, 4931, 3658, 3644, 966, 4932, 1163,
	4656, 4632, 2211, 3517, 2927, 5006, 4591, 4347, 4248, 3796,
	4985, 720, 4982, 4746, 2327, 4489, 4006, 4701, 4415, 230,
	230, 80, 3057, 2839, 3222, 634, 639, 3570, 649, 653,
	3014, 3488, 1557, 6, 2880, 673, 3062, 680, 680, 4378,
	4211, 2781, 4068, 3592, 4215, 4754, 673, 4206, 2580, 3504,
	673, 3191, 4098, 4014, 2919, 4144, 716, 719, 724, 719,
	2080, 719, 680, 3566, 680, 1202, 1301, 64, 680, 680,
	4389, 719, 680, 680, 1460, 2868, 2237, 20, 3518, 4639,
	2236, 19, 2849, 2841, 4, 673, 673, 673, 673, 1035,
	4662, 817, 719, 719, 680, 719, 828, 4559, 2387, 1438,
	680, 828, 680, 828, 680, 680, 680, 680, 680, 665,
	101, 3157, 680, 719, 4364, 719, 680, 2235, 13, 719,
	680, 680, 2866, 4385, 663, 3446, 982, 1022, 825, 4061,
	2234, 12, 3746, 836, 2903, 838, 2840, 2980, 3938, 2712,
	2863, 3471, 870, 1517, 4277, 641, 1161, 3552, 3244, 230,
	230, 2710, 699, 3177, 3227, 1232, 3056, 3029, 3673, 3652,
	723, 3636, 2273, 3569, 2981, 4128, 2258, 2268, 2264, 1181,
	3104, 2907, 2906, 2894, 2210, 2928, 64, 2890, 2865, 2908,
	2827, 3979, 3474, 993, 698, 3482, 20, 3463, 670, 3830,
	19, 3328, 1459, 2668, 3358, 3302, 2193, 2731, 4371, 695,
	2782, 2300, 2720, 3427, 2017, 2570, 2407, 688, 3671, 941,
	3272, 2945, 1434, 1210, 3061, 907, 3010, 1277, 2311, 101,
	1149, 1122, 2285, 1188, 672, 1391, 2244, 13, 2893, 2882,
	3496, 2848, 2844, 2192, 2160, 2847, 1381, 2837, 801, 2846,
	12, 2009, 1272, 3351, 650, 2728, 2724, 2669, 2678, 2607,
	2675, 2597, 1518, 1506, 1428, 861, 2771, 814, 1363, 2957,
	2944, 687, 750, 123, 860, 1211, 1213, 217, 2385, 2790,
	2073, 715, 2754, 2860, 2032, 2943, 2622, 121, 1453, 994,
	1489, 1507, 1487, 1003, 2561, 189, 867, 188, 2465, 2272,
	221, 2589, 654, 2412, 2464, 144, 2217, 678, 2284, 1490,
	1488, 1522, 975, 977, 644, 1426, 976, 1283, 99, 1305,
	2265, 1270, 209, 676, 694, 684, 1371, 686, 1371, 2581,
	692, 3538, 2887, 100, 1340, 1371, 3429, 1372, 3352, 1372,
	1018, 5459, 1371, 3376, 659, 5337, 1372, 3386, 3387, 3388,
	5376, 5457, 4864, 1372, 3537, 5336, 5455, 3270, 5415, 5175,
	5416, 1018, 5403, 3539, 3376, 5376, 1167, 5416, 3386, 3387,
	3388, 5040, 2832, 5400, 5384, 5375, 3374, 3798, 5352, 1396,
	4288, 3390, 2166, 2166, 5376, 2582, 1018, 5353, 4528, 3376,
	4980, 3392, 718, 4778, 739, 5345, 741, 909, 863, 642,
	652, 4743, 3390, 3627, 3451, 5327, 790, 5309, 167, 4776,
	1555, 659, 3392, 1525, 5000, 2582, 4613, 5265, 795, 796,
	661, 910, 912, 5264, 1525, 5251, 2166, 821, 822, 2582,
	824, 681, 2166, 5213, 2584, 660, 1114, 3392, 2168, 829,
	2810, 4286, 5214, 3327, 957, 1204, 5207, 5183, 853, 2168,
	856, 940, 845, 848, 2169, 5208, 3578, 1204, 5145, 5144,
	1523, 2178, 5142, 5122, 5314, 2169, 1018, 5143, 5143, 3376,
	5121, 5143, 2166, 3386, 3387, 3388, 3252, 1034, 2623, 2166,
	5313, 3430, 969, 3353, 1555, 4287, 5118, 1525, 2584, 903,
	5116, 4592, 927, 5039, 1525, 5119, 922, 924, 3461, 5117,
	5037, 5036, 5040, 5044, 5016, 5015, 2166, 3390, 5000, 2166,
	1374, 4905, 2168, 3415, 2166, 3848, 4890, 3392, 1036, 2168,
	4613, 4880, 4863, 3321, 4855, 2556, 4998, 4854, 2169, 4727,
	4881, 4862, 751, 3578, 3322, 2178, 1374, 4717, 4728, 4833,
	4707, 4691, 1410, 751, 751, 2615, 2584, 4626, 1480, 3539,
	4690, 691, 1445, 4625, 1435, 935, 4627, 4624, 4622, 4612,
	1037, 4581, 3578, 4579, 830, 4546, 3578, 1374, 4613, 1374,
	2166, 4548, 4580, 4486, 4547, 4532, 4485, 846, 850, 954,
	3376, 4484, 4487, 4478, 2582, 2584, 4426, 4400, 1447, 4382,
	2584, 1450, 2584, 4296, 1524, 3539, 4401, 1449, 3379, 3380,
	3381, 3382, 2166, 4274, 4023, 3940, 1448, 3929, 4339, 2298,
	989, 3857, 2166, 2584, 3941, 673, 3930, 689, 680, 3790,
	2166, 3770, 1451, 3697, 3684, 4071, 4032, 4031, 2166, 3862,
	3769, 3541, 3698, 3685, 673, 3797, 1137, 673, 673, 3825,
	3542, 3527, 673, 673, 3802, 673, 3578, 817, 817, 680,
	3528, 817, 3456, 961, 963, 964, 3502, 3450, 3438, 3441,
	3422, 3457, 719, 719, 3414, 1410, 3451, 1525, 2166, 3374,
	3437, 3412, 3411, 3415, 3410, 3409, 3325, 3323, 3320, 3811,
	2166, 2166, 3436, 2166, 2166, 2166, 2166, 673, 690, 2166,
	1530, 1531, 1532, 1533, 3374, 4909, 1555, 3247, 3210, 1525,
	3096, 2921, 2816, 1537, 1538, 1539, 2584, 2166, 1142, 3097,
	2922, 1374, 2812, 2556, 2586, 2170, 958, 2585, 2171, 1369,
	3236, 2166, 2176, 2584, 2168, 680, 2584, 2167, 680, 2173,
	2177, 2172, 3233, 2174, 2988, 719, 2166, 2175, 1548, 1549,
	2169, 2695, 2595, 2549, 2493, 1120, 675, 2178, 1383, 2393,
	2241, 109, 673, 673, 3382, 3730, 2241, 1533, 1037, 2241,
	1112, 4198, 1037, 930, 1116, 5201, 929, 991, 1115, 106,
	3237, 1166, 680, 719, 719, 1116, 4491, 962, 1435, 1115,
	1383, 2250, 1166, 1116, 1037, 680, 3159, 1115, 4020, 2205,
	695, 695, 1171, 2584, 985, 986, 103, 932, 1555, 3686,
	104, 1525, 1383, 2584, 2241, 3687, 5448, 2584, 5422, 5272,
	5255, 5202, 1392, 1393, 935, 5246, 5030, 5005, 4993, 108,
	1244, 1024, 4992, 5004, 4983, 1390, 2168, 5199, 1018, 3843,
	3428, 3376, 3424, 2832, 1410, 3386, 3387, 3388, 1410, 4991,
	1128, 1410, 2169, 3797, 4950, 1369, 719, 3856, 935, 2178,
	1173, 2774, 1378, 4842, 3383, 3384, 3385, 1410, 4835, 1374,
	4818, 1110, 988, 3377, 3378, 3379, 3380, 3381, 3382, 3390,
	1392, 1393, 4796, 1442, 4731, 3383, 3384, 3385, 3628, 3392,
	3628, 4724, 3797, 1394, 3377, 3378, 3379, 3380, 3381, 3382,
	4708, 4681, 4636, 1458, 4588, 4585, 4571, 673, 4570, 649,
	1165, 1481, 2251, 1481, 4558, 1129, 1266, 3964, 673, 3377,
	3378, 3379, 3380, 3381, 3382, 4079, 103, 941, 4353, 3011,
	104, 941, 941, 4346, 958, 2322, 1113, 4343, 1524, 2019,
	1193, 2451, 4329, 1528, 1529, 1530, 1531, 1532, 1533, 108,
	4324, 869, 869, 4316, 1528, 1529, 1530, 1531, 1532, 1533,
	1374, 2325, 4315, 958, 947, 2832, 949, 948, 951, 958,
	4305, 4303, 2988, 4302, 4301, 971, 972, 4300, 1430, 1430,
	4070, 1446, 3991, 3953, 3952, 1208, 1209, 3936, 3926, 3925,
	3383, 3384, 3385, 3924, 661, 3865, 3859, 1169, 1170, 3377,
	3378, 3379, 3380, 3381, 3382, 3640, 106, 3597, 3584, 660,
	2189, 1121, 1158, 3577, 3536, 2688, 1324, 1528, 1529, 1530,
	1531, 1532, 1533, 3501, 1528, 1529, 1530, 1531, 1532, 1533,
	1200, 1139, 1140, 103, 3432, 3425, 1339, 104, 1236, 3405,
	1345, 1242, 3397, 1260, 3396, 1157, 4021, 2206, 3375, 3372,
	3371, 663, 3367, 3365, 3364, 2249, 108, 934, 936, 938,
	942, 3363, 1452, 3362, 3340, 3329, 3324, 1382, 3217, 673,
	1207, 680, 2187, 3215, 680, 3212, 3211, 2811, 1439, 1439,
	2802, 1439, 2018, 935, 102, 1168, 4078, 2195, 2262, 2196,
	959, 1303, 1436, 1437, 1141, 991, 990, 673, 1179, 120,
	2216, 5456, 2323, 5444, 970, 680, 5440, 3959, 1309, 1310,
	3377, 3378, 3379, 3380, 3381, 3382, 1172, 962, 1178, 5355,
	5321, 5294, 724, 5289, 4725, 719, 719, 719, 719, 962,
	719, 5282, 5223, 5153, 3349, 2689, 680, 4938, 5115, 1395,
	5090, 1387, 1388, 1389, 5087, 673, 5003, 5002, 2328, 673,
	4968, 4964, 3505, 4895, 2288, 1129, 4858, 4792, 1302, 1422,
	4791, 4790, 1419, 2208, 1314, 4768, 1320, 2309, 1284, 4752,
	4751, 1323, 2075, 4750, 4741, 673, 4738, 719, 4391, 1284,
	1483, 1284, 4620, 4617, 4582, 673, 4411, 1366, 2186, 4395,
	1406, 673, 1342, 1477, 2018, 1346, 1347, 1528, 1529, 1530,
	1531, 1532, 1533, 2248, 4381, 1485, 4373, 4019, 2204, 4370,
	673, 1544, 4217, 673, 4117, 106, 2326, 4074, 3827, 680,
	1534, 1535, 1536, 2075, 723, 2245, 3529, 4058, 4050, 1528,
	1529, 1530, 1531, 1532, 1533, 3779, 4047, 3355, 960, 931,
	2324, 4028, 103, 1182, 2355, 932, 104, 3996, 719, 2261,
	2424, 230, 3994, 3986, 2020, 3779, 3663, 1440, 3662, 3657,
	1123, 107, 673, 680, 2344, 108, 5200, 2288, 2288, 2288,
	2062, 3494, 3492, 3491, 102, 2014, 1116, 3444, 3268, 3260,
	1115, 3967, 3346, 1478, 2022, 3339, 673, 673, 1399, 1400,
	3160, 3161, 1403, 3315, 3160, 3161, 2360, 1491, 2328, 1499,
	2363, 2364, 1498, 3313, 719, 719, 719, 719, 719, 1520,
	1521, 661, 2308, 4507, 661, 661, 1436, 1437, 2680, 719,
	719, 3188, 3117, 3008, 680, 680, 1514, 719, 680, 1515,
	1516, 1528, 1529, 1530, 1531, 1532, 1533, 1168, 2348, 2930,
	2875, 2686, 2165, 2421, 2422, 2736, 2730, 682, 5402, 1395,
	1388, 1387, 3383, 3384, 3385, 102, 2180, 1389, 3543, 2305,
	2534, 3377, 3378, 3379, 3380, 3381, 3382, 2492, 1168, 2347,
	673, 2227, 2218, 2071, 3963, 1383, 1385, 3660, 2069, 2068,
	2067, 2066, 2027, 2065, 2476, 2477, 2064, 2063, 2061, 2060,
	2059, 2058, 2057, 2056, 102, 2055, 1439, 2054, 2053, 2052,
	1439, 1439, 2051, 2050, 2049, 2048, 2047, 2046, 2554, 2045,
	2359, 2044, 673, 673, 2043, 828, 828, 828, 680, 719,
	680, 2042, 2571, 680, 680, 719, 2041, 2467, 2040, 2467,
	1481, 2386, 2070, 2467, 2467, 649, 2039, 649, 2163, 2317,
	2319, 2214, 2038, 1439, 1439, 2037, 2367, 2368, 2289, 2035,
	2252, 2253, 2254, 2255, 2034, 2256, 2021, 2242, 2019, 1479,
	1398, 1271, 1119, 950, 673, 953, 793, 3970, 3771, 2219,
	2923, 2384, 955, 2833, 673, 1168, 3489, 719, 1392, 1393,
	5409, 1400, 1399, 2371, 1018, 2246, 1182, 3376, 107, 1403,
	4194, 3386, 3387, 3388, 3360, 1341, 3704, 2373, 2320, 2446,
	2377, 2188, 2341, 3855, 1018, 4189, 2318, 3376, 2299, 3714,
	4686, 3386, 3387, 3388, 3089, 118, 3085, 2370, 2296, 2297,
	1018, 1482, 2409, 3376, 4903, 3390, 4902, 3386, 3387, 3388,
	1370, 2409, 2471, 2529, 4535, 3392, 659, 2684, 2530, 3357,
	725, 5139, 2533, 2729, 1124, 3390, 2535, 736, 737, 738,
	3590, 4679, 3706, 1206, 2590, 3392, 2557, 2558, 1233, 5083,
	2072, 2289, 2289, 2289, 2301, 1168, 3655, 658, 2232, 1555,
	5082, 3392, 1525, 2423, 1494, 4901, 1537, 1538, 1539, 5410,
	2315, 2292, 1494, 4554, 2550, 2552, 1322, 3815, 3783, 968,
	3025, 3266, 2521, 3814, 943, 2176, 2541, 2168, 4894, 2269,
	3666, 4703, 2173, 2177, 2172, 2278, 2174, 2024, 2614, 4057,
	2685, 2425, 3013, 2169, 657, 3012, 2593, 2406, 5329, 4466,
	2178, 4829, 2031, 4560, 633, 112, 2413, 4331, 2436, 2480,
	2481, 2482, 2483, 2484, 2443, 2439, 2440, 2441, 1131, 2527,
	631, 4330, 2946, 2941, 701, 2520, 2231, 2544, 2545, 2546,
	2588, 2469, 2523, 2519, 111, 2473, 2474, 2413, 2608, 2608,
	2472, 703, 701, 2413, 4436, 2946, 3667, 1325, 4685, 2913,
	1194, 1146, 2507, 3560, 2497, 921, 914, 2314, 811, 703,
	3556, 2717, 1278, 2940, 4714, 1325, 2565, 2526, 2567, 3943,
	4924, 2572, 2573, 2438, 4479, 1233, 3594, 107, 3614, 3854,
	1555, 2947, 112, 1525, 2450, 3853, 4697, 1537, 1538, 1539,
	102, 2456, 2538, 3530, 149, 4523, 2819, 709, 112, 2072,
	4241, 2895, 2897, 2896, 2947, 1183, 2176, 4197, 2168, 4165,
	2718, 111, 4033, 2173, 2177, 2172, 1189, 2174, 3576, 2280,
	3038, 2175, 1548, 1549, 2169, 3092, 3036, 111, 1279, 1154,
	2072, 2178, 2269, 2566, 919, 4704, 2548, 844, 942, 2574,
	1424, 784, 942, 942, 640, 1444, 4828, 2313, 656, 3669,
	2563, 2564, 2337, 2336, 2719, 629, 4273, 2716, 5268, 2604,
	3822, 2610, 3278, 2986, 3277, 1418, 1030, 3276, 3037, 3275,
	3984, 2536, 2537, 800, 3035, 799, 5241, 798, 2591, 797,
	4457, 5136, 2634, 5099, 4977, 2596, 4976, 659, 4713, 2312,
	5092, 1416, 4518, 4182, 4179, 3088, 2269, 2353, 2543, 1357,
	2349, 2335, 2621, 2620, 2632, 2948, 3653, 5267, 4167, 3757,
	2479, 1495, 4586, 4467, 4934, 5399, 5093, 5398, 4710, 1495,
	4709, 928, 2612, 2594, 5244, 1355, 5112, 4730, 2948, 1555,
	2721, 1280, 1525, 4454, 4448, 1177, 1537, 1538, 1539, 4258,
	3220, 4250, 2023, 2025, 2026, 3154, 1493, 4207, 2170, 4917,
	2182, 2011, 3024, 2966, 3877, 2176, 4173, 2168, 3696, 3595,
	2183, 1175, 2173, 2177, 2172, 2954, 2174, 3693, 3692, 2417,
	2175, 1548, 1549, 2169, 3608, 2302, 2559, 2721, 3809, 5328,
	2178, 5312, 2184, 2302, 1496, 2606, 3808, 5182, 3807, 3806,
	3805, 2331, 1496, 2613, 3204, 692, 2228, 3634, 4480, 3202,
	3519, 3562, 1415, 2240, 5159, 3047, 2346, 2744, 2466, 3874,
	935, 2715, 2517, 4164, 3148, 4218, 1352, 3741, 3166, 3132,
	3165, 3164, 4423, 2302, 3163, 150, 3145, 815, 2683, 2302,
	2721, 1555, 826, 3144, 1525, 2818, 1354, 826, 2302, 826,
	4757, 2302, 2302, 5140, 2430, 4684, 3360, 2302, 1183, 2302,
	2302, 724, 2969, 3875, 3668, 3674, 1343, 1338, 1321, 2168,
	1497, 2162, 3842, 2577, 4251, 2462, 1349, 2704, 1497, 4254,
	124, 2461, 1174, 5138, 4252, 2169, 704, 1304, 3383, 3384,
	3385, 1275, 2178, 1274, 2408, 1273, 1417, 3377, 3378, 3379,
	3380, 3381, 3382, 2408, 3558, 149, 1269, 2518, 3383, 3384,
	3385, 2266, 4249, 2788, 2820, 3561, 2682, 3377, 3378, 3379,
	3380, 3381, 3382, 2938, 3383, 3384, 3385, 2293, 2583, 4253,
	1356, 2994, 2230, 3377, 3378, 3379, 3380, 3381, 3382, 2721,
	3813, 2455, 2701, 1276, 733, 734, 735, 702, 2454, 1132,
	708, 5270, 3555, 727, 728, 729, 730, 731, 732, 2453,
	3554, 3560, 2560, 723, 1544, 702, 1176, 4095, 3556, 187,
	1233, 858, 2578, 1534, 1535, 1536, 1555, 2898, 3612, 1525,
	5210, 4208, 1528, 1529, 1530, 1531, 1532, 1533, 2939, 4821,
	5158, 2967, 3611, 2795, 3557, 4012, 2579, 148, 4307, 147,
	2332, 3520, 2351, 2304, 2168, 2303, 2576, 3289, 1197, 719,
	2006, 2334, 2333, 1555, 4935, 2459, 1525, 1318, 3744, 1159,
	2169, 3103, 1281, 3147, 2963, 4775, 691, 2178, 2525, 2828,
	869, 2830, 4191, 3710, 2575, 2195, 3559, 3850, 3551, 2853,
	2853, 2168, 3301, 3707, 3282, 2309, 719, 2447, 4605, 692,
	2452, 5211, 5269, 4929, 2786, 869, 2780, 2169, 2366, 1504,
	2330, 2747, 3873, 3026, 2178, 2722, 4096, 2515, 2965, 918,
	680, 673, 787, 709, 4936, 2737, 2738, 2739, 2740, 2605,
	2918, 3794, 4723, 1316, 5157, 1126, 3262, 2277, 680, 3694,
	2929, 3054, 689, 3045, 3040, 1544, 4606, 1456, 719, 1130,
	680, 2355, 2309, 4918, 1534, 1535, 1536, 3203, 680, 2420,
	2748, 4247, 2910, 1528, 1529, 1530, 1531, 1532, 1533, 3607,
	663, 2229, 2982, 719, 920, 831, 89, 673, 4135, 4135,
	2962, 1351, 3674, 2699, 4209, 2528, 150, 4292, 2356, 5237,
	680, 680, 680, 4291, 673, 673, 945, 1364, 2309, 657,
	5236, 680, 1360, 4202, 2749, 710, 4822, 2746, 3016, 680,
	3020, 680, 680, 690, 2892, 2014, 3130, 680, 2791, 3738,
	680, 680, 4431, 3563, 680, 2633, 680, 680, 3009, 4007,
	673, 1348, 2516, 2972, 1350, 3123, 1317, 3743, 2075, 3795,
	680, 680, 673, 5100, 680, 680, 2992, 2993, 2856, 2856,
	2687, 2670, 2671, 2672, 2673, 928, 719, 719, 5238, 3562,
	4483, 680, 680, 1331, 2340, 2726, 673, 2979, 1361, 4927,
	673, 1127, 680, 2973, 2418, 3695, 3659, 5095, 2964, 2765,
	2750, 705, 3564, 4843, 4973, 2968, 680, 680, 680, 680,
	680, 2796, 706, 680, 1544, 2784, 2859, 680, 3124, 5086,
	4820, 680, 680, 1534, 1535, 1536, 4957, 2807, 2806, 2356,
	2987, 4755, 1528, 1529, 1530, 1531, 1532, 1533, 2386, 2345,
	691, 3626, 680, 680, 2983, 3030, 680, 2386, 680, 1327,
	2989, 2856, 3080, 680, 1375, 680, 680, 2419, 1379, 2914,
	680, 3545, 680, 4162, 2582, 680, 680, 4262, 148, 3073,
	147, 2835, 3558, 4192, 3711, 3076, 3077, 230, 2891, 680,
	4212, 2745, 2949, 3561, 3708, 2222, 680, 1505, 152, 680,
	1159, 1359, 2340, 5434, 1404, 4397, 680, 680, 2221, 4482,
	2929, 5433, 3175, 5212, 2634, 3182, 689, 680, 719, 817,
	3004, 707, 828, 724, 828, 828, 2693, 2836, 5097, 4136,
	4136, 2072, 4956, 5096, 4064, 3017, 649, 649, 4396, 2072,
	4468, 4453, 2952, 4149, 1528, 1529, 1530, 1531, 1532, 1533,
	2339, 2870, 2400, 3091, 3190, 4481, 3195, 3196, 2831, 978,
	980, 719, 1330, 1151, 1152, 2862, 2357, 1155, 1315, 3742,
	2358, 4672, 3557, 1150, 3099, 3101, 2966, 673, 978, 1439,
	4065, 680, 2033, 978, 980, 1439, 1439, 690, 4137, 4137,
	832, 4941, 2916, 4460, 711, 5397, 708, 3621, 1328, 713,
	5089, 2917, 2920, 2936, 3194, 3248, 2915, 2734, 5155, 3141,
	3882, 1133, 2223, 2725, 3559, 3098, 5229, 2961, 4914, 3178,
	941, 2991, 4319, 4055, 1333, 723, 2468, 916, 2985, 4734,
	1332, 4138, 4138, 2797, 2799, 1455, 2801, 2978, 2803, 2804,
	2805, 812, 4259, 4152, 2853, 974, 3600, 3917, 833, 5235,
	746, 673, 3063, 3249, 794, 2997, 3069, 3916, 2339, 1205,
	4129, 1454, 5072, 2179, 926, 4230, 3086, 1430, 2485, 3158,
	3090, 3548, 2901, 3078, 1420, 2969, 3083, 926, 4229, 1528,
	1529, 1530, 1531, 1532, 1533, 1160, 3235, 2357, 946, 2491,
	2489, 2358, 2494, 4029, 2490, 2488, 4063, 1439, 2931, 2932,
	2933, 2934, 2935, 1358, 3064, 2900, 1307, 724, 3245, 1307,
	1555, 3074, 3075, 1525, 4213, 663, 1528, 1529, 1530, 1531,
	1532, 1533, 5316, 4832, 1397, 1364, 1386, 3429, 3352, 4675,
	3181, 3094, 1401, 1402, 3326, 3126, 997, 3271, 2168, 3265,
	3140, 3331, 3332, 3142, 3143, 3100, 3093, 2491, 2489, 4335,
	3348, 3199, 3200, 3896, 2169, 3172, 2854, 2854, 5429, 4119,
	1329, 2178, 2487, 3306, 1326, 5344, 5017, 1439, 3307, 2959,
	3303, 979, 4336, 4615, 4587, 3308, 1365, 4663, 3449, 3354,
	4664, 3125, 4393, 4665, 3305, 4314, 1439, 4150, 3314, 5365,
	979, 4877, 663, 5364, 5332, 979, 1334, 2855, 2855, 5020,
	5019, 4666, 5331, 2856, 2967, 5024, 915, 4878, 5166, 723,
	4151, 5023, 5025, 5026, 3150, 2486, 3149, 3258, 3258, 3620,
	813, 3048, 3150, 3153, 3151, 3343, 5165, 4062, 4054, 745,
	3648, 5276, 5275, 2568, 5171, 3440, 4459, 2963, 4668, 2854,
	5172, 4320, 3179, 3186, 5169, 5022, 3187, 5168, 4667, 3232,
	5170, 5021, 4633, 2195, 5167, 4831, 4947, 4080, 4669, 3231,
	1414, 4676, 3473, 3473, 817, 1247, 2853, 3485, 3473, 3473,
	3264, 1268, 3430, 3353, 4838, 1306, 3918, 1185, 1306, 4839,
	2855, 2965, 1555, 5366, 5174, 1525, 5173, 5029, 4983, 4699,
	673, 4120, 673, 673, 3225, 3219, 1481, 673, 673, 3180,
	3224, 3646, 3304, 1409, 1204, 4420, 751, 3413, 2176, 4256,
	2168, 1192, 4876, 3420, 3624, 2173, 2177, 2172, 3603, 2174,
	5187, 3526, 3221, 3197, 2924, 974, 2169, 3274, 2295, 2036,
	3279, 680, 1249, 2178, 673, 1492, 1486, 1484, 3255, 3254,
	2610, 751, 1344, 2962, 2751, 3298, 1156, 5189, 751, 3330,
	2696, 2700, 3419, 2702, 4348, 941, 5188, 663, 3263, 680,
	5410, 5380, 5297, 5190, 5296, 5406, 5452, 680, 5192, 680,
	5428, 673, 673, 3995, 5339, 680, 5194, 4630, 2960, 3509,
	4451, 4407, 2776, 2777, 2778, 2779, 3531, 3972, 4670, 4671,
	4652, 3645, 3534, 1425, 2950, 4648, 3288, 3286, 1203, 3299,
	3546, 2899, 2871, 2808, 2342, 1408, 1513, 2539, 4357, 2288,
	941, 941, 2401, 1191, 2410, 680, 3622, 2321, 2958, 935,
	2861, 2400, 4610, 2856, 5197, 2856, 3318, 2398, 5051, 5052,
	5195, 4354, 5055, 3228, 3, 4611, 680, 5203, 5204, 4870,
	5050, 2964, 965, 4868, 5191, 5054, 3265, 3682, 2968, 2245,
	4871, 3512, 2429, 3458, 4643, 1248, 680, 680, 680, 680,
	3342, 3448, 3345, 4645, 4646, 3228, 4595, 2792, 3516, 4600,
	5427, 3447, 3481, 4598, 3568, 4599, 4601, 3633, 3483, 3635,
	3431, 4388, 3596, 2399, 5106, 3433, 2824, 2825, 5105, 5202,
	5105, 5106, 3253, 3052, 3616, 5196, 4654, 4647, 2402, 4650,
	4651, 4653, 4649, 4848, 3676, 5383, 680, 680, 3773, 680,
	680, 680, 3567, 3675, 3470, 3402, 3403, 3404, 2618, 2619,
	3486, 3487, 3162, 3423, 2995, 3498, 3499, 110, 4642, 1136,
	3447, 2014, 3051, 3828, 3829, 3442, 3053, 5034, 5033, 3006,
	4103, 1439, 3631, 4609, 683, 4847, 4846, 1250, 680, 4845,
	2355, 917, 855, 740, 673, 3549, 3454, 223, 5202, 3453,
	3452, 3435, 4597, 3050, 4602, 3478, 5293, 680, 3480, 3477,
	4124, 3699, 3700, 3476, 2829, 680, 3604, 1251, 2815, 3445,
	1252, 2854, 4104, 3500, 1253, 783, 3493, 3524, 114, 115,
	116, 117, 216, 2661, 5435, 3619, 2212, 2996, 2008, 4719,
	4975, 3521, 3588, 2665, 3737, 2663, 1254, 113, 3015, 2660,
	3747, 2662, 2664, 719, 719, 4105, 4106, 4107, 628, 3535,
	630, 632, 2855, 680, 3464, 3469, 3467, 3468, 3466, 719,
	3462, 3465, 2814, 1528, 1529, 1530, 1531, 1532, 1533, 3565,
	4443, 680, 3586, 3587, 1257, 3638, 3591, 620, 5334, 3011,
	4244, 4243, 680, 4005, 828, 941, 2432, 2571, 3804, 2431,
	2247, 1255, 3672, 2199, 2198, 3605, 3606, 3601, 3980, 4367,
	5335, 673, 3975, 3533, 3974, 3615, 3533, 4892, 1256, 1247,
	5333, 4933, 5274, 3639, 5273, 5104, 3801, 3728, 5102, 3729,
	5031, 4836, 4802, 673, 4412, 673, 3750, 3630, 3751, 3752,
	673, 3632, 4112, 2289, 3495, 3464, 3469, 3467, 3468, 3466,
	3950, 3462, 3465, 3647, 4040, 1258, 3654, 3532, 3949, 3661,
	3891, 826, 826, 826, 3665, 3890, 3782, 2386, 2674, 3781,
	3189, 3250, 3208, 3826, 3133, 3122, 3198, 2877, 2822, 3726,
	4366, 3464, 3469, 3467, 3468, 3466, 1249, 3462, 3465, 4365,
	2415, 2329, 2281, 2693, 2276, 1376, 1336, 3705, 1335, 1311,
	3868, 3869, 3870, 1198, 1111, 3701, 3731, 3727, 967, 956,
	3887, 1523, 697, 693, 5240, 4278, 3715, 3831, 2550, 2552,
	2727, 5260, 3810, 3583, 5177, 5176, 5056, 1544, 3817, 3169,
	4333, 3718, 3173, 4569, 4519, 3723, 3591, 4399, 4279, 4183,
	4180, 2854, 4041, 2854, 3895, 1528, 1529, 1530, 1531, 1532,
	1533, 3540, 3246, 3735, 3978, 3469, 3467, 3468, 3466, 2365,
	2362, 987, 2666, 980, 3613, 663, 3273, 3821, 3257, 2592,
	3270, 2527, 4470, 4429, 3637, 2838, 4428, 2203, 3748, 3350,
	2202, 4471, 2855, 5358, 2855, 5147, 4706, 4575, 4551, 4469,
	4318, 942, 4271, 3849, 3490, 685, 4912, 3820, 3256, 3368,
	4472, 3300, 2623, 2587, 696, 5357, 3216, 5249, 4783, 1248,
	4780, 4550, 2828, 4537, 4514, 4509, 4508, 4204, 2195, 3793,
	4203, 3772, 2853, 4193, 4188, 2853, 952, 3774, 4101, 3763,
	3762, 3784, 3761, 3985, 3760, 3759, 3473, 3485, 3473, 3473,
	3473, 3758, 3754, 3753, 3510, 3992, 3745, 3732, 2072, 3785,
	3786, 3725, 2670, 2671, 2672, 2673, 3713, 3712, 3709, 2667,
	3800, 3643, 1129, 2309, 3642, 3641, 4017, 4000, 3788, 3338,
	3337, 3789, 3803, 3818, 680, 3261, 3336, 3335, 3776, 3777,
	3287, 2677, 4461, 3932, 4154, 3285, 3184, 3146, 3127, 2676,
	2677, 3281, 2659, 673, 3787, 1481, 2555, 3880, 3819, 2478,
	2475, 1250, 2470, 2463, 2449, 2445, 680, 2444, 699, 3867,
	2442, 2437, 680, 3965, 3966, 719, 3835, 3836, 3837, 3838,
	2435, 2428, 673, 2411, 2397, 3851, 2396, 2395, 4049, 2381,
	2354, 1251, 2350, 2343, 1252, 2200, 3214, 3213, 1253, 2929,
	944, 2635, 4056, 2636, 933, 719, 2532, 2531, 2725, 5286,
	2212, 5318, 3311, 935, 5063, 4055, 3867, 3864, 5317, 935,
	1254, 3316, 3426, 4498, 4494, 4345, 4344, 4311, 3885, 3876,
	3878, 3879, 4022, 4025, 4310, 3739, 3121, 3889, 673, 4027,
	680, 2856, 4099, 3118, 2856, 3115, 4018, 680, 2853, 2982,
	3894, 3111, 4082, 3610, 3900, 4114, 2416, 4491, 1257, 2448,
	4092, 3242, 3241, 680, 680, 3240, 3265, 3239, 3238, 3969,
	2309, 4016, 2990, 2376, 4130, 1255, 1341, 1241, 1481, 4048,
	680, 1481, 1235, 1481, 4146, 2692, 3317, 2404, 3973, 5401,
	983, 3976, 1256, 668, 3568, 2691, 2403, 4046, 4168, 2269,
	680, 4442, 153, 4069, 4076, 3407, 3931, 3799, 3483, 3944,
	984, 3946, 3945, 669, 4145, 5419, 680, 1509, 5418, 3960,
	3958, 3961, 3968, 2874, 3816, 680, 680, 680, 4409, 1258,
	680, 4090, 3567, 680, 680, 680, 680, 4153, 4077, 3981,
	3982, 4109, 1204, 3977, 3971, 935, 680, 4141, 3987, 3223,
	3989, 3990, 3988, 680, 4922, 680, 4002, 1371, 2386, 3579,
	4108, 1439, 3497, 4921, 3497, 4043, 680, 4216, 1372, 2386,
	2386, 4008, 4158, 4161, 680, 680, 4024, 4488, 939, 680,
	680, 680, 680, 680, 4403, 3523, 942, 3947, 4232, 714,
	2008, 3951, 2550, 2552, 3765, 4118, 4034, 4038, 2891, 3650,
	3003, 2983, 4042, 4088, 4044, 2971, 2878, 2856, 2856, 3265,
	2656, 2271, 3030, 2263, 4172, 2213, 2207, 2654, 2657, 2653,
	1201, 2655, 1190, 1184, 1180, 3571, 680, 680, 680, 680,
	680, 1439, 3582, 1162, 5271, 2693, 4147, 3568, 4640, 685,
	4171, 942, 942, 2856, 4067, 4073, 4767, 4766, 724, 4231,
	4126, 2238, 3767, 3734, 4075, 3679, 673, 673, 673, 673,
	4081, 4083, 4125, 3295, 3609, 3293, 3677, 3649, 3617, 3291,
	4091, 3292, 3294, 3513, 2955, 3567, 2951, 2876, 2872, 2542,
	2540, 4255, 2379, 4110, 2375, 4113, 2282, 4116, 2267, 4239,
	2259, 2257, 2239, 1413, 3265, 1412, 3178, 1411, 1405, 1380,
	4053, 1377, 1373, 1368, 1439, 1353, 1312, 1262, 1259, 1240,
	1234, 4496, 4495, 4084, 4085, 3171, 1150, 4159, 905, 4163,
	4263, 5180, 4237, 4160, 5109, 5098, 3892, 3893, 1164, 4276,
	4072, 4999, 4747, 4170, 4166, 4260, 4834, 4769, 3245, 4687,
	4629, 4499, 4455, 4441, 4432, 4175, 4242, 3158, 3508, 2976,
	723, 2970, 1421, 2294, 2190, 2164, 3333, 3334, 4272, 4222,
	4236, 2553, 2551, 3703, 3259, 1037, 935, 1037, 1037, 2693,
	1037, 5426, 5411, 5247, 4953, 1439, 2974, 4045, 3625, 4913,
	2361, 4004, 1042, 1294, 4146, 1040, 1039, 2414, 2674, 1439,
	1031, 2181, 937, 680, 1443, 2853, 2853, 4418, 4705, 2853,
	3948, 4358, 4221, 5227, 4700, 817, 4422, 680, 4916, 4702,
	2072, 4190, 3473, 4233, 2929, 4376, 4195, 817, 3775, 2854,
	1439, 5091, 2854, 4698, 2220, 4238, 4051, 3780, 4694, 3522,
	4383, 4235, 3176, 3525, 2881, 3514, 2888, 1298, 615, 616,
	2309, 719, 4261, 222, 2405, 1300, 2905, 2226, 2225, 4712,
	4269, 4711, 4430, 4349, 4350, 2857, 2857, 4940, 4427, 4210,
	2855, 673, 4380, 2855, 3999, 4410, 2977, 3131, 4100, 4102,
	3623, 1481, 3764, 712, 4398, 2975, 1196, 2460, 4952, 1296,
	4097, 2269, 3296, 3183, 2937, 4394, 942, 2495, 4374, 4375,
	719, 3581, 3580, 42, 4264, 4265, 4266, 4267, 4268, 2309,
	41, 680, 40, 39, 38, 4404, 37, 36, 4299, 35,
	62, 61, 60, 59, 58, 817, 57, 56, 55, 54,
	3205, 4413, 3206, 53, 3207, 52, 51, 3209, 50, 4313,
	49, 48, 47, 2982, 46, 232, 4147, 45, 2857, 3218,
	44, 43, 34, 2856, 33, 32, 31, 2309, 4440, 30,
	4475, 29, 28, 27, 2856, 2856, 26, 25, 2856, 24,
	23, 22, 4402, 4039, 4449, 21, 4332, 1285, 2513, 4379,
	3812, 3243, 2670, 2671, 2672, 2673, 2856, 4474, 1367, 3297,
	2514, 2956, 77, 76, 75, 2854, 2854, 4447, 74, 1295,
	4351, 3251, 3823, 4352, 73, 72, 3898, 71, 70, 69,
	680, 4362, 4363, 680, 68, 4368, 3902, 67, 66, 680,
	680, 680, 4437, 4438, 680, 680, 680, 5, 4477, 65,
	63, 2854, 18, 4372, 680, 680, 2855, 2855, 17, 1291,
	1362, 3923, 2233, 135, 4153, 1134, 2243, 2624, 3670, 4446,
	2598, 3651, 3881, 4127, 190, 2496, 1237, 3860, 5307, 4309,
	4405, 3028, 1288, 4492, 4312, 5073, 4011, 122, 4416, 4928,
	3553, 3550, 2855, 4392, 680, 680, 4425, 4134, 680, 4009,
	757, 2386, 4958, 4143, 4015, 3228, 1293, 649, 2867, 680,
	4013, 757, 757, 2864, 4503, 2983, 4133, 4525, 4434, 4140,
	4435, 4142, 2856, 5379, 4596, 3356, 819, 2789, 2794, 4590,
	4866, 819, 757, 4631, 4342, 5185, 819, 4414, 819, 4450,
	4628, 4377, 2926, 105, 4844, 757, 757, 4608, 1299, 2813,
	2197, 82, 667, 4462, 666, 5179, 992, 895, 895, 4567,
	757, 757, 757, 4882, 5067, 680, 4568, 4555, 3927, 4473,
	4464, 4655, 4390, 4644, 4003, 119, 4360, 3158, 2201, 4387,
	4386, 5053, 5049, 89, 5048, 815, 1286, 3158, 826, 4500,
	826, 826, 3962, 2821, 757, 4384, 4406, 2834, 2185, 4504,
	1292, 16, 15, 14, 4497, 1439, 4594, 11, 680, 10,
	9, 8, 4501, 7, 1439, 1439, 1289, 4813, 2853, 4811,
	4812, 680, 4810, 1287, 4376, 2681, 726, 1297, 1552, 2611,
	981, 1512, 973, 4819, 3886, 4306, 4066, 4463, 4804, 2030,
	5181, 3983, 2714, 873, 874, 4444, 673, 1384, 871, 1032,
	4677, 897, 4017, 3778, 4338, 4529, 4530, 3942, 673, 4604,
	4533, 4534, 4146, 673, 1290, 3933, 2757, 2753, 2742, 2764,
	4326, 2697, 1016, 1015, 2723, 3571, 3341, 2028, 1010, 1011,
	1006, 1503, 680, 1500, 3234, 2569, 2382, 3049, 4660, 3681,
	3702, 3055, 4974, 3170, 680, 1559, 2743, 1554, 4623, 680,
	2, 1, 673, 0, 0, 680, 0, 0, 680, 0,
	2857, 4099, 0, 4680, 0, 4688, 4511, 828, 0, 4513,
	719, 4739, 4552, 0, 0, 0, 4562, 0, 0, 0,
	0, 0, 4733, 0, 0, 0, 0, 0, 4146, 724,
	0, 719, 719, 4086, 4087, 0, 4089, 0, 4657, 4745,
	0, 2854, 4720, 0, 0, 0, 0, 0, 4762, 680,
	680, 0, 2854, 2854, 0, 680, 2854, 0, 4145, 680,
	4607, 0, 0, 4121, 0, 4678, 4682, 2856, 0, 0,
	724, 828, 0, 4658, 2854, 0, 4716, 4641, 680, 0,
	4661, 0, 2855, 4583, 0, 4715, 4777, 4016, 4616, 0,
	0, 0, 4748, 2855, 2855, 64, 0, 2855, 4673, 4736,
	0, 4806, 0, 4787, 4147, 20, 4689, 4696, 3571, 19,
	4760, 2856, 0, 4695, 4619, 2855, 0, 4742, 4638, 0,
	4637, 0, 0, 4740, 0, 4692, 0, 0, 0, 4245,
	0, 723, 0, 0, 0, 0, 4800, 4801, 101, 4753,
	4756, 3678, 4758, 3680, 0, 0, 13, 0, 0, 0,
	3265, 4785, 0, 4759, 4146, 4770, 0, 0, 680, 12,
	4849, 0, 0, 0, 0, 0, 0, 0, 817, 0,
	0, 4861, 723, 0, 0, 0, 0, 0, 3568, 4621,
	4147, 4771, 4621, 4789, 4850, 4228, 4784, 2856, 0, 0,
	2854, 4786, 0, 4240, 0, 4795, 0, 0, 0, 4433,
	0, 0, 0, 0, 0, 0, 4888, 0, 0, 0,
	0, 0, 0, 0, 4803, 0, 3567, 0, 0, 0,
	2857, 0, 2857, 0, 0, 0, 0, 4589, 0, 0,
	4603, 2855, 0, 3733, 4827, 4883, 0, 0, 0, 4889,
	0, 0, 0, 0, 0, 1439, 0, 673, 941, 0,
	0, 0, 0, 0, 680, 0, 0, 4872, 4873, 4851,
	0, 4874, 4875, 0, 4897, 0, 0, 0, 4856, 3228,
	0, 680, 0, 0, 0, 0, 0, 4857, 0, 4926,
	817, 4899, 0, 0, 2853, 0, 0, 4298, 0, 0,
	0, 2732, 4925, 3766, 0, 4884, 3768, 0, 673, 4943,
	4893, 0, 2759, 0, 0, 4948, 4147, 0, 4898, 0,
	0, 4919, 0, 2856, 2785, 0, 0, 2732, 0, 4907,
	4379, 680, 819, 819, 680, 0, 0, 2856, 4915, 0,
	4906, 4904, 0, 0, 0, 4749, 4908, 0, 819, 0,
	3791, 4960, 0, 4900, 4896, 4782, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4979, 4763, 4764, 4945, 0,
	0, 4942, 819, 819, 0, 4969, 819, 4923, 0, 4955,
	0, 4949, 0, 0, 0, 0, 0, 4954, 0, 0,
	0, 0, 4327, 4421, 0, 0, 1481, 0, 4970, 2195,
	0, 4971, 4946, 0, 0, 1439, 0, 0, 0, 2929,
	0, 0, 0, 0, 0, 0, 0, 0, 5047, 4984,
	0, 4987, 4988, 0, 5035, 0, 0, 1481, 2758, 1481,
	4994, 4996, 0, 0, 0, 0, 4852, 0, 0, 0,
	4963, 0, 4965, 0, 4967, 0, 5075, 5012, 5013, 0,
	4416, 0, 0, 2856, 0, 2854, 663, 0, 0, 895,
	5027, 0, 0, 4419, 5071, 0, 0, 5070, 0, 0,
	0, 0, 0, 0, 0, 5069, 0, 0, 0, 0,
	0, 0, 0, 5038, 5043, 0, 5078, 0, 941, 0,
	5084, 5028, 719, 5080, 5046, 0, 2855, 0, 680, 2854,
	0, 0, 5066, 4445, 0, 0, 0, 5079, 0, 0,
	0, 0, 0, 0, 0, 1481, 0, 5081, 0, 724,
	0, 5045, 0, 0, 5111, 4502, 0, 680, 680, 0,
	0, 0, 5088, 0, 0, 0, 5094, 0, 4657, 0,
	2855, 0, 0, 0, 0, 0, 0, 5103, 0, 4806,
	5101, 0, 0, 0, 0, 0, 0, 0, 3228, 3228,
	0, 5107, 0, 5113, 0, 0, 0, 0, 5129, 4531,
	0, 5164, 0, 0, 0, 2854, 0, 5123, 0, 5125,
	5132, 5127, 5156, 5130, 5126, 0, 0, 0, 0, 0,
	0, 4861, 757, 5178, 0, 5141, 757, 757, 5076, 0,
	5128, 4542, 4543, 0, 0, 2856, 5150, 5149, 5148, 0,
	0, 0, 0, 0, 1481, 0, 2855, 5162, 5163, 0,
	826, 723, 0, 757, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 757, 0, 0, 4146, 0,
	0, 0, 0, 5209, 819, 5228, 819, 828, 828, 0,
	680, 5225, 5184, 819, 5215, 5216, 5218, 0, 0, 0,
	5222, 4539, 4540, 680, 819, 819, 819, 819, 819, 5220,
	0, 0, 0, 5219, 0, 819, 0, 0, 0, 5230,
	5231, 0, 0, 0, 0, 5254, 0, 680, 0, 0,
	5221, 5224, 0, 828, 5245, 0, 0, 0, 0, 819,
	0, 2854, 0, 0, 0, 0, 0, 2355, 5120, 5239,
	0, 5242, 0, 0, 0, 2854, 0, 5248, 5257, 5258,
	4960, 0, 0, 5253, 0, 5261, 5278, 1481, 1481, 5256,
	5277, 5281, 0, 0, 0, 0, 3579, 0, 0, 5250,
	0, 5252, 2855, 5263, 0, 0, 5266, 2195, 0, 0,
	0, 2828, 5232, 0, 0, 0, 2855, 0, 0, 0,
	0, 0, 0, 5291, 0, 5075, 719, 719, 0, 0,
	0, 0, 5290, 0, 4146, 5283, 817, 0, 0, 0,
	0, 2077, 819, 5299, 5300, 819, 0, 0, 5288, 0,
	4147, 5302, 5292, 0, 5306, 680, 5069, 2856, 5304, 5295,
	0, 5298, 0, 0, 5308, 0, 0, 0, 5303, 941,
	0, 719, 0, 0, 0, 5305, 0, 5110, 5315, 0,
	0, 0, 895, 5319, 0, 4659, 757, 0, 0, 895,
	0, 2854, 2077, 0, 2077, 0, 0, 0, 5322, 0,
	5342, 0, 0, 5324, 0, 5330, 0, 0, 2857, 0,
	0, 2857, 0, 0, 0, 0, 0, 757, 0, 0,
	0, 0, 0, 757, 0, 0, 0, 0, 0, 0,
	5323, 0, 2855, 0, 0, 0, 0, 5349, 0, 5351,
	5347, 5348, 0, 5356, 0, 817, 5370, 5371, 5372, 0,
	4861, 5354, 0, 0, 5350, 0, 0, 0, 719, 5367,
	5361, 0, 0, 0, 4146, 0, 0, 4797, 4799, 5388,
	5381, 5382, 0, 895, 0, 5385, 5374, 5076, 4257, 0,
	0, 5386, 0, 0, 2856, 0, 4147, 5342, 5387, 5390,
	0, 0, 4594, 2856, 5389, 5359, 5360, 895, 5363, 3571,
	0, 0, 2759, 2759, 5404, 5408, 5405, 5412, 4270, 0,
	0, 0, 817, 0, 0, 0, 0, 0, 0, 5417,
	5413, 0, 5414, 5423, 0, 5421, 5420, 0, 817, 5424,
	5425, 0, 0, 0, 0, 5431, 0, 0, 5437, 680,
	5438, 5436, 4594, 2854, 828, 828, 5447, 5430, 5443, 0,
	5449, 5342, 5451, 5450, 5439, 5442, 0, 0, 5453, 0,
	0, 0, 0, 5454, 5032, 0, 0, 5342, 5458, 0,
	757, 0, 5396, 0, 2857, 2857, 5445, 5446, 0, 0,
	0, 0, 0, 0, 2855, 0, 0, 2759, 2759, 2759,
	0, 4823, 0, 0, 0, 5061, 0, 5064, 0, 0,
	0, 0, 4826, 0, 895, 0, 895, 0, 0, 819,
	2857, 0, 0, 0, 0, 0, 4147, 4910, 3309, 3310,
	0, 0, 0, 2856, 0, 0, 0, 0, 0, 0,
	0, 895, 0, 5396, 757, 0, 757, 757, 757, 757,
	0, 0, 4853, 0, 0, 0, 4879, 1018, 0, 942,
	3376, 790, 790, 0, 3386, 3387, 3388, 0, 0, 0,
	0, 5396, 0, 5393, 0, 0, 0, 0, 0, 0,
	0, 1247, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3391, 0, 5124, 0, 0, 0, 0, 3390, 0,
	819, 819, 819, 0, 0, 0, 5325, 0, 3392, 0,
	0, 0, 0, 3393, 3394, 3395, 0, 0, 4986, 0,
	4986, 4986, 0, 0, 0, 3228, 0, 0, 0, 0,
	0, 0, 0, 0, 5393, 0, 0, 0, 0, 819,
	0, 0, 0, 0, 0, 2854, 819, 819, 1249, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	819, 895, 5393, 0, 819, 819, 819, 819, 819, 819,
	819, 819, 819, 819, 819, 819, 819, 819, 819, 819,
	0, 819, 0, 4961, 4962, 0, 2855, 0, 0, 2077,
	0, 5041, 5205, 790, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 0, 0, 0, 84, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2011, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 104, 0, 0, 0, 4505,
	4506, 1248, 2854, 0, 5057, 5058, 5059, 5060, 0, 0,
	0, 2854, 0, 0, 108, 0, 0, 0, 0, 942,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4524, 0, 0, 0, 5279, 5280, 0, 0, 83,
	0, 0, 0, 2855, 0, 0, 0, 0, 0, 0,
	2857, 0, 2855, 0, 0, 0, 0, 0, 4538, 0,
	0, 2857, 2857, 4541, 0, 2857, 0, 0, 0, 0,
	0, 4369, 0, 1555, 0, 0, 1525, 0, 0, 0,
	1537, 1538, 1539, 2857, 0, 0, 0, 0, 0, 0,
	0, 0, 2170, 1250, 0, 2171, 0, 0, 0, 2176,
	0, 2168, 0, 4556, 0, 0, 2173, 2177, 2172, 0,
	2174, 0, 0, 0, 2175, 1548, 1549, 2169, 0, 90,
	0, 0, 0, 1251, 2178, 1555, 1252, 0, 1525, 0,
	1253, 0, 1537, 1538, 1539, 0, 0, 0, 0, 0,
	79, 2854, 2212, 0, 2170, 0, 0, 2171, 0, 0,
	0, 2176, 1254, 2168, 0, 0, 92, 0, 2173, 2177,
	2172, 0, 2174, 0, 5151, 5152, 2175, 1548, 1549, 2169,
	0, 0, 0, 0, 0, 0, 2178, 0, 0, 0,
	0, 4458, 2855, 0, 0, 0, 0, 0, 0, 0,
	1257, 0, 0, 0, 78, 0, 0, 0, 0, 2857,
	0, 1555, 0, 5262, 1525, 0, 0, 1255, 1537, 1538,
	1539, 0, 0, 0, 0, 0, 0, 0, 97, 0,
	2170, 0, 0, 2171, 1256, 0, 0, 2176, 0, 2168,
	0, 0, 0, 0, 2173, 2177, 2172, 0, 2174, 0,
	0, 0, 2175, 1548, 1549, 2169, 0, 0, 1555, 0,
	0, 1525, 2178, 2759, 2759, 1537, 1538, 1539, 0, 0,
	0, 1258, 0, 0, 0, 0, 0, 2170, 0, 0,
	2171, 0, 0, 0, 2176, 0, 2168, 0, 0, 0,
	0, 2173, 2177, 2172, 0, 2174, 0, 0, 0, 2175,
	1548, 1549, 2169, 0, 0, 0, 0, 0, 0, 2178,
	0, 3383, 3384, 3385, 0, 0, 96, 0, 0, 0,
	3377, 3378, 3379, 3380, 3381, 3382, 0, 0, 0, 0,
	2616, 0, 87, 0, 0, 95, 0, 0, 0, 89,
	0, 2618, 2619, 98, 0, 93, 0, 0, 0, 0,
	942, 94, 0, 0, 2759, 2759, 2759, 2759, 2759, 2759,
	2759, 2759, 2759, 2759, 2759, 2759, 2759, 0, 2759, 0,
	0, 0, 0, 0, 91, 0, 0, 0, 0, 3845,
	3846, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 819, 819, 3937, 819, 0, 0,
	819, 2732, 0, 0, 0, 0, 0, 0, 0, 0,
	819, 819, 5378, 0, 0, 0, 0, 819, 0, 819,
	819, 819, 819, 819, 819, 819, 819, 819, 819, 819,
	0, 819, 0, 819, 0, 819, 819, 819, 819, 819,
	819, 0, 819, 819, 819, 1217, 0, 819, 0, 0,
	1218, 0, 0, 0, 1227, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 2857, 0, 5346, 0, 3997, 102,
	3903, 3904, 3905, 3906, 3907, 3908, 3909, 3910, 3911, 3912,
	3913, 3914, 3915, 0, 3919, 0, 0, 0, 0, 0,
	0, 0, 1555, 5362, 0, 1525, 0, 5395, 0, 1537,
	1538, 1539, 0, 0, 0, 0, 0, 0, 2857, 0,
	2023, 2170, 0, 0, 2171, 0, 1220, 0, 2176, 0,
	2168, 0, 0, 0, 0, 2173, 2177, 2172, 0, 2174,
	0, 0, 0, 2175, 1548, 1549, 2169, 2759, 0, 0,
	0, 0, 819, 2178, 0, 1226, 819, 819, 819, 819,
	0, 0, 0, 0, 0, 0, 0, 0, 5395, 0,
	0, 0, 0, 826, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 819, 819, 1231, 0, 0, 0,
	0, 0, 0, 0, 2857, 0, 5395, 0, 1544, 0,
	4298, 0, 0, 0, 895, 0, 0, 1534, 1535, 1536,
	0, 0, 0, 895, 3369, 0, 1528, 1529, 1530, 1531,
	1532, 1533, 0, 3370, 0, 0, 0, 2077, 0, 1216,
	0, 0, 0, 0, 0, 0, 0, 826, 0, 0,
	1214, 0, 0, 0, 0, 0, 4990, 0, 0, 0,
	1544, 0, 4995, 0, 4997, 0, 1221, 0, 0, 1534,
	1535, 1536, 2077, 4059, 0, 0, 0, 819, 1528, 1529,
	1530, 1531, 1532, 1533, 1555, 3421, 0, 1525, 0, 0,
	895, 1537, 1538, 1539, 0, 0, 0, 0, 0, 1215,
	0, 1223, 0, 2170, 0, 895, 2171, 1222, 0, 0,
	2176, 0, 2168, 0, 0, 0, 0, 2173, 2177, 2172,
	0, 2174, 0, 0, 2077, 2175, 1548, 1549, 2169, 0,
	2857, 0, 0, 0, 0, 2178, 1544, 0, 0, 757,
	0, 0, 0, 2077, 2857, 1534, 1535, 1536, 0, 0,
	0, 0, 1224, 0, 1528, 1529, 1530, 1531, 1532, 1533,
	0, 3408, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 895, 895, 1544, 5161, 0, 0, 0, 0, 0,
	895, 0, 1534, 1535, 1536, 0, 0, 1225, 0, 819,
	0, 1528, 1529, 1530, 1531, 1532, 1533, 0, 1228, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 757, 757, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3065, 0, 1230, 1229, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4951, 0, 0, 757,
	2857, 0, 0, 85, 0, 0, 757, 84, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 5160, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2077, 0,
	0, 0, 0, 0, 819, 0, 895, 819, 0, 819,
	819, 0, 895, 0, 103, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1219, 0, 0, 0, 0, 0, 0, 108, 0, 0,
	819, 0, 0, 0, 88, 4334, 0, 0, 1247, 0,
	0, 0, 0, 0, 0, 757, 4155, 0, 0, 0,
	1233, 757, 83, 1555, 0, 2403, 1525, 0, 0, 0,
	1537, 1538, 1539, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2170, 0, 0, 2171, 0, 2077, 0, 2176,
	0, 2168, 0, 757, 0, 0, 2173, 2177, 2172, 0,
	2174, 819, 0, 0, 2175, 1548, 1549, 2169, 0, 819,
	0, 0, 0, 0, 2178, 1249, 0, 0, 0, 0,
	0, 819, 2857, 0, 0, 0, 0, 1544, 0, 819,
	0, 0, 0, 0, 0, 0, 1534, 1535, 1536, 0,
	0, 0, 90, 0, 0, 1528, 1529, 1530, 1531, 1532,
	1533, 0, 1217, 0, 0, 0, 0, 1218, 0, 819,
	819, 1227, 0, 3934, 0, 819, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	0, 819, 819, 0, 0, 0, 819, 0, 0, 0,
	0, 0, 0, 0, 1217, 819, 0, 0, 0, 1218,
	0, 819, 0, 1227, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 819, 819, 819, 0, 4693, 0, 0,
	0, 0, 0, 1220, 0, 3935, 0, 0, 0, 0,
	0, 819, 0, 0, 5326, 0, 0, 0, 1248, 0,
	0, 97, 819, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1226, 0, 0, 4129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1220, 819, 819, 819, 0,
	0, 4152, 0, 0, 819, 819, 819, 0, 0, 819,
	0, 0, 0, 1231, 0, 0, 2077, 0, 0, 0,
	819, 0, 2077, 0, 1226, 0, 0, 0, 895, 1544,
	4156, 0, 0, 0, 0, 0, 0, 0, 1534, 1535,
	1536, 0, 819, 4154, 2857, 0, 819, 1528, 1529, 1530,
	1531, 1532, 1533, 826, 826, 1231, 1216, 0, 0, 96,
	1250, 0, 0, 0, 0, 0, 0, 1214, 0, 819,
	0, 0, 0, 0, 819, 87, 0, 0, 95, 819,
	0, 819, 89, 1221, 3520, 0, 98, 0, 93, 0,
	1251, 0, 0, 1252, 94, 0, 0, 1253, 1216, 826,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2212,
	0, 0, 0, 0, 0, 895, 1215, 91, 1223, 1254,
	757, 0, 0, 0, 1222, 1221, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2883, 0, 0, 0,
	0, 0, 0, 0, 1294, 2759, 0, 1257, 2077, 895,
	1223, 0, 0, 0, 0, 895, 1222, 0, 0, 1224,
	0, 2857, 0, 0, 1255, 757, 757, 0, 0, 0,
	2857, 0, 5310, 0, 0, 0, 0, 0, 0, 0,
	0, 1256, 0, 4157, 3653, 757, 757, 0, 0, 107,
	0, 0, 0, 0, 0, 757, 0, 0, 0, 0,
	0, 1224, 102, 0, 1225, 0, 1300, 0, 2759, 0,
	819, 0, 0, 0, 0, 1228, 0, 0, 1258, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 819, 0, 1555, 0, 0, 1525,
	1296, 0, 0, 1537, 1538, 1539, 1225, 0, 1212, 0,
	1230, 1229, 0, 0, 0, 2170, 0, 1228, 2171, 0,
	1107, 4574, 2176, 0, 2168, 0, 0, 0, 0, 2173,
	2177, 2172, 0, 3398, 0, 0, 2328, 2175, 1548, 1549,
	2169, 5368, 0, 0, 2077, 2077, 2077, 2178, 1544, 3399,
	3724, 0, 1230, 1229, 0, 0, 0, 1534, 1535, 1536,
	2857, 0, 0, 0, 5373, 0, 1528, 1529, 1530, 1531,
	1532, 1533, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 895, 895, 0, 895, 1219, 1285, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 819, 0, 0, 0, 0, 5368, 0,
	1295, 0, 0, 0, 0, 3400, 0, 1233, 757, 0,
	0, 0, 0, 0, 5432, 0, 0, 0, 0, 1219,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	826, 826, 0, 0, 0, 0, 0, 0, 0, 0,
	1291, 0, 0, 0, 0, 0, 0, 0, 0, 1233,
	0, 0, 2759, 0, 0, 0, 0, 0, 0, 0,
	757, 0, 0, 1288, 895, 0, 0, 0, 0, 0,
	0, 0, 0, 895, 0, 0, 0, 0, 0, 757,
	757, 0, 1555, 0, 2884, 1525, 0, 1293, 0, 1537,
	1538, 1539, 0, 0, 0, 0, 0, 757, 0, 0,
	0, 2170, 889, 889, 2171, 757, 0, 0, 2176, 819,
	2168, 2759, 0, 0, 0, 2173, 2177, 2172, 0, 2174,
	0, 0, 757, 2175, 1548, 1549, 2169, 0, 757, 1299,
	0, 0, 0, 2178, 0, 0, 819, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 819, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 819, 819, 0,
	0, 819, 819, 819, 89, 819, 0, 1286, 4825, 0,
	0, 0, 0, 0, 0, 0, 819, 0, 0, 0,
	0, 1292, 0, 0, 0, 0, 0, 0, 0, 819,
	0, 819, 0, 0, 0, 0, 0, 1289, 0, 0,
	0, 0, 0, 819, 1287, 0, 0, 0, 1297, 819,
	819, 0, 864, 0, 0, 0, 0, 0, 0, 819,
	0, 2885, 0, 0, 0, 0, 819, 4865, 0, 0,
	819, 819, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 895, 0, 819, 1290, 0, 2886, 0, 819,
	819, 0, 895, 819, 819, 819, 819, 819, 819, 819,
	819, 819, 819, 819, 819, 819, 0, 819, 0, 0,
	0, 0, 0, 0, 819, 819, 819, 895, 0, 0,
	1125, 0, 819, 0, 819, 0, 0, 0, 0, 0,
	0, 819, 2077, 0, 0, 819, 0, 0, 0, 0,
	819, 0, 0, 0, 819, 0, 0, 0, 0, 0,
	0, 0, 819, 819, 819, 0, 0, 0, 0, 679,
	679, 0, 0, 819, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 816, 819, 0, 2759,
	819, 0, 0, 197, 743, 0, 747, 196, 0, 0,
	785, 786, 0, 0, 791, 792, 0, 0, 0, 0,
	0, 200, 0, 0, 0, 0, 0, 819, 819, 0,
	819, 819, 0, 0, 0, 0, 823, 0, 0, 194,
	0, 0, 834, 0, 837, 0, 839, 840, 841, 842,
	843, 1544, 0, 0, 852, 0, 819, 0, 857, 0,
	1534, 1535, 1536, 865, 895, 819, 819, 0, 0, 1528,
	1529, 1530, 1531, 1532, 1533, 895, 895, 0, 0, 895,
	1217, 0, 0, 0, 757, 1218, 0, 0, 0, 1227,
	0, 0, 0, 0, 0, 0, 819, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 895, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 757,
	0, 0, 0, 757, 757, 0, 0, 0, 0, 1555,
	0, 1220, 1525, 0, 0, 0, 1537, 1538, 1539, 0,
	0, 202, 0, 819, 819, 0, 0, 0, 2170, 0,
	0, 2171, 203, 0, 0, 2176, 0, 2168, 0, 0,
	1226, 5193, 2173, 2177, 2172, 0, 2174, 0, 876, 876,
	2175, 1548, 1549, 2169, 0, 0, 0, 192, 0, 819,
	2178, 0, 0, 0, 207, 0, 0, 0, 0, 0,
	0, 1231, 208, 0, 0, 0, 0, 0, 0, 0,
	201, 2077, 895, 2077, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2077, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 0, 0, 0, 1544, 0, 0,
	0, 0, 0, 0, 1216, 0, 1534, 1535, 1536, 0,
	0, 0, 0, 5311, 0, 1528, 1529, 1530, 1531, 1532,
	1533, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1217, 1221, 0, 0, 0, 1218, 0, 0, 1217, 1227,
	0, 0, 0, 1218, 0, 0, 0, 1227, 0, 0,
	0, 0, 0, 0, 0, 2077, 0, 895, 0, 0,
	0, 213, 0, 0, 0, 895, 1223, 0, 0, 0,
	187, 0, 1222, 210, 2759, 2759, 0, 0, 2759, 0,
	0, 0, 0, 757, 0, 0, 0, 0, 0, 0,
	0, 0, 195, 0, 0, 2883, 0, 2077, 214, 0,
	211, 1220, 0, 1294, 0, 198, 0, 0, 212, 1220,
	0, 819, 0, 0, 889, 0, 0, 1224, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 819, 819,
	1226, 1012, 81, 0, 819, 819, 0, 0, 1226, 0,
	205, 819, 819, 0, 0, 0, 215, 0, 819, 0,
	191, 0, 819, 0, 0, 1217, 0, 0, 0, 0,
	1218, 1231, 1225, 0, 1227, 1300, 199, 0, 0, 1231,
	819, 0, 0, 1228, 0, 0, 0, 0, 0, 0,
	0, 819, 0, 0, 0, 0, 0, 0, 0, 0,
	5284, 5285, 0, 0, 5287, 0, 0, 0, 0, 1296,
	0, 0, 0, 0, 1216, 0, 3719, 0, 1230, 1229,
	0, 0, 1216, 0, 0, 1239, 819, 0, 0, 0,
	0, 0, 0, 0, 819, 0, 1220, 819, 0, 819,
	0, 1221, 0, 662, 664, 0, 0, 0, 0, 1221,
	0, 81, 0, 895, 0, 0, 0, 0, 0, 819,
	81, 0, 0, 0, 0, 1226, 819, 0, 0, 0,
	819, 819, 0, 0, 819, 0, 1223, 0, 0, 0,
	819, 0, 1222, 0, 1223, 0, 0, 0, 0, 0,
	1222, 0, 819, 0, 0, 1219, 1231, 1285, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	679, 0, 0, 0, 1555, 0, 0, 1525, 0, 1295,
	0, 1537, 1538, 1539, 895, 1233, 0, 1224, 0, 895,
	0, 0, 0, 2170, 0, 1224, 2171, 895, 0, 1216,
	2176, 1153, 2168, 0, 0, 0, 0, 2173, 2177, 2172,
	0, 2174, 0, 0, 819, 2175, 1548, 1549, 2169, 1291,
	0, 0, 0, 0, 0, 2178, 1221, 995, 995, 0,
	2077, 0, 1225, 0, 0, 0, 0, 0, 0, 0,
	1225, 0, 1288, 1228, 0, 0, 0, 0, 0, 0,
	819, 1228, 0, 0, 0, 0, 0, 757, 0, 0,
	0, 1223, 0, 2884, 0, 0, 1293, 1222, 819, 0,
	0, 0, 0, 819, 1544, 0, 1238, 1195, 1230, 1229,
	1199, 0, 0, 1534, 1535, 1536, 1230, 1229, 0, 0,
	5301, 0, 1528, 1529, 1530, 1531, 1532, 1533, 0, 0,
	0, 0, 0, 0, 819, 0, 0, 1555, 1299, 0,
	1525, 0, 1224, 0, 1537, 1538, 1539, 0, 0, 0,
	0, 895, 0, 0, 1308, 0, 2170, 0, 0, 2171,
	0, 0, 0, 2176, 0, 2168, 757, 1337, 0, 757,
	2173, 2177, 2172, 89, 2174, 0, 2879, 889, 2175, 1548,
	1549, 2169, 0, 0, 889, 1219, 0, 1225, 2178, 0,
	1292, 0, 0, 1219, 0, 895, 0, 0, 1228, 0,
	0, 0, 0, 819, 0, 0, 1289, 0, 0, 0,
	0, 1217, 0, 1287, 0, 1233, 1218, 1297, 0, 0,
	1227, 0, 0, 1233, 0, 0, 0, 895, 895, 0,
	2885, 3084, 0, 1230, 1229, 0, 0, 0, 0, 0,
	876, 0, 0, 1555, 0, 0, 1525, 0, 0, 0,
	1537, 1538, 1539, 0, 1290, 0, 2886, 757, 0, 0,
	0, 0, 2170, 0, 819, 2171, 0, 0, 889, 2176,
	0, 2168, 819, 819, 819, 0, 2173, 2177, 2172, 0,
	2174, 0, 1220, 0, 2175, 1548, 1549, 2169, 0, 0,
	0, 0, 889, 0, 2178, 0, 0, 0, 0, 0,
	0, 0, 0, 819, 819, 0, 0, 819, 819, 819,
	1219, 1226, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 819, 0, 0, 0, 0, 0,
	1233, 0, 1231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 819, 819, 0, 0, 0, 0, 0, 0,
	0, 0, 895, 0, 0, 0, 0, 819, 819, 1501,
	0, 1508, 0, 0, 0, 0, 0, 2077, 1519, 0,
	0, 0, 0, 0, 0, 1216, 0, 0, 0, 2001,
	2002, 2003, 2004, 2005, 0, 0, 0, 819, 0, 889,
	2010, 889, 895, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1221, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2029, 0, 889, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 679, 0, 0, 0, 1223, 0, 0,
	0, 0, 819, 1222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 819, 0, 0, 0, 2224, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 895, 0, 0, 0, 662, 1224, 0,
	0, 0, 0, 0, 0, 757, 0, 2159, 2260, 1544,
	0, 0, 0, 0, 0, 0, 819, 0, 1534, 1535,
	1536, 0, 0, 0, 0, 5146, 0, 1528, 1529, 1530,
	1531, 1532, 1533, 895, 895, 0, 757, 757, 0, 0,
	0, 0, 0, 1225, 0, 0, 889, 0, 819, 1106,
	0, 0, 0, 0, 1228, 819, 0, 0, 0, 0,
	0, 819, 0, 0, 0, 0, 819, 0, 819, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 819, 0, 0, 0, 0, 0, 3070, 0, 1230,
	1229, 2380, 0, 0, 0, 0, 0, 0, 0, 819,
	0, 0, 0, 876, 0, 0, 819, 0, 0, 0,
	876, 0, 0, 819, 0, 0, 0, 0, 0, 0,
	819, 0, 0, 0, 0, 0, 819, 0, 0, 0,
	0, 0, 0, 0, 0, 2434, 0, 0, 0, 0,
	0, 0, 1544, 757, 0, 0, 0, 0, 0, 0,
	0, 1534, 1535, 1536, 0, 0, 0, 0, 5131, 0,
	1528, 1529, 1530, 1531, 1532, 1533, 1219, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 895, 0, 0, 0,
	0, 0, 0, 895, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 876, 0, 1233, 2522, 0, 0,
	2524, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 819, 0, 0, 2077, 0, 0, 0, 2392, 0,
	0, 0, 0, 0, 0, 819, 0, 0, 0, 819,
	0, 0, 0, 0, 1217, 0, 757, 819, 819, 1218,
	0, 888, 888, 1227, 0, 0, 0, 0, 1544, 0,
	0, 0, 0, 0, 819, 0, 0, 1534, 1535, 1536,
	0, 0, 0, 0, 5108, 0, 1528, 1529, 1530, 1531,
	1532, 1533, 0, 0, 895, 0, 895, 895, 819, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	819, 0, 0, 0, 0, 1220, 819, 819, 819, 0,
	819, 0, 0, 0, 662, 0, 0, 662, 662, 819,
	2077, 0, 0, 0, 0, 876, 0, 876, 0, 0,
	0, 0, 0, 0, 1226, 1555, 0, 0, 1525, 0,
	0, 2012, 1537, 1538, 1539, 2015, 2016, 895, 819, 0,
	2077, 0, 876, 0, 2170, 0, 0, 2171, 0, 0,
	0, 2176, 0, 2168, 0, 1231, 0, 2077, 2173, 2177,
	2172, 0, 2174, 757, 0, 0, 2175, 1548, 1549, 2169,
	0, 819, 0, 0, 0, 0, 2178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2001, 2002, 0, 0, 0, 0, 0, 1216, 0,
	0, 0, 0, 0, 0, 995, 0, 0, 0, 2637,
	2638, 2639, 2640, 2641, 2642, 2643, 2644, 2645, 2646, 2647,
	2648, 2649, 2650, 2651, 2652, 1221, 2658, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4824, 0, 0, 0, 0, 0,
	0, 819, 0, 0, 0, 0, 81, 0, 0, 0,
	1223, 1555, 876, 0, 1525, 0, 1222, 0, 1537, 1538,
	1539, 0, 0, 4867, 0, 0, 819, 0, 819, 819,
	2170, 0, 0, 2171, 819, 0, 0, 2176, 0, 2168,
	0, 0, 0, 0, 2173, 2177, 2172, 0, 2174, 0,
	0, 0, 2175, 1548, 1549, 2169, 0, 1555, 0, 0,
	1525, 1224, 2178, 0, 1537, 1538, 1539, 0, 0, 0,
	819, 0, 0, 0, 0, 0, 2170, 0, 0, 2171,
	0, 0, 0, 2176, 0, 2168, 0, 0, 0, 0,
	2173, 2177, 2172, 0, 2174, 0, 0, 0, 2175, 1548,
	1549, 2169, 0, 819, 0, 0, 1225, 0, 2178, 0,
	0, 0, 0, 819, 0, 0, 819, 1228, 0, 0,
	0, 1555, 819, 819, 1525, 0, 0, 0, 1537, 1538,
	1539, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2170, 0, 0, 2171, 0, 757, 0, 2176, 0, 2168,
	2378, 0, 1230, 1229, 2173, 2177, 2172, 0, 2174, 0,
	0, 0, 2175, 1548, 1549, 2169, 0, 0, 819, 895,
	0, 0, 2178, 757, 0, 0, 1217, 0, 0, 819,
	0, 1218, 0, 0, 0, 1227, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 819, 819, 0, 0, 819, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1219,
	0, 0, 0, 0, 757, 0, 0, 0, 0, 0,
	819, 0, 0, 0, 0, 0, 0, 1220, 0, 819,
	0, 819, 0, 0, 0, 0, 0, 0, 0, 1233,
	0, 1555, 0, 0, 1525, 0, 0, 0, 1537, 1538,
	1539, 0, 0, 0, 0, 0, 1226, 0, 0, 889,
	2170, 0, 0, 2171, 0, 0, 0, 2176, 889, 2168,
	0, 0, 0, 0, 2173, 2177, 2172, 819, 2174, 0,
	0, 0, 2175, 1548, 1549, 2169, 0, 1231, 819, 0,
	0, 0, 2178, 0, 0, 0, 0, 0, 0, 0,
	819, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 819, 0, 0,
	1216, 0, 0, 0, 0, 889, 0, 0, 0, 0,
	819, 0, 0, 0, 0, 0, 0, 0, 895, 0,
	889, 0, 0, 0, 0, 0, 0, 1221, 0, 819,
	1544, 2077, 0, 888, 0, 0, 0, 0, 0, 1534,
	1535, 1536, 0, 0, 0, 0, 0, 0, 1528, 1529,
	1530, 1531, 1532, 1533, 0, 0, 0, 0, 0, 0,
	0, 0, 1223, 0, 0, 0, 0, 0, 1222, 0,
	0, 0, 0, 2679, 0, 0, 0, 819, 819, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2077, 819, 0, 0, 889, 889, 0, 0,
	0, 0, 0, 0, 0, 2711, 0, 0, 0, 819,
	819, 0, 0, 1224, 0, 2733, 2735, 0, 0, 0,
	2077, 0, 2741, 0, 2752, 2755, 0, 2766, 2767, 2772,
	2775, 0, 0, 0, 0, 0, 2783, 0, 0, 0,
	2787, 2793, 2735, 2735, 2800, 2735, 0, 2735, 2735, 2735,
	0, 0, 0, 0, 0, 0, 0, 0, 1225, 0,
	0, 2713, 0, 0, 0, 0, 1544, 0, 0, 1228,
	0, 0, 0, 0, 0, 1534, 1535, 1536, 0, 0,
	0, 2713, 0, 2713, 1528, 1529, 1530, 1531, 1532, 1533,
	0, 0, 0, 0, 0, 0, 0, 2713, 0, 0,
	0, 0, 2374, 0, 1230, 1229, 0, 0, 0, 0,
	0, 889, 1544, 0, 0, 0, 0, 889, 0, 0,
	0, 1534, 1535, 1536, 0, 0, 0, 0, 4793, 0,
	1528, 1529, 1530, 1531, 1532, 1533, 0, 0, 0, 0,
	0, 0, 2911, 0, 0, 0, 0, 2817, 0, 0,
	0, 2650, 2651, 2652, 2658, 0, 0, 0, 0, 0,
	2925, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2942, 0, 0, 0, 1544, 0, 0, 0,
	2953, 1219, 0, 0, 0, 1534, 1535, 1536, 0, 0,
	0, 0, 4765, 0, 1528, 1529, 1530, 1531, 1532, 1533,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1233, 2998, 2999, 3000, 0, 0, 0, 0, 0,
	0, 0, 0, 3007, 0, 0, 0, 0, 0, 0,
	0, 3018, 0, 3022, 3023, 0, 0, 0, 0, 3027,
	0, 0, 3031, 3032, 0, 0, 3039, 0, 3041, 3044,
	0, 0, 0, 0, 0, 2392, 0, 0, 0, 0,
	0, 0, 3066, 3067, 2392, 0, 3071, 3072, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 820,
	0, 0, 0, 3081, 3082, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3095, 0, 888, 0, 0, 0,
	0, 0, 0, 888, 0, 0, 0, 0, 3106, 3107,
	3108, 3109, 3110, 0, 0, 3112, 1544, 0, 0, 3116,
	0, 0, 0, 3119, 3120, 1534, 1535, 1536, 0, 0,
	0, 876, 4744, 0, 1528, 1529, 1530, 1531, 1532, 1533,
	0, 0, 0, 0, 3128, 3129, 876, 0, 3134, 1041,
	3135, 0, 0, 0, 0, 3136, 0, 3137, 3138, 0,
	0, 0, 3139, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3152, 0, 0, 3114, 0, 0, 888, 3155, 0,
	0, 3156, 0, 0, 0, 0, 0, 0, 3167, 3168,
	0, 0, 0, 889, 0, 0, 0, 0, 0, 3185,
	0, 888, 0, 0, 759, 0, 0, 0, 0, 0,
	0, 0, 2392, 3102, 0, 759, 759, 0, 0, 2690,
	0, 3105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 827, 759, 0, 0, 0,
	827, 0, 827, 0, 0, 0, 0, 0, 1555, 759,
	759, 1525, 0, 0, 0, 1537, 1538, 1539, 0, 0,
	0, 0, 0, 0, 759, 759, 759, 2170, 0, 0,
	2171, 0, 0, 2798, 2176, 0, 2168, 0, 0, 0,
	889, 2173, 2177, 2172, 0, 2174, 0, 0, 0, 2175,
	1548, 1549, 2169, 0, 0, 0, 0, 0, 759, 2178,
	0, 0, 0, 0, 0, 0, 0, 0, 888, 0,
	888, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 889, 233, 0, 876, 0, 0,
	889, 875, 875, 876, 0, 888, 0, 0, 0, 0,
	0, 0, 0, 1217, 0, 0, 0, 0, 1218, 0,
	1555, 0, 1227, 1525, 0, 0, 0, 1537, 1538, 1539,
	0, 0, 0, 0, 0, 0, 1508, 0, 0, 2170,
	0, 0, 2171, 0, 2010, 0, 2176, 0, 2168, 0,
	0, 0, 0, 2173, 2177, 2172, 1519, 2174, 0, 2679,
	0, 2175, 1548, 1549, 2169, 0, 0, 0, 0, 0,
	664, 2178, 0, 0, 0, 0, 0, 0, 0, 0,
	2842, 2842, 0, 0, 1220, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3283, 3284, 0, 0, 0, 0,
	3290, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 888, 0, 0, 0, 0,
	758, 0, 0, 0, 0, 0, 3319, 0, 0, 0,
	0, 758, 758, 0, 1231, 0, 0, 0, 2711, 2711,
	2711, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 758, 0, 0, 0, 3344, 0, 889, 889,
	0, 889, 0, 0, 0, 758, 758, 3361, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1216, 0, 0,
	758, 758, 758, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2713, 2713, 2713, 0, 0, 2772,
	2772, 2772, 0, 0, 1221, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 758, 3417, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3439, 0, 1223,
	0, 3443, 0, 0, 0, 1222, 0, 0, 0, 889,
	0, 0, 1555, 0, 0, 1525, 0, 0, 889, 1537,
	1538, 1539, 0, 0, 3455, 0, 0, 0, 0, 3459,
	0, 2170, 0, 3544, 2171, 1294, 0, 0, 2176, 876,
	2168, 0, 0, 0, 0, 2173, 2177, 2172, 0, 2174,
	1224, 0, 0, 2175, 1548, 1549, 2169, 1555, 0, 0,
	1525, 3585, 0, 2178, 1537, 1538, 1539, 0, 0, 3593,
	0, 3593, 0, 0, 0, 0, 2170, 3602, 0, 2171,
	0, 0, 124, 2176, 0, 2168, 0, 0, 0, 153,
	2173, 2177, 2172, 0, 2174, 1225, 0, 1300, 2175, 1548,
	1549, 2169, 0, 0, 0, 0, 1228, 149, 2178, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 0, 0, 0, 0, 0, 3102, 0, 0, 0,
	0, 1296, 0, 0, 0, 0, 0, 0, 3664, 1261,
	0, 1230, 1229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 0, 0, 0, 0, 3688, 3689,
	3690, 3691, 0, 0, 0, 0, 0, 0, 0, 0,
	3102, 0, 0, 1544, 0, 3629, 876, 0, 0, 0,
	0, 0, 1534, 1535, 1536, 0, 0, 889, 0, 4721,
	0, 1528, 1529, 1530, 1531, 1532, 1533, 889, 0, 3656,
	0, 0, 0, 0, 0, 0, 0, 0, 3716, 3717,
	0, 3720, 3721, 3722, 0, 0, 0, 0, 1219, 1285,
	0, 0, 889, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2012, 0, 0, 0, 0,
	0, 1295, 0, 139, 0, 0, 0, 0, 1233, 0,
	3740, 0, 0, 0, 0, 2842, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3755,
	0, 0, 0, 0, 130, 1544, 0, 3756, 0, 0,
	0, 1291, 0, 0, 1534, 1535, 1536, 0, 0, 2679,
	0, 4584, 0, 1528, 1529, 1530, 1531, 1532, 1533, 0,
	0, 0, 0, 0, 1288, 0, 0, 0, 3736, 0,
	126, 0, 2012, 3312, 0, 0, 0, 136, 0, 0,
	0, 0, 0, 0, 0, 131, 0, 0, 1293, 0,
	0, 0, 0, 132, 0, 0, 0, 0, 150, 0,
	0, 0, 0, 3792, 2392, 3102, 0, 3102, 0, 889,
	0, 0, 0, 875, 0, 0, 0, 0, 0, 0,
	889, 889, 0, 0, 889, 0, 0, 0, 0, 0,
	1299, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 889, 0, 0,
	0, 0, 1319, 0, 0, 89, 0, 0, 1286, 0,
	0, 0, 0, 0, 0, 0, 759, 0, 0, 0,
	759, 759, 1292, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 876, 141, 0, 1289, 0,
	0, 0, 0, 0, 876, 1287, 0, 759, 0, 1297,
	0, 0, 0, 0, 0, 145, 0, 0, 0, 759,
	0, 3832, 0, 125, 0, 0, 0, 0, 0, 0,
	0, 133, 3840, 3841, 0, 3475, 3844, 3479, 0, 0,
	3847, 0, 0, 0, 0, 0, 1290, 140, 0, 0,
	0, 3852, 142, 0, 0, 0, 0, 0, 137, 0,
	148, 0, 147, 129, 3858, 0, 0, 889, 0, 0,
	0, 0, 0, 128, 0, 0, 0, 1544, 2711, 0,
	152, 0, 151, 0, 3871, 3872, 1534, 1535, 1536, 0,
	0, 0, 0, 4566, 3883, 1528, 1529, 1530, 1531, 1532,
	1533, 3888, 0, 0, 0, 2735, 2735, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3899,
	0, 143, 1544, 0, 3901, 2711, 0, 0, 888, 0,
	0, 1534, 1535, 1536, 2713, 0, 0, 888, 4557, 0,
	1528, 1529, 1530, 1531, 1532, 1533, 0, 0, 0, 3920,
	3921, 3922, 889, 0, 0, 0, 0, 0, 0, 3928,
	889, 0, 81, 0, 0, 2079, 2783, 0, 0, 0,
	0, 0, 0, 876, 0, 2733, 0, 0, 0, 2735,
	0, 2713, 0, 876, 0, 0, 0, 3954, 3955, 3956,
	0, 0, 0, 0, 0, 0, 4026, 0, 995, 0,
	0, 0, 0, 0, 888, 0, 0, 0, 876, 0,
	759, 0, 0, 0, 0, 0, 2079, 0, 2079, 888,
	0, 0, 0, 0, 0, 0, 0, 0, 3593, 0,
	0, 0, 758, 0, 4052, 0, 758, 758, 0, 0,
	0, 759, 0, 2735, 0, 2711, 4001, 759, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 758, 0, 0, 0, 0, 0, 0,
	0, 4030, 0, 0, 0, 758, 875, 0, 0, 0,
	4035, 4036, 0, 875, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 888, 888, 0, 0, 0,
	0, 2713, 4093, 0, 0, 0, 0, 0, 0, 3593,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4122, 4123, 0, 0, 0,
	0, 1000, 0, 0, 0, 2392, 0, 0, 889, 0,
	0, 0, 4139, 0, 0, 0, 2392, 2392, 0, 0,
	3102, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 4169, 0, 0, 0, 0, 875, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4174, 0,
	0, 0, 0, 876, 0, 0, 0, 4176, 4177, 4178,
	0, 875, 4181, 0, 759, 4184, 4185, 4186, 4187, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4196, 0,
	888, 0, 0, 0, 889, 4199, 888, 4200, 0, 0,
	0, 2078, 889, 0, 0, 0, 0, 0, 4214, 0,
	0, 0, 0, 0, 0, 0, 4219, 4220, 0, 0,
	0, 4223, 4224, 4225, 4226, 4227, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 759, 0,
	759, 759, 759, 759, 0, 0, 758, 0, 0, 0,
	0, 0, 2078, 0, 2078, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3102, 0, 0, 0, 758, 875, 0,
	875, 0, 0, 758, 0, 2012, 0, 0, 0, 0,
	0, 0, 0, 0, 827, 827, 827, 0, 0, 1555,
	0, 0, 1525, 0, 0, 875, 1537, 1538, 1539, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2170, 0,
	0, 2171, 0, 0, 0, 2176, 889, 2168, 0, 0,
	0, 0, 2173, 2177, 2172, 0, 2174, 0, 0, 4388,
	2175, 1548, 1549, 2169, 0, 0, 0, 0, 0, 0,
	2178, 0, 0, 0, 0, 0, 4275, 0, 3102, 0,
	0, 0, 0, 0, 0, 0, 876, 0, 0, 0,
	889, 0, 0, 4284, 4285, 0, 0, 0, 0, 4289,
	4290, 0, 0, 2079, 0, 0, 4293, 4294, 0, 0,
	0, 0, 1294, 4297, 0, 0, 0, 2711, 0, 0,
	0, 0, 889, 889, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4304, 81, 0, 0, 0,
	0, 81, 81, 0, 0, 875, 1519, 0, 0, 0,
	758, 0, 0, 2842, 0, 4361, 2842, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2713, 1300, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 4337, 0, 4340, 0, 0, 0, 0, 0,
	81, 0, 888, 1555, 0, 0, 1525, 0, 1296, 0,
	1537, 1538, 1539, 0, 758, 0, 758, 758, 758, 758,
	0, 4359, 2170, 0, 0, 2171, 0, 0, 0, 2176,
	0, 2168, 0, 0, 0, 0, 2173, 2177, 2172, 0,
	2174, 0, 0, 0, 2175, 1548, 1549, 2169, 0, 0,
	0, 0, 0, 0, 2178, 0, 0, 889, 0, 0,
	0, 0, 0, 4452, 876, 0, 0, 0, 0, 0,
	0, 0, 0, 1555, 0, 0, 1525, 0, 0, 0,
	1537, 1538, 1539, 0, 0, 0, 0, 0, 0, 888,
	0, 0, 2170, 0, 0, 2171, 1285, 889, 0, 2176,
	0, 2168, 0, 0, 0, 0, 2173, 2177, 2172, 4439,
	2174, 0, 0, 0, 2175, 1548, 1549, 2169, 1295, 2842,
	0, 4348, 0, 0, 2178, 0, 0, 0, 0, 0,
	0, 0, 0, 888, 0, 4417, 0, 0, 0, 888,
	876, 0, 0, 0, 0, 0, 0, 0, 2392, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1291, 2078,
	0, 0, 4510, 0, 0, 4512, 0, 0, 4465, 0,
	1294, 4515, 4516, 4517, 0, 0, 4520, 4521, 4522, 0,
	0, 1288, 0, 0, 0, 0, 4526, 4527, 889, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4493,
	0, 0, 0, 0, 0, 1293, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1555, 0, 0, 1525,
	0, 0, 0, 1537, 1538, 1539, 4544, 4545, 889, 889,
	4549, 0, 1300, 0, 0, 2170, 0, 0, 2171, 0,
	0, 4553, 2176, 0, 2168, 0, 0, 1299, 0, 2173,
	2177, 2172, 0, 2174, 0, 0, 0, 2175, 1548, 1549,
	2169, 0, 0, 0, 0, 0, 1296, 2178, 4536, 4323,
	0, 0, 876, 0, 0, 0, 0, 0, 0, 1313,
	0, 0, 89, 0, 0, 1286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4572, 0, 1292,
	0, 0, 0, 0, 0, 0, 0, 888, 888, 0,
	888, 0, 0, 0, 0, 1289, 876, 0, 0, 0,
	0, 0, 1287, 0, 1544, 0, 1297, 0, 0, 4561,
	0, 0, 0, 1534, 1535, 1536, 0, 4563, 4564, 4565,
	4614, 0, 1528, 1529, 1530, 1531, 1532, 1533, 876, 876,
	0, 0, 0, 0, 1285, 0, 0, 0, 0, 0,
	0, 0, 0, 1290, 0, 0, 0, 0, 4573, 0,
	0, 0, 4576, 4577, 4578, 0, 1295, 0, 889, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 888, 2735,
	0, 0, 0, 0, 0, 0, 0, 888, 0, 0,
	0, 0, 0, 0, 3593, 0, 1291, 4618, 0, 0,
	0, 0, 0, 0, 0, 0, 4726, 0, 0, 0,
	0, 4729, 0, 4635, 0, 0, 0, 4735, 0, 1288,
	4737, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1109, 0,
	0, 0, 0, 1293, 0, 0, 2842, 2842, 0, 889,
	2842, 889, 889, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 876, 0, 0, 0, 0, 0, 0,
	0, 4772, 4773, 0, 0, 0, 0, 4779, 0, 0,
	0, 4781, 0, 0, 0, 1299, 0, 0, 1544, 0,
	0, 0, 0, 0, 0, 0, 0, 1534, 1535, 1536,
	4794, 0, 0, 3102, 0, 0, 1528, 1529, 1530, 1531,
	1532, 1533, 0, 0, 0, 0, 0, 1282, 0, 0,
	89, 0, 889, 1286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1292, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1289, 0, 0, 888, 0, 1544, 0,
	1287, 0, 0, 0, 1297, 0, 888, 1534, 1535, 1536,
	0, 2079, 0, 0, 4325, 0, 1528, 1529, 1530, 1531,
	1532, 1533, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 888, 0, 4809, 3102, 0, 0, 0, 0, 0,
	0, 1290, 0, 0, 0, 0, 2079, 1540, 0, 0,
	0, 0, 0, 2783, 0, 0, 0, 0, 875, 0,
	0, 0, 0, 0, 0, 0, 4837, 875, 0, 0,
	891, 891, 0, 0, 876, 876, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2079, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4869, 0, 759, 0, 0, 3593, 2079, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 4944, 875, 0, 0, 0, 0, 0,
	0, 1544, 0, 0, 0, 0, 0, 0, 0, 875,
	1534, 1535, 1536, 0, 0, 1108, 0, 0, 888, 1528,
	1529, 1530, 1531, 1532, 1533, 0, 0, 0, 0, 888,
	888, 0, 0, 888, 0, 0, 0, 1540, 0, 0,
	0, 0, 0, 4978, 0, 0, 4981, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4939, 0, 759, 759,
	0, 0, 0, 0, 0, 0, 888, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4417, 0, 0,
	0, 0, 0, 0, 876, 875, 875, 0, 0, 0,
	0, 0, 0, 759, 0, 0, 0, 0, 0, 4972,
	759, 0, 0, 0, 889, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2079, 4989, 0, 0, 0, 2078, 0, 0,
	0, 827, 0, 827, 827, 0, 0, 1038, 0, 2842,
	0, 0, 0, 0, 0, 2010, 0, 0, 0, 0,
	0, 5011, 5011, 5011, 0, 5014, 0, 0, 0, 0,
	0, 0, 2078, 0, 2735, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 876, 888, 876, 876, 759,
	0, 0, 0, 0, 0, 759, 0, 0, 0, 0,
	81, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	875, 0, 0, 0, 81, 0, 875, 890, 890, 0,
	5114, 2079, 0, 0, 2078, 0, 0, 759, 0, 0,
	0, 0, 0, 1555, 0, 0, 1525, 81, 0, 758,
	1537, 1538, 1539, 2078, 0, 0, 0, 0, 0, 5134,
	5135, 0, 2170, 0, 0, 2171, 0, 0, 876, 2176,
	0, 2168, 0, 0, 0, 0, 2173, 2177, 2172, 0,
	2174, 888, 0, 0, 2175, 1548, 1549, 2169, 0, 888,
	0, 0, 0, 0, 2178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 889, 0, 0, 5133, 0, 0, 0,
	0, 0, 0, 0, 758, 758, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 872,
	872, 4809, 0, 0, 0, 0, 0, 0, 0, 5011,
	0, 0, 4322, 0, 0, 0, 0, 0, 0, 758,
	0, 0, 0, 0, 0, 0, 758, 0, 0, 0,
	0, 0, 5233, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 5243, 0, 0, 2078, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 5259,
	0, 0, 0, 0, 0, 0, 0, 0, 5217, 0,
	2079, 0, 0, 1540, 0, 0, 2079, 0, 0, 0,
	1540, 5226, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1540, 0, 0, 0, 758, 0, 0, 0, 0,
	0, 758, 0, 0, 0, 0, 1555, 888, 0, 1525,
	0, 0, 0, 1537, 1538, 1539, 0, 0, 0, 81,
	0, 0, 0, 0, 0, 2170, 0, 2078, 2171, 0,
	0, 0, 2176, 758, 2168, 0, 0, 4321, 0, 2173,
	2177, 2172, 0, 2174, 4809, 0, 0, 2175, 1548, 1549,
	2169, 0, 875, 0, 0, 0, 0, 2178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5320, 0, 0,
	0, 0, 0, 0, 759, 2842, 0, 0, 0, 0,
	0, 0, 0, 888, 0, 0, 0, 0, 0, 0,
	876, 888, 891, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2079, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 759,
	759, 0, 0, 0, 0, 0, 0, 0, 0, 875,
	0, 0, 0, 0, 0, 0, 2012, 0, 0, 759,
	759, 0, 0, 0, 0, 0, 0, 0, 1555, 759,
	0, 1525, 5011, 0, 0, 1537, 1538, 1539, 0, 0,
	0, 0, 0, 5338, 0, 0, 0, 2170, 0, 0,
	2171, 0, 0, 875, 2176, 0, 2168, 0, 0, 875,
	0, 2173, 2177, 2172, 0, 2174, 0, 0, 0, 2175,
	1548, 1549, 2169, 0, 0, 0, 0, 0, 0, 2178,
	0, 4317, 0, 0, 0, 888, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2078, 0, 0, 0,
	0, 0, 2078, 0, 0, 1555, 0, 0, 1525, 0,
	0, 0, 1537, 1538, 1539, 0, 0, 0, 2079, 2079,
	2079, 5441, 0, 0, 2170, 0, 0, 2171, 0, 888,
	0, 2176, 0, 2168, 0, 0, 0, 0, 2173, 2177,
	2172, 0, 2174, 0, 0, 0, 2175, 1548, 1549, 2169,
	0, 0, 0, 0, 0, 0, 2178, 0, 1544, 876,
	0, 888, 888, 2711, 0, 0, 0, 1534, 1535, 1536,
	0, 0, 0, 0, 0, 0, 1528, 1529, 1530, 1531,
	1532, 1533, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 759, 0, 0, 0, 0, 0, 0, 0,
	758, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2713,
	0, 0, 0, 0, 0, 0, 0, 875, 875, 0,
	875, 0, 0, 0, 0, 0, 0, 0, 2078, 890,
	0, 0, 0, 0, 759, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 758, 758, 0, 0, 0,
	0, 0, 0, 759, 759, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 758, 758, 0, 0, 0,
	0, 759, 0, 0, 0, 758, 0, 0, 0, 759,
	0, 0, 0, 827, 0, 0, 888, 0, 0, 0,
	81, 0, 0, 0, 0, 0, 759, 0, 0, 0,
	0, 0, 759, 0, 0, 0, 0, 0, 875, 0,
	0, 0, 0, 0, 0, 891, 0, 875, 0, 0,
	0, 0, 891, 0, 0, 0, 888, 0, 0, 0,
	0, 0, 0, 1540, 1540, 1540, 1540, 1540, 0, 0,
	0, 0, 1540, 0, 0, 0, 0, 0, 0, 0,
	0, 872, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1540, 0, 0, 2078, 2078, 2078, 0, 0, 0,
	0, 1544, 0, 0, 0, 0, 0, 2762, 0, 0,
	1534, 1535, 1536, 0, 0, 0, 0, 0, 0, 1528,
	1529, 1530, 1531, 1532, 1533, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 891, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 888, 1555, 0,
	0, 1525, 0, 0, 0, 1537, 1538, 1539, 0, 0,
	891, 0, 0, 0, 0, 0, 0, 2170, 758, 0,
	2171, 0, 0, 0, 2176, 0, 2168, 0, 0, 0,
	0, 2173, 2177, 2172, 0, 2174, 0, 888, 888, 2175,
	1548, 1549, 2169, 0, 0, 0, 2079, 0, 0, 2178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 875, 0, 0, 0,
	758, 1540, 0, 0, 0, 0, 875, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 758,
	758, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 875, 0, 1544, 0, 0, 0, 758, 0, 0,
	0, 0, 1534, 1535, 1536, 758, 0, 891, 0, 891,
	0, 1528, 1529, 1530, 1531, 1532, 1533, 0, 0, 0,
	0, 0, 758, 0, 0, 0, 0, 0, 758, 0,
	0, 0, 0, 0, 891, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 671, 0, 0, 0, 0,
	0, 0, 890, 0, 0, 0, 0, 0, 759, 890,
	1544, 0, 0, 0, 0, 0, 0, 888, 0, 1534,
	1535, 1536, 0, 0, 0, 0, 4308, 0, 1528, 1529,
	1530, 1531, 1532, 1533, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 875, 0,
	0, 0, 0, 759, 0, 0, 0, 759, 759, 875,
	875, 0, 0, 875, 0, 0, 0, 0, 0, 1555,
	0, 0, 1525, 0, 0, 0, 1537, 1538, 1539, 0,
	0, 0, 0, 890, 891, 0, 0, 0, 2170, 0,
	0, 2171, 0, 0, 0, 2176, 875, 2168, 888, 0,
	888, 888, 2173, 2177, 2172, 700, 2174, 890, 0, 0,
	2175, 1548, 1549, 2169, 872, 0, 0, 0, 0, 0,
	2178, 872, 2078, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2079, 0, 2079, 0, 0,
	0, 804, 807, 809, 0, 0, 0, 0, 2079, 0,
	1555, 0, 0, 1525, 0, 0, 0, 1537, 1538, 1539,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2170,
	0, 888, 2171, 0, 0, 0, 2176, 0, 2168, 0,
	0, 0, 0, 2173, 2177, 2172, 0, 2174, 0, 0,
	0, 2175, 1548, 1549, 2169, 0, 0, 0, 0, 0,
	0, 2178, 0, 0, 0, 872, 875, 0, 0, 0,
	0, 0, 0, 0, 890, 0, 890, 0, 0, 2079,
	0, 0, 0, 1555, 0, 0, 1525, 0, 0, 872,
	1537, 1538, 1539, 0, 0, 0, 0, 0, 0, 0,
	0, 890, 2170, 0, 0, 2171, 0, 759, 0, 2176,
	0, 2168, 0, 0, 758, 0, 2173, 2177, 2172, 0,
	2174, 2079, 0, 0, 2175, 1548, 1549, 2169, 0, 0,
	0, 0, 0, 0, 2178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 875, 0, 0, 0, 0, 0, 0, 0, 875,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 758,
	0, 0, 0, 758, 758, 0, 0, 0, 0, 0,
	0, 0, 0, 1544, 0, 0, 0, 0, 0, 0,
	0, 0, 1534, 1535, 1536, 0, 872, 0, 872, 4295,
	0, 1528, 1529, 1530, 1531, 1532, 1533, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 890, 0, 872, 0, 0, 0, 0, 0, 1540,
	1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540,
	1540, 1540, 1540, 1540, 1540, 0, 0, 0, 0, 0,
	1540, 2078, 0, 2078, 1555, 0, 0, 1525, 0, 0,
	0, 1537, 1538, 1539, 2078, 0, 3957, 2762, 2762, 0,
	0, 0, 0, 2170, 0, 0, 2171, 0, 0, 0,
	2176, 0, 2168, 0, 0, 0, 0, 2173, 2177, 2172,
	0, 2174, 0, 0, 0, 2175, 1548, 1549, 2169, 0,
	0, 0, 0, 1540, 0, 2178, 0, 0, 0, 0,
	0, 0, 0, 888, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1540, 0, 1540, 0, 0,
	0, 0, 0, 1540, 0, 2078, 0, 875, 0, 0,
	0, 0, 0, 872, 1540, 0, 0, 1540, 0, 0,
	3389, 0, 2762, 2762, 2762, 0, 0, 0, 1540, 1540,
	0, 0, 0, 758, 1540, 0, 0, 1540, 0, 0,
	0, 0, 0, 0, 0, 1540, 0, 2078, 0, 1540,
	0, 0, 0, 0, 2079, 1540, 0, 0, 0, 0,
	0, 0, 1540, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1540,
	0, 759, 0, 875, 0, 0, 0, 0, 0, 0,
	0, 875, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1544, 0, 0, 0, 0, 0,
	0, 0, 0, 1534, 1535, 1536, 0, 0, 0, 0,
	4201, 0, 1528, 1529, 1530, 1531, 1532, 1533, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	759, 0, 0, 759, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 888, 0, 0, 1544, 0, 0, 0, 0,
	1117, 0, 0, 0, 1534, 1535, 1536, 0, 0, 0,
	0, 4132, 0, 1528, 1529, 1530, 1531, 1532, 1533, 1135,
	0, 0, 0, 0, 0, 875, 0, 1143, 1145, 0,
	1147, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 759, 0, 0, 0, 0, 0, 0, 1544, 875,
	0, 0, 1186, 0, 0, 0, 0, 1534, 1535, 1536,
	0, 0, 0, 0, 4111, 0, 1528, 1529, 1530, 1531,
	1532, 1533, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 875, 875, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 891, 0, 0,
	2078, 0, 0, 0, 0, 0, 891, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1263, 0, 0,
	0, 1555, 0, 0, 1525, 0, 0, 758, 1537, 1538,
	1539, 0, 0, 3416, 0, 0, 0, 0, 0, 0,
	2170, 0, 0, 2171, 0, 0, 0, 2176, 0, 2168,
	0, 0, 0, 0, 2173, 2177, 2172, 0, 2174, 0,
	0, 2079, 2175, 1548, 1549, 2169, 1540, 0, 0, 0,
	0, 0, 2178, 891, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 891, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 758, 0, 0, 758,
	0, 0, 0, 0, 0, 0, 875, 0, 0, 1544,
	0, 0, 0, 0, 0, 0, 0, 0, 1534, 1535,
	1536, 0, 0, 0, 0, 0, 827, 1528, 1529, 1530,
	1531, 1532, 1533, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 875, 0, 0, 0,
	0, 0, 1476, 0, 891, 891, 0, 0, 0, 0,
	0, 0, 0, 1476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 759,
	0, 0, 0, 0, 0, 0, 0, 758, 0, 0,
	827, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	759, 759, 1555, 0, 0, 1525, 0, 0, 0, 1537,
	1538, 1539, 0, 0, 0, 1540, 1540, 0, 2762, 2762,
	0, 2170, 1540, 0, 2171, 0, 0, 875, 2176, 0,
	2168, 0, 0, 0, 0, 2173, 2177, 2172, 0, 2174,
	0, 3389, 3389, 2175, 1548, 1549, 2169, 0, 0, 0,
	0, 1540, 0, 2178, 890, 0, 0, 0, 0, 891,
	0, 0, 0, 890, 0, 891, 0, 875, 875, 0,
	0, 0, 0, 0, 0, 0, 1540, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1540, 0, 0, 0, 2078, 0, 0,
	0, 0, 0, 0, 2161, 0, 0, 759, 0, 2762,
	2762, 2762, 2762, 2762, 2762, 2762, 2762, 2762, 2762, 2762,
	2762, 2762, 0, 2762, 0, 3389, 3389, 3389, 0, 0,
	890, 0, 2209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 890, 0, 0, 0, 1540,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1540, 0, 0, 0, 1540, 872, 0, 2079, 0,
	2275, 0, 0, 0, 2279, 872, 0, 1540, 0, 2291,
	0, 1540, 0, 0, 0, 0, 0, 0, 0, 0,
	759, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2338, 0, 0, 0, 0, 0, 0, 875, 0, 0,
	0, 890, 890, 0, 0, 758, 2352, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2369, 0, 0, 2372, 0,
	0, 0, 872, 0, 0, 0, 758, 758, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 872, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2079, 0, 0, 0, 0, 0,
	0, 0, 2762, 0, 0, 0, 0, 2433, 0, 0,
	0, 0, 2291, 2291, 2291, 0, 1544, 0, 875, 0,
	875, 875, 0, 0, 2079, 1534, 1535, 1536, 0, 0,
	0, 2457, 2458, 0, 1528, 1529, 1530, 1531, 1532, 1533,
	0, 2079, 0, 0, 0, 0, 890, 759, 0, 0,
	0, 0, 890, 872, 872, 0, 0, 0, 0, 1555,
	0, 891, 1525, 0, 0, 0, 1537, 1538, 1539, 0,
	0, 1540, 0, 758, 0, 0, 0, 0, 2170, 0,
	0, 2171, 0, 0, 0, 2176, 0, 2168, 0, 0,
	0, 875, 2173, 2177, 2172, 0, 2174, 0, 1540, 0,
	2175, 1548, 1549, 2169, 0, 0, 0, 0, 0, 0,
	2178, 0, 0, 0, 0, 2547, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2078, 0, 0, 0, 891, 0,
	0, 0, 0, 1555, 3884, 0, 1525, 1476, 1476, 0,
	1537, 1538, 1539, 0, 0, 0, 758, 0, 872, 0,
	0, 0, 2170, 0, 872, 2171, 0, 0, 1540, 2176,
	0, 2168, 0, 0, 0, 0, 2173, 2177, 2172, 0,
	2174, 0, 891, 0, 2175, 1548, 1549, 2169, 891, 0,
	0, 0, 0, 0, 2178, 0, 0, 0, 0, 1476,
	0, 0, 0, 0, 0, 0, 0, 1544, 0, 2631,
	0, 0, 0, 0, 0, 0, 1534, 1535, 1536, 0,
	0, 0, 0, 3897, 0, 1528, 1529, 1530, 1531, 1532,
	1533, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2078, 0, 0, 0, 0, 0, 827, 827, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1540, 0, 0, 0, 0, 759,
	2078, 0, 1540, 1540, 0, 0, 1540, 3389, 3389, 1540,
	0, 0, 0, 0, 1540, 0, 0, 2078, 0, 0,
	1540, 0, 827, 758, 0, 0, 0, 759, 0, 0,
	0, 0, 0, 1540, 1540, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1540, 0, 0, 0, 0,
	1540, 0, 0, 0, 0, 0, 0, 0, 890, 0,
	0, 1540, 0, 1540, 0, 3389, 3389, 3389, 3389, 3389,
	3389, 3389, 3389, 3389, 3389, 3389, 3389, 3389, 0, 0,
	0, 3389, 1540, 1540, 1540, 0, 891, 891, 759, 891,
	1540, 0, 0, 875, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1540, 1540, 1540, 0,
	0, 0, 0, 0, 1555, 0, 0, 1525, 0, 0,
	0, 1537, 1538, 1539, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2170, 0, 890, 2171, 0, 0, 0,
	2176, 0, 2168, 0, 0, 0, 0, 2173, 2177, 2172,
	0, 2174, 0, 1540, 0, 2175, 1548, 1549, 2169, 0,
	0, 0, 0, 0, 0, 2178, 0, 891, 0, 0,
	872, 0, 0, 0, 0, 0, 891, 0, 0, 890,
	0, 0, 1540, 0, 0, 890, 0, 1540, 1540, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3389, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2079, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 758, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 872, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 758, 1544, 0, 0, 0, 0, 0,
	0, 0, 875, 1534, 1535, 1536, 2079, 0, 0, 0,
	0, 0, 1528, 1529, 1530, 1531, 1532, 1533, 0, 0,
	0, 872, 0, 827, 827, 0, 0, 872, 0, 0,
	0, 0, 0, 0, 2079, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 758, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 891, 0, 0, 0, 0,
	0, 0, 0, 890, 890, 891, 890, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1544, 0,
	0, 0, 0, 0, 0, 0, 0, 1534, 1535, 1536,
	891, 0, 0, 0, 3863, 0, 1528, 1529, 1530, 1531,
	1532, 1533, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1540, 0, 0,
	0, 0, 0, 0, 0, 0, 1540, 1540, 0, 0,
	0, 1540, 1540, 0, 890, 1540, 1540, 0, 0, 1540,
	0, 0, 0, 890, 0, 0, 1540, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2762, 0, 0, 0, 0, 872, 872, 0, 872, 0,
	0, 2078, 0, 0, 0, 0, 0, 0, 0, 1540,
	0, 0, 1540, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 891, 0, 0,
	0, 1540, 0, 0, 0, 0, 0, 0, 891, 891,
	0, 0, 891, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2762, 0, 0, 0, 0, 0, 0,
	0, 0, 2078, 1555, 0, 0, 1525, 0, 0, 0,
	1537, 1538, 1539, 0, 0, 891, 0, 0, 0, 0,
	0, 0, 2170, 0, 0, 2171, 872, 0, 0, 2176,
	2078, 2168, 0, 0, 0, 872, 2173, 2177, 2172, 0,
	2174, 0, 0, 0, 2175, 1548, 1549, 2169, 0, 0,
	0, 1540, 0, 0, 2178, 0, 3406, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1540, 0, 1544,
	0, 0, 890, 0, 0, 0, 0, 0, 1534, 1535,
	1536, 0, 890, 0, 0, 3434, 2912, 1528, 1529, 1530,
	1531, 1532, 1533, 0, 0, 1540, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 890, 0, 0,
	0, 0, 0, 0, 0, 891, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1540, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3001,
	3002, 0, 0, 1540, 0, 1540, 1540, 1540, 0, 0,
	0, 0, 0, 0, 0, 1540, 3389, 2762, 1540, 1540,
	1540, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 872, 3046, 0, 0, 0, 0,
	891, 0, 0, 0, 872, 0, 0, 3068, 891, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1540, 0, 0, 0, 0, 0, 0, 0, 0, 872,
	0, 3087, 0, 0, 890, 3389, 2762, 1540, 0, 0,
	0, 0, 0, 0, 0, 890, 890, 0, 0, 890,
	1555, 0, 0, 1525, 0, 0, 0, 1537, 1538, 1539,
	0, 0, 3401, 0, 0, 0, 0, 0, 0, 2170,
	0, 0, 2171, 0, 0, 0, 2176, 0, 2168, 0,
	0, 0, 890, 2173, 2177, 2172, 0, 2174, 0, 0,
	0, 2175, 1548, 1549, 2169, 0, 0, 1555, 0, 0,
	1525, 2178, 0, 0, 1537, 1538, 1539, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2170, 0, 0, 2171,
	0, 0, 0, 2176, 0, 2168, 0, 0, 0, 0,
	2173, 2177, 2172, 0, 2174, 0, 0, 0, 2175, 1548,
	1549, 2169, 0, 0, 0, 0, 0, 0, 2178, 0,
	0, 0, 0, 0, 0, 0, 872, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 872, 872, 0,
	0, 872, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 891, 0, 0, 0,
	0, 0, 890, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 872, 0, 0, 1555, 0, 0,
	1525, 1540, 3230, 0, 1537, 1538, 1539, 0, 0, 3366,
	0, 0, 0, 0, 0, 0, 2170, 3389, 0, 2171,
	0, 0, 0, 2176, 0, 2168, 0, 0, 0, 1540,
	2173, 2177, 2172, 0, 2174, 0, 0, 0, 2175, 1548,
	1549, 2169, 0, 0, 0, 0, 0, 0, 2178, 0,
	0, 0, 891, 0, 2762, 0, 0, 3389, 0, 0,
	891, 1540, 0, 0, 0, 0, 0, 890, 0, 0,
	0, 0, 0, 0, 0, 890, 3280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1544, 0,
	0, 0, 0, 1555, 0, 0, 1525, 1534, 1535, 1536,
	1537, 1538, 1539, 0, 872, 0, 1528, 1529, 1530, 1531,
	1532, 1533, 2170, 0, 0, 2171, 0, 0, 0, 2176,
	0, 2168, 0, 0, 0, 0, 2173, 2177, 2172, 0,
	2174, 1540, 0, 0, 2175, 1548, 1549, 2169, 0, 0,
	0, 0, 0, 0, 2178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1540, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1555,
	0, 1540, 1525, 0, 891, 0, 1537, 1538, 1539, 872,
	0, 0, 0, 0, 0, 0, 0, 872, 2170, 0,
	0, 2171, 0, 1540, 0, 2176, 1540, 2168, 0, 0,
	0, 0, 2173, 2177, 2172, 0, 2174, 0, 0, 0,
	2175, 1548, 1549, 2169, 0, 0, 0, 0, 891, 0,
	2178, 0, 0, 0, 0, 0, 1555, 0, 0, 1525,
	0, 0, 0, 1537, 1538, 1539, 0, 0, 3373, 0,
	0, 0, 0, 890, 0, 2170, 0, 0, 2171, 0,
	891, 891, 2176, 0, 2168, 0, 0, 0, 0, 2173,
	2177, 2172, 0, 2174, 0, 0, 0, 2175, 1548, 1549,
	2169, 0, 0, 0, 0, 0, 0, 2178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3503, 0, 3506, 3507, 0,
	0, 0, 3511, 0, 0, 1540, 0, 0, 0, 890,
	0, 0, 0, 0, 0, 0, 0, 890, 0, 0,
	0, 0, 0, 0, 0, 1544, 0, 0, 0, 0,
	0, 0, 0, 0, 1534, 1535, 1536, 0, 0, 3547,
	0, 0, 0, 1528, 1529, 1530, 1531, 1532, 1533, 0,
	0, 0, 0, 0, 0, 872, 0, 0, 0, 2762,
	2762, 0, 0, 2762, 0, 0, 0, 0, 0, 0,
	0, 0, 1544, 0, 0, 891, 3598, 3599, 0, 0,
	0, 1534, 1535, 1536, 0, 0, 0, 0, 0, 1540,
	1528, 1529, 1530, 1531, 1532, 1533, 0, 0, 1540, 0,
	0, 1555, 0, 0, 1525, 0, 0, 0, 1537, 1538,
	1539, 0, 0, 0, 2291, 891, 0, 0, 0, 0,
	2170, 0, 0, 2171, 0, 0, 0, 2176, 0, 2168,
	0, 872, 0, 0, 2173, 2177, 2172, 0, 2174, 872,
	0, 890, 2175, 1548, 1549, 2169, 0, 0, 0, 0,
	0, 0, 2178, 0, 0, 0, 3389, 3389, 0, 3389,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1544, 0, 0, 890, 0, 0, 0, 0,
	0, 1534, 1535, 1536, 0, 0, 0, 0, 0, 0,
	1528, 1529, 1530, 1531, 1532, 1533, 891, 0, 0, 0,
	1540, 0, 0, 0, 0, 0, 0, 890, 890, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1217, 1247, 0, 0, 0, 1218,
	0, 0, 0, 1227, 0, 0, 891, 891, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3749,
	0, 0, 0, 872, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3360, 1544, 0,
	0, 0, 0, 0, 0, 0, 0, 1534, 1535, 1536,
	0, 0, 0, 0, 0, 0, 1528, 1529, 1530, 1531,
	1532, 1533, 1249, 0, 0, 1220, 0, 872, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2502,
	0, 0, 0, 0, 197, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1226, 0, 0, 0, 0, 872,
	872, 0, 200, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 890, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1544, 1231, 0, 0, 0, 0,
	0, 0, 0, 1534, 1535, 1536, 1476, 0, 2809, 0,
	0, 0, 1528, 1529, 1530, 1531, 1532, 1533, 0, 0,
	0, 0, 890, 0, 0, 0, 891, 0, 3833, 0,
	3834, 0, 0, 0, 0, 3839, 0, 0, 1216, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1544, 0, 0, 0, 1248, 0, 0, 0, 0,
	1534, 1535, 1536, 0, 0, 1221, 186, 2694, 0, 1528,
	1529, 1530, 1531, 1532, 1533, 0, 0, 0, 0, 0,
	0, 206, 0, 0, 0, 0, 2498, 0, 168, 0,
	0, 0, 0, 154, 0, 0, 0, 166, 0, 0,
	1223, 0, 0, 0, 872, 0, 1222, 0, 0, 0,
	0, 158, 202, 890, 0, 0, 0, 891, 0, 891,
	891, 0, 0, 203, 0, 0, 0, 0, 0, 180,
	0, 0, 0, 0, 2508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 872, 0, 0, 1250, 2500, 0,
	0, 1224, 0, 890, 890, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 0, 0, 0, 0,
	0, 201, 0, 2501, 0, 0, 0, 1251, 0, 0,
	1252, 0, 0, 0, 1253, 0, 0, 0, 0, 0,
	891, 0, 0, 0, 2512, 0, 1246, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1254, 1228, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1217, 1247, 0, 0, 160, 1218, 0, 0, 0,
	1227, 0, 0, 0, 0, 872, 1544, 0, 0, 0,
	3079, 0, 1230, 1229, 1257, 1534, 1535, 1536, 0, 0,
	0, 161, 0, 0, 1528, 1529, 1530, 1531, 1532, 1533,
	0, 1255, 162, 0, 0, 0, 0, 0, 0, 0,
	0, 187, 2503, 163, 210, 872, 872, 0, 1256, 0,
	0, 0, 0, 0, 0, 0, 0, 164, 4037, 1249,
	0, 0, 1220, 2509, 178, 0, 2504, 0, 0, 0,
	0, 211, 185, 890, 0, 0, 198, 0, 0, 212,
	159, 0, 165, 0, 0, 1258, 0, 4060, 0, 1219,
	0, 1226, 0, 0, 0, 204, 0, 0, 0, 0,
	2510, 0, 0, 155, 0, 0, 2511, 0, 0, 0,
	0, 205, 0, 0, 0, 2505, 0, 0, 0, 1233,
	0, 2506, 1231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 0, 0,
	0, 0, 0, 2275, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 890, 1216, 890, 890, 0, 2499,
	0, 169, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 170, 1248, 171, 0, 0, 0, 0, 0, 0,
	0, 0, 1221, 0, 0, 872, 0, 0, 0, 0,
	0, 0, 179, 0, 0, 172, 0, 0, 176, 0,
	173, 0, 0, 0, 0, 156, 0, 0, 174, 0,
	0, 0, 0, 0, 0, 0, 0, 1223, 0, 0,
	0, 0, 0, 1222, 182, 0, 0, 890, 0, 175,
	0, 0, 891, 0, 0, 181, 0, 0, 0, 0,
	183, 0, 0, 0, 0, 0, 177, 0, 0, 0,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1250, 0, 157, 0, 1224, 0,
	0, 0, 0, 0, 0, 0, 872, 0, 872, 872,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1251, 0, 0, 1252, 0, 0,
	0, 1253, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1246, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1254, 1228, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 872,
	0, 4280, 4281, 4282, 4283, 0, 0, 1243, 0, 1230,
	1229, 1257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1256, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 891, 1258, 0, 0, 0, 1219, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1233, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 890,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4424, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 872, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 890, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	872, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 4683, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4732, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 4920, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2076, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 4966, 2081, 244, 2087, 261, 763, 2097,
	310, 347, 562, 2084, 2129, 407, 2134, 460, 464, 2158,
	553, 2091, 2094, 2104, 2107, 318, 2112, 768, 2120, 774,
	2130, 780, 2149, 529, 2155, 770, 771, 776, 249, 637,
	552, 623, 2143, 2089, 2147, 414, 2140, 2116, 2156, 2133,
	2145, 2126, 2131, 257, 2118, 2119, 2123, 2132, 772, 769,
	773, 779, 767, 777, 764, 775, 2153, 451, 385, 602,
	478, 256, 302, 289, 331, 373, 485, 2088, 2106, 363,
	533, 298, 387, 2139, 277, 420, 2152, 509, 384, 2146,
	492, 512, 2108, 404, 283, 443, 499, 500, 761, 766,
	2096, 782, 2083, 287, 288, 409, 269, 417, 614, 580,
	472, 430, 428, 2114, 395, 452, 609, 2086, 0, 317,
	0, 312, 408, 548, 275, 527, 446, 413, 367, 475,
	504, 314, 299, 300, 343, 445, 333, 285, 538, 577,
	581, 579, 575, 572, 576, 573, 574, 578, 334, 571,
	0, 546, 555, 589, 569, 597, 554, 594, 564, 309,
	593, 558, 557, 603, 584, 585, 539, 599, 570, 568,
	561, 560, 556, 2154, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 245, 2082, 246, 247, 248, 250,
	251, 252, 760, 253, 254, 255, 258, 259, 260, 262,
	622, 263, 264, 265, 266, 267, 268, 559, 762, 270,
	271, 272, 273, 274, 276, 278, 279, 280, 281, 282,
	284, 286, 2098, 2099, 2100, 765, 2101, 2102, 2103, 290,
	291, 292, 293, 294, 295, 2105, 296, 297, 301, 303,
	304, 305, 306, 307, 308, 311, 2109, 313, 315, 2110,
	316, 319, 2111, 320, 321, 322, 323, 324, 325, 326,
	327, 563, 328, 2113, 329, 330, 332, 2115, 335, 336,
	337, 338, 339, 2117, 340, 565, 566, 341, 342, 344,
	345, 346, 348, 349, 350, 351, 352, 353, 354, 355,
	356, 357, 358, 359, 2121, 360, 361, 362, 364, 2122,
	365, 366, 369, 370, 371, 372, 2124, 374, 582, 2125,
	375, 376, 377, 2127, 2128, 378, 379, 380, 381, 382,
	383, 386, 583, 388, 389, 390, 391, 392, 393, 394,
	624, 396, 397, 398, 399, 400, 401, 402, 586, 587,
	403, 405, 406, 588, 590, 591, 778, 421, 422, 423,
	424, 425, 426, 427, 429, 2136, 431, 432, 433, 592,
	434, 435, 436, 437, 2137, 438, 439, 440, 441, 442,
	444, 447, 448, 449, 450, 2138, 453, 454, 455, 456,
	457, 458, 459, 461, 462, 463, 465, 466, 467, 625,
	468, 469, 470, 471, 595, 473, 474, 626, 476, 477,
	479, 480, 481, 482, 483, 484, 635, 2141, 486, 596,
	487, 488, 489, 490, 491, 2142, 493, 494, 495, 496,
	497, 498, 501, 502, 503, 505, 506, 598, 507, 508,
	2144, 510, 511, 781, 513, 514, 515, 516, 517, 2148,
	636, 518, 600, 519, 601, 520, 521, 522, 523, 524,
	525, 526, 528, 2150, 2151, 530, 531, 532, 534, 535,
	536, 537, 540, 541, 542, 543, 544, 2157, 545, 547,
	549, 627, 604, 605, 606, 607, 608, 610, 611, 612,
	613, 550, 551, 567, 418, 412, 368, 410, 411, 415,
	416, 419, 2135, 2085, 2090, 2092, 2093, 2095, 0, 0,
	0, 0, 0, 0, 0, 0, 1558, 0, 0, 0,
	0, 0, 0, 1555, 0, 0, 1525, 0, 0, 2074,
	1537, 1538, 1539, 1569, 1571, 1553, 1598, 1619, 0, 1670,
	1716, 1686, 1541, 1803, 1809, 1542, 1870, 1874, 0, 1550,
	1600, 1526, 1650, 1665, 1680, 1692, 1545, 1551, 1543, 1807,
	1546, 1951, 1962, 1982, 1547, 1548, 1549, 1527, 1943, 2000,
	1769, 1928, 1580, 0, 1556, 1894, 0, 0, 1817, 1932,
	0, 0, 1594, 0, 0, 0, 0, 1742, 1731, 1765,
	1878, 1703, 1823, 1631, 1790, 1968, 1860, 1779, 1974, 1892,
	1593, 1659, 1643, 1695, 1760, 1901, 1576, 1660, 1735, 1966,
	1655, 1781, 0, 1622, 1825, 1967, 1930, 1778, 1941, 1911,
	1936, 1666, 1804, 1629, 1851, 1918, 1919, 1589, 1702, 1624,
	1977, 1574, 1634, 1642, 1812, 1613, 1820, 1998, 1752, 1885,
	1835, 1833, 0, 1792, 1861, 1993, 0, 0, 1679, 0,
	1673, 1811, 1985, 1620, 1959, 1854, 1816, 1754, 1888, 1923,
	1675, 1656, 1657, 1713, 1853, 1698, 1632, 1973, 1749, 1753,
	1751, 1747, 1744, 1748, 1745, 1746, 1750, 1700, 1743, 0,
	0, 1590, 1810, 1738, 1908, 1588, 1857, 1696, 1669, 0,
	0, 0, 1975, 1789, 1791, 0, 1944, 1739, 1737, 1648,
	1647, 1591, 1976, 1560, 1561, 1562, 1563, 1564, 1565, 1566,
	1567, 1568, 1570, 1572, 1573, 1577, 1578, 1579, 1581, 1582,
	1583, 1584, 1585, 1586, 1587, 1595, 1596, 1597, 1599, 1602,
	1603, 1604, 1606, 1607, 1608, 1609, 1610, 1611, 1614, 1615,
	1616, 1617, 1618, 1621, 1623, 1625, 1626, 1627, 1628, 1630,
	1633, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1644, 1645,
	0, 1646, 1649, 1651, 1652, 1653, 1654, 1658, 1661, 1662,
	1663, 1664, 1667, 1668, 1671, 1672, 1674, 1676, 1677, 1678,
	1681, 0, 1682, 1683, 1684, 1685, 1687, 1688, 1689, 1690,
	1691, 1693, 0, 0, 1694, 1697, 1699, 1701, 1704, 1705,
	1706, 1707, 0, 1708, 1709, 1710, 1711, 1712, 1714, 0,
	1715, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725,
	1726, 1727, 1728, 1729, 1730, 1733, 1734, 1736, 0, 1740,
	1741, 1756, 1757, 1758, 1759, 1761, 1763, 1764, 1762, 1766,
	1767, 1768, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777,
	1780, 1782, 1783, 0, 1784, 1785, 0, 1786, 1787, 1788,
	1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802,
	1805, 1806, 1808, 1822, 1824, 0, 1826, 1827, 1828, 1829,
	1830, 1831, 1832, 1834, 1836, 1837, 1838, 1839, 1840, 1841,
	1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1852,
	1855, 1856, 1858, 1859, 1862, 1863, 1864, 1865, 1866, 1867,
	1868, 1869, 1871, 1872, 1873, 1875, 1876, 1877, 1879, 1880,
	1881, 1882, 1883, 1884, 1886, 1887, 1889, 1890, 1891, 0,
	1893, 1895, 1896, 1897, 1898, 1899, 1900, 1903, 1902, 1904,
	1905, 1906, 1907, 1909, 1910, 1912, 1913, 1914, 1915, 1916,
	1917, 1920, 1921, 1922, 1924, 1925, 1926, 1927, 1929, 1931,
	1933, 1935, 1934, 1937, 1938, 1939, 1940, 1942, 1945, 1946,
	1947, 1948, 1949, 1950, 1952, 1953, 1954, 1955, 1956, 1957,
	1958, 1960, 0, 1961, 1963, 1964, 1965, 1969, 1970, 1971,
	1972, 1978, 1979, 1980, 1981, 1983, 0, 0, 1984, 1986,
	1987, 1988, 1989, 1990, 1991, 1992, 1994, 1995, 1996, 1997,
	0, 1999, 1732, 1821, 1815, 1755, 1813, 1814, 1818, 1819,
	0, 0, 1575, 1592, 1601, 1605, 1612, 0, 1544, 0,
	0, 0, 0, 0, 0, 0, 0, 1534, 1535, 1536,
	0, 0, 0, 0, 0, 0, 1528, 1529, 1530, 1531,
	1532, 1533, 2076, 0, 5394, 935, 0, 0, 0, 0,
	1037, 0, 0, 0, 0, 0, 0, 0, 0, 2081,
	244, 2087, 261, 763, 2097, 310, 347, 562, 2084, 2129,
	407, 2134, 460, 464, 2158, 553, 2091, 2094, 2104, 2107,
	318, 2112, 768, 2120, 774, 2130, 780, 2149, 529, 2155,
	770, 771, 776, 249, 637, 552, 623, 2143, 2089, 2147,
	414, 2140, 2116, 2156, 2133, 2145, 2126, 2131, 257, 2118,
	2119, 2123, 2132, 772, 769, 773, 779, 767, 777, 764,
	775, 2153, 451, 385, 602, 478, 256, 302, 289, 331,
	373, 485, 2088, 2106, 363, 533, 298, 387, 2139, 277,
	420, 2152, 509, 384, 2146, 492, 512, 2108, 404, 283,
	443, 499, 500, 761, 766, 2096, 782, 2083, 287, 288,
	409, 269, 417, 614, 580, 472, 430, 428, 2114, 395,
	452, 609, 2086, 0, 317, 0, 312, 408, 548, 275,
	527, 446, 413, 367, 475, 504, 314, 299, 300, 343,
	445, 333, 285, 538, 577, 581, 579, 575, 572, 576,
	573, 574, 578, 334, 571, 0, 546, 555, 589, 569,
	597, 554, 594, 564, 309, 593, 558, 557, 603, 584,
	585, 539, 599, 570, 568, 561, 560, 556, 2154, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 245,
	2082, 246, 247, 248, 250, 251, 252, 760, 253, 254,
	255, 258, 259, 260, 262, 622, 263, 264, 265, 266,
	267, 268, 559, 762, 270, 271, 272, 273, 274, 276,
	278, 279, 280, 281, 282, 284, 286, 2098, 2099, 2100,
	765, 2101, 2102, 2103, 290, 291, 292, 293, 294, 295,
	2105, 296, 297, 301, 303, 304, 305, 306, 307, 308,
	311, 2109, 313, 315, 2110, 316, 319, 2111, 320, 321,
	322, 323, 324, 325, 326, 327, 563, 328, 2113, 329,
	330, 332, 2115, 335, 336, 337, 338, 339, 2117, 340,
	565, 566, 341, 342, 344, 345, 346, 348, 349, 350,
	351, 352, 353, 354, 355, 356, 357, 358, 359, 2121,
	360, 361, 362, 364, 2122, 365, 366, 369, 370, 371,
	372, 2124, 374, 582, 2125, 375, 376, 377, 2127, 2128,
	378, 379, 380, 381, 382, 383, 386, 583, 388, 389,
	390, 391, 392, 393, 394, 624, 396, 397, 398, 399,
	400, 401, 402, 586, 587, 403, 405, 406, 588, 590,
	591, 778, 421, 422, 423, 424, 425, 426, 427, 429,
	2136, 431, 432, 433, 592, 434, 435, 436, 437, 2137,
	438, 439, 440, 441, 442, 444, 447, 448, 449, 450,
	2138, 453, 454, 455, 456, 457, 458, 459, 461, 462,
	463, 465, 466, 467, 625, 468, 469, 470, 471, 595,
	473, 474, 626, 476, 477, 479, 480, 481, 482, 483,
	484, 635, 2141, 486, 596, 487, 488, 489, 490, 491,
	2142, 493, 494, 495, 496, 497, 498, 501, 502, 503,
	505, 506, 598, 507, 508, 2144, 510, 511, 781, 513,
	514, 515, 516, 517, 2148, 636, 518, 600, 519, 601,
	520, 521, 522, 523, 524, 525, 526, 528, 2150, 2151,
	530, 531, 532, 534, 535, 536, 537, 540, 541, 542,
	543, 544, 2157, 545, 547, 549, 627, 604, 605, 606,
	607, 608, 610, 611, 612, 613, 550, 551, 567, 418,
	412, 368, 410, 411, 415, 416, 419, 2135, 2085, 2090,
	2092, 2093, 2095, 2076, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2081, 244, 2087, 261, 763, 2097, 310, 347, 562, 2084,
	2129, 407, 2134, 460, 464, 2158, 553, 2091, 2094, 2104,
	2107, 318, 2112, 768, 2120, 774, 2130, 780, 2149, 529,
	2155, 770, 771, 776, 249, 637, 552, 623, 2143, 2089,
	2147, 414, 2140, 2116, 2156, 2133, 2145, 2126, 2131, 257,
	2118, 2119, 2123, 2132, 772, 769, 773, 779, 767, 777,
	764, 775, 2153, 451, 385, 602, 478, 256, 302, 289,
	331, 373, 485, 2088, 2106, 363, 533, 298, 387, 2139,
	277, 420, 2152, 509, 384, 2146, 492, 512, 2108, 404,
	283, 443, 499, 500, 761, 766, 2096, 782, 2083, 287,
	288, 409, 269, 417, 614, 580, 472, 430, 428, 2114,
	395, 452, 609, 2086, 0, 317, 0, 312, 408, 548,
	275, 527, 446, 413, 367, 475, 504, 314, 299, 300,
	343, 445, 333, 285, 538, 577, 581, 579, 575, 572,
	576, 573, 574, 578, 334, 571, 0, 546, 555, 589,
	569, 597, 554, 594, 564, 309, 593, 558, 557, 603,
	584, 585, 539, 599, 570, 568, 561, 560, 556, 2154,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	245, 2082, 246, 247, 248, 250, 251, 252, 760, 253,
	254, 255, 258, 259, 260, 262, 622, 263, 264, 265,
	266, 267, 268, 559, 762, 270, 271, 272, 273, 274,
	276, 278, 279, 280, 281, 282, 284, 286, 2098, 2099,
	2100, 765, 2101, 2102, 2103, 290, 291, 292, 293, 294,
	295, 2105, 296, 297, 301, 303, 304, 305, 306, 307,
	308, 311, 2109, 313, 315, 2110, 316, 319, 2111, 320,
	321, 322, 323, 324, 325, 326, 327, 563, 328, 2113,
	329, 330, 332, 2115, 335, 336, 337, 338, 339, 2117,
	340, 565, 566, 341, 342, 344, 345, 346, 348, 349,
	350, 351, 352, 353, 354, 355, 356, 357, 358, 359,
	2121, 360, 361, 362, 364, 2122, 365, 366, 369, 370,
	371, 372, 2124, 374, 582, 2125, 375, 376, 377, 2127,
	2128, 378, 379, 380, 381, 382, 383, 386, 583, 388,
	389, 390, 391, 392, 393, 394, 624, 396, 397, 398,
	399, 400, 401, 402, 586, 587, 403, 405, 406, 588,
	590, 591, 778, 421, 422, 423, 424, 425, 426, 427,
	429, 2136, 431, 432, 433, 592, 434, 435, 436, 437,
	2137, 438, 439, 440, 441, 442, 444, 447, 448, 449,
	450, 2138, 453, 454, 455, 456, 457, 458, 459, 461,
	462, 463, 465, 466, 467, 625, 468, 469, 470, 471,
	595, 473, 474, 626, 476, 477, 479, 480, 481, 482,
	483, 484, 635, 2141, 486, 596, 487, 488, 489, 490,
	491, 2142, 493, 494, 495, 496, 497, 498, 501, 502,
	503, 505, 506, 598, 507, 508, 2144, 510, 511, 781,
	513, 514, 515, 516, 517, 2148, 636, 518, 600, 519,
	601, 520, 521, 522, 523, 524, 525, 526, 528, 2150,
	2151, 530, 531, 532, 534, 535, 536, 537, 540, 541,
	542, 543, 544, 2157, 545, 547, 549, 627, 604, 605,
	606, 607, 608, 610, 611, 612, 613, 550, 551, 567,
	418, 412, 368, 410, 411, 415, 416, 419, 2135, 2085,
	2090, 2092, 2093, 2095, 2076, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2081, 244, 2087, 261, 763, 2097, 3060, 347, 562,
	2084, 2129, 407, 2134, 460, 464, 2158, 553, 2091, 2094,
	2104, 2107, 318, 2112, 768, 2120, 774, 2130, 780, 2149,
	529, 2155, 770, 771, 776, 249, 637, 552, 623, 2143,
	2089, 2147, 414, 2140, 2116, 2156, 2133, 2145, 2126, 2131,
	257, 2118, 2119, 2123, 2132, 772, 769, 773, 779, 767,
	777, 764, 775, 2153, 451, 385, 602, 478, 256, 302,
	289, 331, 373, 3058, 2088, 2106, 363, 533, 298, 387,
	2139, 277, 420, 2152, 509, 384, 2146, 492, 512, 2108,
	404, 283, 443, 499, 500, 761, 766, 2096, 782, 2083,
	287, 288, 409, 269, 417, 614, 580, 472, 430, 428,
	2114, 395, 452, 609, 2086, 0, 317, 0, 312, 408,
	548, 275, 527, 446, 413, 367, 475, 504, 314, 299,
	300, 343, 445, 333, 285, 538, 577, 581, 579, 575,
	572, 576, 573, 574, 578, 334, 571, 0, 546, 555,
	589, 569, 597, 554, 594, 564, 309, 593, 558, 557,
	603, 584, 585, 539, 599, 570, 568, 561, 560, 556,
	2154, 234, 235, 236, 237, 238, 3059, 240, 241, 242,
	243, 245, 2082, 246, 247, 248, 250, 251, 252, 760,
	253, 254, 255, 258, 259, 260, 262, 622, 263, 264,
	265, 266, 267, 268, 559, 762, 270, 271, 272, 273,
	274, 276, 278, 279, 280, 281, 282, 284, 286, 2098,
	2099, 2100, 765, 2101, 2102, 2103, 290, 291, 292, 293,
	294, 295, 2105, 296, 297, 301, 303, 304, 305, 306,
	307, 308, 311, 2109, 313, 315, 2110, 316, 319, 2111,
	320, 321, 322, 323, 324, 325, 326, 327, 563, 328,
	2113, 329, 330, 332, 2115, 335, 336, 337, 338, 339,
	2117, 340, 565, 566, 341, 342, 344, 345, 346, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 358,
	359, 2121, 360, 361, 362, 364, 2122, 365, 366, 369,
	370, 371, 372, 2124, 374, 582, 2125, 375, 376, 377,
	2127, 2128, 378, 379, 380, 381, 382, 383, 386, 583,
	388, 389, 390, 391, 392, 393, 394, 624, 396, 397,
	398, 399, 400, 401, 402, 586, 587, 403, 405, 406,
	588, 590, 591, 778, 421, 422, 423, 424, 425, 426,
	427, 429, 2136, 431, 432, 433, 592, 434, 435, 436,
	437, 2137, 438, 439, 440, 441, 442, 444, 447, 448,
	449, 450, 2138, 453, 454, 455, 456, 457, 458, 459,
	461, 462, 463, 465, 466, 467, 625, 468, 469, 470,
	471, 595, 473, 474, 626, 476, 477, 479, 480, 481,
	482, 483, 484, 635, 2141, 486, 596, 487, 488, 489,
	490, 491, 2142, 493, 494, 495, 496, 497, 498, 501,
	502, 503, 505, 506, 598, 507, 508, 2144, 510, 511,
	781, 513, 514, 515, 516, 517, 2148, 636, 518, 600,
	519, 601, 520, 521, 522, 523, 524, 525, 526, 528,
	2150, 2151, 530, 531, 532, 534, 535, 536, 537, 540,
	541, 542, 543, 544, 2157, 545, 547, 549, 627, 604,
	605, 606, 607, 608, 610, 611, 612, 613, 550, 551,
	567, 418, 412, 368, 410, 411, 415, 416, 419, 2135,
	2085, 2090, 2092, 2093, 2095, 894, 0, 1435, 935, 0,
	0, 0, 725, 1037, 0, 0, 0, 0, 0, 736,
	737, 738, 2081, 244, 2087, 261, 763, 2097, 310, 347,
	0, 2084, 2129, 407, 2134, 460, 464, 2158, 0, 2091,
	2094, 2104, 2107, 318, 2112, 768, 2120, 774, 2130, 780,
	2149, 529, 2155, 770, 771, 776, 249, 893, 552, 623,
	2143, 2089, 2147, 3573, 2140, 2116, 2156, 2133, 2145, 2126,
	2131, 257, 2118, 2119, 2123, 2132, 772, 769, 773, 779,
	767, 777, 764, 775, 2153, 451, 385, 0, 478, 256,
	302, 289, 331, 373, 485, 2088, 2106, 363, 533, 298,
	387, 2139, 277, 420, 2152, 509, 384, 2146, 492, 512,
	2108, 404, 283, 443, 499, 500, 761, 766, 2096, 782,
	2083, 287, 288, 409, 269, 417, 0, 0, 472, 430,
	428, 2114, 395, 452, 0, 2086, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 334, 0, 0, 546,
	896, 886, 878, 879, 880, 881, 882, 883, 0, 898,
	899, 900, 901, 902, 539, 892, 0, 877, 884, 885,
	887, 2154, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 2082, 246, 247, 248, 250, 251, 252,
	760, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 0, 762, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	2098, 2099, 2100, 765, 2101, 2102, 2103, 290, 291, 292,
	293, 294, 295, 2105, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 2109, 313, 315, 2110, 316, 319,
	2111, 320, 321, 322, 323, 324, 325, 326, 327, 0,
	328, 2113, 329, 330, 332, 2115, 335, 336, 337, 338,
	339, 2117, 340, 0, 0, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 2121, 360, 361, 362, 364, 2122, 365, 366,
	369, 370, 371, 372, 2124, 374, 0, 2125, 375, 376,
	377, 2127, 2128, 378, 379, 380, 381, 382, 383, 386,
	0, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 3572, 0, 403, 405,
	406, 0, 0, 0, 778, 421, 422, 423, 424, 425,
	426, 427, 429, 2136, 431, 432, 433, 0, 434, 435,
	436, 437, 2137, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 2138, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 0, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 2141, 486, 2394, 487, 488,
	489, 490, 491, 2142, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 0, 507, 508, 2144, 510,
	511, 781, 513, 514, 515, 516, 517, 2148, 636, 518,
	0, 519, 0, 520, 521, 522, 523, 524, 525, 526,
	528, 2150, 2151, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 2157, 545, 547, 549, 627,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 550,
	551, 0, 418, 412, 368, 410, 411, 415, 416, 419,
	2135, 2085, 2090, 2092, 2093, 2095, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 733, 734, 735, 0,
	0, 0, 0, 0, 0, 3574, 3575, 729, 730, 731,
	732, 894, 0, 1435, 935, 0, 0, 0, 725, 1037,
	0, 0, 0, 0, 0, 736, 737, 738, 2081, 244,
	2087, 261, 763, 2097, 310, 347, 0, 2084, 2129, 407,
	2134, 460, 464, 2158, 0, 2091, 2094, 2104, 2107, 318,
	2112, 768, 2120, 774, 2130, 780, 2149, 529, 2155, 770,
	771, 776, 249, 893, 552, 623, 2143, 2089, 2147, 3573,
	2140, 2116, 2156, 2133, 2145, 2126, 2131, 257, 2118, 2119,
	2123, 2132, 772, 769, 773, 779, 767, 777, 764, 775,
	2153, 451, 385, 0, 478, 256, 302, 289, 331, 373,
	485, 2088, 2106, 363, 533, 298, 387, 2139, 277, 420,
	2152, 509, 384, 2146, 492, 512, 2108, 404, 283, 443,
	499, 500, 761, 766, 2096, 782, 2083, 287, 288, 409,
	269, 417, 0, 0, 472, 430, 428, 2114, 395, 452,
	0, 2086, 0, 317, 0, 312, 408, 548, 275, 527,
	446, 413, 367, 475, 504, 314, 299, 300, 343, 445,
	333, 285, 538, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 334, 0, 0, 546, 896, 886, 878, 879,
	880, 881, 882, 883, 0, 898, 899, 900, 901, 902,
	539, 892, 0, 877, 884, 885, 887, 2154, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 245, 2082,
	246, 247, 248, 250, 251, 252, 760, 253, 254, 255,
	258, 259, 260, 262, 622, 263, 264, 265, 266, 267,
	268, 0, 762, 270, 271, 272, 273, 274, 276, 278,
	279, 280, 281, 282, 284, 286, 2098, 2099, 2100, 765,
	2101, 2102, 2103, 290, 291, 292, 293, 294, 295, 2105,
	296, 297, 301, 303, 304, 305, 306, 307, 308, 311,
	2109, 313, 315, 2110, 316, 319, 2111, 320, 321, 322,
	323, 324, 325, 326, 327, 0, 328, 2113, 329, 330,
	332, 2115, 335, 336, 337, 338, 339, 2117, 340, 0,
	0, 341, 342, 344, 345, 346, 348, 349, 350, 351,
	352, 353, 354, 355, 356, 357, 358, 359, 2121, 360,
	361, 362, 364, 2122, 365, 366, 369, 370, 371, 372,
	2124, 374, 0, 2125, 375, 376, 377, 2127, 2128, 378,
	379, 380, 381, 382, 383, 386, 0, 388, 389, 390,
	391, 392, 393, 394, 624, 396, 397, 398, 399, 400,
	401, 402, 4234, 0, 403, 405, 406, 0, 0, 0,
	778, 421, 422, 423, 424, 425, 426, 427, 429, 2136,
	431, 432, 433, 0, 434, 435, 436, 437, 2137, 438,
	439, 440, 441, 442, 444, 447, 448, 449, 450, 2138,
	453, 454, 455, 456, 457, 458, 459, 461, 462, 463,
	465, 466, 467, 625, 468, 469, 470, 471, 0, 473,
	474, 626, 476, 477, 479, 480, 481, 482, 483, 484,
	635, 2141, 486, 2394, 487, 488, 489, 490, 491, 2142,
	493, 494, 495, 496, 497, 498, 501, 502, 503, 505,
	506, 0, 507, 508, 2144, 510, 511, 781, 513, 514,
	515, 516, 517, 2148, 636, 518, 0, 519, 0, 520,
	521, 522, 523, 524, 525, 526, 528, 2150, 2151, 530,
	531, 532, 534, 535, 536, 537, 540, 541, 542, 543,
	544, 2157, 545, 547, 549, 627, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 550, 551, 0, 418, 412,
	368, 410, 411, 415, 416, 419, 2135, 2085, 2090, 2092,
	2093, 2095, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 733, 734, 735, 0, 0, 0, 0, 0,
	0, 3574, 3575, 729, 730, 731, 732, 818, 0, 1023,
	935, 0, 1028, 1029, 1018, 1037, 1008, 0, 0, 0,
	0, 0, 0, 0, 2708, 244, 0, 261, 763, 0,
	310, 347, 1013, 0, 1001, 407, 0, 460, 464, 0,
	553, 1033, 0, 1005, 2709, 318, 1026, 768, 0, 774,
	1027, 780, 1025, 529, 0, 770, 771, 776, 249, 1103,
	552, 623, 0, 0, 0, 1019, 0, 0, 0, 0,
	0, 0, 0, 257, 0, 0, 0, 0, 772, 769,
	773, 779, 767, 777, 764, 775, 0, 451, 385, 602,
	478, 256, 302, 289, 331, 373, 485, 0, 0, 363,
	533, 298, 387, 0, 277, 420, 1056, 509, 384, 0,
	492, 512, 0, 404, 283, 443, 499, 500, 761, 766,
	0, 782, 0, 287, 288, 409, 269, 417, 614, 580,
	472, 430, 428, 0, 395, 452, 609, 1014, 0, 317,
	0, 312, 408, 548, 275, 527, 446, 413, 367, 475,
	504, 314, 299, 300, 343, 445, 333, 285, 538, 1084,
	1086, 1082, 1078, 1079, 1044, 1045, 1085, 1081, 334, 1080,
	0, 546, 1089, 1100, 1097, 1102, 1088, 1101, 1095, 883,
	593, 1092, 1091, 1105, 1098, 1099, 539, 1104, 1043, 1096,
	1094, 1093, 1090, 2707, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 245, 0, 246, 247, 248, 250,
	251, 252, 760, 253, 254, 255, 258, 259, 260, 262,
	622, 263, 264, 265, 266, 267, 268, 1068, 1046, 270,
	271, 272, 273, 274, 276, 278, 279, 280, 281, 282,
	284, 286, 1057, 1047, 1052, 1058, 1048, 1049, 1053, 290,
	291, 292, 293, 294, 295, 0, 296, 297, 301, 303,
	304, 305, 306, 307, 308, 311, 0, 313, 315, 0,
	316, 319, 0, 320, 321, 322, 323, 324, 325, 326,
	327, 1060, 328, 0, 329, 330, 332, 0, 335, 336,
	337, 338, 339, 0, 340, 1069, 1017, 341, 342, 344,
	345, 346, 348, 349, 350, 351, 352, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 362, 364, 0,
	365, 366, 369, 370, 371, 372, 0, 374, 1070, 0,
	375, 376, 377, 1050, 1051, 378, 379, 380, 381, 382,
	383, 386, 1083, 388, 389, 390, 391, 392, 393, 394,
	624, 396, 397, 398, 399, 400, 401, 402, 586, 1061,
	403, 405, 406, 1067, 590, 1062, 778, 421, 422, 423,
	424, 425, 426, 427, 429, 0, 431, 432, 433, 1063,
	434, 435, 436, 437, 0, 438, 439, 440, 441, 442,
	444, 447, 448, 449, 450, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 462, 463, 465, 466, 467, 625,
	468, 469, 470, 471, 1020, 473, 474, 626, 476, 477,
	479, 480, 481, 482, 483, 484, 635, 1054, 486, 596,
	487, 488, 489, 490, 491, 0, 493, 494, 495, 496,
	497, 498, 501, 502, 503, 505, 506, 1064, 507, 508,
	1055, 510, 511, 781, 513, 514, 515, 516, 517, 0,
	636, 518, 1065, 519, 1066, 520, 521, 522, 523, 524,
	525, 526, 528, 0, 1004, 530, 531, 532, 534, 535,
	536, 537, 540, 541, 542, 543, 544, 0, 545, 547,
	549, 627, 604, 1071, 1072, 1075, 1073, 1074, 1076, 1077,
	1087, 550, 551, 567, 418, 412, 368, 410, 411, 415,
	416, 419, 0, 0, 0, 1059, 0, 0, 0, 1002,
	0, 0, 818, 0, 1023, 935, 0, 1028, 1029, 1018,
	1037, 1008, 0, 0, 1009, 2705, 0, 998, 999, 2706,
	244, 0, 261, 763, 0, 310, 347, 1013, 0, 1001,
	407, 0, 460, 464, 106, 553, 1033, 0, 1005, 0,
	318, 1026, 768, 0, 774, 1027, 780, 1025, 529, 0,
	770, 771, 776, 249, 1103, 552, 623, 0, 0, 0,
	1019, 103, 0, 0, 0, 104, 0, 0, 257, 0,
	0, 0, 0, 772, 769, 773, 779, 767, 777, 764,
	775, 0, 451, 385, 2013, 478, 256, 302, 289, 331,
	373, 485, 0, 0, 363, 533, 298, 387, 0, 277,
	420, 1056, 509, 384, 0, 492, 512, 0, 404, 283,
	443, 499, 500, 761, 766, 0, 782, 0, 287, 288,
	409, 269, 417, 614, 580, 472, 430, 428, 0, 395,
	452, 609, 1014, 0, 317, 0, 312, 408, 548, 275,
	527, 446, 413, 367, 475, 504, 314, 299, 300, 343,
	445, 333, 285, 538, 1084, 1086, 1082, 1078, 1079, 1044,
	1045, 1085, 1081, 334, 1080, 0, 546, 1089, 1100, 1097,
	1102, 1088, 1101, 1095, 883, 593, 1092, 1091, 1105, 1098,
	1099, 539, 1104, 1043, 1096, 1094, 1093, 1090, 0, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 245,
	0, 246, 247, 248, 250, 251, 252, 760, 253, 254,
	255, 258, 259, 260, 262, 622, 263, 264, 265, 266,
	267, 268, 1068, 1046, 270, 271, 272, 273, 274, 276,
	278, 279, 280, 281, 282, 284, 286, 1057, 1047, 1052,
	1058, 1048, 1049, 1053, 290, 291, 292, 293, 294, 295,
	0, 296, 297, 301, 303, 304, 305, 306, 307, 308,
	311, 0, 313, 315, 0, 316, 319, 0, 320, 321,
	322, 323, 324, 325, 326, 327, 1060, 328, 0, 329,
	330, 332, 0, 335, 336, 337, 338, 339, 0, 340,
	1069, 1017, 341, 342, 344, 345, 346, 348, 349, 350,
	351, 352, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 362, 364, 0, 365, 366, 369, 370, 371,
	372, 0, 374, 1070, 0, 375, 376, 377, 1050, 1051,
	378, 379, 380, 381, 382, 383, 386, 1083, 388, 389,
	390, 391, 392, 393, 394, 624, 396, 397, 398, 399,
	400, 401, 402, 586, 1061, 403, 405, 406, 1067, 590,
	1062, 778, 421, 422, 423, 424, 425, 426, 427, 429,
	0, 431, 432, 433, 1063, 434, 435, 436, 437, 0,
	438, 439, 440, 441, 442, 444, 447, 448, 449, 450,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 462,
	463, 465, 466, 467, 625, 468, 469, 470, 471, 1020,
	473, 474, 626, 476, 477, 479, 480, 481, 482, 483,
	484, 635, 1054, 486, 596, 487, 488, 489, 490, 491,
	0, 493, 494, 495, 496, 497, 498, 501, 502, 503,
	505, 506, 1064, 507, 508, 1055, 510, 511, 781, 513,
	514, 515, 516, 517, 0, 636, 518, 1065, 519, 1066,
	520, 521, 522, 523, 524, 525, 526, 528, 0, 1004,
	530, 531, 532, 534, 535, 536, 537, 540, 541, 542,
	543, 544, 0, 545, 547, 549, 627, 604, 1071, 1072,
	1075, 1073, 1074, 1076, 1077, 1087, 550, 551, 567, 418,
	412, 368, 410, 411, 415, 416, 419, 0, 0, 0,
	1059, 0, 0, 0, 1002, 0, 107, 818, 0, 1023,
	935, 0, 1028, 1029, 1018, 1037, 1008, 0, 0, 1009,
	5001, 0, 998, 999, 0, 244, 0, 261, 763, 0,
	310, 347, 1013, 0, 1001, 407, 0, 460, 464, 106,
	553, 1033, 0, 1005, 0, 318, 1026, 768, 0, 774,
	1027, 780, 1025, 529, 0, 770, 771, 776, 249, 1103,
	552, 623, 0, 0, 0, 1019, 103, 0, 0, 0,
	104, 0, 0, 257, 0, 0, 0, 0, 772, 769,
	773, 779, 767, 777, 764, 775, 0, 451, 385, 2013,
	478, 256, 302, 289, 331, 373, 485, 0, 0, 363,
	533, 298, 387, 2792, 277, 420, 1056, 509, 384, 0,
	492, 512, 0, 404, 283, 443, 499, 500, 761, 766,
	0, 782, 0, 287, 288, 409, 269, 417, 614, 580,
	472, 430, 428, 0, 395, 452, 609, 1014, 0, 317,
	0, 312, 408, 548, 275, 527, 446, 413, 367, 475,
	504, 314, 299, 300, 343, 445, 333, 285, 538, 1084,
	1086, 1082, 1078, 1079, 1044, 1045, 1085, 1081, 334, 1080,
	0, 546, 1089, 1100, 1097, 1102, 1088, 1101, 1095, 883,
	593, 1092, 1091, 1105, 1098, 1099, 539, 1104, 1043, 1096,
	1094, 1093, 1090, 0, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 245, 0, 246, 247, 248, 250,
	251, 252, 760, 253, 254, 255, 258, 259, 260, 262,
	622, 263, 264, 265, 266, 267, 268, 1068, 1046, 270,
	271, 272, 273, 274, 276, 278, 279, 280, 281, 282,
	284, 286, 1057, 1047, 1052, 1058, 1048, 1049, 1053, 290,
	291, 292, 293, 294, 295, 0, 296, 297, 301, 303,
	304, 305, 306, 307, 308, 311, 0, 313, 315, 0,
	316, 319, 0, 320, 321, 322, 323, 324, 325, 326,
	327, 1060, 328, 0, 329, 330, 332, 0, 335, 336,
	337, 338, 339, 0, 340, 1069, 1017, 341, 342, 344,
	345, 346, 348, 349, 350, 351, 352, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 362, 364, 0,
	365, 366, 369, 370, 371, 372, 0, 374, 1070, 0,
	375, 376, 377, 1050, 1051, 378, 379, 380, 381, 382,
	383, 386, 1083, 388, 389, 390, 391, 392, 393, 394,
	624, 396, 397, 398, 399, 400, 401, 402, 586, 1061,
	403, 405, 406, 1067, 590, 1062, 778, 421, 422, 423,
	424, 425, 426, 427, 429, 0, 431, 432, 433, 1063,
	434, 435, 436, 437, 0, 438, 439, 440, 441, 442,
	444, 447, 448, 449, 450, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 462, 463, 465, 466, 467, 625,
	468, 469, 470, 471, 1020, 473, 474, 626, 476, 477,
	479, 480, 481, 482, 483, 484, 635, 1054, 486, 596,
	487, 488, 489, 490, 491, 0, 493, 494, 495, 496,
	497, 498, 501, 502, 503, 505, 506, 1064, 507, 508,
	1055, 510, 511, 781, 513, 514, 515, 516, 517, 0,
	636, 518, 1065, 519, 1066, 520, 521, 522, 523, 524,
	525, 526, 528, 0, 1004, 530, 531, 532, 534, 535,
	536, 537, 540, 541, 542, 543, 544, 0, 545, 547,
	549, 627, 604, 1071, 1072, 1075, 1073, 1074, 1076, 1077,
	1087, 550, 551, 567, 418, 412, 368, 410, 411, 415,
	416, 419, 0, 0, 0, 1059, 0, 0, 0, 1002,
	0, 107, 818, 0, 1023, 935, 0, 1028, 1029, 1018,
	1037, 1008, 0, 0, 1009, 0, 0, 998, 999, 0,
	244, 0, 261, 763, 0, 310, 347, 1013, 0, 1001,
	407, 0, 460, 464, 106, 553, 1033, 0, 1005, 0,
	318, 1026, 768, 0, 774, 1027, 780, 1025, 529, 0,
	770, 771, 776, 249, 1103, 552, 623, 0, 0, 0,
	1019, 103, 0, 0, 0, 104, 0, 0, 257, 0,
	0, 0, 0, 772, 769, 773, 779, 767, 777, 764,
	775, 0, 451, 385, 2013, 478, 256, 302, 289, 331,
	373, 485, 0, 0, 363, 533, 298, 387, 0, 277,
	420, 1056, 509, 384, 0, 492, 512, 0, 404, 283,
	443, 499, 500, 761, 766, 0, 782, 0, 287, 288,
	409, 269, 417, 614, 580, 472, 430, 428, 0, 395,
	452, 609, 1014, 0, 317, 0, 312, 408, 548, 275,
	527, 446, 413, 367, 475, 504, 314, 299, 300, 343,
	445, 333, 285, 538, 1084, 1086, 1082, 1078, 1079, 1044,
	1045, 1085, 1081, 334, 1080, 0, 546, 1089, 1100, 1097,
	1102, 1088, 1101, 1095, 883, 593, 1092, 1091, 1105, 1098,
	1099, 539, 1104, 1043, 1096, 1094, 1093, 1090, 0, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 245,
	0, 246, 247, 248, 250, 251, 252, 760, 253, 254,
	255, 258, 259, 260, 262, 622, 263, 264, 265, 266,
	267, 268, 1068, 1046, 270, 271, 272, 273, 274, 276,
	278, 279, 280, 281, 282, 284, 286, 1057, 1047, 1052,
	1058, 1048, 1049, 1053, 290, 291, 292, 293, 294, 295,
	0, 296, 297, 301, 303, 304, 305, 306, 307, 308,
	311, 0, 313, 315, 0, 316, 319, 0, 320, 321,
	322, 323, 324, 325, 326, 327, 1060, 328, 0, 329,
	330, 332, 0, 335, 336, 337, 338, 339, 0, 340,
	1069, 1017, 341, 342, 344, 345, 346, 348, 349, 350,
	351, 352, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 362, 364, 0, 365, 366, 369, 370, 371,
	372, 0, 374, 1070, 0, 375, 376, 377, 1050, 1051,
	378, 379, 380, 381, 382, 383, 386, 1083, 388, 389,
	390, 391, 392, 393, 394, 624, 396, 397, 398, 399,
	400, 401, 402, 586, 1061, 403, 405, 406, 1067, 590,
	1062, 778, 421, 422, 423, 424, 425, 426, 427, 429,
	0, 431, 432, 433, 1063, 434, 435, 436, 437, 0,
	438, 439, 440, 441, 442, 444, 447, 448, 449, 450,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 462,
	463, 465, 466, 467, 625, 468, 469, 470, 471, 1020,
	473, 474, 626, 476, 477, 479, 480, 481, 482, 483,
	484, 635, 1054, 486, 596, 487, 488, 489, 490, 491,
	0, 493, 494, 495, 496, 497, 498, 501, 502, 503,
	505, 506, 1064, 507, 508, 1055, 510, 511, 781, 513,
	514, 515, 516, 517, 0, 636, 518, 1065, 519, 1066,
	520, 521, 522, 523, 524, 525, 526, 528, 0, 1004,
	530, 531, 532, 534, 535, 536, 537, 540, 541, 542,
	543, 544, 0, 545, 547, 549, 627, 604, 1071, 1072,
	1075, 1073, 1074, 1076, 1077, 1087, 550, 551, 567, 418,
	412, 368, 410, 411, 415, 416, 419, 0, 0, 0,
	1059, 0, 0, 0, 1002, 0, 107, 818, 0, 1023,
	935, 0, 1028, 1029, 1018, 1037, 1008, 0, 0, 1009,
	0, 0, 998, 999, 0, 244, 0, 261, 763, 0,
	310, 347, 1013, 0, 1001, 407, 0, 460, 464, 0,
	553, 1033, 0, 1005, 0, 318, 1026, 768, 0, 774,
	1027, 780, 1025, 529, 0, 770, 771, 776, 249, 1103,
	552, 623, 0, 0, 0, 1019, 0, 2773, 0, 0,
	0, 0, 0, 257, 0, 0, 0, 0, 772, 769,
	773, 779, 767, 777, 764, 775, 0, 451, 385, 602,
	478, 256, 302, 289, 331, 373, 485, 0, 0, 363,
	533, 298, 387, 0, 277, 420, 1056, 509, 384, 0,
	492, 512, 0, 404, 283, 443, 499, 500, 761, 766,
	0, 782, 0, 287, 288, 409, 269, 417, 614, 580,
	472, 430, 428, 0, 395, 452, 609, 1014, 0, 317,
	0, 312, 408, 548, 275, 527, 446, 413, 367, 475,
	504, 314, 299, 300, 343, 445, 333, 285, 538, 1084,
	1086, 1082, 1078, 1079, 1044, 1045, 1085, 1081, 334, 1080,
	0, 546, 1089, 1100, 1097, 1102, 1088, 1101, 1095, 883,
	593, 1092, 1091, 1105, 1098, 1099, 539, 1104, 1043, 1096,
	1094, 1093, 1090, 0, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 245, 0, 246, 247, 248, 250,
	251, 252, 760, 253, 254, 255, 258, 259, 260, 262,
	622, 263, 264, 265, 266, 267, 268, 1068, 1046, 270,
	271, 272, 273, 274, 276, 278, 279, 280, 281, 282,
	284, 286, 1057, 1047, 1052, 1058, 1048, 1049, 1053, 290,
	291, 292, 293, 294, 295, 0, 296, 297, 301, 303,
	304, 305, 306, 307, 308, 311, 0, 313, 315, 0,
	316, 319, 0, 320, 321, 322, 323, 324, 325, 326,
	327, 1060, 328, 0, 329, 330, 332, 0, 335, 336,
	337, 338, 339, 0, 340, 1069, 1017, 341, 342, 344,
	345, 346, 348, 349, 350, 351, 352, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 362, 364, 0,
	365, 366, 369, 370, 371, 372, 0, 374, 1070, 2769,
	375, 376, 377, 1050, 1051, 378, 379, 380, 381, 382,
	383, 386, 1083, 388, 389, 390, 391, 392, 393, 394,
	624, 396, 397, 398, 399, 400, 401, 402, 586, 1061,
	403, 405, 406, 1067, 590, 1062, 778, 421, 422, 423,
	424, 425, 426, 427, 429, 0, 431, 432, 433, 1063,
	434, 435, 436, 437, 0, 438, 439, 440, 441, 442,
	444, 447, 448, 449, 450, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 462, 463, 465, 466, 467, 625,
	468, 469, 470, 471, 1020, 473, 474, 626, 476, 477,
	479, 480, 481, 482, 483, 484, 635, 1054, 486, 596,
	487, 488, 489, 490, 491, 0, 493, 494, 495, 496,
	497, 498, 501, 502, 503, 505, 506, 1064, 507, 508,
	1055, 510, 511, 781, 513, 514, 515, 516, 517, 2770,
	636, 518, 1065, 519, 1066, 520, 521, 522, 523, 524,
	525, 526, 528, 0, 1004, 530, 531, 532, 534, 535,
	536, 537, 540, 541, 542, 543, 544, 0, 545, 547,
	549, 627, 604, 1071, 1072, 1075, 1073, 1074, 1076, 1077,
	1087, 550, 551, 567, 418, 412, 368, 410, 411, 415,
	416, 419, 0, 0, 2768, 1059, 0, 0, 0, 1002,
	0, 818, 0, 1023, 935, 0, 1028, 1029, 1018, 1037,
	1008, 0, 0, 0, 1009, 0, 0, 998, 999, 244,
	0, 261, 763, 0, 310, 347, 1013, 0, 1001, 407,
	0, 460, 464, 0, 553, 1033, 0, 1005, 0, 318,
	1026, 768, 0, 774, 1027, 780, 1025, 529, 0, 770,
	771, 776, 249, 1103, 552, 623, 0, 0, 0, 1019,
	0, 0, 0, 0, 0, 0, 0, 257, 0, 0,
	0, 0, 772, 769, 773, 779, 767, 777, 764, 775,
	0, 451, 385, 602, 478, 256, 302, 289, 331, 373,
	485, 0, 0, 363, 533, 298, 387, 0, 277, 420,
	1056, 509, 384, 0, 492, 512, 0, 404, 283, 443,
	499, 500, 761, 766, 0, 782, 0, 287, 288, 409,
	269, 417, 614, 580, 472, 430, 428, 0, 395, 452,
	609, 1014, 0, 317, 0, 312, 408, 548, 275, 527,
	446, 413, 367, 475, 504, 314, 299, 300, 343, 445,
	333, 285, 538, 1084, 1086, 1082, 1078, 1079, 1044, 1045,
	1085, 1081, 334, 1080, 0, 546, 1089, 1100, 1097, 1102,
	1088, 1101, 1095, 883, 593, 1092, 1091, 1105, 1098, 1099,
	539, 1104, 1043, 1096, 1094, 1093, 1090, 0, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 245, 0,
	246, 247, 248, 250, 251, 252, 760, 253, 254, 255,
	258, 259, 260, 262, 622, 263, 264, 265, 266, 267,
	268, 1068, 1046, 270, 271, 272, 273, 274, 276, 278,
	279, 280, 281, 282, 284, 286, 1057, 1047, 1052, 1058,
	1048, 1049, 1053, 290, 291, 292, 293, 294, 295, 0,
	296, 297, 301, 303, 304, 305, 306, 307, 308, 311,
	0, 313, 315, 0, 316, 319, 0, 320, 321, 322,
	323, 324, 325, 326, 327, 1060, 328, 0, 329, 330,
	332, 0, 335, 336, 337, 338, 339, 0, 340, 1069,
	1017, 341, 342, 344, 345, 346, 348, 349, 350, 351,
	352, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 362, 364, 0, 365, 366, 369, 370, 371, 372,
	0, 374, 1070, 0, 375, 376, 377, 1050, 1051, 378,
	379, 380, 381, 382, 383, 386, 1083, 388, 389, 390,
	391, 392, 393, 394, 624, 396, 397, 398, 399, 400,
	401, 402, 586, 1061, 403, 405, 406, 1067, 590, 1062,
	778, 421, 422, 423, 424, 425, 426, 427, 429, 0,
	431, 432, 433, 1063, 434, 435, 436, 437, 0, 438,
	439, 440, 441, 442, 444, 447, 448, 449, 450, 0,
	453, 454, 455, 456, 457, 458, 459, 461, 462, 463,
	465, 466, 467, 625, 468, 469, 470, 471, 1020, 473,
	474, 626, 476, 477, 479, 480, 481, 482, 483, 484,
	635, 1054, 486, 596, 487, 488, 489, 490, 491, 0,
	493, 494, 495, 496, 497, 498, 501, 502, 503, 505,
	506, 1064, 507, 508, 1055, 510, 511, 781, 513, 514,
	515, 516, 517, 0, 636, 518, 1065, 519, 1066, 520,
	521, 522, 523, 524, 525, 526, 528, 0, 1004, 530,
	531, 532, 534, 535, 536, 537, 540, 541, 542, 543,
	544, 0, 545, 547, 549, 627, 604, 1071, 1072, 1075,
	1073, 1074, 1076, 1077, 1087, 550, 551, 567, 418, 412,
	368, 410, 411, 415, 416, 419, 0, 0, 0, 1059,
	0, 0, 0, 1002, 0, 0, 818, 0, 1023, 935,
	0, 1028, 1029, 1018, 1037, 1008, 0, 0, 1009, 0,
	0, 998, 999, 996, 244, 0, 261, 763, 0, 310,
	347, 1013, 0, 1001, 407, 0, 460, 464, 0, 553,
	1033, 0, 1005, 0, 318, 1026, 768, 0, 774, 1027,
	780, 1025, 529, 0, 770, 771, 776, 249, 1103, 552,
	623, 0, 0, 0, 1019, 0, 0, 0, 0, 0,
	0, 0, 257, 0, 0, 0, 0, 772, 769, 773,
	779, 767, 777, 764, 775, 0, 451, 385, 602, 478,
	256, 302, 289, 331, 373, 485, 0, 0, 363, 533,
	298, 387, 0, 277, 420, 1056, 509, 384, 0, 492,
	512, 0, 404, 283, 443, 499, 500, 761, 766, 0,
	782, 0, 287, 288, 409, 269, 417, 614, 580, 472,
	430, 428, 0, 395, 452, 609, 1014, 0, 317, 0,
	312, 408, 548, 275, 527, 446, 413, 367, 475, 504,
	314, 299, 300, 343, 445, 333, 285, 538, 1084, 1086,
	1082, 1078, 1079, 1044, 1045, 1085, 1081, 334, 1080, 0,
	546, 1089, 1100, 1097, 1102, 1088, 1101, 1095, 883, 593,
	1092, 1091, 1105, 1098, 1099, 539, 1104, 1043, 1096, 1094,
	1093, 1090, 0, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 245, 0, 246, 247, 248, 250, 251,
	252, 760, 253, 254, 255, 258, 259, 260, 262, 622,
	263, 264, 265, 266, 267, 268, 1068, 1046, 270, 271,
	272, 273, 274, 276, 278, 279, 280, 281, 282, 284,
	286, 1057, 1047, 1052, 1058, 1048, 1049, 1053, 290, 291,
	292, 293, 294, 295, 0, 296, 297, 301, 303, 304,
	305, 306, 307, 308, 311, 0, 313, 315, 0, 316,
	319, 0, 320, 321, 322, 323, 324, 325, 326, 327,
	1060, 328, 0, 329, 330, 332, 0, 335, 336, 337,
	338, 339, 0, 340, 1069, 1017, 341, 342, 344, 345,
	346, 348, 349, 350, 351, 352, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 362, 364, 0, 365,
	366, 369, 370, 371, 372, 0, 374, 1070, 0, 375,
	376, 377, 1050, 1051, 378, 379, 380, 381, 382, 383,
	386, 1083, 388, 389, 390, 391, 392, 393, 394, 624,
	396, 397, 398, 399, 400, 401, 402, 586, 1061, 403,
	405, 406, 1067, 590, 1062, 778, 421, 422, 423, 424,
	425, 426, 427, 429, 0, 431, 432, 433, 1063, 434,
	435, 436, 437, 0, 438, 439, 440, 441, 442, 444,
	447, 448, 449, 450, 0, 453, 454, 455, 456, 457,
	458, 459, 461, 462, 463, 465, 466, 467, 625, 468,
	469, 470, 471, 1020, 473, 474, 626, 476, 477, 479,
	480, 481, 482, 483, 484, 635, 1054, 486, 596, 487,
	488, 489, 490, 491, 0, 493, 494, 495, 496, 497,
	498, 501, 502, 503, 505, 506, 1064, 507, 508, 1055,
	510, 511, 781, 513, 514, 515, 516, 517, 0, 636,
	518, 1065, 519, 1066, 520, 521, 522, 523, 524, 525,
	526, 528, 0, 1004, 530, 531, 532, 534, 535, 536,
	537, 540, 541, 542, 543, 544, 0, 545, 547, 549,
	627, 604, 1071, 1072, 1075, 1073, 1074, 1076, 1077, 1087,
	550, 551, 567, 418, 412, 368, 410, 411, 415, 416,
	419, 0, 0, 0, 1059, 0, 0, 0, 1002, 0,
	818, 0, 1023, 935, 0, 1028, 1029, 1018, 1037, 1008,
	0, 2018, 2698, 1009, 0, 0, 998, 999, 244, 0,
	261, 763, 0, 310, 347, 1013, 0, 1001, 407, 0,
	460, 464, 0, 553, 1033, 0, 1005, 0, 318, 1026,
	768, 0, 774, 1027, 780, 1025, 529, 0, 770, 771,
	776, 249, 1103, 552, 623, 0, 0, 2659, 1019, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 772, 769, 773, 779, 767, 777, 764, 775, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 1056,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 761, 766, 0, 782, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	1014, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 1084, 1086, 1082, 1078, 1079, 1044, 1045, 1085,
	1081, 334, 1080, 0, 546, 1089, 1100, 1097, 1102, 1088,
	1101, 1095, 883, 593, 1092, 1091, 1105, 1098, 1099, 539,
	1104, 1043, 1096, 1094, 1093, 1090, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 760, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	1068, 1046, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 1057, 1047, 1052, 1058, 1048,
	1049, 1053, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 1060, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 1069, 1017,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 1070, 0, 375, 376, 377, 1050, 1051, 378, 379,
	380, 381, 382, 383, 386, 1083, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 1061, 403, 405, 406, 1067, 590, 1062, 778,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 1063, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 1020, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	1054, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	1064, 507, 508, 1055, 510, 511, 781, 513, 514, 515,
	516, 517, 0, 636, 518, 1065, 519, 1066, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 1004, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 1071, 1072, 1075, 1073,
	1074, 1076, 1077, 1087, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 0, 0, 0, 1059, 0,
	0, 0, 1002, 0, 818, 0, 1023, 935, 0, 1028,
	1029, 1018, 1037, 1008, 0, 0, 0, 1009, 0, 0,
	998, 999, 244, 0, 261, 763, 0, 310, 347, 1013,
	0, 1001, 407, 0, 460, 464, 0, 553, 1033, 0,
	1005, 0, 318, 1026, 768, 0, 774, 1027, 780, 1025,
	529, 0, 770, 771, 776, 249, 1103, 552, 623, 0,
	0, 0, 1019, 0, 0, 0, 0, 0, 0, 0,
	257, 0, 0, 0, 0, 772, 769, 773, 779, 767,
	777, 764, 775, 0, 451, 385, 602, 478, 256, 302,
	289, 331, 373, 485, 0, 0, 363, 533, 298, 387,
	0, 277, 420, 1056, 509, 384, 0, 492, 512, 0,
	404, 283, 443, 499, 500, 761, 766, 0, 782, 0,
	287, 288, 409, 269, 417, 614, 580, 472, 430, 428,
	0, 395, 452, 609, 1014, 0, 317, 0, 312, 408,
	548, 275, 527, 446, 413, 367, 475, 504, 314, 299,
	300, 343, 445, 333, 285, 538, 1084, 1086, 1082, 1078,
	1079, 1044, 1045, 1085, 1081, 334, 1080, 0, 546, 1089,
	1100, 1097, 1102, 1088, 1101, 1095, 883, 593, 1092, 1091,
	1105, 1098, 1099, 539, 1104, 1043, 1096, 1094, 1093, 1090,
	3866, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 245, 0, 246, 247, 248, 250, 251, 252, 760,
	253, 254, 255, 258, 259, 260, 262, 622, 263, 264,
	265, 266, 267, 268, 1068, 1046, 270, 271, 272, 273,
	274, 276, 278, 279, 280, 281, 282, 284, 286, 1057,
	1047, 1052, 1058, 1048, 1049, 1053, 290, 291, 292, 293,
	294, 295, 0, 296, 297, 301, 303, 304, 305, 306,
	307, 308, 311, 0, 313, 315, 0, 316, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 1060, 328,
	0, 329, 330, 332, 0, 335, 336, 337, 338, 339,
	0, 340, 1069, 1017, 341, 342, 344, 345, 346, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 362, 364, 0, 365, 366, 369,
	370, 371, 372, 0, 374, 1070, 0, 375, 376, 377,
	1050, 1051, 378, 379, 380, 381, 382, 383, 386, 1083,
	388, 389, 390, 391, 392, 393, 394, 624, 396, 397,
	398, 399, 400, 401, 402, 586, 1061, 403, 405, 406,
	1067, 590, 1062, 778, 421, 422, 423, 424, 425, 426,
	427, 429, 0, 431, 432, 433, 1063, 434, 435, 436,
	437, 0, 438, 439, 440, 441, 442, 444, 447, 448,
	449, 450, 0, 453, 454, 455, 456, 457, 458, 459,
	461, 462, 463, 465, 466, 467, 625, 468, 469, 470,
	471, 1020, 473, 474, 626, 476, 477, 479, 480, 481,
	482, 483, 484, 635, 1054, 486, 596, 487, 488, 489,
	490, 491, 0, 493, 494, 495, 496, 497, 498, 501,
	502, 503, 505, 506, 1064, 507, 508, 1055, 510, 511,
	781, 513, 514, 515, 516, 517, 0, 636, 518, 1065,
	519, 1066, 520, 521, 522, 523, 524, 525, 526, 528,
	0, 1004, 530, 531, 532, 534, 535, 536, 537, 540,
	541, 542, 543, 544, 0, 545, 547, 549, 627, 604,
	1071, 1072, 1075, 1073, 1074, 1076, 1077, 1087, 550, 551,
	567, 418, 412, 368, 410, 411, 415, 416, 419, 0,
	0, 0, 1059, 0, 0, 0, 1002, 0, 818, 0,
	1023, 935, 0, 1028, 1029, 1018, 1037, 1008, 0, 0,
	0, 1009, 0, 0, 998, 999, 244, 0, 261, 763,
	0, 310, 347, 1013, 0, 1001, 407, 0, 460, 464,
	0, 553, 1033, 0, 1005, 0, 318, 1026, 768, 0,
	774, 1027, 780, 1025, 529, 0, 770, 771, 776, 249,
	1103, 552, 623, 0, 0, 0, 1019, 0, 0, 0,
	0, 0, 0, 0, 257, 0, 0, 0, 0, 772,
	769, 773, 779, 767, 777, 764, 775, 0, 451, 385,
	602, 478, 256, 302, 289, 331, 373, 485, 0, 0,
	363, 533, 298, 387, 0, 277, 420, 1056, 509, 384,
	0, 492, 512, 0, 404, 283, 443, 499, 500, 761,
	766, 0, 782, 0, 287, 288, 409, 269, 417, 614,
	580, 472, 430, 428, 0, 395, 452, 609, 1014, 0,
	317, 0, 312, 408, 548, 275, 527, 446, 413, 367,
	475, 504, 314, 299, 300, 343, 445, 333, 285, 538,
	1084, 1086, 1082, 1078, 1079, 1044, 1045, 1085, 1081, 334,
	1080, 0, 546, 1089, 1100, 1097, 1102, 1088, 1101, 1095,
	883, 593, 1092, 1091, 1105, 1098, 1099, 539, 1104, 1043,
	1096, 1094, 1093, 1090, 0, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 245, 0, 246, 247, 248,
	250, 251, 252, 760, 253, 254, 255, 258, 259, 260,
	262, 622, 263, 264, 265, 266, 267, 268, 1068, 1046,
	270, 271, 272, 273, 274, 276, 278, 279, 280, 281,
	282, 284, 286, 1057, 1047, 1052, 1058, 1048, 1049, 1053,
	290, 291, 292, 293, 294, 295, 0, 296, 297, 301,
	303, 304, 305, 306, 307, 308, 311, 0, 313, 315,
	0, 316, 319, 0, 320, 321, 322, 323, 324, 325,
	326, 327, 1060, 328, 0, 329, 330, 332, 0, 335,
	336, 337, 338, 339, 0, 340, 1069, 1017, 341, 342,
	344, 345, 346, 348, 349, 350, 351, 352, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 362, 364,
	0, 365, 366, 369, 370, 371, 372, 0, 374, 1070,
	0, 375, 376, 377, 1050, 1051, 378, 379, 380, 381,
	382, 383, 386, 1083, 388, 389, 390, 391, 392, 393,
	394, 624, 396, 397, 398, 399, 400, 401, 402, 586,
	1061, 403, 405, 406, 1067, 590, 1062, 778, 421, 422,
	423, 424, 425, 426, 427, 429, 0, 431, 432, 433,
	1063, 434, 435, 436, 437, 0, 438, 439, 440, 441,
	442, 444, 447, 448, 449, 450, 0, 453, 454, 455,
	456, 457, 458, 459, 461, 462, 463, 465, 466, 467,
	625, 468, 469, 470, 471, 1020, 473, 474, 626, 476,
	477, 479, 480, 481, 482, 483, 484, 635, 1054, 486,
	596, 487, 488, 489, 490, 491, 0, 493, 494, 495,
	496, 497, 498, 501, 502, 503, 505, 506, 1064, 507,
	508, 1055, 510, 511, 781, 513, 514, 515, 516, 517,
	0, 636, 518, 1065, 519, 1066, 520, 521, 522, 523,
	524, 525, 526, 528, 0, 1004, 530, 531, 532, 534,
	535, 536, 537, 540, 541, 542, 543, 544, 0, 545,
	547, 549, 627, 604, 1071, 1072, 1075, 1073, 1074, 1076,
	1077, 1087, 550, 551, 567, 418, 412, 368, 410, 411,
	415, 416, 419, 0, 0, 0, 1059, 0, 0, 0,
	1002, 0, 818, 0, 1023, 935, 0, 1028, 1029, 1018,
	1037, 1008, 0, 0, 0, 1009, 3861, 0, 998, 999,
	244, 0, 261, 763, 0, 310, 347, 1013, 0, 1001,
	407, 0, 460, 464, 0, 553, 1033, 0, 1005, 0,
	318, 1026, 768, 0, 774, 1027, 780, 1025, 529, 0,
	770, 771, 776, 249, 1103, 552, 623, 0, 0, 0,
	1019, 0, 0, 0, 0, 0, 0, 0, 257, 0,
	0, 0, 0, 772, 769, 773, 779, 767, 777, 764,
	775, 0, 451, 385, 602, 478, 256, 302, 289, 331,
	373, 485, 0, 0, 363, 533, 298, 387, 0, 277,
	420, 1056, 509, 384, 0, 492, 512, 0, 404, 283,
	443, 499, 500, 761, 766, 0, 782, 0, 287, 288,
	409, 269, 417, 614, 580, 472, 430, 428, 0, 395,
	452, 609, 1014, 0, 317, 0, 312, 408, 548, 275,
	527, 446, 413, 367, 475, 504, 314, 299, 300, 343,
	445, 333, 285, 538, 1084, 1086, 1082, 1078, 1079, 1044,
	1045, 1085, 1081, 334, 1080, 0, 546, 1089, 1100, 1097,
	1102, 1088, 1101, 1095, 883, 593, 1092, 1091, 1105, 1098,
	1099, 539, 1104, 1043, 1096, 1094, 1093, 1090, 0, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 245,
	0, 246, 247, 248, 250, 251, 252, 760, 253, 254,
	255, 258, 259, 260, 262, 622, 263, 264, 265, 266,
	267, 268, 1068, 1046, 270, 271, 272, 273, 274, 276,
	278, 279, 280, 281, 282, 284, 286, 1057, 1047, 1052,
	1058, 1048, 1049, 1053, 290, 291, 292, 293, 294, 295,
	0, 296, 297, 301, 303, 304, 305, 306, 307, 308,
	311, 0, 313, 315, 0, 316, 319, 0, 320, 321,
	322, 323, 324, 325, 326, 327, 1060, 328, 0, 329,
	330, 332, 0, 335, 336, 337, 338, 339, 0, 340,
	1069, 1017, 341, 342, 344, 345, 346, 348, 349, 350,
	351, 352, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 362, 364, 0, 365, 366, 369, 370, 371,
	372, 0, 374, 1070, 0, 375, 376, 377, 1050, 1051,
	378, 379, 380, 381, 382, 383, 386, 1083, 388, 389,
	390, 391, 392, 393, 394, 624, 396, 397, 398, 399,
	400, 401, 402, 586, 1061, 403, 405, 406, 1067, 590,
	1062, 778, 421, 422, 423, 424, 425, 426, 427, 429,
	0, 431, 432, 433, 1063, 434, 435, 436, 437, 0,
	438, 439, 440, 441, 442, 444, 447, 448, 449, 450,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 462,
	463, 465, 466, 467, 625, 468, 469, 470, 471, 1020,
	473, 474, 626, 476, 477, 479, 480, 481, 482, 483,
	484, 635, 1054, 486, 596, 487, 488, 489, 490, 491,
	0, 493, 494, 495, 496, 497, 498, 501, 502, 503,
	505, 506, 1064, 507, 508, 1055, 510, 511, 781, 513,
	514, 515, 516, 517, 0, 636, 518, 1065, 519, 1066,
	520, 521, 522, 523, 524, 525, 526, 528, 0, 1004,
	530, 531, 532, 534, 535, 536, 537, 540, 541, 542,
	543, 544, 0, 545, 547, 549, 627, 604, 1071, 1072,
	1075, 1073, 1074, 1076, 1077, 1087, 550, 551, 567, 418,
	412, 368, 410, 411, 415, 416, 419, 0, 0, 0,
	1059, 0, 0, 0, 1002, 0, 818, 0, 1023, 935,
	0, 1028, 1029, 1018, 1037, 1008, 0, 0, 0, 1009,
	3824, 0, 998, 999, 244, 0, 261, 763, 0, 310,
	347, 1013, 0, 1001, 407, 0, 460, 464, 0, 553,
	1033, 0, 1005, 0, 318, 1026, 768, 0, 774, 1027,
	780, 1025, 529, 0, 770, 771, 776, 249, 1103, 552,
	623, 0, 0, 0, 1019, 0, 2773, 0, 0, 0,
	0, 0, 257, 0, 0, 0, 0, 772, 769, 773,
	779, 767, 777, 764, 775, 0, 451, 385, 602, 478,
	256, 302, 289, 331, 373, 485, 0, 0, 363, 533,
	298, 387, 0, 277, 420, 1056, 509, 384, 0, 492,
	512, 0, 404, 283, 443, 499, 500, 761, 766, 0,
	782, 0, 287, 288, 409, 269, 417, 614, 580, 472,
	430, 428, 0, 395, 452, 609, 1014, 0, 317, 0,
	312, 408, 548, 275, 527, 446, 413, 367, 475, 504,
	314, 299, 300, 343, 445, 333, 285, 538, 1084, 1086,
	1082, 1078, 1079, 1044, 1045, 1085, 1081, 334, 1080, 0,
	546, 1089, 1100, 1097, 1102, 1088, 1101, 1095, 883, 593,
	1092, 1091, 1105, 1098, 1099, 539, 1104, 1043, 1096, 1094,
	1093, 1090, 0, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 245, 0, 246, 247, 248, 250, 251,
	252, 760, 253, 254, 255, 258, 259, 260, 262, 622,
	263, 264, 265, 266, 267, 268, 1068, 1046, 270, 271,
	272, 273, 274, 276, 278, 279, 280, 281, 282, 284,
	286, 1057, 1047, 1052, 1058, 1048, 1049, 1053, 290, 291,
	292, 293, 294, 295, 0, 296, 297, 301, 303, 304,
	305, 306, 307, 308, 311, 0, 313, 315, 0, 316,
	319, 0, 320, 321, 322, 323, 324, 325, 326, 327,
	1060, 328, 0, 329, 330, 332, 0, 335, 336, 337,
	338, 339, 0, 340, 1069, 1017, 341, 342, 344, 345,
	346, 348, 349, 350, 351, 352, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 362, 364, 0, 365,
	366, 369, 370, 371, 372, 0, 374, 1070, 0, 375,
	376, 377, 1050, 1051, 378, 379, 380, 381, 382, 383,
	386, 1083, 388, 389, 390, 391, 392, 393, 394, 624,
	396, 397, 398, 399, 400, 401, 402, 586, 1061, 403,
	405, 406, 1067, 590, 1062, 778, 421, 422, 423, 424,
	425, 426, 427, 429, 0, 431, 432, 433, 1063, 434,
	435, 436, 437, 0, 438, 439, 440, 441, 442, 444,
	447, 448, 449, 450, 0, 453, 454, 455, 456, 457,
	458, 459, 461, 462, 463, 465, 466, 467, 625, 468,
	469, 470, 471, 1020, 473, 474, 626, 476, 477, 479,
	480, 481, 482, 483, 484, 635, 1054, 486, 596, 487,
	488, 489, 490, 491, 0, 493, 494, 495, 496, 497,
	498, 501, 502, 503, 505, 506, 1064, 507, 508, 1055,
	510, 511, 781, 513, 514, 515, 516, 517, 0, 636,
	518, 1065, 519, 1066, 520, 521, 522, 523, 524, 525,
	526, 528, 0, 1004, 530, 531, 532, 534, 535, 536,
	537, 540, 541, 542, 543, 544, 0, 545, 547, 549,
	627, 604, 1071, 1072, 1075, 1073, 1074, 1076, 1077, 1087,
	550, 551, 567, 418, 412, 368, 410, 411, 415, 416,
	419, 0, 0, 0, 1059, 0, 0, 0, 1002, 0,
	818, 0, 1023, 935, 0, 1028, 1029, 1018, 1037, 1008,
	0, 0, 0, 1009, 0, 0, 998, 999, 244, 0,
	261, 763, 0, 310, 347, 1013, 0, 1001, 407, 0,
	460, 464, 0, 553, 1033, 0, 1005, 0, 318, 1026,
	768, 0, 774, 1027, 780, 1025, 529, 0, 770, 771,
	776, 249, 1103, 552, 623, 0, 0, 0, 1019, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 772, 769, 773, 779, 767, 777, 764, 775, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 2792, 277, 420, 1056,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 761, 766, 0, 782, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	1014, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 1084, 1086, 1082, 1078, 1079, 1044, 1045, 1085,
	1081, 334, 1080, 0, 546, 1089, 1100, 1097, 1102, 1088,
	1101, 1095, 883, 593, 1092, 1091, 1105, 1098, 1099, 539,
	1104, 1043, 1096, 1094, 1093, 1090, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 760, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	1068, 1046, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 1057, 1047, 1052, 1058, 1048,
	1049, 1053, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 1060, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 1069, 1017,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 1070, 0, 375, 376, 377, 1050, 1051, 378, 379,
	380, 381, 382, 383, 386, 1083, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 1061, 403, 405, 406, 1067, 590, 1062, 778,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 1063, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 1020, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	1054, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	1064, 507, 508, 1055, 510, 511, 781, 513, 514, 515,
	516, 517, 0, 636, 518, 1065, 519, 1066, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 1004, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 1071, 1072, 1075, 1073,
	1074, 1076, 1077, 1087, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 0, 0, 0, 1059, 0,
	0, 0, 1002, 0, 818, 0, 1023, 935, 0, 1028,
	1029, 1018, 1037, 1008, 0, 0, 0, 1009, 0, 0,
	998, 999, 244, 0, 261, 763, 0, 310, 347, 1013,
	0, 1001, 407, 0, 460, 464, 0, 553, 1033, 0,
	1005, 0, 318, 1026, 768, 0, 774, 1027, 780, 1025,
	529, 0, 770, 771, 776, 249, 1103, 552, 623, 0,
	0, 0, 1019, 0, 0, 0, 0, 0, 0, 0,
	257, 0, 0, 0, 0, 772, 769, 773, 779, 767,
	777, 764, 775, 0, 451, 385, 602, 478, 256, 302,
	289, 331, 373, 485, 0, 0, 363, 533, 298, 387,
	0, 277, 420, 1056, 509, 384, 0, 492, 512, 0,
	404, 283, 443, 499, 500, 761, 766, 0, 782, 0,
	287, 288, 409, 269, 417, 614, 580, 472, 430, 428,
	0, 395, 452, 609, 1014, 0, 317, 0, 312, 408,
	548, 275, 527, 446, 413, 367, 475, 504, 314, 299,
	300, 343, 445, 333, 285, 538, 1084, 1086, 1082, 1078,
	1079, 1044, 1045, 1085, 1081, 334, 1080, 0, 546, 1089,
	1100, 1097, 1102, 1088, 1101, 1095, 883, 593, 1092, 1091,
	1105, 1098, 1099, 539, 1104, 1043, 1096, 1094, 1093, 1090,
	0, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 245, 0, 246, 247, 248, 250, 251, 252, 760,
	253, 254, 255, 258, 259, 260, 262, 622, 263, 264,
	265, 266, 267, 268, 1068, 1046, 270, 271, 272, 273,
	274, 276, 278, 279, 280, 281, 282, 284, 286, 1057,
	1047, 1052, 1058, 1048, 1049, 1053, 290, 291, 292, 293,
	294, 295, 0, 296, 297, 301, 303, 304, 305, 306,
	307, 308, 311, 0, 313, 315, 0, 316, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 1060, 328,
	0, 329, 330, 332, 0, 335, 336, 337, 338, 339,
	0, 340, 1069, 1017, 341, 342, 344, 345, 346, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 362, 364, 0, 365, 366, 369,
	370, 371, 372, 0, 374, 1070, 0, 375, 376, 377,
	1050, 1051, 378, 379, 380, 381, 382, 383, 386, 1083,
	388, 389, 390, 391, 392, 393, 394, 624, 396, 397,
	398, 399, 400, 401, 402, 586, 1061, 403, 405, 406,
	1067, 590, 1062, 778, 421, 422, 423, 424, 425, 426,
	427, 429, 0, 431, 432, 433, 1063, 434, 435, 436,
	437, 0, 438, 439, 440, 441, 442, 444, 447, 448,
	449, 450, 0, 453, 454, 455, 456, 457, 458, 459,
	461, 462, 463, 465, 466, 467, 625, 468, 469, 470,
	471, 1020, 473, 474, 626, 476, 477, 479, 480, 481,
	482, 483, 484, 635, 1054, 486, 596, 487, 488, 489,
	490, 491, 0, 493, 494, 495, 496, 497, 498, 501,
	502, 503, 505, 506, 1064, 507, 508, 1055, 510, 511,
	781, 513, 514, 515, 516, 517, 0, 636, 518, 1065,
	519, 1066, 520, 521, 522, 523, 524, 525, 526, 528,
	0, 1004, 530, 531, 532, 534, 535, 536, 537, 540,
	541, 542, 543, 544, 0, 545, 547, 549, 627, 604,
	1071, 1072, 1075, 1073, 1074, 1076, 1077, 1087, 550, 551,
	567, 418, 412, 368, 410, 411, 415, 416, 419, 0,
	0, 0, 1059, 0, 0, 0, 1002, 0, 0, 818,
	0, 1023, 935, 0, 1028, 1029, 1018, 1037, 1008, 0,
	0, 1009, 2703, 0, 998, 999, 1502, 244, 0, 261,
	763, 0, 310, 347, 1013, 0, 1001, 407, 0, 460,
	464, 0, 553, 1033, 0, 1005, 0, 318, 1026, 768,
	0, 774, 1027, 780, 1025, 529, 0, 770, 771, 776,
	249, 1103, 552, 623, 0, 0, 0, 1019, 0, 0,
	0, 0, 0, 0, 0, 257, 0, 0, 0, 0,
	772, 769, 773, 779, 767, 777, 764, 775, 0, 451,
	385, 602, 478, 256, 302, 289, 331, 373, 485, 0,
	0, 363, 533, 298, 387, 0, 277, 420, 1056, 509,
	384, 0, 492, 512, 0, 404, 283, 443, 499, 500,
	761, 766, 0, 782, 0, 287, 288, 409, 269, 417,
	614, 580, 472, 430, 428, 0, 395, 452, 609, 1014,
	0, 317, 0, 312, 408, 548, 275, 527, 446, 413,
	367, 475, 504, 314, 299, 300, 343, 445, 333, 285,
	538, 1084, 1086, 1082, 1078, 1079, 1044, 1045, 1085, 1081,
	334, 1080, 0, 546, 1089, 1100, 1097, 1102, 1088, 1101,
	1095, 883, 593, 1092, 1091, 1105, 1098, 1099, 539, 1104,
	1043, 1096, 1094, 1093, 1090, 0, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 245, 0, 246, 247,
	248, 250, 251, 252, 760, 253, 254, 255, 258, 259,
	260, 262, 622, 263, 264, 265, 266, 267, 268, 1068,
	1046, 270, 271, 272, 273, 274, 276, 278, 279, 280,
	281, 282, 284, 286, 1057, 1047, 1052, 1058, 1048, 1049,
	1053, 290, 291, 292, 293, 294, 295, 0, 296, 297,
	301, 303, 304, 305, 306, 307, 308, 311, 0, 313,
	315, 0, 316, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 1060, 328, 0, 329, 330, 332, 0,
	335, 336, 337, 338, 339, 0, 340, 1069, 1017, 341,
	342, 344, 345, 346, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 362,
	364, 0, 365, 366, 369, 370, 371, 372, 0, 374,
	1070, 0, 375, 376, 377, 1050, 1051, 378, 379, 380,
	381, 382, 383, 386, 1083, 388, 389, 390, 391, 392,
	393, 394, 624, 396, 397, 398, 399, 400, 401, 402,
	586, 1061, 403, 405, 406, 1067, 590, 1062, 778, 421,
	422, 423, 424, 425, 426, 427, 429, 0, 431, 432,
	433, 1063, 434, 435, 436, 437, 0, 438, 439, 440,
	441, 442, 444, 447, 448, 449, 450, 0, 453, 454,
	455, 456, 457, 458, 459, 461, 462, 463, 465, 466,
	467, 625, 468, 469, 470, 471, 1020, 473, 474, 626,
	476, 477, 479, 480, 481, 482, 483, 484, 635, 1054,
	486, 596, 487, 488, 489, 490, 491, 0, 493, 494,
	495, 496, 497, 498, 501, 502, 503, 505, 506, 1064,
	507, 508, 1055, 510, 511, 781, 513, 514, 515, 516,
	517, 0, 636, 518, 1065, 519, 1066, 520, 521, 522,
	523, 524, 525, 526, 528, 0, 1004, 530, 531, 532,
	534, 535, 536, 537, 540, 541, 542, 543, 544, 0,
	545, 547, 549, 627, 604, 1071, 1072, 1075, 1073, 1074,
	1076, 1077, 1087, 550, 551, 567, 418, 412, 368, 410,
	411, 415, 416, 419, 0, 0, 0, 1059, 0, 0,
	0, 1002, 0, 818, 0, 1023, 935, 0, 1028, 1029,
	1018, 1037, 1008, 0, 0, 0, 1009, 0, 0, 998,
	999, 244, 0, 261, 763, 0, 310, 347, 1013, 0,
	1001, 407, 0, 460, 464, 0, 553, 1033, 0, 1005,
	0, 318, 1026, 768, 0, 774, 1027, 780, 1025, 529,
	0, 770, 771, 776, 249, 1103, 552, 623, 0, 0,
	0, 1019, 0, 0, 0, 0, 0, 0, 0, 257,
	0, 0, 0, 0, 772, 769, 773, 779, 767, 777,
	764, 775, 0, 451, 385, 602, 478, 256, 302, 289,
	331, 373, 485, 0, 0, 363, 533, 298, 387, 0,
	277, 420, 1056, 509, 384, 0, 492, 512, 0, 404,
	283, 443, 499, 500, 761, 766, 0, 782, 0, 287,
	288, 409, 269, 417, 614, 580, 472, 430, 428, 0,
	395, 452, 609, 1014, 0, 317, 0, 312, 408, 548,
	275, 527, 446, 413, 367, 475, 504, 314, 299, 300,
	343, 445, 333, 285, 538, 1084, 1086, 1082, 1078, 1079,
	1044, 1045, 1085, 1081, 334, 1080, 0, 546, 1089, 1100,
	1097, 1102, 1088, 1101, 1095, 883, 593, 1092, 1091, 1105,
	1098, 1099, 539, 1104, 1043, 1096, 1094, 1093, 1090, 0,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	245, 0, 246, 247, 248, 250, 251, 252, 760, 253,
	254, 255, 258, 259, 260, 262, 622, 263, 264, 265,
	266, 267, 268, 1068, 1046, 270, 271, 272, 273, 274,
	276, 278, 279, 280, 281, 282, 284, 286, 1057, 1047,
	1052, 1058, 1048, 1049, 1053, 290, 291, 292, 293, 294,
	295, 0, 296, 297, 301, 303, 304, 305, 306, 307,
	308, 311, 0, 313, 315, 0, 316, 319, 0, 320,
	321, 322, 323, 324, 325, 326, 327, 1060, 328, 0,
	329, 330, 332, 0, 335, 336, 337, 338, 339, 0,
	340, 1069, 1017, 341, 342, 344, 345, 346, 348, 349,
	350, 351, 352, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 362, 364, 0, 365, 366, 369, 370,
	371, 372, 0, 374, 1070, 0, 375, 376, 377, 1050,
	1051, 378, 379, 380, 381, 382, 383, 386, 1083, 388,
	389, 390, 391, 392, 393, 394, 624, 396, 397, 398,
	399, 400, 401, 402, 586, 1061, 403, 405, 406, 1067,
	590, 1062, 778, 421, 422, 423, 424, 425, 426, 427,
	429, 0, 431, 432, 433, 1063, 434, 435, 436, 437,
	0, 438, 439, 440, 441, 442, 444, 447, 448, 449,
	450, 0, 453, 454, 455, 456, 457, 458, 459, 461,
	462, 463, 465, 466, 467, 625, 468, 469, 470, 471,
	1020, 473, 474, 626, 476, 477, 479, 480, 481, 482,
	483, 484, 635, 1054, 486, 596, 487, 488, 489, 490,
	491, 0, 493, 494, 495, 496, 497, 498, 501, 502,
	503, 505, 506, 1064, 507, 508, 1055, 510, 511, 781,
	513, 514, 515, 516, 517, 0, 636, 518, 1065, 519,
	1066, 520, 521, 522, 523, 524, 525, 526, 528, 0,
	1004, 530, 531, 532, 534, 535, 536, 537, 540, 541,
	542, 543, 544, 0, 545, 547, 549, 627, 604, 1071,
	1072, 1075, 1073, 1074, 1076, 1077, 1087, 550, 551, 567,
	418, 412, 368, 410, 411, 415, 416, 419, 0, 0,
	0, 1059, 0, 0, 0, 1002, 0, 818, 0, 1023,
	935, 0, 1028, 1029, 1018, 1037, 1008, 0, 0, 0,
	1009, 0, 0, 998, 999, 244, 0, 261, 763, 0,
	310, 347, 1013, 0, 1001, 407, 0, 460, 464, 0,
	553, 1033, 0, 1005, 0, 318, 1026, 768, 0, 774,
	1027, 780, 1025, 529, 0, 770, 771, 776, 249, 1103,
	552, 623, 0, 0, 0, 1019, 0, 0, 0, 0,
	0, 0, 0, 257, 0, 0, 0, 0, 772, 769,
	773, 779, 767, 777, 764, 775, 0, 451, 385, 602,
	478, 256, 302, 289, 331, 373, 485, 0, 0, 363,
	533, 298, 387, 0, 277, 420, 1056, 509, 384, 0,
	492, 512, 0, 404, 283, 443, 499, 500, 761, 766,
	0, 782, 0, 5010, 288, 409, 269, 417, 614, 580,
	472, 430, 428, 0, 395, 452, 609, 1014, 0, 317,
	0, 312, 408, 548, 275, 527, 446, 413, 367, 475,
	504, 314, 299, 300, 343, 445, 333, 285, 538, 1084,
	1086, 1082, 1078, 1079, 1044, 1045, 1085, 1081, 334, 1080,
	0, 546, 1089, 1100, 1097, 1102, 1088, 1101, 1095, 883,
	593, 1092, 1091, 1105, 1098, 1099, 539, 1104, 1043, 1096,
	1094, 1093, 1090, 0, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 245, 0, 246, 247, 248, 250,
	251, 252, 760, 253, 254, 255, 258, 259, 260, 262,
	622, 263, 264, 265, 266, 267, 268, 1068, 1046, 270,
	271, 272, 273, 274, 276, 278, 279, 280, 281, 282,
	284, 286, 1057, 1047, 1052, 1058, 1048, 1049, 1053, 290,
	291, 292, 293, 294, 295, 0, 296, 297, 301, 303,
	304, 305, 306, 307, 308, 311, 0, 313, 315, 0,
	316, 319, 0, 320, 321, 322, 323, 324, 325, 326,
	327, 1060, 328, 0, 329, 330, 332, 0, 335, 336,
	337, 338, 339, 0, 340, 1069, 1017, 341, 342, 344,
	345, 346, 348, 349, 350, 351, 352, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 362, 364, 0,
	365, 366, 369, 370, 371, 372, 0, 374, 1070, 0,
	375, 376, 377, 1050, 1051, 378, 379, 380, 381, 382,
	383, 386, 1083, 388, 389, 390, 391, 392, 393, 394,
	624, 396, 397, 398, 399, 400, 401, 402, 586, 1061,
	403, 405, 406, 1067, 590, 1062, 778, 421, 422, 423,
	424, 425, 426, 427, 429, 0, 431, 432, 433, 1063,
	434, 435, 436, 437, 0, 438, 439, 440, 441, 442,
	444, 447, 448, 449, 450, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 462, 463, 465, 466, 467, 625,
	468, 469, 470, 471, 1020, 473, 474, 626, 476, 477,
	479, 480, 481, 482, 483, 484, 635, 1054, 486, 596,
	487, 488, 489, 490, 491, 0, 493, 494, 495, 496,
	497, 498, 501, 502, 503, 505, 506, 1064, 507, 508,
	1055, 510, 511, 781, 513, 514, 515, 516, 517, 0,
	636, 518, 1065, 519, 1066, 520, 521, 522, 523, 524,
	5009, 526, 528, 0, 1004, 530, 531, 532, 534, 535,
	536, 537, 540, 541, 542, 543, 544, 0, 545, 547,
	549, 627, 604, 1071, 1072, 1075, 1073, 1074, 1076, 1077,
	1087, 550, 551, 567, 418, 412, 368, 410, 411, 415,
	416, 419, 0, 0, 0, 1059, 0, 0, 0, 1002,
	0, 818, 0, 1023, 935, 0, 1028, 1029, 1018, 1037,
	1008, 0, 0, 0, 1009, 0, 0, 998, 999, 244,
	0, 261, 763, 0, 310, 347, 1013, 0, 1001, 407,
	0, 460, 464, 0, 553, 1033, 0, 1005, 0, 318,
	1026, 768, 0, 774, 1027, 780, 1025, 529, 0, 770,
	771, 776, 249, 1103, 552, 623, 0, 0, 0, 1019,
	0, 0, 0, 0, 0, 0, 0, 257, 0, 0,
	0, 0, 772, 769, 773, 779, 767, 777, 764, 775,
	0, 451, 385, 602, 478, 256, 302, 289, 331, 373,
	485, 0, 0, 363, 533, 298, 387, 0, 277, 420,
	1056, 509, 384, 0, 492, 512, 0, 404, 283, 443,
	499, 500, 761, 766, 0, 782, 0, 287, 288, 409,
	269, 417, 614, 580, 472, 430, 428, 0, 395, 452,
	609, 1014, 0, 317, 0, 312, 408, 548, 275, 527,
	446, 413, 367, 475, 504, 314, 299, 300, 343, 445,
	333, 285, 538, 1084, 1086, 1082, 1078, 1079, 1044, 1045,
	1085, 1081, 334, 1080, 0, 546, 1089, 1100, 1097, 1102,
	1088, 1101, 1095, 883, 593, 1092, 1091, 1105, 1098, 1099,
	539, 1104, 1043, 1096, 1094, 1093, 1090, 0, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 245, 0,
	246, 247, 248, 250, 251, 252, 760, 253, 254, 255,
	258, 259, 260, 262, 622, 263, 264, 265, 266, 267,
	268, 1068, 1046, 270, 271, 272, 273, 274, 276, 278,
	279, 280, 281, 282, 284, 4815, 1057, 1047, 1052, 1058,
	1048, 1049, 1053, 290, 291, 292, 293, 294, 295, 0,
	296, 297, 301, 303, 304, 305, 306, 307, 308, 311,
	0, 313, 315, 0, 316, 319, 0, 320, 321, 322,
	323, 324, 325, 326, 327, 1060, 328, 0, 329, 330,
	332, 0, 335, 336, 337, 338, 339, 0, 340, 1069,
	4817, 341, 342, 344, 345, 346, 348, 349, 350, 351,
	352, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 362, 364, 0, 365, 366, 369, 370, 371, 372,
	0, 374, 1070, 0, 375, 376, 377, 1050, 1051, 378,
	379, 380, 381, 382, 383, 386, 1083, 388, 389, 390,
	391, 392, 393, 394, 624, 396, 397, 398, 399, 400,
	401, 402, 586, 1061, 403, 405, 406, 1067, 590, 1062,
	778, 421, 422, 423, 424, 425, 426, 427, 429, 0,
	431, 432, 433, 1063, 434, 435, 436, 437, 0, 438,
	439, 440, 441, 442, 444, 447, 448, 449, 450, 0,
	453, 454, 455, 456, 457, 458, 459, 461, 462, 463,
	465, 466, 467, 625, 468, 4816, 470, 471, 1020, 473,
	474, 626, 476, 477, 479, 480, 481, 482, 483, 484,
	635, 1054, 486, 596, 487, 488, 489, 490, 491, 0,
	493, 494, 495, 496, 497, 498, 501, 502, 503, 505,
	506, 1064, 507, 508, 1055, 510, 511, 781, 513, 514,
	515, 516, 517, 0, 636, 518, 1065, 519, 1066, 520,
	521, 522, 523, 524, 525, 526, 528, 0, 1004, 530,
	531, 532, 534, 535, 536, 537, 540, 541, 542, 543,
	544, 0, 545, 547, 549, 627, 604, 1071, 1072, 1075,
	1073, 1074, 1076, 1077, 1087, 550, 551, 567, 418, 412,
	368, 410, 411, 415, 416, 419, 0, 0, 0, 1059,
	0, 0, 0, 1002, 0, 818, 0, 1023, 935, 0,
	1028, 1029, 1018, 1037, 1008, 0, 0, 0, 4814, 0,
	0, 998, 999, 244, 0, 261, 763, 0, 310, 347,
	1013, 0, 1001, 407, 0, 460, 464, 0, 5008, 1033,
	0, 1005, 0, 318, 1026, 768, 0, 774, 1027, 780,
	1025, 529, 0, 770, 771, 776, 249, 1103, 552, 623,
	0, 0, 0, 1019, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 772, 769, 773, 779,
	767, 777, 764, 775, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 1056, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 761, 766, 0, 782,
	0, 5010, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 1014, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 1084, 1086, 1082,
	1078, 1079, 1044, 1045, 1085, 1081, 334, 1080, 0, 546,
	1089, 1100, 1097, 1102, 1088, 1101, 1095, 883, 593, 1092,
	1091, 1105, 1098, 1099, 539, 1104, 1043, 1096, 1094, 1093,
	1090, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	760, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 1068, 1046, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	1057, 1047, 1052, 1058, 1048, 1049, 1053, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 1060,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 1069, 1017, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 1070, 0, 375, 376,
	377, 1050, 1051, 378, 379, 380, 381, 382, 383, 386,
	1083, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 1061, 403, 405,
	406, 1067, 590, 1062, 778, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 1063, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 1020, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 1054, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 1064, 507, 508, 1055, 510,
	511, 781, 513, 514, 515, 516, 517, 0, 636, 518,
	1065, 519, 1066, 520, 521, 522, 523, 524, 5009, 526,
	528, 0, 1004, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 1071, 1072, 1075, 1073, 1074, 1076, 1077, 1087, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	0, 0, 0, 1059, 0, 0, 0, 1002, 0, 818,
	0, 1023, 935, 0, 1028, 1029, 1018, 1037, 1008, 0,
	0, 0, 1009, 0, 0, 998, 999, 244, 0, 261,
	763, 0, 310, 347, 1013, 0, 1001, 407, 0, 460,
	464, 0, 553, 1033, 0, 1005, 0, 318, 1026, 768,
	0, 774, 1027, 780, 1025, 529, 0, 770, 771, 776,
	249, 1103, 552, 623, 0, 0, 0, 1019, 0, 0,
	0, 0, 0, 0, 0, 257, 0, 0, 0, 0,
	772, 769, 773, 779, 767, 777, 764, 775, 0, 451,
	385, 602, 478, 256, 302, 289, 331, 373, 485, 0,
	0, 363, 533, 298, 387, 0, 277, 420, 1056, 509,
	384, 0, 492, 512, 0, 404, 283, 443, 499, 500,
	761, 766, 0, 782, 0, 287, 288, 409, 269, 417,
	614, 580, 472, 430, 428, 0, 395, 452, 609, 1014,
	0, 317, 0, 312, 408, 548, 275, 527, 446, 413,
	367, 475, 504, 314, 299, 300, 343, 445, 333, 285,
	538, 1084, 1086, 1082, 1078, 1079, 1044, 1045, 1085, 1081,
	334, 1080, 0, 546, 1089, 1100, 1097, 1102, 1088, 1101,
	1095, 883, 593, 1092, 1091, 1105, 1098, 1099, 539, 1104,
	1043, 1096, 1094, 1093, 1090, 0, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 245, 0, 246, 247,
	248, 250, 251, 252, 760, 253, 254, 255, 258, 259,
	260, 262, 622, 263, 264, 265, 266, 267, 268, 1068,
	1046, 270, 271, 272, 273, 274, 276, 278, 279, 280,
	281, 282, 284, 286, 1057, 1047, 1052, 1058, 1048, 1049,
	1053, 290, 291, 292, 293, 294, 295, 0, 296, 297,
	301, 303, 304, 305, 306, 307, 308, 311, 0, 313,
	315, 0, 316, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 1060, 328, 0, 329, 330, 332, 0,
	335, 336, 337, 338, 339, 0, 340, 1069, 1017, 341,
	342, 344, 345, 346, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 362,
	364, 0, 365, 366, 369, 370, 371, 372, 0, 374,
	1070, 0, 375, 376, 377, 1050, 1051, 378, 379, 380,
	381, 382, 383, 386, 1083, 388, 389, 390, 391, 392,
	393, 394, 624, 396, 397, 398, 399, 400, 401, 4341,
	586, 1061, 403, 405, 406, 1067, 590, 1062, 778, 421,
	422, 423, 424, 425, 426, 427, 429, 0, 431, 432,
	433, 1063, 434, 435, 436, 437, 0, 438, 439, 440,
	441, 442, 444, 447, 448, 449, 450, 0, 453, 454,
	455, 456, 457, 458, 459, 461, 462, 463, 465, 466,
	467, 625, 468, 469, 470, 471, 1020, 473, 474, 626,
	476, 477, 479, 480, 481, 482, 483, 484, 635, 1054,
	486, 596, 487, 488, 489, 490, 491, 0, 493, 494,
	495, 496, 497, 498, 501, 502, 503, 505, 506, 1064,
	507, 508, 1055, 510, 511, 781, 513, 514, 515, 516,
	517, 0, 636, 518, 1065, 519, 1066, 520, 521, 522,
	523, 524, 525, 526, 528, 0, 1004, 530, 531, 532,
	534, 535, 536, 537, 540, 541, 542, 543, 544, 0,
	545, 547, 549, 627, 604, 1071, 1072, 1075, 1073, 1074,
	1076, 1077, 1087, 550, 551, 567, 418, 412, 368, 410,
	411, 415, 416, 419, 0, 0, 0, 1059, 0, 0,
	0, 1002, 0, 818, 0, 1023, 935, 0, 1028, 1029,
	1018, 1037, 1008, 0, 0, 0, 1009, 0, 0, 998,
	999, 244, 0, 261, 763, 0, 310, 347, 1013, 0,
	1001, 407, 0, 460, 464, 0, 553, 1033, 0, 1005,
	0, 318, 1026, 768, 0, 774, 1027, 780, 1025, 529,
	0, 770, 771, 776, 249, 1103, 552, 623, 0, 0,
	0, 1019, 0, 0, 0, 0, 0, 0, 0, 257,
	0, 0, 0, 0, 772, 769, 773, 779, 767, 777,
	764, 775, 0, 451, 385, 602, 478, 256, 302, 289,
	331, 373, 485, 0, 0, 363, 533, 298, 387, 0,
	277, 420, 1056, 509, 384, 0, 492, 512, 0, 404,
	283, 443, 499, 500, 761, 766, 0, 782, 0, 287,
	288, 409, 269, 417, 614, 580, 472, 430, 428, 0,
	395, 452, 609, 1014, 0, 317, 0, 312, 408, 548,
	275, 527, 446, 413, 367, 475, 504, 314, 299, 300,
	343, 445, 333, 285, 538, 1084, 1086, 1082, 1078, 1079,
	1044, 1045, 1085, 1081, 334, 1080, 0, 546, 1089, 1100,
	1097, 1102, 1088, 1101, 1095, 883, 593, 1092, 1091, 1105,
	1098, 1099, 539, 1104, 1043, 1096, 1094, 1093, 1090, 0,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	245, 0, 246, 247, 248, 250, 251, 252, 760, 253,
	254, 255, 258, 259, 260, 262, 622, 263, 264, 265,
	266, 267, 268, 1068, 1046, 270, 271, 272, 273, 274,
	276, 278, 279, 280, 281, 282, 284, 286, 1057, 1047,
	1052, 1058, 1048, 1049, 1053, 290, 291, 292, 293, 294,
	295, 0, 296, 297, 301, 303, 304, 305, 306, 307,
	308, 311, 0, 313, 315, 0, 316, 319, 0, 320,
	321, 322, 323, 324, 325, 326, 327, 1060, 328, 0,
	329, 330, 332, 0, 335, 336, 337, 338, 339, 0,
	340, 1069, 1017, 341, 342, 344, 345, 346, 348, 349,
	350, 351, 352, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 362, 364, 0, 365, 366, 369, 370,
	371, 372, 0, 374, 1070, 0, 375, 376, 377, 1050,
	1051, 378, 379, 380, 381, 382, 383, 386, 1083, 388,
	389, 390, 391, 392, 393, 394, 624, 396, 397, 398,
	399, 400, 401, 402, 586, 1061, 403, 405, 406, 1067,
	590, 1062, 778, 421, 422, 423, 424, 425, 426, 427,
	429, 0, 431, 432, 433, 1063, 434, 435, 436, 437,
	0, 438, 439, 440, 441, 442, 444, 447, 448, 449,
	450, 0, 453, 454, 455, 456, 457, 458, 459, 461,
	462, 463, 465, 466, 467, 625, 468, 469, 470, 471,
	1020, 473, 474, 626, 476, 477, 479, 480, 481, 482,
	483, 484, 635, 1054, 486, 596, 487, 488, 489, 490,
	491, 0, 493, 494, 495, 496, 497, 498, 501, 502,
	503, 505, 506, 1064, 507, 508, 1055, 510, 511, 781,
	513, 514, 515, 516, 517, 0, 636, 518, 1065, 519,
	1066, 520, 521, 522, 523, 524, 525, 526, 528, 0,
	1004, 530, 531, 532, 534, 535, 536, 537, 540, 541,
	542, 543, 544, 0, 545, 547, 549, 627, 4328, 1071,
	1072, 1075, 1073, 1074, 1076, 1077, 1087, 550, 551, 567,
	418, 412, 368, 410, 411, 415, 416, 419, 0, 0,
	0, 1059, 0, 0, 0, 1002, 0, 818, 0, 1023,
	935, 0, 1028, 1029, 1018, 1037, 1008, 0, 0, 0,
	1009, 0, 0, 998, 999, 244, 0, 261, 763, 0,
	310, 347, 1013, 0, 1001, 407, 0, 460, 464, 0,
	553, 1033, 0, 1005, 0, 318, 1026, 768, 0, 774,
	1027, 780, 1025, 529, 0, 770, 771, 776, 249, 1103,
	552, 623, 0, 0, 0, 1019, 0, 0, 0, 0,
	0, 0, 0, 257, 0, 0, 0, 0, 772, 769,
	773, 779, 767, 777, 764, 775, 0, 451, 385, 602,
	478, 256, 302, 289, 331, 373, 485, 0, 0, 363,
	533, 298, 387, 0, 277, 420, 1056, 509, 384, 0,
	492, 512, 0, 404, 283, 443, 499, 500, 761, 766,
	0, 782, 0, 3460, 288, 409, 269, 417, 614, 580,
	472, 430, 428, 0, 395, 452, 609, 1014, 0, 317,
	0, 312, 408, 548, 275, 527, 446, 413, 367, 475,
	504, 314, 299, 300, 343, 445, 333, 285, 538, 1084,
	1086, 1082, 1078, 1079, 1044, 1045, 1085, 1081, 334, 1080,
	0, 546, 1089, 1100, 1097, 1102, 1088, 1101, 1095, 883,
	593, 1092, 1091, 1105, 1098, 1099, 539, 1104, 1043, 1096,
	1094, 1093, 1090, 0, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 245, 0, 246, 247, 248, 250,
	251, 252, 760, 253, 254, 255, 258, 259, 260, 262,
	622, 263, 264, 265, 266, 267, 268, 1068, 1046, 270,
	271, 272, 273, 274, 276, 278, 279, 280, 281, 282,
	284, 286, 1057, 1047, 1052, 1058, 1048, 1049, 1053, 290,
	291, 292, 293, 294, 295, 0, 296, 297, 301, 303,
	304, 305, 306, 307, 308, 311, 0, 313, 315, 0,
	316, 319, 0, 320, 321, 322, 323, 324, 325, 326,
	327, 1060, 328, 0, 329, 330, 332, 0, 335, 336,
	337, 338, 339, 0, 340, 1069, 1017, 341, 342, 344,
	345, 346, 348, 349, 350, 351, 352, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 362, 364, 0,
	365, 366, 369, 370, 371, 372, 0, 374, 1070, 0,
	375, 376, 377, 1050, 1051, 378, 379, 380, 381, 382,
	383, 386, 1083, 388, 389, 390, 391, 392, 393, 394,
	624, 396, 397, 398, 399, 400, 401, 402, 586, 1061,
	403, 405, 406, 1067, 590, 1062, 778, 421, 422, 423,
	424, 425, 426, 427, 429, 0, 431, 432, 433, 1063,
	434, 435, 436, 437, 0, 438, 439, 440, 441, 442,
	444, 447, 448, 449, 450, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 462, 463, 465, 466, 467, 625,
	468, 469, 470, 471, 1020, 473, 474, 626, 476, 477,
	479, 480, 481, 482, 483, 484, 635, 1054, 486, 596,
	487, 488, 489, 490, 491, 0, 493, 494, 495, 496,
	497, 498, 501, 502, 503, 505, 506, 1064, 507, 508,
	1055, 510, 511, 781, 513, 514, 515, 516, 517, 0,
	636, 518, 1065, 519, 1066, 520, 521, 522, 523, 524,
	525, 526, 528, 0, 1004, 530, 531, 532, 534, 535,
	536, 537, 540, 541, 542, 543, 544, 0, 545, 547,
	549, 627, 604, 1071, 1072, 1075, 1073, 1074, 1076, 1077,
	1087, 550, 551, 567, 418, 412, 368, 410, 411, 415,
	416, 419, 0, 0, 0, 1059, 0, 0, 0, 1002,
	0, 818, 0, 2609, 935, 0, 1028, 1029, 1018, 1037,
	1008, 0, 0, 0, 1009, 0, 0, 998, 999, 244,
	0, 261, 763, 0, 310, 347, 1013, 0, 1001, 407,
	0, 460, 464, 0, 553, 1033, 0, 1005, 0, 318,
	1026, 768, 0, 774, 1027, 780, 1025, 529, 0, 770,
	771, 776, 249, 1103, 552, 623, 0, 0, 0, 1019,
	0, 0, 0, 0, 0, 0, 0, 257, 0, 0,
	0, 0, 772, 769, 773, 779, 767, 777, 764, 775,
	0, 451, 385, 602, 478, 256, 302, 289, 331, 373,
	485, 0, 0, 363, 533, 298, 387, 0, 277, 420,
	1056, 509, 384, 0, 492, 512, 0, 404, 283, 443,
	499, 500, 761, 766, 0, 782, 0, 287, 288, 409,
	269, 417, 614, 580, 472, 430, 428, 0, 395, 452,
	609, 1014, 0, 317, 0, 312, 408, 548, 275, 527,
	446, 413, 367, 475, 504, 314, 299, 300, 343, 445,
	333, 285, 538, 1084, 1086, 1082, 1078, 1079, 1044, 1045,
	1085, 1081, 334, 1080, 0, 546, 1089, 1100, 1097, 1102,
	1088, 1101, 1095, 883, 593, 1092, 1091, 1105, 1098, 1099,
	539, 1104, 1043, 1096, 1094, 1093, 1090, 0, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 245, 0,
	246, 247, 248, 250, 251, 252, 760, 253, 254, 255,
	258, 259, 260, 262, 622, 263, 264, 265, 266, 267,
	268, 1068, 1046, 270, 271, 272, 273, 274, 276, 278,
	279, 280, 281, 282, 284, 286, 1057, 1047, 1052, 1058,
	1048, 1049, 1053, 290, 291, 292, 293, 294, 295, 0,
	296, 297, 301, 303, 304, 305, 306, 307, 308, 311,
	0, 313, 315, 0, 316, 319, 0, 320, 321, 322,
	323, 324, 325, 326, 327, 1060, 328, 0, 329, 330,
	332, 0, 335, 336, 337, 338, 339, 0, 340, 1069,
	1017, 341, 342, 344, 345, 346, 348, 349, 350, 351,
	352, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 362, 364, 0, 365, 366, 369, 370, 371, 372,
	0, 374, 1070, 0, 375, 376, 377, 1050, 1051, 378,
	379, 380, 381, 382, 383, 386, 1083, 388, 389, 390,
	391, 392, 393, 394, 624, 396, 397, 398, 399, 400,
	401, 402, 586, 1061, 403, 405, 406, 1067, 590, 1062,
	778, 421, 422, 423, 424, 425, 426, 427, 429, 0,
	431, 432, 433, 1063, 434, 435, 436, 437, 0, 438,
	439, 440, 441, 442, 444, 447, 448, 449, 450, 0,
	453, 454, 455, 456, 457, 458, 459, 461, 462, 463,
	465, 466, 467, 625, 468, 469, 470, 471, 1020, 473,
	474, 626, 476, 477, 479, 480, 481, 482, 483, 484,
	635, 1054, 486, 596, 487, 488, 489, 490, 491, 0,
	493, 494, 495, 496, 497, 498, 501, 502, 503, 505,
	506, 1064, 507, 508, 1055, 510, 511, 781, 513, 514,
	515, 516, 517, 0, 636, 518, 1065, 519, 1066, 520,
	521, 522, 523, 524, 525, 526, 528, 0, 1004, 530,
	531, 532, 534, 535, 536, 537, 540, 541, 542, 543,
	544, 0, 545, 547, 549, 627, 604, 1071, 1072, 1075,
	1073, 1074, 1076, 1077, 1087, 550, 551, 567, 418, 412,
	368, 410, 411, 415, 416, 419, 0, 0, 0, 1059,
	0, 0, 0, 1002, 0, 818, 0, 1023, 935, 0,
	1028, 1029, 1018, 1037, 1008, 0, 0, 0, 1009, 0,
	0, 998, 999, 244, 0, 261, 763, 0, 310, 347,
	1013, 0, 1001, 407, 0, 460, 464, 0, 553, 1033,
	0, 1005, 0, 318, 1026, 768, 0, 774, 1027, 780,
	1025, 529, 0, 770, 771, 776, 249, 1103, 552, 623,
	0, 0, 0, 1019, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 772, 769, 773, 779,
	767, 777, 764, 775, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 1056, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 761, 766, 0, 782,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 1014, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 1084, 1086, 1082,
	1078, 1079, 1044, 1045, 1085, 1081, 334, 1080, 0, 546,
	1089, 1100, 1097, 1102, 1088, 1101, 1095, 883, 593, 1092,
	1091, 1105, 1098, 1099, 539, 1104, 1043, 1096, 1094, 1093,
	1090, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	760, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 1068, 1046, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	1057, 1047, 1052, 1058, 1048, 1049, 1053, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 1060,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 1069, 1017, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 1070, 0, 375, 376,
	377, 1050, 1051, 378, 379, 380, 381, 382, 383, 386,
	1083, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 1061, 403, 405,
	406, 1067, 590, 1062, 778, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 1063, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 1020, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 1054, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 1064, 507, 508, 1055, 510,
	511, 781, 513, 514, 515, 516, 517, 0, 636, 518,
	1065, 519, 1066, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 1004, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 1071, 1072, 1075, 1073, 1074, 1076, 1077, 1087, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	0, 0, 0, 1059, 0, 0, 0, 1002, 0, 818,
	0, 1023, 935, 0, 1028, 1029, 1018, 1037, 1008, 0,
	0, 0, 1009, 0, 0, 1510, 1511, 244, 0, 261,
	763, 0, 310, 347, 1013, 0, 0, 407, 0, 460,
	464, 0, 553, 1033, 0, 4634, 0, 318, 1026, 768,
	0, 774, 1027, 780, 1025, 529, 0, 770, 771, 776,
	249, 1103, 552, 623, 0, 0, 0, 1019, 0, 0,
	0, 0, 0, 0, 0, 257, 0, 0, 0, 0,
	772, 769, 773, 779, 767, 777, 764, 775, 0, 451,
	385, 602, 478, 256, 302, 289, 331, 373, 485, 0,
	0, 363, 533, 298, 387, 0, 277, 420, 1056, 509,
	384, 0, 492, 512, 0, 404, 283, 443, 499, 500,
	761, 766, 0, 782, 0, 287, 288, 409, 269, 417,
	614, 580, 472, 430, 428, 0, 395, 452, 609, 1014,
	0, 317, 0, 312, 408, 548, 275, 527, 446, 413,
	367, 475, 504, 314, 299, 300, 343, 445, 333, 285,
	538, 1084, 1086, 1082, 1078, 1079, 1044, 1045, 1085, 1081,
	334, 1080, 0, 546, 1089, 1100, 1097, 1102, 1088, 1101,
	1095, 883, 593, 1092, 1091, 1105, 1098, 1099, 539, 1104,
	1043, 1096, 1094, 1093, 1090, 0, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 245, 0, 246, 247,
	248, 250, 251, 252, 760, 253, 254, 255, 258, 259,
	260, 262, 622, 263, 264, 265, 266, 267, 268, 1068,
	1046, 270, 271, 272, 273, 274, 276, 278, 279, 280,
	281, 282, 284, 286, 1057, 1047, 1052, 1058, 1048, 1049,
	1053, 290, 291, 292, 293, 294, 295, 0, 296, 297,
	301, 303, 304, 305, 306, 307, 308, 311, 0, 313,
	315, 0, 316, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 1060, 328, 0, 329, 330, 332, 0,
	335, 336, 337, 338, 339, 0, 340, 1069, 1017, 341,
	342, 344, 345, 346, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 362,
	364, 0, 365, 366, 369, 370, 371, 372, 0, 374,
	1070, 0, 375, 376, 377, 1050, 1051, 378, 379, 380,
	381, 382, 383, 386, 1083, 388, 389, 390, 391, 392,
	393, 394, 624, 396, 397, 398, 399, 400, 401, 402,
	586, 1061, 403, 405, 406, 1067, 590, 1062, 778, 421,
	422, 423, 424, 425, 426, 427, 429, 0, 431, 432,
	433, 1063, 434, 435, 436, 437, 0, 438, 439, 440,
	441, 442, 444, 447, 448, 449, 450, 0, 453, 454,
	455, 456, 457, 458, 459, 461, 462, 463, 465, 466,
	467, 625, 468, 469, 470, 471, 2763, 473, 474, 626,
	476, 477, 479, 480, 481, 482, 483, 484, 635, 1054,
	486, 596, 487, 488, 489, 490, 491, 0, 493, 494,
	495, 496, 497, 498, 501, 502, 503, 505, 506, 1064,
	507, 508, 1055, 510, 511, 781, 513, 514, 515, 516,
	517, 0, 636, 518, 1065, 519, 1066, 520, 521, 522,
	523, 524, 525, 526, 528, 0, 0, 530, 531, 532,
	534, 535, 536, 537, 540, 541, 542, 543, 544, 0,
	545, 547, 549, 627, 604, 1071, 1072, 1075, 1073, 1074,
	1076, 1077, 1087, 550, 551, 567, 418, 412, 368, 410,
	411, 415, 416, 419, 0, 0, 0, 1059, 0, 0,
	0, 0, 0, 818, 0, 1023, 935, 0, 1028, 1029,
	1018, 1037, 1008, 0, 0, 0, 2603, 0, 0, 2760,
	2761, 244, 0, 261, 763, 0, 310, 347, 1013, 0,
	0, 407, 0, 460, 464, 0, 553, 1033, 0, 0,
	0, 318, 1026, 768, 0, 774, 1027, 780, 1025, 529,
	0, 770, 771, 776, 249, 1103, 552, 623, 0, 0,
	0, 1019, 0, 0, 0, 0, 0, 0, 0, 257,
	0, 0, 0, 0, 772, 769, 773, 779, 767, 777,
	764, 775, 0, 451, 385, 602, 478, 256, 302, 289,
	331, 373, 485, 0, 0, 363, 533, 298, 387, 0,
	277, 420, 1056, 509, 384, 0, 492, 512, 0, 404,
	283, 443, 499, 500, 761, 766, 0, 782, 0, 287,
	288, 409, 269, 417, 614, 580, 472, 430, 428, 0,
	395, 452, 609, 1014, 0, 317, 0, 312, 408, 548,
	275, 527, 446, 413, 367, 475, 504, 314, 299, 300,
	343, 445, 333, 285, 538, 1084, 1086, 1082, 1078, 1079,
	1044, 1045, 1085, 1081, 334, 1080, 0, 546, 1089, 1100,
	1097, 1102, 1088, 1101, 1095, 883, 593, 1092, 1091, 1105,
	1098, 1099, 539, 1104, 1043, 1096, 1094, 1093, 1090, 0,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	245, 0, 246, 247, 248, 250, 251, 252, 760, 253,
	254, 255, 258, 259, 260, 262, 622, 263, 264, 265,
	266, 267, 268, 1068, 1046, 270, 271, 272, 273, 274,
	276, 278, 279, 280, 281, 282, 284, 286, 1057, 1047,
	1052, 1058, 1048, 1049, 1053, 290, 291, 292, 293, 294,
	295, 0, 296, 297, 301, 303, 304, 305, 306, 307,
	308, 311, 0, 313, 315, 0, 316, 319, 0, 320,
	321, 322, 323, 324, 325, 326, 327, 1060, 328, 0,
	329, 330, 332, 0, 335, 336, 337, 338, 339, 0,
	340, 1069, 1017, 341, 342, 344, 345, 346, 348, 349,
	350, 351, 352, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 362, 364, 0, 365, 366, 369, 370,
	371, 372, 0, 374, 1070, 0, 375, 376, 377, 1050,
	1051, 378, 379, 380, 381, 382, 383, 386, 1083, 388,
	389, 390, 391, 392, 393, 394, 624, 396, 397, 398,
	399, 400, 401, 402, 586, 1061, 403, 405, 406, 1067,
	590, 1062, 778, 421, 422, 423, 424, 425, 426, 427,
	429, 0, 431, 432, 433, 1063, 434, 435, 436, 437,
	0, 438, 439, 440, 441, 442, 444, 447, 448, 449,
	450, 0, 453, 454, 455, 456, 457, 458, 459, 461,
	462, 463, 465, 466, 467, 625, 468, 469, 470, 471,
	2763, 473, 474, 626, 476, 477, 479, 480, 481, 482,
	483, 484, 635, 1054, 486, 596, 487, 488, 489, 490,
	491, 0, 493, 494, 495, 496, 497, 498, 501, 502,
	503, 505, 506, 1064, 507, 508, 1055, 510, 511, 781,
	513, 514, 515, 516, 517, 0, 636, 518, 1065, 519,
	1066, 520, 521, 522, 523, 524, 525, 526, 528, 0,
	0, 530, 531, 532, 534, 535, 536, 537, 540, 541,
	542, 543, 544, 0, 545, 547, 549, 627, 604, 1071,
	1072, 1075, 1073, 1074, 1076, 1077, 1087, 550, 551, 567,
	418, 412, 368, 410, 411, 415, 416, 419, 0, 0,
	0, 1059, 0, 0, 0, 0, 0, 818, 0, 1023,
	935, 0, 1028, 1029, 0, 1037, 1008, 0, 0, 0,
	2603, 0, 0, 2760, 2761, 244, 0, 261, 763, 0,
	310, 347, 1013, 0, 0, 407, 0, 460, 464, 0,
	553, 1033, 0, 0, 0, 318, 1026, 768, 0, 774,
	1027, 780, 1025, 529, 0, 770, 771, 776, 249, 1103,
	552, 623, 0, 0, 0, 414, 0, 0, 0, 0,
	0, 0, 0, 257, 0, 0, 0, 0, 772, 769,
	773, 779, 767, 777, 764, 775, 0, 451, 385, 602,
	478, 256, 302, 289, 331, 373, 485, 0, 0, 363,
	533, 298, 387, 0, 277, 420, 1056, 509, 384, 0,
	492, 512, 0, 404, 283, 443, 499, 500, 761, 766,
	0, 782, 0, 287, 288, 409, 269, 417, 614, 580,
	2602, 430, 428, 0, 395, 452, 609, 1014, 0, 317,
	0, 312, 408, 548, 275, 527, 446, 413, 367, 475,
	504, 314, 299, 300, 343, 445, 333, 285, 538, 1084,
	1086, 1082, 1078, 1079, 1044, 1045, 1085, 1081, 334, 1080,
	0, 546, 1089, 1100, 1097, 1102, 1088, 1101, 1095, 883,
	593, 1092, 1091, 1105, 1098, 1099, 539, 1104, 1043, 1096,
	1094, 1093, 1090, 0, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 245, 0, 246, 247, 248, 250,
	251, 252, 760, 253, 254, 255, 258, 259, 260, 262,
	622, 263, 264, 265, 266, 267, 268, 1068, 1046, 270,
	271, 272, 273, 274, 276, 278, 279, 280, 281, 282,
	284, 286, 1057, 1047, 1052, 1058, 1048, 1049, 1053, 290,
	291, 292, 293, 294, 295, 0, 296, 297, 301, 303,
	304, 305, 306, 307, 308, 311, 0, 313, 315, 0,
	316, 319, 0, 320, 321, 322, 323, 324, 325, 326,
	327, 1060, 328, 0, 329, 330, 332, 0, 335, 336,
	337, 338, 339, 0, 340, 1069, 1017, 341, 342, 344,
	345, 346, 348, 349, 350, 351, 352, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 362, 364, 0,
	365, 366, 369, 370, 371, 372, 0, 374, 1070, 0,
	375, 376, 377, 1050, 1051, 378, 379, 380, 381, 382,
	383, 386, 1083, 388, 389, 390, 391, 392, 393, 394,
	624, 396, 397, 398, 399, 400, 401, 402, 586, 1061,
	403, 405, 406, 1067, 590, 1062, 778, 421, 422, 423,
	424, 425, 426, 427, 429, 0, 431, 432, 433, 1063,
	434, 435, 436, 437, 0, 438, 439, 440, 441, 442,
	444, 447, 448, 449, 450, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 462, 463, 465, 466, 467, 625,
	468, 469, 470, 471, 2601, 473, 474, 626, 476, 477,
	479, 480, 481, 482, 483, 484, 635, 1054, 486, 596,
	487, 488, 489, 490, 491, 0, 493, 494, 495, 496,
	497, 498, 501, 502, 503, 505, 506, 1064, 507, 508,
	1055, 510, 511, 781, 513, 514, 515, 516, 517, 0,
	636, 518, 1065, 519, 1066, 520, 521, 522, 523, 524,
	525, 526, 528, 0, 0, 530, 531, 532, 534, 535,
	536, 537, 540, 541, 542, 543, 544, 0, 545, 547,
	549, 627, 604, 1071, 1072, 1075, 1073, 1074, 1076, 1077,
	1087, 550, 551, 567, 418, 412, 368, 410, 411, 415,
	416, 419, 0, 0, 0, 1059, 0, 0, 0, 0,
	0, 818, 0, 1023, 935, 0, 1028, 1029, 1018, 1037,
	1008, 0, 0, 0, 2603, 0, 0, 2599, 2600, 244,
	0, 261, 763, 0, 310, 347, 1013, 0, 1001, 407,
	0, 460, 464, 0, 0, 1033, 0, 1005, 0, 318,
	1026, 0, 0, 0, 1027, 0, 1025, 529, 0, 0,
	0, 0, 249, 1103, 552, 623, 0, 0, 0, 1019,
	0, 0, 0, 0, 0, 0, 0, 257, 0, 0,
	0, 0, 772, 769, 773, 779, 767, 777, 764, 775,
	0, 451, 385, 602, 478, 256, 302, 289, 331, 373,
	485, 0, 0, 363, 533, 298, 387, 0, 277, 420,
	1056, 509, 384, 0, 492, 512, 0, 404, 283, 443,
	499, 500, 761, 766, 0, 782, 0, 5010, 288, 409,
	269, 417, 614, 580, 472, 430, 428, 0, 395, 452,
	609, 1014, 0, 317, 0, 312, 408, 548, 275, 527,
	446, 413, 367, 475, 504, 314, 299, 300, 343, 445,
	333, 285, 538, 1084, 1086, 1082, 1078, 1079, 1044, 1045,
	1085, 1081, 334, 1080, 0, 546, 1089, 1100, 1097, 1102,
	1088, 1101, 1095, 883, 593, 1092, 1091, 1105, 1098, 1099,
	539, 1104, 1043, 1096, 1094, 1093, 1090, 0, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 245, 0,
	246, 247, 248, 250, 251, 252, 760, 253, 254, 255,
	258, 259, 260, 262, 622, 263, 264, 265, 266, 267,
	268, 1068, 1046, 270, 271, 272, 273, 274, 276, 278,
	279, 280, 281, 282, 284, 286, 1057, 1047, 1052, 1058,
	1048, 1049, 1053, 290, 291, 292, 293, 294, 295, 0,
	296, 297, 301, 303, 304, 305, 306, 307, 308, 311,
	0, 313, 315, 0, 316, 319, 0, 320, 321, 322,
	323, 324, 325, 326, 327, 1060, 328, 0, 329, 330,
	332, 0, 335, 336, 337, 338, 339, 0, 340, 1069,
	1017, 341, 342, 344, 345, 346, 348, 349, 350, 351,
	352, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 362, 364, 0, 365, 366, 369, 370, 371, 372,
	0, 374, 1070, 0, 375, 376, 377, 1050, 1051, 378,
	379, 380, 381, 382, 383, 386, 1083, 388, 389, 390,
	391, 392, 393, 394, 624, 396, 397, 398, 399, 400,
	401, 402, 586, 1061, 403, 405, 406, 1067, 590, 1062,
	778, 421, 422, 423, 424, 425, 426, 427, 429, 0,
	431, 432, 433, 1063, 434, 435, 436, 437, 0, 438,
	439, 440, 441, 442, 444, 447, 448, 449, 450, 0,
	453, 454, 455, 456, 457, 458, 459, 461, 462, 463,
	465, 466, 467, 625, 468, 469, 470, 471, 1020, 473,
	474, 626, 476, 477, 479, 480, 481, 482, 483, 484,
	635, 1054, 486, 596, 487, 488, 489, 490, 491, 0,
	493, 494, 495, 496, 497, 498, 501, 502, 503, 505,
	506, 1064, 507, 508, 1055, 510, 511, 781, 513, 514,
	515, 516, 517, 0, 636, 518, 1065, 519, 1066, 520,
	521, 522, 523, 524, 5009, 526, 528, 0, 1004, 530,
	531, 532, 534, 535, 536, 537, 540, 541, 542, 543,
	544, 0, 545, 547, 549, 627, 604, 1071, 1072, 1075,
	1073, 1074, 1076, 1077, 1087, 550, 551, 567, 418, 412,
	368, 410, 411, 415, 416, 419, 0, 0, 0, 1059,
	0, 0, 0, 0, 0, 818, 0, 1023, 935, 0,
	1028, 1029, 0, 1037, 1008, 0, 0, 0, 1009, 0,
	0, 998, 999, 244, 0, 261, 763, 0, 310, 347,
	1013, 0, 0, 407, 0, 460, 464, 0, 553, 1033,
	0, 0, 0, 318, 1026, 768, 0, 774, 1027, 780,
	1025, 529, 0, 770, 771, 776, 249, 1103, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 772, 769, 773, 779,
	767, 777, 764, 775, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 1056, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 761, 766, 0, 782,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 1014, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 1084, 1086, 1082,
	1078, 1079, 1044, 1045, 1085, 1081, 334, 1080, 0, 546,
	1089, 1100, 1097, 1102, 1088, 1101, 1095, 883, 593, 1092,
	1091, 1105, 1098, 1099, 539, 1104, 1043, 1096, 1094, 1093,
	1090, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	760, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 1068, 1046, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	1057, 1047, 1052, 1058, 1048, 1049, 1053, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 1060,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 1069, 1017, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 1070, 0, 375, 376,
	377, 1050, 1051, 378, 379, 380, 381, 382, 383, 386,
	1083, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 1061, 403, 405,
	406, 1067, 590, 1062, 778, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 1063, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 2763, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 1054, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 1064, 507, 508, 1055, 510,
	511, 781, 513, 514, 515, 516, 517, 0, 636, 518,
	1065, 519, 1066, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 1071, 1072, 1075, 1073, 1074, 1076, 1077, 1087, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	0, 0, 0, 1059, 0, 818, 0, 1023, 935, 0,
	1028, 1029, 0, 1037, 1008, 0, 0, 0, 0, 0,
	0, 0, 2603, 244, 0, 261, 763, 0, 310, 347,
	1013, 0, 0, 407, 0, 460, 464, 0, 553, 1033,
	0, 0, 0, 318, 1026, 768, 0, 774, 1027, 780,
	1025, 529, 0, 770, 771, 776, 249, 1103, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 772, 769, 773, 779,
	767, 777, 764, 775, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 1056, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 761, 766, 0, 782,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 3998, 1014, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 1084, 1086, 1082,
	1078, 1079, 1044, 1045, 1085, 1081, 334, 1080, 0, 546,
	1089, 1100, 1097, 1102, 1088, 1101, 1095, 883, 593, 1092,
	1091, 1105, 1098, 1099, 539, 1104, 1043, 1096, 1094, 1093,
	1090, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	760, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 1068, 1046, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	1057, 1047, 1052, 1058, 1048, 1049, 1053, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 1060,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 1069, 1017, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 1070, 0, 375, 376,
	377, 1050, 1051, 378, 379, 380, 381, 382, 383, 386,
	1083, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 1061, 403, 405,
	406, 1067, 590, 1062, 778, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 1063, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 2763, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 1054, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 1064, 507, 508, 1055, 510,
	511, 781, 513, 514, 515, 516, 517, 0, 636, 518,
	1065, 519, 1066, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 1071, 1072, 1075, 1073, 1074, 1076, 1077, 1087, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	0, 0, 0, 1059, 0, 818, 0, 1023, 935, 0,
	1028, 1029, 0, 1037, 1008, 0, 0, 0, 0, 0,
	0, 0, 2603, 244, 0, 261, 763, 0, 310, 347,
	1013, 0, 0, 407, 0, 460, 464, 0, 553, 1033,
	0, 0, 0, 318, 1026, 768, 0, 774, 1027, 780,
	1025, 529, 0, 770, 771, 776, 249, 1103, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 3939, 0, 0, 0, 0, 772, 769, 773, 779,
	767, 777, 764, 775, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 1056, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 761, 766, 0, 782,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 1014, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 1084, 1086, 1082,
	1078, 1079, 1044, 1045, 1085, 1081, 334, 1080, 0, 546,
	1089, 1100, 1097, 1102, 1088, 1101, 1095, 883, 593, 1092,
	1091, 1105, 1098, 1099, 539, 1104, 1043, 1096, 1094, 1093,
	1090, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	760, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 1068, 1046, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	1057, 1047, 1052, 1058, 1048, 1049, 1053, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 1060,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 1069, 1017, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 1070, 0, 375, 376,
	377, 1050, 1051, 378, 379, 380, 381, 382, 383, 386,
	1083, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 1061, 403, 405,
	406, 1067, 590, 1062, 778, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 1063, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 2763, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 1054, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 1064, 507, 508, 1055, 510,
	511, 781, 513, 514, 515, 516, 517, 0, 636, 518,
	1065, 519, 1066, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 1071, 1072, 1075, 1073, 1074, 1076, 1077, 1087, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	818, 0, 0, 1059, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 0,
	261, 763, 2603, 310, 347, 562, 0, 0, 407, 0,
	460, 464, 106, 553, 0, 0, 0, 0, 318, 0,
	768, 0, 774, 0, 780, 0, 529, 0, 770, 771,
	776, 249, 637, 552, 623, 0, 0, 0, 414, 103,
	0, 0, 674, 104, 0, 0, 257, 0, 0, 0,
	0, 772, 769, 773, 779, 767, 777, 764, 775, 0,
	451, 385, 2013, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 1056,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 761, 766, 0, 782, 0, 287, 288, 409, 269,
	417, 2851, 2852, 2850, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 1084, 1086, 1082, 1078, 1079, 1044, 1045, 1085,
	1081, 334, 2858, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 760, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	1068, 1046, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 1057, 1047, 1052, 1058, 1048,
	1049, 1053, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 1060, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 1069, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 2843,
	374, 1070, 0, 375, 376, 377, 1050, 1051, 378, 379,
	380, 381, 382, 383, 386, 1083, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 1061, 403, 405, 406, 1067, 590, 1062, 778,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 1063, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	1054, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	1064, 507, 508, 1055, 510, 511, 781, 513, 514, 515,
	516, 517, 0, 636, 518, 1065, 519, 1066, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 1071, 1072, 1075, 1073,
	1074, 1076, 1077, 1087, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 0, 0, 0, 1059, 0,
	756, 0, 1435, 935, 107, 0, 0, 0, 1037, 0,
	0, 0, 0, 0, 0, 0, 0, 2845, 244, 0,
	261, 763, 0, 310, 347, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 4886, 0, 318, 1432,
	768, 0, 774, 0, 780, 1431, 529, 0, 770, 771,
	776, 249, 637, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	1433, 772, 769, 773, 779, 767, 777, 764, 775, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 761, 766, 0, 782, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 760, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 762, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 765, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 778,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 781, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 818, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4887, 0, 0,
	1436, 1437, 4885, 244, 0, 261, 763, 0, 310, 347,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 768, 0, 774, 0, 780,
	0, 529, 0, 770, 771, 776, 249, 637, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 674, 0, 0,
	0, 257, 0, 0, 0, 0, 772, 769, 773, 779,
	767, 777, 764, 775, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 1056, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 761, 766, 0, 782,
	0, 287, 288, 409, 269, 417, 2851, 2852, 2850, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 1084, 1086, 1082,
	1078, 1079, 1044, 1045, 1085, 1081, 334, 2858, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	760, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 1068, 1046, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	1057, 1047, 1052, 1058, 1048, 1049, 1053, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 1060,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 1069, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 2843, 374, 1070, 0, 375, 376,
	377, 1050, 1051, 378, 379, 380, 381, 382, 383, 386,
	1083, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 1061, 403, 405,
	406, 1067, 590, 1062, 778, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 1063, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 1054, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 1064, 507, 508, 1055, 510,
	511, 781, 513, 514, 515, 516, 517, 0, 636, 518,
	1065, 519, 1066, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 1071, 1072, 1075, 1073, 1074, 1076, 1077, 1087, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	818, 0, 0, 1059, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 0,
	261, 763, 2845, 310, 347, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	768, 0, 774, 0, 780, 0, 529, 0, 770, 771,
	776, 249, 637, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 772, 769, 773, 779, 767, 777, 764, 775, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 1056,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 761, 766, 0, 782, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 1084, 1086, 1082, 1078, 1079, 1044, 1045, 1085,
	1081, 334, 2858, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 760, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	1068, 1046, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 1057, 1047, 1052, 1058, 1048,
	1049, 1053, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 1060, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 1069, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 1070, 0, 375, 376, 377, 1050, 1051, 378, 379,
	380, 381, 382, 383, 386, 1083, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 1061, 403, 405, 406, 1067, 590, 1062, 778,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 1063, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	1054, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	1064, 507, 508, 1055, 510, 511, 781, 513, 514, 515,
	516, 517, 0, 636, 518, 1065, 519, 1066, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 1071, 1072, 1075, 1073,
	1074, 1076, 1077, 1087, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 818, 0, 0, 1059, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 0, 261, 763, 4148, 310, 347,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 768, 0, 774, 0, 780,
	0, 529, 0, 770, 771, 776, 249, 637, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 772, 769, 773, 779,
	767, 777, 764, 775, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 1056, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 761, 766, 0, 782,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 1084, 1086, 1082,
	1078, 1079, 1044, 1045, 1085, 1081, 334, 2858, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	760, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 1068, 1046, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	1057, 1047, 1052, 1058, 1048, 1049, 1053, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 1060,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 1069, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 1070, 0, 375, 376,
	377, 1050, 1051, 378, 379, 380, 381, 382, 383, 386,
	1083, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 1061, 403, 405,
	406, 1067, 590, 1062, 778, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 1063, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 1054, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 1064, 507, 508, 1055, 510,
	511, 781, 513, 514, 515, 516, 517, 0, 636, 518,
	1065, 519, 1066, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 1071, 1072, 1075, 1073, 1074, 1076, 1077, 1087, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	818, 0, 0, 1059, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 0,
	261, 763, 5077, 310, 347, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	768, 0, 774, 0, 780, 0, 529, 0, 770, 771,
	776, 249, 637, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 772, 769, 773, 779, 767, 777, 764, 775, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 1056,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 761, 766, 0, 782, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 1084, 1086, 1082, 1078, 1079, 1044, 1045, 1085,
	1081, 334, 2858, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 760, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	1068, 1046, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 1057, 1047, 1052, 1058, 1048,
	1049, 1053, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 1060, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 1069, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 1070, 0, 375, 376, 377, 1050, 1051, 378, 379,
	380, 381, 382, 383, 386, 1083, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 1061, 403, 405, 406, 1067, 590, 1062, 778,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 1063, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	1054, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	1064, 507, 508, 1055, 510, 511, 781, 513, 514, 515,
	516, 517, 0, 636, 518, 1065, 519, 1066, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 1071, 1072, 1075, 1073,
	1074, 1076, 1077, 1087, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 818, 0, 0, 1059, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 0, 261, 763, 2984, 310, 347,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 768, 0, 774, 0, 780,
	0, 529, 0, 770, 771, 776, 249, 637, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 772, 769, 773, 779,
	767, 777, 764, 775, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 1056, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 761, 766, 0, 782,
	0, 287, 288, 409, 269, 417, 2851, 2852, 2850, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 1084, 1086, 1082,
	1078, 1079, 1044, 1045, 1085, 1081, 334, 2858, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	760, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 1068, 1046, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	1057, 1047, 1052, 1058, 1048, 1049, 1053, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 1060,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 1069, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 1070, 0, 375, 376,
	377, 1050, 1051, 378, 379, 380, 381, 382, 383, 386,
	1083, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 1061, 403, 405,
	406, 1067, 590, 1062, 778, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 1063, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 1054, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 1064, 507, 508, 1055, 510,
	511, 781, 513, 514, 515, 516, 517, 0, 636, 518,
	1065, 519, 1066, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 1071, 1072, 1075, 1073, 1074, 1076, 1077, 1087, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	0, 0, 0, 1059, 0, 756, 0, 1435, 935, 0,
	0, 0, 0, 1037, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 244, 0, 261, 763, 0, 310, 347,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 1441, 0, 318, 1432, 768, 0, 774, 0, 780,
	1431, 529, 0, 770, 771, 776, 249, 637, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 1433, 772, 769, 773, 779,
	767, 777, 764, 775, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 761, 766, 0, 782,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	760, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 559, 762, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 765, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 778, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 0, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 510,
	511, 781, 513, 514, 515, 516, 517, 0, 636, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 756,
	0, 1435, 935, 0, 0, 0, 0, 1037, 0, 0,
	0, 0, 0, 0, 0, 1436, 1437, 244, 0, 261,
	763, 0, 310, 347, 562, 0, 0, 407, 0, 460,
	464, 0, 553, 0, 0, 1427, 0, 318, 1432, 768,
	0, 774, 0, 780, 1431, 529, 0, 770, 771, 776,
	249, 637, 552, 623, 0, 0, 0, 414, 0, 0,
	0, 0, 0, 0, 0, 257, 0, 0, 0, 1433,
	772, 769, 773, 779, 767, 777, 764, 775, 0, 451,
	385, 602, 478, 256, 302, 289, 331, 373, 485, 0,
	0, 363, 533, 298, 387, 0, 277, 420, 0, 509,
	384, 0, 492, 512, 0, 404, 283, 443, 499, 500,
	761, 766, 0, 782, 0, 287, 288, 409, 269, 417,
	614, 580, 472, 430, 428, 0, 395, 452, 609, 0,
	0, 317, 0, 312, 408, 548, 275, 527, 446, 413,
	367, 475, 504, 314, 299, 300, 343, 445, 333, 285,
	538, 577, 581, 579, 575, 572, 576, 573, 574, 578,
	334, 571, 0, 546, 555, 589, 569, 597, 554, 594,
	564, 309, 593, 558, 557, 603, 584, 585, 539, 599,
	570, 568, 561, 560, 556, 0, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 245, 0, 246, 247,
	248, 250, 251, 252, 760, 253, 254, 255, 258, 259,
	260, 262, 622, 263, 264, 265, 266, 267, 268, 559,
	762, 270, 271, 272, 273, 274, 276, 278, 279, 280,
	281, 282, 284, 286, 0, 0, 0, 765, 0, 0,
	0, 290, 291, 292, 293, 294, 295, 0, 296, 297,
	301, 303, 304, 305, 306, 307, 308, 311, 0, 313,
	315, 0, 316, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 563, 328, 0, 329, 330, 332, 0,
	335, 336, 337, 338, 339, 0, 340, 565, 566, 341,
	342, 344, 345, 346, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 362,
	364, 0, 365, 366, 369, 370, 371, 372, 0, 374,
	582, 0, 375, 376, 377, 0, 0, 378, 379, 380,
	381, 382, 383, 386, 583, 388, 389, 390, 391, 392,
	393, 394, 624, 396, 397, 398, 399, 400, 401, 402,
	586, 587, 403, 405, 406, 588, 590, 591, 778, 421,
	422, 423, 424, 425, 426, 427, 429, 0, 431, 432,
	433, 592, 434, 435, 436, 437, 0, 438, 439, 440,
	441, 442, 444, 447, 448, 449, 450, 0, 453, 454,
	455, 456, 457, 458, 459, 461, 462, 463, 465, 466,
	467, 625, 468, 469, 470, 471, 595, 473, 474, 626,
	476, 477, 479, 480, 481, 482, 483, 484, 635, 0,
	486, 596, 487, 488, 489, 490, 491, 0, 493, 494,
	495, 496, 497, 498, 501, 502, 503, 505, 506, 598,
	507, 508, 0, 510, 511, 781, 513, 514, 515, 516,
	517, 0, 636, 518, 600, 519, 601, 520, 521, 522,
	523, 524, 525, 526, 528, 0, 0, 530, 531, 532,
	534, 535, 536, 537, 540, 541, 542, 543, 544, 0,
	545, 547, 549, 627, 604, 605, 606, 607, 608, 610,
	611, 612, 613, 550, 551, 567, 418, 412, 368, 410,
	411, 415, 416, 419, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 756, 0, 1435, 935, 0, 0, 0,
	0, 1037, 0, 0, 0, 0, 0, 0, 0, 1436,
	1437, 244, 0, 261, 763, 0, 310, 347, 562, 0,
	0, 407, 0, 460, 464, 0, 553, 0, 0, 0,
	0, 318, 1432, 768, 0, 774, 0, 780, 1431, 529,
	0, 770, 771, 776, 249, 637, 552, 623, 0, 0,
	0, 414, 0, 0, 0, 0, 0, 0, 0, 257,
	0, 0, 0, 1433, 772, 769, 773, 779, 767, 777,
	764, 775, 0, 451, 385, 602, 478, 256, 302, 289,
	331, 373, 485, 0, 0, 363, 533, 298, 387, 0,
	277, 420, 0, 509, 384, 0, 492, 512, 0, 404,
	283, 443, 499, 500, 761, 766, 0, 782, 0, 287,
	288, 409, 269, 417, 614, 580, 472, 430, 428, 0,
	395, 452, 609, 0, 0, 317, 0, 312, 408, 548,
	275, 527, 446, 413, 367, 475, 504, 314, 299, 300,
	343, 445, 333, 285, 538, 577, 581, 579, 575, 572,
	576, 573, 574, 578, 334, 571, 0, 546, 555, 589,
	569, 597, 554, 594, 564, 309, 593, 558, 557, 603,
	584, 585, 539, 599, 570, 568, 561, 560, 556, 0,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	245, 0, 246, 247, 248, 250, 251, 252, 760, 253,
	254, 255, 258, 259, 260, 262, 622, 263, 264, 265,
	266, 267, 268, 559, 762, 270, 271, 272, 273, 274,
	276, 278, 279, 280, 281, 282, 284, 286, 0, 0,
	0, 765, 0, 0, 0, 290, 291, 292, 293, 294,
	295, 0, 296, 297, 301, 303, 304, 305, 306, 307,
	308, 311, 0, 313, 315, 0, 316, 319, 0, 320,
	321, 322, 323, 324, 325, 326, 327, 563, 328, 0,
	329, 330, 332, 0, 335, 336, 337, 338, 339, 0,
	340, 565, 566, 341, 342, 344, 345, 346, 348, 349,
	350, 351, 352, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 362, 364, 0, 365, 366, 369, 370,
	371, 372, 0, 374, 582, 0, 375, 376, 377, 0,
	0, 378, 379, 380, 381, 382, 383, 386, 583, 388,
	389, 390, 391, 392, 393, 394, 624, 396, 397, 398,
	399, 400, 401, 402, 586, 587, 403, 405, 406, 588,
	590, 591, 778, 421, 422, 423, 424, 425, 426, 427,
	429, 0, 431, 432, 433, 592, 434, 435, 436, 437,
	0, 438, 439, 440, 441, 442, 444, 447, 448, 449,
	450, 0, 453, 454, 455, 456, 457, 458, 459, 461,
	462, 463, 465, 466, 467, 625, 468, 469, 470, 471,
	595, 473, 474, 626, 476, 477, 479, 480, 481, 482,
	483, 484, 635, 0, 486, 596, 487, 488, 489, 490,
	491, 0, 493, 494, 495, 496, 497, 498, 501, 502,
	503, 505, 506, 598, 507, 508, 0, 510, 511, 781,
	513, 514, 515, 516, 517, 0, 636, 518, 600, 519,
	601, 520, 521, 522, 523, 524, 525, 526, 528, 0,
	0, 530, 531, 532, 534, 535, 536, 537, 540, 541,
	542, 543, 544, 0, 545, 547, 549, 627, 604, 605,
	606, 607, 608, 610, 611, 612, 613, 550, 551, 567,
	418, 412, 368, 410, 411, 415, 416, 419, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 818, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1436, 1437, 244, 0, 261, 763, 0,
	310, 347, 562, 0, 0, 407, 0, 460, 464, 0,
	553, 0, 0, 0, 0, 318, 0, 768, 0, 774,
	0, 780, 0, 529, 0, 770, 771, 776, 249, 637,
	552, 623, 0, 0, 0, 414, 0, 0, 0, 0,
	0, 0, 0, 257, 0, 0, 0, 0, 772, 769,
	773, 779, 767, 777, 764, 775, 0, 451, 385, 602,
	478, 256, 302, 289, 331, 373, 485, 0, 0, 363,
	533, 298, 387, 0, 277, 420, 0, 509, 384, 0,
	492, 512, 0, 404, 283, 443, 499, 500, 761, 766,
	0, 782, 0, 287, 288, 409, 269, 417, 614, 580,
	472, 430, 428, 0, 395, 452, 609, 0, 0, 317,
	0, 312, 408, 548, 275, 527, 446, 413, 367, 475,
	504, 314, 299, 300, 343, 445, 333, 285, 538, 577,
	581, 579, 575, 572, 576, 573, 574, 578, 334, 571,
	0, 546, 555, 589, 569, 597, 554, 594, 564, 309,
	593, 558, 557, 603, 584, 585, 539, 599, 570, 568,
	561, 560, 556, 0, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 245, 0, 246, 247, 248, 250,
	251, 252, 760, 253, 254, 255, 258, 259, 260, 262,
	622, 263, 264, 265, 266, 267, 268, 559, 762, 270,
	271, 272, 273, 274, 276, 278, 279, 280, 281, 282,
	284, 286, 0, 0, 0, 765, 0, 0, 0, 290,
	291, 292, 293, 294, 295, 0, 296, 297, 301, 303,
	304, 305, 306, 307, 308, 311, 0, 313, 315, 0,
	316, 319, 0, 320, 321, 322, 323, 324, 325, 326,
	327, 563, 328, 0, 329, 330, 332, 0, 335, 336,
	337, 338, 339, 0, 340, 565, 566, 341, 342, 344,
	345, 346, 348, 349, 350, 351, 352, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 362, 364, 0,
	365, 366, 369, 370, 371, 372, 0, 374, 582, 0,
	375, 376, 377, 0, 0, 378, 379, 380, 381, 382,
	383, 386, 583, 388, 389, 390, 391, 392, 393, 394,
	624, 396, 397, 398, 399, 400, 401, 402, 586, 587,
	403, 405, 406, 588, 590, 591, 778, 421, 422, 423,
	424, 425, 426, 427, 429, 0, 431, 432, 433, 592,
	434, 435, 436, 437, 0, 438, 439, 440, 441, 442,
	444, 447, 448, 449, 450, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 462, 463, 465, 466, 467, 625,
	468, 469, 470, 471, 595, 473, 474, 626, 476, 477,
	479, 480, 481, 482, 483, 484, 635, 0, 486, 596,
	487, 488, 489, 490, 491, 0, 493, 494, 495, 496,
	497, 498, 501, 502, 503, 505, 506, 598, 507, 508,
	0, 510, 511, 781, 513, 514, 515, 516, 517, 0,
	636, 518, 600, 519, 601, 520, 521, 522, 523, 524,
	525, 526, 528, 0, 0, 530, 531, 532, 534, 535,
	536, 537, 540, 541, 542, 543, 544, 0, 545, 547,
	549, 627, 604, 605, 606, 607, 608, 610, 611, 612,
	613, 550, 551, 567, 418, 412, 368, 410, 411, 415,
	416, 419, 231, 0, 0, 0, 0, 0, 0, 725,
	0, 0, 0, 0, 0, 0, 736, 737, 738, 0,
	244, 0, 261, 0, 4788, 310, 347, 562, 0, 0,
	407, 0, 460, 464, 0, 553, 0, 0, 0, 0,
	318, 0, 0, 0, 0, 0, 0, 0, 529, 0,
	0, 0, 0, 249, 637, 552, 623, 0, 0, 0,
	414, 0, 0, 0, 0, 0, 0, 0, 257, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 451, 385, 602, 478, 256, 302, 289, 331,
	373, 485, 0, 0, 363, 533, 298, 387, 0, 277,
	420, 0, 509, 384, 0, 492, 512, 0, 404, 283,
	443, 499, 500, 0, 0, 0, 0, 0, 287, 288,
	409, 269, 417, 614, 580, 472, 430, 428, 0, 395,
	452, 609, 0, 0, 317, 0, 312, 408, 548, 275,
	527, 446, 413, 367, 475, 504, 314, 299, 300, 343,
	445, 333, 285, 538, 577, 581, 579, 575, 572, 576,
	573, 574, 578, 334, 571, 0, 546, 555, 589, 569,
	597, 554, 594, 564, 309, 593, 558, 557, 603, 584,
	585, 539, 599, 570, 568, 561, 560, 556, 0, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 245,
	0, 246, 247, 248, 250, 251, 252, 0, 253, 254,
	255, 258, 259, 260, 262, 622, 263, 264, 265, 266,
	267, 268, 559, 0, 270, 271, 272, 273, 274, 276,
	278, 279, 280, 281, 282, 284, 286, 0, 0, 0,
	0, 0, 0, 0, 290, 291, 292, 293, 294, 295,
	0, 296, 297, 301, 303, 304, 305, 306, 307, 308,
	311, 0, 313, 315, 0, 316, 319, 0, 320, 321,
	322, 323, 324, 325, 326, 327, 563, 328, 0, 329,
	330, 332, 0, 335, 336, 337, 338, 339, 0, 340,
	565, 566, 341, 342, 344, 345, 346, 348, 349, 350,
	351, 352, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 362, 364, 0, 365, 366, 369, 370, 371,
	372, 0, 374, 582, 0, 375, 376, 377, 0, 0,
	378, 379, 380, 381, 382, 383, 386, 583, 388, 389,
	390, 391, 392, 393, 394, 624, 396, 397, 398, 399,
	400, 401, 402, 586, 587, 403, 405, 406, 588, 590,
	591, 0, 421, 422, 423, 424, 425, 426, 427, 429,
	0, 431, 432, 433, 592, 434, 435, 436, 437, 0,
	438, 439, 440, 441, 442, 444, 447, 448, 449, 450,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 462,
	463, 465, 466, 467, 625, 468, 469, 470, 471, 595,
	473, 474, 626, 476, 477, 479, 480, 481, 482, 483,
	484, 635, 0, 486, 596, 487, 488, 489, 490, 491,
	0, 493, 494, 495, 496, 497, 498, 501, 502, 503,
	505, 506, 598, 507, 508, 0, 510, 511, 0, 513,
	514, 515, 516, 517, 0, 636, 518, 600, 519, 601,
	520, 521, 522, 523, 524, 525, 526, 528, 0, 0,
	530, 531, 532, 534, 535, 536, 537, 540, 541, 542,
	543, 544, 0, 545, 547, 549, 627, 604, 605, 606,
	607, 608, 610, 611, 612, 613, 550, 551, 567, 418,
	412, 368, 410, 411, 415, 416, 419, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 733, 734, 735, 0, 0, 0, 0,
	0, 231, 727, 728, 729, 730, 731, 732, 725, 0,
	0, 0, 0, 0, 0, 736, 737, 738, 0, 244,
	0, 261, 0, 0, 310, 347, 562, 0, 0, 407,
	0, 460, 464, 0, 553, 0, 0, 0, 0, 318,
	0, 0, 0, 0, 0, 0, 0, 529, 0, 0,
	0, 0, 249, 637, 552, 623, 0, 0, 0, 4761,
	0, 0, 0, 0, 0, 0, 0, 257, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 451, 385, 602, 478, 256, 302, 289, 331, 373,
	485, 0, 0, 363, 533, 298, 387, 0, 277, 420,
	0, 509, 384, 0, 492, 512, 0, 404, 283, 443,
	499, 500, 0, 0, 0, 0, 0, 287, 288, 409,
	269, 417, 614, 580, 472, 430, 428, 0, 395, 452,
	609, 0, 0, 317, 0, 312, 408, 548, 275, 527,
	446, 413, 367, 475, 504, 314, 299, 300, 343, 445,
	333, 285, 538, 577, 581, 579, 575, 572, 576, 573,
	574, 578, 334, 571, 0, 546, 555, 589, 569, 597,
	554, 594, 564, 309, 593, 558, 557, 603, 584, 585,
	539, 599, 570, 568, 561, 560, 556, 0, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 245, 0,
	246, 247, 248, 250, 251, 252, 0, 253, 254, 255,
	258, 259, 260, 262, 622, 263, 264, 265, 266, 267,
	268, 559, 0, 270, 271, 272, 273, 274, 276, 278,
	279, 280, 281, 282, 284, 286, 0, 0, 0, 0,
	0, 0, 0, 290, 291, 292, 293, 294, 295, 0,
	296, 297, 301, 303, 304, 305, 306, 307, 308, 311,
	0, 313, 315, 0, 316, 319, 0, 320, 321, 322,
	323, 324, 325, 326, 327, 563, 328, 0, 329, 330,
	332, 0, 335, 336, 337, 338, 339, 0, 340, 565,
	566, 341, 342, 344, 345, 346, 348, 349, 350, 351,
	352, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 362, 364, 0, 365, 366, 369, 370, 371, 372,
	0, 374, 582, 0, 375, 376, 377, 0, 0, 378,
	379, 380, 381, 382, 383, 386, 583, 388, 389, 390,
	391, 392, 393, 394, 624, 396, 397, 398, 399, 400,
	401, 402, 586, 587, 403, 405, 406, 588, 590, 591,
	0, 421, 422, 423, 424, 425, 426, 427, 429, 0,
	431, 432, 433, 592, 434, 435, 436, 437, 0, 438,
	439, 440, 441, 442, 444, 447, 448, 449, 450, 0,
	453, 454, 455, 456, 457, 458, 459, 461, 462, 463,
	465, 466, 467, 625, 468, 469, 470, 471, 595, 473,
	474, 626, 476, 477, 479, 480, 481, 482, 483, 484,
	635, 0, 486, 596, 487, 488, 489, 490, 491, 0,
	493, 494, 495, 496, 497, 498, 501, 502, 503, 505,
	506, 598, 507, 508, 0, 510, 511, 0, 513, 514,
	515, 516, 517, 0, 636, 518, 600, 519, 601, 520,
	521, 522, 523, 524, 525, 526, 528, 0, 0, 530,
	531, 532, 534, 535, 536, 537, 540, 541, 542, 543,
	544, 0, 545, 547, 549, 627, 604, 605, 606, 607,
	608, 610, 611, 612, 613, 550, 551, 567, 418, 412,
	368, 410, 411, 415, 416, 419, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 733, 734, 735, 0, 0, 0, 0, 0,
	231, 727, 728, 729, 730, 731, 732, 725, 0, 0,
	0, 0, 0, 0, 736, 737, 738, 0, 244, 0,
	261, 0, 0, 310, 347, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 529, 0, 0, 0,
	0, 249, 637, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 0, 0, 0, 0, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 0, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 3192, 267, 268,
	559, 0, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 3193, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 0,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 0, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 733, 734, 735, 0, 0, 0, 0, 0, 231,
	727, 728, 729, 730, 731, 732, 725, 0, 0, 0,
	0, 0, 0, 736, 737, 738, 0, 244, 0, 261,
	0, 0, 310, 347, 562, 0, 0, 407, 0, 460,
	464, 0, 553, 0, 0, 0, 0, 318, 0, 0,
	0, 0, 0, 0, 0, 529, 0, 0, 0, 0,
	249, 637, 552, 623, 0, 0, 0, 414, 0, 0,
	0, 0, 0, 0, 0, 257, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 451,
	385, 602, 478, 256, 302, 289, 331, 373, 485, 0,
	0, 363, 533, 298, 387, 0, 277, 420, 0, 509,
	384, 0, 492, 512, 0, 404, 283, 443, 499, 500,
	0, 0, 0, 0, 0, 287, 288, 409, 269, 417,
	614, 580, 472, 430, 428, 0, 395, 452, 609, 0,
	0, 317, 0, 312, 408, 548, 275, 527, 446, 413,
	367, 475, 504, 314, 299, 300, 343, 445, 333, 285,
	538, 577, 581, 579, 575, 572, 576, 573, 574, 578,
	334, 571, 0, 546, 555, 589, 569, 597, 554, 594,
	564, 309, 593, 558, 557, 603, 584, 585, 539, 599,
	570, 568, 561, 560, 556, 0, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 245, 0, 246, 247,
	248, 250, 251, 252, 0, 253, 254, 255, 258, 259,
	260, 262, 622, 263, 264, 265, 721, 267, 268, 559,
	0, 270, 271, 272, 273, 274, 276, 278, 279, 280,
	281, 282, 284, 286, 0, 0, 0, 0, 0, 0,
	0, 290, 291, 292, 293, 294, 295, 0, 296, 297,
	301, 303, 304, 305, 306, 307, 308, 311, 0, 313,
	315, 0, 316, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 563, 722, 0, 329, 330, 332, 0,
	335, 336, 337, 338, 339, 0, 340, 565, 566, 341,
	342, 344, 345, 346, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 362,
	364, 0, 365, 366, 369, 370, 371, 372, 0, 374,
	582, 0, 375, 376, 377, 0, 0, 378, 379, 380,
	381, 382, 383, 386, 583, 388, 389, 390, 391, 392,
	393, 394, 624, 396, 397, 398, 399, 400, 401, 402,
	586, 587, 403, 405, 406, 588, 590, 591, 0, 421,
	422, 423, 424, 425, 426, 427, 429, 0, 431, 432,
	433, 592, 434, 435, 436, 437, 0, 438, 439, 440,
	441, 442, 444, 447, 448, 449, 450, 0, 453, 454,
	455, 456, 457, 458, 459, 461, 462, 463, 465, 466,
	467, 625, 468, 469, 470, 471, 595, 473, 474, 626,
	476, 477, 479, 480, 481, 482, 483, 484, 635, 0,
	486, 596, 487, 488, 489, 490, 491, 0, 493, 494,
	495, 496, 497, 498, 501, 502, 503, 505, 506, 598,
	507, 508, 0, 510, 511, 0, 513, 514, 515, 516,
	517, 0, 636, 518, 600, 519, 601, 520, 521, 522,
	523, 524, 525, 526, 528, 0, 0, 530, 531, 532,
	534, 535, 536, 537, 540, 541, 542, 543, 544, 0,
	545, 547, 549, 627, 604, 605, 606, 607, 608, 610,
	611, 612, 613, 550, 551, 567, 418, 412, 368, 410,
	411, 415, 416, 419, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 818, 0, 0,
	733, 734, 735, 0, 0, 0, 0, 0, 0, 727,
	728, 729, 730, 731, 732, 244, 0, 261, 763, 0,
	310, 347, 562, 0, 0, 407, 0, 460, 464, 0,
	553, 0, 0, 0, 0, 318, 0, 768, 0, 774,
	0, 780, 0, 529, 0, 770, 771, 776, 249, 637,
	552, 623, 0, 0, 0, 414, 0, 0, 0, 0,
	0, 0, 0, 257, 0, 0, 0, 0, 772, 769,
	773, 779, 767, 777, 764, 775, 0, 451, 385, 602,
	478, 256, 302, 289, 331, 373, 485, 0, 0, 363,
	533, 298, 387, 0, 277, 420, 1056, 509, 384, 0,
	492, 512, 0, 404, 283, 443, 499, 500, 761, 766,
	0, 782, 0, 287, 288, 409, 269, 417, 614, 580,
	472, 430, 428, 0, 395, 452, 609, 0, 0, 317,
	0, 312, 408, 548, 275, 527, 446, 413, 367, 475,
	504, 314, 299, 300, 343, 445, 333, 285, 538, 1084,
	1086, 1082, 1078, 1079, 1044, 1045, 1085, 1081, 334, 2858,
	0, 546, 555, 589, 569, 597, 554, 594, 564, 309,
	593, 558, 557, 603, 584, 585, 539, 599, 570, 568,
	561, 560, 556, 0, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 245, 0, 246, 247, 248, 250,
	251, 252, 760, 253, 254, 255, 258, 259, 260, 262,
	622, 263, 264, 265, 266, 267, 268, 1068, 1046, 270,
	271, 272, 273, 274, 276, 278, 279, 280, 281, 282,
	284, 286, 1057, 1047, 1052, 1058, 1048, 1049, 1053, 290,
	291, 292, 293, 294, 295, 0, 296, 297, 301, 303,
	304, 305, 306, 307, 308, 311, 0, 313, 315, 0,
	316, 319, 0, 320, 321, 322, 323, 324, 325, 326,
	327, 1060, 328, 0, 329, 330, 332, 0, 335, 336,
	337, 338, 339, 0, 340, 1069, 566, 341, 342, 344,
	345, 346, 348, 349, 350, 351, 352, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 362, 364, 0,
	365, 366, 369, 370, 371, 372, 0, 374, 1070, 0,
	375, 376, 377, 1050, 1051, 378, 379, 380, 381, 382,
	383, 386, 1083, 388, 389, 390, 391, 392, 393, 394,
	624, 396, 397, 398, 399, 400, 401, 402, 586, 1061,
	403, 405, 406, 1067, 590, 1062, 778, 421, 422, 423,
	424, 425, 426, 427, 429, 0, 431, 432, 433, 1063,
	434, 435, 436, 437, 0, 438, 439, 440, 441, 442,
	444, 447, 448, 449, 450, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 462, 463, 465, 466, 467, 625,
	468, 469, 470, 471, 595, 473, 474, 626, 476, 477,
	479, 480, 481, 482, 483, 484, 635, 1054, 486, 596,
	487, 488, 489, 490, 491, 0, 493, 494, 495, 496,
	497, 498, 501, 502, 503, 505, 506, 1064, 507, 508,
	1055, 510, 511, 781, 513, 514, 515, 516, 517, 0,
	636, 518, 1065, 519, 1066, 520, 521, 522, 523, 524,
	525, 526, 528, 0, 0, 530, 531, 532, 534, 535,
	536, 537, 540, 541, 542, 543, 544, 0, 545, 547,
	549, 627, 604, 1071, 1072, 1075, 1073, 1074, 1076, 1077,
	1087, 550, 551, 567, 418, 412, 368, 410, 411, 415,
	416, 419, 0, 0, 818, 1059, 1023, 935, 0, 1028,
	1029, 0, 1037, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 244, 0, 261, 763, 0, 310, 347, 562,
	0, 0, 407, 0, 460, 464, 0, 553, 0, 0,
	0, 0, 318, 1026, 768, 0, 774, 1027, 780, 1025,
	529, 0, 770, 771, 776, 249, 1103, 552, 623, 0,
	0, 0, 414, 0, 0, 0, 0, 0, 0, 0,
	257, 0, 0, 0, 0, 772, 769, 773, 779, 767,
	777, 764, 775, 0, 451, 385, 602, 478, 256, 302,
	289, 331, 373, 485, 0, 0, 363, 533, 298, 387,
	0, 277, 420, 0, 509, 384, 0, 492, 512, 0,
	404, 283, 443, 499, 500, 761, 766, 0, 782, 0,
	287, 288, 409, 269, 417, 614, 580, 472, 430, 428,
	0, 395, 452, 609, 0, 0, 317, 0, 312, 408,
	548, 275, 527, 446, 413, 367, 475, 504, 314, 299,
	300, 343, 445, 333, 285, 538, 577, 581, 579, 575,
	572, 576, 573, 574, 578, 334, 5369, 0, 546, 1089,
	1100, 1097, 1102, 1088, 1101, 1095, 883, 593, 1092, 1091,
	1105, 1098, 1099, 539, 1104, 1043, 1096, 1094, 1093, 1090,
	0, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 245, 0, 246, 247, 248, 250, 251, 252, 760,
	253, 254, 255, 258, 259, 260, 262, 622, 263, 264,
	265, 266, 267, 268, 559, 762, 270, 271, 272, 273,
	274, 276, 278, 279, 280, 281, 282, 284, 286, 0,
	0, 0, 765, 0, 0, 0, 290, 291, 292, 293,
	294, 295, 0, 296, 297, 301, 303, 304, 305, 306,
	307, 308, 311, 0, 313, 315, 0, 316, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 563, 328,
	0, 329, 330, 332, 0, 335, 336, 337, 338, 339,
	0, 340, 565, 566, 341, 342, 344, 345, 346, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 362, 364, 0, 365, 366, 369,
	370, 371, 372, 0, 374, 582, 0, 375, 376, 377,
	0, 0, 378, 379, 380, 381, 382, 383, 386, 583,
	388, 389, 390, 391, 392, 393, 394, 624, 396, 397,
	398, 399, 400, 401, 402, 586, 587, 403, 405, 406,
	588, 590, 591, 778, 421, 422, 423, 424, 425, 426,
	427, 429, 0, 431, 432, 433, 592, 434, 435, 436,
	437, 0, 438, 439, 440, 441, 442, 444, 447, 448,
	449, 450, 0, 453, 454, 455, 456, 457, 458, 459,
	461, 462, 463, 465, 466, 467, 625, 468, 469, 470,
	471, 595, 473, 474, 626, 476, 477, 479, 480, 481,
	482, 483, 484, 635, 0, 486, 596, 487, 488, 489,
	490, 491, 0, 493, 494, 495, 496, 497, 498, 501,
	502, 503, 505, 506, 598, 507, 508, 0, 510, 511,
	781, 513, 514, 515, 516, 517, 0, 636, 518, 600,
	519, 601, 520, 521, 522, 523, 524, 525, 526, 528,
	0, 0, 530, 531, 532, 534, 535, 536, 537, 540,
	541, 542, 543, 544, 0, 545, 547, 549, 627, 604,
	605, 606, 607, 608, 610, 611, 612, 613, 550, 551,
	567, 418, 412, 368, 410, 411, 415, 416, 419, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 244, 0, 261,
	0, 0, 310, 347, 562, 0, 0, 407, 0, 460,
	464, 0, 553, 0, 0, 0, 0, 318, 0, 0,
	0, 0, 0, 0, 0, 529, 0, 0, 0, 0,
	249, 637, 552, 623, 0, 0, 0, 414, 0, 0,
	0, 0, 0, 0, 0, 257, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 451,
	385, 602, 478, 256, 302, 289, 331, 373, 485, 0,
	0, 363, 533, 298, 387, 0, 277, 420, 0, 509,
	384, 0, 492, 512, 0, 404, 283, 443, 499, 500,
	0, 0, 0, 0, 0, 287, 288, 409, 269, 417,
	614, 580, 472, 430, 428, 0, 395, 452, 609, 0,
	0, 317, 0, 312, 408, 548, 275, 527, 446, 413,
	367, 475, 504, 314, 299, 300, 343, 445, 333, 285,
	538, 577, 581, 579, 575, 572, 576, 573, 574, 578,
	334, 571, 0, 546, 555, 589, 569, 597, 554, 594,
	564, 309, 593, 558, 557, 603, 584, 585, 539, 599,
	570, 568, 561, 560, 556, 0, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 245, 0, 246, 247,
	248, 250, 251, 252, 0, 253, 254, 255, 258, 259,
	260, 262, 622, 263, 264, 265, 266, 267, 268, 559,
	0, 270, 271, 272, 273, 274, 276, 278, 279, 280,
	281, 282, 284, 286, 0, 0, 0, 0, 0, 0,
	0, 290, 291, 292, 293, 294, 295, 0, 296, 297,
	301, 303, 304, 305, 306, 307, 308, 311, 0, 313,
	315, 0, 316, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 563, 328, 0, 329, 330, 332, 0,
	335, 336, 337, 338, 339, 0, 340, 565, 566, 341,
	342, 344, 345, 346, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 362,
	364, 0, 365, 366, 369, 370, 371, 372, 0, 374,
	582, 0, 375, 376, 377, 0, 0, 378, 379, 380,
	381, 382, 383, 386, 583, 388, 389, 390, 391, 392,
	393, 394, 624, 396, 397, 398, 399, 400, 401, 402,
	586, 587, 403, 405, 406, 588, 590, 591, 0, 421,
	422, 423, 424, 425, 426, 427, 429, 0, 431, 432,
	433, 592, 434, 435, 436, 437, 0, 438, 439, 440,
	441, 442, 444, 447, 448, 449, 450, 0, 453, 454,
	455, 456, 457, 458, 459, 461, 462, 463, 465, 466,
	467, 625, 468, 469, 470, 471, 595, 473, 474, 626,
	476, 477, 479, 480, 481, 482, 483, 484, 635, 0,
	486, 596, 487, 488, 489, 490, 491, 0, 493, 494,
	495, 496, 497, 498, 501, 502, 503, 505, 506, 598,
	507, 508, 0, 510, 511, 0, 513, 514, 515, 516,
	517, 0, 636, 518, 600, 519, 601, 520, 521, 522,
	523, 524, 525, 526, 528, 0, 0, 530, 531, 532,
	534, 535, 536, 537, 540, 541, 542, 543, 544, 0,
	545, 547, 549, 627, 604, 605, 606, 607, 608, 610,
	611, 612, 613, 550, 551, 567, 418, 412, 368, 410,
	411, 415, 416, 419, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 244, 0, 261, 0, 0, 310, 347, 562,
	0, 5206, 407, 0, 460, 464, 0, 553, 0, 0,
	0, 0, 318, 0, 0, 0, 0, 0, 0, 0,
	529, 0, 0, 0, 0, 249, 637, 552, 623, 0,
	0, 0, 414, 0, 0, 0, 0, 0, 0, 0,
	257, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 451, 385, 602, 478, 256, 302,
	289, 331, 373, 485, 0, 0, 363, 533, 298, 387,
	0, 277, 420, 0, 509, 384, 0, 492, 512, 0,
	404, 283, 443, 499, 500, 0, 0, 0, 0, 0,
	287, 288, 409, 269, 417, 614, 580, 472, 430, 428,
	0, 395, 452, 609, 0, 0, 317, 0, 312, 408,
	548, 275, 527, 446, 413, 367, 475, 504, 314, 299,
	300, 343, 445, 333, 285, 538, 577, 581, 579, 575,
	572, 576, 573, 574, 578, 334, 571, 0, 546, 555,
	589, 569, 597, 554, 594, 564, 309, 593, 558, 557,
	603, 584, 585, 539, 599, 570, 568, 561, 560, 556,
	0, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 245, 0, 246, 247, 248, 250, 251, 252, 0,
	253, 254, 255, 258, 259, 260, 262, 622, 263, 264,
	265, 266, 267, 268, 559, 0, 270, 271, 272, 273,
	274, 276, 278, 279, 280, 281, 282, 284, 286, 0,
	0, 0, 0, 0, 0, 0, 290, 291, 292, 293,
	294, 295, 0, 296, 297, 301, 303, 304, 305, 306,
	307, 308, 311, 0, 313, 315, 0, 316, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 563, 328,
	0, 329, 330, 332, 0, 335, 336, 337, 338, 339,
	0, 340, 565, 566, 341, 342, 344, 345, 346, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 362, 364, 0, 365, 366, 369,
	370, 371, 372, 0, 374, 582, 0, 375, 376, 377,
	0, 0, 378, 379, 380, 381, 382, 383, 386, 583,
	388, 389, 390, 391, 392, 393, 394, 624, 396, 397,
	398, 399, 400, 401, 402, 586, 587, 403, 405, 406,
	588, 590, 591, 0, 421, 422, 423, 424, 425, 426,
	427, 429, 0, 431, 432, 433, 592, 434, 435, 436,
	437, 0, 438, 439, 440, 441, 442, 444, 447, 448,
	449, 450, 0, 453, 454, 455, 456, 457, 458, 459,
	461, 462, 463, 465, 466, 467, 625, 468, 469, 470,
	471, 595, 473, 474, 626, 476, 477, 479, 480, 481,
	482, 483, 484, 635, 0, 486, 596, 487, 488, 489,
	490, 491, 0, 493, 494, 495, 496, 497, 498, 501,
	502, 503, 505, 506, 598, 507, 508, 0, 510, 511,
	0, 513, 514, 515, 516, 517, 0, 636, 518, 600,
	519, 601, 520, 521, 522, 523, 524, 525, 526, 528,
	0, 0, 530, 531, 532, 534, 535, 536, 537, 540,
	541, 542, 543, 544, 0, 545, 547, 549, 627, 604,
	605, 606, 607, 608, 610, 611, 612, 613, 550, 551,
	567, 418, 412, 368, 410, 411, 415, 416, 419, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 244, 0, 261,
	0, 0, 310, 347, 562, 0, 5065, 407, 0, 460,
	464, 0, 553, 0, 0, 0, 0, 318, 0, 0,
	0, 0, 0, 0, 0, 529, 0, 0, 0, 0,
	249, 637, 552, 623, 0, 0, 0, 414, 0, 0,
	0, 0, 0, 0, 0, 257, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 451,
	385, 602, 478, 256, 302, 289, 331, 373, 485, 0,
	0, 363, 533, 298, 387, 0, 277, 420, 0, 509,
	384, 0, 492, 512, 0, 404, 283, 443, 499, 500,
	0, 0, 0, 0, 0, 287, 288, 409, 269, 417,
	614, 580, 472, 430, 428, 0, 395, 452, 609, 0,
	0, 317, 0, 312, 408, 548, 275, 527, 446, 413,
	367, 475, 504, 314, 299, 300, 343, 445, 333, 285,
	538, 577, 581, 579, 575, 572, 576, 573, 574, 578,
	334, 571, 0, 546, 555, 589, 569, 597, 554, 594,
	564, 309, 593, 558, 557, 603, 584, 585, 539, 599,
	570, 568, 561, 560, 556, 0, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 245, 0, 246, 247,
	248, 250, 251, 252, 0, 253, 254, 255, 258, 259,
	260, 262, 622, 263, 264, 265, 266, 267, 268, 559,
	0, 270, 271, 272, 273, 274, 276, 278, 279, 280,
	281, 282, 284, 286, 0, 0, 0, 0, 0, 0,
	0, 290, 291, 292, 293, 294, 295, 0, 296, 297,
	301, 303, 304, 305, 306, 307, 308, 311, 0, 313,
	315, 0, 316, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 563, 328, 0, 329, 330, 332, 0,
	335, 336, 337, 338, 339, 0, 340, 565, 566, 341,
	342, 344, 345, 346, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 362,
	364, 0, 365, 366, 369, 370, 371, 372, 0, 374,
	582, 0, 375, 376, 377, 0, 0, 378, 379, 380,
	381, 382, 383, 386, 583, 388, 389, 390, 391, 392,
	393, 394, 624, 396, 397, 398, 399, 400, 401, 402,
	586, 587, 403, 405, 406, 588, 590, 591, 0, 421,
	422, 423, 424, 425, 426, 427, 429, 0, 431, 432,
	433, 592, 434, 435, 436, 437, 0, 438, 439, 440,
	441, 442, 444, 447, 448, 449, 450, 0, 453, 454,
	455, 456, 457, 458, 459, 461, 462, 463, 465, 466,
	467, 625, 468, 469, 470, 471, 595, 473, 474, 626,
	476, 477, 479, 480, 481, 482, 483, 484, 635, 0,
	486, 596, 487, 488, 489, 490, 491, 0, 493, 494,
	495, 496, 497, 498, 501, 502, 503, 505, 506, 598,
	507, 508, 0, 510, 511, 0, 513, 514, 515, 516,
	517, 0, 636, 518, 600, 519, 601, 520, 521, 522,
	523, 524, 525, 526, 528, 0, 0, 530, 531, 532,
	534, 535, 536, 537, 540, 541, 542, 543, 544, 0,
	545, 547, 549, 627, 604, 605, 606, 607, 608, 610,
	611, 612, 613, 550, 551, 567, 418, 412, 368, 410,
	411, 415, 416, 419, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 244, 0, 261, 0, 0, 310, 347, 562,
	0, 5062, 407, 0, 460, 464, 106, 553, 0, 0,
	0, 0, 318, 0, 0, 0, 0, 0, 0, 0,
	529, 0, 0, 0, 0, 249, 637, 552, 623, 0,
	0, 0, 414, 103, 0, 0, 0, 104, 0, 0,
	257, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 451, 385, 2013, 478, 256, 302,
	289, 331, 373, 485, 0, 0, 363, 533, 298, 387,
	0, 277, 420, 0, 509, 384, 0, 492, 512, 0,
	404, 283, 443, 499, 500, 0, 0, 0, 0, 0,
	287, 288, 409, 269, 417, 614, 580, 472, 430, 428,
	0, 395, 452, 609, 0, 0, 317, 0, 312, 408,
	548, 275, 527, 446, 413, 367, 475, 504, 314, 299,
	300, 343, 445, 333, 285, 538, 577, 581, 579, 575,
	572, 576, 573, 574, 578, 334, 571, 0, 546, 555,
	589, 569, 597, 554, 594, 564, 309, 593, 558, 557,
	603, 584, 585, 539, 599, 570, 568, 561, 560, 556,
	0, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 245, 0, 246, 247, 248, 250, 251, 252, 0,
	253, 254, 255, 258, 259, 260, 262, 622, 263, 264,
	265, 266, 267, 268, 559, 0, 270, 271, 272, 273,
	274, 276, 278, 279, 280, 281, 282, 284, 286, 0,
	0, 0, 0, 0, 0, 0, 290, 291, 292, 293,
	294, 295, 0, 296, 297, 301, 303, 304, 305, 306,
	307, 308, 311, 0, 313, 315, 0, 316, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 563, 328,
	0, 329, 330, 332, 0, 335, 336, 337, 338, 339,
	0, 340, 565, 566, 341, 342, 344, 345, 346, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 362, 364, 0, 365, 366, 369,
	370, 371, 372, 0, 374, 582, 0, 375, 376, 377,
	0, 0, 378, 379, 380, 381, 382, 383, 386, 583,
	388, 389, 390, 391, 392, 393, 394, 624, 396, 397,
	398, 399, 400, 401, 402, 586, 587, 403, 405, 406,
	588, 590, 591, 0, 421, 422, 423, 424, 425, 426,
	427, 429, 0, 431, 432, 433, 592, 434, 435, 436,
	437, 0, 438, 439, 440, 441, 442, 444, 447, 448,
	449, 450, 0, 453, 454, 455, 456, 457, 458, 459,
	461, 462, 463, 465, 466, 467, 625, 468, 469, 470,
	471, 595, 473, 474, 626, 476, 477, 479, 480, 481,
	482, 483, 484, 635, 0, 486, 596, 487, 488, 489,
	490, 491, 0, 493, 494, 495, 496, 497, 498, 501,
	502, 503, 505, 506, 598, 507, 508, 0, 510, 511,
	0, 513, 514, 515, 516, 517, 0, 636, 518, 600,
	519, 601, 520, 521, 522, 523, 524, 525, 526, 528,
	0, 0, 530, 531, 532, 534, 535, 536, 537, 540,
	541, 542, 543, 544, 0, 545, 547, 549, 627, 604,
	605, 606, 607, 608, 610, 611, 612, 613, 550, 551,
	567, 418, 412, 368, 410, 411, 415, 416, 419, 756,
	0, 0, 935, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 244, 0, 261,
	763, 102, 310, 347, 562, 0, 0, 407, 0, 460,
	464, 0, 553, 0, 0, 0, 0, 318, 1432, 768,
	0, 774, 0, 780, 1431, 529, 0, 770, 771, 776,
	249, 637, 552, 623, 0, 0, 0, 414, 0, 0,
	0, 0, 0, 0, 0, 257, 0, 0, 0, 1433,
	772, 769, 773, 779, 767, 777, 764, 775, 0, 451,
	385, 602, 478, 256, 302, 289, 331, 373, 485, 0,
	0, 363, 533, 298, 387, 0, 277, 420, 0, 509,
	384, 0, 492, 512, 0, 404, 283, 443, 499, 500,
	761, 766, 0, 782, 0, 287, 288, 409, 269, 417,
	614, 580, 472, 430, 428, 0, 395, 452, 609, 0,
	0, 317, 0, 312, 408, 548, 275, 527, 446, 413,
	367, 475, 504, 314, 299, 300, 343, 445, 333, 285,
	538, 577, 581, 579, 575, 572, 576, 573, 574, 578,
	334, 571, 0, 546, 555, 589, 569, 597, 554, 594,
	564, 309, 593, 558, 557, 603, 584, 585, 539, 599,
	570, 568, 561, 560, 556, 0, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 245, 0, 246, 247,
	248, 250, 251, 252, 760, 253, 254, 255, 258, 259,
	260, 262, 622, 263, 264, 265, 266, 267, 268, 559,
	762, 270, 271, 272, 273, 274, 276, 278, 279, 280,
	281, 282, 284, 286, 0, 0, 0, 765, 0, 0,
	0, 290, 291, 292, 293, 294, 295, 0, 296, 297,
	301, 303, 304, 305, 306, 307, 308, 311, 0, 313,
	315, 0, 316, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 563, 328, 0, 329, 330, 332, 0,
	335, 336, 337, 338, 339, 0, 340, 565, 566, 341,
	342, 344, 345, 346, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 362,
	364, 0, 365, 366, 369, 370, 371, 372, 0, 374,
	582, 0, 375, 376, 377, 0, 0, 378, 379, 380,
	381, 382, 383, 386, 583, 388, 389, 390, 391, 392,
	393, 394, 624, 396, 397, 398, 399, 400, 401, 402,
	586, 587, 403, 405, 406, 588, 590, 591, 778, 421,
	422, 423, 424, 425, 426, 427, 429, 0, 431, 432,
	433, 592, 434, 435, 436, 437, 0, 438, 439, 440,
	441, 442, 444, 447, 448, 449, 450, 0, 453, 454,
	455, 456, 457, 458, 459, 461, 462, 463, 465, 466,
	467, 625, 468, 469, 470, 471, 595, 473, 474, 626,
	476, 477, 479, 480, 481, 482, 483, 484, 635, 0,
	486, 596, 487, 488, 489, 490, 491, 0, 493, 494,
	495, 496, 497, 498, 501, 502, 503, 505, 506, 598,
	507, 508, 0, 510, 511, 781, 513, 514, 515, 516,
	517, 0, 636, 518, 600, 519, 601, 520, 521, 522,
	523, 524, 525, 526, 528, 0, 0, 530, 531, 532,
	534, 535, 536, 537, 540, 541, 542, 543, 544, 0,
	545, 547, 549, 627, 604, 605, 606, 607, 608, 610,
	611, 612, 613, 550, 551, 567, 418, 412, 368, 410,
	411, 415, 416, 419, 756, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 244, 0, 261, 763, 0, 310, 347, 562,
	0, 0, 407, 0, 460, 464, 0, 553, 0, 0,
	0, 0, 318, 0, 768, 0, 774, 0, 780, 0,
	529, 0, 770, 771, 776, 249, 637, 552, 623, 0,
	0, 0, 414, 0, 0, 0, 0, 0, 0, 0,
	257, 3229, 0, 0, 0, 772, 769, 773, 779, 767,
	777, 764, 775, 0, 451, 385, 602, 478, 256, 302,
	289, 331, 373, 485, 0, 0, 363, 533, 298, 387,
	0, 277, 420, 0, 509, 384, 0, 492, 512, 0,
	404, 283, 443, 499, 500, 761, 766, 0, 782, 0,
	287, 288, 409, 269, 417, 614, 580, 472, 430, 428,
	0, 395, 452, 609, 0, 0, 317, 0, 312, 408,
	548, 275, 527, 446, 413, 367, 475, 504, 314, 299,
	300, 343, 445, 333, 285, 538, 577, 581, 579, 575,
	572, 576, 573, 574, 578, 334, 571, 0, 546, 555,
	589, 569, 597, 554, 594, 564, 309, 593, 558, 557,
	603, 584, 585, 539, 599, 570, 568, 561, 560, 556,
	0, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 245, 0, 246, 247, 248, 250, 251, 252, 760,
	253, 254, 255, 258, 259, 260, 262, 622, 263, 264,
	265, 266, 267, 268, 559, 762, 270, 271, 272, 273,
	274, 276, 278, 279, 280, 281, 282, 284, 286, 0,
	0, 753, 765, 0, 0, 754, 290, 291, 292, 293,
	294, 295, 0, 296, 297, 301, 303, 304, 305, 306,
	307, 308, 311, 0, 313, 315, 0, 316, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 563, 328,
	0, 329, 330, 332, 0, 335, 336, 337, 338, 339,
	0, 340, 565, 566, 341, 342, 344, 345, 346, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 362, 364, 0, 365, 366, 369,
	370, 371, 372, 0, 374, 582, 0, 375, 376, 377,
	0, 0, 378, 379, 380, 381, 382, 383, 386, 583,
	388, 389, 390, 391, 392, 393, 394, 624, 396, 397,
	398, 399, 400, 401, 402, 586, 587, 403, 405, 406,
	588, 590, 591, 778, 421, 422, 423, 424, 425, 426,
	427, 429, 0, 431, 432, 433, 592, 434, 435, 436,
	437, 0, 438, 439, 440, 441, 442, 444, 447, 448,
	449, 450, 0, 453, 454, 455, 456, 457, 458, 459,
	461, 462, 463, 465, 466, 467, 625, 468, 469, 470,
	471, 595, 473, 474, 626, 476, 477, 479, 480, 481,
	482, 483, 484, 635, 755, 486, 596, 487, 488, 489,
	490, 491, 0, 493, 494, 495, 496, 497, 498, 501,
	502, 503, 505, 506, 598, 507, 508, 0, 510, 511,
	781, 513, 514, 515, 516, 517, 0, 636, 518, 600,
	519, 601, 520, 521, 522, 523, 524, 525, 526, 528,
	0, 0, 530, 531, 532, 534, 535, 536, 537, 540,
	541, 542, 543, 544, 0, 545, 547, 549, 627, 604,
	605, 606, 607, 608, 610, 611, 612, 613, 550, 551,
	567, 418, 412, 368, 410, 411, 415, 416, 419, 756,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 244, 0, 261,
	763, 0, 310, 347, 562, 0, 0, 407, 0, 460,
	464, 0, 553, 0, 0, 0, 0, 318, 0, 768,
	0, 774, 0, 780, 0, 529, 0, 770, 771, 776,
	249, 637, 552, 623, 0, 0, 0, 414, 0, 0,
	0, 0, 0, 0, 0, 257, 0, 0, 0, 0,
	772, 769, 773, 779, 767, 777, 764, 775, 0, 451,
	385, 602, 478, 256, 302, 289, 331, 373, 485, 0,
	0, 363, 533, 298, 387, 0, 277, 420, 2270, 509,
	384, 0, 492, 512, 0, 404, 283, 443, 499, 500,
	761, 766, 0, 782, 0, 287, 288, 409, 269, 417,
	614, 580, 472, 430, 428, 0, 395, 452, 609, 0,
	0, 317, 0, 312, 408, 548, 275, 527, 446, 413,
	367, 475, 504, 314, 299, 300, 343, 445, 333, 285,
	538, 577, 581, 579, 575, 572, 576, 573, 574, 578,
	334, 571, 0, 546, 555, 589, 569, 597, 554, 594,
	564, 309, 593, 558, 557, 603, 584, 585, 539, 599,
	570, 568, 561, 560, 556, 0, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 245, 0, 246, 247,
	248, 250, 251, 252, 760, 253, 254, 255, 258, 259,
	260, 262, 622, 263, 264, 265, 266, 267, 268, 559,
	762, 270, 271, 272, 273, 274, 276, 278, 279, 280,
	281, 282, 284, 286, 0, 0, 753, 765, 0, 0,
	754, 290, 291, 292, 293, 294, 295, 0, 296, 297,
	301, 303, 304, 305, 306, 307, 308, 311, 0, 313,
	315, 0, 316, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 563, 328, 0, 329, 330, 332, 0,
	335, 336, 337, 338, 339, 0, 340, 565, 566, 341,
	342, 344, 345, 346, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 362,
	364, 0, 365, 366, 369, 370, 371, 372, 0, 374,
	582, 0, 375, 376, 377, 0, 0, 378, 379, 380,
	381, 382, 383, 386, 583, 388, 389, 390, 391, 392,
	393, 394, 624, 396, 397, 398, 399, 400, 401, 402,
	586, 587, 403, 405, 406, 588, 590, 591, 778, 421,
	422, 423, 424, 425, 426, 427, 429, 0, 431, 432,
	433, 592, 434, 435, 436, 437, 0, 438, 439, 440,
	441, 442, 444, 447, 448, 449, 450, 0, 453, 454,
	455, 456, 457, 458, 459, 461, 462, 463, 465, 466,
	467, 625, 468, 469, 470, 471, 595, 473, 474, 626,
	476, 477, 479, 480, 481, 482, 483, 484, 635, 755,
	486, 596, 487, 488, 489, 490, 491, 0, 493, 494,
	495, 496, 497, 498, 501, 502, 503, 505, 506, 598,
	507, 508, 0, 510, 511, 781, 513, 514, 515, 516,
	517, 0, 636, 518, 600, 519, 601, 520, 521, 522,
	523, 524, 525, 526, 528, 0, 0, 530, 531, 532,
	534, 535, 536, 537, 540, 541, 542, 543, 544, 0,
	545, 547, 549, 627, 604, 605, 606, 607, 608, 610,
	611, 612, 613, 550, 551, 567, 418, 412, 368, 410,
	411, 415, 416, 419, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 244, 0, 261, 0, 0, 310, 347, 562,
	0, 0, 407, 0, 460, 464, 0, 553, 0, 0,
	0, 0, 318, 0, 0, 0, 0, 0, 0, 0,
	529, 0, 0, 0, 0, 249, 637, 552, 623, 0,
	0, 0, 414, 0, 0, 0, 674, 2286, 0, 0,
	257, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 451, 385, 602, 478, 256, 302,
	289, 331, 373, 485, 0, 0, 363, 533, 298, 387,
	0, 277, 420, 0, 509, 384, 0, 492, 512, 0,
	404, 283, 443, 499, 500, 0, 0, 0, 0, 0,
	287, 288, 409, 269, 417, 614, 580, 472, 430, 428,
	0, 395, 452, 609, 0, 0, 317, 0, 312, 408,
	548, 275, 527, 446, 413, 367, 475, 504, 314, 299,
	300, 343, 445, 333, 285, 538, 577, 581, 579, 575,
	572, 576, 573, 574, 578, 334, 571, 0, 546, 555,
	589, 569, 597, 554, 594, 564, 309, 593, 558, 557,
	603, 584, 585, 539, 599, 570, 568, 561, 560, 556,
	0, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 245, 0, 246, 247, 248, 250, 251, 252, 0,
	253, 254, 255, 258, 259, 260, 262, 622, 263, 264,
	265, 266, 267, 268, 559, 0, 270, 271, 272, 273,
	274, 276, 278, 279, 280, 281, 282, 284, 286, 0,
	0, 0, 2290, 0, 0, 0, 290, 291, 292, 293,
	294, 295, 0, 296, 297, 301, 303, 304, 305, 306,
	307, 308, 311, 0, 313, 315, 0, 316, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 563, 328,
	0, 329, 330, 332, 0, 335, 336, 337, 338, 339,
	0, 340, 565, 566, 341, 342, 344, 345, 346, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 362, 364, 0, 365, 366, 369,
	370, 371, 372, 0, 374, 582, 0, 375, 376, 377,
	0, 0, 378, 379, 380, 381, 382, 383, 386, 583,
	388, 389, 390, 391, 392, 393, 394, 624, 396, 397,
	398, 399, 400, 401, 402, 586, 587, 403, 405, 406,
	588, 590, 591, 0, 421, 422, 423, 424, 425, 426,
	427, 429, 0, 431, 432, 433, 592, 434, 435, 436,
	437, 0, 438, 439, 440, 441, 442, 444, 447, 448,
	449, 450, 0, 453, 454, 455, 456, 457, 458, 459,
	461, 462, 463, 465, 466, 467, 625, 468, 469, 470,
	471, 595, 473, 474, 626, 476, 477, 479, 480, 481,
	482, 483, 484, 635, 0, 486, 596, 487, 488, 489,
	490, 491, 0, 493, 494, 495, 496, 497, 498, 501,
	502, 503, 505, 506, 598, 507, 508, 0, 2287, 511,
	0, 513, 514, 515, 516, 517, 0, 636, 518, 600,
	519, 601, 520, 521, 522, 523, 524, 525, 526, 528,
	0, 0, 530, 531, 532, 534, 535, 536, 537, 540,
	541, 542, 543, 544, 0, 545, 547, 549, 627, 604,
	605, 606, 607, 608, 610, 611, 612, 613, 550, 551,
	567, 418, 412, 368, 410, 411, 415, 416, 419, 756,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 851, 244, 0, 261,
	763, 1168, 310, 347, 562, 0, 0, 407, 0, 460,
	464, 0, 553, 0, 0, 0, 0, 318, 0, 768,
	0, 774, 0, 780, 0, 529, 0, 770, 771, 776,
	249, 637, 552, 623, 0, 0, 0, 414, 0, 0,
	0, 0, 0, 0, 0, 257, 0, 0, 0, 0,
	772, 769, 773, 779, 767, 777, 764, 775, 0, 451,
	385, 602, 478, 256, 302, 289, 331, 373, 485, 0,
	0, 363, 533, 298, 387, 0, 277, 420, 0, 509,
	384, 0, 492, 512, 0, 404, 283, 443, 499, 500,
	761, 766, 0, 782, 0, 287, 288, 409, 269, 417,
	614, 580, 472, 430, 428, 0, 395, 452, 609, 0,
	0, 317, 0, 312, 408, 548, 275, 527, 446, 413,
	367, 475, 504, 314, 299, 300, 343, 445, 333, 285,
	538, 577, 581, 579, 575, 572, 576, 573, 574, 578,
	334, 571, 0, 546, 555, 589, 569, 597, 554, 594,
	564, 309, 593, 558, 557, 603, 584, 585, 539, 599,
	570, 568, 561, 560, 556, 0, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 245, 0, 246, 247,
	248, 250, 251, 252, 760, 253, 254, 255, 258, 259,
	260, 262, 622, 263, 264, 265, 266, 267, 268, 559,
	762, 270, 271, 272, 273, 274, 276, 278, 279, 280,
	281, 282, 284, 286, 0, 0, 753, 765, 0, 0,
	754, 290, 291, 292, 293, 294, 295, 0, 296, 297,
	301, 303, 304, 305, 306, 307, 308, 311, 0, 313,
	315, 0, 316, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 563, 328, 0, 329, 330, 332, 0,
	335, 336, 337, 338, 339, 0, 340, 565, 566, 341,
	342, 344, 345, 346, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 362,
	364, 0, 365, 366, 369, 370, 371, 372, 0, 374,
	582, 0, 375, 376, 377, 0, 0, 378, 379, 380,
	381, 849, 383, 386, 583, 388, 389, 390, 391, 392,
	393, 394, 624, 396, 397, 398, 399, 400, 401, 402,
	586, 587, 403, 405, 406, 588, 590, 591, 778, 421,
	422, 423, 424, 425, 426, 427, 429, 0, 431, 432,
	433, 592, 434, 435, 436, 437, 0, 438, 439, 440,
	441, 442, 444, 447, 448, 449, 450, 0, 453, 454,
	455, 456, 457, 458, 459, 461, 462, 463, 465, 466,
	467, 625, 468, 469, 470, 471, 595, 473, 474, 626,
	476, 477, 479, 480, 481, 482, 483, 484, 635, 755,
	486, 596, 487, 488, 489, 490, 491, 0, 493, 494,
	495, 496, 497, 498, 501, 502, 503, 505, 506, 598,
	507, 508, 0, 510, 511, 781, 513, 514, 515, 516,
	517, 0, 636, 518, 600, 519, 601, 520, 521, 522,
	523, 524, 525, 526, 528, 0, 0, 530, 531, 532,
	534, 535, 536, 537, 540, 541, 542, 543, 544, 0,
	545, 547, 549, 627, 604, 605, 606, 607, 608, 610,
	611, 612, 613, 550, 551, 567, 418, 412, 368, 410,
	411, 415, 416, 419, 756, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 847, 244, 0, 261, 763, 0, 310, 347, 562,
	0, 0, 407, 0, 460, 464, 0, 553, 0, 0,
	0, 0, 318, 0, 768, 0, 774, 0, 780, 0,
	529, 0, 770, 771, 776, 249, 637, 552, 623, 0,
	0, 0, 414, 0, 0, 0, 0, 0, 0, 0,
	257, 0, 0, 0, 0, 772, 769, 773, 779, 767,
	777, 764, 775, 0, 451, 385, 602, 478, 256, 302,
	289, 331, 373, 485, 0, 0, 363, 533, 298, 387,
	0, 277, 420, 0, 509, 384, 0, 492, 512, 0,
	404, 283, 443, 499, 500, 761, 766, 0, 782, 0,
	287, 288, 409, 269, 417, 614, 580, 472, 430, 428,
	0, 395, 452, 609, 0, 0, 317, 0, 312, 408,
	548, 275, 527, 446, 413, 367, 475, 504, 314, 299,
	300, 343, 445, 333, 285, 538, 577, 581, 579, 575,
	572, 576, 573, 574, 578, 334, 571, 0, 546, 555,
	589, 569, 597, 554, 594, 564, 309, 593, 558, 557,
	603, 584, 585, 539, 599, 570, 568, 561, 560, 556,
	0, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 245, 0, 246, 247, 248, 250, 251, 252, 760,
	253, 254, 255, 258, 259, 260, 262, 622, 263, 264,
	265, 266, 267, 268, 559, 762, 270, 271, 272, 273,
	274, 276, 278, 279, 280, 281, 282, 284, 286, 0,
	0, 753, 765, 0, 0, 754, 290, 291, 292, 293,
	294, 295, 0, 296, 297, 301, 303, 304, 305, 306,
	307, 308, 311, 0, 313, 315, 0, 316, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 563, 328,
	0, 329, 330, 332, 0, 335, 336, 337, 338, 339,
	0, 340, 565, 566, 341, 342, 344, 345, 346, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 362, 364, 0, 365, 366, 369,
	370, 371, 372, 0, 374, 582, 0, 375, 376, 377,
	0, 0, 378, 379, 380, 381, 382, 383, 386, 583,
	388, 389, 390, 391, 392, 393, 394, 624, 396, 397,
	398, 399, 400, 401, 402, 586, 587, 403, 405, 406,
	588, 590, 591, 778, 421, 422, 423, 424, 425, 426,
	427, 429, 0, 431, 432, 433, 592, 434, 435, 436,
	437, 0, 438, 439, 440, 441, 442, 444, 447, 448,
	449, 450, 0, 453, 454, 455, 456, 457, 458, 459,
	461, 462, 463, 465, 466, 467, 625, 468, 469, 470,
	471, 595, 473, 474, 626, 476, 477, 479, 480, 481,
	482, 483, 484, 635, 755, 486, 596, 487, 488, 489,
	490, 491, 0, 493, 494, 495, 496, 497, 498, 501,
	502, 503, 505, 506, 598, 507, 508, 0, 510, 511,
	781, 513, 514, 515, 516, 517, 0, 636, 518, 600,
	519, 601, 520, 521, 522, 523, 524, 525, 526, 528,
	0, 0, 530, 531, 532, 534, 535, 536, 537, 540,
	541, 542, 543, 544, 0, 545, 547, 549, 627, 604,
	605, 606, 607, 608, 610, 611, 612, 613, 550, 551,
	567, 418, 412, 368, 410, 411, 415, 416, 419, 756,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 244, 0, 261,
	763, 0, 310, 347, 562, 0, 0, 407, 0, 460,
	464, 0, 553, 0, 0, 0, 0, 318, 0, 768,
	0, 774, 0, 780, 0, 529, 0, 770, 771, 776,
	249, 637, 552, 623, 0, 0, 0, 414, 0, 0,
	0, 0, 0, 0, 0, 257, 0, 0, 0, 0,
	772, 769, 773, 779, 767, 777, 764, 775, 0, 451,
	385, 602, 478, 256, 302, 289, 331, 373, 485, 0,
	0, 363, 533, 298, 387, 0, 277, 420, 0, 509,
	384, 0, 492, 512, 0, 404, 283, 443, 499, 500,
	761, 766, 0, 782, 0, 287, 288, 409, 269, 417,
	614, 580, 472, 430, 428, 0, 395, 452, 609, 0,
	0, 317, 0, 312, 408, 548, 275, 527, 446, 413,
	367, 475, 504, 314, 299, 300, 343, 445, 333, 285,
	538, 577, 581, 579, 575, 572, 576, 573, 574, 578,
	334, 571, 0, 546, 555, 589, 569, 597, 554, 594,
	564, 309, 593, 558, 557, 603, 584, 585, 539, 599,
	570, 568, 561, 560, 556, 0, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 245, 0, 246, 247,
	248, 250, 251, 252, 760, 253, 254, 255, 258, 259,
	260, 262, 622, 263, 264, 265, 266, 267, 268, 559,
	762, 270, 271, 272, 273, 274, 276, 278, 279, 280,
	281, 282, 284, 286, 0, 0, 753, 765, 0, 0,
	754, 290, 291, 292, 293, 294, 295, 0, 296, 297,
	301, 303, 304, 305, 306, 307, 308, 311, 0, 313,
	315, 0, 316, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 563, 328, 0, 329, 330, 332, 0,
	335, 336, 337, 338, 339, 0, 340, 565, 566, 341,
	342, 344, 345, 346, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 362,
	364, 0, 365, 366, 369, 370, 371, 372, 0, 374,
	582, 0, 375, 376, 377, 0, 0, 378, 379, 380,
	381, 382, 383, 386, 583, 388, 389, 390, 391, 392,
	393, 394, 624, 396, 397, 398, 399, 400, 401, 402,
	586, 587, 403, 405, 406, 588, 590, 591, 778, 421,
	422, 423, 424, 425, 426, 427, 429, 0, 431, 432,
	433, 592, 434, 435, 436, 437, 0, 438, 439, 440,
	441, 442, 444, 447, 448, 449, 450, 0, 453, 454,
	455, 456, 457, 458, 459, 461, 462, 463, 465, 466,
	467, 625, 468, 469, 470, 471, 595, 473, 474, 626,
	476, 477, 479, 480, 481, 482, 483, 484, 635, 755,
	486, 596, 487, 488, 489, 490, 491, 0, 493, 494,
	495, 496, 497, 498, 501, 502, 503, 505, 506, 598,
	507, 508, 0, 510, 511, 781, 513, 514, 515, 516,
	517, 0, 636, 518, 600, 519, 601, 520, 521, 522,
	523, 524, 525, 526, 528, 0, 0, 530, 531, 532,
	534, 535, 536, 537, 540, 541, 542, 543, 544, 0,
	545, 547, 549, 627, 604, 605, 606, 607, 608, 610,
	611, 612, 613, 550, 551, 567, 418, 412, 368, 410,
	411, 415, 416, 419, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 244, 3472, 261, 0, 0, 310, 347, 562,
	0, 0, 407, 0, 460, 464, 0, 553, 0, 0,
	0, 0, 318, 0, 0, 0, 0, 0, 0, 0,
	529, 0, 0, 0, 0, 249, 637, 552, 623, 0,
	0, 0, 414, 0, 0, 0, 0, 0, 0, 0,
	257, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 451, 385, 602, 478, 256, 302,
	289, 331, 373, 485, 0, 0, 363, 533, 298, 387,
	0, 277, 420, 0, 509, 384, 0, 492, 512, 0,
	404, 283, 443, 499, 500, 0, 0, 0, 0, 0,
	287, 288, 409, 269, 417, 614, 580, 472, 430, 428,
	0, 395, 452, 609, 0, 0, 317, 0, 312, 408,
	548, 275, 527, 446, 413, 367, 475, 504, 314, 299,
	300, 343, 445, 333, 285, 538, 577, 581, 579, 575,
	572, 576, 573, 574, 578, 334, 571, 0, 546, 555,
	589, 569, 597, 554, 594, 564, 309, 593, 558, 557,
	603, 584, 585, 539, 599, 570, 568, 561, 560, 556,
	0, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 245, 0, 246, 247, 248, 250, 251, 252, 0,
	253, 254, 255, 258, 259, 260, 262, 622, 263, 264,
	265, 266, 267, 268, 559, 0, 270, 271, 272, 273,
	274, 276, 278, 279, 280, 281, 282, 284, 286, 0,
	0, 0, 0, 0, 0, 0, 290, 291, 292, 293,
	294, 295, 0, 296, 297, 301, 303, 304, 305, 306,
	307, 308, 311, 0, 313, 315, 0, 316, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 563, 328,
	0, 329, 330, 332, 0, 335, 336, 337, 338, 339,
	0, 340, 565, 566, 341, 342, 344, 345, 346, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 362, 364, 0, 365, 366, 369,
	370, 371, 372, 0, 374, 582, 0, 375, 376, 377,
	0, 0, 378, 379, 380, 381, 382, 383, 386, 583,
	388, 389, 390, 391, 392, 393, 394, 624, 396, 397,
	398, 399, 400, 401, 402, 586, 587, 403, 405, 406,
	588, 590, 591, 0, 421, 422, 423, 424, 425, 426,
	427, 429, 0, 431, 432, 433, 592, 434, 435, 436,
	437, 0, 438, 439, 440, 441, 442, 444, 447, 448,
	449, 450, 0, 453, 454, 455, 456, 457, 458, 459,
	461, 462, 463, 465, 466, 467, 625, 468, 469, 470,
	471, 595, 473, 474, 626, 476, 477, 479, 480, 481,
	482, 483, 484, 635, 0, 486, 596, 487, 488, 489,
	490, 491, 0, 493, 494, 495, 496, 497, 498, 501,
	502, 503, 505, 506, 598, 507, 508, 0, 510, 511,
	0, 513, 514, 515, 516, 517, 0, 636, 518, 600,
	519, 601, 520, 521, 522, 523, 524, 525, 526, 528,
	0, 0, 530, 531, 532, 534, 535, 536, 537, 540,
	541, 542, 543, 544, 0, 545, 547, 549, 627, 604,
	605, 606, 607, 608, 610, 611, 612, 613, 550, 551,
	567, 418, 412, 368, 410, 411, 415, 416, 419, 0,
	756, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 0,
	261, 763, 991, 310, 913, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	768, 0, 774, 0, 780, 0, 529, 0, 770, 771,
	776, 249, 637, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 772, 769, 773, 779, 767, 777, 764, 775, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 761, 766, 0, 782, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 760, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 762, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 753, 765, 0,
	0, 754, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 778,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	755, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 781, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 756, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 0, 261, 763, 0, 310, 911,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 768, 0, 774, 0, 780,
	0, 529, 0, 770, 771, 776, 249, 637, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 772, 769, 773, 779,
	767, 777, 764, 775, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 761, 766, 0, 782,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	760, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 559, 762, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 753, 765, 0, 0, 754, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 778, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 755, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 510,
	511, 781, 513, 514, 515, 516, 517, 0, 636, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	756, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 0,
	261, 763, 0, 310, 908, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	768, 0, 774, 0, 780, 0, 529, 0, 770, 771,
	776, 249, 637, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 772, 769, 773, 779, 767, 777, 764, 775, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 761, 766, 0, 782, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 760, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 762, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 753, 765, 0,
	0, 754, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 906, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 778,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	755, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 781, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 756, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 0, 261, 763, 0, 310, 347,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 768, 0, 774, 0, 780,
	0, 529, 0, 770, 771, 776, 249, 637, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 772, 769, 773, 779,
	767, 777, 764, 775, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 761, 766, 0, 782,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	760, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 559, 762, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 753, 765, 0, 0, 754, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 749, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 778, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 755, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 510,
	511, 781, 513, 514, 515, 516, 517, 0, 636, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	756, 0, 0, 935, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 0,
	261, 763, 0, 310, 347, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 1423, 0, 318, 0,
	768, 0, 774, 0, 780, 0, 529, 0, 770, 771,
	776, 249, 637, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 772, 769, 773, 779, 767, 777, 764, 775, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 761, 766, 0, 782, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 760, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 762, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 765, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 778,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 781, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 0, 261, 0, 0, 310, 347,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 529, 0, 0, 0, 0, 249, 637, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 0, 0, 0, 0,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	0, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 559, 0, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 0, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 0, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 510,
	511, 0, 513, 514, 515, 516, 517, 0, 636, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 0,
	261, 0, 2194, 310, 347, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 529, 0, 0, 0,
	0, 249, 637, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 0, 0, 0, 0, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 0, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 0, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 0,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 0, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 756, 0, 0, 935, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 0, 261, 763, 3993, 310, 347,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 768, 0, 774, 0, 780,
	0, 529, 0, 770, 771, 776, 249, 637, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 772, 769, 773, 779,
	767, 777, 764, 775, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 761, 766, 0, 782,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	760, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 559, 762, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 765, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 778, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 0, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 510,
	511, 781, 513, 514, 515, 516, 517, 0, 636, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 0,
	261, 0, 0, 310, 347, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 529, 0, 0, 0,
	0, 249, 637, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 0, 0, 0, 0, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 0, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 0, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 0,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 0, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 0, 261, 0, 3349, 310, 347,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 529, 0, 0, 0, 0, 249, 637, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 0, 0, 0, 0,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	0, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 559, 0, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 0, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 0, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 510,
	511, 0, 513, 514, 515, 516, 517, 0, 636, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	818, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 0,
	261, 763, 1118, 310, 347, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	768, 0, 774, 0, 780, 0, 529, 0, 770, 771,
	776, 249, 637, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 772, 769, 773, 779, 767, 777, 764, 775, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 761, 766, 0, 782, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 760, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 762, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 765, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 778,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 781, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 756, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 0, 261, 763, 0, 310, 347,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 768, 0, 774, 0, 780,
	0, 529, 0, 770, 771, 776, 249, 637, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 772, 769, 773, 779,
	767, 777, 764, 775, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 761, 766, 0, 782,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	760, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 559, 762, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 765, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 778, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 0, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 510,
	511, 781, 513, 514, 515, 516, 517, 0, 636, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	2909, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 0,
	261, 763, 0, 310, 347, 0, 0, 0, 407, 0,
	460, 464, 0, 0, 0, 0, 0, 0, 318, 0,
	768, 2388, 774, 0, 780, 0, 529, 0, 770, 771,
	776, 249, 893, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 772, 769, 773, 779, 767, 777, 764, 775, 0,
	451, 385, 0, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 761, 766, 0, 782, 0, 287, 288, 409, 269,
	417, 0, 0, 472, 430, 428, 0, 395, 452, 0,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 334, 0, 0, 546, 896, 886, 878, 879, 880,
	881, 882, 883, 0, 898, 899, 900, 901, 902, 539,
	892, 0, 877, 884, 885, 887, 2391, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 760, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	0, 762, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 765, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 0, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 0, 0,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 0, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 0, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 0, 0, 403, 405, 406, 0, 2389, 0, 778,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 0, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 0, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 2394, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	0, 507, 508, 0, 510, 511, 781, 513, 514, 515,
	516, 517, 0, 636, 518, 0, 519, 0, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 0, 0, 0, 231, 0,
	0, 0, 0, 0, 550, 551, 2390, 418, 412, 368,
	410, 411, 415, 416, 419, 2904, 244, 0, 261, 0,
	0, 310, 2306, 562, 0, 0, 407, 0, 460, 464,
	0, 553, 0, 0, 0, 0, 318, 0, 0, 0,
	0, 0, 2902, 0, 529, 0, 0, 0, 0, 249,
	637, 552, 623, 0, 0, 0, 414, 0, 0, 0,
	0, 0, 0, 0, 257, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 451, 385,
	602, 478, 256, 302, 289, 331, 373, 485, 0, 0,
	363, 533, 298, 387, 0, 277, 420, 0, 509, 384,
	0, 492, 512, 0, 404, 283, 443, 499, 500, 0,
	0, 2310, 0, 0, 287, 288, 409, 269, 417, 614,
	580, 472, 430, 428, 0, 395, 452, 609, 0, 0,
	317, 0, 312, 408, 548, 275, 527, 446, 413, 367,
	475, 504, 314, 299, 300, 343, 445, 333, 285, 538,
	577, 581, 579, 575, 572, 576, 573, 574, 578, 334,
	571, 0, 546, 555, 589, 569, 597, 554, 594, 564,
	309, 593, 558, 557, 603, 584, 585, 539, 599, 570,
	568, 561, 560, 556, 0, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 245, 0, 246, 247, 248,
	250, 251, 252, 0, 253, 254, 255, 258, 259, 260,
	262, 622, 263, 264, 265, 266, 267, 268, 559, 0,
	270, 271, 272, 273, 274, 276, 278, 279, 280, 281,
	282, 284, 286, 0, 0, 0, 0, 0, 0, 0,
	290, 291, 292, 293, 294, 295, 0, 296, 297, 301,
	303, 304, 305, 306, 307, 308, 311, 0, 313, 315,
	0, 316, 319, 0, 2316, 321, 322, 323, 324, 325,
	326, 327, 563, 328, 0, 329, 330, 332, 2315, 335,
	336, 337, 338, 339, 0, 340, 565, 566, 341, 342,
	344, 345, 346, 348, 349, 350, 351, 352, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 362, 364,
	0, 365, 366, 369, 370, 371, 372, 0, 374, 582,
	0, 375, 376, 377, 0, 0, 378, 379, 380, 381,
	382, 383, 386, 583, 388, 389, 390, 391, 392, 393,
	394, 624, 396, 397, 398, 399, 400, 401, 402, 586,
	587, 403, 405, 406, 588, 590, 591, 0, 421, 422,
	423, 424, 425, 426, 427, 429, 0, 431, 432, 433,
	592, 434, 435, 436, 437, 2314, 438, 439, 440, 441,
	442, 444, 447, 448, 449, 450, 0, 453, 454, 455,
	456, 457, 458, 459, 461, 462, 463, 465, 466, 467,
	625, 468, 469, 470, 471, 595, 473, 474, 626, 476,
	477, 479, 480, 481, 482, 483, 484, 635, 0, 486,
	596, 487, 488, 489, 490, 491, 0, 493, 494, 495,
	496, 497, 498, 501, 502, 503, 505, 506, 598, 507,
	508, 0, 510, 511, 0, 513, 514, 515, 516, 517,
	0, 636, 518, 600, 519, 601, 520, 521, 522, 523,
	524, 525, 526, 528, 0, 2313, 530, 531, 532, 534,
	535, 536, 537, 540, 541, 542, 543, 544, 0, 545,
	547, 549, 627, 604, 605, 606, 607, 608, 610, 611,
	612, 613, 550, 551, 567, 418, 412, 368, 410, 411,
	415, 416, 419, 231, 0, 0, 0, 2312, 2307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 244, 0, 261, 0, 0, 310, 347, 562, 0,
	0, 407, 0, 460, 464, 0, 553, 0, 0, 0,
	0, 318, 0, 0, 0, 2869, 0, 0, 0, 529,
	0, 0, 0, 0, 249, 637, 552, 623, 0, 0,
	0, 414, 0, 0, 0, 0, 0, 0, 0, 257,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 451, 385, 602, 478, 256, 302, 289,
	331, 373, 485, 0, 0, 363, 533, 298, 387, 0,
	277, 420, 0, 509, 384, 0, 492, 512, 0, 404,
	283, 443, 499, 500, 0, 0, 2310, 0, 0, 287,
	288, 409, 269, 417, 614, 580, 472, 430, 428, 0,
	395, 452, 609, 0, 0, 317, 0, 312, 408, 548,
	275, 527, 446, 413, 367, 475, 504, 314, 299, 300,
	343, 445, 333, 285, 538, 577, 581, 579, 575, 572,
	576, 573, 574, 578, 334, 571, 0, 546, 555, 589,
	569, 597, 554, 594, 564, 309, 593, 558, 557, 603,
	584, 585, 539, 599, 570, 568, 561, 560, 556, 0,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	245, 0, 246, 247, 248, 250, 251, 252, 0, 253,
	254, 255, 258, 259, 260, 262, 622, 263, 264, 265,
	266, 267, 268, 559, 0, 270, 271, 272, 273, 274,
	276, 278, 279, 280, 281, 282, 284, 286, 0, 0,
	0, 0, 0, 0, 0, 290, 291, 292, 293, 294,
	295, 0, 296, 297, 301, 303, 304, 305, 306, 307,
	308, 311, 0, 313, 315, 0, 316, 319, 0, 2316,
	321, 322, 323, 324, 325, 326, 327, 563, 328, 0,
	329, 330, 332, 2315, 335, 336, 337, 338, 339, 0,
	340, 565, 566, 341, 342, 344, 345, 346, 348, 349,
	350, 351, 352, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 362, 364, 0, 365, 366, 369, 370,
	371, 372, 0, 374, 582, 0, 375, 376, 377, 0,
	0, 378, 379, 380, 381, 382, 383, 386, 583, 388,
	389, 390, 391, 392, 393, 394, 624, 396, 397, 398,
	399, 400, 401, 402, 586, 587, 403, 405, 406, 588,
	590, 591, 0, 421, 422, 423, 424, 425, 426, 427,
	429, 0, 431, 432, 433, 592, 434, 435, 436, 437,
	2314, 438, 439, 440, 441, 442, 444, 447, 448, 449,
	450, 0, 453, 454, 455, 456, 457, 458, 459, 461,
	462, 463, 465, 466, 467, 625, 468, 469, 470, 471,
	595, 473, 474, 626, 476, 477, 479, 480, 481, 482,
	483, 484, 635, 0, 486, 596, 487, 488, 489, 490,
	491, 0, 493, 494, 495, 496, 497, 498, 501, 502,
	503, 505, 506, 598, 507, 508, 0, 510, 511, 0,
	513, 514, 515, 516, 517, 0, 636, 518, 600, 519,
	601, 520, 521, 522, 523, 524, 525, 526, 528, 0,
	2313, 530, 531, 532, 534, 535, 536, 537, 540, 541,
	542, 543, 544, 0, 545, 547, 549, 627, 604, 605,
	606, 607, 608, 610, 611, 612, 613, 550, 551, 567,
	418, 412, 368, 410, 411, 415, 416, 419, 231, 0,
	0, 0, 2312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 244, 0, 261, 0,
	0, 310, 347, 562, 0, 0, 407, 0, 460, 464,
	0, 553, 0, 0, 0, 0, 318, 0, 0, 0,
	0, 0, 0, 0, 529, 0, 0, 0, 0, 249,
	637, 552, 623, 0, 0, 0, 414, 0, 0, 0,
	0, 0, 0, 0, 257, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 451, 385,
	602, 478, 256, 302, 289, 331, 373, 485, 0, 0,
	363, 533, 298, 387, 0, 277, 420, 0, 509, 384,
	0, 492, 512, 0, 404, 283, 443, 499, 500, 0,
	0, 2310, 0, 0, 287, 288, 409, 269, 417, 614,
	580, 472, 430, 428, 0, 395, 452, 609, 0, 0,
	317, 0, 312, 408, 548, 275, 527, 446, 413, 367,
	475, 504, 314, 299, 300, 343, 445, 333, 285, 538,
	577, 581, 579, 575, 572, 576, 573, 574, 578, 334,
	571, 0, 546, 555, 589, 569, 597, 554, 594, 564,
	309, 593, 558, 557, 603, 584, 585, 539, 599, 570,
	568, 561, 560, 556, 0, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 245, 0, 246, 247, 248,
	250, 251, 252, 0, 253, 254, 255, 258, 259, 260,
	262, 622, 263, 264, 265, 266, 267, 268, 559, 0,
	270, 271, 272, 273, 274, 276, 278, 279, 280, 281,
	282, 284, 286, 0, 0, 0, 0, 0, 0, 0,
	290, 291, 292, 293, 294, 295, 0, 296, 297, 301,
	303, 304, 305, 306, 307, 308, 311, 0, 313, 315,
	0, 316, 319, 0, 2316, 321, 322, 323, 324, 325,
	326, 327, 563, 328, 0, 329, 330, 332, 2315, 335,
	336, 337, 338, 339, 0, 340, 565, 566, 341, 342,
	344, 345, 346, 348, 349, 350, 351, 352, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 362, 364,
	0, 365, 366, 369, 370, 371, 372, 0, 374, 582,
	0, 375, 376, 377, 0, 0, 378, 379, 380, 381,
	382, 383, 386, 583, 388, 389, 390, 391, 392, 393,
	394, 624, 396, 397, 398, 399, 400, 401, 402, 586,
	587, 403, 405, 406, 588, 590, 591, 0, 421, 422,
	423, 424, 425, 426, 427, 429, 0, 431, 432, 433,
	592, 434, 435, 436, 437, 2314, 438, 439, 440, 441,
	442, 444, 447, 448, 449, 450, 0, 453, 454, 455,
	456, 457, 458, 459, 461, 462, 463, 465, 466, 467,
	625, 468, 469, 470, 471, 595, 473, 474, 626, 476,
	477, 479, 480, 481, 482, 483, 484, 635, 0, 486,
	596, 487, 488, 489, 490, 491, 0, 493, 494, 495,
	496, 497, 498, 501, 502, 503, 505, 506, 598, 507,
	508, 0, 510, 511, 0, 513, 514, 515, 516, 517,
	0, 636, 518, 600, 519, 601, 520, 521, 522, 523,
	524, 525, 526, 528, 0, 2313, 530, 531, 532, 534,
	535, 536, 537, 540, 541, 542, 543, 544, 0, 545,
	547, 549, 627, 604, 605, 606, 607, 608, 610, 611,
	612, 613, 550, 551, 567, 418, 412, 368, 410, 411,
	415, 416, 419, 894, 0, 0, 0, 2312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 244, 0, 261, 763, 0, 310, 347, 0, 0,
	0, 407, 0, 460, 464, 0, 0, 0, 0, 0,
	0, 318, 0, 768, 2388, 774, 0, 780, 0, 529,
	0, 770, 771, 776, 249, 893, 552, 623, 0, 0,
	0, 414, 0, 0, 0, 0, 0, 0, 0, 257,
	0, 0, 0, 0, 772, 769, 773, 779, 767, 777,
	764, 775, 0, 451, 385, 0, 478, 256, 302, 289,
	331, 373, 485, 0, 0, 363, 533, 298, 387, 0,
	277, 420, 0, 509, 384, 0, 492, 512, 0, 404,
	283, 443, 499, 500, 761, 766, 0, 782, 0, 287,
	288, 409, 269, 417, 0, 0, 472, 430, 428, 0,
	395, 452, 0, 0, 0, 317, 0, 312, 408, 548,
	275, 527, 446, 413, 367, 475, 504, 314, 299, 300,
	343, 445, 333, 285, 538, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 334, 0, 0, 546, 896, 886,
	878, 879, 880, 881, 882, 883, 0, 898, 899, 900,
	901, 902, 539, 892, 0, 877, 884, 885, 887, 2391,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	245, 0, 246, 247, 248, 250, 251, 252, 760, 253,
	254, 255, 258, 259, 260, 262, 622, 263, 264, 265,
	266, 267, 268, 0, 762, 270, 271, 272, 273, 274,
	276, 278, 279, 280, 281, 282, 284, 286, 0, 0,
	0, 765, 0, 0, 0, 290, 291, 292, 293, 294,
	295, 0, 296, 297, 301, 303, 304, 305, 306, 307,
	308, 311, 0, 313, 315, 0, 316, 319, 0, 320,
	321, 322, 323, 324, 325, 326, 327, 0, 328, 0,
	329, 330, 332, 0, 335, 336, 337, 338, 339, 0,
	340, 0, 0, 341, 342, 344, 345, 346, 348, 349,
	350, 351, 352, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 362, 364, 0, 365, 366, 369, 370,
	371, 372, 0, 374, 0, 0, 375, 376, 377, 0,
	0, 378, 379, 380, 381, 382, 383, 386, 0, 388,
	389, 390, 391, 392, 393, 394, 624, 396, 397, 398,
	399, 400, 401, 402, 0, 0, 403, 405, 406, 0,
	2389, 0, 778, 421, 422, 423, 424, 425, 426, 427,
	429, 0, 431, 432, 433, 0, 434, 435, 436, 437,
	0, 438, 439, 440, 441, 442, 444, 447, 448, 449,
	450, 0, 453, 454, 455, 456, 457, 458, 459, 461,
	462, 463, 465, 466, 467, 625, 468, 469, 470, 471,
	0, 473, 474, 626, 476, 477, 479, 480, 481, 482,
	483, 484, 635, 0, 486, 2394, 487, 488, 489, 490,
	491, 0, 493, 494, 495, 496, 497, 498, 501, 502,
	503, 505, 506, 0, 507, 508, 0, 510, 511, 781,
	513, 514, 515, 516, 517, 0, 636, 518, 0, 519,
	0, 520, 521, 522, 523, 524, 525, 526, 528, 0,
	0, 530, 531, 532, 534, 535, 536, 537, 540, 541,
	542, 543, 544, 0, 545, 547, 549, 627, 0, 0,
	0, 0, 894, 0, 0, 0, 0, 550, 551, 2390,
	418, 412, 368, 410, 411, 415, 416, 419, 0, 0,
	244, 0, 261, 763, 0, 310, 347, 0, 0, 0,
	407, 0, 460, 464, 0, 0, 0, 0, 0, 0,
	318, 2889, 768, 2388, 774, 0, 780, 0, 529, 0,
	770, 771, 776, 249, 893, 552, 623, 0, 0, 0,
	414, 0, 0, 0, 0, 0, 0, 0, 257, 0,
	0, 0, 0, 772, 769, 773, 779, 767, 777, 764,
	775, 0, 451, 385, 0, 478, 256, 302, 289, 331,
	373, 485, 0, 0, 363, 533, 298, 387, 0, 277,
	420, 0, 509, 384, 0, 492, 512, 0, 404, 283,
	443, 499, 500, 761, 766, 0, 782, 0, 287, 288,
	409, 269, 417, 0, 0, 472, 430, 428, 0, 395,
	452, 0, 0, 0, 317, 0, 312, 408, 548, 275,
	527, 446, 413, 367, 475, 504, 314, 299, 300, 343,
	445, 333, 285, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 334, 0, 0, 546, 896, 886, 878,
	879, 880, 881, 882, 883, 0, 898, 899, 900, 901,
	902, 539, 892, 0, 877, 884, 885, 887, 2391, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 245,
	0, 246, 247, 248, 250, 251, 252, 760, 253, 254,
	255, 258, 259, 260, 262, 622, 263, 264, 265, 266,
	267, 268, 0, 762, 270, 271, 272, 273, 274, 276,
	278, 279, 280, 281, 282, 284, 286, 0, 0, 0,
	765, 0, 0, 0, 290, 291, 292, 293, 294, 295,
	0, 296, 297, 301, 303, 304, 305, 306, 307, 308,
	311, 0, 313, 315, 0, 316, 319, 0, 320, 321,
	322, 323, 324, 325, 326, 327, 0, 328, 0, 329,
	330, 332, 0, 335, 336, 337, 338, 339, 0, 340,
	0, 0, 341, 342, 344, 345, 346, 348, 349, 350,
	351, 352, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 362, 364, 0, 365, 366, 369, 370, 371,
	372, 0, 374, 0, 0, 375, 376, 377, 0, 0,
	378, 379, 380, 381, 382, 383, 386, 0, 388, 389,
	390, 391, 392, 393, 394, 624, 396, 397, 398, 399,
	400, 401, 402, 0, 0, 403, 405, 406, 0, 2389,
	0, 778, 421, 422, 423, 424, 425, 426, 427, 429,
	0, 431, 432, 433, 0, 434, 435, 436, 437, 0,
	438, 439, 440, 441, 442, 444, 447, 448, 449, 450,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 462,
	463, 465, 466, 467, 625, 468, 469, 470, 471, 0,
	473, 474, 626, 476, 477, 479, 480, 481, 482, 483,
	484, 635, 0, 486, 2394, 487, 488, 489, 490, 491,
	0, 493, 494, 495, 496, 497, 498, 501, 502, 503,
	505, 506, 0, 507, 508, 0, 510, 511, 781, 513,
	514, 515, 516, 517, 0, 636, 518, 0, 519, 0,
	520, 521, 522, 523, 524, 525, 526, 528, 0, 0,
	530, 531, 532, 534, 535, 536, 537, 540, 541, 542,
	543, 544, 0, 545, 547, 549, 627, 0, 0, 0,
	231, 0, 0, 0, 0, 0, 550, 551, 2390, 418,
	412, 368, 410, 411, 415, 416, 419, 643, 648, 0,
	261, 0, 647, 310, 347, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	2383, 0, 0, 0, 0, 0, 529, 0, 0, 0,
	0, 249, 637, 552, 623, 0, 0, 0, 414, 645,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 0, 0, 0, 0, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 0, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 0, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 3201, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 0,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 646, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 0, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 643, 648, 0, 261, 0, 647, 310, 347,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 529, 0, 0, 0, 0, 249, 637, 552, 623,
	0, 0, 0, 414, 645, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 0, 0, 0, 0,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	0, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 559, 0, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 651, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 0, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 646, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 0, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 510,
	511, 0, 513, 514, 515, 516, 517, 0, 636, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 643, 648, 0,
	261, 0, 647, 310, 347, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 529, 0, 0, 0,
	0, 249, 637, 552, 623, 0, 0, 0, 414, 645,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 0, 0, 0, 0, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 0, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 0, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 0,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 646, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 0, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2283, 244, 0, 261, 0, 0, 310, 347,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 529, 0, 0, 0, 0, 249, 637, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 674, 2286, 0,
	0, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 0, 0, 0, 0,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	0, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 559, 0, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 2290, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 0, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 0, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 2287,
	511, 0, 513, 514, 515, 516, 517, 0, 636, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1475, 244, 0,
	261, 0, 0, 310, 347, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 529, 0, 0, 0,
	0, 249, 637, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 1461, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 0, 0, 0, 0, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 0, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 0, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 0, 0,
	0, 0, 290, 1467, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 1468, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	1463, 335, 1464, 337, 338, 339, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 1469, 1470, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 0,
	421, 422, 423, 1471, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 1465, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 1466, 471, 595, 473, 474,
	1472, 476, 477, 479, 480, 1462, 482, 483, 484, 635,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 1473, 0, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	1474, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 0, 261, 0, 0, 310, 347,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 529, 0, 0, 0, 0, 249, 637, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 674, 2286, 0,
	0, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 0, 0, 0, 0,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	0, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 559, 0, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 2290, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 0, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 0, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 2287,
	511, 0, 513, 514, 515, 516, 517, 0, 636, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 648, 0,
	261, 0, 647, 310, 347, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 529, 0, 0, 0,
	0, 249, 637, 552, 623, 0, 0, 0, 414, 645,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 0, 0, 0, 0, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 0, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 0, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 0,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 646, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 0, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3042, 244, 0, 261, 0, 0, 310, 347,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 529, 0, 0, 0, 0, 249, 637, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 3043, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 0, 0, 0, 0,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	0, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 559, 0, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 0, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 0, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 510,
	511, 0, 513, 514, 515, 516, 517, 0, 636, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3033, 244, 0,
	261, 0, 0, 310, 347, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 529, 0, 0, 0,
	0, 249, 637, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 3034,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 0, 0, 0, 0, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 0, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 0, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 0,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 0, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 803, 244, 0, 261, 0, 0, 310, 802,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 529, 0, 0, 0, 0, 249, 637, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 674, 0, 0,
	0, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 0, 0, 0, 0,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	0, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 559, 0, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 0, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 0, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 510,
	511, 0, 513, 514, 515, 516, 517, 0, 636, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 0,
	261, 0, 0, 310, 347, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 529, 0, 0, 0,
	0, 249, 637, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 674, 0, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 0, 0, 0, 0, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 0, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 0, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 0,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 0, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 0, 261, 0, 0, 310, 347,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 4476, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 529, 0, 0, 0, 0, 249, 637, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 0, 0, 0, 0,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	0, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 559, 0, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 0, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 0, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 510,
	511, 0, 513, 514, 515, 516, 517, 0, 636, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 3472,
	261, 0, 0, 310, 347, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 529, 0, 0, 0,
	0, 249, 637, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 0, 0, 0, 0, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 0, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 0, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 0,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 0, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 0, 261, 0, 0, 310, 347,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 4131, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 529, 0, 0, 0, 0, 249, 637, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 0, 0, 0, 0,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	0, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 559, 0, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 0, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 0, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 510,
	511, 0, 513, 514, 515, 516, 517, 0, 636, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 0,
	261, 0, 0, 310, 347, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 529, 0, 0, 0,
	0, 249, 637, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 0, 0, 0, 0, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 0, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 0, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 4115, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 0,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 0, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 3484, 261, 0, 0, 310, 347,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 529, 0, 0, 0, 0, 249, 637, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 0, 0, 0, 0,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	0, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 559, 0, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 0, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 0, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 510,
	511, 0, 513, 514, 515, 516, 517, 0, 636, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 0,
	261, 0, 0, 310, 347, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 3683, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 529, 0, 0, 0,
	0, 249, 637, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 0, 0, 0, 0, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 0, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 0, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 0,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 0, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 231, 0, 0, 0, 0,
	0, 0, 0, 1037, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 0, 261, 0, 0, 310, 347,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 529, 0, 0, 0, 0, 249, 637, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 0, 0, 0, 0,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	0, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 559, 0, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 0, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 0, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 510,
	511, 0, 513, 514, 515, 516, 517, 0, 636, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 0,
	261, 0, 0, 310, 347, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 529, 0, 0, 0,
	0, 249, 637, 552, 2627, 0, 0, 0, 414, 0,
	0, 0, 0, 2630, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 0, 0, 0, 0, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 0, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 0, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 2628, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 0,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 0, 2626, 514, 2625,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 2629,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 0, 261, 0, 0, 310, 1267,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 529, 0, 0, 0, 0, 249, 637, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 674, 0, 0,
	0, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 0, 0, 0, 0,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	0, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 559, 0, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 0, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 0, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 510,
	511, 0, 513, 514, 515, 516, 517, 0, 636, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1265, 244, 0,
	261, 0, 0, 310, 1264, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 529, 0, 0, 0,
	0, 249, 637, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 0, 0, 0, 0, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 0, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 0, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 0,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 0, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 0, 261, 0, 0, 310, 347,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 529, 0, 0, 0, 0, 249, 224, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 0, 0, 0, 0,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	926, 253, 254, 255, 258, 259, 260, 262, 225, 263,
	925, 265, 266, 267, 268, 559, 0, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 227, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 0, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 228, 468, 469,
	470, 471, 595, 473, 474, 226, 476, 477, 479, 480,
	481, 482, 483, 484, 923, 0, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 510,
	511, 0, 513, 514, 515, 516, 517, 0, 220, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 229,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 806, 244, 0,
	261, 0, 0, 310, 805, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 529, 0, 0, 0,
	0, 249, 637, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 0, 0, 0, 0, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 0, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 0, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 0,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 0, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 621, 244, 0, 261, 0, 0, 310, 347,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 529, 0, 0, 0, 0, 249, 617, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 0, 0, 0, 0,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	0, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 559, 0, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 0, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 619, 0, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 510,
	511, 0, 513, 514, 515, 516, 517, 0, 618, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 0,
	261, 0, 0, 310, 347, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 529, 0, 0, 0,
	0, 249, 637, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 0, 0, 0, 0, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 5343, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 0, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 0, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 0,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 0, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 0, 261, 0, 0, 310, 347,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 529, 0, 0, 0, 0, 249, 637, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 0, 0, 0, 0,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	0, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 559, 0, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 0, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 0, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 510,
	511, 0, 513, 514, 515, 516, 517, 0, 636, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 0,
	261, 0, 0, 310, 3174, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 529, 0, 0, 0,
	0, 249, 637, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 0, 0, 0, 0, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 0, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 0, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 0,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 0, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 0, 261, 0, 0, 310, 347,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 529, 0, 0, 0, 0, 249, 224, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 0, 0, 0, 0,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	0, 253, 254, 255, 258, 259, 260, 262, 225, 263,
	264, 265, 266, 267, 268, 559, 0, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 227, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 0, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 228, 468, 469,
	470, 471, 595, 473, 474, 226, 476, 477, 479, 480,
	481, 482, 483, 484, 923, 0, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 510,
	511, 0, 513, 514, 515, 516, 517, 0, 220, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 229,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 0,
	261, 0, 0, 310, 3113, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 529, 0, 0, 0,
	0, 249, 637, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 0, 0, 0, 0, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 0, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 0, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 0,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 0, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 0, 261, 0, 0, 310, 3021,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 529, 0, 0, 0, 0, 249, 637, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 0, 0, 0, 0,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	0, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 559, 0, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 0, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 0, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 510,
	511, 0, 513, 514, 515, 516, 517, 0, 636, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 0,
	261, 0, 0, 310, 3019, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 529, 0, 0, 0,
	0, 249, 637, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 0, 0, 0, 0, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 0, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 0, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 0,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 0, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 0, 261, 0, 0, 310, 3005,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 529, 0, 0, 0, 0, 249, 637, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 0, 0, 0, 0,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	0, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 559, 0, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 0, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 0, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 510,
	511, 0, 513, 514, 515, 516, 517, 0, 636, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 0,
	261, 0, 0, 310, 347, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 529, 0, 0, 0,
	0, 249, 224, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 0, 0, 0, 0, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 0, 253, 254, 255, 258,
	259, 260, 262, 225, 263, 264, 265, 266, 267, 268,
	559, 0, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 227, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 0,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 228, 468, 469, 470, 471, 595, 473, 474,
	226, 476, 477, 479, 480, 481, 482, 483, 484, 2426,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 0, 513, 514, 515,
	516, 517, 0, 2427, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 229, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 0, 261, 0, 0, 310, 2274,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 529, 0, 0, 0, 0, 249, 637, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 0, 0, 0, 0,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	0, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 559, 0, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 0, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 0, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 510,
	511, 0, 513, 514, 515, 516, 517, 0, 636, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 0,
	261, 0, 0, 310, 2215, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 529, 0, 0, 0,
	0, 249, 637, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 0, 0, 0, 0, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 0, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 0, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 0,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 0, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 0, 261, 0, 0, 310, 347,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 529, 0, 0, 0, 0, 249, 637, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 0, 0, 0, 0,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	0, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 559, 0, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 0, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 1457, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 0, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 510,
	511, 0, 513, 514, 515, 516, 517, 0, 636, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 0,
	261, 0, 0, 310, 1407, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 529, 0, 0, 0,
	0, 249, 637, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 0, 0, 0, 0, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 0, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 0, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 0,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 0, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 0, 261, 0, 0, 310, 1187,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 529, 0, 0, 0, 0, 249, 637, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 0, 0, 0, 0,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	0, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 559, 0, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 0, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 0, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 510,
	511, 0, 513, 514, 515, 516, 517, 0, 636, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 0,
	261, 0, 0, 310, 1148, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 529, 0, 0, 0,
	0, 249, 637, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 0, 0, 0, 0, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 0, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 0, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 0,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 0, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 0, 261, 0, 0, 310, 1144,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 529, 0, 0, 0, 0, 249, 637, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 0, 0, 0, 0,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	0, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 559, 0, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 0, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 0, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 510,
	511, 0, 513, 514, 515, 516, 517, 0, 636, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 1138,
	261, 0, 0, 310, 347, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 529, 0, 0, 0,
	0, 249, 637, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 0,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 0, 0, 0, 0, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 0, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 0, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 0,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 0, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 0, 261, 0, 0, 310, 866,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 529, 0, 0, 0, 0, 249, 637, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 0, 0, 0, 0,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	0, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 559, 0, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 0, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 0, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 510,
	511, 0, 513, 514, 515, 516, 517, 0, 636, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 0,
	261, 0, 0, 310, 862, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 529, 0, 0, 0,
	0, 249, 637, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 0, 0, 0, 0, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 0, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 0, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 0,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 0, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 0, 261, 0, 0, 310, 859,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 529, 0, 0, 0, 0, 249, 637, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 0, 0, 0, 0,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	0, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 559, 0, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 0, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 0, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 510,
	511, 0, 513, 514, 515, 516, 517, 0, 636, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 0,
	261, 0, 0, 310, 854, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 529, 0, 0, 0,
	0, 249, 637, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 0, 0, 0, 0, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 0, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 0, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 0,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 0, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 0, 261, 0, 0, 310, 835,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 529, 0, 0, 0, 0, 249, 637, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 0, 0, 0, 0,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	0, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 559, 0, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 0, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 0, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 510,
	511, 0, 513, 514, 515, 516, 517, 0, 636, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 0,
	261, 0, 0, 310, 810, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 529, 0, 0, 0,
	0, 249, 637, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 0, 0, 0, 0, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 0, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 0, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 0,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 0, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 0, 261, 0, 0, 310, 808,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 529, 0, 0, 0, 0, 249, 637, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 0, 0, 0, 0,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	0, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 559, 0, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 0, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 0, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 510,
	511, 0, 513, 514, 515, 516, 517, 0, 636, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 0,
	261, 0, 0, 310, 789, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 529, 0, 0, 0,
	0, 249, 637, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 0, 0, 0, 0, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 0, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 0, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 0,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 0, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 0, 261, 0, 0, 310, 748,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 529, 0, 0, 0, 0, 249, 637, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 0, 0, 0, 0,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	0, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 559, 0, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 0, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 0, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 510,
	511, 0, 513, 514, 515, 516, 517, 0, 636, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 0,
	261, 0, 0, 310, 744, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 529, 0, 0, 0,
	0, 249, 637, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 0, 0, 0, 0, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 0, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 0, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 0,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 0, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 0, 261, 0, 0, 310, 742,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 529, 0, 0, 0, 0, 249, 637, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 0, 0, 0, 0,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	0, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 559, 0, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 0, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 0, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 510,
	511, 0, 513, 514, 515, 516, 517, 0, 636, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 0,
	261, 0, 0, 310, 717, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 529, 0, 0, 0,
	0, 249, 637, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 0, 0, 0, 0, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 0, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 0, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 0,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 0, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 0, 261, 0, 0, 310, 347,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 529, 0, 0, 0, 0, 249, 637, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 677, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 0, 0, 0, 0,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	0, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 559, 0, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 0, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 595, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 0, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 510,
	511, 0, 513, 514, 515, 516, 517, 0, 636, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 0,
	261, 0, 0, 310, 347, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 529, 0, 0, 0,
	0, 249, 637, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 0, 0, 0, 0, 0, 287, 288, 409, 269,
	417, 614, 580, 472, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 0, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 0, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 565, 566,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 0,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 638,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 0, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 0, 261, 0, 0, 310, 347,
	562, 0, 0, 407, 0, 460, 464, 0, 553, 0,
	0, 0, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 529, 0, 0, 0, 0, 249, 224, 552, 218,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 451, 385, 602, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 0, 0, 0, 0,
	0, 287, 288, 409, 269, 417, 614, 580, 472, 430,
	428, 0, 395, 452, 609, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 577, 581, 579,
	575, 572, 576, 573, 574, 578, 334, 571, 0, 546,
	555, 589, 569, 597, 554, 594, 564, 309, 593, 558,
	557, 603, 584, 585, 539, 599, 570, 568, 561, 560,
	556, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	0, 253, 254, 255, 258, 259, 260, 262, 225, 263,
	264, 265, 266, 267, 268, 559, 0, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 563,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 565, 566, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 582, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	583, 388, 389, 390, 391, 392, 393, 394, 227, 396,
	397, 398, 399, 400, 401, 402, 586, 587, 403, 405,
	406, 588, 590, 591, 0, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 592, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 228, 468, 469,
	470, 471, 595, 473, 474, 226, 476, 477, 479, 480,
	481, 482, 483, 484, 219, 0, 486, 596, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 598, 507, 508, 0, 510,
	511, 0, 513, 514, 515, 516, 517, 0, 220, 518,
	600, 519, 601, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 229,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 550,
	551, 567, 418, 412, 368, 410, 411, 415, 416, 419,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 0,
	261, 0, 0, 310, 347, 562, 0, 0, 407, 0,
	460, 464, 0, 553, 0, 0, 0, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 529, 0, 0, 0,
	0, 249, 637, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 385, 602, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 0, 0, 0, 0, 0, 287, 288, 409, 269,
	417, 614, 580, 0, 430, 428, 0, 395, 452, 609,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 577, 581, 579, 575, 572, 576, 573, 574,
	578, 334, 571, 0, 546, 555, 589, 569, 597, 554,
	594, 564, 309, 593, 558, 557, 603, 584, 585, 539,
	599, 570, 568, 561, 560, 556, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 0, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	559, 0, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 563, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 565, 566,
	0, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 582, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 583, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 586, 587, 403, 405, 406, 588, 590, 591, 0,
	421, 422, 423, 424, 425, 426, 0, 429, 0, 431,
	432, 433, 592, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 0, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 595, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 596, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	598, 507, 508, 0, 510, 511, 0, 513, 514, 515,
	516, 517, 0, 636, 518, 600, 519, 601, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 604, 605, 606, 607, 608,
	610, 611, 612, 613, 550, 551, 567, 418, 412, 368,
	410, 411, 415, 416, 419, 894, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 0, 261, 763, 0, 310, 347,
	0, 0, 0, 407, 0, 460, 464, 0, 0, 0,
	0, 0, 0, 318, 0, 768, 2388, 774, 0, 780,
	0, 529, 0, 770, 771, 776, 249, 893, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 772, 769, 773, 779,
	767, 777, 764, 775, 0, 451, 385, 0, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 761, 766, 0, 782,
	0, 287, 288, 409, 269, 417, 0, 0, 472, 430,
	428, 0, 395, 452, 0, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 334, 0, 0, 546,
	896, 886, 878, 879, 880, 881, 882, 883, 0, 898,
	899, 900, 901, 902, 539, 892, 0, 877, 884, 885,
	887, 2391, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	760, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 0, 762, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 765, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 0,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 0, 0, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 0, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	0, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 0, 0, 403, 405,
	406, 0, 2389, 0, 778, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 0, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 0, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 0, 486, 2394, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 0, 507, 508, 0, 510,
	511, 781, 513, 514, 515, 516, 517, 0, 636, 518,
	0, 519, 0, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	0, 0, 894, 0, 0, 0, 0, 0, 0, 550,
	551, 2390, 418, 412, 368, 410, 411, 415, 416, 419,
	244, 0, 261, 763, 0, 310, 347, 0, 0, 0,
	407, 0, 460, 464, 0, 0, 0, 0, 0, 0,
	318, 0, 768, 0, 774, 2416, 780, 0, 529, 0,
	770, 771, 776, 249, 893, 552, 623, 0, 0, 0,
	414, 0, 0, 0, 0, 3515, 0, 0, 257, 0,
	0, 0, 0, 772, 769, 773, 779, 767, 777, 764,
	775, 0, 451, 385, 0, 478, 256, 302, 289, 331,
	373, 485, 0, 0, 363, 533, 298, 387, 0, 277,
	420, 0, 509, 384, 0, 492, 512, 0, 404, 283,
	443, 499, 500, 761, 766, 0, 782, 0, 287, 288,
	409, 269, 417, 0, 0, 472, 430, 428, 0, 395,
	452, 0, 0, 0, 317, 0, 312, 408, 548, 275,
	527, 446, 413, 367, 475, 504, 314, 299, 300, 343,
	445, 333, 285, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 334, 0, 0, 546, 896, 886, 878,
	879, 880, 881, 882, 883, 0, 898, 899, 900, 901,
	902, 539, 892, 0, 877, 884, 885, 887, 0, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 245,
	0, 246, 247, 248, 250, 251, 252, 760, 253, 254,
	255, 258, 259, 260, 262, 622, 263, 264, 265, 266,
	267, 268, 0, 762, 270, 271, 272, 273, 274, 276,
	278, 279, 280, 281, 282, 284, 286, 0, 0, 0,
	765, 0, 0, 0, 290, 291, 292, 293, 294, 295,
	0, 296, 297, 301, 303, 304, 305, 306, 307, 308,
	311, 0, 313, 315, 0, 316, 319, 0, 320, 321,
	322, 323, 324, 325, 326, 327, 0, 328, 0, 329,
	330, 332, 0, 335, 336, 337, 338, 339, 0, 340,
	0, 0, 341, 342, 344, 345, 346, 348, 349, 350,
	351, 352, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 362, 364, 0, 365, 366, 369, 370, 371,
	372, 0, 374, 0, 0, 375, 376, 377, 0, 0,
	378, 379, 380, 381, 382, 383, 386, 0, 388, 389,
	390, 391, 392, 393, 394, 624, 396, 397, 398, 399,
	400, 401, 402, 0, 0, 403, 405, 406, 0, 0,
	0, 778, 421, 422, 423, 424, 425, 426, 427, 429,
	0, 431, 432, 433, 0, 434, 435, 436, 437, 0,
	438, 439, 440, 441, 442, 444, 447, 448, 449, 450,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 462,
	463, 465, 466, 467, 625, 468, 469, 470, 471, 0,
	473, 474, 626, 476, 477, 479, 480, 481, 482, 483,
	484, 635, 0, 486, 2394, 487, 488, 489, 490, 491,
	0, 493, 494, 495, 496, 497, 498, 501, 502, 503,
	505, 506, 0, 507, 508, 0, 510, 511, 781, 513,
	514, 515, 516, 517, 0, 636, 518, 0, 519, 0,
	520, 521, 522, 523, 524, 525, 526, 528, 0, 0,
	530, 531, 532, 534, 535, 536, 537, 540, 541, 542,
	543, 544, 0, 545, 547, 549, 627, 0, 0, 894,
	0, 0, 0, 0, 0, 0, 550, 551, 0, 418,
	412, 368, 410, 411, 415, 416, 419, 244, 0, 261,
	763, 0, 310, 347, 0, 0, 0, 407, 0, 460,
	464, 0, 0, 0, 0, 0, 0, 318, 0, 768,
	0, 774, 0, 780, 0, 529, 0, 770, 771, 776,
	249, 893, 552, 623, 0, 0, 0, 414, 0, 0,
	0, 0, 0, 0, 0, 257, 0, 0, 0, 0,
	772, 769, 773, 779, 767, 777, 764, 775, 0, 451,
	385, 0, 478, 256, 302, 289, 331, 373, 485, 0,
	0, 363, 533, 298, 387, 0, 277, 420, 0, 509,
	384, 0, 492, 512, 0, 404, 283, 443, 499, 500,
	761, 766, 0, 782, 0, 287, 288, 409, 269, 417,
	0, 0, 472, 430, 428, 5377, 395, 452, 0, 0,
	0, 317, 0, 312, 408, 548, 275, 527, 446, 413,
	367, 475, 504, 314, 299, 300, 343, 445, 333, 285,
	538, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	334, 0, 0, 546, 896, 886, 878, 879, 880, 881,
	882, 883, 0, 898, 899, 900, 901, 902, 539, 892,
	0, 877, 884, 885, 887, 0, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 245, 0, 246, 247,
	248, 250, 251, 252, 760, 253, 254, 255, 258, 259,
	260, 262, 622, 263, 264, 265, 266, 267, 268, 0,
	762, 270, 271, 272, 273, 274, 276, 278, 279, 280,
	281, 282, 284, 286, 0, 0, 0, 765, 0, 0,
	0, 290, 291, 292, 293, 294, 295, 0, 296, 297,
	301, 303, 304, 305, 306, 307, 308, 311, 0, 313,
	315, 0, 316, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 0, 328, 0, 329, 330, 332, 0,
	335, 336, 337, 338, 339, 0, 340, 0, 0, 341,
	342, 344, 345, 346, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 362,
	364, 0, 365, 366, 369, 370, 371, 372, 0, 374,
	0, 0, 375, 376, 377, 0, 0, 378, 379, 380,
	381, 382, 383, 386, 0, 388, 389, 390, 391, 392,
	393, 394, 624, 396, 397, 398, 399, 400, 401, 402,
	0, 0, 403, 405, 406, 0, 0, 0, 778, 421,
	422, 423, 424, 425, 426, 427, 429, 0, 431, 432,
	433, 0, 434, 435, 436, 437, 0, 438, 439, 440,
	441, 442, 444, 447, 448, 449, 450, 0, 453, 454,
	455, 456, 457, 458, 459, 461, 462, 463, 465, 466,
	467, 625, 468, 469, 470, 471, 0, 473, 474, 626,
	476, 477, 479, 480, 481, 482, 483, 484, 635, 0,
	486, 0, 487, 488, 489, 490, 491, 0, 493, 494,
	495, 496, 497, 498, 501, 502, 503, 505, 506, 0,
	507, 508, 0, 510, 511, 781, 513, 514, 515, 516,
	517, 0, 636, 518, 0, 519, 0, 520, 521, 522,
	523, 524, 525, 526, 528, 0, 0, 530, 531, 532,
	534, 535, 536, 537, 540, 541, 542, 543, 544, 0,
	545, 547, 549, 627, 0, 0, 894, 0, 0, 0,
	0, 0, 0, 550, 551, 0, 418, 412, 368, 410,
	411, 415, 416, 419, 244, 0, 261, 763, 0, 310,
	347, 0, 0, 0, 407, 0, 460, 464, 0, 0,
	0, 0, 0, 0, 318, 0, 768, 0, 774, 0,
	780, 0, 529, 0, 770, 771, 776, 249, 893, 552,
	623, 0, 0, 0, 414, 0, 0, 0, 0, 0,
	0, 0, 257, 0, 0, 0, 0, 772, 769, 773,
	779, 767, 777, 764, 775, 0, 451, 385, 0, 478,
	256, 302, 289, 331, 373, 485, 0, 0, 363, 533,
	298, 387, 0, 277, 420, 0, 509, 384, 0, 492,
	512, 0, 404, 283, 443, 499, 500, 761, 766, 0,
	782, 0, 287, 288, 409, 269, 417, 0, 0, 472,
	430, 428, 5042, 395, 452, 0, 0, 0, 317, 0,
	312, 408, 548, 275, 527, 446, 413, 367, 475, 504,
	314, 299, 300, 343, 445, 333, 285, 538, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 334, 0, 0,
	546, 896, 886, 878, 879, 880, 881, 882, 883, 0,
	898, 899, 900, 901, 902, 539, 892, 0, 877, 884,
	885, 887, 0, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 245, 0, 246, 247, 248, 250, 251,
	252, 760, 253, 254, 255, 258, 259, 260, 262, 622,
	263, 264, 265, 266, 267, 268, 0, 762, 270, 271,
	272, 273, 274, 276, 278, 279, 280, 281, 282, 284,
	286, 0, 0, 0, 765, 0, 0, 0, 290, 291,
	292, 293, 294, 295, 0, 296, 297, 301, 303, 304,
	305, 306, 307, 308, 311, 0, 313, 315, 0, 316,
	319, 0, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 328, 0, 329, 330, 332, 0, 335, 336, 337,
	338, 339, 0, 340, 0, 0, 341, 342, 344, 345,
	346, 348, 349, 350, 351, 352, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 362, 364, 0, 365,
	366, 369, 370, 371, 372, 0, 374, 0, 0, 375,
	376, 377, 0, 0, 378, 379, 380, 381, 382, 383,
	386, 0, 388, 389, 390, 391, 392, 393, 394, 624,
	396, 397, 398, 399, 400, 401, 402, 0, 0, 403,
	405, 406, 0, 0, 0, 778, 421, 422, 423, 424,
	425, 426, 427, 429, 0, 431, 432, 433, 0, 434,
	435, 436, 437, 0, 438, 439, 440, 441, 442, 444,
	447, 448, 449, 450, 0, 453, 454, 455, 456, 457,
	458, 459, 461, 462, 463, 465, 466, 467, 625, 468,
	469, 470, 471, 0, 473, 474, 626, 476, 477, 479,
	480, 481, 482, 483, 484, 635, 0, 486, 0, 487,
	488, 489, 490, 491, 0, 493, 494, 495, 496, 497,
	498, 501, 502, 503, 505, 506, 0, 507, 508, 0,
	510, 511, 781, 513, 514, 515, 516, 517, 0, 636,
	518, 0, 519, 0, 520, 521, 522, 523, 524, 525,
	526, 528, 0, 0, 530, 531, 532, 534, 535, 536,
	537, 540, 541, 542, 543, 544, 0, 545, 547, 549,
	627, 0, 0, 894, 0, 0, 0, 0, 0, 0,
	550, 551, 0, 418, 412, 368, 410, 411, 415, 416,
	419, 244, 0, 261, 763, 0, 310, 347, 0, 0,
	0, 407, 0, 460, 464, 0, 0, 0, 0, 0,
	0, 318, 0, 768, 0, 774, 0, 780, 0, 529,
	0, 770, 771, 776, 249, 893, 552, 623, 0, 0,
	0, 414, 0, 0, 0, 0, 0, 0, 0, 257,
	0, 0, 0, 0, 772, 769, 773, 779, 767, 777,
	764, 775, 0, 451, 385, 0, 478, 256, 302, 289,
	331, 373, 485, 0, 0, 363, 533, 298, 387, 0,
	277, 420, 0, 509, 384, 0, 492, 512, 0, 404,
	283, 443, 499, 500, 761, 766, 0, 782, 0, 287,
	288, 409, 269, 417, 0, 0, 472, 430, 428, 0,
	395, 452, 0, 0, 0, 317, 0, 312, 408, 548,
	275, 527, 446, 413, 367, 475, 504, 314, 299, 300,
	343, 445, 333, 285, 538, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 334, 0, 0, 546, 896, 886,
	878, 879, 880, 881, 882, 883, 0, 898, 899, 900,
	901, 902, 539, 892, 0, 877, 884, 885, 887, 0,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	245, 0, 246, 247, 248, 250, 251, 252, 760, 253,
	254, 255, 258, 259, 260, 262, 622, 263, 264, 265,
	266, 267, 268, 0, 762, 270, 271, 272, 273, 274,
	276, 278, 279, 280, 281, 282, 284, 286, 0, 0,
	0, 765, 0, 0, 0, 290, 291, 292, 293, 294,
	295, 0, 296, 297, 301, 303, 304, 305, 306, 307,
	308, 311, 0, 313, 315, 0, 316, 319, 0, 320,
	321, 322, 323, 324, 325, 326, 327, 0, 328, 0,
	329, 330, 332, 0, 335, 336, 337, 338, 339, 0,
	340, 0, 0, 341, 342, 344, 345, 346, 348, 349,
	350, 351, 352, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 362, 364, 0, 365, 366, 369, 370,
	371, 372, 0, 374, 0, 0, 375, 376, 377, 0,
	0, 378, 379, 380, 381, 382, 383, 386, 0, 388,
	389, 390, 391, 392, 393, 394, 624, 396, 397, 398,
	399, 400, 401, 402, 4798, 0, 403, 405, 406, 0,
	0, 0, 778, 421, 422, 423, 424, 425, 426, 427,
	429, 0, 431, 432, 433, 0, 434, 435, 436, 437,
	0, 438, 439, 440, 441, 442, 444, 447, 448, 449,
	450, 0, 453, 454, 455, 456, 457, 458, 459, 461,
	462, 463, 465, 466, 467, 625, 468, 469, 470, 471,
	0, 473, 474, 626, 476, 477, 479, 480, 481, 482,
	483, 484, 635, 0, 486, 0, 487, 488, 489, 490,
	491, 0, 493, 494, 495, 496, 497, 498, 501, 502,
	503, 505, 506, 0, 507, 508, 0, 510, 511, 781,
	513, 514, 515, 516, 517, 0, 636, 518, 0, 519,
	0, 520, 521, 522, 523, 524, 525, 526, 528, 0,
	0, 530, 531, 532, 534, 535, 536, 537, 540, 541,
	542, 543, 544, 0, 545, 547, 549, 627, 0, 0,
	894, 0, 0, 0, 0, 0, 0, 550, 551, 0,
	418, 412, 368, 410, 411, 415, 416, 419, 244, 0,
	261, 763, 0, 310, 347, 0, 0, 0, 407, 0,
	460, 464, 0, 0, 0, 0, 0, 0, 318, 0,
	768, 0, 774, 0, 780, 0, 529, 0, 770, 771,
	776, 249, 893, 552, 623, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	0, 772, 769, 773, 779, 767, 777, 764, 775, 0,
	451, 385, 0, 478, 256, 302, 289, 331, 373, 485,
	0, 0, 363, 533, 298, 387, 0, 277, 420, 0,
	509, 384, 0, 492, 512, 0, 404, 283, 443, 499,
	500, 761, 766, 0, 782, 0, 287, 288, 409, 269,
	417, 0, 0, 472, 430, 428, 0, 395, 452, 0,
	0, 0, 317, 0, 312, 408, 548, 275, 527, 446,
	413, 367, 475, 504, 314, 299, 300, 343, 445, 333,
	285, 538, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 334, 0, 0, 546, 896, 886, 878, 879, 880,
	881, 882, 883, 0, 898, 899, 900, 901, 902, 539,
	892, 0, 877, 884, 885, 887, 0, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 245, 0, 246,
	247, 248, 250, 251, 252, 760, 253, 254, 255, 258,
	259, 260, 262, 622, 263, 264, 265, 266, 267, 268,
	0, 762, 270, 271, 272, 273, 274, 276, 278, 279,
	280, 281, 282, 284, 286, 0, 0, 0, 765, 0,
	0, 0, 290, 291, 292, 293, 294, 295, 0, 296,
	297, 301, 303, 304, 305, 306, 307, 308, 311, 0,
	313, 315, 0, 316, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 0, 328, 0, 329, 330, 332,
	0, 335, 336, 337, 338, 339, 0, 340, 0, 0,
	341, 342, 344, 345, 346, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	362, 364, 0, 365, 366, 369, 370, 371, 372, 0,
	374, 0, 0, 375, 376, 377, 0, 0, 378, 379,
	380, 381, 382, 383, 386, 0, 388, 389, 390, 391,
	392, 393, 394, 624, 396, 397, 398, 399, 400, 401,
	402, 0, 0, 403, 405, 406, 0, 0, 0, 778,
	421, 422, 423, 424, 425, 426, 427, 429, 0, 431,
	432, 433, 0, 434, 435, 436, 437, 0, 438, 439,
	440, 441, 442, 444, 447, 448, 449, 450, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 462, 463, 465,
	466, 467, 625, 468, 469, 470, 471, 0, 473, 474,
	626, 476, 477, 479, 480, 481, 482, 483, 484, 635,
	0, 486, 2394, 487, 488, 489, 490, 491, 0, 493,
	494, 495, 496, 497, 498, 501, 502, 503, 505, 506,
	0, 507, 508, 0, 510, 511, 781, 513, 514, 515,
	516, 517, 0, 636, 518, 0, 519, 0, 520, 521,
	522, 523, 524, 525, 526, 528, 0, 0, 530, 531,
	532, 534, 535, 536, 537, 540, 541, 542, 543, 544,
	0, 545, 547, 549, 627, 0, 0, 894, 0, 0,
	0, 0, 0, 0, 550, 551, 0, 418, 412, 368,
	410, 411, 415, 416, 419, 244, 0, 261, 763, 0,
	310, 347, 0, 0, 0, 407, 0, 460, 464, 0,
	0, 0, 0, 0, 0, 318, 0, 768, 0, 774,
	0, 780, 0, 529, 0, 770, 771, 776, 249, 893,
	552, 623, 0, 0, 0, 414, 0, 0, 0, 0,
	0, 0, 0, 257, 0, 0, 0, 0, 772, 769,
	773, 779, 767, 777, 764, 775, 0, 451, 385, 0,
	478, 256, 302, 289, 331, 373, 485, 0, 0, 363,
	533, 298, 387, 0, 277, 420, 0, 509, 384, 0,
	492, 512, 0, 404, 283, 443, 499, 500, 761, 766,
	0, 782, 0, 287, 288, 409, 269, 417, 0, 0,
	472, 430, 428, 0, 395, 452, 0, 0, 0, 317,
	0, 312, 408, 548, 275, 527, 446, 413, 367, 475,
	504, 314, 299, 300, 343, 445, 333, 285, 538, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 334, 0,
	0, 546, 896, 886, 878, 879, 880, 881, 882, 883,
	0, 898, 899, 900, 901, 902, 539, 892, 0, 877,
	884, 885, 887, 0, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 245, 0, 246, 247, 248, 250,
	251, 252, 760, 253, 254, 255, 258, 259, 260, 262,
	622, 263, 264, 265, 266, 267, 268, 0, 762, 270,
	271, 272, 273, 274, 276, 278, 279, 280, 281, 282,
	284, 286, 0, 0, 0, 765, 0, 0, 0, 290,
	291, 292, 293, 294, 295, 0, 296, 297, 301, 303,
	304, 305, 306, 307, 308, 311, 0, 313, 315, 0,
	316, 319, 0, 320, 321, 322, 323, 324, 325, 326,
	327, 0, 328, 0, 329, 330, 332, 0, 335, 336,
	337, 338, 339, 0, 340, 0, 0, 341, 342, 344,
	345, 346, 348, 349, 350, 351, 352, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 362, 364, 0,
	365, 366, 369, 370, 371, 372, 0, 374, 0, 0,
	375, 376, 377, 0, 0, 378, 379, 380, 381, 382,
	383, 386, 0, 388, 389, 390, 391, 392, 393, 394,
	624, 396, 397, 398, 399, 400, 401, 402, 4246, 0,
	403, 405, 406, 0, 0, 0, 778, 421, 422, 423,
	424, 425, 426, 427, 429, 0, 431, 432, 433, 0,
	434, 435, 436, 437, 0, 438, 439, 440, 441, 442,
	444, 447, 448, 449, 450, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 462, 463, 465, 466, 467, 625,
	468, 469, 470, 471, 0, 473, 474, 626, 476, 477,
	479, 480, 481, 482, 483, 484, 635, 0, 486, 0,
	487, 488, 489, 490, 491, 0, 493, 494, 495, 496,
	497, 498, 501, 502, 503, 505, 506, 0, 507, 508,
	0, 510, 511, 781, 513, 514, 515, 516, 517, 0,
	636, 518, 0, 519, 0, 520, 521, 522, 523, 524,
	525, 526, 528, 0, 0, 530, 531, 532, 534, 535,
	536, 537, 540, 541, 542, 543, 544, 0, 545, 547,
	549, 627, 0, 0, 894, 0, 0, 0, 0, 0,
	0, 550, 551, 0, 418, 412, 368, 410, 411, 415,
	416, 419, 244, 0, 261, 763, 0, 310, 347, 0,
	0, 0, 407, 0, 460, 464, 0, 0, 0, 0,
	0, 0, 318, 0, 768, 0, 774, 0, 780, 0,
	529, 0, 770, 771, 776, 249, 893, 552, 623, 0,
	0, 0, 414, 0, 0, 0, 0, 0, 0, 0,
	257, 0, 0, 0, 0, 772, 769, 773, 779, 767,
	777, 764, 775, 0, 451, 385, 0, 478, 256, 302,
	289, 331, 373, 485, 0, 0, 363, 533, 298, 387,
	0, 277, 420, 0, 509, 384, 0, 492, 512, 0,
	404, 283, 443, 499, 500, 761, 766, 0, 782, 0,
	287, 288, 409, 269, 417, 0, 0, 472, 430, 428,
	0, 395, 452, 0, 0, 0, 317, 0, 312, 408,
	548, 275, 527, 446, 413, 367, 475, 504, 314, 299,
	300, 343, 445, 333, 285, 538, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 334, 0, 0, 546, 896,
	886, 878, 879, 880, 881, 882, 883, 0, 898, 899,
	900, 901, 902, 539, 892, 0, 877, 884, 885, 887,
	0, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 245, 0, 246, 247, 248, 250, 251, 252, 760,
	253, 254, 255, 258, 259, 260, 262, 622, 263, 264,
	265, 266, 267, 268, 0, 762, 270, 271, 272, 273,
	274, 276, 278, 279, 280, 281, 282, 284, 286, 0,
	0, 0, 765, 0, 0, 0, 290, 291, 292, 293,
	294, 295, 0, 296, 297, 301, 303, 304, 305, 306,
	307, 308, 311, 0, 313, 315, 0, 316, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 0, 328,
	0, 329, 330, 332, 0, 335, 336, 337, 338, 339,
	0, 340, 0, 0, 341, 342, 344, 345, 346, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 362, 364, 0, 365, 366, 369,
	370, 371, 372, 0, 374, 0, 0, 375, 376, 377,
	0, 0, 378, 379, 380, 381, 382, 383, 386, 0,
	388, 389, 390, 391, 392, 393, 394, 624, 396, 397,
	398, 399, 400, 401, 402, 0, 0, 403, 405, 406,
	0, 0, 0, 778, 421, 422, 423, 424, 425, 426,
	427, 429, 0, 431, 432, 433, 0, 434, 435, 436,
	437, 0, 438, 439, 440, 441, 442, 444, 447, 448,
	449, 450, 0, 453, 454, 455, 456, 457, 458, 459,
	461, 462, 463, 465, 466, 467, 625, 468, 469, 470,
	471, 0, 473, 474, 626, 476, 477, 479, 480, 481,
	482, 483, 484, 635, 0, 486, 0, 487, 488, 489,
	490, 491, 0, 493, 494, 495, 496, 497, 498, 501,
	502, 503, 505, 506, 0, 507, 508, 0, 510, 511,
	781, 513, 514, 515, 516, 517, 0, 636, 518, 0,
	519, 0, 520, 521, 522, 523, 524, 525, 526, 528,
	0, 0, 530, 531, 532, 534, 535, 536, 537, 540,
	541, 542, 543, 544, 0, 545, 547, 549, 627, 0,
	0, 894, 0, 0, 0, 0, 0, 0, 550, 551,
	0, 418, 412, 368, 410, 411, 415, 416, 419, 244,
	0, 261, 763, 0, 310, 904, 0, 0, 0, 407,
	0, 460, 464, 0, 0, 0, 0, 0, 0, 318,
	0, 768, 0, 774, 0, 780, 0, 529, 0, 770,
	771, 776, 249, 893, 552, 623, 0, 0, 0, 414,
	0, 0, 0, 0, 0, 0, 0, 257, 0, 0,
	0, 0, 772, 769, 773, 779, 767, 777, 764, 775,
	0, 451, 385, 0, 478, 256, 302, 289, 331, 373,
	485, 0, 0, 363, 533, 298, 387, 0, 277, 420,
	0, 509, 384, 0, 492, 512, 0, 404, 283, 443,
	499, 500, 761, 766, 0, 782, 0, 287, 288, 409,
	269, 417, 0, 0, 472, 430, 428, 0, 395, 452,
	0, 0, 0, 317, 0, 312, 408, 548, 275, 527,
	446, 413, 367, 475, 504, 314, 299, 300, 343, 445,
	333, 285, 538, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 334, 0, 0, 546, 896, 886, 878, 879,
	880, 881, 882, 883, 0, 898, 899, 900, 901, 902,
	539, 892, 0, 877, 884, 885, 887, 0, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 245, 0,
	246, 247, 248, 250, 251, 252, 760, 253, 254, 255,
	258, 259, 260, 262, 622, 263, 264, 265, 266, 267,
	268, 0, 762, 270, 271, 272, 273, 274, 276, 278,
	279, 280, 281, 282, 284, 286, 0, 0, 0, 765,
	0, 0, 0, 290, 291, 292, 293, 294, 295, 0,
	296, 297, 301, 303, 304, 305, 306, 307, 308, 311,
	0, 313, 315, 0, 316, 319, 0, 320, 321, 322,
	323, 324, 325, 326, 327, 0, 328, 0, 329, 330,
	332, 0, 335, 336, 337, 338, 339, 0, 340, 0,
	0, 341, 342, 344, 345, 346, 348, 349, 350, 351,
	352, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 362, 364, 0, 365, 366, 369, 370, 371, 372,
	0, 374, 0, 0, 375, 376, 377, 0, 0, 378,
	379, 380, 381, 382, 383, 386, 0, 388, 389, 390,
	391, 392, 393, 394, 624, 396, 397, 398, 399, 400,
	401, 402, 0, 0, 403, 405, 406, 0, 0, 0,
	778, 421, 422, 423, 424, 425, 426, 427, 429, 0,
	431, 432, 433, 0, 434, 435, 436, 437, 0, 438,
	439, 440, 441, 442, 444, 447, 448, 449, 450, 0,
	453, 454, 455, 456, 457, 458, 459, 461, 462, 463,
	465, 466, 467, 625, 468, 469, 470, 471, 0, 473,
	474, 626, 476, 477, 479, 480, 481, 482, 483, 484,
	635, 0, 486, 0, 487, 488, 489, 490, 491, 0,
	493, 494, 495, 496, 497, 498, 501, 502, 503, 505,
	506, 0, 507, 508, 0, 510, 511, 781, 513, 514,
	515, 516, 517, 0, 636, 518, 0, 519, 0, 520,
	521, 522, 523, 524, 525, 526, 528, 0, 0, 530,
	531, 532, 534, 535, 536, 537, 540, 541, 542, 543,
	544, 0, 545, 547, 549, 627, 0, 0, 894, 0,
	0, 0, 0, 0, 0, 550, 551, 0, 418, 412,
	368, 410, 411, 415, 416, 419, 244, 0, 261, 763,
	0, 310, 868, 0, 0, 0, 407, 0, 460, 464,
	0, 0, 0, 0, 0, 0, 318, 0, 768, 0,
	774, 0, 780, 0, 529, 0, 770, 771, 776, 249,
	893, 552, 623, 0, 0, 0, 414, 0, 0, 0,
	0, 0, 0, 0, 257, 0, 0, 0, 0, 772,
	769, 773, 779, 767, 777, 764, 775, 0, 451, 385,
	0, 478, 256, 302, 289, 331, 373, 485, 0, 0,
	363, 533, 298, 387, 0, 277, 420, 0, 509, 384,
	0, 492, 512, 0, 404, 283, 443, 499, 500, 761,
	766, 0, 782, 0, 287, 288, 409, 269, 417, 0,
	0, 472, 430, 428, 0, 395, 452, 0, 0, 0,
	317, 0, 312, 408, 548, 275, 527, 446, 413, 367,
	475, 504, 314, 299, 300, 343, 445, 333, 285, 538,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 334,
	0, 0, 546, 896, 886, 878, 879, 880, 881, 882,
	883, 0, 898, 899, 900, 901, 902, 539, 892, 0,
	877, 884, 885, 887, 0, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 245, 0, 246, 247, 248,
	250, 251, 252, 760, 253, 254, 255, 258, 259, 260,
	262, 622, 263, 264, 265, 266, 267, 268, 0, 762,
	270, 271, 272, 273, 274, 276, 278, 279, 280, 281,
	282, 284, 286, 0, 0, 0, 765, 0, 0, 0,
	290, 291, 292, 293, 294, 295, 0, 296, 297, 301,
	303, 304, 305, 306, 307, 308, 311, 0, 313, 315,
	0, 316, 319, 0, 320, 321, 322, 323, 324, 325,
	326, 327, 0, 328, 0, 329, 330, 332, 0, 335,
	336, 337, 338, 339, 0, 340, 0, 0, 341, 342,
	344, 345, 346, 348, 349, 350, 351, 352, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 362, 364,
	0, 365, 366, 369, 370, 371, 372, 0, 374, 0,
	0, 375, 376, 377, 0, 0, 378, 379, 380, 381,
	382, 383, 386, 0, 388, 389, 390, 391, 392, 393,
	394, 624, 396, 397, 398, 399, 400, 401, 402, 0,
	0, 403, 405, 406, 0, 0, 0, 778, 421, 422,
	423, 424, 425, 426, 427, 429, 0, 431, 432, 433,
	0, 434, 435, 436, 437, 0, 438, 439, 440, 441,
	442, 444, 447, 448, 449, 450, 0, 453, 454, 455,
	456, 457, 458, 459, 461, 462, 463, 465, 466, 467,
	625, 468, 469, 470, 471, 0, 473, 474, 626, 476,
	477, 479, 480, 481, 482, 483, 484, 635, 0, 486,
	0, 487, 488, 489, 490, 491, 0, 493, 494, 495,
	496, 497, 498, 501, 502, 503, 505, 506, 0, 507,
	508, 0, 510, 511, 781, 513, 514, 515, 516, 517,
	0, 636, 518, 0, 519, 0, 520, 521, 522, 523,
	524, 525, 526, 528, 0, 0, 530, 531, 532, 534,
	535, 536, 537, 540, 541, 542, 543, 544, 0, 545,
	547, 549, 627, 0, 0, 894, 0, 0, 0, 0,
	0, 0, 550, 551, 0, 418, 412, 368, 410, 411,
	415, 416, 419, 244, 0, 261, 763, 0, 310, 347,
	0, 0, 0, 407, 0, 460, 464, 0, 0, 0,
	0, 0, 0, 318, 0, 768, 0, 774, 0, 780,
	0, 529, 0, 770, 771, 776, 249, 0, 552, 623,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 772, 769, 773, 779,
	767, 777, 764, 775, 0, 451, 385, 0, 478, 256,
	302, 289, 331, 373, 485, 0, 0, 363, 533, 298,
	387, 0, 277, 420, 0, 509, 384, 0, 492, 512,
	0, 404, 283, 443, 499, 500, 761, 766, 0, 782,
	0, 287, 288, 409, 269, 417, 0, 0, 472, 430,
	428, 0, 395, 452, 0, 0, 0, 317, 0, 312,
	408, 548, 275, 527, 446, 413, 367, 475, 504, 314,
	299, 300, 343, 445, 333, 285, 538, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 334, 0, 0, 546,
	0, 0, 0, 0, 0, 0, 0, 309, 0, 0,
	0, 0, 0, 0, 539, 0, 0, 0, 0, 0,
	0, 0, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 245, 0, 246, 247, 248, 250, 251, 252,
	760, 253, 254, 255, 258, 259, 260, 262, 622, 263,
	264, 265, 266, 267, 268, 0, 762, 270, 271, 272,
	273, 274, 276, 278, 279, 280, 281, 282, 284, 286,
	0, 0, 0, 765, 0, 0, 0, 290, 291, 292,
	293, 294, 295, 0, 296, 297, 301, 303, 304, 305,
	306, 307, 308, 311, 0, 313, 315, 0, 316, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 0,
	328, 0, 329, 330, 332, 0, 335, 336, 337, 338,
	339, 0, 340, 0, 0, 341, 342, 344, 345, 346,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 362, 364, 0, 365, 366,
	369, 370, 371, 372, 0, 374, 0, 0, 375, 376,
	377, 0, 0, 378, 379, 380, 381, 382, 383, 386,
	0, 388, 389, 390, 391, 392, 393, 394, 624, 396,
	397, 398, 399, 400, 401, 402, 0, 0, 403, 405,
	406, 0, 0, 0, 778, 421, 422, 423, 424, 425,
	426, 427, 429, 0, 431, 432, 433, 0, 434, 435,
	436, 437, 0, 438, 439, 440, 441, 442, 444, 447,
	448, 449, 450, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 462, 463, 465, 466, 467, 625, 468, 469,
	470, 471, 0, 473, 474, 626, 476, 477, 479, 480,
	481, 482, 483, 484, 635, 0, 486, 0, 487, 488,
	489, 490, 491, 0, 493, 494, 495, 496, 497, 498,
	501, 502, 503, 505, 506, 0, 507, 508, 0, 510,
	511, 781, 513, 514, 515, 516, 517, 0, 636, 518,
	0, 519, 0, 520, 521, 522, 523, 524, 525, 526,
	528, 0, 0, 530, 531, 532, 534, 535, 536, 537,
	540, 541, 542, 543, 544, 0, 545, 547, 549, 627,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 550,
	551, 0, 418, 412, 368, 410, 411, 415, 416, 419,
}

var yyPact = [...]int32{
	5678, -1000, 271, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1218, 1218,
	-1000, -1000, 3072, 1034, 10379, 16626, 7516, 3087, 89271, 73111,
	1218, 1368, 1311, 1295, 74121, 88766, 1357, 62506, 62001, -1000,
	1348, 913, 793, 3652, 66546, 265, 88261, 74121, 866, 5678,
	3789, -1000, -1000, 2178, 3280, 66546, 3380, 3279, 793, 74121,
	-1000, 1627, 2084, 2116, 3735, 87756, 74121, 44865, 74121, 3046,
	87251, 86746, 2563, 86241, 53971, 3080, 1351, 74121, 74121, 1892,
	85736, 74121, 74121, 985, 2398, 51445, 51445, -1000, -1000, 1396,
	1392, -1000, -1000, -1000, 66041, 72606, 85231, 84726, 1248, 2554,
	57506, 74121, 74121, 74121, 74121, 57506, 51445, 1964, 2349, 84221,
	57506, 74121, 57506, 74121, 74121, 74121, 74121, 74121, 1347, 50940,
	50435, 74121, 83716, 3045, 74121, 74121, 1748, -1000, 83211, 82706,
	82201, 94664, 94177, 3873, 53466, 52961, 52456, -1000, -1000, -1000,
	1246, 2540, -1000, -1000, -1000, 3044, 1889, 1344, -1000, 1963,
	-1000, -1000, -1000, -1000, -1000, -1000, 1245, -1000, 75131, 72101,
	1934, -1000, -1000, 762, 3527, 3939, 3939, 3718, 55991, 1138,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3523, 1988, 2459,
	324, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3789, 2178,
	3789, 3939, 3405, 3939, -1000, -1000, -1000, -1000, 74121, -1000,
	3939, 3275, 443, 757, -1000, 636, 636, 636, 2918, 636,
	3274, 1133, 478, 648, -1000, 2495, 3649, 3649, 3649, 3331,
	1348, -1000, -1000, 614, 613, 913, 24327, 24327, -1000, 3270,
	-1000, 284, -1000, 314, 57001, 981, 264, 74121, -1000, 779,
	-1000, 264, 29469, -1000, -1000, 2027, -1000, 359, -1000, 1932,
	1622, -1000, 2339, 74121, 3016, 81696, 66546, 66546, 612, -1000,
	636, 81191, 74121, 1241, 80686, 3871, 57506, 57506, 74121, 1339,
	57506, 2796, 1745, -1000, 1706, 2456, -1000, 3782, 3885, 298,
	856, 74121, 74121, -1000, 319, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 887,
	1674, 1084, 3773, 1257, 3772, 2717, 80181, 1322, 3771, 2863,
	1257, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1240, 74121, 1803, 3269, 74121, 779, 3769,
	-1000, 2848, 2407, 93690, 74121, 1257, 1257, -1000, -1000, -1000,
	-1000, 6740, 3861, 3617, 7838, 3860, 3612, 16799, 3859, 10071,
	3858, 71596, 71091, 2711, 1668, 980, -1000, 314, -1000, -1000,
	-1000, 1657, 1655, 1653, 1705, 11609, 980, -1000, 314, 1649,
	2662, 74121, 74121, 74121, 3265, 3857, 11351, 2150, 10334, 1630,
	1238, 2346, 3264, 3262, 74121, 1629, 1500, 3611, 1628, 2792,
	1500, 3611, 1943, 1893, 3856, 1638, 2285, 2659, -1000, 3854,
	364, -1000, 3853, 378, -1000, 3261, 3852, 371, 3850, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 309, -1000, -1000, -1000,
	-1000, -1000, 895, 2529, 894, 894, 894, -1000, -1000, -1000,
	-1000, -1000, 354, 412, -1000, -1000, 2521, 979, 2521, 2521,
	-1000, 2534, 2521, 371, 3849, 79676, 2855, 61, 3848, -1000,
	61, 3846, 61, 3844, -1000, 2700, -1000, 1604, -1000, -1000,
	-1000, 3871, -1000, 2435, -1000, 3909, 54476, 359, 3939, 2853,
	41745, 41231, 74121, 608, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2381, -1000, 1930, -1000, -1000, -1000, -1000,
	-1000, -1000, 79171, -1000, -1000, -1000, 63516, 51445, 64526, 978,
	74121, -1000, 74121, -1000, -1000, -1000, -1000, 63516, 2787, 51445,
	2786, 2471, 2775, 2785, 1527, 3334, 2490, -1000, 28955, 2128,
	33581, 2864, 913, -1000, -1000, 913, 913, 29469, -1000, 2495,
	-1000, -1000, 3278, 113, -1000, 18612, -1000, -1000, 29469, 29469,
	29469, 29469, 29469, 1807, 3738, -1000, -1000, -1000, -1000, 23298,
	-1000, -1000, 314, 874, 603, -1000, -1000, 977, -1000, 773,
	975, 314, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1126, 3939, 901, 29469, 1187, 2281, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 973, 968, 2779, -1000, 964, 961,
	955, 947, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 945,
	940, 933, 930, 928, 926, 925, 924, 923, 922, 921,
	918, 917, 916, 914, 912, 911, 910, 909, 908, 907,
	789, 906, 905, 902, 900, 899, 898, 897, -1000, 2521,
	-1000, 2521, 2521, 894, 894, 895, -1000, -1000, 2534, 2521,
	894, -1000, -1000, 412, 354, -1000, -1000, -1000, -1000, -1000,
	447, 892, -1000, 314, -1000, 18093, 29469, -1000, 74121, 29469,
	74121, 264, 3912, 74121, 255, 16320, -1000, 2425, 2178, -1000,
	1531, -1000, -1000, -1000, 1020, 3911, 54981, -1000, 74121, 3161,
	3160, 3514, 3356, 727, 3765, 636, 74121, 5538, 3764, 78666,
	-1000, 891, 891, 2277, 74121, 890, 93690, 1960, 1612, -1000,
	51445, 3805, 3843, 93690, -1000, 286, 19659, -1000, 19659, 3642,
	3157, 43278, -1000, 574, 74121, 74121, 74121, 74121, -1000, 74121,
	3842, -1000, -1000, -1000, 3841, 74121, 768, 3762, 1256, 3939,
	3839, 49425, 3760, -1000, 78161, 3260, 1915, 51445, 74121, 1325,
	3258, 3837, -1000, 63011, 856, 3939, 3910, 2778, -1000, -1000,
	128, -1000, 1497, -1000, 1795, 1793, 59004, 1439, 1431, 2880,
	817, 3257, 1760, 1411, 74121, 2221, 74121, 2862, 3512, 667,
	2131, 1565, -1000, 888, 66546, 1421, 128, -1000, 3511, 1792,
	74121, 1418, 128, 3509, 5538, -1000, 2329, 93690, 832, -1000,
	3330, -1000, 832, 832, 3329, 1872, 1257, 1257, -1000, 74121,
	128, 1506, 74121, 9244, 3835, 3608, 8842, 3833, 74121, 3508,
	-1000, 61008, 314, 3506, 3505, 3503, 2946, -1000, 2961, 3636,
	1550, 2877, 3502, 3932, -1000, 3256, 3589, -1000, -1000, -1000,
	-1000, 1521, 2130, -1000, 1945, 832, 832, 74121, -1000, 74121,
	77656, -1000, -1000, 314, 3500, 2929, -1000, -1000, 1616, 3156,
	3153, 74121, 74121, 3499, 3932, 3490, 49930, 64021, 64021, 3489,
	3932, 3486, 3484, 1101, -1000, 3592, 3483, 604, 3939, 1732,
	1721, 1714, -1000, -1000, 856, 74121, 74121, 1777, 3482, -1000,
	1885, 2359, 1885, 3481, 49425, -1000, 1885, 1885, 3479, 667,
	667, 3478, 1442, 74121, 74121, 74121, 74121, 74121, 2587, 2520,
	2519, 886, 263, -1000, 2464, -1000, 16487, 1937, 74121, 74121,
	-1000, -1000, -1000, 74121, 74121, -1000, 74121, 74121, 93690, -1000,
	93690, -1000, 331, 29469, -1000, 3933, -1000, -1000, -1000, -1000,
	3933, -1000, 3531, 3530, 3933, -1000, 879, -1000, 3933, -1000,
	-1000, 2521, 2521, -1000, -1000, 93690, 364, 3831, 49425, 3830,
	51445, 51445, 51445, 51445, -1000, -1000, -1000, -1000, -1000, 74121,
	3909, 1349, -1000, -1000, -1000, -1000, 262, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3936, 3935, -1000, -1000,
	262, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 74121, -1000, 3475,
	232, 74121, 74121, 1700, 57506, 57506, 57506, 74121, 74121, 74121,
	2674, 74121, 74121, 74121, 74121, 1746, -1000, 353, -1000, 74121,
	245, -1000, 242, 3379, 62506, 184, 64526, -1000, -1000, -1000,
	-1000, -1000, 1535, 3343, -1000, 1163, -1000, 1466, -1000, -1000,
	261, 16320, -1000, 35123, -1000, -1000, -1000, 1828, 16320, -1000,
	33067, 33067, 1533, 74121, 1993, -1000, 1993, 64, -1000, 5987,
	2471, 2775, 3378, 70586, 24327, 93690, 74121, 3525, 29469, 29469,
	29469, 29469, 29469, 29469, 29469, 29469, 29469, 29469, 29469, 29469,
	29469, 29469, 29469, 29469, 3753, 29469, 3471, 3142, -1000, -1000,
	3470, 837, 1566, 19659, -1000, -1000, 860, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 713, 713, 470, 1739, 1739, 654, 874, 3634, 314,
	16135, 260, 295, 866, 314, -1000, -1000, -1000, 24842, 29469,
	43278, 28440, 314, -1000, 21753, -1000, 1483, 3933, 3537, 16320,
	2281, 3289, 1085, 865, 29469, 29469, 864, 3933, 3933, 3933,
	3933, 29469, 1973, 29469, 29469, 34609, 29469, 29469, 23813, 29469,
	29469, 29469, 29469, 29469, 1870, 29469, 2381, 36151, 1868, 29469,
	27926, 22783, 29469, 29469, 29469, 598, 29469, 29469, 29469, 2381,
	3378, 29469, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 16078,
	-42, 595, 240, -1000, 3127, 230, 29469, -1000, 74121, 3525,
	29469, 29469, 29469, 29469, 3471, 3142, 3470, 837, 860, -1000,
	-1000, -1000, 1537, 1685, -1000, 3244, -1000, 2963, 47910, 3068,
	74121, 474, -1000, 996, 74121, -1000, -1000, 3350, 38701, 38701,
	2888, 2888, -1000, -1000, 59509, 74121, 2860, 3829, 3667, 859,
	-1000, 5538, 2208, 3828, 3243, 3755, -1000, 7902, 60519, 7003,
	1675, -1000, -1000, 2859, 2487, 856, -1000, 58516, 1951, 74121,
	74121, 1239, -1000, -1000, -1000, -1000, -1000, -1000, 2007, 74121,
	-1000, 19659, -1000, 229, -1000, 993, 2774, 74121, -1000, 74121,
	858, 856, 856, 856, 856, 856, -1000, 74121, 1669, 74121,
	1420, 59509, 2852, 3827, 2238, -1000, -1000, 74121, 1513, -1000,
	-1000, 3825, 2552, 3908, 3754, 636, 19659, 3949, -1000, 3906,
	2310, 40216, 74121, 1385, 481, -1000, 66546, 3607, 306, 636,
	-1000, 284, -1000, 1704, 93690, 3939, 2552, 2552, 7846, 74121,
	74121, 74121, -1000, 74121, 74121, -1000, 3749, 77151, -1000, 93690,
	74121, -1000, 842, 3146, 1162, 1159, 3105, 70081, 74121, 76646,
	76141, 74121, 1417, -1000, -1000, 1883, 74121, -1000, 19659, 74121,
	65536, 1384, 1378, 74121, 1927, 65031, 74121, 1926, -1000, 74121,
	1564, -1000, -1000, 51445, -1000, 3033, 1924, 20170, 6163, 74121,
	74121, 74121, 8319, 74121, 74121, -1000, -1000, -1000, -1000, -1000,
	-1000, 832, -1000, -1000, -1000, 74121, 74121, 832, 832, 16442,
	74121, 74121, 7963, 128, 1505, 74121, 1416, 128, 1503, 66546,
	1397, 74121, 228, -1000, -1000, 92716, 90281, -1000, 1820, -1000,
	-1000, -1000, 309, -1000, 95151, 74121, 74121, 74121, 74121, 74121,
	-1000, 3584, 75636, 29469, 3578, -1000, 74121, -1000, 841, 3576,
	74121, 74121, -1000, -1000, -1000, 3569, 3241, 2091, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2448, 1460, 51445, 51445,
	3467, 74121, 74121, 1928, 3240, 74121, -1000, 74121, -1000, 253,
	253, 253, 74121, -1000, 74121, 74121, -1000, -1000, -1000, 74121,
	-1000, 74121, -1000, 3686, 74121, 74121, -1000, 1605, 1598, 3466,
	-1000, 1783, -1000, 51445, 1919, -1000, 75131, -1000, 74121, -1000,
	51445, 1493, 1919, -1000, -1000, 74121, -1000, -1000, 74121, 806,
	3009, 1596, 1593, 1592, 1590, 74121, 74121, 3939, 3867, 74121,
	3939, 74626, 19659, 2683, 74121, 3465, 74121, 74121, 57506, 840,
	93690, 57506, 44336, 57506, 57506, 2773, 93690, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 62506, 61496, 1555, 1861, 364,
	-1000, 378, -1000, 3713, 3238, -1000, 371, -1000, 226, 594,
	593, 3520, 3519, 591, 29469, 586, -1000, -1000, 371, -1000,
	74121, 1488, 2772, -1000, 61, 61, 61, 3693, 2178, 42259,
	-1000, -1000, -1000, -1000, -1000, 48920, 74121, 232, 232, 2699,
	74121, 251, -1000, 251, 251, 88, 238, 88, 832, 239,
	297, -1000, 88, 88, 238, 3603, 3602, 3600, 3597, 3596,
	-1000, 19659, 3322, 225, 74121, -1000, -1000, 48920, 3237, 235,
	3713, 472, -1000, 2975, -1000, 29469, 1828, 3372, -1000, 3938,
	3938, 798, -1000, 23298, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1912, 232, 29469, 1579, 811, -1000, -1000,
	-1000, -1000, 3345, 38701, -1000, 3339, 3339, 1386, 1381, 3339,
	74121, -1000, -1000, -1000, -1000, 3474, -1000, 214, 214, 278,
	278, 278, -1000, 2851, 2851, 2851, 2851, 2851, 2851, 470,
	1739, 1888, 2162, 29469, 29469, 3464, 3461, 837, 2125, 29469,
	-1000, 3802, -1000, -1000, -1000, 3377, -1000, -1000, 1845, 2714,
	-1000, -1000, -1000, -1000, 2609, 34609, 34609, -1000, -1000, -1000,
	23298, 822, -1000, -1000, -1000, -1000, 43278, -1000, 812, 29469,
	-1000, -1000, 3625, -1000, -1000, 29469, 208, 53, -1000, -1000,
	205, 584, 204, -1000, -38, -1000, 583, 29469, 29469, 29469,
	-1000, 16320, 3920, -1000, -1000, 3456, -1000, 3455, 3449, 3448,
	-1000, 804, 582, 2542, -1000, 29469, 1085, 801, -1000, 56496,
	3354, 2661, 2604, 745, 1080, 15992, 29469, 581, 579, 572,
	571, 15896, 570, 3375, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 5812, 568, 567, 15786, 213, 566, 5526, -1000,
	34609, 34609, 34609, 798, 562, 560, 7115, 15739, 27412, 27412,
	27412, 557, 15482, 29469, 25, 5940, 203, 202, 200, 199,
	19659, 192, -1000, 14160, 29469, 2803, 19659, 5864, 188, 351,
	553, -1000, 93690, 745, 349, 1029, 552, -1000, 314, 2714,
	15053, 2947, -1000, 201, 189, 177, 29469, 3345, 187, -1000,
	29469, -1000, -1000, 796, -1000, 3074, -1000, 16320, -1000, -1000,
	-1000, 2951, 2940, 2603, -1000, -1000, 185, -1000, -1000, -1000,
	-1000, 3350, 54981, 29469, 180, -1000, 314, 2951, 32553, 17,
	3129, 67556, 67556, 40721, -1000, 37676, 69071, 67556, 67556, 1008,
	3370, 792, 791, 314, -1000, -1000, -1000, 790, 789, 3210,
	2992, -1000, 2992, 541, 175, -1000, -1000, -1000, -1000, 74121,
	671, 74121, 74121, 3905, 667, 74121, 74121, 66546, 3824, 90768,
	1758, 7003, -1000, 3939, 55991, 2771, -1000, -1000, 169, -1000,
	-1000, 1236, 1758, 3223, -1000, -1000, -1000, 2850, -1000, -1000,
	1675, -1000, 532, -118, 3321, 159, -1000, -1000, -1000, 881,
	74121, 2156, 636, 74121, 3805, 1645, 1650, 2442, -1000, 2081,
	-1000, -1000, 19659, 20681, 1324, -1000, 531, 165, -1000, 93690,
	3939, -1000, -1000, -1000, -1000, -1000, 994, -1000, 74121, 55991,
	55991, -1000, 1257, 1093, 1420, -1000, 74121, 1451, 74121, 525,
	74121, 74121, 2380, 1322, 74121, 2768, -1000, -1000, 3933, 51445,
	51445, 1873, 3586, 1781, 1767, -1000, -1000, 3336, 1274, 51445,
	793, 3819, 3092, 2526, 3667, 2764, 3954, 2136, -1000, -1000,
	399, -1000, 314, -1000, 29469, 779, 3686, -1000, 64021, 636,
	1553, 306, 3349, 3349, 74121, 523, 3444, -1000, -1000, 3443,
	3440, 2841, 2528, 3818, -1000, 3748, 1437, 1346, 29469, 778,
	-1000, 2079, 896, 777, 775, 74121, 1623, 3000, -1000, 3817,
	3713, 3806, 3713, -1000, -1000, -1000, 69576, -1000, 152, -1000,
	332, -1000, -1000, -1000, -1000, 74121, 74121, 74121, 74121, -1000,
	1520, -1000, -1000, -1000, -1000, 1519, -1000, 1922, -1000, -1000,
	-1000, -1000, -1000, 2078, 1510, 151, -1000, -1000, 19659, 19659,
	19659, 3939, -1000, 128, -1000, 1485, 2110, -1000, -1000, 128,
	3437, 2100, -1000, -1000, -1000, -1000, -1000, -1000, 128, 3436,
	5538, -1000, 3435, 128, 1498, 74121, 74121, 7638, 74121, 74121,
	74121, 6782, 3430, 1101, 1420, -1000, -1000, 90281, 92716, -1000,
	92716, -1000, 309, -1000, 277, 298, -1000, -1000, -1000, -1000,
	3426, -1000, 3713, 3804, 16320, -1000, 1541, 29469, -1000, -1000,
	-1000, 2016, 3568, -1000, -1000, -1000, 61, 74121, 1589, 2151,
	3425, 3107, 51445, 74121, -1000, -1000, -1000, -1000, -1000, -1000,
	469, -1000, 469, 469, 3422, 3421, 74121, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 74121, -1000, -1000, -1000, -1000, -1000,
	3933, 3933, 1441, 3420, 3414, 3413, 3411, -1000, 3409, 3408,
	3939, 3743, 3713, -1000, 3803, 3713, 149, -1000, 991, -1000,
	2462, 2461, 2995, -1000, 55991, -1000, -1000, -1000, 93690, -1000,
	-1000, -1000, 74121, 74121, 774, -1000, -1000, 93690, -1000, 3235,
	3232, 1132, 74121, 51445, 51445, -1000, -1000, -1000, 74121, -1000,
	-1000, -1000, 1010, -1000, -1000, 1010, 147, -1000, -1000, 364,
	74121, 49425, -1000, 1995, 359, -1000, 401, -1000, -1000, 51445,
	-1000, 74121, 88, 57506, 163, -1000, 74121, 74121, 1546, 1545,
	1544, 1542, 1534, 198, -1000, 1594, 51445, -1000, -1000, 154,
	63516, -1000, 51445, -1000, -1000, 3371, -1000, 1375, -1000, -1000,
	26898, 158, -1000, -1000, 811, -1000, 737, -1000, 3022, 3286,
	29469, 17, 74121, -1000, 74121, 3339, 3339, 3339, 3339, 74121,
	-1000, 29469, 29469, 1990, 847, 29469, 34609, 34609, -1000, 29469,
	533, -1000, -1000, -1000, -1000, 3369, -1000, -1000, 1840, 2714,
	29469, -1000, -1000, 1284, 1278, -1000, -1000, -1000, -1000, 1523,
	877, 139, -1000, 23298, 514, 26384, 148, -1000, 314, 14802,
	-1000, -1000, 715, -1000, -1000, -1000, 513, 25870, -1000, -1000,
	1077, -105, -105, 29469, 29469, 1878, 1682, 1583, 1530, 3933,
	3939, 2324, -1000, 29469, 14708, -1000, 1077, -1000, -1000, 89776,
	29469, 2714, 3231, 3226, 29469, 29469, 2660, 3314, -1000, -1000,
	2567, 14361, -1000, -1000, -1000, -1000, 93690, -1000, 29469, -1000,
	2011, -1000, -1000, 29469, 29469, -1000, 93690, 34609, 34609, 34609,
	34609, 34609, 34609, 34609, 34609, 34609, 34609, 34609, 34609, 34609,
	2596, 34609, 773, 626, 626, 626, -1000, -1000, 25356, 29469,
	29469, 93690, 511, 507, 506, -1000, 29469, 25, 29469, -1000,
	-1000, -1000, -1000, 135, -1000, 29469, 19659, 6393, 505, 37171,
	133, 1260, -1000, 2714, 29469, -1000, 1029, 2947, 29469, 3224,
	3216, 2947, -1000, 502, -1000, 501, 29469, 29469, 29469, 13753,
	3286, -1000, 627, 16320, 793, -1000, -1000, 24327, 893, 793,
	1229, 74121, 314, 2951, -1000, 16320, 990, 74121, -1000, 16320,
	2845, 38701, 3179, 3177, 38701, 3319, 3168, 3168, 3168, -1000,
	1390, -1000, 74121, 772, -1000, 67556, 69071, 67556, 67556, 51950,
	500, 3129, -1000, -1000, 55486, 771, -1000, -1000, -1000, 2829,
	766, 36661, 29469, 314, 21753, 29469, 1257, -1000, -1000, -1000,
	3150, 2029, 59509, -1000, 1785, 60014, 671, 726, 793, -1000,
	132, 5538, 3105, 74121, 7003, 760, -1000, -1000, -1000, 2467,
	29469, -1000, -1000, 146, -1000, 145, 1318, -1000, 90281, 29469,
	29469, -1000, 74121, 1675, 74121, 3220, -1000, -1000, 3312, 90281,
	90281, -1000, 3953, 20681, 755, 74121, 3667, 747, 51445, 3805,
	-1000, 74121, -1000, -1000, 74121, 2556, -1000, 3738, 1156, 746,
	34609, 74121, 2606, -1000, 2261, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 737, 3936, 3935, 93690, -1000, 74121, 3644,
	498, 144, -1000, -1000, 74121, -1000, -1000, -1000, -1000, -1000,
	736, -1000, -1000, 298, -1000, -1000, -1000, 2029, 671, 605,
	2697, 1256, 1093, 49425, -1000, 61, 61, 51445, 51445, -1000,
	-1000, 3939, 3939, 810, 3939, 61, 3693, 74121, 3667, 74121,
	1841, 74121, -1000, 3407, 3099, -1000, 74121, 38701, 40216, 13582,
	3208, -1000, -1000, 3349, 68566, 3349, -1000, 733, -1000, 469,
	2703, 3939, 74121, 74121, -1000, 3064, -1000, -1000, -1000, 74121,
	3801, 2410, -1000, 68061, -1000, 3105, 13509, 74121, 2258, 74121,
	74121, -1000, 74121, 39206, -1000, -1000, 2492, 6635, 667, 2165,
	1890, 1315, -1000, -1000, 1257, 1440, 2258, 74121, -1000, 74121,
	-1000, -1000, -1000, -1000, -1000, 19659, 20681, 19659, -1000, -1000,
	-1000, -1000, -1000, -1000, 1508, 74121, -1000, -1000, 20170, -1000,
	-1000, -1000, -1000, -1000, 74121, 74121, 74121, 1415, 3310, 74121,
	1414, 3309, 74121, 74121, 74121, 74121, -1000, 3403, 128, 1494,
	2099, -1000, 3402, 128, 1479, 74121, -1000, -1000, -1000, -1000,
	1313, 283, 74121, -1000, 74121, -1000, 13428, 2258, -1000, 2000,
	-1000, 3399, 3396, 1855, 2408, 74121, 3711, 731, 61, 1587,
	-1000, -1000, -1000, 74121, 74121, -1000, 1101, 806, 74121, 74121,
	74121, 74121, 74121, 3939, 2447, 3800, -1000, 74121, -1000, 19659,
	-1000, 21217, 1306, 2377, -1000, 3903, 3148, 3147, -1000, 93203,
	1950, 1624, 1624, 2759, 88, 61, 61, 3713, -1000, -1000,
	-1000, -1000, -1000, 1487, -1000, 2376, 2163, 48920, 2167, -1000,
	88, -1000, 832, 297, -1000, 74121, 74121, 74121, 74121, 74121,
	-1000, 19659, -1000, -1000, -1000, -1000, -1000, 3713, 3368, 184,
	-1000, 1371, -1000, 131, -1000, 29469, -1000, 43278, -1000, -1000,
	3283, 3308, 16320, -1000, -1000, 74121, 74121, 74121, 74121, -1000,
	540, 2679, 29469, 29469, 459, 515, 410, 2679, 29469, 29469,
	-1000, -1000, 1608, 1984, 1978, 29469, 29469, -1000, 13177, -1000,
	121, -1000, 29469, -1000, -1000, 3939, 29469, -1000, 495, 492,
	491, 16320, 16320, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	489, -1000, -1000, 16320, 29469, 488, 1788, -1000, 12854, 2947,
	3567, 3560, -1000, -1000, 2947, 29469, 2617, -1000, 480, 16320,
	471, 12777, -1000, 122, 122, 275, 275, 275, -1000, 435,
	435, 435, 435, 435, 435, 626, 3366, 2561, -1000, 1543,
	12625, 12402, 11675, 468, -1000, -1000, -1000, 25, 11532, -1000,
	32039, -1000, -1000, 460, 1208, 1194, -1000, 3300, 36151, 2597,
	-1000, 29469, 127, 31525, 2947, -1000, -1000, 455, -1000, 3559,
	3558, 451, -1000, -1000, 11462, 11462, 11462, 93690, 3283, -1000,
	446, 113, 2902, 39206, 2871, -1000, -1000, 2963, -1000, -1000,
	29469, -1000, 74121, 3129, 38701, 38701, 3246, 3174, 38701, -1000,
	-1000, -1000, -1000, -1000, 57506, 728, 74121, -1000, -1000, -1000,
	-1000, 67556, 725, 74121, 74121, -1000, 45383, 2803, 723, 108,
	-38, 11278, 697, 1257, 2612, -1000, 1785, 708, -1000, 2214,
	3092, -1000, 3307, 115, -1000, -1000, -1000, 3728, 2841, 59509,
	74121, 2839, 3672, 3667, -1000, 705, 3200, 1758, 95151, -1000,
	16320, 3939, 2755, 93690, -1000, 16320, 16320, 1599, -1000, 7,
	74121, 90281, -1000, 114, -1000, 881, -1000, 3352, 2020, 3901,
	74121, -1000, 1683, -1000, -1000, -1000, 3686, 3686, 29469, 1543,
	636, 3900, -1000, 3641, -1000, -1000, 3137, -1000, -1000, 74121,
	-1000, 3939, -1000, 1669, 19659, 286, 1482, 2841, 59509, 2838,
	74121, 2237, -1000, 1481, 61, 61, -1000, -1000, -1000, -1000,
	-1000, 3899, 1401, -1000, 57506, -1000, -1000, 2543, -1000, 3477,
	3107, 51445, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 17,
	-1000, -1000, 40216, -1000, -1000, -1000, -1000, 29469, -1000, 1383,
	2234, 3365, -1000, -1000, 3376, -1000, 74121, 1093, -1000, 67051,
	-1000, -1000, -1000, 111, -1000, 1492, -1000, 2236, 2061, -1000,
	109, 2258, 104, 101, -1000, 3721, 797, 3598, 29469, 3557,
	3864, 3863, -1000, -1000, 2606, 3556, 3898, 806, -1000, -1000,
	-1000, -1000, 2606, -1000, 3236, 93690, 832, 806, 3713, 3713,
	-1000, -1000, 836, -1000, -1000, -1000, -1000, 3395, 3394, 74121,
	51445, -1000, 74121, 51445, -1000, -1000, -1000, 3393, 74121, 74121,
	74121, 1413, 3304, 74121, 74121, 74121, -1000, -1000, 1301, -1000,
	3713, -1000, -1000, 74121, 74121, -93, -1000, 3933, 3933, 93690,
	94, -1000, 3933, 3933, -1000, -1000, 1071, 29469, 3392, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3713, -1000, 3939,
	3939, -1000, 3713, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 93690, 93690, 74121, 74121, 93, 90, 74121, 3390, -1000,
	-1000, -1000, -1000, -1000, -1000, 3364, 62506, -1000, 74121, -1000,
	-1000, -1000, 1127, -1000, 88, 88, 88, 88, 88, -1000,
	-1000, 48920, 3713, -1000, -1000, 10376, 432, 1189, 29469, 3649,
	-1000, -1000, -1000, -1000, 2679, 2679, 29469, 29469, 29469, 2679,
	1608, -1000, -1000, 2679, 2679, -1000, -1000, 10331, -1000, 1077,
	-1000, -1000, -1000, -1000, 16320, -1000, 1077, 3303, -1000, 426,
	-1000, -1000, 424, 64, 74121, -1000, -1000, 29469, 34609, 3363,
	-1000, 29469, 29469, 29469, -1000, -1000, 91, 89, 703, -1000,
	-1000, -1000, -1000, 2597, 3300, -1000, -1000, 10089, 423, 1447,
	16320, 2599, 422, -1000, -1000, -1000, -1000, 2947, 29469, 3006,
	2947, 1902, 1189, 3036, 2905, 87, -1000, 74121, 2598, 16320,
	-1000, -1000, -1000, 3246, -1000, 702, 29469, 38701, -1000, 701,
	74121, 86, -1000, 74121, 85, 81, 93690, 75, -1000, 3897,
	2834, 34095, 29469, 420, 3010, -1000, 3788, 3788, 3003, -1000,
	2928, 19659, 697, 3939, 3092, 74121, 2530, 2530, 2673, 74121,
	-1000, 60014, 2081, 1094, 1785, 419, 671, 74121, -1000, 1502,
	3896, 39206, 66546, -1000, 69, -1000, 92716, -1000, 6561, -1000,
	1292, -1000, 2739, 1303, 3362, 68, -1000, 418, 1457, 1455,
	1380, 74121, 793, 65, 3805, -1000, 3548, 3096, 3096, 9987,
	1905, 643, -1000, 74121, -1000, -1000, 57, -1000, 74121, 1475,
	402, 74121, 1093, 2363, 74121, 793, -1000, 74121, 695, 1841,
	74121, 693, 3711, 61, 397, 9340, 57506, 3889, 3889, 74121,
	692, 689, 688, -1000, -1000, -1000, -1000, 2258, 2118, -1000,
	-1000, -1000, -1000, -1000, 2118, 1618, 2118, 39206, 43807, -1000,
	74121, 74121, -1000, 9200, -1000, 3798, 3797, -1000, -1000, 684,
	-1000, 3894, 3644, -1000, -1000, -1000, -1000, 20681, 74121, 74121,
	1826, 376, 1826, 360, 74121, -1000, -1000, 3389, 74121, 51445,
	-1000, -1000, 3387, -1000, -1000, 2258, -1000, -1000, 1855, 43278,
	42773, -1000, 2408, 680, 679, 676, 9136, 74121, -1000, -1000,
	-1000, -1000, 3644, 400, -1000, -1000, -1000, 92229, 93690, -1000,
	48920, 48920, 3198, -1000, -1000, 154, -1000, -1000, -1000, -1000,
	74121, 16320, 30497, 2679, 2679, 2679, -1000, 388, 2022, 29469,
	-1000, -1000, -1000, 8954, 1559, 34609, 16320, 16320, 16320, -1000,
	29469, -1000, 29469, -1000, -1000, -1000, 1317, -1000, -1000, 2667,
	58, -1000, 3893, 386, 3197, 29469, -1000, -1000, -1000, -1000,
	-1000, -1000, 2720, 3006, 381, -1000, 2087, -1000, 3039, 3037,
	2990, -1000, 3345, 39206, -1000, 793, -1000, 74121, 16320, -1000,
	29469, 55, -1000, 52, -1000, -1000, 1008, 45383, -1000, 675,
	74121, 50, -1000, 389, 34609, 9090, -1000, -1000, -1000, 2917,
	29469, 2913, -1000, 2925, -1000, -1000, -1000, 3885, 3885, -1000,
	-1000, 3885, 3885, 2740, 3939, 49, -1000, 38186, 3345, -1000,
	2673, 44, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3183, 667, 1143, 672, -1000, -1000,
	3092, 2029, 1785, 671, 1119, 1063, 1061, 793, 39, 3105,
	95151, 7003, -1000, -1000, 215, -1000, -1000, 93690, 3385, 2336,
	1303, -1000, 1852, -1000, -1000, -1000, 74121, -1000, -1000, 3707,
	3698, -1000, -1000, 74121, 1262, -1000, 3672, 3667, -1000, 2072,
	-1000, 1859, 3187, 1805, 656, 29469, 2292, -1000, 19659, 1093,
	74121, 2029, 671, -1000, 2696, 1093, 3693, -1000, 372, 57506,
	-1000, 3947, -1000, 38701, -1000, 3889, -1000, 2211, -1000, -1000,
	58011, 29469, 29469, 2081, 3686, 670, 3686, 74121, 3686, -1000,
	-1000, 669, 3004, 667, -1000, 3598, -1000, -1000, 29469, 2096,
	3097, -1000, -1000, -1000, -1000, -1000, 1407, -1000, 1405, -1000,
	74121, 1826, 357, 74121, -1000, 754, 2738, -1000, 93690, -1000,
	93690, 93690, 29469, -1000, -1000, 3713, -1000, 367, 350, 346,
	401, 362, 1624, 3713, 45, -1000, 3888, 27, -1000, 16320,
	-1000, -1000, -1000, -1000, 22268, 666, 665, 458, -1000, 345,
	31011, 31011, 31011, 25, 29469, 1559, 33, 32, -1000, 2591,
	2635, 2691, 2651, 29469, 19659, -1000, 2731, 16320, -1000, -1000,
	344, 3196, -1000, -1000, -1000, 74121, 3027, 3026, 54981, -1000,
	-1000, -1000, 29, 28, -1000, -1000, -1000, -1000, 74121, 21,
	-1000, 91742, 34095, 22, 19659, 1543, 2805, 74121, 2911, 16320,
	2916, 3296, 3939, 3939, 3939, 3939, 47405, 3547, 46900, -1000,
	-1000, 19659, -1000, -1000, -1000, -1000, -1000, 48415, -1000, 3183,
	-1000, 1401, 2414, -1000, -1000, 39711, 2081, 2673, 1785, 3092,
	2841, -1000, 1114, 1103, 3672, 2106, 663, -1000, 1758, -1000,
	-1000, 2307, 659, 1449, -1000, -1000, 3885, -1000, -1000, 2257,
	-1000, 2227, 2222, -1000, -1000, -1000, 3882, 1404, -1000, 2044,
	-1000, 3194, 3191, 2973, -1000, -1000, -1000, -1000, 5538, 8362,
	3881, 74121, -1000, -1000, 1093, 1474, 2841, 74121, -1000, -1000,
	-1000, 657, 18, -1000, 17, -1000, -1000, -1000, 14, -1000,
	3933, -2, -9, 3096, 74121, 3096, 636, 3096, 43278, 811,
	3004, -1000, 8256, 656, -1000, 29469, 74121, 74121, -1000, -1000,
	1402, -1000, 1652, 1504, 1652, -10, -1000, -13, -14, 8123,
	-1000, -1000, -1000, -1000, -1000, -1000, 3361, -1000, 74121, 653,
	30497, -1000, 29469, 29469, 652, -1000, 2318, -1000, 35637, 1867,
	1563, 6221, 2318, 2318, 16320, -1000, -1000, -1000, 3006, 2663,
	2645, -1000, 2694, -1000, 2687, 2690, 2680, -1000, -1000, -1000,
	-1000, 2728, 326, 3295, 3294, 352, 3878, 1558, -25, -1000,
	74121, 2896, 2824, -1000, 36151, -1000, 2833, -1000, -1000, -1000,
	2900, 2982, -1000, -1000, 2894, 785, 2910, -1000, -1000, -1000,
	-1000, 7, -1000, 46395, 7, -1000, -1000, -26, -1000, -1000,
	1401, -1000, 2113, -39, -1000, 797, 3598, 29469, 3183, 3092,
	2673, 1785, -1000, -1000, -1000, 3738, 651, 39206, -1000, 1841,
	29469, -1000, -1000, -1000, 74121, 2334, 57506, 57506, 793, 74121,
	-1000, -1000, 2966, -1000, 2971, 2275, 2275, 2822, 1406, 1855,
	-1000, -1000, 74121, 1472, 1093, 343, -1000, 3946, -1000, 58011,
	-1000, -1000, 3386, -1000, -47, -1000, 1905, 3345, 338, -1000,
	811, -1000, -1000, 16320, 1826, 1826, 74121, -1000, -1000, -1000,
	3291, -1000, 57506, 93690, -1000, -1000, -1000, 48920, -1000, -1000,
	-1000, -49, -55, 30497, -1000, 1757, 3784, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 337, 3190, 3188, -1000, -1000, 2672,
	-1000, 2671, -1000, 3006, -1000, 74121, 74121, 74121, -1000, -1000,
	74121, -1000, 650, -1000, -1000, 2896, -1000, 34609, 34609, 3542,
	-1000, 34609, -1000, 2803, 642, -1000, 54981, -1000, -1000, 2963,
	74121, 3060, 640, -1000, -1000, 7, -1000, -1000, 48415, -1000,
	-1000, 2817, 2815, -1000, 39711, 74121, 74121, 7718, 1401, 2673,
	3183, 3092, 3667, 39206, -65, 57506, 7311, -1000, -1000, 1540,
	-1, -17, 3672, -1000, -1000, 2507, -1000, -1000, 3551, -1000,
	-1000, -1000, -93, 1093, 74121, -1000, -1000, -1000, -1000, 639,
	2258, -1000, 2258, 3187, -1000, -1000, -1000, -1000, -1000, 1826,
	74121, -1000, -1000, 362, -1000, -1000, -67, 1538, -1000, -1000,
	1167, 29983, -1000, 2636, 2628, -1000, -1000, 3186, 3167, 322,
	312, -1000, 29469, -1000, 1543, 1543, -1000, 1543, 2831, 73616,
	-109, 2590, -77, -1000, 29469, -1000, -1000, -1000, -1000, -1000,
	-1000, 3598, -1000, 3183, 1401, 2673, 1401, -94, -1000, 2106,
	638, -1000, 3385, 3384, 3359, -1000, -1000, 636, 636, -1000,
	1093, 29469, -1000, 2258, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2626, 2622, 2727, 45890, 74121, 74121, 74121, 6662, 74121,
	-97, -1000, 91255, 2813, 3052, 2983, -98, 74121, 1401, -1000,
	3183, 3345, -1000, 39206, 3738, 19148, 2302, 1454, 1452, -1000,
	-1000, -1000, -99, 2258, -1000, -1000, -1000, 3629, 867, -1000,
	-1000, -1000, -1000, -1000, -110, 3006, 73616, 2821, 1501, 3945,
	-1000, -1000, -1000, 2963, -1000, -1000, -1000, 1401, -1000, -1000,
	3667, -114, -1000, -1000, -1000, -1000, -1000, 1841, 3662, 3659,
	-1000, 45890, 29469, -1000, 336, -1000, -1000, 2667, 2812, 2812,
	3944, 2927, 2583, -1000, 1401, -1000, 19148, 57506, 2205, 2197,
	3091, -105, -1000, 2635, 2667, 3006, -1000, 625, 74121, 3052,
	3345, -1000, 622, 57506, 57506, 74121, 334, 3006, 2635, -1000,
	73616, 2823, -1000, -1000, 19148, -1000, -1000, -1000, 3939, -1000,
	3006, -116, 620, -121, -1000, -1000, 73616, -1000, -131, -1000,
}

var yyPgo = [...]int16{
	0, 4451, 4450, 3014, 154, 0, 106, 7452, 4447, 50,
	284, 332, 4446, 268, 608, 325, 144, 334, 341, 4115,
	10075, 9819, 130, 4445, 291, 4445, 4443, 333, 290, 239,
	4442, 225, 4441, 4440, 181, 226, 4439, 275, 4437, 381,
	4436, 38, 4435, 4434, 259, 196, 352, 370, 372, 376,
	4433, 323, 351, 319, 321, 4431, 7520, 2832, 2716, 14,
	4430, 4429, 578, 4428, 4427, 4426, 316, 4424, 274, 4423,
	4422, 4421, 4420, 12, 342, 4420, 4419, 326, 4418, 4417,
	4416, 111, 4415, 4409, 4407, 4404, 221, 312, 311, 4403,
	496, 304, 197, 169, 881, 7576, 4401, 340, 209, 809,
	212, 4399, 4398, 12327, 4397, 4394, 12205, 11928, 9889, 4393,
	8679, 7150, 168, 240, 306, 4392, 272, 295, 439, 911,
	353, 9, 537, 344, 4391, 4390, 4389, 167, 4388, 4385,
	59, 57, 315, 4384, 4383, 75, 23, 54, 369, 350,
	4382, 4381, 373, 4380, 4379, 11101, 81, 233, 4378, 102,
	4376, 318, 320, 62, 48, 4375, 317, 263, 265, 42,
	261, 213, 55, 214, 322, 4372, 4370, 4369, 4367, 103,
	254, 91, 7961, 393, 378, 4363, 4361, 4360, 4359, 4357,
	200, 187, 4353, 4352, 4351, 4348, 41, 25, 4347, 4345,
	250, 266, 270, 303, 4343, 307, 195, 15, 28, 193,
	149, 4342, 4334, 4332, 4331, 30, 85, 13, 4330, 4329,
	4328, 343, 4328, 4328, 4328, 4328, 4326, 300, 4325, 4324,
	4323, 140, 4322, 4321, 4314, 67, 4314, 53, 70, 4313,
	40, 97, 324, 278, 356, 37, 282, 3137, 253, 4306,
	375, 349, 346, 93, 206, 7, 231, 211, 252, 4305,
	255, 4304, 4302, 4302, 371, 302, 257, 251, 184, 179,
	4301, 383, 4300, 367, 4299, 4297, 4294, 4293, 309, 152,
	74, 4292, 245, 4291, 109, 4290, 4287, 101, 305, 26,
	61, 4285, 39, 112, 44, 208, 4283, 71, 301, 1,
	19, 10, 4280, 551, 4279, 76, 4278, 159, 267, 4277,
	313, 273, 4275, 339, 77, 18, 6, 4274, 2, 5,
	4, 16, 264, 4273, 210, 4263, 119, 4260, 248, 192,
	145, 4258, 123, 4254, 66, 47, 125, 4253, 4252, 4249,
	160, 65, 4247, 124, 4241, 217, 288, 4240, 4239, 4237,
	24, 46, 115, 64, 68, 52, 34, 86, 58, 4236,
	4235, 36, 84, 4231, 227, 27, 22, 63, 286, 100,
	4228, 31, 17, 21, 283, 285, 336, 335, 4226, 33,
	287, 357, 4225, 4224, 355, 133, 347, 43, 235, 4223,
	229, 4221, 29, 4219, 92, 60, 199, 72, 56, 4218,
	49, 228, 4217, 135, 426, 4216, 296, 1580, 13355, 4215,
	153, 294, 384, 94, 4213, 232, 216, 4212, 32, 327,
	121, 377, 354, 4210, 328, 4210, 4208, 4202, 150, 146,
	148, 4200, 136, 4199, 4197, 4188, 4187, 4184, 4179, 4178,
	4177, 4175, 4174, 4168, 4164, 4163, 4162, 394, 385, 4161,
	329, 4160, 331, 387, 359, 364, 4158, 215, 361, 45,
	4151, 78, 374, 457, 224, 118, 79, 4150, 4148, 218,
	262, 379, 4145, 4141, 4140, 4139, 4137, 4136, 4133, 4132,
	4131, 4129, 4126, 4125, 4124, 4122, 4121, 4120, 4117, 4114,
	4112, 4111, 4110, 4108, 4106, 4105, 4103, 4099, 4098, 4097,
	4096, 4094, 4093, 4092, 4091, 4090, 4089, 4087, 4086, 4084,
	4083, 4082, 4080, 4073, 4072, 4071, 244, 236, 4067, 4064,
	4063, 345, 330, 281, 293, 380, 238, 237, 113, 4060,
	4058, 122, 4057, 4056, 4055, 365, 4053, 382, 4050, 4049,
	4048, 4047, 202, 114, 4046, 83, 207, 368, 51, 4039,
	4038, 234, 292, 117, 110, 4037, 4032, 4031, 4029, 4028,
	204, 4027, 4026, 241, 69, 4024, 276, 242, 4023, 337,
	360, 4019, 4018, 358, 4017, 1836, 366, 4016, 247, 249,
	88, 338, 4015, 104, 4014, 4013, 299, 392, 223, 4012,
	4011, 4009, 73, 4008, 4004, 243, 298, 4003, 4001, 3989,
	3988, 3986, 3984, 3, 87, 20, 8, 3983, 3978, 35,
	3977, 3974, 277, 3972, 3971, 348, 82, 80, 3970, 3966,
	3965, 3962, 280, 3961, 3960, 271, 11, 3959, 3959, 3107,
	363,
}

var yyR1 = [...]int16{
	0, 1, 2, 2, 3, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 18,
	18, 362, 362, 397, 397, 397, 25, 25, 26, 26,
	27, 27, 28, 28, 41, 41, 41, 5, 5, 5,
	6, 6, 6, 6, 6, 8, 8, 7, 13, 13,
	14, 14, 398, 398, 24, 24, 16, 16, 612, 612,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 15,
	15, 17, 17, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	608, 608, 608, 608, 608, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 92, 94,
	93, 93, 93, 101, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 116, 116,
	60, 60, 87, 87, 91, 91, 90, 90, 90, 90,
	88, 88, 61, 61, 61, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 74, 74, 76, 76, 76,
	76, 76, 77, 77, 77, 78, 12, 12, 12, 12,
	12, 12, 12, 12, 79, 79, 80, 72, 81, 81,
	192, 192, 82, 82, 82, 83, 83, 83, 84, 84,
	85, 85, 85, 85, 269, 269, 269, 565, 565, 122,
	122, 122, 122, 122, 122, 122, 73, 73, 86, 86,
	86, 63, 64, 64, 67, 67, 66, 65, 65, 68,
	68, 68, 71, 71, 120, 120, 120, 69, 69, 70,
	155, 155, 155, 148, 148, 148, 148, 148, 148, 157,
	157, 157, 157, 156, 156, 156, 156, 156, 158, 158,
	158, 158, 158, 119, 119, 99, 100, 100, 100, 100,
	100, 95, 95, 95, 97, 98, 113, 113, 114, 114,
	102, 102, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 109, 109, 105, 105, 609, 609, 610,
	610, 96, 96, 96, 96, 96, 96, 106, 107, 110,
	111, 108, 108, 108, 108, 611, 117, 117, 117, 118,
	118, 104, 104, 145, 145, 147, 147, 149, 149, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 146, 146, 121, 121, 126, 126, 123, 123, 152,
	152, 151, 151, 169, 169, 170, 172, 172, 173, 173,
	171, 171, 171, 171, 171, 171, 171, 171, 138, 138,
	139, 139, 140, 140, 142, 143, 143, 143, 143, 141,
	141, 144, 144, 144, 174, 174, 174, 174, 174, 174,
	174, 239, 239, 238, 238, 241, 241, 241, 241, 242,
	242, 243, 243, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 400, 400, 401, 401, 401,
	402, 402, 402, 255, 255, 255, 255, 255, 255, 256,
	256, 256, 256, 257, 257, 258, 258, 259, 259, 259,
	260, 260, 261, 261, 263, 264, 264, 264, 265, 265,
	265, 266, 266, 266, 267, 267, 245, 245, 195, 195,
	195, 216, 248, 248, 247, 247, 247, 247, 250, 250,
	250, 250, 250, 249, 249, 251, 251, 252, 252, 253,
	253, 254, 254, 268, 268, 277, 277, 273, 273, 274,
	275, 275, 276, 276, 570, 271, 271, 270, 270, 272,
	283, 283, 285, 285, 284, 284, 284, 284, 286, 286,
	287, 287, 278, 278, 279, 279, 280, 280, 280, 281,
	281, 282, 282, 282, 282, 282, 288, 293, 292, 292,
	304, 304, 294, 294, 295, 296, 296, 299, 299, 298,
	298, 300, 300, 300, 301, 301, 301, 302, 302, 297,
	297, 303, 303, 306, 306, 307, 307, 307, 307, 307,
	307, 307, 307, 308, 308, 308, 308, 305, 305, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 310, 310,
	310, 310, 310, 311, 311, 312, 312, 313, 313, 289,
	289, 290, 290, 290, 290, 290, 290, 291, 291, 175,
	399, 399, 185, 185, 185, 185, 185, 207, 207, 186,
	186, 190, 176, 187, 187, 193, 193, 191, 188, 188,
	177, 262, 262, 178, 189, 189, 179, 179, 210, 210,
	211, 211, 217, 217, 217, 218, 218, 219, 219, 221,
	221, 222, 222, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 223, 223,
	228, 229, 229, 229, 229, 229, 229, 224, 224, 230,
	235, 235, 235, 235, 231, 231, 231, 231, 34, 34,
	374, 374, 374, 374, 374, 374, 374, 374, 373, 373,
	373, 372, 372, 372, 372, 372, 234, 234, 527, 527,
	233, 233, 613, 613, 554, 554, 212, 212, 213, 213,
	214, 214, 215, 215, 199, 199, 199, 199, 199, 208,
	208, 209, 209, 200, 200, 202, 203, 204, 204, 204,
	204, 204, 197, 194, 194, 194, 201, 201, 201, 226,
	226, 227, 227, 205, 205, 205, 206, 206, 198, 198,
	153, 153, 153, 154, 154, 154, 196, 196, 180, 180,
	180, 180, 180, 180, 376, 376, 376, 376, 376, 376,
	376, 376, 314, 314, 315, 315, 318, 318, 318, 321,
	329, 329, 329, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 378, 378, 379, 379, 380, 380, 381,
	381, 316, 316, 317, 317, 322, 322, 323, 323, 324,
	324, 324, 324, 325, 328, 328, 382, 382, 383, 383,
	384, 10, 33, 319, 333, 333, 334, 334, 334, 334,
	337, 337, 337, 337, 340, 340, 340, 386, 386, 389,
	389, 391, 391, 391, 391, 387, 387, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 614, 614, 29, 29, 29, 385, 385,
	388, 388, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 320, 320, 336, 336, 336, 336, 336, 336, 336,
	338, 338, 327, 327, 326, 326, 342, 342, 341, 341,
	341, 341, 346, 346, 346, 346, 346, 343, 344, 345,
	345, 345, 345, 345, 347, 347, 348, 348, 349, 350,
	350, 351, 351, 351, 377, 377, 355, 355, 355, 355,
	356, 356, 357, 357, 358, 181, 181, 339, 339, 359,
	359, 361, 361, 360, 360, 363, 363, 182, 182, 182,
	182, 182, 182, 182, 182, 182, 182, 182, 182, 182,
	182, 182, 182, 182, 182, 182, 182, 182, 364, 364,
	369, 369, 365, 365, 11, 453, 453, 453, 453, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	367, 367, 367, 368, 370, 370, 615, 615, 183, 183,
	183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
	421, 421, 421, 559, 559, 559, 562, 562, 562, 562,
	561, 561, 563, 563, 422, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 39, 39,
	40, 40, 410, 89, 89, 89, 89, 409, 75, 75,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 331, 331, 332, 332, 332,
	332, 332, 332, 352, 353, 353, 354, 354, 354, 354,
	416, 416, 416, 416, 566, 566, 567, 567, 568, 568,
	568, 569, 569, 569, 569, 569, 571, 571, 571, 571,
	571, 572, 112, 112, 112, 573, 573, 574, 574, 576,
	576, 576, 576, 576, 581, 581, 575, 575, 582, 582,
	582, 420, 600, 600, 583, 583, 564, 564, 418, 418,
	584, 584, 584, 586, 586, 585, 585, 585, 585, 585,
	591, 591, 592, 592, 594, 589, 589, 590, 590, 597,
	587, 587, 617, 617, 588, 588, 595, 595, 616, 616,
	593, 593, 593, 596, 596, 596, 596, 598, 598, 419,
	419, 419, 419, 225, 225, 599, 599, 599, 599, 464,
	464, 464, 464, 465, 466, 466, 466, 466, 466, 466,
	466, 467, 467, 467, 467, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, 467, 467, 471, 471, 506,
	506, 618, 618, 472, 472, 473, 473, 507, 507, 509,
	509, 509, 509, 474, 508, 508, 510, 475, 475, 475,
	475, 475, 475, 475, 475, 475, 475, 475, 475, 475,
	496, 497, 497, 513, 513, 513, 513, 512, 512, 511,
	511, 518, 518, 498, 498, 499, 499, 499, 514, 514,
	515, 515, 516, 516, 500, 500, 500, 500, 501, 501,
	502, 503, 503, 517, 517, 549, 549, 549, 549, 550,
	550, 557, 551, 552, 552, 553, 470, 470, 470, 470,
	470, 504, 504, 505, 505, 555, 555, 556, 556, 462,
	462, 463, 404, 404, 405, 403, 403, 403, 406, 406,
	407, 407, 407, 407, 560, 560, 560, 560, 560, 560,
	560, 560, 560, 560, 560, 558, 558, 558, 558, 237,
	237, 240, 240, 232, 232, 601, 601, 601, 601, 601,
	601, 601, 601, 601, 603, 603, 603, 236, 236, 9,
	9, 9, 9, 605, 605, 442, 442, 442, 602, 602,
	602, 602, 602, 604, 604, 604, 604, 443, 443, 375,
	375, 375, 375, 375, 375, 393, 393, 30, 30, 31,
	32, 32, 35, 35, 35, 35, 36, 36, 38, 38,
	38, 38, 394, 395, 395, 396, 396, 476, 476, 477,
	522, 522, 522, 522, 519, 519, 521, 520, 520, 478,
	523, 523, 479, 479, 480, 481, 524, 524, 528, 528,
	529, 529, 529, 529, 529, 530, 530, 531, 531, 532,
	532, 533, 533, 482, 534, 534, 483, 483, 484, 484,
	536, 536, 541, 541, 541, 485, 485, 485, 486, 486,
	486, 486, 537, 537, 542, 542, 542, 542, 542, 542,
	542, 246, 246, 487, 488, 488, 488, 488, 488, 488,
	488, 488, 488, 489, 489, 489, 535, 535, 535, 490,
	545, 545, 538, 538, 543, 543, 543, 543, 543, 525,
	525, 606, 606, 606, 607, 607, 491, 492, 492, 539,
	539, 544, 544, 493, 494, 540, 540, 540, 540, 495,
	495, 526, 526, 546, 546, 547, 547, 548, 548, 45,
	45, 45, 44, 44, 159, 159, 162, 162, 162, 162,
	162, 165, 166, 167, 168, 163, 163, 160, 161, 161,
	164, 164, 127, 127, 128, 128, 130, 132, 132, 132,
	131, 133, 133, 129, 129, 134, 134, 134, 134, 135,
	135, 136, 136, 136, 136, 136, 137, 137, 137, 137,
	137, 47, 47, 47, 47, 46, 46, 48, 48, 48,
	48, 48, 48, 49, 49, 50, 50, 51, 52, 52,
	52, 53, 53, 54, 54, 55, 55, 423, 423, 423,
	423, 423, 423, 423, 423, 423, 423, 423, 423, 424,
	424, 619, 619, 619, 438, 438, 438, 425, 431, 429,
	426, 426, 427, 427, 427, 427, 437, 437, 430, 428,
	428, 428, 428, 428, 428, 444, 444, 445, 445, 439,
	439, 439, 439, 439, 439, 440, 440, 440, 440, 440,
	440, 440, 440, 440, 461, 461, 432, 433, 433, 434,
	434, 435, 435, 436, 446, 446, 441, 441, 441, 458,
	458, 458, 451, 451, 451, 451, 451, 451, 447, 447,
	447, 447, 447, 448, 448, 452, 452, 452, 452, 452,
	460, 460, 460, 460, 460, 460, 460, 460, 460, 460,
	460, 460, 460, 460, 460, 460, 460, 460, 460, 460,
	460, 449, 449, 454, 454, 456, 456, 450, 450, 459,
	457, 457, 457, 455, 455, 42, 42, 37, 37, 43,
	43, 124, 125, 125, 417, 417, 417, 411, 411, 577,
	577, 577, 577, 577, 577, 577, 577, 577, 577, 577,
	577, 577, 577, 577, 577, 577, 579, 579, 578, 578,
	578, 580, 580, 580, 580, 580, 620, 620, 408, 408,
	408, 408, 412, 412, 468, 469, 413, 413, 414, 414,
	414, 414, 415, 415, 415, 415,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	0, 1, 0, 1, 1, 0, 2, 0, 3, 0,
	2, 0, 1, 0, 2, 2, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 2, 3, 0, 1, 3, 1, 0,
	3, 3, 4, 4, 4, 4, 3, 2, 1, 1,
	2, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 5,
	3, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 3, 3, 2,
	2, 3, 5, 4, 6, 3, 5, 4, 6, 4,
	6, 5, 7, 3, 2, 4, 2, 3, 3, 4,
	3, 4, 3, 4, 5, 6, 6, 7, 6, 7,
	3, 4, 4, 6, 3, 3, 4, 3, 4, 4,
	5, 4, 5, 1, 1, 3, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 5, 6, 3, 4, 1, 1, 2, 4,
	1, 1, 1, 2, 2, 2, 2, 1, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 6, 2, 3, 5, 1, 1,
	1, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 4,
	1, 2, 1, 2, 1, 0, 2, 2, 3, 5,
	0, 2, 4, 3, 1, 5, 1, 1, 4, 1,
	4, 1, 4, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 6, 4, 4, 6, 4, 4, 4, 4,
	4, 6, 5, 5, 5, 4, 6, 4, 4, 4,
	4, 5, 7, 7, 9, 4, 6, 5, 5, 7,
	7, 4, 7, 4, 6, 6, 4, 5, 4, 5,
	3, 11, 8, 9, 8, 1, 0, 5, 5, 3,
	3, 5, 3, 2, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 5, 3, 4, 1, 3,
	3, 1, 2, 2, 0, 1, 2, 0, 2, 3,
	3, 3, 4, 0, 1, 1, 1, 1, 2, 3,
	4, 5, 6, 8, 6, 6, 1, 3, 1, 3,
	3, 5, 1, 0, 1, 2, 4, 2, 0, 3,
	3, 2, 1, 3, 4, 3, 5, 4, 3, 5,
	1, 1, 1, 1, 4, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 3, 2,
	3, 2, 0, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 3, 3, 0,
	2, 3, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 1, 3, 3, 2, 4, 1, 5,
	2, 5, 2, 5, 2, 1, 3, 3, 0, 1,
	0, 3, 0, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 0, 5, 0, 5, 0, 0,
	1, 1, 3, 1, 1, 1, 3, 3, 1, 1,
	1, 2, 4, 4, 2, 3, 5, 5, 1, 3,
	1, 0, 1, 2, 3, 2, 4, 2, 3, 2,
	0, 1, 2, 0, 9, 9, 2, 1, 4, 4,
	4, 1, 0, 1, 3, 3, 2, 1, 1, 2,
	0, 1, 3, 2, 3, 2, 3, 1, 4, 2,
	3, 2, 3, 2, 3, 1, 1, 2, 2, 4,
	1, 2, 3, 3, 4, 5, 4, 5, 4, 2,
	2, 2, 1, 1, 0, 5, 2, 2, 2, 3,
	1, 0, 1, 3, 9, 1, 2, 0, 7, 7,
	0, 10, 6, 0, 4, 5, 2, 0, 2, 4,
	0, 1, 1, 0, 5, 2, 4, 1, 1, 4,
	5, 4, 0, 2, 0, 1, 0, 1, 5, 1,
	0, 2, 0, 2, 6, 2, 0, 1, 3, 2,
	4, 0, 1, 3, 2, 1, 0, 1, 3, 3,
	2, 0, 2, 2, 2, 3, 3, 4, 1, 3,
	3, 2, 7, 12, 1, 3, 2, 3, 3, 1,
	2, 2, 2, 2, 1, 2, 13, 2, 2, 0,
	2, 0, 1, 3, 3, 1, 3, 1, 3, 3,
	3, 3, 3, 0, 3, 3, 0, 3, 0, 7,
	7, 3, 0, 2, 1, 1, 1, 1, 1, 1,
	2, 2, 1, 3, 3, 6, 0, 3, 0, 2,
	3, 2, 3, 4, 4, 3, 3, 0, 5, 2,
	5, 2, 0, 4, 2, 1, 0, 1, 0, 1,
	3, 3, 6, 7, 5, 7, 9, 2, 0, 7,
	1, 3, 1, 4, 4, 7, 2, 1, 1, 1,
	3, 2, 8, 1, 3, 3, 5, 2, 1, 3,
	7, 2, 0, 10, 1, 2, 9, 11, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 3, 0, 1,
	3, 2, 0, 1, 1, 3, 3, 1, 1, 3,
	3, 3, 3, 4, 4, 3, 3, 2, 1, 3,
	2, 1, 1, 1, 1, 3, 0, 1, 3, 1,
	1, 1, 1, 1, 1, 2, 2, 1, 1, 1,
	2, 2, 1, 3, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 0,
	2, 0, 1, 0, 1, 0, 1, 0, 1, 0,
	1, 0, 1, 0, 4, 4, 4, 5, 5, 2,
	5, 3, 5, 2, 0, 3, 1, 2, 5, 5,
	8, 3, 4, 8, 5, 0, 4, 3, 0, 1,
	3, 1, 3, 2, 2, 4, 4, 5, 2, 0,
	1, 1, 0, 2, 2, 0, 2, 0, 13, 16,
	12, 15, 14, 17, 1, 1, 2, 2, 2, 2,
	1, 0, 1, 0, 1, 3, 1, 1, 1, 3,
	3, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 1, 0, 2, 2, 1,
	0, 3, 0, 1, 3, 1, 1, 2, 4, 6,
	6, 10, 1, 2, 1, 3, 4, 0, 1, 3,
	2, 1, 1, 6, 2, 0, 3, 1, 1, 2,
	1, 2, 2, 2, 2, 3, 0, 1, 2, 1,
	2, 1, 3, 2, 3, 1, 2, 2, 2, 1,
	2, 3, 1, 2, 2, 2, 2, 3, 3, 3,
	1, 3, 1, 1, 0, 1, 1, 0, 1, 0,
	3, 0, 2, 1, 4, 4, 5, 2, 5, 5,
	7, 3, 1, 5, 9, 3, 9, 4, 11, 10,
	2, 0, 1, 3, 3, 6, 4, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 3, 3, 4, 0, 1, 0, 6, 1,
	3, 3, 3, 5, 2, 0, 3, 4, 4, 0,
	2, 0, 4, 0, 3, 16, 19, 1, 0, 2,
	0, 4, 0, 1, 3, 2, 0, 4, 6, 4,
	6, 4, 4, 6, 4, 6, 5, 7, 5, 7,
	4, 6, 10, 13, 10, 13, 11, 14, 1, 3,
	1, 0, 1, 3, 1, 1, 1, 1, 1, 2,
	5, 3, 6, 4, 6, 6, 9, 5, 7, 6,
	6, 5, 5, 5, 5, 9, 4, 5, 7, 6,
	4, 8, 4, 2, 4, 3, 6, 4, 3, 3,
	3, 2, 2, 3, 4, 4, 3, 3, 3, 3,
	3, 3, 4, 4, 3, 2, 3, 2, 2, 3,
	4, 3, 2, 2, 3, 4, 4, 4, 5, 1,
	4, 4, 4, 3, 3, 2, 1, 0, 6, 4,
	6, 4, 6, 8, 4, 6, 4, 6, 5, 7,
	2, 3, 3, 2, 5, 1, 1, 2, 3, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 2, 1,
	2, 1, 1, 1, 3, 3, 3, 3, 3, 2,
	1, 3, 2, 3, 5, 5, 5, 2, 1, 3,
	6, 6, 6, 6, 6, 8, 8, 6, 6, 7,
	9, 9, 8, 10, 6, 6, 6, 6, 6, 6,
	6, 8, 6, 8, 6, 8, 7, 9, 6, 8,
	7, 9, 8, 10, 8, 10, 9, 11, 8, 10,
	9, 11, 8, 8, 7, 6, 6, 6, 6, 8,
	8, 8, 8, 6, 9, 0, 2, 2, 1, 2,
	2, 2, 2, 3, 1, 3, 3, 1, 5, 3,
	9, 12, 7, 7, 3, 2, 1, 3, 1, 3,
	3, 3, 3, 2, 2, 1, 1, 1, 1, 2,
	1, 1, 1, 4, 5, 1, 0, 1, 2, 2,
	2, 2, 1, 1, 1, 3, 3, 5, 1, 4,
	0, 2, 3, 0, 1, 1, 2, 1, 17, 21,
	1, 1, 2, 1, 3, 1, 1, 1, 3, 1,
	2, 0, 1, 2, 4, 1, 1, 1, 1, 1,
	3, 0, 1, 0, 1, 1, 4, 0, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 2, 0, 9,
	11, 12, 14, 3, 0, 3, 4, 4, 0, 6,
	4, 9, 7, 6, 4, 6, 6, 5, 7, 9,
	6, 6, 5, 4, 4, 3, 6, 6, 6, 6,
	4, 7, 5, 8, 7, 8, 6, 5, 8, 1,
	0, 1, 0, 4, 6, 5, 8, 2, 0, 2,
	2, 2, 1, 5, 2, 0, 2, 6, 6, 6,
	10, 6, 6, 6, 9, 9, 6, 6, 9, 6,
	7, 7, 6, 2, 2, 2, 2, 1, 2, 1,
	0, 1, 2, 10, 13, 5, 4, 4, 2, 0,
	2, 2, 1, 0, 11, 14, 12, 15, 8, 11,
	8, 7, 9, 1, 1, 3, 3, 5, 6, 1,
	3, 1, 3, 1, 3, 3, 7, 9, 9, 8,
	6, 1, 0, 1, 3, 3, 1, 5, 3, 8,
	11, 6, 1, 0, 5, 2, 3, 0, 2, 0,
	1, 1, 1, 1, 1, 3, 3, 2, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 3, 2,
	2, 1, 2, 2, 2, 2, 1, 1, 0, 1,
	1, 1, 1, 1, 1, 2, 0, 2, 0, 4,
	1, 3, 1, 2, 2, 2, 1, 1, 1, 1,
	1, 3, 3, 1, 3, 1, 3, 11, 13, 5,
	1, 2, 2, 1, 1, 3, 5, 1, 3, 7,
	2, 0, 5, 5, 10, 8, 2, 0, 2, 0,
	1, 1, 1, 1, 1, 2, 0, 2, 0, 4,
	0, 5, 0, 8, 1, 1, 8, 11, 6, 8,
	1, 3, 1, 1, 3, 4, 7, 6, 5, 5,
	5, 5, 1, 3, 4, 4, 4, 3, 4, 3,
	1, 4, 0, 8, 5, 5, 6, 7, 7, 7,
	4, 4, 5, 11, 10, 10, 2, 2, 0, 13,
	2, 0, 1, 3, 5, 5, 3, 6, 2, 1,
	0, 2, 4, 0, 1, 3, 6, 8, 8, 1,
	3, 5, 5, 10, 10, 11, 11, 5, 5, 6,
	10, 1, 0, 2, 0, 1, 0, 2, 2, 1,
	1, 0, 4, 0, 1, 3, 1, 1, 1, 1,
	1, 2, 4, 4, 5, 2, 0, 3, 1, 3,
	4, 3, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 3, 3, 3, 0, 1,
	4, 2, 2, 2, 2, 2, 3, 2, 2, 3,
	0, 2, 2, 1, 1, 1, 0, 2, 4, 5,
	6, 4, 5, 2, 3, 1, 1, 1, 1, 2,
	2, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 2, 3, 2, 5, 4, 3, 3, 3, 3,
	3, 1, 1, 0, 2, 3, 0, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 0, 3, 6, 3,
	5, 3, 5, 3, 5, 2, 0, 2, 0, 1,
	2, 2, 2, 3, 3, 2, 2, 3, 3, 1,
	1, 3, 3, 2, 1, 1, 8, 8, 11, 5,
	7, 6, 9, 5, 2, 0, 3, 3, 3, 7,
	7, 10, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 4, 5, 1, 3, 2, 2, 2, 2, 2,
	1, 2, 2, 4, 3, 2, 2, 2, 2, 2,
	2, 3, 2, 2, 2, 2, 5, 5, 5, 5,
	5, 1, 3, 1, 2, 3, 0, 3, 1, 2,
	1, 1, 1, 3, 0, 1, 3, 1, 3, 1,
	3, 6, 4, 0, 5, 5, 5, 1, 2, 4,
	5, 1, 1, 1, 1, 3, 3, 2, 2, 1,
	2, 2, 2, 2, 1, 2, 1, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 2, 1, 3, 7, 4, 1, 3, 4, 6,
	4, 8, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -424, -169, -175, -176, -177,
	-178, -179, -180, -181, -182, -183, -184, -416, -417, -418,
	-419, -462, -463, -464, -465, -466, -467, -468, -469, -470,
	-471, -472, -473, -474, -475, -496, -497, -498, -499, -500,
	-501, -502, -503, -476, -477, -478, -479, -480, -481, -482,
	-483, -484, -485, -486, -487, -488, -489, -490, -491, -492,
	-493, -494, -495, -421, -422, -423, -425, -426, -427, -428,
	-429, -430, -431, -432, -433, -434, -435, -436, 266, 212,
	-171, -172, -260, 111, 26, 22, 27, 394, 93, 401,
	191, 436, 228, 407, 413, 397, 378, 290, 405, -174,
	-173, -259, 531, 63, 67, -267, 36, 518, 86, 540,
	-619, 486, 457, -619, 96, 97, 98, 99, 531, -218,
	115, -376, -339, -27, 33, 414, 261, 62, 464, 454,
	225, 276, 284, 422, 103, -404, 268, 449, 375, 194,
	438, 387, 443, 512, -525, 406, 71, 453, 451, 58,
	289, 473, 471, 40, 67, 307, 419, 480, 85, 284,
	199, 225, 236, 247, 261, 286, 71, -527, 62, 375,
	385, 387, 409, 414, 422, 443, 412, 460, 268, 406,
	103, 449, 438, 454, 464, 276, 40, 384, -371, -374,
	-373, 464, 261, 307, 103, 406, 71, 67, 419, 480,
	85, 284, 225, 236, 438, 454, 194, 268, 276, -527,
	387, 414, 422, 375, 412, 460, 85, -559, 58, 423,
	457, -560, -558, -237, 56, 217, 414, 347, 406, 488,
	-5, 4, -19, -20, 191, 192, 193, 194, 195, 196,
	197, 198, 199, 200, 22, 201, 203, 204, 205, 55,
	206, 207, 208, 210, 211, 212, 88, 70, 213, 214,
	215, 24, 216, 218, 219, 220, 221, 222, 223, 123,
	226, 227, 228, 229, 230, 141, 231, 101, 232, 233,
	234, 235, 236, 111, 237, 154, 238, 120, 121, 90,
	246, 247, 248, 249, 250, 251, 253, 254, 98, 149,
	150, 255, 89, 256, 257, 258, 259, 260, 261, 176,
	27, 262, 138, 264, 148, 265, 267, 136, 42, 268,
	270, 271, 272, 273, 274, 275, 276, 277, 279, 281,
	282, 91, 283, 153, 165, 285, 286, 287, 288, 289,
	291, 294, 295, 151, 296, 297, 298, 28, 299, 300,
	301, 302, 303, 304, 305, 306, 307, 308, 309, 310,
	312, 313, 314, 96, 315, 317, 318, 145, 503, 319,
	320, 321, 322, 92, 324, 327, 328, 329, 332, 333,
	334, 335, 336, 337, 105, 85, 338, 99, 340, 341,
	342, 343, 344, 345, 346, 131, 348, 349, 350, 351,
	352, 353, 354, 357, 110, 358, 359, 32, 139, 122,
	504, 505, 502, 144, 62, 506, 507, 124, 501, 508,
	102, 364, 365, 366, 367, 368, 369, 370, 129, 371,
	128, 373, 374, 375, 377, 378, 379, 380, 382, 383,
	384, 385, 386, 112, 387, 152, 143, 388, 389, 390,
	391, 84, 132, 393, 394, 395, 396, 397, 398, 399,
	34, 400, 401, 402, 35, 403, 404, 405, 407, 408,
	409, 410, 127, 412, 413, 146, 415, 416, 87, 417,
	418, 419, 420, 421, 422, 93, 425, 427, 428, 429,
	430, 431, 107, 433, 434, 435, 436, 437, 438, 113,
	114, 439, 440, 441, 147, 442, 443, 445, 446, 104,
	448, 449, 108, 451, 452, 453, 454, 455, 458, 460,
	462, 463, 464, 465, 466, 467, 468, 142, 469, 50,
	472, 473, 474, 97, 475, 476, 477, 478, 155, 183,
	479, 480, 481, 482, 483, 485, 168, 486, 140, 487,
	498, 499, 57, 37, 173, 169, 189, 179, 178, 224,
	188, 187, 29, 278, 175, 292, 293, 500, 186, 171,
	185, 166, 160, 162, 163, 159, 161, 156, 164, 158,
	126, 157, 325, 339, 181, 182, 355, 356, 360, 170,
	361, 362, 376, 177, 174, 411, 426, 172, 444, 184,
	459, 461, 86, 180, 489, 490, 491, 492, 493, 133,
	494, 495, 496, 497, 125, -562, -561, 56, 457, 423,
	-237, 21, 217, 58, 347, 406, 414, 488, -619, 457,
	-619, 379, -619, 379, -5, 423, 457, 56, 413, -5,
	457, -447, -448, 21, -452, 63, 392, 26, 22, -5,
	-447, 290, -448, -5, -160, -121, 470, 316, 269, 509,
	-173, -174, -172, -171, -172, -259, -251, -252, 21, 41,
	-400, -398, -401, -5, 66, 541, -261, 84, -263, -7,
	-5, -261, 531, -3, -438, 30, -443, -442, -602, 318,
	389, 252, 31, 73, -402, -400, 64, 73, -170, -169,
	-398, 67, 480, 84, 419, 307, 286, 385, 460, 117,
	199, 458, -526, 463, 34, -18, -5, 28, -15, -5,
	-146, 221, 279, -149, -5, 11, -150, 534, 535, 536,
	537, 538, 539, 525, 526, 527, 18, 19, 20, -15,
	87, -15, 28, -7, 28, 246, 67, -7, 28, 336,
	-11, -453, -9, 241, 245, 424, 4, -19, -20, -21,
	209, 115, 225, 25, 81, 242, 116, 79, 44, 76,
	52, 53, 75, 77, 46, 82, 54, 80, 363, 78,
	48, 450, 118, 85, 460, -7, -7, 340, -362, 28,
	-15, -7, -7, 531, 236, -11, -11, 453, 451, 453,
	451, -400, 28, 21, -398, 28, 21, -398, 28, -398,
	28, 480, 67, 246, -409, -565, -95, -5, 4, -19,
	-21, -15, -15, -7, -15, -408, -565, -21, -5, -11,
	-453, 321, 221, 279, -7, 28, -408, -7, -408, -7,
	-7, -7, -7, -7, 460, -11, -453, 21, -11, 336,
	-453, 21, -7, -15, 28, 87, -15, -7, 383, 28,
	-17, -15, 28, -13, -7, -7, 28, -234, 28, -99,
	-100, -102, -103, -109, -105, -108, -95, 186, 171, 172,
	173, 174, 175, 176, 187, 188, 170, 189, -110, -111,
	-106, -107, 184, 56, 4, -19, 169, -96, 178, 179,
	180, 181, 182, -234, 28, 25, 336, -365, 28, -453,
	-365, 28, -365, 28, 480, 246, 67, 87, 340, 460,
	321, 480, -559, 423, -559, 219, 209, -442, 431, 64,
	61, 527, 533, 57, -94, 7, -94, -603, -94, 40,
	-236, -9, -94, 506, 57, 318, 209, -438, -443, -438,
	-94, -438, 61, -94, -5, -94, 74, 61, 541, 383,
	531, -225, 531, -225, -225, 104, -225, 74, 506, 64,
	506, -138, -47, -140, 130, -48, -49, -142, 68, 280,
	69, -143, -45, 21, 41, -45, -45, 70, -160, -121,
	532, 532, -239, -238, -241, -56, 536, -58, 534, 535,
	-145, 31, 516, -120, 471, 40, -60, -59, 13, 531,
	-63, -61, -172, 29, 134, -69, -70, 293, 11, 62,
	411, -5, -92, 6, -94, 49, 43, 47, 9, 10,
	-565, -608, -101, 38, -122, -297, -62, 12, -103, -609,
	-610, -108, -611, 185, 161, 162, 225, 240, 243, 244,
	330, 331, 241, 245, 424, 447, 103, 239, 242, 512,
	278, 356, 362, 376, 444, 459, 461, 360, 224, 292,
	325, 490, 491, 493, 494, 492, 495, 496, 159, 160,
	166, 164, 158, 339, 156, 163, 157, 497, 173, 169,
	189, 179, 178, 188, 187, 175, 186, 171, 181, 182,
	170, 174, 172, 56, 184, 180, -110, -111, -106, -107,
	-238, 74, 536, -87, -90, 533, 529, -398, 531, 531,
	541, -261, -24, 531, -119, -56, 218, 354, 541, -602,
	327, 66, 487, 252, -399, -398, 93, -5, 23, -402,
	-402, 532, -225, -398, 28, -398, 480, -398, 28, -28,
	25, -565, -565, -7, 460, -565, 130, -527, -376, 473,
	209, -406, 31, -554, 23, -113, 533, -394, 531, -15,
	-15, 533, -394, 23, 368, 257, 452, 231, -394, 64,
	31, -29, 36, 518, 31, 140, -398, 28, -514, 464,
	31, 130, 28, -29, 480, -7, -523, 365, 74, -7,
	-24, 31, -393, 130, 36, 232, -99, -15, -29, -29,
	-364, -367, 398, -366, 207, 256, 196, 22, 27, 477,
	93, 223, 264, 258, 309, 354, 122, 31, 365, 401,
	400, 153, -31, 507, 29, 45, -364, -368, 398, 207,
	29, 45, -364, 398, -387, -390, 354, 23, 213, 90,
	305, 335, 338, 342, 364, 419, 436, 402, 473, 29,
	-364, 398, 29, -398, 28, 21, -400, 28, 140, 398,
	-39, 531, -87, 398, 398, 398, 398, -370, 27, 93,
	196, 477, 398, -411, -577, 215, 404, 441, 300, 434,
	482, 277, 418, 324, 31, 237, 127, 445, -564, 366,
	93, -422, -39, -87, 398, -461, 196, 27, -7, -15,
	-15, 74, 29, 398, -411, 398, 93, 196, 27, 398,
	-411, 398, 398, -515, -31, 479, 398, 93, 232, 394,
	196, 27, 264, 258, 430, 74, 74, -7, 398, -29,
	-437, 45, -437, 398, 130, -29, -437, -437, 398, 93,
	401, 398, 93, 29, 368, 257, 452, 231, 398, 196,
	27, 93, -413, -414, 22, 97, -461, -446, 29, 541,
	-397, 24, 35, 29, 541, -397, 74, 29, 541, -397,
	29, -114, -113, 531, -104, 531, 177, -114, -114, -114,
	531, -117, 518, 519, 531, -117, -118, 183, 531, -118,
	-118, 178, 179, -118, -397, 29, -17, 28, 130, 28,
	541, 29, 29, 29, 140, 368, 257, 452, 231, -28,
	219, 23, -236, 40, -94, 120, -240, 40, -232, -235,
	-231, 49, 43, 74, -236, 6, 534, 535, -93, -92,
	-240, 40, -5, -601, -94, 4, -231, 40, 58, 49,
	43, 74, 504, -605, 260, 234, 327, 413, -5, -460,
	-16, 67, 419, 284, 286, 385, 409, 247, 261, 321,
	322, 367, 414, 449, 464, 21, -398, -365, -452, 531,
	-14, -5, -14, -460, 130, -365, 130, -46, -47, -139,
	-138, -142, 130, 389, 97, 354, 427, 503, -49, -48,
	-50, -56, 21, -55, 91, 349, -51, -52, -56, -58,
	534, 535, -141, 122, -173, -173, -173, -161, -164, -56,
	-138, -47, -254, 73, 541, 14, 39, 55, 534, 535,
	536, 537, 538, 539, 525, 526, 527, 18, 19, 20,
	-145, 30, 33, 46, 516, 44, 48, 52, 53, 54,
	37, 45, -148, 23, -8, 11, 62, -149, 4, -23,
	191, 192, 193, 194, 195, 196, 197, 198, 199, 21,
	200, 22, 201, 202, 119, 510, 94, 203, 204, 205,
	60, 206, 207, 208, 209, 210, 211, 212, 173, 115,
	169, 189, 511, 88, 70, 213, 214, 215, 24, 216,
	38, 512, 217, 218, 219, 513, 220, 221, 222, 223,
	224, 225, 514, 123, 226, 227, 228, 229, 230, 25,
	141, 231, 101, 232, 117, 233, 234, 235, 236, 111,
	237, 81, 154, 238, 120, 239, 240, 241, 242, 243,
	244, 245, 121, 90, 246, 247, 249, 188, 187, 250,
	40, 251, 252, 253, 254, 98, 149, 150, 255, 89,
	95, 256, 257, 258, 259, 41, 109, 260, 261, 176,
	27, 262, 263, 138, 264, 148, 265, 266, 267, 136,
	42, 268, 270, 271, 272, 273, 29, 274, 275, 276,
	277, 278, 43, 279, 282, 91, 175, 283, 153, 284,
	165, 285, 116, 79, 286, 287, 288, 289, 291, 292,
	293, 294, 295, 151, 296, 298, 28, 299, 300, 301,
	302, 303, 304, 305, 306, 307, 308, 309, 310, 311,
	312, 76, 500, 313, 314, 96, 315, 186, 171, 185,
	317, 318, 75, 166, 160, 162, 163, 159, 161, 156,
	164, 158, 126, 157, 145, 503, 319, 320, 321, 322,
	92, 323, 326, 324, 325, 77, 327, 328, 329, 58,
	330, 331, 332, 333, 334, 335, 336, 337, 105, 85,
	338, 99, 339, 340, 342, 343, 345, 346, 347, 181,
	82, 182, 131, 348, 349, 350, 351, 352, 353, 354,
	355, 356, 357, 31, 110, 358, 359, 47, 360, 32,
	170, 139, 122, 504, 505, 502, 144, 66, 506, 507,
	124, 501, 361, 80, 362, 102, 364, 365, 366, 367,
	368, 369, 370, 129, 371, 128, 372, 373, 374, 375,
	376, 377, 378, 379, 380, 381, 382, 383, 384, 385,
	386, 112, 387, 152, 143, 388, 389, 174, 390, 391,
	84, 132, 392, 393, 394, 395, 396, 397, 398, 399,
	34, 400, 401, 402, 35, 403, 404, 405, 78, 406,
	407, 408, 409, 410, 411, 127, 412, 413, 146, 414,
	415, 416, 87, 418, 63, 419, 420, 421, 422, 423,
	424, 93, 426, 425, 427, 428, 429, 430, 172, 431,
	432, 107, 433, 434, 435, 436, 437, 438, 113, 114,
	439, 440, 441, 147, 442, 443, 444, 445, 59, 446,
	104, 447, 67, 448, 450, 449, 108, 451, 452, 453,
	454, 106, 455, 56, 184, 456, 457, 458, 459, 460,
	461, 49, 462, 463, 464, 465, 466, 467, 468, 142,
	469, 471, 50, 472, 473, 474, 97, 103, 83, 475,
	476, 477, 478, 155, 86, 180, 190, 118, 479, 480,
	481, 482, 51, 483, 486, 140, 487, 488, 489, 490,
	491, 492, 493, 133, 494, 495, 496, 497, 125, 499,
	57, -56, -56, -56, -56, -56, 363, -340, 32, -88,
	-56, -119, -172, 86, -87, -172, -172, -68, 529, 531,
	531, 531, -87, -94, 531, -94, -94, 531, -64, -56,
	-126, 485, -123, 281, 531, 531, 130, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	-254, 531, -90, -97, 536, -6, 4, -19, -20, -21,
	-22, 21, 202, 119, 30, 510, 134, 23, 94, 60,
	511, 38, 512, 513, 39, 514, 117, 26, 239, 240,
	241, 243, 244, 245, 40, 252, 95, 41, 109, 263,
	266, 269, 43, 280, 130, 284, 64, 290, 71, 72,
	45, 311, 316, 73, 323, 326, 68, 330, 331, 31,
	47, 69, 74, 66, 33, 509, 372, 381, 392, 100,
	63, 424, 432, 59, 447, 67, 106, 61, 456, 49,
	470, 471, 103, 83, 190, 51, 65, 484, 36, -56,
	-91, -398, -119, -263, 23, -13, 541, 532, 39, 55,
	30, 33, 46, 44, 48, 52, 37, 45, 62, 218,
	-602, -604, 389, 399, 421, -185, -169, 102, 531, 40,
	23, -187, -193, -191, 531, -5, -5, -262, 83, 83,
	61, -210, 64, 61, 531, 122, 370, 31, -225, -398,
	-506, -387, 354, 31, -18, 28, -5, -566, 531, -566,
	-584, 211, 198, 315, -7, -549, -551, 531, -99, 321,
	480, 84, -453, -407, -180, -181, -418, -419, 26, 29,
	-99, 533, -97, -395, -396, -6, -525, 83, -146, 531,
	267, 388, -15, -15, -15, -15, -15, 29, -507, 29,
	-7, 531, 370, 31, -516, -515, -94, 29, -517, -453,
	103, 31, -444, -405, 28, -398, 74, 332, -453, -398,
	464, 74, 29, 21, -537, -542, 67, 448, -5, -401,
	242, -398, -394, -94, 23, 130, -444, -444, 541, 61,
	-615, 117, 514, 370, 370, -319, 28, 514, -320, -5,
	117, -336, 513, 471, 381, 284, 270, -615, 117, -615,
	117, 117, 168, 335, 473, 194, 449, -352, 531, 74,
	460, 201, 400, 412, 411, 460, 412, 411, -398, 309,
	153, -15, 122, 61, -352, 298, 411, 531, -400, 449,
	61, 370, -398, 449, 61, -390, 90, 338, 342, -100,
	-231, -614, 70, -231, -231, 70, 346, -29, -29, -398,
	61, -615, -398, -364, 398, 29, 45, -364, 398, 29,
	-7, 61, -40, 532, -569, -571, -98, -112, 45, 361,
	500, 190, -95, -99, 426, 61, 61, 61, 61, 117,
	40, 31, 117, 40, 31, -555, 117, -556, 513, 31,
	117, 61, -620, -577, 35, 74, 47, 418, 254, 317,
	324, -231, -231, -15, -5, -560, 423, 457, 61, 103,
	398, 83, 83, -398, -7, 61, -620, 61, -394, -537,
	-537, -537, 61, -620, 61, 61, -31, -94, 47, 61,
	-394, 387, -94, 387, 387, 387, -394, -398, -398, 398,
	-522, 264, 258, 61, -445, -563, 93, -422, 247, -563,
	61, -517, -445, -563, -563, 61, -352, -352, 61, 438,
	-15, -15, -15, -15, -15, 61, 208, 155, 155, 208,
	155, 208, 531, 541, 208, -508, -372, -371, 199, 512,
	261, 286, 62, 385, 409, 458, 464, -374, 247, 406,
	443, 449, 307, -458, -441, 290, 405, 45, 130, -17,
	-15, -13, -7, -15, -7, -99, -234, -114, -119, -92,
	-92, 56, 56, -92, 531, -92, -118, -118, -234, -397,
	29, -517, 29, -453, -365, -365, -365, -398, 457, 541,
	-92, 6, -92, 6, -5, 61, 541, -16, -16, 246,
	422, -412, -408, -412, -412, -13, -17, -13, 139, -42,
	-37, -5, -13, -13, -17, 448, 420, 287, 386, 410,
	-455, 36, 291, -14, 541, 532, 532, 64, -447, -448,
	-455, -448, 66, 503, 427, 541, -52, -54, -58, 534,
	535, 411, 127, 531, -54, 411, 127, -53, -92, 6,
	-53, -144, 359, 430, -16, 541, 83, -153, 94, 95,
	-46, -139, -242, 64, -392, 453, 451, 58, 289, 473,
	67, -398, -241, -99, -15, 56, 58, -56, -56, -56,
	-56, -56, -56, -56, -56, -56, -56, -56, -56, -56,
	-56, -56, -56, 46, 44, 48, 37, 45, -56, 61,
	47, 31, 49, 43, 50, 41, 260, 357, -157, -156,
	350, 351, 352, 353, 166, -152, 59, 60, -151, -172,
	531, -155, 510, 432, 21, -6, 531, -120, 411, 531,
	-172, 41, 31, -90, 532, 541, -119, -71, 530, -68,
	-119, -146, -119, 532, -73, 532, 536, 190, 21, 41,
	-86, -56, -98, -95, -115, 498, 344, 248, 297, 341,
	-116, 417, -92, -67, -66, 51, -123, 71, -132, 508,
	531, -298, -58, -56, -293, -56, 531, -92, -92, -92,
	-92, -56, -78, -12, 4, 498, 344, 248, 297, 341,
	417, -94, -56, -79, -74, -56, -73, -80, -57, -58,
	534, 535, -145, 411, -76, -74, -56, -56, 511, 326,
	456, -77, -56, 64, -119, -56, -119, -119, -119, -119,
	346, -81, -192, -56, -605, -58, 346, -56, -73, -299,
	-303, -298, 100, -56, -296, -171, -303, -293, -172, -293,
	-56, -293, 532, -293, -293, -293, -605, -242, -119, 530,
	542, 532, 532, -264, 85, 31, 532, -56, 468, 229,
	389, -194, 74, -207, 103, 104, -186, -190, -5, 86,
	-5, -242, 541, 527, -188, -191, -88, -195, 65, -243,
	-244, -400, -172, 323, -255, 531, -268, -278, -288, -269,
	127, 125, 126, -5, -122, -62, -297, -565, 166, -244,
	-211, 112, -211, -314, -315, -318, -319, -321, -320, 46,
	-15, 122, 29, -363, 36, 531, 29, 74, 31, 404,
	-573, -574, -576, 23, 321, 458, 484, -577, -567, 532,
	-568, -569, -573, -586, -585, 96, 98, 97, 462, 122,
	198, -394, 536, -550, 509, -552, -557, -553, -569, 4,
	321, -7, -398, 480, -406, -376, -27, -18, -5, -333,
	-97, 532, 541, 527, 130, -7, -271, -270, -272, -5,
	531, -394, -394, -394, -394, -394, -15, -509, 414, 479,
	64, 24, -7, -511, -512, -513, 295, 354, 478, -314,
	122, 29, 284, -7, 422, 29, -439, -440, 446, 197,
	406, 45, 371, 265, 469, 309, 4, 232, 476, 103,
	23, 31, -225, -6, 7, -524, 23, -534, 307, 67,
	-536, -541, -5, -269, 531, -15, 448, -393, 541, -400,
	45, -87, -225, -225, 387, -99, -94, -366, -7, -7,
	-7, -398, -398, 31, -319, 28, -99, -7, 531, -340,
	-358, 83, 503, 503, -359, 83, -5, -92, -7, 28,
	-5, 28, -7, -7, 505, 223, 340, -7, -353, -354,
	-6, -7, -7, 21, 103, 460, 412, 460, 412, -7,
	327, -7, 21, 103, -7, 327, -398, 411, -453, -38,
	110, 79, 40, 83, 327, -32, -35, -384, 93, 196,
	27, -10, -6, -364, -367, 398, -7, -7, -398, -364,
	398, -7, -7, -231, -15, -15, -231, -231, -364, 398,
	-387, -7, -7, -364, 398, 61, -615, -398, 449, 61,
	-615, -400, 398, -511, -512, -7, 532, 541, -98, -112,
	-571, -112, -95, 361, -113, -95, -7, -7, -7, -7,
	-7, 47, -7, 28, -56, 47, -7, 531, 47, -7,
	-7, 47, 74, 254, 317, -11, -365, 61, -7, -7,
	398, -531, 61, 74, -7, -7, -7, -7, -7, -7,
	-13, -393, -13, -13, 398, 398, 61, 400, 201, -11,
	-440, -559, -7, -11, 422, -7, -7, -34, -93, 40,
	534, 535, 93, 398, 398, 398, 398, -7, -7, -94,
	-26, 28, -272, -94, 28, -5, -579, -578, -6, -414,
	196, 27, -5, -510, 61, -7, -15, -409, 531, -99,
	-408, -410, 221, 279, -146, -408, -408, 130, -99, -447,
	-447, 290, 414, 406, 103, -397, -397, -397, 74, -397,
	532, 532, 532, 57, 57, 532, -119, 532, -397, -17,
	422, 130, -403, 36, -442, -232, -449, -454, -453, 71,
	-398, 140, -13, 541, -43, -231, 541, 533, 45, 45,
	45, 45, 45, -450, -459, -6, 70, 532, -5, -449,
	74, -397, 64, 97, -51, -54, 66, 36, -92, 6,
	531, -119, 334, -164, -147, -149, 62, -154, 517, -245,
	65, -243, -612, 67, -612, 453, 451, 453, 451, -612,
	-398, 57, 42, -56, -56, 61, -152, 59, -151, 42,
	-56, 47, 49, 43, 50, 41, 260, 357, -157, -156,
	64, 357, -158, 36, 168, 155, 134, 139, 146, -57,
	-57, -119, -172, 531, -146, 531, -119, 41, -88, -56,
	530, 530, 541, 532, 532, 532, -121, 541, -160, 532,
	-86, -73, -73, 16, 17, 61, 61, 61, 61, 531,
	532, -65, -66, 263, -56, -132, 531, -131, -5, 531,
	65, -300, 47, 192, 155, 542, -302, 509, -312, -311,
	515, -56, 532, 532, 532, 532, 23, 532, 64, 532,
	541, 532, 532, 372, 541, 532, 14, 534, 535, 536,
	537, 538, 539, 525, 526, 527, 18, 19, 20, -145,
	52, 45, 62, -57, -57, -57, 532, 532, 48, 64,
	130, 23, -77, -77, -77, 532, 64, -119, 541, 532,
	532, 532, 532, -6, 532, 541, 23, -56, -284, 129,
	-6, 541, 532, -300, 541, 532, -99, -301, 541, 47,
	192, -312, 532, -158, 532, -303, 541, 541, 541, -56,
	-245, 532, -91, -56, 531, 85, -196, 100, 101, 155,
	532, 541, -88, -195, -193, -56, 532, 541, -196, -56,
	120, 541, 81, -256, 75, 82, 79, 77, 78, 76,
	-248, -247, 23, -5, -248, -172, -268, -278, -288, -172,
	-255, -244, -250, -247, 23, -5, -248, -248, -277, 518,
	64, 531, 531, -87, 531, 74, -217, -94, 113, 114,
	-217, 532, 541, -398, -316, 531, -398, -398, 23, -352,
	-14, -398, -400, 29, -572, 67, -112, -582, -420, 212,
	403, -576, -581, -94, -236, -575, 130, 532, 541, 40,
	527, -582, 74, 33, 122, -586, 532, 532, 509, 541,
	70, 532, 541, 527, -7, 295, -225, -398, 209, -406,
	-334, 117, -335, -337, 39, 31, 47, 471, 381, 513,
	40, 392, 288, 252, 311, -396, -375, -112, -22, -147,
	-231, -94, 355, 62, 534, 535, 464, 532, 541, -99,
	-504, -505, -94, -394, 64, -7, -236, -236, -29, -382,
	507, -513, -518, -7, 295, 478, -518, 532, -398, -398,
	246, -514, -7, 130, -92, -365, -365, 406, 71, -94,
	47, 371, 371, 68, 474, -365, -169, 29, -377, 83,
	273, 51, -363, -528, 130, 4, 295, 64, 541, -56,
	-24, -393, -542, -225, 414, -225, -246, 65, -246, -13,
	532, 61, 61, 61, -324, 130, 40, -28, 282, 29,
	31, -381, -380, 439, -336, 270, -56, 531, -331, 307,
	531, -358, 531, 531, -7, -370, 27, 93, 401, 196,
	-389, -233, -31, -391, 402, 93, -331, 29, -397, 29,
	-397, -36, -5, 40, 532, 541, 527, 533, -7, -7,
	-7, -7, 418, 418, 327, 307, 418, 532, 541, -384,
	-384, -10, -33, -94, 61, -615, 117, 93, 364, 61,
	93, 364, 61, 61, 61, -615, -7, -7, -364, 398,
	-7, -7, -7, -364, 398, 61, -31, -569, -112, -112,
	538, -113, 61, -397, 29, -556, -56, -331, 313, 47,
	-7, 398, 398, 196, 27, 61, -532, 83, -365, -398,
	-393, -393, -393, 61, 61, -7, -7, 438, 61, 61,
	61, 61, 61, 61, -94, 31, -397, 29, -397, 541,
	532, 527, -233, 93, -236, -99, -15, -15, -89, 531,
	-99, 74, 74, 506, -13, -365, -365, -15, -117, -117,
	532, -397, -7, -517, 246, 354, -456, 541, 36, -453,
	-13, -408, 541, -37, -5, 414, 414, 414, 414, 414,
	-455, 541, -457, 506, 49, 43, -453, -455, -460, -365,
	66, 36, 455, -119, 532, 541, -154, 531, 91, 92,
	-44, 71, -56, -398, -398, -612, -612, -612, -612, -398,
	-56, -56, 42, 42, -56, -57, -57, -56, 42, 64,
	357, -158, -56, 471, 471, 30, 30, 532, -56, 532,
	-119, 532, 541, 532, -68, 532, 190, -86, -121, -121,
	-121, -56, -56, 344, 297, 341, -116, 341, -116, -116,
	-92, -94, 266, -56, 106, -160, -133, -5, -56, -158,
	74, 74, -293, -293, -301, 70, 166, 532, -99, -56,
	-157, -56, -99, -57, -57, -57, -57, -57, -57, -57,
	-57, -57, -57, -57, -57, -57, 41, 31, 260, -57,
	-56, -56, -56, -99, 532, 532, 532, -119, -56, 532,
	541, -192, -6, -82, 380, 442, 532, -58, -285, 70,
	532, 541, -84, 479, -158, -298, -312, -303, -293, 74,
	74, -303, 532, 532, -56, -56, -56, 23, -44, 530,
	-170, -238, -201, 531, 74, -169, -169, 102, -190, -196,
	527, -191, 122, -244, 75, 75, -244, -256, 75, -257,
	80, -257, -257, -124, 450, -5, 531, -248, -250, -248,
	-248, 532, -5, 531, 531, 124, 531, -58, 133, -293,
	-73, -56, -29, -219, -613, 83, -347, 310, -318, -329,
	-348, -349, 370, -317, -322, -323, -320, -5, -316, 531,
	122, 370, -169, 532, -506, -359, -7, -573, 531, 206,
	-56, 541, 541, 464, -568, -56, -56, -398, -585, -14,
	74, 70, -557, -550, -553, 4, -375, 531, -518, -363,
	531, -453, -7, -15, 252, 47, -340, 503, 531, -57,
	-398, -386, 201, 70, 253, 299, -99, -272, -283, 39,
	532, 541, -15, -507, 531, -113, -347, -316, 531, 370,
	140, -516, -382, -517, -365, -365, -94, -94, -93, -94,
	-403, -405, -363, -7, -616, 286, 385, -519, -521, -5,
	-530, 61, -529, 21, 63, 96, 97, 98, -518, -243,
	-541, 532, 74, -246, -5, 242, -246, 531, -393, 36,
	168, -94, -7, -7, 86, -319, 29, -379, -378, 230,
	-5, 40, 532, -14, -332, 31, 252, 311, 354, -7,
	-14, -331, -14, -327, -326, -205, -5, -269, 531, 31,
	275, 298, 246, -390, 288, 31, 275, 438, -352, -380,
	-378, -352, 288, -391, 93, 464, -29, 438, -5, -7,
	-354, -375, -6, 418, -7, -35, -7, -7, -7, 449,
	70, -7, 449, 70, -7, -7, -7, -7, 61, 61,
	-615, 93, 364, 61, 61, -615, -7, 464, 538, -7,
	-7, 532, 313, 61, 61, -538, -543, 62, 286, 439,
	-539, -544, 62, 286, -7, -533, 36, 531, 398, -7,
	-7, -31, -34, -7, -7, -7, -7, -7, -94, 211,
	198, 29, -5, -578, 355, -580, -112, -22, -147, -231,
	-94, 464, 23, 83, 83, -99, 355, 321, -451, 448,
	287, 410, 420, 465, 415, -451, 130, -397, 422, 246,
	-455, -454, 290, -231, -13, -13, -13, -13, -13, -459,
	-397, 64, -455, 455, 532, -56, -146, -163, 72, 70,
	-398, -398, -398, -398, -56, -56, 42, 30, 30, -56,
	-56, 319, 319, -56, -56, 532, 532, -56, -94, -86,
	532, 532, 532, 532, -56, 532, -129, 370, 532, -303,
	47, 47, -303, -161, 148, 532, 532, 64, 64, 41,
	260, 42, 130, 64, 532, 532, -72, -119, 489, 532,
	483, 483, -285, 70, -58, 132, 155, -56, -85, 541,
	-56, 354, -303, 532, 47, 47, 532, -304, 129, -304,
	-304, -100, -163, 532, 109, -227, -205, 117, -207, -56,
	-216, -7, -244, -244, -258, 83, 74, 75, -244, -565,
	531, -13, -247, 531, -270, -270, -5, -273, -274, -269,
	-284, 531, 541, -121, -189, -199, -208, -209, 51, -221,
	-222, 531, -29, 150, -348, 531, 304, 271, -377, 70,
	532, 541, -333, 36, -324, -314, -15, 122, -599, 36,
	-363, 531, 74, -582, -276, -570, -98, -95, -600, -94,
	130, -99, -591, 393, -398, -550, 532, -540, 64, 61,
	-546, 312, 23, -14, -406, -335, 31, -393, -393, -56,
	-225, 23, 40, 83, -15, -94, -383, -384, 422, -324,
	-314, 122, -7, 284, 422, 23, -356, 449, -565, 273,
	30, 45, -532, -365, -536, -56, 286, 500, 286, 64,
	36, 45, 64, -319, -382, -5, 40, -331, 532, 252,
	476, 299, 253, 309, 532, 532, 532, 541, 36, -206,
	-198, 39, -206, -56, 47, 28, 28, -386, 47, 23,
	-34, -386, -99, -231, -34, -397, -397, 527, 61, 61,
	-7, -365, -7, -365, 61, -7, -7, -7, 449, 70,
	-7, -7, -7, 464, -397, -331, -7, -7, 541, -92,
	-92, -99, 541, -92, -92, 513, -56, 61, -397, -94,
	-94, -397, -99, -99, -7, -7, 532, 541, 541, -7,
	61, 64, -447, -7, 506, -449, -397, 532, 532, -127,
	484, -56, -45, -56, -56, -56, 532, -121, -121, 70,
	532, 532, -7, -56, -57, 64, -56, -56, -56, 532,
	541, 532, 531, -285, 532, 532, 435, 155, 532, -303,
	-294, -295, -293, -305, -306, 40, -307, 136, 47, 49,
	43, 50, 138, -303, -83, 306, 354, -127, -265, 87,
	97, 110, 532, 541, -7, 155, -258, 531, -56, -244,
	531, -13, 532, -270, 532, 532, 532, 541, -275, 23,
	123, -286, -287, -57, 40, -56, 532, -196, -199, -200,
	30, -200, 105, 31, -220, 115, 116, 149, 47, 154,
	151, 152, 42, 153, 148, -223, -228, -6, -221, -94,
	-377, -16, -330, 227, 230, 233, 251, 298, 288, 308,
	438, 439, 21, -330, -41, 36, 168, -5, -322, 507,
	-348, 532, -316, -398, 513, 216, 58, 23, -227, -400,
	541, 532, -112, 266, -583, -4, -420, 464, -587, 130,
	-592, -594, -589, 348, 502, -598, 64, 532, 532, 433,
	433, -547, -548, 478, 354, -518, -169, 532, -357, 83,
	-357, 532, -341, 337, 298, 531, -7, 532, 541, -7,
	422, 532, -398, -382, 246, -7, -169, -7, 531, -616,
	-521, 531, -533, 64, 532, -408, -535, 23, -535, -15,
	531, 531, 531, -333, -342, 303, -342, 392, -342, -326,
	-146, 62, -362, -15, -15, 532, 29, 29, 531, 23,
	-283, -375, -7, -7, -369, 359, 93, -369, 93, -7,
	61, -7, -365, 61, -543, -146, -410, -408, 531, -544,
	531, 531, 531, 532, -7, -283, 532, -99, 355, -99,
	-449, -449, 74, -455, -128, -130, -5, -159, -162, -56,
	-165, -167, -166, -168, 531, 238, 408, 293, 532, -134,
	388, 127, 294, -119, 130, -57, -119, -81, 499, 354,
	-309, 168, 36, 541, 23, 532, 74, -56, 134, 139,
	-308, -306, 532, 306, -266, 90, 89, 88, 93, -245,
	-205, -169, -13, -119, 532, 532, -277, -274, 531, -279,
	-280, -5, 541, 532, 23, -57, -292, 23, 106, -56,
	106, 105, -554, -554, -554, -554, 152, 31, 47, -94,
	532, 541, -229, -235, -231, 536, 40, 531, -245, -41,
	532, -355, 74, -352, 505, 531, -333, -377, -347, -348,
	-316, 506, 513, 513, -169, 532, -359, -570, -573, 540,
	-99, -595, 51, -617, 262, -594, -590, 67, 411, -331,
	-398, 36, 36, -518, 478, -599, -363, 307, -338, 354,
	-346, -343, -344, 74, 79, 369, 429, -388, 531, -56,
	-545, 279, -384, -382, -7, -347, -316, 140, -382, -403,
	532, -565, -520, 7, -243, -535, 301, 205, -328, -325,
	-9, -119, -119, -393, 531, -393, -398, -393, 531, -153,
	-352, -206, -56, 298, -30, 83, 449, 449, -7, -369,
	93, -7, -606, 130, -606, -607, -99, -607, -607, -56,
	-397, 532, 532, 532, -456, -397, -451, -397, 541, 23,
	541, 532, 531, 531, 425, 532, -135, -136, 37, 467,
	120, -56, -135, -135, -56, 532, 532, 155, -310, 145,
	144, 140, 134, 140, 134, 141, 142, -295, -6, 136,
	532, 74, -14, 91, 91, -187, 532, 532, -270, 532,
	541, -99, 130, -287, 541, -6, -304, -5, -202, -203,
	109, 97, 98, -204, 109, 96, 70, -94, -94, -94,
	-94, -14, 536, 47, -14, 536, -228, -224, -230, -235,
	-355, -356, 228, -350, -351, -5, -269, 531, -41, -348,
	-377, -324, 506, 506, -599, -361, 303, 531, -582, 273,
	531, -588, 411, 437, -554, 130, 286, 286, 23, 449,
	309, -344, 74, -343, 74, 97, 98, -387, 532, 23,
	-15, -382, 422, -324, -7, 531, 532, 541, 532, 541,
	-92, 532, 532, -357, -14, -357, -225, -357, -146, -154,
	-153, 532, -388, -56, -7, -7, 449, -385, 391, 87,
	509, -385, 532, 541, 532, 532, 532, 64, -130, -131,
	-162, -119, -119, 531, -137, 270, -136, 377, 283, 411,
	377, 283, -137, -137, -308, 143, 143, 140, 140, 134,
	140, 134, 140, 138, 136, 93, 70, 70, -245, -249,
	23, -125, 399, 532, -280, -281, -282, 4, 40, 31,
	47, 128, 124, -58, 123, 110, 93, 110, -197, 102,
	531, 40, 86, 107, 108, -14, 536, 532, 541, -356,
	27, 98, 380, 532, 541, -198, -198, -56, -355, -377,
	-41, -348, -340, 531, -227, -616, -56, -597, -5, 262,
	-408, -408, -169, -7, -345, 354, 35, 24, 93, -345,
	532, 440, -538, -7, 422, -382, 532, 7, -325, 61,
	-331, 532, -331, -341, -245, 532, -154, -369, -369, -7,
	70, -408, -99, -449, 532, 532, -159, 120, 71, 455,
	354, 30, 532, 74, 74, 140, 140, -306, -5, -14,
	-14, -5, 531, -282, -57, -57, 47, -57, -284, 531,
	-187, -207, -186, 86, 531, -230, 127, 127, -351, -362,
	-362, 532, -356, -41, -355, -377, -363, -360, -205, 532,
	-565, 532, 411, 541, 541, -599, 195, 47, 40, -382,
	-7, 531, -346, -331, -369, -15, -397, 532, 411, 501,
	-136, 146, 146, 74, 61, 83, 93, 93, -56, 123,
	-289, -290, -5, 131, 155, 532, -119, -198, -355, -356,
	-41, -356, 532, 541, -361, 531, -595, 61, 64, -225,
	-225, -382, -119, -331, 147, 147, 136, -59, -565, 166,
	-5, -5, -5, 532, -279, 532, 541, 130, -99, -313,
	128, -197, -197, 102, 532, -362, -356, -355, -245, -205,
	-340, -593, -596, -92, 6, -94, -6, 273, 433, 433,
	532, 40, 531, 532, -305, -290, 124, -291, -311, 29,
	128, 7, -207, -356, -363, 532, 541, -616, 36, 36,
	-59, -73, 532, -309, -291, -291, 7, 123, 23, 155,
	-356, -596, -565, 286, 286, 83, -121, -310, -309, -305,
	531, -7, -197, -245, 531, -408, -408, -5, 532, -308,
	-310, -289, 123, -593, -308, 532, 531, 532, -289, 532,
}

var yyDef = [...]int16{
	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 2833, 2833,
	1483, -2, 0, 1766, -2, 1829, 1829, 0, 0, 0,
	2833, 0, 2833, 2833, 0, 0, 0, 0, 0, -2,
	1474, 1570, 0, 1606, 0, 1517, 0, 0, 0, -2,
	2836, 2831, 2832, 2588, 0, 0, 0, 0, 0, 0,
	1765, 0, 0, 2732, 0, 80, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 1894, 1895, 0,
	0, -2, 2067, 2709, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1828, 0, 0,
	0, 0, 0, 2209, 0, 0, 0, 2205, 2206, 2207,
	0, 0, 2211, 2212, 2213, 0, 0, 0, 1812, 0,
	1815, 1816, 1817, 1818, 1819, 1820, 0, 2190, 278, 389,
	423, 2195, 2534, 0, 506, 162, 379, -2, 370, 456,
	2549, 97, 98, 99, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 163, 164, 165, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
	190, 191, 192, 193, 194, 195, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 207, 208, 209,
	210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
	220, 221, 222, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 279, 280,
	281, 282, 283, 284, 285, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 306, 307, 308, 309, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 323, 324, 325, 326, 327, 328, 329, 330, 331,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	352, 353, 354, 355, 356, 357, 358, 359, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 371, 372,
	373, 374, 375, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 390, 391, 392, 393, 394,
	395, 396, 397, 398, 399, 400, 401, 402, 403, 404,
	405, 406, 407, 408, 409, 410, 411, 412, 413, 414,
	415, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 427, 428, 429, 430, 431, 432, 433, 434, 435,
	436, 437, 438, 439, 440, 441, 442, 443, 444, 445,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 455,
	457, 458, 459, 460, 461, 462, 463, 464, 465, 466,
	467, 468, 469, 470, 471, 472, 473, 474, 475, 476,
	477, 478, 479, 480, 481, 482, 483, 484, 485, 486,
	487, 488, 489, 490, 491, 492, 493, 494, 495, 496,
	497, 498, 499, 500, 501, 502, 503, 504, 505, 507,
	508, 509, 510, 511, 512, 513, 514, 515, 516, 517,
	518, 519, 520, 521, 522, 2204, 2196, 506, 423, 389,
	2200, 2201, 162, 278, 296, 370, 379, 456, 2836, 2588,
	2836, 0, 2836, 0, 2821, 389, 423, 506, 377, 2823,
	0, 0, 2898, 2899, 2903, 2394, 2394, 2394, 143, 2394,
	0, 0, 2898, 2394, -2, 0, 2741, 2741, 2741, 0,
	-2, 1488, 1489, 0, 1489, 0, 1522, 0, 1605, 1607,
	1516, 1545, 1546, 112, 0, 0, 1567, 353, 1572, 115,
	107, 1568, 0, 2, 2829, 0, 2830, 2587, 2575, 0,
	0, 2581, 0, 0, 0, 1550, 0, 0, 0, 1485,
	2394, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 1829, 2731, -2, 0, -2, 247, 1835, 129,
	0, 166, 228, 1471, 0, 1457, 1458, 1459, 1460, 1461,
	1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 2415,
	0, 0, 247, 1997, 247, 0, 0, 2479, 247, 283,
	1997, 2104, 2105, 2106, 2107, 2108, 2569, 2570, 2571, 2572,
	523, 524, 525, 526, 527, 528, 529, 530, 531, 532,
	533, 534, 535, 536, 537, 538, 539, 540, 541, 542,
	543, 544, 545, 0, 0, 2631, 0, 0, 115, 247,
	81, 2596, 0, 0, 0, 1997, 1997, 1896, 1897, 1898,
	1899, 0, 247, 0, 0, 247, 0, 0, 247, 0,
	247, 0, 0, 0, 0, 0, 1337, 0, -2, -2,
	1403, 0, 0, 0, 0, 0, 0, -2, 2990, 0,
	2104, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -2, 2846, 0, 283,
	-2, 2846, 0, 0, 247, 0, 0, 0, 2885, 247,
	85, 131, 247, 85, 108, 0, 247, 85, 247, 1826,
	1395, 1396, 1397, 1398, 1399, 1400, 1409, 1412, 1413, 1414,
	1415, 1416, 1452, 209, 1409, 1409, 1409, 1422, 1423, 1424,
	1425, 1426, 1448, 1448, 1401, 1402, 1450, 1438, 1450, 1450,
	1433, 0, 1450, 85, 247, 0, 283, 2851, 247, 2102,
	2849, 247, 2853, 247, 2208, 0, 2210, 0, 1810, 1811,
	1814, 93, 2191, 389, 2192, 164, 0, 2193, 0, 0,
	0, 0, 0, 0, 2537, 1199, 2538, 2539, 2564, 2565,
	2540, 2567, 2568, 0, 2197, 0, 2199, 2817, 2818, 2819,
	2827, 2820, 0, 2828, 2822, 2826, 0, 0, 0, 2900,
	0, 2905, 0, 2906, 2907, 2908, 2909, 0, 0, 0,
	0, 2796, 1501, 1498, 0, 2793, 2794, 1502, 0, 0,
	0, 1510, 0, 2739, 2740, 0, 0, 0, -2, 0,
	1486, 1487, 1612, 1521, 1523, 1527, 1528, 1076, 0, 0,
	0, 0, 0, 0, 1966, 1143, 1166, 1167, 1230, 0,
	1170, 1171, 1172, 469, 0, 1177, 1178, 473, 1453, 316,
	502, 1220, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192,
	0, 0, 0, 1353, 1476, 1478, 1234, 1198, 1180, 1181,
	1182, 1183, 1184, -2, 483, 480, 525, 1236, 1237, 1239,
	1241, 1243, 1245, 1246, 1247, 1248, 1249, 1250, -2, 0,
	470, 494, 498, 499, 505, 508, 509, 495, 466, 472,
	489, 513, 514, 516, 518, 515, 519, 520, 482, 479,
	-2, 485, 486, 490, 484, 481, 488, 521, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 491, -2,
	-2, -2, -2, -2, -2, -2, 1427, 1428, 1429, 1430,
	1612, 0, 1547, 113, 1222, 0, 1225, 1548, 0, 0,
	0, 1569, 0, 0, 0, 1393, 2834, 0, 0, 2577,
	0, 2579, 2580, 2582, 0, 1730, 0, 1551, 0, 1752,
	0, 0, 0, 0, 247, 2394, 0, 2430, 247, 80,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 1900,
	0, 2400, 0, 0, 1834, 130, 0, 2413, 0, 2710,
	0, 0, 2414, 0, 0, 0, 0, 0, 2420, 0,
	0, 2438, 1995, 1996, 0, 0, 0, 247, 2483, 0,
	0, 0, 0, 2856, 0, 0, 0, 0, 0, 0,
	0, 0, 2665, 0, 0, 0, 0, 0, 2856, 2856,
	2077, 2090, 2177, 2098, 0, 0, 0, 2177, 2177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2169, 0, 0, 0, 2079, 2081, 0, 0,
	0, 0, 2082, 0, 2433, 1975, 0, 0, 0, 1979,
	1994, 1982, 0, 0, 0, 0, 1997, -2, 1992, 0,
	2084, 2177, 0, 0, 247, 0, 0, 247, 0, 0,
	2227, 0, 1338, 0, 0, 0, 0, 2404, 0, 0,
	0, 0, 0, 2987, 2957, 0, 0, 2961, 2962, 2963,
	2964, 0, 0, 2969, 0, 0, 0, 0, 2974, 0,
	0, 2347, 2988, -2, 0, 0, 2874, 2875, 0, 0,
	0, 0, 0, 0, 2987, 0, 0, 0, 0, 0,
	2987, 0, 0, 2476, 2477, 0, 0, 0, 0, 0,
	0, 0, 2690, 2691, 0, 0, 0, 0, 0, 2858,
	0, 0, 0, 0, 0, 2858, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2995, 2996, 0, 2445, 1829, 0, 0, 0,
	2179, 83, 84, 0, 0, 2181, 0, 0, 0, 2184,
	0, 1410, 1409, 0, 1417, 0, 1418, 1419, 1420, 1421,
	0, 1442, 0, 0, 0, 1444, 1440, 1449, 0, 1431,
	1432, 1450, 1450, 1436, 2186, 0, 85, 247, 0, 0,
	0, 0, 0, 0, 1813, 2214, 2215, 2216, 2217, 0,
	0, 0, 2541, 2542, 2544, 2535, 2545, 2547, 2551, 2553,
	2554, 1800, 1801, 1802, 1803, 1804, 0, 0, 1807, 1200,
	2546, 2548, 2550, 2536, 2555, 2556, 2557, 2558, 2559, 2560,
	2561, 2562, 2563, 2543, 2573, 2574, 2198, 377, 2825, 0,
	2910, 0, 385, 0, 236, 343, 373, 191, 208, 271,
	272, 326, 379, 416, 428, 0, 116, 2944, 2904, 0,
	0, 110, 0, 0, 0, 2944, 0, 1492, 2795, 1493,
	1500, 1503, 0, 0, 1505, 0, 1507, 0, 2791, 2792,
	2797, 2805, 2806, 0, 2815, 2816, 2803, 0, 2807, -2,
	0, 0, 1513, 0, 1518, 1519, 1520, 2757, 2758, 1882,
	2796, 1501, 1530, 0, 0, 0, 678, 646, 1459, 1460,
	1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470,
	0, 639, 893, -2, 0, -2, 980, 811, 1114, 1116,
	-2, 790, 0, 0, 1526, -2, 890, 1373, 105, 106,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 635, 636, 637, 638, 640, 641, 642, 643, 644,
	645, 647, 648, 649, 650, 651, 652, 653, 655, 656,
	657, 658, 659, 660, 661, 662, 663, 664, 665, 666,
	667, 668, 669, 670, 671, 672, 673, 674, 675, 676,
	677, 679, 680, 681, 682, 683, 684, 685, 686, 687,
	688, 689, 690, 691, 692, 693, 694, 695, 696, 697,
	698, 699, 700, 701, 702, 703, 704, 705, 706, 707,
	708, 709, 710, 711, 712, 713, 714, 715, 716, 717,
	718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 786, 787, 788,
	789, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 812, 813, 814, 815, 816, 817, 818, 819, 820,
	821, 822, 823, 824, 825, 826, 827, 828, 829, 830,
	831, 832, 833, 834, 835, 836, 837, 839, 840, 841,
	842, 843, 844, 845, 846, 847, 848, 849, 850, 851,
	852, 853, 854, 855, 856, 857, 858, 859, 860, 861,
	862, 863, 864, 865, 866, 867, 868, 869, 870, 871,
	872, 873, 874, 875, 876, 877, 878, 879, 880, 881,
	882, 883, 884, 885, 886, 887, 888, 889, 891, 892,
	894, 895, 896, 897, 898, 899, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
	964, 965, 966, 967, 968, 969, 970, 971, 972, 973,
	974, 975, 976, 977, 978, 979, 981, 982, 983, 984,
	985, 986, 987, 988, 989, 990, 991, 992, 993, 994,
	995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004,
	1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
	1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024,
	1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,
	1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,
	1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
	1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
	1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074,
	1075, 1081, 1082, 1096, 1099, 1100, 0, 0, 0, 1168,
	1393, 0, -2, 510, 1173, 1174, 1175, 1176, 0, 0,
	0, 0, -2, 1193, 0, 1195, 1217, 0, 0, 1352,
	1478, 0, 2769, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1296, 0, 1296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1682, 1682, 0, 0, 0, 0, 0, 0, 0, 0,
	1530, 0, 1223, 1226, 1227, 1404, 100, 101, 102, 103,
	104, 546, 547, 548, 549, 550, 551, 552, 553, 554,
	555, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 577, 578, 579, 580, 581, 582, 583, 584,
	585, 586, 587, 588, 589, 590, 591, 592, 593, 594,
	595, 596, 597, 598, 599, 600, 601, 602, 603, 604,
	605, 606, 607, 608, 609, 610, 611, 612, 613, 614,
	615, 616, 617, 618, 619, 620, 621, 622, 623, 1224,
	0, 0, 0, 1573, 1577, 0, 0, 1584, 0, 0,
	0, 0, 1375, 1377, 0, 0, 1479, 0, 0, 2835,
	2576, 2578, 0, 0, 2586, 1865, 1732, 0, 0, 0,
	0, 1530, 1743, 0, 0, 1230, 1552, 1590, 0, 0,
	1761, 1761, 1758, 1759, 1903, 0, 0, 0, 2076, 0,
	2427, 2429, 0, 0, 0, 247, 79, 2326, 0, 2326,
	0, 2350, 2351, 0, 0, 0, 2412, 0, 0, 0,
	0, 0, 2529, 2528, 2530, 2531, 2532, 2533, -2, 80,
	1955, 0, 1406, 0, 2613, 2615, 0, 0, 1472, 1626,
	0, 0, 0, 0, 0, 0, 2422, 0, 2435, 0,
	2470, 1903, 0, 0, 0, 2482, 2478, 0, 0, 2493,
	2494, 0, 2838, 0, 247, 2394, 0, 0, 2630, 2637,
	0, 0, 0, 0, 2596, 2672, 0, 415, -2, 2394,
	2680, 0, 2595, 0, 0, 0, 2837, 2839, 0, 0,
	0, 0, 2176, 0, 0, 2109, 247, 0, 2133, 0,
	0, 2012, 0, 1966, 0, 0, -2, 0, 0, 0,
	0, 0, 0, 2141, 2142, 0, 0, 2162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2155, 0,
	0, 2157, 2158, 0, 2163, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1976, 1980, 1985, 1986, 1977,
	1978, 0, 1993, 1983, 1984, 0, 0, 0, 0, 0,
	0, 0, 0, 2086, 2177, 0, 0, 2088, 2177, 0,
	2470, 0, 0, 2219, 2220, 0, 0, 2315, 2316, 2317,
	2318, 2320, -2, 2322, 0, 0, 0, 0, 0, 0,
	2175, 0, 0, 0, 0, 2407, 0, 2516, 0, 0,
	0, 0, 2954, 2958, 2986, 0, 0, 0, 2967, 2968,
	2970, 2971, 2972, 2973, 2975, 2346, 389, 423, 0, 0,
	0, 0, 0, 2648, 0, 0, 2955, 0, 2668, 2670,
	2669, 2671, 0, 2956, 0, 0, 2475, 2480, 2481, 0,
	2684, 0, 2685, 2596, 0, 0, 2692, 0, 0, 0,
	2619, 2620, 2623, 0, 2840, 2842, 0, 2203, 0, 2843,
	0, 0, 2841, 2844, 2845, 0, 2632, 2633, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 0,
	0, 0, 0, 0, 0, 2443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1821, 1822, 1823,
	1824, 1825, 2209, 2883, 2884, 0, 0, 0, 0, 85,
	132, 85, 109, 85, 0, 1827, 85, 1411, 0, 0,
	0, 0, 0, 0, 0, 0, 1434, 1435, 85, 2188,
	0, 0, 0, 2103, 2852, 2850, 2854, 2527, 0, 0,
	1201, 1805, 1202, 1806, 2824, 0, 0, 2911, 2912, 0,
	0, 2915, 2992, 2916, 2917, 2918, 2919, 2920, 0, 2922,
	2945, 2947, 2923, 2924, 2925, 0, 0, 0, 0, 0,
	2879, 0, 0, 0, 0, 2901, 2393, 0, 0, 2898,
	85, 0, 1499, 0, 1508, 0, 0, 0, 2808, 0,
	0, -2, -2, 0, 2804, 2813, 2814, 2809, -2, -2,
	2810, 1504, 1511, 0, 1509, 0, 0, 1885, 1880, 1881,
	1496, 1497, 1587, 0, 1611, -2, -2, 278, 239, -2,
	0, 128, 1524, 1077, 1078, 0, 1080, 1083, 1084, 1085,
	1086, 1087, 1088, -2, -2, -2, -2, -2, -2, 1095,
	1097, 1098, -2, 1376, 1378, 0, 1479, 0, -2, 0,
	1113, 0, 1118, 1120, 1122, 0, 1135, 1137, 0, 1392,
	1379, 1380, 1381, 1382, 1383, 0, 0, 1480, 1130, 1481,
	0, 0, 1370, 1371, 1372, 1525, 0, 1117, 0, 0,
	1134, 1964, 0, 1231, 1230, 0, 0, 0, 1361, 1362,
	0, 0, 0, -2, 1474, 1339, 0, 0, 0, 0,
	1346, 1348, 0, -2, 1196, 1204, 1205, 1206, 1207, 1208,
	1209, 1218, 0, 1358, 1354, 0, 2769, 0, 1233, 0,
	0, 1673, 1076, 0, 1678, 1716, 0, 0, 0, 0,
	0, 0, 0, 0, 1306, 1307, 1308, 1309, 1310, 1311,
	1312, 1313, 0, 0, 0, 1348, 1295, 0, 0, 1144,
	0, 0, 0, 502, 0, 0, 1348, 0, 0, 0,
	0, 0, 1393, 0, 1304, 0, 0, 0, 0, 0,
	0, 0, 1318, 1321, 0, 0, 0, 0, 0, 1673,
	0, 1667, 0, 1348, 1676, 1716, 0, 1665, -2, 1392,
	0, 1682, 1290, 0, 0, 0, 0, 1587, 0, 1228,
	1225, 1549, 1585, 0, 1575, 0, 114, 1394, 2583, 2584,
	2585, 1887, 0, 0, 1737, 1738, 0, 1739, 1230, 1736,
	1731, 1590, 0, 0, 0, 1748, 1747, 1887, 0, 1751,
	1531, 1593, 1593, 0, 1537, 0, 1602, 1593, 1593, 1616,
	375, 522, 487, 112, 1334, 1335, 1336, 0, 478, 0,
	0, 1760, 0, 0, 1902, 1904, 1906, 1907, 1908, 0,
	1932, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2340, 2325, 2327, 0, 0, 0, 2332, 2333, 0, 2305,
	2306, 2308, 2340, 0, 2353, 2355, 2356, 2357, 2359, 2352,
	0, 2411, 0, 0, 0, 0, 2499, 2503, 2501, 1401,
	0, 2729, 2394, 0, 2399, 0, 0, 0, -2, 2403,
	1407, 2612, 0, 0, 0, 2716, 0, 1625, 1627, 0,
	2512, 2426, 2416, 2417, 2418, 2419, 0, 2437, 0, 0,
	0, 2442, 1997, 1947, 2469, 2467, 0, 0, 0, 0,
	0, 0, 0, 2479, 0, 0, 2855, 2859, 0, 0,
	0, 0, 0, 0, 0, 2869, 2870, 0, 0, 0,
	0, 0, 2055, 0, 2076, 2639, 0, 0, 2654, 2655,
	0, 2660, 2662, 2663, 0, 115, 2596, 2667, 0, 2394,
	0, -2, 2682, 2682, 0, 0, 0, 2099, 2250, 0,
	0, 0, 93, 0, 2111, 247, 1930, 0, 0, 0,
	2285, 0, 0, 0, 0, 0, 1831, 0, 2285, 247,
	85, 247, 85, 2135, 2138, 2140, 0, 2161, 0, 2294,
	2297, 2139, 2143, 2146, 2147, 0, 0, 0, 0, 2151,
	0, 2148, 2149, 2150, 2154, 0, 2156, 0, 2159, 2164,
	2608, 2609, 2610, 0, 0, 0, 2600, 2602, 390, 138,
	210, 0, 1951, 2078, 2091, 2177, 0, 2258, 2173, 2080,
	0, 0, 2252, 1981, 1987, 1988, 1989, 1991, 2083, 0,
	2434, 2254, 0, 2085, 2177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, -2, 2230, 2218, 0, 0, 2314,
	0, 2313, 1409, 2319, 1409, 0, 2231, 2232, 2233, 2234,
	0, 2405, 85, 247, 2174, 2406, 0, 0, 2285, 2410,
	2237, 0, 0, 2965, 2966, 2238, 2848, 0, 0, 0,
	0, 2650, 0, 0, 2244, 2245, 2246, 2247, 2248, 2249,
	2596, 2686, 2596, 2596, 0, 0, 0, 2621, 2622, 2275,
	2857, 2202, 2847, 2276, 0, 2277, 2278, 2658, 1808, 1809,
	0, 0, 0, 0, 0, 0, 0, 2283, 0, 0,
	0, 0, 85, 2510, 247, 85, 0, 2976, 2980, 2997,
	0, 0, 1831, 2444, 0, 2447, 2448, 2449, 0, 2451,
	2452, 2453, 166, 228, 0, 2456, 2457, 0, 2459, 0,
	0, 0, 0, 0, 0, 2178, 2180, 2182, 0, 2185,
	1408, 1451, 1448, 1446, 1447, 1448, 0, 1437, 2187, 85,
	0, 0, 2521, 0, 2194, 2552, 2936, 2931, 2933, 0,
	117, 0, 2914, 0, 2921, 2949, 0, 0, 0, 0,
	0, 0, 0, 2944, 2938, 0, 0, 2902, 111, 2944,
	0, 2881, 0, 1506, 2798, 0, 2801, 0, 2811, 2812,
	0, 0, 1512, 2759, 1885, 1455, 0, 2761, 0, 2743,
	0, 1529, 0, 118, 0, 119, 119, 119, 119, 0,
	127, 0, 0, -2, -2, 0, 0, 0, 1131, 0,
	-2, 1115, 1119, 1121, 1123, 0, 1136, 1139, 0, 1392,
	0, 1138, 1141, 0, 0, 1384, 1385, 1386, 1387, 0,
	0, 0, 1132, 0, 0, 0, 0, 1965, 1169, 1394,
	1359, 1360, 0, 1179, 1454, -2, 0, 0, 1473, 1340,
	1474, 1474, 1474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1355, 0, 0, 1232, 0, 2767, 2768, 2772,
	0, 1392, 0, 0, 0, 0, 1676, 0, 1657, 1715,
	0, 0, 1238, 1240, 1242, 1244, 0, 1253, 0, 1254,
	0, 1256, 1257, 0, 0, 1258, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1146, 1147, 1161, 1259, 1260, 0, 0,
	0, 0, 0, 0, 0, 1265, 0, 1303, 0, 1267,
	1268, 1269, 1270, 0, 1275, 0, 0, 1324, 0, 0,
	0, 0, 1281, 1392, 0, 1283, 1716, 1682, 0, 0,
	0, 1682, 1286, 0, 1288, 0, 0, 0, 0, 0,
	2743, 1608, 0, 1224, 0, 1576, 1729, 0, 1868, 0,
	0, 0, 1741, 1887, 1744, 1745, 0, 0, 1750, 1588,
	187, 0, 0, 0, 0, 0, 1564, 1564, 1564, 1562,
	1533, 1592, 0, 1597, 1535, 1593, 1602, 1593, 1593, -2,
	1537, 0, 1539, 1598, 0, 1597, 1541, 1543, 1613, 0,
	0, 0, 0, -2, 0, 0, 1997, 1762, 1763, 1764,
	-2, 2045, 0, 1912, 2047, 0, 1932, 0, 0, 2075,
	0, 2430, 2070, 0, 2326, 0, 2321, 2302, 2338, 0,
	0, 2328, 2329, 2334, 2330, 2331, 0, 2304, 0, 0,
	0, 2303, 0, 0, 0, 0, 2495, 2496, 0, 0,
	0, 2502, 0, 0, 0, 0, 2076, 0, 0, 2402,
	1954, 0, 1957, 1958, 0, 0, 2003, 1966, 0, 0,
	0, 0, 0, 1960, 0, 2614, 2616, 2589, 2590, 2591,
	2592, 2593, 2594, 316, 1459, 1460, 0, 2424, 0, 1631,
	0, 2511, 2513, 2421, 0, 2439, 2440, 2441, 2438, 2460,
	0, 2468, 2463, 2471, 2464, 2466, 2465, 2045, 1932, 0,
	0, 2483, 1947, 0, 2860, 2861, 2862, 0, 0, 2865,
	2866, 0, 0, 0, 0, 2873, 2527, 0, 2076, 0,
	0, 0, 2629, 2646, 0, 2636, 0, 0, 0, 0,
	0, 2666, 2673, 2682, 0, 2682, 2677, 0, 2679, 2596,
	0, 0, 0, 0, 2170, 0, 1942, 2171, 2172, 0,
	0, 1926, 1929, 0, 2011, 2070, 0, 0, 2015, 0,
	0, 2285, 0, 0, 2069, 2113, 0, 0, 0, 0,
	2126, 0, 2132, 1969, -2, 0, 2134, 0, 2130, 0,
	2137, 2160, 2606, 2607, 2293, 0, 0, 0, 2144, 2152,
	2145, 2153, 2165, 2166, 0, 0, 2167, 2599, 0, 2603,
	2604, 2605, 1950, 1952, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2256, 0, 2087, 2177,
	0, 2260, 0, 2089, 2177, 0, 2461, 2221, 2311, 2312,
	0, 0, 0, 2408, 0, 2515, 0, 2518, 2959, 0,
	2239, 0, 0, 0, 0, 0, 2652, 0, 2647, 0,
	2689, 2687, 2688, 0, 0, 2274, 0, 0, 0, 0,
	0, 0, 0, 0, 2506, 0, 2998, 0, 3000, 0,
	2994, 0, 0, 0, 2446, 0, 0, 0, 2222, 0,
	0, 0, 0, 0, 2886, 2887, 2888, 85, 1441, 1443,
	1439, 2189, 2491, 0, 2525, 0, 2944, 0, 0, 2934,
	2913, 2993, 0, 2946, 2948, 0, 0, 0, 0, 0,
	2880, 0, 2939, 2940, 2941, 2942, 2943, 85, 0, 2944,
	2799, 0, 2802, 0, 1368, 0, 2760, 0, 1883, 1884,
	2756, 0, 1586, 120, 121, 0, 0, 0, 0, 126,
	1079, -2, 0, 0, -2, 0, 0, -2, 0, 0,
	1140, 1142, -2, 1389, 1391, 0, 0, 1482, 0, -2,
	0, 1365, 0, -2, 1363, 1341, 0, 1347, 0, 0,
	0, 1349, 1350, 1210, 1211, 1212, 1213, 1214, 1215, 1216,
	0, 1197, 1351, 1357, 0, 0, 2774, 2771, 0, 1682,
	0, 0, 1669, 1670, 1682, 0, 1714, 1235, 0, 1305,
	0, 0, 1145, 1148, 1149, 1150, 1151, 1152, 1153, -2,
	-2, -2, -2, -2, -2, 1160, 0, 0, 1164, 1316,
	0, 1299, 1300, 0, 1262, 1263, 1264, 1302, 0, 1271,
	0, 1319, 1320, 0, 0, 0, 1277, 1634, 0, 156,
	1278, 0, 1333, 0, 1682, 1668, 1681, 0, 1666, 0,
	0, 0, 1287, 1289, 1661, 1661, 1661, 0, 2756, 1229,
	0, 1886, 0, 0, 0, 1733, 1734, 0, 1740, 1742,
	0, 1749, 0, 1532, 0, 0, 0, 0, 0, 1559,
	1563, 1560, 1561, 1534, 0, 1595, 0, 1536, 1540, 1542,
	1544, 1553, 1595, 0, 0, 1615, 0, 0, 517, 0,
	1474, 0, 1772, 1997, 0, 1832, 2047, 0, 1905, 1909,
	2055, 2046, 0, 0, 1933, 1935, 1936, 1955, 0, 1903,
	0, 0, 2398, 2076, 2428, 0, 0, 2340, 0, 2343,
	2341, 0, 0, 0, 2307, 2309, 2310, 2361, 2354, 2358,
	0, 0, 2500, 0, 2504, 0, 2505, 0, 2734, 0,
	0, 2529, 0, 1959, 1961, 2002, 2596, 2596, 0, 2007,
	2394, 0, 1967, 0, 1962, 1963, 0, 1628, 1629, 0,
	2425, 0, 2423, 2436, 0, 2472, 0, 0, 1903, 0,
	0, 0, 2488, 0, 2863, 2864, 2867, 2868, 2871, 2872,
	2519, 0, 2061, 2054, 0, 2378, 2379, 0, 2624, 0,
	2650, 0, 2638, 2640, 2641, 2642, 2643, 2644, 2653, 2656,
	2661, 2664, 0, 2674, 2675, 2676, 2678, 0, 2683, 0,
	0, 0, 2262, 2268, 0, 2110, 0, 1947, 1925, 0,
	1927, 1928, 2285, 0, 2286, 0, 2288, 0, 0, 2064,
	0, 2017, 0, 0, 2022, 0, 1879, 1879, 0, 0,
	2117, 2127, 1830, 1973, 0, 0, 0, 0, 2121, 2123,
	2124, 2122, 0, 1970, 0, 0, 0, 0, 85, 85,
	2295, 2296, 2299, 2168, 2611, 2601, 2251, 0, 0, 0,
	0, 2259, 0, 0, 2253, 2264, 2255, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2236, 2323, 0, 2235,
	85, 2285, 2960, 0, 0, 2717, 2702, 0, 0, 0,
	2718, 2719, 0, 0, 2242, 2635, 0, 0, 0, 2272,
	2273, 2490, 2659, 2279, 2280, 2281, 2282, 85, 2509, 0,
	0, 88, 85, 2977, 2978, 2979, 2981, 2982, 2983, 2984,
	2985, 0, 0, 0, 0, 0, 0, 0, 0, 2892,
	2893, 2894, 2895, 2896, 2897, 0, 0, 2183, 0, 2526,
	2876, 2932, 0, 2950, 2926, 2927, 2928, 2929, 2930, 2937,
	2877, 0, 85, 2800, 1367, 1394, 0, 2763, 0, 2741,
	122, 123, 124, 125, -2, -2, 0, 0, 0, -2,
	-2, 1388, 1390, -2, -2, 1133, 1364, 1394, 1194, 1474,
	1342, 1344, 1345, 1219, 1356, 1475, 1474, 0, 1477, 0,
	1671, 1672, 0, 1677, 0, 1252, 1255, 0, 0, 0,
	1165, 0, 0, 0, 1261, 1266, 0, 0, 512, 1276,
	1322, 1323, 1635, 0, 1636, 1632, 1633, 0, 0, 0,
	1328, 304, 0, 1284, 1674, 1675, 1285, 1682, 0, 1698,
	1682, 1327, 2763, 1580, 0, 0, 1871, 0, 0, 1746,
	1589, 1591, 1554, 0, 1556, 0, 0, 0, 1558, 0,
	0, 0, 1538, 0, 0, 0, 107, 0, 1617, 1621,
	0, 0, 0, 0, 1887, 1754, 1854, 1854, 0, 1756,
	1769, 0, 1772, 0, 2055, 0, 0, 0, 96, 0,
	1931, 0, 1937, 0, 2047, 0, 1932, 0, 2389, 0,
	0, 0, 0, 2300, 0, 1622, 0, 1405, -2, 2335,
	0, 2336, 2371, 0, 2388, 0, 2497, 0, 0, 0,
	2736, 0, 0, 0, 2401, 1956, 0, 2063, 2063, 0,
	2031, 0, 1968, 0, 1630, 2514, 0, 1948, 0, 0,
	0, 0, 1947, 0, 0, 0, 2524, 0, 0, 0,
	0, 0, 2652, 2645, 0, 0, 0, 2698, 2698, 0,
	0, 0, 0, 2112, 1955, 1923, 1924, 2013, 2027, 2287,
	2291, 2289, 2290, 2292, 2027, 0, 2027, 0, 0, 1873,
	82, 0, 1874, 0, 2114, 0, 0, 1974, 2115, 0,
	2119, 0, 1631, 1972, 2120, 2129, 2136, 0, 0, 0,
	2101, 0, 2101, 0, 0, 2266, 2257, 0, 0, 0,
	2270, 2261, 0, 2324, 2409, 2517, 2240, 2241, 0, 0,
	0, 2708, 0, 0, 0, 0, 0, 0, 2284, 2507,
	2508, 2999, 1631, 0, 2454, 2455, 2223, 0, 0, 2458,
	0, 0, 0, 2492, 2935, 2944, 2882, 1369, 1456, 1514,
	0, 2755, 0, -2, -2, -2, 1366, 0, 2778, 0,
	1679, 1680, 1713, 1315, -2, 0, 1301, 1297, 1298, 1272,
	0, 1273, 0, 1637, 1279, 1280, 0, 1329, 1282, 1707,
	1660, 1662, 0, 0, 0, 0, 1684, 1685, 1686, 1687,
	1688, 1689, 1692, 1696, 0, 1325, 0, 1515, 1583, 0,
	0, 1864, 1587, 0, 1867, 0, 1555, 0, 1566, 1557,
	0, 0, 1596, 0, 1599, 1601, 1616, 0, 1619, 0,
	0, 0, 1638, 0, 0, 1659, 1341, 1753, 1755, 0,
	0, 0, 1849, 0, 1771, 1773, 1774, 1835, 1835, 1777,
	1778, 1835, 1835, 0, 0, 0, 1788, 1796, 1587, 1767,
	96, 0, 1910, 1913, 1914, 1915, 1916, 1917, 1918, 1919,
	1920, 1921, 1922, 1911, 2059, 0, 0, 0, 1934, 1955,
	2055, 2045, 2047, 1932, 0, 0, 0, 0, 0, 2070,
	0, 2326, 1624, 2339, 0, 2344, 2345, 0, 2377, 2373,
	2360, 2362, 0, 2365, 2366, 2285, 0, 2498, 2724, 0,
	0, 2730, 2735, 0, 0, 2733, 2398, 2076, 2004, 0,
	2005, 2021, 2036, 0, 2001, 0, 2701, 1946, 0, 1947,
	0, 2045, 1932, 2473, 0, 1947, 2527, 2060, 0, 0,
	2625, 0, 2634, 0, 2681, 2698, 2695, 0, 2694, 2723,
	0, 0, 0, 1953, 2596, 0, 2596, 0, 2596, 2023,
	2024, 316, 1882, 81, 1878, 1879, 2118, 2128, 0, 0,
	2598, 2298, 2263, 2269, 2092, 2100, 0, 2094, 0, 2265,
	0, 2101, 0, 0, 2703, 2713, 2713, 2706, 0, 2720,
	0, 0, 0, 2649, 2243, 85, 2450, 0, 0, 0,
	2936, 85, 0, 85, 2762, 2764, 0, 2742, 2744, 2746,
	2747, 2748, 2749, 2750, 0, 186, 372, 473, 1343, 0,
	0, 0, 0, 2773, 0, -2, 0, 0, 1330, 1331,
	1712, 0, 0, 0, 0, 1292, 0, 1683, 1690, 1691,
	0, 0, 1294, 1326, 1574, 0, 0, 0, 0, 1866,
	1872, 1735, 0, 0, 1594, 1600, 1614, 1618, 0, 0,
	1644, 0, 0, 0, 0, 1641, 1661, 0, 0, 1853,
	0, 1851, 0, 0, 0, 0, 0, 0, 0, 1787,
	1770, 0, 1790, 1791, 1792, 1793, 1794, 0, 1757, 2059,
	2044, 2061, 0, 94, 95, 0, 1938, 96, 2047, 2055,
	0, 2395, 0, 0, 2398, 2072, 0, 1623, 2340, 2342,
	2337, 0, 0, 0, 2372, 2363, 1835, 2367, 2368, 0,
	2387, 0, 0, 2737, 2738, 2390, 0, 0, 2006, 0,
	2008, 2032, 2033, 0, 2028, 2029, 2030, 2009, 0, 0,
	0, 0, 1949, 2484, 1947, 0, 0, 0, 2489, 2520,
	2617, 0, 0, 2627, 2657, 2693, 2696, 2697, 0, 1944,
	0, 0, 0, 2063, 0, 2063, 2394, 2063, 0, 1885,
	1882, 1875, 0, 2001, 2131, 0, 0, 0, 2267, 2096,
	0, 2271, 1999, 0, 1999, 0, 2714, 0, 0, 0,
	3001, 2224, 2226, 2225, 2889, 2890, 0, 2878, 0, 0,
	0, 2751, 0, 0, 0, 2770, 2790, 2779, -2, 431,
	187, 0, 2790, 2790, 1314, 1274, 1317, 1332, 1696, 0,
	0, 1699, 0, 1701, 0, 0, 0, 1663, 1664, 1697,
	1293, 0, 0, 0, 0, 1587, 1604, 2953, 0, 1642,
	0, 1646, 0, 1639, 0, 1640, 0, 1658, 1844, 1845,
	0, 0, 1856, 1846, 0, 0, 0, 1775, 1776, 1779,
	1780, 1781, 1782, 0, 1785, 1786, 1789, 0, 1797, 1799,
	2061, 1890, 0, 0, 2049, 1879, 1879, 0, 2059, 2055,
	96, 2047, 2396, 2397, 2391, 1966, 0, 0, 2301, 0,
	0, 2370, 2374, 2375, 0, 0, 0, 0, 0, 0,
	2020, 2034, 0, 2035, 0, 0, 0, 0, 0, 0,
	2700, 2486, 0, 0, 1947, 0, 2626, 0, 1939, 0,
	1943, 1940, 0, 2285, 0, 2285, 2031, 1587, 0, 1876,
	1885, 2116, 2125, 2597, 2101, 2101, 0, 2704, 1998, 2711,
	0, 2705, 0, 0, 2721, 2722, 2651, 0, 2765, 2766,
	2745, 0, 0, 0, 2775, 0, 0, 2781, 2782, 2783,
	2784, 2785, 2776, 2777, 0, 1709, 1711, 1700, 1702, 0,
	1705, 0, 1706, 1693, 1694, 0, 0, 0, 1863, 1565,
	0, 2951, 0, 1620, 1645, 1648, 1649, 0, 0, 0,
	1654, 0, 1647, 0, 0, 1847, 0, 1848, 1857, 0,
	0, 0, 0, 1850, 1852, 1783, 1784, 1795, 0, 1888,
	2056, 0, 0, 2048, 0, 82, 82, 0, 2061, 96,
	2059, 2055, 2076, 0, 0, 0, 0, 2364, 2369, 0,
	2727, 2728, 2398, 2062, 2037, 0, 2040, 2041, 0, 2038,
	2000, 2010, 2699, 1947, 0, 2474, 2618, 2628, 1945, 0,
	2014, 2026, 2016, 2036, 2285, 2025, 1877, 2093, 2095, 2101,
	0, 2707, 2715, 85, 2753, 2752, 0, 0, 2787, 2788,
	0, 0, 1291, 0, 0, 1703, 1704, 0, 0, 0,
	0, 1603, 0, 1650, 1651, 1652, 1653, 1655, 0, 0,
	1855, 0, 0, 1861, 0, 1798, 2057, 2058, 2050, 2051,
	2052, 1879, 1892, 2059, 2061, 96, 2061, 0, 2073, 2072,
	0, 2376, 2377, 0, 0, 2392, 2039, 2394, 2394, 2485,
	1947, 0, 2285, 2019, 2097, 2712, 2891, 2754, 2786, 2789,
	2780, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1719, 0, -2, 0, 0, 0, 82, 2061, 1891,
	2059, 1587, 2071, 0, 1966, 2382, 0, 0, 0, 2042,
	2043, 2487, 0, 2018, 1708, 1710, 1695, 0, 0, -2,
	1582, 1578, 1579, 2952, 0, 1698, 0, 0, 1728, 0,
	1717, 1858, 1859, 0, 1862, 2053, 1889, 2061, 2065, 2074,
	2076, 0, 2380, 2383, 2384, 2385, 2386, 0, 0, 0,
	1941, 0, 0, 1643, 0, 1720, 1721, 1707, 1728, 1728,
	0, 0, 0, 1893, 2061, 2348, 0, 0, 0, 0,
	0, 1474, 1656, 1712, 1707, 1698, 1727, 0, 0, 0,
	1587, 2381, 0, 0, 0, 0, 0, 1696, 1712, 1724,
	0, 0, 1860, 2066, 2382, 2725, 2726, 1581, 0, 1722,
	1696, 0, 0, 0, 1723, 1725, 0, 2349, 0, 1726,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 538, 3, 3,
	531, 532, 536, 534, 541, 535, 533, 537, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 542, 540,
	525, 527, 526, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 529, 3, 530, 539,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var yyTok3 = [...]uint16{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 464, 57807, 465, 57808, 466, 57809, 467,
	57810, 468, 57811, 469, 57812, 470, 57813, 471, 57814, 472,
	57815, 473, 57816, 474, 57817, 475, 57818, 476, 57819, 477,
	57820, 478, 57821, 479, 57822, 480, 57823, 481, 57824, 482,
	57825, 483, 57826, 484, 57827, 485, 57828, 486, 57829, 487,
	57830, 488, 57831, 489, 57832, 490, 57833, 491, 57834, 492,
	57835, 493, 57836, 494, 57837, 495, 57838, 496, 57839, 497,
	57840, 498, 57841, 499, 57842, 500, 57843, 501, 57844, 502,
	57845, 503, 57846, 504, 57847, 505, 57848, 506, 57849, 507,
	57850, 508, 57851, 509, 57852, 510, 57853, 511, 57854, 512,
	57855, 513, 57856, 514, 57857, 515, 57858, 516, 57859, 517,
	57860, 518, 57861, 519, 57862, 520, 57863, 521, 57864, 522,
	57865, 523, 57866, 524, 57867, 528, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:566
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:581
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:589
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:604
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:607
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:616
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:617
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:618
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:619
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:620
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:621
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:622
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:623
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:624
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:625
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:626
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:627
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:628
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:629
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:630
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:631
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:632
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:633
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:634
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:635
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:636
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:637
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:638
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:639
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:640
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:641
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:642
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:643
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:644
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:645
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:646
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:647
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:648
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:649
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:650
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:651
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:652
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:653
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:654
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:655
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:656
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:657
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:658
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:659
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:660
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:661
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:662
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:663
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:664
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:665
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:666
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:667
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:668
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:669
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:670
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:671
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:672
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:673
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:674
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:675
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:676
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:677
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:678
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:679
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:680
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:681
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:682
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:683
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:684
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:685
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:686
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:687
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:689
		{
			yyVAL.stmt = nil
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:700
		{
			yyVAL.str = yyDollar[1].str
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:701
		{
			yyVAL.str = ""
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:705
		{
			yyVAL.list = yyDollar[1].list
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:706
		{
			yyVAL.list = nil
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:710
		{
			yyVAL.dropBehav = ast.DropCascade
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:711
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:712
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:716
		{
			yyVAL.ival = 1
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:717
		{
			yyVAL.ival = 0
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:721
		{
			yyVAL.ival = 1
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:722
		{
			yyVAL.ival = 0
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:726
		{
			yyVAL.bval = true
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:727
		{
			yyVAL.bval = false
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:731
		{
			yyVAL.bval = true
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:732
		{
			yyVAL.bval = false
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:736
		{
			yyVAL.list = yyDollar[2].list
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:737
		{
			yyVAL.list = nil
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:738
		{
			yyVAL.list = nil
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:747
		{
			yyVAL.str = yyDollar[1].str
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:748
		{
			yyVAL.str = yyDollar[1].str
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:749
		{
			yyVAL.str = yyDollar[1].str
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:753
		{
			yyVAL.str = yyDollar[1].str
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:754
		{
			yyVAL.str = yyDollar[1].str
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:755
		{
			yyVAL.str = yyDollar[1].str
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:756
		{
			yyVAL.str = yyDollar[1].str
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:757
		{
			yyVAL.str = yyDollar[1].str
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:760
		{
			yyVAL.str = yyDollar[1].str
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:761
		{
			yyVAL.str = yyDollar[1].str
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:764
		{
			yyVAL.str = yyDollar[1].str
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:769
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:773
		{
			list := yyDollar[1].list
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = list
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:782
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:786
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:794
		{
			yyVAL.rangevar = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:801
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list.Items) == 1 {
				if str, ok := yyDollar[2].list.Items[0].(*ast.String); ok {
					yyVAL.rangevar = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.rangevar = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.rangevar = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:830
		{
			yyVAL.list = yyDollar[2].list
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:831
		{
			yyVAL.list = nil
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:836
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:840
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:853
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:859
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:865
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:871
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:877
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:884
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:891
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_UNLOGGED
			yyVAL.node = rangeVar
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:897
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:903
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:912
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:916
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				nodes.Append(item)
			}
			yyVAL.list = nodes
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:928
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:932
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].list)
			yyVAL.list = list
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:942
		{
			yyVAL.str = "abort"
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:943
		{
			yyVAL.str = "absent"
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:944
		{
			yyVAL.str = "absolute"
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:945
		{
			yyVAL.str = "access"
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:946
		{
			yyVAL.str = "action"
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:947
		{
			yyVAL.str = "add"
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:948
		{
			yyVAL.str = "admin"
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:949
		{
			yyVAL.str = "after"
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:950
		{
			yyVAL.str = "aggregate"
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:951
		{
			yyVAL.str = "also"
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:952
		{
			yyVAL.str = "alter"
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:953
		{
			yyVAL.str = "always"
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:954
		{
			yyVAL.str = "asensitive"
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:955
		{
			yyVAL.str = "assertion"
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:956
		{
			yyVAL.str = "assignment"
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:957
		{
			yyVAL.str = "at"
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:958
		{
			yyVAL.str = "atomic"
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:959
		{
			yyVAL.str = "attach"
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:960
		{
			yyVAL.str = "attribute"
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:961
		{
			yyVAL.str = "backward"
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:962
		{
			yyVAL.str = "before"
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:963
		{
			yyVAL.str = "begin"
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:964
		{
			yyVAL.str = "breadth"
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:965
		{
			yyVAL.str = "by"
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:966
		{
			yyVAL.str = "cache"
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:967
		{
			yyVAL.str = "call"
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:968
		{
			yyVAL.str = "called"
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:969
		{
			yyVAL.str = "cascade"
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:970
		{
			yyVAL.str = "cascaded"
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:971
		{
			yyVAL.str = "catalog"
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:972
		{
			yyVAL.str = "chain"
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:973
		{
			yyVAL.str = "characteristics"
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:974
		{
			yyVAL.str = "checkpoint"
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:975
		{
			yyVAL.str = "class"
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:976
		{
			yyVAL.str = "close"
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:977
		{
			yyVAL.str = "cluster"
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:978
		{
			yyVAL.str = "columns"
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:979
		{
			yyVAL.str = "comment"
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:980
		{
			yyVAL.str = "comments"
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:981
		{
			yyVAL.str = "commit"
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:982
		{
			yyVAL.str = "committed"
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:983
		{
			yyVAL.str = "compression"
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:984
		{
			yyVAL.str = "conditional"
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:985
		{
			yyVAL.str = "configuration"
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:986
		{
			yyVAL.str = "conflict"
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:987
		{
			yyVAL.str = "connection"
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:988
		{
			yyVAL.str = "constraints"
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:989
		{
			yyVAL.str = "content"
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:990
		{
			yyVAL.str = "continue"
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:991
		{
			yyVAL.str = "conversion"
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:992
		{
			yyVAL.str = "copy"
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:993
		{
			yyVAL.str = "cost"
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:994
		{
			yyVAL.str = "csv"
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:995
		{
			yyVAL.str = "cube"
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:996
		{
			yyVAL.str = "current"
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:997
		{
			yyVAL.str = "cursor"
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:998
		{
			yyVAL.str = "cycle"
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:999
		{
			yyVAL.str = "data"
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1000
		{
			yyVAL.str = "database"
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1001
		{
			yyVAL.str = "day"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1002
		{
			yyVAL.str = "deallocate"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1003
		{
			yyVAL.str = "declare"
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1004
		{
			yyVAL.str = "defaults"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1005
		{
			yyVAL.str = "deferred"
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1006
		{
			yyVAL.str = "definer"
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1007
		{
			yyVAL.str = "delete"
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1008
		{
			yyVAL.str = "delimiter"
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1009
		{
			yyVAL.str = "delimiters"
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1010
		{
			yyVAL.str = "depends"
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1011
		{
			yyVAL.str = "depth"
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1012
		{
			yyVAL.str = "detach"
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1013
		{
			yyVAL.str = "dictionary"
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1014
		{
			yyVAL.str = "disable"
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1015
		{
			yyVAL.str = "discard"
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1016
		{
			yyVAL.str = "document"
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1017
		{
			yyVAL.str = "domain"
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1018
		{
			yyVAL.str = "double"
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1019
		{
			yyVAL.str = "drop"
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1020
		{
			yyVAL.str = "each"
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1021
		{
			yyVAL.str = "empty"
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1022
		{
			yyVAL.str = "enable"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1023
		{
			yyVAL.str = "encoding"
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1024
		{
			yyVAL.str = "encrypted"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1025
		{
			yyVAL.str = "enum"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1026
		{
			yyVAL.str = "error"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1027
		{
			yyVAL.str = "escape"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1028
		{
			yyVAL.str = "event"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1029
		{
			yyVAL.str = "exclude"
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1030
		{
			yyVAL.str = "excluding"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1031
		{
			yyVAL.str = "exclusive"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1032
		{
			yyVAL.str = "execute"
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1033
		{
			yyVAL.str = "explain"
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1034
		{
			yyVAL.str = "expression"
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1035
		{
			yyVAL.str = "extension"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1036
		{
			yyVAL.str = "external"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1037
		{
			yyVAL.str = "family"
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1038
		{
			yyVAL.str = "filter"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1039
		{
			yyVAL.str = "finalize"
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1040
		{
			yyVAL.str = "first"
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1041
		{
			yyVAL.str = "following"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1042
		{
			yyVAL.str = "force"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1043
		{
			yyVAL.str = "format"
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1044
		{
			yyVAL.str = "forward"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1045
		{
			yyVAL.str = "function"
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1046
		{
			yyVAL.str = "functions"
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1047
		{
			yyVAL.str = "generated"
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1048
		{
			yyVAL.str = "global"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1049
		{
			yyVAL.str = "granted"
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1050
		{
			yyVAL.str = "groups"
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1051
		{
			yyVAL.str = "handler"
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1052
		{
			yyVAL.str = "header"
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1053
		{
			yyVAL.str = "hold"
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1054
		{
			yyVAL.str = "hour"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1055
		{
			yyVAL.str = "identity"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1056
		{
			yyVAL.str = "if"
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1057
		{
			yyVAL.str = "immediate"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1058
		{
			yyVAL.str = "immutable"
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1059
		{
			yyVAL.str = "implicit"
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1060
		{
			yyVAL.str = "import"
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1061
		{
			yyVAL.str = "include"
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1062
		{
			yyVAL.str = "including"
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1063
		{
			yyVAL.str = "increment"
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1064
		{
			yyVAL.str = "indent"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1065
		{
			yyVAL.str = "index"
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1066
		{
			yyVAL.str = "indexes"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1067
		{
			yyVAL.str = "inherit"
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1068
		{
			yyVAL.str = "inherits"
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1069
		{
			yyVAL.str = "inline"
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1070
		{
			yyVAL.str = "input"
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1071
		{
			yyVAL.str = "insensitive"
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1072
		{
			yyVAL.str = "insert"
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1073
		{
			yyVAL.str = "instead"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1074
		{
			yyVAL.str = "invoker"
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1075
		{
			yyVAL.str = "isolation"
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1076
		{
			yyVAL.str = "keep"
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1077
		{
			yyVAL.str = "key"
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1078
		{
			yyVAL.str = "keys"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1079
		{
			yyVAL.str = "label"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1080
		{
			yyVAL.str = "language"
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1081
		{
			yyVAL.str = "large"
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1082
		{
			yyVAL.str = "last"
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1083
		{
			yyVAL.str = "leakproof"
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1084
		{
			yyVAL.str = "level"
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1085
		{
			yyVAL.str = "listen"
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1086
		{
			yyVAL.str = "load"
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1087
		{
			yyVAL.str = "local"
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1088
		{
			yyVAL.str = "location"
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1089
		{
			yyVAL.str = "lock"
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1090
		{
			yyVAL.str = "locked"
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1091
		{
			yyVAL.str = "logged"
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1092
		{
			yyVAL.str = "mapping"
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1093
		{
			yyVAL.str = "match"
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1094
		{
			yyVAL.str = "matched"
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1095
		{
			yyVAL.str = "materialized"
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1096
		{
			yyVAL.str = "maxvalue"
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1097
		{
			yyVAL.str = "merge"
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1098
		{
			yyVAL.str = "method"
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1099
		{
			yyVAL.str = "minute"
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1100
		{
			yyVAL.str = "minvalue"
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1101
		{
			yyVAL.str = "mode"
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1102
		{
			yyVAL.str = "month"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1103
		{
			yyVAL.str = "move"
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1104
		{
			yyVAL.str = "name"
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1105
		{
			yyVAL.str = "names"
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1106
		{
			yyVAL.str = "nested"
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1107
		{
			yyVAL.str = "new"
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1108
		{
			yyVAL.str = "next"
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1109
		{
			yyVAL.str = "nfc"
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1110
		{
			yyVAL.str = "nfd"
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1111
		{
			yyVAL.str = "nfkc"
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1112
		{
			yyVAL.str = "nfkd"
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1113
		{
			yyVAL.str = "no"
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1114
		{
			yyVAL.str = "normalized"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1115
		{
			yyVAL.str = "nothing"
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1116
		{
			yyVAL.str = "notify"
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1117
		{
			yyVAL.str = "nowait"
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1118
		{
			yyVAL.str = "nulls"
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1119
		{
			yyVAL.str = "object"
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1120
		{
			yyVAL.str = "of"
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1121
		{
			yyVAL.str = "off"
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1122
		{
			yyVAL.str = "oids"
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1123
		{
			yyVAL.str = "old"
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1124
		{
			yyVAL.str = "omit"
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1125
		{
			yyVAL.str = "operator"
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1126
		{
			yyVAL.str = "option"
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1127
		{
			yyVAL.str = "options"
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1128
		{
			yyVAL.str = "ordinality"
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1129
		{
			yyVAL.str = "others"
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1130
		{
			yyVAL.str = "over"
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1131
		{
			yyVAL.str = "overriding"
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1132
		{
			yyVAL.str = "owned"
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1133
		{
			yyVAL.str = "owner"
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1134
		{
			yyVAL.str = "parallel"
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1135
		{
			yyVAL.str = "parameter"
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1136
		{
			yyVAL.str = "parser"
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1137
		{
			yyVAL.str = "partial"
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1138
		{
			yyVAL.str = "partition"
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1139
		{
			yyVAL.str = "passing"
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1140
		{
			yyVAL.str = "password"
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1141
		{
			yyVAL.str = "path"
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1142
		{
			yyVAL.str = "plan"
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1143
		{
			yyVAL.str = "plans"
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1144
		{
			yyVAL.str = "policy"
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1145
		{
			yyVAL.str = "preceding"
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1146
		{
			yyVAL.str = "prepare"
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1147
		{
			yyVAL.str = "prepared"
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1148
		{
			yyVAL.str = "preserve"
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1149
		{
			yyVAL.str = "prior"
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1150
		{
			yyVAL.str = "privileges"
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1151
		{
			yyVAL.str = "procedural"
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1152
		{
			yyVAL.str = "procedure"
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1153
		{
			yyVAL.str = "procedures"
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1154
		{
			yyVAL.str = "program"
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1155
		{
			yyVAL.str = "publication"
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1156
		{
			yyVAL.str = "quote"
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1157
		{
			yyVAL.str = "quotes"
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1158
		{
			yyVAL.str = "range"
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1159
		{
			yyVAL.str = "read"
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1160
		{
			yyVAL.str = "reassign"
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1161
		{
			yyVAL.str = "recheck"
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1162
		{
			yyVAL.str = "recursive"
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1163
		{
			yyVAL.str = "ref"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1164
		{
			yyVAL.str = "referencing"
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1165
		{
			yyVAL.str = "refresh"
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1166
		{
			yyVAL.str = "reindex"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1167
		{
			yyVAL.str = "relative"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1168
		{
			yyVAL.str = "release"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1169
		{
			yyVAL.str = "rename"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1170
		{
			yyVAL.str = "repeatable"
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1171
		{
			yyVAL.str = "replace"
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1172
		{
			yyVAL.str = "replica"
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1173
		{
			yyVAL.str = "reset"
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1174
		{
			yyVAL.str = "restart"
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1175
		{
			yyVAL.str = "restrict"
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1176
		{
			yyVAL.str = "return"
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1177
		{
			yyVAL.str = "returns"
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1178
		{
			yyVAL.str = "revoke"
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1179
		{
			yyVAL.str = "role"
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1180
		{
			yyVAL.str = "rollback"
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1181
		{
			yyVAL.str = "rollup"
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1182
		{
			yyVAL.str = "routine"
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1183
		{
			yyVAL.str = "routines"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1184
		{
			yyVAL.str = "rows"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1185
		{
			yyVAL.str = "rule"
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1186
		{
			yyVAL.str = "savepoint"
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1187
		{
			yyVAL.str = "scalar"
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1188
		{
			yyVAL.str = "schema"
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1189
		{
			yyVAL.str = "schemas"
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1190
		{
			yyVAL.str = "scroll"
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1191
		{
			yyVAL.str = "search"
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1192
		{
			yyVAL.str = "second"
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1193
		{
			yyVAL.str = "security"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1194
		{
			yyVAL.str = "sequence"
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1195
		{
			yyVAL.str = "sequences"
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1196
		{
			yyVAL.str = "serializable"
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1197
		{
			yyVAL.str = "server"
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1198
		{
			yyVAL.str = "session"
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1199
		{
			yyVAL.str = "set"
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1200
		{
			yyVAL.str = "sets"
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1201
		{
			yyVAL.str = "share"
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1202
		{
			yyVAL.str = "show"
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1203
		{
			yyVAL.str = "simple"
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1204
		{
			yyVAL.str = "skip"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1205
		{
			yyVAL.str = "snapshot"
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1206
		{
			yyVAL.str = "source"
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1207
		{
			yyVAL.str = "sql"
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1208
		{
			yyVAL.str = "stable"
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1209
		{
			yyVAL.str = "standalone"
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1210
		{
			yyVAL.str = "start"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1211
		{
			yyVAL.str = "statement"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1212
		{
			yyVAL.str = "statistics"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1213
		{
			yyVAL.str = "stdin"
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1214
		{
			yyVAL.str = "stdout"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1215
		{
			yyVAL.str = "storage"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1216
		{
			yyVAL.str = "stored"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1217
		{
			yyVAL.str = "strict"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1218
		{
			yyVAL.str = "string"
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1219
		{
			yyVAL.str = "strip"
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1220
		{
			yyVAL.str = "subscription"
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1221
		{
			yyVAL.str = "support"
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1222
		{
			yyVAL.str = "sysid"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1223
		{
			yyVAL.str = "system"
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1224
		{
			yyVAL.str = "tables"
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1225
		{
			yyVAL.str = "tablespace"
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1226
		{
			yyVAL.str = "target"
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1227
		{
			yyVAL.str = "temp"
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1228
		{
			yyVAL.str = "template"
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1229
		{
			yyVAL.str = "temporary"
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1230
		{
			yyVAL.str = "text"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1231
		{
			yyVAL.str = "ties"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1232
		{
			yyVAL.str = "transaction"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1233
		{
			yyVAL.str = "transform"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1234
		{
			yyVAL.str = "trigger"
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1235
		{
			yyVAL.str = "truncate"
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1236
		{
			yyVAL.str = "trusted"
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1237
		{
			yyVAL.str = "type"
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1238
		{
			yyVAL.str = "types"
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1239
		{
			yyVAL.str = "uescape"
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1240
		{
			yyVAL.str = "unbounded"
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1241
		{
			yyVAL.str = "uncommitted"
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1242
		{
			yyVAL.str = "unconditional"
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1243
		{
			yyVAL.str = "unencrypted"
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1244
		{
			yyVAL.str = "unknown"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1245
		{
			yyVAL.str = "unlisten"
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1246
		{
			yyVAL.str = "unlogged"
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1247
		{
			yyVAL.str = "until"
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1248
		{
			yyVAL.str = "update"
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1249
		{
			yyVAL.str = "vacuum"
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1250
		{
			yyVAL.str = "valid"
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1251
		{
			yyVAL.str = "validate"
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1252
		{
			yyVAL.str = "validator"
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1253
		{
			yyVAL.str = "value"
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1254
		{
			yyVAL.str = "varying"
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1255
		{
			yyVAL.str = "version"
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1256
		{
			yyVAL.str = "view"
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1257
		{
			yyVAL.str = "views"
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1258
		{
			yyVAL.str = "volatile"
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1259
		{
			yyVAL.str = "whitespace"
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1260
		{
			yyVAL.str = "within"
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1261
		{
			yyVAL.str = "without"
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1262
		{
			yyVAL.str = "work"
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1263
		{
			yyVAL.str = "wrapper"
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1264
		{
			yyVAL.str = "write"
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1265
		{
			yyVAL.str = "xml"
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1266
		{
			yyVAL.str = "year"
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1267
		{
			yyVAL.str = "yes"
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1268
		{
			yyVAL.str = "zone"
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1282
		{
			yyVAL.str = "between"
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1283
		{
			yyVAL.str = "bigint"
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1284
		{
			yyVAL.str = "bit"
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1285
		{
			yyVAL.str = "boolean"
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1286
		{
			yyVAL.str = "char"
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1287
		{
			yyVAL.str = "character"
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1288
		{
			yyVAL.str = "coalesce"
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1289
		{
			yyVAL.str = "dec"
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1290
		{
			yyVAL.str = "decimal"
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1291
		{
			yyVAL.str = "exists"
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1292
		{
			yyVAL.str = "extract"
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1293
		{
			yyVAL.str = "float"
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1294
		{
			yyVAL.str = "greatest"
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1295
		{
			yyVAL.str = "grouping"
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1296
		{
			yyVAL.str = "inout"
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1297
		{
			yyVAL.str = "int"
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1298
		{
			yyVAL.str = "integer"
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1299
		{
			yyVAL.str = "interval"
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1300
		{
			yyVAL.str = "json"
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1301
		{
			yyVAL.str = "json_array"
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1302
		{
			yyVAL.str = "json_arrayagg"
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1303
		{
			yyVAL.str = "json_exists"
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1304
		{
			yyVAL.str = "json_object"
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1305
		{
			yyVAL.str = "json_objectagg"
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1306
		{
			yyVAL.str = "json_query"
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1307
		{
			yyVAL.str = "json_scalar"
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1308
		{
			yyVAL.str = "json_serialize"
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1309
		{
			yyVAL.str = "json_table"
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1310
		{
			yyVAL.str = "json_value"
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1311
		{
			yyVAL.str = "least"
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1312
		{
			yyVAL.str = "merge_action"
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1313
		{
			yyVAL.str = "national"
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1314
		{
			yyVAL.str = "nchar"
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1315
		{
			yyVAL.str = "none"
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1316
		{
			yyVAL.str = "normalize"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1317
		{
			yyVAL.str = "nullif"
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1318
		{
			yyVAL.str = "numeric"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1319
		{
			yyVAL.str = "out"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1320
		{
			yyVAL.str = "overlay"
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1321
		{
			yyVAL.str = "position"
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1322
		{
			yyVAL.str = "precision"
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1323
		{
			yyVAL.str = "real"
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1324
		{
			yyVAL.str = "row"
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1325
		{
			yyVAL.str = "setof"
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1326
		{
			yyVAL.str = "smallint"
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1327
		{
			yyVAL.str = "substring"
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1328
		{
			yyVAL.str = "time"
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1329
		{
			yyVAL.str = "timestamp"
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1330
		{
			yyVAL.str = "treat"
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1331
		{
			yyVAL.str = "trim"
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1332
		{
			yyVAL.str = "values"
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1333
		{
			yyVAL.str = "varchar"
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1334
		{
			yyVAL.str = "xmlattributes"
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1335
		{
			yyVAL.str = "xmlconcat"
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1336
		{
			yyVAL.str = "xmlelement"
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1337
		{
			yyVAL.str = "xmlexists"
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1338
		{
			yyVAL.str = "xmlforest"
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1339
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1340
		{
			yyVAL.str = "xmlparse"
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1341
		{
			yyVAL.str = "xmlpi"
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1342
		{
			yyVAL.str = "xmlroot"
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1343
		{
			yyVAL.str = "xmlserialize"
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1344
		{
			yyVAL.str = "xmltable"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1358
		{
			yyVAL.str = "authorization"
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1359
		{
			yyVAL.str = "binary"
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1360
		{
			yyVAL.str = "collation"
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1361
		{
			yyVAL.str = "concurrently"
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1362
		{
			yyVAL.str = "cross"
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1363
		{
			yyVAL.str = "current_schema"
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1364
		{
			yyVAL.str = "freeze"
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1365
		{
			yyVAL.str = "full"
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1366
		{
			yyVAL.str = "ilike"
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1367
		{
			yyVAL.str = "inner"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1368
		{
			yyVAL.str = "is"
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1369
		{
			yyVAL.str = "isnull"
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1370
		{
			yyVAL.str = "join"
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1371
		{
			yyVAL.str = "left"
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1372
		{
			yyVAL.str = "like"
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1373
		{
			yyVAL.str = "natural"
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1374
		{
			yyVAL.str = "notnull"
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1375
		{
			yyVAL.str = "outer"
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1376
		{
			yyVAL.str = "overlaps"
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1377
		{
			yyVAL.str = "right"
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1378
		{
			yyVAL.str = "similar"
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1379
		{
			yyVAL.str = "tablesample"
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1380
		{
			yyVAL.str = "verbose"
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1390
		{
			yyVAL.str = "all"
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1391
		{
			yyVAL.str = "analyse"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1392
		{
			yyVAL.str = "analyze"
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1393
		{
			yyVAL.str = "and"
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1394
		{
			yyVAL.str = "any"
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1395
		{
			yyVAL.str = "array"
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1396
		{
			yyVAL.str = "as"
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1397
		{
			yyVAL.str = "asc"
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1398
		{
			yyVAL.str = "asymmetric"
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1399
		{
			yyVAL.str = "both"
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1400
		{
			yyVAL.str = "case"
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1401
		{
			yyVAL.str = "cast"
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1402
		{
			yyVAL.str = "check"
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1403
		{
			yyVAL.str = "collate"
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1404
		{
			yyVAL.str = "column"
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1405
		{
			yyVAL.str = "constraint"
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1406
		{
			yyVAL.str = "create"
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1407
		{
			yyVAL.str = "current_catalog"
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1408
		{
			yyVAL.str = "current_date"
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1409
		{
			yyVAL.str = "current_role"
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1410
		{
			yyVAL.str = "current_time"
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1411
		{
			yyVAL.str = "current_timestamp"
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1412
		{
			yyVAL.str = "current_user"
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1413
		{
			yyVAL.str = "default"
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1414
		{
			yyVAL.str = "deferrable"
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1415
		{
			yyVAL.str = "desc"
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1416
		{
			yyVAL.str = "distinct"
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1417
		{
			yyVAL.str = "do"
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1418
		{
			yyVAL.str = "else"
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1419
		{
			yyVAL.str = "end"
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1420
		{
			yyVAL.str = "except"
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1421
		{
			yyVAL.str = "false"
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1422
		{
			yyVAL.str = "fetch"
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1423
		{
			yyVAL.str = "for"
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1424
		{
			yyVAL.str = "foreign"
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1425
		{
			yyVAL.str = "from"
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1426
		{
			yyVAL.str = "grant"
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1427
		{
			yyVAL.str = "group"
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1428
		{
			yyVAL.str = "having"
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1429
		{
			yyVAL.str = "in"
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1430
		{
			yyVAL.str = "initially"
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1431
		{
			yyVAL.str = "intersect"
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1432
		{
			yyVAL.str = "into"
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1433
		{
			yyVAL.str = "lateral"
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1434
		{
			yyVAL.str = "leading"
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1435
		{
			yyVAL.str = "limit"
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1436
		{
			yyVAL.str = "localtime"
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1437
		{
			yyVAL.str = "localtimestamp"
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1438
		{
			yyVAL.str = "not"
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1439
		{
			yyVAL.str = "null"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1440
		{
			yyVAL.str = "offset"
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1441
		{
			yyVAL.str = "on"
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1442
		{
			yyVAL.str = "only"
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1443
		{
			yyVAL.str = "or"
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1444
		{
			yyVAL.str = "order"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1445
		{
			yyVAL.str = "placing"
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1446
		{
			yyVAL.str = "primary"
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1447
		{
			yyVAL.str = "references"
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1448
		{
			yyVAL.str = "returning"
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1449
		{
			yyVAL.str = "select"
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1450
		{
			yyVAL.str = "session_user"
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1451
		{
			yyVAL.str = "some"
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1452
		{
			yyVAL.str = "symmetric"
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1453
		{
			yyVAL.str = "system_user"
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1454
		{
			yyVAL.str = "table"
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1455
		{
			yyVAL.str = "then"
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1456
		{
			yyVAL.str = "to"
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1457
		{
			yyVAL.str = "trailing"
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1458
		{
			yyVAL.str = "true"
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1459
		{
			yyVAL.str = "union"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1460
		{
			yyVAL.str = "unique"
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1461
		{
			yyVAL.str = "user"
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1462
		{
			yyVAL.str = "using"
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1463
		{
			yyVAL.str = "variadic"
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1464
		{
			yyVAL.str = "when"
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1465
		{
			yyVAL.str = "where"
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1466
		{
			yyVAL.str = "window"
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1467
		{
			yyVAL.str = "with"
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1480
		{
			yyVAL.str = "abort"
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1481
		{
			yyVAL.str = "absent"
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1482
		{
			yyVAL.str = "absolute"
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1483
		{
			yyVAL.str = "access"
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1484
		{
			yyVAL.str = "action"
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1485
		{
			yyVAL.str = "add"
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1486
		{
			yyVAL.str = "admin"
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1487
		{
			yyVAL.str = "after"
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1488
		{
			yyVAL.str = "aggregate"
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1489
		{
			yyVAL.str = "all"
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1490
		{
			yyVAL.str = "also"
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1491
		{
			yyVAL.str = "alter"
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1492
		{
			yyVAL.str = "always"
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1493
		{
			yyVAL.str = "analyse"
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1494
		{
			yyVAL.str = "analyze"
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1495
		{
			yyVAL.str = "and"
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1496
		{
			yyVAL.str = "any"
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1497
		{
			yyVAL.str = "asc"
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1498
		{
			yyVAL.str = "asensitive"
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1499
		{
			yyVAL.str = "assertion"
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1500
		{
			yyVAL.str = "assignment"
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1501
		{
			yyVAL.str = "asymmetric"
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1502
		{
			yyVAL.str = "at"
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1503
		{
			yyVAL.str = "atomic"
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1504
		{
			yyVAL.str = "attach"
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1505
		{
			yyVAL.str = "attribute"
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1506
		{
			yyVAL.str = "authorization"
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1507
		{
			yyVAL.str = "backward"
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1508
		{
			yyVAL.str = "before"
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1509
		{
			yyVAL.str = "begin"
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1510
		{
			yyVAL.str = "between"
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1511
		{
			yyVAL.str = "bigint"
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1512
		{
			yyVAL.str = "binary"
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1513
		{
			yyVAL.str = "bit"
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1514
		{
			yyVAL.str = "boolean"
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1515
		{
			yyVAL.str = "both"
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1516
		{
			yyVAL.str = "breadth"
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1517
		{
			yyVAL.str = "by"
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1518
		{
			yyVAL.str = "cache"
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1519
		{
			yyVAL.str = "call"
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1520
		{
			yyVAL.str = "called"
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1521
		{
			yyVAL.str = "cascade"
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1522
		{
			yyVAL.str = "cascaded"
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1523
		{
			yyVAL.str = "case"
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1524
		{
			yyVAL.str = "cast"
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1525
		{
			yyVAL.str = "catalog"
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1526
		{
			yyVAL.str = "chain"
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1527
		{
			yyVAL.str = "characteristics"
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1528
		{
			yyVAL.str = "check"
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1529
		{
			yyVAL.str = "checkpoint"
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1530
		{
			yyVAL.str = "class"
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1531
		{
			yyVAL.str = "close"
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1532
		{
			yyVAL.str = "cluster"
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1533
		{
			yyVAL.str = "coalesce"
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1534
		{
			yyVAL.str = "collate"
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1535
		{
			yyVAL.str = "collation"
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1536
		{
			yyVAL.str = "column"
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1537
		{
			yyVAL.str = "columns"
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1538
		{
			yyVAL.str = "comment"
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1539
		{
			yyVAL.str = "comments"
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1540
		{
			yyVAL.str = "commit"
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1541
		{
			yyVAL.str = "committed"
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1542
		{
			yyVAL.str = "compression"
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1543
		{
			yyVAL.str = "concurrently"
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1544
		{
			yyVAL.str = "conditional"
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1545
		{
			yyVAL.str = "configuration"
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1546
		{
			yyVAL.str = "conflict"
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1547
		{
			yyVAL.str = "connection"
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1548
		{
			yyVAL.str = "constraint"
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1549
		{
			yyVAL.str = "constraints"
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1550
		{
			yyVAL.str = "content"
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1551
		{
			yyVAL.str = "continue"
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1552
		{
			yyVAL.str = "conversion"
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1553
		{
			yyVAL.str = "copy"
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1554
		{
			yyVAL.str = "cost"
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1555
		{
			yyVAL.str = "cross"
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1556
		{
			yyVAL.str = "csv"
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1557
		{
			yyVAL.str = "cube"
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1558
		{
			yyVAL.str = "current"
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1559
		{
			yyVAL.str = "current_catalog"
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1560
		{
			yyVAL.str = "current_date"
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1561
		{
			yyVAL.str = "current_role"
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1562
		{
			yyVAL.str = "current_schema"
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1563
		{
			yyVAL.str = "current_time"
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1564
		{
			yyVAL.str = "current_timestamp"
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1565
		{
			yyVAL.str = "current_user"
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1566
		{
			yyVAL.str = "cursor"
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1567
		{
			yyVAL.str = "cycle"
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1568
		{
			yyVAL.str = "data"
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1569
		{
			yyVAL.str = "database"
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1570
		{
			yyVAL.str = "deallocate"
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1571
		{
			yyVAL.str = "dec"
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1572
		{
			yyVAL.str = "decimal"
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1573
		{
			yyVAL.str = "declare"
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1574
		{
			yyVAL.str = "default"
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1575
		{
			yyVAL.str = "defaults"
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1576
		{
			yyVAL.str = "deferrable"
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1577
		{
			yyVAL.str = "deferred"
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1578
		{
			yyVAL.str = "definer"
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1579
		{
			yyVAL.str = "delete"
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1580
		{
			yyVAL.str = "delimiter"
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1581
		{
			yyVAL.str = "delimiters"
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1582
		{
			yyVAL.str = "depends"
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1583
		{
			yyVAL.str = "depth"
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1584
		{
			yyVAL.str = "desc"
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1585
		{
			yyVAL.str = "detach"
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1586
		{
			yyVAL.str = "dictionary"
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1587
		{
			yyVAL.str = "disable"
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1588
		{
			yyVAL.str = "discard"
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1589
		{
			yyVAL.str = "distinct"
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1590
		{
			yyVAL.str = "do"
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1591
		{
			yyVAL.str = "document"
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1592
		{
			yyVAL.str = "domain"
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1593
		{
			yyVAL.str = "double"
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1594
		{
			yyVAL.str = "drop"
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1595
		{
			yyVAL.str = "each"
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1596
		{
			yyVAL.str = "else"
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1597
		{
			yyVAL.str = "empty"
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1598
		{
			yyVAL.str = "enable"
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1599
		{
			yyVAL.str = "encoding"
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1600
		{
			yyVAL.str = "encrypted"
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1601
		{
			yyVAL.str = "end"
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1602
		{
			yyVAL.str = "enum"
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1603
		{
			yyVAL.str = "error"
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1604
		{
			yyVAL.str = "escape"
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1605
		{
			yyVAL.str = "event"
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1606
		{
			yyVAL.str = "exclude"
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1607
		{
			yyVAL.str = "excluding"
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1608
		{
			yyVAL.str = "exclusive"
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1609
		{
			yyVAL.str = "execute"
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1610
		{
			yyVAL.str = "exists"
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1611
		{
			yyVAL.str = "explain"
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1612
		{
			yyVAL.str = "expression"
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1613
		{
			yyVAL.str = "extension"
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1614
		{
			yyVAL.str = "external"
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1615
		{
			yyVAL.str = "extract"
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1616
		{
			yyVAL.str = "false"
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1617
		{
			yyVAL.str = "family"
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1618
		{
			yyVAL.str = "finalize"
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1619
		{
			yyVAL.str = "first"
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1620
		{
			yyVAL.str = "float"
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1621
		{
			yyVAL.str = "following"
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1622
		{
			yyVAL.str = "force"
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1623
		{
			yyVAL.str = "foreign"
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1624
		{
			yyVAL.str = "format"
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1625
		{
			yyVAL.str = "forward"
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1626
		{
			yyVAL.str = "freeze"
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1627
		{
			yyVAL.str = "full"
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1628
		{
			yyVAL.str = "function"
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1629
		{
			yyVAL.str = "functions"
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1630
		{
			yyVAL.str = "generated"
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1631
		{
			yyVAL.str = "global"
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1632
		{
			yyVAL.str = "granted"
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1633
		{
			yyVAL.str = "greatest"
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1634
		{
			yyVAL.str = "grouping"
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1635
		{
			yyVAL.str = "groups"
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1636
		{
			yyVAL.str = "handler"
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1637
		{
			yyVAL.str = "header"
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1638
		{
			yyVAL.str = "hold"
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1639
		{
			yyVAL.str = "identity"
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1640
		{
			yyVAL.str = "if"
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1641
		{
			yyVAL.str = "ilike"
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1642
		{
			yyVAL.str = "immediate"
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1643
		{
			yyVAL.str = "immutable"
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1644
		{
			yyVAL.str = "implicit"
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1645
		{
			yyVAL.str = "import"
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1646
		{
			yyVAL.str = "in"
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1647
		{
			yyVAL.str = "include"
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1648
		{
			yyVAL.str = "including"
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1649
		{
			yyVAL.str = "increment"
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1650
		{
			yyVAL.str = "indent"
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1651
		{
			yyVAL.str = "index"
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1652
		{
			yyVAL.str = "indexes"
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1653
		{
			yyVAL.str = "inherit"
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1654
		{
			yyVAL.str = "inherits"
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1655
		{
			yyVAL.str = "initially"
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1656
		{
			yyVAL.str = "inline"
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1657
		{
			yyVAL.str = "inner"
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1658
		{
			yyVAL.str = "inout"
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1659
		{
			yyVAL.str = "input"
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1660
		{
			yyVAL.str = "insensitive"
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1661
		{
			yyVAL.str = "insert"
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1662
		{
			yyVAL.str = "instead"
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1663
		{
			yyVAL.str = "int"
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1664
		{
			yyVAL.str = "integer"
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1665
		{
			yyVAL.str = "interval"
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1666
		{
			yyVAL.str = "invoker"
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1667
		{
			yyVAL.str = "is"
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1668
		{
			yyVAL.str = "isolation"
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1669
		{
			yyVAL.str = "join"
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1670
		{
			yyVAL.str = "json"
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1671
		{
			yyVAL.str = "json_array"
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1672
		{
			yyVAL.str = "json_arrayagg"
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1673
		{
			yyVAL.str = "json_exists"
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1674
		{
			yyVAL.str = "json_object"
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1675
		{
			yyVAL.str = "json_objectagg"
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1676
		{
			yyVAL.str = "json_query"
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1677
		{
			yyVAL.str = "json_scalar"
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1678
		{
			yyVAL.str = "json_serialize"
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1679
		{
			yyVAL.str = "json_table"
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1680
		{
			yyVAL.str = "json_value"
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1681
		{
			yyVAL.str = "keep"
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1682
		{
			yyVAL.str = "key"
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1683
		{
			yyVAL.str = "keys"
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1684
		{
			yyVAL.str = "label"
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1685
		{
			yyVAL.str = "language"
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1686
		{
			yyVAL.str = "large"
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1687
		{
			yyVAL.str = "last"
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1688
		{
			yyVAL.str = "lateral"
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1689
		{
			yyVAL.str = "leading"
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1690
		{
			yyVAL.str = "leakproof"
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1691
		{
			yyVAL.str = "least"
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1692
		{
			yyVAL.str = "left"
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1693
		{
			yyVAL.str = "level"
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1694
		{
			yyVAL.str = "like"
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1695
		{
			yyVAL.str = "listen"
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1696
		{
			yyVAL.str = "load"
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1697
		{
			yyVAL.str = "local"
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1698
		{
			yyVAL.str = "localtime"
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1699
		{
			yyVAL.str = "localtimestamp"
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1700
		{
			yyVAL.str = "location"
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1701
		{
			yyVAL.str = "lock"
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1702
		{
			yyVAL.str = "locked"
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1703
		{
			yyVAL.str = "logged"
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1704
		{
			yyVAL.str = "mapping"
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1705
		{
			yyVAL.str = "match"
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1706
		{
			yyVAL.str = "matched"
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1707
		{
			yyVAL.str = "materialized"
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1708
		{
			yyVAL.str = "maxvalue"
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1709
		{
			yyVAL.str = "merge"
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1710
		{
			yyVAL.str = "merge_action"
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1711
		{
			yyVAL.str = "method"
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1712
		{
			yyVAL.str = "minvalue"
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1713
		{
			yyVAL.str = "mode"
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1714
		{
			yyVAL.str = "move"
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1715
		{
			yyVAL.str = "name"
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1716
		{
			yyVAL.str = "names"
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1717
		{
			yyVAL.str = "national"
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1718
		{
			yyVAL.str = "natural"
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1719
		{
			yyVAL.str = "nchar"
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1720
		{
			yyVAL.str = "nested"
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1721
		{
			yyVAL.str = "new"
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1722
		{
			yyVAL.str = "next"
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1723
		{
			yyVAL.str = "nfc"
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1724
		{
			yyVAL.str = "nfd"
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1725
		{
			yyVAL.str = "nfkc"
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1726
		{
			yyVAL.str = "nfkd"
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1727
		{
			yyVAL.str = "no"
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1728
		{
			yyVAL.str = "none"
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1729
		{
			yyVAL.str = "normalize"
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1730
		{
			yyVAL.str = "normalized"
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1731
		{
			yyVAL.str = "not"
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1732
		{
			yyVAL.str = "nothing"
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1733
		{
			yyVAL.str = "notify"
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1734
		{
			yyVAL.str = "nowait"
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1735
		{
			yyVAL.str = "null"
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1736
		{
			yyVAL.str = "nullif"
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1737
		{
			yyVAL.str = "nulls"
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1738
		{
			yyVAL.str = "numeric"
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1739
		{
			yyVAL.str = "object"
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1740
		{
			yyVAL.str = "of"
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1741
		{
			yyVAL.str = "off"
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1742
		{
			yyVAL.str = "oids"
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1743
		{
			yyVAL.str = "old"
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1744
		{
			yyVAL.str = "omit"
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1745
		{
			yyVAL.str = "only"
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1746
		{
			yyVAL.str = "operator"
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1747
		{
			yyVAL.str = "option"
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1748
		{
			yyVAL.str = "options"
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1749
		{
			yyVAL.str = "or"
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1750
		{
			yyVAL.str = "ordinality"
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1751
		{
			yyVAL.str = "others"
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1752
		{
			yyVAL.str = "out"
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1753
		{
			yyVAL.str = "outer"
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1754
		{
			yyVAL.str = "overlay"
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1755
		{
			yyVAL.str = "overriding"
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1756
		{
			yyVAL.str = "owned"
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1757
		{
			yyVAL.str = "owner"
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1758
		{
			yyVAL.str = "parallel"
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1759
		{
			yyVAL.str = "parameter"
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1760
		{
			yyVAL.str = "parser"
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1761
		{
			yyVAL.str = "partial"
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1762
		{
			yyVAL.str = "partition"
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1763
		{
			yyVAL.str = "passing"
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1764
		{
			yyVAL.str = "password"
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1765
		{
			yyVAL.str = "path"
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1766
		{
			yyVAL.str = "placing"
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1767
		{
			yyVAL.str = "plan"
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1768
		{
			yyVAL.str = "plans"
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1769
		{
			yyVAL.str = "policy"
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1770
		{
			yyVAL.str = "position"
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1771
		{
			yyVAL.str = "preceding"
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1772
		{
			yyVAL.str = "prepare"
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1773
		{
			yyVAL.str = "prepared"
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1774
		{
			yyVAL.str = "preserve"
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1775
		{
			yyVAL.str = "primary"
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1776
		{
			yyVAL.str = "prior"
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1777
		{
			yyVAL.str = "privileges"
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1778
		{
			yyVAL.str = "procedural"
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1779
		{
			yyVAL.str = "procedure"
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1780
		{
			yyVAL.str = "procedures"
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1781
		{
			yyVAL.str = "program"
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1782
		{
			yyVAL.str = "publication"
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1783
		{
			yyVAL.str = "quote"
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1784
		{
			yyVAL.str = "quotes"
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1785
		{
			yyVAL.str = "range"
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1786
		{
			yyVAL.str = "read"
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1787
		{
			yyVAL.str = "real"
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1788
		{
			yyVAL.str = "reassign"
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1789
		{
			yyVAL.str = "recheck"
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1790
		{
			yyVAL.str = "recursive"
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1791
		{
			yyVAL.str = "ref"
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1792
		{
			yyVAL.str = "references"
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1793
		{
			yyVAL.str = "referencing"
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1794
		{
			yyVAL.str = "refresh"
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1795
		{
			yyVAL.str = "reindex"
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1796
		{
			yyVAL.str = "relative"
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1797
		{
			yyVAL.str = "release"
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1798
		{
			yyVAL.str = "rename"
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1799
		{
			yyVAL.str = "repeatable"
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1800
		{
			yyVAL.str = "replace"
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1801
		{
			yyVAL.str = "replica"
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1802
		{
			yyVAL.str = "reset"
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1803
		{
			yyVAL.str = "restart"
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1804
		{
			yyVAL.str = "restrict"
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1805
		{
			yyVAL.str = "return"
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1806
		{
			yyVAL.str = "returns"
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1807
		{
			yyVAL.str = "revoke"
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1808
		{
			yyVAL.str = "right"
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1809
		{
			yyVAL.str = "role"
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1810
		{
			yyVAL.str = "rollback"
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1811
		{
			yyVAL.str = "rollup"
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1812
		{
			yyVAL.str = "routine"
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1813
		{
			yyVAL.str = "routines"
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1814
		{
			yyVAL.str = "row"
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1815
		{
			yyVAL.str = "rows"
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1816
		{
			yyVAL.str = "rule"
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1817
		{
			yyVAL.str = "savepoint"
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1818
		{
			yyVAL.str = "scalar"
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1819
		{
			yyVAL.str = "schema"
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1820
		{
			yyVAL.str = "schemas"
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1821
		{
			yyVAL.str = "scroll"
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1822
		{
			yyVAL.str = "search"
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1823
		{
			yyVAL.str = "security"
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1824
		{
			yyVAL.str = "select"
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1825
		{
			yyVAL.str = "sequence"
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1826
		{
			yyVAL.str = "sequences"
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1827
		{
			yyVAL.str = "serializable"
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1828
		{
			yyVAL.str = "server"
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1829
		{
			yyVAL.str = "session"
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1830
		{
			yyVAL.str = "session_user"
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1831
		{
			yyVAL.str = "set"
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1832
		{
			yyVAL.str = "setof"
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1833
		{
			yyVAL.str = "sets"
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1834
		{
			yyVAL.str = "share"
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1835
		{
			yyVAL.str = "show"
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1836
		{
			yyVAL.str = "similar"
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1837
		{
			yyVAL.str = "simple"
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1838
		{
			yyVAL.str = "skip"
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1839
		{
			yyVAL.str = "smallint"
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1840
		{
			yyVAL.str = "snapshot"
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1841
		{
			yyVAL.str = "some"
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1842
		{
			yyVAL.str = "source"
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1843
		{
			yyVAL.str = "sql"
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1844
		{
			yyVAL.str = "stable"
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1845
		{
			yyVAL.str = "standalone"
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1846
		{
			yyVAL.str = "start"
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1847
		{
			yyVAL.str = "statement"
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1848
		{
			yyVAL.str = "statistics"
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1849
		{
			yyVAL.str = "stdin"
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1850
		{
			yyVAL.str = "stdout"
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1851
		{
			yyVAL.str = "storage"
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1852
		{
			yyVAL.str = "stored"
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1853
		{
			yyVAL.str = "strict"
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1854
		{
			yyVAL.str = "string"
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1855
		{
			yyVAL.str = "strip"
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1856
		{
			yyVAL.str = "subscription"
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1857
		{
			yyVAL.str = "substring"
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1858
		{
			yyVAL.str = "support"
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1859
		{
			yyVAL.str = "symmetric"
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1860
		{
			yyVAL.str = "sysid"
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1861
		{
			yyVAL.str = "system"
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1862
		{
			yyVAL.str = "system_user"
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1863
		{
			yyVAL.str = "table"
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1864
		{
			yyVAL.str = "tables"
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1865
		{
			yyVAL.str = "tablesample"
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1866
		{
			yyVAL.str = "tablespace"
		}
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1867
		{
			yyVAL.str = "target"
		}
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1868
		{
			yyVAL.str = "temp"
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1869
		{
			yyVAL.str = "template"
		}
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1870
		{
			yyVAL.str = "temporary"
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1871
		{
			yyVAL.str = "text"
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1872
		{
			yyVAL.str = "then"
		}
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1873
		{
			yyVAL.str = "ties"
		}
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1874
		{
			yyVAL.str = "time"
		}
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1875
		{
			yyVAL.str = "timestamp"
		}
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1876
		{
			yyVAL.str = "trailing"
		}
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1877
		{
			yyVAL.str = "transaction"
		}
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1878
		{
			yyVAL.str = "transform"
		}
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1879
		{
			yyVAL.str = "treat"
		}
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1880
		{
			yyVAL.str = "trigger"
		}
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1881
		{
			yyVAL.str = "trim"
		}
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1882
		{
			yyVAL.str = "true"
		}
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1883
		{
			yyVAL.str = "truncate"
		}
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1884
		{
			yyVAL.str = "trusted"
		}
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1885
		{
			yyVAL.str = "type"
		}
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1886
		{
			yyVAL.str = "types"
		}
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1887
		{
			yyVAL.str = "uescape"
		}
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1888
		{
			yyVAL.str = "unbounded"
		}
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1889
		{
			yyVAL.str = "uncommitted"
		}
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1890
		{
			yyVAL.str = "unconditional"
		}
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1891
		{
			yyVAL.str = "unencrypted"
		}
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1892
		{
			yyVAL.str = "unique"
		}
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1893
		{
			yyVAL.str = "unknown"
		}
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1894
		{
			yyVAL.str = "unlisten"
		}
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1895
		{
			yyVAL.str = "unlogged"
		}
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1896
		{
			yyVAL.str = "until"
		}
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1897
		{
			yyVAL.str = "update"
		}
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1898
		{
			yyVAL.str = "user"
		}
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1899
		{
			yyVAL.str = "using"
		}
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1900
		{
			yyVAL.str = "vacuum"
		}
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1901
		{
			yyVAL.str = "valid"
		}
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1902
		{
			yyVAL.str = "validate"
		}
	case 1047:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1903
		{
			yyVAL.str = "validator"
		}
	case 1048:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1904
		{
			yyVAL.str = "value"
		}
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1905
		{
			yyVAL.str = "values"
		}
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1906
		{
			yyVAL.str = "varchar"
		}
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1907
		{
			yyVAL.str = "variadic"
		}
	case 1052:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1908
		{
			yyVAL.str = "verbose"
		}
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1909
		{
			yyVAL.str = "version"
		}
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1910
		{
			yyVAL.str = "view"
		}
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1911
		{
			yyVAL.str = "views"
		}
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1912
		{
			yyVAL.str = "volatile"
		}
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1913
		{
			yyVAL.str = "when"
		}
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1914
		{
			yyVAL.str = "whitespace"
		}
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1915
		{
			yyVAL.str = "work"
		}
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1916
		{
			yyVAL.str = "wrapper"
		}
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1917
		{
			yyVAL.str = "write"
		}
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1918
		{
			yyVAL.str = "xml"
		}
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1919
		{
			yyVAL.str = "xmlattributes"
		}
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1920
		{
			yyVAL.str = "xmlconcat"
		}
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1921
		{
			yyVAL.str = "xmlelement"
		}
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1922
		{
			yyVAL.str = "xmlexists"
		}
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1923
		{
			yyVAL.str = "xmlforest"
		}
	case 1068:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1924
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1925
		{
			yyVAL.str = "xmlparse"
		}
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1926
		{
			yyVAL.str = "xmlpi"
		}
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1927
		{
			yyVAL.str = "xmlroot"
		}
	case 1072:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1928
		{
			yyVAL.str = "xmlserialize"
		}
	case 1073:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1929
		{
			yyVAL.str = "xmltable"
		}
	case 1074:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1930
		{
			yyVAL.str = "yes"
		}
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1931
		{
			yyVAL.str = "zone"
		}
	case 1076:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1946
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1077:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1948
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1078:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1952
		{
			collateClause := ast.NewCollateClause(yyDollar[3].list)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 1079:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1958
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[1].node), 0)
		}
	case 1080:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1963
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[1].node), 0)
		}
	case 1081:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1968
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1082:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1973
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1083:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1978
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1084:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1983
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1085:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1988
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1086:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1993
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1087:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1998
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1088:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2003
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1089:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2008
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1090:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2013
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1091:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2018
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1092:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2023
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1093:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2028
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1094:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2033
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1095:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2038
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1096:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2042
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1097:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2046
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1098:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2050
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1099:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2054
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2058
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2062
		{
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1102:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2067
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1103:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2074
		{
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1104:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2079
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2086
		{
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1106:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2091
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2098
		{
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1108:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2103
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2110
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1110:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2117
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1111:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2124
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1112:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2131
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2138
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2142
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2146
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2150
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2154
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlaps"))
			leftList := yyDollar[1].list
			rightList := yyDollar[3].list
			combinedList := ast.NewNodeList()
			combinedList.Items = append(leftList.Items, rightList.Items...)
			yyVAL.node = ast.NewFuncCall(funcName, combinedList, 0)
		}
	case 1118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2163
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_TRUE)
		}
	case 1119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2167
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_TRUE)
		}
	case 1120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2171
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_FALSE)
		}
	case 1121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2175
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_FALSE)
		}
	case 1122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2179
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_UNKNOWN)
		}
	case 1123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2183
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_UNKNOWN)
		}
	case 1124:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2187
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1125:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2192
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1126:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2197
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1127:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2202
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1128:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2207
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1129:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2212
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2217
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2222
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2227
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			sublink := ast.NewSubLink(subLinkType, yyDollar[4].stmt)
			sublink.Testexpr = yyDollar[1].node
			sublink.OperName = operName
			yyVAL.node = sublink
		}
	case 1133:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2236
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			if subLinkType == ast.ANY_SUBLINK {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ANY, operName, yyDollar[1].node, yyDollar[5].node, 0)
			} else {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ALL, operName, yyDollar[1].node, yyDollar[5].node, 0)
			}
		}
	case 1134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2246
		{
			yylex.Error("UNIQUE predicate is not yet implemented")
		}
	case 1135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2250
		{
			args := ast.NewNodeList(yyDollar[1].node.(ast.Expression))
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
		}
	case 1136:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2255
		{
			args := ast.NewNodeList(yyDollar[1].node.(ast.Expression))
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2261
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2267
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[3].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1139:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2274
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1140:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2281
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[4].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2289
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[3].ival)
			uniqueKeys := yyDollar[4].bval
			yyVAL.node = ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
		}
	case 1142:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2306
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[4].ival)
			uniqueKeys := yyDollar[5].bval
			jsonPredicate := ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(jsonPredicate))
		}
	case 1143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2325
		{
			yyVAL.node = ast.NewSetToDefault(0, 0, 0)
		}
	case 1144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2330
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2332
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2336
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2341
		{
			yyVAL.node = doNegate(yyDollar[2].node, 0)
		}
	case 1148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2345
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2350
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2355
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2360
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2365
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2370
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2375
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2380
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2385
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2390
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2395
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2400
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2405
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2409
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1162:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2413
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1163:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2418
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2423
		{
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1165:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2428
		{
			args := ast.NewNodeList(yyDollar[1].node)
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2435
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2436
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2438
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 1169:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2447
		{
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewParenExpr(ast.NewA_Indirection(yyDollar[2].node, yyDollar[4].list, 0), 0)
			} else {
				yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
			}
		}
	case 1170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2454
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2455
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2457
		{
			yyVAL.node = ast.NewExprSublink(yyDollar[1].stmt)
		}
	case 1173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2461
		{
			sublink := ast.NewExprSublink(yyDollar[1].stmt)
			yyVAL.node = ast.NewA_Indirection(sublink, yyDollar[2].list, 0)
		}
	case 1174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2466
		{
			yyVAL.node = ast.NewExistsSublink(yyDollar[2].stmt)
		}
	case 1175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2470
		{
			yyVAL.node = ast.NewArraySublink(yyDollar[2].stmt)
		}
	case 1176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2474
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2478
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = rowExpr
		}
	case 1178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2484
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_IMPLICIT_CAST
			yyVAL.node = rowExpr
		}
	case 1179:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2490
		{
			exprList := yyDollar[3].list
			grouping := &ast.GroupingFunc{
				BaseExpr: ast.BaseExpr{BaseNode: ast.BaseNode{Tag: ast.T_GroupingFunc}},
				Args:     exprList,
			}
			yyVAL.node = grouping
		}
	case 1180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2507
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2508
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2509
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2510
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2511
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2515
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 1186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2519
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 1187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2523
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 1188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2527
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 1189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2531
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 1190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2535
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 1191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2539
		{
			yyVAL.node = ast.NewA_Const(ast.NewBitString(yyDollar[1].str), 0)
		}
	case 1192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2543
		{
			// This is a bit constant per SQL99
			yyVAL.node = ast.NewA_Const(ast.NewBitString(yyDollar[1].str), 0)
		}
	case 1193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2548
		{
			// generic type 'literal' syntax
			typeName := makeTypeNameFromNodeList(yyDollar[1].list)
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, typeName, 0)
		}
	case 1194:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2555
		{
			// generic syntax with a type modifier
			typeName := makeTypeNameFromNodeList(yyDollar[1].list)
			// For now, we'll skip the error checking for NamedArgExpr and ORDER BY
			// TODO: Add proper validation when needed
			typeName.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[6].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, typeName, 0)
		}
	case 1195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2565
		{
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, yyDollar[1].typnam, 0)
		}
	case 1196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2570
		{
			t := yyDollar[1].typnam
			t.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 1197:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2577
		{
			t := yyDollar[1].typnam
			// INTERVAL_FULL_RANGE equivalent and precision
			fullRange := ast.NewInteger(ast.INTERVAL_FULL_RANGE)
			precision := ast.NewInteger(yyDollar[3].ival)
			t.Typmods = ast.NewNodeList(fullRange, precision)
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[5].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 1198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2588
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2591
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2594
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2595
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 1202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2596
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 1203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2600
		{
			yyVAL.typnam = makeTypeNameFromNodeList(ast.NewNodeList(ast.NewString("interval")))
		}
	case 1204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2607
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_YEAR))
		}
	case 1205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2609
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_MONTH))
		}
	case 1206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2611
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY))
		}
	case 1207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2613
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_HOUR))
		}
	case 1208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2615
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_MINUTE))
		}
	case 1209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2617
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2619
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_YEAR | ast.INTERVAL_MASK_MONTH))
		}
	case 1211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2623
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR))
		}
	case 1212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2627
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE))
		}
	case 1213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2631
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2642
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE))
		}
	case 1215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2646
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2657
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1217:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2668
		{
			yyVAL.list = nil
		}
	case 1218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2673
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_SECOND))
		}
	case 1219:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2677
		{
			yyVAL.list = ast.NewNodeList(
				ast.NewInteger(ast.INTERVAL_MASK_SECOND),
				ast.NewInteger(yyDollar[3].ival), // precision
			)
		}
	case 1220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2687
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 1221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2691
		{
			// Create all fields: first ColId followed by indirection items
			allFields := []ast.Node{ast.NewString(yyDollar[1].str)}
			allFields = append(allFields, yyDollar[2].list.Items...)
			yyVAL.node = ast.NewColumnRef(allFields...)
		}
	case 1222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2701
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2705
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2711
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1225:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2712
		{
			yyVAL.node = nil
		}
	case 1226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2716
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2720
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 1228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2724
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 1229:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2728
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 1230:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2733
		{
			yyVAL.list = nil
		}
	case 1231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2735
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2747
		{
			funcCall := yyDollar[1].node.(*ast.FuncCall)

			// Apply within_group_clause if present
			if yyDollar[2].list != nil {
				// WITHIN GROUP (ORDER BY ...) - store the sort list
				funcCall.AggOrder = yyDollar[2].list
				funcCall.AggWithinGroup = true
			}

			// Apply filter_clause if present
			if yyDollar[3].node != nil {
				// FILTER (WHERE condition) - store the filter expression
				funcCall.AggFilter = yyDollar[3].node
			}

			// Apply over_clause if present (window functions)
			if yyDollar[4].windef != nil {
				funcCall.Over = yyDollar[4].windef
			}

			yyVAL.node = funcCall
		}
	case 1233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2771
		{
			jsonAgg := yyDollar[1].node

			// Create or get the Constructor
			var constructor *ast.JsonAggConstructor

			// Handle the filter_clause and over_clause by setting them in the Constructor
			switch jsonFunc := jsonAgg.(type) {
			case *ast.JsonObjectAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			case *ast.JsonArrayAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			}

			// Set filter and over clauses outside the switch (DRY)
			if constructor != nil {
				if yyDollar[2].node != nil {
					constructor.AggFilter = yyDollar[2].node.(ast.Node)
				}
				if yyDollar[3].windef != nil {
					constructor.Over = yyDollar[3].windef
				}
			}

			yyVAL.node = jsonAgg
		}
	case 1234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2804
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1235:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2810
		{
			// SystemFuncName("pg_collation_for")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("pg_collation_for"))
			funcCall := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2818
		{
			// makeSQLValueFunction(SVFOP_CURRENT_DATE, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_DATE, 0, -1, 0)
		}
	case 1237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2823
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIME, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIME, 0, -1, 0)
		}
	case 1238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2828
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIME_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIME_N, 0, yyDollar[3].ival, 0)
		}
	case 1239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2833
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIMESTAMP, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIMESTAMP, 0, -1, 0)
		}
	case 1240:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2838
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIMESTAMP_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIMESTAMP_N, 0, yyDollar[3].ival, 0)
		}
	case 1241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2843
		{
			// makeSQLValueFunction(SVFOP_LOCALTIME, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIME, 0, -1, 0)
		}
	case 1242:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2848
		{
			// makeSQLValueFunction(SVFOP_LOCALTIME_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIME_N, 0, yyDollar[3].ival, 0)
		}
	case 1243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2853
		{
			// makeSQLValueFunction(SVFOP_LOCALTIMESTAMP, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIMESTAMP, 0, -1, 0)
		}
	case 1244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2858
		{
			// makeSQLValueFunction(SVFOP_LOCALTIMESTAMP_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIMESTAMP_N, 0, yyDollar[3].ival, 0)
		}
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2863
		{
			// makeSQLValueFunction(SVFOP_CURRENT_ROLE, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_ROLE, 0, -1, 0)
		}
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2868
		{
			// makeSQLValueFunction(SVFOP_CURRENT_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_USER, 0, -1, 0)
		}
	case 1247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2873
		{
			// makeSQLValueFunction(SVFOP_SESSION_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_SESSION_USER, 0, -1, 0)
		}
	case 1248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2878
		{
			// SystemFuncName("system_user")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("system_user"))
			funcCall := ast.NewFuncCall(funcName, nil, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2886
		{
			// makeSQLValueFunction(SVFOP_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_USER, 0, -1, 0)
		}
	case 1250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2891
		{
			// makeSQLValueFunction(SVFOP_CURRENT_CATALOG, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_CATALOG, 0, -1, 0)
		}
	case 1251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2896
		{
			// makeSQLValueFunction(SVFOP_CURRENT_SCHEMA, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_SCHEMA, 0, -1, 0)
		}
	case 1252:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2901
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[3].node, yyDollar[5].typnam, 0)
		}
	case 1253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2905
		{
			// SystemFuncName("extract")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("extract"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2913
		{
			// SystemFuncName("normalize")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("normalize"))
			funcCall := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node), 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1255:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2921
		{
			// SystemFuncName("normalize")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("normalize"))
			args := ast.NewNodeList(yyDollar[3].node)
			args.Items = append(args.Items, ast.NewA_Const(ast.NewString(yyDollar[5].str), -1))
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2931
		{
			// SystemFuncName("overlay")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlay"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2939
		{
			// SystemFuncName("overlay")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlay"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2947
		{
			// SystemFuncName("position")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("position"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2955
		{
			// SystemFuncName("substring")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("substring"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2963
		{
			// SystemFuncName("substring")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("substring"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1261:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2971
		{
			// SystemFuncName("treat")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), llast(yyDollar[5].typnam.Names))
			args := ast.NewNodeList(yyDollar[3].node)
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1262:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2980
		{
			// SystemFuncName("btrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("btrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1263:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2988
		{
			// SystemFuncName("ltrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("ltrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1264:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2996
		{
			// SystemFuncName("rtrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("rtrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3004
		{
			// SystemFuncName("btrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("btrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1266:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3012
		{
			// makeSimpleA_Expr(AEXPR_NULLIF, "=", $3, $5, @1)
			operName := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NULLIF, operName, yyDollar[3].node, yyDollar[5].node, 0)
		}
	case 1267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3018
		{
			// CoalesceExpr *c = makeNode(CoalesceExpr); c->args = $3; c->location = @1
			yyVAL.node = ast.NewCoalesceExpr(0, yyDollar[3].list)
		}
	case 1268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3023
		{
			// MinMaxExpr *v = makeNode(MinMaxExpr); v->args = $3; v->op = IS_GREATEST; v->location = @1
			yyVAL.node = ast.NewMinMaxExpr(0, 0, 0, ast.IS_GREATEST, yyDollar[3].list, 0)
		}
	case 1269:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3028
		{
			// MinMaxExpr *v = makeNode(MinMaxExpr); v->args = $3; v->op = IS_LEAST; v->location = @1
			yyVAL.node = ast.NewMinMaxExpr(0, 0, 0, ast.IS_LEAST, yyDollar[3].list, 0)
		}
	case 1270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3033
		{
			// makeXmlExpr(IS_XMLCONCAT, NULL, NIL, $3, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLCONCAT, "", nil, nil, yyDollar[3].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1271:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3038
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, NIL, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, nil, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1272:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3043
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, $6, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, yyDollar[6].list, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1273:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3048
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, NIL, $6, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, nil, nil, yyDollar[6].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1274:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3053
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, $6, $8, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, yyDollar[6].list, nil, yyDollar[8].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3058
		{
			// makeXmlExpr(IS_XMLFOREST, NULL, $3, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLFOREST, "", yyDollar[3].list, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1276:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3063
		{
			// makeXmlExpr(IS_XMLPARSE, NULL, NIL, list_make2($4, makeBoolAConst($5, -1)), @1)
			// x->xmloption = $3
			wsOption := ast.NewA_Const(ast.NewBoolean(yyDollar[5].bval), -1)
			args := ast.NewNodeList(yyDollar[4].node, wsOption)
			xmlOption := ast.XmlOptionType(yyDollar[3].ival)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPARSE, "", nil, nil, args, xmlOption, false, 0, -1, 0)
		}
	case 1277:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3072
		{
			// SystemFuncName("xmlexists") - xmlexists(A PASSING [BY REF] B [BY REF]) is converted to xmlexists(A, B)
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("xmlexists"))
			args := ast.NewNodeList(yyDollar[3].node, yyDollar[4].node)
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1278:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3081
		{
			// makeXmlExpr(IS_XMLPI, $4, NIL, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPI, yyDollar[4].str, nil, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1279:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3086
		{
			// makeXmlExpr(IS_XMLPI, $4, NIL, list_make1($6), @1)
			args := ast.NewNodeList(yyDollar[6].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPI, yyDollar[4].str, nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1280:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3092
		{
			// makeXmlExpr(IS_XMLROOT, NULL, NIL, list_make3(...), @1)
			args := ast.NewNodeList(yyDollar[3].node, yyDollar[5].node, yyDollar[6].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLROOT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3098
		{
			/* Support for legacy (non-standard) json_object() */
			funcName := ast.NewNodeList(ast.NewString("json_object"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1282:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3109
		{
			n := ast.NewJsonObjectConstructor(yyDollar[3].list, yyDollar[4].bval, yyDollar[5].bval)
			if yyDollar[6].node != nil {
				n.Output = yyDollar[6].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3117
		{
			n := ast.NewJsonObjectConstructor(nil, false, false)
			if yyDollar[3].node != nil {
				n.Output = yyDollar[3].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1284:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3129
		{
			n := ast.NewJsonArrayConstructor(yyDollar[3].list, yyDollar[4].bval)
			if yyDollar[5].node != nil {
				n.Output = yyDollar[5].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1285:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3141
		{
			n := ast.NewJsonArrayQueryConstructor(yyDollar[3].stmt, true) /* XXX: absent_on_null = true */
			if yyDollar[4].node != nil {
				n.Format = yyDollar[4].node.(*ast.JsonFormat)
			}
			if yyDollar[5].node != nil {
				n.Output = yyDollar[5].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3154
		{
			n := ast.NewJsonArrayConstructor(nil, true)
			if yyDollar[3].node != nil {
				n.Output = yyDollar[3].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1287:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3162
		{
			n := ast.NewJsonParseExpr(yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[4].bval)
			n.Output = nil
			yyVAL.node = n
		}
	case 1288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3168
		{
			n := ast.NewJsonScalarExpr(yyDollar[3].node.(ast.Expr))
			n.Output = nil
			yyVAL.node = n
		}
	case 1289:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3174
		{
			n := ast.NewJsonSerializeExpr(yyDollar[3].node.(*ast.JsonValueExpr))
			if yyDollar[4].node != nil {
				n.Output = yyDollar[4].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3182
		{
			m := ast.NewMergeSupportFunc(ast.TEXTOID, ast.InvalidOid, 0)
			yyVAL.node = m
		}
	case 1291:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:3193
		{
			n := ast.NewJsonFuncExpr(ast.JSON_QUERY_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			if yyDollar[7].node != nil {
				n.Output = yyDollar[7].node.(*ast.JsonOutput)
			}
			n.Wrapper = ast.JsonWrapper(yyDollar[8].ival)
			n.Quotes = ast.JsonQuotes(yyDollar[9].ival)
			if yyDollar[10].node != nil {
				behaviors := yyDollar[10].node.(*ast.NodeList)
				if linitial(behaviors) != nil {
					n.OnEmpty = linitial(behaviors).(*ast.JsonBehavior)
				}
				if lsecond(behaviors) != nil {
					n.OnError = lsecond(behaviors).(*ast.JsonBehavior)
				}
			}
			yyVAL.node = n
		}
	case 1292:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3218
		{
			n := ast.NewJsonFuncExpr(ast.JSON_EXISTS_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			n.Output = nil
			if yyDollar[7].node != nil {
				n.OnError = yyDollar[7].node.(*ast.JsonBehavior)
			}
			yyVAL.node = n
		}
	case 1293:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3234
		{
			n := ast.NewJsonFuncExpr(ast.JSON_VALUE_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			if yyDollar[7].node != nil {
				n.Output = yyDollar[7].node.(*ast.JsonOutput)
			}
			if yyDollar[8].node != nil {
				behaviors := yyDollar[8].node.(*ast.NodeList)
				if linitial(behaviors) != nil {
					n.OnEmpty = linitial(behaviors).(*ast.JsonBehavior)
				}
				if lsecond(behaviors) != nil {
					n.OnError = lsecond(behaviors).(*ast.JsonBehavior)
				}
			}
			yyVAL.node = n
		}
	case 1294:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3254
		{
			// XmlSerialize node - n->xmloption = $3; n->expr = $4; n->typeName = $6; n->indent = $7;
			xmlOption := ast.XmlOptionType(yyDollar[3].ival)
			yyVAL.node = ast.NewXmlSerialize(xmlOption, yyDollar[4].node, yyDollar[6].typnam, yyDollar[7].bval, 0)
		}
	case 1295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3264
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3268
		{
			yyVAL.list = nil
		}
	case 1297:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3275
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1298:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3279
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3283
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node)
		}
	case 1300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3287
		{
			sysTypeName := &ast.TypeName{
				Names:   ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("int4")),
				Typemod: -1,
			}
			tc := ast.NewTypeCast(yyDollar[3].node, sysTypeName, -1)
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, ast.NewInteger(1), tc)
		}
	case 1301:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3296
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3303
		{
			yyDollar[3].list.Append(yyDollar[1].node)
			yyVAL.list = yyDollar[3].list
		}
	case 1303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3308
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3312
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3319
		{
			// list_make2(makeStringConst($1, @1), $3)
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str), yyDollar[3].node)
		}
	case 1306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3329
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3330
		{
			yyVAL.str = "year"
		}
	case 1308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3331
		{
			yyVAL.str = "month"
		}
	case 1309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3332
		{
			yyVAL.str = "day"
		}
	case 1310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3333
		{
			yyVAL.str = "hour"
		}
	case 1311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3334
		{
			yyVAL.str = "minute"
		}
	case 1312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3335
		{
			yyVAL.str = "second"
		}
	case 1313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3336
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1314:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3341
		{
			/* overlay(A PLACING B FROM C FOR D) is converted to overlay(A, B, C, D) */
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 1315:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3346
		{
			/* overlay(A PLACING B FROM C) is converted to overlay(A, B, C) */
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3354
		{
			yyVAL.list = ast.NewNodeList(yyDollar[3].node, yyDollar[1].node)
		}
	case 1317:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3357
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3362
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3366
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3374
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3378
		{
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3383
		{
			yyVAL.bval = true
		}
	case 1323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3384
		{
			yyVAL.bval = false
		}
	case 1324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3385
		{
			yyVAL.bval = false
		}
	case 1325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3388
		{
			yyVAL.bval = true
		}
	case 1326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3389
		{
			yyVAL.bval = false
		}
	case 1327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3390
		{
			yyVAL.bval = false
		}
	case 1328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3395
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3399
		{
			yyVAL.node = ast.NewA_Const(ast.NewNull(), 0)
		}
	case 1330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3406
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_YES)), 0)
		}
	case 1331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3410
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_NO)), 0)
		}
	case 1332:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3414
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_NO_VALUE)), 0)
		}
	case 1333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3418
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_OMITTED)), 0)
		}
	case 1334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3425
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3426
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3427
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3431
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3435
		{
			// PostgreSQL uses check_func_name here
			// We implement the logic inline - prepend ColId to indirection list
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[2].list.Items...)
			result := ast.NewNodeList(items...)
			yyVAL.list = result
		}
	case 1339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3446
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].list, nil, 0)
		}
	case 1340:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3450
		{
			// Special case for aggregates like COUNT(*) - set AggStar to true
			funcCall := ast.NewFuncCall(yyDollar[1].list, nil, 0)
			funcCall.AggStar = true
			yyVAL.node = funcCall
		}
	case 1341:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3457
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[3].list, 0)
			// Note: In full implementation, would set agg_order from $4
			yyVAL.node = funcCall
		}
	case 1342:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3463
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, ast.NewNodeList(yyDollar[4].node), 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1343:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3469
		{
			yyDollar[3].list.Append(yyDollar[6].node)
			args := yyDollar[3].list
			funcCall := ast.NewFuncCall(yyDollar[1].list, args, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $7
			yyVAL.node = funcCall
		}
	case 1344:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3477
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would mark as aggregate and set agg_order from $5
			yyVAL.node = funcCall
		}
	case 1345:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3483
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would set agg_distinct = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3491
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3495
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3502
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3506
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3510
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1351:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3517
		{
			yyVAL.node = ast.NewCaseExpr(0, yyDollar[2].node, yyDollar[3].list, yyDollar[4].node)
		}
	case 1352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3522
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3523
		{
			yyVAL.node = nil
		}
	case 1354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3527
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3529
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1356:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3537
		{
			yyVAL.node = ast.NewCaseWhen(yyDollar[2].node, yyDollar[4].node)
		}
	case 1357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3543
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3544
		{
			yyVAL.node = nil
		}
	case 1359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3549
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3553
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3557
		{
			yyVAL.node = ast.NewArrayConstructor(ast.NewNodeList())
		}
	case 1362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3562
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3564
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1364:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3571
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3572
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1366:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3574
		{
			nodeList := yyDollar[2].list
			nodeList.Append(yyDollar[4].node)
			yyVAL.list = nodeList
		}
	case 1367:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3581
		{
			yyVAL.node = yyDollar[3].list
		}
	case 1368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3582
		{
			yyVAL.node = ast.NewNodeList()
		}
	case 1369:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3586
		{
			yyDollar[2].list.Append(yyDollar[4].node)
			yyVAL.node = yyDollar[2].list
		}
	case 1370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3592
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3593
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3594
		{
			yyVAL.ival = int(ast.ALL_SUBLINK)
		}
	case 1373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3599
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1374:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3603
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3607
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~"))
		}
	case 1376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3611
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~"))
		}
	case 1377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3615
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~*"))
		}
	case 1378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3619
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~*"))
		}
	case 1379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3625
		{
			yyVAL.str = "NFC"
		}
	case 1380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3626
		{
			yyVAL.str = "NFD"
		}
	case 1381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3627
		{
			yyVAL.str = "NFKC"
		}
	case 1382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3628
		{
			yyVAL.str = "NFKD"
		}
	case 1383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3632
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3633
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3634
		{
			yyVAL.ival = int(ast.JS_TYPE_ARRAY)
		}
	case 1386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3635
		{
			yyVAL.ival = int(ast.JS_TYPE_OBJECT)
		}
	case 1387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3636
		{
			yyVAL.ival = int(ast.JS_TYPE_SCALAR)
		}
	case 1388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3640
		{
			yyVAL.bval = true
		}
	case 1389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3641
		{
			yyVAL.bval = true
		}
	case 1390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3642
		{
			yyVAL.bval = false
		}
	case 1391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3643
		{
			yyVAL.bval = false
		}
	case 1392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3644
		{
			yyVAL.bval = false
		}
	case 1393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3649
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3653
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3662
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3667
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3668
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3669
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3670
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3671
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3674
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3675
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3676
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3679
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3682
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3686
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[2].str))
		}
	case 1407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3690
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3697
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1409:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3701
		{
			yyVAL.list = nil
		}
	case 1410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3707
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3713
		{
			// Create qualified type name from name + attrs
			name := ast.NewString(yyDollar[1].str)
			names := &ast.NodeList{Items: append([]ast.Node{name}, yyDollar[2].list.Items...)}
			typeName := makeTypeNameFromNodeList(names)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3724
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3728
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3732
		{
			yyVAL.typnam = makeTypeNameFromString("int2")
		}
	case 1415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3736
		{
			yyVAL.typnam = makeTypeNameFromString("int8")
		}
	case 1416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3740
		{
			yyVAL.typnam = makeTypeNameFromString("float4")
		}
	case 1417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3744
		{
			yyVAL.typnam = yyDollar[2].typnam
		}
	case 1418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3748
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3752
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3757
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3762
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3767
		{
			yyVAL.typnam = makeTypeNameFromString("bool")
		}
	case 1423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3773
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3777
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3783
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3787
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3793
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3797
		{
			yyVAL.typnam = yyDollar[1].typnam
			// Set typmods to nil for BitWithoutLength in const context
			yyVAL.typnam.Typmods = nil
		}
	case 1429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3805
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3809
		{
			yyVAL.typnam = yyDollar[1].typnam
			// Set typmods to nil for CharacterWithoutLength in const context
			yyVAL.typnam.Typmods = nil
		}
	case 1431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3817
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3825
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3833
		{
			yyVAL.str = "varchar"
		}
	case 1434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3837
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3845
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3853
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1437:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3863
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Set typmods with the length parameter, similar to PostgreSQL's approach
			lengthConst := ast.NewInteger(int(yyDollar[3].ival))
			typeName.Typmods = ast.NewNodeList()
			typeName.Typmods.Append(lengthConst)
			yyVAL.typnam = typeName
		}
	case 1438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3874
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// CHAR defaults to CHAR(1)
				lengthConst := ast.NewInteger(1)
				typeName.Typmods = ast.NewNodeList()
				typeName.Typmods.Append(lengthConst)
			}
			yyVAL.typnam = typeName
		}
	case 1439:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3888
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3900
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1441:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3912
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3922
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1443:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3932
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3942
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3954
		{
			yyVAL.typnam = makeTypeNameFromString("json")
		}
	case 1446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3959
		{
			yyVAL.ival = 1
		}
	case 1447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3960
		{
			yyVAL.ival = 0
		}
	case 1448:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3961
		{
			yyVAL.ival = 0
		}
	case 1449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3964
		{
			yyVAL.ival = 1
		}
	case 1450:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3965
		{
			yyVAL.ival = 0
		}
	case 1451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3969
		{
			if yyDollar[2].ival < 1 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else if yyDollar[2].ival <= 7 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else {
				yyVAL.typnam = makeTypeNameFromString("float8")
			}
		}
	case 1452:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3979
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3986
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1454:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3990
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3997
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1456:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4001
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4006
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4007
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4010
		{
			yyVAL.str = "+"
		}
	case 1460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4011
		{
			yyVAL.str = "-"
		}
	case 1461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4012
		{
			yyVAL.str = "*"
		}
	case 1462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4013
		{
			yyVAL.str = "/"
		}
	case 1463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4014
		{
			yyVAL.str = "%"
		}
	case 1464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4015
		{
			yyVAL.str = "^"
		}
	case 1465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4016
		{
			yyVAL.str = "<"
		}
	case 1466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4017
		{
			yyVAL.str = ">"
		}
	case 1467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4018
		{
			yyVAL.str = "="
		}
	case 1468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4019
		{
			yyVAL.str = "<="
		}
	case 1469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4020
		{
			yyVAL.str = ">="
		}
	case 1470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4021
		{
			yyVAL.str = "<>"
		}
	case 1471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4025
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4029
		{
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[3].list.Items...)
			yyVAL.list = ast.NewNodeList(items...)
		}
	case 1473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4038
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1474:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4039
		{
			yyVAL.list = nil
		}
	case 1475:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4044
		{
			// WITHIN GROUP (ORDER BY ...) for ordered-set aggregates
			yyVAL.list = yyDollar[4].list
		}
	case 1476:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4048
		{
			yyVAL.list = nil
		}
	case 1477:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4053
		{
			// FILTER (WHERE condition) for aggregate filtering
			yyVAL.node = yyDollar[4].node
		}
	case 1478:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4057
		{
			yyVAL.node = nil
		}
	case 1479:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4061
		{
			yyVAL.ival = 0
		}
	case 1480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4062
		{
			yyVAL.ival = 0
		}
	case 1481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4066
		{
			subLink := ast.NewSubLink(ast.ANY_SUBLINK, yyDollar[1].stmt.(*ast.SelectStmt))
			yyVAL.node = subLink
		}
	case 1482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4071
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4086
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4087
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4091
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4096
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4097
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4106
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4107
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4116
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4118
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			// Use NodeList directly for SortClause
			selectStmt.SortClause = yyDollar[2].list
			yyVAL.stmt = selectStmt
		}
	case 1492:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4125
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			selectStmt.LockingClause = yyDollar[3].list // Set the locking clause
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1493:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4137
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			if yyDollar[3].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[3].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[3].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[3].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4149
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			yyVAL.stmt = selectStmt
		}
	case 1495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4155
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			yyVAL.stmt = selectStmt
		}
	case 1496:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4162
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			if yyDollar[5].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[5].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[5].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[5].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1497:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4175
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[5].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4194
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4195
		{
			yyVAL.list = nil
		}
	case 1500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4199
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1501:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4200
		{
			yyVAL.list = nil
		}
	case 1502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4205
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4209
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4217
		{
			lockingClause := &ast.LockingClause{
				BaseNode:   ast.BaseNode{Tag: ast.T_LockingClause},
				Strength:   ast.LockClauseStrength(yyDollar[1].ival),
				LockedRels: yyDollar[2].list, // Store as *NodeList directly
				WaitPolicy: ast.LockWaitPolicy(yyDollar[3].ival),
			}
			yyVAL.node = lockingClause
		}
	case 1505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4229
		{
			yyVAL.ival = int(ast.LCS_FORUPDATE)
		}
	case 1506:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4230
		{
			yyVAL.ival = int(ast.LCS_FORNOKEYUPDATE)
		}
	case 1507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4231
		{
			yyVAL.ival = int(ast.LCS_FORSHARE)
		}
	case 1508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4232
		{
			yyVAL.ival = int(ast.LCS_FORKEYSHARE)
		}
	case 1509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4236
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4237
		{
			yyVAL.list = nil
		}
	case 1511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4242
		{
			yyVAL.ival = int(ast.LockWaitError)
		}
	case 1512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4243
		{
			yyVAL.ival = int(ast.LockWaitSkip)
		}
	case 1513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4244
		{
			yyVAL.ival = int(ast.LockWaitBlock)
		}
	case 1514:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4255
		{
			selectStmt := ast.NewSelectStmt()
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1515:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4274
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].list
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4292
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = ast.NewNodeList(starTarget)
			selectStmt.FromClause = ast.NewNodeList(yyDollar[2].rangevar)
			yyVAL.stmt = selectStmt
		}
	case 1517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4302
		{
			// VALUES clause is a SelectStmt with ValuesLists
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4307
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_UNION, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1519:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4312
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_INTERSECT, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1520:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4317
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_EXCEPT, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4328
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1522:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4329
		{
			yyVAL.list = nil
		}
	case 1523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4333
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4334
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4339
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4343
		{
			// Implicit alias (no AS keyword)
			yyVAL.target = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 1527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4348
		{
			// No alias - use default naming
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4353
		{
			// SELECT * - all columns
			yyVAL.target = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 1529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4364
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4365
		{
			yyVAL.list = nil
		}
	case 1531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4369
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4370
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4379
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeVar
		}
	case 1534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4387
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			rangeTableSample := yyDollar[3].node.(*ast.RangeTableSample)
			rangeTableSample.Relation = rangeVar
			yyVAL.node = rangeTableSample
		}
	case 1535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4397
		{
			/* Subquery in FROM clause */
			subquery := yyDollar[1].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[2].alias != nil {
				alias = yyDollar[2].alias
			}
			rangeSubselect := ast.NewRangeSubselect(false, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4408
		{
			/* LATERAL subquery in FROM clause */
			subquery := yyDollar[2].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[3].alias != nil {
				alias = yyDollar[3].alias
			}
			rangeSubselect := ast.NewRangeSubselect(true, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4419
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4423
		{
			joinExpr := yyDollar[2].node.(*ast.JoinExpr)
			joinExpr.Alias = yyDollar[4].alias
			yyVAL.node = joinExpr
		}
	case 1539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4429
		{
			rangeFunc := yyDollar[1].node.(*ast.RangeFunction)
			funcAliasList := yyDollar[2].list
			if funcAliasList != nil && funcAliasList.Len() >= 2 {
				// func_alias_clause returns [alias, coldeflist]
				if alias := linitial(funcAliasList); alias != nil {
					rangeFunc.Alias = alias.(*ast.Alias)
				}
				if coldeflist := lsecond(funcAliasList); coldeflist != nil {
					// ColDefList is now *NodeList, no conversion needed
					if nodeList, ok := coldeflist.(*ast.NodeList); ok && nodeList != nil {
						rangeFunc.ColDefList = nodeList
					}
				}
			}
			yyVAL.node = rangeFunc
		}
	case 1540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4447
		{
			rangeFunc := yyDollar[2].node.(*ast.RangeFunction)
			rangeFunc.Lateral = true
			funcAliasList := yyDollar[3].list
			if funcAliasList != nil && funcAliasList.Len() >= 2 {
				// func_alias_clause returns [alias, coldeflist]
				if alias := linitial(funcAliasList); alias != nil {
					rangeFunc.Alias = alias.(*ast.Alias)
				}
				if coldeflist := lsecond(funcAliasList); coldeflist != nil {
					// ColDefList is now *NodeList, no conversion needed
					if nodeList, ok := coldeflist.(*ast.NodeList); ok && nodeList != nil {
						rangeFunc.ColDefList = nodeList
					}
				}
			}
			yyVAL.node = rangeFunc
		}
	case 1541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4466
		{
			rangeTableFunc := yyDollar[1].node.(*ast.RangeTableFunc)
			if yyDollar[2].alias != nil {
				rangeTableFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4474
		{
			rangeTableFunc := yyDollar[2].node.(*ast.RangeTableFunc)
			rangeTableFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeTableFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4483
		{
			jsonTable := yyDollar[1].node.(*ast.JsonTable)
			if yyDollar[2].alias != nil {
				jsonTable.Alias = yyDollar[2].alias
			}
			yyVAL.node = jsonTable
		}
	case 1544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4491
		{
			jsonTable := yyDollar[2].node.(*ast.JsonTable)
			jsonTable.Lateral = true
			if yyDollar[3].alias != nil {
				jsonTable.Alias = yyDollar[3].alias
			}
			yyVAL.node = jsonTable
		}
	case 1545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4503
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.rangevar = rangeVar
		}
	case 1546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4509
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4516
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.rangevar = rangeVar
		}
	case 1548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4522
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1549:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4528
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4538
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4542
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4548
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4565
		{
			yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
		}
	case 1554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4569
		{
			/* CROSS JOIN is same as unqualified inner join */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewJoinExpr(ast.JOIN_INNER, left, right, nil)
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1555:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4578
		{
			left := yyDollar[1].node
			right := yyDollar[4].node
			joinType := ast.JoinType(yyDollar[2].ival)
			joinQual := yyDollar[5].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(joinType, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(joinType, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1556:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4604
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[3].node
			joinQual := yyDollar[4].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(ast.JOIN_INNER, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(ast.JOIN_INNER, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1557:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4630
		{
			left := yyDollar[1].node
			right := yyDollar[5].node
			joinType := ast.JoinType(yyDollar[3].ival)
			join := ast.NewNaturalJoinExpr(joinType, left, right)
			yyVAL.node = join
		}
	case 1558:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4638
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewNaturalJoinExpr(ast.JOIN_INNER, left, right)
			yyVAL.node = join
		}
	case 1559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4648
		{
			yyVAL.ival = int(ast.JOIN_FULL)
		}
	case 1560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4649
		{
			yyVAL.ival = int(ast.JOIN_LEFT)
		}
	case 1561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4650
		{
			yyVAL.ival = int(ast.JOIN_RIGHT)
		}
	case 1562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4651
		{
			yyVAL.ival = int(ast.JOIN_INNER)
		}
	case 1563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4656
		{
			yyVAL.ival = 1
		}
	case 1564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4657
		{
			yyVAL.ival = 0
		}
	case 1565:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4667
		{
			/* Create a two-element list: [name_list, alias_or_null] following PostgreSQL */
			nameList := yyDollar[3].list
			var aliasNode ast.Node = nil
			if yyDollar[5].alias != nil {
				aliasNode = yyDollar[5].alias
			}
			usingList := ast.NewNodeList(nameList, aliasNode)
			yyVAL.node = usingList
		}
	case 1566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4678
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4689
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4693
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4697
		{
			yyVAL.with = ast.NewWithClause(yyDollar[3].list, true, 0)
		}
	case 1570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4703
		{
			yyVAL.with = yyDollar[1].with
		}
	case 1571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4704
		{
			yyVAL.with = nil
		}
	case 1572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4709
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4713
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1574:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4721
		{
			ctename := yyDollar[1].str
			query := yyDollar[6].stmt
			cte := ast.NewCommonTableExpr(ctename, query)

			// Set column names if provided
			if yyDollar[2].list != nil {
				cte.Aliascolnames = yyDollar[2].list
			}

			// Set materialized option
			cte.Ctematerialized = ast.CTEMaterialized(yyDollar[4].ival)

			// Set search clause if provided
			if yyDollar[8].node != nil {
				cte.SearchClause = yyDollar[8].node.(*ast.CTESearchClause)
			}

			// Set cycle clause if provided
			if yyDollar[9].node != nil {
				cte.CycleClause = yyDollar[9].node.(*ast.CTECycleClause)
			}

			yyVAL.node = cte
		}
	case 1575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4749
		{
			yyVAL.ival = int(ast.CTEMaterializeAlways)
		}
	case 1576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4750
		{
			yyVAL.ival = int(ast.CTEMaterializeNever)
		}
	case 1577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4751
		{
			yyVAL.ival = int(ast.CTEMaterializeDefault)
		}
	case 1578:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4756
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, false, seqColumn)
		}
	case 1579:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4762
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, true, seqColumn)
		}
	case 1580:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4768
		{
			yyVAL.node = nil
		}
	case 1581:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:4775
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			markValue := yyDollar[6].node.(ast.Expression)
			markDefault := yyDollar[8].node.(ast.Expression)
			pathColumn := yyDollar[10].str
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, markValue, markDefault, pathColumn)
		}
	case 1582:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4784
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			pathColumn := yyDollar[6].str
			// For simple CYCLE clause, use nil for mark values to avoid TO/DEFAULT in deparsing
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, nil, nil, pathColumn)
		}
	case 1583:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4792
		{
			yyVAL.node = nil
		}
	case 1584:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4803
		{
			/* Create a SelectStmt with VALUES clause following PostgreSQL */
			selectStmt := ast.NewSelectStmt()
			exprList := yyDollar[3].list
			selectStmt.ValuesLists = ast.NewNodeList(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1585:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4811
		{
			/* Add additional VALUES row to existing SelectStmt */
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			exprList := yyDollar[4].list
			selectStmt.ValuesLists.Append(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4825
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1587:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4826
		{
			yyVAL.node = nil
		}
	case 1588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4834
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1589:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4836
		{
			cursorExpr := ast.NewCurrentOfExpr(0, yyDollar[4].str) // cvarno filled in by parse analysis
			yyVAL.node = cursorExpr
		}
	case 1590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4840
		{
			yyVAL.node = nil
		}
	case 1591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4844
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4852
		{
			yyVAL.alias = yyDollar[1].alias
		}
	case 1593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4853
		{
			yyVAL.alias = nil
		}
	case 1594:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4858
		{
			nameList := yyDollar[4].list
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nameList)
		}
	case 1595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4863
		{
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 1596:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4867
		{
			nameList := yyDollar[3].list
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nameList)
		}
	case 1597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4872
		{
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 1598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4883
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].alias, nil)
		}
	case 1599:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4887
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[3].list)
		}
	case 1600:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4891
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.list = ast.NewNodeList(alias, yyDollar[4].list)
		}
	case 1601:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4896
		{
			alias := ast.NewAlias(yyDollar[1].str, nil)
			yyVAL.list = ast.NewNodeList(alias, yyDollar[3].list)
		}
	case 1602:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4901
		{
			yyVAL.list = ast.NewNodeList(nil, nil)
		}
	case 1603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4909
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.alias = alias
		}
	case 1604:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4913
		{
			yyVAL.alias = nil
		}
	case 1605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4921
		{
			yyVAL.ival = 1
		}
	case 1606:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4922
		{
			yyVAL.ival = 0
		}
	case 1607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4926
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1608:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4927
		{
			yyVAL.list = yyDollar[4].list
		}
	case 1609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4931
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1610:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4932
		{
			yyVAL.list = nil
		}
	case 1611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4942
		{
			yyVAL.into = ast.NewIntoClause(yyDollar[2].node.(*ast.RangeVar), nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 1612:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4945
		{
			yyVAL.into = nil
		}
	case 1613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4956
		{
			hasOrdinality := yyDollar[2].ival == 1
			// For a simple function, create a NodeList containing a single NodeList with the function
			funcList := ast.NewNodeList(yyDollar[1].node)
			functions := ast.NewNodeList(funcList)
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, false, functions, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1614:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4965
		{
			hasOrdinality := yyDollar[6].ival == 1
			// rowsfrom_list is already a NodeList containing NodeLists
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, true, yyDollar[4].list, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4975
		{
			yyVAL.ival = 1
		}
	case 1616:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4976
		{
			yyVAL.ival = 0
		}
	case 1617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4982
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 1618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4986
		{
			yyDollar[1].list.Append(yyDollar[3].list)
			yyVAL.list = yyDollar[1].list
		}
	case 1619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4993
		{
			funcList := ast.NewNodeList(yyDollar[1].node)
			if yyDollar[2].list != nil {
				funcList.Append(yyDollar[2].list)
			}
			yyVAL.list = funcList
		}
	case 1620:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5002
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5003
		{
			yyVAL.list = nil
		}
	case 1622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5013
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 1623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5017
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 1624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5029
		{
			yyVAL.funparam = &ast.FunctionParameter{
				BaseNode: ast.BaseNode{Tag: ast.T_FunctionParameter},
				Name:     yyDollar[1].str,
				ArgType:  yyDollar[2].typnam,
				Mode:     ast.FUNC_PARAM_TABLE,
				DefExpr:  nil,
			}
		}
	case 1625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5042
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1626:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5043
		{
			yyVAL.list = nil
		}
	case 1627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5049
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5053
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5062
		{
			columnDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			// Note: opt_collate_clause support can be added when needed
			// PostgreSQL sets: n->collClause = (CollateClause *) $3;
			yyVAL.node = columnDef
		}
	case 1630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5073
		{
			// Pass the NodeList directly to NewCollateClause
			nameList := yyDollar[2].list
			yyVAL.node = ast.NewCollateClause(nameList)
		}
	case 1631:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5078
		{
			yyVAL.node = nil
		}
	case 1632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5083
		{
			yyVAL.str = "BY REF"
		}
	case 1633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5084
		{
			yyVAL.str = "BY VALUE"
		}
	case 1634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5090
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5094
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5098
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1637:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5102
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5110
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5114
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5122
		{
			target := ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
			yyVAL.node = target
		}
	case 1641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5127
		{
			target := ast.NewResTarget("", yyDollar[2].node)
			yyVAL.node = target
		}
	case 1642:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5136
		{
			// XMLTABLE(xpath_expr PASSING doc_expr COLUMNS ...)
			// $3 is xpath_expr (should be RowExpr), $4 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[4].node.(ast.Expression), yyDollar[3].node.(ast.Expression), nil, yyDollar[6].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1643:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:5144
		{
			// XMLTABLE(XMLNAMESPACES(...), xpath_expr PASSING doc_expr COLUMNS ...)
			// $8 is xpath_expr (should be RowExpr), $9 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[9].node.(ast.Expression), yyDollar[8].node.(ast.Expression), yyDollar[5].list, yyDollar[11].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5155
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5159
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5168
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5173
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, nil, true, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5178
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			// TODO: Process column options from $3
			yyVAL.node = rangeTableFuncCol
		}
	case 1649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5188
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1650:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5192
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5201
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5205
		{
			yyVAL.node = ast.NewDefElem("default", yyDollar[2].node)
		}
	case 1653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5209
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(true))
		}
	case 1654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5213
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(false))
		}
	case 1655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5217
		{
			yyVAL.node = ast.NewDefElem("path", yyDollar[2].node)
		}
	case 1656:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:5230
		{
			// Extract path name from optional path name node
			var pathName string
			if yyDollar[6].node != nil {
				if strNode, ok := yyDollar[6].node.(*ast.String); ok {
					pathName = strNode.SVal
				}
			}

			// Create JsonTablePathSpec from the a_expr (path expression) and optional path name
			pathSpec := ast.NewJsonTablePathSpec(yyDollar[5].node, pathName, 0)

			// Create JsonTable with context item and path spec
			jsonTable := ast.NewJsonTable(yyDollar[3].node.(*ast.JsonValueExpr), pathSpec)
			if yyDollar[10].list != nil {
				jsonTable.Columns = yyDollar[10].list
			}
			yyVAL.node = jsonTable
		}
	case 1657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5254
		{
			var format *ast.JsonFormat
			if yyDollar[2].node != nil {
				format = yyDollar[2].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonValueExpr(yyDollar[1].node, format)
		}
	case 1658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5265
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1659:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5266
		{
			yyVAL.node = nil
		}
	case 1660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5271
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1661:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5272
		{
			yyVAL.node = nil
		}
	case 1662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5276
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5277
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5282
		{
			jsonArg := ast.NewJsonArgument(yyDollar[1].node.(*ast.JsonValueExpr), yyDollar[3].str)
			yyVAL.node = jsonArg
		}
	case 1665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5288
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1666:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5289
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5295
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5299
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5311
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5315
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5322
		{
			yyVAL.bval = false
		}
	case 1672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5323
		{
			yyVAL.bval = true
		}
	case 1673:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5324
		{
			yyVAL.bval = false
		}
	case 1674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5328
		{
			yyVAL.bval = false
		}
	case 1675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5329
		{
			yyVAL.bval = true
		}
	case 1676:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5330
		{
			yyVAL.bval = true
		}
	case 1677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5335
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1678:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5336
		{
			yyVAL.list = nil
		}
	case 1679:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5347
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)

			yyVAL.node = ast.NewJsonObjectAgg(constructor, yyDollar[3].node.(*ast.JsonKeyValue), yyDollar[4].bval, yyDollar[5].bval)
		}
	case 1680:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5362
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)
			constructor.AggOrder = yyDollar[4].list
			yyVAL.node = ast.NewJsonArrayAgg(constructor, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].bval)
		}
	case 1681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5375
		{
			var jsonFormat *ast.JsonFormat
			if yyDollar[3].node != nil {
				jsonFormat = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonOutput(yyDollar[2].typnam, ast.NewJsonReturning(jsonFormat, 0, 0))
		}
	case 1682:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5382
		{
			yyVAL.node = nil
		}
	case 1683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5388
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JSON_BEHAVIOR_DEFAULT,
				Expr:     yyDollar[2].node,
			}
		}
	case 1684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5396
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JsonBehaviorType(yyDollar[1].ival),
				Expr:     nil,
			}
		}
	case 1685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5407
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_ERROR)
		}
	case 1686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5408
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_NULL)
		}
	case 1687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5409
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_TRUE)
		}
	case 1688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5410
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_FALSE)
		}
	case 1689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5411
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_UNKNOWN)
		}
	case 1690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5412
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_ARRAY)
		}
	case 1691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5413
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_OBJECT)
		}
	case 1692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5414
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY)
		}
	case 1693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5419
		{
			// Return a list with ON EMPTY behavior and nil for ON ERROR
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, nil}}
		}
	case 1694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5423
		{
			// Return a list with nil for ON EMPTY and ON ERROR behavior
			yyVAL.node = &ast.NodeList{Items: []ast.Node{nil, yyDollar[1].node}}
		}
	case 1695:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5427
		{
			// Return a list with both ON EMPTY and ON ERROR behaviors
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, yyDollar[4].node}}
		}
	case 1696:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5431
		{
			yyVAL.node = nil
		}
	case 1697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5436
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1698:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5437
		{
			yyVAL.node = nil
		}
	case 1699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5442
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5443
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5444
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5445
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1703:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5446
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1704:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5447
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5448
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5449
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1707:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5450
		{
			yyVAL.ival = int(ast.JSW_UNSPEC)
		}
	case 1708:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5455
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5456
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1710:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5457
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5458
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1712:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5459
		{
			yyVAL.ival = int(ast.JS_QUOTES_UNSPEC)
		}
	case 1713:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5465
		{
			// Parse the encoding name and map to JsonEncoding constant
			var encoding ast.JsonEncoding
			switch yyDollar[4].str {
			case "utf8":
				encoding = ast.JS_ENC_UTF8
			case "utf16":
				encoding = ast.JS_ENC_UTF16
			case "utf32":
				encoding = ast.JS_ENC_UTF32
			default:
				encoding = ast.JS_ENC_DEFAULT
			}
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   encoding,
			}
		}
	case 1714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5485
		{
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   ast.JS_ENC_DEFAULT,
			}
		}
	case 1715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5495
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1716:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5496
		{
			yyVAL.node = nil
		}
	case 1717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5501
		{
			yyVAL.node = ast.NewString("path")
		}
	case 1718:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5502
		{
			yyVAL.node = nil
		}
	case 1719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5508
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1720:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5512
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1721:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5521
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FOR_ORDINALITY, yyDollar[1].str)
			yyVAL.node = jsonTableCol
		}
	case 1722:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5530
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_REGULAR, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[3].node != nil {
				strNode := yyDollar[3].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1723:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5544
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FORMATTED, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			if yyDollar[3].node != nil {
				jsonTableCol.Format = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = jsonTableCol
		}
	case 1724:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5558
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_EXISTS, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1725:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5569
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, "")
			jsonTableCol.Columns = yyDollar[6].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1726:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5578
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, yyDollar[5].str)
			jsonTableCol.Columns = yyDollar[8].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5589
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1728:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5590
		{
			yyVAL.node = nil
		}
	case 1729:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5606
		{
			insertStmt := yyDollar[5].node.(*ast.InsertStmt)
			insertStmt.Relation = yyDollar[4].rangevar
			insertStmt.WithClause = yyDollar[1].with
			insertStmt.OnConflictClause = yyDollar[6].onconflict
			insertStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = insertStmt
		}
	case 1730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5618
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1731:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5622
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5631
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.SelectStmt = yyDollar[1].stmt
			yyVAL.node = insertStmt
		}
	case 1733:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5637
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Override = ast.OverridingKind(yyDollar[2].ival)
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1734:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5644
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1735:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5651
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.Override = ast.OverridingKind(yyDollar[5].ival)
			insertStmt.SelectStmt = yyDollar[7].stmt
			yyVAL.node = insertStmt
		}
	case 1736:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5659
		{
			insertStmt := ast.NewInsertStmt(nil)
			// For DEFAULT VALUES, SelectStmt should be nil
			insertStmt.SelectStmt = nil
			yyVAL.node = insertStmt
		}
	case 1737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5668
		{
			yyVAL.ival = int(ast.OVERRIDING_USER_VALUE)
		}
	case 1738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5669
		{
			yyVAL.ival = int(ast.OVERRIDING_SYSTEM_VALUE)
		}
	case 1739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5674
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1740:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5678
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5686
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1742:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:5698
		{
			updateStmt := ast.NewUpdateStmt(yyDollar[3].rangevar)
			updateStmt.WithClause = yyDollar[1].with
			updateStmt.TargetList = yyDollar[5].list
			updateStmt.FromClause = yyDollar[6].list
			updateStmt.WhereClause = yyDollar[7].node
			updateStmt.ReturningList = yyDollar[8].list
			yyVAL.stmt = updateStmt
		}
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5711
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1744:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5715
		{
			// Concatenate the lists - equivalent to PostgreSQL's list_concat
			for _, item := range yyDollar[3].list.Items {
				yyDollar[1].list.Append(item)
			}
			yyVAL.list = yyDollar[1].list
		}
	case 1745:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5726
		{
			target := yyDollar[1].target
			target.Val = yyDollar[3].node
			yyVAL.list = ast.NewNodeList(target)
		}
	case 1746:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5732
		{
			// Multi-column assignment: (col1, col2) = (val1, val2)
			// Create MultiAssignRef nodes for each target, matching PostgreSQL exactly
			targetList := yyDollar[2].list
			ncolumns := len(targetList.Items)

			// Create a MultiAssignRef source for each target
			for i, item := range targetList.Items {
				resCol := item.(*ast.ResTarget)
				multiAssignRef := ast.NewMultiAssignRef(yyDollar[5].node, i+1, ncolumns, 0)
				resCol.Val = multiAssignRef
			}

			// Return the entire target list
			yyVAL.list = targetList
		}
	case 1747:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5752
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5758
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5759
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1750:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5769
		{
			deleteStmt := ast.NewDeleteStmt(yyDollar[4].rangevar)
			deleteStmt.WithClause = yyDollar[1].with
			deleteStmt.UsingClause = yyDollar[5].list
			deleteStmt.WhereClause = yyDollar[6].node
			deleteStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = deleteStmt
		}
	case 1751:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5781
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1752:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5785
		{
			yyVAL.list = nil
		}
	case 1753:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5800
		{
			mergeStmt := &ast.MergeStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_MergeStmt},
			}
			mergeStmt.WithClause = yyDollar[1].with
			mergeStmt.Relation = yyDollar[4].rangevar
			mergeStmt.SourceRelation = yyDollar[6].node
			mergeStmt.JoinCondition = yyDollar[8].node
			mergeStmt.MergeWhenClauses = yyDollar[9].list
			mergeStmt.ReturningList = yyDollar[10].list
			yyVAL.stmt = mergeStmt
		}
	case 1754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5817
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1755:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5821
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1756:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5832
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Query:     yyDollar[3].stmt,
				IsFrom:    false,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Initialize Options as empty NodeList
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[9].list != nil {
				nodeList := yyDollar[9].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			yyVAL.stmt = copyStmt
		}
	case 1757:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:5856
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Relation:  yyDollar[3].rangevar,
				IsFrom:    yyDollar[5].ival != 0,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Assign column list directly as NodeList
			copyStmt.Attlist = yyDollar[4].list

			// Initialize Options as empty NodeList and add options
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[2].node != nil {
				copyStmt.Options.Append(yyDollar[2].node)
			}
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[10].list != nil {
				nodeList := yyDollar[10].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			if yyDollar[11].node != nil {
				copyStmt.WhereClause = yyDollar[11].node
			}
			yyVAL.stmt = copyStmt
		}
	case 1758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5892
		{
			yyVAL.ival = 1
		}
	case 1759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5893
		{
			yyVAL.ival = 0
		}
	case 1760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5897
		{
			yyVAL.ival = 1
		}
	case 1761:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5898
		{
			yyVAL.ival = 0
		}
	case 1762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5902
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5903
		{
			yyVAL.str = ""
		}
	case 1764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5904
		{
			yyVAL.str = ""
		}
	case 1765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5909
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1766:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5912
		{
			yyVAL.node = nil
		}
	case 1767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5917
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1768:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5920
		{
			yyVAL.node = nil
		}
	case 1769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5924
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1770:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5925
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1771:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5930
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1772:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5938
		{
			yyVAL.list = nil
		}
	case 1773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5945
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5949
		{
			yyVAL.node = ast.NewDefElem("freeze", ast.NewString("true"))
		}
	case 1775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5953
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1776:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5957
		{
			yyVAL.node = ast.NewDefElem("null", ast.NewString(yyDollar[3].str))
		}
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5961
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("csv"))
		}
	case 1778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5965
		{
			yyVAL.node = ast.NewDefElem("header", ast.NewString("true"))
		}
	case 1779:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5969
		{
			yyVAL.node = ast.NewDefElem("quote", ast.NewString(yyDollar[3].str))
		}
	case 1780:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5973
		{
			yyVAL.node = ast.NewDefElem("escape", ast.NewString(yyDollar[3].str))
		}
	case 1781:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5977
		{
			yyVAL.node = ast.NewDefElem("force_quote", yyDollar[3].list)
		}
	case 1782:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5981
		{
			yyVAL.node = ast.NewDefElem("force_quote", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1783:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5985
		{
			yyVAL.node = ast.NewDefElem("force_not_null", yyDollar[4].list)
		}
	case 1784:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5989
		{
			yyVAL.node = ast.NewDefElem("force_not_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1785:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5993
		{
			yyVAL.node = ast.NewDefElem("force_null", yyDollar[3].list)
		}
	case 1786:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5997
		{
			yyVAL.node = ast.NewDefElem("force_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1787:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6001
		{
			yyVAL.node = ast.NewDefElem("encoding", ast.NewString(yyDollar[2].str))
		}
	case 1788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6009
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1789:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6013
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1790:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6020
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6026
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6027
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6028
		{
			yyVAL.node = ast.NewA_Star(0)
		}
	case 1794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6029
		{
			yyVAL.node = ast.NewString("default")
		}
	case 1795:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6030
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1796:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6031
		{
			yyVAL.node = nil
		}
	case 1797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6036
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1798:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6040
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6046
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6050
		{
			yyVAL.str = "true"
		}
	case 1801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6051
		{
			yyVAL.str = "false"
		}
	case 1802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6052
		{
			yyVAL.str = "on"
		}
	case 1803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6053
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6057
		{
			yyVAL.node = ast.NewFloat(yyDollar[1].str)
		}
	case 1805:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6058
		{
			yyVAL.node = ast.NewFloat(yyDollar[2].str)
		}
	case 1806:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6060
		{
			f := ast.NewFloat(yyDollar[2].str)
			doNegateFloat(f)
			yyVAL.node = f
		}
	case 1807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6065
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6069
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6070
		{
			yyVAL.node = nil
		}
	case 1810:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6074
		{
			yyVAL.objType = ast.OBJECT_ACCESS_METHOD
		}
	case 1811:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6075
		{
			yyVAL.objType = ast.OBJECT_EVENT_TRIGGER
		}
	case 1812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6076
		{
			yyVAL.objType = ast.OBJECT_EXTENSION
		}
	case 1813:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6077
		{
			yyVAL.objType = ast.OBJECT_FDW
		}
	case 1814:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6078
		{
			yyVAL.objType = ast.OBJECT_LANGUAGE
		}
	case 1815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6079
		{
			yyVAL.objType = ast.OBJECT_PUBLICATION
		}
	case 1816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6080
		{
			yyVAL.objType = ast.OBJECT_SCHEMA
		}
	case 1817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6081
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_SERVER
		}
	case 1818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6085
		{
			yyVAL.objType = ast.OBJECT_POLICY
		}
	case 1819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6086
		{
			yyVAL.objType = ast.OBJECT_RULE
		}
	case 1820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6087
		{
			yyVAL.objType = ast.OBJECT_TRIGGER
		}
	case 1821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6091
		{
			yyVAL.objType = yyDollar[1].objType
		}
	case 1822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6092
		{
			yyVAL.objType = ast.OBJECT_DATABASE
		}
	case 1823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6093
		{
			yyVAL.objType = ast.OBJECT_ROLE
		}
	case 1824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6094
		{
			yyVAL.objType = ast.OBJECT_SUBSCRIPTION
		}
	case 1825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6095
		{
			yyVAL.objType = ast.OBJECT_TABLESPACE
		}
	case 1826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6100
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].typnam)
		}
	case 1827:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6105
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 1828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6112
		{
			yyVAL.bval = true
		}
	case 1829:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6113
		{
			yyVAL.bval = false
		}
	case 1830:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6117
		{
			yyVAL.ival = 1
		}
	case 1831:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6118
		{
			yyVAL.ival = 0
		}
	case 1834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6134
		{
			yyVAL.node = nil
		}
	case 1835:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6136
		{
			yyVAL.node = nil
		}
	case 1836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6144
		{
			yyVAL.ival = 1
		}
	case 1837:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6145
		{
			yyVAL.ival = 0
		}
	case 1838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6149
		{
			yyVAL.ival = 1
		}
	case 1839:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6150
		{
			yyVAL.ival = 0
		}
	case 1840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6154
		{
			yyVAL.ival = 1
		}
	case 1841:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6155
		{
			yyVAL.ival = 0
		}
	case 1842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6159
		{
			yyVAL.ival = 1
		}
	case 1843:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6160
		{
			yyVAL.ival = 0
		}
	case 1844:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6169
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1845:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6175
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1846:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6181
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1847:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6187
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1848:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6193
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1849:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6201
		{
			yyVAL.ival = int(ast.MERGE_WHEN_MATCHED)
		}
	case 1850:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6202
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_SOURCE)
		}
	case 1851:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6206
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1852:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6207
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1853:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6211
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1854:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6212
		{
			yyVAL.node = nil
		}
	case 1855:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6217
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_UPDATE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			yyVAL.node = mergeWhen
		}
	case 1856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6232
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_DELETE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1857:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6241
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			mergeWhen.Values = yyDollar[2].list
			yyVAL.node = mergeWhen
		}
	case 1858:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6248
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[3].ival)
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1859:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6255
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1860:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6268
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[6].ival)
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[8].list
			yyVAL.node = mergeWhen
		}
	case 1861:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6281
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1862:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6290
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1863:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6305
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_UPDATE)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			onConflict.TargetList = yyDollar[7].list
			onConflict.WhereClause = yyDollar[8].node
			yyVAL.onconflict = onConflict
		}
	case 1864:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6315
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_NOTHING)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			yyVAL.onconflict = onConflict
		}
	case 1865:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6323
		{
			yyVAL.onconflict = nil
		}
	case 1866:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6334
		{
			// Create InferClause for column-based conflict detection
			infer := ast.NewInferClause()
			// Assign IndexElems directly as NodeList
			infer.IndexElems = yyDollar[2].list
			infer.WhereClause = yyDollar[4].node
			yyVAL.node = infer
		}
	case 1867:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6343
		{
			// Create InferClause for constraint-based conflict detection
			infer := ast.NewInferClause()
			infer.Conname = yyDollar[3].str
			yyVAL.node = infer
		}
	case 1868:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6350
		{
			yyVAL.node = nil
		}
	case 1869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6361
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1870:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6365
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6372
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1872:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6376
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1873:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6383
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Name = yyDollar[1].str
		}
	case 1874:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6388
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[1].node
		}
	case 1875:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6393
		{
			yyVAL.node = yyDollar[4].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[2].node
		}
	case 1876:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6401
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Ordering = ast.SortByDir(yyDollar[3].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[4].ival)
			yyVAL.node = indexElem
		}
	case 1877:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6412
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Opclassopts = yyDollar[3].list
			indexElem.Ordering = ast.SortByDir(yyDollar[4].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[5].ival)
			yyVAL.node = indexElem
		}
	case 1878:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6426
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1879:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6427
		{
			yyVAL.list = nil
		}
	case 1880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6431
		{
			yyVAL.ival = int(ast.SORTBY_ASC)
		}
	case 1881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6432
		{
			yyVAL.ival = int(ast.SORTBY_DESC)
		}
	case 1882:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6433
		{
			yyVAL.ival = int(ast.SORTBY_DEFAULT)
		}
	case 1883:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6437
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_FIRST)
		}
	case 1884:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6438
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_LAST)
		}
	case 1885:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6439
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_DEFAULT)
		}
	case 1886:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6444
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1887:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6448
		{
			yyVAL.list = nil
		}
	case 1888:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6469
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[6].list
			createStmt.InhRelations = yyDollar[8].list
			createStmt.PartSpec = yyDollar[9].partspec
			createStmt.AccessMethod = yyDollar[10].str
			createStmt.Options = yyDollar[11].list
			createStmt.OnCommit = yyDollar[12].oncommit
			createStmt.TableSpaceName = yyDollar[13].str
			yyVAL.stmt = createStmt
		}
	case 1889:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:6485
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[9].list
			createStmt.InhRelations = yyDollar[11].list
			createStmt.PartSpec = yyDollar[12].partspec
			createStmt.AccessMethod = yyDollar[13].str
			createStmt.Options = yyDollar[14].list
			createStmt.OnCommit = yyDollar[15].oncommit
			createStmt.TableSpaceName = yyDollar[16].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1890:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:6502
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[6].list)
			createStmt.TableElts = yyDollar[7].list
			createStmt.PartSpec = yyDollar[8].partspec
			createStmt.AccessMethod = yyDollar[9].str
			createStmt.Options = yyDollar[10].list
			createStmt.OnCommit = yyDollar[11].oncommit
			createStmt.TableSpaceName = yyDollar[12].str
			yyVAL.stmt = createStmt
		}
	case 1891:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:6518
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[9].list)
			createStmt.TableElts = yyDollar[10].list
			createStmt.PartSpec = yyDollar[11].partspec
			createStmt.AccessMethod = yyDollar[12].str
			createStmt.Options = yyDollar[13].list
			createStmt.OnCommit = yyDollar[14].oncommit
			createStmt.TableSpaceName = yyDollar[15].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1892:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:6535
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[7].rangevar)
			createStmt.TableElts = yyDollar[8].list
			createStmt.PartBound = yyDollar[9].partboundspec
			createStmt.PartSpec = yyDollar[10].partspec
			createStmt.AccessMethod = yyDollar[11].str
			createStmt.Options = yyDollar[12].list
			createStmt.OnCommit = yyDollar[13].oncommit
			createStmt.TableSpaceName = yyDollar[14].str
			yyVAL.stmt = createStmt
		}
	case 1893:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:6552
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[10].rangevar)
			createStmt.TableElts = yyDollar[11].list
			createStmt.PartBound = yyDollar[12].partboundspec
			createStmt.PartSpec = yyDollar[13].partspec
			createStmt.AccessMethod = yyDollar[14].str
			createStmt.Options = yyDollar[15].list
			createStmt.OnCommit = yyDollar[16].oncommit
			createStmt.TableSpaceName = yyDollar[17].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6570
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6571
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1896:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6572
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1897:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6573
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1898:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6574
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1899:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6575
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6576
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 1901:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6577
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 1902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6581
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1903:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6582
		{
			yyVAL.list = nil
		}
	case 1904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6587
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1905:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6592
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6599
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6600
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6601
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1909:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6606
		{
			yyVAL.node = ast.NewTableLikeClause(yyDollar[2].rangevar, ast.TableLikeOption(yyDollar[3].ival))
		}
	case 1910:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6613
		{
			yyVAL.ival = yyDollar[1].ival | yyDollar[3].ival
		}
	case 1911:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6617
		{
			yyVAL.ival = yyDollar[1].ival & ^yyDollar[3].ival
		}
	case 1912:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6621
		{
			yyVAL.ival = 0
		}
	case 1913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6627
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMMENTS)
		}
	case 1914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6628
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMPRESSION)
		}
	case 1915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6629
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_CONSTRAINTS)
		}
	case 1916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6630
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_DEFAULTS)
		}
	case 1917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6631
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_IDENTITY)
		}
	case 1918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6632
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_GENERATED)
		}
	case 1919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6633
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_INDEXES)
		}
	case 1920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6634
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STATISTICS)
		}
	case 1921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6635
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STORAGE)
		}
	case 1922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6636
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_ALL)
		}
	case 1923:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6641
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1924:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6642
		{
			yyVAL.str = "default"
		}
	case 1925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6646
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1926:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6647
		{
			yyVAL.str = ""
		}
	case 1927:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6651
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1928:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6652
		{
			yyVAL.str = "default"
		}
	case 1929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6656
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1930:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6657
		{
			yyVAL.str = ""
		}
	case 1931:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6662
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1932:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6663
		{
			yyVAL.list = nil
		}
	case 1933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6668
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1934:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6674
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6681
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6682
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1937:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6687
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[2].list
			yyVAL.node = colDef
		}
	case 1938:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6693
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[4].list
			yyVAL.node = colDef
		}
	case 1939:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6704
		{
			hashSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_HASH)
			hashSpec.IsDefault = false

			// Parse hash partition bounds (modulus and remainder)
			hashOptions := yyDollar[5].list
			for _, optNode := range hashOptions.Items {
				if defElem, ok := optNode.(*ast.DefElem); ok {
					if defElem.Defname == "modulus" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Modulus = integerVal.IVal
							}
						}
					} else if defElem.Defname == "remainder" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Remainder = integerVal.IVal
							}
						}
					}
				}
			}

			yyVAL.partboundspec = hashSpec
		}
	case 1940:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6733
		{
			listSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			listSpec.IsDefault = false
			listSpec.ListDatums = yyDollar[5].list
			yyVAL.partboundspec = listSpec
		}
	case 1941:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6742
		{
			rangeSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_RANGE)
			rangeSpec.IsDefault = false
			rangeSpec.LowDatums = yyDollar[5].list
			rangeSpec.HighDatums = yyDollar[9].list
			yyVAL.partboundspec = rangeSpec
		}
	case 1942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6752
		{
			defaultSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			defaultSpec.IsDefault = true
			yyVAL.partboundspec = defaultSpec
		}
	case 1943:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6761
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, ast.NewA_Const(ast.NewInteger(yyDollar[2].ival), 0))
		}
	case 1944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6768
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1945:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6772
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1946:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6780
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1947:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6781
		{
			yyVAL.list = nil
		}
	case 1948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6786
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1949:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6790
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1950:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6798
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6804
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6809
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1953:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6814
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			colDef.StorageName = yyDollar[3].str
			colDef.Compression = yyDollar[4].str
			colDef.Fdwoptions = yyDollar[5].list
			colDef.Constraints = yyDollar[6].list
			yyVAL.node = colDef
		}
	case 1954:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6826
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1955:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6831
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1956:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6838
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6843
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6844
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1959:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6846
		{
			/*
			 * Note: the CollateClause is momentarily included in
			 * the list built by ColQualList, but we split it out
			 * again in SplitColQualList.
			 */
			collateClause := ast.NewCollateClause(yyDollar[2].list)
			yyVAL.node = collateClause
		}
	case 1960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6859
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1961:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6864
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_NOT_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1962:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6869
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRED)
			yyVAL.node = constraint
		}
	case 1963:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6874
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_IMMEDIATE)
			yyVAL.node = constraint
		}
	case 1964:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6882
		{
			yyVAL.bval = true
		}
	case 1965:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6883
		{
			yyVAL.bval = false
		}
	case 1966:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6884
		{
			yyVAL.bval = true
		}
	case 1967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6888
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_ALWAYS
		}
	case 1968:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6889
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_BY_DEFAULT
		}
	case 1969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6894
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1970:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6896
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6901
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1972:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6905
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1973:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6909
		{
			// SeqOptElem already returns a DefElem, so we can use it directly
			// Check for invalid options as per PostgreSQL
			defElem := yyDollar[2].defelt
			if defElem.Defname == "as" || defElem.Defname == "restart" || defElem.Defname == "owned_by" {
				yylex.Error("sequence option not supported here")
			}
			yyVAL.defelt = yyDollar[2].defelt
		}
	case 1974:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6919
		{
			yyVAL.defelt = ast.NewDefElem("generated", ast.NewInteger(int(yyDollar[3].byt)))
		}
	case 1975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6925
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1976:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6926
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1977:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6931
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].typnam)
		}
	case 1978:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6935
		{
			yyVAL.defelt = ast.NewDefElem("cache", yyDollar[2].node)
		}
	case 1979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6939
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(true))
		}
	case 1980:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6943
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(false))
		}
	case 1981:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6947
		{
			yyVAL.defelt = ast.NewDefElem("increment", yyDollar[3].node)
		}
	case 1982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6951
		{
			yyVAL.defelt = ast.NewDefElem("logged", nil)
		}
	case 1983:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6955
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", yyDollar[2].node)
		}
	case 1984:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6959
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", yyDollar[2].node)
		}
	case 1985:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6963
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", nil)
		}
	case 1986:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6967
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", nil)
		}
	case 1987:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6971
		{
			yyVAL.defelt = ast.NewDefElem("owned_by", yyDollar[3].list)
		}
	case 1988:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6975
		{
			yyVAL.defelt = ast.NewDefElem("sequence_name", yyDollar[3].list)
		}
	case 1989:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6979
		{
			yyVAL.defelt = ast.NewDefElem("start", yyDollar[3].node)
		}
	case 1990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6983
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1991:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6987
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6991
		{
			yyVAL.defelt = ast.NewDefElem("unlogged", nil)
		}
	case 1993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6997
		{
		}
	case 1994:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6998
		{
		}
	case 1995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7002
		{
		}
	case 1996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7003
		{
		}
	case 1997:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7004
		{
		}
	case 1998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7009
		{
			// RECHECK no longer does anything in opclass definitions,
			// but we still accept it to ease porting of old database dumps.
			// When this is used, we should emit a notice.
			// For now, just return true to indicate RECHECK was present
			yyVAL.bval = true
		}
	case 1999:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7016
		{
			yyVAL.bval = false
		}
	case 2000:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7020
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2001:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7021
		{
			yyVAL.list = nil
		}
	case 2002:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7026
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NOTNULL)
		}
	case 2003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7030
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NULL)
		}
	case 2004:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7034
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Keys = nil // Will be filled by the parser
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Options = yyDollar[3].list
			constraint.Indexspace = yyDollar[4].str
			yyVAL.node = constraint
		}
	case 2005:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7043
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = nil // Will be filled by the parser
			yyVAL.node = constraint
		}
	case 2006:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7049
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			yyVAL.node = constraint
		}
	case 2007:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7055
		{
			constraint := ast.NewConstraint(ast.CONSTR_DEFAULT)
			constraint.RawExpr = yyDollar[2].node
			yyVAL.node = constraint
		}
	case 2008:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7061
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Pktable = yyDollar[2].rangevar
			constraint.PkAttrs = yyDollar[3].list
			constraint.FkMatchtype = yyDollar[4].byt
			if actions := yyDollar[5].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			yyVAL.node = constraint
		}
	case 2009:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7078
		{
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.Options = yyDollar[5].list
			yyVAL.node = constraint
		}
	case 2010:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7085
		{
			constraint := ast.NewConstraint(ast.CONSTR_GENERATED)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.RawExpr = yyDollar[5].node
			yyVAL.node = constraint
		}
	case 2011:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7095
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 2012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7100
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2013:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7105
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			processConstraintAttributeSpec(yyDollar[5].ival, constraint)
			yyVAL.node = constraint
		}
	case 2014:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7113
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 2015:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7124
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Indexname = yyDollar[2].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[3].ival, constraint)
			yyVAL.node = constraint
		}
	case 2016:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7135
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 2017:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7145
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Indexname = yyDollar[3].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[4].ival, constraint)
			yyVAL.node = constraint
		}
	case 2018:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7156
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.FkAttrs = yyDollar[4].list
			constraint.Pktable = yyDollar[7].rangevar
			constraint.PkAttrs = yyDollar[8].list
			constraint.FkMatchtype = yyDollar[9].byt
			if actions := yyDollar[10].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			processConstraintAttributeSpec(yyDollar[11].ival, constraint)
			yyVAL.node = constraint
		}
	case 2019:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7177
		{
			constraint := ast.NewConstraint(ast.CONSTR_EXCLUSION)
			constraint.AccessMethod = yyDollar[2].str
			constraint.Exclusions = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			constraint.WhereClause = yyDollar[9].node
			processConstraintAttributeSpec(yyDollar[10].ival, constraint)
			yyVAL.node = constraint
		}
	case 2020:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7191
		{
			yyVAL.bval = true
		}
	case 2021:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7192
		{
			yyVAL.bval = false
		}
	case 2022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7198
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2023:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7204
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2024:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7212
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[3].list)
		}
	case 2025:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7217
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[5].list)
		}
	case 2026:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7225
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2027:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7229
		{
			yyVAL.list = nil
		}
	case 2028:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7236
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_FULL
		}
	case 2029:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7240
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_PARTIAL
		}
	case 2030:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7244
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 2031:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7248
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 2032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7255
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 2033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7265
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 2034:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7275
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = yyDollar[2].keyaction
			yyVAL.keyactions = n
		}
	case 2035:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7282
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[2].keyaction
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 2036:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7289
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 2037:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7304
		{
			// Check for unsupported column lists on UPDATE actions
			keyAction := yyDollar[3].keyaction
			if keyAction.Cols != nil {
				if len(keyAction.Cols.Items) > 0 {
					yylex.Error("column list with SET NULL/SET DEFAULT is only supported for ON DELETE actions")
				}
			}
			yyVAL.keyaction = keyAction
		}
	case 2038:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7317
		{
			yyVAL.keyaction = yyDollar[3].keyaction
		}
	case 2039:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7324
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_NOACTION
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7331
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_RESTRICT
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7338
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_CASCADE
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2042:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7345
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETNULL
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 2043:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7352
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETDEFAULT
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 2044:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7361
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2045:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7362
		{
			yyVAL.list = nil
		}
	case 2046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7366
		{
			yyVAL.partspec = yyDollar[1].partspec
		}
	case 2047:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7367
		{
			yyVAL.partspec = nil
		}
	case 2048:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7372
		{
			partitionSpec := ast.NewPartitionSpec(ast.PartitionStrategy(yyDollar[3].str), yyDollar[5].list)
			yyVAL.partspec = partitionSpec
		}
	case 2049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7380
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2050:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7385
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2051:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7393
		{
			partElem := ast.NewPartitionElem(yyDollar[1].str, nil, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 2052:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7400
		{
			partElem := ast.NewPartitionElem("", yyDollar[1].node, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 2053:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7407
		{
			partElem := ast.NewPartitionElem("", yyDollar[2].node, 0)
			partElem.Collation = yyDollar[4].list
			partElem.Opclass = yyDollar[5].list
			yyVAL.node = partElem
		}
	case 2054:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7416
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2055:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7417
		{
			yyVAL.str = ""
		}
	case 2056:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7421
		{
			yyVAL.oncommit = ast.ONCOMMIT_DROP
		}
	case 2057:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7422
		{
			yyVAL.oncommit = ast.ONCOMMIT_DELETE_ROWS
		}
	case 2058:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7423
		{
			yyVAL.oncommit = ast.ONCOMMIT_PRESERVE_ROWS
		}
	case 2059:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7424
		{
			yyVAL.oncommit = ast.ONCOMMIT_NOOP
		}
	case 2060:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7428
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2061:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7429
		{
			yyVAL.str = ""
		}
	case 2062:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7433
		{
			yyVAL.str = yyDollar[4].str
		}
	case 2063:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7434
		{
			yyVAL.str = ""
		}
	case 2064:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7438
		{
			yyVAL.str = yyDollar[3].str
		}
	case 2065:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:7451
		{
			indexStmt := ast.NewIndexStmt(yyDollar[5].str, yyDollar[7].rangevar, yyDollar[10].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.AccessMethod = yyDollar[8].str
			indexStmt.IndexIncludingParams = yyDollar[12].list
			indexStmt.NullsNotDistinct = !yyDollar[13].bval
			indexStmt.Options = yyDollar[14].list
			indexStmt.TableSpace = yyDollar[15].str
			indexStmt.WhereClause = yyDollar[16].node
			yyVAL.stmt = indexStmt
		}
	case 2066:
		yyDollar = yyS[yypt-19 : yypt+1]
//line postgres.y:7466
		{
			indexStmt := ast.NewIndexStmt(yyDollar[8].str, yyDollar[10].rangevar, yyDollar[13].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.IfNotExists = true
			indexStmt.AccessMethod = yyDollar[11].str
			indexStmt.IndexIncludingParams = yyDollar[15].list
			indexStmt.NullsNotDistinct = !yyDollar[16].bval
			indexStmt.Options = yyDollar[17].list
			indexStmt.TableSpace = yyDollar[18].str
			indexStmt.WhereClause = yyDollar[19].node
			yyVAL.stmt = indexStmt
		}
	case 2067:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7482
		{
			yyVAL.bval = true
		}
	case 2068:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7483
		{
			yyVAL.bval = false
		}
	case 2069:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7487
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2070:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7488
		{
			yyVAL.str = "btree"
		}
	case 2071:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7492
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2072:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7493
		{
			yyVAL.list = nil
		}
	case 2073:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7498
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2074:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7503
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2075:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7511
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2076:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7512
		{
			yyVAL.list = nil
		}
	case 2077:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7524
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2078:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7530
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2079:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7537
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 2080:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7543
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2081:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7550
		{
			// Index partition attachment - dedicated rule
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 2082:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7559
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			yyVAL.stmt = alterStmt
		}
	case 2083:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7565
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2084:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7572
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			yyVAL.stmt = alterStmt
		}
	case 2085:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7578
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2086:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7585
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			yyVAL.stmt = alterStmt
		}
	case 2087:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7591
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2088:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7598
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2089:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7604
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2090:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7611
		{
			// Partition commands - dedicated rule for partition-only operations
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2091:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7620
		{
			// Partition commands with IF EXISTS
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[6].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2092:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7630
		{
			// Bulk tablespace move for tables
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 2093:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:7637
		{
			// Bulk tablespace move for tables owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 2094:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7645
		{
			// Bulk tablespace move for indexes
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 2095:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:7652
		{
			// Bulk tablespace move for indexes owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 2096:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7660
		{
			// Bulk tablespace move for materialized views
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[10].str)
			moveStmt.Nowait = yyDollar[11].bval
			yyVAL.stmt = moveStmt
		}
	case 2097:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:7667
		{
			// Bulk tablespace move for materialized views owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[13].str)
			moveStmt.Roles = yyDollar[10].list
			moveStmt.Nowait = yyDollar[14].bval
			yyVAL.stmt = moveStmt
		}
	case 2098:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7678
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2099:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7683
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7691
		{
			yyVAL.bval = true
		}
	case 2101:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7692
		{
			yyVAL.bval = false
		}
	case 2102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7697
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].rolespec)
		}
	case 2103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7702
		{
			yyDollar[1].list.Append(yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 2104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7710
		{
			roleSpec := yyDollar[1].rolespec

			switch roleSpec.Roletype {
			case ast.ROLESPEC_CSTRING:
				yyVAL.str = roleSpec.Rolename
			case ast.ROLESPEC_PUBLIC:
				// PostgreSQL throws an error for "public" role name
				yylex.Error(`role name "public" is reserved`)
				return 1
			case ast.ROLESPEC_SESSION_USER:
				// PostgreSQL throws an error: SESSION_USER cannot be used as a role name here
				yylex.Error(`SESSION_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_USER:
				// PostgreSQL throws an error: CURRENT_USER cannot be used as a role name here
				yylex.Error(`CURRENT_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_ROLE:
				// PostgreSQL throws an error: CURRENT_ROLE cannot be used as a role name here
				yylex.Error(`CURRENT_ROLE cannot be used as a role name here`)
				return 1
			default:
				yylex.Error(`invalid role specification`)
				return 1
			}
		}
	case 2105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7741
		{
			// Handle special role names: "public" and "none"
			var roleSpec *ast.RoleSpec

			if yyDollar[1].str == "public" {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_PUBLIC,
				}
			} else if yyDollar[1].str == "none" {
				// PostgreSQL throws an error for "none" - role name "none" is reserved
				yylex.Error(`role name "none" is reserved`)
				return 1
			} else {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_CSTRING,
					Rolename: yyDollar[1].str,
				}
			}
			yyVAL.rolespec = roleSpec
		}
	case 2106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7764
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_ROLE,
			}
		}
	case 2107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7771
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_USER,
			}
		}
	case 2108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7778
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_SESSION_USER,
			}
		}
	case 2109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7789
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[2].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2110:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7796
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[5].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7803
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2112:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7810
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[6].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7817
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ColumnDefault, yyDollar[3].str, yyDollar[4].node)
		}
	case 2114:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7822
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropNotNull, yyDollar[3].str, nil)
		}
	case 2115:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7827
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetNotNull, yyDollar[3].str, nil)
		}
	case 2116:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7832
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetExpression, yyDollar[3].str, yyDollar[8].node)
		}
	case 2117:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7837
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
		}
	case 2118:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7842
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2119:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7849
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStatistics, yyDollar[3].str, yyDollar[6].node)
		}
	case 2120:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7854
		{
			cmd := ast.NewAlterTableCmd(ast.AT_SetStatistics, "", yyDollar[6].node)
			cmd.Num = int16(yyDollar[3].ival)
			yyVAL.node = cmd
		}
	case 2121:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7861
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 2122:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7866
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 2123:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7871
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStorage, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 2124:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7876
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetCompression, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 2125:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7881
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddIdentity, yyDollar[3].str, nil)
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[6].byt
			constraint.Options = yyDollar[9].list
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 2126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7891
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetIdentity, yyDollar[3].str, yyDollar[4].list)
		}
	case 2127:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7896
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2128:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7903
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2129:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7910
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7918
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2131:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7929
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, nil)
			def := ast.NewColumnDef("", yyDollar[6].typnam, 0)
			def.Collclause = yyDollar[7].node.(*ast.CollateClause)
			def.RawDefault = yyDollar[8].node
			cmd.Def = def
			yyVAL.node = cmd
		}
	case 2132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7939
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AlterColumnGenericOptions, yyDollar[3].str, yyDollar[4].list)
		}
	case 2133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7944
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddConstraint, "", yyDollar[2].node)
		}
	case 2134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7949
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterConstraint, "", nil)
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Conname = yyDollar[3].str
			constraint.Deferrable = (yyDollar[4].ival & ast.CAS_DEFERRABLE) != 0
			constraint.Initdeferred = (yyDollar[4].ival & ast.CAS_INITIALLY_DEFERRED) != 0
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 2135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7960
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ValidateConstraint, yyDollar[3].str, nil)
		}
	case 2136:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7965
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7973
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7981
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOids, "", nil)
		}
	case 2139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7986
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ClusterOn, yyDollar[3].str, nil)
		}
	case 2140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7991
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropCluster, "", nil)
		}
	case 2141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7996
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetLogged, "", nil)
		}
	case 2142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8001
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetUnLogged, "", nil)
		}
	case 2143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8006
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrig, yyDollar[3].str, nil)
		}
	case 2144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8011
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysTrig, yyDollar[4].str, nil)
		}
	case 2145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8016
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaTrig, yyDollar[4].str, nil)
		}
	case 2146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8021
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigAll, "", nil)
		}
	case 2147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8026
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigUser, "", nil)
		}
	case 2148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8031
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrig, yyDollar[3].str, nil)
		}
	case 2149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8036
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigAll, "", nil)
		}
	case 2150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8041
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigUser, "", nil)
		}
	case 2151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8046
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRule, yyDollar[3].str, nil)
		}
	case 2152:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8051
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysRule, yyDollar[4].str, nil)
		}
	case 2153:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8056
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaRule, yyDollar[4].str, nil)
		}
	case 2154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8061
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRule, yyDollar[3].str, nil)
		}
	case 2155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8066
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddInherit, "", yyDollar[2].rangevar)
		}
	case 2156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8071
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropInherit, "", yyDollar[3].rangevar)
		}
	case 2157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8076
		{
			typeName := makeTypeNameFromNodeList(yyDollar[2].list)
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddOf, "", typeName)
		}
	case 2158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8082
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOf, "", nil)
		}
	case 2159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8087
		{
			cmd := ast.NewAlterTableCmd(ast.AT_ChangeOwner, "", nil)
			cmd.Newowner = yyDollar[3].rolespec
			yyVAL.node = cmd
		}
	case 2160:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8094
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetAccessMethod, yyDollar[4].str, nil)
		}
	case 2161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8099
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetTableSpace, yyDollar[3].str, nil)
		}
	case 2162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8104
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetRelOptions, "", yyDollar[2].list)
		}
	case 2163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8109
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetRelOptions, "", yyDollar[2].list)
		}
	case 2164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8114
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ReplicaIdentity, "", yyDollar[3].node)
		}
	case 2165:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8119
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRowSecurity, "", nil)
		}
	case 2166:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8124
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRowSecurity, "", nil)
		}
	case 2167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8129
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ForceRowSecurity, "", nil)
		}
	case 2168:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8134
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_NoForceRowSecurity, "", nil)
		}
	case 2169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8138
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_GenericOptions, "", yyDollar[1].list)
		}
	case 2170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8146
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, yyDollar[4].partboundspec, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2171:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8154
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, yyDollar[4].bval, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2172:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8161
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartitionFinalize, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8172
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8181
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8182
		{
			yyVAL.node = nil
		}
	case 2176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8186
		{
		}
	case 2177:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8187
		{
		}
	case 2178:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8198
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2179:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8211
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2180:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8224
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2181:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8237
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2182:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8250
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[5].list
			objects.Append(ast.NewString(yyDollar[3].str))
			n.Objects = objects
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2183:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8265
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[7].list
			objects.Append(ast.NewString(yyDollar[5].str))
			n.Objects = objects
			n.Behavior = yyDollar[8].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8280
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2185:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8293
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2186:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8306
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2187:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8319
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2188:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8332
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = false
			n.Objects = yyDollar[4].list
			n.Behavior = yyDollar[5].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2189:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8345
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = true
			n.Objects = yyDollar[6].list
			n.Behavior = yyDollar[7].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8361
		{
			stmt := yyDollar[2].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8367
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = true
			yyVAL.stmt = stmt
		}
	case 2192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8373
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8382
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "TRANSACTION", yyDollar[2].list, false)
		}
	case 2194:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8386
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "SESSION CHARACTERISTICS AS TRANSACTION", yyDollar[5].list, false)
		}
	case 2195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8389
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8393
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8395
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "timezone", nil, false)
		}
	case 2198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8399
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "transaction_isolation", nil, false)
		}
	case 2199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8403
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "session_authorization", nil, false)
		}
	case 2200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8410
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, yyDollar[1].str, nil, false)
		}
	case 2201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8414
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET_ALL, "", nil, false)
		}
	case 2202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8420
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8421
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8425
		{
			yyVAL.stmt = ast.Stmt(yyDollar[2].vsetstmt)
		}
	case 2205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8430
		{
			yyVAL.objType = ast.OBJECT_TABLE
		}
	case 2206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8431
		{
			yyVAL.objType = ast.OBJECT_SEQUENCE
		}
	case 2207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8432
		{
			yyVAL.objType = ast.OBJECT_VIEW
		}
	case 2208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8433
		{
			yyVAL.objType = ast.OBJECT_MATVIEW
		}
	case 2209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8434
		{
			yyVAL.objType = ast.OBJECT_INDEX
		}
	case 2210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8435
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_TABLE
		}
	case 2211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8436
		{
			yyVAL.objType = ast.OBJECT_COLLATION
		}
	case 2212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8437
		{
			yyVAL.objType = ast.OBJECT_CONVERSION
		}
	case 2213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8438
		{
			yyVAL.objType = ast.OBJECT_STATISTIC_EXT
		}
	case 2214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8439
		{
			yyVAL.objType = ast.OBJECT_TSPARSER
		}
	case 2215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8440
		{
			yyVAL.objType = ast.OBJECT_TSDICTIONARY
		}
	case 2216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8441
		{
			yyVAL.objType = ast.OBJECT_TSTEMPLATE
		}
	case 2217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8442
		{
			yyVAL.objType = ast.OBJECT_TSCONFIGURATION
		}
	case 2218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8455
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8456
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8461
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8465
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8473
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode: ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:  yyDollar[1].list,
				Objargs:  yyDollar[2].list,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8485
		{
			yylex.Error("Use NONE to denote the missing argument of a unary operator.")
			return 1
		}
	case 2224:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8490
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, yyDollar[4].typnam)
		}
	case 2225:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8492
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[4].typnam)
		}
	case 2226:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8494
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, nil)
		}
	case 2227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8498
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8511
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 2229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8513
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 2230:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8517
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2231:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8528
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2232:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8539
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2233:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8550
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DATABASE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2234:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8561
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2235:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8572
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMCONSTRAINT,
				Object:     yyDollar[3].list,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2236:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8584
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2237:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8595
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2238:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8606
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2239:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8617
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2240:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8628
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2241:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8645
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2242:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8662
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2243:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:8674
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[7].rangevar,
				Subname:    yyDollar[5].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2244:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8686
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2245:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8697
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2246:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8708
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2247:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8719
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SCHEMA,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2248:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8730
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2249:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8741
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2250:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8752
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2251:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8763
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2252:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8774
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2253:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8785
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2254:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8796
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2255:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8807
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2256:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8818
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2257:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8829
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2258:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8840
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2259:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8851
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2260:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8862
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2261:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8873
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2262:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8884
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2263:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:8897
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2264:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8910
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2265:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:8923
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2266:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8936
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2267:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:8949
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2268:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8962
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[3].rangevar,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2269:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:8974
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[8].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2270:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8986
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2271:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:8999
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2272:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9012
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_RULE,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2273:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9024
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TRIGGER,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2274:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9036
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2275:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9047
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2276:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9058
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2277:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9069
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLESPACE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2278:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9080
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2279:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9091
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSPARSER,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2280:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9102
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2281:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9113
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSTEMPLATE,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2282:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9124
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2283:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9135
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2284:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9146
		{
			rv, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(err.Error())
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_ATTRIBUTE,
				RelationType: ast.OBJECT_TYPE,
				Relation:     rv,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				Behavior:     ast.DropBehavior(yyDollar[9].dropBehav),
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2285:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9172
		{
			yyVAL.ival = 0
		}
	case 2286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9174
		{
			// Combine constraint attribute bits
			newspec := yyDollar[1].ival | yyDollar[2].ival

			// Check for conflicts (NOT DEFERRABLE + INITIALLY DEFERRED)
			if (newspec & (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED)) == (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED) {
				// This would be an error in real PostgreSQL parser
			}

			yyVAL.ival = newspec
		}
	case 2287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9188
		{
			yyVAL.ival = ast.CAS_NOT_DEFERRABLE
		}
	case 2288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9189
		{
			yyVAL.ival = ast.CAS_DEFERRABLE
		}
	case 2289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9190
		{
			yyVAL.ival = ast.CAS_INITIALLY_IMMEDIATE
		}
	case 2290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9191
		{
			yyVAL.ival = ast.CAS_INITIALLY_DEFERRED
		}
	case 2291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9192
		{
			yyVAL.ival = ast.CAS_NOT_VALID
		}
	case 2292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9193
		{
			yyVAL.ival = ast.CAS_NO_INHERIT
		}
	case 2293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9197
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9202
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9207
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9215
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9219
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2298:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9223
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, yyDollar[5].node, ast.DEFELEM_UNSPEC)
		}
	case 2299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9227
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, nil, ast.DEFELEM_UNSPEC)
		}
	case 2300:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9241
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  yyDollar[7].typnam,
				Options:     yyDollar[8].list,
				SQLBody:     yyDollar[9].node,
			}
			yyVAL.stmt = stmt
		}
	case 2301:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:9255
		{
			// Handle RETURNS TABLE variant
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil, // TODO: Handle table return type
				Options:     yyDollar[11].list,
				SQLBody:     yyDollar[12].node,
			}
			// TODO: Process table_func_column_list into appropriate return type
			yyVAL.stmt = stmt
		}
	case 2302:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9271
		{
			// No explicit return type (for procedures disguised as functions)
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2303:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9286
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: true,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9301
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9302
		{
			yyVAL.list = nil
		}
	case 2306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9307
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9311
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9319
		{
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9323
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9328
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9336
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    yyDollar[2].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9345
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[2].funparammode,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9354
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9363
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    "",
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9372
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    "",
				ArgType: yyDollar[1].typnam,
			}
			yyVAL.funparam = param
		}
	case 2316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9383
		{
			yyVAL.funparammode = ast.FUNC_PARAM_IN
		}
	case 2317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9384
		{
			yyVAL.funparammode = ast.FUNC_PARAM_OUT
		}
	case 2318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9385
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9386
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9387
		{
			yyVAL.funparammode = ast.FUNC_PARAM_VARIADIC
		}
	case 2321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9391
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9395
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2323:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9397
		{
			// Handle %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				// TODO: Add %TYPE indicator
			}
		}
	case 2324:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9407
		{
			// Handle SETOF %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[2].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				Setof: true,
			}
		}
	case 2325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9419
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9420
		{
			yyVAL.list = nil
		}
	case 2327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9425
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].defelt)
			yyVAL.list = list
		}
	case 2328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9431
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9439
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].node)
		}
	case 2330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9443
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 2331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9447
		{
			yyVAL.defelt = ast.NewDefElem("transform", yyDollar[2].list)
		}
	case 2332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9451
		{
			yyVAL.defelt = ast.NewDefElem("window", ast.NewBoolean(true))
		}
	case 2333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9455
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9462
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.node = list
		}
	case 2335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9468
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 2336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9478
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[3].typnam)
			yyVAL.list = list
		}
	case 2337:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9484
		{
			yyDollar[1].list.Append(yyDollar[5].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9492
		{
			yyVAL.node = yyDollar[1].stmt
		}
	case 2339:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9496
		{
			/*
			 * A compound statement is stored as a single-item list
			 * containing the list of statements as its member.  That
			 * way, the parse analysis code can tell apart an empty
			 * body from no body at all.
			 */
			list := ast.NewNodeList()
			list.Append(yyDollar[3].list)
			yyVAL.node = list
		}
	case 2340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9508
		{
			yyVAL.node = nil
		}
	case 2341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9515
		{
			yyVAL.stmt = &ast.ReturnStmt{
				ReturnVal: yyDollar[2].node,
			}
		}
	case 2342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9524
		{
			/* As in stmtmulti, discard empty statements */
			if yyDollar[2].stmt != nil {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			} else {
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9534
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9540
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9541
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9546
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9550
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2348:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:9566
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[6].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: false,
				Trigname:     yyDollar[4].str,
				Relation:     yyDollar[8].rangevar,
				Funcname:     yyDollar[14].list,
				Args:         yyDollar[16].list,
				Row:          yyDollar[10].bval,
				Timing:       int16(yyDollar[5].ival),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[11].node,
				Transitions:  yyDollar[9].list,
				Deferrable:   false,
				Initdeferred: false,
				Constrrel:    nil,
			}
			yyVAL.stmt = stmt
		}
	case 2349:
		yyDollar = yyS[yypt-21 : yypt+1]
//line postgres.y:9598
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[7].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: true,
				Trigname:     yyDollar[5].str,
				Relation:     yyDollar[9].rangevar,
				Funcname:     yyDollar[18].list,
				Args:         yyDollar[20].list,
				Row:          true,
				Timing:       int16(ast.TRIGGER_TIMING_AFTER),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[15].node,
				Transitions:  nil,
				Deferrable:   true, // Default for constraint triggers
				Initdeferred: false,
				Constrrel:    yyDollar[10].rangevar,
			}
			yyVAL.stmt = stmt
		}
	case 2350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9629
		{
			yyVAL.ival = ast.TRIGGER_TIMING_BEFORE
		}
	case 2351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9630
		{
			yyVAL.ival = ast.TRIGGER_TIMING_AFTER
		}
	case 2352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9631
		{
			yyVAL.ival = ast.TRIGGER_TIMING_INSTEAD
		}
	case 2353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9636
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9638
		{
			// Extract event types and column lists from both sides
			events1 := yyDollar[1].list.Items[0].(*ast.Integer).IVal
			events2 := yyDollar[3].list.Items[0].(*ast.Integer).IVal
			columns1 := yyDollar[1].list.Items[1]
			columns2 := yyDollar[3].list.Items[1]

			// Check for duplicate events
			if events1&events2 != 0 {
				// TODO: Generate parse error for duplicate trigger events
			}

			// Create combined result [events1|events2, combined_columns]
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(events1 | events2))

			// Concatenate column lists (if any)
			if columns1 != nil && columns2 != nil {
				// Both have columns - concatenate
				combinedCols := columns1.(*ast.NodeList)
				if columns2List, ok := columns2.(*ast.NodeList); ok {
					for _, item := range columns2List.Items {
						combinedCols.Append(item)
					}
				}
				list.Append(combinedCols)
			} else if columns1 != nil {
				list.Append(columns1)
			} else if columns2 != nil {
				list.Append(columns2)
			} else {
				list.Append(nil)
			}

			yyVAL.list = list
		}
	case 2355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9678
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_INSERT)))
			list.Append(nil) // No columns for INSERT
			yyVAL.list = list
		}
	case 2356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9685
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_DELETE)))
			list.Append(nil) // No columns for DELETE
			yyVAL.list = list
		}
	case 2357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9692
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(nil) // No columns for UPDATE
			yyVAL.list = list
		}
	case 2358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9699
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(yyDollar[3].list) // Column list for UPDATE OF
			yyVAL.list = list
		}
	case 2359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9706
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_TRUNCATE)))
			list.Append(nil) // No columns for TRUNCATE
			yyVAL.list = list
		}
	case 2360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9715
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2361:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9716
		{
			yyVAL.list = nil
		}
	case 2362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9720
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9725
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2364:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9733
		{
			trans := &ast.TriggerTransition{
				Name:    yyDollar[4].str,
				IsNew:   yyDollar[1].bval,
				IsTable: yyDollar[2].bval,
			}
			yyVAL.node = trans
		}
	case 2365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9744
		{
			yyVAL.bval = true
		}
	case 2366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9745
		{
			yyVAL.bval = false
		}
	case 2367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9749
		{
			yyVAL.bval = true
		}
	case 2368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9750
		{
			yyVAL.bval = false
		}
	case 2369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9754
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9759
		{
			yyVAL.bval = yyDollar[3].bval
		}
	case 2371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9763
		{
			// If ROW/STATEMENT not specified, default to STATEMENT
			yyVAL.bval = false
		}
	case 2374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9775
		{
			yyVAL.bval = true
		}
	case 2375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9776
		{
			yyVAL.bval = false
		}
	case 2376:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9780
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2377:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9781
		{
			yyVAL.node = nil
		}
	case 2380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9790
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9795
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2382:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9799
		{
			yyVAL.list = nil
		}
	case 2383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9804
		{
			yyVAL.node = ast.NewString(fmt.Sprintf("%d", yyDollar[1].ival))
		}
	case 2384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9807
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9808
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9809
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9813
		{
			yyVAL.rangevar = yyDollar[2].rangevar
		}
	case 2388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9814
		{
			yyVAL.rangevar = nil
		}
	case 2389:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9827
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[4].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[5].list,
				Query:           yyDollar[8].stmt,
				Replace:         false,
				Options:         yyDollar[6].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[9].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2390:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9843
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[6].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[10].stmt,
				Replace:         true,
				Options:         yyDollar[8].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[11].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2391:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:9859
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[5].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[11].stmt,
				Replace:         false,
				Options:         yyDollar[9].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[12].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2392:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:9875
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[7].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[9].list,
				Query:           yyDollar[13].stmt,
				Replace:         true,
				Options:         yyDollar[11].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[14].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9892
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9893
		{
			yyVAL.list = nil
		}
	case 2395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9897
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2396:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9898
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2397:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9899
		{
			yyVAL.ival = int(ast.LOCAL_CHECK_OPTION)
		}
	case 2398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9900
		{
			yyVAL.ival = int(ast.NO_CHECK_OPTION)
		}
	case 2399:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9911
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = yyDollar[5].rolespec
			n.SchemaElts = yyDollar[6].list
			yyVAL.stmt = n
		}
	case 2400:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9918
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = nil
			n.SchemaElts = yyDollar[4].list
			yyVAL.stmt = n
		}
	case 2401:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9925
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = yyDollar[8].rolespec
			n.SchemaElts = yyDollar[9].list
			yyVAL.stmt = n
		}
	case 2402:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9932
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = nil
			n.SchemaElts = yyDollar[7].list
			yyVAL.stmt = n
		}
	case 2403:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9948
		{
			n := ast.NewCreateDomainStmt(yyDollar[3].list, yyDollar[5].typnam)
			// Use SplitColQualList to separate constraints and collate clause
			constraints, collClause := SplitColQualList(yyDollar[6].list)
			n.Constraints = constraints
			n.CollClause = collClause
			yyVAL.stmt = n
		}
	case 2404:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9966
		{
			n := ast.NewAlterDomainStmt('T', yyDollar[3].list)
			n.Def = yyDollar[4].node
			yyVAL.stmt = n
		}
	case 2405:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9972
		{
			n := ast.NewAlterDomainStmt('N', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2406:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9977
		{
			n := ast.NewAlterDomainStmt('O', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2407:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9982
		{
			n := ast.NewAlterDomainStmt('C', yyDollar[3].list)
			n.Def = yyDollar[5].node
			yyVAL.stmt = n
		}
	case 2408:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9988
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[6].str
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			yyVAL.stmt = n
		}
	case 2409:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9996
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[8].str
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			yyVAL.stmt = n
		}
	case 2410:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10004
		{
			n := ast.NewAlterDomainStmt('V', yyDollar[3].list)
			n.Name = yyDollar[6].str
			yyVAL.stmt = n
		}
	case 2411:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10019
		{
			// Extract actual arguments from aggr_args which returns [args, position_indicator]
			var args *ast.NodeList
			if yyDollar[5].list != nil && yyDollar[5].list.Len() > 0 {
				// First element contains the actual arguments (or nil for *)
				if firstElem, ok := yyDollar[5].list.Items[0].(*ast.NodeList); ok {
					args = firstElem
				} else if yyDollar[5].list.Items[0] == nil {
					// Special case for COUNT(*) - create a list with a single nil element
					args = ast.NewNodeList(nil)
				}
			}
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, false, yyDollar[4].list, args, yyDollar[6].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2412:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10035
		{
			// old-style (pre-8.2) syntax for CREATE AGGREGATE
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, true, yyDollar[4].list, nil, yyDollar[5].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2413:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10041
		{
			n := ast.NewDefineStmt(ast.OBJECT_OPERATOR, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2414:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10046
		{
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10051
		{
			// Shell type (identified by lack of definition)
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, nil, false, false)
			yyVAL.stmt = n
		}
	case 2416:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10057
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSPARSER, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2417:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10062
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSDICTIONARY, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2418:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10067
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSTEMPLATE, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2419:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10072
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSCONFIGURATION, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2420:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10077
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2421:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10082
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, yyDollar[7].list, true, false)
			yyVAL.stmt = n
		}
	case 2422:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10087
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, ast.NewNodeList(yyDollar[5].list), false, false)
			yyVAL.stmt = n
		}
	case 2423:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10092
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, ast.NewNodeList(yyDollar[8].list), true, false)
			yyVAL.stmt = n
		}
	case 2424:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10097
		{
			typevar, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(fmt.Sprintf("invalid type name: %v", err))
				return 1
			}

			n := ast.NewCompositeTypeStmt(typevar, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2425:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10108
		{
			n := ast.NewCreateEnumStmt(yyDollar[3].list, yyDollar[7].list)
			yyVAL.stmt = n
		}
	case 2426:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10113
		{
			n := ast.NewCreateRangeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2427:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10127
		{
			n := ast.NewCreateSeqStmt(yyDollar[4].rangevar, yyDollar[5].list, 0, false, false)
			yyVAL.stmt = n
		}
	case 2428:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10132
		{
			n := ast.NewCreateSeqStmt(yyDollar[7].rangevar, yyDollar[8].list, 0, false, true)
			yyVAL.stmt = n
		}
	case 2429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10139
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10140
		{
			yyVAL.list = nil
		}
	case 2431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10143
		{
		}
	case 2432:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10144
		{
		}
	case 2433:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10155
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[3].rangevar, yyDollar[4].list, false, false)
		}
	case 2434:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10159
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[5].rangevar, yyDollar[6].list, false, true)
		}
	case 2435:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10172
		{
			n := ast.NewCreateExtensionStmt(yyDollar[3].str, false, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2436:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10177
		{
			n := ast.NewCreateExtensionStmt(yyDollar[6].str, true, yyDollar[8].list)
			yyVAL.stmt = n
		}
	case 2437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10185
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2438:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10194
		{
			yyVAL.list = nil
		}
	case 2439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10201
		{
			yyVAL.defelt = ast.NewDefElem("schema", ast.NewString(yyDollar[2].str))
		}
	case 2440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10205
		{
			yyVAL.defelt = ast.NewDefElem("version", ast.NewString(yyDollar[2].str))
		}
	case 2441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10209
		{
			yylex.Error("CREATE EXTENSION ... FROM is no longer supported")
			return 1
		}
	case 2442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10214
		{
			yyVAL.defelt = ast.NewDefElem("cascade", ast.NewBoolean(true))
		}
	case 2443:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10227
		{
			n := ast.NewAlterExtensionStmt(yyDollar[3].str, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10235
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10244
		{
			yyVAL.list = nil
		}
	case 2446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10251
		{
			yyVAL.defelt = ast.NewDefElem("to", ast.NewString(yyDollar[2].str))
		}
	case 2447:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10264
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), ast.NewString(yyDollar[6].str))
		}
	case 2448:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10268
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), yyDollar[6].list)
		}
	case 2449:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10272
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_AGGREGATE), yyDollar[6].objwithargs)
		}
	case 2450:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10276
		{
			// CAST takes two TypeNames as a NodeList
			list := ast.NewNodeList(yyDollar[7].typnam)
			list.Append(yyDollar[9].typnam)
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_CAST), list)
		}
	case 2451:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10283
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_DOMAIN), yyDollar[6].typnam)
		}
	case 2452:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10287
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_FUNCTION), yyDollar[6].objwithargs)
		}
	case 2453:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10291
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPERATOR), yyDollar[6].objwithargs)
		}
	case 2454:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10295
		{
			// OPERATOR CLASS takes method name + class name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then class name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPCLASS), list)
		}
	case 2455:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10304
		{
			// OPERATOR FAMILY takes method name + family name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then family name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPFAMILY), list)
		}
	case 2456:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10313
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_PROCEDURE), yyDollar[6].objwithargs)
		}
	case 2457:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10317
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_ROUTINE), yyDollar[6].objwithargs)
		}
	case 2458:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10321
		{
			list := ast.NewNodeList(yyDollar[7].typnam, ast.NewString(yyDollar[9].str))
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TRANSFORM), list)
		}
	case 2459:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10326
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TYPE), yyDollar[6].typnam)
		}
	case 2460:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10338
		{
			yyVAL.stmt = ast.NewCreateFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2461:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10344
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2462:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10348
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, nil)
		}
	case 2463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10354
		{
			yyVAL.defelt = ast.NewDefElem("handler", yyDollar[2].list)
		}
	case 2464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10355
		{
			yyVAL.defelt = ast.NewDefElem("handler", nil)
		}
	case 2465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10356
		{
			yyVAL.defelt = ast.NewDefElem("validator", yyDollar[2].list)
		}
	case 2466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10357
		{
			yyVAL.defelt = ast.NewDefElem("validator", nil)
		}
	case 2467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10361
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10362
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10366
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2470:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10367
		{
			yyVAL.list = nil
		}
	case 2471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10371
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10372
		{
			result := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				result.Append(item)
			}
			yyVAL.list = result
		}
	case 2473:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10389
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].str, yyDollar[9].str, yyDollar[10].list, false)
		}
	case 2474:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:10394
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[6].str, yyDollar[7].str, yyDollar[8].str, yyDollar[12].str, yyDollar[13].list, true)
		}
	case 2475:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10400
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].list, true)
		}
	case 2476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10404
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, nil, true)
		}
	case 2477:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10408
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, "", yyDollar[4].list, false)
		}
	case 2478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10414
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2479:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10415
		{
			yyVAL.str = ""
		}
	case 2480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10419
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10420
		{
			yyVAL.str = ""
		}
	case 2482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10424
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10425
		{
			yyVAL.str = ""
		}
	case 2484:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10438
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[6].list, yyDollar[8].list, yyDollar[10].str, yyDollar[11].list, nil, false)
		}
	case 2485:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:10444
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[9].list, yyDollar[11].list, yyDollar[13].str, yyDollar[14].list, nil, true)
		}
	case 2486:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:10450
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[8].list, ast.NewNodeList(yyDollar[7].rangevar), yyDollar[11].str, yyDollar[12].list, yyDollar[9].partboundspec, false)
		}
	case 2487:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:10456
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[11].list, ast.NewNodeList(yyDollar[10].rangevar), yyDollar[14].str, yyDollar[15].list, yyDollar[12].partboundspec, true)
		}
	case 2488:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10468
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list, false)
		}
	case 2489:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10472
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[8].rolespec, yyDollar[10].str, yyDollar[11].list, true)
		}
	case 2490:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10478
		{
			yyVAL.stmt = ast.NewAlterUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list)
		}
	case 2491:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10484
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, false)
		}
	case 2492:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10488
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[7].rolespec, yyDollar[9].str, true)
		}
	case 2493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10494
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 2494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10495
		{
			yyVAL.rolespec = ast.NewRoleSpec(ast.ROLESPEC_CURRENT_USER, "")
		}
	case 2495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10500
		{
			// For aggregates like COUNT(*)
			// Return a list with [nil, -1] matching PostgreSQL's list_make2(NIL, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(nil, ast.NewInteger(-1))
		}
	case 2496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10506
		{
			// Regular aggregate arguments
			// Return a list with [args, -1] matching PostgreSQL's list_make2($2, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(yyDollar[2].list, ast.NewInteger(-1))
		}
	case 2497:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10512
		{
			// Ordered-set aggregate without direct arguments
			// Return a list with [args, 0] matching PostgreSQL's list_make2($4, makeInteger(0))
			yyVAL.list = ast.NewNodeList(yyDollar[4].list, ast.NewInteger(0))
		}
	case 2498:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10518
		{
			// Hypothetical-set aggregate
			// This is the only case requiring consistency checking in PostgreSQL
			result, err := makeOrderedSetArgs(yyDollar[2].list, yyDollar[5].list)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.list = result
		}
	case 2499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10532
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10536
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10544
		{
			yyVAL.node = yyDollar[1].funparam
		}
	case 2502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10551
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10558
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10562
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10570
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2506:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10577
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			n.NewValIsAfter = true
			yyVAL.stmt = n
		}
	case 2507:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10585
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = false
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2508:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10594
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = true
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2509:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10603
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.OldVal = yyDollar[6].str
			n.NewVal = yyDollar[8].str
			n.SkipIfNewValExists = false
			yyVAL.stmt = n
		}
	case 2510:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10611
		{
			// Following PostgreSQL's approach - DROP VALUE is parsed but not implemented
			// PostgreSQL throws an error saying "dropping an enum value is not implemented"
			yylex.Error("dropping an enum value is not implemented")
			return 1
		}
	case 2511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10627
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2512:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10629
		{
			yyVAL.list = nil
		}
	case 2513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10634
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10636
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10641
		{
			if constraint, ok := yyDollar[3].node.(*ast.Constraint); ok {
				constraint.Conname = yyDollar[2].str
				yyVAL.node = constraint
			} else {
				yyVAL.node = yyDollar[3].node
			}
		}
	case 2516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10650
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2517:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10655
		{
			n := ast.NewConstraint(ast.CONSTR_CHECK)
			n.RawExpr = yyDollar[3].node
			n.CookedExpr = "" // Empty string, not nil
			// Process constraint attributes from $5
			processConstraintAttributeSpec(yyDollar[5].ival, n)
			// PostgreSQL: n->initially_valid = !n->skip_validation
			n.InitiallyValid = !n.SkipValidation
			yyVAL.node = n
		}
	case 2518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10666
		{
			n := ast.NewConstraint(ast.CONSTR_NOTNULL)
			// In PostgreSQL, domain NOT NULL constraints have keys = list_make1(makeString("value"))
			n.Keys = ast.NewNodeList(ast.NewString("value"))
			// Process constraint attributes from $3
			processConstraintAttributeSpec(yyDollar[3].ival, n)
			// PostgreSQL sets initially_valid = true for NOT NULL (no NOT VALID support yet)
			n.InitiallyValid = true
			yyVAL.node = n
		}
	case 2519:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10686
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[7].stmt, yyDollar[5].into, ast.OBJECT_MATVIEW, false, false)
			/* cram additional flags into the IntoClause */
			yyDollar[5].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[5].into.SkipData = !yyDollar[8].bval
			yyVAL.stmt = ctas
		}
	case 2520:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10694
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[10].stmt, yyDollar[8].into, ast.OBJECT_MATVIEW, false, true)
			/* cram additional flags into the IntoClause */
			yyDollar[8].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[8].into.SkipData = !yyDollar[11].bval
			yyVAL.stmt = ctas
		}
	case 2521:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10705
		{
			n := ast.NewRefreshMatViewStmt(yyDollar[4].bval, !yyDollar[6].bval, yyDollar[5].rangevar)
			yyVAL.stmt = n
		}
	case 2522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10711
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 2523:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10712
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 2524:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10717
		{
			yyVAL.into = &ast.IntoClause{
				Rel:            yyDollar[1].rangevar,
				ColNames:       yyDollar[2].list,
				AccessMethod:   yyDollar[3].str,
				Options:        yyDollar[4].list,
				TableSpaceName: yyDollar[5].str,
			}
		}
	case 2525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10729
		{
			yyVAL.bval = true
		}
	case 2526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10730
		{
			yyVAL.bval = false
		}
	case 2527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10731
		{
			yyVAL.bval = true
		}
	case 2528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10736
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].stmt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10745
		{
			yyVAL.list = nil
		}
	case 2534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10756
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10758
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_CURRENT, yyDollar[1].str, nil, false)
		}
	case 2536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10762
		{
			args := ast.NewNodeList(yyDollar[3].node)
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "timezone", args, false)
		}
	case 2537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10767
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "catalog", args, false)
		}
	case 2538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10772
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "search_path", args, false)
		}
	case 2539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10777
		{
			var args *ast.NodeList
			if yyDollar[2].str != "" {
				args = ast.NewNodeList(ast.NewString(yyDollar[2].str))
			}
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "client_encoding", args, false)
		}
	case 2540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10785
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "role", args, false)
		}
	case 2541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10790
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "session_authorization", args, false)
		}
	case 2542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10795
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, "session_authorization", nil, false)
		}
	case 2543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10799
		{
			var value string
			if yyDollar[3].ival == int(ast.XMLOPTION_DOCUMENT) {
				value = "document"
			} else {
				value = "content"
			}
			args := ast.NewNodeList(ast.NewString(value))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "xmloption", args, false)
		}
	case 2544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10810
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "transaction_snapshot", args, false)
		}
	case 2545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10818
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10822
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10826
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10830
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10837
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10841
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 2551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10848
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10854
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10861
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10862
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10866
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10867
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10868
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10869
		{
			yyVAL.node = ast.NewString("default")
		}
	case 2559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10870
		{
			yyVAL.node = ast.NewString("local")
		}
	case 2560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10871
		{
			yyVAL.node = ast.NewString("true")
		}
	case 2561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10872
		{
			yyVAL.node = ast.NewString("false")
		}
	case 2562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10873
		{
			yyVAL.node = ast.NewString("on")
		}
	case 2563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10874
		{
			yyVAL.node = ast.NewString("off")
		}
	case 2564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10878
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10879
		{
			yyVAL.str = "default"
		}
	case 2566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10880
		{
			yyVAL.str = ""
		}
	case 2567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10884
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10885
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10889
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10890
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10891
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10892
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10896
		{
			yyVAL.ival = int(ast.XMLOPTION_DOCUMENT)
		}
	case 2574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10897
		{
			yyVAL.ival = int(ast.XMLOPTION_CONTENT)
		}
	case 2575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10902
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10908
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10913
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10921
		{
			yyVAL.node = ast.NewDefElem("transaction_isolation", ast.NewString(yyDollar[3].str))
		}
	case 2579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10925
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(true))
		}
	case 2580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10929
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(false))
		}
	case 2581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10933
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(true))
		}
	case 2582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10937
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(false))
		}
	case 2583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10943
		{
			yyVAL.str = "read uncommitted"
		}
	case 2584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10944
		{
			yyVAL.str = "read committed"
		}
	case 2585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10945
		{
			yyVAL.str = "repeatable read"
		}
	case 2586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10946
		{
			yyVAL.str = "serializable"
		}
	case 2587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10950
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10951
		{
			yyVAL.list = nil
		}
	case 2589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10955
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 2590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10956
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10957
		{
			yyVAL.node = yyDollar[1].list
		}
	case 2592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10960
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10961
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10962
		{
			yyVAL.node = ast.NewString("none")
		}
	case 2595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10966
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10967
		{
			yyVAL.list = nil
		}
	case 2597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10971
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10972
		{
			yyVAL.node = nil
		}
	case 2599:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10976
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10981
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10986
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10994
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10998
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_SET
			yyVAL.defelt = elem
		}
	case 2604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11004
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_ADD
			yyVAL.defelt = elem
		}
	case 2605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11010
		{
			yyVAL.defelt = ast.NewDefElemExtended("", yyDollar[2].str, nil, ast.DEFELEM_DROP)
		}
	case 2606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11016
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11017
		{
			yyVAL.str = ""
		}
	case 2608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11021
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_NOTHING, "")
		}
	case 2609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11022
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_FULL, "")
		}
	case 2610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11023
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_DEFAULT, "")
		}
	case 2611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11024
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_INDEX, yyDollar[3].str)
		}
	case 2612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11028
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11033
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11038
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11045
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11046
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2617:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11057
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[9].list, nil)
		}
	case 2618:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:11061
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[11].list, yyDollar[8].list)
		}
	case 2619:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11067
		{
			yyVAL.stmt = ast.NewAlterEventTrigStmt(yyDollar[4].str, ast.TriggerFires(yyDollar[5].ival))
		}
	case 2620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11073
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_ORIGIN)
		}
	case 2621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11074
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_REPLICA)
		}
	case 2622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11075
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ALWAYS)
		}
	case 2623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11076
		{
			yyVAL.ival = int(ast.TRIGGER_DISABLED)
		}
	case 2624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11081
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11086
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2626:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11094
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[4].list)
		}
	case 2627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11101
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(ast.NewString(yyDollar[1].str))
		}
	case 2628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11106
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2629:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11120
		{
			yyVAL.stmt = ast.NewCreateTableSpaceStmt(yyDollar[3].str, yyDollar[4].rolespec, yyDollar[6].str, yyDollar[7].list)
		}
	case 2630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11126
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 2631:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11127
		{
			yyVAL.rolespec = nil
		}
	case 2632:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11132
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, false)
		}
	case 2633:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11136
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, true)
		}
	case 2634:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11151
		{
			yyVAL.stmt = ast.NewCreatePolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].bval, yyDollar[7].str, yyDollar[8].list, yyDollar[9].node, yyDollar[10].node)
		}
	case 2635:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11159
		{
			yyVAL.stmt = ast.NewAlterPolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].list, yyDollar[7].node, yyDollar[8].node)
		}
	case 2636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11166
		{
			// Check for "permissive" or "restrictive" (case-insensitive)
			if strings.EqualFold(yyDollar[2].str, "permissive") {
				yyVAL.bval = true
			} else if strings.EqualFold(yyDollar[2].str, "restrictive") {
				yyVAL.bval = false
			} else {
				// Parser will error on invalid value
				yylex.Error("unrecognized row security option")
				return 1
			}
		}
	case 2637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11178
		{
			yyVAL.bval = true
		}
	case 2638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11182
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11183
		{
			yyVAL.str = "all"
		}
	case 2640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11187
		{
			yyVAL.str = "all"
		}
	case 2641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11188
		{
			yyVAL.str = "select"
		}
	case 2642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11189
		{
			yyVAL.str = "insert"
		}
	case 2643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11190
		{
			yyVAL.str = "update"
		}
	case 2644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11191
		{
			yyVAL.str = "delete"
		}
	case 2645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11195
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2646:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11196
		{
			// Default to PUBLIC when no TO clause is specified
			publicRole := ast.NewRoleSpec(ast.ROLESPEC_PUBLIC, "")
			yyVAL.list = ast.NewNodeList(publicRole)
		}
	case 2647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11204
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2648:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11205
		{
			yyVAL.list = nil
		}
	case 2649:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11209
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2650:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11210
		{
			yyVAL.node = nil
		}
	case 2651:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11214
		{
			yyVAL.node = yyDollar[4].node
		}
	case 2652:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11215
		{
			yyVAL.node = nil
		}
	case 2653:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11226
		{
			yyVAL.stmt = ast.NewCreateAmStmt(yyDollar[4].str, ast.AmType(yyDollar[6].ival), yyDollar[8].list)
		}
	case 2654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11232
		{
			yyVAL.ival = int(ast.AMTYPE_INDEX)
		}
	case 2655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11233
		{
			yyVAL.ival = int(ast.AMTYPE_TABLE)
		}
	case 2656:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11244
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[3].list, yyDollar[4].list, yyDollar[6].list, yyDollar[8].list, "", false, false)
		}
	case 2657:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11248
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[6].list, yyDollar[7].list, yyDollar[9].list, yyDollar[11].list, "", false, true)
		}
	case 2658:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11255
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[3].list, yyDollar[6].node, false)
		}
	case 2659:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11259
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[5].list, yyDollar[8].node, true)
		}
	case 2660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11265
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].statelem)
		}
	case 2661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11266
		{
			yyDollar[1].list.Append(yyDollar[3].statelem)
			yyVAL.list = yyDollar[1].list
		}
	case 2662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11270
		{
			yyVAL.statelem = ast.NewStatsElem(yyDollar[1].str)
		}
	case 2663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11271
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[1].node)
		}
	case 2664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11272
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[2].node)
		}
	case 2665:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11283
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, false, yyDollar[4].list)
		}
	case 2666:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11287
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, true, yyDollar[7].list)
		}
	case 2667:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11291
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, yyDollar[5].list, false, yyDollar[6].list)
		}
	case 2668:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11298
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, yyDollar[5].list, nil, ast.AP_SetOptions)
		}
	case 2669:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11302
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_AddObjects)
		}
	case 2670:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11306
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_SetObjects)
		}
	case 2671:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11310
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_DropObjects)
		}
	case 2672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11316
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11317
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2674:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11322
		{
			pubTable := ast.NewPublicationTable(yyDollar[2].rangevar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_TABLE, pubTable)
		}
	case 2675:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11327
		{
			yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_TABLES_IN_SCHEMA, yyDollar[4].str)
		}
	case 2676:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11331
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA)
		}
	case 2677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11335
		{
			// If either a row filter or column list is specified, create a PublicationTable object
			if yyDollar[2].list != nil || yyDollar[3].node != nil {
				// Create a simple RangeVar from the ColId
				rangeVar := ast.NewRangeVar(yyDollar[1].str, "", "")
				pubTable := ast.NewPublicationTable(rangeVar, yyDollar[3].node, yyDollar[2].list)
				yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
			} else {
				yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_CONTINUATION, yyDollar[1].str)
			}
		}
	case 2678:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11347
		{
			rangeVar := makeRangeVarFromQualifiedName(yyDollar[1].str, yyDollar[2].list, -1)
			pubTable := ast.NewPublicationTable(rangeVar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11353
		{
			pubTable := ast.NewPublicationTable(yyDollar[1].rangevar, yyDollar[3].node, yyDollar[2].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11358
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_CONTINUATION)
		}
	case 2681:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11364
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2682:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11365
		{
			yyVAL.node = nil
		}
	case 2683:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11376
		{
			yyVAL.stmt = ast.NewCreateSubscriptionStmt(yyDollar[3].str, yyDollar[5].str, yyDollar[7].list, yyDollar[8].list)
		}
	case 2684:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11383
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_OPTIONS, "", nil, yyDollar[5].list)
		}
	case 2685:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11387
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_CONNECTION, yyDollar[5].str, nil, nil)
		}
	case 2686:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11391
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_REFRESH, "", nil, yyDollar[6].list)
		}
	case 2687:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11395
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ADD_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2688:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11399
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_DROP_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2689:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11403
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SET_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2690:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11407
		{
			enableOpt := ast.NewNodeList()
			enableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(true)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, enableOpt)
		}
	case 2691:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11413
		{
			disableOpt := ast.NewNodeList()
			disableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(false)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, disableOpt)
		}
	case 2692:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11419
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SKIP, "", nil, yyDollar[5].list)
		}
	case 2693:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11432
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, yyDollar[10].objwithargs, ast.CoercionContext(yyDollar[11].ival), false)
		}
	case 2694:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11436
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), false)
		}
	case 2695:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11440
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), true)
		}
	case 2696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11446
		{
			yyVAL.ival = int(ast.COERCION_IMPLICIT)
		}
	case 2697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11447
		{
			yyVAL.ival = int(ast.COERCION_ASSIGNMENT)
		}
	case 2698:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11448
		{
			yyVAL.ival = int(ast.COERCION_EXPLICIT)
		}
	case 2699:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:11460
		{
			yyVAL.stmt = ast.NewCreateOpClassStmt(yyDollar[4].list, yyDollar[11].list, yyDollar[10].str, yyDollar[8].typnam, yyDollar[13].list, yyDollar[5].bval)
		}
	case 2700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11466
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2701:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11467
		{
			yyVAL.list = nil
		}
	case 2702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11471
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11472
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2704:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11477
		{
			// Create ObjectWithArgs for simple operator
			owa := ast.NewObjectWithArgs(yyDollar[3].list, nil, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, yyDollar[4].list)
		}
	case 2705:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11483
		{
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, yyDollar[3].objwithargs, yyDollar[4].list)
		}
	case 2706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11487
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[3].objwithargs, nil)
		}
	case 2707:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11491
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[6].objwithargs, yyDollar[4].list)
		}
	case 2708:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11495
		{
			yyVAL.node = ast.NewOpClassItemStorage(yyDollar[2].typnam)
		}
	case 2709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11501
		{
			yyVAL.bval = true
		}
	case 2710:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11502
		{
			yyVAL.bval = false
		}
	case 2711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11506
		{
			yyVAL.list = nil
		}
	case 2712:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11507
		{
			yyVAL.list = yyDollar[4].list
		}
	case 2713:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11508
		{
			yyVAL.list = nil
		}
	case 2714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11512
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].typnam)
		}
	case 2715:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11513
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2716:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11524
		{
			yyVAL.stmt = ast.NewCreateOpFamilyStmt(yyDollar[4].list, yyDollar[6].str)
		}
	case 2717:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11537
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, false, yyDollar[8].list)
		}
	case 2718:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11541
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, true, yyDollar[8].list)
		}
	case 2719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11547
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2720:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11548
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2721:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11553
		{
			// Create ObjectWithArgs for operator with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, nil)
		}
	case 2722:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11559
		{
			// Create ObjectWithArgs for function with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, owa, nil)
		}
	case 2723:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11574
		{
			yyVAL.stmt = ast.NewCreateConversionStmt(yyDollar[4].list, yyDollar[6].str, yyDollar[8].str, yyDollar[10].list, yyDollar[2].bval)
		}
	case 2724:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11587
		{
			yyVAL.stmt = ast.NewCreateTransformStmt(yyDollar[2].bval, yyDollar[5].typnam, yyDollar[7].str, linitial(yyDollar[9].list), lsecond(yyDollar[9].list))
		}
	case 2725:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11594
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs)  // fromsql
			yyVAL.list.Append(yyDollar[11].objwithargs) // tosql
		}
	case 2726:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11600
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[11].objwithargs) // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs)  // tosql
		}
	case 2727:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11606
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs) // fromsql
			yyVAL.list.Append(nil)                     // tosql
		}
	case 2728:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11612
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(nil)                     // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs) // tosql
		}
	case 2729:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11627
		{
			// Parameterless CREATE LANGUAGE is now treated as CREATE EXTENSION
			yyVAL.stmt = ast.NewCreateExtensionStmt(yyDollar[6].str, yyDollar[2].bval, nil)
		}
	case 2730:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11633
		{
			yyVAL.stmt = ast.NewCreatePLangStmt(yyDollar[2].bval, yyDollar[6].str, yyDollar[8].list, yyDollar[9].list, yyDollar[10].list, yyDollar[3].bval)
		}
	case 2731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11639
		{
			yyVAL.bval = true
		}
	case 2732:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11640
		{
			yyVAL.bval = false
		}
	case 2733:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11645
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2734:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11646
		{
			yyVAL.list = nil
		}
	case 2735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11650
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2736:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11651
		{
			yyVAL.list = nil
		}
	case 2737:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11655
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2738:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11656
		{
			yyVAL.list = nil
		}
	case 2739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11659
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_ALL
		}
	case 2740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11660
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DISTINCT
		}
	case 2741:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11661
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DEFAULT
		}
	case 2742:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11666
		{
			yyVAL.groupClause = &ast.GroupClause{
				Distinct: yyDollar[3].setquant == ast.SET_QUANTIFIER_DISTINCT,
				List:     yyDollar[4].list,
			}
		}
	case 2743:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11673
		{
			yyVAL.groupClause = nil
		}
	case 2744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11679
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2745:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11680
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11684
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11685
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11686
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11687
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11688
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2751:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11693
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_EMPTY, ast.NewNodeList(), 0)
		}
	case 2752:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11700
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_ROLLUP, yyDollar[3].list, 0)
		}
	case 2753:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11707
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_CUBE, yyDollar[3].list, 0)
		}
	case 2754:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11714
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_SETS, yyDollar[4].list, 0)
		}
	case 2755:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11723
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2756:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11724
		{
			yyVAL.node = nil
		}
	case 2757:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11731
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11735
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11736
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2760:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11741
		{
			sortBy := ast.NewSortBy(yyDollar[1].node, ast.SORTBY_USING, ast.SortByNulls(yyDollar[4].ival), 0)
			// Use qual_all_Op (NodeList) directly for UseOp
			sortBy.UseOp = yyDollar[3].list
			yyVAL.node = sortBy
		}
	case 2761:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11748
		{
			yyVAL.node = ast.NewSortBy(yyDollar[1].node, ast.SortByDir(yyDollar[2].ival), ast.SortByNulls(yyDollar[3].ival), 0)
		}
	case 2762:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11759
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2763:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11761
		{
			yyVAL.list = nil
		}
	case 2764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11766
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[1].windef)
		}
	case 2765:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11771
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[3].windef)
		}
	case 2766:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11779
		{
			n := yyDollar[3].windef
			n.Name = yyDollar[1].str
			yyVAL.windef = n
		}
	case 2767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11788
		{
			yyVAL.windef = yyDollar[2].windef
		}
	case 2768:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11790
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			yyVAL.windef = n
		}
	case 2769:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11797
		{
			yyVAL.windef = nil
		}
	case 2770:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11802
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.PartitionClause = yyDollar[3].list
			n.OrderClause = yyDollar[4].list

			n.FrameOptions = yyDollar[5].windef.FrameOptions
			n.StartOffset = yyDollar[5].windef.StartOffset
			n.EndOffset = yyDollar[5].windef.EndOffset
			yyVAL.windef = n
		}
	case 2771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11816
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2772:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11817
		{
			yyVAL.str = ""
		}
	case 2773:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11821
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2774:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11822
		{
			yyVAL.list = nil
		}
	case 2775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11827
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_RANGE
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2776:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11834
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_ROWS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2777:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11841
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_GROUPS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2778:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11848
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11859
		{
			n := yyDollar[1].windef
			// reject invalid cases - these would be runtime errors in PostgreSQL
			if (n.FrameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (n.FrameOptions & ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 {
				yylex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			n.FrameOptions |= ast.FRAMEOPTION_END_CURRENT_ROW
			yyVAL.windef = n
		}
	case 2780:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11873
		{
			n1 := yyDollar[2].windef
			n2 := yyDollar[4].windef

			// form merged options
			frameOptions := n1.FrameOptions
			// shift converts START_ options to END_ options
			frameOptions |= (n2.FrameOptions << 1)
			frameOptions |= ast.FRAMEOPTION_BETWEEN

			// reject invalid cases
			if (frameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (frameOptions & ast.FRAMEOPTION_END_UNBOUNDED_PRECEDING) != 0 {
				yylex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_CURRENT_ROW) != 0 &&
				(frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 {
				yylex.Error("frame starting from current row cannot have preceding rows")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 &&
				((frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 ||
					(frameOptions&ast.FRAMEOPTION_END_CURRENT_ROW) != 0) {
				yylex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			n1.FrameOptions = frameOptions
			n1.EndOffset = n2.StartOffset
			yyVAL.windef = n1
		}
	case 2781:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11908
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_PRECEDING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2782:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11916
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11924
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_CURRENT_ROW
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2784:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11932
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_PRECEDING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2785:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11940
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_FOLLOWING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2786:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11950
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_CURRENT_ROW
		}
	case 2787:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11951
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_GROUP
		}
	case 2788:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11952
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_TIES
		}
	case 2789:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11953
		{
			yyVAL.ival = 0
		}
	case 2790:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11954
		{
			yyVAL.ival = 0
		}
	case 2791:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11963
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[2].node
		}
	case 2792:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11968
		{
			yyVAL.selectLimit = yyDollar[2].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[1].node
		}
	case 2793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11973
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11977
		{
			n := &selectLimit{}
			n.limitOffset = yyDollar[1].node
			n.limitCount = nil
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11987
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2796:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11988
		{
			yyVAL.selectLimit = nil
		}
	case 2797:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11993
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[2].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2798:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12001
		{
			// Disabled because it was too confusing - PostgreSQL error
			yylex.Error("LIMIT #,# syntax is not supported. Use separate LIMIT and OFFSET clauses.")
			return 1
		}
	case 2799:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12008
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2800:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12016
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2801:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12024
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2802:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12032
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2803:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12043
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2804:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12046
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12050
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12052
		{
			/* LIMIT ALL is represented as a NULL constant */
			yyVAL.node = ast.NewA_Const(ast.NewNull(), -1)
		}
	case 2807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12059
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12072
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12074
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("+")}}, nil, yyDollar[2].node, -1)
		}
	case 2810:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12078
		{
			// Create a unary minus expression
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("-")}}, nil, yyDollar[2].node, -1)
		}
	case 2811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12085
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), -1)
		}
	case 2812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12086
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), -1)
		}
	case 2813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12091
		{
			yyVAL.ival = 0
		}
	case 2814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12092
		{
			yyVAL.ival = 0
		}
	case 2815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12096
		{
			yyVAL.ival = 0
		}
	case 2816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12097
		{
			yyVAL.ival = 0
		}
	case 2817:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12110
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2818:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12116
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_START)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 2819:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12122
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2820:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12128
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2821:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12134
		{
			stmt := ast.NewSavepointStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 2822:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12139
		{
			stmt := ast.NewReleaseStmt(yyDollar[3].str)
			yyVAL.stmt = stmt
		}
	case 2823:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12144
		{
			stmt := ast.NewReleaseStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 2824:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12149
		{
			stmt := ast.NewRollbackToStmt(yyDollar[5].str)
			yyVAL.stmt = stmt
		}
	case 2825:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12154
		{
			stmt := ast.NewRollbackToStmt(yyDollar[4].str)
			yyVAL.stmt = stmt
		}
	case 2826:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12159
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_PREPARE)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2827:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12165
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2828:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12171
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2829:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12180
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2830:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12186
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_BEGIN)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 2831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12193
		{
		}
	case 2832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12194
		{
		}
	case 2833:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12195
		{
		}
	case 2834:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12199
		{
			yyVAL.bval = true
		}
	case 2835:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12200
		{
			yyVAL.bval = false
		}
	case 2836:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12201
		{
			yyVAL.bval = false
		}
	case 2837:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12214
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_ROLE, yyDollar[3].str, yyDollar[5].list)
		}
	case 2838:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12221
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_USER, yyDollar[3].str, yyDollar[5].list)
		}
	case 2839:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12228
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_GROUP, yyDollar[3].str, yyDollar[5].list)
		}
	case 2840:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12235
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 2841:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12241
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 2842:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12250
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2843:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12254
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2844:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12258
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2845:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12262
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2846:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12268
		{
			yyVAL.str = ""
		}
	case 2847:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12269
		{
			yyVAL.str = yyDollar[3].str
		}
	case 2848:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12274
		{
			options := ast.NewNodeList(ast.NewDefElem("rolemembers", yyDollar[6].list))
			stmt := ast.NewAlterRoleStmt(yyDollar[3].rolespec, options)
			stmt.Action = yyDollar[4].ival
			yyVAL.stmt = stmt
		}
	case 2849:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12284
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2850:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12288
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2851:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12292
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2852:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12296
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2853:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12300
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2854:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12304
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2855:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12312
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 2856:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12323
		{
			yyVAL.list = nil
		}
	case 2857:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12328
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 2858:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12339
		{
			yyVAL.list = nil
		}
	case 2859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12343
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2860:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12345
		{
			yyVAL.defelt = ast.NewDefElem("sysid", ast.NewInteger(yyDollar[2].ival))
		}
	case 2861:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12349
		{
			yyVAL.defelt = ast.NewDefElem("adminmembers", yyDollar[2].list)
		}
	case 2862:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12353
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 2863:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12357
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 2864:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12361
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 2865:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12368
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[2].str))
		}
	case 2866:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12372
		{
			yyVAL.defelt = ast.NewDefElem("password", nil)
		}
	case 2867:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12376
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[3].str))
		}
	case 2868:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12380
		{
			yylex.Error("UNENCRYPTED PASSWORD is no longer supported")
			return 1
		}
	case 2869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12385
		{
			yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(true))
		}
	case 2870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12389
		{
			// Handle identifiers like PostgreSQL does with string comparisons
			if yyDollar[1].str == "superuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nosuperuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createrole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreaterole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createdb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreatedb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(false))
			} else if yyDollar[1].str == "login" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nologin" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(false))
			} else if yyDollar[1].str == "replication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(true))
			} else if yyDollar[1].str == "noreplication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(false))
			} else if yyDollar[1].str == "bypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nobypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(false))
			} else if yyDollar[1].str == "noinherit" {
				yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(false))
			} else {
				// Return error for unrecognized role option
				yylex.Error("unrecognized role option \"" + yyDollar[1].str + "\"")
				yyVAL.defelt = nil
			}
		}
	case 2871:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12424
		{
			yyVAL.defelt = ast.NewDefElem("connectionlimit", ast.NewInteger(yyDollar[3].ival))
		}
	case 2872:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12428
		{
			yyVAL.defelt = ast.NewDefElem("validUntil", ast.NewString(yyDollar[3].str))
		}
	case 2873:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12432
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 2874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12438
		{
			yyVAL.ival = 1
		}
	case 2875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12439
		{
			yyVAL.ival = -1
		}
	case 2876:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12451
		{
			n := ast.NewGrantStmt(yyDollar[4].privtarget.objtype, yyDollar[4].privtarget.objs, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = yyDollar[4].privtarget.targtype
			n.GrantOption = yyDollar[7].bval
			n.Grantor = yyDollar[8].rolespec
			yyVAL.stmt = n
		}
	case 2877:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12463
		{
			n := ast.NewRevokeStmt(yyDollar[4].privtarget.objtype, yyDollar[4].privtarget.objs, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = yyDollar[4].privtarget.targtype
			n.Grantor = yyDollar[7].rolespec
			n.Behavior = yyDollar[8].dropBehav
			yyVAL.stmt = n
		}
	case 2878:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12472
		{
			n := ast.NewRevokeStmt(yyDollar[7].privtarget.objtype, yyDollar[7].privtarget.objs, yyDollar[5].list, yyDollar[9].list)
			n.Targtype = yyDollar[7].privtarget.targtype
			n.GrantOption = true
			n.Grantor = yyDollar[10].rolespec
			n.Behavior = yyDollar[11].dropBehav
			yyVAL.stmt = n
		}
	case 2879:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12484
		{
			stmt := ast.NewGrantRoleStmt(yyDollar[2].list, yyDollar[4].list)
			stmt.Grantor = yyDollar[5].rolespec
			yyVAL.stmt = stmt
		}
	case 2880:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12490
		{
			stmt := ast.NewGrantRoleStmtWithOptions(yyDollar[2].list, yyDollar[4].list, yyDollar[6].list)
			stmt.Grantor = yyDollar[7].rolespec
			yyVAL.stmt = stmt
		}
	case 2881:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12499
		{
			stmt := ast.NewRevokeRoleStmt(yyDollar[2].list, yyDollar[4].list)
			stmt.Grantor = yyDollar[5].rolespec
			stmt.Behavior = yyDollar[6].dropBehav
			yyVAL.stmt = stmt
		}
	case 2882:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:12506
		{
			opt := ast.NewDefElem(yyDollar[2].str, ast.NewBoolean(false))
			stmt := ast.NewRevokeRoleStmt(yyDollar[5].list, yyDollar[7].list)
			stmt.Opt = &ast.NodeList{Items: []ast.Node{opt}}
			stmt.Grantor = yyDollar[8].rolespec
			stmt.Behavior = yyDollar[9].dropBehav
			yyVAL.stmt = stmt
		}
	case 2883:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12525
		{
			yyVAL.stmt = ast.NewAlterDefaultPrivilegesStmt(yyDollar[4].list, yyDollar[5].node.(*ast.GrantStmt))
		}
	case 2884:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12531
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2885:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12532
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2886:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12537
		{
			yyVAL.defelt = ast.NewDefElem("schemas", yyDollar[3].list)
		}
	case 2887:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12541
		{
			yyVAL.defelt = ast.NewDefElem("roles", yyDollar[3].list)
		}
	case 2888:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12545
		{
			yyVAL.defelt = ast.NewDefElem("roles", yyDollar[3].list)
		}
	case 2889:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12557
		{
			n := ast.NewGrantStmt(ast.ObjectType(yyDollar[4].ival), nil, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.GrantOption = yyDollar[7].bval
			yyVAL.node = n
		}
	case 2890:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12565
		{
			n := ast.NewRevokeStmt(ast.ObjectType(yyDollar[4].ival), nil, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.Behavior = yyDollar[7].dropBehav
			yyVAL.node = n
		}
	case 2891:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12573
		{
			n := ast.NewRevokeStmt(ast.ObjectType(yyDollar[7].ival), nil, yyDollar[5].list, yyDollar[9].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.GrantOption = true
			n.Behavior = yyDollar[10].dropBehav
			yyVAL.node = n
		}
	case 2892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12583
		{
			yyVAL.ival = int(ast.OBJECT_TABLE)
		}
	case 2893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12584
		{
			yyVAL.ival = int(ast.OBJECT_FUNCTION)
		}
	case 2894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12585
		{
			yyVAL.ival = int(ast.OBJECT_FUNCTION)
		}
	case 2895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12586
		{
			yyVAL.ival = int(ast.OBJECT_SEQUENCE)
		}
	case 2896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12587
		{
			yyVAL.ival = int(ast.OBJECT_TYPE)
		}
	case 2897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12588
		{
			yyVAL.ival = int(ast.OBJECT_SCHEMA)
		}
	case 2898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12593
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12595
		{
			yyVAL.list = nil
		}
	case 2900:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12597
		{
			yyVAL.list = nil
		}
	case 2901:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12599
		{
			ap := ast.NewAccessPriv("", yyDollar[3].list)
			yyVAL.list = ast.NewNodeList(ap)
		}
	case 2902:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12604
		{
			ap := ast.NewAccessPriv("", yyDollar[4].list)
			yyVAL.list = ast.NewNodeList(ap)
		}
	case 2903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12610
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].accesspriv)
		}
	case 2904:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12611
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].accesspriv)
			yyVAL.list = yyDollar[1].list
		}
	case 2905:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12615
		{
			yyVAL.accesspriv = ast.NewAccessPriv("SELECT", yyDollar[2].list)
		}
	case 2906:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12619
		{
			yyVAL.accesspriv = ast.NewAccessPriv("REFERENCES", yyDollar[2].list)
		}
	case 2907:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12623
		{
			yyVAL.accesspriv = ast.NewAccessPriv("CREATE", yyDollar[2].list)
		}
	case 2908:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12627
		{
			yyVAL.accesspriv = ast.NewAccessPriv("ALTER SYSTEM", nil)
		}
	case 2909:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12631
		{
			yyVAL.accesspriv = ast.NewAccessPriv(yyDollar[1].str, yyDollar[2].list)
		}
	case 2910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12641
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[1].list,
			}
		}
	case 2911:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12649
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[2].list,
			}
		}
	case 2912:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12657
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_SEQUENCE,
				objs:     yyDollar[2].list,
			}
		}
	case 2913:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12665
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FDW,
				objs:     yyDollar[4].list,
			}
		}
	case 2914:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12673
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FOREIGN_SERVER,
				objs:     yyDollar[3].list,
			}
		}
	case 2915:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12681
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FUNCTION,
				objs:     yyDollar[2].list,
			}
		}
	case 2916:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12689
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_PROCEDURE,
				objs:     yyDollar[2].list,
			}
		}
	case 2917:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12697
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_ROUTINE,
				objs:     yyDollar[2].list,
			}
		}
	case 2918:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12705
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_DATABASE,
				objs:     yyDollar[2].list,
			}
		}
	case 2919:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12713
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_DOMAIN,
				objs:     yyDollar[2].list,
			}
		}
	case 2920:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12721
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_LANGUAGE,
				objs:     yyDollar[2].list,
			}
		}
	case 2921:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12729
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_LARGEOBJECT,
				objs:     yyDollar[3].list,
			}
		}
	case 2922:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12737
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_PARAMETER_ACL,
				objs:     yyDollar[2].list,
			}
		}
	case 2923:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12745
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_SCHEMA,
				objs:     yyDollar[2].list,
			}
		}
	case 2924:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12753
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLESPACE,
				objs:     yyDollar[2].list,
			}
		}
	case 2925:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12761
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TYPE,
				objs:     yyDollar[2].list,
			}
		}
	case 2926:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12769
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[5].list,
			}
		}
	case 2927:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12777
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_SEQUENCE,
				objs:     yyDollar[5].list,
			}
		}
	case 2928:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12785
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_FUNCTION,
				objs:     yyDollar[5].list,
			}
		}
	case 2929:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12793
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_PROCEDURE,
				objs:     yyDollar[5].list,
			}
		}
	case 2930:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12801
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_ROUTINE,
				objs:     yyDollar[5].list,
			}
		}
	case 2931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12812
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rolespec)
		}
	case 2932:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12813
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 2933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12817
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 2934:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12818
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 2935:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12823
		{
			yyVAL.bval = true
		}
	case 2936:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12824
		{
			yyVAL.bval = false
		}
	case 2937:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12828
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12829
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2939:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12834
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 2940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12840
		{
			yyVAL.node = ast.NewBoolean(true)
		}
	case 2941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12841
		{
			yyVAL.node = ast.NewBoolean(true)
		}
	case 2942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12842
		{
			yyVAL.node = ast.NewBoolean(false)
		}
	case 2943:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12845
		{
			yyVAL.rolespec = yyDollar[3].rolespec
		}
	case 2944:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12846
		{
			yyVAL.rolespec = nil
		}
	case 2945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12851
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2946:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12855
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12863
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2948:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12867
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 2949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12872
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2950:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12873
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2951:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12877
		{
			n := ast.NewRangeTableSample(nil, yyDollar[2].list, yyDollar[4].list, yyDollar[6].node, 0)
			yyVAL.node = n
		}
	case 2952:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12885
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2953:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12889
		{
			yyVAL.node = nil
		}
	case 2954:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12903
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_FUNCTION, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 2955:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12908
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_PROCEDURE, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 2956:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12913
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_ROUTINE, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 2957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12921
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2958:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12922
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2959:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12928
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(false))
		}
	case 2960:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12932
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 2961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12936
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 2962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12940
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("immutable"))
		}
	case 2963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12944
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("stable"))
		}
	case 2964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12948
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("volatile"))
		}
	case 2965:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12952
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 2966:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12956
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 2967:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12960
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 2968:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12964
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 2969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12968
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(true))
		}
	case 2970:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12972
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(false))
		}
	case 2971:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12976
		{
			yyVAL.defelt = ast.NewDefElem("cost", yyDollar[2].node)
		}
	case 2972:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12980
		{
			yyVAL.defelt = ast.NewDefElem("rows", yyDollar[2].node)
		}
	case 2973:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12984
		{
			yyVAL.defelt = ast.NewDefElem("support", yyDollar[2].list)
		}
	case 2974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12988
		{
			/* we abuse the normal content of a DefElem here */
			yyVAL.defelt = ast.NewDefElem("set", yyDollar[1].vsetstmt)
		}
	case 2975:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12993
		{
			yyVAL.defelt = ast.NewDefElem("parallel", ast.NewString(yyDollar[2].str))
		}
	case 2976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12999
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2977:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13000
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2978:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13005
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2979:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13009
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13013
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13019
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 2982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13020
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13021
		{
			yyVAL.node = yyDollar[1].list
		}
	case 2984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13022
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13023
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2988:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13034
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = yyDollar[1].list
			n.Objargs = ast.ExtractArgTypes(yyDollar[2].list)
			n.ObjfuncArgs = yyDollar[2].list
			yyVAL.objwithargs = n
		}
	case 2989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13047
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = ast.NewNodeList(ast.NewString(yyDollar[1].str))
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 2990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13054
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = ast.NewNodeList(ast.NewString(yyDollar[1].str))
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 2991:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13061
		{
			n := ast.NewEmptyObjectWithArgs()
			nameList := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			// Append indirection elements
			for i := 0; i < yyDollar[2].list.Len(); i++ {
				nameList.Append(yyDollar[2].list.Items[i])
			}
			n.Objname = nameList
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 2992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13075
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 2993:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13077
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 2994:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13089
		{
			n := ast.NewAlterTypeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2995:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13097
		{
			relation, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error("invalid type name")
				return 1
			}
			n := ast.NewAlterTableStmt(relation, yyDollar[4].list)
			n.Objtype = ast.OBJECT_TYPE // Mark this as a composite type alteration
			yyVAL.stmt = n
		}
	case 2996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13110
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2997:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13111
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2998:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13117
		{
			n := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			n.Behavior = yyDollar[4].dropBehav
			yyVAL.node = n
		}
	case 2999:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13124
		{
			n := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			yyVAL.node = n
		}
	case 3000:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13132
		{
			n := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			yyVAL.node = n
		}
	case 3001:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:13140
		{
			def := ast.NewColumnDef(yyDollar[3].str, yyDollar[6].typnam, -1)
			n := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, def)
			n.Behavior = yyDollar[8].dropBehav
			/* We only use these fields of the ColumnDef node */
			def.TypeName = yyDollar[6].typnam
			if collClause, ok := yyDollar[7].node.(*ast.CollateClause); ok {
				def.Collclause = collClause
			}
			def.RawDefault = nil
			yyVAL.node = n
		}
	case 3002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13161
		{
			yyVAL.ival = int(ast.CMD_SELECT)
		}
	case 3003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13162
		{
			yyVAL.ival = int(ast.CMD_UPDATE)
		}
	case 3004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13163
		{
			yyVAL.ival = int(ast.CMD_DELETE)
		}
	case 3005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13164
		{
			yyVAL.ival = int(ast.CMD_INSERT)
		}
	}
	goto yystack /* stack new state and value */
}
