// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
	"strings"
)

// Parser state for handling complex grammar constructs
var parserState struct {
	// Future parser state variables can be added here
}

// SelectLimit - Private struct for the result of opt_select_limit production
// Mirrors PostgreSQL's SelectLimit from gram.y:126-132
type selectLimit struct {
	limitOffset ast.Node
	limitCount  ast.Node
	limitOption ast.LimitOption
}

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// PrivTarget - represents a privilege target for GRANT/REVOKE statements
// Internal struct for handling privilege_target grammar rule
type PrivTarget struct {
	targtype ast.GrantTargetType
	objtype  ast.ObjectType
	objs     *ast.NodeList
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:51
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string
	bval    bool
	byt     byte
	rune    rune

	// AST nodes
	node        ast.Node
	stmt        ast.Stmt
	stmtList    []ast.Stmt
	list        *ast.NodeList
	groupClause *ast.GroupClause
	selectLimit *selectLimit

	// Specific AST node types
	into          *ast.IntoClause
	onconflict    *ast.OnConflictClause
	windef        *ast.WindowDef
	createStmt    *ast.CreateStmt
	indexStmt     *ast.IndexStmt
	alterStmt     *ast.AlterTableStmt
	dropStmt      *ast.DropStmt
	columnDef     *ast.ColumnDef
	constraint    *ast.Constraint
	indexElem     *ast.IndexElem
	alterCmd      *ast.AlterTableCmd
	with          *ast.WithClause
	rangevar      *ast.RangeVar
	objType       ast.ObjectType
	dropBehav     ast.DropBehavior
	setquant      ast.SetQuantifier
	typnam        *ast.TypeName
	partspec      *ast.PartitionSpec
	partboundspec *ast.PartitionBoundSpec
	oncommit      ast.OnCommitAction
	defelt        *ast.DefElem
	target        *ast.ResTarget            // For select targets, insert columns
	alias         *ast.Alias                // For table and column aliases
	jtype         ast.JoinType              // For join type specifications
	jexpr         *ast.JoinExpr             // For joined table expressions
	keyaction     *ast.KeyAction            // For foreign key actions
	keyactions    *ast.KeyActions           // For foreign key action sets
	funparam      *ast.FunctionParameter    // For function parameters
	funparammode  ast.FunctionParameterMode // For parameter modes (IN/OUT/INOUT/VARIADIC)
	vsetstmt      *ast.VariableSetStmt      // For SET/RESET statements
	rolespec      *ast.RoleSpec
	objwithargs   *ast.ObjectWithArgs
	statelem      *ast.StatsElem
	accesspriv    *ast.AccessPriv // For privilege specifications
	privtarget    *PrivTarget     // For privilege target specifications

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const UNKNOWN = 57392
const WHEN = 57393
const IS = 57394
const ISNULL = 57395
const NOTNULL = 57396
const AT = 57397
const TIME = 57398
const ZONE = 57399
const LOCAL = 57400
const SYMMETRIC = 57401
const ASYMMETRIC = 57402
const TO = 57403
const OPERATOR = 57404
const SELECT = 57405
const FROM = 57406
const WHERE = 57407
const ONLY = 57408
const TABLE = 57409
const LIMIT = 57410
const OFFSET = 57411
const BY = 57412
const GROUP_P = 57413
const HAVING = 57414
const INTO = 57415
const ON = 57416
const JOIN = 57417
const INNER_P = 57418
const LEFT = 57419
const RIGHT = 57420
const FULL = 57421
const OUTER_P = 57422
const CROSS = 57423
const NATURAL = 57424
const USING = 57425
const RECURSIVE = 57426
const MATERIALIZED = 57427
const VALUES = 57428
const SEARCH = 57429
const BREADTH = 57430
const DEPTH = 57431
const CYCLE = 57432
const FIRST_P = 57433
const LAST_P = 57434
const SET = 57435
const ASC = 57436
const DESC = 57437
const INSERT = 57438
const UPDATE = 57439
const DELETE_P = 57440
const MERGE = 57441
const RETURNING = 57442
const CONFLICT = 57443
const OVERRIDING = 57444
const USER = 57445
const SYSTEM_P = 57446
const MATCHED = 57447
const THEN = 57448
const SOURCE = 57449
const TARGET = 57450
const DO = 57451
const NOTHING = 57452
const COPY = 57453
const PROGRAM = 57454
const STDIN = 57455
const STDOUT = 57456
const BINARY = 57457
const FREEZE = 57458
const CONSTRAINT = 57459
const VERBOSE = 57460
const ANALYZE = 57461
const CURRENT_P = 57462
const CURSOR = 57463
const OF = 57464
const COLUMNS = 57465
const ORDINALITY = 57466
const XMLTABLE = 57467
const JSON_TABLE = 57468
const ROWS = 57469
const PATH = 57470
const PASSING = 57471
const FOR = 57472
const NESTED = 57473
const REF_P = 57474
const XMLNAMESPACES = 57475
const ARRAY = 57476
const ERROR = 57477
const ERROR_P = 57478
const EMPTY = 57479
const EMPTY_P = 57480
const OBJECT_P = 57481
const WRAPPER = 57482
const CONDITIONAL = 57483
const UNCONDITIONAL = 57484
const QUOTES = 57485
const OMIT = 57486
const KEEP = 57487
const SCALAR = 57488
const STRING_P = 57489
const ENCODING = 57490
const DELIMITER = 57491
const DELIMITERS = 57492
const HEADER_P = 57493
const QUOTE = 57494
const FORCE = 57495
const CSV = 57496
const VALUE_P = 57497
const JSON_QUERY = 57498
const JSON_VALUE = 57499
const JSON_SERIALIZE = 57500
const JSON_OBJECT = 57501
const JSON_ARRAY = 57502
const JSON_OBJECTAGG = 57503
const JSON_ARRAYAGG = 57504
const JSON_EXISTS = 57505
const JSON_SCALAR = 57506
const FORMAT = 57507
const JSON = 57508
const UTF8 = 57509
const WITHOUT = 57510
const BIT = 57511
const NUMERIC = 57512
const INTEGER = 57513
const SMALLINT = 57514
const BIGINT = 57515
const REAL = 57516
const FLOAT_P = 57517
const DOUBLE_P = 57518
const PRECISION = 57519
const CHARACTER = 57520
const CHAR_P = 57521
const VARCHAR = 57522
const NATIONAL = 57523
const NCHAR = 57524
const VARYING = 57525
const TIMESTAMP = 57526
const INTERVAL = 57527
const INT_P = 57528
const DECIMAL_P = 57529
const DEC = 57530
const BOOLEAN_P = 57531
const VARIADIC = 57532
const ABORT_P = 57533
const ABSENT = 57534
const ABSOLUTE_P = 57535
const ACCESS = 57536
const ACTION = 57537
const ADD_P = 57538
const ADMIN = 57539
const AFTER = 57540
const AGGREGATE = 57541
const ALSO = 57542
const ALWAYS = 57543
const ANALYSE = 57544
const ASENSITIVE = 57545
const ASSERTION = 57546
const ASSIGNMENT = 57547
const ATOMIC = 57548
const ATTACH = 57549
const ATTRIBUTE = 57550
const AUTHORIZATION = 57551
const BACKWARD = 57552
const BEFORE = 57553
const BEGIN_P = 57554
const CACHE = 57555
const CALL = 57556
const CALLED = 57557
const CASCADED = 57558
const CATALOG_P = 57559
const CHAIN = 57560
const CHARACTERISTICS = 57561
const CHECKPOINT = 57562
const CLASS = 57563
const CLOSE = 57564
const CLUSTER = 57565
const COALESCE = 57566
const COLLATION = 57567
const COMMENT = 57568
const COMMENTS = 57569
const COMMIT = 57570
const COMMITTED = 57571
const COMPRESSION = 57572
const CONFIGURATION = 57573
const CONNECTION = 57574
const CONSTRAINTS = 57575
const CONTENT_P = 57576
const CONTINUE_P = 57577
const CONVERSION_P = 57578
const COST = 57579
const CUBE = 57580
const CURRENT_CATALOG = 57581
const CURRENT_DATE = 57582
const CURRENT_ROLE = 57583
const CURRENT_SCHEMA = 57584
const CURRENT_TIME = 57585
const CURRENT_TIMESTAMP = 57586
const CURRENT_USER = 57587
const DATA_P = 57588
const DATABASE = 57589
const DAY_P = 57590
const DEALLOCATE = 57591
const DECLARE = 57592
const DEFAULTS = 57593
const DEFERRABLE = 57594
const DEFERRED = 57595
const DEFINER = 57596
const DEPENDS = 57597
const DETACH = 57598
const DICTIONARY = 57599
const DISABLE_P = 57600
const DISCARD = 57601
const DOCUMENT_P = 57602
const DOMAIN_P = 57603
const EACH = 57604
const ELSE = 57605
const ENABLE_P = 57606
const ENCRYPTED = 57607
const END_P = 57608
const ENUM_P = 57609
const EVENT = 57610
const EXCEPT = 57611
const EXCLUDE = 57612
const EXCLUDING = 57613
const EXCLUSIVE = 57614
const EXECUTE = 57615
const EXPLAIN = 57616
const EXPRESSION = 57617
const EXTENSION = 57618
const EXTERNAL = 57619
const EXTRACT = 57620
const FAMILY = 57621
const FETCH = 57622
const FILTER = 57623
const FINALIZE = 57624
const FOLLOWING = 57625
const FOREIGN = 57626
const FORWARD = 57627
const FUNCTION = 57628
const FUNCTIONS = 57629
const GENERATED = 57630
const GLOBAL = 57631
const GRANT = 57632
const GRANTED = 57633
const GREATEST = 57634
const GROUPING = 57635
const GROUPS = 57636
const HANDLER = 57637
const HOLD = 57638
const HOUR_P = 57639
const IDENTITY_P = 57640
const IMMEDIATE = 57641
const IMMUTABLE = 57642
const IMPLICIT_P = 57643
const IMPORT_P = 57644
const INCLUDE = 57645
const INCLUDING = 57646
const INCREMENT = 57647
const INDENT = 57648
const INDEX = 57649
const INDEXES = 57650
const INHERIT = 57651
const INHERITS = 57652
const INITIALLY = 57653
const INLINE_P = 57654
const INPUT_P = 57655
const INSENSITIVE = 57656
const INSTEAD = 57657
const INTERSECT = 57658
const INVOKER = 57659
const ISOLATION = 57660
const KEYS = 57661
const LABEL = 57662
const LANGUAGE = 57663
const LARGE_P = 57664
const LATERAL_P = 57665
const LEAKPROOF = 57666
const LEAST = 57667
const LEADING = 57668
const LEVEL = 57669
const LISTEN = 57670
const LOAD = 57671
const LOCALTIME = 57672
const LOCALTIMESTAMP = 57673
const LOCATION = 57674
const LOCK_P = 57675
const LOCKED = 57676
const LOGGED = 57677
const MAPPING = 57678
const MATCH = 57679
const MAXVALUE = 57680
const MERGE_ACTION = 57681
const METHOD = 57682
const MINUTE_P = 57683
const MINVALUE = 57684
const MODE = 57685
const MONTH_P = 57686
const MOVE = 57687
const NAME_P = 57688
const NAMES = 57689
const NEW = 57690
const NEXT = 57691
const NFC = 57692
const NFD = 57693
const NFKC = 57694
const NFKD = 57695
const NO = 57696
const NONE = 57697
const NORMALIZE = 57698
const NORMALIZED = 57699
const NOTIFY = 57700
const NOWAIT = 57701
const NULLIF = 57702
const OUT_P = 57703
const OVERLAY = 57704
const OVERLAPS = 57705
const OWNED = 57706
const OWNER = 57707
const PARALLEL = 57708
const PARAMETER = 57709
const PARSER = 57710
const PARTIAL = 57711
const PARTITION = 57712
const PASSWORD = 57713
const PLACING = 57714
const PLAN = 57715
const PLANS = 57716
const POLICY = 57717
const POSITION = 57718
const PRECEDING = 57719
const PREPARE = 57720
const PREPARED = 57721
const PRESERVE = 57722
const PRIMARY = 57723
const PRIOR = 57724
const PRIVILEGES = 57725
const PROCEDURAL = 57726
const PROCEDURE = 57727
const PROCEDURES = 57728
const PUBLICATION = 57729
const RANGE = 57730
const READ = 57731
const REASSIGN = 57732
const RECHECK = 57733
const REFERENCES = 57734
const REFERENCING = 57735
const REFRESH = 57736
const REINDEX = 57737
const RELATIVE_P = 57738
const RELEASE = 57739
const RENAME = 57740
const REPEATABLE = 57741
const REPLICA = 57742
const RESET = 57743
const RESTART = 57744
const RETURN = 57745
const RETURNS = 57746
const REVOKE = 57747
const ROLE = 57748
const ROLLBACK = 57749
const ROLLUP = 57750
const ROUTINE = 57751
const ROUTINES = 57752
const ROW = 57753
const RULE = 57754
const SAVEPOINT = 57755
const SCHEMA = 57756
const SCHEMAS = 57757
const SCROLL = 57758
const SECOND_P = 57759
const SECURITY = 57760
const SEQUENCE = 57761
const SEQUENCES = 57762
const SERIALIZABLE = 57763
const SERVER = 57764
const SESSION = 57765
const SESSION_USER = 57766
const SETS = 57767
const SETOF = 57768
const SHARE = 57769
const SHOW = 57770
const SIMPLE = 57771
const SKIP = 57772
const SNAPSHOT = 57773
const SOME = 57774
const SQL_P = 57775
const STABLE = 57776
const STANDALONE_P = 57777
const START = 57778
const STATEMENT = 57779
const STATISTICS = 57780
const STORAGE = 57781
const STORED = 57782
const STRICT_P = 57783
const STRIP_P = 57784
const SUBSCRIPTION = 57785
const SUBSTRING = 57786
const SUPPORT = 57787
const SYSID = 57788
const SYSTEM_USER = 57789
const TABLES = 57790
const TABLESPACE = 57791
const TABLESAMPLE = 57792
const TEMP = 57793
const TEMPLATE = 57794
const TEMPORARY = 57795
const TEXT_P = 57796
const TIES = 57797
const TRAILING = 57798
const TRANSACTION = 57799
const TRANSFORM = 57800
const TREAT = 57801
const TRIGGER = 57802
const TRIM = 57803
const TRUNCATE = 57804
const TRUSTED = 57805
const TYPE_P = 57806
const TYPES_P = 57807
const UESCAPE = 57808
const UNBOUNDED = 57809
const UNCOMMITTED = 57810
const UNENCRYPTED = 57811
const UNION = 57812
const UNIQUE = 57813
const UNLISTEN = 57814
const UNLOGGED = 57815
const UNTIL = 57816
const VACUUM = 57817
const VALID = 57818
const VALIDATE = 57819
const VALIDATOR = 57820
const VERSION_P = 57821
const VIEW = 57822
const VIEWS = 57823
const VOLATILE = 57824
const WHITESPACE_P = 57825
const WINDOW = 57826
const WITHIN = 57827
const WORK = 57828
const WRITE = 57829
const XML_P = 57830
const XMLATTRIBUTES = 57831
const XMLCONCAT = 57832
const XMLELEMENT = 57833
const XMLEXISTS = 57834
const XMLFOREST = 57835
const XMLPARSE = 57836
const XMLPI = 57837
const XMLROOT = 57838
const XMLSERIALIZE = 57839
const YEAR_P = 57840
const YES_P = 57841
const INOUT = 57842
const OTHERS = 57843
const OLD = 57844
const KEY = 57845
const OFF = 57846
const OIDS = 57847
const OPTION = 57848
const OPTIONS = 57849
const OVER = 57850
const ORDER = 57851
const ANY = 57852
const BOTH = 57853
const CAST = 57854
const CHECK = 57855
const COLUMN = 57856
const FORMAT_LA = 57857
const NOT_LA = 57858
const NULLS_LA = 57859
const WITH_LA = 57860
const WITHOUT_LA = 57861
const MODE_TYPE_NAME = 57862
const MODE_PLPGSQL_EXPR = 57863
const MODE_PLPGSQL_ASSIGN1 = 57864
const MODE_PLPGSQL_ASSIGN2 = 57865
const MODE_PLPGSQL_ASSIGN3 = 57866
const UMINUS = 57867

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"UNKNOWN",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"JOIN",
	"INNER_P",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER_P",
	"CROSS",
	"NATURAL",
	"USING",
	"RECURSIVE",
	"MATERIALIZED",
	"VALUES",
	"SEARCH",
	"BREADTH",
	"DEPTH",
	"CYCLE",
	"FIRST_P",
	"LAST_P",
	"SET",
	"ASC",
	"DESC",
	"INSERT",
	"UPDATE",
	"DELETE_P",
	"MERGE",
	"RETURNING",
	"CONFLICT",
	"OVERRIDING",
	"USER",
	"SYSTEM_P",
	"MATCHED",
	"THEN",
	"SOURCE",
	"TARGET",
	"DO",
	"NOTHING",
	"COPY",
	"PROGRAM",
	"STDIN",
	"STDOUT",
	"BINARY",
	"FREEZE",
	"CONSTRAINT",
	"VERBOSE",
	"ANALYZE",
	"CURRENT_P",
	"CURSOR",
	"OF",
	"COLUMNS",
	"ORDINALITY",
	"XMLTABLE",
	"JSON_TABLE",
	"ROWS",
	"PATH",
	"PASSING",
	"FOR",
	"NESTED",
	"REF_P",
	"XMLNAMESPACES",
	"ARRAY",
	"ERROR",
	"ERROR_P",
	"EMPTY",
	"EMPTY_P",
	"OBJECT_P",
	"WRAPPER",
	"CONDITIONAL",
	"UNCONDITIONAL",
	"QUOTES",
	"OMIT",
	"KEEP",
	"SCALAR",
	"STRING_P",
	"ENCODING",
	"DELIMITER",
	"DELIMITERS",
	"HEADER_P",
	"QUOTE",
	"FORCE",
	"CSV",
	"VALUE_P",
	"JSON_QUERY",
	"JSON_VALUE",
	"JSON_SERIALIZE",
	"JSON_OBJECT",
	"JSON_ARRAY",
	"JSON_OBJECTAGG",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_SCALAR",
	"FORMAT",
	"JSON",
	"UTF8",
	"WITHOUT",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"ABORT_P",
	"ABSENT",
	"ABSOLUTE_P",
	"ACCESS",
	"ACTION",
	"ADD_P",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALSO",
	"ALWAYS",
	"ANALYSE",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"BACKWARD",
	"BEFORE",
	"BEGIN_P",
	"CACHE",
	"CALL",
	"CALLED",
	"CASCADED",
	"CATALOG_P",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATION",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPRESSION",
	"CONFIGURATION",
	"CONNECTION",
	"CONSTRAINTS",
	"CONTENT_P",
	"CONTINUE_P",
	"CONVERSION_P",
	"COST",
	"CUBE",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"DATA_P",
	"DATABASE",
	"DAY_P",
	"DEALLOCATE",
	"DECLARE",
	"DEFAULTS",
	"DEFERRABLE",
	"DEFERRED",
	"DEFINER",
	"DEPENDS",
	"DETACH",
	"DICTIONARY",
	"DISABLE_P",
	"DISCARD",
	"DOCUMENT_P",
	"DOMAIN_P",
	"EACH",
	"ELSE",
	"ENABLE_P",
	"ENCRYPTED",
	"END_P",
	"ENUM_P",
	"EVENT",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXCLUSIVE",
	"EXECUTE",
	"EXPLAIN",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"EXTRACT",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FINALIZE",
	"FOLLOWING",
	"FOREIGN",
	"FORWARD",
	"FUNCTION",
	"FUNCTIONS",
	"GENERATED",
	"GLOBAL",
	"GRANT",
	"GRANTED",
	"GREATEST",
	"GROUPING",
	"GROUPS",
	"HANDLER",
	"HOLD",
	"HOUR_P",
	"IDENTITY_P",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT_P",
	"IMPORT_P",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INDEX",
	"INDEXES",
	"INHERIT",
	"INHERITS",
	"INITIALLY",
	"INLINE_P",
	"INPUT_P",
	"INSENSITIVE",
	"INSTEAD",
	"INTERSECT",
	"INVOKER",
	"ISOLATION",
	"KEYS",
	"LABEL",
	"LANGUAGE",
	"LARGE_P",
	"LATERAL_P",
	"LEAKPROOF",
	"LEAST",
	"LEADING",
	"LEVEL",
	"LISTEN",
	"LOAD",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCATION",
	"LOCK_P",
	"LOCKED",
	"LOGGED",
	"MAPPING",
	"MATCH",
	"MAXVALUE",
	"MERGE_ACTION",
	"METHOD",
	"MINUTE_P",
	"MINVALUE",
	"MODE",
	"MONTH_P",
	"MOVE",
	"NAME_P",
	"NAMES",
	"NEW",
	"NEXT",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NO",
	"NONE",
	"NORMALIZE",
	"NORMALIZED",
	"NOTIFY",
	"NOWAIT",
	"NULLIF",
	"OUT_P",
	"OVERLAY",
	"OVERLAPS",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PARSER",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECEDING",
	"PREPARE",
	"PREPARED",
	"PRESERVE",
	"PRIMARY",
	"PRIOR",
	"PRIVILEGES",
	"PROCEDURAL",
	"PROCEDURE",
	"PROCEDURES",
	"PUBLICATION",
	"RANGE",
	"READ",
	"REASSIGN",
	"RECHECK",
	"REFERENCES",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE_P",
	"RELEASE",
	"RENAME",
	"REPEATABLE",
	"REPLICA",
	"RESET",
	"RESTART",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLE",
	"ROLLBACK",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"RULE",
	"SAVEPOINT",
	"SCHEMA",
	"SCHEMAS",
	"SCROLL",
	"SECOND_P",
	"SECURITY",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSION_USER",
	"SETS",
	"SETOF",
	"SHARE",
	"SHOW",
	"SIMPLE",
	"SKIP",
	"SNAPSHOT",
	"SOME",
	"SQL_P",
	"STABLE",
	"STANDALONE_P",
	"START",
	"STATEMENT",
	"STATISTICS",
	"STORAGE",
	"STORED",
	"STRICT_P",
	"STRIP_P",
	"SUBSCRIPTION",
	"SUBSTRING",
	"SUPPORT",
	"SYSID",
	"SYSTEM_USER",
	"TABLES",
	"TABLESPACE",
	"TABLESAMPLE",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TEXT_P",
	"TIES",
	"TRAILING",
	"TRANSACTION",
	"TRANSFORM",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUNCATE",
	"TRUSTED",
	"TYPE_P",
	"TYPES_P",
	"UESCAPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNENCRYPTED",
	"UNION",
	"UNIQUE",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VERSION_P",
	"VIEW",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE_P",
	"WINDOW",
	"WITHIN",
	"WORK",
	"WRITE",
	"XML_P",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"YEAR_P",
	"YES_P",
	"INOUT",
	"OTHERS",
	"OLD",
	"KEY",
	"OFF",
	"OIDS",
	"OPTION",
	"OPTIONS",
	"OVER",
	"ORDER",
	"ANY",
	"BOTH",
	"CAST",
	"CHECK",
	"COLUMN",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"'<'",
	"'>'",
	"'='",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"';'",
	"','",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:13090

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 77,
	540, 77,
	-2, 1570,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 80,
	1, 1483,
	26, 1483,
	36, 1483,
	74, 1483,
	100, 1483,
	532, 1483,
	540, 1483,
	-2, 1488,
	-1, 83,
	67, 1900,
	84, 1900,
	85, 2522,
	236, 2709,
	307, 2067,
	419, 1900,
	480, 1900,
	-2, 90,
	-1, 98,
	68, 1487,
	69, 1487,
	130, 1487,
	269, 1487,
	280, 1487,
	316, 1487,
	470, 1487,
	509, 1487,
	-2, 1489,
	-1, 108,
	1, 77,
	540, 77,
	-2, 1570,
	-1, 150,
	85, 2521,
	-2, 1899,
	-1, 225,
	61, 295,
	64, 295,
	527, 295,
	533, 295,
	-2, 2565,
	-1, 652,
	68, 1472,
	69, 1472,
	130, 1472,
	280, 1472,
	-2, 1490,
	-1, 658,
	68, 1473,
	69, 1473,
	130, 1473,
	280, 1473,
	-2, 1493,
	-1, 712,
	84, 1900,
	480, 1900,
	-2, 89,
	-1, 714,
	209, 78,
	-2, 2528,
	-1, 816,
	7, 1400,
	16, 1400,
	17, 1400,
	531, 1400,
	-2, 96,
	-1, 817,
	7, 1401,
	16, 1401,
	17, 1401,
	531, 1401,
	-2, 97,
	-1, 825,
	531, 1402,
	-2, 2973,
	-1, 844,
	93, 2845,
	398, 2103,
	401, 2845,
	-2, 1996,
	-1, 848,
	93, 2845,
	398, 2103,
	401, 2845,
	-2, 1996,
	-1, 985,
	68, 1472,
	69, 1472,
	130, 1472,
	280, 1472,
	-2, 1494,
	-1, 1040,
	7, 1202,
	531, 1202,
	-2, 476,
	-1, 1055,
	7, 527,
	16, 527,
	17, 527,
	531, 527,
	-2, 1250,
	-1, 1077,
	7, 1444,
	-2, 477,
	-1, 1085,
	7, 1414,
	-2, 460,
	-1, 1086,
	7, 1449,
	531, 1449,
	-2, 461,
	-1, 1087,
	7, 1421,
	-2, 462,
	-1, 1088,
	7, 1449,
	531, 1449,
	-2, 463,
	-1, 1089,
	7, 1449,
	531, 1449,
	-2, 464,
	-1, 1090,
	7, 1408,
	-2, 466,
	-1, 1091,
	7, 1408,
	-2, 467,
	-1, 1092,
	7, 1451,
	-2, 470,
	-1, 1093,
	7, 1411,
	-2, 474,
	-1, 1094,
	7, 1412,
	-2, 475,
	-1, 1096,
	7, 1449,
	531, 1449,
	-2, 491,
	-1, 1097,
	7, 1408,
	-2, 495,
	-1, 1098,
	7, 1415,
	-2, 500,
	-1, 1099,
	7, 1413,
	-2, 503,
	-1, 1100,
	7, 1447,
	-2, 505,
	-1, 1101,
	7, 1447,
	-2, 506,
	-1, 1102,
	7, 1432,
	531, 1432,
	-2, 510,
	-1, 1254,
	6, 1996,
	12, 1996,
	534, 1996,
	535, 1996,
	-2, 1989,
	-1, 1300,
	531, 1337,
	-2, 2975,
	-1, 1505,
	127, 2807,
	411, 2807,
	-2, 1075,
	-1, 1539,
	21, 1374,
	432, 1374,
	510, 1374,
	-2, 837,
	-1, 1541,
	21, 1376,
	432, 1376,
	510, 1376,
	-2, 784,
	-1, 1546,
	1, 653,
	26, 653,
	36, 653,
	64, 653,
	65, 653,
	68, 653,
	69, 653,
	71, 653,
	72, 653,
	73, 653,
	74, 653,
	100, 653,
	130, 653,
	269, 653,
	280, 653,
	316, 653,
	470, 653,
	484, 653,
	509, 653,
	515, 653,
	532, 653,
	540, 653,
	541, 653,
	-2, 1478,
	-1, 1551,
	21, 1456,
	432, 1456,
	510, 1456,
	-2, 1452,
	-1, 2008,
	68, 1488,
	69, 1488,
	130, 1488,
	269, 1488,
	280, 1488,
	316, 1488,
	470, 1488,
	509, 1488,
	-2, 1171,
	-1, 2018,
	7, 1337,
	531, 1337,
	-2, 1220,
	-1, 2234,
	117, 90,
	307, 2067,
	460, 90,
	-2, 1900,
	-1, 2284,
	536, 111,
	-2, 2393,
	-1, 2312,
	531, 2069,
	-2, 219,
	-1, 2388,
	40, 1408,
	509, 1408,
	527, 1408,
	532, 1408,
	541, 1408,
	-2, 1404,
	-1, 2591,
	36, 2812,
	66, 2812,
	-2, 501,
	-1, 2592,
	36, 2813,
	66, 2813,
	-2, 374,
	-1, 2598,
	127, 2810,
	411, 2810,
	-2, 1184,
	-1, 2599,
	127, 2811,
	411, 2811,
	-2, 1185,
	-1, 2615,
	1, 419,
	26, 419,
	36, 419,
	64, 419,
	65, 419,
	68, 419,
	69, 419,
	71, 419,
	72, 419,
	74, 419,
	100, 419,
	130, 419,
	269, 419,
	280, 419,
	316, 419,
	470, 419,
	484, 419,
	509, 419,
	515, 419,
	529, 419,
	532, 419,
	533, 419,
	540, 419,
	-2, 118,
	-1, 2616,
	1, 417,
	26, 417,
	36, 417,
	64, 417,
	65, 417,
	68, 417,
	69, 417,
	71, 417,
	72, 417,
	74, 417,
	100, 417,
	130, 417,
	269, 417,
	280, 417,
	316, 417,
	470, 417,
	484, 417,
	509, 417,
	515, 417,
	529, 417,
	532, 417,
	533, 417,
	540, 417,
	-2, 118,
	-1, 2619,
	1, 436,
	26, 436,
	36, 436,
	64, 436,
	65, 436,
	68, 436,
	69, 436,
	71, 436,
	72, 436,
	74, 436,
	100, 436,
	130, 436,
	269, 436,
	280, 436,
	316, 436,
	470, 436,
	484, 436,
	509, 436,
	515, 436,
	529, 436,
	532, 436,
	533, 436,
	540, 436,
	-2, 118,
	-1, 2633,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1088,
	-1, 2634,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1089,
	-1, 2635,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1090,
	-1, 2636,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1091,
	-1, 2637,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1092,
	-1, 2638,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1093,
	-1, 2642,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1100,
	-1, 2648,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1104,
	-1, 2693,
	363, 1364,
	-2, 1367,
	-1, 2703,
	16, 1404,
	17, 1404,
	-2, 1336,
	-1, 2788,
	68, 1488,
	69, 1488,
	130, 1488,
	269, 1488,
	280, 1488,
	316, 1488,
	470, 1488,
	509, 1488,
	-2, 1171,
	-1, 2908,
	209, 78,
	-2, 2528,
	-1, 2981,
	536, 112,
	-2, 2393,
	-1, 3084,
	507, 2468,
	-2, 2461,
	-1, 3267,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1102,
	-1, 3268,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1106,
	-1, 3274,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1108,
	-1, 3309,
	363, 1363,
	-2, 1366,
	-1, 3463,
	75, 1592,
	76, 1592,
	77, 1592,
	78, 1592,
	79, 1592,
	81, 1592,
	82, 1592,
	-2, 1488,
	-1, 3477,
	531, 1337,
	-2, 112,
	-1, 3484,
	150, 1832,
	-2, 1767,
	-1, 3658,
	6, 1996,
	12, 1996,
	534, 1996,
	535, 1996,
	-2, 1970,
	-1, 3819,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1101,
	-1, 3822,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1110,
	-1, 3825,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1105,
	-1, 3830,
	52, 0,
	53, 0,
	54, 0,
	-2, 1123,
	-1, 3837,
	21, 1373,
	432, 1373,
	510, 1373,
	-2, 1453,
	-1, 3841,
	363, 1365,
	-2, 1368,
	-1, 3887,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1153,
	-1, 3888,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1154,
	-1, 3889,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1155,
	-1, 3890,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1156,
	-1, 3891,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1157,
	-1, 3892,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1158,
	-1, 4253,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1103,
	-1, 4254,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1107,
	-1, 4258,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1109,
	-1, 4259,
	52, 0,
	53, 0,
	54, 0,
	-2, 1124,
	-1, 4262,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1125,
	-1, 4263,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1127,
	-1, 4387,
	540, 77,
	-2, 1570,
	-1, 4529,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1111,
	-1, 4530,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1126,
	-1, 4531,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1128,
	-1, 4540,
	52, 0,
	-2, 1161,
	-1, 4788,
	52, 0,
	-2, 1162,
	-1, 4968,
	37, 0,
	44, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 459,
	-1, 5300,
	7, 1717,
	-2, 296,
	-1, 5326,
	7, 1444,
	-2, 477,
}

const yyPrivate = 57344

const yyLast = 94292

var yyAct = [...]int16{
	1018, 5297, 4803, 5348, 4978, 4793, 3253, 4559, 4425, 653,
	5349, 5364, 4804, 2746, 5157, 3052, 4072, 1004, 3343, 4325,
	2813, 4822, 5298, 4967, 2003, 4874, 4893, 5034, 1425, 4854,
	786, 5045, 4740, 2863, 2816, 4377, 2187, 4640, 3402, 5028,
	4459, 1476, 4770, 5145, 2552, 4688, 4922, 1032, 4183, 5193,
	6, 3602, 3251, 4823, 5113, 4771, 4324, 1242, 3988, 4768,
	3331, 750, 718, 5097, 2207, 2607, 1553, 963, 4900, 4894,
	3628, 4622, 4895, 1160, 3501, 4598, 4557, 4684, 4948, 4966,
	2829, 4945, 2917, 3573, 79, 4458, 3047, 4712, 228, 228,
	2870, 4316, 3576, 4667, 632, 637, 2323, 647, 651, 4384,
	3206, 4347, 2839, 3004, 671, 2771, 678, 678, 2909, 3472,
	4046, 4189, 3181, 4720, 2570, 671, 4184, 4122, 4076, 671,
	3984, 2076, 4193, 2383, 3550, 714, 717, 722, 717, 3502,
	717, 678, 3992, 678, 1298, 64, 4358, 678, 678, 3488,
	717, 678, 678, 4, 2831, 2233, 20, 2858, 2232, 19,
	4525, 663, 100, 4605, 671, 671, 671, 671, 3554, 4354,
	815, 717, 717, 678, 717, 826, 1199, 1456, 697, 678,
	826, 678, 826, 678, 678, 678, 678, 678, 2231, 13,
	3430, 678, 717, 4333, 717, 678, 661, 717, 678, 678,
	4628, 2230, 12, 721, 979, 4039, 2970, 3916, 1434, 2856,
	2853, 3210, 3147, 3730, 1158, 3455, 3536, 2893, 4246, 823,
	1513, 2700, 867, 3228, 834, 3211, 836, 228, 228, 1229,
	3553, 2296, 3019, 2830, 3642, 3167, 3657, 3620, 3636, 2702,
	4106, 1178, 3046, 2971, 2269, 2260, 904, 2264, 2254, 2918,
	2897, 3094, 2896, 64, 2884, 2880, 3447, 2898, 668, 2855,
	990, 3458, 3957, 3808, 20, 2206, 2721, 19, 2772, 693,
	100, 2658, 3312, 3466, 696, 3342, 2189, 3286, 3411, 2710,
	2013, 1455, 3655, 2560, 1387, 1207, 2403, 686, 2935, 3051,
	2817, 3000, 2307, 1111, 1274, 1146, 1185, 13, 938, 670,
	2281, 2883, 2838, 1430, 3256, 1119, 3480, 2872, 799, 2837,
	12, 2827, 2240, 2834, 2836, 1164, 2188, 2156, 3335, 2761,
	4340, 2714, 2659, 2718, 2668, 2005, 2665, 2780, 2587, 1514,
	1502, 2597, 1269, 1377, 857, 685, 812, 1360, 215, 1424,
	2934, 2381, 2933, 1210, 1208, 748, 2947, 713, 2069, 120,
	2850, 2744, 122, 2028, 2612, 991, 1000, 1449, 1503, 1485,
	640, 639, 2551, 187, 1483, 186, 1392, 864, 2460, 2461,
	2877, 2408, 652, 219, 2268, 143, 972, 1518, 2213, 676,
	2280, 973, 974, 1422, 642, 1486, 98, 1302, 1280, 1337,
	2261, 207, 1484, 1267, 99, 674, 682, 3522, 684, 692,
	1367, 690, 1367, 3413, 3336, 1367, 5416, 2571, 1021, 5414,
	5412, 1368, 657, 1368, 5372, 5333, 1368, 5360, 5373, 5333,
	3521, 1015, 5357, 5373, 3360, 5294, 5000, 1551, 5341, 3523,
	1521, 2162, 3254, 5332, 1533, 1534, 1535, 2162, 5309, 5302,
	907, 909, 5333, 5284, 3358, 5293, 2166, 5310, 3435, 2167,
	2572, 5134, 4960, 2172, 4943, 2164, 5267, 5223, 650, 648,
	2169, 2173, 2168, 1521, 2170, 4579, 2162, 4744, 2171, 1544,
	1545, 2165, 3376, 5222, 5210, 5172, 166, 5166, 2174, 4742,
	2800, 954, 2162, 2574, 5173, 1521, 5167, 659, 2164, 1551,
	793, 794, 1521, 2572, 5142, 658, 5105, 1031, 5104, 4709,
	2572, 3611, 679, 3562, 2165, 5103, 1015, 5103, 860, 3360,
	2164, 827, 5102, 3370, 3371, 3372, 3236, 2164, 5082, 5081,
	4255, 5103, 5078, 5076, 843, 846, 4999, 2162, 2162, 4997,
	937, 5079, 5077, 2165, 1519, 5000, 1201, 3776, 2162, 1201,
	2174, 4996, 2822, 1441, 4976, 1431, 932, 994, 3414, 3337,
	1370, 1034, 4975, 3399, 924, 919, 921, 3376, 900, 3360,
	4868, 2162, 4853, 4843, 4558, 4826, 4818, 4817, 4693, 4579,
	3305, 2546, 4844, 3304, 4825, 3562, 1370, 4694, 657, 1443,
	4683, 3306, 1446, 4673, 2162, 4657, 4592, 1551, 1445, 2574,
	1521, 4497, 3523, 1551, 4656, 4593, 1521, 1444, 4591, 4590,
	1533, 1534, 1535, 1033, 5272, 4588, 5271, 3562, 3562, 2574,
	3311, 4578, 1521, 1447, 1370, 2164, 4547, 3445, 3826, 2172,
	4579, 2164, 689, 2613, 5004, 2162, 2169, 2173, 2168, 1019,
	2170, 2165, 931, 933, 935, 939, 4545, 2165, 2174, 4515,
	1551, 4455, 4454, 1521, 2174, 4546, 4453, 951, 4516, 4447,
	4456, 2574, 4395, 966, 4369, 2574, 4265, 2162, 2574, 4960,
	4243, 3523, 2572, 4370, 4958, 2162, 2172, 4001, 2164, 2162,
	1366, 4796, 1406, 2169, 2173, 2168, 2574, 2170, 986, 3363,
	3364, 3365, 3366, 671, 2165, 3918, 678, 3907, 687, 3835,
	3768, 2174, 3754, 2605, 3919, 1370, 3908, 4517, 2162, 2162,
	3775, 3753, 671, 3681, 1134, 671, 671, 4501, 4351, 3668,
	671, 671, 3682, 671, 1520, 815, 815, 678, 3669, 815,
	3525, 958, 960, 961, 3511, 3440, 3434, 3425, 3406, 3526,
	717, 717, 3398, 3512, 3441, 3435, 2162, 3358, 3396, 3395,
	3394, 3399, 3393, 1406, 3309, 3307, 4308, 2162, 2162, 2162,
	3789, 2162, 2294, 2162, 2162, 671, 3231, 3194, 4049, 688,
	3086, 2764, 4010, 4009, 1551, 2574, 2162, 1521, 3840, 3087,
	3803, 1533, 1534, 1535, 3780, 2911, 1139, 1526, 1527, 1528,
	1529, 3562, 2806, 2166, 2912, 2802, 2167, 3486, 3422, 3421,
	2172, 1370, 2164, 678, 2162, 858, 678, 2169, 2173, 2168,
	2576, 2170, 2575, 717, 2163, 2171, 1544, 1545, 2165, 2574,
	3420, 2574, 3358, 2162, 2546, 2174, 955, 1365, 3220, 3217,
	671, 671, 2978, 2685, 2585, 2539, 2489, 1117, 673, 4872,
	1379, 108, 2237, 3366, 2237, 1529, 1034, 3714, 1109, 4176,
	678, 717, 717, 2237, 927, 1034, 1379, 926, 1163, 693,
	693, 4460, 1113, 678, 959, 1379, 1112, 2237, 5160, 1431,
	982, 983, 3221, 1113, 3149, 1034, 988, 1112, 1113, 3670,
	1163, 1168, 1112, 2574, 929, 3671, 2246, 5405, 105, 5379,
	1241, 932, 5230, 1015, 102, 5214, 3360, 5205, 103, 3942,
	3370, 3371, 3372, 2574, 3998, 4827, 4990, 3412, 3408, 2574,
	4965, 4956, 1406, 4946, 5161, 102, 4057, 107, 2822, 103,
	4690, 1125, 1406, 717, 4955, 1406, 4954, 1365, 4964, 1374,
	5158, 716, 1370, 737, 3374, 739, 1107, 1406, 107, 2201,
	4913, 985, 1540, 4805, 3376, 788, 4798, 4781, 4762, 4697,
	1438, 1530, 1531, 1532, 3361, 3362, 3363, 3364, 3365, 3366,
	1524, 1525, 1526, 1527, 1528, 1529, 819, 820, 3339, 822,
	1454, 955, 4674, 4647, 671, 1263, 647, 3001, 1477, 1162,
	1477, 4602, 2318, 1126, 4554, 671, 3612, 851, 3612, 854,
	4551, 1388, 1389, 1524, 1525, 1526, 1527, 1528, 1529, 4537,
	1190, 4536, 4524, 955, 1386, 938, 4322, 2247, 2321, 938,
	938, 4315, 1520, 3568, 1110, 1524, 1525, 1526, 1527, 1528,
	1529, 1478, 1524, 1525, 1526, 1527, 1528, 1529, 4312, 4298,
	3367, 3368, 3369, 944, 2015, 946, 945, 948, 4293, 3361,
	3362, 3363, 3364, 3365, 3366, 1205, 1206, 4285, 947, 968,
	950, 1370, 3775, 1448, 2978, 4284, 969, 952, 1388, 1389,
	659, 4274, 4272, 1169, 4271, 1175, 4270, 4269, 658, 4048,
	3969, 1390, 1155, 3931, 3930, 3914, 3904, 4056, 1321, 3903,
	3902, 1118, 3843, 1432, 1433, 3837, 3624, 2678, 3581, 3361,
	3362, 3363, 3364, 3365, 3366, 3561, 1336, 3520, 1233, 3485,
	1342, 1239, 1197, 1257, 1136, 1137, 1426, 1426, 1540, 1442,
	2822, 661, 1154, 3416, 3409, 3389, 3381, 1530, 1531, 1532,
	1524, 1525, 1526, 1527, 1528, 1529, 1524, 1525, 1526, 1527,
	1528, 1529, 105, 3380, 3359, 1378, 671, 3356, 678, 3355,
	955, 678, 1524, 1525, 1526, 1527, 1528, 1529, 2071, 2319,
	2245, 2258, 3999, 4691, 2191, 1540, 2192, 3351, 3349, 102,
	3348, 3347, 3346, 103, 671, 3324, 3313, 2212, 3308, 1300,
	3201, 932, 678, 1524, 1525, 1526, 1527, 1528, 1529, 3199,
	3196, 3195, 107, 2801, 2792, 1391, 1176, 2202, 2447, 722,
	932, 1138, 717, 717, 717, 717, 988, 717, 3945, 2071,
	987, 2241, 2182, 678, 1281, 1170, 2014, 2679, 101, 956,
	119, 1473, 671, 967, 5413, 1281, 671, 1281, 5401, 5397,
	959, 2284, 1126, 1481, 1415, 1383, 1384, 1385, 1299, 5312,
	2204, 5279, 5252, 1311, 2305, 1317, 5247, 1418, 959, 1320,
	1551, 5240, 671, 1521, 717, 1339, 5182, 1402, 1343, 1344,
	5112, 2244, 671, 1363, 3333, 721, 1479, 723, 671, 4901,
	5075, 5050, 5047, 2322, 734, 735, 736, 4963, 2164, 4962,
	2324, 3821, 1395, 1396, 4931, 4927, 1399, 671, 3489, 1540,
	671, 4858, 4821, 4758, 2165, 4757, 678, 2320, 1530, 1531,
	1532, 2174, 4756, 4734, 3937, 3353, 4718, 1524, 1525, 1526,
	1527, 1528, 1529, 4717, 3354, 4716, 4707, 4704, 3250, 4360,
	4586, 4583, 2257, 3997, 3763, 717, 4548, 2420, 228, 2351,
	928, 4380, 1436, 4364, 2014, 4350, 929, 4342, 4339, 671,
	678, 4195, 1165, 4095, 2284, 2284, 2284, 4052, 3805, 4036,
	4028, 4025, 939, 2340, 1420, 2324, 939, 939, 2200, 1440,
	1474, 1113, 2010, 671, 671, 1112, 3941, 957, 4006, 5159,
	1495, 2018, 101, 1487, 1494, 4476, 3974, 3972, 3150, 3151,
	106, 717, 717, 717, 717, 717, 659, 3150, 3151, 659,
	659, 2304, 1516, 101, 1510, 717, 717, 1511, 1512, 1517,
	678, 678, 3964, 717, 678, 1391, 2344, 1432, 1433, 2016,
	3763, 3647, 3646, 1015, 3641, 1120, 3360, 3367, 3368, 3369,
	3370, 3371, 3372, 3513, 2068, 5359, 3361, 3362, 3363, 3364,
	3365, 3366, 4257, 2176, 2356, 3644, 2058, 3478, 2359, 2360,
	3476, 3475, 3428, 2301, 1384, 1383, 671, 3244, 3330, 3323,
	3299, 1385, 3297, 2670, 3374, 3178, 2019, 2021, 2022, 3107,
	2998, 2161, 1121, 1165, 3376, 2920, 2313, 2315, 2865, 2676,
	2726, 2720, 680, 2472, 2473, 1396, 1395, 101, 2524, 2488,
	2343, 2417, 2418, 1399, 2544, 2223, 2214, 2355, 671, 671,
	1165, 826, 826, 826, 678, 717, 678, 2067, 2561, 678,
	678, 717, 2463, 1379, 2463, 2066, 1477, 1381, 2463, 2463,
	2367, 647, 2065, 647, 2210, 2363, 2364, 2159, 2064, 2063,
	2285, 2062, 2061, 2060, 2059, 2057, 2056, 2055, 2382, 2054,
	1551, 2053, 2238, 1521, 2052, 1166, 1167, 2288, 2051, 2050,
	671, 1027, 2049, 2048, 2047, 1505, 2380, 2573, 2215, 2046,
	671, 1371, 1244, 717, 2045, 1375, 2044, 2043, 2164, 2042,
	2041, 3820, 2242, 2040, 2039, 2038, 2369, 2037, 2036, 2373,
	2442, 2035, 2034, 2033, 2165, 2031, 2030, 1435, 1435, 2389,
	1435, 2174, 2017, 2068, 2015, 1475, 1394, 1268, 1116, 791,
	3527, 1400, 3948, 3755, 2913, 2675, 2823, 1388, 1389, 1179,
	2292, 2293, 3473, 1015, 1179, 3252, 3360, 4652, 1204, 2467,
	3370, 3371, 3372, 1338, 2068, 2262, 4172, 1551, 4167, 1246,
	1521, 3698, 4256, 3688, 106, 3639, 2580, 2295, 5366, 3344,
	2316, 2289, 3079, 2285, 2285, 2285, 117, 101, 105, 2311,
	2405, 3075, 2185, 2366, 3374, 2164, 1306, 1307, 3273, 2434,
	2405, 2314, 4866, 4865, 3376, 2547, 2548, 4405, 4504, 2674,
	2446, 2165, 5099, 1165, 657, 102, 3544, 2452, 2174, 103,
	3341, 2409, 2531, 3540, 2534, 2535, 2536, 1015, 656, 3690,
	3360, 2719, 3574, 2297, 3370, 3371, 3372, 3793, 107, 4645,
	1319, 2421, 1230, 3792, 5043, 5042, 3834, 4864, 3015, 4669,
	4520, 813, 2409, 2432, 2183, 2023, 824, 2604, 2409, 2439,
	2511, 824, 965, 824, 2435, 2436, 2437, 1551, 3374, 2509,
	1521, 940, 4857, 1165, 2020, 655, 2402, 5367, 3376, 2465,
	4035, 2468, 2517, 2469, 2470, 3003, 2310, 3002, 2583, 5286,
	4435, 4792, 1245, 1490, 1128, 2164, 2027, 2503, 3266, 2493,
	3650, 2443, 4526, 2707, 2448, 4300, 4299, 1490, 631, 2227,
	2903, 2165, 1191, 629, 2516, 4651, 1143, 111, 2174, 866,
	866, 1322, 2936, 1524, 1525, 1526, 1527, 1528, 1529, 2936,
	918, 731, 732, 733, 2526, 2527, 699, 911, 2007, 2528,
	725, 726, 727, 728, 729, 730, 110, 2734, 699, 1230,
	932, 809, 2708, 701, 2555, 1322, 2557, 2931, 3921, 2562,
	2563, 4680, 3578, 4887, 1275, 701, 3651, 3598, 3832, 2556,
	3831, 3539, 4663, 4492, 2809, 2564, 2309, 4219, 4448, 3538,
	3544, 2937, 4175, 4143, 1247, 4011, 111, 3540, 2937, 1186,
	3560, 111, 2276, 707, 2553, 2554, 2709, 2930, 1151, 2706,
	916, 842, 2594, 4670, 2333, 2332, 2885, 2887, 2886, 2600,
	782, 2579, 2578, 2581, 1248, 110, 4242, 1249, 2308, 2538,
	110, 1250, 3028, 3026, 148, 3082, 638, 627, 2586, 654,
	1276, 5226, 3800, 2208, 4426, 3262, 4791, 3261, 3260, 798,
	3259, 797, 796, 1251, 795, 1435, 2622, 2611, 2158, 1435,
	1435, 2610, 3962, 2331, 5096, 5059, 2976, 3535, 1244, 5200,
	3514, 4940, 4939, 4487, 3546, 4160, 4157, 3078, 657, 3653,
	3027, 3025, 2711, 2956, 3637, 2349, 4599, 3367, 3368, 3369,
	5225, 1254, 2345, 5052, 4145, 4679, 3361, 3362, 3363, 3364,
	3365, 3366, 1435, 1435, 3741, 2475, 4552, 2956, 1252, 5356,
	2602, 5355, 925, 4676, 4436, 2938, 4185, 4675, 1414, 5053,
	2584, 2178, 2938, 5203, 2951, 1253, 5072, 4696, 4423, 4417,
	2549, 2179, 4227, 1551, 3204, 1246, 1521, 1346, 3144, 3852,
	3014, 2944, 4151, 1277, 1412, 4897, 1354, 2248, 2249, 2250,
	2251, 690, 2252, 2180, 2711, 3579, 3855, 3680, 3787, 3677,
	1491, 2164, 1255, 2705, 3676, 2413, 4880, 3542, 3786, 2596,
	3785, 3784, 1352, 4392, 1491, 3783, 4723, 2165, 3545, 3618,
	4142, 2603, 2959, 3853, 2174, 5285, 5270, 2298, 5118, 3037,
	3138, 2519, 2342, 3503, 2462, 1489, 2520, 3592, 5141, 2337,
	2523, 2737, 3547, 4196, 2525, 3725, 2959, 722, 2298, 1315,
	3728, 3156, 4449, 1524, 1525, 1526, 1527, 1528, 1529, 3122,
	3155, 5199, 4650, 2808, 2694, 3154, 123, 2588, 3153, 2298,
	2673, 2298, 2711, 1492, 2298, 3135, 2298, 1174, 3546, 3134,
	2298, 1180, 2540, 2542, 5100, 2298, 1180, 1492, 2426, 1349,
	2738, 148, 1340, 2529, 2298, 1411, 2298, 3541, 1245, 2711,
	2778, 3548, 1335, 1172, 2810, 149, 1318, 1301, 1272, 2691,
	2419, 1271, 1270, 721, 3344, 1313, 2949, 3367, 3368, 3369,
	106, 5098, 2404, 1351, 3652, 3658, 3361, 3362, 3363, 3364,
	3365, 3366, 2404, 2184, 2739, 1266, 2984, 2736, 702, 3543,
	1524, 1525, 1526, 1527, 1528, 1529, 2550, 185, 2672, 1493,
	3791, 2957, 690, 2451, 2450, 2226, 2598, 2598, 2449, 5117,
	3596, 2518, 5169, 1493, 5228, 1129, 2476, 2477, 2478, 2479,
	2480, 3542, 2785, 4132, 3595, 2957, 2327, 3990, 2567, 1413,
	4186, 2510, 3545, 2458, 2953, 1273, 706, 4784, 2513, 2457,
	1247, 3367, 3368, 3369, 4276, 717, 2347, 2928, 707, 700,
	3361, 3362, 3363, 3364, 3365, 3366, 4073, 1353, 2953, 2300,
	2740, 700, 689, 2299, 1171, 2818, 1194, 2820, 1314, 3727,
	1248, 2191, 2888, 1249, 3504, 2843, 2843, 1250, 2955, 3137,
	1230, 2305, 717, 5170, 2002, 3093, 4169, 3694, 3691, 2208,
	1524, 1525, 1526, 1527, 1528, 1529, 1148, 1149, 4741, 1251,
	1152, 1015, 2955, 5116, 3360, 3828, 678, 671, 3370, 3371,
	3372, 3541, 2929, 1123, 1278, 5227, 2908, 147, 3285, 146,
	3833, 4892, 2846, 2846, 678, 4898, 2919, 2568, 687, 2776,
	708, 2770, 1345, 2071, 717, 1347, 678, 1254, 2305, 1156,
	2952, 2735, 3374, 2595, 678, 2351, 4113, 1500, 1173, 661,
	2362, 2569, 3376, 3543, 1252, 4074, 4689, 3772, 2972, 717,
	3016, 2566, 3851, 671, 2952, 2689, 915, 4113, 2963, 2683,
	4571, 1253, 149, 2455, 2068, 2950, 678, 678, 678, 3658,
	671, 671, 2068, 4187, 2305, 4899, 2882, 678, 2624, 2565,
	785, 2352, 88, 2781, 3006, 678, 3010, 678, 678, 688,
	4881, 1328, 3246, 678, 4785, 2846, 678, 678, 1255, 2273,
	678, 2010, 678, 678, 2999, 2948, 671, 704, 4572, 2962,
	3020, 1203, 3591, 689, 3678, 2328, 678, 678, 671, 2677,
	678, 678, 2982, 2983, 1361, 3044, 2330, 2329, 2954, 1357,
	4638, 925, 717, 717, 1348, 2958, 3120, 678, 678, 1124,
	2716, 3035, 671, 3030, 2336, 2786, 671, 2352, 678, 1452,
	2973, 1127, 2954, 2416, 2755, 3773, 5055, 1324, 4225, 2958,
	1312, 3726, 678, 678, 678, 678, 678, 2900, 2225, 678,
	2774, 917, 829, 678, 5196, 2326, 4261, 678, 678, 687,
	942, 2797, 4260, 2796, 655, 5195, 4180, 3722, 4783, 2849,
	2660, 2661, 2662, 2663, 4400, 1358, 3113, 2979, 678, 678,
	3070, 3985, 678, 2904, 678, 5060, 705, 2741, 4452, 678,
	2969, 678, 678, 2336, 2382, 4890, 678, 2977, 678, 2414,
	3679, 678, 678, 2382, 147, 3643, 146, 2825, 2939, 703,
	4806, 5046, 2881, 228, 4366, 678, 1524, 1525, 1526, 1527,
	1528, 1529, 678, 5197, 151, 678, 1156, 4170, 3695, 3692,
	688, 4721, 678, 678, 4920, 5171, 2919, 4114, 3165, 3114,
	1327, 3172, 4936, 678, 717, 815, 2341, 4365, 826, 722,
	826, 826, 4451, 2994, 3168, 3089, 3091, 2826, 4114, 709,
	3610, 706, 2415, 3529, 711, 4127, 3063, 2572, 4042, 4231,
	3081, 2218, 3066, 3067, 2396, 1501, 1325, 2891, 1356, 4140,
	2335, 717, 2821, 4190, 2217, 830, 5391, 5390, 2852, 5057,
	5056, 4437, 3180, 4422, 3185, 3186, 4115, 671, 4450, 1147,
	2942, 678, 1330, 2921, 2922, 2923, 2924, 2925, 1329, 2353,
	975, 3184, 2029, 2354, 4043, 721, 4629, 4115, 2722, 4630,
	4904, 4429, 4631, 2907, 2905, 3232, 2910, 2906, 5354, 2749,
	4919, 975, 977, 5049, 975, 977, 2724, 3229, 3605, 4116,
	4632, 2775, 3076, 831, 2722, 5114, 3080, 3860, 5188, 2335,
	2715, 938, 4877, 4288, 1451, 1130, 4033, 2981, 2464, 4700,
	4116, 3088, 2787, 2789, 2843, 2791, 3131, 2793, 2794, 2795,
	3053, 671, 3895, 4228, 3059, 2353, 792, 4634, 2987, 2354,
	1450, 4130, 3894, 3584, 913, 1202, 810, 4633, 2219, 744,
	4107, 3068, 5032, 2712, 3073, 2175, 971, 4635, 923, 3532,
	4208, 923, 2486, 2727, 2728, 2729, 2730, 1157, 1416, 943,
	2481, 2846, 3116, 4207, 2487, 2484, 2485, 2490, 4007, 5274,
	1361, 2890, 4041, 3249, 3148, 3171, 1304, 722, 661, 3054,
	2968, 3413, 2844, 2844, 3336, 1393, 1397, 1398, 1326, 1382,
	2986, 3874, 1323, 4795, 3255, 5386, 4641, 5301, 1426, 4977,
	4304, 1304, 4581, 2224, 3310, 2487, 4553, 3084, 4097, 3083,
	2236, 3433, 3315, 3316, 3090, 3338, 3287, 3219, 2485, 4283,
	3332, 3290, 5322, 4305, 1331, 3162, 3291, 4362, 5321, 5289,
	1355, 5288, 5125, 3292, 5194, 3367, 3368, 3369, 5124, 3298,
	4980, 4979, 3289, 721, 3361, 3362, 3363, 3364, 3365, 3366,
	5130, 5234, 4840, 5233, 2483, 661, 5131, 4191, 3130, 4128,
	3115, 3132, 3133, 5127, 5128, 2844, 2686, 2690, 4841, 2692,
	5129, 1362, 976, 5126, 2558, 4982, 4910, 4636, 4637, 3233,
	4618, 4981, 4129, 4058, 3215, 4614, 3397, 1410, 2845, 2845,
	1265, 3141, 3404, 976, 1182, 3139, 976, 3140, 2766, 2767,
	2768, 2769, 3143, 4040, 3424, 3140, 3632, 2482, 3630, 5323,
	3604, 4032, 3327, 912, 4428, 811, 1405, 3169, 743, 2798,
	4989, 3177, 4289, 2191, 4946, 4794, 3414, 3248, 4642, 3337,
	4801, 2651, 3457, 3457, 815, 4802, 2843, 3469, 3457, 3457,
	4098, 2655, 1189, 2653, 3170, 1303, 1201, 2650, 3288, 2652,
	2654, 3896, 4665, 4611, 4612, 3203, 5133, 5146, 5132, 4389,
	671, 3216, 671, 671, 3208, 3608, 1477, 671, 671, 3209,
	1303, 2845, 3587, 4839, 3510, 3205, 3187, 2914, 971, 2291,
	2032, 2846, 3159, 2846, 5148, 3163, 4620, 4613, 4984, 4616,
	4617, 4619, 4615, 5147, 4983, 4985, 4986, 1488, 3629, 1482,
	5149, 678, 1480, 1341, 671, 3239, 3238, 3494, 1153, 3314,
	3403, 3258, 2600, 3282, 3263, 4317, 5385, 5367, 1404, 5337,
	661, 5255, 5254, 5363, 2515, 3247, 866, 5151, 2241, 678,
	3973, 5409, 5296, 3007, 5153, 4596, 938, 678, 939, 678,
	1200, 671, 671, 4420, 1188, 678, 4376, 3950, 3518, 2940,
	2624, 866, 2889, 2861, 2338, 1509, 1421, 3515, 2397, 2394,
	4326, 3493, 3272, 3270, 3283, 2406, 2664, 2396, 2317, 2851,
	3530, 3042, 824, 824, 824, 4576, 5156, 1435, 5154, 2284,
	3249, 5150, 5015, 1435, 1435, 678, 932, 2860, 4577, 5011,
	5012, 938, 938, 3500, 4323, 5014, 5162, 5163, 3606, 4609,
	3302, 5010, 4833, 3, 962, 4831, 678, 4834, 3442, 2425,
	3041, 3600, 3496, 4357, 3043, 2395, 5384, 3666, 2814, 2815,
	5161, 113, 114, 115, 116, 3326, 678, 678, 678, 678,
	3329, 3580, 5065, 3432, 5066, 3552, 5340, 3551, 2782, 2926,
	3431, 3040, 3467, 3237, 2398, 4081, 5155, 3617, 4808, 3619,
	4811, 3415, 5065, 5066, 2608, 2609, 3757, 3417, 3659, 3465,
	2656, 5161, 3431, 3152, 2975, 3806, 3807, 4994, 3386, 3387,
	3388, 2623, 221, 4608, 1133, 4561, 678, 678, 4566, 678,
	678, 678, 4564, 3454, 4565, 4567, 4993, 4082, 3407, 3470,
	3471, 4575, 3482, 3483, 3279, 1435, 3277, 4810, 4809, 914,
	3275, 2844, 3276, 3278, 853, 738, 5251, 4102, 3426, 3419,
	2683, 2010, 681, 3533, 2819, 3429, 781, 214, 678, 5291,
	4083, 4084, 4085, 3437, 671, 1244, 3462, 2805, 2351, 3438,
	5392, 3603, 4685, 3461, 3436, 3683, 3684, 678, 3460, 3464,
	2004, 5292, 4938, 3615, 3005, 678, 3731, 3064, 3065, 3484,
	2660, 2661, 2662, 2663, 4412, 109, 4222, 2657, 4221, 1435,
	3983, 618, 2428, 2427, 3572, 2243, 3477, 2195, 3508, 3505,
	3189, 4563, 3190, 4568, 3191, 2194, 4336, 3193, 1435, 3958,
	3953, 2804, 3519, 717, 717, 3952, 3589, 3590, 3517, 3202,
	3517, 3001, 1246, 717, 4855, 5290, 3599, 3956, 3453, 3451,
	3452, 3450, 4896, 2749, 2749, 678, 5232, 2845, 5231, 3242,
	3242, 3622, 3712, 3575, 3713, 3549, 678, 5064, 826, 2664,
	5062, 2561, 3782, 3570, 3571, 4991, 3656, 4799, 4381, 4018,
	3585, 3516, 3567, 3660, 112, 671, 938, 4090, 3928, 3927,
	3869, 3235, 3868, 3234, 3192, 626, 3123, 628, 630, 3481,
	3112, 3481, 2867, 2812, 2411, 2325, 2277, 671, 2272, 671,
	1372, 1333, 3779, 1332, 671, 2068, 1308, 1195, 2285, 3616,
	1108, 3614, 3507, 939, 964, 953, 3200, 3689, 3631, 3176,
	3638, 1519, 695, 691, 3645, 4247, 3809, 2717, 2749, 2749,
	2749, 3649, 5219, 5136, 5135, 3623, 3699, 3734, 5016, 3735,
	3736, 3804, 4302, 3710, 3448, 3453, 3451, 3452, 3450, 4535,
	3446, 3449, 3555, 3280, 4488, 1245, 4368, 2382, 4248, 3566,
	4161, 2844, 4158, 2844, 3846, 3847, 3848, 4019, 939, 939,
	3685, 3873, 3524, 3721, 3865, 3711, 3230, 3715, 2361, 2358,
	984, 977, 3788, 3597, 3257, 3245, 2582, 3799, 3795, 3241,
	3254, 3593, 4439, 3702, 3621, 4398, 2828, 3707, 4397, 3732,
	3334, 4440, 5315, 3575, 4335, 3448, 3453, 3451, 3452, 3450,
	4672, 3446, 3449, 4334, 2522, 2199, 4541, 3798, 2198, 3240,
	4441, 4438, 661, 3719, 3479, 3448, 3453, 3451, 3452, 3450,
	4287, 3446, 3449, 4240, 3827, 3474, 3352, 3284, 2613, 2577,
	694, 683, 5314, 2660, 2661, 2662, 2663, 1247, 5208, 4749,
	3281, 4746, 4506, 4483, 4478, 4477, 3910, 4182, 2517, 4181,
	4171, 4166, 3295, 4079, 3747, 3746, 3745, 2845, 3744, 2845,
	3743, 3300, 949, 3742, 3738, 3737, 2818, 1248, 3729, 3716,
	1249, 3709, 2191, 3771, 1250, 3756, 2843, 3697, 3696, 2843,
	3687, 3693, 3627, 3626, 3625, 3322, 2208, 3963, 3321, 3320,
	3457, 3469, 3457, 3457, 3457, 3319, 1251, 3269, 3758, 3970,
	3174, 3766, 3136, 3797, 3767, 3271, 2667, 3265, 3117, 697,
	2666, 2667, 3198, 2649, 3943, 3944, 1126, 2305, 2545, 2474,
	3995, 2471, 3978, 2846, 3781, 2466, 2846, 2459, 678, 2445,
	2441, 2440, 2438, 2433, 1254, 2431, 3796, 2424, 2407, 2393,
	2392, 2391, 2377, 2350, 2346, 3391, 2339, 671, 2196, 1477,
	2625, 1252, 2626, 3845, 3197, 941, 3778, 930, 2521, 4875,
	678, 2715, 932, 1435, 932, 5276, 678, 5244, 1253, 717,
	5023, 2646, 5275, 4000, 4033, 4467, 671, 4463, 2644, 2647,
	2643, 3829, 2645, 4314, 3813, 3814, 3815, 3816, 4313, 3748,
	4017, 4280, 4279, 2919, 4027, 3723, 4034, 3111, 3588, 717,
	3845, 3108, 3594, 939, 2444, 1255, 3105, 3842, 3101, 2412,
	4430, 3226, 3225, 3224, 3223, 3222, 2683, 2980, 2372, 4005,
	3854, 3856, 3857, 3863, 3249, 1338, 1238, 1232, 2682, 3301,
	4003, 980, 671, 3867, 678, 666, 4077, 932, 2681, 3872,
	5358, 678, 2843, 2972, 2400, 4411, 3878, 152, 3947, 4092,
	4460, 981, 4026, 2399, 4047, 667, 5376, 678, 678, 5375,
	3996, 2864, 4378, 1201, 2305, 1367, 4070, 3994, 4108, 3207,
	936, 4885, 1477, 4884, 678, 1477, 1368, 1477, 4124, 3552,
	4194, 3551, 4024, 4457, 4372, 712, 2004, 3749, 3909, 2846,
	2846, 3634, 4146, 2993, 678, 3923, 3467, 4123, 2961, 3951,
	4060, 3662, 3954, 3664, 2868, 3922, 3924, 2267, 3936, 2259,
	678, 2209, 3939, 4111, 2203, 3020, 4118, 4150, 4120, 678,
	678, 678, 4087, 3938, 678, 2846, 3955, 678, 678, 678,
	678, 4068, 4054, 4086, 3959, 3960, 2847, 2847, 3949, 4131,
	678, 3965, 3980, 3967, 3968, 2973, 3946, 678, 1198, 678,
	2683, 1187, 4055, 3859, 3966, 1181, 1177, 1159, 5229, 3925,
	678, 4606, 4021, 3929, 683, 4733, 3986, 3249, 678, 678,
	4732, 4209, 2382, 678, 678, 678, 678, 678, 4136, 4139,
	4125, 4002, 4210, 2382, 2382, 4104, 3751, 3718, 4012, 3663,
	2881, 2068, 4016, 3717, 3661, 3633, 4020, 4022, 3601, 3168,
	2540, 2542, 3497, 2945, 2941, 2866, 2862, 2532, 2530, 2375,
	2371, 2278, 2263, 2255, 678, 678, 678, 678, 678, 2847,
	4096, 2253, 3552, 2235, 3551, 4149, 4066, 1409, 1408, 1407,
	1401, 1376, 4045, 1373, 1369, 3229, 722, 1364, 2749, 2749,
	1350, 4051, 1309, 1259, 671, 671, 671, 671, 1256, 4053,
	1237, 4059, 3249, 3750, 1231, 4061, 3752, 4465, 4062, 4063,
	4464, 3161, 2234, 4103, 1147, 902, 4069, 5139, 5069, 5058,
	2985, 1161, 4959, 4713, 4797, 4091, 4088, 4094, 4735, 4653,
	4595, 4468, 4424, 4410, 4401, 2996, 4220, 3492, 2966, 2960,
	1417, 2290, 2186, 2160, 3769, 3317, 3318, 2543, 4245, 2541,
	4119, 1034, 721, 1034, 932, 1034, 5383, 4215, 3243, 4214,
	4137, 4141, 4138, 5368, 1034, 5206, 4916, 2964, 4023, 4229,
	4144, 3609, 4148, 3870, 3871, 4876, 2357, 3982, 1039, 2749,
	2749, 2749, 2749, 2749, 2749, 2749, 2749, 2749, 2749, 2749,
	2749, 2749, 4241, 2749, 4217, 4153, 1037, 1036, 1028, 2177,
	934, 1439, 4387, 4671, 5186, 4168, 3555, 4666, 4391, 4879,
	4173, 4668, 5051, 2844, 4664, 2216, 2844, 4660, 2748, 4232,
	3148, 3915, 4124, 3858, 4200, 3506, 2722, 4213, 3166, 3509,
	2871, 678, 3498, 2843, 2843, 2878, 1295, 2843, 613, 614,
	4199, 220, 2401, 815, 2895, 678, 4327, 3926, 3760, 3761,
	3457, 2222, 2919, 4345, 2221, 815, 4216, 4678, 3765, 4211,
	4677, 4399, 4903, 4396, 4188, 2967, 3121, 4078, 4352, 2846,
	4080, 4230, 3607, 710, 4064, 4065, 3801, 4067, 2305, 717,
	2846, 2846, 2965, 4238, 2846, 1193, 813, 2456, 4915, 824,
	4075, 824, 824, 3975, 4349, 3173, 2927, 2491, 3565, 671,
	3564, 42, 2846, 41, 4099, 4318, 4319, 40, 39, 1477,
	38, 3977, 37, 36, 35, 4379, 62, 61, 60, 2845,
	4367, 59, 2845, 4363, 4125, 58, 3179, 57, 717, 56,
	55, 3838, 3188, 54, 4343, 4344, 4268, 2305, 53, 678,
	52, 51, 50, 49, 48, 47, 46, 4373, 45, 3555,
	4402, 44, 43, 815, 34, 33, 32, 4348, 31, 30,
	4382, 29, 2749, 28, 4282, 27, 230, 26, 25, 24,
	23, 2972, 22, 21, 4233, 4234, 4235, 4236, 4237, 2844,
	2844, 3790, 3774, 3227, 4371, 2305, 4409, 2946, 4444, 76,
	75, 74, 73, 4301, 72, 71, 70, 69, 68, 67,
	66, 5, 65, 63, 18, 2847, 4418, 17, 1359, 2229,
	134, 1131, 2239, 2614, 3654, 2844, 4415, 3635, 2846, 4416,
	4105, 188, 3905, 2492, 1234, 4321, 4206, 1435, 4320, 5265,
	3018, 5033, 3989, 121, 4218, 4891, 3537, 3534, 678, 4112,
	3987, 678, 4921, 4121, 3993, 2857, 3991, 678, 678, 678,
	2854, 5336, 678, 678, 678, 4341, 4331, 4332, 2540, 2542,
	4337, 4562, 678, 678, 3340, 4278, 2779, 2784, 4556, 4443,
	4281, 4829, 4597, 2973, 5144, 4383, 4594, 4346, 4374, 2916,
	4131, 4406, 4407, 104, 4807, 2845, 2845, 4574, 2803, 2193,
	81, 4461, 665, 4361, 664, 5138, 989, 1435, 4845, 5027,
	755, 4621, 678, 678, 4359, 4610, 678, 4394, 678, 3981,
	118, 755, 755, 4329, 4403, 2197, 4385, 4404, 4356, 4355,
	4311, 2845, 4267, 5013, 5009, 5008, 817, 3940, 2811, 2382,
	4353, 817, 755, 2824, 2181, 16, 817, 4419, 817, 15,
	14, 11, 10, 9, 8, 755, 755, 7, 4776, 4774,
	4775, 4773, 2671, 724, 1548, 2601, 892, 892, 4533, 755,
	755, 755, 4431, 978, 678, 4534, 1508, 4433, 970, 4782,
	1435, 3864, 4275, 4767, 2026, 5140, 3961, 2704, 870, 871,
	1380, 868, 1029, 4472, 4442, 894, 3762, 4307, 3920, 4570,
	3911, 2747, 2743, 755, 2732, 2754, 4432, 4295, 2687, 1013,
	1012, 2713, 3325, 2024, 4031, 1007, 1008, 678, 4466, 1003,
	1499, 4560, 3410, 1496, 3148, 4446, 4470, 2843, 4469, 3218,
	678, 2559, 2378, 4345, 3148, 2847, 3039, 2847, 4473, 3665,
	3686, 3045, 4937, 3160, 4050, 1555, 2733, 1550, 2, 1,
	0, 1435, 0, 0, 0, 671, 0, 0, 0, 4643,
	0, 3995, 0, 0, 0, 1435, 4623, 671, 0, 0,
	0, 4124, 671, 0, 2846, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4480, 0, 0, 4482, 0,
	1435, 678, 0, 0, 4494, 0, 0, 0, 4388, 0,
	0, 0, 0, 678, 0, 4626, 0, 0, 678, 0,
	0, 671, 0, 0, 678, 4589, 4226, 678, 2846, 2844,
	4077, 0, 4646, 0, 0, 0, 826, 4654, 0, 717,
	2844, 2844, 4521, 4528, 2844, 4705, 0, 0, 4414, 0,
	0, 0, 4682, 0, 4303, 0, 4239, 4124, 722, 0,
	717, 717, 2844, 0, 0, 0, 0, 0, 0, 3563,
	0, 0, 4573, 0, 0, 4702, 4123, 0, 678, 678,
	4711, 0, 0, 4125, 678, 4686, 0, 0, 678, 0,
	4728, 0, 0, 4681, 0, 0, 0, 0, 4624, 722,
	826, 4549, 0, 4644, 2846, 4699, 0, 678, 0, 4658,
	4607, 0, 0, 4604, 4743, 4648, 4582, 4662, 3994, 0,
	4726, 0, 64, 0, 721, 4714, 4655, 4769, 0, 0,
	0, 4661, 4627, 20, 4603, 2845, 19, 0, 0, 100,
	0, 0, 0, 3249, 4753, 0, 2845, 2845, 4706, 0,
	2845, 0, 4719, 0, 4708, 0, 0, 4639, 0, 4125,
	4585, 4751, 3293, 3294, 0, 721, 13, 4722, 2845, 4724,
	0, 0, 0, 0, 4725, 0, 0, 0, 2844, 12,
	4124, 0, 4736, 0, 678, 4812, 0, 0, 0, 0,
	0, 0, 0, 0, 815, 0, 0, 4824, 3552, 4813,
	3551, 4737, 0, 0, 0, 0, 4508, 4509, 0, 0,
	0, 4752, 0, 4755, 4750, 0, 0, 0, 0, 0,
	0, 0, 4761, 0, 0, 0, 0, 2846, 0, 0,
	0, 4851, 4814, 0, 4555, 0, 4766, 4569, 0, 0,
	0, 2846, 0, 0, 0, 0, 0, 3377, 3378, 3379,
	4587, 0, 4846, 4587, 4790, 0, 0, 0, 0, 0,
	4296, 0, 0, 0, 4852, 0, 0, 0, 0, 0,
	0, 0, 0, 671, 0, 0, 0, 0, 0, 0,
	678, 0, 4125, 0, 2845, 938, 0, 4835, 4836, 0,
	0, 4837, 4838, 0, 0, 4820, 4348, 678, 4860, 0,
	0, 0, 4819, 0, 4867, 0, 815, 4862, 0, 0,
	2843, 0, 0, 0, 0, 0, 0, 4889, 4888, 0,
	0, 0, 0, 0, 671, 4748, 0, 0, 3759, 824,
	0, 0, 0, 0, 0, 0, 0, 3764, 4856, 0,
	0, 0, 0, 0, 0, 0, 0, 678, 4871, 0,
	678, 817, 817, 0, 4859, 1435, 4870, 2846, 0, 4869,
	4878, 4625, 0, 0, 1435, 1435, 0, 817, 4861, 0,
	0, 0, 4886, 0, 0, 0, 0, 0, 4923, 4906,
	4942, 4905, 4847, 0, 4375, 4911, 0, 0, 0, 4863,
	4917, 817, 817, 0, 4932, 817, 0, 0, 0, 4918,
	0, 0, 0, 4912, 0, 4498, 4499, 4474, 4475, 1477,
	4502, 4503, 2191, 4988, 0, 0, 0, 4934, 4908, 0,
	0, 0, 2919, 0, 2844, 2749, 4933, 0, 0, 0,
	0, 5007, 0, 4413, 4947, 4950, 4951, 0, 4909, 4493,
	1477, 0, 1477, 5005, 0, 0, 0, 0, 4995, 0,
	4992, 0, 0, 0, 0, 0, 0, 0, 0, 5035,
	4623, 0, 661, 5031, 4972, 4973, 4507, 0, 2844, 0,
	0, 4510, 0, 4987, 0, 3555, 0, 0, 892, 5029,
	0, 5021, 5030, 5024, 0, 0, 4385, 4926, 2749, 4928,
	0, 4930, 0, 0, 4815, 0, 4882, 0, 5038, 0,
	3876, 5003, 4522, 5044, 4998, 717, 2846, 0, 0, 0,
	3880, 678, 938, 0, 5040, 0, 5026, 0, 0, 0,
	5039, 5006, 0, 0, 0, 0, 0, 0, 1477, 0,
	2845, 0, 722, 0, 5041, 3901, 0, 0, 0, 0,
	678, 678, 0, 0, 2844, 0, 5048, 0, 0, 0,
	0, 0, 0, 5054, 0, 0, 0, 2847, 0, 4769,
	2847, 5036, 0, 0, 0, 5063, 5067, 5061, 0, 5084,
	0, 0, 0, 0, 2845, 0, 0, 0, 0, 0,
	5073, 5123, 0, 0, 0, 5089, 0, 0, 0, 0,
	0, 5071, 5115, 0, 5088, 0, 0, 5086, 721, 5090,
	0, 4824, 5137, 0, 5083, 5092, 5085, 0, 5087, 0,
	755, 5101, 0, 0, 755, 755, 5109, 0, 5107, 4842,
	5108, 0, 939, 0, 1477, 0, 0, 5121, 5122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 5168,
	0, 755, 0, 0, 0, 0, 0, 0, 4124, 0,
	2845, 0, 0, 755, 5143, 5187, 0, 826, 826, 0,
	678, 0, 817, 0, 817, 5164, 5184, 2844, 5177, 0,
	5181, 817, 0, 678, 0, 0, 5174, 5175, 5179, 2749,
	0, 2844, 817, 817, 817, 817, 817, 0, 0, 0,
	0, 5178, 0, 817, 5213, 2846, 1435, 678, 0, 0,
	5180, 5189, 5190, 826, 5183, 0, 0, 0, 0, 5191,
	4044, 0, 0, 0, 0, 0, 5198, 817, 5201, 0,
	0, 0, 0, 2847, 2847, 2351, 5207, 5216, 5217, 0,
	0, 0, 5212, 0, 0, 5236, 1477, 1477, 2749, 0,
	5239, 4923, 0, 5215, 0, 5235, 0, 5220, 0, 0,
	4125, 0, 0, 0, 0, 5224, 2191, 0, 5204, 2847,
	2818, 0, 0, 0, 0, 0, 0, 3823, 3824, 0,
	0, 0, 0, 2845, 5035, 717, 717, 5237, 5238, 5249,
	0, 0, 0, 4124, 0, 815, 5260, 2845, 5241, 0,
	0, 5246, 5248, 0, 5250, 0, 5029, 2844, 0, 2073,
	817, 5256, 5266, 817, 678, 5257, 5258, 5253, 0, 5262,
	0, 0, 0, 0, 0, 5264, 5261, 0, 0, 0,
	717, 2846, 0, 0, 4715, 0, 0, 5273, 0, 938,
	2846, 0, 5263, 0, 5017, 5018, 5019, 5020, 0, 5280,
	892, 0, 0, 1435, 755, 4729, 4730, 892, 5299, 939,
	2073, 5282, 2073, 5287, 0, 0, 0, 0, 3881, 3882,
	3883, 3884, 3885, 3886, 3887, 3888, 3889, 3890, 3891, 3892,
	3893, 5306, 3897, 5308, 0, 755, 5036, 0, 0, 0,
	0, 755, 0, 0, 0, 4125, 5277, 4786, 0, 0,
	0, 5305, 815, 5327, 5328, 5329, 5313, 4824, 4789, 5311,
	5304, 5307, 0, 2845, 0, 717, 0, 0, 5209, 5324,
	5211, 4124, 0, 4223, 5343, 5345, 5338, 5339, 5331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 5353, 0,
	5346, 892, 0, 0, 5299, 5342, 5347, 5344, 4816, 0,
	5361, 0, 0, 5316, 5317, 4560, 2844, 0, 0, 0,
	0, 0, 0, 5370, 5365, 892, 5362, 0, 2846, 815,
	0, 5369, 5318, 2749, 0, 0, 0, 0, 0, 0,
	5380, 5374, 0, 5378, 0, 815, 5377, 5381, 5382, 0,
	5387, 5371, 0, 0, 5388, 5394, 678, 5395, 5393, 5353,
	5396, 826, 826, 5404, 5400, 4560, 0, 5406, 5299, 5408,
	5407, 5399, 0, 0, 0, 5410, 0, 0, 0, 0,
	5411, 0, 0, 4125, 5299, 5415, 0, 5353, 0, 0,
	0, 0, 4953, 0, 0, 0, 0, 4957, 755, 0,
	0, 0, 0, 0, 0, 5402, 5403, 0, 5281, 0,
	0, 4037, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2845, 2847, 0, 0, 0, 0, 0, 0,
	0, 892, 0, 892, 2847, 2847, 817, 0, 2847, 4924,
	4925, 0, 0, 0, 4338, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2847, 0, 892, 0,
	0, 755, 0, 755, 755, 755, 755, 0, 0, 1015,
	0, 0, 3360, 0, 0, 5320, 3370, 3371, 3372, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1015, 0,
	0, 3360, 0, 906, 0, 3370, 3371, 3372, 0, 2007,
	0, 0, 0, 3375, 0, 2844, 0, 0, 0, 0,
	3374, 0, 5152, 5080, 0, 0, 0, 817, 817, 817,
	3376, 0, 0, 0, 0, 1551, 0, 0, 1521, 3374,
	0, 4390, 1533, 1534, 1535, 0, 939, 0, 0, 3376,
	0, 0, 0, 0, 2166, 0, 0, 2167, 0, 0,
	0, 2172, 0, 2164, 4427, 0, 817, 0, 2169, 2173,
	2168, 0, 2170, 817, 817, 0, 2171, 1544, 1545, 2165,
	0, 0, 2847, 0, 0, 0, 2174, 817, 892, 0,
	0, 817, 817, 817, 817, 817, 817, 817, 817, 817,
	817, 817, 817, 817, 817, 817, 817, 0, 817, 0,
	0, 0, 0, 0, 0, 0, 2073, 0, 0, 0,
	0, 2845, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 749, 0, 0,
	0, 2844, 0, 0, 0, 0, 0, 0, 749, 749,
	2844, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2749, 2749, 0, 0, 2749, 828,
	5070, 0, 0, 4471, 0, 0, 0, 0, 0, 0,
	0, 0, 844, 848, 0, 0, 0, 0, 0, 0,
	1551, 5352, 0, 1521, 5110, 5111, 0, 1533, 1534, 1535,
	0, 0, 0, 0, 2019, 0, 0, 0, 0, 2166,
	0, 0, 2167, 0, 0, 0, 2172, 4500, 2164, 0,
	0, 0, 0, 2169, 2173, 2168, 0, 2170, 0, 0,
	0, 2171, 1544, 1545, 2165, 0, 0, 0, 0, 0,
	0, 2174, 0, 0, 0, 0, 0, 2845, 0, 4511,
	4512, 0, 5352, 0, 0, 0, 2845, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2844, 0,
	5352, 0, 0, 1551, 4267, 0, 1521, 0, 0, 0,
	1533, 1534, 1535, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2166, 0, 0, 2167, 0, 0, 0, 2172,
	0, 2164, 0, 0, 0, 0, 2169, 2173, 2168, 0,
	2170, 0, 0, 0, 2171, 1544, 1545, 2165, 2847, 0,
	0, 0, 0, 0, 2174, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2606, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2608, 2609, 0, 0,
	0, 0, 2847, 1551, 0, 3563, 1521, 0, 0, 0,
	1533, 1534, 1535, 0, 2845, 0, 0, 0, 0, 0,
	0, 0, 2166, 0, 0, 2167, 0, 0, 0, 2172,
	0, 2164, 0, 0, 0, 0, 2169, 2173, 2168, 0,
	2170, 0, 5350, 0, 2171, 1544, 1545, 2165, 0, 0,
	0, 0, 0, 0, 2174, 0, 0, 824, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	788, 788, 0, 0, 0, 0, 1551, 0, 2847, 1521,
	0, 0, 0, 1533, 1534, 1535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2166, 0, 0, 2167, 0,
	0, 0, 2172, 5350, 2164, 0, 0, 0, 0, 2169,
	2173, 2168, 0, 2170, 5303, 5283, 0, 2171, 1544, 1545,
	2165, 824, 0, 3367, 3368, 3369, 0, 2174, 0, 0,
	0, 5350, 3361, 3362, 3363, 3364, 3365, 3366, 0, 0,
	0, 5319, 3367, 3368, 3369, 0, 0, 0, 0, 0,
	0, 3361, 3362, 3363, 3364, 3365, 3366, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1540, 0, 0, 0, 0, 0, 4763, 4765, 0, 1530,
	1531, 1532, 0, 0, 0, 0, 0, 0, 1524, 1525,
	1526, 1527, 1528, 1529, 0, 3405, 0, 0, 0, 0,
	788, 2847, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 817, 817, 0, 817, 2847, 0, 817, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 817, 817, 0,
	0, 0, 0, 0, 817, 0, 817, 817, 817, 817,
	817, 817, 817, 817, 817, 817, 817, 0, 817, 0,
	817, 0, 817, 817, 817, 817, 817, 817, 0, 817,
	817, 817, 0, 0, 817, 0, 0, 0, 0, 0,
	0, 1009, 80, 1551, 0, 5120, 1521, 0, 0, 0,
	1533, 1534, 1535, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2166, 0, 4540, 2167, 0, 0, 0, 2172,
	0, 2164, 0, 0, 0, 0, 2169, 2173, 2168, 0,
	2170, 0, 0, 0, 2171, 1544, 1545, 2165, 0, 0,
	0, 0, 0, 4873, 2174, 1540, 0, 4914, 0, 0,
	0, 2847, 0, 0, 1530, 1531, 1532, 0, 0, 0,
	0, 0, 0, 1524, 1525, 1526, 1527, 1528, 1529, 0,
	3392, 0, 0, 0, 0, 0, 0, 0, 0, 817,
	0, 0, 0, 817, 817, 817, 817, 0, 0, 5119,
	0, 0, 660, 662, 0, 0, 0, 0, 0, 0,
	80, 0, 0, 0, 0, 0, 0, 0, 0, 80,
	0, 817, 817, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 892, 0, 0, 4949, 0, 4949, 4949, 1540, 0,
	892, 0, 0, 0, 0, 0, 0, 1530, 1531, 1532,
	0, 0, 0, 0, 2073, 0, 1524, 1525, 1526, 1527,
	1528, 1529, 0, 0, 0, 3912, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2073,
	0, 0, 0, 0, 817, 0, 0, 0, 0, 0,
	2847, 0, 0, 0, 5001, 0, 0, 892, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 892, 0, 0, 0, 0, 3913, 1540, 0,
	0, 0, 0, 0, 0, 0, 0, 1530, 1531, 1532,
	0, 2073, 0, 0, 0, 0, 1524, 1525, 1526, 1527,
	1528, 1529, 0, 0, 0, 0, 755, 0, 0, 0,
	2073, 0, 0, 0, 0, 0, 0, 0, 4788, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 892, 892,
	0, 1540, 0, 0, 0, 0, 0, 892, 0, 0,
	1530, 1531, 1532, 0, 0, 0, 817, 0, 0, 1524,
	1525, 1526, 1527, 1528, 1529, 0, 1551, 4828, 0, 1521,
	0, 0, 0, 1533, 1534, 1535, 0, 0, 0, 0,
	0, 755, 755, 0, 0, 2166, 0, 0, 2167, 0,
	0, 0, 2172, 0, 2164, 0, 0, 0, 0, 2169,
	2173, 2168, 0, 3382, 0, 0, 0, 2171, 1544, 1545,
	2165, 0, 0, 0, 0, 0, 755, 2174, 0, 3383,
	0, 0, 0, 755, 0, 0, 0, 0, 0, 2847,
	0, 0, 0, 0, 0, 0, 0, 0, 824, 824,
	0, 0, 0, 1214, 0, 2073, 0, 0, 1215, 0,
	0, 817, 1224, 892, 817, 0, 817, 817, 0, 892,
	0, 0, 0, 0, 1551, 0, 0, 1521, 0, 0,
	0, 1533, 1534, 1535, 0, 0, 0, 0, 0, 0,
	0, 817, 0, 2166, 824, 3384, 2167, 0, 0, 0,
	2172, 0, 2164, 0, 0, 0, 755, 2169, 2173, 2168,
	0, 2170, 755, 0, 0, 2171, 1544, 1545, 2165, 0,
	0, 0, 0, 0, 1217, 2174, 0, 0, 0, 0,
	0, 0, 1244, 5221, 0, 0, 0, 0, 2073, 0,
	4133, 0, 0, 0, 755, 0, 0, 0, 1540, 2399,
	0, 0, 817, 1223, 0, 0, 0, 1530, 1531, 1532,
	817, 2228, 0, 0, 5330, 2847, 1524, 1525, 1526, 1527,
	1528, 1529, 817, 0, 2847, 0, 5268, 1214, 0, 0,
	817, 0, 1215, 0, 1228, 0, 1224, 1551, 0, 0,
	1521, 0, 2265, 0, 1533, 1534, 1535, 0, 2274, 1246,
	0, 0, 0, 0, 0, 0, 2166, 0, 0, 2167,
	817, 817, 0, 2172, 0, 2164, 817, 0, 0, 0,
	2169, 2173, 2168, 0, 2170, 0, 0, 1213, 2171, 1544,
	1545, 2165, 817, 817, 0, 0, 1291, 817, 2174, 0,
	2410, 0, 0, 0, 0, 0, 817, 0, 1217, 0,
	0, 0, 817, 0, 1218, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 817, 817, 817, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1223, 0, 0,
	0, 0, 817, 5325, 0, 0, 0, 0, 0, 1220,
	0, 0, 0, 817, 1214, 1219, 0, 0, 1297, 1215,
	0, 0, 2847, 1224, 0, 660, 0, 0, 1228, 0,
	0, 0, 0, 0, 0, 0, 0, 817, 817, 817,
	0, 0, 1245, 0, 0, 817, 817, 817, 0, 5335,
	817, 0, 1293, 0, 0, 0, 0, 2073, 0, 4107,
	1221, 817, 0, 2073, 0, 2265, 0, 0, 0, 892,
	5325, 1213, 0, 0, 0, 4130, 0, 0, 0, 0,
	0, 0, 1211, 817, 0, 1217, 5389, 817, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1218, 0,
	0, 0, 824, 824, 4134, 1222, 0, 0, 0, 0,
	817, 0, 0, 0, 1223, 817, 1225, 4132, 0, 0,
	817, 0, 817, 0, 0, 0, 0, 0, 2265, 0,
	2533, 1212, 0, 1220, 1247, 0, 0, 0, 0, 1219,
	1282, 0, 0, 0, 0, 1228, 0, 0, 0, 3708,
	0, 1227, 1226, 0, 0, 0, 892, 0, 0, 0,
	0, 755, 1292, 0, 1248, 0, 0, 1249, 0, 0,
	0, 1250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2208, 1221, 0, 0, 0, 1213, 0,
	0, 2498, 0, 1251, 0, 0, 195, 0, 0, 2073,
	892, 1540, 1288, 0, 0, 0, 892, 0, 0, 0,
	1530, 1531, 1532, 0, 198, 1218, 755, 755, 0, 1524,
	1525, 1526, 1527, 1528, 1529, 1285, 0, 0, 1216, 1222,
	0, 1254, 0, 0, 0, 0, 755, 755, 0, 0,
	1225, 0, 0, 5242, 5243, 0, 755, 5245, 1252, 1290,
	1220, 0, 0, 0, 0, 0, 1219, 0, 1230, 0,
	0, 817, 0, 0, 0, 1253, 0, 4135, 3637, 0,
	0, 0, 0, 3055, 0, 1227, 1226, 0, 0, 0,
	0, 0, 0, 0, 0, 817, 0, 0, 0, 0,
	0, 1296, 0, 0, 0, 0, 0, 0, 0, 1540,
	0, 1221, 1255, 0, 0, 0, 0, 0, 1530, 1531,
	1532, 0, 0, 0, 0, 5269, 0, 1524, 1525, 1526,
	1527, 1528, 1529, 204, 0, 0, 88, 0, 2494, 1283,
	0, 0, 0, 0, 0, 2073, 2073, 2073, 0, 0,
	0, 660, 0, 1289, 660, 660, 1222, 0, 0, 0,
	0, 0, 1216, 0, 200, 0, 0, 1225, 0, 1286,
	2324, 0, 0, 0, 0, 201, 1284, 0, 2008, 0,
	1294, 0, 2011, 2012, 892, 892, 2504, 892, 0, 0,
	0, 0, 1230, 0, 0, 0, 0, 0, 0, 0,
	2496, 1214, 1227, 1226, 817, 0, 1215, 205, 0, 0,
	1224, 0, 0, 0, 0, 206, 0, 1287, 0, 755,
	0, 0, 1540, 199, 0, 2497, 0, 0, 0, 0,
	0, 1530, 1531, 1532, 0, 0, 0, 0, 5259, 0,
	1524, 1525, 1526, 1527, 1528, 1529, 2508, 0, 1551, 0,
	0, 1521, 0, 0, 0, 1533, 1534, 1535, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2166, 0, 0,
	2167, 755, 1217, 0, 2172, 892, 2164, 0, 0, 1216,
	0, 2169, 2173, 2168, 892, 2170, 0, 0, 0, 2171,
	1544, 1545, 2165, 0, 0, 0, 0, 0, 0, 2174,
	0, 1223, 755, 80, 0, 0, 0, 0, 0, 1230,
	755, 0, 0, 0, 817, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 2499, 0, 208, 755, 0, 0,
	0, 0, 1228, 755, 0, 0, 0, 0, 0, 0,
	0, 817, 0, 0, 0, 2505, 0, 0, 2500, 0,
	0, 817, 0, 209, 0, 0, 0, 0, 196, 0,
	0, 210, 817, 817, 0, 0, 817, 817, 817, 0,
	817, 0, 0, 0, 0, 1213, 0, 202, 0, 0,
	0, 817, 2506, 0, 0, 0, 1236, 0, 2507, 0,
	0, 0, 0, 203, 817, 0, 817, 2501, 0, 0,
	0, 0, 1218, 2502, 0, 0, 0, 0, 817, 0,
	0, 0, 0, 0, 817, 817, 0, 0, 861, 197,
	0, 0, 0, 0, 817, 0, 0, 0, 0, 0,
	0, 817, 0, 0, 0, 817, 817, 1220, 0, 0,
	0, 0, 0, 1219, 0, 0, 0, 892, 0, 817,
	0, 2495, 0, 0, 817, 817, 0, 892, 817, 817,
	817, 817, 817, 817, 817, 817, 817, 817, 817, 817,
	817, 0, 817, 0, 0, 0, 0, 0, 0, 817,
	817, 817, 892, 0, 0, 0, 0, 817, 1221, 817,
	0, 0, 1291, 0, 0, 0, 817, 2073, 0, 0,
	817, 0, 0, 0, 0, 817, 0, 0, 0, 817,
	0, 0, 0, 0, 0, 0, 0, 817, 817, 817,
	0, 0, 0, 0, 677, 677, 0, 0, 817, 0,
	0, 0, 0, 1222, 0, 0, 0, 0, 0, 0,
	0, 0, 817, 0, 1225, 817, 0, 0, 0, 741,
	0, 745, 0, 0, 1297, 783, 784, 0, 0, 789,
	790, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 817, 817, 0, 817, 817, 1235, 0, 1227,
	1226, 821, 0, 0, 0, 0, 0, 832, 1293, 835,
	0, 837, 838, 839, 840, 841, 0, 0, 0, 850,
	0, 817, 0, 855, 0, 0, 0, 862, 0, 892,
	817, 817, 0, 0, 0, 0, 0, 0, 0, 0,
	892, 892, 0, 0, 892, 0, 0, 1551, 0, 755,
	1521, 0, 0, 0, 1533, 1534, 1535, 0, 0, 0,
	0, 817, 0, 0, 0, 0, 2166, 0, 0, 2167,
	0, 0, 0, 2172, 0, 2164, 1216, 892, 0, 0,
	2169, 2173, 2168, 0, 2170, 0, 0, 0, 2171, 1544,
	1545, 2165, 0, 0, 0, 0, 1282, 0, 2174, 0,
	0, 0, 0, 0, 755, 0, 1230, 0, 755, 755,
	0, 0, 1551, 0, 0, 1521, 0, 0, 1292, 1533,
	1534, 1535, 0, 0, 0, 0, 0, 0, 817, 817,
	0, 2166, 0, 0, 2167, 0, 0, 0, 2172, 2669,
	2164, 0, 0, 0, 0, 2169, 2173, 2168, 0, 2170,
	0, 0, 0, 2171, 1544, 1545, 2165, 0, 1288, 0,
	0, 0, 0, 2174, 817, 0, 0, 0, 0, 0,
	0, 0, 0, 1540, 0, 0, 0, 0, 0, 0,
	0, 1285, 1530, 1531, 1532, 0, 2073, 892, 2073, 5106,
	0, 1524, 1525, 1526, 1527, 1528, 1529, 0, 0, 2073,
	1551, 0, 0, 1521, 0, 1290, 0, 1533, 1534, 1535,
	0, 0, 4830, 0, 0, 0, 0, 0, 0, 2166,
	0, 0, 2167, 0, 0, 0, 2172, 0, 2164, 0,
	0, 0, 0, 2169, 2173, 2168, 0, 2170, 0, 0,
	0, 2171, 1544, 1545, 2165, 0, 0, 1296, 0, 0,
	0, 2174, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	2073, 0, 892, 0, 0, 0, 152, 0, 0, 1316,
	892, 0, 88, 0, 0, 1283, 0, 0, 0, 0,
	0, 0, 755, 3038, 148, 0, 0, 0, 126, 1289,
	0, 0, 0, 0, 0, 0, 2073, 145, 0, 0,
	0, 0, 0, 0, 0, 1286, 0, 1104, 0, 0,
	817, 0, 1284, 0, 0, 0, 1294, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 817, 817, 133,
	0, 0, 0, 817, 817, 0, 0, 0, 0, 0,
	817, 817, 0, 0, 0, 0, 0, 817, 0, 0,
	0, 817, 0, 1287, 0, 1551, 0, 0, 1521, 0,
	0, 0, 1533, 1534, 1535, 0, 0, 0, 749, 817,
	0, 0, 0, 0, 2166, 0, 0, 2167, 0, 0,
	817, 2172, 0, 2164, 0, 0, 0, 0, 2169, 2173,
	2168, 0, 2170, 1122, 0, 0, 2171, 1544, 1545, 2165,
	0, 0, 0, 749, 0, 0, 2174, 0, 0, 1214,
	749, 0, 0, 0, 1215, 817, 0, 0, 1224, 0,
	138, 0, 0, 817, 0, 0, 817, 0, 817, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 892, 0, 0, 0, 0, 0, 817, 0,
	0, 129, 0, 0, 0, 817, 0, 0, 0, 817,
	817, 0, 0, 817, 0, 0, 0, 0, 0, 817,
	0, 0, 0, 0, 4787, 0, 0, 0, 0, 0,
	1217, 817, 0, 0, 0, 0, 0, 125, 0, 3212,
	0, 0, 0, 0, 135, 0, 0, 886, 886, 0,
	0, 0, 130, 0, 677, 0, 0, 0, 0, 1223,
	131, 0, 0, 892, 0, 149, 0, 0, 892, 0,
	0, 3212, 0, 0, 0, 0, 892, 0, 0, 0,
	0, 0, 0, 0, 0, 1150, 0, 0, 0, 0,
	1228, 0, 1540, 817, 0, 0, 0, 0, 0, 0,
	0, 1530, 1531, 1532, 0, 0, 0, 0, 5091, 2073,
	1524, 1525, 1526, 1527, 1528, 1529, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 817,
	0, 0, 0, 1213, 0, 2680, 755, 0, 0, 0,
	0, 0, 0, 0, 1211, 0, 0, 817, 0, 0,
	0, 137, 817, 0, 0, 0, 0, 1540, 0, 0,
	1218, 1192, 0, 140, 1196, 0, 1530, 1531, 1532, 0,
	0, 0, 0, 5068, 0, 1524, 1525, 1526, 1527, 1528,
	1529, 0, 144, 817, 0, 0, 0, 0, 818, 2788,
	124, 0, 0, 1212, 0, 1220, 0, 0, 132, 0,
	892, 1219, 0, 0, 0, 0, 0, 0, 1305, 0,
	0, 0, 0, 0, 139, 755, 0, 0, 755, 141,
	0, 1334, 0, 0, 0, 136, 0, 147, 0, 146,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 0, 0, 892, 1540, 1221, 151, 0, 150,
	0, 0, 817, 0, 1530, 1531, 1532, 0, 0, 0,
	0, 0, 0, 1524, 1525, 1526, 1527, 1528, 1529, 0,
	0, 0, 0, 0, 0, 0, 892, 892, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 142, 0,
	0, 1222, 0, 0, 0, 0, 0, 755, 0, 0,
	0, 0, 1225, 0, 817, 2669, 0, 0, 0, 0,
	0, 0, 817, 817, 817, 0, 662, 0, 0, 0,
	0, 0, 757, 0, 0, 0, 2832, 2832, 0, 0,
	0, 0, 0, 757, 757, 1209, 0, 1227, 1226, 0,
	0, 0, 0, 817, 817, 0, 0, 817, 817, 817,
	0, 0, 0, 825, 757, 0, 0, 0, 825, 0,
	825, 0, 0, 0, 0, 0, 0, 757, 757, 0,
	0, 0, 0, 0, 817, 0, 0, 0, 0, 0,
	0, 757, 757, 757, 0, 0, 0, 0, 0, 0,
	0, 0, 817, 817, 0, 0, 0, 0, 0, 0,
	0, 0, 892, 0, 0, 0, 0, 817, 817, 0,
	1540, 0, 0, 0, 1216, 757, 0, 2073, 0, 1530,
	1531, 1532, 0, 0, 0, 0, 0, 0, 1524, 1525,
	1526, 1527, 1528, 1529, 0, 0, 0, 817, 0, 0,
	0, 0, 892, 0, 1230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1551, 0, 0, 1521,
	0, 0, 0, 1533, 1534, 1535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2166, 0, 0, 2167, 0,
	0, 0, 2172, 0, 2164, 1291, 0, 0, 0, 2169,
	2173, 2168, 817, 2170, 0, 0, 677, 2171, 1544, 1545,
	2165, 0, 0, 0, 0, 0, 0, 2174, 0, 0,
	0, 0, 0, 817, 0, 0, 1551, 0, 0, 1521,
	0, 0, 0, 1533, 1534, 1535, 0, 0, 0, 0,
	2220, 0, 0, 892, 0, 2166, 0, 0, 2167, 0,
	0, 0, 2172, 0, 2164, 755, 0, 1297, 0, 2169,
	2173, 2168, 0, 2170, 0, 0, 817, 2171, 1544, 1545,
	2165, 2256, 0, 0, 0, 0, 0, 2174, 0, 0,
	0, 0, 0, 892, 892, 0, 0, 0, 0, 0,
	0, 1293, 0, 0, 0, 817, 0, 0, 0, 0,
	0, 0, 817, 0, 0, 0, 0, 0, 817, 0,
	0, 0, 0, 817, 1551, 817, 0, 1521, 992, 992,
	0, 1533, 1534, 1535, 0, 0, 0, 0, 817, 0,
	0, 0, 0, 2166, 0, 0, 2167, 0, 0, 0,
	2172, 0, 2164, 0, 0, 0, 817, 2169, 2173, 2168,
	0, 2170, 0, 817, 2376, 2171, 1544, 1545, 2165, 886,
	817, 0, 0, 0, 0, 2174, 0, 817, 0, 1551,
	0, 0, 1521, 817, 0, 0, 1533, 1534, 1535, 1282,
	0, 0, 0, 0, 0, 0, 0, 0, 2166, 0,
	755, 2167, 0, 0, 0, 2172, 0, 2164, 2430, 0,
	0, 1292, 2169, 2173, 2168, 0, 2170, 0, 0, 2265,
	2171, 1544, 1545, 2165, 0, 0, 0, 3777, 0, 0,
	2174, 0, 0, 892, 0, 0, 0, 0, 0, 0,
	892, 0, 0, 0, 3794, 2008, 0, 0, 0, 0,
	0, 1288, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2832, 0, 1103, 817, 2512,
	0, 2073, 2514, 0, 1285, 0, 0, 0, 0, 0,
	0, 0, 817, 0, 0, 0, 817, 0, 0, 0,
	0, 0, 0, 755, 817, 817, 0, 0, 1290, 2669,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 817, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2008, 3296, 0, 0, 0, 0, 0, 0,
	0, 892, 0, 892, 892, 817, 0, 0, 0, 0,
	1296, 0, 0, 84, 0, 0, 0, 83, 85, 0,
	0, 0, 0, 0, 817, 0, 0, 105, 0, 0,
	817, 817, 817, 0, 817, 0, 0, 0, 0, 0,
	0, 0, 1310, 817, 2073, 88, 0, 0, 1283, 0,
	0, 0, 0, 0, 102, 0, 0, 0, 103, 0,
	0, 0, 1289, 0, 0, 0, 0, 0, 0, 0,
	0, 892, 817, 1551, 2073, 0, 1521, 107, 1286, 0,
	1533, 1534, 1535, 0, 87, 1284, 0, 0, 0, 1294,
	0, 2073, 2166, 0, 0, 2167, 0, 755, 0, 2172,
	0, 2164, 82, 0, 0, 817, 2169, 2173, 2168, 1497,
	2170, 1504, 0, 0, 2171, 1544, 1545, 2165, 1515, 0,
	0, 0, 0, 0, 2174, 0, 1287, 885, 885, 1997,
	1998, 1999, 2000, 2001, 0, 0, 0, 0, 0, 0,
	2006, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1540, 0, 0, 0, 3459, 0, 3463, 0, 0,
	1530, 1531, 1532, 0, 2025, 0, 0, 4759, 0, 1524,
	1525, 1526, 1527, 1528, 1529, 0, 0, 0, 0, 0,
	0, 0, 89, 0, 0, 817, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 886, 0, 78, 0, 0, 0, 817, 886, 817,
	817, 1540, 0, 0, 0, 817, 4029, 0, 0, 91,
	1530, 1531, 1532, 0, 0, 0, 0, 4731, 0, 1524,
	1525, 1526, 1527, 1528, 1529, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2155, 0, 0,
	0, 817, 0, 0, 0, 0, 0, 77, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2265, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 80, 0, 817, 0, 0, 0, 0, 231,
	0, 0, 886, 0, 817, 0, 0, 817, 0, 1540,
	0, 0, 757, 817, 817, 0, 757, 757, 1530, 1531,
	1532, 0, 0, 0, 0, 4710, 886, 1524, 1525, 1526,
	1527, 1528, 1529, 0, 0, 0, 755, 0, 0, 0,
	0, 0, 0, 757, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 757, 0, 0, 0, 817,
	892, 0, 0, 0, 1540, 0, 0, 0, 0, 817,
	0, 0, 0, 1530, 1531, 1532, 0, 0, 0, 95,
	4687, 0, 1524, 1525, 1526, 1527, 1528, 1529, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 94, 0,
	0, 0, 88, 817, 817, 0, 97, 817, 92, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 755, 0, 0, 0, 0, 0,
	817, 0, 886, 756, 886, 0, 0, 90, 0, 817,
	0, 817, 0, 0, 756, 756, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 886,
	0, 0, 1214, 0, 0, 756, 0, 1215, 0, 3212,
	0, 1224, 0, 0, 0, 0, 0, 0, 756, 756,
	0, 0, 0, 0, 0, 0, 817, 0, 0, 0,
	0, 0, 756, 756, 756, 0, 0, 817, 0, 0,
	0, 2075, 0, 0, 0, 0, 0, 0, 0, 817,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 756, 0, 0, 0,
	0, 1551, 101, 1217, 1521, 0, 817, 0, 1533, 1534,
	1535, 0, 0, 0, 0, 0, 757, 0, 817, 0,
	2166, 0, 2075, 2167, 2075, 0, 892, 2172, 0, 2164,
	0, 0, 1223, 0, 2169, 2173, 2168, 817, 2170, 2073,
	0, 0, 2171, 1544, 1545, 2165, 0, 757, 0, 886,
	0, 0, 2174, 757, 0, 0, 0, 0, 1540, 0,
	0, 0, 0, 1228, 0, 0, 0, 1530, 1531, 1532,
	0, 0, 0, 0, 4550, 0, 1524, 1525, 1526, 1527,
	1528, 1529, 0, 0, 0, 817, 817, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2008,
	2073, 817, 0, 0, 0, 0, 1213, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 817, 817, 0,
	1997, 1998, 0, 0, 0, 0, 0, 0, 2073, 0,
	0, 0, 0, 1218, 992, 0, 0, 0, 2627, 2628,
	2629, 2630, 2631, 2632, 2633, 2634, 2635, 2636, 2637, 2638,
	2639, 2640, 2641, 2642, 0, 2648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1220, 0,
	0, 0, 0, 0, 1219, 0, 0, 0, 0, 0,
	1551, 0, 0, 1521, 0, 0, 0, 1533, 1534, 1535,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2166,
	757, 0, 2167, 0, 0, 0, 2172, 0, 2164, 885,
	0, 0, 0, 2169, 2173, 2168, 0, 2170, 0, 1221,
	0, 2171, 1544, 1545, 2165, 0, 0, 0, 0, 0,
	80, 2174, 0, 0, 0, 80, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2832, 0, 0,
	2832, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 757, 1222, 757, 757, 757, 757, 0,
	0, 0, 0, 0, 2901, 1225, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2915, 0, 80, 0, 0, 0, 1551, 0,
	0, 1521, 0, 0, 2932, 1533, 1534, 1535, 3703, 0,
	1227, 1226, 2943, 0, 0, 0, 0, 2166, 0, 825,
	825, 825, 0, 0, 2172, 0, 2164, 0, 0, 0,
	0, 2169, 2173, 2168, 0, 2170, 0, 0, 0, 2171,
	1544, 1545, 2165, 0, 2988, 2989, 2990, 0, 0, 2174,
	0, 0, 0, 0, 0, 2997, 0, 0, 0, 0,
	0, 0, 0, 3008, 0, 3012, 3013, 0, 0, 0,
	0, 3017, 0, 0, 3021, 3022, 0, 0, 3029, 0,
	3031, 3034, 0, 0, 0, 0, 0, 1216, 0, 0,
	0, 0, 0, 0, 3056, 3057, 0, 0, 3061, 3062,
	0, 0, 0, 0, 3212, 0, 0, 0, 2075, 0,
	0, 0, 0, 2832, 0, 3071, 3072, 1230, 0, 0,
	0, 0, 0, 0, 0, 0, 3085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3096, 3097, 3098, 3099, 3100, 0, 0, 3102, 0, 0,
	0, 3106, 0, 0, 0, 3109, 3110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3118, 3119, 0, 0,
	3124, 0, 3125, 0, 0, 0, 0, 3126, 0, 3127,
	3128, 0, 0, 0, 3129, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1540, 0, 0, 0,
	0, 0, 0, 3142, 0, 1530, 1531, 1532, 0, 0,
	3145, 0, 4532, 3146, 1524, 1525, 1526, 1527, 1528, 1529,
	3157, 3158, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3175, 1551, 0, 0, 1521, 0, 0, 0, 1533,
	1534, 1535, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2166, 0, 0, 2167, 0, 0, 0, 2172, 0,
	2164, 885, 0, 0, 0, 2169, 2173, 2168, 885, 2170,
	0, 0, 4357, 2171, 1544, 1545, 2165, 0, 0, 1551,
	0, 0, 1521, 2174, 0, 0, 1533, 1534, 1535, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2166, 0,
	0, 2167, 0, 0, 0, 2172, 1214, 2164, 0, 0,
	0, 1215, 2169, 2173, 2168, 1224, 2170, 0, 0, 0,
	2171, 1544, 1545, 2165, 2701, 0, 0, 0, 0, 0,
	2174, 0, 0, 0, 2723, 2725, 0, 0, 0, 0,
	0, 2731, 0, 2742, 2745, 0, 2756, 2757, 2762, 2765,
	0, 0, 885, 0, 0, 2773, 0, 0, 0, 2777,
	2783, 2725, 2725, 2790, 2725, 0, 2725, 2725, 2725, 0,
	0, 0, 0, 0, 0, 1540, 885, 1217, 0, 0,
	0, 0, 0, 756, 1530, 1531, 1532, 756, 756, 0,
	0, 4523, 0, 1524, 1525, 1526, 1527, 1528, 1529, 0,
	0, 0, 0, 0, 0, 0, 1223, 0, 0, 0,
	0, 0, 0, 0, 756, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 756, 0, 0, 0,
	0, 0, 886, 0, 0, 0, 0, 1228, 0, 0,
	0, 886, 0, 0, 2832, 2832, 0, 0, 2832, 0,
	0, 0, 0, 0, 0, 1551, 0, 0, 1521, 0,
	0, 0, 1533, 1534, 1535, 0, 2807, 0, 0, 0,
	2640, 2641, 2642, 2648, 2166, 0, 0, 2167, 0, 0,
	1213, 2172, 885, 2164, 885, 0, 0, 0, 2169, 2173,
	2168, 0, 2170, 1540, 0, 0, 2171, 1544, 1545, 2165,
	0, 0, 1530, 1531, 1532, 0, 2174, 1218, 886, 885,
	0, 1524, 1525, 1526, 1527, 1528, 1529, 1551, 0, 0,
	1521, 0, 0, 886, 1533, 1534, 1535, 0, 997, 0,
	0, 0, 0, 0, 0, 0, 2166, 0, 0, 2167,
	0, 0, 1220, 2172, 0, 2164, 0, 0, 1219, 0,
	2169, 2173, 2168, 0, 2170, 0, 0, 0, 2171, 1544,
	1545, 2165, 0, 0, 0, 0, 0, 0, 2174, 0,
	4292, 0, 2074, 4317, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1221, 0, 0, 0, 0, 0, 886,
	886, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 756, 0, 0,
	0, 0, 0, 2074, 0, 2074, 0, 0, 0, 885,
	0, 0, 0, 0, 0, 0, 0, 0, 1222, 3528,
	0, 0, 0, 0, 0, 0, 0, 0, 756, 1225,
	0, 0, 0, 0, 756, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3569, 0, 0,
	0, 0, 0, 0, 0, 3577, 0, 3577, 0, 0,
	0, 1214, 3074, 3586, 1227, 1226, 1215, 0, 0, 0,
	1224, 1551, 0, 0, 1521, 0, 0, 0, 1533, 1534,
	1535, 0, 0, 3104, 0, 0, 0, 0, 0, 0,
	2166, 0, 0, 2167, 886, 0, 0, 2172, 0, 2164,
	886, 0, 0, 0, 2169, 2173, 2168, 0, 2170, 0,
	0, 0, 2171, 1544, 1545, 2165, 0, 1540, 0, 0,
	0, 0, 2174, 0, 3648, 0, 1530, 1531, 1532, 0,
	0, 0, 1217, 0, 0, 1524, 1525, 1526, 1527, 1528,
	1529, 1216, 0, 0, 3672, 3673, 3674, 3675, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1223, 0, 0, 1540, 0, 2075, 0, 0, 0,
	0, 1230, 0, 1530, 1531, 1532, 0, 0, 0, 0,
	4294, 756, 1524, 1525, 1526, 1527, 1528, 1529, 0, 0,
	4291, 0, 1228, 0, 3700, 3701, 0, 3704, 3705, 3706,
	0, 2075, 0, 0, 0, 0, 0, 0, 2832, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1213, 3724, 0, 0, 0,
	0, 0, 0, 0, 756, 0, 756, 756, 756, 756,
	0, 0, 0, 2075, 0, 3739, 0, 0, 0, 80,
	0, 0, 1218, 3740, 0, 0, 0, 0, 757, 1504,
	0, 0, 2075, 80, 0, 0, 0, 2006, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1515,
	0, 0, 0, 0, 0, 0, 80, 1220, 0, 0,
	0, 0, 0, 1219, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3770, 0, 0, 0, 3267, 3268, 0,
	0, 0, 0, 3274, 0, 0, 0, 0, 0, 0,
	1540, 0, 0, 0, 0, 0, 0, 1214, 1221, 1530,
	1531, 1532, 1215, 757, 757, 0, 1224, 0, 1524, 1525,
	1526, 1527, 1528, 1529, 0, 0, 0, 0, 0, 3303,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	886, 2701, 2701, 2701, 0, 0, 0, 0, 757, 2074,
	0, 0, 0, 1222, 0, 757, 0, 0, 0, 3328,
	0, 0, 1540, 0, 1225, 0, 0, 0, 0, 0,
	3345, 1530, 1531, 1532, 0, 0, 0, 2075, 1217, 0,
	1524, 1525, 1526, 1527, 1528, 1529, 825, 0, 825, 825,
	0, 0, 0, 0, 0, 0, 0, 3060, 0, 1227,
	1226, 0, 2762, 2762, 2762, 0, 0, 1223, 0, 0,
	0, 0, 0, 80, 0, 0, 0, 0, 3401, 0,
	0, 0, 0, 0, 0, 0, 0, 886, 757, 0,
	0, 0, 0, 0, 757, 0, 0, 0, 1228, 0,
	3423, 0, 0, 0, 3427, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2075, 1551, 0, 0, 1521, 0, 757, 3439, 1533, 1534,
	1535, 886, 3443, 0, 0, 0, 1216, 886, 0, 0,
	2166, 1213, 1038, 2167, 0, 80, 0, 2172, 0, 2164,
	0, 0, 4290, 0, 2169, 2173, 2168, 0, 2170, 0,
	0, 0, 2171, 1544, 1545, 2165, 1230, 0, 1218, 0,
	0, 0, 2174, 1214, 0, 0, 0, 0, 1215, 0,
	0, 84, 1224, 0, 0, 83, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 1540, 0, 0, 0,
	0, 2832, 0, 1220, 1106, 1530, 1531, 1532, 0, 1219,
	0, 0, 0, 0, 1524, 1525, 1526, 1527, 1528, 1529,
	0, 0, 102, 0, 0, 0, 103, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4004, 0, 0, 0,
	0, 0, 0, 0, 1217, 107, 0, 0, 0, 0,
	0, 0, 87, 0, 1221, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3577, 2008,
	82, 0, 0, 1223, 4030, 0, 0, 0, 3613, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1222,
	0, 0, 3640, 0, 1228, 886, 886, 0, 886, 0,
	1225, 0, 0, 0, 0, 0, 0, 0, 0, 2075,
	0, 0, 885, 0, 0, 2075, 0, 0, 0, 0,
	0, 885, 872, 872, 0, 0, 0, 0, 0, 0,
	0, 0, 4071, 2374, 0, 1227, 1226, 1213, 0, 3577,
	89, 0, 0, 814, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4100, 4101, 0, 0, 0,
	0, 0, 0, 0, 1218, 0, 0, 0, 0, 0,
	0, 0, 4117, 0, 0, 0, 0, 91, 0, 0,
	0, 0, 0, 0, 888, 888, 886, 0, 885, 0,
	0, 0, 4147, 0, 0, 886, 0, 0, 0, 1220,
	0, 3720, 0, 885, 0, 1219, 0, 0, 4152, 0,
	0, 0, 1216, 757, 0, 4659, 0, 4154, 4155, 4156,
	0, 0, 4159, 0, 0, 4162, 4163, 4164, 4165, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4174, 96,
	0, 0, 1230, 0, 0, 4177, 0, 4178, 0, 0,
	1221, 2075, 0, 0, 0, 0, 0, 0, 4192, 0,
	0, 0, 0, 0, 0, 0, 4197, 4198, 757, 757,
	0, 4201, 4202, 4203, 4204, 4205, 0, 0, 0, 885,
	885, 0, 0, 0, 0, 0, 0, 0, 757, 757,
	0, 0, 0, 0, 0, 1222, 0, 0, 757, 0,
	0, 0, 0, 0, 0, 0, 1225, 0, 0, 0,
	0, 1536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 0, 0,
	0, 0, 0, 873, 873, 0, 0, 0, 0, 2370,
	80, 1227, 1226, 86, 0, 0, 94, 0, 3810, 0,
	88, 0, 3504, 0, 97, 0, 92, 0, 886, 3818,
	3819, 0, 93, 3822, 0, 0, 0, 3825, 886, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3830, 0,
	0, 0, 0, 0, 0, 90, 0, 2075, 2075, 2075,
	0, 3836, 0, 886, 885, 0, 0, 0, 0, 0,
	885, 0, 0, 0, 0, 2701, 0, 0, 0, 0,
	0, 3849, 3850, 0, 0, 0, 1540, 0, 1216, 0,
	0, 3861, 0, 0, 0, 1530, 1531, 1532, 3866, 0,
	0, 0, 2725, 2725, 1524, 1525, 1526, 1527, 1528, 1529,
	0, 1536, 0, 0, 0, 0, 3877, 0, 1230, 0,
	0, 3879, 2701, 0, 0, 0, 0, 0, 0, 0,
	0, 757, 0, 0, 0, 0, 1551, 106, 0, 1521,
	0, 0, 0, 1533, 1534, 1535, 3898, 3899, 3900, 4330,
	101, 0, 0, 0, 669, 2166, 3906, 2074, 2167, 0,
	0, 0, 2172, 2773, 2164, 0, 0, 0, 0, 2169,
	2173, 2168, 2723, 2170, 0, 0, 2725, 2171, 1544, 1545,
	2165, 0, 0, 757, 3932, 3933, 3934, 2174, 0, 4286,
	886, 0, 2074, 0, 0, 992, 0, 0, 0, 0,
	0, 886, 886, 0, 0, 886, 0, 0, 0, 0,
	0, 0, 0, 0, 757, 0, 0, 0, 0, 0,
	0, 0, 757, 0, 0, 0, 825, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 886, 757,
	2725, 0, 2701, 3979, 2074, 757, 0, 0, 0, 0,
	0, 0, 0, 1551, 0, 0, 1521, 4421, 0, 756,
	1533, 1534, 1535, 2074, 0, 0, 0, 0, 4008, 0,
	0, 0, 2166, 698, 0, 2167, 0, 4013, 4014, 2172,
	0, 2164, 0, 0, 0, 0, 2169, 2173, 2168, 0,
	2170, 0, 0, 0, 2171, 1544, 1545, 2165, 0, 0,
	0, 0, 0, 0, 2174, 0, 0, 0, 0, 802,
	805, 807, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 756, 756, 0, 0, 886, 0,
	885, 0, 0, 0, 0, 0, 4479, 0, 0, 4481,
	0, 0, 0, 0, 0, 4484, 4485, 4486, 0, 0,
	4489, 4490, 4491, 0, 0, 0, 0, 0, 0, 756,
	4495, 4496, 0, 0, 0, 0, 756, 0, 0, 0,
	0, 0, 0, 0, 872, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2074, 2075,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4513, 4514, 0, 0, 4518, 0, 4519, 0, 0, 0,
	0, 0, 0, 886, 0, 0, 0, 885, 0, 0,
	0, 886, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 888, 0, 0, 756,
	0, 0, 0, 0, 0, 756, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 885, 4538, 0, 0, 0, 1536, 885, 0, 0,
	0, 2074, 0, 1536, 0, 0, 0, 756, 0, 0,
	0, 0, 0, 0, 1536, 0, 0, 0, 0, 0,
	1551, 887, 887, 1521, 0, 0, 0, 1533, 1534, 1535,
	0, 0, 0, 0, 0, 4580, 0, 0, 0, 2166,
	0, 0, 2167, 0, 0, 0, 2172, 0, 2164, 0,
	0, 757, 0, 2169, 2173, 2168, 0, 2170, 0, 0,
	0, 2171, 1544, 1545, 2165, 0, 0, 0, 0, 0,
	0, 2174, 0, 0, 0, 0, 0, 4244, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4253, 4254, 0, 0, 0, 0,
	4258, 4259, 0, 0, 0, 0, 757, 4262, 4263, 3577,
	757, 757, 0, 0, 4266, 873, 0, 0, 2701, 0,
	0, 4692, 0, 886, 0, 0, 4695, 0, 0, 0,
	0, 0, 4701, 0, 0, 4703, 4273, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1515, 0, 0,
	0, 1540, 0, 0, 0, 0, 0, 0, 0, 0,
	1530, 1531, 1532, 0, 0, 885, 885, 0, 885, 1524,
	1525, 1526, 1527, 1528, 1529, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4738, 4739, 2075, 0,
	2075, 0, 4745, 4306, 0, 4309, 4747, 0, 0, 886,
	2074, 2075, 0, 0, 0, 0, 2074, 886, 0, 0,
	0, 0, 0, 0, 0, 4760, 1551, 0, 0, 1521,
	0, 0, 4328, 1533, 1534, 1535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2166, 0, 0, 2167, 0,
	0, 0, 2172, 0, 2164, 0, 0, 0, 0, 2169,
	2173, 2168, 0, 2170, 0, 0, 885, 2171, 1544, 1545,
	2165, 0, 0, 0, 0, 885, 872, 2174, 1540, 0,
	0, 0, 2075, 872, 0, 0, 0, 1530, 1531, 1532,
	0, 0, 0, 0, 4277, 0, 1524, 1525, 1526, 1527,
	1528, 1529, 0, 0, 757, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 756, 0, 0, 0, 2075, 0,
	4408, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 888, 0,
	0, 886, 0, 0, 0, 888, 0, 1114, 0, 0,
	0, 1214, 2074, 0, 0, 0, 1215, 0, 0, 0,
	1224, 0, 0, 0, 0, 0, 1132, 872, 0, 756,
	756, 0, 0, 0, 1140, 1142, 0, 1144, 0, 4434,
	0, 0, 0, 0, 0, 886, 0, 0, 0, 756,
	756, 872, 0, 0, 0, 0, 0, 0, 3577, 756,
	0, 0, 0, 0, 0, 0, 0, 1035, 0, 0,
	4462, 0, 0, 0, 0, 4907, 0, 886, 886, 1183,
	0, 0, 1217, 0, 0, 0, 0, 0, 0, 888,
	0, 0, 0, 0, 0, 0, 0, 0, 885, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 885, 0,
	0, 1223, 0, 888, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4941, 0, 0, 4944, 0,
	0, 0, 0, 885, 0, 0, 0, 0, 0, 4505,
	0, 0, 1228, 0, 1260, 0, 0, 873, 2074, 2074,
	2074, 0, 0, 0, 873, 0, 0, 872, 0, 872,
	0, 0, 0, 0, 0, 0, 1536, 1536, 1536, 1536,
	1536, 0, 0, 0, 0, 1536, 0, 0, 0, 0,
	0, 0, 0, 0, 872, 1213, 0, 0, 0, 0,
	0, 4527, 0, 0, 1536, 1540, 0, 0, 0, 4529,
	4530, 4531, 0, 886, 1530, 1531, 1532, 0, 0, 0,
	2752, 4264, 1218, 1524, 1525, 1526, 1527, 1528, 1529, 888,
	0, 888, 756, 0, 0, 0, 0, 0, 0, 0,
	4539, 0, 0, 0, 4542, 4543, 4544, 0, 873, 0,
	0, 2075, 0, 886, 0, 0, 888, 1220, 0, 0,
	0, 0, 0, 1219, 0, 0, 0, 869, 869, 0,
	885, 2725, 2388, 0, 0, 0, 0, 0, 757, 0,
	0, 885, 885, 0, 756, 885, 0, 0, 0, 4584,
	0, 0, 0, 0, 0, 0, 0, 0, 1472, 5074,
	0, 0, 0, 887, 0, 4601, 0, 0, 1221, 1472,
	0, 0, 0, 0, 872, 756, 0, 0, 885, 0,
	0, 0, 0, 756, 0, 0, 0, 0, 5094, 5095,
	0, 0, 0, 0, 1536, 0, 0, 0, 0, 0,
	756, 0, 0, 0, 886, 0, 756, 0, 0, 0,
	0, 0, 0, 1222, 0, 0, 0, 757, 0, 0,
	757, 0, 0, 0, 1225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 888, 0, 873, 0,
	873, 0, 0, 0, 886, 886, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1258, 0, 1227,
	1226, 1540, 0, 0, 0, 873, 0, 0, 0, 0,
	1530, 1531, 1532, 0, 0, 0, 0, 4179, 0, 1524,
	1525, 1526, 1527, 1528, 1529, 0, 0, 0, 885, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 757,
	0, 0, 0, 0, 0, 0, 0, 0, 5192, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2157, 5202, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1216, 0, 0, 0,
	0, 0, 4772, 0, 0, 5218, 0, 0, 2205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2773, 0, 0, 0, 1230, 0, 0, 0,
	2074, 0, 0, 885, 0, 4800, 0, 0, 0, 0,
	0, 885, 0, 0, 0, 873, 0, 0, 0, 0,
	0, 886, 0, 0, 0, 0, 2271, 0, 0, 0,
	2275, 0, 0, 0, 0, 2287, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2075,
	4832, 0, 0, 0, 0, 1551, 2334, 0, 1521, 0,
	0, 0, 1533, 1534, 1535, 0, 0, 0, 0, 0,
	0, 0, 2348, 0, 2166, 0, 0, 2167, 0, 0,
	0, 2172, 5278, 2164, 0, 0, 0, 0, 2169, 2173,
	2168, 2365, 2170, 0, 2368, 0, 2171, 1544, 1545, 2165,
	0, 0, 0, 0, 0, 0, 2174, 0, 0, 0,
	0, 0, 886, 0, 886, 886, 0, 0, 0, 0,
	0, 0, 0, 0, 825, 0, 0, 0, 0, 0,
	0, 2873, 756, 0, 0, 4902, 0, 0, 0, 1291,
	0, 0, 0, 2429, 0, 0, 0, 0, 2287, 2287,
	2287, 0, 0, 0, 0, 887, 0, 0, 0, 0,
	0, 0, 887, 0, 0, 0, 0, 2453, 2454, 0,
	0, 0, 1551, 0, 0, 1521, 0, 757, 4935, 1533,
	1534, 1535, 886, 885, 0, 0, 0, 756, 825, 0,
	0, 756, 756, 0, 0, 0, 0, 0, 2172, 0,
	2164, 1297, 4952, 0, 0, 2169, 2173, 2168, 0, 2170,
	0, 0, 0, 2171, 1544, 1545, 2165, 0, 0, 0,
	0, 2006, 0, 2174, 0, 0, 0, 4971, 4971, 4971,
	0, 4974, 0, 0, 0, 1293, 0, 0, 0, 0,
	2725, 0, 0, 0, 0, 0, 887, 0, 0, 0,
	2537, 0, 0, 0, 0, 0, 0, 0, 0, 885,
	0, 0, 0, 0, 5398, 0, 0, 885, 0, 2074,
	887, 2074, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2074, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1472, 1472, 0, 0, 1536, 1536, 1536, 1536,
	1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536,
	1536, 1536, 757, 0, 0, 0, 0, 1536, 0, 0,
	0, 0, 0, 1282, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2752, 2752, 0, 0, 0, 0,
	0, 0, 0, 0, 1472, 1292, 0, 0, 0, 0,
	0, 0, 0, 2074, 2621, 0, 0, 0, 0, 869,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1536, 0, 0, 0, 0, 756, 887, 0, 887, 0,
	0, 0, 5093, 2075, 0, 1288, 0, 0, 0, 2074,
	0, 885, 1536, 0, 1536, 0, 0, 0, 0, 0,
	1536, 0, 0, 887, 4772, 757, 0, 0, 1285, 0,
	0, 1536, 4971, 0, 1536, 0, 0, 3373, 0, 2752,
	2752, 2752, 0, 0, 0, 1536, 1536, 0, 0, 2874,
	0, 1536, 1290, 0, 1536, 885, 0, 0, 0, 0,
	0, 0, 1536, 0, 0, 0, 1536, 0, 0, 0,
	0, 0, 1536, 0, 0, 0, 0, 0, 0, 1536,
	0, 886, 0, 0, 0, 0, 0, 885, 885, 0,
	0, 2873, 0, 0, 1296, 0, 1536, 0, 0, 1291,
	0, 5176, 0, 0, 0, 0, 2075, 0, 0, 0,
	0, 0, 0, 0, 5185, 0, 0, 872, 0, 0,
	0, 0, 0, 0, 0, 0, 872, 0, 0, 88,
	0, 0, 1283, 0, 2703, 0, 2075, 0, 0, 0,
	0, 0, 0, 887, 0, 0, 1289, 0, 0, 0,
	0, 0, 0, 2075, 2703, 0, 2703, 0, 0, 757,
	0, 1297, 1286, 0, 0, 0, 0, 0, 0, 1284,
	2703, 0, 0, 1294, 0, 0, 4772, 0, 0, 888,
	1540, 0, 0, 0, 0, 0, 2875, 0, 888, 1530,
	1531, 1532, 0, 872, 0, 1293, 4110, 0, 1524, 1525,
	1526, 1527, 1528, 1529, 0, 0, 0, 0, 872, 0,
	1287, 0, 2876, 885, 0, 1551, 0, 0, 1521, 0,
	0, 0, 1533, 1534, 1535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2166, 0, 0, 2167, 0, 0,
	0, 2172, 0, 2164, 0, 0, 0, 0, 2169, 2173,
	2168, 0, 2170, 885, 0, 888, 2171, 1544, 1545, 2165,
	0, 0, 0, 0, 0, 0, 2174, 0, 0, 0,
	888, 0, 2074, 0, 0, 0, 0, 886, 0, 0,
	0, 0, 0, 1282, 872, 872, 0, 0, 0, 0,
	0, 0, 0, 4971, 0, 0, 0, 1540, 0, 756,
	0, 0, 0, 0, 5295, 1292, 1530, 1531, 1532, 0,
	0, 0, 0, 0, 0, 1524, 1525, 1526, 1527, 1528,
	1529, 0, 0, 0, 0, 0, 0, 0, 2388, 0,
	0, 0, 0, 0, 0, 0, 0, 2388, 0, 0,
	0, 869, 0, 0, 885, 1288, 888, 888, 869, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 825, 825, 0, 1285, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 756, 0,
	0, 756, 0, 0, 885, 885, 0, 0, 757, 2874,
	0, 0, 1290, 1536, 1551, 0, 0, 1521, 0, 872,
	0, 1533, 1534, 1535, 873, 872, 3935, 0, 0, 0,
	0, 825, 0, 2166, 0, 0, 2167, 0, 0, 873,
	2172, 0, 2164, 2701, 0, 0, 0, 2169, 2173, 2168,
	0, 2170, 869, 0, 1296, 2171, 1544, 1545, 2165, 0,
	1551, 0, 0, 1521, 0, 2174, 0, 1533, 1534, 1535,
	0, 0, 0, 0, 0, 0, 869, 0, 0, 2166,
	756, 888, 2167, 0, 0, 1291, 2172, 888, 2164, 88,
	0, 0, 2869, 2169, 2173, 2168, 757, 2170, 0, 0,
	0, 2171, 1544, 1545, 2165, 0, 1289, 0, 0, 0,
	0, 2174, 0, 0, 0, 2388, 3092, 0, 0, 0,
	0, 0, 1286, 0, 3095, 0, 0, 0, 0, 1284,
	0, 0, 0, 1294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2875, 1297, 0, 0,
	0, 885, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1287, 0, 2876, 0, 0, 0, 1536, 1536, 0, 2752,
	2752, 1293, 869, 1536, 869, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2074, 0, 3373, 3373, 0, 0, 0, 0, 0, 869,
	0, 0, 1536, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 0, 0, 0, 0, 0, 873, 1536, 0, 0,
	0, 2075, 885, 0, 885, 885, 0, 0, 0, 0,
	0, 0, 0, 0, 1536, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1282,
	2752, 2752, 2752, 2752, 2752, 2752, 2752, 2752, 2752, 2752,
	2752, 2752, 2752, 0, 2752, 0, 3373, 3373, 3373, 0,
	0, 1292, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2902, 2075, 0, 0, 872, 0, 0, 0, 0,
	1536, 0, 885, 0, 0, 0, 0, 0, 0, 825,
	825, 0, 0, 0, 0, 0, 0, 0, 756, 869,
	2075, 1288, 1536, 0, 0, 0, 1536, 0, 0, 0,
	1540, 0, 0, 0, 0, 0, 0, 0, 1536, 1530,
	1531, 1532, 1536, 0, 1285, 0, 4089, 0, 1524, 1525,
	1526, 1527, 1528, 1529, 0, 0, 0, 888, 0, 0,
	0, 0, 0, 0, 2991, 2992, 0, 0, 1290, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3036, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1296, 0, 3058, 0, 0, 0, 0, 0, 0, 0,
	0, 2703, 2703, 2703, 0, 0, 872, 0, 0, 0,
	0, 0, 872, 0, 0, 0, 3077, 0, 0, 0,
	0, 0, 1279, 2752, 888, 88, 887, 0, 1283, 1551,
	0, 0, 1521, 756, 0, 887, 1533, 1534, 1535, 0,
	0, 0, 1289, 0, 0, 0, 0, 0, 2166, 0,
	0, 2167, 0, 0, 0, 2172, 0, 2164, 1286, 0,
	0, 0, 2169, 2173, 2168, 1284, 2170, 0, 888, 1294,
	2171, 1544, 1545, 2165, 888, 0, 0, 0, 0, 0,
	2174, 0, 0, 0, 0, 0, 873, 0, 0, 1540,
	0, 0, 1536, 0, 0, 0, 0, 0, 1530, 1531,
	1532, 0, 887, 0, 2074, 0, 1287, 1524, 1525, 1526,
	1527, 1528, 1529, 0, 0, 0, 0, 887, 0, 1536,
	0, 0, 0, 0, 3862, 0, 756, 0, 0, 0,
	0, 0, 0, 0, 0, 1540, 0, 0, 0, 0,
	0, 0, 0, 0, 1530, 1531, 1532, 0, 0, 0,
	0, 3875, 0, 1524, 1525, 1526, 1527, 1528, 1529, 0,
	0, 885, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3092, 0, 0, 0, 0, 0, 0,
	872, 872, 0, 872, 0, 0, 0, 0, 0, 0,
	0, 3214, 0, 887, 887, 0, 0, 0, 0, 1536,
	0, 0, 0, 0, 0, 0, 0, 2074, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3092, 0, 0,
	0, 0, 0, 873, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2074, 0, 0,
	0, 0, 888, 888, 0, 888, 0, 0, 0, 0,
	0, 0, 0, 0, 2074, 0, 0, 0, 0, 0,
	756, 0, 0, 0, 0, 3264, 0, 0, 0, 0,
	0, 872, 0, 0, 0, 0, 0, 0, 0, 0,
	872, 0, 0, 0, 0, 0, 0, 0, 0, 1536,
	0, 0, 0, 0, 0, 0, 0, 1536, 1536, 0,
	0, 1536, 3373, 3373, 1536, 0, 0, 0, 887, 1536,
	0, 0, 0, 0, 887, 1536, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1536, 1536,
	0, 0, 0, 888, 0, 0, 0, 0, 0, 0,
	1536, 0, 888, 0, 0, 1536, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1536, 885, 1536, 0,
	3373, 3373, 3373, 3373, 3373, 3373, 3373, 3373, 3373, 3373,
	3373, 3373, 3373, 0, 0, 0, 3373, 1536, 1536, 1536,
	0, 0, 0, 0, 0, 1536, 0, 0, 0, 0,
	0, 2388, 3092, 0, 3092, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1536, 1536, 1536, 0, 0, 0, 0, 0, 0,
	0, 0, 1551, 0, 0, 1521, 0, 0, 0, 1533,
	1534, 1535, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2166, 0, 872, 2167, 0, 0, 0, 2172, 0,
	2164, 0, 0, 872, 0, 2169, 2173, 2168, 1536, 2170,
	0, 0, 0, 2171, 1544, 1545, 2165, 0, 0, 0,
	0, 0, 0, 2174, 0, 0, 0, 0, 872, 0,
	0, 0, 873, 0, 0, 0, 0, 1536, 0, 756,
	0, 873, 1536, 1536, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3487, 888, 3490, 3491, 0, 0,
	0, 3495, 0, 0, 0, 888, 3373, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1540, 0, 0, 0, 0, 0,
	888, 0, 0, 1530, 1531, 1532, 0, 0, 3531, 0,
	0, 0, 1524, 1525, 1526, 1527, 1528, 1529, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 756, 0, 0,
	0, 0, 0, 0, 0, 3582, 3583, 0, 0, 0,
	0, 0, 869, 0, 887, 0, 0, 0, 0, 0,
	1551, 869, 0, 1521, 0, 872, 0, 1533, 1534, 1535,
	0, 0, 0, 0, 0, 2703, 872, 872, 0, 2166,
	872, 0, 2167, 2287, 0, 0, 2172, 0, 2164, 0,
	0, 0, 0, 2169, 2173, 2168, 0, 2170, 0, 0,
	0, 2171, 1544, 1545, 2165, 0, 0, 0, 0, 0,
	0, 2174, 0, 872, 873, 0, 0, 0, 0, 0,
	0, 0, 2703, 0, 873, 0, 0, 888, 869, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 888, 888,
	0, 887, 888, 869, 0, 0, 0, 0, 0, 873,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 888, 0, 0, 0, 0,
	0, 0, 2074, 1536, 0, 887, 0, 0, 0, 0,
	0, 887, 1536, 1536, 0, 0, 0, 1536, 1536, 0,
	0, 1536, 1536, 0, 0, 1536, 0, 0, 0, 0,
	0, 0, 1536, 0, 0, 0, 0, 0, 0, 869,
	869, 0, 0, 872, 0, 0, 2752, 0, 3733, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2703, 2074, 0, 1536, 0, 0, 1536, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1536, 0, 0,
	0, 2074, 0, 0, 0, 0, 2388, 0, 0, 0,
	0, 0, 0, 0, 0, 888, 0, 2388, 2388, 2752,
	0, 3092, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 872, 0,
	0, 0, 0, 0, 0, 0, 872, 0, 0, 0,
	0, 0, 0, 0, 873, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 869, 0, 0, 0, 0, 1472,
	869, 0, 0, 0, 0, 0, 0, 1536, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 887,
	887, 3811, 887, 3812, 0, 0, 0, 0, 3817, 0,
	888, 0, 0, 1536, 0, 0, 0, 0, 888, 0,
	0, 0, 0, 0, 0, 0, 0, 1540, 0, 0,
	0, 0, 0, 0, 0, 0, 1530, 1531, 1532, 0,
	0, 1536, 0, 3841, 0, 1524, 1525, 1526, 1527, 1528,
	1529, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3092, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1536, 0, 0, 0, 0, 0,
	887, 0, 0, 0, 0, 0, 0, 0, 0, 887,
	0, 0, 0, 0, 0, 0, 1536, 0, 1536, 1536,
	1536, 0, 0, 0, 0, 0, 0, 0, 1536, 3373,
	2752, 1536, 1536, 1536, 0, 0, 0, 0, 872, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3092,
	0, 0, 0, 1536, 0, 0, 1551, 873, 0, 1521,
	0, 0, 0, 1533, 1534, 1535, 0, 0, 3373, 2752,
	1536, 0, 0, 0, 0, 2166, 0, 0, 2167, 0,
	888, 0, 2172, 0, 2164, 0, 0, 0, 0, 2169,
	2173, 2168, 0, 2170, 872, 1540, 0, 2171, 1544, 1545,
	2165, 0, 872, 0, 1530, 1531, 1532, 2174, 0, 3390,
	0, 3418, 0, 1524, 1525, 1526, 1527, 1528, 1529, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2703, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	869, 4015, 887, 0, 0, 0, 888, 0, 0, 0,
	1551, 0, 887, 1521, 888, 0, 0, 1533, 1534, 1535,
	0, 0, 3400, 0, 0, 0, 0, 0, 0, 2166,
	4038, 0, 2167, 0, 0, 0, 2172, 887, 2164, 0,
	0, 0, 0, 2169, 2173, 2168, 0, 2170, 0, 0,
	0, 2171, 1544, 1545, 2165, 0, 0, 0, 0, 0,
	0, 2174, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 872, 0, 0, 873,
	0, 0, 0, 0, 0, 0, 2271, 869, 0, 0,
	0, 1536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3373, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1536,
	872, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 869, 0, 0, 0, 0, 0, 869, 888, 0,
	0, 0, 0, 0, 2752, 0, 0, 3373, 0, 0,
	4386, 1536, 872, 872, 0, 873, 0, 0, 0, 0,
	0, 0, 0, 2388, 887, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 887, 887, 0, 0, 887,
	0, 0, 888, 1551, 0, 0, 1521, 0, 0, 0,
	1533, 1534, 1535, 0, 0, 3385, 0, 0, 0, 0,
	0, 0, 2166, 0, 0, 2167, 0, 0, 0, 2172,
	0, 2164, 887, 0, 888, 888, 2169, 2173, 2168, 0,
	2170, 1536, 0, 0, 2171, 1544, 1545, 2165, 0, 0,
	0, 0, 0, 0, 2174, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1536, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1536, 0, 0, 0, 0, 0, 0, 872, 0,
	0, 0, 0, 0, 0, 0, 0, 873, 0, 0,
	1536, 0, 0, 1536, 0, 0, 0, 0, 4249, 4250,
	4251, 4252, 0, 0, 0, 869, 869, 0, 869, 0,
	0, 0, 0, 0, 0, 0, 0, 1551, 872, 0,
	1521, 0, 887, 0, 1533, 1534, 1535, 0, 0, 0,
	0, 873, 0, 0, 0, 0, 2166, 0, 0, 2167,
	888, 0, 0, 2172, 0, 2164, 0, 0, 0, 0,
	2169, 2173, 2168, 0, 2170, 0, 0, 0, 2171, 1544,
	1545, 2165, 0, 873, 873, 0, 0, 0, 2174, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	888, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 869, 0, 0, 0,
	0, 0, 0, 0, 0, 869, 0, 887, 0, 872,
	0, 1540, 1536, 0, 0, 887, 0, 0, 0, 0,
	1530, 1531, 1532, 0, 0, 0, 0, 0, 0, 1524,
	1525, 1526, 1527, 1528, 1529, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 872,
	872, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2752, 2752, 0, 0, 2752,
	0, 888, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	0, 0, 0, 0, 0, 1536, 0, 0, 0, 0,
	0, 0, 0, 4393, 1536, 0, 0, 0, 0, 0,
	0, 888, 888, 0, 0, 1540, 0, 0, 0, 0,
	0, 0, 0, 0, 1530, 1531, 1532, 0, 0, 3092,
	0, 0, 0, 1524, 1525, 1526, 1527, 1528, 1529, 0,
	0, 0, 0, 0, 0, 0, 0, 1551, 0, 0,
	1521, 0, 0, 0, 1533, 1534, 1535, 0, 0, 3350,
	0, 3373, 3373, 0, 3373, 0, 2166, 0, 869, 2167,
	0, 0, 0, 2172, 0, 2164, 0, 0, 869, 0,
	2169, 2173, 2168, 0, 2170, 0, 0, 887, 2171, 1544,
	1545, 2165, 0, 0, 0, 0, 872, 1551, 2174, 0,
	1521, 0, 0, 869, 1533, 1534, 1535, 0, 0, 0,
	0, 0, 0, 0, 1536, 0, 2166, 0, 0, 2167,
	3092, 0, 0, 2172, 0, 2164, 0, 0, 0, 0,
	2169, 2173, 2168, 0, 2170, 0, 0, 0, 2171, 1544,
	1545, 2165, 0, 0, 0, 0, 0, 0, 2174, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 888, 0,
	873, 873, 0, 887, 0, 0, 0, 0, 0, 0,
	0, 887, 0, 0, 0, 0, 0, 0, 3357, 0,
	0, 0, 0, 0, 0, 0, 0, 872, 1540, 872,
	872, 0, 0, 0, 0, 0, 0, 1530, 1531, 1532,
	0, 0, 0, 0, 0, 0, 1524, 1525, 1526, 1527,
	1528, 1529, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	869, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 869, 869, 0, 0, 869, 0, 1551, 0, 888,
	1521, 888, 888, 0, 1533, 1534, 1535, 872, 0, 0,
	0, 0, 0, 0, 0, 0, 2166, 0, 0, 2167,
	0, 0, 0, 2172, 0, 2164, 0, 0, 869, 0,
	2169, 2173, 2168, 0, 2170, 0, 0, 0, 2171, 1544,
	1545, 2165, 0, 0, 0, 887, 0, 0, 2174, 0,
	4386, 0, 0, 0, 0, 0, 0, 873, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 888,
	0, 0, 1540, 0, 0, 0, 0, 0, 0, 0,
	0, 1530, 1531, 1532, 0, 0, 0, 0, 0, 887,
	1524, 1525, 1526, 1527, 1528, 1529, 0, 0, 1551, 1472,
	0, 1521, 0, 0, 0, 1533, 1534, 1535, 0, 0,
	0, 4649, 0, 0, 0, 0, 0, 2166, 0, 0,
	2167, 887, 887, 0, 2172, 0, 2164, 0, 0, 0,
	0, 2169, 2173, 2168, 0, 2170, 0, 0, 869, 2171,
	1544, 1545, 2165, 0, 0, 0, 0, 0, 873, 2174,
	873, 873, 0, 1214, 1244, 4698, 1551, 0, 1215, 1521,
	0, 0, 1224, 1533, 1534, 1535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2166, 0, 0, 2167, 0,
	0, 0, 2172, 0, 2164, 0, 0, 0, 0, 2169,
	2173, 2168, 0, 2170, 0, 0, 0, 2171, 1544, 1545,
	2165, 0, 0, 0, 0, 0, 0, 2174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 873, 0,
	0, 1246, 0, 869, 1217, 0, 0, 0, 0, 0,
	0, 869, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 887, 0, 0,
	0, 0, 0, 1223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1228, 0, 872, 887, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1540, 0, 0, 0, 0, 0, 0, 0,
	0, 1530, 1531, 1532, 0, 0, 0, 0, 0, 0,
	1524, 1525, 1526, 1527, 1528, 1529, 0, 1213, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1245, 0, 0, 0, 888, 0,
	0, 3344, 1540, 0, 1218, 0, 0, 0, 0, 0,
	0, 1530, 1531, 1532, 0, 0, 0, 0, 0, 0,
	1524, 1525, 1526, 1527, 1528, 1529, 0, 0, 887, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1220,
	0, 0, 0, 0, 0, 1219, 0, 0, 0, 0,
	0, 0, 0, 869, 0, 0, 0, 4883, 0, 0,
	0, 0, 0, 0, 0, 1214, 1244, 0, 887, 887,
	1215, 0, 0, 0, 1224, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1247, 0, 0, 0,
	1221, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4929, 0,
	0, 0, 0, 0, 0, 0, 1248, 0, 0, 1249,
	0, 0, 0, 1250, 0, 0, 0, 0, 0, 869,
	0, 0, 872, 1246, 0, 1243, 1217, 869, 0, 0,
	0, 0, 0, 0, 0, 1251, 1225, 873, 0, 0,
	0, 0, 1540, 0, 0, 0, 0, 0, 0, 0,
	0, 1530, 1531, 1532, 0, 1223, 2799, 0, 0, 0,
	1524, 1525, 1526, 1527, 1528, 1529, 0, 0, 0, 3069,
	0, 1227, 1226, 1254, 0, 0, 0, 0, 167, 0,
	0, 0, 0, 153, 888, 0, 1228, 165, 0, 0,
	1252, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 157, 0, 0, 0, 887, 0, 1253, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 179,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1213,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1540, 1255, 0, 1245, 0, 1216, 0,
	0, 869, 1530, 1531, 1532, 0, 1218, 0, 0, 2684,
	0, 1524, 1525, 1526, 1527, 1528, 1529, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1220, 0, 0, 0, 869, 887, 1219, 887, 887,
	0, 1540, 0, 0, 0, 0, 0, 0, 0, 0,
	1530, 1531, 1532, 0, 0, 159, 0, 0, 0, 1524,
	1525, 1526, 1527, 1528, 1529, 0, 0, 869, 869, 0,
	0, 0, 0, 873, 0, 0, 0, 0, 1247, 0,
	0, 160, 1221, 0, 0, 0, 0, 195, 0, 0,
	0, 194, 161, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 198, 887, 0, 1248, 0,
	0, 1249, 0, 0, 0, 1250, 0, 163, 0, 0,
	0, 0, 0, 192, 177, 0, 0, 1243, 0, 0,
	0, 0, 184, 2703, 0, 0, 0, 1251, 1225, 0,
	158, 0, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 0, 0,
	0, 1240, 0, 1227, 1226, 1254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1252, 869, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1253,
	0, 0, 0, 0, 204, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 168, 0, 869, 0, 0, 0, 0, 0, 0,
	185, 169, 0, 170, 0, 200, 1255, 0, 0, 0,
	1216, 0, 0, 0, 0, 0, 201, 0, 0, 0,
	0, 0, 178, 0, 0, 171, 0, 0, 175, 0,
	172, 0, 0, 0, 0, 155, 0, 0, 173, 0,
	1230, 190, 0, 0, 0, 0, 0, 0, 205, 0,
	0, 0, 0, 0, 181, 0, 206, 0, 0, 174,
	0, 0, 0, 0, 199, 180, 0, 0, 0, 0,
	182, 0, 0, 0, 0, 0, 176, 0, 0, 0,
	183, 0, 0, 0, 869, 0, 0, 191, 0, 0,
	0, 0, 0, 0, 0, 0, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 869, 869, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 887, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 0, 0, 208, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 0,
	0, 0, 212, 0, 209, 0, 0, 0, 0, 196,
	0, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 0, 0, 0,
	213, 0, 0, 0, 189, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	197, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 869, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 887, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 869, 0, 869, 869, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 869, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 869, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2072, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2077, 242, 2083, 259, 761, 2093, 308, 345, 560,
	2080, 2125, 405, 2130, 458, 462, 2154, 551, 2087, 2090,
	2100, 2103, 316, 2108, 766, 2116, 772, 2126, 778, 2145,
	527, 2151, 768, 769, 774, 247, 635, 550, 621, 2139,
	2085, 2143, 412, 2136, 2112, 2152, 2129, 2141, 2122, 2127,
	255, 2114, 2115, 2119, 2128, 770, 767, 771, 777, 765,
	775, 762, 773, 2149, 449, 383, 600, 476, 254, 300,
	287, 329, 371, 483, 2084, 2102, 361, 531, 296, 385,
	2135, 275, 418, 2148, 507, 382, 2142, 490, 510, 2104,
	402, 281, 441, 497, 498, 759, 764, 2092, 780, 2079,
	285, 286, 407, 267, 415, 612, 578, 470, 428, 426,
	2110, 393, 450, 607, 2082, 0, 315, 0, 310, 406,
	546, 273, 525, 444, 411, 365, 473, 502, 312, 297,
	298, 341, 443, 331, 283, 536, 575, 579, 577, 573,
	570, 574, 571, 572, 576, 332, 569, 869, 544, 553,
	587, 567, 595, 552, 592, 562, 307, 591, 556, 555,
	601, 582, 583, 537, 597, 568, 566, 559, 558, 554,
	2150, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 243, 2078, 244, 245, 246, 248, 249, 250, 758,
	251, 252, 253, 256, 257, 258, 260, 620, 261, 262,
	263, 264, 265, 266, 557, 760, 268, 269, 270, 271,
	272, 274, 276, 277, 278, 279, 280, 282, 284, 2094,
	2095, 2096, 763, 2097, 2098, 2099, 288, 289, 290, 291,
	292, 293, 2101, 294, 295, 299, 301, 302, 303, 304,
	305, 306, 309, 2105, 311, 313, 2106, 314, 317, 2107,
	318, 319, 320, 321, 322, 323, 324, 325, 561, 326,
	2109, 327, 328, 330, 2111, 333, 334, 335, 336, 337,
	2113, 338, 563, 564, 339, 340, 342, 343, 344, 346,
	347, 348, 349, 350, 351, 352, 353, 354, 355, 356,
	357, 2117, 358, 359, 360, 362, 2118, 363, 364, 367,
	368, 369, 370, 2120, 372, 580, 2121, 373, 374, 375,
	2123, 2124, 376, 377, 378, 379, 380, 381, 384, 581,
	386, 387, 388, 389, 390, 391, 392, 622, 394, 395,
	396, 397, 398, 399, 400, 584, 585, 401, 403, 404,
	586, 588, 589, 776, 419, 420, 421, 422, 423, 424,
	425, 427, 2132, 429, 430, 431, 590, 432, 433, 434,
	435, 2133, 436, 437, 438, 439, 440, 442, 445, 446,
	447, 448, 2134, 451, 452, 453, 454, 455, 456, 457,
	459, 460, 461, 463, 464, 465, 623, 466, 467, 468,
	469, 593, 471, 472, 624, 474, 475, 477, 478, 479,
	480, 481, 482, 633, 2137, 484, 594, 485, 486, 487,
	488, 489, 2138, 491, 492, 493, 494, 495, 496, 499,
	500, 501, 503, 504, 596, 505, 506, 2140, 508, 509,
	779, 511, 512, 513, 514, 515, 2144, 634, 516, 598,
	517, 599, 518, 519, 520, 521, 522, 523, 524, 526,
	2146, 2147, 528, 529, 530, 532, 533, 534, 535, 538,
	539, 540, 541, 542, 2153, 543, 545, 547, 625, 602,
	603, 604, 605, 606, 608, 609, 610, 611, 548, 549,
	565, 416, 410, 366, 408, 409, 413, 414, 417, 2131,
	2081, 2086, 2088, 2089, 2091, 0, 0, 0, 0, 0,
	0, 0, 0, 1554, 0, 0, 0, 0, 0, 0,
	1551, 0, 0, 1521, 0, 0, 2070, 1533, 1534, 1535,
	1565, 1567, 1549, 1594, 1615, 0, 1666, 1712, 1682, 1537,
	1799, 1805, 1538, 1866, 1870, 0, 1546, 1596, 1522, 1646,
	1661, 1676, 1688, 1541, 1547, 1539, 1803, 1542, 1947, 1958,
	1978, 1543, 1544, 1545, 1523, 1939, 1996, 1765, 1924, 1576,
	0, 1552, 1890, 0, 0, 1813, 1928, 0, 0, 1590,
	0, 0, 0, 0, 1738, 1727, 1761, 1874, 1699, 1819,
	1627, 1786, 1964, 1856, 1775, 1970, 1888, 1589, 1655, 1639,
	1691, 1756, 1897, 1572, 1656, 1731, 1962, 1651, 1777, 0,
	1618, 1821, 1963, 1926, 1774, 1937, 1907, 1932, 1662, 1800,
	1625, 1847, 1914, 1915, 1585, 1698, 1620, 1973, 1570, 1630,
	1638, 1808, 1609, 1816, 1994, 1748, 1881, 1831, 1829, 0,
	1788, 1857, 1989, 0, 0, 1675, 0, 1669, 1807, 1981,
	1616, 1955, 1850, 1812, 1750, 1884, 1919, 1671, 1652, 1653,
	1709, 1849, 1694, 1628, 1969, 1745, 1749, 1747, 1743, 1740,
	1744, 1741, 1742, 1746, 1696, 1739, 0, 0, 1586, 1806,
	1734, 1904, 1584, 1853, 1692, 1665, 0, 0, 0, 1971,
	1785, 1787, 0, 1940, 1735, 1733, 1644, 1643, 1587, 1972,
	1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1566,
	1568, 1569, 1573, 1574, 1575, 1577, 1578, 1579, 1580, 1581,
	1582, 1583, 1591, 1592, 1593, 1595, 1598, 1599, 1600, 1602,
	1603, 1604, 1605, 1606, 1607, 1610, 1611, 1612, 1613, 1614,
	1617, 1619, 1621, 1622, 1623, 1624, 1626, 1629, 1631, 1632,
	1633, 1634, 1635, 1636, 1637, 1640, 1641, 0, 1642, 1645,
	1647, 1648, 1649, 1650, 1654, 1657, 1658, 1659, 1660, 1663,
	1664, 1667, 1668, 1670, 1672, 1673, 1674, 1677, 0, 1678,
	1679, 1680, 1681, 1683, 1684, 1685, 1686, 1687, 1689, 0,
	0, 1690, 1693, 1695, 1697, 1700, 1701, 1702, 1703, 0,
	1704, 1705, 1706, 1707, 1708, 1710, 0, 1711, 1713, 1714,
	1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724,
	1725, 1726, 1729, 1730, 1732, 0, 1736, 1737, 1752, 1753,
	1754, 1755, 1757, 1759, 1760, 1758, 1762, 1763, 1764, 1766,
	1767, 1768, 1769, 1770, 1771, 1772, 1773, 1776, 1778, 1779,
	0, 1780, 1781, 0, 1782, 1783, 1784, 1789, 1790, 1791,
	1792, 1793, 1794, 1795, 1796, 1797, 1798, 1801, 1802, 1804,
	1818, 1820, 0, 1822, 1823, 1824, 1825, 1826, 1827, 1828,
	1830, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840,
	1841, 1842, 1843, 1844, 1845, 1846, 1848, 1851, 1852, 1854,
	1855, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1867,
	1868, 1869, 1871, 1872, 1873, 1875, 1876, 1877, 1878, 1879,
	1880, 1882, 1883, 1885, 1886, 1887, 0, 1889, 1891, 1892,
	1893, 1894, 1895, 1896, 1899, 1898, 1900, 1901, 1902, 1903,
	1905, 1906, 1908, 1909, 1910, 1911, 1912, 1913, 1916, 1917,
	1918, 1920, 1921, 1922, 1923, 1925, 1927, 1929, 1931, 1930,
	1933, 1934, 1935, 1936, 1938, 1941, 1942, 1943, 1944, 1945,
	1946, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1956, 0,
	1957, 1959, 1960, 1961, 1965, 1966, 1967, 1968, 1974, 1975,
	1976, 1977, 1979, 0, 0, 1980, 1982, 1983, 1984, 1985,
	1986, 1987, 1988, 1990, 1991, 1992, 1993, 0, 1995, 1728,
	1817, 1811, 1751, 1809, 1810, 1814, 1815, 0, 0, 1571,
	1588, 1597, 1601, 1608, 0, 1540, 0, 0, 0, 0,
	0, 0, 0, 0, 1530, 1531, 1532, 0, 0, 0,
	0, 0, 0, 1524, 1525, 1526, 1527, 1528, 1529, 2072,
	0, 5351, 932, 0, 0, 0, 0, 1034, 0, 0,
	0, 0, 0, 0, 0, 0, 2077, 242, 2083, 259,
	761, 2093, 308, 345, 560, 2080, 2125, 405, 2130, 458,
	462, 2154, 551, 2087, 2090, 2100, 2103, 316, 2108, 766,
	2116, 772, 2126, 778, 2145, 527, 2151, 768, 769, 774,
	247, 635, 550, 621, 2139, 2085, 2143, 412, 2136, 2112,
	2152, 2129, 2141, 2122, 2127, 255, 2114, 2115, 2119, 2128,
	770, 767, 771, 777, 765, 775, 762, 773, 2149, 449,
	383, 600, 476, 254, 300, 287, 329, 371, 483, 2084,
	2102, 361, 531, 296, 385, 2135, 275, 418, 2148, 507,
	382, 2142, 490, 510, 2104, 402, 281, 441, 497, 498,
	759, 764, 2092, 780, 2079, 285, 286, 407, 267, 415,
	612, 578, 470, 428, 426, 2110, 393, 450, 607, 2082,
	0, 315, 0, 310, 406, 546, 273, 525, 444, 411,
	365, 473, 502, 312, 297, 298, 341, 443, 331, 283,
	536, 575, 579, 577, 573, 570, 574, 571, 572, 576,
	332, 569, 0, 544, 553, 587, 567, 595, 552, 592,
	562, 307, 591, 556, 555, 601, 582, 583, 537, 597,
	568, 566, 559, 558, 554, 2150, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 243, 2078, 244, 245,
	246, 248, 249, 250, 758, 251, 252, 253, 256, 257,
	258, 260, 620, 261, 262, 263, 264, 265, 266, 557,
	760, 268, 269, 270, 271, 272, 274, 276, 277, 278,
	279, 280, 282, 284, 2094, 2095, 2096, 763, 2097, 2098,
	2099, 288, 289, 290, 291, 292, 293, 2101, 294, 295,
	299, 301, 302, 303, 304, 305, 306, 309, 2105, 311,
	313, 2106, 314, 317, 2107, 318, 319, 320, 321, 322,
	323, 324, 325, 561, 326, 2109, 327, 328, 330, 2111,
	333, 334, 335, 336, 337, 2113, 338, 563, 564, 339,
	340, 342, 343, 344, 346, 347, 348, 349, 350, 351,
	352, 353, 354, 355, 356, 357, 2117, 358, 359, 360,
	362, 2118, 363, 364, 367, 368, 369, 370, 2120, 372,
	580, 2121, 373, 374, 375, 2123, 2124, 376, 377, 378,
	379, 380, 381, 384, 581, 386, 387, 388, 389, 390,
	391, 392, 622, 394, 395, 396, 397, 398, 399, 400,
	584, 585, 401, 403, 404, 586, 588, 589, 776, 419,
	420, 421, 422, 423, 424, 425, 427, 2132, 429, 430,
	431, 590, 432, 433, 434, 435, 2133, 436, 437, 438,
	439, 440, 442, 445, 446, 447, 448, 2134, 451, 452,
	453, 454, 455, 456, 457, 459, 460, 461, 463, 464,
	465, 623, 466, 467, 468, 469, 593, 471, 472, 624,
	474, 475, 477, 478, 479, 480, 481, 482, 633, 2137,
	484, 594, 485, 486, 487, 488, 489, 2138, 491, 492,
	493, 494, 495, 496, 499, 500, 501, 503, 504, 596,
	505, 506, 2140, 508, 509, 779, 511, 512, 513, 514,
	515, 2144, 634, 516, 598, 517, 599, 518, 519, 520,
	521, 522, 523, 524, 526, 2146, 2147, 528, 529, 530,
	532, 533, 534, 535, 538, 539, 540, 541, 542, 2153,
	543, 545, 547, 625, 602, 603, 604, 605, 606, 608,
	609, 610, 611, 548, 549, 565, 416, 410, 366, 408,
	409, 413, 414, 417, 2131, 2081, 2086, 2088, 2089, 2091,
	2072, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2077, 242, 2083,
	259, 761, 2093, 308, 345, 560, 2080, 2125, 405, 2130,
	458, 462, 2154, 551, 2087, 2090, 2100, 2103, 316, 2108,
	766, 2116, 772, 2126, 778, 2145, 527, 2151, 768, 769,
	774, 247, 635, 550, 621, 2139, 2085, 2143, 412, 2136,
	2112, 2152, 2129, 2141, 2122, 2127, 255, 2114, 2115, 2119,
	2128, 770, 767, 771, 777, 765, 775, 762, 773, 2149,
	449, 383, 600, 476, 254, 300, 287, 329, 371, 483,
	2084, 2102, 361, 531, 296, 385, 2135, 275, 418, 2148,
	507, 382, 2142, 490, 510, 2104, 402, 281, 441, 497,
	498, 759, 764, 2092, 780, 2079, 285, 286, 407, 267,
	415, 612, 578, 470, 428, 426, 2110, 393, 450, 607,
	2082, 0, 315, 0, 310, 406, 546, 273, 525, 444,
	411, 365, 473, 502, 312, 297, 298, 341, 443, 331,
	283, 536, 575, 579, 577, 573, 570, 574, 571, 572,
	576, 332, 569, 0, 544, 553, 587, 567, 595, 552,
	592, 562, 307, 591, 556, 555, 601, 582, 583, 537,
	597, 568, 566, 559, 558, 554, 2150, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 243, 2078, 244,
	245, 246, 248, 249, 250, 758, 251, 252, 253, 256,
	257, 258, 260, 620, 261, 262, 263, 264, 265, 266,
	557, 760, 268, 269, 270, 271, 272, 274, 276, 277,
	278, 279, 280, 282, 284, 2094, 2095, 2096, 763, 2097,
	2098, 2099, 288, 289, 290, 291, 292, 293, 2101, 294,
	295, 299, 301, 302, 303, 304, 305, 306, 309, 2105,
	311, 313, 2106, 314, 317, 2107, 318, 319, 320, 321,
	322, 323, 324, 325, 561, 326, 2109, 327, 328, 330,
	2111, 333, 334, 335, 336, 337, 2113, 338, 563, 564,
	339, 340, 342, 343, 344, 346, 347, 348, 349, 350,
	351, 352, 353, 354, 355, 356, 357, 2117, 358, 359,
	360, 362, 2118, 363, 364, 367, 368, 369, 370, 2120,
	372, 580, 2121, 373, 374, 375, 2123, 2124, 376, 377,
	378, 379, 380, 381, 384, 581, 386, 387, 388, 389,
	390, 391, 392, 622, 394, 395, 396, 397, 398, 399,
	400, 584, 585, 401, 403, 404, 586, 588, 589, 776,
	419, 420, 421, 422, 423, 424, 425, 427, 2132, 429,
	430, 431, 590, 432, 433, 434, 435, 2133, 436, 437,
	438, 439, 440, 442, 445, 446, 447, 448, 2134, 451,
	452, 453, 454, 455, 456, 457, 459, 460, 461, 463,
	464, 465, 623, 466, 467, 468, 469, 593, 471, 472,
	624, 474, 475, 477, 478, 479, 480, 481, 482, 633,
	2137, 484, 594, 485, 486, 487, 488, 489, 2138, 491,
	492, 493, 494, 495, 496, 499, 500, 501, 503, 504,
	596, 505, 506, 2140, 508, 509, 779, 511, 512, 513,
	514, 515, 2144, 634, 516, 598, 517, 599, 518, 519,
	520, 521, 522, 523, 524, 526, 2146, 2147, 528, 529,
	530, 532, 533, 534, 535, 538, 539, 540, 541, 542,
	2153, 543, 545, 547, 625, 602, 603, 604, 605, 606,
	608, 609, 610, 611, 548, 549, 565, 416, 410, 366,
	408, 409, 413, 414, 417, 2131, 2081, 2086, 2088, 2089,
	2091, 2072, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2077, 242,
	2083, 259, 761, 2093, 3050, 345, 560, 2080, 2125, 405,
	2130, 458, 462, 2154, 551, 2087, 2090, 2100, 2103, 316,
	2108, 766, 2116, 772, 2126, 778, 2145, 527, 2151, 768,
	769, 774, 247, 635, 550, 621, 2139, 2085, 2143, 412,
	2136, 2112, 2152, 2129, 2141, 2122, 2127, 255, 2114, 2115,
	2119, 2128, 770, 767, 771, 777, 765, 775, 762, 773,
	2149, 449, 383, 600, 476, 254, 300, 287, 329, 371,
	3048, 2084, 2102, 361, 531, 296, 385, 2135, 275, 418,
	2148, 507, 382, 2142, 490, 510, 2104, 402, 281, 441,
	497, 498, 759, 764, 2092, 780, 2079, 285, 286, 407,
	267, 415, 612, 578, 470, 428, 426, 2110, 393, 450,
	607, 2082, 0, 315, 0, 310, 406, 546, 273, 525,
	444, 411, 365, 473, 502, 312, 297, 298, 341, 443,
	331, 283, 536, 575, 579, 577, 573, 570, 574, 571,
	572, 576, 332, 569, 0, 544, 553, 587, 567, 595,
	552, 592, 562, 307, 591, 556, 555, 601, 582, 583,
	537, 597, 568, 566, 559, 558, 554, 2150, 232, 233,
	234, 235, 236, 3049, 238, 239, 240, 241, 243, 2078,
	244, 245, 246, 248, 249, 250, 758, 251, 252, 253,
	256, 257, 258, 260, 620, 261, 262, 263, 264, 265,
	266, 557, 760, 268, 269, 270, 271, 272, 274, 276,
	277, 278, 279, 280, 282, 284, 2094, 2095, 2096, 763,
	2097, 2098, 2099, 288, 289, 290, 291, 292, 293, 2101,
	294, 295, 299, 301, 302, 303, 304, 305, 306, 309,
	2105, 311, 313, 2106, 314, 317, 2107, 318, 319, 320,
	321, 322, 323, 324, 325, 561, 326, 2109, 327, 328,
	330, 2111, 333, 334, 335, 336, 337, 2113, 338, 563,
	564, 339, 340, 342, 343, 344, 346, 347, 348, 349,
	350, 351, 352, 353, 354, 355, 356, 357, 2117, 358,
	359, 360, 362, 2118, 363, 364, 367, 368, 369, 370,
	2120, 372, 580, 2121, 373, 374, 375, 2123, 2124, 376,
	377, 378, 379, 380, 381, 384, 581, 386, 387, 388,
	389, 390, 391, 392, 622, 394, 395, 396, 397, 398,
	399, 400, 584, 585, 401, 403, 404, 586, 588, 589,
	776, 419, 420, 421, 422, 423, 424, 425, 427, 2132,
	429, 430, 431, 590, 432, 433, 434, 435, 2133, 436,
	437, 438, 439, 440, 442, 445, 446, 447, 448, 2134,
	451, 452, 453, 454, 455, 456, 457, 459, 460, 461,
	463, 464, 465, 623, 466, 467, 468, 469, 593, 471,
	472, 624, 474, 475, 477, 478, 479, 480, 481, 482,
	633, 2137, 484, 594, 485, 486, 487, 488, 489, 2138,
	491, 492, 493, 494, 495, 496, 499, 500, 501, 503,
	504, 596, 505, 506, 2140, 508, 509, 779, 511, 512,
	513, 514, 515, 2144, 634, 516, 598, 517, 599, 518,
	519, 520, 521, 522, 523, 524, 526, 2146, 2147, 528,
	529, 530, 532, 533, 534, 535, 538, 539, 540, 541,
	542, 2153, 543, 545, 547, 625, 602, 603, 604, 605,
	606, 608, 609, 610, 611, 548, 549, 565, 416, 410,
	366, 408, 409, 413, 414, 417, 2131, 2081, 2086, 2088,
	2089, 2091, 891, 0, 1431, 932, 0, 0, 0, 723,
	1034, 0, 0, 0, 0, 0, 734, 735, 736, 2077,
	242, 2083, 259, 761, 2093, 308, 345, 0, 2080, 2125,
	405, 2130, 458, 462, 2154, 0, 2087, 2090, 2100, 2103,
	316, 2108, 766, 2116, 772, 2126, 778, 2145, 527, 2151,
	768, 769, 774, 247, 890, 550, 621, 2139, 2085, 2143,
	3557, 2136, 2112, 2152, 2129, 2141, 2122, 2127, 255, 2114,
	2115, 2119, 2128, 770, 767, 771, 777, 765, 775, 762,
	773, 2149, 449, 383, 0, 476, 254, 300, 287, 329,
	371, 483, 2084, 2102, 361, 531, 296, 385, 2135, 275,
	418, 2148, 507, 382, 2142, 490, 510, 2104, 402, 281,
	441, 497, 498, 759, 764, 2092, 780, 2079, 285, 286,
	407, 267, 415, 0, 0, 470, 428, 426, 2110, 393,
	450, 0, 2082, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 332, 0, 0, 544, 893, 883, 875,
	876, 877, 878, 879, 880, 0, 895, 896, 897, 898,
	899, 537, 889, 0, 874, 881, 882, 884, 2150, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	2078, 244, 245, 246, 248, 249, 250, 758, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 0, 760, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 2094, 2095, 2096,
	763, 2097, 2098, 2099, 288, 289, 290, 291, 292, 293,
	2101, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 2105, 311, 313, 2106, 314, 317, 2107, 318, 319,
	320, 321, 322, 323, 324, 325, 0, 326, 2109, 327,
	328, 330, 2111, 333, 334, 335, 336, 337, 2113, 338,
	0, 0, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 2117,
	358, 359, 360, 362, 2118, 363, 364, 367, 368, 369,
	370, 2120, 372, 0, 2121, 373, 374, 375, 2123, 2124,
	376, 377, 378, 379, 380, 381, 384, 0, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 3556, 0, 401, 403, 404, 0, 0,
	0, 776, 419, 420, 421, 422, 423, 424, 425, 427,
	2132, 429, 430, 431, 0, 432, 433, 434, 435, 2133,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	2134, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 0,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 2137, 484, 2390, 485, 486, 487, 488, 489,
	2138, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 0, 505, 506, 2140, 508, 509, 779, 511,
	512, 513, 514, 515, 2144, 634, 516, 0, 517, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 2146, 2147,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 2153, 543, 545, 547, 625, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 549, 0, 416,
	410, 366, 408, 409, 413, 414, 417, 2131, 2081, 2086,
	2088, 2089, 2091, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 731, 732, 733, 0, 0, 0, 0,
	0, 0, 3558, 3559, 727, 728, 729, 730, 891, 0,
	1431, 932, 0, 0, 0, 723, 1034, 0, 0, 0,
	0, 0, 734, 735, 736, 2077, 242, 2083, 259, 761,
	2093, 308, 345, 0, 2080, 2125, 405, 2130, 458, 462,
	2154, 0, 2087, 2090, 2100, 2103, 316, 2108, 766, 2116,
	772, 2126, 778, 2145, 527, 2151, 768, 769, 774, 247,
	890, 550, 621, 2139, 2085, 2143, 3557, 2136, 2112, 2152,
	2129, 2141, 2122, 2127, 255, 2114, 2115, 2119, 2128, 770,
	767, 771, 777, 765, 775, 762, 773, 2149, 449, 383,
	0, 476, 254, 300, 287, 329, 371, 483, 2084, 2102,
	361, 531, 296, 385, 2135, 275, 418, 2148, 507, 382,
	2142, 490, 510, 2104, 402, 281, 441, 497, 498, 759,
	764, 2092, 780, 2079, 285, 286, 407, 267, 415, 0,
	0, 470, 428, 426, 2110, 393, 450, 0, 2082, 0,
	315, 0, 310, 406, 546, 273, 525, 444, 411, 365,
	473, 502, 312, 297, 298, 341, 443, 331, 283, 536,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 332,
	0, 0, 544, 893, 883, 875, 876, 877, 878, 879,
	880, 0, 895, 896, 897, 898, 899, 537, 889, 0,
	874, 881, 882, 884, 2150, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 243, 2078, 244, 245, 246,
	248, 249, 250, 758, 251, 252, 253, 256, 257, 258,
	260, 620, 261, 262, 263, 264, 265, 266, 0, 760,
	268, 269, 270, 271, 272, 274, 276, 277, 278, 279,
	280, 282, 284, 2094, 2095, 2096, 763, 2097, 2098, 2099,
	288, 289, 290, 291, 292, 293, 2101, 294, 295, 299,
	301, 302, 303, 304, 305, 306, 309, 2105, 311, 313,
	2106, 314, 317, 2107, 318, 319, 320, 321, 322, 323,
	324, 325, 0, 326, 2109, 327, 328, 330, 2111, 333,
	334, 335, 336, 337, 2113, 338, 0, 0, 339, 340,
	342, 343, 344, 346, 347, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 2117, 358, 359, 360, 362,
	2118, 363, 364, 367, 368, 369, 370, 2120, 372, 0,
	2121, 373, 374, 375, 2123, 2124, 376, 377, 378, 379,
	380, 381, 384, 0, 386, 387, 388, 389, 390, 391,
	392, 622, 394, 395, 396, 397, 398, 399, 400, 4212,
	0, 401, 403, 404, 0, 0, 0, 776, 419, 420,
	421, 422, 423, 424, 425, 427, 2132, 429, 430, 431,
	0, 432, 433, 434, 435, 2133, 436, 437, 438, 439,
	440, 442, 445, 446, 447, 448, 2134, 451, 452, 453,
	454, 455, 456, 457, 459, 460, 461, 463, 464, 465,
	623, 466, 467, 468, 469, 0, 471, 472, 624, 474,
	475, 477, 478, 479, 480, 481, 482, 633, 2137, 484,
	2390, 485, 486, 487, 488, 489, 2138, 491, 492, 493,
	494, 495, 496, 499, 500, 501, 503, 504, 0, 505,
	506, 2140, 508, 509, 779, 511, 512, 513, 514, 515,
	2144, 634, 516, 0, 517, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 2146, 2147, 528, 529, 530, 532,
	533, 534, 535, 538, 539, 540, 541, 542, 2153, 543,
	545, 547, 625, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 548, 549, 0, 416, 410, 366, 408, 409,
	413, 414, 417, 2131, 2081, 2086, 2088, 2089, 2091, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 731,
	732, 733, 0, 0, 0, 0, 0, 0, 3558, 3559,
	727, 728, 729, 730, 816, 0, 1020, 932, 0, 1025,
	1026, 1015, 1034, 1005, 0, 0, 0, 0, 0, 0,
	0, 2698, 242, 0, 259, 761, 0, 308, 345, 1010,
	0, 998, 405, 0, 458, 462, 0, 551, 1030, 0,
	1002, 2699, 316, 1023, 766, 0, 772, 1024, 778, 1022,
	527, 0, 768, 769, 774, 247, 1100, 550, 621, 0,
	0, 0, 1016, 0, 0, 0, 0, 0, 0, 0,
	255, 0, 0, 0, 0, 770, 767, 771, 777, 765,
	775, 762, 773, 0, 449, 383, 600, 476, 254, 300,
	287, 329, 371, 483, 0, 0, 361, 531, 296, 385,
	0, 275, 418, 1053, 507, 382, 0, 490, 510, 0,
	402, 281, 441, 497, 498, 759, 764, 0, 780, 0,
	285, 286, 407, 267, 415, 612, 578, 470, 428, 426,
	0, 393, 450, 607, 1011, 0, 315, 0, 310, 406,
	546, 273, 525, 444, 411, 365, 473, 502, 312, 297,
	298, 341, 443, 331, 283, 536, 1081, 1083, 1079, 1075,
	1076, 1041, 1042, 1082, 1078, 332, 1077, 0, 544, 1086,
	1097, 1094, 1099, 1085, 1098, 1092, 880, 591, 1089, 1088,
	1102, 1095, 1096, 537, 1101, 1040, 1093, 1091, 1090, 1087,
	2697, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 243, 0, 244, 245, 246, 248, 249, 250, 758,
	251, 252, 253, 256, 257, 258, 260, 620, 261, 262,
	263, 264, 265, 266, 1065, 1043, 268, 269, 270, 271,
	272, 274, 276, 277, 278, 279, 280, 282, 284, 1054,
	1044, 1049, 1055, 1045, 1046, 1050, 288, 289, 290, 291,
	292, 293, 0, 294, 295, 299, 301, 302, 303, 304,
	305, 306, 309, 0, 311, 313, 0, 314, 317, 0,
	318, 319, 320, 321, 322, 323, 324, 325, 1057, 326,
	0, 327, 328, 330, 0, 333, 334, 335, 336, 337,
	0, 338, 1066, 1014, 339, 340, 342, 343, 344, 346,
	347, 348, 349, 350, 351, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 360, 362, 0, 363, 364, 367,
	368, 369, 370, 0, 372, 1067, 0, 373, 374, 375,
	1047, 1048, 376, 377, 378, 379, 380, 381, 384, 1080,
	386, 387, 388, 389, 390, 391, 392, 622, 394, 395,
	396, 397, 398, 399, 400, 584, 1058, 401, 403, 404,
	1064, 588, 1059, 776, 419, 420, 421, 422, 423, 424,
	425, 427, 0, 429, 430, 431, 1060, 432, 433, 434,
	435, 0, 436, 437, 438, 439, 440, 442, 445, 446,
	447, 448, 0, 451, 452, 453, 454, 455, 456, 457,
	459, 460, 461, 463, 464, 465, 623, 466, 467, 468,
	469, 1017, 471, 472, 624, 474, 475, 477, 478, 479,
	480, 481, 482, 633, 1051, 484, 594, 485, 486, 487,
	488, 489, 0, 491, 492, 493, 494, 495, 496, 499,
	500, 501, 503, 504, 1061, 505, 506, 1052, 508, 509,
	779, 511, 512, 513, 514, 515, 0, 634, 516, 1062,
	517, 1063, 518, 519, 520, 521, 522, 523, 524, 526,
	0, 1001, 528, 529, 530, 532, 533, 534, 535, 538,
	539, 540, 541, 542, 0, 543, 545, 547, 625, 602,
	1068, 1069, 1072, 1070, 1071, 1073, 1074, 1084, 548, 549,
	565, 416, 410, 366, 408, 409, 413, 414, 417, 0,
	0, 0, 1056, 0, 0, 0, 999, 0, 0, 816,
	0, 1020, 932, 0, 1025, 1026, 1015, 1034, 1005, 0,
	0, 1006, 2695, 0, 995, 996, 2696, 242, 0, 259,
	761, 0, 308, 345, 1010, 0, 998, 405, 0, 458,
	462, 105, 551, 1030, 0, 1002, 0, 316, 1023, 766,
	0, 772, 1024, 778, 1022, 527, 0, 768, 769, 774,
	247, 1100, 550, 621, 0, 0, 0, 1016, 102, 0,
	0, 0, 103, 0, 0, 255, 0, 0, 0, 0,
	770, 767, 771, 777, 765, 775, 762, 773, 0, 449,
	383, 2009, 476, 254, 300, 287, 329, 371, 483, 0,
	0, 361, 531, 296, 385, 0, 275, 418, 1053, 507,
	382, 0, 490, 510, 0, 402, 281, 441, 497, 498,
	759, 764, 0, 780, 0, 285, 286, 407, 267, 415,
	612, 578, 470, 428, 426, 0, 393, 450, 607, 1011,
	0, 315, 0, 310, 406, 546, 273, 525, 444, 411,
	365, 473, 502, 312, 297, 298, 341, 443, 331, 283,
	536, 1081, 1083, 1079, 1075, 1076, 1041, 1042, 1082, 1078,
	332, 1077, 0, 544, 1086, 1097, 1094, 1099, 1085, 1098,
	1092, 880, 591, 1089, 1088, 1102, 1095, 1096, 537, 1101,
	1040, 1093, 1091, 1090, 1087, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 243, 0, 244, 245,
	246, 248, 249, 250, 758, 251, 252, 253, 256, 257,
	258, 260, 620, 261, 262, 263, 264, 265, 266, 1065,
	1043, 268, 269, 270, 271, 272, 274, 276, 277, 278,
	279, 280, 282, 284, 1054, 1044, 1049, 1055, 1045, 1046,
	1050, 288, 289, 290, 291, 292, 293, 0, 294, 295,
	299, 301, 302, 303, 304, 305, 306, 309, 0, 311,
	313, 0, 314, 317, 0, 318, 319, 320, 321, 322,
	323, 324, 325, 1057, 326, 0, 327, 328, 330, 0,
	333, 334, 335, 336, 337, 0, 338, 1066, 1014, 339,
	340, 342, 343, 344, 346, 347, 348, 349, 350, 351,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 360,
	362, 0, 363, 364, 367, 368, 369, 370, 0, 372,
	1067, 0, 373, 374, 375, 1047, 1048, 376, 377, 378,
	379, 380, 381, 384, 1080, 386, 387, 388, 389, 390,
	391, 392, 622, 394, 395, 396, 397, 398, 399, 400,
	584, 1058, 401, 403, 404, 1064, 588, 1059, 776, 419,
	420, 421, 422, 423, 424, 425, 427, 0, 429, 430,
	431, 1060, 432, 433, 434, 435, 0, 436, 437, 438,
	439, 440, 442, 445, 446, 447, 448, 0, 451, 452,
	453, 454, 455, 456, 457, 459, 460, 461, 463, 464,
	465, 623, 466, 467, 468, 469, 1017, 471, 472, 624,
	474, 475, 477, 478, 479, 480, 481, 482, 633, 1051,
	484, 594, 485, 486, 487, 488, 489, 0, 491, 492,
	493, 494, 495, 496, 499, 500, 501, 503, 504, 1061,
	505, 506, 1052, 508, 509, 779, 511, 512, 513, 514,
	515, 0, 634, 516, 1062, 517, 1063, 518, 519, 520,
	521, 522, 523, 524, 526, 0, 1001, 528, 529, 530,
	532, 533, 534, 535, 538, 539, 540, 541, 542, 0,
	543, 545, 547, 625, 602, 1068, 1069, 1072, 1070, 1071,
	1073, 1074, 1084, 548, 549, 565, 416, 410, 366, 408,
	409, 413, 414, 417, 0, 0, 0, 1056, 0, 0,
	0, 999, 0, 106, 816, 0, 1020, 932, 0, 1025,
	1026, 1015, 1034, 1005, 0, 0, 1006, 4961, 0, 995,
	996, 0, 242, 0, 259, 761, 0, 308, 345, 1010,
	0, 998, 405, 0, 458, 462, 105, 551, 1030, 0,
	1002, 0, 316, 1023, 766, 0, 772, 1024, 778, 1022,
	527, 0, 768, 769, 774, 247, 1100, 550, 621, 0,
	0, 0, 1016, 102, 0, 0, 0, 103, 0, 0,
	255, 0, 0, 0, 0, 770, 767, 771, 777, 765,
	775, 762, 773, 0, 449, 383, 2009, 476, 254, 300,
	287, 329, 371, 483, 0, 0, 361, 531, 296, 385,
	2782, 275, 418, 1053, 507, 382, 0, 490, 510, 0,
	402, 281, 441, 497, 498, 759, 764, 0, 780, 0,
	285, 286, 407, 267, 415, 612, 578, 470, 428, 426,
	0, 393, 450, 607, 1011, 0, 315, 0, 310, 406,
	546, 273, 525, 444, 411, 365, 473, 502, 312, 297,
	298, 341, 443, 331, 283, 536, 1081, 1083, 1079, 1075,
	1076, 1041, 1042, 1082, 1078, 332, 1077, 0, 544, 1086,
	1097, 1094, 1099, 1085, 1098, 1092, 880, 591, 1089, 1088,
	1102, 1095, 1096, 537, 1101, 1040, 1093, 1091, 1090, 1087,
	0, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 243, 0, 244, 245, 246, 248, 249, 250, 758,
	251, 252, 253, 256, 257, 258, 260, 620, 261, 262,
	263, 264, 265, 266, 1065, 1043, 268, 269, 270, 271,
	272, 274, 276, 277, 278, 279, 280, 282, 284, 1054,
	1044, 1049, 1055, 1045, 1046, 1050, 288, 289, 290, 291,
	292, 293, 0, 294, 295, 299, 301, 302, 303, 304,
	305, 306, 309, 0, 311, 313, 0, 314, 317, 0,
	318, 319, 320, 321, 322, 323, 324, 325, 1057, 326,
	0, 327, 328, 330, 0, 333, 334, 335, 336, 337,
	0, 338, 1066, 1014, 339, 340, 342, 343, 344, 346,
	347, 348, 349, 350, 351, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 360, 362, 0, 363, 364, 367,
	368, 369, 370, 0, 372, 1067, 0, 373, 374, 375,
	1047, 1048, 376, 377, 378, 379, 380, 381, 384, 1080,
	386, 387, 388, 389, 390, 391, 392, 622, 394, 395,
	396, 397, 398, 399, 400, 584, 1058, 401, 403, 404,
	1064, 588, 1059, 776, 419, 420, 421, 422, 423, 424,
	425, 427, 0, 429, 430, 431, 1060, 432, 433, 434,
	435, 0, 436, 437, 438, 439, 440, 442, 445, 446,
	447, 448, 0, 451, 452, 453, 454, 455, 456, 457,
	459, 460, 461, 463, 464, 465, 623, 466, 467, 468,
	469, 1017, 471, 472, 624, 474, 475, 477, 478, 479,
	480, 481, 482, 633, 1051, 484, 594, 485, 486, 487,
	488, 489, 0, 491, 492, 493, 494, 495, 496, 499,
	500, 501, 503, 504, 1061, 505, 506, 1052, 508, 509,
	779, 511, 512, 513, 514, 515, 0, 634, 516, 1062,
	517, 1063, 518, 519, 520, 521, 522, 523, 524, 526,
	0, 1001, 528, 529, 530, 532, 533, 534, 535, 538,
	539, 540, 541, 542, 0, 543, 545, 547, 625, 602,
	1068, 1069, 1072, 1070, 1071, 1073, 1074, 1084, 548, 549,
	565, 416, 410, 366, 408, 409, 413, 414, 417, 0,
	0, 0, 1056, 0, 0, 0, 999, 0, 106, 816,
	0, 1020, 932, 0, 1025, 1026, 1015, 1034, 1005, 0,
	0, 1006, 0, 0, 995, 996, 0, 242, 0, 259,
	761, 0, 308, 345, 1010, 0, 998, 405, 0, 458,
	462, 105, 551, 1030, 0, 1002, 0, 316, 1023, 766,
	0, 772, 1024, 778, 1022, 527, 0, 768, 769, 774,
	247, 1100, 550, 621, 0, 0, 0, 1016, 102, 0,
	0, 0, 103, 0, 0, 255, 0, 0, 0, 0,
	770, 767, 771, 777, 765, 775, 762, 773, 0, 449,
	383, 2009, 476, 254, 300, 287, 329, 371, 483, 0,
	0, 361, 531, 296, 385, 0, 275, 418, 1053, 507,
	382, 0, 490, 510, 0, 402, 281, 441, 497, 498,
	759, 764, 0, 780, 0, 285, 286, 407, 267, 415,
	612, 578, 470, 428, 426, 0, 393, 450, 607, 1011,
	0, 315, 0, 310, 406, 546, 273, 525, 444, 411,
	365, 473, 502, 312, 297, 298, 341, 443, 331, 283,
	536, 1081, 1083, 1079, 1075, 1076, 1041, 1042, 1082, 1078,
	332, 1077, 0, 544, 1086, 1097, 1094, 1099, 1085, 1098,
	1092, 880, 591, 1089, 1088, 1102, 1095, 1096, 537, 1101,
	1040, 1093, 1091, 1090, 1087, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 243, 0, 244, 245,
	246, 248, 249, 250, 758, 251, 252, 253, 256, 257,
	258, 260, 620, 261, 262, 263, 264, 265, 266, 1065,
	1043, 268, 269, 270, 271, 272, 274, 276, 277, 278,
	279, 280, 282, 284, 1054, 1044, 1049, 1055, 1045, 1046,
	1050, 288, 289, 290, 291, 292, 293, 0, 294, 295,
	299, 301, 302, 303, 304, 305, 306, 309, 0, 311,
	313, 0, 314, 317, 0, 318, 319, 320, 321, 322,
	323, 324, 325, 1057, 326, 0, 327, 328, 330, 0,
	333, 334, 335, 336, 337, 0, 338, 1066, 1014, 339,
	340, 342, 343, 344, 346, 347, 348, 349, 350, 351,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 360,
	362, 0, 363, 364, 367, 368, 369, 370, 0, 372,
	1067, 0, 373, 374, 375, 1047, 1048, 376, 377, 378,
	379, 380, 381, 384, 1080, 386, 387, 388, 389, 390,
	391, 392, 622, 394, 395, 396, 397, 398, 399, 400,
	584, 1058, 401, 403, 404, 1064, 588, 1059, 776, 419,
	420, 421, 422, 423, 424, 425, 427, 0, 429, 430,
	431, 1060, 432, 433, 434, 435, 0, 436, 437, 438,
	439, 440, 442, 445, 446, 447, 448, 0, 451, 452,
	453, 454, 455, 456, 457, 459, 460, 461, 463, 464,
	465, 623, 466, 467, 468, 469, 1017, 471, 472, 624,
	474, 475, 477, 478, 479, 480, 481, 482, 633, 1051,
	484, 594, 485, 486, 487, 488, 489, 0, 491, 492,
	493, 494, 495, 496, 499, 500, 501, 503, 504, 1061,
	505, 506, 1052, 508, 509, 779, 511, 512, 513, 514,
	515, 0, 634, 516, 1062, 517, 1063, 518, 519, 520,
	521, 522, 523, 524, 526, 0, 1001, 528, 529, 530,
	532, 533, 534, 535, 538, 539, 540, 541, 542, 0,
	543, 545, 547, 625, 602, 1068, 1069, 1072, 1070, 1071,
	1073, 1074, 1084, 548, 549, 565, 416, 410, 366, 408,
	409, 413, 414, 417, 0, 0, 0, 1056, 0, 0,
	0, 999, 0, 106, 816, 0, 1020, 932, 0, 1025,
	1026, 1015, 1034, 1005, 0, 0, 1006, 0, 0, 995,
	996, 0, 242, 0, 259, 761, 0, 308, 345, 1010,
	0, 998, 405, 0, 458, 462, 0, 551, 1030, 0,
	1002, 0, 316, 1023, 766, 0, 772, 1024, 778, 1022,
	527, 0, 768, 769, 774, 247, 1100, 550, 621, 0,
	0, 0, 1016, 0, 2763, 0, 0, 0, 0, 0,
	255, 0, 0, 0, 0, 770, 767, 771, 777, 765,
	775, 762, 773, 0, 449, 383, 600, 476, 254, 300,
	287, 329, 371, 483, 0, 0, 361, 531, 296, 385,
	0, 275, 418, 1053, 507, 382, 0, 490, 510, 0,
	402, 281, 441, 497, 498, 759, 764, 0, 780, 0,
	285, 286, 407, 267, 415, 612, 578, 470, 428, 426,
	0, 393, 450, 607, 1011, 0, 315, 0, 310, 406,
	546, 273, 525, 444, 411, 365, 473, 502, 312, 297,
	298, 341, 443, 331, 283, 536, 1081, 1083, 1079, 1075,
	1076, 1041, 1042, 1082, 1078, 332, 1077, 0, 544, 1086,
	1097, 1094, 1099, 1085, 1098, 1092, 880, 591, 1089, 1088,
	1102, 1095, 1096, 537, 1101, 1040, 1093, 1091, 1090, 1087,
	0, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 243, 0, 244, 245, 246, 248, 249, 250, 758,
	251, 252, 253, 256, 257, 258, 260, 620, 261, 262,
	263, 264, 265, 266, 1065, 1043, 268, 269, 270, 271,
	272, 274, 276, 277, 278, 279, 280, 282, 284, 1054,
	1044, 1049, 1055, 1045, 1046, 1050, 288, 289, 290, 291,
	292, 293, 0, 294, 295, 299, 301, 302, 303, 304,
	305, 306, 309, 0, 311, 313, 0, 314, 317, 0,
	318, 319, 320, 321, 322, 323, 324, 325, 1057, 326,
	0, 327, 328, 330, 0, 333, 334, 335, 336, 337,
	0, 338, 1066, 1014, 339, 340, 342, 343, 344, 346,
	347, 348, 349, 350, 351, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 360, 362, 0, 363, 364, 367,
	368, 369, 370, 0, 372, 1067, 2759, 373, 374, 375,
	1047, 1048, 376, 377, 378, 379, 380, 381, 384, 1080,
	386, 387, 388, 389, 390, 391, 392, 622, 394, 395,
	396, 397, 398, 399, 400, 584, 1058, 401, 403, 404,
	1064, 588, 1059, 776, 419, 420, 421, 422, 423, 424,
	425, 427, 0, 429, 430, 431, 1060, 432, 433, 434,
	435, 0, 436, 437, 438, 439, 440, 442, 445, 446,
	447, 448, 0, 451, 452, 453, 454, 455, 456, 457,
	459, 460, 461, 463, 464, 465, 623, 466, 467, 468,
	469, 1017, 471, 472, 624, 474, 475, 477, 478, 479,
	480, 481, 482, 633, 1051, 484, 594, 485, 486, 487,
	488, 489, 0, 491, 492, 493, 494, 495, 496, 499,
	500, 501, 503, 504, 1061, 505, 506, 1052, 508, 509,
	779, 511, 512, 513, 514, 515, 2760, 634, 516, 1062,
	517, 1063, 518, 519, 520, 521, 522, 523, 524, 526,
	0, 1001, 528, 529, 530, 532, 533, 534, 535, 538,
	539, 540, 541, 542, 0, 543, 545, 547, 625, 602,
	1068, 1069, 1072, 1070, 1071, 1073, 1074, 1084, 548, 549,
	565, 416, 410, 366, 408, 409, 413, 414, 417, 0,
	0, 2758, 1056, 0, 0, 0, 999, 0, 816, 0,
	1020, 932, 0, 1025, 1026, 1015, 1034, 1005, 0, 0,
	0, 1006, 0, 0, 995, 996, 242, 0, 259, 761,
	0, 308, 345, 1010, 0, 998, 405, 0, 458, 462,
	0, 551, 1030, 0, 1002, 0, 316, 1023, 766, 0,
	772, 1024, 778, 1022, 527, 0, 768, 769, 774, 247,
	1100, 550, 621, 0, 0, 0, 1016, 0, 0, 0,
	0, 0, 0, 0, 255, 0, 0, 0, 0, 770,
	767, 771, 777, 765, 775, 762, 773, 0, 449, 383,
	600, 476, 254, 300, 287, 329, 371, 483, 0, 0,
	361, 531, 296, 385, 0, 275, 418, 1053, 507, 382,
	0, 490, 510, 0, 402, 281, 441, 497, 498, 759,
	764, 0, 780, 0, 285, 286, 407, 267, 415, 612,
	578, 470, 428, 426, 0, 393, 450, 607, 1011, 0,
	315, 0, 310, 406, 546, 273, 525, 444, 411, 365,
	473, 502, 312, 297, 298, 341, 443, 331, 283, 536,
	1081, 1083, 1079, 1075, 1076, 1041, 1042, 1082, 1078, 332,
	1077, 0, 544, 1086, 1097, 1094, 1099, 1085, 1098, 1092,
	880, 591, 1089, 1088, 1102, 1095, 1096, 537, 1101, 1040,
	1093, 1091, 1090, 1087, 0, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 243, 0, 244, 245, 246,
	248, 249, 250, 758, 251, 252, 253, 256, 257, 258,
	260, 620, 261, 262, 263, 264, 265, 266, 1065, 1043,
	268, 269, 270, 271, 272, 274, 276, 277, 278, 279,
	280, 282, 284, 1054, 1044, 1049, 1055, 1045, 1046, 1050,
	288, 289, 290, 291, 292, 293, 0, 294, 295, 299,
	301, 302, 303, 304, 305, 306, 309, 0, 311, 313,
	0, 314, 317, 0, 318, 319, 320, 321, 322, 323,
	324, 325, 1057, 326, 0, 327, 328, 330, 0, 333,
	334, 335, 336, 337, 0, 338, 1066, 1014, 339, 340,
	342, 343, 344, 346, 347, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 360, 362,
	0, 363, 364, 367, 368, 369, 370, 0, 372, 1067,
	0, 373, 374, 375, 1047, 1048, 376, 377, 378, 379,
	380, 381, 384, 1080, 386, 387, 388, 389, 390, 391,
	392, 622, 394, 395, 396, 397, 398, 399, 400, 584,
	1058, 401, 403, 404, 1064, 588, 1059, 776, 419, 420,
	421, 422, 423, 424, 425, 427, 0, 429, 430, 431,
	1060, 432, 433, 434, 435, 0, 436, 437, 438, 439,
	440, 442, 445, 446, 447, 448, 0, 451, 452, 453,
	454, 455, 456, 457, 459, 460, 461, 463, 464, 465,
	623, 466, 467, 468, 469, 1017, 471, 472, 624, 474,
	475, 477, 478, 479, 480, 481, 482, 633, 1051, 484,
	594, 485, 486, 487, 488, 489, 0, 491, 492, 493,
	494, 495, 496, 499, 500, 501, 503, 504, 1061, 505,
	506, 1052, 508, 509, 779, 511, 512, 513, 514, 515,
	0, 634, 516, 1062, 517, 1063, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 1001, 528, 529, 530, 532,
	533, 534, 535, 538, 539, 540, 541, 542, 0, 543,
	545, 547, 625, 602, 1068, 1069, 1072, 1070, 1071, 1073,
	1074, 1084, 548, 549, 565, 416, 410, 366, 408, 409,
	413, 414, 417, 0, 0, 0, 1056, 0, 0, 0,
	999, 0, 0, 816, 0, 1020, 932, 0, 1025, 1026,
	1015, 1034, 1005, 0, 0, 1006, 0, 0, 995, 996,
	993, 242, 0, 259, 761, 0, 308, 345, 1010, 0,
	998, 405, 0, 458, 462, 0, 551, 1030, 0, 1002,
	0, 316, 1023, 766, 0, 772, 1024, 778, 1022, 527,
	0, 768, 769, 774, 247, 1100, 550, 621, 0, 0,
	0, 1016, 0, 0, 0, 0, 0, 0, 0, 255,
	0, 0, 0, 0, 770, 767, 771, 777, 765, 775,
	762, 773, 0, 449, 383, 600, 476, 254, 300, 287,
	329, 371, 483, 0, 0, 361, 531, 296, 385, 0,
	275, 418, 1053, 507, 382, 0, 490, 510, 0, 402,
	281, 441, 497, 498, 759, 764, 0, 780, 0, 285,
	286, 407, 267, 415, 612, 578, 470, 428, 426, 0,
	393, 450, 607, 1011, 0, 315, 0, 310, 406, 546,
	273, 525, 444, 411, 365, 473, 502, 312, 297, 298,
	341, 443, 331, 283, 536, 1081, 1083, 1079, 1075, 1076,
	1041, 1042, 1082, 1078, 332, 1077, 0, 544, 1086, 1097,
	1094, 1099, 1085, 1098, 1092, 880, 591, 1089, 1088, 1102,
	1095, 1096, 537, 1101, 1040, 1093, 1091, 1090, 1087, 0,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	243, 0, 244, 245, 246, 248, 249, 250, 758, 251,
	252, 253, 256, 257, 258, 260, 620, 261, 262, 263,
	264, 265, 266, 1065, 1043, 268, 269, 270, 271, 272,
	274, 276, 277, 278, 279, 280, 282, 284, 1054, 1044,
	1049, 1055, 1045, 1046, 1050, 288, 289, 290, 291, 292,
	293, 0, 294, 295, 299, 301, 302, 303, 304, 305,
	306, 309, 0, 311, 313, 0, 314, 317, 0, 318,
	319, 320, 321, 322, 323, 324, 325, 1057, 326, 0,
	327, 328, 330, 0, 333, 334, 335, 336, 337, 0,
	338, 1066, 1014, 339, 340, 342, 343, 344, 346, 347,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 360, 362, 0, 363, 364, 367, 368,
	369, 370, 0, 372, 1067, 0, 373, 374, 375, 1047,
	1048, 376, 377, 378, 379, 380, 381, 384, 1080, 386,
	387, 388, 389, 390, 391, 392, 622, 394, 395, 396,
	397, 398, 399, 400, 584, 1058, 401, 403, 404, 1064,
	588, 1059, 776, 419, 420, 421, 422, 423, 424, 425,
	427, 0, 429, 430, 431, 1060, 432, 433, 434, 435,
	0, 436, 437, 438, 439, 440, 442, 445, 446, 447,
	448, 0, 451, 452, 453, 454, 455, 456, 457, 459,
	460, 461, 463, 464, 465, 623, 466, 467, 468, 469,
	1017, 471, 472, 624, 474, 475, 477, 478, 479, 480,
	481, 482, 633, 1051, 484, 594, 485, 486, 487, 488,
	489, 0, 491, 492, 493, 494, 495, 496, 499, 500,
	501, 503, 504, 1061, 505, 506, 1052, 508, 509, 779,
	511, 512, 513, 514, 515, 0, 634, 516, 1062, 517,
	1063, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	1001, 528, 529, 530, 532, 533, 534, 535, 538, 539,
	540, 541, 542, 0, 543, 545, 547, 625, 602, 1068,
	1069, 1072, 1070, 1071, 1073, 1074, 1084, 548, 549, 565,
	416, 410, 366, 408, 409, 413, 414, 417, 0, 0,
	0, 1056, 0, 0, 0, 999, 0, 816, 0, 1020,
	932, 0, 1025, 1026, 1015, 1034, 1005, 0, 2014, 2688,
	1006, 0, 0, 995, 996, 242, 0, 259, 761, 0,
	308, 345, 1010, 0, 998, 405, 0, 458, 462, 0,
	551, 1030, 0, 1002, 0, 316, 1023, 766, 0, 772,
	1024, 778, 1022, 527, 0, 768, 769, 774, 247, 1100,
	550, 621, 0, 0, 2649, 1016, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 770, 767,
	771, 777, 765, 775, 762, 773, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 1053, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 759, 764,
	0, 780, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 1011, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 1081,
	1083, 1079, 1075, 1076, 1041, 1042, 1082, 1078, 332, 1077,
	0, 544, 1086, 1097, 1094, 1099, 1085, 1098, 1092, 880,
	591, 1089, 1088, 1102, 1095, 1096, 537, 1101, 1040, 1093,
	1091, 1090, 1087, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 758, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 1065, 1043, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 1054, 1044, 1049, 1055, 1045, 1046, 1050, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 1057, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 1066, 1014, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 1067, 0,
	373, 374, 375, 1047, 1048, 376, 377, 378, 379, 380,
	381, 384, 1080, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 1058,
	401, 403, 404, 1064, 588, 1059, 776, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 1060,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 1017, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 1051, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 1061, 505, 506,
	1052, 508, 509, 779, 511, 512, 513, 514, 515, 0,
	634, 516, 1062, 517, 1063, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 1001, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 1068, 1069, 1072, 1070, 1071, 1073, 1074,
	1084, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 0, 0, 0, 1056, 0, 0, 0, 999,
	0, 816, 0, 1020, 932, 0, 1025, 1026, 1015, 1034,
	1005, 0, 0, 0, 1006, 0, 0, 995, 996, 242,
	0, 259, 761, 0, 308, 345, 1010, 0, 998, 405,
	0, 458, 462, 0, 551, 1030, 0, 1002, 0, 316,
	1023, 766, 0, 772, 1024, 778, 1022, 527, 0, 768,
	769, 774, 247, 1100, 550, 621, 0, 0, 0, 1016,
	0, 0, 0, 0, 0, 0, 0, 255, 0, 0,
	0, 0, 770, 767, 771, 777, 765, 775, 762, 773,
	0, 449, 383, 600, 476, 254, 300, 287, 329, 371,
	483, 0, 0, 361, 531, 296, 385, 0, 275, 418,
	1053, 507, 382, 0, 490, 510, 0, 402, 281, 441,
	497, 498, 759, 764, 0, 780, 0, 285, 286, 407,
	267, 415, 612, 578, 470, 428, 426, 0, 393, 450,
	607, 1011, 0, 315, 0, 310, 406, 546, 273, 525,
	444, 411, 365, 473, 502, 312, 297, 298, 341, 443,
	331, 283, 536, 1081, 1083, 1079, 1075, 1076, 1041, 1042,
	1082, 1078, 332, 1077, 0, 544, 1086, 1097, 1094, 1099,
	1085, 1098, 1092, 880, 591, 1089, 1088, 1102, 1095, 1096,
	537, 1101, 1040, 1093, 1091, 1090, 1087, 3844, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 243, 0,
	244, 245, 246, 248, 249, 250, 758, 251, 252, 253,
	256, 257, 258, 260, 620, 261, 262, 263, 264, 265,
	266, 1065, 1043, 268, 269, 270, 271, 272, 274, 276,
	277, 278, 279, 280, 282, 284, 1054, 1044, 1049, 1055,
	1045, 1046, 1050, 288, 289, 290, 291, 292, 293, 0,
	294, 295, 299, 301, 302, 303, 304, 305, 306, 309,
	0, 311, 313, 0, 314, 317, 0, 318, 319, 320,
	321, 322, 323, 324, 325, 1057, 326, 0, 327, 328,
	330, 0, 333, 334, 335, 336, 337, 0, 338, 1066,
	1014, 339, 340, 342, 343, 344, 346, 347, 348, 349,
	350, 351, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 360, 362, 0, 363, 364, 367, 368, 369, 370,
	0, 372, 1067, 0, 373, 374, 375, 1047, 1048, 376,
	377, 378, 379, 380, 381, 384, 1080, 386, 387, 388,
	389, 390, 391, 392, 622, 394, 395, 396, 397, 398,
	399, 400, 584, 1058, 401, 403, 404, 1064, 588, 1059,
	776, 419, 420, 421, 422, 423, 424, 425, 427, 0,
	429, 430, 431, 1060, 432, 433, 434, 435, 0, 436,
	437, 438, 439, 440, 442, 445, 446, 447, 448, 0,
	451, 452, 453, 454, 455, 456, 457, 459, 460, 461,
	463, 464, 465, 623, 466, 467, 468, 469, 1017, 471,
	472, 624, 474, 475, 477, 478, 479, 480, 481, 482,
	633, 1051, 484, 594, 485, 486, 487, 488, 489, 0,
	491, 492, 493, 494, 495, 496, 499, 500, 501, 503,
	504, 1061, 505, 506, 1052, 508, 509, 779, 511, 512,
	513, 514, 515, 0, 634, 516, 1062, 517, 1063, 518,
	519, 520, 521, 522, 523, 524, 526, 0, 1001, 528,
	529, 530, 532, 533, 534, 535, 538, 539, 540, 541,
	542, 0, 543, 545, 547, 625, 602, 1068, 1069, 1072,
	1070, 1071, 1073, 1074, 1084, 548, 549, 565, 416, 410,
	366, 408, 409, 413, 414, 417, 0, 0, 0, 1056,
	0, 0, 0, 999, 0, 816, 0, 1020, 932, 0,
	1025, 1026, 1015, 1034, 1005, 0, 0, 0, 1006, 0,
	0, 995, 996, 242, 0, 259, 761, 0, 308, 345,
	1010, 0, 998, 405, 0, 458, 462, 0, 551, 1030,
	0, 1002, 0, 316, 1023, 766, 0, 772, 1024, 778,
	1022, 527, 0, 768, 769, 774, 247, 1100, 550, 621,
	0, 0, 0, 1016, 0, 0, 0, 0, 0, 0,
	0, 255, 0, 0, 0, 0, 770, 767, 771, 777,
	765, 775, 762, 773, 0, 449, 383, 600, 476, 254,
	300, 287, 329, 371, 483, 0, 0, 361, 531, 296,
	385, 0, 275, 418, 1053, 507, 382, 0, 490, 510,
	0, 402, 281, 441, 497, 498, 759, 764, 0, 780,
	0, 285, 286, 407, 267, 415, 612, 578, 470, 428,
	426, 0, 393, 450, 607, 1011, 0, 315, 0, 310,
	406, 546, 273, 525, 444, 411, 365, 473, 502, 312,
	297, 298, 341, 443, 331, 283, 536, 1081, 1083, 1079,
	1075, 1076, 1041, 1042, 1082, 1078, 332, 1077, 0, 544,
	1086, 1097, 1094, 1099, 1085, 1098, 1092, 880, 591, 1089,
	1088, 1102, 1095, 1096, 537, 1101, 1040, 1093, 1091, 1090,
	1087, 0, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 243, 0, 244, 245, 246, 248, 249, 250,
	758, 251, 252, 253, 256, 257, 258, 260, 620, 261,
	262, 263, 264, 265, 266, 1065, 1043, 268, 269, 270,
	271, 272, 274, 276, 277, 278, 279, 280, 282, 284,
	1054, 1044, 1049, 1055, 1045, 1046, 1050, 288, 289, 290,
	291, 292, 293, 0, 294, 295, 299, 301, 302, 303,
	304, 305, 306, 309, 0, 311, 313, 0, 314, 317,
	0, 318, 319, 320, 321, 322, 323, 324, 325, 1057,
	326, 0, 327, 328, 330, 0, 333, 334, 335, 336,
	337, 0, 338, 1066, 1014, 339, 340, 342, 343, 344,
	346, 347, 348, 349, 350, 351, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 360, 362, 0, 363, 364,
	367, 368, 369, 370, 0, 372, 1067, 0, 373, 374,
	375, 1047, 1048, 376, 377, 378, 379, 380, 381, 384,
	1080, 386, 387, 388, 389, 390, 391, 392, 622, 394,
	395, 396, 397, 398, 399, 400, 584, 1058, 401, 403,
	404, 1064, 588, 1059, 776, 419, 420, 421, 422, 423,
	424, 425, 427, 0, 429, 430, 431, 1060, 432, 433,
	434, 435, 0, 436, 437, 438, 439, 440, 442, 445,
	446, 447, 448, 0, 451, 452, 453, 454, 455, 456,
	457, 459, 460, 461, 463, 464, 465, 623, 466, 467,
	468, 469, 1017, 471, 472, 624, 474, 475, 477, 478,
	479, 480, 481, 482, 633, 1051, 484, 594, 485, 486,
	487, 488, 489, 0, 491, 492, 493, 494, 495, 496,
	499, 500, 501, 503, 504, 1061, 505, 506, 1052, 508,
	509, 779, 511, 512, 513, 514, 515, 0, 634, 516,
	1062, 517, 1063, 518, 519, 520, 521, 522, 523, 524,
	526, 0, 1001, 528, 529, 530, 532, 533, 534, 535,
	538, 539, 540, 541, 542, 0, 543, 545, 547, 625,
	602, 1068, 1069, 1072, 1070, 1071, 1073, 1074, 1084, 548,
	549, 565, 416, 410, 366, 408, 409, 413, 414, 417,
	0, 0, 0, 1056, 0, 0, 0, 999, 0, 816,
	0, 1020, 932, 0, 1025, 1026, 1015, 1034, 1005, 0,
	0, 0, 1006, 3839, 0, 995, 996, 242, 0, 259,
	761, 0, 308, 345, 1010, 0, 998, 405, 0, 458,
	462, 0, 551, 1030, 0, 1002, 0, 316, 1023, 766,
	0, 772, 1024, 778, 1022, 527, 0, 768, 769, 774,
	247, 1100, 550, 621, 0, 0, 0, 1016, 0, 0,
	0, 0, 0, 0, 0, 255, 0, 0, 0, 0,
	770, 767, 771, 777, 765, 775, 762, 773, 0, 449,
	383, 600, 476, 254, 300, 287, 329, 371, 483, 0,
	0, 361, 531, 296, 385, 0, 275, 418, 1053, 507,
	382, 0, 490, 510, 0, 402, 281, 441, 497, 498,
	759, 764, 0, 780, 0, 285, 286, 407, 267, 415,
	612, 578, 470, 428, 426, 0, 393, 450, 607, 1011,
	0, 315, 0, 310, 406, 546, 273, 525, 444, 411,
	365, 473, 502, 312, 297, 298, 341, 443, 331, 283,
	536, 1081, 1083, 1079, 1075, 1076, 1041, 1042, 1082, 1078,
	332, 1077, 0, 544, 1086, 1097, 1094, 1099, 1085, 1098,
	1092, 880, 591, 1089, 1088, 1102, 1095, 1096, 537, 1101,
	1040, 1093, 1091, 1090, 1087, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 243, 0, 244, 245,
	246, 248, 249, 250, 758, 251, 252, 253, 256, 257,
	258, 260, 620, 261, 262, 263, 264, 265, 266, 1065,
	1043, 268, 269, 270, 271, 272, 274, 276, 277, 278,
	279, 280, 282, 284, 1054, 1044, 1049, 1055, 1045, 1046,
	1050, 288, 289, 290, 291, 292, 293, 0, 294, 295,
	299, 301, 302, 303, 304, 305, 306, 309, 0, 311,
	313, 0, 314, 317, 0, 318, 319, 320, 321, 322,
	323, 324, 325, 1057, 326, 0, 327, 328, 330, 0,
	333, 334, 335, 336, 337, 0, 338, 1066, 1014, 339,
	340, 342, 343, 344, 346, 347, 348, 349, 350, 351,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 360,
	362, 0, 363, 364, 367, 368, 369, 370, 0, 372,
	1067, 0, 373, 374, 375, 1047, 1048, 376, 377, 378,
	379, 380, 381, 384, 1080, 386, 387, 388, 389, 390,
	391, 392, 622, 394, 395, 396, 397, 398, 399, 400,
	584, 1058, 401, 403, 404, 1064, 588, 1059, 776, 419,
	420, 421, 422, 423, 424, 425, 427, 0, 429, 430,
	431, 1060, 432, 433, 434, 435, 0, 436, 437, 438,
	439, 440, 442, 445, 446, 447, 448, 0, 451, 452,
	453, 454, 455, 456, 457, 459, 460, 461, 463, 464,
	465, 623, 466, 467, 468, 469, 1017, 471, 472, 624,
	474, 475, 477, 478, 479, 480, 481, 482, 633, 1051,
	484, 594, 485, 486, 487, 488, 489, 0, 491, 492,
	493, 494, 495, 496, 499, 500, 501, 503, 504, 1061,
	505, 506, 1052, 508, 509, 779, 511, 512, 513, 514,
	515, 0, 634, 516, 1062, 517, 1063, 518, 519, 520,
	521, 522, 523, 524, 526, 0, 1001, 528, 529, 530,
	532, 533, 534, 535, 538, 539, 540, 541, 542, 0,
	543, 545, 547, 625, 602, 1068, 1069, 1072, 1070, 1071,
	1073, 1074, 1084, 548, 549, 565, 416, 410, 366, 408,
	409, 413, 414, 417, 0, 0, 0, 1056, 0, 0,
	0, 999, 0, 816, 0, 1020, 932, 0, 1025, 1026,
	1015, 1034, 1005, 0, 0, 0, 1006, 3802, 0, 995,
	996, 242, 0, 259, 761, 0, 308, 345, 1010, 0,
	998, 405, 0, 458, 462, 0, 551, 1030, 0, 1002,
	0, 316, 1023, 766, 0, 772, 1024, 778, 1022, 527,
	0, 768, 769, 774, 247, 1100, 550, 621, 0, 0,
	0, 1016, 0, 2763, 0, 0, 0, 0, 0, 255,
	0, 0, 0, 0, 770, 767, 771, 777, 765, 775,
	762, 773, 0, 449, 383, 600, 476, 254, 300, 287,
	329, 371, 483, 0, 0, 361, 531, 296, 385, 0,
	275, 418, 1053, 507, 382, 0, 490, 510, 0, 402,
	281, 441, 497, 498, 759, 764, 0, 780, 0, 285,
	286, 407, 267, 415, 612, 578, 470, 428, 426, 0,
	393, 450, 607, 1011, 0, 315, 0, 310, 406, 546,
	273, 525, 444, 411, 365, 473, 502, 312, 297, 298,
	341, 443, 331, 283, 536, 1081, 1083, 1079, 1075, 1076,
	1041, 1042, 1082, 1078, 332, 1077, 0, 544, 1086, 1097,
	1094, 1099, 1085, 1098, 1092, 880, 591, 1089, 1088, 1102,
	1095, 1096, 537, 1101, 1040, 1093, 1091, 1090, 1087, 0,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	243, 0, 244, 245, 246, 248, 249, 250, 758, 251,
	252, 253, 256, 257, 258, 260, 620, 261, 262, 263,
	264, 265, 266, 1065, 1043, 268, 269, 270, 271, 272,
	274, 276, 277, 278, 279, 280, 282, 284, 1054, 1044,
	1049, 1055, 1045, 1046, 1050, 288, 289, 290, 291, 292,
	293, 0, 294, 295, 299, 301, 302, 303, 304, 305,
	306, 309, 0, 311, 313, 0, 314, 317, 0, 318,
	319, 320, 321, 322, 323, 324, 325, 1057, 326, 0,
	327, 328, 330, 0, 333, 334, 335, 336, 337, 0,
	338, 1066, 1014, 339, 340, 342, 343, 344, 346, 347,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 360, 362, 0, 363, 364, 367, 368,
	369, 370, 0, 372, 1067, 0, 373, 374, 375, 1047,
	1048, 376, 377, 378, 379, 380, 381, 384, 1080, 386,
	387, 388, 389, 390, 391, 392, 622, 394, 395, 396,
	397, 398, 399, 400, 584, 1058, 401, 403, 404, 1064,
	588, 1059, 776, 419, 420, 421, 422, 423, 424, 425,
	427, 0, 429, 430, 431, 1060, 432, 433, 434, 435,
	0, 436, 437, 438, 439, 440, 442, 445, 446, 447,
	448, 0, 451, 452, 453, 454, 455, 456, 457, 459,
	460, 461, 463, 464, 465, 623, 466, 467, 468, 469,
	1017, 471, 472, 624, 474, 475, 477, 478, 479, 480,
	481, 482, 633, 1051, 484, 594, 485, 486, 487, 488,
	489, 0, 491, 492, 493, 494, 495, 496, 499, 500,
	501, 503, 504, 1061, 505, 506, 1052, 508, 509, 779,
	511, 512, 513, 514, 515, 0, 634, 516, 1062, 517,
	1063, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	1001, 528, 529, 530, 532, 533, 534, 535, 538, 539,
	540, 541, 542, 0, 543, 545, 547, 625, 602, 1068,
	1069, 1072, 1070, 1071, 1073, 1074, 1084, 548, 549, 565,
	416, 410, 366, 408, 409, 413, 414, 417, 0, 0,
	0, 1056, 0, 0, 0, 999, 0, 816, 0, 1020,
	932, 0, 1025, 1026, 1015, 1034, 1005, 0, 0, 0,
	1006, 0, 0, 995, 996, 242, 0, 259, 761, 0,
	308, 345, 1010, 0, 998, 405, 0, 458, 462, 0,
	551, 1030, 0, 1002, 0, 316, 1023, 766, 0, 772,
	1024, 778, 1022, 527, 0, 768, 769, 774, 247, 1100,
	550, 621, 0, 0, 0, 1016, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 770, 767,
	771, 777, 765, 775, 762, 773, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 2782, 275, 418, 1053, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 759, 764,
	0, 780, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 1011, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 1081,
	1083, 1079, 1075, 1076, 1041, 1042, 1082, 1078, 332, 1077,
	0, 544, 1086, 1097, 1094, 1099, 1085, 1098, 1092, 880,
	591, 1089, 1088, 1102, 1095, 1096, 537, 1101, 1040, 1093,
	1091, 1090, 1087, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 758, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 1065, 1043, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 1054, 1044, 1049, 1055, 1045, 1046, 1050, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 1057, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 1066, 1014, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 1067, 0,
	373, 374, 375, 1047, 1048, 376, 377, 378, 379, 380,
	381, 384, 1080, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 1058,
	401, 403, 404, 1064, 588, 1059, 776, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 1060,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 1017, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 1051, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 1061, 505, 506,
	1052, 508, 509, 779, 511, 512, 513, 514, 515, 0,
	634, 516, 1062, 517, 1063, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 1001, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 1068, 1069, 1072, 1070, 1071, 1073, 1074,
	1084, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 0, 0, 0, 1056, 0, 0, 0, 999,
	0, 816, 0, 1020, 932, 0, 1025, 1026, 1015, 1034,
	1005, 0, 0, 0, 1006, 0, 0, 995, 996, 242,
	0, 259, 761, 0, 308, 345, 1010, 0, 998, 405,
	0, 458, 462, 0, 551, 1030, 0, 1002, 0, 316,
	1023, 766, 0, 772, 1024, 778, 1022, 527, 0, 768,
	769, 774, 247, 1100, 550, 621, 0, 0, 0, 1016,
	0, 0, 0, 0, 0, 0, 0, 255, 0, 0,
	0, 0, 770, 767, 771, 777, 765, 775, 762, 773,
	0, 449, 383, 600, 476, 254, 300, 287, 329, 371,
	483, 0, 0, 361, 531, 296, 385, 0, 275, 418,
	1053, 507, 382, 0, 490, 510, 0, 402, 281, 441,
	497, 498, 759, 764, 0, 780, 0, 285, 286, 407,
	267, 415, 612, 578, 470, 428, 426, 0, 393, 450,
	607, 1011, 0, 315, 0, 310, 406, 546, 273, 525,
	444, 411, 365, 473, 502, 312, 297, 298, 341, 443,
	331, 283, 536, 1081, 1083, 1079, 1075, 1076, 1041, 1042,
	1082, 1078, 332, 1077, 0, 544, 1086, 1097, 1094, 1099,
	1085, 1098, 1092, 880, 591, 1089, 1088, 1102, 1095, 1096,
	537, 1101, 1040, 1093, 1091, 1090, 1087, 0, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 243, 0,
	244, 245, 246, 248, 249, 250, 758, 251, 252, 253,
	256, 257, 258, 260, 620, 261, 262, 263, 264, 265,
	266, 1065, 1043, 268, 269, 270, 271, 272, 274, 276,
	277, 278, 279, 280, 282, 284, 1054, 1044, 1049, 1055,
	1045, 1046, 1050, 288, 289, 290, 291, 292, 293, 0,
	294, 295, 299, 301, 302, 303, 304, 305, 306, 309,
	0, 311, 313, 0, 314, 317, 0, 318, 319, 320,
	321, 322, 323, 324, 325, 1057, 326, 0, 327, 328,
	330, 0, 333, 334, 335, 336, 337, 0, 338, 1066,
	1014, 339, 340, 342, 343, 344, 346, 347, 348, 349,
	350, 351, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 360, 362, 0, 363, 364, 367, 368, 369, 370,
	0, 372, 1067, 0, 373, 374, 375, 1047, 1048, 376,
	377, 378, 379, 380, 381, 384, 1080, 386, 387, 388,
	389, 390, 391, 392, 622, 394, 395, 396, 397, 398,
	399, 400, 584, 1058, 401, 403, 404, 1064, 588, 1059,
	776, 419, 420, 421, 422, 423, 424, 425, 427, 0,
	429, 430, 431, 1060, 432, 433, 434, 435, 0, 436,
	437, 438, 439, 440, 442, 445, 446, 447, 448, 0,
	451, 452, 453, 454, 455, 456, 457, 459, 460, 461,
	463, 464, 465, 623, 466, 467, 468, 469, 1017, 471,
	472, 624, 474, 475, 477, 478, 479, 480, 481, 482,
	633, 1051, 484, 594, 485, 486, 487, 488, 489, 0,
	491, 492, 493, 494, 495, 496, 499, 500, 501, 503,
	504, 1061, 505, 506, 1052, 508, 509, 779, 511, 512,
	513, 514, 515, 0, 634, 516, 1062, 517, 1063, 518,
	519, 520, 521, 522, 523, 524, 526, 0, 1001, 528,
	529, 530, 532, 533, 534, 535, 538, 539, 540, 541,
	542, 0, 543, 545, 547, 625, 602, 1068, 1069, 1072,
	1070, 1071, 1073, 1074, 1084, 548, 549, 565, 416, 410,
	366, 408, 409, 413, 414, 417, 0, 0, 0, 1056,
	0, 0, 0, 999, 0, 0, 816, 0, 1020, 932,
	0, 1025, 1026, 1015, 1034, 1005, 0, 0, 1006, 2693,
	0, 995, 996, 1498, 242, 0, 259, 761, 0, 308,
	345, 1010, 0, 998, 405, 0, 458, 462, 0, 551,
	1030, 0, 1002, 0, 316, 1023, 766, 0, 772, 1024,
	778, 1022, 527, 0, 768, 769, 774, 247, 1100, 550,
	621, 0, 0, 0, 1016, 0, 0, 0, 0, 0,
	0, 0, 255, 0, 0, 0, 0, 770, 767, 771,
	777, 765, 775, 762, 773, 0, 449, 383, 600, 476,
	254, 300, 287, 329, 371, 483, 0, 0, 361, 531,
	296, 385, 0, 275, 418, 1053, 507, 382, 0, 490,
	510, 0, 402, 281, 441, 497, 498, 759, 764, 0,
	780, 0, 285, 286, 407, 267, 415, 612, 578, 470,
	428, 426, 0, 393, 450, 607, 1011, 0, 315, 0,
	310, 406, 546, 273, 525, 444, 411, 365, 473, 502,
	312, 297, 298, 341, 443, 331, 283, 536, 1081, 1083,
	1079, 1075, 1076, 1041, 1042, 1082, 1078, 332, 1077, 0,
	544, 1086, 1097, 1094, 1099, 1085, 1098, 1092, 880, 591,
	1089, 1088, 1102, 1095, 1096, 537, 1101, 1040, 1093, 1091,
	1090, 1087, 0, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 243, 0, 244, 245, 246, 248, 249,
	250, 758, 251, 252, 253, 256, 257, 258, 260, 620,
	261, 262, 263, 264, 265, 266, 1065, 1043, 268, 269,
	270, 271, 272, 274, 276, 277, 278, 279, 280, 282,
	284, 1054, 1044, 1049, 1055, 1045, 1046, 1050, 288, 289,
	290, 291, 292, 293, 0, 294, 295, 299, 301, 302,
	303, 304, 305, 306, 309, 0, 311, 313, 0, 314,
	317, 0, 318, 319, 320, 321, 322, 323, 324, 325,
	1057, 326, 0, 327, 328, 330, 0, 333, 334, 335,
	336, 337, 0, 338, 1066, 1014, 339, 340, 342, 343,
	344, 346, 347, 348, 349, 350, 351, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 360, 362, 0, 363,
	364, 367, 368, 369, 370, 0, 372, 1067, 0, 373,
	374, 375, 1047, 1048, 376, 377, 378, 379, 380, 381,
	384, 1080, 386, 387, 388, 389, 390, 391, 392, 622,
	394, 395, 396, 397, 398, 399, 400, 584, 1058, 401,
	403, 404, 1064, 588, 1059, 776, 419, 420, 421, 422,
	423, 424, 425, 427, 0, 429, 430, 431, 1060, 432,
	433, 434, 435, 0, 436, 437, 438, 439, 440, 442,
	445, 446, 447, 448, 0, 451, 452, 453, 454, 455,
	456, 457, 459, 460, 461, 463, 464, 465, 623, 466,
	467, 468, 469, 1017, 471, 472, 624, 474, 475, 477,
	478, 479, 480, 481, 482, 633, 1051, 484, 594, 485,
	486, 487, 488, 489, 0, 491, 492, 493, 494, 495,
	496, 499, 500, 501, 503, 504, 1061, 505, 506, 1052,
	508, 509, 779, 511, 512, 513, 514, 515, 0, 634,
	516, 1062, 517, 1063, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 1001, 528, 529, 530, 532, 533, 534,
	535, 538, 539, 540, 541, 542, 0, 543, 545, 547,
	625, 602, 1068, 1069, 1072, 1070, 1071, 1073, 1074, 1084,
	548, 549, 565, 416, 410, 366, 408, 409, 413, 414,
	417, 0, 0, 0, 1056, 0, 0, 0, 999, 0,
	816, 0, 1020, 932, 0, 1025, 1026, 1015, 1034, 1005,
	0, 0, 0, 1006, 0, 0, 995, 996, 242, 0,
	259, 761, 0, 308, 345, 1010, 0, 998, 405, 0,
	458, 462, 0, 551, 1030, 0, 1002, 0, 316, 1023,
	766, 0, 772, 1024, 778, 1022, 527, 0, 768, 769,
	774, 247, 1100, 550, 621, 0, 0, 0, 1016, 0,
	0, 0, 0, 0, 0, 0, 255, 0, 0, 0,
	0, 770, 767, 771, 777, 765, 775, 762, 773, 0,
	449, 383, 600, 476, 254, 300, 287, 329, 371, 483,
	0, 0, 361, 531, 296, 385, 0, 275, 418, 1053,
	507, 382, 0, 490, 510, 0, 402, 281, 441, 497,
	498, 759, 764, 0, 780, 0, 285, 286, 407, 267,
	415, 612, 578, 470, 428, 426, 0, 393, 450, 607,
	1011, 0, 315, 0, 310, 406, 546, 273, 525, 444,
	411, 365, 473, 502, 312, 297, 298, 341, 443, 331,
	283, 536, 1081, 1083, 1079, 1075, 1076, 1041, 1042, 1082,
	1078, 332, 1077, 0, 544, 1086, 1097, 1094, 1099, 1085,
	1098, 1092, 880, 591, 1089, 1088, 1102, 1095, 1096, 537,
	1101, 1040, 1093, 1091, 1090, 1087, 0, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 243, 0, 244,
	245, 246, 248, 249, 250, 758, 251, 252, 253, 256,
	257, 258, 260, 620, 261, 262, 263, 264, 265, 266,
	1065, 1043, 268, 269, 270, 271, 272, 274, 276, 277,
	278, 279, 280, 282, 284, 1054, 1044, 1049, 1055, 1045,
	1046, 1050, 288, 289, 290, 291, 292, 293, 0, 294,
	295, 299, 301, 302, 303, 304, 305, 306, 309, 0,
	311, 313, 0, 314, 317, 0, 318, 319, 320, 321,
	322, 323, 324, 325, 1057, 326, 0, 327, 328, 330,
	0, 333, 334, 335, 336, 337, 0, 338, 1066, 1014,
	339, 340, 342, 343, 344, 346, 347, 348, 349, 350,
	351, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	360, 362, 0, 363, 364, 367, 368, 369, 370, 0,
	372, 1067, 0, 373, 374, 375, 1047, 1048, 376, 377,
	378, 379, 380, 381, 384, 1080, 386, 387, 388, 389,
	390, 391, 392, 622, 394, 395, 396, 397, 398, 399,
	400, 584, 1058, 401, 403, 404, 1064, 588, 1059, 776,
	419, 420, 421, 422, 423, 424, 425, 427, 0, 429,
	430, 431, 1060, 432, 433, 434, 435, 0, 436, 437,
	438, 439, 440, 442, 445, 446, 447, 448, 0, 451,
	452, 453, 454, 455, 456, 457, 459, 460, 461, 463,
	464, 465, 623, 466, 467, 468, 469, 1017, 471, 472,
	624, 474, 475, 477, 478, 479, 480, 481, 482, 633,
	1051, 484, 594, 485, 486, 487, 488, 489, 0, 491,
	492, 493, 494, 495, 496, 499, 500, 501, 503, 504,
	1061, 505, 506, 1052, 508, 509, 779, 511, 512, 513,
	514, 515, 0, 634, 516, 1062, 517, 1063, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 1001, 528, 529,
	530, 532, 533, 534, 535, 538, 539, 540, 541, 542,
	0, 543, 545, 547, 625, 602, 1068, 1069, 1072, 1070,
	1071, 1073, 1074, 1084, 548, 549, 565, 416, 410, 366,
	408, 409, 413, 414, 417, 0, 0, 0, 1056, 0,
	0, 0, 999, 0, 816, 0, 1020, 932, 0, 1025,
	1026, 1015, 1034, 1005, 0, 0, 0, 1006, 0, 0,
	995, 996, 242, 0, 259, 761, 0, 308, 345, 1010,
	0, 998, 405, 0, 458, 462, 0, 551, 1030, 0,
	1002, 0, 316, 1023, 766, 0, 772, 1024, 778, 1022,
	527, 0, 768, 769, 774, 247, 1100, 550, 621, 0,
	0, 0, 1016, 0, 0, 0, 0, 0, 0, 0,
	255, 0, 0, 0, 0, 770, 767, 771, 777, 765,
	775, 762, 773, 0, 449, 383, 600, 476, 254, 300,
	287, 329, 371, 483, 0, 0, 361, 531, 296, 385,
	0, 275, 418, 1053, 507, 382, 0, 490, 510, 0,
	402, 281, 441, 497, 498, 759, 764, 0, 780, 0,
	4970, 286, 407, 267, 415, 612, 578, 470, 428, 426,
	0, 393, 450, 607, 1011, 0, 315, 0, 310, 406,
	546, 273, 525, 444, 411, 365, 473, 502, 312, 297,
	298, 341, 443, 331, 283, 536, 1081, 1083, 1079, 1075,
	1076, 1041, 1042, 1082, 1078, 332, 1077, 0, 544, 1086,
	1097, 1094, 1099, 1085, 1098, 1092, 880, 591, 1089, 1088,
	1102, 1095, 1096, 537, 1101, 1040, 1093, 1091, 1090, 1087,
	0, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 243, 0, 244, 245, 246, 248, 249, 250, 758,
	251, 252, 253, 256, 257, 258, 260, 620, 261, 262,
	263, 264, 265, 266, 1065, 1043, 268, 269, 270, 271,
	272, 274, 276, 277, 278, 279, 280, 282, 284, 1054,
	1044, 1049, 1055, 1045, 1046, 1050, 288, 289, 290, 291,
	292, 293, 0, 294, 295, 299, 301, 302, 303, 304,
	305, 306, 309, 0, 311, 313, 0, 314, 317, 0,
	318, 319, 320, 321, 322, 323, 324, 325, 1057, 326,
	0, 327, 328, 330, 0, 333, 334, 335, 336, 337,
	0, 338, 1066, 1014, 339, 340, 342, 343, 344, 346,
	347, 348, 349, 350, 351, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 360, 362, 0, 363, 364, 367,
	368, 369, 370, 0, 372, 1067, 0, 373, 374, 375,
	1047, 1048, 376, 377, 378, 379, 380, 381, 384, 1080,
	386, 387, 388, 389, 390, 391, 392, 622, 394, 395,
	396, 397, 398, 399, 400, 584, 1058, 401, 403, 404,
	1064, 588, 1059, 776, 419, 420, 421, 422, 423, 424,
	425, 427, 0, 429, 430, 431, 1060, 432, 433, 434,
	435, 0, 436, 437, 438, 439, 440, 442, 445, 446,
	447, 448, 0, 451, 452, 453, 454, 455, 456, 457,
	459, 460, 461, 463, 464, 465, 623, 466, 467, 468,
	469, 1017, 471, 472, 624, 474, 475, 477, 478, 479,
	480, 481, 482, 633, 1051, 484, 594, 485, 486, 487,
	488, 489, 0, 491, 492, 493, 494, 495, 496, 499,
	500, 501, 503, 504, 1061, 505, 506, 1052, 508, 509,
	779, 511, 512, 513, 514, 515, 0, 634, 516, 1062,
	517, 1063, 518, 519, 520, 521, 522, 4969, 524, 526,
	0, 1001, 528, 529, 530, 532, 533, 534, 535, 538,
	539, 540, 541, 542, 0, 543, 545, 547, 625, 602,
	1068, 1069, 1072, 1070, 1071, 1073, 1074, 1084, 548, 549,
	565, 416, 410, 366, 408, 409, 413, 414, 417, 0,
	0, 0, 1056, 0, 0, 0, 999, 0, 816, 0,
	1020, 932, 0, 1025, 1026, 1015, 1034, 1005, 0, 0,
	0, 1006, 0, 0, 995, 996, 242, 0, 259, 761,
	0, 308, 345, 1010, 0, 998, 405, 0, 458, 462,
	0, 551, 1030, 0, 1002, 0, 316, 1023, 766, 0,
	772, 1024, 778, 1022, 527, 0, 768, 769, 774, 247,
	1100, 550, 621, 0, 0, 0, 1016, 0, 0, 0,
	0, 0, 0, 0, 255, 0, 0, 0, 0, 770,
	767, 771, 777, 765, 775, 762, 773, 0, 449, 383,
	600, 476, 254, 300, 287, 329, 371, 483, 0, 0,
	361, 531, 296, 385, 0, 275, 418, 1053, 507, 382,
	0, 490, 510, 0, 402, 281, 441, 497, 498, 759,
	764, 0, 780, 0, 285, 286, 407, 267, 415, 612,
	578, 470, 428, 426, 0, 393, 450, 607, 1011, 0,
	315, 0, 310, 406, 546, 273, 525, 444, 411, 365,
	473, 502, 312, 297, 298, 341, 443, 331, 283, 536,
	1081, 1083, 1079, 1075, 1076, 1041, 1042, 1082, 1078, 332,
	1077, 0, 544, 1086, 1097, 1094, 1099, 1085, 1098, 1092,
	880, 591, 1089, 1088, 1102, 1095, 1096, 537, 1101, 1040,
	1093, 1091, 1090, 1087, 0, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 243, 0, 244, 245, 246,
	248, 249, 250, 758, 251, 252, 253, 256, 257, 258,
	260, 620, 261, 262, 263, 264, 265, 266, 1065, 1043,
	268, 269, 270, 271, 272, 274, 276, 277, 278, 279,
	280, 282, 4778, 1054, 1044, 1049, 1055, 1045, 1046, 1050,
	288, 289, 290, 291, 292, 293, 0, 294, 295, 299,
	301, 302, 303, 304, 305, 306, 309, 0, 311, 313,
	0, 314, 317, 0, 318, 319, 320, 321, 322, 323,
	324, 325, 1057, 326, 0, 327, 328, 330, 0, 333,
	334, 335, 336, 337, 0, 338, 1066, 4780, 339, 340,
	342, 343, 344, 346, 347, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 360, 362,
	0, 363, 364, 367, 368, 369, 370, 0, 372, 1067,
	0, 373, 374, 375, 1047, 1048, 376, 377, 378, 379,
	380, 381, 384, 1080, 386, 387, 388, 389, 390, 391,
	392, 622, 394, 395, 396, 397, 398, 399, 400, 584,
	1058, 401, 403, 404, 1064, 588, 1059, 776, 419, 420,
	421, 422, 423, 424, 425, 427, 0, 429, 430, 431,
	1060, 432, 433, 434, 435, 0, 436, 437, 438, 439,
	440, 442, 445, 446, 447, 448, 0, 451, 452, 453,
	454, 455, 456, 457, 459, 460, 461, 463, 464, 465,
	623, 466, 4779, 468, 469, 1017, 471, 472, 624, 474,
	475, 477, 478, 479, 480, 481, 482, 633, 1051, 484,
	594, 485, 486, 487, 488, 489, 0, 491, 492, 493,
	494, 495, 496, 499, 500, 501, 503, 504, 1061, 505,
	506, 1052, 508, 509, 779, 511, 512, 513, 514, 515,
	0, 634, 516, 1062, 517, 1063, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 1001, 528, 529, 530, 532,
	533, 534, 535, 538, 539, 540, 541, 542, 0, 543,
	545, 547, 625, 602, 1068, 1069, 1072, 1070, 1071, 1073,
	1074, 1084, 548, 549, 565, 416, 410, 366, 408, 409,
	413, 414, 417, 0, 0, 0, 1056, 0, 0, 0,
	999, 0, 816, 0, 1020, 932, 0, 1025, 1026, 1015,
	1034, 1005, 0, 0, 0, 4777, 0, 0, 995, 996,
	242, 0, 259, 761, 0, 308, 345, 1010, 0, 998,
	405, 0, 458, 462, 0, 4968, 1030, 0, 1002, 0,
	316, 1023, 766, 0, 772, 1024, 778, 1022, 527, 0,
	768, 769, 774, 247, 1100, 550, 621, 0, 0, 0,
	1016, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 770, 767, 771, 777, 765, 775, 762,
	773, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 1053, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 759, 764, 0, 780, 0, 4970, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 1011, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 1081, 1083, 1079, 1075, 1076, 1041,
	1042, 1082, 1078, 332, 1077, 0, 544, 1086, 1097, 1094,
	1099, 1085, 1098, 1092, 880, 591, 1089, 1088, 1102, 1095,
	1096, 537, 1101, 1040, 1093, 1091, 1090, 1087, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 758, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 1065, 1043, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 1054, 1044, 1049,
	1055, 1045, 1046, 1050, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 1057, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	1066, 1014, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 1067, 0, 373, 374, 375, 1047, 1048,
	376, 377, 378, 379, 380, 381, 384, 1080, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 1058, 401, 403, 404, 1064, 588,
	1059, 776, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 1060, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 1017,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 1051, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 1061, 505, 506, 1052, 508, 509, 779, 511,
	512, 513, 514, 515, 0, 634, 516, 1062, 517, 1063,
	518, 519, 520, 521, 522, 4969, 524, 526, 0, 1001,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 1068, 1069,
	1072, 1070, 1071, 1073, 1074, 1084, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 0, 0, 0,
	1056, 0, 0, 0, 999, 0, 816, 0, 1020, 932,
	0, 1025, 1026, 1015, 1034, 1005, 0, 0, 0, 1006,
	0, 0, 995, 996, 242, 0, 259, 761, 0, 308,
	345, 1010, 0, 998, 405, 0, 458, 462, 0, 551,
	1030, 0, 1002, 0, 316, 1023, 766, 0, 772, 1024,
	778, 1022, 527, 0, 768, 769, 774, 247, 1100, 550,
	621, 0, 0, 0, 1016, 0, 0, 0, 0, 0,
	0, 0, 255, 0, 0, 0, 0, 770, 767, 771,
	777, 765, 775, 762, 773, 0, 449, 383, 600, 476,
	254, 300, 287, 329, 371, 483, 0, 0, 361, 531,
	296, 385, 0, 275, 418, 1053, 507, 382, 0, 490,
	510, 0, 402, 281, 441, 497, 498, 759, 764, 0,
	780, 0, 285, 286, 407, 267, 415, 612, 578, 470,
	428, 426, 0, 393, 450, 607, 1011, 0, 315, 0,
	310, 406, 546, 273, 525, 444, 411, 365, 473, 502,
	312, 297, 298, 341, 443, 331, 283, 536, 1081, 1083,
	1079, 1075, 1076, 1041, 1042, 1082, 1078, 332, 1077, 0,
	544, 1086, 1097, 1094, 1099, 1085, 1098, 1092, 880, 591,
	1089, 1088, 1102, 1095, 1096, 537, 1101, 1040, 1093, 1091,
	1090, 1087, 0, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 243, 0, 244, 245, 246, 248, 249,
	250, 758, 251, 252, 253, 256, 257, 258, 260, 620,
	261, 262, 263, 264, 265, 266, 1065, 1043, 268, 269,
	270, 271, 272, 274, 276, 277, 278, 279, 280, 282,
	284, 1054, 1044, 1049, 1055, 1045, 1046, 1050, 288, 289,
	290, 291, 292, 293, 0, 294, 295, 299, 301, 302,
	303, 304, 305, 306, 309, 0, 311, 313, 0, 314,
	317, 0, 318, 319, 320, 321, 322, 323, 324, 325,
	1057, 326, 0, 327, 328, 330, 0, 333, 334, 335,
	336, 337, 0, 338, 1066, 1014, 339, 340, 342, 343,
	344, 346, 347, 348, 349, 350, 351, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 360, 362, 0, 363,
	364, 367, 368, 369, 370, 0, 372, 1067, 0, 373,
	374, 375, 1047, 1048, 376, 377, 378, 379, 380, 381,
	384, 1080, 386, 387, 388, 389, 390, 391, 392, 622,
	394, 395, 396, 397, 398, 399, 4310, 584, 1058, 401,
	403, 404, 1064, 588, 1059, 776, 419, 420, 421, 422,
	423, 424, 425, 427, 0, 429, 430, 431, 1060, 432,
	433, 434, 435, 0, 436, 437, 438, 439, 440, 442,
	445, 446, 447, 448, 0, 451, 452, 453, 454, 455,
	456, 457, 459, 460, 461, 463, 464, 465, 623, 466,
	467, 468, 469, 1017, 471, 472, 624, 474, 475, 477,
	478, 479, 480, 481, 482, 633, 1051, 484, 594, 485,
	486, 487, 488, 489, 0, 491, 492, 493, 494, 495,
	496, 499, 500, 501, 503, 504, 1061, 505, 506, 1052,
	508, 509, 779, 511, 512, 513, 514, 515, 0, 634,
	516, 1062, 517, 1063, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 1001, 528, 529, 530, 532, 533, 534,
	535, 538, 539, 540, 541, 542, 0, 543, 545, 547,
	625, 602, 1068, 1069, 1072, 1070, 1071, 1073, 1074, 1084,
	548, 549, 565, 416, 410, 366, 408, 409, 413, 414,
	417, 0, 0, 0, 1056, 0, 0, 0, 999, 0,
	816, 0, 1020, 932, 0, 1025, 1026, 1015, 1034, 1005,
	0, 0, 0, 1006, 0, 0, 995, 996, 242, 0,
	259, 761, 0, 308, 345, 1010, 0, 998, 405, 0,
	458, 462, 0, 551, 1030, 0, 1002, 0, 316, 1023,
	766, 0, 772, 1024, 778, 1022, 527, 0, 768, 769,
	774, 247, 1100, 550, 621, 0, 0, 0, 1016, 0,
	0, 0, 0, 0, 0, 0, 255, 0, 0, 0,
	0, 770, 767, 771, 777, 765, 775, 762, 773, 0,
	449, 383, 600, 476, 254, 300, 287, 329, 371, 483,
	0, 0, 361, 531, 296, 385, 0, 275, 418, 1053,
	507, 382, 0, 490, 510, 0, 402, 281, 441, 497,
	498, 759, 764, 0, 780, 0, 285, 286, 407, 267,
	415, 612, 578, 470, 428, 426, 0, 393, 450, 607,
	1011, 0, 315, 0, 310, 406, 546, 273, 525, 444,
	411, 365, 473, 502, 312, 297, 298, 341, 443, 331,
	283, 536, 1081, 1083, 1079, 1075, 1076, 1041, 1042, 1082,
	1078, 332, 1077, 0, 544, 1086, 1097, 1094, 1099, 1085,
	1098, 1092, 880, 591, 1089, 1088, 1102, 1095, 1096, 537,
	1101, 1040, 1093, 1091, 1090, 1087, 0, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 243, 0, 244,
	245, 246, 248, 249, 250, 758, 251, 252, 253, 256,
	257, 258, 260, 620, 261, 262, 263, 264, 265, 266,
	1065, 1043, 268, 269, 270, 271, 272, 274, 276, 277,
	278, 279, 280, 282, 284, 1054, 1044, 1049, 1055, 1045,
	1046, 1050, 288, 289, 290, 291, 292, 293, 0, 294,
	295, 299, 301, 302, 303, 304, 305, 306, 309, 0,
	311, 313, 0, 314, 317, 0, 318, 319, 320, 321,
	322, 323, 324, 325, 1057, 326, 0, 327, 328, 330,
	0, 333, 334, 335, 336, 337, 0, 338, 1066, 1014,
	339, 340, 342, 343, 344, 346, 347, 348, 349, 350,
	351, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	360, 362, 0, 363, 364, 367, 368, 369, 370, 0,
	372, 1067, 0, 373, 374, 375, 1047, 1048, 376, 377,
	378, 379, 380, 381, 384, 1080, 386, 387, 388, 389,
	390, 391, 392, 622, 394, 395, 396, 397, 398, 399,
	400, 584, 1058, 401, 403, 404, 1064, 588, 1059, 776,
	419, 420, 421, 422, 423, 424, 425, 427, 0, 429,
	430, 431, 1060, 432, 433, 434, 435, 0, 436, 437,
	438, 439, 440, 442, 445, 446, 447, 448, 0, 451,
	452, 453, 454, 455, 456, 457, 459, 460, 461, 463,
	464, 465, 623, 466, 467, 468, 469, 1017, 471, 472,
	624, 474, 475, 477, 478, 479, 480, 481, 482, 633,
	1051, 484, 594, 485, 486, 487, 488, 489, 0, 491,
	492, 493, 494, 495, 496, 499, 500, 501, 503, 504,
	1061, 505, 506, 1052, 508, 509, 779, 511, 512, 513,
	514, 515, 0, 634, 516, 1062, 517, 1063, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 1001, 528, 529,
	530, 532, 533, 534, 535, 538, 539, 540, 541, 542,
	0, 543, 545, 547, 625, 4297, 1068, 1069, 1072, 1070,
	1071, 1073, 1074, 1084, 548, 549, 565, 416, 410, 366,
	408, 409, 413, 414, 417, 0, 0, 0, 1056, 0,
	0, 0, 999, 0, 816, 0, 1020, 932, 0, 1025,
	1026, 1015, 1034, 1005, 0, 0, 0, 1006, 0, 0,
	995, 996, 242, 0, 259, 761, 0, 308, 345, 1010,
	0, 998, 405, 0, 458, 462, 0, 551, 1030, 0,
	1002, 0, 316, 1023, 766, 0, 772, 1024, 778, 1022,
	527, 0, 768, 769, 774, 247, 1100, 550, 621, 0,
	0, 0, 1016, 0, 0, 0, 0, 0, 0, 0,
	255, 0, 0, 0, 0, 770, 767, 771, 777, 765,
	775, 762, 773, 0, 449, 383, 600, 476, 254, 300,
	287, 329, 371, 483, 0, 0, 361, 531, 296, 385,
	0, 275, 418, 1053, 507, 382, 0, 490, 510, 0,
	402, 281, 441, 497, 498, 759, 764, 0, 780, 0,
	3444, 286, 407, 267, 415, 612, 578, 470, 428, 426,
	0, 393, 450, 607, 1011, 0, 315, 0, 310, 406,
	546, 273, 525, 444, 411, 365, 473, 502, 312, 297,
	298, 341, 443, 331, 283, 536, 1081, 1083, 1079, 1075,
	1076, 1041, 1042, 1082, 1078, 332, 1077, 0, 544, 1086,
	1097, 1094, 1099, 1085, 1098, 1092, 880, 591, 1089, 1088,
	1102, 1095, 1096, 537, 1101, 1040, 1093, 1091, 1090, 1087,
	0, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 243, 0, 244, 245, 246, 248, 249, 250, 758,
	251, 252, 253, 256, 257, 258, 260, 620, 261, 262,
	263, 264, 265, 266, 1065, 1043, 268, 269, 270, 271,
	272, 274, 276, 277, 278, 279, 280, 282, 284, 1054,
	1044, 1049, 1055, 1045, 1046, 1050, 288, 289, 290, 291,
	292, 293, 0, 294, 295, 299, 301, 302, 303, 304,
	305, 306, 309, 0, 311, 313, 0, 314, 317, 0,
	318, 319, 320, 321, 322, 323, 324, 325, 1057, 326,
	0, 327, 328, 330, 0, 333, 334, 335, 336, 337,
	0, 338, 1066, 1014, 339, 340, 342, 343, 344, 346,
	347, 348, 349, 350, 351, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 360, 362, 0, 363, 364, 367,
	368, 369, 370, 0, 372, 1067, 0, 373, 374, 375,
	1047, 1048, 376, 377, 378, 379, 380, 381, 384, 1080,
	386, 387, 388, 389, 390, 391, 392, 622, 394, 395,
	396, 397, 398, 399, 400, 584, 1058, 401, 403, 404,
	1064, 588, 1059, 776, 419, 420, 421, 422, 423, 424,
	425, 427, 0, 429, 430, 431, 1060, 432, 433, 434,
	435, 0, 436, 437, 438, 439, 440, 442, 445, 446,
	447, 448, 0, 451, 452, 453, 454, 455, 456, 457,
	459, 460, 461, 463, 464, 465, 623, 466, 467, 468,
	469, 1017, 471, 472, 624, 474, 475, 477, 478, 479,
	480, 481, 482, 633, 1051, 484, 594, 485, 486, 487,
	488, 489, 0, 491, 492, 493, 494, 495, 496, 499,
	500, 501, 503, 504, 1061, 505, 506, 1052, 508, 509,
	779, 511, 512, 513, 514, 515, 0, 634, 516, 1062,
	517, 1063, 518, 519, 520, 521, 522, 523, 524, 526,
	0, 1001, 528, 529, 530, 532, 533, 534, 535, 538,
	539, 540, 541, 542, 0, 543, 545, 547, 625, 602,
	1068, 1069, 1072, 1070, 1071, 1073, 1074, 1084, 548, 549,
	565, 416, 410, 366, 408, 409, 413, 414, 417, 0,
	0, 0, 1056, 0, 0, 0, 999, 0, 816, 0,
	2599, 932, 0, 1025, 1026, 1015, 1034, 1005, 0, 0,
	0, 1006, 0, 0, 995, 996, 242, 0, 259, 761,
	0, 308, 345, 1010, 0, 998, 405, 0, 458, 462,
	0, 551, 1030, 0, 1002, 0, 316, 1023, 766, 0,
	772, 1024, 778, 1022, 527, 0, 768, 769, 774, 247,
	1100, 550, 621, 0, 0, 0, 1016, 0, 0, 0,
	0, 0, 0, 0, 255, 0, 0, 0, 0, 770,
	767, 771, 777, 765, 775, 762, 773, 0, 449, 383,
	600, 476, 254, 300, 287, 329, 371, 483, 0, 0,
	361, 531, 296, 385, 0, 275, 418, 1053, 507, 382,
	0, 490, 510, 0, 402, 281, 441, 497, 498, 759,
	764, 0, 780, 0, 285, 286, 407, 267, 415, 612,
	578, 470, 428, 426, 0, 393, 450, 607, 1011, 0,
	315, 0, 310, 406, 546, 273, 525, 444, 411, 365,
	473, 502, 312, 297, 298, 341, 443, 331, 283, 536,
	1081, 1083, 1079, 1075, 1076, 1041, 1042, 1082, 1078, 332,
	1077, 0, 544, 1086, 1097, 1094, 1099, 1085, 1098, 1092,
	880, 591, 1089, 1088, 1102, 1095, 1096, 537, 1101, 1040,
	1093, 1091, 1090, 1087, 0, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 243, 0, 244, 245, 246,
	248, 249, 250, 758, 251, 252, 253, 256, 257, 258,
	260, 620, 261, 262, 263, 264, 265, 266, 1065, 1043,
	268, 269, 270, 271, 272, 274, 276, 277, 278, 279,
	280, 282, 284, 1054, 1044, 1049, 1055, 1045, 1046, 1050,
	288, 289, 290, 291, 292, 293, 0, 294, 295, 299,
	301, 302, 303, 304, 305, 306, 309, 0, 311, 313,
	0, 314, 317, 0, 318, 319, 320, 321, 322, 323,
	324, 325, 1057, 326, 0, 327, 328, 330, 0, 333,
	334, 335, 336, 337, 0, 338, 1066, 1014, 339, 340,
	342, 343, 344, 346, 347, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 360, 362,
	0, 363, 364, 367, 368, 369, 370, 0, 372, 1067,
	0, 373, 374, 375, 1047, 1048, 376, 377, 378, 379,
	380, 381, 384, 1080, 386, 387, 388, 389, 390, 391,
	392, 622, 394, 395, 396, 397, 398, 399, 400, 584,
	1058, 401, 403, 404, 1064, 588, 1059, 776, 419, 420,
	421, 422, 423, 424, 425, 427, 0, 429, 430, 431,
	1060, 432, 433, 434, 435, 0, 436, 437, 438, 439,
	440, 442, 445, 446, 447, 448, 0, 451, 452, 453,
	454, 455, 456, 457, 459, 460, 461, 463, 464, 465,
	623, 466, 467, 468, 469, 1017, 471, 472, 624, 474,
	475, 477, 478, 479, 480, 481, 482, 633, 1051, 484,
	594, 485, 486, 487, 488, 489, 0, 491, 492, 493,
	494, 495, 496, 499, 500, 501, 503, 504, 1061, 505,
	506, 1052, 508, 509, 779, 511, 512, 513, 514, 515,
	0, 634, 516, 1062, 517, 1063, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 1001, 528, 529, 530, 532,
	533, 534, 535, 538, 539, 540, 541, 542, 0, 543,
	545, 547, 625, 602, 1068, 1069, 1072, 1070, 1071, 1073,
	1074, 1084, 548, 549, 565, 416, 410, 366, 408, 409,
	413, 414, 417, 0, 0, 0, 1056, 0, 0, 0,
	999, 0, 816, 0, 1020, 932, 0, 1025, 1026, 1015,
	1034, 1005, 0, 0, 0, 1006, 0, 0, 995, 996,
	242, 0, 259, 761, 0, 308, 345, 1010, 0, 998,
	405, 0, 458, 462, 0, 551, 1030, 0, 1002, 0,
	316, 1023, 766, 0, 772, 1024, 778, 1022, 527, 0,
	768, 769, 774, 247, 1100, 550, 621, 0, 0, 0,
	1016, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 770, 767, 771, 777, 765, 775, 762,
	773, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 1053, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 759, 764, 0, 780, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 1011, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 1081, 1083, 1079, 1075, 1076, 1041,
	1042, 1082, 1078, 332, 1077, 0, 544, 1086, 1097, 1094,
	1099, 1085, 1098, 1092, 880, 591, 1089, 1088, 1102, 1095,
	1096, 537, 1101, 1040, 1093, 1091, 1090, 1087, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 758, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 1065, 1043, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 1054, 1044, 1049,
	1055, 1045, 1046, 1050, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 1057, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	1066, 1014, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 1067, 0, 373, 374, 375, 1047, 1048,
	376, 377, 378, 379, 380, 381, 384, 1080, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 1058, 401, 403, 404, 1064, 588,
	1059, 776, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 1060, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 1017,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 1051, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 1061, 505, 506, 1052, 508, 509, 779, 511,
	512, 513, 514, 515, 0, 634, 516, 1062, 517, 1063,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 1001,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 1068, 1069,
	1072, 1070, 1071, 1073, 1074, 1084, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 0, 0, 0,
	1056, 0, 0, 0, 999, 0, 816, 0, 1020, 932,
	0, 1025, 1026, 1015, 1034, 1005, 0, 0, 0, 1006,
	0, 0, 1506, 1507, 242, 0, 259, 761, 0, 308,
	345, 1010, 0, 0, 405, 0, 458, 462, 0, 551,
	1030, 0, 4600, 0, 316, 1023, 766, 0, 772, 1024,
	778, 1022, 527, 0, 768, 769, 774, 247, 1100, 550,
	621, 0, 0, 0, 1016, 0, 0, 0, 0, 0,
	0, 0, 255, 0, 0, 0, 0, 770, 767, 771,
	777, 765, 775, 762, 773, 0, 449, 383, 600, 476,
	254, 300, 287, 329, 371, 483, 0, 0, 361, 531,
	296, 385, 0, 275, 418, 1053, 507, 382, 0, 490,
	510, 0, 402, 281, 441, 497, 498, 759, 764, 0,
	780, 0, 285, 286, 407, 267, 415, 612, 578, 470,
	428, 426, 0, 393, 450, 607, 1011, 0, 315, 0,
	310, 406, 546, 273, 525, 444, 411, 365, 473, 502,
	312, 297, 298, 341, 443, 331, 283, 536, 1081, 1083,
	1079, 1075, 1076, 1041, 1042, 1082, 1078, 332, 1077, 0,
	544, 1086, 1097, 1094, 1099, 1085, 1098, 1092, 880, 591,
	1089, 1088, 1102, 1095, 1096, 537, 1101, 1040, 1093, 1091,
	1090, 1087, 0, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 243, 0, 244, 245, 246, 248, 249,
	250, 758, 251, 252, 253, 256, 257, 258, 260, 620,
	261, 262, 263, 264, 265, 266, 1065, 1043, 268, 269,
	270, 271, 272, 274, 276, 277, 278, 279, 280, 282,
	284, 1054, 1044, 1049, 1055, 1045, 1046, 1050, 288, 289,
	290, 291, 292, 293, 0, 294, 295, 299, 301, 302,
	303, 304, 305, 306, 309, 0, 311, 313, 0, 314,
	317, 0, 318, 319, 320, 321, 322, 323, 324, 325,
	1057, 326, 0, 327, 328, 330, 0, 333, 334, 335,
	336, 337, 0, 338, 1066, 1014, 339, 340, 342, 343,
	344, 346, 347, 348, 349, 350, 351, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 360, 362, 0, 363,
	364, 367, 368, 369, 370, 0, 372, 1067, 0, 373,
	374, 375, 1047, 1048, 376, 377, 378, 379, 380, 381,
	384, 1080, 386, 387, 388, 389, 390, 391, 392, 622,
	394, 395, 396, 397, 398, 399, 400, 584, 1058, 401,
	403, 404, 1064, 588, 1059, 776, 419, 420, 421, 422,
	423, 424, 425, 427, 0, 429, 430, 431, 1060, 432,
	433, 434, 435, 0, 436, 437, 438, 439, 440, 442,
	445, 446, 447, 448, 0, 451, 452, 453, 454, 455,
	456, 457, 459, 460, 461, 463, 464, 465, 623, 466,
	467, 468, 469, 2753, 471, 472, 624, 474, 475, 477,
	478, 479, 480, 481, 482, 633, 1051, 484, 594, 485,
	486, 487, 488, 489, 0, 491, 492, 493, 494, 495,
	496, 499, 500, 501, 503, 504, 1061, 505, 506, 1052,
	508, 509, 779, 511, 512, 513, 514, 515, 0, 634,
	516, 1062, 517, 1063, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 0, 528, 529, 530, 532, 533, 534,
	535, 538, 539, 540, 541, 542, 0, 543, 545, 547,
	625, 602, 1068, 1069, 1072, 1070, 1071, 1073, 1074, 1084,
	548, 549, 565, 416, 410, 366, 408, 409, 413, 414,
	417, 0, 0, 0, 1056, 0, 0, 0, 0, 0,
	816, 0, 1020, 932, 0, 1025, 1026, 1015, 1034, 1005,
	0, 0, 0, 2593, 0, 0, 2750, 2751, 242, 0,
	259, 761, 0, 308, 345, 1010, 0, 0, 405, 0,
	458, 462, 0, 551, 1030, 0, 0, 0, 316, 1023,
	766, 0, 772, 1024, 778, 1022, 527, 0, 768, 769,
	774, 247, 1100, 550, 621, 0, 0, 0, 1016, 0,
	0, 0, 0, 0, 0, 0, 255, 0, 0, 0,
	0, 770, 767, 771, 777, 765, 775, 762, 773, 0,
	449, 383, 600, 476, 254, 300, 287, 329, 371, 483,
	0, 0, 361, 531, 296, 385, 0, 275, 418, 1053,
	507, 382, 0, 490, 510, 0, 402, 281, 441, 497,
	498, 759, 764, 0, 780, 0, 285, 286, 407, 267,
	415, 612, 578, 470, 428, 426, 0, 393, 450, 607,
	1011, 0, 315, 0, 310, 406, 546, 273, 525, 444,
	411, 365, 473, 502, 312, 297, 298, 341, 443, 331,
	283, 536, 1081, 1083, 1079, 1075, 1076, 1041, 1042, 1082,
	1078, 332, 1077, 0, 544, 1086, 1097, 1094, 1099, 1085,
	1098, 1092, 880, 591, 1089, 1088, 1102, 1095, 1096, 537,
	1101, 1040, 1093, 1091, 1090, 1087, 0, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 243, 0, 244,
	245, 246, 248, 249, 250, 758, 251, 252, 253, 256,
	257, 258, 260, 620, 261, 262, 263, 264, 265, 266,
	1065, 1043, 268, 269, 270, 271, 272, 274, 276, 277,
	278, 279, 280, 282, 284, 1054, 1044, 1049, 1055, 1045,
	1046, 1050, 288, 289, 290, 291, 292, 293, 0, 294,
	295, 299, 301, 302, 303, 304, 305, 306, 309, 0,
	311, 313, 0, 314, 317, 0, 318, 319, 320, 321,
	322, 323, 324, 325, 1057, 326, 0, 327, 328, 330,
	0, 333, 334, 335, 336, 337, 0, 338, 1066, 1014,
	339, 340, 342, 343, 344, 346, 347, 348, 349, 350,
	351, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	360, 362, 0, 363, 364, 367, 368, 369, 370, 0,
	372, 1067, 0, 373, 374, 375, 1047, 1048, 376, 377,
	378, 379, 380, 381, 384, 1080, 386, 387, 388, 389,
	390, 391, 392, 622, 394, 395, 396, 397, 398, 399,
	400, 584, 1058, 401, 403, 404, 1064, 588, 1059, 776,
	419, 420, 421, 422, 423, 424, 425, 427, 0, 429,
	430, 431, 1060, 432, 433, 434, 435, 0, 436, 437,
	438, 439, 440, 442, 445, 446, 447, 448, 0, 451,
	452, 453, 454, 455, 456, 457, 459, 460, 461, 463,
	464, 465, 623, 466, 467, 468, 469, 2753, 471, 472,
	624, 474, 475, 477, 478, 479, 480, 481, 482, 633,
	1051, 484, 594, 485, 486, 487, 488, 489, 0, 491,
	492, 493, 494, 495, 496, 499, 500, 501, 503, 504,
	1061, 505, 506, 1052, 508, 509, 779, 511, 512, 513,
	514, 515, 0, 634, 516, 1062, 517, 1063, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 0, 528, 529,
	530, 532, 533, 534, 535, 538, 539, 540, 541, 542,
	0, 543, 545, 547, 625, 602, 1068, 1069, 1072, 1070,
	1071, 1073, 1074, 1084, 548, 549, 565, 416, 410, 366,
	408, 409, 413, 414, 417, 0, 0, 0, 1056, 0,
	0, 0, 0, 0, 816, 0, 1020, 932, 0, 1025,
	1026, 0, 1034, 1005, 0, 0, 0, 2593, 0, 0,
	2750, 2751, 242, 0, 259, 761, 0, 308, 345, 1010,
	0, 0, 405, 0, 458, 462, 0, 551, 1030, 0,
	0, 0, 316, 1023, 766, 0, 772, 1024, 778, 1022,
	527, 0, 768, 769, 774, 247, 1100, 550, 621, 0,
	0, 0, 412, 0, 0, 0, 0, 0, 0, 0,
	255, 0, 0, 0, 0, 770, 767, 771, 777, 765,
	775, 762, 773, 0, 449, 383, 600, 476, 254, 300,
	287, 329, 371, 483, 0, 0, 361, 531, 296, 385,
	0, 275, 418, 1053, 507, 382, 0, 490, 510, 0,
	402, 281, 441, 497, 498, 759, 764, 0, 780, 0,
	285, 286, 407, 267, 415, 612, 578, 2592, 428, 426,
	0, 393, 450, 607, 1011, 0, 315, 0, 310, 406,
	546, 273, 525, 444, 411, 365, 473, 502, 312, 297,
	298, 341, 443, 331, 283, 536, 1081, 1083, 1079, 1075,
	1076, 1041, 1042, 1082, 1078, 332, 1077, 0, 544, 1086,
	1097, 1094, 1099, 1085, 1098, 1092, 880, 591, 1089, 1088,
	1102, 1095, 1096, 537, 1101, 1040, 1093, 1091, 1090, 1087,
	0, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 243, 0, 244, 245, 246, 248, 249, 250, 758,
	251, 252, 253, 256, 257, 258, 260, 620, 261, 262,
	263, 264, 265, 266, 1065, 1043, 268, 269, 270, 271,
	272, 274, 276, 277, 278, 279, 280, 282, 284, 1054,
	1044, 1049, 1055, 1045, 1046, 1050, 288, 289, 290, 291,
	292, 293, 0, 294, 295, 299, 301, 302, 303, 304,
	305, 306, 309, 0, 311, 313, 0, 314, 317, 0,
	318, 319, 320, 321, 322, 323, 324, 325, 1057, 326,
	0, 327, 328, 330, 0, 333, 334, 335, 336, 337,
	0, 338, 1066, 1014, 339, 340, 342, 343, 344, 346,
	347, 348, 349, 350, 351, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 360, 362, 0, 363, 364, 367,
	368, 369, 370, 0, 372, 1067, 0, 373, 374, 375,
	1047, 1048, 376, 377, 378, 379, 380, 381, 384, 1080,
	386, 387, 388, 389, 390, 391, 392, 622, 394, 395,
	396, 397, 398, 399, 400, 584, 1058, 401, 403, 404,
	1064, 588, 1059, 776, 419, 420, 421, 422, 423, 424,
	425, 427, 0, 429, 430, 431, 1060, 432, 433, 434,
	435, 0, 436, 437, 438, 439, 440, 442, 445, 446,
	447, 448, 0, 451, 452, 453, 454, 455, 456, 457,
	459, 460, 461, 463, 464, 465, 623, 466, 467, 468,
	469, 2591, 471, 472, 624, 474, 475, 477, 478, 479,
	480, 481, 482, 633, 1051, 484, 594, 485, 486, 487,
	488, 489, 0, 491, 492, 493, 494, 495, 496, 499,
	500, 501, 503, 504, 1061, 505, 506, 1052, 508, 509,
	779, 511, 512, 513, 514, 515, 0, 634, 516, 1062,
	517, 1063, 518, 519, 520, 521, 522, 523, 524, 526,
	0, 0, 528, 529, 530, 532, 533, 534, 535, 538,
	539, 540, 541, 542, 0, 543, 545, 547, 625, 602,
	1068, 1069, 1072, 1070, 1071, 1073, 1074, 1084, 548, 549,
	565, 416, 410, 366, 408, 409, 413, 414, 417, 0,
	0, 0, 1056, 0, 0, 0, 0, 0, 816, 0,
	1020, 932, 0, 1025, 1026, 1015, 1034, 1005, 0, 0,
	0, 2593, 0, 0, 2589, 2590, 242, 0, 259, 761,
	0, 308, 345, 1010, 0, 998, 405, 0, 458, 462,
	0, 0, 1030, 0, 1002, 0, 316, 1023, 0, 0,
	0, 1024, 0, 1022, 527, 0, 0, 0, 0, 247,
	1100, 550, 621, 0, 0, 0, 1016, 0, 0, 0,
	0, 0, 0, 0, 255, 0, 0, 0, 0, 770,
	767, 771, 777, 765, 775, 762, 773, 0, 449, 383,
	600, 476, 254, 300, 287, 329, 371, 483, 0, 0,
	361, 531, 296, 385, 0, 275, 418, 1053, 507, 382,
	0, 490, 510, 0, 402, 281, 441, 497, 498, 759,
	764, 0, 780, 0, 4970, 286, 407, 267, 415, 612,
	578, 470, 428, 426, 0, 393, 450, 607, 1011, 0,
	315, 0, 310, 406, 546, 273, 525, 444, 411, 365,
	473, 502, 312, 297, 298, 341, 443, 331, 283, 536,
	1081, 1083, 1079, 1075, 1076, 1041, 1042, 1082, 1078, 332,
	1077, 0, 544, 1086, 1097, 1094, 1099, 1085, 1098, 1092,
	880, 591, 1089, 1088, 1102, 1095, 1096, 537, 1101, 1040,
	1093, 1091, 1090, 1087, 0, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 243, 0, 244, 245, 246,
	248, 249, 250, 758, 251, 252, 253, 256, 257, 258,
	260, 620, 261, 262, 263, 264, 265, 266, 1065, 1043,
	268, 269, 270, 271, 272, 274, 276, 277, 278, 279,
	280, 282, 284, 1054, 1044, 1049, 1055, 1045, 1046, 1050,
	288, 289, 290, 291, 292, 293, 0, 294, 295, 299,
	301, 302, 303, 304, 305, 306, 309, 0, 311, 313,
	0, 314, 317, 0, 318, 319, 320, 321, 322, 323,
	324, 325, 1057, 326, 0, 327, 328, 330, 0, 333,
	334, 335, 336, 337, 0, 338, 1066, 1014, 339, 340,
	342, 343, 344, 346, 347, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 360, 362,
	0, 363, 364, 367, 368, 369, 370, 0, 372, 1067,
	0, 373, 374, 375, 1047, 1048, 376, 377, 378, 379,
	380, 381, 384, 1080, 386, 387, 388, 389, 390, 391,
	392, 622, 394, 395, 396, 397, 398, 399, 400, 584,
	1058, 401, 403, 404, 1064, 588, 1059, 776, 419, 420,
	421, 422, 423, 424, 425, 427, 0, 429, 430, 431,
	1060, 432, 433, 434, 435, 0, 436, 437, 438, 439,
	440, 442, 445, 446, 447, 448, 0, 451, 452, 453,
	454, 455, 456, 457, 459, 460, 461, 463, 464, 465,
	623, 466, 467, 468, 469, 1017, 471, 472, 624, 474,
	475, 477, 478, 479, 480, 481, 482, 633, 1051, 484,
	594, 485, 486, 487, 488, 489, 0, 491, 492, 493,
	494, 495, 496, 499, 500, 501, 503, 504, 1061, 505,
	506, 1052, 508, 509, 779, 511, 512, 513, 514, 515,
	0, 634, 516, 1062, 517, 1063, 518, 519, 520, 521,
	522, 4969, 524, 526, 0, 1001, 528, 529, 530, 532,
	533, 534, 535, 538, 539, 540, 541, 542, 0, 543,
	545, 547, 625, 602, 1068, 1069, 1072, 1070, 1071, 1073,
	1074, 1084, 548, 549, 565, 416, 410, 366, 408, 409,
	413, 414, 417, 0, 0, 0, 1056, 0, 0, 0,
	0, 0, 816, 0, 1020, 932, 0, 1025, 1026, 0,
	1034, 1005, 0, 0, 0, 1006, 0, 0, 995, 996,
	242, 0, 259, 761, 0, 308, 345, 1010, 0, 0,
	405, 0, 458, 462, 0, 551, 1030, 0, 0, 0,
	316, 1023, 766, 0, 772, 1024, 778, 1022, 527, 0,
	768, 769, 774, 247, 1100, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 770, 767, 771, 777, 765, 775, 762,
	773, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 1053, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 759, 764, 0, 780, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 1011, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 1081, 1083, 1079, 1075, 1076, 1041,
	1042, 1082, 1078, 332, 1077, 0, 544, 1086, 1097, 1094,
	1099, 1085, 1098, 1092, 880, 591, 1089, 1088, 1102, 1095,
	1096, 537, 1101, 1040, 1093, 1091, 1090, 1087, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 758, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 1065, 1043, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 1054, 1044, 1049,
	1055, 1045, 1046, 1050, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 1057, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	1066, 1014, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 1067, 0, 373, 374, 375, 1047, 1048,
	376, 377, 378, 379, 380, 381, 384, 1080, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 1058, 401, 403, 404, 1064, 588,
	1059, 776, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 1060, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 2753,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 1051, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 1061, 505, 506, 1052, 508, 509, 779, 511,
	512, 513, 514, 515, 0, 634, 516, 1062, 517, 1063,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 1068, 1069,
	1072, 1070, 1071, 1073, 1074, 1084, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 0, 0, 0,
	1056, 0, 816, 0, 1020, 932, 0, 1025, 1026, 0,
	1034, 1005, 0, 0, 0, 0, 0, 0, 0, 2593,
	242, 0, 259, 761, 0, 308, 345, 1010, 0, 0,
	405, 0, 458, 462, 0, 551, 1030, 0, 0, 0,
	316, 1023, 766, 0, 772, 1024, 778, 1022, 527, 0,
	768, 769, 774, 247, 1100, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 770, 767, 771, 777, 765, 775, 762,
	773, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 1053, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 759, 764, 0, 780, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 3976, 1011, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 1081, 1083, 1079, 1075, 1076, 1041,
	1042, 1082, 1078, 332, 1077, 0, 544, 1086, 1097, 1094,
	1099, 1085, 1098, 1092, 880, 591, 1089, 1088, 1102, 1095,
	1096, 537, 1101, 1040, 1093, 1091, 1090, 1087, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 758, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 1065, 1043, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 1054, 1044, 1049,
	1055, 1045, 1046, 1050, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 1057, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	1066, 1014, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 1067, 0, 373, 374, 375, 1047, 1048,
	376, 377, 378, 379, 380, 381, 384, 1080, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 1058, 401, 403, 404, 1064, 588,
	1059, 776, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 1060, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 2753,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 1051, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 1061, 505, 506, 1052, 508, 509, 779, 511,
	512, 513, 514, 515, 0, 634, 516, 1062, 517, 1063,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 1068, 1069,
	1072, 1070, 1071, 1073, 1074, 1084, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 0, 0, 0,
	1056, 0, 816, 0, 1020, 932, 0, 1025, 1026, 0,
	1034, 1005, 0, 0, 0, 0, 0, 0, 0, 2593,
	242, 0, 259, 761, 0, 308, 345, 1010, 0, 0,
	405, 0, 458, 462, 0, 551, 1030, 0, 0, 0,
	316, 1023, 766, 0, 772, 1024, 778, 1022, 527, 0,
	768, 769, 774, 247, 1100, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 3917, 0,
	0, 0, 0, 770, 767, 771, 777, 765, 775, 762,
	773, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 1053, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 759, 764, 0, 780, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 1011, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 1081, 1083, 1079, 1075, 1076, 1041,
	1042, 1082, 1078, 332, 1077, 0, 544, 1086, 1097, 1094,
	1099, 1085, 1098, 1092, 880, 591, 1089, 1088, 1102, 1095,
	1096, 537, 1101, 1040, 1093, 1091, 1090, 1087, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 758, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 1065, 1043, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 1054, 1044, 1049,
	1055, 1045, 1046, 1050, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 1057, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	1066, 1014, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 1067, 0, 373, 374, 375, 1047, 1048,
	376, 377, 378, 379, 380, 381, 384, 1080, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 1058, 401, 403, 404, 1064, 588,
	1059, 776, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 1060, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 2753,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 1051, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 1061, 505, 506, 1052, 508, 509, 779, 511,
	512, 513, 514, 515, 0, 634, 516, 1062, 517, 1063,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 1068, 1069,
	1072, 1070, 1071, 1073, 1074, 1084, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 816, 0, 0,
	1056, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 259, 761, 2593,
	308, 345, 560, 0, 0, 405, 0, 458, 462, 105,
	551, 0, 0, 0, 0, 316, 0, 766, 0, 772,
	0, 778, 0, 527, 0, 768, 769, 774, 247, 635,
	550, 621, 0, 0, 0, 412, 102, 0, 0, 672,
	103, 0, 0, 255, 0, 0, 0, 0, 770, 767,
	771, 777, 765, 775, 762, 773, 0, 449, 383, 2009,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 1053, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 759, 764,
	0, 780, 0, 285, 286, 407, 267, 415, 2841, 2842,
	2840, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 1081,
	1083, 1079, 1075, 1076, 1041, 1042, 1082, 1078, 332, 2848,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 758, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 1065, 1043, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 1054, 1044, 1049, 1055, 1045, 1046, 1050, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 1057, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 1066, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 2833, 372, 1067, 0,
	373, 374, 375, 1047, 1048, 376, 377, 378, 379, 380,
	381, 384, 1080, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 1058,
	401, 403, 404, 1064, 588, 1059, 776, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 1060,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 1051, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 1061, 505, 506,
	1052, 508, 509, 779, 511, 512, 513, 514, 515, 0,
	634, 516, 1062, 517, 1063, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 1068, 1069, 1072, 1070, 1071, 1073, 1074,
	1084, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 0, 0, 0, 1056, 0, 754, 0, 1431,
	932, 106, 0, 0, 0, 1034, 0, 0, 0, 0,
	0, 0, 0, 0, 2835, 242, 0, 259, 761, 0,
	308, 345, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 4849, 0, 316, 1428, 766, 0, 772,
	0, 778, 1427, 527, 0, 768, 769, 774, 247, 635,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 1429, 770, 767,
	771, 777, 765, 775, 762, 773, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 759, 764,
	0, 780, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 758, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 557, 760, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 763, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 776, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 0, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 508, 509, 779, 511, 512, 513, 514, 515, 0,
	634, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 816, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4850, 0, 0, 1432, 1433, 4848,
	242, 0, 259, 761, 0, 308, 345, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 766, 0, 772, 0, 778, 0, 527, 0,
	768, 769, 774, 247, 635, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 672, 0, 0, 0, 255, 0,
	0, 0, 0, 770, 767, 771, 777, 765, 775, 762,
	773, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 1053, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 759, 764, 0, 780, 0, 285, 286,
	407, 267, 415, 2841, 2842, 2840, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 1081, 1083, 1079, 1075, 1076, 1041,
	1042, 1082, 1078, 332, 2848, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 758, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 1065, 1043, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 1054, 1044, 1049,
	1055, 1045, 1046, 1050, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 1057, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	1066, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 2833, 372, 1067, 0, 373, 374, 375, 1047, 1048,
	376, 377, 378, 379, 380, 381, 384, 1080, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 1058, 401, 403, 404, 1064, 588,
	1059, 776, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 1060, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 1051, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 1061, 505, 506, 1052, 508, 509, 779, 511,
	512, 513, 514, 515, 0, 634, 516, 1062, 517, 1063,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 1068, 1069,
	1072, 1070, 1071, 1073, 1074, 1084, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 816, 0, 0,
	1056, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 259, 761, 2835,
	308, 345, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 0, 0, 316, 0, 766, 0, 772,
	0, 778, 0, 527, 0, 768, 769, 774, 247, 635,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 770, 767,
	771, 777, 765, 775, 762, 773, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 1053, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 759, 764,
	0, 780, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 1081,
	1083, 1079, 1075, 1076, 1041, 1042, 1082, 1078, 332, 2848,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 758, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 1065, 1043, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 1054, 1044, 1049, 1055, 1045, 1046, 1050, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 1057, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 1066, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 1067, 0,
	373, 374, 375, 1047, 1048, 376, 377, 378, 379, 380,
	381, 384, 1080, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 1058,
	401, 403, 404, 1064, 588, 1059, 776, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 1060,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 1051, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 1061, 505, 506,
	1052, 508, 509, 779, 511, 512, 513, 514, 515, 0,
	634, 516, 1062, 517, 1063, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 1068, 1069, 1072, 1070, 1071, 1073, 1074,
	1084, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 816, 0, 0, 1056, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 259, 761, 4126, 308, 345, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 766, 0, 772, 0, 778, 0, 527, 0,
	768, 769, 774, 247, 635, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 770, 767, 771, 777, 765, 775, 762,
	773, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 1053, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 759, 764, 0, 780, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 1081, 1083, 1079, 1075, 1076, 1041,
	1042, 1082, 1078, 332, 2848, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 758, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 1065, 1043, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 1054, 1044, 1049,
	1055, 1045, 1046, 1050, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 1057, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	1066, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 1067, 0, 373, 374, 375, 1047, 1048,
	376, 377, 378, 379, 380, 381, 384, 1080, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 1058, 401, 403, 404, 1064, 588,
	1059, 776, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 1060, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 1051, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 1061, 505, 506, 1052, 508, 509, 779, 511,
	512, 513, 514, 515, 0, 634, 516, 1062, 517, 1063,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 1068, 1069,
	1072, 1070, 1071, 1073, 1074, 1084, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 816, 0, 0,
	1056, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 259, 761, 5037,
	308, 345, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 0, 0, 316, 0, 766, 0, 772,
	0, 778, 0, 527, 0, 768, 769, 774, 247, 635,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 770, 767,
	771, 777, 765, 775, 762, 773, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 1053, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 759, 764,
	0, 780, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 1081,
	1083, 1079, 1075, 1076, 1041, 1042, 1082, 1078, 332, 2848,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 758, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 1065, 1043, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 1054, 1044, 1049, 1055, 1045, 1046, 1050, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 1057, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 1066, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 1067, 0,
	373, 374, 375, 1047, 1048, 376, 377, 378, 379, 380,
	381, 384, 1080, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 1058,
	401, 403, 404, 1064, 588, 1059, 776, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 1060,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 1051, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 1061, 505, 506,
	1052, 508, 509, 779, 511, 512, 513, 514, 515, 0,
	634, 516, 1062, 517, 1063, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 1068, 1069, 1072, 1070, 1071, 1073, 1074,
	1084, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 816, 0, 0, 1056, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 259, 761, 2974, 308, 345, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 766, 0, 772, 0, 778, 0, 527, 0,
	768, 769, 774, 247, 635, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 770, 767, 771, 777, 765, 775, 762,
	773, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 1053, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 759, 764, 0, 780, 0, 285, 286,
	407, 267, 415, 2841, 2842, 2840, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 1081, 1083, 1079, 1075, 1076, 1041,
	1042, 1082, 1078, 332, 2848, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 758, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 1065, 1043, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 1054, 1044, 1049,
	1055, 1045, 1046, 1050, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 1057, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	1066, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 1067, 0, 373, 374, 375, 1047, 1048,
	376, 377, 378, 379, 380, 381, 384, 1080, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 1058, 401, 403, 404, 1064, 588,
	1059, 776, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 1060, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 1051, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 1061, 505, 506, 1052, 508, 509, 779, 511,
	512, 513, 514, 515, 0, 634, 516, 1062, 517, 1063,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 1068, 1069,
	1072, 1070, 1071, 1073, 1074, 1084, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 0, 0, 0,
	1056, 0, 754, 0, 1431, 932, 0, 0, 0, 0,
	1034, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	242, 0, 259, 761, 0, 308, 345, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 1437, 0,
	316, 1428, 766, 0, 772, 0, 778, 1427, 527, 0,
	768, 769, 774, 247, 635, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 1429, 770, 767, 771, 777, 765, 775, 762,
	773, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 759, 764, 0, 780, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 758, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 557, 760, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 0,
	763, 0, 0, 0, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	563, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 776, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 0, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 509, 779, 511,
	512, 513, 514, 515, 0, 634, 516, 598, 517, 599,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 754, 0, 1431, 932,
	0, 0, 0, 0, 1034, 0, 0, 0, 0, 0,
	0, 0, 1432, 1433, 242, 0, 259, 761, 0, 308,
	345, 560, 0, 0, 405, 0, 458, 462, 0, 551,
	0, 0, 1423, 0, 316, 1428, 766, 0, 772, 0,
	778, 1427, 527, 0, 768, 769, 774, 247, 635, 550,
	621, 0, 0, 0, 412, 0, 0, 0, 0, 0,
	0, 0, 255, 0, 0, 0, 1429, 770, 767, 771,
	777, 765, 775, 762, 773, 0, 449, 383, 600, 476,
	254, 300, 287, 329, 371, 483, 0, 0, 361, 531,
	296, 385, 0, 275, 418, 0, 507, 382, 0, 490,
	510, 0, 402, 281, 441, 497, 498, 759, 764, 0,
	780, 0, 285, 286, 407, 267, 415, 612, 578, 470,
	428, 426, 0, 393, 450, 607, 0, 0, 315, 0,
	310, 406, 546, 273, 525, 444, 411, 365, 473, 502,
	312, 297, 298, 341, 443, 331, 283, 536, 575, 579,
	577, 573, 570, 574, 571, 572, 576, 332, 569, 0,
	544, 553, 587, 567, 595, 552, 592, 562, 307, 591,
	556, 555, 601, 582, 583, 537, 597, 568, 566, 559,
	558, 554, 0, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 243, 0, 244, 245, 246, 248, 249,
	250, 758, 251, 252, 253, 256, 257, 258, 260, 620,
	261, 262, 263, 264, 265, 266, 557, 760, 268, 269,
	270, 271, 272, 274, 276, 277, 278, 279, 280, 282,
	284, 0, 0, 0, 763, 0, 0, 0, 288, 289,
	290, 291, 292, 293, 0, 294, 295, 299, 301, 302,
	303, 304, 305, 306, 309, 0, 311, 313, 0, 314,
	317, 0, 318, 319, 320, 321, 322, 323, 324, 325,
	561, 326, 0, 327, 328, 330, 0, 333, 334, 335,
	336, 337, 0, 338, 563, 564, 339, 340, 342, 343,
	344, 346, 347, 348, 349, 350, 351, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 360, 362, 0, 363,
	364, 367, 368, 369, 370, 0, 372, 580, 0, 373,
	374, 375, 0, 0, 376, 377, 378, 379, 380, 381,
	384, 581, 386, 387, 388, 389, 390, 391, 392, 622,
	394, 395, 396, 397, 398, 399, 400, 584, 585, 401,
	403, 404, 586, 588, 589, 776, 419, 420, 421, 422,
	423, 424, 425, 427, 0, 429, 430, 431, 590, 432,
	433, 434, 435, 0, 436, 437, 438, 439, 440, 442,
	445, 446, 447, 448, 0, 451, 452, 453, 454, 455,
	456, 457, 459, 460, 461, 463, 464, 465, 623, 466,
	467, 468, 469, 593, 471, 472, 624, 474, 475, 477,
	478, 479, 480, 481, 482, 633, 0, 484, 594, 485,
	486, 487, 488, 489, 0, 491, 492, 493, 494, 495,
	496, 499, 500, 501, 503, 504, 596, 505, 506, 0,
	508, 509, 779, 511, 512, 513, 514, 515, 0, 634,
	516, 598, 517, 599, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 0, 528, 529, 530, 532, 533, 534,
	535, 538, 539, 540, 541, 542, 0, 543, 545, 547,
	625, 602, 603, 604, 605, 606, 608, 609, 610, 611,
	548, 549, 565, 416, 410, 366, 408, 409, 413, 414,
	417, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	754, 0, 1431, 932, 0, 0, 0, 0, 1034, 0,
	0, 0, 0, 0, 0, 0, 1432, 1433, 242, 0,
	259, 761, 0, 308, 345, 560, 0, 0, 405, 0,
	458, 462, 0, 551, 0, 0, 0, 0, 316, 1428,
	766, 0, 772, 0, 778, 1427, 527, 0, 768, 769,
	774, 247, 635, 550, 621, 0, 0, 0, 412, 0,
	0, 0, 0, 0, 0, 0, 255, 0, 0, 0,
	1429, 770, 767, 771, 777, 765, 775, 762, 773, 0,
	449, 383, 600, 476, 254, 300, 287, 329, 371, 483,
	0, 0, 361, 531, 296, 385, 0, 275, 418, 0,
	507, 382, 0, 490, 510, 0, 402, 281, 441, 497,
	498, 759, 764, 0, 780, 0, 285, 286, 407, 267,
	415, 612, 578, 470, 428, 426, 0, 393, 450, 607,
	0, 0, 315, 0, 310, 406, 546, 273, 525, 444,
	411, 365, 473, 502, 312, 297, 298, 341, 443, 331,
	283, 536, 575, 579, 577, 573, 570, 574, 571, 572,
	576, 332, 569, 0, 544, 553, 587, 567, 595, 552,
	592, 562, 307, 591, 556, 555, 601, 582, 583, 537,
	597, 568, 566, 559, 558, 554, 0, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 243, 0, 244,
	245, 246, 248, 249, 250, 758, 251, 252, 253, 256,
	257, 258, 260, 620, 261, 262, 263, 264, 265, 266,
	557, 760, 268, 269, 270, 271, 272, 274, 276, 277,
	278, 279, 280, 282, 284, 0, 0, 0, 763, 0,
	0, 0, 288, 289, 290, 291, 292, 293, 0, 294,
	295, 299, 301, 302, 303, 304, 305, 306, 309, 0,
	311, 313, 0, 314, 317, 0, 318, 319, 320, 321,
	322, 323, 324, 325, 561, 326, 0, 327, 328, 330,
	0, 333, 334, 335, 336, 337, 0, 338, 563, 564,
	339, 340, 342, 343, 344, 346, 347, 348, 349, 350,
	351, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	360, 362, 0, 363, 364, 367, 368, 369, 370, 0,
	372, 580, 0, 373, 374, 375, 0, 0, 376, 377,
	378, 379, 380, 381, 384, 581, 386, 387, 388, 389,
	390, 391, 392, 622, 394, 395, 396, 397, 398, 399,
	400, 584, 585, 401, 403, 404, 586, 588, 589, 776,
	419, 420, 421, 422, 423, 424, 425, 427, 0, 429,
	430, 431, 590, 432, 433, 434, 435, 0, 436, 437,
	438, 439, 440, 442, 445, 446, 447, 448, 0, 451,
	452, 453, 454, 455, 456, 457, 459, 460, 461, 463,
	464, 465, 623, 466, 467, 468, 469, 593, 471, 472,
	624, 474, 475, 477, 478, 479, 480, 481, 482, 633,
	0, 484, 594, 485, 486, 487, 488, 489, 0, 491,
	492, 493, 494, 495, 496, 499, 500, 501, 503, 504,
	596, 505, 506, 0, 508, 509, 779, 511, 512, 513,
	514, 515, 0, 634, 516, 598, 517, 599, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 0, 528, 529,
	530, 532, 533, 534, 535, 538, 539, 540, 541, 542,
	0, 543, 545, 547, 625, 602, 603, 604, 605, 606,
	608, 609, 610, 611, 548, 549, 565, 416, 410, 366,
	408, 409, 413, 414, 417, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 816, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1432, 1433, 242, 0, 259, 761, 0, 308, 345, 560,
	0, 0, 405, 0, 458, 462, 0, 551, 0, 0,
	0, 0, 316, 0, 766, 0, 772, 0, 778, 0,
	527, 0, 768, 769, 774, 247, 635, 550, 621, 0,
	0, 0, 412, 0, 0, 0, 0, 0, 0, 0,
	255, 0, 0, 0, 0, 770, 767, 771, 777, 765,
	775, 762, 773, 0, 449, 383, 600, 476, 254, 300,
	287, 329, 371, 483, 0, 0, 361, 531, 296, 385,
	0, 275, 418, 0, 507, 382, 0, 490, 510, 0,
	402, 281, 441, 497, 498, 759, 764, 0, 780, 0,
	285, 286, 407, 267, 415, 612, 578, 470, 428, 426,
	0, 393, 450, 607, 0, 0, 315, 0, 310, 406,
	546, 273, 525, 444, 411, 365, 473, 502, 312, 297,
	298, 341, 443, 331, 283, 536, 575, 579, 577, 573,
	570, 574, 571, 572, 576, 332, 569, 0, 544, 553,
	587, 567, 595, 552, 592, 562, 307, 591, 556, 555,
	601, 582, 583, 537, 597, 568, 566, 559, 558, 554,
	0, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 243, 0, 244, 245, 246, 248, 249, 250, 758,
	251, 252, 253, 256, 257, 258, 260, 620, 261, 262,
	263, 264, 265, 266, 557, 760, 268, 269, 270, 271,
	272, 274, 276, 277, 278, 279, 280, 282, 284, 0,
	0, 0, 763, 0, 0, 0, 288, 289, 290, 291,
	292, 293, 0, 294, 295, 299, 301, 302, 303, 304,
	305, 306, 309, 0, 311, 313, 0, 314, 317, 0,
	318, 319, 320, 321, 322, 323, 324, 325, 561, 326,
	0, 327, 328, 330, 0, 333, 334, 335, 336, 337,
	0, 338, 563, 564, 339, 340, 342, 343, 344, 346,
	347, 348, 349, 350, 351, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 360, 362, 0, 363, 364, 367,
	368, 369, 370, 0, 372, 580, 0, 373, 374, 375,
	0, 0, 376, 377, 378, 379, 380, 381, 384, 581,
	386, 387, 388, 389, 390, 391, 392, 622, 394, 395,
	396, 397, 398, 399, 400, 584, 585, 401, 403, 404,
	586, 588, 589, 776, 419, 420, 421, 422, 423, 424,
	425, 427, 0, 429, 430, 431, 590, 432, 433, 434,
	435, 0, 436, 437, 438, 439, 440, 442, 445, 446,
	447, 448, 0, 451, 452, 453, 454, 455, 456, 457,
	459, 460, 461, 463, 464, 465, 623, 466, 467, 468,
	469, 593, 471, 472, 624, 474, 475, 477, 478, 479,
	480, 481, 482, 633, 0, 484, 594, 485, 486, 487,
	488, 489, 0, 491, 492, 493, 494, 495, 496, 499,
	500, 501, 503, 504, 596, 505, 506, 0, 508, 509,
	779, 511, 512, 513, 514, 515, 0, 634, 516, 598,
	517, 599, 518, 519, 520, 521, 522, 523, 524, 526,
	0, 0, 528, 529, 530, 532, 533, 534, 535, 538,
	539, 540, 541, 542, 0, 543, 545, 547, 625, 602,
	603, 604, 605, 606, 608, 609, 610, 611, 548, 549,
	565, 416, 410, 366, 408, 409, 413, 414, 417, 229,
	0, 0, 0, 0, 0, 0, 723, 0, 0, 0,
	0, 0, 0, 734, 735, 736, 0, 242, 0, 259,
	0, 4754, 308, 345, 560, 0, 0, 405, 0, 458,
	462, 0, 551, 0, 0, 0, 0, 316, 0, 0,
	0, 0, 0, 0, 0, 527, 0, 0, 0, 0,
	247, 635, 550, 621, 0, 0, 0, 412, 0, 0,
	0, 0, 0, 0, 0, 255, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 449,
	383, 600, 476, 254, 300, 287, 329, 371, 483, 0,
	0, 361, 531, 296, 385, 0, 275, 418, 0, 507,
	382, 0, 490, 510, 0, 402, 281, 441, 497, 498,
	0, 0, 0, 0, 0, 285, 286, 407, 267, 415,
	612, 578, 470, 428, 426, 0, 393, 450, 607, 0,
	0, 315, 0, 310, 406, 546, 273, 525, 444, 411,
	365, 473, 502, 312, 297, 298, 341, 443, 331, 283,
	536, 575, 579, 577, 573, 570, 574, 571, 572, 576,
	332, 569, 0, 544, 553, 587, 567, 595, 552, 592,
	562, 307, 591, 556, 555, 601, 582, 583, 537, 597,
	568, 566, 559, 558, 554, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 243, 0, 244, 245,
	246, 248, 249, 250, 0, 251, 252, 253, 256, 257,
	258, 260, 620, 261, 262, 263, 264, 265, 266, 557,
	0, 268, 269, 270, 271, 272, 274, 276, 277, 278,
	279, 280, 282, 284, 0, 0, 0, 0, 0, 0,
	0, 288, 289, 290, 291, 292, 293, 0, 294, 295,
	299, 301, 302, 303, 304, 305, 306, 309, 0, 311,
	313, 0, 314, 317, 0, 318, 319, 320, 321, 322,
	323, 324, 325, 561, 326, 0, 327, 328, 330, 0,
	333, 334, 335, 336, 337, 0, 338, 563, 564, 339,
	340, 342, 343, 344, 346, 347, 348, 349, 350, 351,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 360,
	362, 0, 363, 364, 367, 368, 369, 370, 0, 372,
	580, 0, 373, 374, 375, 0, 0, 376, 377, 378,
	379, 380, 381, 384, 581, 386, 387, 388, 389, 390,
	391, 392, 622, 394, 395, 396, 397, 398, 399, 400,
	584, 585, 401, 403, 404, 586, 588, 589, 0, 419,
	420, 421, 422, 423, 424, 425, 427, 0, 429, 430,
	431, 590, 432, 433, 434, 435, 0, 436, 437, 438,
	439, 440, 442, 445, 446, 447, 448, 0, 451, 452,
	453, 454, 455, 456, 457, 459, 460, 461, 463, 464,
	465, 623, 466, 467, 468, 469, 593, 471, 472, 624,
	474, 475, 477, 478, 479, 480, 481, 482, 633, 0,
	484, 594, 485, 486, 487, 488, 489, 0, 491, 492,
	493, 494, 495, 496, 499, 500, 501, 503, 504, 596,
	505, 506, 0, 508, 509, 0, 511, 512, 513, 514,
	515, 0, 634, 516, 598, 517, 599, 518, 519, 520,
	521, 522, 523, 524, 526, 0, 0, 528, 529, 530,
	532, 533, 534, 535, 538, 539, 540, 541, 542, 0,
	543, 545, 547, 625, 602, 603, 604, 605, 606, 608,
	609, 610, 611, 548, 549, 565, 416, 410, 366, 408,
	409, 413, 414, 417, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	731, 732, 733, 0, 0, 0, 0, 0, 229, 725,
	726, 727, 728, 729, 730, 723, 0, 0, 0, 0,
	0, 0, 734, 735, 736, 0, 242, 0, 259, 0,
	0, 308, 345, 560, 0, 0, 405, 0, 458, 462,
	0, 551, 0, 0, 0, 0, 316, 0, 0, 0,
	0, 0, 0, 0, 527, 0, 0, 0, 0, 247,
	635, 550, 621, 0, 0, 0, 4727, 0, 0, 0,
	0, 0, 0, 0, 255, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 449, 383,
	600, 476, 254, 300, 287, 329, 371, 483, 0, 0,
	361, 531, 296, 385, 0, 275, 418, 0, 507, 382,
	0, 490, 510, 0, 402, 281, 441, 497, 498, 0,
	0, 0, 0, 0, 285, 286, 407, 267, 415, 612,
	578, 470, 428, 426, 0, 393, 450, 607, 0, 0,
	315, 0, 310, 406, 546, 273, 525, 444, 411, 365,
	473, 502, 312, 297, 298, 341, 443, 331, 283, 536,
	575, 579, 577, 573, 570, 574, 571, 572, 576, 332,
	569, 0, 544, 553, 587, 567, 595, 552, 592, 562,
	307, 591, 556, 555, 601, 582, 583, 537, 597, 568,
	566, 559, 558, 554, 0, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 243, 0, 244, 245, 246,
	248, 249, 250, 0, 251, 252, 253, 256, 257, 258,
	260, 620, 261, 262, 263, 264, 265, 266, 557, 0,
	268, 269, 270, 271, 272, 274, 276, 277, 278, 279,
	280, 282, 284, 0, 0, 0, 0, 0, 0, 0,
	288, 289, 290, 291, 292, 293, 0, 294, 295, 299,
	301, 302, 303, 304, 305, 306, 309, 0, 311, 313,
	0, 314, 317, 0, 318, 319, 320, 321, 322, 323,
	324, 325, 561, 326, 0, 327, 328, 330, 0, 333,
	334, 335, 336, 337, 0, 338, 563, 564, 339, 340,
	342, 343, 344, 346, 347, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 360, 362,
	0, 363, 364, 367, 368, 369, 370, 0, 372, 580,
	0, 373, 374, 375, 0, 0, 376, 377, 378, 379,
	380, 381, 384, 581, 386, 387, 388, 389, 390, 391,
	392, 622, 394, 395, 396, 397, 398, 399, 400, 584,
	585, 401, 403, 404, 586, 588, 589, 0, 419, 420,
	421, 422, 423, 424, 425, 427, 0, 429, 430, 431,
	590, 432, 433, 434, 435, 0, 436, 437, 438, 439,
	440, 442, 445, 446, 447, 448, 0, 451, 452, 453,
	454, 455, 456, 457, 459, 460, 461, 463, 464, 465,
	623, 466, 467, 468, 469, 593, 471, 472, 624, 474,
	475, 477, 478, 479, 480, 481, 482, 633, 0, 484,
	594, 485, 486, 487, 488, 489, 0, 491, 492, 493,
	494, 495, 496, 499, 500, 501, 503, 504, 596, 505,
	506, 0, 508, 509, 0, 511, 512, 513, 514, 515,
	0, 634, 516, 598, 517, 599, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 0, 528, 529, 530, 532,
	533, 534, 535, 538, 539, 540, 541, 542, 0, 543,
	545, 547, 625, 602, 603, 604, 605, 606, 608, 609,
	610, 611, 548, 549, 565, 416, 410, 366, 408, 409,
	413, 414, 417, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 731,
	732, 733, 0, 0, 0, 0, 0, 229, 725, 726,
	727, 728, 729, 730, 723, 0, 0, 0, 0, 0,
	0, 734, 735, 736, 0, 242, 0, 259, 0, 0,
	308, 345, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 0, 247, 635,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 0, 0,
	0, 0, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 0, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 3182, 265, 266, 557, 0, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 3183, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 0, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 0, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 508, 509, 0, 511, 512, 513, 514, 515, 0,
	634, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 731, 732,
	733, 0, 0, 0, 0, 0, 229, 725, 726, 727,
	728, 729, 730, 723, 0, 0, 0, 0, 0, 0,
	734, 735, 736, 0, 242, 0, 259, 0, 0, 308,
	345, 560, 0, 0, 405, 0, 458, 462, 0, 551,
	0, 0, 0, 0, 316, 0, 0, 0, 0, 0,
	0, 0, 527, 0, 0, 0, 0, 247, 635, 550,
	621, 0, 0, 0, 412, 0, 0, 0, 0, 0,
	0, 0, 255, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 449, 383, 600, 476,
	254, 300, 287, 329, 371, 483, 0, 0, 361, 531,
	296, 385, 0, 275, 418, 0, 507, 382, 0, 490,
	510, 0, 402, 281, 441, 497, 498, 0, 0, 0,
	0, 0, 285, 286, 407, 267, 415, 612, 578, 470,
	428, 426, 0, 393, 450, 607, 0, 0, 315, 0,
	310, 406, 546, 273, 525, 444, 411, 365, 473, 502,
	312, 297, 298, 341, 443, 331, 283, 536, 575, 579,
	577, 573, 570, 574, 571, 572, 576, 332, 569, 0,
	544, 553, 587, 567, 595, 552, 592, 562, 307, 591,
	556, 555, 601, 582, 583, 537, 597, 568, 566, 559,
	558, 554, 0, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 243, 0, 244, 245, 246, 248, 249,
	250, 0, 251, 252, 253, 256, 257, 258, 260, 620,
	261, 262, 263, 719, 265, 266, 557, 0, 268, 269,
	270, 271, 272, 274, 276, 277, 278, 279, 280, 282,
	284, 0, 0, 0, 0, 0, 0, 0, 288, 289,
	290, 291, 292, 293, 0, 294, 295, 299, 301, 302,
	303, 304, 305, 306, 309, 0, 311, 313, 0, 314,
	317, 0, 318, 319, 320, 321, 322, 323, 324, 325,
	561, 720, 0, 327, 328, 330, 0, 333, 334, 335,
	336, 337, 0, 338, 563, 564, 339, 340, 342, 343,
	344, 346, 347, 348, 349, 350, 351, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 360, 362, 0, 363,
	364, 367, 368, 369, 370, 0, 372, 580, 0, 373,
	374, 375, 0, 0, 376, 377, 378, 379, 380, 381,
	384, 581, 386, 387, 388, 389, 390, 391, 392, 622,
	394, 395, 396, 397, 398, 399, 400, 584, 585, 401,
	403, 404, 586, 588, 589, 0, 419, 420, 421, 422,
	423, 424, 425, 427, 0, 429, 430, 431, 590, 432,
	433, 434, 435, 0, 436, 437, 438, 439, 440, 442,
	445, 446, 447, 448, 0, 451, 452, 453, 454, 455,
	456, 457, 459, 460, 461, 463, 464, 465, 623, 466,
	467, 468, 469, 593, 471, 472, 624, 474, 475, 477,
	478, 479, 480, 481, 482, 633, 0, 484, 594, 485,
	486, 487, 488, 489, 0, 491, 492, 493, 494, 495,
	496, 499, 500, 501, 503, 504, 596, 505, 506, 0,
	508, 509, 0, 511, 512, 513, 514, 515, 0, 634,
	516, 598, 517, 599, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 0, 528, 529, 530, 532, 533, 534,
	535, 538, 539, 540, 541, 542, 0, 543, 545, 547,
	625, 602, 603, 604, 605, 606, 608, 609, 610, 611,
	548, 549, 565, 416, 410, 366, 408, 409, 413, 414,
	417, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 816, 0, 0, 731, 732, 733,
	0, 0, 0, 0, 0, 0, 725, 726, 727, 728,
	729, 730, 242, 0, 259, 761, 0, 308, 345, 560,
	0, 0, 405, 0, 458, 462, 0, 551, 0, 0,
	0, 0, 316, 0, 766, 0, 772, 0, 778, 0,
	527, 0, 768, 769, 774, 247, 635, 550, 621, 0,
	0, 0, 412, 0, 0, 0, 0, 0, 0, 0,
	255, 0, 0, 0, 0, 770, 767, 771, 777, 765,
	775, 762, 773, 0, 449, 383, 600, 476, 254, 300,
	287, 329, 371, 483, 0, 0, 361, 531, 296, 385,
	0, 275, 418, 1053, 507, 382, 0, 490, 510, 0,
	402, 281, 441, 497, 498, 759, 764, 0, 780, 0,
	285, 286, 407, 267, 415, 612, 578, 470, 428, 426,
	0, 393, 450, 607, 0, 0, 315, 0, 310, 406,
	546, 273, 525, 444, 411, 365, 473, 502, 312, 297,
	298, 341, 443, 331, 283, 536, 1081, 1083, 1079, 1075,
	1076, 1041, 1042, 1082, 1078, 332, 2848, 0, 544, 553,
	587, 567, 595, 552, 592, 562, 307, 591, 556, 555,
	601, 582, 583, 537, 597, 568, 566, 559, 558, 554,
	0, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 243, 0, 244, 245, 246, 248, 249, 250, 758,
	251, 252, 253, 256, 257, 258, 260, 620, 261, 262,
	263, 264, 265, 266, 1065, 1043, 268, 269, 270, 271,
	272, 274, 276, 277, 278, 279, 280, 282, 284, 1054,
	1044, 1049, 1055, 1045, 1046, 1050, 288, 289, 290, 291,
	292, 293, 0, 294, 295, 299, 301, 302, 303, 304,
	305, 306, 309, 0, 311, 313, 0, 314, 317, 0,
	318, 319, 320, 321, 322, 323, 324, 325, 1057, 326,
	0, 327, 328, 330, 0, 333, 334, 335, 336, 337,
	0, 338, 1066, 564, 339, 340, 342, 343, 344, 346,
	347, 348, 349, 350, 351, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 360, 362, 0, 363, 364, 367,
	368, 369, 370, 0, 372, 1067, 0, 373, 374, 375,
	1047, 1048, 376, 377, 378, 379, 380, 381, 384, 1080,
	386, 387, 388, 389, 390, 391, 392, 622, 394, 395,
	396, 397, 398, 399, 400, 584, 1058, 401, 403, 404,
	1064, 588, 1059, 776, 419, 420, 421, 422, 423, 424,
	425, 427, 0, 429, 430, 431, 1060, 432, 433, 434,
	435, 0, 436, 437, 438, 439, 440, 442, 445, 446,
	447, 448, 0, 451, 452, 453, 454, 455, 456, 457,
	459, 460, 461, 463, 464, 465, 623, 466, 467, 468,
	469, 593, 471, 472, 624, 474, 475, 477, 478, 479,
	480, 481, 482, 633, 1051, 484, 594, 485, 486, 487,
	488, 489, 0, 491, 492, 493, 494, 495, 496, 499,
	500, 501, 503, 504, 1061, 505, 506, 1052, 508, 509,
	779, 511, 512, 513, 514, 515, 0, 634, 516, 1062,
	517, 1063, 518, 519, 520, 521, 522, 523, 524, 526,
	0, 0, 528, 529, 530, 532, 533, 534, 535, 538,
	539, 540, 541, 542, 0, 543, 545, 547, 625, 602,
	1068, 1069, 1072, 1070, 1071, 1073, 1074, 1084, 548, 549,
	565, 416, 410, 366, 408, 409, 413, 414, 417, 0,
	0, 816, 1056, 1020, 932, 0, 1025, 1026, 0, 1034,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 242,
	0, 259, 761, 0, 308, 345, 560, 0, 0, 405,
	0, 458, 462, 0, 551, 0, 0, 0, 0, 316,
	1023, 766, 0, 772, 1024, 778, 1022, 527, 0, 768,
	769, 774, 247, 1100, 550, 621, 0, 0, 0, 412,
	0, 0, 0, 0, 0, 0, 0, 255, 0, 0,
	0, 0, 770, 767, 771, 777, 765, 775, 762, 773,
	0, 449, 383, 600, 476, 254, 300, 287, 329, 371,
	483, 0, 0, 361, 531, 296, 385, 0, 275, 418,
	0, 507, 382, 0, 490, 510, 0, 402, 281, 441,
	497, 498, 759, 764, 0, 780, 0, 285, 286, 407,
	267, 415, 612, 578, 470, 428, 426, 0, 393, 450,
	607, 0, 0, 315, 0, 310, 406, 546, 273, 525,
	444, 411, 365, 473, 502, 312, 297, 298, 341, 443,
	331, 283, 536, 575, 579, 577, 573, 570, 574, 571,
	572, 576, 332, 5326, 0, 544, 1086, 1097, 1094, 1099,
	1085, 1098, 1092, 880, 591, 1089, 1088, 1102, 1095, 1096,
	537, 1101, 1040, 1093, 1091, 1090, 1087, 0, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 243, 0,
	244, 245, 246, 248, 249, 250, 758, 251, 252, 253,
	256, 257, 258, 260, 620, 261, 262, 263, 264, 265,
	266, 557, 760, 268, 269, 270, 271, 272, 274, 276,
	277, 278, 279, 280, 282, 284, 0, 0, 0, 763,
	0, 0, 0, 288, 289, 290, 291, 292, 293, 0,
	294, 295, 299, 301, 302, 303, 304, 305, 306, 309,
	0, 311, 313, 0, 314, 317, 0, 318, 319, 320,
	321, 322, 323, 324, 325, 561, 326, 0, 327, 328,
	330, 0, 333, 334, 335, 336, 337, 0, 338, 563,
	564, 339, 340, 342, 343, 344, 346, 347, 348, 349,
	350, 351, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 360, 362, 0, 363, 364, 367, 368, 369, 370,
	0, 372, 580, 0, 373, 374, 375, 0, 0, 376,
	377, 378, 379, 380, 381, 384, 581, 386, 387, 388,
	389, 390, 391, 392, 622, 394, 395, 396, 397, 398,
	399, 400, 584, 585, 401, 403, 404, 586, 588, 589,
	776, 419, 420, 421, 422, 423, 424, 425, 427, 0,
	429, 430, 431, 590, 432, 433, 434, 435, 0, 436,
	437, 438, 439, 440, 442, 445, 446, 447, 448, 0,
	451, 452, 453, 454, 455, 456, 457, 459, 460, 461,
	463, 464, 465, 623, 466, 467, 468, 469, 593, 471,
	472, 624, 474, 475, 477, 478, 479, 480, 481, 482,
	633, 0, 484, 594, 485, 486, 487, 488, 489, 0,
	491, 492, 493, 494, 495, 496, 499, 500, 501, 503,
	504, 596, 505, 506, 0, 508, 509, 779, 511, 512,
	513, 514, 515, 0, 634, 516, 598, 517, 599, 518,
	519, 520, 521, 522, 523, 524, 526, 0, 0, 528,
	529, 530, 532, 533, 534, 535, 538, 539, 540, 541,
	542, 0, 543, 545, 547, 625, 602, 603, 604, 605,
	606, 608, 609, 610, 611, 548, 549, 565, 416, 410,
	366, 408, 409, 413, 414, 417, 229, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 242, 0, 259, 0, 0, 308,
	345, 560, 0, 0, 405, 0, 458, 462, 0, 551,
	0, 0, 0, 0, 316, 0, 0, 0, 0, 0,
	0, 0, 527, 0, 0, 0, 0, 247, 635, 550,
	621, 0, 0, 0, 412, 0, 0, 0, 0, 0,
	0, 0, 255, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 449, 383, 600, 476,
	254, 300, 287, 329, 371, 483, 0, 0, 361, 531,
	296, 385, 0, 275, 418, 0, 507, 382, 0, 490,
	510, 0, 402, 281, 441, 497, 498, 0, 0, 0,
	0, 0, 285, 286, 407, 267, 415, 612, 578, 470,
	428, 426, 0, 393, 450, 607, 0, 0, 315, 0,
	310, 406, 546, 273, 525, 444, 411, 365, 473, 502,
	312, 297, 298, 341, 443, 331, 283, 536, 575, 579,
	577, 573, 570, 574, 571, 572, 576, 332, 569, 0,
	544, 553, 587, 567, 595, 552, 592, 562, 307, 591,
	556, 555, 601, 582, 583, 537, 597, 568, 566, 559,
	558, 554, 0, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 243, 0, 244, 245, 246, 248, 249,
	250, 0, 251, 252, 253, 256, 257, 258, 260, 620,
	261, 262, 263, 264, 265, 266, 557, 0, 268, 269,
	270, 271, 272, 274, 276, 277, 278, 279, 280, 282,
	284, 0, 0, 0, 0, 0, 0, 0, 288, 289,
	290, 291, 292, 293, 0, 294, 295, 299, 301, 302,
	303, 304, 305, 306, 309, 0, 311, 313, 0, 314,
	317, 0, 318, 319, 320, 321, 322, 323, 324, 325,
	561, 326, 0, 327, 328, 330, 0, 333, 334, 335,
	336, 337, 0, 338, 563, 564, 339, 340, 342, 343,
	344, 346, 347, 348, 349, 350, 351, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 360, 362, 0, 363,
	364, 367, 368, 369, 370, 0, 372, 580, 0, 373,
	374, 375, 0, 0, 376, 377, 378, 379, 380, 381,
	384, 581, 386, 387, 388, 389, 390, 391, 392, 622,
	394, 395, 396, 397, 398, 399, 400, 584, 585, 401,
	403, 404, 586, 588, 589, 0, 419, 420, 421, 422,
	423, 424, 425, 427, 0, 429, 430, 431, 590, 432,
	433, 434, 435, 0, 436, 437, 438, 439, 440, 442,
	445, 446, 447, 448, 0, 451, 452, 453, 454, 455,
	456, 457, 459, 460, 461, 463, 464, 465, 623, 466,
	467, 468, 469, 593, 471, 472, 624, 474, 475, 477,
	478, 479, 480, 481, 482, 633, 0, 484, 594, 485,
	486, 487, 488, 489, 0, 491, 492, 493, 494, 495,
	496, 499, 500, 501, 503, 504, 596, 505, 506, 0,
	508, 509, 0, 511, 512, 513, 514, 515, 0, 634,
	516, 598, 517, 599, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 0, 528, 529, 530, 532, 533, 534,
	535, 538, 539, 540, 541, 542, 0, 543, 545, 547,
	625, 602, 603, 604, 605, 606, 608, 609, 610, 611,
	548, 549, 565, 416, 410, 366, 408, 409, 413, 414,
	417, 229, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 242,
	0, 259, 0, 0, 308, 345, 560, 0, 5165, 405,
	0, 458, 462, 0, 551, 0, 0, 0, 0, 316,
	0, 0, 0, 0, 0, 0, 0, 527, 0, 0,
	0, 0, 247, 635, 550, 621, 0, 0, 0, 412,
	0, 0, 0, 0, 0, 0, 0, 255, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 449, 383, 600, 476, 254, 300, 287, 329, 371,
	483, 0, 0, 361, 531, 296, 385, 0, 275, 418,
	0, 507, 382, 0, 490, 510, 0, 402, 281, 441,
	497, 498, 0, 0, 0, 0, 0, 285, 286, 407,
	267, 415, 612, 578, 470, 428, 426, 0, 393, 450,
	607, 0, 0, 315, 0, 310, 406, 546, 273, 525,
	444, 411, 365, 473, 502, 312, 297, 298, 341, 443,
	331, 283, 536, 575, 579, 577, 573, 570, 574, 571,
	572, 576, 332, 569, 0, 544, 553, 587, 567, 595,
	552, 592, 562, 307, 591, 556, 555, 601, 582, 583,
	537, 597, 568, 566, 559, 558, 554, 0, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 243, 0,
	244, 245, 246, 248, 249, 250, 0, 251, 252, 253,
	256, 257, 258, 260, 620, 261, 262, 263, 264, 265,
	266, 557, 0, 268, 269, 270, 271, 272, 274, 276,
	277, 278, 279, 280, 282, 284, 0, 0, 0, 0,
	0, 0, 0, 288, 289, 290, 291, 292, 293, 0,
	294, 295, 299, 301, 302, 303, 304, 305, 306, 309,
	0, 311, 313, 0, 314, 317, 0, 318, 319, 320,
	321, 322, 323, 324, 325, 561, 326, 0, 327, 328,
	330, 0, 333, 334, 335, 336, 337, 0, 338, 563,
	564, 339, 340, 342, 343, 344, 346, 347, 348, 349,
	350, 351, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 360, 362, 0, 363, 364, 367, 368, 369, 370,
	0, 372, 580, 0, 373, 374, 375, 0, 0, 376,
	377, 378, 379, 380, 381, 384, 581, 386, 387, 388,
	389, 390, 391, 392, 622, 394, 395, 396, 397, 398,
	399, 400, 584, 585, 401, 403, 404, 586, 588, 589,
	0, 419, 420, 421, 422, 423, 424, 425, 427, 0,
	429, 430, 431, 590, 432, 433, 434, 435, 0, 436,
	437, 438, 439, 440, 442, 445, 446, 447, 448, 0,
	451, 452, 453, 454, 455, 456, 457, 459, 460, 461,
	463, 464, 465, 623, 466, 467, 468, 469, 593, 471,
	472, 624, 474, 475, 477, 478, 479, 480, 481, 482,
	633, 0, 484, 594, 485, 486, 487, 488, 489, 0,
	491, 492, 493, 494, 495, 496, 499, 500, 501, 503,
	504, 596, 505, 506, 0, 508, 509, 0, 511, 512,
	513, 514, 515, 0, 634, 516, 598, 517, 599, 518,
	519, 520, 521, 522, 523, 524, 526, 0, 0, 528,
	529, 530, 532, 533, 534, 535, 538, 539, 540, 541,
	542, 0, 543, 545, 547, 625, 602, 603, 604, 605,
	606, 608, 609, 610, 611, 548, 549, 565, 416, 410,
	366, 408, 409, 413, 414, 417, 229, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 242, 0, 259, 0, 0, 308,
	345, 560, 0, 5025, 405, 0, 458, 462, 0, 551,
	0, 0, 0, 0, 316, 0, 0, 0, 0, 0,
	0, 0, 527, 0, 0, 0, 0, 247, 635, 550,
	621, 0, 0, 0, 412, 0, 0, 0, 0, 0,
	0, 0, 255, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 449, 383, 600, 476,
	254, 300, 287, 329, 371, 483, 0, 0, 361, 531,
	296, 385, 0, 275, 418, 0, 507, 382, 0, 490,
	510, 0, 402, 281, 441, 497, 498, 0, 0, 0,
	0, 0, 285, 286, 407, 267, 415, 612, 578, 470,
	428, 426, 0, 393, 450, 607, 0, 0, 315, 0,
	310, 406, 546, 273, 525, 444, 411, 365, 473, 502,
	312, 297, 298, 341, 443, 331, 283, 536, 575, 579,
	577, 573, 570, 574, 571, 572, 576, 332, 569, 0,
	544, 553, 587, 567, 595, 552, 592, 562, 307, 591,
	556, 555, 601, 582, 583, 537, 597, 568, 566, 559,
	558, 554, 0, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 243, 0, 244, 245, 246, 248, 249,
	250, 0, 251, 252, 253, 256, 257, 258, 260, 620,
	261, 262, 263, 264, 265, 266, 557, 0, 268, 269,
	270, 271, 272, 274, 276, 277, 278, 279, 280, 282,
	284, 0, 0, 0, 0, 0, 0, 0, 288, 289,
	290, 291, 292, 293, 0, 294, 295, 299, 301, 302,
	303, 304, 305, 306, 309, 0, 311, 313, 0, 314,
	317, 0, 318, 319, 320, 321, 322, 323, 324, 325,
	561, 326, 0, 327, 328, 330, 0, 333, 334, 335,
	336, 337, 0, 338, 563, 564, 339, 340, 342, 343,
	344, 346, 347, 348, 349, 350, 351, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 360, 362, 0, 363,
	364, 367, 368, 369, 370, 0, 372, 580, 0, 373,
	374, 375, 0, 0, 376, 377, 378, 379, 380, 381,
	384, 581, 386, 387, 388, 389, 390, 391, 392, 622,
	394, 395, 396, 397, 398, 399, 400, 584, 585, 401,
	403, 404, 586, 588, 589, 0, 419, 420, 421, 422,
	423, 424, 425, 427, 0, 429, 430, 431, 590, 432,
	433, 434, 435, 0, 436, 437, 438, 439, 440, 442,
	445, 446, 447, 448, 0, 451, 452, 453, 454, 455,
	456, 457, 459, 460, 461, 463, 464, 465, 623, 466,
	467, 468, 469, 593, 471, 472, 624, 474, 475, 477,
	478, 479, 480, 481, 482, 633, 0, 484, 594, 485,
	486, 487, 488, 489, 0, 491, 492, 493, 494, 495,
	496, 499, 500, 501, 503, 504, 596, 505, 506, 0,
	508, 509, 0, 511, 512, 513, 514, 515, 0, 634,
	516, 598, 517, 599, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 0, 528, 529, 530, 532, 533, 534,
	535, 538, 539, 540, 541, 542, 0, 543, 545, 547,
	625, 602, 603, 604, 605, 606, 608, 609, 610, 611,
	548, 549, 565, 416, 410, 366, 408, 409, 413, 414,
	417, 229, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 242,
	0, 259, 0, 0, 308, 345, 560, 0, 5022, 405,
	0, 458, 462, 105, 551, 0, 0, 0, 0, 316,
	0, 0, 0, 0, 0, 0, 0, 527, 0, 0,
	0, 0, 247, 635, 550, 621, 0, 0, 0, 412,
	102, 0, 0, 0, 103, 0, 0, 255, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 449, 383, 2009, 476, 254, 300, 287, 329, 371,
	483, 0, 0, 361, 531, 296, 385, 0, 275, 418,
	0, 507, 382, 0, 490, 510, 0, 402, 281, 441,
	497, 498, 0, 0, 0, 0, 0, 285, 286, 407,
	267, 415, 612, 578, 470, 428, 426, 0, 393, 450,
	607, 0, 0, 315, 0, 310, 406, 546, 273, 525,
	444, 411, 365, 473, 502, 312, 297, 298, 341, 443,
	331, 283, 536, 575, 579, 577, 573, 570, 574, 571,
	572, 576, 332, 569, 0, 544, 553, 587, 567, 595,
	552, 592, 562, 307, 591, 556, 555, 601, 582, 583,
	537, 597, 568, 566, 559, 558, 554, 0, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 243, 0,
	244, 245, 246, 248, 249, 250, 0, 251, 252, 253,
	256, 257, 258, 260, 620, 261, 262, 263, 264, 265,
	266, 557, 0, 268, 269, 270, 271, 272, 274, 276,
	277, 278, 279, 280, 282, 284, 0, 0, 0, 0,
	0, 0, 0, 288, 289, 290, 291, 292, 293, 0,
	294, 295, 299, 301, 302, 303, 304, 305, 306, 309,
	0, 311, 313, 0, 314, 317, 0, 318, 319, 320,
	321, 322, 323, 324, 325, 561, 326, 0, 327, 328,
	330, 0, 333, 334, 335, 336, 337, 0, 338, 563,
	564, 339, 340, 342, 343, 344, 346, 347, 348, 349,
	350, 351, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 360, 362, 0, 363, 364, 367, 368, 369, 370,
	0, 372, 580, 0, 373, 374, 375, 0, 0, 376,
	377, 378, 379, 380, 381, 384, 581, 386, 387, 388,
	389, 390, 391, 392, 622, 394, 395, 396, 397, 398,
	399, 400, 584, 585, 401, 403, 404, 586, 588, 589,
	0, 419, 420, 421, 422, 423, 424, 425, 427, 0,
	429, 430, 431, 590, 432, 433, 434, 435, 0, 436,
	437, 438, 439, 440, 442, 445, 446, 447, 448, 0,
	451, 452, 453, 454, 455, 456, 457, 459, 460, 461,
	463, 464, 465, 623, 466, 467, 468, 469, 593, 471,
	472, 624, 474, 475, 477, 478, 479, 480, 481, 482,
	633, 0, 484, 594, 485, 486, 487, 488, 489, 0,
	491, 492, 493, 494, 495, 496, 499, 500, 501, 503,
	504, 596, 505, 506, 0, 508, 509, 0, 511, 512,
	513, 514, 515, 0, 634, 516, 598, 517, 599, 518,
	519, 520, 521, 522, 523, 524, 526, 0, 0, 528,
	529, 530, 532, 533, 534, 535, 538, 539, 540, 541,
	542, 0, 543, 545, 547, 625, 602, 603, 604, 605,
	606, 608, 609, 610, 611, 548, 549, 565, 416, 410,
	366, 408, 409, 413, 414, 417, 754, 0, 0, 932,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 242, 0, 259, 761, 101, 308,
	345, 560, 0, 0, 405, 0, 458, 462, 0, 551,
	0, 0, 0, 0, 316, 1428, 766, 0, 772, 0,
	778, 1427, 527, 0, 768, 769, 774, 247, 635, 550,
	621, 0, 0, 0, 412, 0, 0, 0, 0, 0,
	0, 0, 255, 0, 0, 0, 1429, 770, 767, 771,
	777, 765, 775, 762, 773, 0, 449, 383, 600, 476,
	254, 300, 287, 329, 371, 483, 0, 0, 361, 531,
	296, 385, 0, 275, 418, 0, 507, 382, 0, 490,
	510, 0, 402, 281, 441, 497, 498, 759, 764, 0,
	780, 0, 285, 286, 407, 267, 415, 612, 578, 470,
	428, 426, 0, 393, 450, 607, 0, 0, 315, 0,
	310, 406, 546, 273, 525, 444, 411, 365, 473, 502,
	312, 297, 298, 341, 443, 331, 283, 536, 575, 579,
	577, 573, 570, 574, 571, 572, 576, 332, 569, 0,
	544, 553, 587, 567, 595, 552, 592, 562, 307, 591,
	556, 555, 601, 582, 583, 537, 597, 568, 566, 559,
	558, 554, 0, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 243, 0, 244, 245, 246, 248, 249,
	250, 758, 251, 252, 253, 256, 257, 258, 260, 620,
	261, 262, 263, 264, 265, 266, 557, 760, 268, 269,
	270, 271, 272, 274, 276, 277, 278, 279, 280, 282,
	284, 0, 0, 0, 763, 0, 0, 0, 288, 289,
	290, 291, 292, 293, 0, 294, 295, 299, 301, 302,
	303, 304, 305, 306, 309, 0, 311, 313, 0, 314,
	317, 0, 318, 319, 320, 321, 322, 323, 324, 325,
	561, 326, 0, 327, 328, 330, 0, 333, 334, 335,
	336, 337, 0, 338, 563, 564, 339, 340, 342, 343,
	344, 346, 347, 348, 349, 350, 351, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 360, 362, 0, 363,
	364, 367, 368, 369, 370, 0, 372, 580, 0, 373,
	374, 375, 0, 0, 376, 377, 378, 379, 380, 381,
	384, 581, 386, 387, 388, 389, 390, 391, 392, 622,
	394, 395, 396, 397, 398, 399, 400, 584, 585, 401,
	403, 404, 586, 588, 589, 776, 419, 420, 421, 422,
	423, 424, 425, 427, 0, 429, 430, 431, 590, 432,
	433, 434, 435, 0, 436, 437, 438, 439, 440, 442,
	445, 446, 447, 448, 0, 451, 452, 453, 454, 455,
	456, 457, 459, 460, 461, 463, 464, 465, 623, 466,
	467, 468, 469, 593, 471, 472, 624, 474, 475, 477,
	478, 479, 480, 481, 482, 633, 0, 484, 594, 485,
	486, 487, 488, 489, 0, 491, 492, 493, 494, 495,
	496, 499, 500, 501, 503, 504, 596, 505, 506, 0,
	508, 509, 779, 511, 512, 513, 514, 515, 0, 634,
	516, 598, 517, 599, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 0, 528, 529, 530, 532, 533, 534,
	535, 538, 539, 540, 541, 542, 0, 543, 545, 547,
	625, 602, 603, 604, 605, 606, 608, 609, 610, 611,
	548, 549, 565, 416, 410, 366, 408, 409, 413, 414,
	417, 754, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 242,
	0, 259, 761, 0, 308, 345, 560, 0, 0, 405,
	0, 458, 462, 0, 551, 0, 0, 0, 0, 316,
	0, 766, 0, 772, 0, 778, 0, 527, 0, 768,
	769, 774, 247, 635, 550, 621, 0, 0, 0, 412,
	0, 0, 0, 0, 0, 0, 0, 255, 3213, 0,
	0, 0, 770, 767, 771, 777, 765, 775, 762, 773,
	0, 449, 383, 600, 476, 254, 300, 287, 329, 371,
	483, 0, 0, 361, 531, 296, 385, 0, 275, 418,
	0, 507, 382, 0, 490, 510, 0, 402, 281, 441,
	497, 498, 759, 764, 0, 780, 0, 285, 286, 407,
	267, 415, 612, 578, 470, 428, 426, 0, 393, 450,
	607, 0, 0, 315, 0, 310, 406, 546, 273, 525,
	444, 411, 365, 473, 502, 312, 297, 298, 341, 443,
	331, 283, 536, 575, 579, 577, 573, 570, 574, 571,
	572, 576, 332, 569, 0, 544, 553, 587, 567, 595,
	552, 592, 562, 307, 591, 556, 555, 601, 582, 583,
	537, 597, 568, 566, 559, 558, 554, 0, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 243, 0,
	244, 245, 246, 248, 249, 250, 758, 251, 252, 253,
	256, 257, 258, 260, 620, 261, 262, 263, 264, 265,
	266, 557, 760, 268, 269, 270, 271, 272, 274, 276,
	277, 278, 279, 280, 282, 284, 0, 0, 751, 763,
	0, 0, 752, 288, 289, 290, 291, 292, 293, 0,
	294, 295, 299, 301, 302, 303, 304, 305, 306, 309,
	0, 311, 313, 0, 314, 317, 0, 318, 319, 320,
	321, 322, 323, 324, 325, 561, 326, 0, 327, 328,
	330, 0, 333, 334, 335, 336, 337, 0, 338, 563,
	564, 339, 340, 342, 343, 344, 346, 347, 348, 349,
	350, 351, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 360, 362, 0, 363, 364, 367, 368, 369, 370,
	0, 372, 580, 0, 373, 374, 375, 0, 0, 376,
	377, 378, 379, 380, 381, 384, 581, 386, 387, 388,
	389, 390, 391, 392, 622, 394, 395, 396, 397, 398,
	399, 400, 584, 585, 401, 403, 404, 586, 588, 589,
	776, 419, 420, 421, 422, 423, 424, 425, 427, 0,
	429, 430, 431, 590, 432, 433, 434, 435, 0, 436,
	437, 438, 439, 440, 442, 445, 446, 447, 448, 0,
	451, 452, 453, 454, 455, 456, 457, 459, 460, 461,
	463, 464, 465, 623, 466, 467, 468, 469, 593, 471,
	472, 624, 474, 475, 477, 478, 479, 480, 481, 482,
	633, 753, 484, 594, 485, 486, 487, 488, 489, 0,
	491, 492, 493, 494, 495, 496, 499, 500, 501, 503,
	504, 596, 505, 506, 0, 508, 509, 779, 511, 512,
	513, 514, 515, 0, 634, 516, 598, 517, 599, 518,
	519, 520, 521, 522, 523, 524, 526, 0, 0, 528,
	529, 530, 532, 533, 534, 535, 538, 539, 540, 541,
	542, 0, 543, 545, 547, 625, 602, 603, 604, 605,
	606, 608, 609, 610, 611, 548, 549, 565, 416, 410,
	366, 408, 409, 413, 414, 417, 754, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 242, 0, 259, 761, 0, 308,
	345, 560, 0, 0, 405, 0, 458, 462, 0, 551,
	0, 0, 0, 0, 316, 0, 766, 0, 772, 0,
	778, 0, 527, 0, 768, 769, 774, 247, 635, 550,
	621, 0, 0, 0, 412, 0, 0, 0, 0, 0,
	0, 0, 255, 0, 0, 0, 0, 770, 767, 771,
	777, 765, 775, 762, 773, 0, 449, 383, 600, 476,
	254, 300, 287, 329, 371, 483, 0, 0, 361, 531,
	296, 385, 0, 275, 418, 2266, 507, 382, 0, 490,
	510, 0, 402, 281, 441, 497, 498, 759, 764, 0,
	780, 0, 285, 286, 407, 267, 415, 612, 578, 470,
	428, 426, 0, 393, 450, 607, 0, 0, 315, 0,
	310, 406, 546, 273, 525, 444, 411, 365, 473, 502,
	312, 297, 298, 341, 443, 331, 283, 536, 575, 579,
	577, 573, 570, 574, 571, 572, 576, 332, 569, 0,
	544, 553, 587, 567, 595, 552, 592, 562, 307, 591,
	556, 555, 601, 582, 583, 537, 597, 568, 566, 559,
	558, 554, 0, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 243, 0, 244, 245, 246, 248, 249,
	250, 758, 251, 252, 253, 256, 257, 258, 260, 620,
	261, 262, 263, 264, 265, 266, 557, 760, 268, 269,
	270, 271, 272, 274, 276, 277, 278, 279, 280, 282,
	284, 0, 0, 751, 763, 0, 0, 752, 288, 289,
	290, 291, 292, 293, 0, 294, 295, 299, 301, 302,
	303, 304, 305, 306, 309, 0, 311, 313, 0, 314,
	317, 0, 318, 319, 320, 321, 322, 323, 324, 325,
	561, 326, 0, 327, 328, 330, 0, 333, 334, 335,
	336, 337, 0, 338, 563, 564, 339, 340, 342, 343,
	344, 346, 347, 348, 349, 350, 351, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 360, 362, 0, 363,
	364, 367, 368, 369, 370, 0, 372, 580, 0, 373,
	374, 375, 0, 0, 376, 377, 378, 379, 380, 381,
	384, 581, 386, 387, 388, 389, 390, 391, 392, 622,
	394, 395, 396, 397, 398, 399, 400, 584, 585, 401,
	403, 404, 586, 588, 589, 776, 419, 420, 421, 422,
	423, 424, 425, 427, 0, 429, 430, 431, 590, 432,
	433, 434, 435, 0, 436, 437, 438, 439, 440, 442,
	445, 446, 447, 448, 0, 451, 452, 453, 454, 455,
	456, 457, 459, 460, 461, 463, 464, 465, 623, 466,
	467, 468, 469, 593, 471, 472, 624, 474, 475, 477,
	478, 479, 480, 481, 482, 633, 753, 484, 594, 485,
	486, 487, 488, 489, 0, 491, 492, 493, 494, 495,
	496, 499, 500, 501, 503, 504, 596, 505, 506, 0,
	508, 509, 779, 511, 512, 513, 514, 515, 0, 634,
	516, 598, 517, 599, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 0, 528, 529, 530, 532, 533, 534,
	535, 538, 539, 540, 541, 542, 0, 543, 545, 547,
	625, 602, 603, 604, 605, 606, 608, 609, 610, 611,
	548, 549, 565, 416, 410, 366, 408, 409, 413, 414,
	417, 229, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 242,
	0, 259, 0, 0, 308, 345, 560, 0, 0, 405,
	0, 458, 462, 0, 551, 0, 0, 0, 0, 316,
	0, 0, 0, 0, 0, 0, 0, 527, 0, 0,
	0, 0, 247, 635, 550, 621, 0, 0, 0, 412,
	0, 0, 0, 672, 2282, 0, 0, 255, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 449, 383, 600, 476, 254, 300, 287, 329, 371,
	483, 0, 0, 361, 531, 296, 385, 0, 275, 418,
	0, 507, 382, 0, 490, 510, 0, 402, 281, 441,
	497, 498, 0, 0, 0, 0, 0, 285, 286, 407,
	267, 415, 612, 578, 470, 428, 426, 0, 393, 450,
	607, 0, 0, 315, 0, 310, 406, 546, 273, 525,
	444, 411, 365, 473, 502, 312, 297, 298, 341, 443,
	331, 283, 536, 575, 579, 577, 573, 570, 574, 571,
	572, 576, 332, 569, 0, 544, 553, 587, 567, 595,
	552, 592, 562, 307, 591, 556, 555, 601, 582, 583,
	537, 597, 568, 566, 559, 558, 554, 0, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 243, 0,
	244, 245, 246, 248, 249, 250, 0, 251, 252, 253,
	256, 257, 258, 260, 620, 261, 262, 263, 264, 265,
	266, 557, 0, 268, 269, 270, 271, 272, 274, 276,
	277, 278, 279, 280, 282, 284, 0, 0, 0, 2286,
	0, 0, 0, 288, 289, 290, 291, 292, 293, 0,
	294, 295, 299, 301, 302, 303, 304, 305, 306, 309,
	0, 311, 313, 0, 314, 317, 0, 318, 319, 320,
	321, 322, 323, 324, 325, 561, 326, 0, 327, 328,
	330, 0, 333, 334, 335, 336, 337, 0, 338, 563,
	564, 339, 340, 342, 343, 344, 346, 347, 348, 349,
	350, 351, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 360, 362, 0, 363, 364, 367, 368, 369, 370,
	0, 372, 580, 0, 373, 374, 375, 0, 0, 376,
	377, 378, 379, 380, 381, 384, 581, 386, 387, 388,
	389, 390, 391, 392, 622, 394, 395, 396, 397, 398,
	399, 400, 584, 585, 401, 403, 404, 586, 588, 589,
	0, 419, 420, 421, 422, 423, 424, 425, 427, 0,
	429, 430, 431, 590, 432, 433, 434, 435, 0, 436,
	437, 438, 439, 440, 442, 445, 446, 447, 448, 0,
	451, 452, 453, 454, 455, 456, 457, 459, 460, 461,
	463, 464, 465, 623, 466, 467, 468, 469, 593, 471,
	472, 624, 474, 475, 477, 478, 479, 480, 481, 482,
	633, 0, 484, 594, 485, 486, 487, 488, 489, 0,
	491, 492, 493, 494, 495, 496, 499, 500, 501, 503,
	504, 596, 505, 506, 0, 2283, 509, 0, 511, 512,
	513, 514, 515, 0, 634, 516, 598, 517, 599, 518,
	519, 520, 521, 522, 523, 524, 526, 0, 0, 528,
	529, 530, 532, 533, 534, 535, 538, 539, 540, 541,
	542, 0, 543, 545, 547, 625, 602, 603, 604, 605,
	606, 608, 609, 610, 611, 548, 549, 565, 416, 410,
	366, 408, 409, 413, 414, 417, 754, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 849, 242, 0, 259, 761, 1165, 308,
	345, 560, 0, 0, 405, 0, 458, 462, 0, 551,
	0, 0, 0, 0, 316, 0, 766, 0, 772, 0,
	778, 0, 527, 0, 768, 769, 774, 247, 635, 550,
	621, 0, 0, 0, 412, 0, 0, 0, 0, 0,
	0, 0, 255, 0, 0, 0, 0, 770, 767, 771,
	777, 765, 775, 762, 773, 0, 449, 383, 600, 476,
	254, 300, 287, 329, 371, 483, 0, 0, 361, 531,
	296, 385, 0, 275, 418, 0, 507, 382, 0, 490,
	510, 0, 402, 281, 441, 497, 498, 759, 764, 0,
	780, 0, 285, 286, 407, 267, 415, 612, 578, 470,
	428, 426, 0, 393, 450, 607, 0, 0, 315, 0,
	310, 406, 546, 273, 525, 444, 411, 365, 473, 502,
	312, 297, 298, 341, 443, 331, 283, 536, 575, 579,
	577, 573, 570, 574, 571, 572, 576, 332, 569, 0,
	544, 553, 587, 567, 595, 552, 592, 562, 307, 591,
	556, 555, 601, 582, 583, 537, 597, 568, 566, 559,
	558, 554, 0, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 243, 0, 244, 245, 246, 248, 249,
	250, 758, 251, 252, 253, 256, 257, 258, 260, 620,
	261, 262, 263, 264, 265, 266, 557, 760, 268, 269,
	270, 271, 272, 274, 276, 277, 278, 279, 280, 282,
	284, 0, 0, 751, 763, 0, 0, 752, 288, 289,
	290, 291, 292, 293, 0, 294, 295, 299, 301, 302,
	303, 304, 305, 306, 309, 0, 311, 313, 0, 314,
	317, 0, 318, 319, 320, 321, 322, 323, 324, 325,
	561, 326, 0, 327, 328, 330, 0, 333, 334, 335,
	336, 337, 0, 338, 563, 564, 339, 340, 342, 343,
	344, 346, 347, 348, 349, 350, 351, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 360, 362, 0, 363,
	364, 367, 368, 369, 370, 0, 372, 580, 0, 373,
	374, 375, 0, 0, 376, 377, 378, 379, 847, 381,
	384, 581, 386, 387, 388, 389, 390, 391, 392, 622,
	394, 395, 396, 397, 398, 399, 400, 584, 585, 401,
	403, 404, 586, 588, 589, 776, 419, 420, 421, 422,
	423, 424, 425, 427, 0, 429, 430, 431, 590, 432,
	433, 434, 435, 0, 436, 437, 438, 439, 440, 442,
	445, 446, 447, 448, 0, 451, 452, 453, 454, 455,
	456, 457, 459, 460, 461, 463, 464, 465, 623, 466,
	467, 468, 469, 593, 471, 472, 624, 474, 475, 477,
	478, 479, 480, 481, 482, 633, 753, 484, 594, 485,
	486, 487, 488, 489, 0, 491, 492, 493, 494, 495,
	496, 499, 500, 501, 503, 504, 596, 505, 506, 0,
	508, 509, 779, 511, 512, 513, 514, 515, 0, 634,
	516, 598, 517, 599, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 0, 528, 529, 530, 532, 533, 534,
	535, 538, 539, 540, 541, 542, 0, 543, 545, 547,
	625, 602, 603, 604, 605, 606, 608, 609, 610, 611,
	548, 549, 565, 416, 410, 366, 408, 409, 413, 414,
	417, 754, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 845, 242,
	0, 259, 761, 0, 308, 345, 560, 0, 0, 405,
	0, 458, 462, 0, 551, 0, 0, 0, 0, 316,
	0, 766, 0, 772, 0, 778, 0, 527, 0, 768,
	769, 774, 247, 635, 550, 621, 0, 0, 0, 412,
	0, 0, 0, 0, 0, 0, 0, 255, 0, 0,
	0, 0, 770, 767, 771, 777, 765, 775, 762, 773,
	0, 449, 383, 600, 476, 254, 300, 287, 329, 371,
	483, 0, 0, 361, 531, 296, 385, 0, 275, 418,
	0, 507, 382, 0, 490, 510, 0, 402, 281, 441,
	497, 498, 759, 764, 0, 780, 0, 285, 286, 407,
	267, 415, 612, 578, 470, 428, 426, 0, 393, 450,
	607, 0, 0, 315, 0, 310, 406, 546, 273, 525,
	444, 411, 365, 473, 502, 312, 297, 298, 341, 443,
	331, 283, 536, 575, 579, 577, 573, 570, 574, 571,
	572, 576, 332, 569, 0, 544, 553, 587, 567, 595,
	552, 592, 562, 307, 591, 556, 555, 601, 582, 583,
	537, 597, 568, 566, 559, 558, 554, 0, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 243, 0,
	244, 245, 246, 248, 249, 250, 758, 251, 252, 253,
	256, 257, 258, 260, 620, 261, 262, 263, 264, 265,
	266, 557, 760, 268, 269, 270, 271, 272, 274, 276,
	277, 278, 279, 280, 282, 284, 0, 0, 751, 763,
	0, 0, 752, 288, 289, 290, 291, 292, 293, 0,
	294, 295, 299, 301, 302, 303, 304, 305, 306, 309,
	0, 311, 313, 0, 314, 317, 0, 318, 319, 320,
	321, 322, 323, 324, 325, 561, 326, 0, 327, 328,
	330, 0, 333, 334, 335, 336, 337, 0, 338, 563,
	564, 339, 340, 342, 343, 344, 346, 347, 348, 349,
	350, 351, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 360, 362, 0, 363, 364, 367, 368, 369, 370,
	0, 372, 580, 0, 373, 374, 375, 0, 0, 376,
	377, 378, 379, 380, 381, 384, 581, 386, 387, 388,
	389, 390, 391, 392, 622, 394, 395, 396, 397, 398,
	399, 400, 584, 585, 401, 403, 404, 586, 588, 589,
	776, 419, 420, 421, 422, 423, 424, 425, 427, 0,
	429, 430, 431, 590, 432, 433, 434, 435, 0, 436,
	437, 438, 439, 440, 442, 445, 446, 447, 448, 0,
	451, 452, 453, 454, 455, 456, 457, 459, 460, 461,
	463, 464, 465, 623, 466, 467, 468, 469, 593, 471,
	472, 624, 474, 475, 477, 478, 479, 480, 481, 482,
	633, 753, 484, 594, 485, 486, 487, 488, 489, 0,
	491, 492, 493, 494, 495, 496, 499, 500, 501, 503,
	504, 596, 505, 506, 0, 508, 509, 779, 511, 512,
	513, 514, 515, 0, 634, 516, 598, 517, 599, 518,
	519, 520, 521, 522, 523, 524, 526, 0, 0, 528,
	529, 530, 532, 533, 534, 535, 538, 539, 540, 541,
	542, 0, 543, 545, 547, 625, 602, 603, 604, 605,
	606, 608, 609, 610, 611, 548, 549, 565, 416, 410,
	366, 408, 409, 413, 414, 417, 754, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 242, 0, 259, 761, 0, 308,
	345, 560, 0, 0, 405, 0, 458, 462, 0, 551,
	0, 0, 0, 0, 316, 0, 766, 0, 772, 0,
	778, 0, 527, 0, 768, 769, 774, 247, 635, 550,
	621, 0, 0, 0, 412, 0, 0, 0, 0, 0,
	0, 0, 255, 0, 0, 0, 0, 770, 767, 771,
	777, 765, 775, 762, 773, 0, 449, 383, 600, 476,
	254, 300, 287, 329, 371, 483, 0, 0, 361, 531,
	296, 385, 0, 275, 418, 0, 507, 382, 0, 490,
	510, 0, 402, 281, 441, 497, 498, 759, 764, 0,
	780, 0, 285, 286, 407, 267, 415, 612, 578, 470,
	428, 426, 0, 393, 450, 607, 0, 0, 315, 0,
	310, 406, 546, 273, 525, 444, 411, 365, 473, 502,
	312, 297, 298, 341, 443, 331, 283, 536, 575, 579,
	577, 573, 570, 574, 571, 572, 576, 332, 569, 0,
	544, 553, 587, 567, 595, 552, 592, 562, 307, 591,
	556, 555, 601, 582, 583, 537, 597, 568, 566, 559,
	558, 554, 0, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 243, 0, 244, 245, 246, 248, 249,
	250, 758, 251, 252, 253, 256, 257, 258, 260, 620,
	261, 262, 263, 264, 265, 266, 557, 760, 268, 269,
	270, 271, 272, 274, 276, 277, 278, 279, 280, 282,
	284, 0, 0, 751, 763, 0, 0, 752, 288, 289,
	290, 291, 292, 293, 0, 294, 295, 299, 301, 302,
	303, 304, 305, 306, 309, 0, 311, 313, 0, 314,
	317, 0, 318, 319, 320, 321, 322, 323, 324, 325,
	561, 326, 0, 327, 328, 330, 0, 333, 334, 335,
	336, 337, 0, 338, 563, 564, 339, 340, 342, 343,
	344, 346, 347, 348, 349, 350, 351, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 360, 362, 0, 363,
	364, 367, 368, 369, 370, 0, 372, 580, 0, 373,
	374, 375, 0, 0, 376, 377, 378, 379, 380, 381,
	384, 581, 386, 387, 388, 389, 390, 391, 392, 622,
	394, 395, 396, 397, 398, 399, 400, 584, 585, 401,
	403, 404, 586, 588, 589, 776, 419, 420, 421, 422,
	423, 424, 425, 427, 0, 429, 430, 431, 590, 432,
	433, 434, 435, 0, 436, 437, 438, 439, 440, 442,
	445, 446, 447, 448, 0, 451, 452, 453, 454, 455,
	456, 457, 459, 460, 461, 463, 464, 465, 623, 466,
	467, 468, 469, 593, 471, 472, 624, 474, 475, 477,
	478, 479, 480, 481, 482, 633, 753, 484, 594, 485,
	486, 487, 488, 489, 0, 491, 492, 493, 494, 495,
	496, 499, 500, 501, 503, 504, 596, 505, 506, 0,
	508, 509, 779, 511, 512, 513, 514, 515, 0, 634,
	516, 598, 517, 599, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 0, 528, 529, 530, 532, 533, 534,
	535, 538, 539, 540, 541, 542, 0, 543, 545, 547,
	625, 602, 603, 604, 605, 606, 608, 609, 610, 611,
	548, 549, 565, 416, 410, 366, 408, 409, 413, 414,
	417, 229, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 242,
	3456, 259, 0, 0, 308, 345, 560, 0, 0, 405,
	0, 458, 462, 0, 551, 0, 0, 0, 0, 316,
	0, 0, 0, 0, 0, 0, 0, 527, 0, 0,
	0, 0, 247, 635, 550, 621, 0, 0, 0, 412,
	0, 0, 0, 0, 0, 0, 0, 255, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 449, 383, 600, 476, 254, 300, 287, 329, 371,
	483, 0, 0, 361, 531, 296, 385, 0, 275, 418,
	0, 507, 382, 0, 490, 510, 0, 402, 281, 441,
	497, 498, 0, 0, 0, 0, 0, 285, 286, 407,
	267, 415, 612, 578, 470, 428, 426, 0, 393, 450,
	607, 0, 0, 315, 0, 310, 406, 546, 273, 525,
	444, 411, 365, 473, 502, 312, 297, 298, 341, 443,
	331, 283, 536, 575, 579, 577, 573, 570, 574, 571,
	572, 576, 332, 569, 0, 544, 553, 587, 567, 595,
	552, 592, 562, 307, 591, 556, 555, 601, 582, 583,
	537, 597, 568, 566, 559, 558, 554, 0, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 243, 0,
	244, 245, 246, 248, 249, 250, 0, 251, 252, 253,
	256, 257, 258, 260, 620, 261, 262, 263, 264, 265,
	266, 557, 0, 268, 269, 270, 271, 272, 274, 276,
	277, 278, 279, 280, 282, 284, 0, 0, 0, 0,
	0, 0, 0, 288, 289, 290, 291, 292, 293, 0,
	294, 295, 299, 301, 302, 303, 304, 305, 306, 309,
	0, 311, 313, 0, 314, 317, 0, 318, 319, 320,
	321, 322, 323, 324, 325, 561, 326, 0, 327, 328,
	330, 0, 333, 334, 335, 336, 337, 0, 338, 563,
	564, 339, 340, 342, 343, 344, 346, 347, 348, 349,
	350, 351, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 360, 362, 0, 363, 364, 367, 368, 369, 370,
	0, 372, 580, 0, 373, 374, 375, 0, 0, 376,
	377, 378, 379, 380, 381, 384, 581, 386, 387, 388,
	389, 390, 391, 392, 622, 394, 395, 396, 397, 398,
	399, 400, 584, 585, 401, 403, 404, 586, 588, 589,
	0, 419, 420, 421, 422, 423, 424, 425, 427, 0,
	429, 430, 431, 590, 432, 433, 434, 435, 0, 436,
	437, 438, 439, 440, 442, 445, 446, 447, 448, 0,
	451, 452, 453, 454, 455, 456, 457, 459, 460, 461,
	463, 464, 465, 623, 466, 467, 468, 469, 593, 471,
	472, 624, 474, 475, 477, 478, 479, 480, 481, 482,
	633, 0, 484, 594, 485, 486, 487, 488, 489, 0,
	491, 492, 493, 494, 495, 496, 499, 500, 501, 503,
	504, 596, 505, 506, 0, 508, 509, 0, 511, 512,
	513, 514, 515, 0, 634, 516, 598, 517, 599, 518,
	519, 520, 521, 522, 523, 524, 526, 0, 0, 528,
	529, 530, 532, 533, 534, 535, 538, 539, 540, 541,
	542, 0, 543, 545, 547, 625, 602, 603, 604, 605,
	606, 608, 609, 610, 611, 548, 549, 565, 416, 410,
	366, 408, 409, 413, 414, 417, 0, 754, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 259, 761, 988,
	308, 910, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 0, 0, 316, 0, 766, 0, 772,
	0, 778, 0, 527, 0, 768, 769, 774, 247, 635,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 770, 767,
	771, 777, 765, 775, 762, 773, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 759, 764,
	0, 780, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 758, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 557, 760, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 751, 763, 0, 0, 752, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 776, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 753, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 508, 509, 779, 511, 512, 513, 514, 515, 0,
	634, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 754, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 259, 761, 0, 308, 908, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 766, 0, 772, 0, 778, 0, 527, 0,
	768, 769, 774, 247, 635, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 770, 767, 771, 777, 765, 775, 762,
	773, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 759, 764, 0, 780, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 758, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 557, 760, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 751,
	763, 0, 0, 752, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	563, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 776, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 753, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 509, 779, 511,
	512, 513, 514, 515, 0, 634, 516, 598, 517, 599,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 754, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 259, 761, 0,
	308, 905, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 0, 0, 316, 0, 766, 0, 772,
	0, 778, 0, 527, 0, 768, 769, 774, 247, 635,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 770, 767,
	771, 777, 765, 775, 762, 773, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 759, 764,
	0, 780, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 758, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 557, 760, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 751, 763, 0, 0, 752, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 903,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 776, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 753, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 508, 509, 779, 511, 512, 513, 514, 515, 0,
	634, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 754, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 259, 761, 0, 308, 345, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 766, 0, 772, 0, 778, 0, 527, 0,
	768, 769, 774, 247, 635, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 770, 767, 771, 777, 765, 775, 762,
	773, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 759, 764, 0, 780, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 758, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 557, 760, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 751,
	763, 0, 0, 752, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	563, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 747, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 776, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 753, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 509, 779, 511,
	512, 513, 514, 515, 0, 634, 516, 598, 517, 599,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 754, 0, 0,
	932, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 259, 761, 0,
	308, 345, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 1419, 0, 316, 0, 766, 0, 772,
	0, 778, 0, 527, 0, 768, 769, 774, 247, 635,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 770, 767,
	771, 777, 765, 775, 762, 773, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 759, 764,
	0, 780, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 758, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 557, 760, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 763, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 776, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 0, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 508, 509, 779, 511, 512, 513, 514, 515, 0,
	634, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 259, 0, 0, 308, 345, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 527, 0,
	0, 0, 0, 247, 635, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 0, 0, 0, 0, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 0, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 557, 0, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	563, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 0, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 0, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 509, 0, 511,
	512, 513, 514, 515, 0, 634, 516, 598, 517, 599,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 259, 0, 2190,
	308, 345, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 0, 247, 635,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 0, 0,
	0, 0, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 0, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 557, 0, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 0, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 0, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 508, 509, 0, 511, 512, 513, 514, 515, 0,
	634, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 754, 0, 0, 932, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 259, 761, 3971, 308, 345, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 766, 0, 772, 0, 778, 0, 527, 0,
	768, 769, 774, 247, 635, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 770, 767, 771, 777, 765, 775, 762,
	773, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 759, 764, 0, 780, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 758, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 557, 760, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 0,
	763, 0, 0, 0, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	563, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 776, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 0, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 509, 779, 511,
	512, 513, 514, 515, 0, 634, 516, 598, 517, 599,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 259, 0, 0,
	308, 345, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 0, 247, 635,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 0, 0,
	0, 0, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 0, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 557, 0, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 0, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 0, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 508, 509, 0, 511, 512, 513, 514, 515, 0,
	634, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 259, 0, 3333, 308, 345, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 527, 0,
	0, 0, 0, 247, 635, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 0, 0, 0, 0, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 0, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 557, 0, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	563, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 0, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 0, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 509, 0, 511,
	512, 513, 514, 515, 0, 634, 516, 598, 517, 599,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 816, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 259, 761, 1115,
	308, 345, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 0, 0, 316, 0, 766, 0, 772,
	0, 778, 0, 527, 0, 768, 769, 774, 247, 635,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 770, 767,
	771, 777, 765, 775, 762, 773, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 759, 764,
	0, 780, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 758, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 557, 760, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 763, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 776, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 0, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 508, 509, 779, 511, 512, 513, 514, 515, 0,
	634, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 754, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 259, 761, 0, 308, 345, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 766, 0, 772, 0, 778, 0, 527, 0,
	768, 769, 774, 247, 635, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 770, 767, 771, 777, 765, 775, 762,
	773, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 759, 764, 0, 780, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 758, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 557, 760, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 0,
	763, 0, 0, 0, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	563, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 776, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 0, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 509, 779, 511,
	512, 513, 514, 515, 0, 634, 516, 598, 517, 599,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 2899, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 259, 761, 0,
	308, 345, 0, 0, 0, 405, 0, 458, 462, 0,
	0, 0, 0, 0, 0, 316, 0, 766, 2384, 772,
	0, 778, 0, 527, 0, 768, 769, 774, 247, 890,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 770, 767,
	771, 777, 765, 775, 762, 773, 0, 449, 383, 0,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 759, 764,
	0, 780, 0, 285, 286, 407, 267, 415, 0, 0,
	470, 428, 426, 0, 393, 450, 0, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 332, 0,
	0, 544, 893, 883, 875, 876, 877, 878, 879, 880,
	0, 895, 896, 897, 898, 899, 537, 889, 0, 874,
	881, 882, 884, 2387, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 758, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 0, 760, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 763, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 0, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 0, 0, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 0, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 0, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 0, 0,
	401, 403, 404, 0, 2385, 0, 776, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 0,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 0, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 0, 484, 2390,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 0, 505, 506,
	0, 508, 509, 779, 511, 512, 513, 514, 515, 0,
	634, 516, 0, 517, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 0, 0, 0, 229, 0, 0, 0, 0,
	0, 548, 549, 2386, 416, 410, 366, 408, 409, 413,
	414, 417, 2894, 242, 0, 259, 0, 0, 308, 2302,
	560, 0, 0, 405, 0, 458, 462, 0, 551, 0,
	0, 0, 0, 316, 0, 0, 0, 0, 0, 2892,
	0, 527, 0, 0, 0, 0, 247, 635, 550, 621,
	0, 0, 0, 412, 0, 0, 0, 0, 0, 0,
	0, 255, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 449, 383, 600, 476, 254,
	300, 287, 329, 371, 483, 0, 0, 361, 531, 296,
	385, 0, 275, 418, 0, 507, 382, 0, 490, 510,
	0, 402, 281, 441, 497, 498, 0, 0, 2306, 0,
	0, 285, 286, 407, 267, 415, 612, 578, 470, 428,
	426, 0, 393, 450, 607, 0, 0, 315, 0, 310,
	406, 546, 273, 525, 444, 411, 365, 473, 502, 312,
	297, 298, 341, 443, 331, 283, 536, 575, 579, 577,
	573, 570, 574, 571, 572, 576, 332, 569, 0, 544,
	553, 587, 567, 595, 552, 592, 562, 307, 591, 556,
	555, 601, 582, 583, 537, 597, 568, 566, 559, 558,
	554, 0, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 243, 0, 244, 245, 246, 248, 249, 250,
	0, 251, 252, 253, 256, 257, 258, 260, 620, 261,
	262, 263, 264, 265, 266, 557, 0, 268, 269, 270,
	271, 272, 274, 276, 277, 278, 279, 280, 282, 284,
	0, 0, 0, 0, 0, 0, 0, 288, 289, 290,
	291, 292, 293, 0, 294, 295, 299, 301, 302, 303,
	304, 305, 306, 309, 0, 311, 313, 0, 314, 317,
	0, 2312, 319, 320, 321, 322, 323, 324, 325, 561,
	326, 0, 327, 328, 330, 2311, 333, 334, 335, 336,
	337, 0, 338, 563, 564, 339, 340, 342, 343, 344,
	346, 347, 348, 349, 350, 351, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 360, 362, 0, 363, 364,
	367, 368, 369, 370, 0, 372, 580, 0, 373, 374,
	375, 0, 0, 376, 377, 378, 379, 380, 381, 384,
	581, 386, 387, 388, 389, 390, 391, 392, 622, 394,
	395, 396, 397, 398, 399, 400, 584, 585, 401, 403,
	404, 586, 588, 589, 0, 419, 420, 421, 422, 423,
	424, 425, 427, 0, 429, 430, 431, 590, 432, 433,
	434, 435, 2310, 436, 437, 438, 439, 440, 442, 445,
	446, 447, 448, 0, 451, 452, 453, 454, 455, 456,
	457, 459, 460, 461, 463, 464, 465, 623, 466, 467,
	468, 469, 593, 471, 472, 624, 474, 475, 477, 478,
	479, 480, 481, 482, 633, 0, 484, 594, 485, 486,
	487, 488, 489, 0, 491, 492, 493, 494, 495, 496,
	499, 500, 501, 503, 504, 596, 505, 506, 0, 508,
	509, 0, 511, 512, 513, 514, 515, 0, 634, 516,
	598, 517, 599, 518, 519, 520, 521, 522, 523, 524,
	526, 0, 2309, 528, 529, 530, 532, 533, 534, 535,
	538, 539, 540, 541, 542, 0, 543, 545, 547, 625,
	602, 603, 604, 605, 606, 608, 609, 610, 611, 548,
	549, 565, 416, 410, 366, 408, 409, 413, 414, 417,
	229, 0, 0, 0, 2308, 2303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 242, 0,
	259, 0, 0, 308, 345, 560, 0, 0, 405, 0,
	458, 462, 0, 551, 0, 0, 0, 0, 316, 0,
	0, 0, 2859, 0, 0, 0, 527, 0, 0, 0,
	0, 247, 635, 550, 621, 0, 0, 0, 412, 0,
	0, 0, 0, 0, 0, 0, 255, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	449, 383, 600, 476, 254, 300, 287, 329, 371, 483,
	0, 0, 361, 531, 296, 385, 0, 275, 418, 0,
	507, 382, 0, 490, 510, 0, 402, 281, 441, 497,
	498, 0, 0, 2306, 0, 0, 285, 286, 407, 267,
	415, 612, 578, 470, 428, 426, 0, 393, 450, 607,
	0, 0, 315, 0, 310, 406, 546, 273, 525, 444,
	411, 365, 473, 502, 312, 297, 298, 341, 443, 331,
	283, 536, 575, 579, 577, 573, 570, 574, 571, 572,
	576, 332, 569, 0, 544, 553, 587, 567, 595, 552,
	592, 562, 307, 591, 556, 555, 601, 582, 583, 537,
	597, 568, 566, 559, 558, 554, 0, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 243, 0, 244,
	245, 246, 248, 249, 250, 0, 251, 252, 253, 256,
	257, 258, 260, 620, 261, 262, 263, 264, 265, 266,
	557, 0, 268, 269, 270, 271, 272, 274, 276, 277,
	278, 279, 280, 282, 284, 0, 0, 0, 0, 0,
	0, 0, 288, 289, 290, 291, 292, 293, 0, 294,
	295, 299, 301, 302, 303, 304, 305, 306, 309, 0,
	311, 313, 0, 314, 317, 0, 2312, 319, 320, 321,
	322, 323, 324, 325, 561, 326, 0, 327, 328, 330,
	2311, 333, 334, 335, 336, 337, 0, 338, 563, 564,
	339, 340, 342, 343, 344, 346, 347, 348, 349, 350,
	351, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	360, 362, 0, 363, 364, 367, 368, 369, 370, 0,
	372, 580, 0, 373, 374, 375, 0, 0, 376, 377,
	378, 379, 380, 381, 384, 581, 386, 387, 388, 389,
	390, 391, 392, 622, 394, 395, 396, 397, 398, 399,
	400, 584, 585, 401, 403, 404, 586, 588, 589, 0,
	419, 420, 421, 422, 423, 424, 425, 427, 0, 429,
	430, 431, 590, 432, 433, 434, 435, 2310, 436, 437,
	438, 439, 440, 442, 445, 446, 447, 448, 0, 451,
	452, 453, 454, 455, 456, 457, 459, 460, 461, 463,
	464, 465, 623, 466, 467, 468, 469, 593, 471, 472,
	624, 474, 475, 477, 478, 479, 480, 481, 482, 633,
	0, 484, 594, 485, 486, 487, 488, 489, 0, 491,
	492, 493, 494, 495, 496, 499, 500, 501, 503, 504,
	596, 505, 506, 0, 508, 509, 0, 511, 512, 513,
	514, 515, 0, 634, 516, 598, 517, 599, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 2309, 528, 529,
	530, 532, 533, 534, 535, 538, 539, 540, 541, 542,
	0, 543, 545, 547, 625, 602, 603, 604, 605, 606,
	608, 609, 610, 611, 548, 549, 565, 416, 410, 366,
	408, 409, 413, 414, 417, 229, 0, 0, 0, 2308,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 242, 0, 259, 0, 0, 308, 345,
	560, 0, 0, 405, 0, 458, 462, 0, 551, 0,
	0, 0, 0, 316, 0, 0, 0, 0, 0, 0,
	0, 527, 0, 0, 0, 0, 247, 635, 550, 621,
	0, 0, 0, 412, 0, 0, 0, 0, 0, 0,
	0, 255, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 449, 383, 600, 476, 254,
	300, 287, 329, 371, 483, 0, 0, 361, 531, 296,
	385, 0, 275, 418, 0, 507, 382, 0, 490, 510,
	0, 402, 281, 441, 497, 498, 0, 0, 2306, 0,
	0, 285, 286, 407, 267, 415, 612, 578, 470, 428,
	426, 0, 393, 450, 607, 0, 0, 315, 0, 310,
	406, 546, 273, 525, 444, 411, 365, 473, 502, 312,
	297, 298, 341, 443, 331, 283, 536, 575, 579, 577,
	573, 570, 574, 571, 572, 576, 332, 569, 0, 544,
	553, 587, 567, 595, 552, 592, 562, 307, 591, 556,
	555, 601, 582, 583, 537, 597, 568, 566, 559, 558,
	554, 0, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 243, 0, 244, 245, 246, 248, 249, 250,
	0, 251, 252, 253, 256, 257, 258, 260, 620, 261,
	262, 263, 264, 265, 266, 557, 0, 268, 269, 270,
	271, 272, 274, 276, 277, 278, 279, 280, 282, 284,
	0, 0, 0, 0, 0, 0, 0, 288, 289, 290,
	291, 292, 293, 0, 294, 295, 299, 301, 302, 303,
	304, 305, 306, 309, 0, 311, 313, 0, 314, 317,
	0, 2312, 319, 320, 321, 322, 323, 324, 325, 561,
	326, 0, 327, 328, 330, 2311, 333, 334, 335, 336,
	337, 0, 338, 563, 564, 339, 340, 342, 343, 344,
	346, 347, 348, 349, 350, 351, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 360, 362, 0, 363, 364,
	367, 368, 369, 370, 0, 372, 580, 0, 373, 374,
	375, 0, 0, 376, 377, 378, 379, 380, 381, 384,
	581, 386, 387, 388, 389, 390, 391, 392, 622, 394,
	395, 396, 397, 398, 399, 400, 584, 585, 401, 403,
	404, 586, 588, 589, 0, 419, 420, 421, 422, 423,
	424, 425, 427, 0, 429, 430, 431, 590, 432, 433,
	434, 435, 2310, 436, 437, 438, 439, 440, 442, 445,
	446, 447, 448, 0, 451, 452, 453, 454, 455, 456,
	457, 459, 460, 461, 463, 464, 465, 623, 466, 467,
	468, 469, 593, 471, 472, 624, 474, 475, 477, 478,
	479, 480, 481, 482, 633, 0, 484, 594, 485, 486,
	487, 488, 489, 0, 491, 492, 493, 494, 495, 496,
	499, 500, 501, 503, 504, 596, 505, 506, 0, 508,
	509, 0, 511, 512, 513, 514, 515, 0, 634, 516,
	598, 517, 599, 518, 519, 520, 521, 522, 523, 524,
	526, 0, 2309, 528, 529, 530, 532, 533, 534, 535,
	538, 539, 540, 541, 542, 0, 543, 545, 547, 625,
	602, 603, 604, 605, 606, 608, 609, 610, 611, 548,
	549, 565, 416, 410, 366, 408, 409, 413, 414, 417,
	891, 0, 0, 0, 2308, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 242, 0,
	259, 761, 0, 308, 345, 0, 0, 0, 405, 0,
	458, 462, 0, 0, 0, 0, 0, 0, 316, 0,
	766, 2384, 772, 0, 778, 0, 527, 0, 768, 769,
	774, 247, 890, 550, 621, 0, 0, 0, 412, 0,
	0, 0, 0, 0, 0, 0, 255, 0, 0, 0,
	0, 770, 767, 771, 777, 765, 775, 762, 773, 0,
	449, 383, 0, 476, 254, 300, 287, 329, 371, 483,
	0, 0, 361, 531, 296, 385, 0, 275, 418, 0,
	507, 382, 0, 490, 510, 0, 402, 281, 441, 497,
	498, 759, 764, 0, 780, 0, 285, 286, 407, 267,
	415, 0, 0, 470, 428, 426, 0, 393, 450, 0,
	0, 0, 315, 0, 310, 406, 546, 273, 525, 444,
	411, 365, 473, 502, 312, 297, 298, 341, 443, 331,
	283, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 332, 0, 0, 544, 893, 883, 875, 876, 877,
	878, 879, 880, 0, 895, 896, 897, 898, 899, 537,
	889, 0, 874, 881, 882, 884, 2387, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 243, 0, 244,
	245, 246, 248, 249, 250, 758, 251, 252, 253, 256,
	257, 258, 260, 620, 261, 262, 263, 264, 265, 266,
	0, 760, 268, 269, 270, 271, 272, 274, 276, 277,
	278, 279, 280, 282, 284, 0, 0, 0, 763, 0,
	0, 0, 288, 289, 290, 291, 292, 293, 0, 294,
	295, 299, 301, 302, 303, 304, 305, 306, 309, 0,
	311, 313, 0, 314, 317, 0, 318, 319, 320, 321,
	322, 323, 324, 325, 0, 326, 0, 327, 328, 330,
	0, 333, 334, 335, 336, 337, 0, 338, 0, 0,
	339, 340, 342, 343, 344, 346, 347, 348, 349, 350,
	351, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	360, 362, 0, 363, 364, 367, 368, 369, 370, 0,
	372, 0, 0, 373, 374, 375, 0, 0, 376, 377,
	378, 379, 380, 381, 384, 0, 386, 387, 388, 389,
	390, 391, 392, 622, 394, 395, 396, 397, 398, 399,
	400, 0, 0, 401, 403, 404, 0, 2385, 0, 776,
	419, 420, 421, 422, 423, 424, 425, 427, 0, 429,
	430, 431, 0, 432, 433, 434, 435, 0, 436, 437,
	438, 439, 440, 442, 445, 446, 447, 448, 0, 451,
	452, 453, 454, 455, 456, 457, 459, 460, 461, 463,
	464, 465, 623, 466, 467, 468, 469, 0, 471, 472,
	624, 474, 475, 477, 478, 479, 480, 481, 482, 633,
	0, 484, 2390, 485, 486, 487, 488, 489, 0, 491,
	492, 493, 494, 495, 496, 499, 500, 501, 503, 504,
	0, 505, 506, 0, 508, 509, 779, 511, 512, 513,
	514, 515, 0, 634, 516, 0, 517, 0, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 0, 528, 529,
	530, 532, 533, 534, 535, 538, 539, 540, 541, 542,
	0, 543, 545, 547, 625, 0, 0, 0, 0, 891,
	0, 0, 0, 0, 548, 549, 2386, 416, 410, 366,
	408, 409, 413, 414, 417, 0, 0, 242, 0, 259,
	761, 0, 308, 345, 0, 0, 0, 405, 0, 458,
	462, 0, 0, 0, 0, 0, 0, 316, 2879, 766,
	2384, 772, 0, 778, 0, 527, 0, 768, 769, 774,
	247, 890, 550, 621, 0, 0, 0, 412, 0, 0,
	0, 0, 0, 0, 0, 255, 0, 0, 0, 0,
	770, 767, 771, 777, 765, 775, 762, 773, 0, 449,
	383, 0, 476, 254, 300, 287, 329, 371, 483, 0,
	0, 361, 531, 296, 385, 0, 275, 418, 0, 507,
	382, 0, 490, 510, 0, 402, 281, 441, 497, 498,
	759, 764, 0, 780, 0, 285, 286, 407, 267, 415,
	0, 0, 470, 428, 426, 0, 393, 450, 0, 0,
	0, 315, 0, 310, 406, 546, 273, 525, 444, 411,
	365, 473, 502, 312, 297, 298, 341, 443, 331, 283,
	536, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	332, 0, 0, 544, 893, 883, 875, 876, 877, 878,
	879, 880, 0, 895, 896, 897, 898, 899, 537, 889,
	0, 874, 881, 882, 884, 2387, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 243, 0, 244, 245,
	246, 248, 249, 250, 758, 251, 252, 253, 256, 257,
	258, 260, 620, 261, 262, 263, 264, 265, 266, 0,
	760, 268, 269, 270, 271, 272, 274, 276, 277, 278,
	279, 280, 282, 284, 0, 0, 0, 763, 0, 0,
	0, 288, 289, 290, 291, 292, 293, 0, 294, 295,
	299, 301, 302, 303, 304, 305, 306, 309, 0, 311,
	313, 0, 314, 317, 0, 318, 319, 320, 321, 322,
	323, 324, 325, 0, 326, 0, 327, 328, 330, 0,
	333, 334, 335, 336, 337, 0, 338, 0, 0, 339,
	340, 342, 343, 344, 346, 347, 348, 349, 350, 351,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 360,
	362, 0, 363, 364, 367, 368, 369, 370, 0, 372,
	0, 0, 373, 374, 375, 0, 0, 376, 377, 378,
	379, 380, 381, 384, 0, 386, 387, 388, 389, 390,
	391, 392, 622, 394, 395, 396, 397, 398, 399, 400,
	0, 0, 401, 403, 404, 0, 2385, 0, 776, 419,
	420, 421, 422, 423, 424, 425, 427, 0, 429, 430,
	431, 0, 432, 433, 434, 435, 0, 436, 437, 438,
	439, 440, 442, 445, 446, 447, 448, 0, 451, 452,
	453, 454, 455, 456, 457, 459, 460, 461, 463, 464,
	465, 623, 466, 467, 468, 469, 0, 471, 472, 624,
	474, 475, 477, 478, 479, 480, 481, 482, 633, 0,
	484, 2390, 485, 486, 487, 488, 489, 0, 491, 492,
	493, 494, 495, 496, 499, 500, 501, 503, 504, 0,
	505, 506, 0, 508, 509, 779, 511, 512, 513, 514,
	515, 0, 634, 516, 0, 517, 0, 518, 519, 520,
	521, 522, 523, 524, 526, 0, 0, 528, 529, 530,
	532, 533, 534, 535, 538, 539, 540, 541, 542, 0,
	543, 545, 547, 625, 0, 0, 0, 229, 0, 0,
	0, 0, 0, 548, 549, 2386, 416, 410, 366, 408,
	409, 413, 414, 417, 641, 646, 0, 259, 0, 645,
	308, 345, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 0, 0, 316, 0, 2379, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 0, 247, 635,
	550, 621, 0, 0, 0, 412, 643, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 0, 0,
	0, 0, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 0, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 557, 0, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 649, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 0, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 644, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 0, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 508, 509, 0, 511, 512, 513, 514, 515, 0,
	634, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 641,
	646, 0, 259, 0, 645, 308, 345, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 527, 0,
	0, 0, 0, 247, 635, 550, 621, 0, 0, 0,
	412, 643, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 0, 0, 0, 0, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 0, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 557, 0, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	563, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 0, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	644, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 0, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 509, 0, 511,
	512, 513, 514, 515, 0, 634, 516, 598, 517, 599,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2279, 242, 0, 259, 0, 0,
	308, 345, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 0, 247, 635,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 672,
	2282, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 0, 0,
	0, 0, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 0, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 557, 0, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 2286, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 0, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 0, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 2283, 509, 0, 511, 512, 513, 514, 515, 0,
	634, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1471,
	242, 0, 259, 0, 0, 308, 345, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 527, 0,
	0, 0, 0, 247, 635, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 1457, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 0, 0, 0, 0, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 0, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 557, 0, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 0,
	0, 0, 0, 0, 288, 1463, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 1464,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 1459, 333, 1460, 335, 336, 337, 0, 338,
	563, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 1465,
	1466, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 0, 419, 420, 421, 1467, 423, 424, 425, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 1461, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 1462, 469, 593,
	471, 472, 1468, 474, 475, 477, 478, 1458, 480, 481,
	482, 633, 0, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 1469, 0, 511,
	512, 513, 514, 515, 0, 634, 516, 598, 517, 599,
	518, 519, 1470, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 259, 0, 0,
	308, 345, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 0, 247, 635,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 672,
	2282, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 0, 0,
	0, 0, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 0, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 557, 0, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 2286, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 0, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 0, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 2283, 509, 0, 511, 512, 513, 514, 515, 0,
	634, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	646, 0, 259, 0, 645, 308, 345, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 527, 0,
	0, 0, 0, 247, 635, 550, 621, 0, 0, 0,
	412, 643, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 0, 0, 0, 0, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 0, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 557, 0, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	563, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 0, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	644, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 0, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 509, 0, 511,
	512, 513, 514, 515, 0, 634, 516, 598, 517, 599,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3032, 242, 0, 259, 0, 0,
	308, 345, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 0, 247, 635,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 3033, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 0, 0,
	0, 0, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 0, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 557, 0, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 0, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 0, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 508, 509, 0, 511, 512, 513, 514, 515, 0,
	634, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3023,
	242, 0, 259, 0, 0, 308, 345, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 527, 0,
	0, 0, 0, 247, 635, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 3024, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 0, 0, 0, 0, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 0, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 557, 0, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	563, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 0, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 0, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 509, 0, 511,
	512, 513, 514, 515, 0, 634, 516, 598, 517, 599,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 801, 242, 0, 259, 0, 0,
	308, 800, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 0, 247, 635,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 672,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 0, 0,
	0, 0, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 0, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 557, 0, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 0, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 0, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 508, 509, 0, 511, 512, 513, 514, 515, 0,
	634, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 259, 0, 0, 308, 345, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 527, 0,
	0, 0, 0, 247, 635, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 672, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 0, 0, 0, 0, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 0, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 557, 0, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	563, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 0, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 0, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 509, 0, 511,
	512, 513, 514, 515, 0, 634, 516, 598, 517, 599,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 259, 0, 0,
	308, 345, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 4445, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 0, 247, 635,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 0, 0,
	0, 0, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 0, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 557, 0, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 0, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 0, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 508, 509, 0, 511, 512, 513, 514, 515, 0,
	634, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 3456, 259, 0, 0, 308, 345, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 527, 0,
	0, 0, 0, 247, 635, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 0, 0, 0, 0, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 0, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 557, 0, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	563, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 0, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 0, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 509, 0, 511,
	512, 513, 514, 515, 0, 634, 516, 598, 517, 599,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 259, 0, 0,
	308, 345, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 4109, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 0, 247, 635,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 0, 0,
	0, 0, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 0, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 557, 0, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 0, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 0, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 508, 509, 0, 511, 512, 513, 514, 515, 0,
	634, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 259, 0, 0, 308, 345, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 527, 0,
	0, 0, 0, 247, 635, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 0, 0, 0, 0, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 0, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 557, 0, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 0,
	4093, 0, 0, 0, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	563, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 0, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 0, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 509, 0, 511,
	512, 513, 514, 515, 0, 634, 516, 598, 517, 599,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 3468, 259, 0, 0,
	308, 345, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 0, 247, 635,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 0, 0,
	0, 0, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 0, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 557, 0, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 0, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 0, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 508, 509, 0, 511, 512, 513, 514, 515, 0,
	634, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 259, 0, 0, 308, 345, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 3667, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 527, 0,
	0, 0, 0, 247, 635, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 0, 0, 0, 0, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 0, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 557, 0, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	563, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 0, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 0, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 509, 0, 511,
	512, 513, 514, 515, 0, 634, 516, 598, 517, 599,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 229, 0, 0,
	0, 0, 0, 0, 0, 1034, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 259, 0, 0,
	308, 345, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 0, 247, 635,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 0, 0,
	0, 0, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 0, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 557, 0, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 0, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 0, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 508, 509, 0, 511, 512, 513, 514, 515, 0,
	634, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 259, 0, 0, 308, 345, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 527, 0,
	0, 0, 0, 247, 635, 550, 2617, 0, 0, 0,
	412, 0, 0, 0, 0, 2620, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 0, 0, 0, 0, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 0, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 557, 0, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 2618, 0, 338,
	563, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 0, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 0, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 509, 0, 2616,
	512, 2615, 514, 515, 0, 634, 516, 598, 517, 599,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 2619, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 259, 0, 0,
	308, 1264, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 0, 247, 635,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 672,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 0, 0,
	0, 0, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 0, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 557, 0, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 0, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 0, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 508, 509, 0, 511, 512, 513, 514, 515, 0,
	634, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1262,
	242, 0, 259, 0, 0, 308, 1261, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 527, 0,
	0, 0, 0, 247, 635, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 0, 0, 0, 0, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 0, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 557, 0, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	563, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 0, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 0, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 509, 0, 511,
	512, 513, 514, 515, 0, 634, 516, 598, 517, 599,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 259, 0, 0,
	308, 345, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 0, 247, 222,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 0, 0,
	0, 0, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 923, 251, 252, 253, 256, 257, 258, 260,
	223, 261, 922, 263, 264, 265, 266, 557, 0, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	225, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 0, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 226,
	466, 467, 468, 469, 593, 471, 472, 224, 474, 475,
	477, 478, 479, 480, 481, 482, 920, 0, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 508, 509, 0, 511, 512, 513, 514, 515, 0,
	218, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 227, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 804,
	242, 0, 259, 0, 0, 308, 803, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 527, 0,
	0, 0, 0, 247, 635, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 0, 0, 0, 0, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 0, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 557, 0, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	563, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 0, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 0, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 509, 0, 511,
	512, 513, 514, 515, 0, 634, 516, 598, 517, 599,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 619, 242, 0, 259, 0, 0,
	308, 345, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 0, 247, 615,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 0, 0,
	0, 0, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 0, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 557, 0, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 0, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 617, 0, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 508, 509, 0, 511, 512, 513, 514, 515, 0,
	616, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 259, 0, 0, 308, 345, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 527, 0,
	0, 0, 0, 247, 635, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 0, 0, 0, 0, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 5300,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 0, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 557, 0, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	563, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 0, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 0, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 509, 0, 511,
	512, 513, 514, 515, 0, 634, 516, 598, 517, 599,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 259, 0, 0,
	308, 345, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 0, 247, 635,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 0, 0,
	0, 0, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 0, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 557, 0, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 0, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 0, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 508, 509, 0, 511, 512, 513, 514, 515, 0,
	634, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 259, 0, 0, 308, 3164, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 527, 0,
	0, 0, 0, 247, 635, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 0, 0, 0, 0, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 0, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 557, 0, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	563, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 0, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 0, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 509, 0, 511,
	512, 513, 514, 515, 0, 634, 516, 598, 517, 599,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 259, 0, 0,
	308, 345, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 0, 247, 222,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 0, 0,
	0, 0, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 0, 251, 252, 253, 256, 257, 258, 260,
	223, 261, 262, 263, 264, 265, 266, 557, 0, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	225, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 0, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 226,
	466, 467, 468, 469, 593, 471, 472, 224, 474, 475,
	477, 478, 479, 480, 481, 482, 920, 0, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 508, 509, 0, 511, 512, 513, 514, 515, 0,
	218, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 227, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 259, 0, 0, 308, 3103, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 527, 0,
	0, 0, 0, 247, 635, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 0, 0, 0, 0, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 0, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 557, 0, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	563, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 0, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 0, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 509, 0, 511,
	512, 513, 514, 515, 0, 634, 516, 598, 517, 599,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 259, 0, 0,
	308, 3011, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 0, 247, 635,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 0, 0,
	0, 0, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 0, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 557, 0, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 0, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 0, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 508, 509, 0, 511, 512, 513, 514, 515, 0,
	634, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 259, 0, 0, 308, 3009, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 527, 0,
	0, 0, 0, 247, 635, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 0, 0, 0, 0, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 0, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 557, 0, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	563, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 0, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 0, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 509, 0, 511,
	512, 513, 514, 515, 0, 634, 516, 598, 517, 599,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 259, 0, 0,
	308, 2995, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 0, 247, 635,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 0, 0,
	0, 0, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 0, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 557, 0, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 0, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 0, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 508, 509, 0, 511, 512, 513, 514, 515, 0,
	634, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 259, 0, 0, 308, 345, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 527, 0,
	0, 0, 0, 247, 222, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 0, 0, 0, 0, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 0, 251, 252,
	253, 256, 257, 258, 260, 223, 261, 262, 263, 264,
	265, 266, 557, 0, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	563, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 225, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 0, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 226, 466, 467, 468, 469, 593,
	471, 472, 224, 474, 475, 477, 478, 479, 480, 481,
	482, 2422, 0, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 509, 0, 511,
	512, 513, 514, 515, 0, 2423, 516, 598, 517, 599,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 227, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 259, 0, 0,
	308, 2270, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 0, 247, 635,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 0, 0,
	0, 0, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 0, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 557, 0, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 0, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 0, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 508, 509, 0, 511, 512, 513, 514, 515, 0,
	634, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 259, 0, 0, 308, 2211, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 527, 0,
	0, 0, 0, 247, 635, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 0, 0, 0, 0, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 0, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 557, 0, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	563, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 0, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 0, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 509, 0, 511,
	512, 513, 514, 515, 0, 634, 516, 598, 517, 599,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 259, 0, 0,
	308, 345, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 0, 247, 635,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 0, 0,
	0, 0, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 0, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 557, 0, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 0, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 1453, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 0, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 508, 509, 0, 511, 512, 513, 514, 515, 0,
	634, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 259, 0, 0, 308, 1403, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 527, 0,
	0, 0, 0, 247, 635, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 0, 0, 0, 0, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 0, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 557, 0, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	563, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 0, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 0, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 509, 0, 511,
	512, 513, 514, 515, 0, 634, 516, 598, 517, 599,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 259, 0, 0,
	308, 1184, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 0, 247, 635,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 0, 0,
	0, 0, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 0, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 557, 0, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 0, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 0, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 508, 509, 0, 511, 512, 513, 514, 515, 0,
	634, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 259, 0, 0, 308, 1145, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 527, 0,
	0, 0, 0, 247, 635, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 0, 0, 0, 0, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 0, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 557, 0, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	563, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 0, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 0, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 509, 0, 511,
	512, 513, 514, 515, 0, 634, 516, 598, 517, 599,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 259, 0, 0,
	308, 1141, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 0, 247, 635,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 0, 0,
	0, 0, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 0, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 557, 0, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 0, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 0, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 508, 509, 0, 511, 512, 513, 514, 515, 0,
	634, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 1135, 259, 0, 0, 308, 345, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 527, 0,
	0, 0, 0, 247, 635, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 0, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 0, 0, 0, 0, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 0, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 557, 0, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	563, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 0, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 0, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 509, 0, 511,
	512, 513, 514, 515, 0, 634, 516, 598, 517, 599,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 259, 0, 0,
	308, 863, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 0, 247, 635,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 0, 0,
	0, 0, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 0, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 557, 0, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 0, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 0, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 508, 509, 0, 511, 512, 513, 514, 515, 0,
	634, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 259, 0, 0, 308, 859, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 527, 0,
	0, 0, 0, 247, 635, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 0, 0, 0, 0, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 0, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 557, 0, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	563, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 0, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 0, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 509, 0, 511,
	512, 513, 514, 515, 0, 634, 516, 598, 517, 599,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 259, 0, 0,
	308, 856, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 0, 247, 635,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 0, 0,
	0, 0, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 0, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 557, 0, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 0, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 0, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 508, 509, 0, 511, 512, 513, 514, 515, 0,
	634, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 259, 0, 0, 308, 852, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 527, 0,
	0, 0, 0, 247, 635, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 0, 0, 0, 0, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 0, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 557, 0, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	563, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 0, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 0, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 509, 0, 511,
	512, 513, 514, 515, 0, 634, 516, 598, 517, 599,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 259, 0, 0,
	308, 833, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 0, 247, 635,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 0, 0,
	0, 0, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 0, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 557, 0, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 0, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 0, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 508, 509, 0, 511, 512, 513, 514, 515, 0,
	634, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 259, 0, 0, 308, 808, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 527, 0,
	0, 0, 0, 247, 635, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 0, 0, 0, 0, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 0, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 557, 0, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	563, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 0, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 0, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 509, 0, 511,
	512, 513, 514, 515, 0, 634, 516, 598, 517, 599,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 259, 0, 0,
	308, 806, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 0, 247, 635,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 0, 0,
	0, 0, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 0, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 557, 0, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 0, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 0, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 508, 509, 0, 511, 512, 513, 514, 515, 0,
	634, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 259, 0, 0, 308, 787, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 527, 0,
	0, 0, 0, 247, 635, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 0, 0, 0, 0, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 0, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 557, 0, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	563, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 0, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 0, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 509, 0, 511,
	512, 513, 514, 515, 0, 634, 516, 598, 517, 599,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 259, 0, 0,
	308, 746, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 0, 247, 635,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 0, 0,
	0, 0, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 0, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 557, 0, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 0, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 0, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 508, 509, 0, 511, 512, 513, 514, 515, 0,
	634, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 259, 0, 0, 308, 742, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 527, 0,
	0, 0, 0, 247, 635, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 0, 0, 0, 0, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 0, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 557, 0, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	563, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 0, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 0, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 509, 0, 511,
	512, 513, 514, 515, 0, 634, 516, 598, 517, 599,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 259, 0, 0,
	308, 740, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 0, 247, 635,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 0, 0,
	0, 0, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 0, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 557, 0, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 0, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 0, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 508, 509, 0, 511, 512, 513, 514, 515, 0,
	634, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 259, 0, 0, 308, 715, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 527, 0,
	0, 0, 0, 247, 635, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 0, 0, 0, 0, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 0, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 557, 0, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	563, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 0, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 0, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 509, 0, 511,
	512, 513, 514, 515, 0, 634, 516, 598, 517, 599,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 259, 0, 0,
	308, 345, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 0, 247, 635,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 675, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 0, 0,
	0, 0, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 0, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 557, 0, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 0, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 593, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 0, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 508, 509, 0, 511, 512, 513, 514, 515, 0,
	634, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 259, 0, 0, 308, 345, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 527, 0,
	0, 0, 0, 247, 635, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 0, 0, 0, 0, 0, 285, 286,
	407, 267, 415, 612, 578, 470, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 0, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 557, 0, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	563, 564, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 0, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 636, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 0, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 509, 0, 511,
	512, 513, 514, 515, 0, 634, 516, 598, 517, 599,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 259, 0, 0,
	308, 345, 560, 0, 0, 405, 0, 458, 462, 0,
	551, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 0, 247, 222,
	550, 216, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 383, 600,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 0, 0,
	0, 0, 0, 285, 286, 407, 267, 415, 612, 578,
	470, 428, 426, 0, 393, 450, 607, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 575,
	579, 577, 573, 570, 574, 571, 572, 576, 332, 569,
	0, 544, 553, 587, 567, 595, 552, 592, 562, 307,
	591, 556, 555, 601, 582, 583, 537, 597, 568, 566,
	559, 558, 554, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 0, 251, 252, 253, 256, 257, 258, 260,
	223, 261, 262, 263, 264, 265, 266, 557, 0, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 0, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 561, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 563, 564, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 580, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 581, 386, 387, 388, 389, 390, 391, 392,
	225, 394, 395, 396, 397, 398, 399, 400, 584, 585,
	401, 403, 404, 586, 588, 589, 0, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 590,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 226,
	466, 467, 468, 469, 593, 471, 472, 224, 474, 475,
	477, 478, 479, 480, 481, 482, 217, 0, 484, 594,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 596, 505, 506,
	0, 508, 509, 0, 511, 512, 513, 514, 515, 0,
	218, 516, 598, 517, 599, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 227, 602, 603, 604, 605, 606, 608, 609, 610,
	611, 548, 549, 565, 416, 410, 366, 408, 409, 413,
	414, 417, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 259, 0, 0, 308, 345, 560, 0, 0,
	405, 0, 458, 462, 0, 551, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 527, 0,
	0, 0, 0, 247, 635, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 383, 600, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 0, 0, 0, 0, 0, 285, 286,
	407, 267, 415, 612, 578, 0, 428, 426, 0, 393,
	450, 607, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 575, 579, 577, 573, 570, 574,
	571, 572, 576, 332, 569, 0, 544, 553, 587, 567,
	595, 552, 592, 562, 307, 591, 556, 555, 601, 582,
	583, 537, 597, 568, 566, 559, 558, 554, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 0, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 557, 0, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 561, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	563, 564, 0, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 580, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 581, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 584, 585, 401, 403, 404, 586, 588,
	589, 0, 419, 420, 421, 422, 423, 424, 0, 427,
	0, 429, 430, 431, 590, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 0, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 593,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 0, 484, 594, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 596, 505, 506, 0, 508, 509, 0, 511,
	512, 513, 514, 515, 0, 634, 516, 598, 517, 599,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 602, 603, 604,
	605, 606, 608, 609, 610, 611, 548, 549, 565, 416,
	410, 366, 408, 409, 413, 414, 417, 891, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 259, 761, 0,
	308, 345, 0, 0, 0, 405, 0, 458, 462, 0,
	0, 0, 0, 0, 0, 316, 0, 766, 2384, 772,
	0, 778, 0, 527, 0, 768, 769, 774, 247, 890,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 770, 767,
	771, 777, 765, 775, 762, 773, 0, 449, 383, 0,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 759, 764,
	0, 780, 0, 285, 286, 407, 267, 415, 0, 0,
	470, 428, 426, 0, 393, 450, 0, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 332, 0,
	0, 544, 893, 883, 875, 876, 877, 878, 879, 880,
	0, 895, 896, 897, 898, 899, 537, 889, 0, 874,
	881, 882, 884, 2387, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 758, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 0, 760, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 763, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 0, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 0, 0, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 0, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 0, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 0, 0,
	401, 403, 404, 0, 2385, 0, 776, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 0,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 0, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 0, 484, 2390,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 0, 505, 506,
	0, 508, 509, 779, 511, 512, 513, 514, 515, 0,
	634, 516, 0, 517, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 0, 0, 891, 0, 0, 0, 0, 0,
	0, 548, 549, 2386, 416, 410, 366, 408, 409, 413,
	414, 417, 242, 0, 259, 761, 0, 308, 345, 0,
	0, 0, 405, 0, 458, 462, 0, 0, 0, 0,
	0, 0, 316, 0, 766, 0, 772, 2412, 778, 0,
	527, 0, 768, 769, 774, 247, 890, 550, 621, 0,
	0, 0, 412, 0, 0, 0, 0, 3499, 0, 0,
	255, 0, 0, 0, 0, 770, 767, 771, 777, 765,
	775, 762, 773, 0, 449, 383, 0, 476, 254, 300,
	287, 329, 371, 483, 0, 0, 361, 531, 296, 385,
	0, 275, 418, 0, 507, 382, 0, 490, 510, 0,
	402, 281, 441, 497, 498, 759, 764, 0, 780, 0,
	285, 286, 407, 267, 415, 0, 0, 470, 428, 426,
	0, 393, 450, 0, 0, 0, 315, 0, 310, 406,
	546, 273, 525, 444, 411, 365, 473, 502, 312, 297,
	298, 341, 443, 331, 283, 536, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 332, 0, 0, 544, 893,
	883, 875, 876, 877, 878, 879, 880, 0, 895, 896,
	897, 898, 899, 537, 889, 0, 874, 881, 882, 884,
	0, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 243, 0, 244, 245, 246, 248, 249, 250, 758,
	251, 252, 253, 256, 257, 258, 260, 620, 261, 262,
	263, 264, 265, 266, 0, 760, 268, 269, 270, 271,
	272, 274, 276, 277, 278, 279, 280, 282, 284, 0,
	0, 0, 763, 0, 0, 0, 288, 289, 290, 291,
	292, 293, 0, 294, 295, 299, 301, 302, 303, 304,
	305, 306, 309, 0, 311, 313, 0, 314, 317, 0,
	318, 319, 320, 321, 322, 323, 324, 325, 0, 326,
	0, 327, 328, 330, 0, 333, 334, 335, 336, 337,
	0, 338, 0, 0, 339, 340, 342, 343, 344, 346,
	347, 348, 349, 350, 351, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 360, 362, 0, 363, 364, 367,
	368, 369, 370, 0, 372, 0, 0, 373, 374, 375,
	0, 0, 376, 377, 378, 379, 380, 381, 384, 0,
	386, 387, 388, 389, 390, 391, 392, 622, 394, 395,
	396, 397, 398, 399, 400, 0, 0, 401, 403, 404,
	0, 0, 0, 776, 419, 420, 421, 422, 423, 424,
	425, 427, 0, 429, 430, 431, 0, 432, 433, 434,
	435, 0, 436, 437, 438, 439, 440, 442, 445, 446,
	447, 448, 0, 451, 452, 453, 454, 455, 456, 457,
	459, 460, 461, 463, 464, 465, 623, 466, 467, 468,
	469, 0, 471, 472, 624, 474, 475, 477, 478, 479,
	480, 481, 482, 633, 0, 484, 2390, 485, 486, 487,
	488, 489, 0, 491, 492, 493, 494, 495, 496, 499,
	500, 501, 503, 504, 0, 505, 506, 0, 508, 509,
	779, 511, 512, 513, 514, 515, 0, 634, 516, 0,
	517, 0, 518, 519, 520, 521, 522, 523, 524, 526,
	0, 0, 528, 529, 530, 532, 533, 534, 535, 538,
	539, 540, 541, 542, 0, 543, 545, 547, 625, 0,
	0, 891, 0, 0, 0, 0, 0, 0, 548, 549,
	0, 416, 410, 366, 408, 409, 413, 414, 417, 242,
	0, 259, 761, 0, 308, 345, 0, 0, 0, 405,
	0, 458, 462, 0, 0, 0, 0, 0, 0, 316,
	0, 766, 0, 772, 0, 778, 0, 527, 0, 768,
	769, 774, 247, 890, 550, 621, 0, 0, 0, 412,
	0, 0, 0, 0, 0, 0, 0, 255, 0, 0,
	0, 0, 770, 767, 771, 777, 765, 775, 762, 773,
	0, 449, 383, 0, 476, 254, 300, 287, 329, 371,
	483, 0, 0, 361, 531, 296, 385, 0, 275, 418,
	0, 507, 382, 0, 490, 510, 0, 402, 281, 441,
	497, 498, 759, 764, 0, 780, 0, 285, 286, 407,
	267, 415, 0, 0, 470, 428, 426, 5334, 393, 450,
	0, 0, 0, 315, 0, 310, 406, 546, 273, 525,
	444, 411, 365, 473, 502, 312, 297, 298, 341, 443,
	331, 283, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 332, 0, 0, 544, 893, 883, 875, 876,
	877, 878, 879, 880, 0, 895, 896, 897, 898, 899,
	537, 889, 0, 874, 881, 882, 884, 0, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 243, 0,
	244, 245, 246, 248, 249, 250, 758, 251, 252, 253,
	256, 257, 258, 260, 620, 261, 262, 263, 264, 265,
	266, 0, 760, 268, 269, 270, 271, 272, 274, 276,
	277, 278, 279, 280, 282, 284, 0, 0, 0, 763,
	0, 0, 0, 288, 289, 290, 291, 292, 293, 0,
	294, 295, 299, 301, 302, 303, 304, 305, 306, 309,
	0, 311, 313, 0, 314, 317, 0, 318, 319, 320,
	321, 322, 323, 324, 325, 0, 326, 0, 327, 328,
	330, 0, 333, 334, 335, 336, 337, 0, 338, 0,
	0, 339, 340, 342, 343, 344, 346, 347, 348, 349,
	350, 351, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 360, 362, 0, 363, 364, 367, 368, 369, 370,
	0, 372, 0, 0, 373, 374, 375, 0, 0, 376,
	377, 378, 379, 380, 381, 384, 0, 386, 387, 388,
	389, 390, 391, 392, 622, 394, 395, 396, 397, 398,
	399, 400, 0, 0, 401, 403, 404, 0, 0, 0,
	776, 419, 420, 421, 422, 423, 424, 425, 427, 0,
	429, 430, 431, 0, 432, 433, 434, 435, 0, 436,
	437, 438, 439, 440, 442, 445, 446, 447, 448, 0,
	451, 452, 453, 454, 455, 456, 457, 459, 460, 461,
	463, 464, 465, 623, 466, 467, 468, 469, 0, 471,
	472, 624, 474, 475, 477, 478, 479, 480, 481, 482,
	633, 0, 484, 0, 485, 486, 487, 488, 489, 0,
	491, 492, 493, 494, 495, 496, 499, 500, 501, 503,
	504, 0, 505, 506, 0, 508, 509, 779, 511, 512,
	513, 514, 515, 0, 634, 516, 0, 517, 0, 518,
	519, 520, 521, 522, 523, 524, 526, 0, 0, 528,
	529, 530, 532, 533, 534, 535, 538, 539, 540, 541,
	542, 0, 543, 545, 547, 625, 0, 0, 891, 0,
	0, 0, 0, 0, 0, 548, 549, 0, 416, 410,
	366, 408, 409, 413, 414, 417, 242, 0, 259, 761,
	0, 308, 345, 0, 0, 0, 405, 0, 458, 462,
	0, 0, 0, 0, 0, 0, 316, 0, 766, 0,
	772, 0, 778, 0, 527, 0, 768, 769, 774, 247,
	890, 550, 621, 0, 0, 0, 412, 0, 0, 0,
	0, 0, 0, 0, 255, 0, 0, 0, 0, 770,
	767, 771, 777, 765, 775, 762, 773, 0, 449, 383,
	0, 476, 254, 300, 287, 329, 371, 483, 0, 0,
	361, 531, 296, 385, 0, 275, 418, 0, 507, 382,
	0, 490, 510, 0, 402, 281, 441, 497, 498, 759,
	764, 0, 780, 0, 285, 286, 407, 267, 415, 0,
	0, 470, 428, 426, 5002, 393, 450, 0, 0, 0,
	315, 0, 310, 406, 546, 273, 525, 444, 411, 365,
	473, 502, 312, 297, 298, 341, 443, 331, 283, 536,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 332,
	0, 0, 544, 893, 883, 875, 876, 877, 878, 879,
	880, 0, 895, 896, 897, 898, 899, 537, 889, 0,
	874, 881, 882, 884, 0, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 243, 0, 244, 245, 246,
	248, 249, 250, 758, 251, 252, 253, 256, 257, 258,
	260, 620, 261, 262, 263, 264, 265, 266, 0, 760,
	268, 269, 270, 271, 272, 274, 276, 277, 278, 279,
	280, 282, 284, 0, 0, 0, 763, 0, 0, 0,
	288, 289, 290, 291, 292, 293, 0, 294, 295, 299,
	301, 302, 303, 304, 305, 306, 309, 0, 311, 313,
	0, 314, 317, 0, 318, 319, 320, 321, 322, 323,
	324, 325, 0, 326, 0, 327, 328, 330, 0, 333,
	334, 335, 336, 337, 0, 338, 0, 0, 339, 340,
	342, 343, 344, 346, 347, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 360, 362,
	0, 363, 364, 367, 368, 369, 370, 0, 372, 0,
	0, 373, 374, 375, 0, 0, 376, 377, 378, 379,
	380, 381, 384, 0, 386, 387, 388, 389, 390, 391,
	392, 622, 394, 395, 396, 397, 398, 399, 400, 0,
	0, 401, 403, 404, 0, 0, 0, 776, 419, 420,
	421, 422, 423, 424, 425, 427, 0, 429, 430, 431,
	0, 432, 433, 434, 435, 0, 436, 437, 438, 439,
	440, 442, 445, 446, 447, 448, 0, 451, 452, 453,
	454, 455, 456, 457, 459, 460, 461, 463, 464, 465,
	623, 466, 467, 468, 469, 0, 471, 472, 624, 474,
	475, 477, 478, 479, 480, 481, 482, 633, 0, 484,
	0, 485, 486, 487, 488, 489, 0, 491, 492, 493,
	494, 495, 496, 499, 500, 501, 503, 504, 0, 505,
	506, 0, 508, 509, 779, 511, 512, 513, 514, 515,
	0, 634, 516, 0, 517, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 0, 528, 529, 530, 532,
	533, 534, 535, 538, 539, 540, 541, 542, 0, 543,
	545, 547, 625, 0, 0, 891, 0, 0, 0, 0,
	0, 0, 548, 549, 0, 416, 410, 366, 408, 409,
	413, 414, 417, 242, 0, 259, 761, 0, 308, 345,
	0, 0, 0, 405, 0, 458, 462, 0, 0, 0,
	0, 0, 0, 316, 0, 766, 0, 772, 0, 778,
	0, 527, 0, 768, 769, 774, 247, 890, 550, 621,
	0, 0, 0, 412, 0, 0, 0, 0, 0, 0,
	0, 255, 0, 0, 0, 0, 770, 767, 771, 777,
	765, 775, 762, 773, 0, 449, 383, 0, 476, 254,
	300, 287, 329, 371, 483, 0, 0, 361, 531, 296,
	385, 0, 275, 418, 0, 507, 382, 0, 490, 510,
	0, 402, 281, 441, 497, 498, 759, 764, 0, 780,
	0, 285, 286, 407, 267, 415, 0, 0, 470, 428,
	426, 0, 393, 450, 0, 0, 0, 315, 0, 310,
	406, 546, 273, 525, 444, 411, 365, 473, 502, 312,
	297, 298, 341, 443, 331, 283, 536, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 332, 0, 0, 544,
	893, 883, 875, 876, 877, 878, 879, 880, 0, 895,
	896, 897, 898, 899, 537, 889, 0, 874, 881, 882,
	884, 0, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 243, 0, 244, 245, 246, 248, 249, 250,
	758, 251, 252, 253, 256, 257, 258, 260, 620, 261,
	262, 263, 264, 265, 266, 0, 760, 268, 269, 270,
	271, 272, 274, 276, 277, 278, 279, 280, 282, 284,
	0, 0, 0, 763, 0, 0, 0, 288, 289, 290,
	291, 292, 293, 0, 294, 295, 299, 301, 302, 303,
	304, 305, 306, 309, 0, 311, 313, 0, 314, 317,
	0, 318, 319, 320, 321, 322, 323, 324, 325, 0,
	326, 0, 327, 328, 330, 0, 333, 334, 335, 336,
	337, 0, 338, 0, 0, 339, 340, 342, 343, 344,
	346, 347, 348, 349, 350, 351, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 360, 362, 0, 363, 364,
	367, 368, 369, 370, 0, 372, 0, 0, 373, 374,
	375, 0, 0, 376, 377, 378, 379, 380, 381, 384,
	0, 386, 387, 388, 389, 390, 391, 392, 622, 394,
	395, 396, 397, 398, 399, 400, 4764, 0, 401, 403,
	404, 0, 0, 0, 776, 419, 420, 421, 422, 423,
	424, 425, 427, 0, 429, 430, 431, 0, 432, 433,
	434, 435, 0, 436, 437, 438, 439, 440, 442, 445,
	446, 447, 448, 0, 451, 452, 453, 454, 455, 456,
	457, 459, 460, 461, 463, 464, 465, 623, 466, 467,
	468, 469, 0, 471, 472, 624, 474, 475, 477, 478,
	479, 480, 481, 482, 633, 0, 484, 0, 485, 486,
	487, 488, 489, 0, 491, 492, 493, 494, 495, 496,
	499, 500, 501, 503, 504, 0, 505, 506, 0, 508,
	509, 779, 511, 512, 513, 514, 515, 0, 634, 516,
	0, 517, 0, 518, 519, 520, 521, 522, 523, 524,
	526, 0, 0, 528, 529, 530, 532, 533, 534, 535,
	538, 539, 540, 541, 542, 0, 543, 545, 547, 625,
	0, 0, 891, 0, 0, 0, 0, 0, 0, 548,
	549, 0, 416, 410, 366, 408, 409, 413, 414, 417,
	242, 0, 259, 761, 0, 308, 345, 0, 0, 0,
	405, 0, 458, 462, 0, 0, 0, 0, 0, 0,
	316, 0, 766, 0, 772, 0, 778, 0, 527, 0,
	768, 769, 774, 247, 890, 550, 621, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 770, 767, 771, 777, 765, 775, 762,
	773, 0, 449, 383, 0, 476, 254, 300, 287, 329,
	371, 483, 0, 0, 361, 531, 296, 385, 0, 275,
	418, 0, 507, 382, 0, 490, 510, 0, 402, 281,
	441, 497, 498, 759, 764, 0, 780, 0, 285, 286,
	407, 267, 415, 0, 0, 470, 428, 426, 0, 393,
	450, 0, 0, 0, 315, 0, 310, 406, 546, 273,
	525, 444, 411, 365, 473, 502, 312, 297, 298, 341,
	443, 331, 283, 536, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 332, 0, 0, 544, 893, 883, 875,
	876, 877, 878, 879, 880, 0, 895, 896, 897, 898,
	899, 537, 889, 0, 874, 881, 882, 884, 0, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	0, 244, 245, 246, 248, 249, 250, 758, 251, 252,
	253, 256, 257, 258, 260, 620, 261, 262, 263, 264,
	265, 266, 0, 760, 268, 269, 270, 271, 272, 274,
	276, 277, 278, 279, 280, 282, 284, 0, 0, 0,
	763, 0, 0, 0, 288, 289, 290, 291, 292, 293,
	0, 294, 295, 299, 301, 302, 303, 304, 305, 306,
	309, 0, 311, 313, 0, 314, 317, 0, 318, 319,
	320, 321, 322, 323, 324, 325, 0, 326, 0, 327,
	328, 330, 0, 333, 334, 335, 336, 337, 0, 338,
	0, 0, 339, 340, 342, 343, 344, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 360, 362, 0, 363, 364, 367, 368, 369,
	370, 0, 372, 0, 0, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 380, 381, 384, 0, 386, 387,
	388, 389, 390, 391, 392, 622, 394, 395, 396, 397,
	398, 399, 400, 0, 0, 401, 403, 404, 0, 0,
	0, 776, 419, 420, 421, 422, 423, 424, 425, 427,
	0, 429, 430, 431, 0, 432, 433, 434, 435, 0,
	436, 437, 438, 439, 440, 442, 445, 446, 447, 448,
	0, 451, 452, 453, 454, 455, 456, 457, 459, 460,
	461, 463, 464, 465, 623, 466, 467, 468, 469, 0,
	471, 472, 624, 474, 475, 477, 478, 479, 480, 481,
	482, 633, 0, 484, 2390, 485, 486, 487, 488, 489,
	0, 491, 492, 493, 494, 495, 496, 499, 500, 501,
	503, 504, 0, 505, 506, 0, 508, 509, 779, 511,
	512, 513, 514, 515, 0, 634, 516, 0, 517, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 0,
	528, 529, 530, 532, 533, 534, 535, 538, 539, 540,
	541, 542, 0, 543, 545, 547, 625, 0, 0, 891,
	0, 0, 0, 0, 0, 0, 548, 549, 0, 416,
	410, 366, 408, 409, 413, 414, 417, 242, 0, 259,
	761, 0, 308, 345, 0, 0, 0, 405, 0, 458,
	462, 0, 0, 0, 0, 0, 0, 316, 0, 766,
	0, 772, 0, 778, 0, 527, 0, 768, 769, 774,
	247, 890, 550, 621, 0, 0, 0, 412, 0, 0,
	0, 0, 0, 0, 0, 255, 0, 0, 0, 0,
	770, 767, 771, 777, 765, 775, 762, 773, 0, 449,
	383, 0, 476, 254, 300, 287, 329, 371, 483, 0,
	0, 361, 531, 296, 385, 0, 275, 418, 0, 507,
	382, 0, 490, 510, 0, 402, 281, 441, 497, 498,
	759, 764, 0, 780, 0, 285, 286, 407, 267, 415,
	0, 0, 470, 428, 426, 0, 393, 450, 0, 0,
	0, 315, 0, 310, 406, 546, 273, 525, 444, 411,
	365, 473, 502, 312, 297, 298, 341, 443, 331, 283,
	536, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	332, 0, 0, 544, 893, 883, 875, 876, 877, 878,
	879, 880, 0, 895, 896, 897, 898, 899, 537, 889,
	0, 874, 881, 882, 884, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 243, 0, 244, 245,
	246, 248, 249, 250, 758, 251, 252, 253, 256, 257,
	258, 260, 620, 261, 262, 263, 264, 265, 266, 0,
	760, 268, 269, 270, 271, 272, 274, 276, 277, 278,
	279, 280, 282, 284, 0, 0, 0, 763, 0, 0,
	0, 288, 289, 290, 291, 292, 293, 0, 294, 295,
	299, 301, 302, 303, 304, 305, 306, 309, 0, 311,
	313, 0, 314, 317, 0, 318, 319, 320, 321, 322,
	323, 324, 325, 0, 326, 0, 327, 328, 330, 0,
	333, 334, 335, 336, 337, 0, 338, 0, 0, 339,
	340, 342, 343, 344, 346, 347, 348, 349, 350, 351,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 360,
	362, 0, 363, 364, 367, 368, 369, 370, 0, 372,
	0, 0, 373, 374, 375, 0, 0, 376, 377, 378,
	379, 380, 381, 384, 0, 386, 387, 388, 389, 390,
	391, 392, 622, 394, 395, 396, 397, 398, 399, 400,
	4224, 0, 401, 403, 404, 0, 0, 0, 776, 419,
	420, 421, 422, 423, 424, 425, 427, 0, 429, 430,
	431, 0, 432, 433, 434, 435, 0, 436, 437, 438,
	439, 440, 442, 445, 446, 447, 448, 0, 451, 452,
	453, 454, 455, 456, 457, 459, 460, 461, 463, 464,
	465, 623, 466, 467, 468, 469, 0, 471, 472, 624,
	474, 475, 477, 478, 479, 480, 481, 482, 633, 0,
	484, 0, 485, 486, 487, 488, 489, 0, 491, 492,
	493, 494, 495, 496, 499, 500, 501, 503, 504, 0,
	505, 506, 0, 508, 509, 779, 511, 512, 513, 514,
	515, 0, 634, 516, 0, 517, 0, 518, 519, 520,
	521, 522, 523, 524, 526, 0, 0, 528, 529, 530,
	532, 533, 534, 535, 538, 539, 540, 541, 542, 0,
	543, 545, 547, 625, 0, 0, 891, 0, 0, 0,
	0, 0, 0, 548, 549, 0, 416, 410, 366, 408,
	409, 413, 414, 417, 242, 0, 259, 761, 0, 308,
	345, 0, 0, 0, 405, 0, 458, 462, 0, 0,
	0, 0, 0, 0, 316, 0, 766, 0, 772, 0,
	778, 0, 527, 0, 768, 769, 774, 247, 890, 550,
	621, 0, 0, 0, 412, 0, 0, 0, 0, 0,
	0, 0, 255, 0, 0, 0, 0, 770, 767, 771,
	777, 765, 775, 762, 773, 0, 449, 383, 0, 476,
	254, 300, 287, 329, 371, 483, 0, 0, 361, 531,
	296, 385, 0, 275, 418, 0, 507, 382, 0, 490,
	510, 0, 402, 281, 441, 497, 498, 759, 764, 0,
	780, 0, 285, 286, 407, 267, 415, 0, 0, 470,
	428, 426, 0, 393, 450, 0, 0, 0, 315, 0,
	310, 406, 546, 273, 525, 444, 411, 365, 473, 502,
	312, 297, 298, 341, 443, 331, 283, 536, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 332, 0, 0,
	544, 893, 883, 875, 876, 877, 878, 879, 880, 0,
	895, 896, 897, 898, 899, 537, 889, 0, 874, 881,
	882, 884, 0, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 243, 0, 244, 245, 246, 248, 249,
	250, 758, 251, 252, 253, 256, 257, 258, 260, 620,
	261, 262, 263, 264, 265, 266, 0, 760, 268, 269,
	270, 271, 272, 274, 276, 277, 278, 279, 280, 282,
	284, 0, 0, 0, 763, 0, 0, 0, 288, 289,
	290, 291, 292, 293, 0, 294, 295, 299, 301, 302,
	303, 304, 305, 306, 309, 0, 311, 313, 0, 314,
	317, 0, 318, 319, 320, 321, 322, 323, 324, 325,
	0, 326, 0, 327, 328, 330, 0, 333, 334, 335,
	336, 337, 0, 338, 0, 0, 339, 340, 342, 343,
	344, 346, 347, 348, 349, 350, 351, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 360, 362, 0, 363,
	364, 367, 368, 369, 370, 0, 372, 0, 0, 373,
	374, 375, 0, 0, 376, 377, 378, 379, 380, 381,
	384, 0, 386, 387, 388, 389, 390, 391, 392, 622,
	394, 395, 396, 397, 398, 399, 400, 0, 0, 401,
	403, 404, 0, 0, 0, 776, 419, 420, 421, 422,
	423, 424, 425, 427, 0, 429, 430, 431, 0, 432,
	433, 434, 435, 0, 436, 437, 438, 439, 440, 442,
	445, 446, 447, 448, 0, 451, 452, 453, 454, 455,
	456, 457, 459, 460, 461, 463, 464, 465, 623, 466,
	467, 468, 469, 0, 471, 472, 624, 474, 475, 477,
	478, 479, 480, 481, 482, 633, 0, 484, 0, 485,
	486, 487, 488, 489, 0, 491, 492, 493, 494, 495,
	496, 499, 500, 501, 503, 504, 0, 505, 506, 0,
	508, 509, 779, 511, 512, 513, 514, 515, 0, 634,
	516, 0, 517, 0, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 0, 528, 529, 530, 532, 533, 534,
	535, 538, 539, 540, 541, 542, 0, 543, 545, 547,
	625, 0, 0, 891, 0, 0, 0, 0, 0, 0,
	548, 549, 0, 416, 410, 366, 408, 409, 413, 414,
	417, 242, 0, 259, 761, 0, 308, 901, 0, 0,
	0, 405, 0, 458, 462, 0, 0, 0, 0, 0,
	0, 316, 0, 766, 0, 772, 0, 778, 0, 527,
	0, 768, 769, 774, 247, 890, 550, 621, 0, 0,
	0, 412, 0, 0, 0, 0, 0, 0, 0, 255,
	0, 0, 0, 0, 770, 767, 771, 777, 765, 775,
	762, 773, 0, 449, 383, 0, 476, 254, 300, 287,
	329, 371, 483, 0, 0, 361, 531, 296, 385, 0,
	275, 418, 0, 507, 382, 0, 490, 510, 0, 402,
	281, 441, 497, 498, 759, 764, 0, 780, 0, 285,
	286, 407, 267, 415, 0, 0, 470, 428, 426, 0,
	393, 450, 0, 0, 0, 315, 0, 310, 406, 546,
	273, 525, 444, 411, 365, 473, 502, 312, 297, 298,
	341, 443, 331, 283, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 332, 0, 0, 544, 893, 883,
	875, 876, 877, 878, 879, 880, 0, 895, 896, 897,
	898, 899, 537, 889, 0, 874, 881, 882, 884, 0,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	243, 0, 244, 245, 246, 248, 249, 250, 758, 251,
	252, 253, 256, 257, 258, 260, 620, 261, 262, 263,
	264, 265, 266, 0, 760, 268, 269, 270, 271, 272,
	274, 276, 277, 278, 279, 280, 282, 284, 0, 0,
	0, 763, 0, 0, 0, 288, 289, 290, 291, 292,
	293, 0, 294, 295, 299, 301, 302, 303, 304, 305,
	306, 309, 0, 311, 313, 0, 314, 317, 0, 318,
	319, 320, 321, 322, 323, 324, 325, 0, 326, 0,
	327, 328, 330, 0, 333, 334, 335, 336, 337, 0,
	338, 0, 0, 339, 340, 342, 343, 344, 346, 347,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 360, 362, 0, 363, 364, 367, 368,
	369, 370, 0, 372, 0, 0, 373, 374, 375, 0,
	0, 376, 377, 378, 379, 380, 381, 384, 0, 386,
	387, 388, 389, 390, 391, 392, 622, 394, 395, 396,
	397, 398, 399, 400, 0, 0, 401, 403, 404, 0,
	0, 0, 776, 419, 420, 421, 422, 423, 424, 425,
	427, 0, 429, 430, 431, 0, 432, 433, 434, 435,
	0, 436, 437, 438, 439, 440, 442, 445, 446, 447,
	448, 0, 451, 452, 453, 454, 455, 456, 457, 459,
	460, 461, 463, 464, 465, 623, 466, 467, 468, 469,
	0, 471, 472, 624, 474, 475, 477, 478, 479, 480,
	481, 482, 633, 0, 484, 0, 485, 486, 487, 488,
	489, 0, 491, 492, 493, 494, 495, 496, 499, 500,
	501, 503, 504, 0, 505, 506, 0, 508, 509, 779,
	511, 512, 513, 514, 515, 0, 634, 516, 0, 517,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	0, 528, 529, 530, 532, 533, 534, 535, 538, 539,
	540, 541, 542, 0, 543, 545, 547, 625, 0, 0,
	891, 0, 0, 0, 0, 0, 0, 548, 549, 0,
	416, 410, 366, 408, 409, 413, 414, 417, 242, 0,
	259, 761, 0, 308, 865, 0, 0, 0, 405, 0,
	458, 462, 0, 0, 0, 0, 0, 0, 316, 0,
	766, 0, 772, 0, 778, 0, 527, 0, 768, 769,
	774, 247, 890, 550, 621, 0, 0, 0, 412, 0,
	0, 0, 0, 0, 0, 0, 255, 0, 0, 0,
	0, 770, 767, 771, 777, 765, 775, 762, 773, 0,
	449, 383, 0, 476, 254, 300, 287, 329, 371, 483,
	0, 0, 361, 531, 296, 385, 0, 275, 418, 0,
	507, 382, 0, 490, 510, 0, 402, 281, 441, 497,
	498, 759, 764, 0, 780, 0, 285, 286, 407, 267,
	415, 0, 0, 470, 428, 426, 0, 393, 450, 0,
	0, 0, 315, 0, 310, 406, 546, 273, 525, 444,
	411, 365, 473, 502, 312, 297, 298, 341, 443, 331,
	283, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 332, 0, 0, 544, 893, 883, 875, 876, 877,
	878, 879, 880, 0, 895, 896, 897, 898, 899, 537,
	889, 0, 874, 881, 882, 884, 0, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 243, 0, 244,
	245, 246, 248, 249, 250, 758, 251, 252, 253, 256,
	257, 258, 260, 620, 261, 262, 263, 264, 265, 266,
	0, 760, 268, 269, 270, 271, 272, 274, 276, 277,
	278, 279, 280, 282, 284, 0, 0, 0, 763, 0,
	0, 0, 288, 289, 290, 291, 292, 293, 0, 294,
	295, 299, 301, 302, 303, 304, 305, 306, 309, 0,
	311, 313, 0, 314, 317, 0, 318, 319, 320, 321,
	322, 323, 324, 325, 0, 326, 0, 327, 328, 330,
	0, 333, 334, 335, 336, 337, 0, 338, 0, 0,
	339, 340, 342, 343, 344, 346, 347, 348, 349, 350,
	351, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	360, 362, 0, 363, 364, 367, 368, 369, 370, 0,
	372, 0, 0, 373, 374, 375, 0, 0, 376, 377,
	378, 379, 380, 381, 384, 0, 386, 387, 388, 389,
	390, 391, 392, 622, 394, 395, 396, 397, 398, 399,
	400, 0, 0, 401, 403, 404, 0, 0, 0, 776,
	419, 420, 421, 422, 423, 424, 425, 427, 0, 429,
	430, 431, 0, 432, 433, 434, 435, 0, 436, 437,
	438, 439, 440, 442, 445, 446, 447, 448, 0, 451,
	452, 453, 454, 455, 456, 457, 459, 460, 461, 463,
	464, 465, 623, 466, 467, 468, 469, 0, 471, 472,
	624, 474, 475, 477, 478, 479, 480, 481, 482, 633,
	0, 484, 0, 485, 486, 487, 488, 489, 0, 491,
	492, 493, 494, 495, 496, 499, 500, 501, 503, 504,
	0, 505, 506, 0, 508, 509, 779, 511, 512, 513,
	514, 515, 0, 634, 516, 0, 517, 0, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 0, 528, 529,
	530, 532, 533, 534, 535, 538, 539, 540, 541, 542,
	0, 543, 545, 547, 625, 0, 0, 891, 0, 0,
	0, 0, 0, 0, 548, 549, 0, 416, 410, 366,
	408, 409, 413, 414, 417, 242, 0, 259, 761, 0,
	308, 345, 0, 0, 0, 405, 0, 458, 462, 0,
	0, 0, 0, 0, 0, 316, 0, 766, 0, 772,
	0, 778, 0, 527, 0, 768, 769, 774, 247, 0,
	550, 621, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 770, 767,
	771, 777, 765, 775, 762, 773, 0, 449, 383, 0,
	476, 254, 300, 287, 329, 371, 483, 0, 0, 361,
	531, 296, 385, 0, 275, 418, 0, 507, 382, 0,
	490, 510, 0, 402, 281, 441, 497, 498, 759, 764,
	0, 780, 0, 285, 286, 407, 267, 415, 0, 0,
	470, 428, 426, 0, 393, 450, 0, 0, 0, 315,
	0, 310, 406, 546, 273, 525, 444, 411, 365, 473,
	502, 312, 297, 298, 341, 443, 331, 283, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 332, 0,
	0, 544, 0, 0, 0, 0, 0, 0, 0, 307,
	0, 0, 0, 0, 0, 0, 537, 0, 0, 0,
	0, 0, 0, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 243, 0, 244, 245, 246, 248,
	249, 250, 758, 251, 252, 253, 256, 257, 258, 260,
	620, 261, 262, 263, 264, 265, 266, 0, 760, 268,
	269, 270, 271, 272, 274, 276, 277, 278, 279, 280,
	282, 284, 0, 0, 0, 763, 0, 0, 0, 288,
	289, 290, 291, 292, 293, 0, 294, 295, 299, 301,
	302, 303, 304, 305, 306, 309, 0, 311, 313, 0,
	314, 317, 0, 318, 319, 320, 321, 322, 323, 324,
	325, 0, 326, 0, 327, 328, 330, 0, 333, 334,
	335, 336, 337, 0, 338, 0, 0, 339, 340, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 360, 362, 0,
	363, 364, 367, 368, 369, 370, 0, 372, 0, 0,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 380,
	381, 384, 0, 386, 387, 388, 389, 390, 391, 392,
	622, 394, 395, 396, 397, 398, 399, 400, 0, 0,
	401, 403, 404, 0, 0, 0, 776, 419, 420, 421,
	422, 423, 424, 425, 427, 0, 429, 430, 431, 0,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	442, 445, 446, 447, 448, 0, 451, 452, 453, 454,
	455, 456, 457, 459, 460, 461, 463, 464, 465, 623,
	466, 467, 468, 469, 0, 471, 472, 624, 474, 475,
	477, 478, 479, 480, 481, 482, 633, 0, 484, 0,
	485, 486, 487, 488, 489, 0, 491, 492, 493, 494,
	495, 496, 499, 500, 501, 503, 504, 0, 505, 506,
	0, 508, 509, 779, 511, 512, 513, 514, 515, 0,
	634, 516, 0, 517, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 0, 528, 529, 530, 532, 533,
	534, 535, 538, 539, 540, 541, 542, 0, 543, 545,
	547, 625, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 549, 0, 416, 410, 366, 408, 409, 413,
	414, 417,
}

var yyPact = [...]int32{
	8831, -1000, 281, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1280, 1280, -1000,
	-1000, 2925, 1075, 7806, 16106, 16270, 3032, 87903, 71743, 1280,
	1390, 1354, 1349, 72753, 87398, 1389, 61138, 60633, -1000, 1379,
	811, 832, 3584, 65178, 277, 86893, 72753, 911, 8831, 3704,
	-1000, -1000, 2091, 3210, 65178, 3336, 3209, 832, 72753, -1000,
	1689, 2152, 2051, 3621, 86388, 72753, 44002, 72753, 3018, 85883,
	85378, 2572, 84873, 53108, 3031, 1370, 72753, 72753, 1970, 84368,
	72753, 72753, 1028, 2390, 50582, 50582, -1000, -1000, 1411, 1408,
	-1000, -1000, -1000, 64673, 71238, 83863, 83358, 1291, 2569, 56643,
	72753, 72753, 72753, 72753, 56643, 50582, 2081, 2314, 82853, 56643,
	72753, 56643, 72753, 72753, 72753, 72753, 72753, 1361, 50077, 49572,
	72753, 82348, 3017, 72753, 72753, -1000, 81843, 81338, 80833, 93296,
	92809, 3810, 52603, 52098, 51593, -1000, -1000, -1000, 1277, 2567,
	-1000, -1000, -1000, 3012, 1946, 1360, -1000, 2080, -1000, -1000,
	-1000, -1000, -1000, -1000, 1270, -1000, 73763, 70733, 1930, -1000,
	-1000, 773, 3470, 3867, 3867, 3600, 55128, 1185, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3468, 2092, 2450, 331, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3704, 2091, 3704, 3867,
	3371, 3867, -1000, -1000, -1000, -1000, 72753, -1000, 3867, 3201,
	410, 806, -1000, 669, 669, 669, 2900, 669, 3200, 1176,
	579, 687, -1000, 2516, 3580, 3580, 3580, 3270, 1379, -1000,
	-1000, 648, 644, 811, 23464, 23464, -1000, 3196, -1000, 292,
	-1000, 329, 56138, 1027, 276, 72753, -1000, 854, -1000, 276,
	28606, -1000, -1000, 2015, -1000, 360, -1000, 2054, 1648, -1000,
	2353, 72753, 2981, 80328, 65178, 65178, 639, -1000, 669, 79823,
	72753, 1256, 79318, 3809, 56643, 56643, 72753, 1358, 56643, 2778,
	1733, -1000, 1786, 2448, -1000, 3696, 3818, 327, 902, 72753,
	72753, -1000, 328, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1162, 1816, 1102,
	3695, 1533, 3694, 2654, 78813, 1345, 3690, 2814, 1533, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1252, 72753, 1821, 3193, 72753, 854, 3687, -1000, 2810,
	2403, 92322, 72753, 1533, 1533, -1000, -1000, -1000, -1000, 7967,
	3795, 3552, 7169, 3791, 3551, 16023, 3789, 12019, 3784, 70228,
	69723, 2650, 1707, 1026, -1000, 329, -1000, -1000, -1000, 1684,
	1683, 1680, 1757, 13344, 1026, -1000, 329, 1679, 2649, 72753,
	72753, 72753, 3192, 3783, 8484, 1992, 7451, 1678, 1262, 2294,
	3189, 3187, 72753, 1674, 1538, 3550, 1664, 2773, 1538, 3550,
	1854, 1966, 3781, 1725, 2332, 2674, 3778, 366, -1000, 3775,
	371, -1000, 3186, 3774, 368, 3772, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 305, -1000, -1000, -1000, -1000, -1000, 946,
	2512, 942, 942, 942, -1000, -1000, -1000, -1000, -1000, 453,
	520, -1000, -1000, 2502, 1025, 2502, 2502, -1000, 2508, 2502,
	368, 3771, 78308, 2788, 121, 3770, -1000, 121, 3769, 121,
	3768, -1000, 2647, -1000, 1697, -1000, -1000, -1000, 3809, -1000,
	2439, -1000, 3837, 53613, 360, 3867, 2836, 40882, 40368, 72753,
	529, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2370, -1000, 2052, -1000, -1000, -1000, -1000, -1000, -1000, 77803,
	-1000, -1000, -1000, 62148, 50582, 63158, 1024, 72753, -1000, 72753,
	-1000, -1000, -1000, -1000, 62148, 2772, 50582, 2769, 2513, 2748,
	2767, 1616, 3272, 2492, -1000, 28092, 2176, 32718, 2833, 811,
	-1000, -1000, 811, 811, 28606, -1000, 2516, -1000, -1000, 3208,
	163, -1000, 17749, -1000, -1000, 28606, 28606, 28606, 28606, 28606,
	1841, 3624, -1000, -1000, -1000, -1000, 22435, -1000, -1000, 329,
	916, 657, -1000, -1000, 1023, -1000, 848, 1021, 329, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1163, 3867, 1144,
	28606, 1231, 2281, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1015, 1014, 2750, -1000, 1012, 1011, 1010, 1007, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1006, 1004, 1003, 1002,
	999, 998, 996, 995, 993, 988, 983, 982, 981, 978,
	977, 973, 970, 968, 966, 965, 964, 875, 963, 962,
	961, 960, 958, 957, 951, -1000, 2502, -1000, 2502, 2502,
	942, 942, 946, -1000, -1000, 2508, 2502, 942, -1000, -1000,
	520, 453, -1000, -1000, -1000, -1000, -1000, 451, 936, -1000,
	329, -1000, 17230, 28606, -1000, 72753, 28606, 72753, 276, 3840,
	72753, 262, 15775, -1000, 2427, 2091, -1000, 1542, -1000, -1000,
	-1000, 1572, 3839, 54118, -1000, 72753, 3092, 3084, 3457, 3314,
	797, 3653, 669, 72753, 3102, 3650, 77298, -1000, 925, 925,
	2323, 72753, 924, 92322, 2077, 1645, -1000, 50582, 3806, 3764,
	92322, -1000, 300, 18796, -1000, 18796, 3577, 3082, 42415, -1000,
	599, 72753, 72753, 72753, 72753, -1000, 72753, 3762, -1000, -1000,
	-1000, 3754, 72753, 761, 3648, 1296, 3867, 3753, 48562, 3646,
	-1000, 76793, 3184, 1997, 50582, 72753, 1348, 3182, 3752, -1000,
	61643, 902, 3867, 3838, 2749, -1000, -1000, 201, -1000, 1536,
	-1000, 1813, 1809, 58141, 1504, 1483, 2851, 794, 3181, 1945,
	1413, 72753, 2290, 72753, 2832, 3455, 719, 2198, 1591, -1000,
	919, 65178, 1453, 201, -1000, 3453, 1796, 72753, 1446, 201,
	3452, 3102, -1000, 2221, 92322, 843, -1000, 3269, -1000, 843,
	843, 3268, 1924, 1533, 1533, -1000, 72753, 201, 1552, 72753,
	10821, 3751, 3543, 10615, 3750, 72753, 3451, -1000, 60145, 329,
	3450, 3449, 3448, 2898, -1000, 2927, 3583, 1579, 2848, 3447,
	6725, -1000, 3180, 3532, -1000, -1000, -1000, -1000, 1557, 2195,
	-1000, 2059, 843, 843, 72753, -1000, 72753, 76288, -1000, -1000,
	329, 3446, 2906, -1000, -1000, 1660, 3080, 3079, 72753, 72753,
	3444, 6725, 3442, 49067, 62653, 62653, 3441, 6725, 3440, 3439,
	1155, -1000, 3527, 3438, 781, 3867, 1741, 1737, 1736, -1000,
	-1000, 902, 72753, 72753, 1895, 3436, -1000, 1911, 2361, 1911,
	3434, 48562, -1000, 1911, 1911, 3430, 719, 719, 3428, 1477,
	72753, 72753, 72753, 72753, 72753, 2599, 2510, 2497, 918, 275,
	-1000, 2459, -1000, 6929, 72753, 72753, -1000, -1000, -1000, 72753,
	72753, -1000, 72753, 72753, 92322, -1000, 92322, -1000, 314, 28606,
	-1000, 3859, -1000, -1000, -1000, -1000, 3859, -1000, 3472, 3318,
	3859, -1000, 917, -1000, 3859, -1000, -1000, 2502, 2502, -1000,
	-1000, 92322, 366, 3749, 48562, 3748, 50582, 50582, 50582, 50582,
	-1000, -1000, -1000, -1000, -1000, 72753, 3837, 1382, -1000, -1000,
	-1000, -1000, 274, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3863, 3861, -1000, -1000, 274, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 72753, -1000, 3427, 263, 72753, 72753, 1694,
	56643, 56643, 56643, 72753, 72753, 72753, 2635, 72753, 72753, 72753,
	72753, 1861, -1000, 361, -1000, 72753, 260, -1000, 258, 3335,
	61138, 192, 63158, -1000, -1000, -1000, -1000, -1000, 1630, 3280,
	-1000, 1205, -1000, 1503, -1000, -1000, 273, 15775, -1000, 34260,
	-1000, -1000, -1000, 1852, 15775, -1000, 32204, 32204, 1561, 72753,
	2098, -1000, 2098, 142, -1000, 5792, 2513, 2748, 3334, 69218,
	23464, 92322, 72753, 3464, 28606, 28606, 28606, 28606, 28606, 28606,
	28606, 28606, 28606, 28606, 28606, 28606, 28606, 28606, 28606, 28606,
	3504, 28606, 3422, 2800, -1000, -1000, 3421, 892, 1608, 18796,
	-1000, -1000, 908, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 588, 588, 439,
	12691, 12691, 656, 916, 3567, 329, 15717, 272, 324, 911,
	329, -1000, -1000, -1000, 23979, 28606, 42415, 27577, 329, -1000,
	20890, -1000, 1475, 3859, 3480, 15775, 2281, 3216, 1143, 910,
	28606, 28606, 909, 3859, 3859, 3859, 3859, 28606, 1763, 28606,
	28606, 33746, 28606, 28606, 22950, 28606, 28606, 28606, 28606, 28606,
	1905, 28606, 2370, 35288, 1903, 28606, 27063, 21920, 28606, 28606,
	28606, 632, 28606, 28606, 28606, 2370, 3334, 28606, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 15616, -72, 631, 243, -1000,
	3096, 240, 28606, -1000, 72753, 3464, 28606, 28606, 28606, 28606,
	3422, 2800, 3421, 892, 908, -1000, -1000, -1000, 1565, 1685,
	-1000, 3179, -1000, 2915, 47047, 3028, 72753, 549, -1000, 1039,
	72753, -1000, -1000, 3291, 37838, 37838, 2857, 2857, -1000, -1000,
	58646, 72753, 2831, 3747, 3595, 907, -1000, 3102, 2287, 3746,
	3178, 3643, -1000, 12978, 59656, 12638, 1730, -1000, -1000, 2830,
	2473, 902, -1000, 57653, 2076, 72753, 72753, 1250, -1000, -1000,
	-1000, -1000, -1000, -1000, 2003, 72753, -1000, 18796, -1000, 233,
	-1000, 1037, 2747, 72753, -1000, 72753, 904, 902, 902, 902,
	902, 902, -1000, 72753, 1753, 72753, 1454, 58646, 2827, 3745,
	2266, -1000, -1000, 72753, 1529, -1000, -1000, 3744, 1889, 3836,
	3637, 669, 18796, 3880, -1000, 3835, 2373, 39353, 72753, 1428,
	493, -1000, 65178, 3542, 313, 669, -1000, 292, -1000, 1719,
	92322, 3867, 1889, 1889, 6792, 72753, 72753, 72753, -1000, 72753,
	72753, -1000, 3632, 75783, -1000, 92322, 72753, -1000, 899, 3108,
	1204, 1202, 3061, 68713, 72753, 75278, 74773, 72753, 1445, -1000,
	-1000, 1940, 72753, -1000, 18796, 72753, 64168, 1431, 1430, 72753,
	2046, 63663, 72753, 2044, -1000, 72753, 1588, -1000, -1000, 50582,
	-1000, 2931, 2028, 19307, 6675, 72753, 72753, 72753, 10329, 72753,
	72753, -1000, -1000, -1000, -1000, -1000, -1000, 843, -1000, -1000,
	-1000, 72753, 72753, 843, 843, 15761, 72753, 72753, 9954, 201,
	1550, 72753, 1438, 201, 1541, 65178, 1447, 72753, 218, -1000,
	-1000, 91348, 88913, -1000, 1844, -1000, -1000, -1000, 305, -1000,
	93783, 72753, 72753, 72753, 72753, 72753, -1000, 3531, 74268, 28606,
	3529, -1000, 72753, -1000, 898, 3524, 72753, 72753, -1000, -1000,
	-1000, 3520, 3176, 2172, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2442, 1491, 50582, 50582, 3417, 72753, 72753, 1968,
	3172, 72753, -1000, 72753, -1000, 271, 271, 271, 72753, -1000,
	72753, 72753, -1000, -1000, -1000, 72753, -1000, 72753, -1000, 3597,
	72753, 72753, -1000, 1651, 1647, 3411, -1000, 1799, -1000, 50582,
	1913, -1000, 73763, -1000, 72753, -1000, 50582, 1526, 1913, -1000,
	-1000, 72753, -1000, -1000, 72753, 814, 2970, 1640, 1637, 1632,
	1623, 72753, 72753, 3867, 3803, 72753, 3867, 73258, 18796, 2648,
	72753, 3409, 72753, 72753, 56643, 894, 92322, 56643, 43473, 56643,
	56643, 2746, 92322, -1000, -1000, -1000, -1000, -1000, -1000, 366,
	-1000, 371, -1000, 3611, 3170, -1000, 368, -1000, 215, 629,
	628, 3467, 3425, 627, 28606, 618, -1000, -1000, 368, -1000,
	72753, 1522, 2745, -1000, 121, 121, 121, 3603, 2091, 41396,
	-1000, -1000, -1000, -1000, -1000, 48057, 72753, 263, 263, 2644,
	72753, 268, -1000, 268, 268, 144, 266, 144, 843, 267,
	319, -1000, 144, 144, 266, 3540, 3539, 3538, 3537, 3536,
	-1000, 18796, 3266, 214, 72753, -1000, -1000, 48057, 3169, 265,
	3611, 442, -1000, 2946, -1000, 28606, 1852, 3313, -1000, 3872,
	3872, 886, -1000, 22435, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1988, 263, 28606, 1226, 1058, -1000, -1000,
	-1000, -1000, 3285, 37838, -1000, 3277, 3277, 1407, 1404, 3277,
	72753, -1000, -1000, -1000, -1000, 3420, -1000, 231, 231, 286,
	286, 286, -1000, 619, 619, 619, 619, 619, 619, 439,
	12691, 9647, 1676, 28606, 28606, 3406, 3416, 892, 1576, 28606,
	-1000, 3053, -1000, -1000, -1000, 3333, -1000, -1000, 1881, 2680,
	-1000, -1000, -1000, -1000, 2587, 33746, 33746, -1000, -1000, -1000,
	22435, 891, -1000, -1000, -1000, -1000, 42415, -1000, 889, 28606,
	-1000, -1000, 3558, -1000, -1000, 28606, 33, 30, -1000, -1000,
	203, 616, 202, -1000, 59, -1000, 614, 28606, 28606, 28606,
	-1000, 15775, 3849, -1000, -1000, 3404, -1000, 3398, 3397, 3394,
	-1000, 888, 613, 2549, -1000, 28606, 1143, 887, -1000, 55633,
	3295, 2637, 2560, 406, 1131, 15466, 28606, 610, 609, 608,
	606, 15416, 605, 3332, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 743, 587, 585, 15186, 261, 582, 5488, -1000,
	33746, 33746, 33746, 886, 581, 564, 6485, 15052, 26549, 26549,
	26549, 563, 14775, 28606, 106, 5699, 200, 198, 197, 196,
	18796, 190, -1000, 14879, 28606, 2781, 18796, 5544, 186, 347,
	562, -1000, 92322, 406, 346, 1084, 561, -1000, 329, 2680,
	14309, 2938, -1000, 259, 238, 237, 28606, 3285, 185, -1000,
	28606, -1000, -1000, 881, -1000, 3030, -1000, 15775, -1000, -1000,
	-1000, 2940, 2932, 2556, -1000, -1000, 184, -1000, -1000, -1000,
	-1000, 3291, 54118, 28606, 183, -1000, 329, 2940, 31690, 66,
	3229, 66188, 66188, 39858, -1000, 36813, 67703, 66188, 66188, 1054,
	3331, 880, 879, 329, -1000, -1000, -1000, 876, 875, 3310,
	2979, -1000, 2979, 547, 236, -1000, -1000, -1000, -1000, 72753,
	727, 72753, 72753, 3834, 719, 72753, 72753, 65178, 3743, 89400,
	1791, 12638, -1000, 3867, 55128, 2744, -1000, -1000, 182, -1000,
	-1000, 1353, 1791, 3157, -1000, -1000, -1000, 2826, -1000, -1000,
	1730, -1000, 545, -122, 3262, 178, -1000, -1000, -1000, 1033,
	72753, 2218, 669, 72753, 3806, 1701, 1696, 2440, -1000, 1760,
	-1000, -1000, 18796, 19818, 1346, -1000, 543, 230, -1000, 92322,
	3867, -1000, -1000, -1000, -1000, -1000, 929, -1000, 72753, 55128,
	55128, -1000, 1533, 1145, 1454, -1000, 72753, 1487, 72753, 536,
	72753, 72753, 2387, 1345, 72753, 2742, -1000, -1000, 3859, 50582,
	50582, 1936, 3525, 1773, 1759, -1000, -1000, 3275, 1313, 50582,
	832, 3739, 3048, 2537, 3595, 2735, 3887, 2215, -1000, -1000,
	427, -1000, 329, -1000, 28606, 854, 3597, -1000, 62653, 669,
	1575, 313, 3289, 3289, 72753, 534, 3393, -1000, -1000, 3392,
	3391, 2768, 2524, 3736, -1000, 3630, 1455, 1325, 28606, 853,
	-1000, 2148, 874, 851, 850, 72753, 1693, 2965, -1000, 3735,
	3611, 3730, 3611, -1000, -1000, -1000, 68208, -1000, 167, -1000,
	332, -1000, -1000, -1000, -1000, 72753, 72753, 72753, 72753, -1000,
	1556, -1000, -1000, -1000, -1000, 1551, -1000, 2017, -1000, -1000,
	-1000, -1000, -1000, 2143, 1549, 161, -1000, -1000, 18796, 18796,
	18796, 3867, -1000, 201, -1000, 1532, 2115, -1000, -1000, 201,
	3390, 2114, -1000, -1000, -1000, -1000, -1000, -1000, 201, 3387,
	3102, -1000, 3386, 201, 1530, 72753, 72753, 9270, 72753, 72753,
	72753, 6551, 3380, 1155, 1454, -1000, -1000, 88913, 91348, -1000,
	91348, -1000, 305, -1000, 289, 327, -1000, -1000, -1000, -1000,
	3378, -1000, 3611, 3728, 15775, -1000, 1589, 28606, -1000, -1000,
	-1000, 2104, 3518, -1000, -1000, -1000, 121, 72753, 1617, 1993,
	3377, 3063, 50582, 72753, -1000, -1000, -1000, -1000, -1000, -1000,
	490, -1000, 490, 490, 3374, 3373, 72753, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 72753, -1000, -1000, -1000, -1000, -1000,
	3859, 3859, 1476, 3372, 3369, 3367, 3365, -1000, 3364, 3363,
	3867, 3626, 3611, -1000, 3727, 3611, 150, -1000, 1036, -1000,
	2458, 2456, 2963, -1000, 55128, -1000, -1000, -1000, 92322, -1000,
	-1000, -1000, 72753, 72753, 849, -1000, -1000, 92322, -1000, -1000,
	-1000, -1000, 72753, -1000, -1000, -1000, 1049, -1000, -1000, 1049,
	148, -1000, -1000, 366, 72753, 48562, -1000, 2031, 360, -1000,
	491, -1000, -1000, 50582, -1000, 72753, 144, 56643, 223, -1000,
	72753, 72753, 1571, 1567, 1566, 1564, 1554, 199, -1000, 1614,
	50582, -1000, -1000, 149, 62148, -1000, 50582, -1000, -1000, 3311,
	-1000, 1397, -1000, -1000, 26035, 219, -1000, -1000, 1058, -1000,
	787, -1000, 2974, 3215, 28606, 66, 72753, -1000, 72753, 3277,
	3277, 3277, 3277, 72753, -1000, 28606, 28606, 1489, 1209, 28606,
	33746, 33746, -1000, 28606, 566, -1000, -1000, -1000, -1000, 3330,
	-1000, -1000, 1868, 2680, 28606, -1000, -1000, 1319, 1317, -1000,
	-1000, -1000, -1000, 2210, 1636, 147, -1000, 22435, 533, 25521,
	217, -1000, 329, 14131, -1000, -1000, 775, -1000, -1000, -1000,
	530, 25007, -1000, -1000, 1125, -107, -107, 28606, 28606, 1938,
	1652, 1625, 1547, 3859, 3867, 2331, -1000, 28606, 13738, -1000,
	1125, -1000, -1000, 88408, 28606, 2680, 3168, 3166, 28606, 28606,
	2634, 3261, -1000, -1000, 2525, 13339, -1000, -1000, -1000, -1000,
	92322, -1000, 28606, -1000, 2070, -1000, -1000, 28606, 28606, -1000,
	92322, 33746, 33746, 33746, 33746, 33746, 33746, 33746, 33746, 33746,
	33746, 33746, 33746, 33746, 2591, 33746, 848, 535, 535, 535,
	-1000, -1000, 24493, 28606, 28606, 92322, 528, 527, 524, -1000,
	28606, 106, 28606, -1000, -1000, -1000, -1000, 145, -1000, 28606,
	18796, 5955, 523, 36308, 143, 1299, -1000, 2680, 28606, -1000,
	1084, 2938, 28606, 3165, 3164, 2938, -1000, 522, -1000, 521,
	28606, 28606, 28606, 13293, 3215, -1000, 744, 15775, 832, -1000,
	-1000, 23464, 805, 832, 1076, 72753, 329, 2940, -1000, 15775,
	1035, 72753, -1000, 15775, 2825, 37838, 3110, 3105, 37838, 3122,
	3099, 3099, 3099, -1000, 1422, -1000, 72753, 841, -1000, 66188,
	67703, 66188, 66188, 51087, 518, 3229, -1000, -1000, 54623, 816,
	-1000, -1000, -1000, 2806, 815, 35798, 28606, 329, 20890, 28606,
	1533, -1000, -1000, -1000, 3077, 2121, 58646, -1000, 1777, 59151,
	727, 762, 832, -1000, 125, 3102, 3061, 72753, 12638, 807,
	-1000, -1000, -1000, 2462, 28606, -1000, -1000, 212, -1000, 211,
	1341, -1000, 88913, 28606, 28606, -1000, 72753, 1730, 72753, 3155,
	-1000, -1000, 3257, 88913, 88913, -1000, 3884, 19818, 790, 72753,
	3595, 789, 50582, 3806, -1000, 72753, -1000, -1000, 72753, 2559,
	-1000, 3624, 1197, 788, 33746, 72753, 2602, -1000, 2265, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 787, 3863, 3861,
	92322, -1000, 72753, 3585, 517, 207, -1000, -1000, 72753, -1000,
	-1000, -1000, -1000, -1000, 786, -1000, -1000, 327, -1000, -1000,
	-1000, 2121, 727, 526, 2643, 1296, 1145, 48562, -1000, 121,
	121, 50582, 50582, -1000, -1000, 3867, 3867, 823, 3867, 121,
	3603, 72753, 3595, 72753, 1890, 72753, -1000, 3362, 3024, -1000,
	72753, 37838, 39353, 13114, 3163, -1000, -1000, 3289, 67198, 3289,
	-1000, 782, -1000, 490, 2672, 3867, 72753, 72753, -1000, 3021,
	-1000, -1000, -1000, 72753, 3726, 2410, -1000, 66693, -1000, 3061,
	12574, 72753, 2235, 72753, 72753, -1000, 72753, 38343, -1000, -1000,
	2484, 6629, 719, 2241, 1897, 1339, -1000, -1000, 1533, 1466,
	2235, 72753, -1000, 72753, -1000, -1000, -1000, -1000, -1000, 18796,
	19818, 18796, -1000, -1000, -1000, -1000, -1000, -1000, 1534, 72753,
	-1000, -1000, 19307, -1000, -1000, -1000, -1000, -1000, 72753, 72753,
	72753, 1437, 3252, 72753, 1436, 3250, 72753, 72753, 72753, 72753,
	-1000, 3360, 201, 1527, 2113, -1000, 3359, 201, 1525, 72753,
	-1000, -1000, -1000, -1000, 1338, 291, 72753, -1000, 72753, -1000,
	11905, 2235, -1000, 2103, -1000, 3358, 3356, 1864, 2471, 72753,
	3614, 780, 121, 1615, -1000, -1000, -1000, 72753, 72753, -1000,
	1155, 814, 72753, 72753, 72753, 72753, 72753, 3867, 2452, 3712,
	-1000, 72753, -1000, 18796, -1000, 20354, 1333, 2385, -1000, 3833,
	3075, 3073, -1000, 91835, 2067, 3611, -1000, -1000, -1000, -1000,
	-1000, 1520, -1000, 2377, 2226, 48057, 2229, -1000, 144, -1000,
	843, 319, -1000, 72753, 72753, 72753, 72753, 72753, -1000, 18796,
	-1000, -1000, -1000, -1000, -1000, 3611, 3329, 192, -1000, 1381,
	-1000, 118, -1000, 28606, -1000, 42415, -1000, -1000, 3213, 3248,
	15775, -1000, -1000, 72753, 72753, 72753, 72753, -1000, 461, 1932,
	28606, 28606, 468, 1562, 1372, 1932, 28606, 28606, -1000, -1000,
	572, 2093, 2087, 28606, 28606, -1000, 11709, -1000, 114, -1000,
	28606, -1000, -1000, 3867, 28606, -1000, 515, 514, 512, 15775,
	15775, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 510, -1000,
	-1000, 15775, 28606, 509, 1794, -1000, 11452, 2938, 3515, 3514,
	-1000, -1000, 2938, 28606, 2571, -1000, 503, 15775, 495, 11335,
	-1000, 133, 133, 284, 284, 284, -1000, 400, 400, 400,
	400, 400, 400, 535, 3326, 2562, -1000, 5507, 10780, 10350,
	10176, 486, -1000, -1000, -1000, 106, 9938, -1000, 31176, -1000,
	-1000, 477, 1243, 1242, -1000, 3232, 35288, 2568, -1000, 28606,
	195, 30662, 2938, -1000, -1000, 476, -1000, 3511, 3506, 459,
	-1000, -1000, 10114, 10114, 10114, 92322, 3213, -1000, 454, 163,
	2885, 38343, 2843, -1000, -1000, 2915, -1000, -1000, 28606, -1000,
	72753, 3229, 37838, 37838, 3290, 3101, 37838, -1000, -1000, -1000,
	-1000, -1000, 56643, 777, 72753, -1000, -1000, -1000, -1000, 66188,
	776, 72753, 72753, -1000, 44520, 2781, 774, 157, 59, 9891,
	758, 1533, 2577, -1000, 1777, 772, -1000, 2193, 3048, -1000,
	3246, 112, -1000, -1000, -1000, 3618, 2768, 58646, 72753, 2824,
	3596, 3595, -1000, 770, 3154, 1791, 93783, -1000, 15775, 3867,
	2729, 92322, -1000, 15775, 15775, 1590, -1000, 58, 72753, 88913,
	-1000, 110, -1000, 1033, -1000, 3294, 2112, 3831, 72753, -1000,
	1596, -1000, -1000, -1000, 3597, 3597, 28606, 5507, 669, 3830,
	-1000, 3575, -1000, -1000, 3071, -1000, -1000, 72753, -1000, 3867,
	-1000, 1753, 18796, 300, 1517, 2768, 58646, 2821, 72753, 2259,
	-1000, 1516, 121, 121, -1000, -1000, -1000, -1000, -1000, 3829,
	1405, -1000, 56643, -1000, -1000, 2541, -1000, 3535, 3063, 50582,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 66, -1000, -1000,
	39353, -1000, -1000, -1000, -1000, 28606, -1000, 1424, 2255, 3317,
	-1000, -1000, 3316, -1000, 72753, 1145, -1000, 65683, -1000, -1000,
	-1000, 107, -1000, 1546, -1000, 2249, 2129, -1000, 104, 2235,
	100, 99, -1000, 3617, 802, 3581, 28606, 3500, 3802, 3799,
	-1000, -1000, 2602, 3498, 3828, 814, -1000, -1000, -1000, -1000,
	2602, -1000, 1855, 92322, 843, 814, 3611, 3611, -1000, -1000,
	818, -1000, -1000, -1000, -1000, 3354, 3353, 72753, 50582, -1000,
	72753, 50582, -1000, -1000, -1000, 3352, 72753, 72753, 72753, 1434,
	3244, 72753, 72753, 72753, -1000, -1000, 1329, -1000, 3611, -1000,
	-1000, 72753, 72753, 40, -1000, 3859, 3859, 92322, 156, -1000,
	3859, 3859, -1000, -1000, 1115, 28606, 3351, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3611, -1000, 3867, 3867, -1000,
	3611, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 92322,
	92322, 72753, 72753, 97, 146, 72753, -1000, 72753, -1000, -1000,
	-1000, 1164, -1000, 144, 144, 144, 144, 144, -1000, -1000,
	48057, 3611, -1000, -1000, 9529, 450, 1238, 28606, 3580, -1000,
	-1000, -1000, -1000, 1932, 1932, 28606, 28606, 28606, 1932, 572,
	-1000, -1000, 1932, 1932, -1000, -1000, 9350, -1000, 1125, -1000,
	-1000, -1000, -1000, 15775, -1000, 1125, 3239, -1000, 449, -1000,
	-1000, 447, 142, 72753, -1000, -1000, 28606, 33746, 3312, -1000,
	28606, 28606, 28606, -1000, -1000, 94, 74, 765, -1000, -1000,
	-1000, -1000, 2568, 3232, -1000, -1000, 8902, 438, 1481, 15775,
	2551, 432, -1000, -1000, -1000, -1000, 2938, 28606, 3035, 2938,
	1984, 1238, 3004, 2878, 69, -1000, 72753, 2547, 15775, -1000,
	-1000, -1000, 3290, -1000, 760, 28606, 37838, -1000, 759, 72753,
	63, -1000, 72753, 57, 56, 92322, 44, -1000, 3827, 2812,
	33232, 28606, 429, 2962, -1000, 3701, 3701, 2968, -1000, 2738,
	18796, 758, 3867, 3048, 72753, 2339, 2339, 2660, 72753, -1000,
	59151, 1760, 1152, 1777, 421, 727, 72753, -1000, 1519, 3826,
	38343, 65178, -1000, 43, -1000, 91348, -1000, 10829, -1000, 1328,
	-1000, 2722, 1321, 3306, 41, -1000, 420, 1494, 1490, 1427,
	72753, 832, 38, 3806, -1000, 3497, 3049, 3049, 8678, 1939,
	602, -1000, 72753, -1000, -1000, 26, -1000, 72753, 1515, 397,
	72753, 1145, 2363, 72753, 832, -1000, 72753, 756, 1890, 72753,
	755, 3614, 121, 425, 8623, 56643, 3820, 3820, 72753, 754,
	752, 745, -1000, -1000, -1000, -1000, 2235, 2178, -1000, -1000,
	-1000, -1000, -1000, 2178, 1594, 2178, 38343, 42944, -1000, 72753,
	72753, -1000, 8535, -1000, 3711, 3706, -1000, -1000, 742, -1000,
	3825, 3585, -1000, -1000, -1000, -1000, 19818, 72753, 72753, 1859,
	376, 1859, 364, 72753, -1000, -1000, 3350, 72753, 50582, -1000,
	-1000, 3348, -1000, -1000, 2235, -1000, -1000, 1864, 42415, 41910,
	-1000, 2471, 741, 734, 732, 8475, 72753, -1000, -1000, -1000,
	-1000, 3585, 396, -1000, -1000, -1000, 90861, 92322, -1000, -1000,
	-1000, 149, -1000, -1000, -1000, -1000, 72753, 15775, 29634, 1932,
	1932, 1932, -1000, 395, 2030, 28606, -1000, -1000, -1000, 7924,
	485, 33746, 15775, 15775, 15775, -1000, 28606, -1000, 28606, -1000,
	-1000, -1000, 1357, -1000, -1000, 2657, 120, -1000, 3821, 394,
	3153, 28606, -1000, -1000, -1000, -1000, -1000, -1000, 2696, 3035,
	391, -1000, 2154, -1000, 2958, 3009, 2957, -1000, 3285, 38343,
	-1000, 832, -1000, 72753, 15775, -1000, 28606, 25, -1000, 24,
	-1000, -1000, 1054, 44520, -1000, 731, 72753, 23, -1000, 862,
	33746, 7759, -1000, -1000, -1000, 2899, 28606, 2896, -1000, 2902,
	-1000, -1000, -1000, 3818, 3818, -1000, -1000, 3818, 3818, 2721,
	3867, 21, -1000, 37323, 3285, -1000, 2660, 20, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3120, 719, 1187, 730, -1000, -1000, 3048, 2121, 1777, 727,
	1161, 1110, 1109, 832, 18, 3061, 93783, 12638, -1000, -1000,
	279, -1000, -1000, 92322, 3478, 2340, 1321, -1000, 1909, -1000,
	-1000, -1000, 72753, -1000, -1000, 3607, 3605, -1000, -1000, 72753,
	1305, -1000, 3596, 3595, -1000, 2138, -1000, 1887, 3128, 1876,
	708, 28606, 2291, -1000, 18796, 1145, 72753, 2121, 727, -1000,
	2636, 1145, 3603, -1000, 388, 56643, -1000, 3879, -1000, 37838,
	-1000, 3820, -1000, 2279, -1000, -1000, 57148, 28606, 28606, 1760,
	3597, 724, 3597, 72753, 3597, -1000, -1000, 723, 2960, 719,
	-1000, 3581, -1000, -1000, 28606, 2194, 3059, -1000, -1000, -1000,
	-1000, -1000, 1433, -1000, 1432, -1000, 72753, 1859, 351, 72753,
	-1000, 763, 2694, -1000, 92322, -1000, 92322, 92322, 28606, -1000,
	-1000, 3611, -1000, 374, 372, 359, 3611, 113, -1000, 3819,
	108, -1000, 15775, -1000, -1000, -1000, -1000, 21405, 718, 716,
	483, -1000, 358, 30148, 30148, 30148, 106, 28606, 485, 10,
	2, -1000, 2544, 2596, 2641, 2754, 28606, 18796, -1000, 2684,
	15775, -1000, -1000, 354, 3151, -1000, -1000, -1000, 72753, 2995,
	2976, 54118, -1000, -1000, -1000, -1, -13, -1000, -1000, -1000,
	-1000, 72753, -16, -1000, 90374, 33232, 73, 18796, 5507, 2786,
	72753, 2892, 15775, 2886, 3228, 3867, 3867, 3867, 3867, 46542,
	3493, 46037, -1000, -1000, 18796, -1000, -1000, -1000, -1000, -1000,
	47552, -1000, 3120, -1000, 1405, 2414, -1000, -1000, 38848, 1760,
	2660, 1777, 3048, 2768, -1000, 1159, 1158, 3596, 2158, 711,
	-1000, 1791, -1000, -1000, 2310, 710, 1492, -1000, -1000, 3818,
	-1000, -1000, 2256, -1000, 2254, 2253, -1000, -1000, -1000, 3816,
	1426, -1000, 2126, -1000, 3146, 3143, 2955, -1000, -1000, -1000,
	-1000, 3102, 7671, 3815, 72753, -1000, -1000, 1145, 1514, 2768,
	72753, -1000, -1000, -1000, 709, -19, -1000, 66, -1000, -1000,
	-1000, -20, -1000, 3859, -23, -24, 3049, 72753, 3049, 669,
	3049, 42415, 1058, 2960, -1000, 7606, 708, -1000, 28606, 72753,
	72753, -1000, -1000, 1425, -1000, 1700, 1545, 1700, -30, -1000,
	-44, -46, 7227, -1000, -1000, -1000, -1000, -1000, 72753, 703,
	29634, -1000, 28606, 28606, 699, -1000, 2325, -1000, 34774, 1846,
	1587, 5882, 2325, 2325, 15775, -1000, -1000, -1000, 3035, 2595,
	2589, -1000, 2633, -1000, 2623, 2630, 2616, -1000, -1000, -1000,
	-1000, 2720, 348, 3224, 3223, 357, 3814, 1609, -48, -1000,
	72753, 2853, 2803, -1000, 35288, -1000, 2811, -1000, -1000, -1000,
	2868, 2953, -1000, -1000, 2866, 808, 2889, -1000, -1000, -1000,
	-1000, 58, -1000, 45532, 58, -1000, -1000, -65, -1000, -1000,
	1405, -1000, 2105, -67, -1000, 802, 3581, 28606, 3120, 3048,
	2660, 1777, -1000, -1000, -1000, 3624, 695, 38343, -1000, 1890,
	28606, -1000, -1000, -1000, 72753, 2336, 56643, 56643, 832, 72753,
	-1000, -1000, 2936, -1000, 2935, 2380, 2380, 1499, 1439, 1864,
	-1000, -1000, 72753, 1511, 1145, 345, -1000, 3878, -1000, 57148,
	-1000, -1000, 3347, -1000, -68, -1000, 1939, 3285, 343, -1000,
	1058, -1000, -1000, 15775, 1859, 1859, 72753, -1000, -1000, -1000,
	3222, -1000, 56643, 92322, -1000, -1000, -1000, -1000, -1000, -1000,
	-69, -85, 29634, -1000, 1780, 3698, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 340, 3134, 3132, -1000, -1000, 2613, -1000,
	2611, -1000, 3035, -1000, 72753, 72753, 72753, -1000, -1000, 72753,
	-1000, 690, -1000, -1000, 2853, -1000, 33746, 33746, 3490, -1000,
	33746, -1000, 2781, 685, -1000, 54118, -1000, -1000, 2915, 72753,
	3020, 681, -1000, -1000, 58, -1000, -1000, 47552, -1000, -1000,
	2795, 2794, -1000, 38848, 72753, 72753, 6696, 1405, 2660, 3120,
	3048, 3595, 38343, -86, 56643, 6583, -1000, -1000, 1585, 55,
	53, 3596, -1000, -1000, 2474, -1000, -1000, 3495, -1000, -1000,
	-1000, 40, 1145, 72753, -1000, -1000, -1000, -1000, 680, 2235,
	-1000, 2235, 3128, -1000, -1000, -1000, -1000, -1000, 1859, 72753,
	-1000, -1000, -1000, -1000, -99, 1584, -1000, -1000, 1208, 29120,
	-1000, 2585, 2583, -1000, -1000, 3121, 3058, 342, 322, -1000,
	28606, -1000, 5507, 5507, -1000, 5507, 2809, 72248, -9, 2542,
	-103, -1000, 28606, -1000, -1000, -1000, -1000, -1000, -1000, 3581,
	-1000, 3120, 1405, 2660, 1405, -104, -1000, 2158, 678, -1000,
	3478, 3341, 3298, -1000, -1000, 669, 669, -1000, 1145, 28606,
	-1000, 2235, -1000, -1000, -1000, -1000, -1000, -1000, 2581, 2575,
	2673, 45027, 72753, 72753, 72753, 6152, 72753, -109, -1000, 89887,
	2791, 2975, 2934, -114, 72753, 1405, -1000, 3120, 3285, -1000,
	38343, 3624, 18285, 2305, 1488, 1486, -1000, -1000, -1000, -120,
	2235, -1000, -1000, -1000, 3570, 864, -1000, -1000, -1000, -1000,
	-1000, -125, 3035, 72248, 2799, 1569, 3876, -1000, -1000, -1000,
	2915, -1000, -1000, -1000, 1405, -1000, -1000, 3595, -128, -1000,
	-1000, -1000, -1000, -1000, 1890, 3593, 3590, -1000, 45027, 28606,
	-1000, 337, -1000, -1000, 2657, 2789, 2789, 3869, 2893, 2540,
	-1000, 1405, -1000, 18285, 56643, 2251, 2250, 3047, -107, -1000,
	2596, 2657, 3035, -1000, 668, 72753, 2975, 3285, -1000, 667,
	56643, 56643, 72753, 335, 3035, 2596, -1000, 72248, 2808, -1000,
	-1000, 18285, -1000, -1000, -1000, 3867, -1000, 3035, -132, 663,
	-133, -1000, -1000, 72248, -1000, -136, -1000,
}

var yyPgo = [...]int16{
	0, 4359, 4358, 3003, 143, 0, 15, 7408, 4357, 61,
	279, 335, 4356, 310, 41, 785, 167, 324, 337, 4086,
	9129, 8218, 121, 4355, 295, 4355, 4353, 342, 285, 231,
	4352, 219, 4351, 4350, 202, 232, 4349, 273, 4346, 383,
	4342, 37, 4341, 4339, 253, 194, 354, 382, 366, 371,
	4333, 320, 348, 321, 318, 4330, 7973, 1896, 537, 17,
	4329, 4326, 593, 4325, 4323, 4322, 311, 4321, 270, 4320,
	4319, 4318, 4317, 13, 341, 4317, 4315, 309, 4314, 4312,
	4311, 105, 4310, 4309, 4308, 4307, 211, 322, 315, 4306,
	283, 307, 619, 198, 398, 11023, 4305, 338, 229, 1549,
	212, 4302, 4301, 12097, 4300, 4299, 11531, 10874, 10812, 4298,
	8777, 7887, 123, 241, 323, 4297, 269, 274, 356, 751,
	346, 9, 487, 343, 4296, 4295, 4294, 150, 4293, 4292,
	59, 60, 313, 4291, 4289, 79, 23, 54, 375, 349,
	4288, 4286, 372, 4283, 4275, 10198, 62, 220, 4274, 66,
	4273, 314, 316, 65, 52, 4272, 312, 261, 267, 42,
	262, 210, 55, 208, 319, 4271, 4270, 4269, 4268, 50,
	264, 84, 6161, 384, 376, 4267, 4264, 4263, 4262, 4261,
	191, 178, 4260, 4259, 4255, 4254, 34, 36, 4253, 4250,
	280, 266, 258, 306, 4248, 301, 180, 14, 40, 159,
	153, 4247, 4245, 4244, 4243, 19, 85, 20, 4239, 4238,
	4235, 340, 4235, 4235, 4235, 4235, 4233, 296, 4230, 4229,
	4225, 136, 4224, 4221, 4219, 67, 4219, 56, 71, 4218,
	39, 158, 329, 272, 357, 28, 293, 3072, 250, 4216,
	373, 345, 344, 80, 223, 6, 227, 205, 251, 4215,
	263, 4214, 4212, 4212, 367, 303, 246, 252, 183, 151,
	4210, 385, 4209, 369, 4208, 4207, 4204, 4203, 304, 102,
	82, 4199, 239, 4197, 101, 4196, 4195, 109, 299, 21,
	53, 4194, 43, 110, 38, 197, 4192, 75, 292, 1,
	22, 11, 4191, 554, 4188, 76, 4187, 47, 256, 4186,
	308, 268, 4184, 317, 91, 7, 12, 4181, 2, 5,
	4, 18, 265, 4171, 200, 4170, 139, 4166, 249, 199,
	147, 4165, 132, 4164, 70, 46, 117, 4163, 4162, 4160,
	190, 224, 4159, 108, 4157, 206, 282, 4156, 4155, 4153,
	24, 45, 113, 69, 72, 49, 26, 120, 58, 4152,
	4151, 27, 96, 4150, 222, 29, 8, 77, 281, 103,
	4149, 31, 30, 33, 275, 236, 333, 334, 4144, 32,
	284, 355, 4143, 4141, 353, 124, 339, 51, 230, 4140,
	228, 4137, 83, 4136, 86, 63, 195, 64, 68, 4134,
	57, 226, 4133, 166, 305, 4132, 302, 660, 11364, 4131,
	144, 289, 389, 100, 4130, 234, 204, 4129, 44, 326,
	112, 378, 352, 4128, 327, 4128, 4127, 4124, 148, 145,
	129, 4123, 134, 4122, 4121, 4120, 4119, 4118, 4117, 4116,
	4115, 4114, 4112, 4111, 4110, 4109, 379, 386, 4107, 336,
	325, 388, 364, 358, 351, 350, 201, 4103, 374, 5523,
	215, 114, 4102, 4101, 213, 271, 377, 4093, 4092, 4090,
	4089, 4088, 4087, 4085, 4083, 4081, 4079, 4078, 4076, 4075,
	4074, 4072, 4071, 4068, 4066, 4065, 4064, 4063, 4062, 4061,
	4060, 4058, 4053, 4050, 4049, 4047, 4045, 4041, 4038, 4037,
	4036, 4034, 4033, 4032, 4030, 4028, 4027, 4023, 4021, 4020,
	4018, 255, 238, 4017, 4016, 4015, 332, 330, 278, 286,
	380, 235, 237, 92, 4010, 4008, 118, 4007, 4005, 4002,
	365, 3993, 381, 3992, 3990, 3987, 3986, 203, 122, 3985,
	87, 196, 370, 48, 3984, 3983, 233, 290, 116, 111,
	3982, 3981, 3980, 3977, 3974, 207, 3971, 3964, 240, 73,
	3962, 276, 242, 3961, 328, 363, 3959, 3958, 359, 3956,
	1511, 368, 3955, 245, 247, 99, 331, 3952, 90, 3950,
	3949, 297, 360, 225, 3948, 3947, 3945, 74, 3937, 3935,
	244, 291, 3934, 3932, 3931, 3929, 3928, 3927, 3, 93,
	25, 10, 3924, 3923, 35, 3922, 3921, 277, 3920, 3919,
	347, 81, 78, 3918, 3917, 3916, 3898, 294, 3897, 3896,
	221, 16, 3895, 3895, 3155, 361,
}

var yyR1 = [...]int16{
	0, 1, 2, 2, 3, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 18, 18,
	362, 362, 397, 397, 397, 25, 25, 26, 26, 27,
	27, 28, 28, 41, 41, 41, 5, 5, 5, 6,
	6, 6, 6, 6, 8, 8, 7, 13, 13, 14,
	14, 398, 398, 24, 24, 16, 16, 607, 607, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 15, 15,
	17, 17, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 603,
	603, 603, 603, 603, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 92, 94, 93,
	93, 93, 101, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 116, 116, 60,
	60, 87, 87, 91, 91, 90, 90, 90, 90, 88,
	88, 61, 61, 61, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 74, 74, 76, 76, 76, 76,
	76, 77, 77, 77, 78, 12, 12, 12, 12, 12,
	12, 12, 12, 79, 79, 80, 72, 81, 81, 192,
	192, 82, 82, 82, 83, 83, 83, 84, 84, 85,
	85, 85, 85, 269, 269, 269, 560, 560, 122, 122,
	122, 122, 122, 122, 122, 73, 73, 86, 86, 86,
	63, 64, 64, 67, 67, 66, 65, 65, 68, 68,
	68, 71, 71, 120, 120, 120, 69, 69, 70, 155,
	155, 155, 148, 148, 148, 148, 148, 148, 157, 157,
	157, 157, 156, 156, 156, 156, 156, 158, 158, 158,
	158, 158, 119, 119, 99, 100, 100, 100, 100, 100,
	95, 95, 95, 97, 98, 113, 113, 114, 114, 102,
	102, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 109, 109, 105, 105, 604, 604, 605, 605,
	96, 96, 96, 96, 96, 96, 106, 107, 110, 111,
	108, 108, 108, 108, 606, 117, 117, 117, 118, 118,
	104, 104, 145, 145, 147, 147, 149, 149, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	146, 146, 121, 121, 126, 126, 123, 123, 152, 152,
	151, 151, 169, 169, 170, 172, 172, 173, 173, 171,
	171, 171, 171, 171, 171, 171, 171, 138, 138, 139,
	139, 140, 140, 142, 143, 143, 143, 143, 141, 141,
	144, 144, 144, 174, 174, 174, 174, 174, 174, 174,
	239, 239, 238, 238, 241, 241, 241, 241, 242, 242,
	243, 243, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 400, 400, 401, 401, 401, 402,
	402, 402, 255, 255, 255, 255, 255, 255, 256, 256,
	256, 256, 257, 257, 258, 258, 259, 259, 259, 260,
	260, 261, 261, 263, 264, 264, 264, 265, 265, 265,
	266, 266, 266, 267, 267, 245, 245, 195, 195, 195,
	216, 248, 248, 247, 247, 247, 247, 250, 250, 250,
	250, 250, 249, 249, 251, 251, 252, 252, 253, 253,
	254, 254, 268, 268, 277, 277, 273, 273, 274, 275,
	275, 276, 276, 565, 271, 271, 270, 270, 272, 283,
	283, 285, 285, 284, 284, 284, 284, 286, 286, 287,
	287, 278, 278, 279, 279, 280, 280, 280, 281, 281,
	282, 282, 282, 282, 282, 288, 293, 292, 292, 304,
	304, 294, 294, 295, 296, 296, 299, 299, 298, 298,
	300, 300, 300, 301, 301, 301, 302, 302, 297, 297,
	303, 303, 306, 306, 307, 307, 307, 307, 307, 307,
	307, 307, 308, 308, 308, 308, 305, 305, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 310, 310, 310,
	310, 310, 311, 311, 312, 312, 313, 313, 289, 289,
	290, 290, 290, 290, 290, 290, 291, 291, 175, 399,
	399, 185, 185, 185, 185, 185, 207, 207, 186, 186,
	190, 176, 187, 187, 193, 193, 191, 188, 188, 177,
	262, 262, 178, 189, 189, 179, 179, 210, 210, 211,
	211, 217, 217, 217, 218, 218, 219, 219, 221, 221,
	222, 222, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 223, 223, 228,
	229, 229, 229, 229, 229, 229, 224, 224, 230, 235,
	235, 235, 235, 231, 231, 231, 231, 34, 34, 374,
	374, 374, 374, 374, 374, 374, 374, 373, 373, 373,
	372, 372, 372, 372, 372, 234, 234, 522, 522, 233,
	233, 608, 608, 549, 549, 212, 212, 213, 213, 214,
	214, 215, 215, 199, 199, 199, 199, 199, 208, 208,
	209, 209, 200, 200, 202, 203, 204, 204, 204, 204,
	204, 197, 194, 194, 194, 201, 201, 201, 226, 226,
	227, 227, 205, 205, 205, 206, 206, 198, 198, 153,
	153, 153, 154, 154, 154, 196, 196, 180, 180, 180,
	180, 180, 180, 376, 376, 376, 376, 376, 376, 376,
	376, 314, 314, 315, 315, 318, 318, 318, 321, 329,
	329, 329, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 378, 378, 379, 379, 380, 380, 381, 381,
	316, 316, 317, 317, 322, 322, 323, 323, 324, 324,
	324, 324, 325, 328, 328, 382, 382, 383, 383, 384,
	10, 33, 319, 333, 333, 334, 334, 334, 334, 337,
	337, 337, 337, 340, 340, 340, 386, 386, 389, 389,
	391, 391, 391, 391, 387, 387, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 609, 609, 29, 29, 29, 385, 385, 388,
	388, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	320, 320, 336, 336, 336, 336, 336, 336, 336, 338,
	338, 327, 327, 326, 326, 342, 342, 341, 341, 341,
	341, 346, 346, 346, 346, 346, 343, 344, 345, 345,
	345, 345, 345, 347, 347, 348, 348, 349, 350, 350,
	351, 351, 351, 377, 377, 355, 355, 355, 355, 356,
	356, 357, 357, 358, 181, 181, 339, 339, 359, 359,
	361, 361, 360, 360, 363, 363, 182, 182, 182, 182,
	182, 182, 182, 182, 182, 182, 182, 182, 182, 182,
	182, 182, 182, 182, 182, 182, 182, 364, 364, 369,
	369, 365, 365, 11, 449, 449, 449, 449, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 367,
	367, 367, 368, 370, 370, 610, 610, 183, 183, 183,
	183, 183, 183, 183, 183, 183, 183, 183, 183, 421,
	421, 421, 554, 554, 554, 557, 557, 557, 557, 556,
	556, 558, 558, 422, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 39, 39, 40,
	40, 410, 89, 89, 89, 89, 409, 75, 75, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 331, 331, 332, 332, 332, 332,
	332, 332, 352, 353, 353, 354, 354, 354, 354, 416,
	416, 416, 416, 561, 561, 562, 562, 563, 563, 563,
	564, 564, 564, 564, 564, 566, 566, 566, 566, 566,
	567, 112, 112, 112, 568, 568, 569, 569, 571, 571,
	571, 571, 571, 576, 576, 570, 570, 577, 577, 577,
	420, 595, 595, 578, 578, 559, 559, 418, 418, 579,
	579, 579, 581, 581, 580, 580, 580, 580, 580, 586,
	586, 587, 587, 589, 584, 584, 585, 585, 592, 582,
	582, 612, 612, 583, 583, 590, 590, 611, 611, 588,
	588, 588, 591, 591, 591, 591, 593, 593, 419, 419,
	419, 419, 225, 225, 594, 594, 594, 594, 459, 459,
	459, 459, 460, 461, 461, 461, 461, 461, 461, 461,
	462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
	462, 462, 462, 462, 462, 462, 466, 466, 501, 501,
	613, 613, 467, 467, 468, 468, 502, 502, 504, 504,
	504, 504, 469, 503, 503, 505, 470, 470, 470, 470,
	470, 470, 470, 470, 470, 470, 470, 470, 470, 491,
	492, 492, 508, 508, 508, 508, 507, 507, 506, 506,
	513, 513, 493, 493, 494, 494, 494, 509, 509, 510,
	510, 511, 511, 495, 495, 495, 495, 496, 496, 497,
	498, 498, 512, 512, 544, 544, 544, 544, 545, 545,
	552, 546, 547, 547, 548, 465, 465, 465, 465, 465,
	499, 499, 500, 500, 550, 550, 551, 551, 457, 457,
	458, 404, 404, 405, 403, 403, 403, 406, 406, 407,
	407, 407, 407, 555, 555, 555, 555, 555, 555, 555,
	555, 555, 555, 555, 553, 553, 553, 553, 237, 237,
	240, 240, 232, 232, 596, 596, 596, 596, 596, 596,
	596, 596, 596, 598, 598, 598, 236, 236, 9, 9,
	9, 9, 600, 600, 440, 440, 440, 597, 597, 597,
	597, 597, 599, 599, 599, 599, 441, 441, 375, 375,
	375, 375, 375, 375, 393, 393, 30, 30, 31, 32,
	32, 35, 35, 35, 35, 36, 36, 38, 38, 38,
	38, 394, 395, 395, 396, 396, 471, 471, 472, 517,
	517, 517, 517, 514, 514, 516, 515, 515, 473, 518,
	518, 474, 474, 475, 476, 519, 519, 523, 523, 524,
	524, 524, 524, 524, 525, 525, 526, 526, 527, 527,
	528, 528, 477, 529, 529, 478, 478, 479, 479, 531,
	531, 536, 536, 536, 480, 480, 480, 481, 481, 481,
	481, 532, 532, 537, 537, 537, 537, 537, 537, 537,
	246, 246, 482, 483, 483, 483, 483, 483, 483, 483,
	483, 483, 484, 484, 484, 530, 530, 530, 485, 540,
	540, 533, 533, 538, 538, 538, 538, 538, 520, 520,
	601, 601, 601, 602, 602, 486, 487, 487, 534, 534,
	539, 539, 488, 489, 535, 535, 535, 535, 490, 490,
	521, 521, 541, 541, 542, 542, 543, 543, 45, 45,
	45, 44, 44, 159, 159, 162, 162, 162, 162, 162,
	165, 166, 167, 168, 163, 163, 160, 161, 161, 164,
	164, 127, 127, 128, 128, 130, 132, 132, 132, 131,
	133, 133, 129, 129, 134, 134, 134, 134, 135, 135,
	136, 136, 136, 136, 136, 137, 137, 137, 137, 137,
	47, 47, 47, 47, 46, 46, 48, 48, 48, 48,
	48, 48, 49, 49, 50, 50, 51, 52, 52, 52,
	53, 53, 54, 54, 55, 55, 423, 423, 423, 423,
	423, 423, 423, 423, 423, 423, 423, 423, 424, 424,
	614, 614, 614, 437, 437, 437, 425, 431, 429, 426,
	426, 427, 427, 427, 427, 436, 436, 430, 428, 428,
	428, 428, 428, 428, 442, 442, 443, 443, 438, 438,
	438, 438, 438, 438, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 456, 456, 432, 433, 433, 434, 434,
	435, 435, 444, 444, 444, 444, 444, 445, 445, 448,
	448, 448, 448, 448, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 446, 446, 450, 450, 452,
	452, 447, 447, 454, 453, 453, 453, 451, 451, 42,
	42, 37, 37, 43, 43, 124, 125, 125, 417, 417,
	417, 411, 411, 572, 572, 572, 572, 572, 572, 572,
	572, 572, 572, 572, 572, 572, 572, 572, 572, 572,
	574, 574, 573, 573, 573, 575, 575, 575, 575, 575,
	615, 615, 408, 408, 408, 408, 412, 412, 463, 464,
	413, 413, 414, 414, 414, 414, 415, 415, 415, 415,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 0, 2, 0, 3, 0, 2,
	0, 1, 0, 2, 2, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 2, 3, 0, 1, 3, 1, 0, 3,
	3, 4, 4, 4, 4, 3, 2, 1, 1, 2,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 5, 3,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 3, 3, 2, 2,
	3, 5, 4, 6, 3, 5, 4, 6, 4, 6,
	5, 7, 3, 2, 4, 2, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 3,
	4, 4, 6, 3, 3, 4, 3, 4, 4, 5,
	4, 5, 1, 1, 3, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 5, 6, 3, 4, 1, 1, 2, 4, 1,
	1, 1, 2, 2, 2, 2, 1, 1, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 6, 2, 3, 5, 1, 1, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 4, 1,
	2, 1, 2, 1, 0, 2, 2, 3, 5, 0,
	2, 4, 3, 1, 5, 1, 1, 4, 1, 4,
	1, 4, 1, 4, 1, 1, 1, 1, 1, 1,
	1, 6, 4, 4, 6, 4, 4, 4, 4, 4,
	6, 5, 5, 5, 4, 6, 4, 4, 4, 4,
	5, 7, 7, 9, 4, 6, 5, 5, 7, 7,
	4, 7, 4, 6, 6, 4, 5, 4, 5, 3,
	11, 8, 9, 8, 1, 0, 5, 5, 3, 3,
	5, 3, 2, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 7, 5, 3, 4, 1, 3, 3,
	1, 2, 2, 0, 1, 2, 0, 2, 3, 3,
	3, 4, 0, 1, 1, 1, 1, 2, 3, 4,
	5, 6, 8, 6, 6, 1, 3, 1, 3, 3,
	5, 1, 0, 1, 2, 4, 2, 0, 3, 3,
	2, 1, 3, 4, 3, 5, 4, 3, 5, 1,
	1, 1, 1, 4, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 3, 2, 3,
	2, 0, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 3, 3, 0, 2,
	3, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 1, 3, 3, 2, 4, 1, 5, 2,
	5, 2, 5, 2, 1, 3, 3, 0, 1, 0,
	3, 0, 1, 4, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 0, 5, 0, 5, 0, 0, 1,
	1, 3, 1, 1, 1, 3, 3, 1, 1, 1,
	2, 4, 4, 2, 3, 5, 5, 1, 3, 1,
	0, 1, 2, 3, 2, 4, 2, 3, 2, 0,
	1, 2, 0, 9, 9, 2, 1, 4, 4, 4,
	1, 0, 1, 3, 3, 2, 1, 1, 2, 0,
	1, 3, 2, 3, 2, 3, 1, 4, 2, 3,
	2, 3, 2, 3, 1, 1, 2, 2, 4, 1,
	2, 3, 3, 4, 5, 4, 5, 4, 2, 2,
	2, 1, 1, 0, 5, 2, 2, 2, 3, 1,
	0, 1, 3, 9, 1, 2, 0, 7, 7, 0,
	10, 6, 0, 4, 5, 2, 0, 2, 4, 0,
	1, 1, 0, 5, 2, 4, 1, 1, 4, 5,
	4, 0, 2, 0, 1, 0, 1, 5, 1, 0,
	2, 0, 2, 6, 2, 0, 1, 3, 2, 4,
	0, 1, 3, 2, 1, 0, 1, 3, 3, 2,
	0, 2, 2, 2, 3, 3, 4, 1, 3, 3,
	2, 7, 12, 1, 3, 2, 3, 3, 1, 2,
	2, 2, 2, 1, 2, 13, 2, 2, 0, 2,
	0, 1, 3, 3, 1, 3, 1, 3, 3, 3,
	3, 3, 0, 3, 3, 0, 3, 0, 7, 7,
	3, 0, 2, 1, 1, 1, 1, 1, 1, 2,
	2, 1, 3, 3, 6, 0, 3, 0, 2, 3,
	2, 3, 4, 4, 3, 3, 0, 5, 2, 5,
	2, 0, 4, 2, 1, 0, 1, 0, 1, 3,
	3, 6, 7, 5, 7, 9, 2, 0, 7, 1,
	3, 1, 4, 4, 7, 2, 1, 1, 1, 3,
	2, 8, 1, 3, 3, 5, 2, 1, 3, 7,
	2, 0, 10, 1, 2, 9, 11, 1, 1, 1,
	0, 1, 1, 1, 1, 0, 3, 0, 1, 3,
	2, 0, 1, 1, 3, 3, 1, 1, 3, 3,
	3, 3, 4, 4, 3, 3, 2, 1, 3, 2,
	1, 1, 1, 1, 3, 0, 1, 3, 1, 1,
	1, 1, 1, 1, 2, 2, 1, 1, 1, 2,
	2, 1, 3, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 0, 2,
	0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
	0, 1, 0, 4, 4, 4, 5, 5, 2, 5,
	3, 5, 2, 0, 3, 1, 2, 5, 5, 8,
	3, 4, 8, 5, 0, 4, 3, 0, 1, 3,
	1, 3, 2, 2, 4, 4, 5, 2, 0, 1,
	1, 0, 2, 2, 0, 2, 0, 13, 16, 12,
	15, 14, 17, 1, 1, 2, 2, 2, 2, 1,
	0, 1, 0, 1, 3, 1, 1, 1, 3, 3,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 1, 0, 2, 2, 1, 0,
	3, 0, 1, 3, 1, 1, 2, 4, 6, 6,
	10, 1, 2, 1, 3, 4, 0, 1, 3, 2,
	1, 1, 6, 2, 0, 3, 1, 1, 2, 1,
	2, 2, 2, 2, 3, 0, 1, 2, 1, 2,
	1, 3, 2, 3, 1, 2, 2, 2, 1, 2,
	3, 1, 2, 2, 2, 2, 3, 3, 3, 1,
	3, 1, 1, 0, 1, 1, 0, 1, 0, 3,
	0, 2, 1, 4, 4, 5, 2, 5, 5, 7,
	3, 1, 5, 9, 3, 9, 4, 11, 10, 2,
	0, 1, 3, 3, 6, 4, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 3, 3, 4, 0, 1, 0, 6, 1, 3,
	3, 3, 5, 2, 0, 3, 4, 4, 0, 2,
	0, 4, 0, 3, 16, 19, 1, 0, 2, 0,
	4, 0, 1, 3, 2, 0, 4, 6, 4, 6,
	4, 4, 6, 4, 6, 5, 7, 5, 7, 4,
	6, 10, 13, 10, 13, 11, 14, 1, 3, 1,
	0, 1, 3, 1, 1, 1, 1, 1, 2, 5,
	3, 6, 4, 6, 6, 9, 5, 7, 6, 6,
	5, 5, 5, 5, 9, 4, 5, 7, 6, 4,
	8, 4, 2, 4, 3, 6, 4, 3, 3, 3,
	2, 2, 3, 4, 4, 3, 3, 3, 3, 3,
	3, 4, 4, 3, 2, 3, 2, 2, 3, 4,
	3, 2, 2, 3, 4, 4, 4, 5, 1, 4,
	4, 4, 3, 3, 2, 1, 0, 6, 4, 6,
	4, 6, 8, 4, 6, 4, 6, 5, 7, 2,
	3, 3, 2, 5, 1, 1, 2, 3, 2, 1,
	1, 2, 1, 2, 1, 1, 1, 2, 1, 2,
	1, 1, 1, 3, 3, 3, 3, 3, 2, 1,
	3, 2, 3, 5, 5, 5, 2, 1, 3, 6,
	6, 6, 6, 6, 8, 8, 6, 6, 7, 9,
	9, 8, 10, 6, 6, 6, 6, 6, 6, 6,
	8, 6, 8, 6, 8, 7, 9, 6, 8, 7,
	9, 8, 10, 8, 10, 9, 11, 8, 10, 9,
	11, 8, 8, 7, 6, 6, 6, 6, 8, 8,
	8, 8, 6, 9, 0, 2, 2, 1, 2, 2,
	2, 2, 3, 1, 3, 3, 1, 5, 3, 9,
	12, 7, 7, 3, 2, 1, 3, 1, 3, 3,
	3, 3, 2, 2, 1, 1, 1, 1, 2, 1,
	1, 1, 4, 5, 1, 0, 1, 2, 2, 2,
	2, 1, 1, 1, 3, 3, 5, 1, 4, 0,
	2, 3, 0, 1, 1, 2, 1, 17, 21, 1,
	1, 2, 1, 3, 1, 1, 1, 3, 1, 2,
	0, 1, 2, 4, 1, 1, 1, 1, 1, 3,
	0, 1, 0, 1, 1, 4, 0, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 2, 0, 9, 11,
	12, 14, 3, 0, 3, 4, 4, 0, 6, 4,
	9, 7, 6, 4, 6, 6, 5, 7, 9, 6,
	6, 5, 4, 4, 3, 6, 6, 6, 6, 4,
	7, 5, 8, 7, 8, 6, 5, 8, 1, 0,
	1, 0, 4, 6, 5, 8, 2, 0, 2, 2,
	2, 1, 5, 2, 0, 2, 6, 6, 6, 10,
	6, 6, 6, 9, 9, 6, 6, 9, 6, 7,
	7, 6, 2, 2, 2, 2, 1, 2, 1, 0,
	1, 2, 10, 13, 5, 4, 4, 2, 0, 2,
	2, 1, 0, 11, 14, 12, 15, 8, 11, 8,
	7, 9, 1, 1, 3, 3, 5, 6, 1, 3,
	1, 3, 1, 3, 3, 7, 9, 9, 8, 6,
	1, 0, 1, 3, 3, 1, 5, 3, 8, 11,
	6, 1, 0, 5, 2, 3, 0, 2, 0, 1,
	1, 1, 1, 1, 3, 3, 2, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 3, 2, 2,
	1, 2, 2, 2, 2, 1, 1, 0, 1, 1,
	1, 1, 1, 1, 2, 0, 2, 0, 4, 1,
	3, 1, 2, 2, 2, 1, 1, 1, 1, 1,
	3, 3, 1, 3, 1, 3, 11, 13, 5, 1,
	2, 2, 1, 1, 3, 5, 1, 3, 7, 2,
	0, 5, 5, 10, 8, 2, 0, 2, 0, 1,
	1, 1, 1, 1, 2, 0, 2, 0, 4, 0,
	5, 0, 8, 1, 1, 8, 11, 6, 8, 1,
	3, 1, 1, 3, 4, 7, 6, 5, 5, 5,
	5, 1, 3, 4, 4, 4, 3, 4, 3, 1,
	4, 0, 8, 5, 5, 6, 7, 7, 7, 4,
	4, 5, 11, 10, 10, 2, 2, 0, 13, 2,
	0, 1, 3, 5, 5, 3, 6, 2, 1, 0,
	2, 4, 0, 1, 3, 6, 8, 8, 1, 3,
	5, 5, 10, 10, 11, 11, 5, 5, 6, 10,
	1, 0, 2, 0, 1, 0, 2, 2, 1, 1,
	0, 4, 0, 1, 3, 1, 1, 1, 1, 1,
	2, 4, 4, 5, 2, 0, 3, 1, 3, 4,
	3, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 3, 3, 3, 0, 1, 4,
	2, 2, 2, 2, 2, 3, 2, 2, 3, 0,
	2, 2, 1, 1, 1, 0, 2, 4, 5, 6,
	4, 5, 2, 3, 1, 1, 1, 1, 2, 2,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	2, 3, 2, 5, 4, 3, 3, 3, 3, 3,
	1, 1, 0, 2, 3, 0, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 0, 3, 6, 3, 5,
	3, 5, 3, 5, 2, 0, 2, 0, 1, 2,
	2, 2, 3, 3, 2, 2, 3, 3, 1, 1,
	3, 3, 2, 1, 1, 8, 8, 11, 5, 7,
	6, 9, 1, 1, 2, 4, 5, 1, 3, 2,
	2, 2, 2, 2, 1, 2, 2, 4, 3, 2,
	2, 2, 2, 2, 2, 3, 2, 2, 2, 2,
	5, 5, 5, 5, 5, 1, 3, 1, 2, 3,
	0, 3, 1, 2, 1, 1, 1, 3, 0, 1,
	3, 1, 3, 1, 3, 6, 4, 0, 5, 5,
	5, 1, 2, 4, 5, 1, 1, 1, 1, 3,
	3, 2, 2, 1, 2, 2, 2, 2, 1, 2,
	1, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 2, 1, 3, 7, 4,
	1, 3, 4, 6, 4, 8, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -424, -169, -175, -176, -177,
	-178, -179, -180, -181, -182, -183, -184, -416, -417, -418,
	-419, -457, -458, -459, -460, -461, -462, -463, -464, -465,
	-466, -467, -468, -469, -470, -491, -492, -493, -494, -495,
	-496, -497, -498, -471, -472, -473, -474, -475, -476, -477,
	-478, -479, -480, -481, -482, -483, -484, -485, -486, -487,
	-488, -489, -490, -421, -422, -423, -425, -426, -427, -428,
	-429, -430, -431, -432, -433, -434, -435, 266, 212, -171,
	-172, -260, 111, 26, 22, 27, 394, 93, 401, 191,
	436, 228, 407, 413, 397, 378, 290, 405, -174, -173,
	-259, 531, 63, 67, -267, 36, 518, 86, 540, -614,
	486, 457, -614, 96, 97, 98, 99, 531, -218, 115,
	-376, -339, -27, 33, 414, 261, 62, 464, 454, 225,
	276, 284, 422, 103, -404, 268, 449, 375, 194, 438,
	387, 443, 512, -520, 406, 71, 453, 451, 58, 289,
	473, 471, 40, 67, 307, 419, 480, 85, 284, 199,
	225, 236, 247, 261, 286, 71, -522, 62, 375, 385,
	387, 409, 414, 422, 443, 412, 460, 268, 406, 103,
	449, 438, 454, 464, 276, 384, -371, -374, -373, 464,
	261, 307, 103, 406, 71, 67, 419, 480, 85, 284,
	225, 236, 438, 454, 194, 268, 276, -522, 387, 414,
	422, 375, 412, 460, 85, -554, 58, 423, 457, -555,
	-553, -237, 56, 217, 414, 347, 406, 488, -5, 4,
	-19, -20, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 22, 201, 203, 204, 205, 55, 206, 207,
	208, 210, 211, 212, 88, 70, 213, 214, 215, 24,
	216, 218, 219, 220, 221, 222, 223, 123, 226, 227,
	228, 229, 230, 141, 231, 101, 232, 233, 234, 235,
	236, 111, 237, 154, 238, 120, 121, 90, 246, 247,
	248, 249, 250, 251, 253, 254, 98, 149, 150, 255,
	89, 256, 257, 258, 259, 260, 261, 176, 27, 262,
	138, 264, 148, 265, 267, 136, 42, 268, 270, 271,
	272, 273, 274, 275, 276, 277, 279, 281, 282, 91,
	283, 153, 165, 285, 286, 287, 288, 289, 291, 294,
	295, 151, 296, 297, 298, 28, 299, 300, 301, 302,
	303, 304, 305, 306, 307, 308, 309, 310, 312, 313,
	314, 96, 315, 317, 318, 145, 503, 319, 320, 321,
	322, 92, 324, 327, 328, 329, 332, 333, 334, 335,
	336, 337, 105, 85, 338, 99, 340, 341, 342, 343,
	344, 345, 346, 131, 348, 349, 350, 351, 352, 353,
	354, 357, 110, 358, 359, 32, 139, 122, 504, 505,
	502, 144, 62, 506, 507, 124, 501, 508, 102, 364,
	365, 366, 367, 368, 369, 370, 129, 371, 128, 373,
	374, 375, 377, 378, 379, 380, 382, 383, 384, 385,
	386, 112, 387, 152, 143, 388, 389, 390, 391, 84,
	132, 393, 394, 395, 396, 397, 398, 399, 34, 400,
	401, 402, 35, 403, 404, 405, 407, 408, 409, 410,
	127, 412, 413, 146, 415, 416, 87, 417, 418, 419,
	420, 421, 422, 93, 425, 427, 428, 429, 430, 431,
	107, 433, 434, 435, 436, 437, 438, 113, 114, 439,
	440, 441, 147, 442, 443, 445, 446, 104, 448, 449,
	108, 451, 452, 453, 454, 455, 458, 460, 462, 463,
	464, 465, 466, 467, 468, 142, 469, 50, 472, 473,
	474, 97, 475, 476, 477, 478, 155, 183, 479, 480,
	481, 482, 483, 485, 168, 486, 140, 487, 498, 499,
	57, 37, 173, 169, 189, 179, 178, 224, 188, 187,
	29, 278, 175, 292, 293, 500, 186, 171, 185, 166,
	160, 162, 163, 159, 161, 156, 164, 158, 126, 157,
	325, 339, 181, 182, 355, 356, 360, 170, 361, 362,
	376, 177, 174, 411, 426, 172, 444, 184, 459, 461,
	86, 180, 489, 490, 491, 492, 493, 133, 494, 495,
	496, 497, 125, -557, -556, 56, 457, 423, -237, 21,
	217, 58, 347, 406, 414, 488, -614, 457, -614, 379,
	-614, 379, -5, 423, 457, 56, 413, -5, 457, -444,
	-445, 21, -448, 63, 392, 26, 22, -5, -444, 290,
	-445, -5, -160, -121, 470, 316, 269, 509, -173, -174,
	-172, -171, -172, -259, -251, -252, 21, 41, -400, -398,
	-401, -5, 66, 541, -261, 84, -263, -7, -5, -261,
	531, -3, -437, 30, -441, -440, -597, 318, 389, 252,
	31, 73, -402, -400, 64, 73, -170, -169, -398, 67,
	480, 84, 419, 307, 286, 385, 460, 117, 199, 458,
	-521, 463, 34, -18, -5, 28, -15, -5, -146, 221,
	279, -149, -5, 11, -150, 534, 535, 536, 537, 538,
	539, 525, 526, 527, 18, 19, 20, -15, 87, -15,
	28, -7, 28, 246, 67, -7, 28, 336, -11, -449,
	-9, 241, 245, 424, 4, -19, -20, -21, 209, 115,
	225, 25, 81, 242, 116, 79, 44, 76, 52, 53,
	75, 77, 46, 82, 54, 80, 363, 78, 48, 450,
	118, 85, 460, -7, -7, 340, -362, 28, -15, -7,
	-7, 531, 236, -11, -11, 453, 451, 453, 451, -400,
	28, 21, -398, 28, 21, -398, 28, -398, 28, 480,
	67, 246, -409, -560, -95, -5, 4, -19, -21, -15,
	-15, -7, -15, -408, -560, -21, -5, -11, -449, 321,
	221, 279, -7, 28, -408, -7, -408, -7, -7, -7,
	-7, -7, 460, -11, -449, 21, -11, 336, -449, 21,
	-7, -15, 28, 87, -15, -7, 28, -17, -15, 28,
	-13, -7, -7, 28, -234, 28, -99, -100, -102, -103,
	-109, -105, -108, -95, 186, 171, 172, 173, 174, 175,
	176, 187, 188, 170, 189, -110, -111, -106, -107, 184,
	56, 4, -19, 169, -96, 178, 179, 180, 181, 182,
	-234, 28, 25, 336, -365, 28, -449, -365, 28, -365,
	28, 480, 246, 67, 87, 340, 460, 321, 480, -554,
	423, -554, 219, 209, -440, 431, 64, 61, 527, 533,
	57, -94, 7, -94, -598, -94, 40, -236, -9, -94,
	506, 57, 318, 209, -437, -441, -437, -94, -437, 61,
	-94, -5, -94, 74, 61, 541, 383, 531, -225, 531,
	-225, -225, 104, -225, 74, 506, 64, 506, -138, -47,
	-140, 130, -48, -49, -142, 68, 280, 69, -143, -45,
	21, 41, -45, -45, 70, -160, -121, 532, 532, -239,
	-238, -241, -56, 536, -58, 534, 535, -145, 31, 516,
	-120, 471, 40, -60, -59, 13, 531, -63, -61, -172,
	29, 134, -69, -70, 293, 11, 62, 411, -5, -92,
	6, -94, 49, 43, 47, 9, 10, -560, -603, -101,
	38, -122, -297, -62, 12, -103, -604, -605, -108, -606,
	185, 161, 162, 225, 240, 243, 244, 330, 331, 241,
	245, 424, 447, 103, 239, 242, 512, 278, 356, 362,
	376, 444, 459, 461, 360, 224, 292, 325, 490, 491,
	493, 494, 492, 495, 496, 159, 160, 166, 164, 158,
	339, 156, 163, 157, 497, 173, 169, 189, 179, 178,
	188, 187, 175, 186, 171, 181, 182, 170, 174, 172,
	56, 184, 180, -110, -111, -106, -107, -238, 74, 536,
	-87, -90, 533, 529, -398, 531, 531, 541, -261, -24,
	531, -119, -56, 218, 354, 541, -597, 327, 66, 487,
	252, -399, -398, 93, -5, 23, -402, -402, 532, -225,
	-398, 28, -398, 480, -398, 28, -28, 25, -560, -560,
	-7, 460, -560, 130, -522, -376, 473, 209, -406, 31,
	-549, 23, -113, 533, -394, 531, -15, -15, 533, -394,
	23, 368, 257, 452, 231, -394, 64, 31, -29, 36,
	518, 31, 140, -398, 28, -509, 464, 31, 130, 28,
	-29, 480, -7, -518, 365, 74, -7, -24, 31, -393,
	130, 36, 232, -99, -15, -29, -29, -364, -367, 398,
	-366, 207, 256, 196, 22, 27, 477, 93, 223, 264,
	258, 309, 354, 122, 31, 365, 401, 400, 153, -31,
	507, 29, 45, -364, -368, 398, 207, 29, 45, -364,
	398, -387, -390, 354, 23, 213, 90, 305, 335, 338,
	342, 364, 419, 436, 402, 473, 29, -364, 398, 29,
	-398, 28, 21, -400, 28, 140, 398, -39, 531, -87,
	398, 398, 398, 398, -370, 27, 93, 196, 477, 398,
	-411, -572, 215, 404, 441, 300, 434, 482, 277, 418,
	324, 31, 237, 127, 445, -559, 366, 93, -422, -39,
	-87, 398, -456, 196, 27, -7, -15, -15, 74, 29,
	398, -411, 398, 93, 196, 27, 398, -411, 398, 398,
	-510, -31, 479, 398, 93, 232, 394, 196, 27, 264,
	258, 430, 74, 74, -7, 398, -29, -436, 45, -436,
	398, 130, -29, -436, -436, 398, 93, 401, 398, 93,
	29, 368, 257, 452, 231, 398, 196, 27, 93, -413,
	-414, 22, 97, -456, 29, 541, -397, 24, 35, 29,
	541, -397, 74, 29, 541, -397, 29, -114, -113, 531,
	-104, 531, 177, -114, -114, -114, 531, -117, 518, 519,
	531, -117, -118, 183, 531, -118, -118, 178, 179, -118,
	-397, 29, -17, 28, 130, 28, 541, 29, 29, 29,
	140, 368, 257, 452, 231, -28, 219, 23, -236, 40,
	-94, 120, -240, 40, -232, -235, -231, 49, 43, 74,
	-236, 6, 534, 535, -93, -92, -240, 40, -5, -596,
	-94, 4, -231, 40, 58, 49, 43, 74, 504, -600,
	260, 234, 327, 413, -5, -455, -16, 67, 419, 284,
	286, 385, 409, 247, 261, 321, 322, 367, 414, 449,
	464, 21, -398, -365, -448, 531, -14, -5, -14, -455,
	130, -365, 130, -46, -47, -139, -138, -142, 130, 389,
	97, 354, 427, 503, -49, -48, -50, -56, 21, -55,
	91, 349, -51, -52, -56, -58, 534, 535, -141, 122,
	-173, -173, -173, -161, -164, -56, -138, -47, -254, 73,
	541, 14, 39, 55, 534, 535, 536, 537, 538, 539,
	525, 526, 527, 18, 19, 20, -145, 30, 33, 46,
	516, 44, 48, 52, 53, 54, 37, 45, -148, 23,
	-8, 11, 62, -149, 4, -23, 191, 192, 193, 194,
	195, 196, 197, 198, 199, 21, 200, 22, 201, 202,
	119, 510, 94, 203, 204, 205, 60, 206, 207, 208,
	209, 210, 211, 212, 173, 115, 169, 189, 511, 88,
	70, 213, 214, 215, 24, 216, 38, 512, 217, 218,
	219, 513, 220, 221, 222, 223, 224, 225, 514, 123,
	226, 227, 228, 229, 230, 25, 141, 231, 101, 232,
	117, 233, 234, 235, 236, 111, 237, 81, 154, 238,
	120, 239, 240, 241, 242, 243, 244, 245, 121, 90,
	246, 247, 249, 188, 187, 250, 40, 251, 252, 253,
	254, 98, 149, 150, 255, 89, 95, 256, 257, 258,
	259, 41, 109, 260, 261, 176, 27, 262, 263, 138,
	264, 148, 265, 266, 267, 136, 42, 268, 270, 271,
	272, 273, 29, 274, 275, 276, 277, 278, 43, 279,
	282, 91, 175, 283, 153, 284, 165, 285, 116, 79,
	286, 287, 288, 289, 291, 292, 293, 294, 295, 151,
	296, 298, 28, 299, 300, 301, 302, 303, 304, 305,
	306, 307, 308, 309, 310, 311, 312, 76, 500, 313,
	314, 96, 315, 186, 171, 185, 317, 318, 75, 166,
	160, 162, 163, 159, 161, 156, 164, 158, 126, 157,
	145, 503, 319, 320, 321, 322, 92, 323, 326, 324,
	325, 77, 327, 328, 329, 58, 330, 331, 332, 333,
	334, 335, 336, 337, 105, 85, 338, 99, 339, 340,
	342, 343, 345, 346, 347, 181, 82, 182, 131, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 31,
	110, 358, 359, 47, 360, 32, 170, 139, 122, 504,
	505, 502, 144, 66, 506, 507, 124, 501, 361, 80,
	362, 102, 364, 365, 366, 367, 368, 369, 370, 129,
	371, 128, 372, 373, 374, 375, 376, 377, 378, 379,
	380, 381, 382, 383, 384, 385, 386, 112, 387, 152,
	143, 388, 389, 174, 390, 391, 84, 132, 392, 393,
	394, 395, 396, 397, 398, 399, 34, 400, 401, 402,
	35, 403, 404, 405, 78, 406, 407, 408, 409, 410,
	411, 127, 412, 413, 146, 414, 415, 416, 87, 418,
	63, 419, 420, 421, 422, 423, 424, 93, 426, 425,
	427, 428, 429, 430, 172, 431, 432, 107, 433, 434,
	435, 436, 437, 438, 113, 114, 439, 440, 441, 147,
	442, 443, 444, 445, 59, 446, 104, 447, 67, 448,
	450, 449, 108, 451, 452, 453, 454, 106, 455, 56,
	184, 456, 457, 458, 459, 460, 461, 49, 462, 463,
	464, 465, 466, 467, 468, 142, 469, 471, 50, 472,
	473, 474, 97, 103, 83, 475, 476, 477, 478, 155,
	86, 180, 190, 118, 479, 480, 481, 482, 51, 483,
	486, 140, 487, 488, 489, 490, 491, 492, 493, 133,
	494, 495, 496, 497, 125, 499, 57, -56, -56, -56,
	-56, -56, 363, -340, 32, -88, -56, -119, -172, 86,
	-87, -172, -172, -68, 529, 531, 531, 531, -87, -94,
	531, -94, -94, 531, -64, -56, -126, 485, -123, 281,
	531, 531, 130, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, -254, 531, -90, -97,
	536, -6, 4, -19, -20, -21, -22, 21, 202, 119,
	30, 510, 134, 23, 94, 60, 511, 38, 512, 513,
	39, 514, 117, 26, 239, 240, 241, 243, 244, 245,
	40, 252, 95, 41, 109, 263, 266, 269, 43, 280,
	130, 284, 64, 290, 71, 72, 45, 311, 316, 73,
	323, 326, 68, 330, 331, 31, 47, 69, 74, 66,
	33, 509, 372, 381, 392, 100, 63, 424, 432, 59,
	447, 67, 106, 61, 456, 49, 470, 471, 103, 83,
	190, 51, 65, 484, 36, -56, -91, -398, -119, -263,
	23, -13, 541, 532, 39, 55, 30, 33, 46, 44,
	48, 52, 37, 45, 62, 218, -597, -599, 389, 399,
	421, -185, -169, 102, 531, 40, 23, -187, -193, -191,
	531, -5, -5, -262, 83, 83, 61, -210, 64, 61,
	531, 122, 370, 31, -225, -398, -501, -387, 354, 31,
	-18, 28, -5, -561, 531, -561, -579, 211, 198, 315,
	-7, -544, -546, 531, -99, 321, 480, 84, -449, -407,
	-180, -181, -418, -419, 26, 29, -99, 533, -97, -395,
	-396, -6, -520, 83, -146, 531, 267, 388, -15, -15,
	-15, -15, -15, 29, -502, 29, -7, 531, 370, 31,
	-511, -510, -94, 29, -512, -449, 103, 31, -442, -405,
	28, -398, 74, 332, -449, -398, 464, 74, 29, 21,
	-532, -537, 67, 448, -5, -401, 242, -398, -394, -94,
	23, 130, -442, -442, 541, 61, -610, 117, 514, 370,
	370, -319, 28, 514, -320, -5, 117, -336, 513, 471,
	381, 284, 270, -610, 117, -610, 117, 117, 168, 335,
	473, 194, 449, -352, 531, 74, 460, 201, 400, 412,
	411, 460, 412, 411, -398, 309, 153, -15, 122, 61,
	-352, 298, 411, 531, -400, 449, 61, 370, -398, 449,
	61, -390, 90, 338, 342, -100, -231, -609, 70, -231,
	-231, 70, 346, -29, -29, -398, 61, -610, -398, -364,
	398, 29, 45, -364, 398, 29, -7, 61, -40, 532,
	-564, -566, -98, -112, 45, 361, 500, 190, -95, -99,
	426, 61, 61, 61, 61, 117, 40, 31, 117, 40,
	31, -550, 117, -551, 513, 31, 117, 61, -615, -572,
	35, 74, 47, 418, 254, 317, 324, -231, -231, -15,
	-5, -555, 423, 457, 61, 103, 398, 83, 83, -398,
	-7, 61, -615, 61, -394, -532, -532, -532, 61, -615,
	61, 61, -31, -94, 47, 61, -394, 387, -94, 387,
	387, 387, -394, -398, -398, 398, -517, 264, 258, 61,
	-443, -558, 93, -422, 247, -558, 61, -512, -443, -558,
	-558, 61, -352, -352, 61, 438, -15, -15, -15, -15,
	-15, 61, 208, 155, 155, 208, 155, 208, 531, 541,
	208, -503, -372, -371, 199, 512, 261, 286, 62, 385,
	409, 458, 464, -374, 247, 406, 443, 449, 307, -17,
	-15, -13, -7, -15, -7, -99, -234, -114, -119, -92,
	-92, 56, 56, -92, 531, -92, -118, -118, -234, -397,
	29, -512, 29, -449, -365, -365, -365, -398, 457, 541,
	-92, 6, -92, 6, -5, 61, 541, -16, -16, 246,
	422, -412, -408, -412, -412, -13, -17, -13, 139, -42,
	-37, -5, -13, -13, -17, 448, 420, 287, 386, 410,
	-451, 36, 291, -14, 541, 532, 532, 64, -444, -445,
	-451, -445, 66, 503, 427, 541, -52, -54, -58, 534,
	535, 411, 127, 531, -54, 411, 127, -53, -92, 6,
	-53, -144, 359, 430, -16, 541, 83, -153, 94, 95,
	-46, -139, -242, 64, -392, 453, 451, 58, 289, 473,
	67, -398, -241, -99, -15, 56, 58, -56, -56, -56,
	-56, -56, -56, -56, -56, -56, -56, -56, -56, -56,
	-56, -56, -56, 46, 44, 48, 37, 45, -56, 61,
	47, 31, 49, 43, 50, 41, 260, 357, -157, -156,
	350, 351, 352, 353, 166, -152, 59, 60, -151, -172,
	531, -155, 510, 432, 21, -6, 531, -120, 411, 531,
	-172, 41, 31, -90, 532, 541, -119, -71, 530, -68,
	-119, -146, -119, 532, -73, 532, 536, 190, 21, 41,
	-86, -56, -98, -95, -115, 498, 344, 248, 297, 341,
	-116, 417, -92, -67, -66, 51, -123, 71, -132, 508,
	531, -298, -58, -56, -293, -56, 531, -92, -92, -92,
	-92, -56, -78, -12, 4, 498, 344, 248, 297, 341,
	417, -94, -56, -79, -74, -56, -73, -80, -57, -58,
	534, 535, -145, 411, -76, -74, -56, -56, 511, 326,
	456, -77, -56, 64, -119, -56, -119, -119, -119, -119,
	346, -81, -192, -56, -600, -58, 346, -56, -73, -299,
	-303, -298, 100, -56, -296, -171, -303, -293, -172, -293,
	-56, -293, 532, -293, -293, -293, -600, -242, -119, 530,
	542, 532, 532, -264, 85, 31, 532, -56, 468, 229,
	389, -194, 74, -207, 103, 104, -186, -190, -5, 86,
	-5, -242, 541, 527, -188, -191, -88, -195, 65, -243,
	-244, -400, -172, 323, -255, 531, -268, -278, -288, -269,
	127, 125, 126, -5, -122, -62, -297, -560, 166, -244,
	-211, 112, -211, -314, -315, -318, -319, -321, -320, 46,
	-15, 122, 29, -363, 36, 531, 29, 74, 31, 404,
	-568, -569, -571, 23, 321, 458, 484, -572, -562, 532,
	-563, -564, -568, -581, -580, 96, 98, 97, 462, 122,
	198, -394, 536, -545, 509, -547, -552, -548, -564, 4,
	321, -7, -398, 480, -406, -376, -27, -18, -5, -333,
	-97, 532, 541, 527, 130, -7, -271, -270, -272, -5,
	531, -394, -394, -394, -394, -394, -15, -504, 414, 479,
	64, 24, -7, -506, -507, -508, 295, 354, 478, -314,
	122, 29, 284, -7, 422, 29, -438, -439, 446, 197,
	406, 45, 371, 265, 469, 309, 4, 232, 476, 103,
	23, 31, -225, -6, 7, -519, 23, -529, 307, 67,
	-531, -536, -5, -269, 531, -15, 448, -393, 541, -400,
	45, -87, -225, -225, 387, -99, -94, -366, -7, -7,
	-7, -398, -398, 31, -319, 28, -99, -7, 531, -340,
	-358, 83, 503, 503, -359, 83, -5, -92, -7, 28,
	-5, 28, -7, -7, 505, 223, 340, -7, -353, -354,
	-6, -7, -7, 21, 103, 460, 412, 460, 412, -7,
	327, -7, 21, 103, -7, 327, -398, 411, -449, -38,
	110, 79, 40, 83, 327, -32, -35, -384, 93, 196,
	27, -10, -6, -364, -367, 398, -7, -7, -398, -364,
	398, -7, -7, -231, -15, -15, -231, -231, -364, 398,
	-387, -7, -7, -364, 398, 61, -610, -398, 449, 61,
	-610, -400, 398, -506, -507, -7, 532, 541, -98, -112,
	-566, -112, -95, 361, -113, -95, -7, -7, -7, -7,
	-7, 47, -7, 28, -56, 47, -7, 531, 47, -7,
	-7, 47, 74, 254, 317, -11, -365, 61, -7, -7,
	398, -526, 61, 74, -7, -7, -7, -7, -7, -7,
	-13, -393, -13, -13, 398, 398, 61, 400, 201, -11,
	-439, -554, -7, -11, 422, -7, -7, -34, -93, 40,
	534, 535, 93, 398, 398, 398, 398, -7, -7, -94,
	-26, 28, -272, -94, 28, -5, -574, -573, -6, -414,
	196, 27, -5, -505, 61, -7, -15, -409, 531, -99,
	-408, -410, 221, 279, -146, -408, -408, 130, -99, -397,
	-397, -397, 74, -397, 532, 532, 532, 57, 57, 532,
	-119, 532, -397, -17, 422, 130, -403, 36, -440, -232,
	-446, -450, -449, 71, -398, 140, -13, 541, -43, -231,
	541, 533, 45, 45, 45, 45, 45, -447, -454, -6,
	70, 532, -5, -446, 74, -397, 64, 97, -51, -54,
	66, 36, -92, 6, 531, -119, 334, -164, -147, -149,
	62, -154, 517, -245, 65, -243, -607, 67, -607, 453,
	451, 453, 451, -607, -398, 57, 42, -56, -56, 61,
	-152, 59, -151, 42, -56, 47, 49, 43, 50, 41,
	260, 357, -157, -156, 64, 357, -158, 36, 168, 155,
	134, 139, 146, -57, -57, -119, -172, 531, -146, 531,
	-119, 41, -88, -56, 530, 530, 541, 532, 532, 532,
	-121, 541, -160, 532, -86, -73, -73, 16, 17, 61,
	61, 61, 61, 531, 532, -65, -66, 263, -56, -132,
	531, -131, -5, 531, 65, -300, 47, 192, 155, 542,
	-302, 509, -312, -311, 515, -56, 532, 532, 532, 532,
	23, 532, 64, 532, 541, 532, 532, 372, 541, 532,
	14, 534, 535, 536, 537, 538, 539, 525, 526, 527,
	18, 19, 20, -145, 52, 45, 62, -57, -57, -57,
	532, 532, 48, 64, 130, 23, -77, -77, -77, 532,
	64, -119, 541, 532, 532, 532, 532, -6, 532, 541,
	23, -56, -284, 129, -6, 541, 532, -300, 541, 532,
	-99, -301, 541, 47, 192, -312, 532, -158, 532, -303,
	541, 541, 541, -56, -245, 532, -91, -56, 531, 85,
	-196, 100, 101, 155, 532, 541, -88, -195, -193, -56,
	532, 541, -196, -56, 120, 541, 81, -256, 75, 82,
	79, 77, 78, 76, -248, -247, 23, -5, -248, -172,
	-268, -278, -288, -172, -255, -244, -250, -247, 23, -5,
	-248, -248, -277, 518, 64, 531, 531, -87, 531, 74,
	-217, -94, 113, 114, -217, 532, 541, -398, -316, 531,
	-398, -398, 23, -352, -14, -398, -400, 29, -567, 67,
	-112, -577, -420, 212, 403, -571, -576, -94, -236, -570,
	130, 532, 541, 40, 527, -577, 74, 33, 122, -581,
	532, 532, 509, 541, 70, 532, 541, 527, -7, 295,
	-225, -398, 209, -406, -334, 117, -335, -337, 39, 31,
	47, 471, 381, 513, 40, 392, 288, 252, 311, -396,
	-375, -112, -22, -147, -231, -94, 355, 62, 534, 535,
	464, 532, 541, -99, -499, -500, -94, -394, 64, -7,
	-236, -236, -29, -382, 507, -508, -513, -7, 295, 478,
	-513, 532, -398, -398, 246, -509, -7, 130, -92, -365,
	-365, 406, 71, -94, 47, 371, 371, 68, 474, -365,
	-169, 29, -377, 83, 273, 51, -363, -523, 130, 4,
	295, 64, 541, -56, -24, -393, -537, -225, 414, -225,
	-246, 65, -246, -13, 532, 61, 61, 61, -324, 130,
	40, -28, 282, 29, 31, -381, -380, 439, -336, 270,
	-56, 531, -331, 307, 531, -358, 531, 531, -7, -370,
	27, 93, 401, 196, -389, -233, -31, -391, 402, 93,
	-331, 29, -397, 29, -397, -36, -5, 40, 532, 541,
	527, 533, -7, -7, -7, -7, 418, 418, 327, 307,
	418, 532, 541, -384, -384, -10, -33, -94, 61, -610,
	117, 93, 364, 61, 93, 364, 61, 61, 61, -610,
	-7, -7, -364, 398, -7, -7, -7, -364, 398, 61,
	-31, -564, -112, -112, 538, -113, 61, -397, 29, -551,
	-56, -331, 313, 47, -7, 398, 398, 196, 27, 61,
	-527, 83, -365, -398, -393, -393, -393, 61, 61, -7,
	-7, 438, 61, 61, 61, 61, 61, 61, -94, 31,
	-397, 29, -397, 541, 532, 527, -233, 93, -236, -99,
	-15, -15, -89, 531, -99, -15, -117, -117, 532, -397,
	-7, -512, 246, 354, -452, 541, 36, -449, -13, -408,
	541, -37, -5, 414, 414, 414, 414, 414, -451, 541,
	-453, 506, 49, 43, -449, -451, -455, -365, 66, 36,
	455, -119, 532, 541, -154, 531, 91, 92, -44, 71,
	-56, -398, -398, -607, -607, -607, -607, -398, -56, -56,
	42, 42, -56, -57, -57, -56, 42, 64, 357, -158,
	-56, 471, 471, 30, 30, 532, -56, 532, -119, 532,
	541, 532, -68, 532, 190, -86, -121, -121, -121, -56,
	-56, 344, 297, 341, -116, 341, -116, -116, -92, -94,
	266, -56, 106, -160, -133, -5, -56, -158, 74, 74,
	-293, -293, -301, 70, 166, 532, -99, -56, -157, -56,
	-99, -57, -57, -57, -57, -57, -57, -57, -57, -57,
	-57, -57, -57, -57, 41, 31, 260, -57, -56, -56,
	-56, -99, 532, 532, 532, -119, -56, 532, 541, -192,
	-6, -82, 380, 442, 532, -58, -285, 70, 532, 541,
	-84, 479, -158, -298, -312, -303, -293, 74, 74, -303,
	532, 532, -56, -56, -56, 23, -44, 530, -170, -238,
	-201, 531, 74, -169, -169, 102, -190, -196, 527, -191,
	122, -244, 75, 75, -244, -256, 75, -257, 80, -257,
	-257, -124, 450, -5, 531, -248, -250, -248, -248, 532,
	-5, 531, 531, 124, 531, -58, 133, -293, -73, -56,
	-29, -219, -608, 83, -347, 310, -318, -329, -348, -349,
	370, -317, -322, -323, -320, -5, -316, 531, 122, 370,
	-169, 532, -501, -359, -7, -568, 531, 206, -56, 541,
	541, 464, -563, -56, -56, -398, -580, -14, 74, 70,
	-552, -545, -548, 4, -375, 531, -513, -363, 531, -449,
	-7, -15, 252, 47, -340, 503, 531, -57, -398, -386,
	201, 70, 253, 299, -99, -272, -283, 39, 532, 541,
	-15, -502, 531, -113, -347, -316, 531, 370, 140, -511,
	-382, -512, -365, -365, -94, -94, -93, -94, -403, -405,
	-363, -7, -611, 286, 385, -514, -516, -5, -525, 61,
	-524, 21, 63, 96, 97, 98, -513, -243, -536, 532,
	74, -246, -5, 242, -246, 531, -393, 36, 168, -94,
	-7, -7, 86, -319, 29, -379, -378, 230, -5, 40,
	532, -14, -332, 31, 252, 311, 354, -7, -14, -331,
	-14, -327, -326, -205, -5, -269, 531, 31, 275, 298,
	246, -390, 288, 31, 275, 438, -352, -380, -378, -352,
	288, -391, 93, 464, -29, 438, -5, -7, -354, -375,
	-6, 418, -7, -35, -7, -7, -7, 449, 70, -7,
	449, 70, -7, -7, -7, -7, 61, 61, -610, 93,
	364, 61, 61, -610, -7, 464, 538, -7, -7, 532,
	313, 61, 61, -533, -538, 62, 286, 439, -534, -539,
	62, 286, -7, -528, 36, 531, 398, -7, -7, -31,
	-34, -7, -7, -7, -7, -7, -94, 211, 198, 29,
	-5, -573, 355, -575, -112, -22, -147, -231, -94, 464,
	23, 83, 83, -99, 355, 321, -397, 422, 246, -451,
	-450, 290, -231, -13, -13, -13, -13, -13, -454, -397,
	64, -451, 455, 532, -56, -146, -163, 72, 70, -398,
	-398, -398, -398, -56, -56, 42, 30, 30, -56, -56,
	319, 319, -56, -56, 532, 532, -56, -94, -86, 532,
	532, 532, 532, -56, 532, -129, 370, 532, -303, 47,
	47, -303, -161, 148, 532, 532, 64, 64, 41, 260,
	42, 130, 64, 532, 532, -72, -119, 489, 532, 483,
	483, -285, 70, -58, 132, 155, -56, -85, 541, -56,
	354, -303, 532, 47, 47, 532, -304, 129, -304, -304,
	-100, -163, 532, 109, -227, -205, 117, -207, -56, -216,
	-7, -244, -244, -258, 83, 74, 75, -244, -560, 531,
	-13, -247, 531, -270, -270, -5, -273, -274, -269, -284,
	531, 541, -121, -189, -199, -208, -209, 51, -221, -222,
	531, -29, 150, -348, 531, 304, 271, -377, 70, 532,
	541, -333, 36, -324, -314, -15, 122, -594, 36, -363,
	531, 74, -577, -276, -565, -98, -95, -595, -94, 130,
	-99, -586, 393, -398, -545, 532, -535, 64, 61, -541,
	312, 23, -14, -406, -335, 31, -393, -393, -56, -225,
	23, 40, 83, -15, -94, -383, -384, 422, -324, -314,
	122, -7, 284, 422, 23, -356, 449, -560, 273, 30,
	45, -527, -365, -531, -56, 286, 500, 286, 64, 36,
	45, 64, -319, -382, -5, 40, -331, 532, 252, 476,
	299, 253, 309, 532, 532, 532, 541, 36, -206, -198,
	39, -206, -56, 47, 28, 28, -386, 47, 23, -34,
	-386, -99, -231, -34, -397, -397, 527, 61, 61, -7,
	-365, -7, -365, 61, -7, -7, -7, 449, 70, -7,
	-7, -7, 464, -397, -331, -7, -7, 541, -92, -92,
	-99, 541, -92, -92, 513, -56, 61, -397, -94, -94,
	-397, -99, -99, -7, -7, 532, 541, 541, -7, -7,
	506, -446, -397, 532, 532, -127, 484, -56, -45, -56,
	-56, -56, 532, -121, -121, 70, 532, 532, -7, -56,
	-57, 64, -56, -56, -56, 532, 541, 532, 531, -285,
	532, 532, 435, 155, 532, -303, -294, -295, -293, -305,
	-306, 40, -307, 136, 47, 49, 43, 50, 138, -303,
	-83, 306, 354, -127, -265, 87, 97, 110, 532, 541,
	-7, 155, -258, 531, -56, -244, 531, -13, 532, -270,
	532, 532, 532, 541, -275, 23, 123, -286, -287, -57,
	40, -56, 532, -196, -199, -200, 30, -200, 105, 31,
	-220, 115, 116, 149, 47, 154, 151, 152, 42, 153,
	148, -223, -228, -6, -221, -94, -377, -16, -330, 227,
	230, 233, 251, 298, 288, 308, 438, 439, 21, -330,
	-41, 36, 168, -5, -322, 507, -348, 532, -316, -398,
	513, 216, 58, 23, -227, -400, 541, 532, -112, 266,
	-578, -4, -420, 464, -582, 130, -587, -589, -584, 348,
	502, -593, 64, 532, 532, 433, 433, -542, -543, 478,
	354, -513, -169, 532, -357, 83, -357, 532, -341, 337,
	298, 531, -7, 532, 541, -7, 422, 532, -398, -382,
	246, -7, -169, -7, 531, -611, -516, 531, -528, 64,
	532, -408, -530, 23, -530, -15, 531, 531, 531, -333,
	-342, 303, -342, 392, -342, -326, -146, 62, -362, -15,
	-15, 532, 29, 29, 531, 23, -283, -375, -7, -7,
	-369, 359, 93, -369, 93, -7, 61, -7, -365, 61,
	-538, -146, -410, -408, 531, -539, 531, 531, 531, 532,
	-7, -283, 532, -99, 355, -99, -451, -128, -130, -5,
	-159, -162, -56, -165, -167, -166, -168, 531, 238, 408,
	293, 532, -134, 388, 127, 294, -119, 130, -57, -119,
	-81, 499, 354, -309, 168, 36, 541, 23, 532, 74,
	-56, 134, 139, -308, -306, 532, 306, -266, 90, 89,
	88, 93, -245, -205, -169, -13, -119, 532, 532, -277,
	-274, 531, -279, -280, -5, 541, 532, 23, -57, -292,
	23, 106, -56, 106, 105, -549, -549, -549, -549, 152,
	31, 47, -94, 532, 541, -229, -235, -231, 536, 40,
	531, -245, -41, 532, -355, 74, -352, 505, 531, -333,
	-377, -347, -348, -316, 506, 513, 513, -169, 532, -359,
	-565, -568, 540, -99, -590, 51, -612, 262, -589, -585,
	67, 411, -331, -398, 36, 36, -513, 478, -594, -363,
	307, -338, 354, -346, -343, -344, 74, 79, 369, 429,
	-388, 531, -56, -540, 279, -384, -382, -7, -347, -316,
	140, -382, -403, 532, -560, -515, 7, -243, -530, 301,
	205, -328, -325, -9, -119, -119, -393, 531, -393, -398,
	-393, 531, -153, -352, -206, -56, 298, -30, 83, 449,
	449, -7, -369, 93, -7, -601, 130, -601, -602, -99,
	-602, -602, -56, -397, 532, 532, 532, -397, 541, 23,
	541, 532, 531, 531, 425, 532, -135, -136, 37, 467,
	120, -56, -135, -135, -56, 532, 532, 155, -310, 145,
	144, 140, 134, 140, 134, 141, 142, -295, -6, 136,
	532, 74, -14, 91, 91, -187, 532, 532, -270, 532,
	541, -99, 130, -287, 541, -6, -304, -5, -202, -203,
	109, 97, 98, -204, 109, 96, 70, -94, -94, -94,
	-94, -14, 536, 47, -14, 536, -228, -224, -230, -235,
	-355, -356, 228, -350, -351, -5, -269, 531, -41, -348,
	-377, -324, 506, 506, -594, -361, 303, 531, -577, 273,
	531, -583, 411, 437, -549, 130, 286, 286, 23, 449,
	309, -344, 74, -343, 74, 97, 98, -387, 532, 23,
	-15, -382, 422, -324, -7, 531, 532, 541, 532, 541,
	-92, 532, 532, -357, -14, -357, -225, -357, -146, -154,
	-153, 532, -388, -56, -7, -7, 449, -385, 391, 87,
	509, -385, 532, 541, 532, 532, 532, -130, -131, -162,
	-119, -119, 531, -137, 270, -136, 377, 283, 411, 377,
	283, -137, -137, -308, 143, 143, 140, 140, 134, 140,
	134, 140, 138, 136, 93, 70, 70, -245, -249, 23,
	-125, 399, 532, -280, -281, -282, 4, 40, 31, 47,
	128, 124, -58, 123, 110, 93, 110, -197, 102, 531,
	40, 86, 107, 108, -14, 536, 532, 541, -356, 27,
	98, 380, 532, 541, -198, -198, -56, -355, -377, -41,
	-348, -340, 531, -227, -611, -56, -592, -5, 262, -408,
	-408, -169, -7, -345, 354, 35, 24, 93, -345, 532,
	440, -533, -7, 422, -382, 532, 7, -325, 61, -331,
	532, -331, -341, -245, 532, -154, -369, -369, -7, 70,
	-408, -99, 532, 532, -159, 120, 71, 455, 354, 30,
	532, 74, 74, 140, 140, -306, -5, -14, -14, -5,
	531, -282, -57, -57, 47, -57, -284, 531, -187, -207,
	-186, 86, 531, -230, 127, 127, -351, -362, -362, 532,
	-356, -41, -355, -377, -363, -360, -205, 532, -560, 532,
	411, 541, 541, -594, 195, 47, 40, -382, -7, 531,
	-346, -331, -369, -15, 532, 411, 501, -136, 146, 146,
	74, 61, 83, 93, 93, -56, 123, -289, -290, -5,
	131, 155, 532, -119, -198, -355, -356, -41, -356, 532,
	541, -361, 531, -590, 61, 64, -225, -225, -382, -119,
	-331, 147, 147, 136, -59, -560, 166, -5, -5, -5,
	532, -279, 532, 541, 130, -99, -313, 128, -197, -197,
	102, 532, -362, -356, -355, -245, -205, -340, -588, -591,
	-92, 6, -94, -6, 273, 433, 433, 532, 40, 531,
	532, -305, -290, 124, -291, -311, 29, 128, 7, -207,
	-356, -363, 532, 541, -611, 36, 36, -59, -73, 532,
	-309, -291, -291, 7, 123, 23, 155, -356, -591, -560,
	286, 286, 83, -121, -310, -309, -305, 531, -7, -197,
	-245, 531, -408, -408, -5, 532, -308, -310, -289, 123,
	-588, -308, 532, 531, 532, -289, 532,
}

var yyDef = [...]int16{
	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 2832, 2832, 1482,
	-2, 0, 1765, -2, 1828, 1828, 0, 0, 0, 2832,
	0, 2832, 2832, 0, 0, 0, 0, 0, -2, 1473,
	1569, 0, 1605, 0, 1516, 0, 0, 0, -2, 2835,
	2830, 2831, 2587, 0, 0, 0, 0, 0, 0, 1764,
	0, 0, 2731, 0, 79, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 0, 0, 0, 0, 1893, 1894, 0, 0,
	-2, 2066, 2708, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1827, 0, 0, 0, 0,
	0, 2208, 0, 0, 0, 2204, 2205, 2206, 0, 0,
	2210, 2211, 2212, 0, 0, 0, 1811, 0, 1814, 1815,
	1816, 1817, 1818, 1819, 0, 2189, 277, 388, 422, 2194,
	2533, 0, 505, 161, 378, -2, 369, 455, 2548, 96,
	97, 98, 132, 133, 134, 135, 136, 137, 138, 139,
	140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
	150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
	160, 162, 163, 164, 165, 166, 167, 168, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
	191, 192, 193, 194, 195, 196, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 206, 207, 208, 209, 210,
	211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
	221, 222, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 288, 289, 290, 291,
	292, 293, 294, 296, 297, 298, 299, 300, 301, 302,
	303, 304, 305, 306, 307, 308, 309, 310, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	333, 334, 335, 336, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 360, 361, 362,
	363, 364, 365, 366, 367, 368, 370, 371, 372, 373,
	374, 375, 376, 377, 379, 380, 381, 382, 383, 384,
	385, 386, 387, 389, 390, 391, 392, 393, 394, 395,
	396, 397, 398, 399, 400, 401, 402, 403, 404, 405,
	406, 407, 408, 409, 410, 411, 412, 413, 414, 415,
	416, 417, 418, 419, 420, 421, 423, 424, 425, 426,
	427, 428, 429, 430, 431, 432, 433, 434, 435, 436,
	437, 438, 439, 440, 441, 442, 443, 444, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 456, 457,
	458, 459, 460, 461, 462, 463, 464, 465, 466, 467,
	468, 469, 470, 471, 472, 473, 474, 475, 476, 477,
	478, 479, 480, 481, 482, 483, 484, 485, 486, 487,
	488, 489, 490, 491, 492, 493, 494, 495, 496, 497,
	498, 499, 500, 501, 502, 503, 504, 506, 507, 508,
	509, 510, 511, 512, 513, 514, 515, 516, 517, 518,
	519, 520, 521, 2203, 2195, 505, 422, 388, 2199, 2200,
	161, 277, 295, 369, 378, 455, 2835, 2587, 2835, 0,
	2835, 0, 2820, 388, 422, 505, 376, 2822, 0, 0,
	2882, 2883, 2887, 2393, 2393, 2393, 142, 2393, 0, 0,
	2882, 2393, -2, 0, 2740, 2740, 2740, 0, -2, 1487,
	1488, 0, 1488, 0, 1521, 0, 1604, 1606, 1515, 1544,
	1545, 111, 0, 0, 1566, 352, 1571, 114, 106, 1567,
	0, 2, 2828, 0, 2829, 2586, 2574, 0, 0, 2580,
	0, 0, 0, 1549, 0, 0, 0, 1484, 2393, 0,
	0, 0, 0, 92, 0, 0, 0, 0, 0, 0,
	1828, 2730, -2, 0, -2, 246, 1834, 128, 0, 165,
	227, 1470, 0, 1456, 1457, 1458, 1459, 1460, 1461, 1462,
	1463, 1464, 1465, 1466, 1467, 1468, 1469, 2414, 0, 0,
	246, 1996, 246, 0, 0, 2478, 246, 282, 1996, 2103,
	2104, 2105, 2106, 2107, 2568, 2569, 2570, 2571, 522, 523,
	524, 525, 526, 527, 528, 529, 530, 531, 532, 533,
	534, 535, 536, 537, 538, 539, 540, 541, 542, 543,
	544, 0, 0, 2630, 0, 0, 114, 246, 80, 2595,
	0, 0, 0, 1996, 1996, 1895, 1896, 1897, 1898, 0,
	246, 0, 0, 246, 0, 0, 246, 0, 246, 0,
	0, 0, 0, 0, 1336, 0, -2, -2, 1402, 0,
	0, 0, 0, 0, 0, -2, 2974, 0, 2103, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, -2, 2845, 0, 282, -2, 2845,
	0, 0, 246, 0, 0, 0, 246, 84, 130, 246,
	84, 107, 0, 246, 84, 246, 1825, 1394, 1395, 1396,
	1397, 1398, 1399, 1408, 1411, 1412, 1413, 1414, 1415, 1451,
	208, 1408, 1408, 1408, 1421, 1422, 1423, 1424, 1425, 1447,
	1447, 1400, 1401, 1449, 1437, 1449, 1449, 1432, 0, 1449,
	84, 246, 0, 282, 2850, 246, 2101, 2848, 246, 2852,
	246, 2207, 0, 2209, 0, 1809, 1810, 1813, 92, 2190,
	388, 2191, 163, 0, 2192, 0, 0, 0, 0, 0,
	0, 2536, 1198, 2537, 2538, 2563, 2564, 2539, 2566, 2567,
	0, 2196, 0, 2198, 2816, 2817, 2818, 2826, 2819, 0,
	2827, 2821, 2825, 0, 0, 0, 2884, 0, 2889, 0,
	2890, 2891, 2892, 2893, 0, 0, 0, 0, 2795, 1500,
	1497, 0, 2792, 2793, 1501, 0, 0, 0, 1509, 0,
	2738, 2739, 0, 0, 0, -2, 0, 1485, 1486, 1611,
	1520, 1522, 1526, 1527, 1075, 0, 0, 0, 0, 0,
	0, 1965, 1142, 1165, 1166, 1229, 0, 1169, 1170, 1171,
	468, 0, 1176, 1177, 472, 1452, 315, 501, 1219, 1184,
	1185, 1186, 1187, 1188, 1189, 1190, 1191, 0, 0, 0,
	1352, 1475, 1477, 1233, 1197, 1179, 1180, 1181, 1182, 1183,
	-2, 482, 479, 524, 1235, 1236, 1238, 1240, 1242, 1244,
	1245, 1246, 1247, 1248, 1249, -2, 0, 469, 493, 497,
	498, 504, 507, 508, 494, 465, 471, 488, 512, 513,
	515, 517, 514, 518, 519, 481, 478, -2, 484, 485,
	489, 483, 480, 487, 520, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 490, -2, -2, -2, -2,
	-2, -2, -2, 1426, 1427, 1428, 1429, 1611, 0, 1546,
	112, 1221, 0, 1224, 1547, 0, 0, 0, 1568, 0,
	0, 0, 1392, 2833, 0, 0, 2576, 0, 2578, 2579,
	2581, 0, 1729, 0, 1550, 0, 1751, 0, 0, 0,
	0, 246, 2393, 0, 2429, 246, 79, 91, 0, 0,
	0, 0, 0, 0, 0, 0, 1899, 0, 2399, 0,
	0, 1833, 129, 0, 2412, 0, 2709, 0, 0, 2413,
	0, 0, 0, 0, 0, 2419, 0, 0, 2437, 1994,
	1995, 0, 0, 0, 246, 2482, 0, 0, 0, 0,
	2855, 0, 0, 0, 0, 0, 0, 0, 0, 2664,
	0, 0, 0, 0, 0, 2855, 2855, 2076, 2089, 2176,
	2097, 0, 0, 0, 2176, 2176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2168,
	0, 0, 0, 2078, 2080, 0, 0, 0, 0, 2081,
	0, 2432, 1974, 0, 0, 0, 1978, 1993, 1981, 0,
	0, 0, 0, 1996, -2, 1991, 0, 2083, 2176, 0,
	0, 246, 0, 0, 246, 0, 0, 2226, 0, 1337,
	0, 0, 0, 0, 2403, 0, 0, 0, 0, 0,
	2971, 2941, 0, 0, 2945, 2946, 2947, 2948, 0, 0,
	2953, 0, 0, 0, 0, 2958, 0, 0, 2346, 2972,
	-2, 0, 0, 2873, 2874, 0, 0, 0, 0, 0,
	0, 2971, 0, 0, 0, 0, 0, 2971, 0, 0,
	2475, 2476, 0, 0, 0, 0, 0, 0, 0, 2689,
	2690, 0, 0, 0, 0, 0, 2857, 0, 0, 0,
	0, 0, 2857, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2979,
	2980, 0, 2444, 1828, 0, 0, 2178, 82, 83, 0,
	0, 2180, 0, 0, 0, 2183, 0, 1409, 1408, 0,
	1416, 0, 1417, 1418, 1419, 1420, 0, 1441, 0, 0,
	0, 1443, 1439, 1448, 0, 1430, 1431, 1449, 1449, 1435,
	2185, 0, 84, 246, 0, 0, 0, 0, 0, 0,
	1812, 2213, 2214, 2215, 2216, 0, 0, 0, 2540, 2541,
	2543, 2534, 2544, 2546, 2550, 2552, 2553, 1799, 1800, 1801,
	1802, 1803, 0, 0, 1806, 1199, 2545, 2547, 2549, 2535,
	2554, 2555, 2556, 2557, 2558, 2559, 2560, 2561, 2562, 2542,
	2572, 2573, 2197, 376, 2824, 0, 2894, 0, 384, 0,
	235, 342, 372, 190, 207, 270, 271, 325, 378, 415,
	427, 0, 115, 2928, 2888, 0, 0, 109, 0, 0,
	0, 2928, 0, 1491, 2794, 1492, 1499, 1502, 0, 0,
	1504, 0, 1506, 0, 2790, 2791, 2796, 2804, 2805, 0,
	2814, 2815, 2802, 0, 2806, -2, 0, 0, 1512, 0,
	1517, 1518, 1519, 2756, 2757, 1881, 2795, 1500, 1529, 0,
	0, 0, 677, 645, 1458, 1459, 1460, 1461, 1462, 1463,
	1464, 1465, 1466, 1467, 1468, 1469, 0, 638, 892, -2,
	0, -2, 979, 810, 1113, 1115, -2, 789, 0, 0,
	1525, -2, 889, 1372, 104, 105, 623, 624, 625, 626,
	627, 628, 629, 630, 631, 632, 633, 634, 635, 636,
	637, 639, 640, 641, 642, 643, 644, 646, 647, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 658, 659,
	660, 661, 662, 663, 664, 665, 666, 667, 668, 669,
	670, 671, 672, 673, 674, 675, 676, 678, 679, 680,
	681, 682, 683, 684, 685, 686, 687, 688, 689, 690,
	691, 692, 693, 694, 695, 696, 697, 698, 699, 700,
	701, 702, 703, 704, 705, 706, 707, 708, 709, 710,
	711, 712, 713, 714, 715, 716, 717, 718, 719, 720,
	721, 722, 723, 724, 725, 726, 727, 728, 729, 730,
	731, 732, 733, 734, 735, 736, 737, 738, 739, 740,
	741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	781, 782, 783, 785, 786, 787, 788, 790, 791, 792,
	793, 794, 795, 796, 797, 798, 799, 800, 801, 802,
	803, 804, 805, 806, 807, 808, 809, 811, 812, 813,
	814, 815, 816, 817, 818, 819, 820, 821, 822, 823,
	824, 825, 826, 827, 828, 829, 830, 831, 832, 833,
	834, 835, 836, 838, 839, 840, 841, 842, 843, 844,
	845, 846, 847, 848, 849, 850, 851, 852, 853, 854,
	855, 856, 857, 858, 859, 860, 861, 862, 863, 864,
	865, 866, 867, 868, 869, 870, 871, 872, 873, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 888, 890, 891, 893, 894, 895, 896,
	897, 898, 899, 900, 901, 902, 903, 904, 905, 906,
	907, 908, 909, 910, 911, 912, 913, 914, 915, 916,
	917, 918, 919, 920, 921, 922, 923, 924, 925, 926,
	927, 928, 929, 930, 931, 932, 933, 934, 935, 936,
	937, 938, 939, 940, 941, 942, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 958, 959, 960, 961, 962, 963, 964, 965, 966,
	967, 968, 969, 970, 971, 972, 973, 974, 975, 976,
	977, 978, 980, 981, 982, 983, 984, 985, 986, 987,
	988, 989, 990, 991, 992, 993, 994, 995, 996, 997,
	998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
	1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
	1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
	1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
	1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
	1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
	1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
	1068, 1069, 1070, 1071, 1072, 1073, 1074, 1080, 1081, 1095,
	1098, 1099, 0, 0, 0, 1167, 1392, 0, -2, 509,
	1172, 1173, 1174, 1175, 0, 0, 0, 0, -2, 1192,
	0, 1194, 1216, 0, 0, 1351, 1477, 0, 2768, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1295, 0, 1295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1681, 1681, 0, 0,
	0, 0, 0, 0, 0, 0, 1529, 0, 1222, 1225,
	1226, 1403, 99, 100, 101, 102, 103, 545, 546, 547,
	548, 549, 550, 551, 552, 553, 554, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 580, 581, 582, 583, 584, 585, 586, 587,
	588, 589, 590, 591, 592, 593, 594, 595, 596, 597,
	598, 599, 600, 601, 602, 603, 604, 605, 606, 607,
	608, 609, 610, 611, 612, 613, 614, 615, 616, 617,
	618, 619, 620, 621, 622, 1223, 0, 0, 0, 1572,
	1576, 0, 0, 1583, 0, 0, 0, 0, 1374, 1376,
	0, 0, 1478, 0, 0, 2834, 2575, 2577, 0, 0,
	2585, 1864, 1731, 0, 0, 0, 0, 1529, 1742, 0,
	0, 1229, 1551, 1589, 0, 0, 1760, 1760, 1757, 1758,
	1902, 0, 0, 0, 2075, 0, 2426, 2428, 0, 0,
	0, 246, 78, 2325, 0, 2325, 0, 2349, 2350, 0,
	0, 0, 2411, 0, 0, 0, 0, 0, 2528, 2527,
	2529, 2530, 2531, 2532, -2, 79, 1954, 0, 1405, 0,
	2612, 2614, 0, 0, 1471, 1625, 0, 0, 0, 0,
	0, 0, 2421, 0, 2434, 0, 2469, 1902, 0, 0,
	0, 2481, 2477, 0, 0, 2492, 2493, 0, 2837, 0,
	246, 2393, 0, 0, 2629, 2636, 0, 0, 0, 0,
	2595, 2671, 0, 414, -2, 2393, 2679, 0, 2594, 0,
	0, 0, 2836, 2838, 0, 0, 0, 0, 2175, 0,
	0, 2108, 246, 0, 2132, 0, 0, 2011, 0, 1965,
	0, 0, -2, 0, 0, 0, 0, 0, 0, 2140,
	2141, 0, 0, 2161, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2154, 0, 0, 2156, 2157, 0,
	2162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1975, 1979, 1984, 1985, 1976, 1977, 0, 1992, 1982,
	1983, 0, 0, 0, 0, 0, 0, 0, 0, 2085,
	2176, 0, 0, 2087, 2176, 0, 2469, 0, 0, 2218,
	2219, 0, 0, 2314, 2315, 2316, 2317, 2319, -2, 2321,
	0, 0, 0, 0, 0, 0, 2174, 0, 0, 0,
	0, 2406, 0, 2515, 0, 0, 0, 0, 2938, 2942,
	2970, 0, 0, 0, 2951, 2952, 2954, 2955, 2956, 2957,
	2959, 2345, 388, 422, 0, 0, 0, 0, 0, 2647,
	0, 0, 2939, 0, 2667, 2669, 2668, 2670, 0, 2940,
	0, 0, 2474, 2479, 2480, 0, 2683, 0, 2684, 2595,
	0, 0, 2691, 0, 0, 0, 2618, 2619, 2622, 0,
	2839, 2841, 0, 2202, 0, 2842, 0, 0, 2840, 2843,
	2844, 0, 2631, 2632, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 0, 0, 0, 0,
	0, 2442, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1820, 1821, 1822, 1823, 1824, 2208, 84,
	131, 84, 108, 84, 0, 1826, 84, 1410, 0, 0,
	0, 0, 0, 0, 0, 0, 1433, 1434, 84, 2187,
	0, 0, 0, 2102, 2851, 2849, 2853, 2526, 0, 0,
	1200, 1804, 1201, 1805, 2823, 0, 0, 2895, 2896, 0,
	0, 2899, 2976, 2900, 2901, 2902, 2903, 2904, 0, 2906,
	2929, 2931, 2907, 2908, 2909, 0, 0, 0, 0, 0,
	2878, 0, 0, 0, 0, 2885, 2392, 0, 0, 2882,
	84, 0, 1498, 0, 1507, 0, 0, 0, 2807, 0,
	0, -2, -2, 0, 2803, 2812, 2813, 2808, -2, -2,
	2809, 1503, 1510, 0, 1508, 0, 0, 1884, 1879, 1880,
	1495, 1496, 1586, 0, 1610, -2, -2, 277, 238, -2,
	0, 127, 1523, 1076, 1077, 0, 1079, 1082, 1083, 1084,
	1085, 1086, 1087, -2, -2, -2, -2, -2, -2, 1094,
	1096, 1097, -2, 1375, 1377, 0, 1478, 0, -2, 0,
	1112, 0, 1117, 1119, 1121, 0, 1134, 1136, 0, 1391,
	1378, 1379, 1380, 1381, 1382, 0, 0, 1479, 1129, 1480,
	0, 0, 1369, 1370, 1371, 1524, 0, 1116, 0, 0,
	1133, 1963, 0, 1230, 1229, 0, 0, 0, 1360, 1361,
	0, 0, 0, -2, 1473, 1338, 0, 0, 0, 0,
	1345, 1347, 0, -2, 1195, 1203, 1204, 1205, 1206, 1207,
	1208, 1217, 0, 1357, 1353, 0, 2768, 0, 1232, 0,
	0, 1672, 1075, 0, 1677, 1715, 0, 0, 0, 0,
	0, 0, 0, 0, 1305, 1306, 1307, 1308, 1309, 1310,
	1311, 1312, 0, 0, 0, 1347, 1294, 0, 0, 1143,
	0, 0, 0, 501, 0, 0, 1347, 0, 0, 0,
	0, 0, 1392, 0, 1303, 0, 0, 0, 0, 0,
	0, 0, 1317, 1320, 0, 0, 0, 0, 0, 1672,
	0, 1666, 0, 1347, 1675, 1715, 0, 1664, -2, 1391,
	0, 1681, 1289, 0, 0, 0, 0, 1586, 0, 1227,
	1224, 1548, 1584, 0, 1574, 0, 113, 1393, 2582, 2583,
	2584, 1886, 0, 0, 1736, 1737, 0, 1738, 1229, 1735,
	1730, 1589, 0, 0, 0, 1747, 1746, 1886, 0, 1750,
	1530, 1592, 1592, 0, 1536, 0, 1601, 1592, 1592, 1615,
	374, 521, 486, 111, 1333, 1334, 1335, 0, 477, 0,
	0, 1759, 0, 0, 1901, 1903, 1905, 1906, 1907, 0,
	1931, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2339, 2324, 2326, 0, 0, 0, 2331, 2332, 0, 2304,
	2305, 2307, 2339, 0, 2352, 2354, 2355, 2356, 2358, 2351,
	0, 2410, 0, 0, 0, 0, 2498, 2502, 2500, 1400,
	0, 2728, 2393, 0, 2398, 0, 0, 0, -2, 2402,
	1406, 2611, 0, 0, 0, 2715, 0, 1624, 1626, 0,
	2511, 2425, 2415, 2416, 2417, 2418, 0, 2436, 0, 0,
	0, 2441, 1996, 1946, 2468, 2466, 0, 0, 0, 0,
	0, 0, 0, 2478, 0, 0, 2854, 2858, 0, 0,
	0, 0, 0, 0, 0, 2868, 2869, 0, 0, 0,
	0, 0, 2054, 0, 2075, 2638, 0, 0, 2653, 2654,
	0, 2659, 2661, 2662, 0, 114, 2595, 2666, 0, 2393,
	0, -2, 2681, 2681, 0, 0, 0, 2098, 2249, 0,
	0, 0, 92, 0, 2110, 246, 1929, 0, 0, 0,
	2284, 0, 0, 0, 0, 0, 1830, 0, 2284, 246,
	84, 246, 84, 2134, 2137, 2139, 0, 2160, 0, 2293,
	2296, 2138, 2142, 2145, 2146, 0, 0, 0, 0, 2150,
	0, 2147, 2148, 2149, 2153, 0, 2155, 0, 2158, 2163,
	2607, 2608, 2609, 0, 0, 0, 2599, 2601, 389, 137,
	209, 0, 1950, 2077, 2090, 2176, 0, 2257, 2172, 2079,
	0, 0, 2251, 1980, 1986, 1987, 1988, 1990, 2082, 0,
	2433, 2253, 0, 2084, 2176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, -2, 2229, 2217, 0, 0, 2313,
	0, 2312, 1408, 2318, 1408, 0, 2230, 2231, 2232, 2233,
	0, 2404, 84, 246, 2173, 2405, 0, 0, 2284, 2409,
	2236, 0, 0, 2949, 2950, 2237, 2847, 0, 0, 0,
	0, 2649, 0, 0, 2243, 2244, 2245, 2246, 2247, 2248,
	2595, 2685, 2595, 2595, 0, 0, 0, 2620, 2621, 2274,
	2856, 2201, 2846, 2275, 0, 2276, 2277, 2657, 1807, 1808,
	0, 0, 0, 0, 0, 0, 0, 2282, 0, 0,
	0, 0, 84, 2509, 246, 84, 0, 2960, 2964, 2981,
	0, 0, 1830, 2443, 0, 2446, 2447, 2448, 0, 2450,
	2451, 2452, 165, 227, 0, 2455, 2456, 0, 2458, 2177,
	2179, 2181, 0, 2184, 1407, 1450, 1447, 1445, 1446, 1447,
	0, 1436, 2186, 84, 0, 0, 2520, 0, 2193, 2551,
	2920, 2915, 2917, 0, 116, 0, 2898, 0, 2905, 2933,
	0, 0, 0, 0, 0, 0, 0, 2928, 2922, 0,
	0, 2886, 110, 2928, 0, 2880, 0, 1505, 2797, 0,
	2800, 0, 2810, 2811, 0, 0, 1511, 2758, 1884, 1454,
	0, 2760, 0, 2742, 0, 1528, 0, 117, 0, 118,
	118, 118, 118, 0, 126, 0, 0, -2, -2, 0,
	0, 0, 1130, 0, -2, 1114, 1118, 1120, 1122, 0,
	1135, 1138, 0, 1391, 0, 1137, 1140, 0, 0, 1383,
	1384, 1385, 1386, 0, 0, 0, 1131, 0, 0, 0,
	0, 1964, 1168, 1393, 1358, 1359, 0, 1178, 1453, -2,
	0, 0, 1472, 1339, 1473, 1473, 1473, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1354, 0, 0, 1231,
	0, 2766, 2767, 2771, 0, 1391, 0, 0, 0, 0,
	1675, 0, 1656, 1714, 0, 0, 1237, 1239, 1241, 1243,
	0, 1252, 0, 1253, 0, 1255, 1256, 0, 0, 1257,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1145, 1146, 1160,
	1258, 1259, 0, 0, 0, 0, 0, 0, 0, 1264,
	0, 1302, 0, 1266, 1267, 1268, 1269, 0, 1274, 0,
	0, 1323, 0, 0, 0, 0, 1280, 1391, 0, 1282,
	1715, 1681, 0, 0, 0, 1681, 1285, 0, 1287, 0,
	0, 0, 0, 0, 2742, 1607, 0, 1223, 0, 1575,
	1728, 0, 1867, 0, 0, 0, 1740, 1886, 1743, 1744,
	0, 0, 1749, 1587, 186, 0, 0, 0, 0, 0,
	1563, 1563, 1563, 1561, 1532, 1591, 0, 1596, 1534, 1592,
	1601, 1592, 1592, -2, 1536, 0, 1538, 1597, 0, 1596,
	1540, 1542, 1612, 0, 0, 0, 0, -2, 0, 0,
	1996, 1761, 1762, 1763, -2, 2044, 0, 1911, 2046, 0,
	1931, 0, 0, 2074, 0, 2429, 2069, 0, 2325, 0,
	2320, 2301, 2337, 0, 0, 2327, 2328, 2333, 2329, 2330,
	0, 2303, 0, 0, 0, 2302, 0, 0, 0, 0,
	2494, 2495, 0, 0, 0, 2501, 0, 0, 0, 0,
	2075, 0, 0, 2401, 1953, 0, 1956, 1957, 0, 0,
	2002, 1965, 0, 0, 0, 0, 0, 1959, 0, 2613,
	2615, 2588, 2589, 2590, 2591, 2592, 2593, 315, 1458, 1459,
	0, 2423, 0, 1630, 0, 2510, 2512, 2420, 0, 2438,
	2439, 2440, 2437, 2459, 0, 2467, 2462, 2470, 2463, 2465,
	2464, 2044, 1931, 0, 0, 2482, 1946, 0, 2859, 2860,
	2861, 0, 0, 2864, 2865, 0, 0, 0, 0, 2872,
	2526, 0, 2075, 0, 0, 0, 2628, 2645, 0, 2635,
	0, 0, 0, 0, 0, 2665, 2672, 2681, 0, 2681,
	2676, 0, 2678, 2595, 0, 0, 0, 0, 2169, 0,
	1941, 2170, 2171, 0, 0, 1925, 1928, 0, 2010, 2069,
	0, 0, 2014, 0, 0, 2284, 0, 0, 2068, 2112,
	0, 0, 0, 0, 2125, 0, 2131, 1968, -2, 0,
	2133, 0, 2129, 0, 2136, 2159, 2605, 2606, 2292, 0,
	0, 0, 2143, 2151, 2144, 2152, 2164, 2165, 0, 0,
	2166, 2598, 0, 2602, 2603, 2604, 1949, 1951, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2255, 0, 2086, 2176, 0, 2259, 0, 2088, 2176, 0,
	2460, 2220, 2310, 2311, 0, 0, 0, 2407, 0, 2514,
	0, 2517, 2943, 0, 2238, 0, 0, 0, 0, 0,
	2651, 0, 2646, 0, 2688, 2686, 2687, 0, 0, 2273,
	0, 0, 0, 0, 0, 0, 0, 0, 2505, 0,
	2982, 0, 2984, 0, 2978, 0, 0, 0, 2445, 0,
	0, 0, 2221, 0, 0, 84, 1440, 1442, 1438, 2188,
	2490, 0, 2524, 0, 2928, 0, 0, 2918, 2897, 2977,
	0, 2930, 2932, 0, 0, 0, 0, 0, 2879, 0,
	2923, 2924, 2925, 2926, 2927, 84, 0, 2928, 2798, 0,
	2801, 0, 1367, 0, 2759, 0, 1882, 1883, 2755, 0,
	1585, 119, 120, 0, 0, 0, 0, 125, 1078, -2,
	0, 0, -2, 0, 0, -2, 0, 0, 1139, 1141,
	-2, 1388, 1390, 0, 0, 1481, 0, -2, 0, 1364,
	0, -2, 1362, 1340, 0, 1346, 0, 0, 0, 1348,
	1349, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 0, 1196,
	1350, 1356, 0, 0, 2773, 2770, 0, 1681, 0, 0,
	1668, 1669, 1681, 0, 1713, 1234, 0, 1304, 0, 0,
	1144, 1147, 1148, 1149, 1150, 1151, 1152, -2, -2, -2,
	-2, -2, -2, 1159, 0, 0, 1163, 1315, 0, 1298,
	1299, 0, 1261, 1262, 1263, 1301, 0, 1270, 0, 1318,
	1319, 0, 0, 0, 1276, 1633, 0, 155, 1277, 0,
	1332, 0, 1681, 1667, 1680, 0, 1665, 0, 0, 0,
	1286, 1288, 1660, 1660, 1660, 0, 2755, 1228, 0, 1885,
	0, 0, 0, 1732, 1733, 0, 1739, 1741, 0, 1748,
	0, 1531, 0, 0, 0, 0, 0, 1558, 1562, 1559,
	1560, 1533, 0, 1594, 0, 1535, 1539, 1541, 1543, 1552,
	1594, 0, 0, 1614, 0, 0, 516, 0, 1473, 0,
	1771, 1996, 0, 1831, 2046, 0, 1904, 1908, 2054, 2045,
	0, 0, 1932, 1934, 1935, 1954, 0, 1902, 0, 0,
	2397, 2075, 2427, 0, 0, 2339, 0, 2342, 2340, 0,
	0, 0, 2306, 2308, 2309, 2360, 2353, 2357, 0, 0,
	2499, 0, 2503, 0, 2504, 0, 2733, 0, 0, 2528,
	0, 1958, 1960, 2001, 2595, 2595, 0, 2006, 2393, 0,
	1966, 0, 1961, 1962, 0, 1627, 1628, 0, 2424, 0,
	2422, 2435, 0, 2471, 0, 0, 1902, 0, 0, 0,
	2487, 0, 2862, 2863, 2866, 2867, 2870, 2871, 2518, 0,
	2060, 2053, 0, 2377, 2378, 0, 2623, 0, 2649, 0,
	2637, 2639, 2640, 2641, 2642, 2643, 2652, 2655, 2660, 2663,
	0, 2673, 2674, 2675, 2677, 0, 2682, 0, 0, 0,
	2261, 2267, 0, 2109, 0, 1946, 1924, 0, 1926, 1927,
	2284, 0, 2285, 0, 2287, 0, 0, 2063, 0, 2016,
	0, 0, 2021, 0, 1878, 1878, 0, 0, 2116, 2126,
	1829, 1972, 0, 0, 0, 0, 2120, 2122, 2123, 2121,
	0, 1969, 0, 0, 0, 0, 84, 84, 2294, 2295,
	2298, 2167, 2610, 2600, 2250, 0, 0, 0, 0, 2258,
	0, 0, 2252, 2263, 2254, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2235, 2322, 0, 2234, 84, 2284,
	2944, 0, 0, 2716, 2701, 0, 0, 0, 2717, 2718,
	0, 0, 2241, 2634, 0, 0, 0, 2271, 2272, 2489,
	2658, 2278, 2279, 2280, 2281, 84, 2508, 0, 0, 87,
	84, 2961, 2962, 2963, 2965, 2966, 2967, 2968, 2969, 0,
	0, 0, 0, 0, 0, 0, 2182, 0, 2525, 2875,
	2916, 0, 2934, 2910, 2911, 2912, 2913, 2914, 2921, 2876,
	0, 84, 2799, 1366, 1393, 0, 2762, 0, 2740, 121,
	122, 123, 124, -2, -2, 0, 0, 0, -2, -2,
	1387, 1389, -2, -2, 1132, 1363, 1393, 1193, 1473, 1341,
	1343, 1344, 1218, 1355, 1474, 1473, 0, 1476, 0, 1670,
	1671, 0, 1676, 0, 1251, 1254, 0, 0, 0, 1164,
	0, 0, 0, 1260, 1265, 0, 0, 511, 1275, 1321,
	1322, 1634, 0, 1635, 1631, 1632, 0, 0, 0, 1327,
	303, 0, 1283, 1673, 1674, 1284, 1681, 0, 1697, 1681,
	1326, 2762, 1579, 0, 0, 1870, 0, 0, 1745, 1588,
	1590, 1553, 0, 1555, 0, 0, 0, 1557, 0, 0,
	0, 1537, 0, 0, 0, 106, 0, 1616, 1620, 0,
	0, 0, 0, 1886, 1753, 1853, 1853, 0, 1755, 1768,
	0, 1771, 0, 2054, 0, 0, 0, 95, 0, 1930,
	0, 1936, 0, 2046, 0, 1931, 0, 2388, 0, 0,
	0, 0, 2299, 0, 1621, 0, 1404, -2, 2334, 0,
	2335, 2370, 0, 2387, 0, 2496, 0, 0, 0, 2735,
	0, 0, 0, 2400, 1955, 0, 2062, 2062, 0, 2030,
	0, 1967, 0, 1629, 2513, 0, 1947, 0, 0, 0,
	0, 1946, 0, 0, 0, 2523, 0, 0, 0, 0,
	0, 2651, 2644, 0, 0, 0, 2697, 2697, 0, 0,
	0, 0, 2111, 1954, 1922, 1923, 2012, 2026, 2286, 2290,
	2288, 2289, 2291, 2026, 0, 2026, 0, 0, 1872, 81,
	0, 1873, 0, 2113, 0, 0, 1973, 2114, 0, 2118,
	0, 1630, 1971, 2119, 2128, 2135, 0, 0, 0, 2100,
	0, 2100, 0, 0, 2265, 2256, 0, 0, 0, 2269,
	2260, 0, 2323, 2408, 2516, 2239, 2240, 0, 0, 0,
	2707, 0, 0, 0, 0, 0, 0, 2283, 2506, 2507,
	2983, 1630, 0, 2453, 2454, 2222, 0, 0, 2457, 2491,
	2919, 2928, 2881, 1368, 1455, 1513, 0, 2754, 0, -2,
	-2, -2, 1365, 0, 2777, 0, 1678, 1679, 1712, 1314,
	-2, 0, 1300, 1296, 1297, 1271, 0, 1272, 0, 1636,
	1278, 1279, 0, 1328, 1281, 1706, 1659, 1661, 0, 0,
	0, 0, 1683, 1684, 1685, 1686, 1687, 1688, 1691, 1695,
	0, 1324, 0, 1514, 1582, 0, 0, 1863, 1586, 0,
	1866, 0, 1554, 0, 1565, 1556, 0, 0, 1595, 0,
	1598, 1600, 1615, 0, 1618, 0, 0, 0, 1637, 0,
	0, 1658, 1340, 1752, 1754, 0, 0, 0, 1848, 0,
	1770, 1772, 1773, 1834, 1834, 1776, 1777, 1834, 1834, 0,
	0, 0, 1787, 1795, 1586, 1766, 95, 0, 1909, 1912,
	1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1910,
	2058, 0, 0, 0, 1933, 1954, 2054, 2044, 2046, 1931,
	0, 0, 0, 0, 0, 2069, 0, 2325, 1623, 2338,
	0, 2343, 2344, 0, 2376, 2372, 2359, 2361, 0, 2364,
	2365, 2284, 0, 2497, 2723, 0, 0, 2729, 2734, 0,
	0, 2732, 2397, 2075, 2003, 0, 2004, 2020, 2035, 0,
	2000, 0, 2700, 1945, 0, 1946, 0, 2044, 1931, 2472,
	0, 1946, 2526, 2059, 0, 0, 2624, 0, 2633, 0,
	2680, 2697, 2694, 0, 2693, 2722, 0, 0, 0, 1952,
	2595, 0, 2595, 0, 2595, 2022, 2023, 315, 1881, 80,
	1877, 1878, 2117, 2127, 0, 0, 2597, 2297, 2262, 2268,
	2091, 2099, 0, 2093, 0, 2264, 0, 2100, 0, 0,
	2702, 2712, 2712, 2705, 0, 2719, 0, 0, 0, 2648,
	2242, 84, 2449, 0, 0, 0, 84, 2761, 2763, 0,
	2741, 2743, 2745, 2746, 2747, 2748, 2749, 0, 185, 371,
	472, 1342, 0, 0, 0, 0, 2772, 0, -2, 0,
	0, 1329, 1330, 1711, 0, 0, 0, 0, 1291, 0,
	1682, 1689, 1690, 0, 0, 1293, 1325, 1573, 0, 0,
	0, 0, 1865, 1871, 1734, 0, 0, 1593, 1599, 1613,
	1617, 0, 0, 1643, 0, 0, 0, 0, 1640, 1660,
	0, 0, 1852, 0, 1850, 0, 0, 0, 0, 0,
	0, 0, 1786, 1769, 0, 1789, 1790, 1791, 1792, 1793,
	0, 1756, 2058, 2043, 2060, 0, 93, 94, 0, 1937,
	95, 2046, 2054, 0, 2394, 0, 0, 2397, 2071, 0,
	1622, 2339, 2341, 2336, 0, 0, 0, 2371, 2362, 1834,
	2366, 2367, 0, 2386, 0, 0, 2736, 2737, 2389, 0,
	0, 2005, 0, 2007, 2031, 2032, 0, 2027, 2028, 2029,
	2008, 0, 0, 0, 0, 1948, 2483, 1946, 0, 0,
	0, 2488, 2519, 2616, 0, 0, 2626, 2656, 2692, 2695,
	2696, 0, 1943, 0, 0, 0, 2062, 0, 2062, 2393,
	2062, 0, 1884, 1881, 1874, 0, 2000, 2130, 0, 0,
	0, 2266, 2095, 0, 2270, 1998, 0, 1998, 0, 2713,
	0, 0, 0, 2985, 2223, 2225, 2224, 2877, 0, 0,
	0, 2750, 0, 0, 0, 2769, 2789, 2778, -2, 430,
	186, 0, 2789, 2789, 1313, 1273, 1316, 1331, 1695, 0,
	0, 1698, 0, 1700, 0, 0, 0, 1662, 1663, 1696,
	1292, 0, 0, 0, 0, 1586, 1603, 2937, 0, 1641,
	0, 1645, 0, 1638, 0, 1639, 0, 1657, 1843, 1844,
	0, 0, 1855, 1845, 0, 0, 0, 1774, 1775, 1778,
	1779, 1780, 1781, 0, 1784, 1785, 1788, 0, 1796, 1798,
	2060, 1889, 0, 0, 2048, 1878, 1878, 0, 2058, 2054,
	95, 2046, 2395, 2396, 2390, 1965, 0, 0, 2300, 0,
	0, 2369, 2373, 2374, 0, 0, 0, 0, 0, 0,
	2019, 2033, 0, 2034, 0, 0, 0, 0, 0, 0,
	2699, 2485, 0, 0, 1946, 0, 2625, 0, 1938, 0,
	1942, 1939, 0, 2284, 0, 2284, 2030, 1586, 0, 1875,
	1884, 2115, 2124, 2596, 2100, 2100, 0, 2703, 1997, 2710,
	0, 2704, 0, 0, 2720, 2721, 2650, 2764, 2765, 2744,
	0, 0, 0, 2774, 0, 0, 2780, 2781, 2782, 2783,
	2784, 2775, 2776, 0, 1708, 1710, 1699, 1701, 0, 1704,
	0, 1705, 1692, 1693, 0, 0, 0, 1862, 1564, 0,
	2935, 0, 1619, 1644, 1647, 1648, 0, 0, 0, 1653,
	0, 1646, 0, 0, 1846, 0, 1847, 1856, 0, 0,
	0, 0, 1849, 1851, 1782, 1783, 1794, 0, 1887, 2055,
	0, 0, 2047, 0, 81, 81, 0, 2060, 95, 2058,
	2054, 2075, 0, 0, 0, 0, 2363, 2368, 0, 2726,
	2727, 2397, 2061, 2036, 0, 2039, 2040, 0, 2037, 1999,
	2009, 2698, 1946, 0, 2473, 2617, 2627, 1944, 0, 2013,
	2025, 2015, 2035, 2284, 2024, 1876, 2092, 2094, 2100, 0,
	2706, 2714, 2752, 2751, 0, 0, 2786, 2787, 0, 0,
	1290, 0, 0, 1702, 1703, 0, 0, 0, 0, 1602,
	0, 1649, 1650, 1651, 1652, 1654, 0, 0, 1854, 0,
	0, 1860, 0, 1797, 2056, 2057, 2049, 2050, 2051, 1878,
	1891, 2058, 2060, 95, 2060, 0, 2072, 2071, 0, 2375,
	2376, 0, 0, 2391, 2038, 2393, 2393, 2484, 1946, 0,
	2284, 2018, 2096, 2711, 2753, 2785, 2788, 2779, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1718, 0,
	-2, 0, 0, 0, 81, 2060, 1890, 2058, 1586, 2070,
	0, 1965, 2381, 0, 0, 0, 2041, 2042, 2486, 0,
	2017, 1707, 1709, 1694, 0, 0, -2, 1581, 1577, 1578,
	2936, 0, 1697, 0, 0, 1727, 0, 1716, 1857, 1858,
	0, 1861, 2052, 1888, 2060, 2064, 2073, 2075, 0, 2379,
	2382, 2383, 2384, 2385, 0, 0, 0, 1940, 0, 0,
	1642, 0, 1719, 1720, 1706, 1727, 1727, 0, 0, 0,
	1892, 2060, 2347, 0, 0, 0, 0, 0, 1473, 1655,
	1711, 1706, 1697, 1726, 0, 0, 0, 1586, 2380, 0,
	0, 0, 0, 0, 1695, 1711, 1723, 0, 0, 1859,
	2065, 2381, 2724, 2725, 1580, 0, 1721, 1695, 0, 0,
	0, 1722, 1724, 0, 2348, 0, 1725,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 538, 3, 3,
	531, 532, 536, 534, 541, 535, 533, 537, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 542, 540,
	525, 527, 526, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 529, 3, 530, 539,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var yyTok3 = [...]uint16{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 464, 57807, 465, 57808, 466, 57809, 467,
	57810, 468, 57811, 469, 57812, 470, 57813, 471, 57814, 472,
	57815, 473, 57816, 474, 57817, 475, 57818, 476, 57819, 477,
	57820, 478, 57821, 479, 57822, 480, 57823, 481, 57824, 482,
	57825, 483, 57826, 484, 57827, 485, 57828, 486, 57829, 487,
	57830, 488, 57831, 489, 57832, 490, 57833, 491, 57834, 492,
	57835, 493, 57836, 494, 57837, 495, 57838, 496, 57839, 497,
	57840, 498, 57841, 499, 57842, 500, 57843, 501, 57844, 502,
	57845, 503, 57846, 504, 57847, 505, 57848, 506, 57849, 507,
	57850, 508, 57851, 509, 57852, 510, 57853, 511, 57854, 512,
	57855, 513, 57856, 514, 57857, 515, 57858, 516, 57859, 517,
	57860, 518, 57861, 519, 57862, 520, 57863, 521, 57864, 522,
	57865, 523, 57866, 524, 57867, 528, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:565
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:580
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:588
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:603
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:606
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:615
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:616
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:617
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:618
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:619
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:620
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:621
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:622
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:623
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:624
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:625
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:626
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:627
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:628
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:629
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:630
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:631
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:632
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:633
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:634
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:635
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:636
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:637
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:638
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:639
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:640
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:641
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:642
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:643
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:644
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:645
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:646
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:647
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:648
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:649
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:650
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:651
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:652
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:653
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:654
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:655
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:656
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:657
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:658
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:659
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:660
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:661
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:662
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:663
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:664
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:665
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:666
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:667
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:668
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:669
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:670
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:671
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:672
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:673
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:674
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:675
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:676
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:677
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:678
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:679
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:680
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:681
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:682
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:683
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:684
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:685
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:687
		{
			yyVAL.stmt = nil
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:698
		{
			yyVAL.str = yyDollar[1].str
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:699
		{
			yyVAL.str = ""
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:703
		{
			yyVAL.list = yyDollar[1].list
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:704
		{
			yyVAL.list = nil
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:708
		{
			yyVAL.dropBehav = ast.DropCascade
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:709
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:710
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:714
		{
			yyVAL.ival = 1
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:715
		{
			yyVAL.ival = 0
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:719
		{
			yyVAL.ival = 1
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:720
		{
			yyVAL.ival = 0
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:724
		{
			yyVAL.bval = true
		}
	case 90:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:725
		{
			yyVAL.bval = false
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:729
		{
			yyVAL.bval = true
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:730
		{
			yyVAL.bval = false
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:734
		{
			yyVAL.list = yyDollar[2].list
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:735
		{
			yyVAL.list = nil
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:736
		{
			yyVAL.list = nil
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:745
		{
			yyVAL.str = yyDollar[1].str
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:746
		{
			yyVAL.str = yyDollar[1].str
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:747
		{
			yyVAL.str = yyDollar[1].str
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:751
		{
			yyVAL.str = yyDollar[1].str
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:752
		{
			yyVAL.str = yyDollar[1].str
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:753
		{
			yyVAL.str = yyDollar[1].str
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:754
		{
			yyVAL.str = yyDollar[1].str
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:755
		{
			yyVAL.str = yyDollar[1].str
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:758
		{
			yyVAL.str = yyDollar[1].str
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:759
		{
			yyVAL.str = yyDollar[1].str
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:762
		{
			yyVAL.str = yyDollar[1].str
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:767
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:771
		{
			list := yyDollar[1].list
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = list
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:780
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:784
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:792
		{
			yyVAL.rangevar = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:799
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list.Items) == 1 {
				if str, ok := yyDollar[2].list.Items[0].(*ast.String); ok {
					yyVAL.rangevar = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.rangevar = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.rangevar = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:828
		{
			yyVAL.list = yyDollar[2].list
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:829
		{
			yyVAL.list = nil
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:834
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:838
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:851
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:857
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:863
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:869
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:875
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:882
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:889
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_UNLOGGED
			yyVAL.node = rangeVar
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:895
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:901
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:910
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:914
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				nodes.Append(item)
			}
			yyVAL.list = nodes
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:926
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:930
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].list)
			yyVAL.list = list
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:940
		{
			yyVAL.str = "abort"
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:941
		{
			yyVAL.str = "absent"
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:942
		{
			yyVAL.str = "absolute"
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:943
		{
			yyVAL.str = "access"
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:944
		{
			yyVAL.str = "action"
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:945
		{
			yyVAL.str = "add"
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:946
		{
			yyVAL.str = "admin"
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:947
		{
			yyVAL.str = "after"
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:948
		{
			yyVAL.str = "aggregate"
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:949
		{
			yyVAL.str = "also"
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:950
		{
			yyVAL.str = "alter"
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:951
		{
			yyVAL.str = "always"
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:952
		{
			yyVAL.str = "asensitive"
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:953
		{
			yyVAL.str = "assertion"
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:954
		{
			yyVAL.str = "assignment"
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:955
		{
			yyVAL.str = "at"
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:956
		{
			yyVAL.str = "atomic"
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:957
		{
			yyVAL.str = "attach"
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:958
		{
			yyVAL.str = "attribute"
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:959
		{
			yyVAL.str = "backward"
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:960
		{
			yyVAL.str = "before"
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:961
		{
			yyVAL.str = "begin"
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:962
		{
			yyVAL.str = "breadth"
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:963
		{
			yyVAL.str = "by"
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:964
		{
			yyVAL.str = "cache"
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:965
		{
			yyVAL.str = "call"
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:966
		{
			yyVAL.str = "called"
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:967
		{
			yyVAL.str = "cascade"
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:968
		{
			yyVAL.str = "cascaded"
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:969
		{
			yyVAL.str = "catalog"
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:970
		{
			yyVAL.str = "chain"
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:971
		{
			yyVAL.str = "characteristics"
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:972
		{
			yyVAL.str = "checkpoint"
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:973
		{
			yyVAL.str = "class"
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:974
		{
			yyVAL.str = "close"
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:975
		{
			yyVAL.str = "cluster"
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:976
		{
			yyVAL.str = "columns"
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:977
		{
			yyVAL.str = "comment"
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:978
		{
			yyVAL.str = "comments"
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:979
		{
			yyVAL.str = "commit"
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:980
		{
			yyVAL.str = "committed"
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:981
		{
			yyVAL.str = "compression"
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:982
		{
			yyVAL.str = "conditional"
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:983
		{
			yyVAL.str = "configuration"
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:984
		{
			yyVAL.str = "conflict"
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:985
		{
			yyVAL.str = "connection"
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:986
		{
			yyVAL.str = "constraints"
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:987
		{
			yyVAL.str = "content"
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:988
		{
			yyVAL.str = "continue"
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:989
		{
			yyVAL.str = "conversion"
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:990
		{
			yyVAL.str = "copy"
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:991
		{
			yyVAL.str = "cost"
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:992
		{
			yyVAL.str = "csv"
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:993
		{
			yyVAL.str = "cube"
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:994
		{
			yyVAL.str = "current"
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:995
		{
			yyVAL.str = "cursor"
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:996
		{
			yyVAL.str = "cycle"
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:997
		{
			yyVAL.str = "data"
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:998
		{
			yyVAL.str = "database"
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:999
		{
			yyVAL.str = "day"
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1000
		{
			yyVAL.str = "deallocate"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1001
		{
			yyVAL.str = "declare"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1002
		{
			yyVAL.str = "defaults"
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1003
		{
			yyVAL.str = "deferred"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1004
		{
			yyVAL.str = "definer"
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1005
		{
			yyVAL.str = "delete"
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1006
		{
			yyVAL.str = "delimiter"
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1007
		{
			yyVAL.str = "delimiters"
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1008
		{
			yyVAL.str = "depends"
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1009
		{
			yyVAL.str = "depth"
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1010
		{
			yyVAL.str = "detach"
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1011
		{
			yyVAL.str = "dictionary"
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1012
		{
			yyVAL.str = "disable"
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1013
		{
			yyVAL.str = "discard"
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1014
		{
			yyVAL.str = "document"
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1015
		{
			yyVAL.str = "domain"
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1016
		{
			yyVAL.str = "double"
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1017
		{
			yyVAL.str = "drop"
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1018
		{
			yyVAL.str = "each"
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1019
		{
			yyVAL.str = "empty"
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1020
		{
			yyVAL.str = "enable"
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1021
		{
			yyVAL.str = "encoding"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1022
		{
			yyVAL.str = "encrypted"
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1023
		{
			yyVAL.str = "enum"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1024
		{
			yyVAL.str = "error"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1025
		{
			yyVAL.str = "escape"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1026
		{
			yyVAL.str = "event"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1027
		{
			yyVAL.str = "exclude"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1028
		{
			yyVAL.str = "excluding"
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1029
		{
			yyVAL.str = "exclusive"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1030
		{
			yyVAL.str = "execute"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1031
		{
			yyVAL.str = "explain"
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1032
		{
			yyVAL.str = "expression"
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1033
		{
			yyVAL.str = "extension"
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1034
		{
			yyVAL.str = "external"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1035
		{
			yyVAL.str = "family"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1036
		{
			yyVAL.str = "filter"
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1037
		{
			yyVAL.str = "finalize"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1038
		{
			yyVAL.str = "first"
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1039
		{
			yyVAL.str = "following"
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1040
		{
			yyVAL.str = "force"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1041
		{
			yyVAL.str = "format"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1042
		{
			yyVAL.str = "forward"
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1043
		{
			yyVAL.str = "function"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1044
		{
			yyVAL.str = "functions"
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1045
		{
			yyVAL.str = "generated"
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1046
		{
			yyVAL.str = "global"
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1047
		{
			yyVAL.str = "granted"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1048
		{
			yyVAL.str = "groups"
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1049
		{
			yyVAL.str = "handler"
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1050
		{
			yyVAL.str = "header"
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1051
		{
			yyVAL.str = "hold"
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1052
		{
			yyVAL.str = "hour"
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1053
		{
			yyVAL.str = "identity"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1054
		{
			yyVAL.str = "if"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1055
		{
			yyVAL.str = "immediate"
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1056
		{
			yyVAL.str = "immutable"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1057
		{
			yyVAL.str = "implicit"
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1058
		{
			yyVAL.str = "import"
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1059
		{
			yyVAL.str = "include"
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1060
		{
			yyVAL.str = "including"
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1061
		{
			yyVAL.str = "increment"
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1062
		{
			yyVAL.str = "indent"
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1063
		{
			yyVAL.str = "index"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1064
		{
			yyVAL.str = "indexes"
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1065
		{
			yyVAL.str = "inherit"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1066
		{
			yyVAL.str = "inherits"
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1067
		{
			yyVAL.str = "inline"
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1068
		{
			yyVAL.str = "input"
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1069
		{
			yyVAL.str = "insensitive"
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1070
		{
			yyVAL.str = "insert"
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1071
		{
			yyVAL.str = "instead"
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1072
		{
			yyVAL.str = "invoker"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1073
		{
			yyVAL.str = "isolation"
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1074
		{
			yyVAL.str = "keep"
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1075
		{
			yyVAL.str = "key"
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1076
		{
			yyVAL.str = "keys"
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1077
		{
			yyVAL.str = "label"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1078
		{
			yyVAL.str = "language"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1079
		{
			yyVAL.str = "large"
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1080
		{
			yyVAL.str = "last"
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1081
		{
			yyVAL.str = "leakproof"
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1082
		{
			yyVAL.str = "level"
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1083
		{
			yyVAL.str = "listen"
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1084
		{
			yyVAL.str = "load"
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1085
		{
			yyVAL.str = "local"
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1086
		{
			yyVAL.str = "location"
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1087
		{
			yyVAL.str = "lock"
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1088
		{
			yyVAL.str = "locked"
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1089
		{
			yyVAL.str = "logged"
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1090
		{
			yyVAL.str = "mapping"
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1091
		{
			yyVAL.str = "match"
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1092
		{
			yyVAL.str = "matched"
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1093
		{
			yyVAL.str = "materialized"
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1094
		{
			yyVAL.str = "maxvalue"
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1095
		{
			yyVAL.str = "merge"
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1096
		{
			yyVAL.str = "method"
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1097
		{
			yyVAL.str = "minute"
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1098
		{
			yyVAL.str = "minvalue"
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1099
		{
			yyVAL.str = "mode"
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1100
		{
			yyVAL.str = "month"
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1101
		{
			yyVAL.str = "move"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1102
		{
			yyVAL.str = "name"
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1103
		{
			yyVAL.str = "names"
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1104
		{
			yyVAL.str = "nested"
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1105
		{
			yyVAL.str = "new"
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1106
		{
			yyVAL.str = "next"
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1107
		{
			yyVAL.str = "nfc"
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1108
		{
			yyVAL.str = "nfd"
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1109
		{
			yyVAL.str = "nfkc"
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1110
		{
			yyVAL.str = "nfkd"
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1111
		{
			yyVAL.str = "no"
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1112
		{
			yyVAL.str = "normalized"
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1113
		{
			yyVAL.str = "nothing"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1114
		{
			yyVAL.str = "notify"
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1115
		{
			yyVAL.str = "nowait"
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1116
		{
			yyVAL.str = "nulls"
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1117
		{
			yyVAL.str = "object"
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1118
		{
			yyVAL.str = "of"
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1119
		{
			yyVAL.str = "off"
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1120
		{
			yyVAL.str = "oids"
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1121
		{
			yyVAL.str = "old"
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1122
		{
			yyVAL.str = "omit"
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1123
		{
			yyVAL.str = "operator"
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1124
		{
			yyVAL.str = "option"
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1125
		{
			yyVAL.str = "options"
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1126
		{
			yyVAL.str = "ordinality"
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1127
		{
			yyVAL.str = "others"
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1128
		{
			yyVAL.str = "over"
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1129
		{
			yyVAL.str = "overriding"
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1130
		{
			yyVAL.str = "owned"
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1131
		{
			yyVAL.str = "owner"
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1132
		{
			yyVAL.str = "parallel"
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1133
		{
			yyVAL.str = "parameter"
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1134
		{
			yyVAL.str = "parser"
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1135
		{
			yyVAL.str = "partial"
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1136
		{
			yyVAL.str = "partition"
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1137
		{
			yyVAL.str = "passing"
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1138
		{
			yyVAL.str = "password"
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1139
		{
			yyVAL.str = "path"
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1140
		{
			yyVAL.str = "plan"
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1141
		{
			yyVAL.str = "plans"
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1142
		{
			yyVAL.str = "policy"
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1143
		{
			yyVAL.str = "preceding"
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1144
		{
			yyVAL.str = "prepare"
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1145
		{
			yyVAL.str = "prepared"
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1146
		{
			yyVAL.str = "preserve"
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1147
		{
			yyVAL.str = "prior"
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1148
		{
			yyVAL.str = "privileges"
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1149
		{
			yyVAL.str = "procedural"
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1150
		{
			yyVAL.str = "procedure"
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1151
		{
			yyVAL.str = "procedures"
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1152
		{
			yyVAL.str = "program"
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1153
		{
			yyVAL.str = "publication"
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1154
		{
			yyVAL.str = "quote"
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1155
		{
			yyVAL.str = "quotes"
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1156
		{
			yyVAL.str = "range"
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1157
		{
			yyVAL.str = "read"
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1158
		{
			yyVAL.str = "reassign"
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1159
		{
			yyVAL.str = "recheck"
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1160
		{
			yyVAL.str = "recursive"
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1161
		{
			yyVAL.str = "ref"
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1162
		{
			yyVAL.str = "referencing"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1163
		{
			yyVAL.str = "refresh"
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1164
		{
			yyVAL.str = "reindex"
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1165
		{
			yyVAL.str = "relative"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1166
		{
			yyVAL.str = "release"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1167
		{
			yyVAL.str = "rename"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1168
		{
			yyVAL.str = "repeatable"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1169
		{
			yyVAL.str = "replace"
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1170
		{
			yyVAL.str = "replica"
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1171
		{
			yyVAL.str = "reset"
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1172
		{
			yyVAL.str = "restart"
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1173
		{
			yyVAL.str = "restrict"
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1174
		{
			yyVAL.str = "return"
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1175
		{
			yyVAL.str = "returns"
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1176
		{
			yyVAL.str = "revoke"
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1177
		{
			yyVAL.str = "role"
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1178
		{
			yyVAL.str = "rollback"
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1179
		{
			yyVAL.str = "rollup"
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1180
		{
			yyVAL.str = "routine"
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1181
		{
			yyVAL.str = "routines"
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1182
		{
			yyVAL.str = "rows"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1183
		{
			yyVAL.str = "rule"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1184
		{
			yyVAL.str = "savepoint"
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1185
		{
			yyVAL.str = "scalar"
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1186
		{
			yyVAL.str = "schema"
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1187
		{
			yyVAL.str = "schemas"
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1188
		{
			yyVAL.str = "scroll"
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1189
		{
			yyVAL.str = "search"
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1190
		{
			yyVAL.str = "second"
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1191
		{
			yyVAL.str = "security"
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1192
		{
			yyVAL.str = "sequence"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1193
		{
			yyVAL.str = "sequences"
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1194
		{
			yyVAL.str = "serializable"
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1195
		{
			yyVAL.str = "server"
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1196
		{
			yyVAL.str = "session"
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1197
		{
			yyVAL.str = "set"
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1198
		{
			yyVAL.str = "sets"
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1199
		{
			yyVAL.str = "share"
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1200
		{
			yyVAL.str = "show"
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1201
		{
			yyVAL.str = "simple"
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1202
		{
			yyVAL.str = "skip"
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1203
		{
			yyVAL.str = "snapshot"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1204
		{
			yyVAL.str = "source"
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1205
		{
			yyVAL.str = "sql"
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1206
		{
			yyVAL.str = "stable"
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1207
		{
			yyVAL.str = "standalone"
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1208
		{
			yyVAL.str = "start"
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1209
		{
			yyVAL.str = "statement"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1210
		{
			yyVAL.str = "statistics"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1211
		{
			yyVAL.str = "stdin"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1212
		{
			yyVAL.str = "stdout"
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1213
		{
			yyVAL.str = "storage"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1214
		{
			yyVAL.str = "stored"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1215
		{
			yyVAL.str = "strict"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1216
		{
			yyVAL.str = "string"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1217
		{
			yyVAL.str = "strip"
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1218
		{
			yyVAL.str = "subscription"
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1219
		{
			yyVAL.str = "support"
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1220
		{
			yyVAL.str = "sysid"
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1221
		{
			yyVAL.str = "system"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1222
		{
			yyVAL.str = "tables"
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1223
		{
			yyVAL.str = "tablespace"
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1224
		{
			yyVAL.str = "target"
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1225
		{
			yyVAL.str = "temp"
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1226
		{
			yyVAL.str = "template"
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1227
		{
			yyVAL.str = "temporary"
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1228
		{
			yyVAL.str = "text"
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1229
		{
			yyVAL.str = "ties"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1230
		{
			yyVAL.str = "transaction"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1231
		{
			yyVAL.str = "transform"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1232
		{
			yyVAL.str = "trigger"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1233
		{
			yyVAL.str = "truncate"
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1234
		{
			yyVAL.str = "trusted"
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1235
		{
			yyVAL.str = "type"
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1236
		{
			yyVAL.str = "types"
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1237
		{
			yyVAL.str = "uescape"
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1238
		{
			yyVAL.str = "unbounded"
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1239
		{
			yyVAL.str = "uncommitted"
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1240
		{
			yyVAL.str = "unconditional"
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1241
		{
			yyVAL.str = "unencrypted"
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1242
		{
			yyVAL.str = "unknown"
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1243
		{
			yyVAL.str = "unlisten"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1244
		{
			yyVAL.str = "unlogged"
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1245
		{
			yyVAL.str = "until"
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1246
		{
			yyVAL.str = "update"
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1247
		{
			yyVAL.str = "vacuum"
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1248
		{
			yyVAL.str = "valid"
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1249
		{
			yyVAL.str = "validate"
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1250
		{
			yyVAL.str = "validator"
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1251
		{
			yyVAL.str = "value"
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1252
		{
			yyVAL.str = "varying"
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1253
		{
			yyVAL.str = "version"
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1254
		{
			yyVAL.str = "view"
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1255
		{
			yyVAL.str = "views"
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1256
		{
			yyVAL.str = "volatile"
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1257
		{
			yyVAL.str = "whitespace"
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1258
		{
			yyVAL.str = "within"
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1259
		{
			yyVAL.str = "without"
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1260
		{
			yyVAL.str = "work"
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1261
		{
			yyVAL.str = "wrapper"
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1262
		{
			yyVAL.str = "write"
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1263
		{
			yyVAL.str = "xml"
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1264
		{
			yyVAL.str = "year"
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1265
		{
			yyVAL.str = "yes"
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1266
		{
			yyVAL.str = "zone"
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1280
		{
			yyVAL.str = "between"
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1281
		{
			yyVAL.str = "bigint"
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1282
		{
			yyVAL.str = "bit"
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1283
		{
			yyVAL.str = "boolean"
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1284
		{
			yyVAL.str = "char"
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1285
		{
			yyVAL.str = "character"
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1286
		{
			yyVAL.str = "coalesce"
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1287
		{
			yyVAL.str = "dec"
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1288
		{
			yyVAL.str = "decimal"
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1289
		{
			yyVAL.str = "exists"
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1290
		{
			yyVAL.str = "extract"
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1291
		{
			yyVAL.str = "float"
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1292
		{
			yyVAL.str = "greatest"
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1293
		{
			yyVAL.str = "grouping"
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1294
		{
			yyVAL.str = "inout"
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1295
		{
			yyVAL.str = "int"
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1296
		{
			yyVAL.str = "integer"
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1297
		{
			yyVAL.str = "interval"
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1298
		{
			yyVAL.str = "json"
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1299
		{
			yyVAL.str = "json_array"
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1300
		{
			yyVAL.str = "json_arrayagg"
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1301
		{
			yyVAL.str = "json_exists"
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1302
		{
			yyVAL.str = "json_object"
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1303
		{
			yyVAL.str = "json_objectagg"
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1304
		{
			yyVAL.str = "json_query"
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1305
		{
			yyVAL.str = "json_scalar"
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1306
		{
			yyVAL.str = "json_serialize"
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1307
		{
			yyVAL.str = "json_table"
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1308
		{
			yyVAL.str = "json_value"
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1309
		{
			yyVAL.str = "least"
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1310
		{
			yyVAL.str = "merge_action"
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1311
		{
			yyVAL.str = "national"
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1312
		{
			yyVAL.str = "nchar"
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1313
		{
			yyVAL.str = "none"
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1314
		{
			yyVAL.str = "normalize"
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1315
		{
			yyVAL.str = "nullif"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1316
		{
			yyVAL.str = "numeric"
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1317
		{
			yyVAL.str = "out"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1318
		{
			yyVAL.str = "overlay"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1319
		{
			yyVAL.str = "position"
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1320
		{
			yyVAL.str = "precision"
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1321
		{
			yyVAL.str = "real"
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1322
		{
			yyVAL.str = "row"
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1323
		{
			yyVAL.str = "setof"
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1324
		{
			yyVAL.str = "smallint"
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1325
		{
			yyVAL.str = "substring"
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1326
		{
			yyVAL.str = "time"
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1327
		{
			yyVAL.str = "timestamp"
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1328
		{
			yyVAL.str = "treat"
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1329
		{
			yyVAL.str = "trim"
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1330
		{
			yyVAL.str = "values"
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1331
		{
			yyVAL.str = "varchar"
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1332
		{
			yyVAL.str = "xmlattributes"
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1333
		{
			yyVAL.str = "xmlconcat"
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1334
		{
			yyVAL.str = "xmlelement"
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1335
		{
			yyVAL.str = "xmlexists"
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1336
		{
			yyVAL.str = "xmlforest"
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1337
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1338
		{
			yyVAL.str = "xmlparse"
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1339
		{
			yyVAL.str = "xmlpi"
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1340
		{
			yyVAL.str = "xmlroot"
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1341
		{
			yyVAL.str = "xmlserialize"
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1342
		{
			yyVAL.str = "xmltable"
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1356
		{
			yyVAL.str = "authorization"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1357
		{
			yyVAL.str = "binary"
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1358
		{
			yyVAL.str = "collation"
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1359
		{
			yyVAL.str = "concurrently"
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1360
		{
			yyVAL.str = "cross"
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1361
		{
			yyVAL.str = "current_schema"
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1362
		{
			yyVAL.str = "freeze"
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1363
		{
			yyVAL.str = "full"
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1364
		{
			yyVAL.str = "ilike"
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1365
		{
			yyVAL.str = "inner"
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1366
		{
			yyVAL.str = "is"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1367
		{
			yyVAL.str = "isnull"
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1368
		{
			yyVAL.str = "join"
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1369
		{
			yyVAL.str = "left"
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1370
		{
			yyVAL.str = "like"
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1371
		{
			yyVAL.str = "natural"
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1372
		{
			yyVAL.str = "notnull"
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1373
		{
			yyVAL.str = "outer"
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1374
		{
			yyVAL.str = "overlaps"
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1375
		{
			yyVAL.str = "right"
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1376
		{
			yyVAL.str = "similar"
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1377
		{
			yyVAL.str = "tablesample"
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1378
		{
			yyVAL.str = "verbose"
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1388
		{
			yyVAL.str = "all"
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1389
		{
			yyVAL.str = "analyse"
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1390
		{
			yyVAL.str = "analyze"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1391
		{
			yyVAL.str = "and"
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1392
		{
			yyVAL.str = "any"
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1393
		{
			yyVAL.str = "array"
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1394
		{
			yyVAL.str = "as"
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1395
		{
			yyVAL.str = "asc"
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1396
		{
			yyVAL.str = "asymmetric"
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1397
		{
			yyVAL.str = "both"
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1398
		{
			yyVAL.str = "case"
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1399
		{
			yyVAL.str = "cast"
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1400
		{
			yyVAL.str = "check"
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1401
		{
			yyVAL.str = "collate"
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1402
		{
			yyVAL.str = "column"
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1403
		{
			yyVAL.str = "constraint"
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1404
		{
			yyVAL.str = "create"
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1405
		{
			yyVAL.str = "current_catalog"
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1406
		{
			yyVAL.str = "current_date"
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1407
		{
			yyVAL.str = "current_role"
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1408
		{
			yyVAL.str = "current_time"
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1409
		{
			yyVAL.str = "current_timestamp"
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1410
		{
			yyVAL.str = "current_user"
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1411
		{
			yyVAL.str = "default"
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1412
		{
			yyVAL.str = "deferrable"
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1413
		{
			yyVAL.str = "desc"
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1414
		{
			yyVAL.str = "distinct"
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1415
		{
			yyVAL.str = "do"
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1416
		{
			yyVAL.str = "else"
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1417
		{
			yyVAL.str = "end"
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1418
		{
			yyVAL.str = "except"
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1419
		{
			yyVAL.str = "false"
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1420
		{
			yyVAL.str = "fetch"
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1421
		{
			yyVAL.str = "for"
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1422
		{
			yyVAL.str = "foreign"
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1423
		{
			yyVAL.str = "from"
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1424
		{
			yyVAL.str = "grant"
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1425
		{
			yyVAL.str = "group"
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1426
		{
			yyVAL.str = "having"
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1427
		{
			yyVAL.str = "in"
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1428
		{
			yyVAL.str = "initially"
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1429
		{
			yyVAL.str = "intersect"
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1430
		{
			yyVAL.str = "into"
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1431
		{
			yyVAL.str = "lateral"
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1432
		{
			yyVAL.str = "leading"
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1433
		{
			yyVAL.str = "limit"
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1434
		{
			yyVAL.str = "localtime"
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1435
		{
			yyVAL.str = "localtimestamp"
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1436
		{
			yyVAL.str = "not"
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1437
		{
			yyVAL.str = "null"
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1438
		{
			yyVAL.str = "offset"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1439
		{
			yyVAL.str = "on"
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1440
		{
			yyVAL.str = "only"
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1441
		{
			yyVAL.str = "or"
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1442
		{
			yyVAL.str = "order"
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1443
		{
			yyVAL.str = "placing"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1444
		{
			yyVAL.str = "primary"
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1445
		{
			yyVAL.str = "references"
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1446
		{
			yyVAL.str = "returning"
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1447
		{
			yyVAL.str = "select"
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1448
		{
			yyVAL.str = "session_user"
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1449
		{
			yyVAL.str = "some"
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1450
		{
			yyVAL.str = "symmetric"
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1451
		{
			yyVAL.str = "system_user"
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1452
		{
			yyVAL.str = "table"
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1453
		{
			yyVAL.str = "then"
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1454
		{
			yyVAL.str = "to"
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1455
		{
			yyVAL.str = "trailing"
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1456
		{
			yyVAL.str = "true"
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1457
		{
			yyVAL.str = "union"
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1458
		{
			yyVAL.str = "unique"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1459
		{
			yyVAL.str = "user"
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1460
		{
			yyVAL.str = "using"
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1461
		{
			yyVAL.str = "variadic"
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1462
		{
			yyVAL.str = "when"
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1463
		{
			yyVAL.str = "where"
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1464
		{
			yyVAL.str = "window"
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1465
		{
			yyVAL.str = "with"
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1478
		{
			yyVAL.str = "abort"
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1479
		{
			yyVAL.str = "absent"
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1480
		{
			yyVAL.str = "absolute"
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1481
		{
			yyVAL.str = "access"
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1482
		{
			yyVAL.str = "action"
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1483
		{
			yyVAL.str = "add"
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1484
		{
			yyVAL.str = "admin"
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1485
		{
			yyVAL.str = "after"
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1486
		{
			yyVAL.str = "aggregate"
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1487
		{
			yyVAL.str = "all"
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1488
		{
			yyVAL.str = "also"
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1489
		{
			yyVAL.str = "alter"
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1490
		{
			yyVAL.str = "always"
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1491
		{
			yyVAL.str = "analyse"
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1492
		{
			yyVAL.str = "analyze"
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1493
		{
			yyVAL.str = "and"
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1494
		{
			yyVAL.str = "any"
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1495
		{
			yyVAL.str = "asc"
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1496
		{
			yyVAL.str = "asensitive"
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1497
		{
			yyVAL.str = "assertion"
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1498
		{
			yyVAL.str = "assignment"
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1499
		{
			yyVAL.str = "asymmetric"
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1500
		{
			yyVAL.str = "at"
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1501
		{
			yyVAL.str = "atomic"
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1502
		{
			yyVAL.str = "attach"
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1503
		{
			yyVAL.str = "attribute"
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1504
		{
			yyVAL.str = "authorization"
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1505
		{
			yyVAL.str = "backward"
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1506
		{
			yyVAL.str = "before"
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1507
		{
			yyVAL.str = "begin"
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1508
		{
			yyVAL.str = "between"
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1509
		{
			yyVAL.str = "bigint"
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1510
		{
			yyVAL.str = "binary"
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1511
		{
			yyVAL.str = "bit"
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1512
		{
			yyVAL.str = "boolean"
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1513
		{
			yyVAL.str = "both"
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1514
		{
			yyVAL.str = "breadth"
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1515
		{
			yyVAL.str = "by"
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1516
		{
			yyVAL.str = "cache"
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1517
		{
			yyVAL.str = "call"
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1518
		{
			yyVAL.str = "called"
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1519
		{
			yyVAL.str = "cascade"
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1520
		{
			yyVAL.str = "cascaded"
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1521
		{
			yyVAL.str = "case"
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1522
		{
			yyVAL.str = "cast"
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1523
		{
			yyVAL.str = "catalog"
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1524
		{
			yyVAL.str = "chain"
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1525
		{
			yyVAL.str = "characteristics"
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1526
		{
			yyVAL.str = "check"
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1527
		{
			yyVAL.str = "checkpoint"
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1528
		{
			yyVAL.str = "class"
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1529
		{
			yyVAL.str = "close"
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1530
		{
			yyVAL.str = "cluster"
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1531
		{
			yyVAL.str = "coalesce"
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1532
		{
			yyVAL.str = "collate"
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1533
		{
			yyVAL.str = "collation"
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1534
		{
			yyVAL.str = "column"
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1535
		{
			yyVAL.str = "columns"
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1536
		{
			yyVAL.str = "comment"
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1537
		{
			yyVAL.str = "comments"
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1538
		{
			yyVAL.str = "commit"
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1539
		{
			yyVAL.str = "committed"
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1540
		{
			yyVAL.str = "compression"
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1541
		{
			yyVAL.str = "concurrently"
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1542
		{
			yyVAL.str = "conditional"
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1543
		{
			yyVAL.str = "configuration"
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1544
		{
			yyVAL.str = "conflict"
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1545
		{
			yyVAL.str = "connection"
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1546
		{
			yyVAL.str = "constraint"
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1547
		{
			yyVAL.str = "constraints"
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1548
		{
			yyVAL.str = "content"
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1549
		{
			yyVAL.str = "continue"
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1550
		{
			yyVAL.str = "conversion"
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1551
		{
			yyVAL.str = "copy"
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1552
		{
			yyVAL.str = "cost"
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1553
		{
			yyVAL.str = "cross"
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1554
		{
			yyVAL.str = "csv"
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1555
		{
			yyVAL.str = "cube"
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1556
		{
			yyVAL.str = "current"
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1557
		{
			yyVAL.str = "current_catalog"
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1558
		{
			yyVAL.str = "current_date"
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1559
		{
			yyVAL.str = "current_role"
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1560
		{
			yyVAL.str = "current_schema"
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1561
		{
			yyVAL.str = "current_time"
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1562
		{
			yyVAL.str = "current_timestamp"
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1563
		{
			yyVAL.str = "current_user"
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1564
		{
			yyVAL.str = "cursor"
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1565
		{
			yyVAL.str = "cycle"
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1566
		{
			yyVAL.str = "data"
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1567
		{
			yyVAL.str = "database"
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1568
		{
			yyVAL.str = "deallocate"
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1569
		{
			yyVAL.str = "dec"
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1570
		{
			yyVAL.str = "decimal"
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1571
		{
			yyVAL.str = "declare"
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1572
		{
			yyVAL.str = "default"
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1573
		{
			yyVAL.str = "defaults"
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1574
		{
			yyVAL.str = "deferrable"
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1575
		{
			yyVAL.str = "deferred"
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1576
		{
			yyVAL.str = "definer"
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1577
		{
			yyVAL.str = "delete"
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1578
		{
			yyVAL.str = "delimiter"
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1579
		{
			yyVAL.str = "delimiters"
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1580
		{
			yyVAL.str = "depends"
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1581
		{
			yyVAL.str = "depth"
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1582
		{
			yyVAL.str = "desc"
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1583
		{
			yyVAL.str = "detach"
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1584
		{
			yyVAL.str = "dictionary"
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1585
		{
			yyVAL.str = "disable"
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1586
		{
			yyVAL.str = "discard"
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1587
		{
			yyVAL.str = "distinct"
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1588
		{
			yyVAL.str = "do"
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1589
		{
			yyVAL.str = "document"
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1590
		{
			yyVAL.str = "domain"
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1591
		{
			yyVAL.str = "double"
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1592
		{
			yyVAL.str = "drop"
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1593
		{
			yyVAL.str = "each"
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1594
		{
			yyVAL.str = "else"
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1595
		{
			yyVAL.str = "empty"
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1596
		{
			yyVAL.str = "enable"
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1597
		{
			yyVAL.str = "encoding"
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1598
		{
			yyVAL.str = "encrypted"
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1599
		{
			yyVAL.str = "end"
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1600
		{
			yyVAL.str = "enum"
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1601
		{
			yyVAL.str = "error"
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1602
		{
			yyVAL.str = "escape"
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1603
		{
			yyVAL.str = "event"
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1604
		{
			yyVAL.str = "exclude"
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1605
		{
			yyVAL.str = "excluding"
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1606
		{
			yyVAL.str = "exclusive"
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1607
		{
			yyVAL.str = "execute"
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1608
		{
			yyVAL.str = "exists"
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1609
		{
			yyVAL.str = "explain"
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1610
		{
			yyVAL.str = "expression"
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1611
		{
			yyVAL.str = "extension"
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1612
		{
			yyVAL.str = "external"
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1613
		{
			yyVAL.str = "extract"
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1614
		{
			yyVAL.str = "false"
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1615
		{
			yyVAL.str = "family"
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1616
		{
			yyVAL.str = "finalize"
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1617
		{
			yyVAL.str = "first"
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1618
		{
			yyVAL.str = "float"
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1619
		{
			yyVAL.str = "following"
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1620
		{
			yyVAL.str = "force"
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1621
		{
			yyVAL.str = "foreign"
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1622
		{
			yyVAL.str = "format"
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1623
		{
			yyVAL.str = "forward"
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1624
		{
			yyVAL.str = "freeze"
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1625
		{
			yyVAL.str = "full"
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1626
		{
			yyVAL.str = "function"
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1627
		{
			yyVAL.str = "functions"
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1628
		{
			yyVAL.str = "generated"
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1629
		{
			yyVAL.str = "global"
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1630
		{
			yyVAL.str = "granted"
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1631
		{
			yyVAL.str = "greatest"
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1632
		{
			yyVAL.str = "grouping"
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1633
		{
			yyVAL.str = "groups"
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1634
		{
			yyVAL.str = "handler"
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1635
		{
			yyVAL.str = "header"
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1636
		{
			yyVAL.str = "hold"
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1637
		{
			yyVAL.str = "identity"
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1638
		{
			yyVAL.str = "if"
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1639
		{
			yyVAL.str = "ilike"
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1640
		{
			yyVAL.str = "immediate"
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1641
		{
			yyVAL.str = "immutable"
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1642
		{
			yyVAL.str = "implicit"
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1643
		{
			yyVAL.str = "import"
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1644
		{
			yyVAL.str = "in"
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1645
		{
			yyVAL.str = "include"
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1646
		{
			yyVAL.str = "including"
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1647
		{
			yyVAL.str = "increment"
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1648
		{
			yyVAL.str = "indent"
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1649
		{
			yyVAL.str = "index"
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1650
		{
			yyVAL.str = "indexes"
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1651
		{
			yyVAL.str = "inherit"
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1652
		{
			yyVAL.str = "inherits"
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1653
		{
			yyVAL.str = "initially"
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1654
		{
			yyVAL.str = "inline"
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1655
		{
			yyVAL.str = "inner"
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1656
		{
			yyVAL.str = "inout"
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1657
		{
			yyVAL.str = "input"
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1658
		{
			yyVAL.str = "insensitive"
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1659
		{
			yyVAL.str = "insert"
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1660
		{
			yyVAL.str = "instead"
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1661
		{
			yyVAL.str = "int"
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1662
		{
			yyVAL.str = "integer"
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1663
		{
			yyVAL.str = "interval"
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1664
		{
			yyVAL.str = "invoker"
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1665
		{
			yyVAL.str = "is"
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1666
		{
			yyVAL.str = "isolation"
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1667
		{
			yyVAL.str = "join"
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1668
		{
			yyVAL.str = "json"
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1669
		{
			yyVAL.str = "json_array"
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1670
		{
			yyVAL.str = "json_arrayagg"
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1671
		{
			yyVAL.str = "json_exists"
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1672
		{
			yyVAL.str = "json_object"
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1673
		{
			yyVAL.str = "json_objectagg"
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1674
		{
			yyVAL.str = "json_query"
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1675
		{
			yyVAL.str = "json_scalar"
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1676
		{
			yyVAL.str = "json_serialize"
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1677
		{
			yyVAL.str = "json_table"
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1678
		{
			yyVAL.str = "json_value"
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1679
		{
			yyVAL.str = "keep"
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1680
		{
			yyVAL.str = "key"
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1681
		{
			yyVAL.str = "keys"
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1682
		{
			yyVAL.str = "label"
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1683
		{
			yyVAL.str = "language"
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1684
		{
			yyVAL.str = "large"
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1685
		{
			yyVAL.str = "last"
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1686
		{
			yyVAL.str = "lateral"
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1687
		{
			yyVAL.str = "leading"
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1688
		{
			yyVAL.str = "leakproof"
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1689
		{
			yyVAL.str = "least"
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1690
		{
			yyVAL.str = "left"
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1691
		{
			yyVAL.str = "level"
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1692
		{
			yyVAL.str = "like"
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1693
		{
			yyVAL.str = "listen"
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1694
		{
			yyVAL.str = "load"
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1695
		{
			yyVAL.str = "local"
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1696
		{
			yyVAL.str = "localtime"
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1697
		{
			yyVAL.str = "localtimestamp"
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1698
		{
			yyVAL.str = "location"
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1699
		{
			yyVAL.str = "lock"
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1700
		{
			yyVAL.str = "locked"
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1701
		{
			yyVAL.str = "logged"
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1702
		{
			yyVAL.str = "mapping"
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1703
		{
			yyVAL.str = "match"
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1704
		{
			yyVAL.str = "matched"
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1705
		{
			yyVAL.str = "materialized"
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1706
		{
			yyVAL.str = "maxvalue"
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1707
		{
			yyVAL.str = "merge"
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1708
		{
			yyVAL.str = "merge_action"
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1709
		{
			yyVAL.str = "method"
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1710
		{
			yyVAL.str = "minvalue"
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1711
		{
			yyVAL.str = "mode"
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1712
		{
			yyVAL.str = "move"
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1713
		{
			yyVAL.str = "name"
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1714
		{
			yyVAL.str = "names"
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1715
		{
			yyVAL.str = "national"
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1716
		{
			yyVAL.str = "natural"
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1717
		{
			yyVAL.str = "nchar"
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1718
		{
			yyVAL.str = "nested"
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1719
		{
			yyVAL.str = "new"
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1720
		{
			yyVAL.str = "next"
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1721
		{
			yyVAL.str = "nfc"
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1722
		{
			yyVAL.str = "nfd"
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1723
		{
			yyVAL.str = "nfkc"
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1724
		{
			yyVAL.str = "nfkd"
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1725
		{
			yyVAL.str = "no"
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1726
		{
			yyVAL.str = "none"
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1727
		{
			yyVAL.str = "normalize"
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1728
		{
			yyVAL.str = "normalized"
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1729
		{
			yyVAL.str = "not"
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1730
		{
			yyVAL.str = "nothing"
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1731
		{
			yyVAL.str = "notify"
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1732
		{
			yyVAL.str = "nowait"
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1733
		{
			yyVAL.str = "null"
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1734
		{
			yyVAL.str = "nullif"
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1735
		{
			yyVAL.str = "nulls"
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1736
		{
			yyVAL.str = "numeric"
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1737
		{
			yyVAL.str = "object"
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1738
		{
			yyVAL.str = "of"
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1739
		{
			yyVAL.str = "off"
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1740
		{
			yyVAL.str = "oids"
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1741
		{
			yyVAL.str = "old"
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1742
		{
			yyVAL.str = "omit"
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1743
		{
			yyVAL.str = "only"
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1744
		{
			yyVAL.str = "operator"
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1745
		{
			yyVAL.str = "option"
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1746
		{
			yyVAL.str = "options"
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1747
		{
			yyVAL.str = "or"
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1748
		{
			yyVAL.str = "ordinality"
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1749
		{
			yyVAL.str = "others"
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1750
		{
			yyVAL.str = "out"
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1751
		{
			yyVAL.str = "outer"
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1752
		{
			yyVAL.str = "overlay"
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1753
		{
			yyVAL.str = "overriding"
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1754
		{
			yyVAL.str = "owned"
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1755
		{
			yyVAL.str = "owner"
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1756
		{
			yyVAL.str = "parallel"
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1757
		{
			yyVAL.str = "parameter"
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1758
		{
			yyVAL.str = "parser"
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1759
		{
			yyVAL.str = "partial"
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1760
		{
			yyVAL.str = "partition"
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1761
		{
			yyVAL.str = "passing"
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1762
		{
			yyVAL.str = "password"
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1763
		{
			yyVAL.str = "path"
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1764
		{
			yyVAL.str = "placing"
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1765
		{
			yyVAL.str = "plan"
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1766
		{
			yyVAL.str = "plans"
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1767
		{
			yyVAL.str = "policy"
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1768
		{
			yyVAL.str = "position"
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1769
		{
			yyVAL.str = "preceding"
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1770
		{
			yyVAL.str = "prepare"
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1771
		{
			yyVAL.str = "prepared"
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1772
		{
			yyVAL.str = "preserve"
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1773
		{
			yyVAL.str = "primary"
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1774
		{
			yyVAL.str = "prior"
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1775
		{
			yyVAL.str = "privileges"
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1776
		{
			yyVAL.str = "procedural"
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1777
		{
			yyVAL.str = "procedure"
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1778
		{
			yyVAL.str = "procedures"
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1779
		{
			yyVAL.str = "program"
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1780
		{
			yyVAL.str = "publication"
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1781
		{
			yyVAL.str = "quote"
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1782
		{
			yyVAL.str = "quotes"
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1783
		{
			yyVAL.str = "range"
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1784
		{
			yyVAL.str = "read"
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1785
		{
			yyVAL.str = "real"
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1786
		{
			yyVAL.str = "reassign"
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1787
		{
			yyVAL.str = "recheck"
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1788
		{
			yyVAL.str = "recursive"
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1789
		{
			yyVAL.str = "ref"
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1790
		{
			yyVAL.str = "references"
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1791
		{
			yyVAL.str = "referencing"
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1792
		{
			yyVAL.str = "refresh"
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1793
		{
			yyVAL.str = "reindex"
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1794
		{
			yyVAL.str = "relative"
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1795
		{
			yyVAL.str = "release"
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1796
		{
			yyVAL.str = "rename"
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1797
		{
			yyVAL.str = "repeatable"
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1798
		{
			yyVAL.str = "replace"
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1799
		{
			yyVAL.str = "replica"
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1800
		{
			yyVAL.str = "reset"
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1801
		{
			yyVAL.str = "restart"
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1802
		{
			yyVAL.str = "restrict"
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1803
		{
			yyVAL.str = "return"
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1804
		{
			yyVAL.str = "returns"
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1805
		{
			yyVAL.str = "revoke"
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1806
		{
			yyVAL.str = "right"
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1807
		{
			yyVAL.str = "role"
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1808
		{
			yyVAL.str = "rollback"
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1809
		{
			yyVAL.str = "rollup"
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1810
		{
			yyVAL.str = "routine"
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1811
		{
			yyVAL.str = "routines"
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1812
		{
			yyVAL.str = "row"
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1813
		{
			yyVAL.str = "rows"
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1814
		{
			yyVAL.str = "rule"
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1815
		{
			yyVAL.str = "savepoint"
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1816
		{
			yyVAL.str = "scalar"
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1817
		{
			yyVAL.str = "schema"
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1818
		{
			yyVAL.str = "schemas"
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1819
		{
			yyVAL.str = "scroll"
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1820
		{
			yyVAL.str = "search"
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1821
		{
			yyVAL.str = "security"
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1822
		{
			yyVAL.str = "select"
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1823
		{
			yyVAL.str = "sequence"
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1824
		{
			yyVAL.str = "sequences"
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1825
		{
			yyVAL.str = "serializable"
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1826
		{
			yyVAL.str = "server"
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1827
		{
			yyVAL.str = "session"
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1828
		{
			yyVAL.str = "session_user"
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1829
		{
			yyVAL.str = "set"
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1830
		{
			yyVAL.str = "setof"
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1831
		{
			yyVAL.str = "sets"
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1832
		{
			yyVAL.str = "share"
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1833
		{
			yyVAL.str = "show"
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1834
		{
			yyVAL.str = "similar"
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1835
		{
			yyVAL.str = "simple"
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1836
		{
			yyVAL.str = "skip"
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1837
		{
			yyVAL.str = "smallint"
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1838
		{
			yyVAL.str = "snapshot"
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1839
		{
			yyVAL.str = "some"
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1840
		{
			yyVAL.str = "source"
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1841
		{
			yyVAL.str = "sql"
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1842
		{
			yyVAL.str = "stable"
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1843
		{
			yyVAL.str = "standalone"
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1844
		{
			yyVAL.str = "start"
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1845
		{
			yyVAL.str = "statement"
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1846
		{
			yyVAL.str = "statistics"
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1847
		{
			yyVAL.str = "stdin"
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1848
		{
			yyVAL.str = "stdout"
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1849
		{
			yyVAL.str = "storage"
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1850
		{
			yyVAL.str = "stored"
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1851
		{
			yyVAL.str = "strict"
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1852
		{
			yyVAL.str = "string"
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1853
		{
			yyVAL.str = "strip"
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1854
		{
			yyVAL.str = "subscription"
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1855
		{
			yyVAL.str = "substring"
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1856
		{
			yyVAL.str = "support"
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1857
		{
			yyVAL.str = "symmetric"
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1858
		{
			yyVAL.str = "sysid"
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1859
		{
			yyVAL.str = "system"
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1860
		{
			yyVAL.str = "system_user"
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1861
		{
			yyVAL.str = "table"
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1862
		{
			yyVAL.str = "tables"
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1863
		{
			yyVAL.str = "tablesample"
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1864
		{
			yyVAL.str = "tablespace"
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1865
		{
			yyVAL.str = "target"
		}
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1866
		{
			yyVAL.str = "temp"
		}
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1867
		{
			yyVAL.str = "template"
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1868
		{
			yyVAL.str = "temporary"
		}
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1869
		{
			yyVAL.str = "text"
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1870
		{
			yyVAL.str = "then"
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1871
		{
			yyVAL.str = "ties"
		}
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1872
		{
			yyVAL.str = "time"
		}
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1873
		{
			yyVAL.str = "timestamp"
		}
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1874
		{
			yyVAL.str = "trailing"
		}
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1875
		{
			yyVAL.str = "transaction"
		}
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1876
		{
			yyVAL.str = "transform"
		}
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1877
		{
			yyVAL.str = "treat"
		}
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1878
		{
			yyVAL.str = "trigger"
		}
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1879
		{
			yyVAL.str = "trim"
		}
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1880
		{
			yyVAL.str = "true"
		}
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1881
		{
			yyVAL.str = "truncate"
		}
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1882
		{
			yyVAL.str = "trusted"
		}
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1883
		{
			yyVAL.str = "type"
		}
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1884
		{
			yyVAL.str = "types"
		}
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1885
		{
			yyVAL.str = "uescape"
		}
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1886
		{
			yyVAL.str = "unbounded"
		}
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1887
		{
			yyVAL.str = "uncommitted"
		}
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1888
		{
			yyVAL.str = "unconditional"
		}
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1889
		{
			yyVAL.str = "unencrypted"
		}
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1890
		{
			yyVAL.str = "unique"
		}
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1891
		{
			yyVAL.str = "unknown"
		}
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1892
		{
			yyVAL.str = "unlisten"
		}
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1893
		{
			yyVAL.str = "unlogged"
		}
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1894
		{
			yyVAL.str = "until"
		}
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1895
		{
			yyVAL.str = "update"
		}
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1896
		{
			yyVAL.str = "user"
		}
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1897
		{
			yyVAL.str = "using"
		}
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1898
		{
			yyVAL.str = "vacuum"
		}
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1899
		{
			yyVAL.str = "valid"
		}
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1900
		{
			yyVAL.str = "validate"
		}
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1901
		{
			yyVAL.str = "validator"
		}
	case 1047:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1902
		{
			yyVAL.str = "value"
		}
	case 1048:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1903
		{
			yyVAL.str = "values"
		}
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1904
		{
			yyVAL.str = "varchar"
		}
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1905
		{
			yyVAL.str = "variadic"
		}
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1906
		{
			yyVAL.str = "verbose"
		}
	case 1052:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1907
		{
			yyVAL.str = "version"
		}
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1908
		{
			yyVAL.str = "view"
		}
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1909
		{
			yyVAL.str = "views"
		}
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1910
		{
			yyVAL.str = "volatile"
		}
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1911
		{
			yyVAL.str = "when"
		}
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1912
		{
			yyVAL.str = "whitespace"
		}
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1913
		{
			yyVAL.str = "work"
		}
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1914
		{
			yyVAL.str = "wrapper"
		}
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1915
		{
			yyVAL.str = "write"
		}
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1916
		{
			yyVAL.str = "xml"
		}
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1917
		{
			yyVAL.str = "xmlattributes"
		}
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1918
		{
			yyVAL.str = "xmlconcat"
		}
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1919
		{
			yyVAL.str = "xmlelement"
		}
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1920
		{
			yyVAL.str = "xmlexists"
		}
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1921
		{
			yyVAL.str = "xmlforest"
		}
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1922
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 1068:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1923
		{
			yyVAL.str = "xmlparse"
		}
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1924
		{
			yyVAL.str = "xmlpi"
		}
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1925
		{
			yyVAL.str = "xmlroot"
		}
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1926
		{
			yyVAL.str = "xmlserialize"
		}
	case 1072:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1927
		{
			yyVAL.str = "xmltable"
		}
	case 1073:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1928
		{
			yyVAL.str = "yes"
		}
	case 1074:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1929
		{
			yyVAL.str = "zone"
		}
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1944
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1076:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1946
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1077:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1950
		{
			collateClause := ast.NewCollateClause(yyDollar[3].list)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 1078:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1956
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[1].node), 0)
		}
	case 1079:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1961
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[1].node), 0)
		}
	case 1080:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1966
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1081:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1971
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1082:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1976
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1083:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1981
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1084:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1986
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1085:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1991
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1086:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1996
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1087:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2001
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1088:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2006
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1089:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2011
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1090:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2016
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1091:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2021
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1092:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2026
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1093:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2031
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1094:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2036
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1095:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2040
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1096:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2044
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1097:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2048
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1098:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2052
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1099:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2056
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2060
		{
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1101:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2065
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1102:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2072
		{
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1103:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2077
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2084
		{
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1105:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2089
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2096
		{
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1107:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2101
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2108
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1109:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2115
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1110:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2122
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1111:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2129
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2136
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2140
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2144
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2148
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2152
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlaps"))
			leftList := yyDollar[1].list
			rightList := yyDollar[3].list
			combinedList := ast.NewNodeList()
			combinedList.Items = append(leftList.Items, rightList.Items...)
			yyVAL.node = ast.NewFuncCall(funcName, combinedList, 0)
		}
	case 1117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2161
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_TRUE)
		}
	case 1118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2165
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_TRUE)
		}
	case 1119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2169
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_FALSE)
		}
	case 1120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2173
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_FALSE)
		}
	case 1121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2177
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_UNKNOWN)
		}
	case 1122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2181
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_UNKNOWN)
		}
	case 1123:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2185
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1124:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2190
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1125:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2195
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1126:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2200
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1127:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2205
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1128:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2210
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2215
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2220
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2225
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			sublink := ast.NewSubLink(subLinkType, yyDollar[4].stmt)
			sublink.Testexpr = yyDollar[1].node
			sublink.OperName = operName
			yyVAL.node = sublink
		}
	case 1132:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2234
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			if subLinkType == ast.ANY_SUBLINK {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ANY, operName, yyDollar[1].node, yyDollar[5].node, 0)
			} else {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ALL, operName, yyDollar[1].node, yyDollar[5].node, 0)
			}
		}
	case 1133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2244
		{
			yylex.Error("UNIQUE predicate is not yet implemented")
		}
	case 1134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2248
		{
			args := ast.NewNodeList(yyDollar[1].node.(ast.Expression))
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
		}
	case 1135:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2253
		{
			args := ast.NewNodeList(yyDollar[1].node.(ast.Expression))
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2259
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2265
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[3].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2272
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1139:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2279
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[4].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2287
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[3].ival)
			uniqueKeys := yyDollar[4].bval
			yyVAL.node = ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
		}
	case 1141:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2304
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[4].ival)
			uniqueKeys := yyDollar[5].bval
			jsonPredicate := ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(jsonPredicate))
		}
	case 1142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2323
		{
			yyVAL.node = ast.NewSetToDefault(0, 0, 0)
		}
	case 1143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2328
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2330
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2334
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2339
		{
			yyVAL.node = doNegate(yyDollar[2].node, 0)
		}
	case 1147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2343
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2348
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2353
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2358
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2363
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2368
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2373
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2378
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2383
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2388
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2393
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2398
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2403
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2407
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1161:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2411
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1162:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2416
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2421
		{
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2426
		{
			args := ast.NewNodeList(yyDollar[1].node)
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2433
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2434
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2436
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 1168:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2445
		{
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewParenExpr(ast.NewA_Indirection(yyDollar[2].node, yyDollar[4].list, 0), 0)
			} else {
				yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
			}
		}
	case 1169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2452
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2453
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2455
		{
			yyVAL.node = ast.NewExprSublink(yyDollar[1].stmt)
		}
	case 1172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2459
		{
			sublink := ast.NewExprSublink(yyDollar[1].stmt)
			yyVAL.node = ast.NewA_Indirection(sublink, yyDollar[2].list, 0)
		}
	case 1173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2464
		{
			yyVAL.node = ast.NewExistsSublink(yyDollar[2].stmt)
		}
	case 1174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2468
		{
			yyVAL.node = ast.NewArraySublink(yyDollar[2].stmt)
		}
	case 1175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2472
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2476
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = rowExpr
		}
	case 1177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2482
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_IMPLICIT_CAST
			yyVAL.node = rowExpr
		}
	case 1178:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2488
		{
			exprList := yyDollar[3].list
			grouping := &ast.GroupingFunc{
				BaseExpr: ast.BaseExpr{BaseNode: ast.BaseNode{Tag: ast.T_GroupingFunc}},
				Args:     exprList,
			}
			yyVAL.node = grouping
		}
	case 1179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2505
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2506
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2507
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2508
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2509
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2513
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 1185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2517
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 1186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2521
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 1187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2525
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 1188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2529
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 1189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2533
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 1190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2537
		{
			yyVAL.node = ast.NewA_Const(ast.NewBitString(yyDollar[1].str), 0)
		}
	case 1191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2541
		{
			// This is a bit constant per SQL99
			yyVAL.node = ast.NewA_Const(ast.NewBitString(yyDollar[1].str), 0)
		}
	case 1192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2546
		{
			// generic type 'literal' syntax
			typeName := makeTypeNameFromNodeList(yyDollar[1].list)
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, typeName, 0)
		}
	case 1193:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2553
		{
			// generic syntax with a type modifier
			typeName := makeTypeNameFromNodeList(yyDollar[1].list)
			// For now, we'll skip the error checking for NamedArgExpr and ORDER BY
			// TODO: Add proper validation when needed
			typeName.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[6].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, typeName, 0)
		}
	case 1194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2563
		{
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, yyDollar[1].typnam, 0)
		}
	case 1195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2568
		{
			t := yyDollar[1].typnam
			t.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 1196:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2575
		{
			t := yyDollar[1].typnam
			// INTERVAL_FULL_RANGE equivalent and precision
			fullRange := ast.NewInteger(ast.INTERVAL_FULL_RANGE)
			precision := ast.NewInteger(yyDollar[3].ival)
			t.Typmods = ast.NewNodeList(fullRange, precision)
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[5].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 1197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2586
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2589
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2592
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2593
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 1201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2594
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 1202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2598
		{
			yyVAL.typnam = makeTypeNameFromNodeList(ast.NewNodeList(ast.NewString("interval")))
		}
	case 1203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2605
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_YEAR))
		}
	case 1204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2607
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_MONTH))
		}
	case 1205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2609
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY))
		}
	case 1206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2611
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_HOUR))
		}
	case 1207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2613
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_MINUTE))
		}
	case 1208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2615
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2617
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_YEAR | ast.INTERVAL_MASK_MONTH))
		}
	case 1210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2621
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR))
		}
	case 1211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2625
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE))
		}
	case 1212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2629
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2640
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE))
		}
	case 1214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2644
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2655
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1216:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2666
		{
			yyVAL.list = nil
		}
	case 1217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2671
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_SECOND))
		}
	case 1218:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2675
		{
			yyVAL.list = ast.NewNodeList(
				ast.NewInteger(ast.INTERVAL_MASK_SECOND),
				ast.NewInteger(yyDollar[3].ival), // precision
			)
		}
	case 1219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2685
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 1220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2689
		{
			// Create all fields: first ColId followed by indirection items
			allFields := []ast.Node{ast.NewString(yyDollar[1].str)}
			allFields = append(allFields, yyDollar[2].list.Items...)
			yyVAL.node = ast.NewColumnRef(allFields...)
		}
	case 1221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2699
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2703
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2709
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1224:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2710
		{
			yyVAL.node = nil
		}
	case 1225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2714
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2718
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 1227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2722
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 1228:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2726
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 1229:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2731
		{
			yyVAL.list = nil
		}
	case 1230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2733
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2745
		{
			funcCall := yyDollar[1].node.(*ast.FuncCall)

			// Apply within_group_clause if present
			if yyDollar[2].list != nil {
				// WITHIN GROUP (ORDER BY ...) - store the sort list
				funcCall.AggOrder = yyDollar[2].list
				funcCall.AggWithinGroup = true
			}

			// Apply filter_clause if present
			if yyDollar[3].node != nil {
				// FILTER (WHERE condition) - store the filter expression
				funcCall.AggFilter = yyDollar[3].node
			}

			// Apply over_clause if present (window functions)
			if yyDollar[4].windef != nil {
				funcCall.Over = yyDollar[4].windef
			}

			yyVAL.node = funcCall
		}
	case 1232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2769
		{
			jsonAgg := yyDollar[1].node

			// Create or get the Constructor
			var constructor *ast.JsonAggConstructor

			// Handle the filter_clause and over_clause by setting them in the Constructor
			switch jsonFunc := jsonAgg.(type) {
			case *ast.JsonObjectAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			case *ast.JsonArrayAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			}

			// Set filter and over clauses outside the switch (DRY)
			if constructor != nil {
				if yyDollar[2].node != nil {
					constructor.AggFilter = yyDollar[2].node.(ast.Node)
				}
				if yyDollar[3].windef != nil {
					constructor.Over = yyDollar[3].windef
				}
			}

			yyVAL.node = jsonAgg
		}
	case 1233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2802
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1234:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2808
		{
			// SystemFuncName("pg_collation_for")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("pg_collation_for"))
			funcCall := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2816
		{
			// makeSQLValueFunction(SVFOP_CURRENT_DATE, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_DATE, 0, -1, 0)
		}
	case 1236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2821
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIME, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIME, 0, -1, 0)
		}
	case 1237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2826
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIME_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIME_N, 0, yyDollar[3].ival, 0)
		}
	case 1238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2831
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIMESTAMP, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIMESTAMP, 0, -1, 0)
		}
	case 1239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2836
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIMESTAMP_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIMESTAMP_N, 0, yyDollar[3].ival, 0)
		}
	case 1240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2841
		{
			// makeSQLValueFunction(SVFOP_LOCALTIME, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIME, 0, -1, 0)
		}
	case 1241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2846
		{
			// makeSQLValueFunction(SVFOP_LOCALTIME_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIME_N, 0, yyDollar[3].ival, 0)
		}
	case 1242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2851
		{
			// makeSQLValueFunction(SVFOP_LOCALTIMESTAMP, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIMESTAMP, 0, -1, 0)
		}
	case 1243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2856
		{
			// makeSQLValueFunction(SVFOP_LOCALTIMESTAMP_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIMESTAMP_N, 0, yyDollar[3].ival, 0)
		}
	case 1244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2861
		{
			// makeSQLValueFunction(SVFOP_CURRENT_ROLE, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_ROLE, 0, -1, 0)
		}
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2866
		{
			// makeSQLValueFunction(SVFOP_CURRENT_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_USER, 0, -1, 0)
		}
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2871
		{
			// makeSQLValueFunction(SVFOP_SESSION_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_SESSION_USER, 0, -1, 0)
		}
	case 1247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2876
		{
			// SystemFuncName("system_user")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("system_user"))
			funcCall := ast.NewFuncCall(funcName, nil, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2884
		{
			// makeSQLValueFunction(SVFOP_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_USER, 0, -1, 0)
		}
	case 1249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2889
		{
			// makeSQLValueFunction(SVFOP_CURRENT_CATALOG, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_CATALOG, 0, -1, 0)
		}
	case 1250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2894
		{
			// makeSQLValueFunction(SVFOP_CURRENT_SCHEMA, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_SCHEMA, 0, -1, 0)
		}
	case 1251:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2899
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[3].node, yyDollar[5].typnam, 0)
		}
	case 1252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2903
		{
			// SystemFuncName("extract")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("extract"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2911
		{
			// SystemFuncName("normalize")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("normalize"))
			funcCall := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node), 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1254:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2919
		{
			// SystemFuncName("normalize")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("normalize"))
			args := ast.NewNodeList(yyDollar[3].node)
			args.Items = append(args.Items, ast.NewA_Const(ast.NewString(yyDollar[5].str), -1))
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2929
		{
			// SystemFuncName("overlay")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlay"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2937
		{
			// SystemFuncName("overlay")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlay"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2945
		{
			// SystemFuncName("position")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("position"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2953
		{
			// SystemFuncName("substring")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("substring"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2961
		{
			// SystemFuncName("substring")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("substring"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1260:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2969
		{
			// SystemFuncName("treat")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), llast(yyDollar[5].typnam.Names))
			args := ast.NewNodeList(yyDollar[3].node)
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1261:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2978
		{
			// SystemFuncName("btrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("btrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1262:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2986
		{
			// SystemFuncName("ltrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("ltrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1263:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2994
		{
			// SystemFuncName("rtrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("rtrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3002
		{
			// SystemFuncName("btrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("btrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1265:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3010
		{
			// makeSimpleA_Expr(AEXPR_NULLIF, "=", $3, $5, @1)
			operName := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NULLIF, operName, yyDollar[3].node, yyDollar[5].node, 0)
		}
	case 1266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3016
		{
			// CoalesceExpr *c = makeNode(CoalesceExpr); c->args = $3; c->location = @1
			yyVAL.node = ast.NewCoalesceExpr(0, yyDollar[3].list)
		}
	case 1267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3021
		{
			// MinMaxExpr *v = makeNode(MinMaxExpr); v->args = $3; v->op = IS_GREATEST; v->location = @1
			yyVAL.node = ast.NewMinMaxExpr(0, 0, 0, ast.IS_GREATEST, yyDollar[3].list, 0)
		}
	case 1268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3026
		{
			// MinMaxExpr *v = makeNode(MinMaxExpr); v->args = $3; v->op = IS_LEAST; v->location = @1
			yyVAL.node = ast.NewMinMaxExpr(0, 0, 0, ast.IS_LEAST, yyDollar[3].list, 0)
		}
	case 1269:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3031
		{
			// makeXmlExpr(IS_XMLCONCAT, NULL, NIL, $3, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLCONCAT, "", nil, nil, yyDollar[3].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1270:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3036
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, NIL, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, nil, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1271:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3041
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, $6, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, yyDollar[6].list, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1272:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3046
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, NIL, $6, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, nil, nil, yyDollar[6].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1273:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3051
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, $6, $8, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, yyDollar[6].list, nil, yyDollar[8].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3056
		{
			// makeXmlExpr(IS_XMLFOREST, NULL, $3, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLFOREST, "", yyDollar[3].list, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1275:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3061
		{
			// makeXmlExpr(IS_XMLPARSE, NULL, NIL, list_make2($4, makeBoolAConst($5, -1)), @1)
			// x->xmloption = $3
			wsOption := ast.NewA_Const(ast.NewBoolean(yyDollar[5].bval), -1)
			args := ast.NewNodeList(yyDollar[4].node, wsOption)
			xmlOption := ast.XmlOptionType(yyDollar[3].ival)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPARSE, "", nil, nil, args, xmlOption, false, 0, -1, 0)
		}
	case 1276:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3070
		{
			// SystemFuncName("xmlexists") - xmlexists(A PASSING [BY REF] B [BY REF]) is converted to xmlexists(A, B)
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("xmlexists"))
			args := ast.NewNodeList(yyDollar[3].node, yyDollar[4].node)
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1277:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3079
		{
			// makeXmlExpr(IS_XMLPI, $4, NIL, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPI, yyDollar[4].str, nil, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1278:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3084
		{
			// makeXmlExpr(IS_XMLPI, $4, NIL, list_make1($6), @1)
			args := ast.NewNodeList(yyDollar[6].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPI, yyDollar[4].str, nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1279:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3090
		{
			// makeXmlExpr(IS_XMLROOT, NULL, NIL, list_make3(...), @1)
			args := ast.NewNodeList(yyDollar[3].node, yyDollar[5].node, yyDollar[6].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLROOT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3096
		{
			/* Support for legacy (non-standard) json_object() */
			funcName := ast.NewNodeList(ast.NewString("json_object"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1281:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3107
		{
			n := ast.NewJsonObjectConstructor(yyDollar[3].list, yyDollar[4].bval, yyDollar[5].bval)
			if yyDollar[6].node != nil {
				n.Output = yyDollar[6].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3115
		{
			n := ast.NewJsonObjectConstructor(nil, false, false)
			if yyDollar[3].node != nil {
				n.Output = yyDollar[3].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1283:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3127
		{
			n := ast.NewJsonArrayConstructor(yyDollar[3].list, yyDollar[4].bval)
			if yyDollar[5].node != nil {
				n.Output = yyDollar[5].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1284:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3139
		{
			n := ast.NewJsonArrayQueryConstructor(yyDollar[3].stmt, true) /* XXX: absent_on_null = true */
			if yyDollar[4].node != nil {
				n.Format = yyDollar[4].node.(*ast.JsonFormat)
			}
			if yyDollar[5].node != nil {
				n.Output = yyDollar[5].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3152
		{
			n := ast.NewJsonArrayConstructor(nil, true)
			if yyDollar[3].node != nil {
				n.Output = yyDollar[3].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1286:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3160
		{
			n := ast.NewJsonParseExpr(yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[4].bval)
			n.Output = nil
			yyVAL.node = n
		}
	case 1287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3166
		{
			n := ast.NewJsonScalarExpr(yyDollar[3].node.(ast.Expr))
			n.Output = nil
			yyVAL.node = n
		}
	case 1288:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3172
		{
			n := ast.NewJsonSerializeExpr(yyDollar[3].node.(*ast.JsonValueExpr))
			if yyDollar[4].node != nil {
				n.Output = yyDollar[4].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3180
		{
			m := ast.NewMergeSupportFunc(ast.TEXTOID, ast.InvalidOid, 0)
			yyVAL.node = m
		}
	case 1290:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:3191
		{
			n := ast.NewJsonFuncExpr(ast.JSON_QUERY_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			if yyDollar[7].node != nil {
				n.Output = yyDollar[7].node.(*ast.JsonOutput)
			}
			n.Wrapper = ast.JsonWrapper(yyDollar[8].ival)
			n.Quotes = ast.JsonQuotes(yyDollar[9].ival)
			if yyDollar[10].node != nil {
				behaviors := yyDollar[10].node.(*ast.NodeList)
				if linitial(behaviors) != nil {
					n.OnEmpty = linitial(behaviors).(*ast.JsonBehavior)
				}
				if lsecond(behaviors) != nil {
					n.OnError = lsecond(behaviors).(*ast.JsonBehavior)
				}
			}
			yyVAL.node = n
		}
	case 1291:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3216
		{
			n := ast.NewJsonFuncExpr(ast.JSON_EXISTS_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			n.Output = nil
			if yyDollar[7].node != nil {
				n.OnError = yyDollar[7].node.(*ast.JsonBehavior)
			}
			yyVAL.node = n
		}
	case 1292:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3232
		{
			n := ast.NewJsonFuncExpr(ast.JSON_VALUE_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			if yyDollar[7].node != nil {
				n.Output = yyDollar[7].node.(*ast.JsonOutput)
			}
			if yyDollar[8].node != nil {
				behaviors := yyDollar[8].node.(*ast.NodeList)
				if linitial(behaviors) != nil {
					n.OnEmpty = linitial(behaviors).(*ast.JsonBehavior)
				}
				if lsecond(behaviors) != nil {
					n.OnError = lsecond(behaviors).(*ast.JsonBehavior)
				}
			}
			yyVAL.node = n
		}
	case 1293:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3252
		{
			// XmlSerialize node - n->xmloption = $3; n->expr = $4; n->typeName = $6; n->indent = $7;
			xmlOption := ast.XmlOptionType(yyDollar[3].ival)
			yyVAL.node = ast.NewXmlSerialize(xmlOption, yyDollar[4].node, yyDollar[6].typnam, yyDollar[7].bval, 0)
		}
	case 1294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3262
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3266
		{
			yyVAL.list = nil
		}
	case 1296:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3273
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1297:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3277
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3281
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node)
		}
	case 1299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3285
		{
			sysTypeName := &ast.TypeName{
				Names:   ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("int4")),
				Typemod: -1,
			}
			tc := ast.NewTypeCast(yyDollar[3].node, sysTypeName, -1)
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, ast.NewInteger(1), tc)
		}
	case 1300:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3294
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3301
		{
			yyDollar[3].list.Append(yyDollar[1].node)
			yyVAL.list = yyDollar[3].list
		}
	case 1302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3306
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3310
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3317
		{
			// list_make2(makeStringConst($1, @1), $3)
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str), yyDollar[3].node)
		}
	case 1305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3327
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3328
		{
			yyVAL.str = "year"
		}
	case 1307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3329
		{
			yyVAL.str = "month"
		}
	case 1308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3330
		{
			yyVAL.str = "day"
		}
	case 1309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3331
		{
			yyVAL.str = "hour"
		}
	case 1310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3332
		{
			yyVAL.str = "minute"
		}
	case 1311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3333
		{
			yyVAL.str = "second"
		}
	case 1312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3334
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1313:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3339
		{
			/* overlay(A PLACING B FROM C FOR D) is converted to overlay(A, B, C, D) */
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 1314:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3344
		{
			/* overlay(A PLACING B FROM C) is converted to overlay(A, B, C) */
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3352
		{
			yyVAL.list = ast.NewNodeList(yyDollar[3].node, yyDollar[1].node)
		}
	case 1316:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3355
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3360
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3364
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3372
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3376
		{
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3381
		{
			yyVAL.bval = true
		}
	case 1322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3382
		{
			yyVAL.bval = false
		}
	case 1323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3383
		{
			yyVAL.bval = false
		}
	case 1324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3386
		{
			yyVAL.bval = true
		}
	case 1325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3387
		{
			yyVAL.bval = false
		}
	case 1326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3388
		{
			yyVAL.bval = false
		}
	case 1327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3393
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3397
		{
			yyVAL.node = ast.NewA_Const(ast.NewNull(), 0)
		}
	case 1329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3404
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_YES)), 0)
		}
	case 1330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3408
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_NO)), 0)
		}
	case 1331:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3412
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_NO_VALUE)), 0)
		}
	case 1332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3416
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_OMITTED)), 0)
		}
	case 1333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3423
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3424
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3425
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3429
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3433
		{
			// PostgreSQL uses check_func_name here
			// We implement the logic inline - prepend ColId to indirection list
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[2].list.Items...)
			result := ast.NewNodeList(items...)
			yyVAL.list = result
		}
	case 1338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3444
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].list, nil, 0)
		}
	case 1339:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3448
		{
			// Special case for aggregates like COUNT(*) - set AggStar to true
			funcCall := ast.NewFuncCall(yyDollar[1].list, nil, 0)
			funcCall.AggStar = true
			yyVAL.node = funcCall
		}
	case 1340:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3455
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[3].list, 0)
			// Note: In full implementation, would set agg_order from $4
			yyVAL.node = funcCall
		}
	case 1341:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3461
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, ast.NewNodeList(yyDollar[4].node), 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1342:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3467
		{
			yyDollar[3].list.Append(yyDollar[6].node)
			args := yyDollar[3].list
			funcCall := ast.NewFuncCall(yyDollar[1].list, args, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $7
			yyVAL.node = funcCall
		}
	case 1343:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3475
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would mark as aggregate and set agg_order from $5
			yyVAL.node = funcCall
		}
	case 1344:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3481
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would set agg_distinct = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3489
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3493
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3500
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3504
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3508
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1350:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3515
		{
			yyVAL.node = ast.NewCaseExpr(0, yyDollar[2].node, yyDollar[3].list, yyDollar[4].node)
		}
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3520
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3521
		{
			yyVAL.node = nil
		}
	case 1353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3525
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3527
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1355:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3535
		{
			yyVAL.node = ast.NewCaseWhen(yyDollar[2].node, yyDollar[4].node)
		}
	case 1356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3541
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1357:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3542
		{
			yyVAL.node = nil
		}
	case 1358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3547
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3551
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3555
		{
			yyVAL.node = ast.NewArrayConstructor(ast.NewNodeList())
		}
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3560
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3562
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1363:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3569
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3570
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1365:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3572
		{
			nodeList := yyDollar[2].list
			nodeList.Append(yyDollar[4].node)
			yyVAL.list = nodeList
		}
	case 1366:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3579
		{
			yyVAL.node = yyDollar[3].list
		}
	case 1367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3580
		{
			yyVAL.node = ast.NewNodeList()
		}
	case 1368:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3584
		{
			yyDollar[2].list.Append(yyDollar[4].node)
			yyVAL.node = yyDollar[2].list
		}
	case 1369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3590
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3591
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3592
		{
			yyVAL.ival = int(ast.ALL_SUBLINK)
		}
	case 1372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3597
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1373:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3601
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3605
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~"))
		}
	case 1375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3609
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~"))
		}
	case 1376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3613
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~*"))
		}
	case 1377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3617
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~*"))
		}
	case 1378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3623
		{
			yyVAL.str = "NFC"
		}
	case 1379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3624
		{
			yyVAL.str = "NFD"
		}
	case 1380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3625
		{
			yyVAL.str = "NFKC"
		}
	case 1381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3626
		{
			yyVAL.str = "NFKD"
		}
	case 1382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3630
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3631
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3632
		{
			yyVAL.ival = int(ast.JS_TYPE_ARRAY)
		}
	case 1385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3633
		{
			yyVAL.ival = int(ast.JS_TYPE_OBJECT)
		}
	case 1386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3634
		{
			yyVAL.ival = int(ast.JS_TYPE_SCALAR)
		}
	case 1387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3638
		{
			yyVAL.bval = true
		}
	case 1388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3639
		{
			yyVAL.bval = true
		}
	case 1389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3640
		{
			yyVAL.bval = false
		}
	case 1390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3641
		{
			yyVAL.bval = false
		}
	case 1391:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3642
		{
			yyVAL.bval = false
		}
	case 1392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3647
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3651
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3660
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3665
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3666
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3667
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3668
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3669
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3672
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3673
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3674
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3677
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3680
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3684
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[2].str))
		}
	case 1406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3688
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3695
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3699
		{
			yyVAL.list = nil
		}
	case 1409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3705
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3711
		{
			// Create qualified type name from name + attrs
			name := ast.NewString(yyDollar[1].str)
			names := &ast.NodeList{Items: append([]ast.Node{name}, yyDollar[2].list.Items...)}
			typeName := makeTypeNameFromNodeList(names)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3722
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3726
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3730
		{
			yyVAL.typnam = makeTypeNameFromString("int2")
		}
	case 1414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3734
		{
			yyVAL.typnam = makeTypeNameFromString("int8")
		}
	case 1415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3738
		{
			yyVAL.typnam = makeTypeNameFromString("float4")
		}
	case 1416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3742
		{
			yyVAL.typnam = yyDollar[2].typnam
		}
	case 1417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3746
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3750
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3755
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3760
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3765
		{
			yyVAL.typnam = makeTypeNameFromString("bool")
		}
	case 1422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3771
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3775
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3781
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3785
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3791
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3795
		{
			yyVAL.typnam = yyDollar[1].typnam
			// Set typmods to nil for BitWithoutLength in const context
			yyVAL.typnam.Typmods = nil
		}
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3803
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3807
		{
			yyVAL.typnam = yyDollar[1].typnam
			// Set typmods to nil for CharacterWithoutLength in const context
			yyVAL.typnam.Typmods = nil
		}
	case 1430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3815
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3823
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3831
		{
			yyVAL.str = "varchar"
		}
	case 1433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3835
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3843
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3851
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1436:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3861
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Set typmods with the length parameter, similar to PostgreSQL's approach
			lengthConst := ast.NewInteger(int(yyDollar[3].ival))
			typeName.Typmods = ast.NewNodeList()
			typeName.Typmods.Append(lengthConst)
			yyVAL.typnam = typeName
		}
	case 1437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3872
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// CHAR defaults to CHAR(1)
				lengthConst := ast.NewInteger(1)
				typeName.Typmods = ast.NewNodeList()
				typeName.Typmods.Append(lengthConst)
			}
			yyVAL.typnam = typeName
		}
	case 1438:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3886
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3898
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1440:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3910
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3920
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1442:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3930
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3940
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3952
		{
			yyVAL.typnam = makeTypeNameFromString("json")
		}
	case 1445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3957
		{
			yyVAL.ival = 1
		}
	case 1446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3958
		{
			yyVAL.ival = 0
		}
	case 1447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3959
		{
			yyVAL.ival = 0
		}
	case 1448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3962
		{
			yyVAL.ival = 1
		}
	case 1449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3963
		{
			yyVAL.ival = 0
		}
	case 1450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3967
		{
			if yyDollar[2].ival < 1 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else if yyDollar[2].ival <= 7 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else {
				yyVAL.typnam = makeTypeNameFromString("float8")
			}
		}
	case 1451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3977
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3984
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1453:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3988
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3995
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1455:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3999
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4004
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4005
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4008
		{
			yyVAL.str = "+"
		}
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4009
		{
			yyVAL.str = "-"
		}
	case 1460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4010
		{
			yyVAL.str = "*"
		}
	case 1461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4011
		{
			yyVAL.str = "/"
		}
	case 1462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4012
		{
			yyVAL.str = "%"
		}
	case 1463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4013
		{
			yyVAL.str = "^"
		}
	case 1464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4014
		{
			yyVAL.str = "<"
		}
	case 1465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4015
		{
			yyVAL.str = ">"
		}
	case 1466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4016
		{
			yyVAL.str = "="
		}
	case 1467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4017
		{
			yyVAL.str = "<="
		}
	case 1468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4018
		{
			yyVAL.str = ">="
		}
	case 1469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4019
		{
			yyVAL.str = "<>"
		}
	case 1470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4023
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4027
		{
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[3].list.Items...)
			yyVAL.list = ast.NewNodeList(items...)
		}
	case 1472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4036
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1473:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4037
		{
			yyVAL.list = nil
		}
	case 1474:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4042
		{
			// WITHIN GROUP (ORDER BY ...) for ordered-set aggregates
			yyVAL.list = yyDollar[4].list
		}
	case 1475:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4046
		{
			yyVAL.list = nil
		}
	case 1476:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4051
		{
			// FILTER (WHERE condition) for aggregate filtering
			yyVAL.node = yyDollar[4].node
		}
	case 1477:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4055
		{
			yyVAL.node = nil
		}
	case 1478:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4059
		{
			yyVAL.ival = 0
		}
	case 1479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4060
		{
			yyVAL.ival = 0
		}
	case 1480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4064
		{
			subLink := ast.NewSubLink(ast.ANY_SUBLINK, yyDollar[1].stmt.(*ast.SelectStmt))
			yyVAL.node = subLink
		}
	case 1481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4069
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4084
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4085
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4089
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4094
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4095
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4104
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4105
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4114
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4116
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			// Use NodeList directly for SortClause
			selectStmt.SortClause = yyDollar[2].list
			yyVAL.stmt = selectStmt
		}
	case 1491:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4123
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			selectStmt.LockingClause = yyDollar[3].list // Set the locking clause
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1492:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4135
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			if yyDollar[3].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[3].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[3].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[3].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4147
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			yyVAL.stmt = selectStmt
		}
	case 1494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4153
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			yyVAL.stmt = selectStmt
		}
	case 1495:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4160
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			if yyDollar[5].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[5].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[5].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[5].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1496:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4173
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[5].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4192
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4193
		{
			yyVAL.list = nil
		}
	case 1499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4197
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4198
		{
			yyVAL.list = nil
		}
	case 1501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4203
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4207
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4215
		{
			lockingClause := &ast.LockingClause{
				BaseNode:   ast.BaseNode{Tag: ast.T_LockingClause},
				Strength:   ast.LockClauseStrength(yyDollar[1].ival),
				LockedRels: yyDollar[2].list, // Store as *NodeList directly
				WaitPolicy: ast.LockWaitPolicy(yyDollar[3].ival),
			}
			yyVAL.node = lockingClause
		}
	case 1504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4227
		{
			yyVAL.ival = int(ast.LCS_FORUPDATE)
		}
	case 1505:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4228
		{
			yyVAL.ival = int(ast.LCS_FORNOKEYUPDATE)
		}
	case 1506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4229
		{
			yyVAL.ival = int(ast.LCS_FORSHARE)
		}
	case 1507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4230
		{
			yyVAL.ival = int(ast.LCS_FORKEYSHARE)
		}
	case 1508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4234
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4235
		{
			yyVAL.list = nil
		}
	case 1510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4240
		{
			yyVAL.ival = int(ast.LockWaitError)
		}
	case 1511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4241
		{
			yyVAL.ival = int(ast.LockWaitSkip)
		}
	case 1512:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4242
		{
			yyVAL.ival = int(ast.LockWaitBlock)
		}
	case 1513:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4253
		{
			selectStmt := ast.NewSelectStmt()
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1514:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4272
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].list
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4290
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = ast.NewNodeList(starTarget)
			selectStmt.FromClause = ast.NewNodeList(yyDollar[2].rangevar)
			yyVAL.stmt = selectStmt
		}
	case 1516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4300
		{
			// VALUES clause is a SelectStmt with ValuesLists
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1517:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4305
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_UNION, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4310
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_INTERSECT, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1519:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4315
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_EXCEPT, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4326
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1521:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4327
		{
			yyVAL.list = nil
		}
	case 1522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4331
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4332
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4337
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4341
		{
			// Implicit alias (no AS keyword)
			yyVAL.target = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 1526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4346
		{
			// No alias - use default naming
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4351
		{
			// SELECT * - all columns
			yyVAL.target = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 1528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4362
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4363
		{
			yyVAL.list = nil
		}
	case 1530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4367
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4368
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4377
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeVar
		}
	case 1533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4385
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			rangeTableSample := yyDollar[3].node.(*ast.RangeTableSample)
			rangeTableSample.Relation = rangeVar
			yyVAL.node = rangeTableSample
		}
	case 1534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4395
		{
			/* Subquery in FROM clause */
			subquery := yyDollar[1].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[2].alias != nil {
				alias = yyDollar[2].alias
			}
			rangeSubselect := ast.NewRangeSubselect(false, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4406
		{
			/* LATERAL subquery in FROM clause */
			subquery := yyDollar[2].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[3].alias != nil {
				alias = yyDollar[3].alias
			}
			rangeSubselect := ast.NewRangeSubselect(true, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4417
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1537:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4421
		{
			joinExpr := yyDollar[2].node.(*ast.JoinExpr)
			joinExpr.Alias = yyDollar[4].alias
			yyVAL.node = joinExpr
		}
	case 1538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4427
		{
			rangeFunc := yyDollar[1].node.(*ast.RangeFunction)
			funcAliasList := yyDollar[2].list
			if funcAliasList != nil && funcAliasList.Len() >= 2 {
				// func_alias_clause returns [alias, coldeflist]
				if alias := linitial(funcAliasList); alias != nil {
					rangeFunc.Alias = alias.(*ast.Alias)
				}
				if coldeflist := lsecond(funcAliasList); coldeflist != nil {
					// ColDefList is now *NodeList, no conversion needed
					if nodeList, ok := coldeflist.(*ast.NodeList); ok && nodeList != nil {
						rangeFunc.ColDefList = nodeList
					}
				}
			}
			yyVAL.node = rangeFunc
		}
	case 1539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4445
		{
			rangeFunc := yyDollar[2].node.(*ast.RangeFunction)
			rangeFunc.Lateral = true
			funcAliasList := yyDollar[3].list
			if funcAliasList != nil && funcAliasList.Len() >= 2 {
				// func_alias_clause returns [alias, coldeflist]
				if alias := linitial(funcAliasList); alias != nil {
					rangeFunc.Alias = alias.(*ast.Alias)
				}
				if coldeflist := lsecond(funcAliasList); coldeflist != nil {
					// ColDefList is now *NodeList, no conversion needed
					if nodeList, ok := coldeflist.(*ast.NodeList); ok && nodeList != nil {
						rangeFunc.ColDefList = nodeList
					}
				}
			}
			yyVAL.node = rangeFunc
		}
	case 1540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4464
		{
			rangeTableFunc := yyDollar[1].node.(*ast.RangeTableFunc)
			if yyDollar[2].alias != nil {
				rangeTableFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4472
		{
			rangeTableFunc := yyDollar[2].node.(*ast.RangeTableFunc)
			rangeTableFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeTableFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4481
		{
			jsonTable := yyDollar[1].node.(*ast.JsonTable)
			if yyDollar[2].alias != nil {
				jsonTable.Alias = yyDollar[2].alias
			}
			yyVAL.node = jsonTable
		}
	case 1543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4489
		{
			jsonTable := yyDollar[2].node.(*ast.JsonTable)
			jsonTable.Lateral = true
			if yyDollar[3].alias != nil {
				jsonTable.Alias = yyDollar[3].alias
			}
			yyVAL.node = jsonTable
		}
	case 1544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4501
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.rangevar = rangeVar
		}
	case 1545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4507
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4514
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.rangevar = rangeVar
		}
	case 1547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4520
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1548:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4526
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4536
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4540
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4546
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4563
		{
			yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
		}
	case 1553:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4567
		{
			/* CROSS JOIN is same as unqualified inner join */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewJoinExpr(ast.JOIN_INNER, left, right, nil)
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1554:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4576
		{
			left := yyDollar[1].node
			right := yyDollar[4].node
			joinType := ast.JoinType(yyDollar[2].ival)
			joinQual := yyDollar[5].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(joinType, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(joinType, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1555:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4602
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[3].node
			joinQual := yyDollar[4].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(ast.JOIN_INNER, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(ast.JOIN_INNER, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1556:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4628
		{
			left := yyDollar[1].node
			right := yyDollar[5].node
			joinType := ast.JoinType(yyDollar[3].ival)
			join := ast.NewNaturalJoinExpr(joinType, left, right)
			yyVAL.node = join
		}
	case 1557:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4636
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewNaturalJoinExpr(ast.JOIN_INNER, left, right)
			yyVAL.node = join
		}
	case 1558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4646
		{
			yyVAL.ival = int(ast.JOIN_FULL)
		}
	case 1559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4647
		{
			yyVAL.ival = int(ast.JOIN_LEFT)
		}
	case 1560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4648
		{
			yyVAL.ival = int(ast.JOIN_RIGHT)
		}
	case 1561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4649
		{
			yyVAL.ival = int(ast.JOIN_INNER)
		}
	case 1562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4654
		{
			yyVAL.ival = 1
		}
	case 1563:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4655
		{
			yyVAL.ival = 0
		}
	case 1564:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4665
		{
			/* Create a two-element list: [name_list, alias_or_null] following PostgreSQL */
			nameList := yyDollar[3].list
			var aliasNode ast.Node = nil
			if yyDollar[5].alias != nil {
				aliasNode = yyDollar[5].alias
			}
			usingList := ast.NewNodeList(nameList, aliasNode)
			yyVAL.node = usingList
		}
	case 1565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4676
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4687
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4691
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4695
		{
			yyVAL.with = ast.NewWithClause(yyDollar[3].list, true, 0)
		}
	case 1569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4701
		{
			yyVAL.with = yyDollar[1].with
		}
	case 1570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4702
		{
			yyVAL.with = nil
		}
	case 1571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4707
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4711
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1573:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4719
		{
			ctename := yyDollar[1].str
			query := yyDollar[6].stmt
			cte := ast.NewCommonTableExpr(ctename, query)

			// Set column names if provided
			if yyDollar[2].list != nil {
				cte.Aliascolnames = yyDollar[2].list
			}

			// Set materialized option
			cte.Ctematerialized = ast.CTEMaterialized(yyDollar[4].ival)

			// Set search clause if provided
			if yyDollar[8].node != nil {
				cte.SearchClause = yyDollar[8].node.(*ast.CTESearchClause)
			}

			// Set cycle clause if provided
			if yyDollar[9].node != nil {
				cte.CycleClause = yyDollar[9].node.(*ast.CTECycleClause)
			}

			yyVAL.node = cte
		}
	case 1574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4747
		{
			yyVAL.ival = int(ast.CTEMaterializeAlways)
		}
	case 1575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4748
		{
			yyVAL.ival = int(ast.CTEMaterializeNever)
		}
	case 1576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4749
		{
			yyVAL.ival = int(ast.CTEMaterializeDefault)
		}
	case 1577:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4754
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, false, seqColumn)
		}
	case 1578:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4760
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, true, seqColumn)
		}
	case 1579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4766
		{
			yyVAL.node = nil
		}
	case 1580:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:4773
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			markValue := yyDollar[6].node.(ast.Expression)
			markDefault := yyDollar[8].node.(ast.Expression)
			pathColumn := yyDollar[10].str
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, markValue, markDefault, pathColumn)
		}
	case 1581:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4782
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			pathColumn := yyDollar[6].str
			// For simple CYCLE clause, use nil for mark values to avoid TO/DEFAULT in deparsing
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, nil, nil, pathColumn)
		}
	case 1582:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4790
		{
			yyVAL.node = nil
		}
	case 1583:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4801
		{
			/* Create a SelectStmt with VALUES clause following PostgreSQL */
			selectStmt := ast.NewSelectStmt()
			exprList := yyDollar[3].list
			selectStmt.ValuesLists = ast.NewNodeList(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1584:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4809
		{
			/* Add additional VALUES row to existing SelectStmt */
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			exprList := yyDollar[4].list
			selectStmt.ValuesLists.Append(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4823
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4824
		{
			yyVAL.node = nil
		}
	case 1587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4832
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4834
		{
			cursorExpr := ast.NewCurrentOfExpr(0, yyDollar[4].str) // cvarno filled in by parse analysis
			yyVAL.node = cursorExpr
		}
	case 1589:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4838
		{
			yyVAL.node = nil
		}
	case 1590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4842
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4850
		{
			yyVAL.alias = yyDollar[1].alias
		}
	case 1592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4851
		{
			yyVAL.alias = nil
		}
	case 1593:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4856
		{
			nameList := yyDollar[4].list
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nameList)
		}
	case 1594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4861
		{
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 1595:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4865
		{
			nameList := yyDollar[3].list
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nameList)
		}
	case 1596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4870
		{
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 1597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4881
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].alias, nil)
		}
	case 1598:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4885
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[3].list)
		}
	case 1599:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4889
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.list = ast.NewNodeList(alias, yyDollar[4].list)
		}
	case 1600:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4894
		{
			alias := ast.NewAlias(yyDollar[1].str, nil)
			yyVAL.list = ast.NewNodeList(alias, yyDollar[3].list)
		}
	case 1601:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4899
		{
			yyVAL.list = ast.NewNodeList(nil, nil)
		}
	case 1602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4907
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.alias = alias
		}
	case 1603:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4911
		{
			yyVAL.alias = nil
		}
	case 1604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4919
		{
			yyVAL.ival = 1
		}
	case 1605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4920
		{
			yyVAL.ival = 0
		}
	case 1606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4924
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1607:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4925
		{
			yyVAL.list = yyDollar[4].list
		}
	case 1608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4929
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1609:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4930
		{
			yyVAL.list = nil
		}
	case 1610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4940
		{
			yyVAL.into = ast.NewIntoClause(yyDollar[2].node.(*ast.RangeVar), nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 1611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4943
		{
			yyVAL.into = nil
		}
	case 1612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4954
		{
			hasOrdinality := yyDollar[2].ival == 1
			// For a simple function, create a NodeList containing a single NodeList with the function
			funcList := ast.NewNodeList(yyDollar[1].node)
			functions := ast.NewNodeList(funcList)
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, false, functions, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1613:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4963
		{
			hasOrdinality := yyDollar[6].ival == 1
			// rowsfrom_list is already a NodeList containing NodeLists
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, true, yyDollar[4].list, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4973
		{
			yyVAL.ival = 1
		}
	case 1615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4974
		{
			yyVAL.ival = 0
		}
	case 1616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4980
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 1617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4984
		{
			yyDollar[1].list.Append(yyDollar[3].list)
			yyVAL.list = yyDollar[1].list
		}
	case 1618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4991
		{
			funcList := ast.NewNodeList(yyDollar[1].node)
			if yyDollar[2].list != nil {
				funcList.Append(yyDollar[2].list)
			}
			yyVAL.list = funcList
		}
	case 1619:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5000
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5001
		{
			yyVAL.list = nil
		}
	case 1621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5011
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 1622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5015
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 1623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5027
		{
			yyVAL.funparam = &ast.FunctionParameter{
				BaseNode: ast.BaseNode{Tag: ast.T_FunctionParameter},
				Name:     yyDollar[1].str,
				ArgType:  yyDollar[2].typnam,
				Mode:     ast.FUNC_PARAM_TABLE,
				DefExpr:  nil,
			}
		}
	case 1624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5040
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1625:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5041
		{
			yyVAL.list = nil
		}
	case 1626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5047
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5051
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5060
		{
			columnDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			// Note: opt_collate_clause support can be added when needed
			// PostgreSQL sets: n->collClause = (CollateClause *) $3;
			yyVAL.node = columnDef
		}
	case 1629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5071
		{
			// Pass the NodeList directly to NewCollateClause
			nameList := yyDollar[2].list
			yyVAL.node = ast.NewCollateClause(nameList)
		}
	case 1630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5076
		{
			yyVAL.node = nil
		}
	case 1631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5081
		{
			yyVAL.str = "BY REF"
		}
	case 1632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5082
		{
			yyVAL.str = "BY VALUE"
		}
	case 1633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5088
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5092
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5096
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1636:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5100
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5108
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5112
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5120
		{
			target := ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
			yyVAL.node = target
		}
	case 1640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5125
		{
			target := ast.NewResTarget("", yyDollar[2].node)
			yyVAL.node = target
		}
	case 1641:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5134
		{
			// XMLTABLE(xpath_expr PASSING doc_expr COLUMNS ...)
			// $3 is xpath_expr (should be RowExpr), $4 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[4].node.(ast.Expression), yyDollar[3].node.(ast.Expression), nil, yyDollar[6].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1642:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:5142
		{
			// XMLTABLE(XMLNAMESPACES(...), xpath_expr PASSING doc_expr COLUMNS ...)
			// $8 is xpath_expr (should be RowExpr), $9 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[9].node.(ast.Expression), yyDollar[8].node.(ast.Expression), yyDollar[5].list, yyDollar[11].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5153
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5157
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5166
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5171
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, nil, true, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5176
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			// TODO: Process column options from $3
			yyVAL.node = rangeTableFuncCol
		}
	case 1648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5186
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5190
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1650:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5199
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5203
		{
			yyVAL.node = ast.NewDefElem("default", yyDollar[2].node)
		}
	case 1652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5207
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(true))
		}
	case 1653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5211
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(false))
		}
	case 1654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5215
		{
			yyVAL.node = ast.NewDefElem("path", yyDollar[2].node)
		}
	case 1655:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:5228
		{
			// Extract path name from optional path name node
			var pathName string
			if yyDollar[6].node != nil {
				if strNode, ok := yyDollar[6].node.(*ast.String); ok {
					pathName = strNode.SVal
				}
			}

			// Create JsonTablePathSpec from the a_expr (path expression) and optional path name
			pathSpec := ast.NewJsonTablePathSpec(yyDollar[5].node, pathName, 0)

			// Create JsonTable with context item and path spec
			jsonTable := ast.NewJsonTable(yyDollar[3].node.(*ast.JsonValueExpr), pathSpec)
			if yyDollar[10].list != nil {
				jsonTable.Columns = yyDollar[10].list
			}
			yyVAL.node = jsonTable
		}
	case 1656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5252
		{
			var format *ast.JsonFormat
			if yyDollar[2].node != nil {
				format = yyDollar[2].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonValueExpr(yyDollar[1].node, format)
		}
	case 1657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5263
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1658:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5264
		{
			yyVAL.node = nil
		}
	case 1659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5269
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1660:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5270
		{
			yyVAL.node = nil
		}
	case 1661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5274
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1662:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5275
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5280
		{
			jsonArg := ast.NewJsonArgument(yyDollar[1].node.(*ast.JsonValueExpr), yyDollar[3].str)
			yyVAL.node = jsonArg
		}
	case 1664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5286
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5287
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5293
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1667:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5297
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5309
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5313
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5320
		{
			yyVAL.bval = false
		}
	case 1671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5321
		{
			yyVAL.bval = true
		}
	case 1672:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5322
		{
			yyVAL.bval = false
		}
	case 1673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5326
		{
			yyVAL.bval = false
		}
	case 1674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5327
		{
			yyVAL.bval = true
		}
	case 1675:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5328
		{
			yyVAL.bval = true
		}
	case 1676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5333
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1677:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5334
		{
			yyVAL.list = nil
		}
	case 1678:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5345
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)

			yyVAL.node = ast.NewJsonObjectAgg(constructor, yyDollar[3].node.(*ast.JsonKeyValue), yyDollar[4].bval, yyDollar[5].bval)
		}
	case 1679:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5360
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)
			constructor.AggOrder = yyDollar[4].list
			yyVAL.node = ast.NewJsonArrayAgg(constructor, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].bval)
		}
	case 1680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5373
		{
			var jsonFormat *ast.JsonFormat
			if yyDollar[3].node != nil {
				jsonFormat = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonOutput(yyDollar[2].typnam, ast.NewJsonReturning(jsonFormat, 0, 0))
		}
	case 1681:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5380
		{
			yyVAL.node = nil
		}
	case 1682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5386
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JSON_BEHAVIOR_DEFAULT,
				Expr:     yyDollar[2].node,
			}
		}
	case 1683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5394
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JsonBehaviorType(yyDollar[1].ival),
				Expr:     nil,
			}
		}
	case 1684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5405
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_ERROR)
		}
	case 1685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5406
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_NULL)
		}
	case 1686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5407
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_TRUE)
		}
	case 1687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5408
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_FALSE)
		}
	case 1688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5409
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_UNKNOWN)
		}
	case 1689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5410
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_ARRAY)
		}
	case 1690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5411
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_OBJECT)
		}
	case 1691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5412
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY)
		}
	case 1692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5417
		{
			// Return a list with ON EMPTY behavior and nil for ON ERROR
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, nil}}
		}
	case 1693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5421
		{
			// Return a list with nil for ON EMPTY and ON ERROR behavior
			yyVAL.node = &ast.NodeList{Items: []ast.Node{nil, yyDollar[1].node}}
		}
	case 1694:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5425
		{
			// Return a list with both ON EMPTY and ON ERROR behaviors
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, yyDollar[4].node}}
		}
	case 1695:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5429
		{
			yyVAL.node = nil
		}
	case 1696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5434
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1697:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5435
		{
			yyVAL.node = nil
		}
	case 1698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5440
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5441
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5442
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5443
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1702:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5444
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1703:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5445
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5446
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5447
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1706:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5448
		{
			yyVAL.ival = int(ast.JSW_UNSPEC)
		}
	case 1707:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5453
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1708:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5454
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1709:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5455
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1710:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5456
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1711:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5457
		{
			yyVAL.ival = int(ast.JS_QUOTES_UNSPEC)
		}
	case 1712:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5463
		{
			// Parse the encoding name and map to JsonEncoding constant
			var encoding ast.JsonEncoding
			switch yyDollar[4].str {
			case "utf8":
				encoding = ast.JS_ENC_UTF8
			case "utf16":
				encoding = ast.JS_ENC_UTF16
			case "utf32":
				encoding = ast.JS_ENC_UTF32
			default:
				encoding = ast.JS_ENC_DEFAULT
			}
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   encoding,
			}
		}
	case 1713:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5483
		{
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   ast.JS_ENC_DEFAULT,
			}
		}
	case 1714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5493
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1715:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5494
		{
			yyVAL.node = nil
		}
	case 1716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5499
		{
			yyVAL.node = ast.NewString("path")
		}
	case 1717:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5500
		{
			yyVAL.node = nil
		}
	case 1718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5506
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5510
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1720:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5519
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FOR_ORDINALITY, yyDollar[1].str)
			yyVAL.node = jsonTableCol
		}
	case 1721:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5528
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_REGULAR, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[3].node != nil {
				strNode := yyDollar[3].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1722:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5542
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FORMATTED, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			if yyDollar[3].node != nil {
				jsonTableCol.Format = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = jsonTableCol
		}
	case 1723:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5556
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_EXISTS, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1724:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5567
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, "")
			jsonTableCol.Columns = yyDollar[6].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1725:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5576
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, yyDollar[5].str)
			jsonTableCol.Columns = yyDollar[8].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5587
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1727:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5588
		{
			yyVAL.node = nil
		}
	case 1728:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5604
		{
			insertStmt := yyDollar[5].node.(*ast.InsertStmt)
			insertStmt.Relation = yyDollar[4].rangevar
			insertStmt.WithClause = yyDollar[1].with
			insertStmt.OnConflictClause = yyDollar[6].onconflict
			insertStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = insertStmt
		}
	case 1729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5616
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1730:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5620
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5629
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.SelectStmt = yyDollar[1].stmt
			yyVAL.node = insertStmt
		}
	case 1732:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5635
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Override = ast.OverridingKind(yyDollar[2].ival)
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1733:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5642
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1734:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5649
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.Override = ast.OverridingKind(yyDollar[5].ival)
			insertStmt.SelectStmt = yyDollar[7].stmt
			yyVAL.node = insertStmt
		}
	case 1735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5657
		{
			insertStmt := ast.NewInsertStmt(nil)
			// For DEFAULT VALUES, SelectStmt should be nil
			insertStmt.SelectStmt = nil
			yyVAL.node = insertStmt
		}
	case 1736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5666
		{
			yyVAL.ival = int(ast.OVERRIDING_USER_VALUE)
		}
	case 1737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5667
		{
			yyVAL.ival = int(ast.OVERRIDING_SYSTEM_VALUE)
		}
	case 1738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5672
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1739:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5676
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1740:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5684
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1741:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:5696
		{
			updateStmt := ast.NewUpdateStmt(yyDollar[3].rangevar)
			updateStmt.WithClause = yyDollar[1].with
			updateStmt.TargetList = yyDollar[5].list
			updateStmt.FromClause = yyDollar[6].list
			updateStmt.WhereClause = yyDollar[7].node
			updateStmt.ReturningList = yyDollar[8].list
			yyVAL.stmt = updateStmt
		}
	case 1742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5709
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1743:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5713
		{
			// Concatenate the lists - equivalent to PostgreSQL's list_concat
			for _, item := range yyDollar[3].list.Items {
				yyDollar[1].list.Append(item)
			}
			yyVAL.list = yyDollar[1].list
		}
	case 1744:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5724
		{
			target := yyDollar[1].target
			target.Val = yyDollar[3].node
			yyVAL.list = ast.NewNodeList(target)
		}
	case 1745:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5730
		{
			// Multi-column assignment: (col1, col2) = (val1, val2)
			// Create MultiAssignRef nodes for each target, matching PostgreSQL exactly
			targetList := yyDollar[2].list
			ncolumns := len(targetList.Items)

			// Create a MultiAssignRef source for each target
			for i, item := range targetList.Items {
				resCol := item.(*ast.ResTarget)
				multiAssignRef := ast.NewMultiAssignRef(yyDollar[5].node, i+1, ncolumns, 0)
				resCol.Val = multiAssignRef
			}

			// Return the entire target list
			yyVAL.list = targetList
		}
	case 1746:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5750
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5756
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5757
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1749:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5767
		{
			deleteStmt := ast.NewDeleteStmt(yyDollar[4].rangevar)
			deleteStmt.WithClause = yyDollar[1].with
			deleteStmt.UsingClause = yyDollar[5].list
			deleteStmt.WhereClause = yyDollar[6].node
			deleteStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = deleteStmt
		}
	case 1750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5779
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1751:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5783
		{
			yyVAL.list = nil
		}
	case 1752:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5798
		{
			mergeStmt := &ast.MergeStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_MergeStmt},
			}
			mergeStmt.WithClause = yyDollar[1].with
			mergeStmt.Relation = yyDollar[4].rangevar
			mergeStmt.SourceRelation = yyDollar[6].node
			mergeStmt.JoinCondition = yyDollar[8].node
			mergeStmt.MergeWhenClauses = yyDollar[9].list
			mergeStmt.ReturningList = yyDollar[10].list
			yyVAL.stmt = mergeStmt
		}
	case 1753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5815
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1754:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5819
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1755:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5830
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Query:     yyDollar[3].stmt,
				IsFrom:    false,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Initialize Options as empty NodeList
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[9].list != nil {
				nodeList := yyDollar[9].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			yyVAL.stmt = copyStmt
		}
	case 1756:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:5854
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Relation:  yyDollar[3].rangevar,
				IsFrom:    yyDollar[5].ival != 0,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Assign column list directly as NodeList
			copyStmt.Attlist = yyDollar[4].list

			// Initialize Options as empty NodeList and add options
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[2].node != nil {
				copyStmt.Options.Append(yyDollar[2].node)
			}
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[10].list != nil {
				nodeList := yyDollar[10].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			if yyDollar[11].node != nil {
				copyStmt.WhereClause = yyDollar[11].node
			}
			yyVAL.stmt = copyStmt
		}
	case 1757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5890
		{
			yyVAL.ival = 1
		}
	case 1758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5891
		{
			yyVAL.ival = 0
		}
	case 1759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5895
		{
			yyVAL.ival = 1
		}
	case 1760:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5896
		{
			yyVAL.ival = 0
		}
	case 1761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5900
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5901
		{
			yyVAL.str = ""
		}
	case 1763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5902
		{
			yyVAL.str = ""
		}
	case 1764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5907
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1765:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5910
		{
			yyVAL.node = nil
		}
	case 1766:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5915
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1767:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5918
		{
			yyVAL.node = nil
		}
	case 1768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5922
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1769:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5923
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1770:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5928
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1771:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5936
		{
			yyVAL.list = nil
		}
	case 1772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5943
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5947
		{
			yyVAL.node = ast.NewDefElem("freeze", ast.NewString("true"))
		}
	case 1774:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5951
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5955
		{
			yyVAL.node = ast.NewDefElem("null", ast.NewString(yyDollar[3].str))
		}
	case 1776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5959
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("csv"))
		}
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5963
		{
			yyVAL.node = ast.NewDefElem("header", ast.NewString("true"))
		}
	case 1778:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5967
		{
			yyVAL.node = ast.NewDefElem("quote", ast.NewString(yyDollar[3].str))
		}
	case 1779:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5971
		{
			yyVAL.node = ast.NewDefElem("escape", ast.NewString(yyDollar[3].str))
		}
	case 1780:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5975
		{
			yyVAL.node = ast.NewDefElem("force_quote", yyDollar[3].list)
		}
	case 1781:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5979
		{
			yyVAL.node = ast.NewDefElem("force_quote", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1782:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5983
		{
			yyVAL.node = ast.NewDefElem("force_not_null", yyDollar[4].list)
		}
	case 1783:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5987
		{
			yyVAL.node = ast.NewDefElem("force_not_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1784:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5991
		{
			yyVAL.node = ast.NewDefElem("force_null", yyDollar[3].list)
		}
	case 1785:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5995
		{
			yyVAL.node = ast.NewDefElem("force_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1786:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5999
		{
			yyVAL.node = ast.NewDefElem("encoding", ast.NewString(yyDollar[2].str))
		}
	case 1787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6007
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1788:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6011
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1789:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6018
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6024
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6025
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6026
		{
			yyVAL.node = ast.NewA_Star(0)
		}
	case 1793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6027
		{
			yyVAL.node = ast.NewString("default")
		}
	case 1794:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6028
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1795:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6029
		{
			yyVAL.node = nil
		}
	case 1796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6034
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1797:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6038
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6044
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6048
		{
			yyVAL.str = "true"
		}
	case 1800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6049
		{
			yyVAL.str = "false"
		}
	case 1801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6050
		{
			yyVAL.str = "on"
		}
	case 1802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6051
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6055
		{
			yyVAL.node = ast.NewFloat(yyDollar[1].str)
		}
	case 1804:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6056
		{
			yyVAL.node = ast.NewFloat(yyDollar[2].str)
		}
	case 1805:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6058
		{
			f := ast.NewFloat(yyDollar[2].str)
			doNegateFloat(f)
			yyVAL.node = f
		}
	case 1806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6063
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6067
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6068
		{
			yyVAL.node = nil
		}
	case 1809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6072
		{
			yyVAL.objType = ast.OBJECT_ACCESS_METHOD
		}
	case 1810:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6073
		{
			yyVAL.objType = ast.OBJECT_EVENT_TRIGGER
		}
	case 1811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6074
		{
			yyVAL.objType = ast.OBJECT_EXTENSION
		}
	case 1812:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6075
		{
			yyVAL.objType = ast.OBJECT_FDW
		}
	case 1813:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6076
		{
			yyVAL.objType = ast.OBJECT_LANGUAGE
		}
	case 1814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6077
		{
			yyVAL.objType = ast.OBJECT_PUBLICATION
		}
	case 1815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6078
		{
			yyVAL.objType = ast.OBJECT_SCHEMA
		}
	case 1816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6079
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_SERVER
		}
	case 1817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6083
		{
			yyVAL.objType = ast.OBJECT_POLICY
		}
	case 1818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6084
		{
			yyVAL.objType = ast.OBJECT_RULE
		}
	case 1819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6085
		{
			yyVAL.objType = ast.OBJECT_TRIGGER
		}
	case 1820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6089
		{
			yyVAL.objType = yyDollar[1].objType
		}
	case 1821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6090
		{
			yyVAL.objType = ast.OBJECT_DATABASE
		}
	case 1822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6091
		{
			yyVAL.objType = ast.OBJECT_ROLE
		}
	case 1823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6092
		{
			yyVAL.objType = ast.OBJECT_SUBSCRIPTION
		}
	case 1824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6093
		{
			yyVAL.objType = ast.OBJECT_TABLESPACE
		}
	case 1825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6098
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].typnam)
		}
	case 1826:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6103
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 1827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6110
		{
			yyVAL.bval = true
		}
	case 1828:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6111
		{
			yyVAL.bval = false
		}
	case 1829:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6115
		{
			yyVAL.ival = 1
		}
	case 1830:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6116
		{
			yyVAL.ival = 0
		}
	case 1833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6132
		{
			yyVAL.node = nil
		}
	case 1834:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6134
		{
			yyVAL.node = nil
		}
	case 1835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6142
		{
			yyVAL.ival = 1
		}
	case 1836:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6143
		{
			yyVAL.ival = 0
		}
	case 1837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6147
		{
			yyVAL.ival = 1
		}
	case 1838:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6148
		{
			yyVAL.ival = 0
		}
	case 1839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6152
		{
			yyVAL.ival = 1
		}
	case 1840:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6153
		{
			yyVAL.ival = 0
		}
	case 1841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6157
		{
			yyVAL.ival = 1
		}
	case 1842:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6158
		{
			yyVAL.ival = 0
		}
	case 1843:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6167
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1844:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6173
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1845:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6179
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1846:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6185
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1847:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6191
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1848:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6199
		{
			yyVAL.ival = int(ast.MERGE_WHEN_MATCHED)
		}
	case 1849:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6200
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_SOURCE)
		}
	case 1850:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6204
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1851:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6205
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1852:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6209
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1853:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6210
		{
			yyVAL.node = nil
		}
	case 1854:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6215
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_UPDATE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			yyVAL.node = mergeWhen
		}
	case 1855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6230
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_DELETE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1856:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6239
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			mergeWhen.Values = yyDollar[2].list
			yyVAL.node = mergeWhen
		}
	case 1857:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6246
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[3].ival)
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1858:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6253
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1859:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6266
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[6].ival)
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[8].list
			yyVAL.node = mergeWhen
		}
	case 1860:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6279
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1861:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6288
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1862:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6303
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_UPDATE)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			onConflict.TargetList = yyDollar[7].list
			onConflict.WhereClause = yyDollar[8].node
			yyVAL.onconflict = onConflict
		}
	case 1863:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6313
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_NOTHING)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			yyVAL.onconflict = onConflict
		}
	case 1864:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6321
		{
			yyVAL.onconflict = nil
		}
	case 1865:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6332
		{
			// Create InferClause for column-based conflict detection
			infer := ast.NewInferClause()
			// Assign IndexElems directly as NodeList
			infer.IndexElems = yyDollar[2].list
			infer.WhereClause = yyDollar[4].node
			yyVAL.node = infer
		}
	case 1866:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6341
		{
			// Create InferClause for constraint-based conflict detection
			infer := ast.NewInferClause()
			infer.Conname = yyDollar[3].str
			yyVAL.node = infer
		}
	case 1867:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6348
		{
			yyVAL.node = nil
		}
	case 1868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6359
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1869:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6363
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6370
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1871:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6374
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1872:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6381
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Name = yyDollar[1].str
		}
	case 1873:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6386
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[1].node
		}
	case 1874:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6391
		{
			yyVAL.node = yyDollar[4].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[2].node
		}
	case 1875:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6399
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Ordering = ast.SortByDir(yyDollar[3].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[4].ival)
			yyVAL.node = indexElem
		}
	case 1876:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6410
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Opclassopts = yyDollar[3].list
			indexElem.Ordering = ast.SortByDir(yyDollar[4].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[5].ival)
			yyVAL.node = indexElem
		}
	case 1877:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6424
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1878:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6425
		{
			yyVAL.list = nil
		}
	case 1879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6429
		{
			yyVAL.ival = int(ast.SORTBY_ASC)
		}
	case 1880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6430
		{
			yyVAL.ival = int(ast.SORTBY_DESC)
		}
	case 1881:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6431
		{
			yyVAL.ival = int(ast.SORTBY_DEFAULT)
		}
	case 1882:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6435
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_FIRST)
		}
	case 1883:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6436
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_LAST)
		}
	case 1884:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6437
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_DEFAULT)
		}
	case 1885:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6442
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1886:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6446
		{
			yyVAL.list = nil
		}
	case 1887:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6467
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[6].list
			createStmt.InhRelations = yyDollar[8].list
			createStmt.PartSpec = yyDollar[9].partspec
			createStmt.AccessMethod = yyDollar[10].str
			createStmt.Options = yyDollar[11].list
			createStmt.OnCommit = yyDollar[12].oncommit
			createStmt.TableSpaceName = yyDollar[13].str
			yyVAL.stmt = createStmt
		}
	case 1888:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:6483
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[9].list
			createStmt.InhRelations = yyDollar[11].list
			createStmt.PartSpec = yyDollar[12].partspec
			createStmt.AccessMethod = yyDollar[13].str
			createStmt.Options = yyDollar[14].list
			createStmt.OnCommit = yyDollar[15].oncommit
			createStmt.TableSpaceName = yyDollar[16].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1889:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:6500
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[6].list)
			createStmt.TableElts = yyDollar[7].list
			createStmt.PartSpec = yyDollar[8].partspec
			createStmt.AccessMethod = yyDollar[9].str
			createStmt.Options = yyDollar[10].list
			createStmt.OnCommit = yyDollar[11].oncommit
			createStmt.TableSpaceName = yyDollar[12].str
			yyVAL.stmt = createStmt
		}
	case 1890:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:6516
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[9].list)
			createStmt.TableElts = yyDollar[10].list
			createStmt.PartSpec = yyDollar[11].partspec
			createStmt.AccessMethod = yyDollar[12].str
			createStmt.Options = yyDollar[13].list
			createStmt.OnCommit = yyDollar[14].oncommit
			createStmt.TableSpaceName = yyDollar[15].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1891:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:6533
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[7].rangevar)
			createStmt.TableElts = yyDollar[8].list
			createStmt.PartBound = yyDollar[9].partboundspec
			createStmt.PartSpec = yyDollar[10].partspec
			createStmt.AccessMethod = yyDollar[11].str
			createStmt.Options = yyDollar[12].list
			createStmt.OnCommit = yyDollar[13].oncommit
			createStmt.TableSpaceName = yyDollar[14].str
			yyVAL.stmt = createStmt
		}
	case 1892:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:6550
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[10].rangevar)
			createStmt.TableElts = yyDollar[11].list
			createStmt.PartBound = yyDollar[12].partboundspec
			createStmt.PartSpec = yyDollar[13].partspec
			createStmt.AccessMethod = yyDollar[14].str
			createStmt.Options = yyDollar[15].list
			createStmt.OnCommit = yyDollar[16].oncommit
			createStmt.TableSpaceName = yyDollar[17].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6568
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6569
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1895:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6570
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1896:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6571
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1897:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6572
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1898:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6573
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6574
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 1900:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6575
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 1901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6579
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1902:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6580
		{
			yyVAL.list = nil
		}
	case 1903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6585
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1904:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6590
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6597
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6598
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6599
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1908:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6604
		{
			yyVAL.node = ast.NewTableLikeClause(yyDollar[2].rangevar, ast.TableLikeOption(yyDollar[3].ival))
		}
	case 1909:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6611
		{
			yyVAL.ival = yyDollar[1].ival | yyDollar[3].ival
		}
	case 1910:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6615
		{
			yyVAL.ival = yyDollar[1].ival & ^yyDollar[3].ival
		}
	case 1911:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6619
		{
			yyVAL.ival = 0
		}
	case 1912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6625
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMMENTS)
		}
	case 1913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6626
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMPRESSION)
		}
	case 1914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6627
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_CONSTRAINTS)
		}
	case 1915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6628
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_DEFAULTS)
		}
	case 1916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6629
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_IDENTITY)
		}
	case 1917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6630
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_GENERATED)
		}
	case 1918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6631
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_INDEXES)
		}
	case 1919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6632
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STATISTICS)
		}
	case 1920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6633
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STORAGE)
		}
	case 1921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6634
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_ALL)
		}
	case 1922:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6639
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1923:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6640
		{
			yyVAL.str = "default"
		}
	case 1924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6644
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1925:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6645
		{
			yyVAL.str = ""
		}
	case 1926:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6649
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1927:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6650
		{
			yyVAL.str = "default"
		}
	case 1928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6654
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1929:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6655
		{
			yyVAL.str = ""
		}
	case 1930:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6660
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1931:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6661
		{
			yyVAL.list = nil
		}
	case 1932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6666
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1933:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6672
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6679
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6680
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1936:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6685
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[2].list
			yyVAL.node = colDef
		}
	case 1937:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6691
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[4].list
			yyVAL.node = colDef
		}
	case 1938:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6702
		{
			hashSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_HASH)
			hashSpec.IsDefault = false

			// Parse hash partition bounds (modulus and remainder)
			hashOptions := yyDollar[5].list
			for _, optNode := range hashOptions.Items {
				if defElem, ok := optNode.(*ast.DefElem); ok {
					if defElem.Defname == "modulus" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Modulus = integerVal.IVal
							}
						}
					} else if defElem.Defname == "remainder" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Remainder = integerVal.IVal
							}
						}
					}
				}
			}

			yyVAL.partboundspec = hashSpec
		}
	case 1939:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6731
		{
			listSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			listSpec.IsDefault = false
			listSpec.ListDatums = yyDollar[5].list
			yyVAL.partboundspec = listSpec
		}
	case 1940:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6740
		{
			rangeSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_RANGE)
			rangeSpec.IsDefault = false
			rangeSpec.LowDatums = yyDollar[5].list
			rangeSpec.HighDatums = yyDollar[9].list
			yyVAL.partboundspec = rangeSpec
		}
	case 1941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6750
		{
			defaultSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			defaultSpec.IsDefault = true
			yyVAL.partboundspec = defaultSpec
		}
	case 1942:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6759
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, ast.NewA_Const(ast.NewInteger(yyDollar[2].ival), 0))
		}
	case 1943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6766
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1944:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6770
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1945:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6778
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1946:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6779
		{
			yyVAL.list = nil
		}
	case 1947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6784
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1948:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6788
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1949:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6796
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6802
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6807
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1952:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6812
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			colDef.StorageName = yyDollar[3].str
			colDef.Compression = yyDollar[4].str
			colDef.Fdwoptions = yyDollar[5].list
			colDef.Constraints = yyDollar[6].list
			yyVAL.node = colDef
		}
	case 1953:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6824
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1954:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6829
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1955:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6836
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6841
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6842
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1958:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6844
		{
			/*
			 * Note: the CollateClause is momentarily included in
			 * the list built by ColQualList, but we split it out
			 * again in SplitColQualList.
			 */
			collateClause := ast.NewCollateClause(yyDollar[2].list)
			yyVAL.node = collateClause
		}
	case 1959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6857
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1960:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6862
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_NOT_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1961:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6867
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRED)
			yyVAL.node = constraint
		}
	case 1962:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6872
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_IMMEDIATE)
			yyVAL.node = constraint
		}
	case 1963:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6880
		{
			yyVAL.bval = true
		}
	case 1964:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6881
		{
			yyVAL.bval = false
		}
	case 1965:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6882
		{
			yyVAL.bval = true
		}
	case 1966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6886
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_ALWAYS
		}
	case 1967:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6887
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_BY_DEFAULT
		}
	case 1968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6892
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1969:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6894
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6899
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1971:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6903
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1972:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6907
		{
			// SeqOptElem already returns a DefElem, so we can use it directly
			// Check for invalid options as per PostgreSQL
			defElem := yyDollar[2].defelt
			if defElem.Defname == "as" || defElem.Defname == "restart" || defElem.Defname == "owned_by" {
				yylex.Error("sequence option not supported here")
			}
			yyVAL.defelt = yyDollar[2].defelt
		}
	case 1973:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6917
		{
			yyVAL.defelt = ast.NewDefElem("generated", ast.NewInteger(int(yyDollar[3].byt)))
		}
	case 1974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6923
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1975:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6924
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1976:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6929
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].typnam)
		}
	case 1977:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6933
		{
			yyVAL.defelt = ast.NewDefElem("cache", yyDollar[2].node)
		}
	case 1978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6937
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(true))
		}
	case 1979:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6941
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(false))
		}
	case 1980:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6945
		{
			yyVAL.defelt = ast.NewDefElem("increment", yyDollar[3].node)
		}
	case 1981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6949
		{
			yyVAL.defelt = ast.NewDefElem("logged", nil)
		}
	case 1982:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6953
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", yyDollar[2].node)
		}
	case 1983:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6957
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", yyDollar[2].node)
		}
	case 1984:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6961
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", nil)
		}
	case 1985:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6965
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", nil)
		}
	case 1986:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6969
		{
			yyVAL.defelt = ast.NewDefElem("owned_by", yyDollar[3].list)
		}
	case 1987:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6973
		{
			yyVAL.defelt = ast.NewDefElem("sequence_name", yyDollar[3].list)
		}
	case 1988:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6977
		{
			yyVAL.defelt = ast.NewDefElem("start", yyDollar[3].node)
		}
	case 1989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6981
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1990:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6985
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6989
		{
			yyVAL.defelt = ast.NewDefElem("unlogged", nil)
		}
	case 1992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6995
		{
		}
	case 1993:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6996
		{
		}
	case 1994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7000
		{
		}
	case 1995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7001
		{
		}
	case 1996:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7002
		{
		}
	case 1997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7007
		{
			// RECHECK no longer does anything in opclass definitions,
			// but we still accept it to ease porting of old database dumps.
			// When this is used, we should emit a notice.
			// For now, just return true to indicate RECHECK was present
			yyVAL.bval = true
		}
	case 1998:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7014
		{
			yyVAL.bval = false
		}
	case 1999:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7018
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2000:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7019
		{
			yyVAL.list = nil
		}
	case 2001:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7024
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NOTNULL)
		}
	case 2002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7028
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NULL)
		}
	case 2003:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7032
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Keys = nil // Will be filled by the parser
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Options = yyDollar[3].list
			constraint.Indexspace = yyDollar[4].str
			yyVAL.node = constraint
		}
	case 2004:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7041
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = nil // Will be filled by the parser
			yyVAL.node = constraint
		}
	case 2005:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7047
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			yyVAL.node = constraint
		}
	case 2006:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7053
		{
			constraint := ast.NewConstraint(ast.CONSTR_DEFAULT)
			constraint.RawExpr = yyDollar[2].node
			yyVAL.node = constraint
		}
	case 2007:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7059
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Pktable = yyDollar[2].rangevar
			constraint.PkAttrs = yyDollar[3].list
			constraint.FkMatchtype = yyDollar[4].byt
			if actions := yyDollar[5].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			yyVAL.node = constraint
		}
	case 2008:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7076
		{
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.Options = yyDollar[5].list
			yyVAL.node = constraint
		}
	case 2009:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7083
		{
			constraint := ast.NewConstraint(ast.CONSTR_GENERATED)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.RawExpr = yyDollar[5].node
			yyVAL.node = constraint
		}
	case 2010:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7093
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 2011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7098
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2012:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7103
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			processConstraintAttributeSpec(yyDollar[5].ival, constraint)
			yyVAL.node = constraint
		}
	case 2013:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7111
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 2014:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7122
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Indexname = yyDollar[2].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[3].ival, constraint)
			yyVAL.node = constraint
		}
	case 2015:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7133
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 2016:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7143
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Indexname = yyDollar[3].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[4].ival, constraint)
			yyVAL.node = constraint
		}
	case 2017:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7154
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.FkAttrs = yyDollar[4].list
			constraint.Pktable = yyDollar[7].rangevar
			constraint.PkAttrs = yyDollar[8].list
			constraint.FkMatchtype = yyDollar[9].byt
			if actions := yyDollar[10].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			processConstraintAttributeSpec(yyDollar[11].ival, constraint)
			yyVAL.node = constraint
		}
	case 2018:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7175
		{
			constraint := ast.NewConstraint(ast.CONSTR_EXCLUSION)
			constraint.AccessMethod = yyDollar[2].str
			constraint.Exclusions = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			constraint.WhereClause = yyDollar[9].node
			processConstraintAttributeSpec(yyDollar[10].ival, constraint)
			yyVAL.node = constraint
		}
	case 2019:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7189
		{
			yyVAL.bval = true
		}
	case 2020:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7190
		{
			yyVAL.bval = false
		}
	case 2021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7196
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2022:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7202
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2023:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7210
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[3].list)
		}
	case 2024:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7215
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[5].list)
		}
	case 2025:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7223
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2026:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7227
		{
			yyVAL.list = nil
		}
	case 2027:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7234
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_FULL
		}
	case 2028:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7238
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_PARTIAL
		}
	case 2029:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7242
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 2030:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7246
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 2031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7253
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 2032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7263
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 2033:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7273
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = yyDollar[2].keyaction
			yyVAL.keyactions = n
		}
	case 2034:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7280
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[2].keyaction
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 2035:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7287
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 2036:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7302
		{
			// Check for unsupported column lists on UPDATE actions
			keyAction := yyDollar[3].keyaction
			if keyAction.Cols != nil {
				if len(keyAction.Cols.Items) > 0 {
					yylex.Error("column list with SET NULL/SET DEFAULT is only supported for ON DELETE actions")
				}
			}
			yyVAL.keyaction = keyAction
		}
	case 2037:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7315
		{
			yyVAL.keyaction = yyDollar[3].keyaction
		}
	case 2038:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7322
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_NOACTION
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7329
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_RESTRICT
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7336
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_CASCADE
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2041:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7343
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETNULL
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 2042:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7350
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETDEFAULT
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 2043:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7359
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2044:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7360
		{
			yyVAL.list = nil
		}
	case 2045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7364
		{
			yyVAL.partspec = yyDollar[1].partspec
		}
	case 2046:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7365
		{
			yyVAL.partspec = nil
		}
	case 2047:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7370
		{
			partitionSpec := ast.NewPartitionSpec(ast.PartitionStrategy(yyDollar[3].str), yyDollar[5].list)
			yyVAL.partspec = partitionSpec
		}
	case 2048:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7378
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2049:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7383
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2050:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7391
		{
			partElem := ast.NewPartitionElem(yyDollar[1].str, nil, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 2051:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7398
		{
			partElem := ast.NewPartitionElem("", yyDollar[1].node, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 2052:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7405
		{
			partElem := ast.NewPartitionElem("", yyDollar[2].node, 0)
			partElem.Collation = yyDollar[4].list
			partElem.Opclass = yyDollar[5].list
			yyVAL.node = partElem
		}
	case 2053:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7414
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2054:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7415
		{
			yyVAL.str = ""
		}
	case 2055:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7419
		{
			yyVAL.oncommit = ast.ONCOMMIT_DROP
		}
	case 2056:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7420
		{
			yyVAL.oncommit = ast.ONCOMMIT_DELETE_ROWS
		}
	case 2057:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7421
		{
			yyVAL.oncommit = ast.ONCOMMIT_PRESERVE_ROWS
		}
	case 2058:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7422
		{
			yyVAL.oncommit = ast.ONCOMMIT_NOOP
		}
	case 2059:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7426
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2060:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7427
		{
			yyVAL.str = ""
		}
	case 2061:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7431
		{
			yyVAL.str = yyDollar[4].str
		}
	case 2062:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7432
		{
			yyVAL.str = ""
		}
	case 2063:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7436
		{
			yyVAL.str = yyDollar[3].str
		}
	case 2064:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:7449
		{
			indexStmt := ast.NewIndexStmt(yyDollar[5].str, yyDollar[7].rangevar, yyDollar[10].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.AccessMethod = yyDollar[8].str
			indexStmt.IndexIncludingParams = yyDollar[12].list
			indexStmt.NullsNotDistinct = !yyDollar[13].bval
			indexStmt.Options = yyDollar[14].list
			indexStmt.TableSpace = yyDollar[15].str
			indexStmt.WhereClause = yyDollar[16].node
			yyVAL.stmt = indexStmt
		}
	case 2065:
		yyDollar = yyS[yypt-19 : yypt+1]
//line postgres.y:7464
		{
			indexStmt := ast.NewIndexStmt(yyDollar[8].str, yyDollar[10].rangevar, yyDollar[13].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.IfNotExists = true
			indexStmt.AccessMethod = yyDollar[11].str
			indexStmt.IndexIncludingParams = yyDollar[15].list
			indexStmt.NullsNotDistinct = !yyDollar[16].bval
			indexStmt.Options = yyDollar[17].list
			indexStmt.TableSpace = yyDollar[18].str
			indexStmt.WhereClause = yyDollar[19].node
			yyVAL.stmt = indexStmt
		}
	case 2066:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7480
		{
			yyVAL.bval = true
		}
	case 2067:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7481
		{
			yyVAL.bval = false
		}
	case 2068:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7485
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2069:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7486
		{
			yyVAL.str = "btree"
		}
	case 2070:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7490
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2071:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7491
		{
			yyVAL.list = nil
		}
	case 2072:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7496
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2073:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7501
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2074:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7509
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2075:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7510
		{
			yyVAL.list = nil
		}
	case 2076:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7522
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2077:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7528
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2078:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7535
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 2079:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7541
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2080:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7548
		{
			// Index partition attachment - dedicated rule
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 2081:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7557
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			yyVAL.stmt = alterStmt
		}
	case 2082:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7563
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2083:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7570
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			yyVAL.stmt = alterStmt
		}
	case 2084:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7576
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2085:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7583
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			yyVAL.stmt = alterStmt
		}
	case 2086:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7589
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2087:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7596
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2088:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7602
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2089:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7609
		{
			// Partition commands - dedicated rule for partition-only operations
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2090:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7618
		{
			// Partition commands with IF EXISTS
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[6].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2091:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7628
		{
			// Bulk tablespace move for tables
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 2092:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:7635
		{
			// Bulk tablespace move for tables owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 2093:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7643
		{
			// Bulk tablespace move for indexes
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 2094:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:7650
		{
			// Bulk tablespace move for indexes owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 2095:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7658
		{
			// Bulk tablespace move for materialized views
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[10].str)
			moveStmt.Nowait = yyDollar[11].bval
			yyVAL.stmt = moveStmt
		}
	case 2096:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:7665
		{
			// Bulk tablespace move for materialized views owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[13].str)
			moveStmt.Roles = yyDollar[10].list
			moveStmt.Nowait = yyDollar[14].bval
			yyVAL.stmt = moveStmt
		}
	case 2097:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7676
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2098:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7681
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2099:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7689
		{
			yyVAL.bval = true
		}
	case 2100:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7690
		{
			yyVAL.bval = false
		}
	case 2101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7695
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].rolespec)
		}
	case 2102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7700
		{
			yyDollar[1].list.Append(yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 2103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7708
		{
			roleSpec := yyDollar[1].rolespec

			switch roleSpec.Roletype {
			case ast.ROLESPEC_CSTRING:
				yyVAL.str = roleSpec.Rolename
			case ast.ROLESPEC_PUBLIC:
				// PostgreSQL throws an error for "public" role name
				yylex.Error(`role name "public" is reserved`)
				return 1
			case ast.ROLESPEC_SESSION_USER:
				// PostgreSQL throws an error: SESSION_USER cannot be used as a role name here
				yylex.Error(`SESSION_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_USER:
				// PostgreSQL throws an error: CURRENT_USER cannot be used as a role name here
				yylex.Error(`CURRENT_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_ROLE:
				// PostgreSQL throws an error: CURRENT_ROLE cannot be used as a role name here
				yylex.Error(`CURRENT_ROLE cannot be used as a role name here`)
				return 1
			default:
				yylex.Error(`invalid role specification`)
				return 1
			}
		}
	case 2104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7739
		{
			// Handle special role names: "public" and "none"
			var roleSpec *ast.RoleSpec

			if yyDollar[1].str == "public" {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_PUBLIC,
				}
			} else if yyDollar[1].str == "none" {
				// PostgreSQL throws an error for "none" - role name "none" is reserved
				yylex.Error(`role name "none" is reserved`)
				return 1
			} else {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_CSTRING,
					Rolename: yyDollar[1].str,
				}
			}
			yyVAL.rolespec = roleSpec
		}
	case 2105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7762
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_ROLE,
			}
		}
	case 2106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7769
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_USER,
			}
		}
	case 2107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7776
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_SESSION_USER,
			}
		}
	case 2108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7787
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[2].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2109:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7794
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[5].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7801
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2111:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7808
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[6].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7815
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ColumnDefault, yyDollar[3].str, yyDollar[4].node)
		}
	case 2113:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7820
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropNotNull, yyDollar[3].str, nil)
		}
	case 2114:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7825
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetNotNull, yyDollar[3].str, nil)
		}
	case 2115:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7830
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetExpression, yyDollar[3].str, yyDollar[8].node)
		}
	case 2116:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7835
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
		}
	case 2117:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7840
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2118:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7847
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStatistics, yyDollar[3].str, yyDollar[6].node)
		}
	case 2119:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7852
		{
			cmd := ast.NewAlterTableCmd(ast.AT_SetStatistics, "", yyDollar[6].node)
			cmd.Num = int16(yyDollar[3].ival)
			yyVAL.node = cmd
		}
	case 2120:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7859
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 2121:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7864
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 2122:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7869
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStorage, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 2123:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7874
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetCompression, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 2124:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7879
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddIdentity, yyDollar[3].str, nil)
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[6].byt
			constraint.Options = yyDollar[9].list
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 2125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7889
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetIdentity, yyDollar[3].str, yyDollar[4].list)
		}
	case 2126:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7894
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2127:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7901
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2128:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7908
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2129:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7916
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2130:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7927
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, nil)
			def := ast.NewColumnDef("", yyDollar[6].typnam, 0)
			def.Collclause = yyDollar[7].node.(*ast.CollateClause)
			def.RawDefault = yyDollar[8].node
			cmd.Def = def
			yyVAL.node = cmd
		}
	case 2131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7937
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AlterColumnGenericOptions, yyDollar[3].str, yyDollar[4].list)
		}
	case 2132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7942
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddConstraint, "", yyDollar[2].node)
		}
	case 2133:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7947
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterConstraint, "", nil)
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Conname = yyDollar[3].str
			constraint.Deferrable = (yyDollar[4].ival & ast.CAS_DEFERRABLE) != 0
			constraint.Initdeferred = (yyDollar[4].ival & ast.CAS_INITIALLY_DEFERRED) != 0
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 2134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7958
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ValidateConstraint, yyDollar[3].str, nil)
		}
	case 2135:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7963
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2136:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7971
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7979
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOids, "", nil)
		}
	case 2138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7984
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ClusterOn, yyDollar[3].str, nil)
		}
	case 2139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7989
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropCluster, "", nil)
		}
	case 2140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7994
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetLogged, "", nil)
		}
	case 2141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7999
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetUnLogged, "", nil)
		}
	case 2142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8004
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrig, yyDollar[3].str, nil)
		}
	case 2143:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8009
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysTrig, yyDollar[4].str, nil)
		}
	case 2144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8014
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaTrig, yyDollar[4].str, nil)
		}
	case 2145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8019
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigAll, "", nil)
		}
	case 2146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8024
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigUser, "", nil)
		}
	case 2147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8029
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrig, yyDollar[3].str, nil)
		}
	case 2148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8034
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigAll, "", nil)
		}
	case 2149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8039
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigUser, "", nil)
		}
	case 2150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8044
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRule, yyDollar[3].str, nil)
		}
	case 2151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8049
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysRule, yyDollar[4].str, nil)
		}
	case 2152:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8054
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaRule, yyDollar[4].str, nil)
		}
	case 2153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8059
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRule, yyDollar[3].str, nil)
		}
	case 2154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8064
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddInherit, "", yyDollar[2].rangevar)
		}
	case 2155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8069
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropInherit, "", yyDollar[3].rangevar)
		}
	case 2156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8074
		{
			typeName := makeTypeNameFromNodeList(yyDollar[2].list)
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddOf, "", typeName)
		}
	case 2157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8080
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOf, "", nil)
		}
	case 2158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8085
		{
			cmd := ast.NewAlterTableCmd(ast.AT_ChangeOwner, "", nil)
			cmd.Newowner = yyDollar[3].rolespec
			yyVAL.node = cmd
		}
	case 2159:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8092
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetAccessMethod, yyDollar[4].str, nil)
		}
	case 2160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8097
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetTableSpace, yyDollar[3].str, nil)
		}
	case 2161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8102
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetRelOptions, "", yyDollar[2].list)
		}
	case 2162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8107
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetRelOptions, "", yyDollar[2].list)
		}
	case 2163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8112
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ReplicaIdentity, "", yyDollar[3].node)
		}
	case 2164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8117
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRowSecurity, "", nil)
		}
	case 2165:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8122
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRowSecurity, "", nil)
		}
	case 2166:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8127
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ForceRowSecurity, "", nil)
		}
	case 2167:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8132
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_NoForceRowSecurity, "", nil)
		}
	case 2168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8136
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_GenericOptions, "", yyDollar[1].list)
		}
	case 2169:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8144
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, yyDollar[4].partboundspec, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8152
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, yyDollar[4].bval, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2171:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8159
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartitionFinalize, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8170
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8179
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8180
		{
			yyVAL.node = nil
		}
	case 2175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8184
		{
		}
	case 2176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8185
		{
		}
	case 2177:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8196
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2178:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8209
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2179:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8222
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2180:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8235
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2181:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8248
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[5].list
			objects.Append(ast.NewString(yyDollar[3].str))
			n.Objects = objects
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2182:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8263
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[7].list
			objects.Append(ast.NewString(yyDollar[5].str))
			n.Objects = objects
			n.Behavior = yyDollar[8].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2183:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8278
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2184:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8291
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8304
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2186:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8317
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2187:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8330
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = false
			n.Objects = yyDollar[4].list
			n.Behavior = yyDollar[5].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2188:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8343
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = true
			n.Objects = yyDollar[6].list
			n.Behavior = yyDollar[7].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8359
		{
			stmt := yyDollar[2].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8365
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = true
			yyVAL.stmt = stmt
		}
	case 2191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8371
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8380
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "TRANSACTION", yyDollar[2].list, false)
		}
	case 2193:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8384
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "SESSION CHARACTERISTICS AS TRANSACTION", yyDollar[5].list, false)
		}
	case 2194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8387
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8391
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8393
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "timezone", nil, false)
		}
	case 2197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8397
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "transaction_isolation", nil, false)
		}
	case 2198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8401
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "session_authorization", nil, false)
		}
	case 2199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8408
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, yyDollar[1].str, nil, false)
		}
	case 2200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8412
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET_ALL, "", nil, false)
		}
	case 2201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8418
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8419
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8423
		{
			yyVAL.stmt = ast.Stmt(yyDollar[2].vsetstmt)
		}
	case 2204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8428
		{
			yyVAL.objType = ast.OBJECT_TABLE
		}
	case 2205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8429
		{
			yyVAL.objType = ast.OBJECT_SEQUENCE
		}
	case 2206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8430
		{
			yyVAL.objType = ast.OBJECT_VIEW
		}
	case 2207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8431
		{
			yyVAL.objType = ast.OBJECT_MATVIEW
		}
	case 2208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8432
		{
			yyVAL.objType = ast.OBJECT_INDEX
		}
	case 2209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8433
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_TABLE
		}
	case 2210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8434
		{
			yyVAL.objType = ast.OBJECT_COLLATION
		}
	case 2211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8435
		{
			yyVAL.objType = ast.OBJECT_CONVERSION
		}
	case 2212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8436
		{
			yyVAL.objType = ast.OBJECT_STATISTIC_EXT
		}
	case 2213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8437
		{
			yyVAL.objType = ast.OBJECT_TSPARSER
		}
	case 2214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8438
		{
			yyVAL.objType = ast.OBJECT_TSDICTIONARY
		}
	case 2215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8439
		{
			yyVAL.objType = ast.OBJECT_TSTEMPLATE
		}
	case 2216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8440
		{
			yyVAL.objType = ast.OBJECT_TSCONFIGURATION
		}
	case 2217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8453
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8454
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8459
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8463
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8471
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode: ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:  yyDollar[1].list,
				Objargs:  yyDollar[2].list,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8483
		{
			yylex.Error("Use NONE to denote the missing argument of a unary operator.")
			return 1
		}
	case 2223:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8488
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, yyDollar[4].typnam)
		}
	case 2224:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8490
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[4].typnam)
		}
	case 2225:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8492
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, nil)
		}
	case 2226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8496
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8509
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 2228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8511
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 2229:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8515
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2230:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8526
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2231:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8537
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2232:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8548
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DATABASE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2233:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8559
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2234:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8570
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMCONSTRAINT,
				Object:     yyDollar[3].list,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2235:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8582
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2236:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8593
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2237:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8604
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2238:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8615
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2239:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8626
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2240:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8643
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2241:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8660
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2242:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:8672
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[7].rangevar,
				Subname:    yyDollar[5].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2243:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8684
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2244:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8695
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2245:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8706
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2246:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8717
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SCHEMA,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2247:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8728
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2248:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8739
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2249:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8750
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2250:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8761
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2251:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8772
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2252:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8783
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2253:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8794
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2254:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8805
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2255:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8816
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2256:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8827
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2257:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8838
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2258:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8849
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2259:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8860
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2260:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8871
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2261:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8882
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2262:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:8895
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2263:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8908
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2264:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:8921
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2265:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8934
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2266:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:8947
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2267:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8960
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[3].rangevar,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2268:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:8972
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[8].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2269:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8984
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2270:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:8997
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2271:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9010
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_RULE,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2272:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9022
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TRIGGER,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2273:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9034
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2274:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9045
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2275:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9056
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2276:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9067
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLESPACE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2277:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9078
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2278:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9089
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSPARSER,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2279:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9100
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2280:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9111
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSTEMPLATE,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2281:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9122
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2282:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9133
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2283:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9144
		{
			rv, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(err.Error())
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_ATTRIBUTE,
				RelationType: ast.OBJECT_TYPE,
				Relation:     rv,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				Behavior:     ast.DropBehavior(yyDollar[9].dropBehav),
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2284:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9170
		{
			yyVAL.ival = 0
		}
	case 2285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9172
		{
			// Combine constraint attribute bits
			newspec := yyDollar[1].ival | yyDollar[2].ival

			// Check for conflicts (NOT DEFERRABLE + INITIALLY DEFERRED)
			if (newspec & (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED)) == (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED) {
				// This would be an error in real PostgreSQL parser
			}

			yyVAL.ival = newspec
		}
	case 2286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9186
		{
			yyVAL.ival = ast.CAS_NOT_DEFERRABLE
		}
	case 2287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9187
		{
			yyVAL.ival = ast.CAS_DEFERRABLE
		}
	case 2288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9188
		{
			yyVAL.ival = ast.CAS_INITIALLY_IMMEDIATE
		}
	case 2289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9189
		{
			yyVAL.ival = ast.CAS_INITIALLY_DEFERRED
		}
	case 2290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9190
		{
			yyVAL.ival = ast.CAS_NOT_VALID
		}
	case 2291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9191
		{
			yyVAL.ival = ast.CAS_NO_INHERIT
		}
	case 2292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9195
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9200
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9205
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9213
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9217
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2297:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9221
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, yyDollar[5].node, ast.DEFELEM_UNSPEC)
		}
	case 2298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9225
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, nil, ast.DEFELEM_UNSPEC)
		}
	case 2299:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9239
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  yyDollar[7].typnam,
				Options:     yyDollar[8].list,
				SQLBody:     yyDollar[9].node,
			}
			yyVAL.stmt = stmt
		}
	case 2300:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:9253
		{
			// Handle RETURNS TABLE variant
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil, // TODO: Handle table return type
				Options:     yyDollar[11].list,
				SQLBody:     yyDollar[12].node,
			}
			// TODO: Process table_func_column_list into appropriate return type
			yyVAL.stmt = stmt
		}
	case 2301:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9269
		{
			// No explicit return type (for procedures disguised as functions)
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2302:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9284
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: true,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9299
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9300
		{
			yyVAL.list = nil
		}
	case 2305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9305
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9309
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9317
		{
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9321
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9326
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9334
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    yyDollar[2].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9343
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[2].funparammode,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9352
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9361
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    "",
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9370
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    "",
				ArgType: yyDollar[1].typnam,
			}
			yyVAL.funparam = param
		}
	case 2315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9381
		{
			yyVAL.funparammode = ast.FUNC_PARAM_IN
		}
	case 2316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9382
		{
			yyVAL.funparammode = ast.FUNC_PARAM_OUT
		}
	case 2317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9383
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9384
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9385
		{
			yyVAL.funparammode = ast.FUNC_PARAM_VARIADIC
		}
	case 2320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9389
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9393
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2322:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9395
		{
			// Handle %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				// TODO: Add %TYPE indicator
			}
		}
	case 2323:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9405
		{
			// Handle SETOF %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[2].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				Setof: true,
			}
		}
	case 2324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9417
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9418
		{
			yyVAL.list = nil
		}
	case 2326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9423
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].defelt)
			yyVAL.list = list
		}
	case 2327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9429
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9437
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].node)
		}
	case 2329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9441
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 2330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9445
		{
			yyVAL.defelt = ast.NewDefElem("transform", yyDollar[2].list)
		}
	case 2331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9449
		{
			yyVAL.defelt = ast.NewDefElem("window", ast.NewBoolean(true))
		}
	case 2332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9453
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9460
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.node = list
		}
	case 2334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9466
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 2335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9476
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[3].typnam)
			yyVAL.list = list
		}
	case 2336:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9482
		{
			yyDollar[1].list.Append(yyDollar[5].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9490
		{
			yyVAL.node = yyDollar[1].stmt
		}
	case 2338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9494
		{
			/*
			 * A compound statement is stored as a single-item list
			 * containing the list of statements as its member.  That
			 * way, the parse analysis code can tell apart an empty
			 * body from no body at all.
			 */
			list := ast.NewNodeList()
			list.Append(yyDollar[3].list)
			yyVAL.node = list
		}
	case 2339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9506
		{
			yyVAL.node = nil
		}
	case 2340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9513
		{
			yyVAL.stmt = &ast.ReturnStmt{
				ReturnVal: yyDollar[2].node,
			}
		}
	case 2341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9522
		{
			/* As in stmtmulti, discard empty statements */
			if yyDollar[2].stmt != nil {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			} else {
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9532
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9538
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9539
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9544
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9548
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2347:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:9564
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[6].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: false,
				Trigname:     yyDollar[4].str,
				Relation:     yyDollar[8].rangevar,
				Funcname:     yyDollar[14].list,
				Args:         yyDollar[16].list,
				Row:          yyDollar[10].bval,
				Timing:       int16(yyDollar[5].ival),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[11].node,
				Transitions:  yyDollar[9].list,
				Deferrable:   false,
				Initdeferred: false,
				Constrrel:    nil,
			}
			yyVAL.stmt = stmt
		}
	case 2348:
		yyDollar = yyS[yypt-21 : yypt+1]
//line postgres.y:9596
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[7].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: true,
				Trigname:     yyDollar[5].str,
				Relation:     yyDollar[9].rangevar,
				Funcname:     yyDollar[18].list,
				Args:         yyDollar[20].list,
				Row:          true,
				Timing:       int16(ast.TRIGGER_TIMING_AFTER),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[15].node,
				Transitions:  nil,
				Deferrable:   true, // Default for constraint triggers
				Initdeferred: false,
				Constrrel:    yyDollar[10].rangevar,
			}
			yyVAL.stmt = stmt
		}
	case 2349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9627
		{
			yyVAL.ival = ast.TRIGGER_TIMING_BEFORE
		}
	case 2350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9628
		{
			yyVAL.ival = ast.TRIGGER_TIMING_AFTER
		}
	case 2351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9629
		{
			yyVAL.ival = ast.TRIGGER_TIMING_INSTEAD
		}
	case 2352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9634
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9636
		{
			// Extract event types and column lists from both sides
			events1 := yyDollar[1].list.Items[0].(*ast.Integer).IVal
			events2 := yyDollar[3].list.Items[0].(*ast.Integer).IVal
			columns1 := yyDollar[1].list.Items[1]
			columns2 := yyDollar[3].list.Items[1]

			// Check for duplicate events
			if events1&events2 != 0 {
				// TODO: Generate parse error for duplicate trigger events
			}

			// Create combined result [events1|events2, combined_columns]
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(events1 | events2))

			// Concatenate column lists (if any)
			if columns1 != nil && columns2 != nil {
				// Both have columns - concatenate
				combinedCols := columns1.(*ast.NodeList)
				if columns2List, ok := columns2.(*ast.NodeList); ok {
					for _, item := range columns2List.Items {
						combinedCols.Append(item)
					}
				}
				list.Append(combinedCols)
			} else if columns1 != nil {
				list.Append(columns1)
			} else if columns2 != nil {
				list.Append(columns2)
			} else {
				list.Append(nil)
			}

			yyVAL.list = list
		}
	case 2354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9676
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_INSERT)))
			list.Append(nil) // No columns for INSERT
			yyVAL.list = list
		}
	case 2355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9683
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_DELETE)))
			list.Append(nil) // No columns for DELETE
			yyVAL.list = list
		}
	case 2356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9690
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(nil) // No columns for UPDATE
			yyVAL.list = list
		}
	case 2357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9697
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(yyDollar[3].list) // Column list for UPDATE OF
			yyVAL.list = list
		}
	case 2358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9704
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_TRUNCATE)))
			list.Append(nil) // No columns for TRUNCATE
			yyVAL.list = list
		}
	case 2359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9713
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9714
		{
			yyVAL.list = nil
		}
	case 2361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9718
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9723
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2363:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9731
		{
			trans := &ast.TriggerTransition{
				Name:    yyDollar[4].str,
				IsNew:   yyDollar[1].bval,
				IsTable: yyDollar[2].bval,
			}
			yyVAL.node = trans
		}
	case 2364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9742
		{
			yyVAL.bval = true
		}
	case 2365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9743
		{
			yyVAL.bval = false
		}
	case 2366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9747
		{
			yyVAL.bval = true
		}
	case 2367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9748
		{
			yyVAL.bval = false
		}
	case 2368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9752
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9757
		{
			yyVAL.bval = yyDollar[3].bval
		}
	case 2370:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9761
		{
			// If ROW/STATEMENT not specified, default to STATEMENT
			yyVAL.bval = false
		}
	case 2373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9773
		{
			yyVAL.bval = true
		}
	case 2374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9774
		{
			yyVAL.bval = false
		}
	case 2375:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9778
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9779
		{
			yyVAL.node = nil
		}
	case 2379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9788
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9793
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2381:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9797
		{
			yyVAL.list = nil
		}
	case 2382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9802
		{
			yyVAL.node = ast.NewString(fmt.Sprintf("%d", yyDollar[1].ival))
		}
	case 2383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9805
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9806
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9807
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9811
		{
			yyVAL.rangevar = yyDollar[2].rangevar
		}
	case 2387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9812
		{
			yyVAL.rangevar = nil
		}
	case 2388:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9825
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[4].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[5].list,
				Query:           yyDollar[8].stmt,
				Replace:         false,
				Options:         yyDollar[6].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[9].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2389:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9841
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[6].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[10].stmt,
				Replace:         true,
				Options:         yyDollar[8].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[11].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2390:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:9857
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[5].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[11].stmt,
				Replace:         false,
				Options:         yyDollar[9].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[12].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2391:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:9873
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[7].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[9].list,
				Query:           yyDollar[13].stmt,
				Replace:         true,
				Options:         yyDollar[11].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[14].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9890
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9891
		{
			yyVAL.list = nil
		}
	case 2394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9895
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2395:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9896
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2396:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9897
		{
			yyVAL.ival = int(ast.LOCAL_CHECK_OPTION)
		}
	case 2397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9898
		{
			yyVAL.ival = int(ast.NO_CHECK_OPTION)
		}
	case 2398:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9909
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = yyDollar[5].rolespec
			n.SchemaElts = yyDollar[6].list
			yyVAL.stmt = n
		}
	case 2399:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9916
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = nil
			n.SchemaElts = yyDollar[4].list
			yyVAL.stmt = n
		}
	case 2400:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9923
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = yyDollar[8].rolespec
			n.SchemaElts = yyDollar[9].list
			yyVAL.stmt = n
		}
	case 2401:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9930
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = nil
			n.SchemaElts = yyDollar[7].list
			yyVAL.stmt = n
		}
	case 2402:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9946
		{
			n := ast.NewCreateDomainStmt(yyDollar[3].list, yyDollar[5].typnam)
			// Use SplitColQualList to separate constraints and collate clause
			constraints, collClause := SplitColQualList(yyDollar[6].list)
			n.Constraints = constraints
			n.CollClause = collClause
			yyVAL.stmt = n
		}
	case 2403:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9964
		{
			n := ast.NewAlterDomainStmt('T', yyDollar[3].list)
			n.Def = yyDollar[4].node
			yyVAL.stmt = n
		}
	case 2404:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9970
		{
			n := ast.NewAlterDomainStmt('N', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2405:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9975
		{
			n := ast.NewAlterDomainStmt('O', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2406:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9980
		{
			n := ast.NewAlterDomainStmt('C', yyDollar[3].list)
			n.Def = yyDollar[5].node
			yyVAL.stmt = n
		}
	case 2407:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9986
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[6].str
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			yyVAL.stmt = n
		}
	case 2408:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9994
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[8].str
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			yyVAL.stmt = n
		}
	case 2409:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10002
		{
			n := ast.NewAlterDomainStmt('V', yyDollar[3].list)
			n.Name = yyDollar[6].str
			yyVAL.stmt = n
		}
	case 2410:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10017
		{
			// Extract actual arguments from aggr_args which returns [args, position_indicator]
			var args *ast.NodeList
			if yyDollar[5].list != nil && yyDollar[5].list.Len() > 0 {
				// First element contains the actual arguments (or nil for *)
				if firstElem, ok := yyDollar[5].list.Items[0].(*ast.NodeList); ok {
					args = firstElem
				} else if yyDollar[5].list.Items[0] == nil {
					// Special case for COUNT(*) - create a list with a single nil element
					args = ast.NewNodeList(nil)
				}
			}
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, false, yyDollar[4].list, args, yyDollar[6].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2411:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10033
		{
			// old-style (pre-8.2) syntax for CREATE AGGREGATE
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, true, yyDollar[4].list, nil, yyDollar[5].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2412:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10039
		{
			n := ast.NewDefineStmt(ast.OBJECT_OPERATOR, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2413:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10044
		{
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10049
		{
			// Shell type (identified by lack of definition)
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, nil, false, false)
			yyVAL.stmt = n
		}
	case 2415:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10055
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSPARSER, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2416:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10060
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSDICTIONARY, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2417:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10065
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSTEMPLATE, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2418:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10070
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSCONFIGURATION, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2419:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10075
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2420:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10080
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, yyDollar[7].list, true, false)
			yyVAL.stmt = n
		}
	case 2421:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10085
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, ast.NewNodeList(yyDollar[5].list), false, false)
			yyVAL.stmt = n
		}
	case 2422:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10090
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, ast.NewNodeList(yyDollar[8].list), true, false)
			yyVAL.stmt = n
		}
	case 2423:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10095
		{
			typevar, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(fmt.Sprintf("invalid type name: %v", err))
				return 1
			}

			n := ast.NewCompositeTypeStmt(typevar, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2424:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10106
		{
			n := ast.NewCreateEnumStmt(yyDollar[3].list, yyDollar[7].list)
			yyVAL.stmt = n
		}
	case 2425:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10111
		{
			n := ast.NewCreateRangeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2426:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10125
		{
			n := ast.NewCreateSeqStmt(yyDollar[4].rangevar, yyDollar[5].list, 0, false, false)
			yyVAL.stmt = n
		}
	case 2427:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10130
		{
			n := ast.NewCreateSeqStmt(yyDollar[7].rangevar, yyDollar[8].list, 0, false, true)
			yyVAL.stmt = n
		}
	case 2428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10137
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2429:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10138
		{
			yyVAL.list = nil
		}
	case 2430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10141
		{
		}
	case 2431:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10142
		{
		}
	case 2432:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10153
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[3].rangevar, yyDollar[4].list, false, false)
		}
	case 2433:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10157
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[5].rangevar, yyDollar[6].list, false, true)
		}
	case 2434:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10170
		{
			n := ast.NewCreateExtensionStmt(yyDollar[3].str, false, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2435:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10175
		{
			n := ast.NewCreateExtensionStmt(yyDollar[6].str, true, yyDollar[8].list)
			yyVAL.stmt = n
		}
	case 2436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10183
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10192
		{
			yyVAL.list = nil
		}
	case 2438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10199
		{
			yyVAL.defelt = ast.NewDefElem("schema", ast.NewString(yyDollar[2].str))
		}
	case 2439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10203
		{
			yyVAL.defelt = ast.NewDefElem("version", ast.NewString(yyDollar[2].str))
		}
	case 2440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10207
		{
			yylex.Error("CREATE EXTENSION ... FROM is no longer supported")
			return 1
		}
	case 2441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10212
		{
			yyVAL.defelt = ast.NewDefElem("cascade", ast.NewBoolean(true))
		}
	case 2442:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10225
		{
			n := ast.NewAlterExtensionStmt(yyDollar[3].str, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10233
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2444:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10242
		{
			yyVAL.list = nil
		}
	case 2445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10249
		{
			yyVAL.defelt = ast.NewDefElem("to", ast.NewString(yyDollar[2].str))
		}
	case 2446:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10262
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), ast.NewString(yyDollar[6].str))
		}
	case 2447:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10266
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), yyDollar[6].list)
		}
	case 2448:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10270
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_AGGREGATE), yyDollar[6].objwithargs)
		}
	case 2449:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10274
		{
			// CAST takes two TypeNames as a NodeList
			list := ast.NewNodeList(yyDollar[7].typnam)
			list.Append(yyDollar[9].typnam)
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_CAST), list)
		}
	case 2450:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10281
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_DOMAIN), yyDollar[6].typnam)
		}
	case 2451:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10285
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_FUNCTION), yyDollar[6].objwithargs)
		}
	case 2452:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10289
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPERATOR), yyDollar[6].objwithargs)
		}
	case 2453:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10293
		{
			// OPERATOR CLASS takes method name + class name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then class name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPCLASS), list)
		}
	case 2454:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10302
		{
			// OPERATOR FAMILY takes method name + family name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then family name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPFAMILY), list)
		}
	case 2455:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10311
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_PROCEDURE), yyDollar[6].objwithargs)
		}
	case 2456:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10315
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_ROUTINE), yyDollar[6].objwithargs)
		}
	case 2457:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10319
		{
			list := ast.NewNodeList(yyDollar[7].typnam, ast.NewString(yyDollar[9].str))
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TRANSFORM), list)
		}
	case 2458:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10324
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TYPE), yyDollar[6].typnam)
		}
	case 2459:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10336
		{
			yyVAL.stmt = ast.NewCreateFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2460:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10342
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2461:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10346
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, nil)
		}
	case 2462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10352
		{
			yyVAL.defelt = ast.NewDefElem("handler", yyDollar[2].list)
		}
	case 2463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10353
		{
			yyVAL.defelt = ast.NewDefElem("handler", nil)
		}
	case 2464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10354
		{
			yyVAL.defelt = ast.NewDefElem("validator", yyDollar[2].list)
		}
	case 2465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10355
		{
			yyVAL.defelt = ast.NewDefElem("validator", nil)
		}
	case 2466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10359
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10360
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10364
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10365
		{
			yyVAL.list = nil
		}
	case 2470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10369
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10370
		{
			result := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				result.Append(item)
			}
			yyVAL.list = result
		}
	case 2472:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10387
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].str, yyDollar[9].str, yyDollar[10].list, false)
		}
	case 2473:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:10392
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[6].str, yyDollar[7].str, yyDollar[8].str, yyDollar[12].str, yyDollar[13].list, true)
		}
	case 2474:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10398
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].list, true)
		}
	case 2475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10402
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, nil, true)
		}
	case 2476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10406
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, "", yyDollar[4].list, false)
		}
	case 2477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10412
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2478:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10413
		{
			yyVAL.str = ""
		}
	case 2479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10417
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10418
		{
			yyVAL.str = ""
		}
	case 2481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10422
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10423
		{
			yyVAL.str = ""
		}
	case 2483:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10436
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[6].list, yyDollar[8].list, yyDollar[10].str, yyDollar[11].list, nil, false)
		}
	case 2484:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:10442
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[9].list, yyDollar[11].list, yyDollar[13].str, yyDollar[14].list, nil, true)
		}
	case 2485:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:10448
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[8].list, ast.NewNodeList(yyDollar[7].rangevar), yyDollar[11].str, yyDollar[12].list, yyDollar[9].partboundspec, false)
		}
	case 2486:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:10454
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[11].list, ast.NewNodeList(yyDollar[10].rangevar), yyDollar[14].str, yyDollar[15].list, yyDollar[12].partboundspec, true)
		}
	case 2487:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10466
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list, false)
		}
	case 2488:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10470
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[8].rolespec, yyDollar[10].str, yyDollar[11].list, true)
		}
	case 2489:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10476
		{
			yyVAL.stmt = ast.NewAlterUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list)
		}
	case 2490:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10482
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, false)
		}
	case 2491:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10486
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[7].rolespec, yyDollar[9].str, true)
		}
	case 2492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10492
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 2493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10493
		{
			yyVAL.rolespec = ast.NewRoleSpec(ast.ROLESPEC_CURRENT_USER, "")
		}
	case 2494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10498
		{
			// For aggregates like COUNT(*)
			// Return a list with [nil, -1] matching PostgreSQL's list_make2(NIL, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(nil, ast.NewInteger(-1))
		}
	case 2495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10504
		{
			// Regular aggregate arguments
			// Return a list with [args, -1] matching PostgreSQL's list_make2($2, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(yyDollar[2].list, ast.NewInteger(-1))
		}
	case 2496:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10510
		{
			// Ordered-set aggregate without direct arguments
			// Return a list with [args, 0] matching PostgreSQL's list_make2($4, makeInteger(0))
			yyVAL.list = ast.NewNodeList(yyDollar[4].list, ast.NewInteger(0))
		}
	case 2497:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10516
		{
			// Hypothetical-set aggregate
			// This is the only case requiring consistency checking in PostgreSQL
			result, err := makeOrderedSetArgs(yyDollar[2].list, yyDollar[5].list)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.list = result
		}
	case 2498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10530
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10534
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10542
		{
			yyVAL.node = yyDollar[1].funparam
		}
	case 2501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10549
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10556
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10560
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10568
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2505:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10575
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			n.NewValIsAfter = true
			yyVAL.stmt = n
		}
	case 2506:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10583
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = false
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2507:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10592
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = true
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2508:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10601
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.OldVal = yyDollar[6].str
			n.NewVal = yyDollar[8].str
			n.SkipIfNewValExists = false
			yyVAL.stmt = n
		}
	case 2509:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10609
		{
			// Following PostgreSQL's approach - DROP VALUE is parsed but not implemented
			// PostgreSQL throws an error saying "dropping an enum value is not implemented"
			yylex.Error("dropping an enum value is not implemented")
			return 1
		}
	case 2510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10625
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10627
		{
			yyVAL.list = nil
		}
	case 2512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10632
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10634
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10639
		{
			if constraint, ok := yyDollar[3].node.(*ast.Constraint); ok {
				constraint.Conname = yyDollar[2].str
				yyVAL.node = constraint
			} else {
				yyVAL.node = yyDollar[3].node
			}
		}
	case 2515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10648
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2516:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10653
		{
			n := ast.NewConstraint(ast.CONSTR_CHECK)
			n.RawExpr = yyDollar[3].node
			n.CookedExpr = "" // Empty string, not nil
			// Process constraint attributes from $5
			processConstraintAttributeSpec(yyDollar[5].ival, n)
			// PostgreSQL: n->initially_valid = !n->skip_validation
			n.InitiallyValid = !n.SkipValidation
			yyVAL.node = n
		}
	case 2517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10664
		{
			n := ast.NewConstraint(ast.CONSTR_NOTNULL)
			// In PostgreSQL, domain NOT NULL constraints have keys = list_make1(makeString("value"))
			n.Keys = ast.NewNodeList(ast.NewString("value"))
			// Process constraint attributes from $3
			processConstraintAttributeSpec(yyDollar[3].ival, n)
			// PostgreSQL sets initially_valid = true for NOT NULL (no NOT VALID support yet)
			n.InitiallyValid = true
			yyVAL.node = n
		}
	case 2518:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10684
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[7].stmt, yyDollar[5].into, ast.OBJECT_MATVIEW, false, false)
			/* cram additional flags into the IntoClause */
			yyDollar[5].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[5].into.SkipData = !yyDollar[8].bval
			yyVAL.stmt = ctas
		}
	case 2519:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10692
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[10].stmt, yyDollar[8].into, ast.OBJECT_MATVIEW, false, true)
			/* cram additional flags into the IntoClause */
			yyDollar[8].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[8].into.SkipData = !yyDollar[11].bval
			yyVAL.stmt = ctas
		}
	case 2520:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10703
		{
			n := ast.NewRefreshMatViewStmt(yyDollar[4].bval, !yyDollar[6].bval, yyDollar[5].rangevar)
			yyVAL.stmt = n
		}
	case 2521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10709
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 2522:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10710
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 2523:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10715
		{
			yyVAL.into = &ast.IntoClause{
				Rel:            yyDollar[1].rangevar,
				ColNames:       yyDollar[2].list,
				AccessMethod:   yyDollar[3].str,
				Options:        yyDollar[4].list,
				TableSpaceName: yyDollar[5].str,
			}
		}
	case 2524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10727
		{
			yyVAL.bval = true
		}
	case 2525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10728
		{
			yyVAL.bval = false
		}
	case 2526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10729
		{
			yyVAL.bval = true
		}
	case 2527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10734
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].stmt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10743
		{
			yyVAL.list = nil
		}
	case 2533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10754
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10756
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_CURRENT, yyDollar[1].str, nil, false)
		}
	case 2535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10760
		{
			args := ast.NewNodeList(yyDollar[3].node)
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "timezone", args, false)
		}
	case 2536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10765
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "catalog", args, false)
		}
	case 2537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10770
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "search_path", args, false)
		}
	case 2538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10775
		{
			var args *ast.NodeList
			if yyDollar[2].str != "" {
				args = ast.NewNodeList(ast.NewString(yyDollar[2].str))
			}
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "client_encoding", args, false)
		}
	case 2539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10783
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "role", args, false)
		}
	case 2540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10788
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "session_authorization", args, false)
		}
	case 2541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10793
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, "session_authorization", nil, false)
		}
	case 2542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10797
		{
			var value string
			if yyDollar[3].ival == int(ast.XMLOPTION_DOCUMENT) {
				value = "document"
			} else {
				value = "content"
			}
			args := ast.NewNodeList(ast.NewString(value))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "xmloption", args, false)
		}
	case 2543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10808
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "transaction_snapshot", args, false)
		}
	case 2544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10816
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10820
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10824
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10828
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10835
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10839
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 2550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10846
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10852
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10859
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10860
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10864
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10865
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10866
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10867
		{
			yyVAL.node = ast.NewString("default")
		}
	case 2558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10868
		{
			yyVAL.node = ast.NewString("local")
		}
	case 2559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10869
		{
			yyVAL.node = ast.NewString("true")
		}
	case 2560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10870
		{
			yyVAL.node = ast.NewString("false")
		}
	case 2561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10871
		{
			yyVAL.node = ast.NewString("on")
		}
	case 2562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10872
		{
			yyVAL.node = ast.NewString("off")
		}
	case 2563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10876
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10877
		{
			yyVAL.str = "default"
		}
	case 2565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10878
		{
			yyVAL.str = ""
		}
	case 2566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10882
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10883
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10887
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10888
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10889
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10890
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10894
		{
			yyVAL.ival = int(ast.XMLOPTION_DOCUMENT)
		}
	case 2573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10895
		{
			yyVAL.ival = int(ast.XMLOPTION_CONTENT)
		}
	case 2574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10900
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10906
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10911
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10919
		{
			yyVAL.node = ast.NewDefElem("transaction_isolation", ast.NewString(yyDollar[3].str))
		}
	case 2578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10923
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(true))
		}
	case 2579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10927
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(false))
		}
	case 2580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10931
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(true))
		}
	case 2581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10935
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(false))
		}
	case 2582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10941
		{
			yyVAL.str = "read uncommitted"
		}
	case 2583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10942
		{
			yyVAL.str = "read committed"
		}
	case 2584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10943
		{
			yyVAL.str = "repeatable read"
		}
	case 2585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10944
		{
			yyVAL.str = "serializable"
		}
	case 2586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10948
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2587:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10949
		{
			yyVAL.list = nil
		}
	case 2588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10953
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 2589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10954
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10955
		{
			yyVAL.node = yyDollar[1].list
		}
	case 2591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10958
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10959
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10960
		{
			yyVAL.node = ast.NewString("none")
		}
	case 2594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10964
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10965
		{
			yyVAL.list = nil
		}
	case 2596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10969
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10970
		{
			yyVAL.node = nil
		}
	case 2598:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10974
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10979
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10984
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10992
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10996
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_SET
			yyVAL.defelt = elem
		}
	case 2603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11002
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_ADD
			yyVAL.defelt = elem
		}
	case 2604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11008
		{
			yyVAL.defelt = ast.NewDefElemExtended("", yyDollar[2].str, nil, ast.DEFELEM_DROP)
		}
	case 2605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11014
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11015
		{
			yyVAL.str = ""
		}
	case 2607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11019
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_NOTHING, "")
		}
	case 2608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11020
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_FULL, "")
		}
	case 2609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11021
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_DEFAULT, "")
		}
	case 2610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11022
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_INDEX, yyDollar[3].str)
		}
	case 2611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11026
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11031
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11036
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11043
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11044
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2616:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11055
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[9].list, nil)
		}
	case 2617:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:11059
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[11].list, yyDollar[8].list)
		}
	case 2618:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11065
		{
			yyVAL.stmt = ast.NewAlterEventTrigStmt(yyDollar[4].str, ast.TriggerFires(yyDollar[5].ival))
		}
	case 2619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11071
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_ORIGIN)
		}
	case 2620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11072
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_REPLICA)
		}
	case 2621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11073
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ALWAYS)
		}
	case 2622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11074
		{
			yyVAL.ival = int(ast.TRIGGER_DISABLED)
		}
	case 2623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11079
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11084
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2625:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11092
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[4].list)
		}
	case 2626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11099
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(ast.NewString(yyDollar[1].str))
		}
	case 2627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11104
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2628:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11118
		{
			yyVAL.stmt = ast.NewCreateTableSpaceStmt(yyDollar[3].str, yyDollar[4].rolespec, yyDollar[6].str, yyDollar[7].list)
		}
	case 2629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11124
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 2630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11125
		{
			yyVAL.rolespec = nil
		}
	case 2631:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11130
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, false)
		}
	case 2632:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11134
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, true)
		}
	case 2633:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11149
		{
			yyVAL.stmt = ast.NewCreatePolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].bval, yyDollar[7].str, yyDollar[8].list, yyDollar[9].node, yyDollar[10].node)
		}
	case 2634:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11157
		{
			yyVAL.stmt = ast.NewAlterPolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].list, yyDollar[7].node, yyDollar[8].node)
		}
	case 2635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11164
		{
			// Check for "permissive" or "restrictive" (case-insensitive)
			if strings.EqualFold(yyDollar[2].str, "permissive") {
				yyVAL.bval = true
			} else if strings.EqualFold(yyDollar[2].str, "restrictive") {
				yyVAL.bval = false
			} else {
				// Parser will error on invalid value
				yylex.Error("unrecognized row security option")
				return 1
			}
		}
	case 2636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11176
		{
			yyVAL.bval = true
		}
	case 2637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11180
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2638:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11181
		{
			yyVAL.str = "all"
		}
	case 2639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11185
		{
			yyVAL.str = "all"
		}
	case 2640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11186
		{
			yyVAL.str = "select"
		}
	case 2641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11187
		{
			yyVAL.str = "insert"
		}
	case 2642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11188
		{
			yyVAL.str = "update"
		}
	case 2643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11189
		{
			yyVAL.str = "delete"
		}
	case 2644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11193
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2645:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11194
		{
			// Default to PUBLIC when no TO clause is specified
			publicRole := ast.NewRoleSpec(ast.ROLESPEC_PUBLIC, "")
			yyVAL.list = ast.NewNodeList(publicRole)
		}
	case 2646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11202
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2647:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11203
		{
			yyVAL.list = nil
		}
	case 2648:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11207
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2649:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11208
		{
			yyVAL.node = nil
		}
	case 2650:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11212
		{
			yyVAL.node = yyDollar[4].node
		}
	case 2651:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11213
		{
			yyVAL.node = nil
		}
	case 2652:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11224
		{
			yyVAL.stmt = ast.NewCreateAmStmt(yyDollar[4].str, ast.AmType(yyDollar[6].ival), yyDollar[8].list)
		}
	case 2653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11230
		{
			yyVAL.ival = int(ast.AMTYPE_INDEX)
		}
	case 2654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11231
		{
			yyVAL.ival = int(ast.AMTYPE_TABLE)
		}
	case 2655:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11242
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[3].list, yyDollar[4].list, yyDollar[6].list, yyDollar[8].list, "", false, false)
		}
	case 2656:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11246
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[6].list, yyDollar[7].list, yyDollar[9].list, yyDollar[11].list, "", false, true)
		}
	case 2657:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11253
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[3].list, yyDollar[6].node, false)
		}
	case 2658:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11257
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[5].list, yyDollar[8].node, true)
		}
	case 2659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11263
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].statelem)
		}
	case 2660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11264
		{
			yyDollar[1].list.Append(yyDollar[3].statelem)
			yyVAL.list = yyDollar[1].list
		}
	case 2661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11268
		{
			yyVAL.statelem = ast.NewStatsElem(yyDollar[1].str)
		}
	case 2662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11269
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[1].node)
		}
	case 2663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11270
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[2].node)
		}
	case 2664:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11281
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, false, yyDollar[4].list)
		}
	case 2665:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11285
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, true, yyDollar[7].list)
		}
	case 2666:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11289
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, yyDollar[5].list, false, yyDollar[6].list)
		}
	case 2667:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11296
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, yyDollar[5].list, nil, ast.AP_SetOptions)
		}
	case 2668:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11300
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_AddObjects)
		}
	case 2669:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11304
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_SetObjects)
		}
	case 2670:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11308
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_DropObjects)
		}
	case 2671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11314
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11315
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2673:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11320
		{
			pubTable := ast.NewPublicationTable(yyDollar[2].rangevar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_TABLE, pubTable)
		}
	case 2674:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11325
		{
			yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_TABLES_IN_SCHEMA, yyDollar[4].str)
		}
	case 2675:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11329
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA)
		}
	case 2676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11333
		{
			// If either a row filter or column list is specified, create a PublicationTable object
			if yyDollar[2].list != nil || yyDollar[3].node != nil {
				// Create a simple RangeVar from the ColId
				rangeVar := ast.NewRangeVar(yyDollar[1].str, "", "")
				pubTable := ast.NewPublicationTable(rangeVar, yyDollar[3].node, yyDollar[2].list)
				yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
			} else {
				yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_CONTINUATION, yyDollar[1].str)
			}
		}
	case 2677:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11345
		{
			rangeVar := makeRangeVarFromQualifiedName(yyDollar[1].str, yyDollar[2].list, -1)
			pubTable := ast.NewPublicationTable(rangeVar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2678:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11351
		{
			pubTable := ast.NewPublicationTable(yyDollar[1].rangevar, yyDollar[3].node, yyDollar[2].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11356
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_CONTINUATION)
		}
	case 2680:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11362
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2681:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11363
		{
			yyVAL.node = nil
		}
	case 2682:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11374
		{
			yyVAL.stmt = ast.NewCreateSubscriptionStmt(yyDollar[3].str, yyDollar[5].str, yyDollar[7].list, yyDollar[8].list)
		}
	case 2683:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11381
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_OPTIONS, "", nil, yyDollar[5].list)
		}
	case 2684:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11385
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_CONNECTION, yyDollar[5].str, nil, nil)
		}
	case 2685:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11389
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_REFRESH, "", nil, yyDollar[6].list)
		}
	case 2686:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11393
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ADD_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2687:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11397
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_DROP_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2688:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11401
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SET_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2689:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11405
		{
			enableOpt := ast.NewNodeList()
			enableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(true)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, enableOpt)
		}
	case 2690:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11411
		{
			disableOpt := ast.NewNodeList()
			disableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(false)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, disableOpt)
		}
	case 2691:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11417
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SKIP, "", nil, yyDollar[5].list)
		}
	case 2692:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11430
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, yyDollar[10].objwithargs, ast.CoercionContext(yyDollar[11].ival), false)
		}
	case 2693:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11434
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), false)
		}
	case 2694:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11438
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), true)
		}
	case 2695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11444
		{
			yyVAL.ival = int(ast.COERCION_IMPLICIT)
		}
	case 2696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11445
		{
			yyVAL.ival = int(ast.COERCION_ASSIGNMENT)
		}
	case 2697:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11446
		{
			yyVAL.ival = int(ast.COERCION_EXPLICIT)
		}
	case 2698:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:11458
		{
			yyVAL.stmt = ast.NewCreateOpClassStmt(yyDollar[4].list, yyDollar[11].list, yyDollar[10].str, yyDollar[8].typnam, yyDollar[13].list, yyDollar[5].bval)
		}
	case 2699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11464
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2700:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11465
		{
			yyVAL.list = nil
		}
	case 2701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11469
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11470
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2703:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11475
		{
			// Create ObjectWithArgs for simple operator
			owa := ast.NewObjectWithArgs(yyDollar[3].list, nil, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, yyDollar[4].list)
		}
	case 2704:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11481
		{
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, yyDollar[3].objwithargs, yyDollar[4].list)
		}
	case 2705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11485
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[3].objwithargs, nil)
		}
	case 2706:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11489
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[6].objwithargs, yyDollar[4].list)
		}
	case 2707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11493
		{
			yyVAL.node = ast.NewOpClassItemStorage(yyDollar[2].typnam)
		}
	case 2708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11499
		{
			yyVAL.bval = true
		}
	case 2709:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11500
		{
			yyVAL.bval = false
		}
	case 2710:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11504
		{
			yyVAL.list = nil
		}
	case 2711:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11505
		{
			yyVAL.list = yyDollar[4].list
		}
	case 2712:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11506
		{
			yyVAL.list = nil
		}
	case 2713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11510
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].typnam)
		}
	case 2714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11511
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2715:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11522
		{
			yyVAL.stmt = ast.NewCreateOpFamilyStmt(yyDollar[4].list, yyDollar[6].str)
		}
	case 2716:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11535
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, false, yyDollar[8].list)
		}
	case 2717:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11539
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, true, yyDollar[8].list)
		}
	case 2718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11545
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11546
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2720:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11551
		{
			// Create ObjectWithArgs for operator with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, nil)
		}
	case 2721:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11557
		{
			// Create ObjectWithArgs for function with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, owa, nil)
		}
	case 2722:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11572
		{
			yyVAL.stmt = ast.NewCreateConversionStmt(yyDollar[4].list, yyDollar[6].str, yyDollar[8].str, yyDollar[10].list, yyDollar[2].bval)
		}
	case 2723:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11585
		{
			yyVAL.stmt = ast.NewCreateTransformStmt(yyDollar[2].bval, yyDollar[5].typnam, yyDollar[7].str, linitial(yyDollar[9].list), lsecond(yyDollar[9].list))
		}
	case 2724:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11592
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs)  // fromsql
			yyVAL.list.Append(yyDollar[11].objwithargs) // tosql
		}
	case 2725:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11598
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[11].objwithargs) // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs)  // tosql
		}
	case 2726:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11604
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs) // fromsql
			yyVAL.list.Append(nil)                     // tosql
		}
	case 2727:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11610
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(nil)                     // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs) // tosql
		}
	case 2728:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11625
		{
			// Parameterless CREATE LANGUAGE is now treated as CREATE EXTENSION
			yyVAL.stmt = ast.NewCreateExtensionStmt(yyDollar[6].str, yyDollar[2].bval, nil)
		}
	case 2729:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11631
		{
			yyVAL.stmt = ast.NewCreatePLangStmt(yyDollar[2].bval, yyDollar[6].str, yyDollar[8].list, yyDollar[9].list, yyDollar[10].list, yyDollar[3].bval)
		}
	case 2730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11637
		{
			yyVAL.bval = true
		}
	case 2731:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11638
		{
			yyVAL.bval = false
		}
	case 2732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11643
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2733:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11644
		{
			yyVAL.list = nil
		}
	case 2734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11648
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2735:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11649
		{
			yyVAL.list = nil
		}
	case 2736:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11653
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2737:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11654
		{
			yyVAL.list = nil
		}
	case 2738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11657
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_ALL
		}
	case 2739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11658
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DISTINCT
		}
	case 2740:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11659
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DEFAULT
		}
	case 2741:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11664
		{
			yyVAL.groupClause = &ast.GroupClause{
				Distinct: yyDollar[3].setquant == ast.SET_QUANTIFIER_DISTINCT,
				List:     yyDollar[4].list,
			}
		}
	case 2742:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11671
		{
			yyVAL.groupClause = nil
		}
	case 2743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11677
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2744:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11678
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11682
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11683
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11684
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11685
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11686
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11691
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_EMPTY, ast.NewNodeList(), 0)
		}
	case 2751:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11698
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_ROLLUP, yyDollar[3].list, 0)
		}
	case 2752:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11705
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_CUBE, yyDollar[3].list, 0)
		}
	case 2753:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11712
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_SETS, yyDollar[4].list, 0)
		}
	case 2754:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11721
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2755:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11722
		{
			yyVAL.node = nil
		}
	case 2756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11729
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11733
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2758:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11734
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2759:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11739
		{
			sortBy := ast.NewSortBy(yyDollar[1].node, ast.SORTBY_USING, ast.SortByNulls(yyDollar[4].ival), 0)
			// Use qual_all_Op (NodeList) directly for UseOp
			sortBy.UseOp = yyDollar[3].list
			yyVAL.node = sortBy
		}
	case 2760:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11746
		{
			yyVAL.node = ast.NewSortBy(yyDollar[1].node, ast.SortByDir(yyDollar[2].ival), ast.SortByNulls(yyDollar[3].ival), 0)
		}
	case 2761:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11757
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2762:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11759
		{
			yyVAL.list = nil
		}
	case 2763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11764
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[1].windef)
		}
	case 2764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11769
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[3].windef)
		}
	case 2765:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11777
		{
			n := yyDollar[3].windef
			n.Name = yyDollar[1].str
			yyVAL.windef = n
		}
	case 2766:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11786
		{
			yyVAL.windef = yyDollar[2].windef
		}
	case 2767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11788
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			yyVAL.windef = n
		}
	case 2768:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11795
		{
			yyVAL.windef = nil
		}
	case 2769:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11800
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.PartitionClause = yyDollar[3].list
			n.OrderClause = yyDollar[4].list

			n.FrameOptions = yyDollar[5].windef.FrameOptions
			n.StartOffset = yyDollar[5].windef.StartOffset
			n.EndOffset = yyDollar[5].windef.EndOffset
			yyVAL.windef = n
		}
	case 2770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11814
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2771:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11815
		{
			yyVAL.str = ""
		}
	case 2772:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11819
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2773:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11820
		{
			yyVAL.list = nil
		}
	case 2774:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11825
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_RANGE
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11832
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_ROWS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2776:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11839
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_GROUPS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2777:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11846
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11857
		{
			n := yyDollar[1].windef
			// reject invalid cases - these would be runtime errors in PostgreSQL
			if (n.FrameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (n.FrameOptions & ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 {
				yylex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			n.FrameOptions |= ast.FRAMEOPTION_END_CURRENT_ROW
			yyVAL.windef = n
		}
	case 2779:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11871
		{
			n1 := yyDollar[2].windef
			n2 := yyDollar[4].windef

			// form merged options
			frameOptions := n1.FrameOptions
			// shift converts START_ options to END_ options
			frameOptions |= (n2.FrameOptions << 1)
			frameOptions |= ast.FRAMEOPTION_BETWEEN

			// reject invalid cases
			if (frameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (frameOptions & ast.FRAMEOPTION_END_UNBOUNDED_PRECEDING) != 0 {
				yylex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_CURRENT_ROW) != 0 &&
				(frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 {
				yylex.Error("frame starting from current row cannot have preceding rows")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 &&
				((frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 ||
					(frameOptions&ast.FRAMEOPTION_END_CURRENT_ROW) != 0) {
				yylex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			n1.FrameOptions = frameOptions
			n1.EndOffset = n2.StartOffset
			yyVAL.windef = n1
		}
	case 2780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11906
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_PRECEDING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2781:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11914
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2782:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11922
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_CURRENT_ROW
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11930
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_PRECEDING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2784:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11938
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_FOLLOWING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2785:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11948
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_CURRENT_ROW
		}
	case 2786:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11949
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_GROUP
		}
	case 2787:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11950
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_TIES
		}
	case 2788:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11951
		{
			yyVAL.ival = 0
		}
	case 2789:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11952
		{
			yyVAL.ival = 0
		}
	case 2790:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11961
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[2].node
		}
	case 2791:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11966
		{
			yyVAL.selectLimit = yyDollar[2].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[1].node
		}
	case 2792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11971
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11975
		{
			n := &selectLimit{}
			n.limitOffset = yyDollar[1].node
			n.limitCount = nil
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11985
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2795:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11986
		{
			yyVAL.selectLimit = nil
		}
	case 2796:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11991
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[2].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2797:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11999
		{
			// Disabled because it was too confusing - PostgreSQL error
			yylex.Error("LIMIT #,# syntax is not supported. Use separate LIMIT and OFFSET clauses.")
			return 1
		}
	case 2798:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12006
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2799:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12014
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2800:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12022
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2801:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12030
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2802:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12041
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2803:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12044
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12048
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12050
		{
			/* LIMIT ALL is represented as a NULL constant */
			yyVAL.node = ast.NewA_Const(ast.NewNull(), -1)
		}
	case 2806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12057
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12070
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2808:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12072
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("+")}}, nil, yyDollar[2].node, -1)
		}
	case 2809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12076
		{
			// Create a unary minus expression
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("-")}}, nil, yyDollar[2].node, -1)
		}
	case 2810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12083
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), -1)
		}
	case 2811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12084
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), -1)
		}
	case 2812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12089
		{
			yyVAL.ival = 0
		}
	case 2813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12090
		{
			yyVAL.ival = 0
		}
	case 2814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12094
		{
			yyVAL.ival = 0
		}
	case 2815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12095
		{
			yyVAL.ival = 0
		}
	case 2816:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12108
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2817:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12114
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_START)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 2818:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12120
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2819:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12126
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2820:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12132
		{
			stmt := ast.NewSavepointStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 2821:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12137
		{
			stmt := ast.NewReleaseStmt(yyDollar[3].str)
			yyVAL.stmt = stmt
		}
	case 2822:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12142
		{
			stmt := ast.NewReleaseStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 2823:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12147
		{
			stmt := ast.NewRollbackToStmt(yyDollar[5].str)
			yyVAL.stmt = stmt
		}
	case 2824:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12152
		{
			stmt := ast.NewRollbackToStmt(yyDollar[4].str)
			yyVAL.stmt = stmt
		}
	case 2825:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12157
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_PREPARE)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2826:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12163
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2827:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12169
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2828:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12178
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2829:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12184
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_BEGIN)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 2830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12191
		{
		}
	case 2831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12192
		{
		}
	case 2832:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12193
		{
		}
	case 2833:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12197
		{
			yyVAL.bval = true
		}
	case 2834:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12198
		{
			yyVAL.bval = false
		}
	case 2835:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12199
		{
			yyVAL.bval = false
		}
	case 2836:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12212
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_ROLE, yyDollar[3].str, yyDollar[5].list)
		}
	case 2837:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12219
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_USER, yyDollar[3].str, yyDollar[5].list)
		}
	case 2838:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12226
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_GROUP, yyDollar[3].str, yyDollar[5].list)
		}
	case 2839:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12233
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 2840:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12239
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 2841:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12248
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2842:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12252
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2843:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12256
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2844:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12260
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2845:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12266
		{
			yyVAL.str = ""
		}
	case 2846:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12267
		{
			yyVAL.str = yyDollar[3].str
		}
	case 2847:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12272
		{
			options := ast.NewNodeList(ast.NewDefElem("rolemembers", yyDollar[6].list))
			stmt := ast.NewAlterRoleStmt(yyDollar[3].rolespec, options)
			stmt.Action = yyDollar[4].ival
			yyVAL.stmt = stmt
		}
	case 2848:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12282
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2849:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12286
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2850:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12290
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2851:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12294
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2852:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12298
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2853:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12302
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2854:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12310
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 2855:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12321
		{
			yyVAL.list = nil
		}
	case 2856:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12326
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 2857:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12337
		{
			yyVAL.list = nil
		}
	case 2858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12341
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2859:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12343
		{
			yyVAL.defelt = ast.NewDefElem("sysid", ast.NewInteger(yyDollar[2].ival))
		}
	case 2860:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12347
		{
			yyVAL.defelt = ast.NewDefElem("adminmembers", yyDollar[2].list)
		}
	case 2861:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12351
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 2862:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12355
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 2863:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12359
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 2864:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12366
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[2].str))
		}
	case 2865:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12370
		{
			yyVAL.defelt = ast.NewDefElem("password", nil)
		}
	case 2866:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12374
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[3].str))
		}
	case 2867:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12378
		{
			yylex.Error("UNENCRYPTED PASSWORD is no longer supported")
			return 1
		}
	case 2868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12383
		{
			yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(true))
		}
	case 2869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12387
		{
			// Handle identifiers like PostgreSQL does with string comparisons
			if yyDollar[1].str == "superuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nosuperuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createrole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreaterole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createdb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreatedb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(false))
			} else if yyDollar[1].str == "login" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nologin" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(false))
			} else if yyDollar[1].str == "replication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(true))
			} else if yyDollar[1].str == "noreplication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(false))
			} else if yyDollar[1].str == "bypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nobypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(false))
			} else if yyDollar[1].str == "noinherit" {
				yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(false))
			} else {
				// Return error for unrecognized role option
				yylex.Error("unrecognized role option \"" + yyDollar[1].str + "\"")
				yyVAL.defelt = nil
			}
		}
	case 2870:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12422
		{
			yyVAL.defelt = ast.NewDefElem("connectionlimit", ast.NewInteger(yyDollar[3].ival))
		}
	case 2871:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12426
		{
			yyVAL.defelt = ast.NewDefElem("validUntil", ast.NewString(yyDollar[3].str))
		}
	case 2872:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12430
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 2873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12436
		{
			yyVAL.ival = 1
		}
	case 2874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12437
		{
			yyVAL.ival = -1
		}
	case 2875:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12449
		{
			n := ast.NewGrantStmt(yyDollar[4].privtarget.objtype, yyDollar[4].privtarget.objs, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = yyDollar[4].privtarget.targtype
			n.GrantOption = yyDollar[7].bval
			n.Grantor = yyDollar[8].rolespec
			yyVAL.stmt = n
		}
	case 2876:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12461
		{
			n := ast.NewRevokeStmt(yyDollar[4].privtarget.objtype, yyDollar[4].privtarget.objs, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = yyDollar[4].privtarget.targtype
			n.Grantor = yyDollar[7].rolespec
			n.Behavior = yyDollar[8].dropBehav
			yyVAL.stmt = n
		}
	case 2877:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12470
		{
			n := ast.NewRevokeStmt(yyDollar[7].privtarget.objtype, yyDollar[7].privtarget.objs, yyDollar[5].list, yyDollar[9].list)
			n.Targtype = yyDollar[7].privtarget.targtype
			n.GrantOption = true
			n.Grantor = yyDollar[10].rolespec
			n.Behavior = yyDollar[11].dropBehav
			yyVAL.stmt = n
		}
	case 2878:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12482
		{
			stmt := ast.NewGrantRoleStmt(yyDollar[2].list, yyDollar[4].list)
			stmt.Grantor = yyDollar[5].rolespec
			yyVAL.stmt = stmt
		}
	case 2879:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12488
		{
			stmt := ast.NewGrantRoleStmtWithOptions(yyDollar[2].list, yyDollar[4].list, yyDollar[6].list)
			stmt.Grantor = yyDollar[7].rolespec
			yyVAL.stmt = stmt
		}
	case 2880:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12497
		{
			stmt := ast.NewRevokeRoleStmt(yyDollar[2].list, yyDollar[4].list)
			stmt.Grantor = yyDollar[5].rolespec
			stmt.Behavior = yyDollar[6].dropBehav
			yyVAL.stmt = stmt
		}
	case 2881:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:12504
		{
			opt := ast.NewDefElem(yyDollar[2].str, ast.NewBoolean(false))
			stmt := ast.NewRevokeRoleStmt(yyDollar[5].list, yyDollar[7].list)
			stmt.Opt = &ast.NodeList{Items: []ast.Node{opt}}
			stmt.Grantor = yyDollar[8].rolespec
			stmt.Behavior = yyDollar[9].dropBehav
			yyVAL.stmt = stmt
		}
	case 2882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12516
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12518
		{
			yyVAL.list = nil
		}
	case 2884:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12520
		{
			yyVAL.list = nil
		}
	case 2885:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12522
		{
			ap := ast.NewAccessPriv("", yyDollar[3].list)
			yyVAL.list = ast.NewNodeList(ap)
		}
	case 2886:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12527
		{
			ap := ast.NewAccessPriv("", yyDollar[4].list)
			yyVAL.list = ast.NewNodeList(ap)
		}
	case 2887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12533
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].accesspriv)
		}
	case 2888:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12534
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].accesspriv)
			yyVAL.list = yyDollar[1].list
		}
	case 2889:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12538
		{
			yyVAL.accesspriv = ast.NewAccessPriv("SELECT", yyDollar[2].list)
		}
	case 2890:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12542
		{
			yyVAL.accesspriv = ast.NewAccessPriv("REFERENCES", yyDollar[2].list)
		}
	case 2891:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12546
		{
			yyVAL.accesspriv = ast.NewAccessPriv("CREATE", yyDollar[2].list)
		}
	case 2892:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12550
		{
			yyVAL.accesspriv = ast.NewAccessPriv("ALTER SYSTEM", nil)
		}
	case 2893:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12554
		{
			yyVAL.accesspriv = ast.NewAccessPriv(yyDollar[1].str, yyDollar[2].list)
		}
	case 2894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12564
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[1].list,
			}
		}
	case 2895:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12572
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[2].list,
			}
		}
	case 2896:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12580
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_SEQUENCE,
				objs:     yyDollar[2].list,
			}
		}
	case 2897:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12588
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FDW,
				objs:     yyDollar[4].list,
			}
		}
	case 2898:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12596
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FOREIGN_SERVER,
				objs:     yyDollar[3].list,
			}
		}
	case 2899:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12604
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FUNCTION,
				objs:     yyDollar[2].list,
			}
		}
	case 2900:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12612
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_PROCEDURE,
				objs:     yyDollar[2].list,
			}
		}
	case 2901:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12620
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_ROUTINE,
				objs:     yyDollar[2].list,
			}
		}
	case 2902:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12628
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_DATABASE,
				objs:     yyDollar[2].list,
			}
		}
	case 2903:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12636
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_DOMAIN,
				objs:     yyDollar[2].list,
			}
		}
	case 2904:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12644
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_LANGUAGE,
				objs:     yyDollar[2].list,
			}
		}
	case 2905:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12652
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_LARGEOBJECT,
				objs:     yyDollar[3].list,
			}
		}
	case 2906:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12660
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_PARAMETER_ACL,
				objs:     yyDollar[2].list,
			}
		}
	case 2907:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12668
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_SCHEMA,
				objs:     yyDollar[2].list,
			}
		}
	case 2908:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12676
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLESPACE,
				objs:     yyDollar[2].list,
			}
		}
	case 2909:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12684
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TYPE,
				objs:     yyDollar[2].list,
			}
		}
	case 2910:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12692
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[5].list,
			}
		}
	case 2911:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12700
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_SEQUENCE,
				objs:     yyDollar[5].list,
			}
		}
	case 2912:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12708
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_FUNCTION,
				objs:     yyDollar[5].list,
			}
		}
	case 2913:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12716
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_PROCEDURE,
				objs:     yyDollar[5].list,
			}
		}
	case 2914:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12724
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_ROUTINE,
				objs:     yyDollar[5].list,
			}
		}
	case 2915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12735
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rolespec)
		}
	case 2916:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12736
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 2917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12740
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 2918:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12741
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 2919:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12746
		{
			yyVAL.bval = true
		}
	case 2920:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12747
		{
			yyVAL.bval = false
		}
	case 2921:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12751
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12752
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2923:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12757
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 2924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12763
		{
			yyVAL.node = ast.NewBoolean(true)
		}
	case 2925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12764
		{
			yyVAL.node = ast.NewBoolean(true)
		}
	case 2926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12765
		{
			yyVAL.node = ast.NewBoolean(false)
		}
	case 2927:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12768
		{
			yyVAL.rolespec = yyDollar[3].rolespec
		}
	case 2928:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12769
		{
			yyVAL.rolespec = nil
		}
	case 2929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12774
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2930:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12778
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12786
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2932:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12790
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 2933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12795
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2934:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12796
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2935:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12800
		{
			n := ast.NewRangeTableSample(nil, yyDollar[2].list, yyDollar[4].list, yyDollar[6].node, 0)
			yyVAL.node = n
		}
	case 2936:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12808
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2937:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12812
		{
			yyVAL.node = nil
		}
	case 2938:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12826
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_FUNCTION, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 2939:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12831
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_PROCEDURE, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 2940:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12836
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_ROUTINE, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 2941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12844
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2942:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12845
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2943:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12851
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(false))
		}
	case 2944:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12855
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 2945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12859
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 2946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12863
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("immutable"))
		}
	case 2947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12867
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("stable"))
		}
	case 2948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12871
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("volatile"))
		}
	case 2949:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12875
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 2950:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12879
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 2951:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12883
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 2952:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12887
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 2953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12891
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(true))
		}
	case 2954:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12895
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(false))
		}
	case 2955:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12899
		{
			yyVAL.defelt = ast.NewDefElem("cost", yyDollar[2].node)
		}
	case 2956:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12903
		{
			yyVAL.defelt = ast.NewDefElem("rows", yyDollar[2].node)
		}
	case 2957:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12907
		{
			yyVAL.defelt = ast.NewDefElem("support", yyDollar[2].list)
		}
	case 2958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12911
		{
			/* we abuse the normal content of a DefElem here */
			yyVAL.defelt = ast.NewDefElem("set", yyDollar[1].vsetstmt)
		}
	case 2959:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12916
		{
			yyVAL.defelt = ast.NewDefElem("parallel", ast.NewString(yyDollar[2].str))
		}
	case 2960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12922
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2961:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12923
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2962:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12928
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2963:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12932
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12936
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12942
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 2966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12943
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12944
		{
			yyVAL.node = yyDollar[1].list
		}
	case 2968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12945
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12946
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2972:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12957
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = yyDollar[1].list
			n.Objargs = ast.ExtractArgTypes(yyDollar[2].list)
			n.ObjfuncArgs = yyDollar[2].list
			yyVAL.objwithargs = n
		}
	case 2973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12970
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = ast.NewNodeList(ast.NewString(yyDollar[1].str))
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 2974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12977
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = ast.NewNodeList(ast.NewString(yyDollar[1].str))
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 2975:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12984
		{
			n := ast.NewEmptyObjectWithArgs()
			nameList := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			// Append indirection elements
			for i := 0; i < yyDollar[2].list.Len(); i++ {
				nameList.Append(yyDollar[2].list.Items[i])
			}
			n.Objname = nameList
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 2976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12998
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 2977:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13000
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 2978:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13012
		{
			n := ast.NewAlterTypeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2979:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13020
		{
			relation, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error("invalid type name")
				return 1
			}
			n := ast.NewAlterTableStmt(relation, yyDollar[4].list)
			n.Objtype = ast.OBJECT_TYPE // Mark this as a composite type alteration
			yyVAL.stmt = n
		}
	case 2980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13033
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2981:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13034
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2982:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13040
		{
			n := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			n.Behavior = yyDollar[4].dropBehav
			yyVAL.node = n
		}
	case 2983:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13047
		{
			n := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			yyVAL.node = n
		}
	case 2984:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13055
		{
			n := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			yyVAL.node = n
		}
	case 2985:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:13063
		{
			def := ast.NewColumnDef(yyDollar[3].str, yyDollar[6].typnam, -1)
			n := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, def)
			n.Behavior = yyDollar[8].dropBehav
			/* We only use these fields of the ColumnDef node */
			def.TypeName = yyDollar[6].typnam
			if collClause, ok := yyDollar[7].node.(*ast.CollateClause); ok {
				def.Collclause = collClause
			}
			def.RawDefault = nil
			yyVAL.node = n
		}
	case 2986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13084
		{
			yyVAL.ival = int(ast.CMD_SELECT)
		}
	case 2987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13085
		{
			yyVAL.ival = int(ast.CMD_UPDATE)
		}
	case 2988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13086
		{
			yyVAL.ival = int(ast.CMD_DELETE)
		}
	case 2989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13087
		{
			yyVAL.ival = int(ast.CMD_INSERT)
		}
	}
	goto yystack /* stack new state and value */
}
