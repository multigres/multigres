// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
	"strings"
)

// Parser state for handling complex grammar constructs
var parserState struct {
	// Future parser state variables can be added here
}

// SelectLimit - Private struct for the result of opt_select_limit production
// Mirrors PostgreSQL's SelectLimit from gram.y:126-132
type selectLimit struct {
	limitOffset ast.Node
	limitCount  ast.Node
	limitOption ast.LimitOption
}

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:43
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string
	bval    bool
	byt     byte
	rune    rune

	// AST nodes
	node        ast.Node
	stmt        ast.Stmt
	stmtList    []ast.Stmt
	list        *ast.NodeList
	groupClause *ast.GroupClause
	selectLimit *selectLimit

	// Specific AST node types
	into          *ast.IntoClause
	onconflict    *ast.OnConflictClause
	windef        *ast.WindowDef
	createStmt    *ast.CreateStmt
	indexStmt     *ast.IndexStmt
	alterStmt     *ast.AlterTableStmt
	dropStmt      *ast.DropStmt
	columnDef     *ast.ColumnDef
	constraint    *ast.Constraint
	indexElem     *ast.IndexElem
	alterCmd      *ast.AlterTableCmd
	with          *ast.WithClause
	rangevar      *ast.RangeVar
	objType       ast.ObjectType
	dropBehav     ast.DropBehavior
	setquant      ast.SetQuantifier
	typnam        *ast.TypeName
	partspec      *ast.PartitionSpec
	partboundspec *ast.PartitionBoundSpec
	oncommit      ast.OnCommitAction
	defelt        *ast.DefElem
	target        *ast.ResTarget            // For select targets, insert columns
	alias         *ast.Alias                // For table and column aliases
	jtype         ast.JoinType              // For join type specifications
	jexpr         *ast.JoinExpr             // For joined table expressions
	keyaction     *ast.KeyAction            // For foreign key actions
	keyactions    *ast.KeyActions           // For foreign key action sets
	funparam      *ast.FunctionParameter    // For function parameters
	funparammode  ast.FunctionParameterMode // For parameter modes (IN/OUT/INOUT/VARIADIC)
	vsetstmt      *ast.VariableSetStmt      // For SET/RESET statements
	rolespec      *ast.RoleSpec
	objwithargs   *ast.ObjectWithArgs
	statelem      *ast.StatsElem

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const UNKNOWN = 57392
const WHEN = 57393
const IS = 57394
const ISNULL = 57395
const NOTNULL = 57396
const AT = 57397
const TIME = 57398
const ZONE = 57399
const LOCAL = 57400
const SYMMETRIC = 57401
const ASYMMETRIC = 57402
const TO = 57403
const OPERATOR = 57404
const SELECT = 57405
const FROM = 57406
const WHERE = 57407
const ONLY = 57408
const TABLE = 57409
const LIMIT = 57410
const OFFSET = 57411
const BY = 57412
const GROUP_P = 57413
const HAVING = 57414
const INTO = 57415
const ON = 57416
const JOIN = 57417
const INNER_P = 57418
const LEFT = 57419
const RIGHT = 57420
const FULL = 57421
const OUTER_P = 57422
const CROSS = 57423
const NATURAL = 57424
const USING = 57425
const RECURSIVE = 57426
const MATERIALIZED = 57427
const VALUES = 57428
const SEARCH = 57429
const BREADTH = 57430
const DEPTH = 57431
const CYCLE = 57432
const FIRST_P = 57433
const LAST_P = 57434
const SET = 57435
const ASC = 57436
const DESC = 57437
const INSERT = 57438
const UPDATE = 57439
const DELETE_P = 57440
const MERGE = 57441
const RETURNING = 57442
const CONFLICT = 57443
const OVERRIDING = 57444
const USER = 57445
const SYSTEM_P = 57446
const MATCHED = 57447
const THEN = 57448
const SOURCE = 57449
const TARGET = 57450
const DO = 57451
const NOTHING = 57452
const COPY = 57453
const PROGRAM = 57454
const STDIN = 57455
const STDOUT = 57456
const BINARY = 57457
const FREEZE = 57458
const CONSTRAINT = 57459
const VERBOSE = 57460
const ANALYZE = 57461
const CURRENT_P = 57462
const CURSOR = 57463
const OF = 57464
const COLUMNS = 57465
const ORDINALITY = 57466
const XMLTABLE = 57467
const JSON_TABLE = 57468
const ROWS = 57469
const PATH = 57470
const PASSING = 57471
const FOR = 57472
const NESTED = 57473
const REF_P = 57474
const XMLNAMESPACES = 57475
const ARRAY = 57476
const ERROR = 57477
const ERROR_P = 57478
const EMPTY = 57479
const EMPTY_P = 57480
const OBJECT_P = 57481
const WRAPPER = 57482
const CONDITIONAL = 57483
const UNCONDITIONAL = 57484
const QUOTES = 57485
const OMIT = 57486
const KEEP = 57487
const SCALAR = 57488
const STRING_P = 57489
const ENCODING = 57490
const DELIMITER = 57491
const DELIMITERS = 57492
const HEADER_P = 57493
const QUOTE = 57494
const FORCE = 57495
const CSV = 57496
const VALUE_P = 57497
const JSON_QUERY = 57498
const JSON_VALUE = 57499
const JSON_SERIALIZE = 57500
const JSON_OBJECT = 57501
const JSON_ARRAY = 57502
const JSON_OBJECTAGG = 57503
const JSON_ARRAYAGG = 57504
const JSON_EXISTS = 57505
const JSON_SCALAR = 57506
const FORMAT = 57507
const JSON = 57508
const UTF8 = 57509
const WITHOUT = 57510
const BIT = 57511
const NUMERIC = 57512
const INTEGER = 57513
const SMALLINT = 57514
const BIGINT = 57515
const REAL = 57516
const FLOAT_P = 57517
const DOUBLE_P = 57518
const PRECISION = 57519
const CHARACTER = 57520
const CHAR_P = 57521
const VARCHAR = 57522
const NATIONAL = 57523
const NCHAR = 57524
const VARYING = 57525
const TIMESTAMP = 57526
const INTERVAL = 57527
const INT_P = 57528
const DECIMAL_P = 57529
const DEC = 57530
const BOOLEAN_P = 57531
const VARIADIC = 57532
const ABORT_P = 57533
const ABSENT = 57534
const ABSOLUTE_P = 57535
const ACCESS = 57536
const ACTION = 57537
const ADD_P = 57538
const ADMIN = 57539
const AFTER = 57540
const AGGREGATE = 57541
const ALSO = 57542
const ALWAYS = 57543
const ANALYSE = 57544
const ASENSITIVE = 57545
const ASSERTION = 57546
const ASSIGNMENT = 57547
const ATOMIC = 57548
const ATTACH = 57549
const ATTRIBUTE = 57550
const AUTHORIZATION = 57551
const BACKWARD = 57552
const BEFORE = 57553
const BEGIN_P = 57554
const CACHE = 57555
const CALL = 57556
const CALLED = 57557
const CASCADED = 57558
const CATALOG_P = 57559
const CHAIN = 57560
const CHARACTERISTICS = 57561
const CHECKPOINT = 57562
const CLASS = 57563
const CLOSE = 57564
const CLUSTER = 57565
const COALESCE = 57566
const COLLATION = 57567
const COMMENT = 57568
const COMMENTS = 57569
const COMMIT = 57570
const COMMITTED = 57571
const COMPRESSION = 57572
const CONFIGURATION = 57573
const CONNECTION = 57574
const CONSTRAINTS = 57575
const CONTENT_P = 57576
const CONTINUE_P = 57577
const CONVERSION_P = 57578
const COST = 57579
const CUBE = 57580
const CURRENT_CATALOG = 57581
const CURRENT_DATE = 57582
const CURRENT_ROLE = 57583
const CURRENT_SCHEMA = 57584
const CURRENT_TIME = 57585
const CURRENT_TIMESTAMP = 57586
const CURRENT_USER = 57587
const DATA_P = 57588
const DATABASE = 57589
const DAY_P = 57590
const DEALLOCATE = 57591
const DECLARE = 57592
const DEFAULTS = 57593
const DEFERRABLE = 57594
const DEFERRED = 57595
const DEFINER = 57596
const DEPENDS = 57597
const DETACH = 57598
const DICTIONARY = 57599
const DISABLE_P = 57600
const DISCARD = 57601
const DOCUMENT_P = 57602
const DOMAIN_P = 57603
const EACH = 57604
const ELSE = 57605
const ENABLE_P = 57606
const ENCRYPTED = 57607
const END_P = 57608
const ENUM_P = 57609
const EVENT = 57610
const EXCEPT = 57611
const EXCLUDE = 57612
const EXCLUDING = 57613
const EXCLUSIVE = 57614
const EXECUTE = 57615
const EXPLAIN = 57616
const EXPRESSION = 57617
const EXTENSION = 57618
const EXTERNAL = 57619
const EXTRACT = 57620
const FAMILY = 57621
const FETCH = 57622
const FILTER = 57623
const FINALIZE = 57624
const FOLLOWING = 57625
const FOREIGN = 57626
const FORWARD = 57627
const FUNCTION = 57628
const FUNCTIONS = 57629
const GENERATED = 57630
const GLOBAL = 57631
const GRANT = 57632
const GRANTED = 57633
const GREATEST = 57634
const GROUPING = 57635
const GROUPS = 57636
const HANDLER = 57637
const HOLD = 57638
const HOUR_P = 57639
const IDENTITY_P = 57640
const IMMEDIATE = 57641
const IMMUTABLE = 57642
const IMPLICIT_P = 57643
const IMPORT_P = 57644
const INCLUDE = 57645
const INCLUDING = 57646
const INCREMENT = 57647
const INDENT = 57648
const INDEX = 57649
const INDEXES = 57650
const INHERIT = 57651
const INHERITS = 57652
const INITIALLY = 57653
const INLINE_P = 57654
const INPUT_P = 57655
const INSENSITIVE = 57656
const INSTEAD = 57657
const INTERSECT = 57658
const INVOKER = 57659
const ISOLATION = 57660
const KEYS = 57661
const LABEL = 57662
const LANGUAGE = 57663
const LARGE_P = 57664
const LATERAL_P = 57665
const LEAKPROOF = 57666
const LEAST = 57667
const LEADING = 57668
const LEVEL = 57669
const LISTEN = 57670
const LOAD = 57671
const LOCALTIME = 57672
const LOCALTIMESTAMP = 57673
const LOCATION = 57674
const LOCK_P = 57675
const LOCKED = 57676
const LOGGED = 57677
const MAPPING = 57678
const MATCH = 57679
const MAXVALUE = 57680
const MERGE_ACTION = 57681
const METHOD = 57682
const MINUTE_P = 57683
const MINVALUE = 57684
const MODE = 57685
const MONTH_P = 57686
const MOVE = 57687
const NAME_P = 57688
const NAMES = 57689
const NEW = 57690
const NEXT = 57691
const NFC = 57692
const NFD = 57693
const NFKC = 57694
const NFKD = 57695
const NO = 57696
const NONE = 57697
const NORMALIZE = 57698
const NORMALIZED = 57699
const NOTIFY = 57700
const NOWAIT = 57701
const NULLIF = 57702
const OUT_P = 57703
const OVERLAY = 57704
const OVERLAPS = 57705
const OWNED = 57706
const OWNER = 57707
const PARALLEL = 57708
const PARAMETER = 57709
const PARSER = 57710
const PARTIAL = 57711
const PARTITION = 57712
const PASSWORD = 57713
const PLACING = 57714
const PLAN = 57715
const PLANS = 57716
const POLICY = 57717
const POSITION = 57718
const PRECEDING = 57719
const PREPARE = 57720
const PREPARED = 57721
const PRESERVE = 57722
const PRIMARY = 57723
const PRIOR = 57724
const PRIVILEGES = 57725
const PROCEDURAL = 57726
const PROCEDURE = 57727
const PROCEDURES = 57728
const PUBLICATION = 57729
const RANGE = 57730
const READ = 57731
const REASSIGN = 57732
const RECHECK = 57733
const REFERENCES = 57734
const REFERENCING = 57735
const REFRESH = 57736
const REINDEX = 57737
const RELATIVE_P = 57738
const RELEASE = 57739
const RENAME = 57740
const REPEATABLE = 57741
const REPLICA = 57742
const RESET = 57743
const RESTART = 57744
const RETURN = 57745
const RETURNS = 57746
const REVOKE = 57747
const ROLE = 57748
const ROLLBACK = 57749
const ROLLUP = 57750
const ROUTINE = 57751
const ROUTINES = 57752
const ROW = 57753
const RULE = 57754
const SAVEPOINT = 57755
const SCHEMA = 57756
const SCHEMAS = 57757
const SCROLL = 57758
const SECOND_P = 57759
const SECURITY = 57760
const SEQUENCE = 57761
const SEQUENCES = 57762
const SERIALIZABLE = 57763
const SERVER = 57764
const SESSION = 57765
const SESSION_USER = 57766
const SETS = 57767
const SETOF = 57768
const SHARE = 57769
const SHOW = 57770
const SIMPLE = 57771
const SKIP = 57772
const SNAPSHOT = 57773
const SOME = 57774
const SQL_P = 57775
const STABLE = 57776
const STANDALONE_P = 57777
const START = 57778
const STATEMENT = 57779
const STATISTICS = 57780
const STORAGE = 57781
const STORED = 57782
const STRICT_P = 57783
const STRIP_P = 57784
const SUBSCRIPTION = 57785
const SUBSTRING = 57786
const SUPPORT = 57787
const SYSID = 57788
const SYSTEM_USER = 57789
const TABLES = 57790
const TABLESPACE = 57791
const TABLESAMPLE = 57792
const TEMP = 57793
const TEMPLATE = 57794
const TEMPORARY = 57795
const TEXT_P = 57796
const TIES = 57797
const TRAILING = 57798
const TRANSACTION = 57799
const TRANSFORM = 57800
const TREAT = 57801
const TRIGGER = 57802
const TRIM = 57803
const TRUNCATE = 57804
const TRUSTED = 57805
const TYPE_P = 57806
const TYPES_P = 57807
const UESCAPE = 57808
const UNBOUNDED = 57809
const UNCOMMITTED = 57810
const UNENCRYPTED = 57811
const UNION = 57812
const UNIQUE = 57813
const UNLISTEN = 57814
const UNLOGGED = 57815
const UNTIL = 57816
const VACUUM = 57817
const VALID = 57818
const VALIDATE = 57819
const VALIDATOR = 57820
const VERSION_P = 57821
const VIEW = 57822
const VIEWS = 57823
const VOLATILE = 57824
const WHITESPACE_P = 57825
const WINDOW = 57826
const WITHIN = 57827
const WORK = 57828
const WRITE = 57829
const XML_P = 57830
const XMLATTRIBUTES = 57831
const XMLCONCAT = 57832
const XMLELEMENT = 57833
const XMLEXISTS = 57834
const XMLFOREST = 57835
const XMLPARSE = 57836
const XMLPI = 57837
const XMLROOT = 57838
const XMLSERIALIZE = 57839
const YEAR_P = 57840
const YES_P = 57841
const INOUT = 57842
const OTHERS = 57843
const OLD = 57844
const KEY = 57845
const OFF = 57846
const OIDS = 57847
const OPTION = 57848
const OPTIONS = 57849
const OVER = 57850
const ORDER = 57851
const ANY = 57852
const BOTH = 57853
const CAST = 57854
const CHECK = 57855
const COLUMN = 57856
const FORMAT_LA = 57857
const NOT_LA = 57858
const NULLS_LA = 57859
const WITH_LA = 57860
const WITHOUT_LA = 57861
const MODE_TYPE_NAME = 57862
const MODE_PLPGSQL_EXPR = 57863
const MODE_PLPGSQL_ASSIGN1 = 57864
const MODE_PLPGSQL_ASSIGN2 = 57865
const MODE_PLPGSQL_ASSIGN3 = 57866
const UMINUS = 57867

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"UNKNOWN",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"JOIN",
	"INNER_P",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER_P",
	"CROSS",
	"NATURAL",
	"USING",
	"RECURSIVE",
	"MATERIALIZED",
	"VALUES",
	"SEARCH",
	"BREADTH",
	"DEPTH",
	"CYCLE",
	"FIRST_P",
	"LAST_P",
	"SET",
	"ASC",
	"DESC",
	"INSERT",
	"UPDATE",
	"DELETE_P",
	"MERGE",
	"RETURNING",
	"CONFLICT",
	"OVERRIDING",
	"USER",
	"SYSTEM_P",
	"MATCHED",
	"THEN",
	"SOURCE",
	"TARGET",
	"DO",
	"NOTHING",
	"COPY",
	"PROGRAM",
	"STDIN",
	"STDOUT",
	"BINARY",
	"FREEZE",
	"CONSTRAINT",
	"VERBOSE",
	"ANALYZE",
	"CURRENT_P",
	"CURSOR",
	"OF",
	"COLUMNS",
	"ORDINALITY",
	"XMLTABLE",
	"JSON_TABLE",
	"ROWS",
	"PATH",
	"PASSING",
	"FOR",
	"NESTED",
	"REF_P",
	"XMLNAMESPACES",
	"ARRAY",
	"ERROR",
	"ERROR_P",
	"EMPTY",
	"EMPTY_P",
	"OBJECT_P",
	"WRAPPER",
	"CONDITIONAL",
	"UNCONDITIONAL",
	"QUOTES",
	"OMIT",
	"KEEP",
	"SCALAR",
	"STRING_P",
	"ENCODING",
	"DELIMITER",
	"DELIMITERS",
	"HEADER_P",
	"QUOTE",
	"FORCE",
	"CSV",
	"VALUE_P",
	"JSON_QUERY",
	"JSON_VALUE",
	"JSON_SERIALIZE",
	"JSON_OBJECT",
	"JSON_ARRAY",
	"JSON_OBJECTAGG",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_SCALAR",
	"FORMAT",
	"JSON",
	"UTF8",
	"WITHOUT",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"ABORT_P",
	"ABSENT",
	"ABSOLUTE_P",
	"ACCESS",
	"ACTION",
	"ADD_P",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALSO",
	"ALWAYS",
	"ANALYSE",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"BACKWARD",
	"BEFORE",
	"BEGIN_P",
	"CACHE",
	"CALL",
	"CALLED",
	"CASCADED",
	"CATALOG_P",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATION",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPRESSION",
	"CONFIGURATION",
	"CONNECTION",
	"CONSTRAINTS",
	"CONTENT_P",
	"CONTINUE_P",
	"CONVERSION_P",
	"COST",
	"CUBE",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"DATA_P",
	"DATABASE",
	"DAY_P",
	"DEALLOCATE",
	"DECLARE",
	"DEFAULTS",
	"DEFERRABLE",
	"DEFERRED",
	"DEFINER",
	"DEPENDS",
	"DETACH",
	"DICTIONARY",
	"DISABLE_P",
	"DISCARD",
	"DOCUMENT_P",
	"DOMAIN_P",
	"EACH",
	"ELSE",
	"ENABLE_P",
	"ENCRYPTED",
	"END_P",
	"ENUM_P",
	"EVENT",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXCLUSIVE",
	"EXECUTE",
	"EXPLAIN",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"EXTRACT",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FINALIZE",
	"FOLLOWING",
	"FOREIGN",
	"FORWARD",
	"FUNCTION",
	"FUNCTIONS",
	"GENERATED",
	"GLOBAL",
	"GRANT",
	"GRANTED",
	"GREATEST",
	"GROUPING",
	"GROUPS",
	"HANDLER",
	"HOLD",
	"HOUR_P",
	"IDENTITY_P",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT_P",
	"IMPORT_P",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INDEX",
	"INDEXES",
	"INHERIT",
	"INHERITS",
	"INITIALLY",
	"INLINE_P",
	"INPUT_P",
	"INSENSITIVE",
	"INSTEAD",
	"INTERSECT",
	"INVOKER",
	"ISOLATION",
	"KEYS",
	"LABEL",
	"LANGUAGE",
	"LARGE_P",
	"LATERAL_P",
	"LEAKPROOF",
	"LEAST",
	"LEADING",
	"LEVEL",
	"LISTEN",
	"LOAD",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCATION",
	"LOCK_P",
	"LOCKED",
	"LOGGED",
	"MAPPING",
	"MATCH",
	"MAXVALUE",
	"MERGE_ACTION",
	"METHOD",
	"MINUTE_P",
	"MINVALUE",
	"MODE",
	"MONTH_P",
	"MOVE",
	"NAME_P",
	"NAMES",
	"NEW",
	"NEXT",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NO",
	"NONE",
	"NORMALIZE",
	"NORMALIZED",
	"NOTIFY",
	"NOWAIT",
	"NULLIF",
	"OUT_P",
	"OVERLAY",
	"OVERLAPS",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PARSER",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECEDING",
	"PREPARE",
	"PREPARED",
	"PRESERVE",
	"PRIMARY",
	"PRIOR",
	"PRIVILEGES",
	"PROCEDURAL",
	"PROCEDURE",
	"PROCEDURES",
	"PUBLICATION",
	"RANGE",
	"READ",
	"REASSIGN",
	"RECHECK",
	"REFERENCES",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE_P",
	"RELEASE",
	"RENAME",
	"REPEATABLE",
	"REPLICA",
	"RESET",
	"RESTART",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLE",
	"ROLLBACK",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"RULE",
	"SAVEPOINT",
	"SCHEMA",
	"SCHEMAS",
	"SCROLL",
	"SECOND_P",
	"SECURITY",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSION_USER",
	"SETS",
	"SETOF",
	"SHARE",
	"SHOW",
	"SIMPLE",
	"SKIP",
	"SNAPSHOT",
	"SOME",
	"SQL_P",
	"STABLE",
	"STANDALONE_P",
	"START",
	"STATEMENT",
	"STATISTICS",
	"STORAGE",
	"STORED",
	"STRICT_P",
	"STRIP_P",
	"SUBSCRIPTION",
	"SUBSTRING",
	"SUPPORT",
	"SYSID",
	"SYSTEM_USER",
	"TABLES",
	"TABLESPACE",
	"TABLESAMPLE",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TEXT_P",
	"TIES",
	"TRAILING",
	"TRANSACTION",
	"TRANSFORM",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUNCATE",
	"TRUSTED",
	"TYPE_P",
	"TYPES_P",
	"UESCAPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNENCRYPTED",
	"UNION",
	"UNIQUE",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VERSION_P",
	"VIEW",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE_P",
	"WINDOW",
	"WITHIN",
	"WORK",
	"WRITE",
	"XML_P",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"YEAR_P",
	"YES_P",
	"INOUT",
	"OTHERS",
	"OLD",
	"KEY",
	"OFF",
	"OIDS",
	"OPTION",
	"OPTIONS",
	"OVER",
	"ORDER",
	"ANY",
	"BOTH",
	"CAST",
	"CHECK",
	"COLUMN",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"'<'",
	"'>'",
	"'='",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"';'",
	"','",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:12502

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 70,
	540, 70,
	-2, 1563,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 73,
	1, 1476,
	26, 1476,
	36, 1476,
	74, 1476,
	100, 1476,
	532, 1476,
	540, 1476,
	-2, 1481,
	-1, 76,
	67, 1893,
	84, 1893,
	85, 2530,
	236, 2717,
	307, 2060,
	419, 1893,
	480, 1893,
	-2, 83,
	-1, 89,
	68, 1480,
	69, 1480,
	130, 1480,
	269, 1480,
	280, 1480,
	316, 1480,
	470, 1480,
	509, 1480,
	-2, 1482,
	-1, 99,
	1, 70,
	540, 70,
	-2, 1563,
	-1, 141,
	85, 2529,
	-2, 1892,
	-1, 216,
	61, 288,
	64, 288,
	527, 288,
	533, 288,
	-2, 2573,
	-1, 630,
	68, 1465,
	69, 1465,
	130, 1465,
	280, 1465,
	-2, 1483,
	-1, 636,
	68, 1466,
	69, 1466,
	130, 1466,
	280, 1466,
	-2, 1486,
	-1, 690,
	84, 1893,
	480, 1893,
	-2, 82,
	-1, 692,
	209, 71,
	-2, 2536,
	-1, 794,
	7, 1393,
	16, 1393,
	17, 1393,
	531, 1393,
	-2, 89,
	-1, 795,
	7, 1394,
	16, 1394,
	17, 1394,
	531, 1394,
	-2, 90,
	-1, 820,
	93, 2853,
	398, 2096,
	401, 2853,
	-2, 1989,
	-1, 824,
	93, 2853,
	398, 2096,
	401, 2853,
	-2, 1989,
	-1, 946,
	68, 1465,
	69, 1465,
	130, 1465,
	280, 1465,
	-2, 1487,
	-1, 1001,
	7, 1195,
	531, 1195,
	-2, 469,
	-1, 1016,
	7, 520,
	16, 520,
	17, 520,
	531, 520,
	-2, 1243,
	-1, 1038,
	7, 1437,
	-2, 470,
	-1, 1046,
	7, 1407,
	-2, 453,
	-1, 1047,
	7, 1442,
	531, 1442,
	-2, 454,
	-1, 1048,
	7, 1414,
	-2, 455,
	-1, 1049,
	7, 1442,
	531, 1442,
	-2, 456,
	-1, 1050,
	7, 1442,
	531, 1442,
	-2, 457,
	-1, 1051,
	7, 1401,
	-2, 459,
	-1, 1052,
	7, 1401,
	-2, 460,
	-1, 1053,
	7, 1444,
	-2, 463,
	-1, 1054,
	7, 1404,
	-2, 467,
	-1, 1055,
	7, 1405,
	-2, 468,
	-1, 1057,
	7, 1442,
	531, 1442,
	-2, 484,
	-1, 1058,
	7, 1401,
	-2, 488,
	-1, 1059,
	7, 1408,
	-2, 493,
	-1, 1060,
	7, 1406,
	-2, 496,
	-1, 1061,
	7, 1440,
	-2, 498,
	-1, 1062,
	7, 1440,
	-2, 499,
	-1, 1063,
	7, 1425,
	531, 1425,
	-2, 503,
	-1, 1216,
	6, 1989,
	12, 1989,
	534, 1989,
	535, 1989,
	-2, 1982,
	-1, 1413,
	127, 2815,
	411, 2815,
	-2, 1068,
	-1, 1447,
	21, 1367,
	432, 1367,
	510, 1367,
	-2, 830,
	-1, 1449,
	21, 1369,
	432, 1369,
	510, 1369,
	-2, 777,
	-1, 1454,
	1, 646,
	26, 646,
	36, 646,
	64, 646,
	65, 646,
	68, 646,
	69, 646,
	71, 646,
	72, 646,
	73, 646,
	74, 646,
	100, 646,
	130, 646,
	269, 646,
	280, 646,
	316, 646,
	470, 646,
	484, 646,
	509, 646,
	515, 646,
	532, 646,
	540, 646,
	541, 646,
	-2, 1471,
	-1, 1459,
	21, 1449,
	432, 1449,
	510, 1449,
	-2, 1445,
	-1, 1916,
	68, 1481,
	69, 1481,
	130, 1481,
	269, 1481,
	280, 1481,
	316, 1481,
	470, 1481,
	509, 1481,
	-2, 1164,
	-1, 1926,
	7, 1330,
	531, 1330,
	-2, 1213,
	-1, 2144,
	117, 83,
	307, 2060,
	460, 83,
	-2, 1893,
	-1, 2194,
	536, 104,
	-2, 2401,
	-1, 2222,
	531, 2062,
	-2, 212,
	-1, 2429,
	36, 2820,
	66, 2820,
	-2, 494,
	-1, 2430,
	36, 2821,
	66, 2821,
	-2, 367,
	-1, 2436,
	127, 2818,
	411, 2818,
	-2, 1177,
	-1, 2437,
	127, 2819,
	411, 2819,
	-2, 1178,
	-1, 2454,
	1, 412,
	26, 412,
	36, 412,
	64, 412,
	65, 412,
	68, 412,
	69, 412,
	71, 412,
	72, 412,
	74, 412,
	100, 412,
	130, 412,
	269, 412,
	280, 412,
	316, 412,
	470, 412,
	484, 412,
	509, 412,
	515, 412,
	529, 412,
	532, 412,
	533, 412,
	540, 412,
	-2, 111,
	-1, 2455,
	1, 410,
	26, 410,
	36, 410,
	64, 410,
	65, 410,
	68, 410,
	69, 410,
	71, 410,
	72, 410,
	74, 410,
	100, 410,
	130, 410,
	269, 410,
	280, 410,
	316, 410,
	470, 410,
	484, 410,
	509, 410,
	515, 410,
	529, 410,
	532, 410,
	533, 410,
	540, 410,
	-2, 111,
	-1, 2458,
	1, 429,
	26, 429,
	36, 429,
	64, 429,
	65, 429,
	68, 429,
	69, 429,
	71, 429,
	72, 429,
	74, 429,
	100, 429,
	130, 429,
	269, 429,
	280, 429,
	316, 429,
	470, 429,
	484, 429,
	509, 429,
	515, 429,
	529, 429,
	532, 429,
	533, 429,
	540, 429,
	-2, 111,
	-1, 2472,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1081,
	-1, 2473,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1082,
	-1, 2474,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1083,
	-1, 2475,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1084,
	-1, 2476,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1085,
	-1, 2477,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1086,
	-1, 2481,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1093,
	-1, 2487,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1097,
	-1, 2532,
	363, 1357,
	-2, 1360,
	-1, 2542,
	16, 1397,
	17, 1397,
	-2, 1329,
	-1, 2627,
	68, 1481,
	69, 1481,
	130, 1481,
	269, 1481,
	280, 1481,
	316, 1481,
	470, 1481,
	509, 1481,
	-2, 1164,
	-1, 2746,
	40, 1401,
	509, 1401,
	527, 1401,
	532, 1401,
	541, 1401,
	-2, 1397,
	-1, 2776,
	209, 71,
	-2, 2536,
	-1, 2849,
	536, 105,
	-2, 2401,
	-1, 2952,
	507, 2476,
	-2, 2469,
	-1, 3085,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1095,
	-1, 3086,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1099,
	-1, 3092,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1101,
	-1, 3127,
	363, 1356,
	-2, 1359,
	-1, 3281,
	75, 1585,
	76, 1585,
	77, 1585,
	78, 1585,
	79, 1585,
	81, 1585,
	82, 1585,
	-2, 1481,
	-1, 3295,
	531, 1330,
	-2, 105,
	-1, 3302,
	150, 1825,
	-2, 1760,
	-1, 3498,
	6, 1989,
	12, 1989,
	534, 1989,
	535, 1989,
	-2, 1963,
	-1, 3621,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1094,
	-1, 3624,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1103,
	-1, 3627,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1098,
	-1, 3632,
	52, 0,
	53, 0,
	54, 0,
	-2, 1116,
	-1, 3639,
	21, 1366,
	432, 1366,
	510, 1366,
	-2, 1446,
	-1, 3643,
	363, 1358,
	-2, 1361,
	-1, 3689,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1146,
	-1, 3690,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1147,
	-1, 3691,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1148,
	-1, 3692,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1149,
	-1, 3693,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1150,
	-1, 3694,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1151,
	-1, 4037,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1096,
	-1, 4038,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1100,
	-1, 4042,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1102,
	-1, 4043,
	52, 0,
	53, 0,
	54, 0,
	-2, 1117,
	-1, 4046,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1118,
	-1, 4047,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1120,
	-1, 4172,
	540, 70,
	-2, 1563,
	-1, 4311,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1104,
	-1, 4312,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1119,
	-1, 4313,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1121,
	-1, 4322,
	52, 0,
	-2, 1154,
	-1, 4570,
	52, 0,
	-2, 1155,
	-1, 4748,
	37, 0,
	44, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 452,
	-1, 5080,
	7, 1710,
	-2, 289,
	-1, 5106,
	7, 1437,
	-2, 470,
}

const yyPrivate = 57344

const yyLast = 89452

var yyAct = [...]int16{
	979, 4585, 5077, 5128, 5144, 3161, 4758, 4937, 965, 631,
	5129, 4213, 4586, 2585, 4341, 5078, 4604, 4575, 2704, 3882,
	3071, 2652, 4636, 4825, 1911, 4656, 4422, 4747, 4247, 4109,
	4675, 4161, 764, 4808, 3442, 4814, 2655, 2095, 4552, 2920,
	3990, 4925, 1361, 1204, 801, 4973, 3220, 3790, 3069, 4553,
	4605, 4472, 3149, 4704, 4524, 980, 4550, 4108, 4877, 4893,
	696, 728, 4676, 4682, 1461, 2117, 3468, 4677, 2446, 3413,
	4404, 3322, 4380, 3482, 4468, 4339, 4100, 4246, 4746, 1122,
	4727, 219, 219, 3050, 2668, 3786, 4730, 623, 628, 2233,
	3307, 72, 4496, 2915, 4451, 649, 2785, 656, 656, 2872,
	2777, 4168, 3416, 2711, 3996, 4124, 649, 4131, 6, 3290,
	649, 2610, 3025, 3390, 3991, 3856, 692, 695, 700, 695,
	4000, 695, 656, 4504, 656, 2541, 3886, 3932, 656, 656,
	3323, 695, 656, 656, 3794, 2143, 19, 4410, 2142, 18,
	1984, 641, 91, 2141, 13, 649, 649, 649, 649, 2699,
	993, 793, 695, 695, 656, 695, 793, 3394, 4387, 4142,
	656, 793, 656, 793, 656, 656, 656, 656, 656, 1161,
	2678, 4307, 656, 695, 880, 695, 656, 2442, 695, 656,
	656, 4, 699, 1100, 639, 4117, 940, 4138, 2734, 61,
	3718, 2670, 2838, 3849, 3376, 2697, 3563, 2761, 2669, 2694,
	2140, 12, 4030, 1120, 3248, 810, 1370, 812, 219, 219,
	843, 3001, 1421, 1191, 2914, 2887, 1140, 675, 3497, 2539,
	3476, 2839, 3916, 2179, 2206, 2752, 3273, 3460, 2170, 2164,
	2765, 2764, 2116, 2174, 2786, 19, 2696, 3353, 18, 2766,
	2737, 91, 3284, 13, 3265, 1313, 2656, 951, 3759, 2097,
	3160, 674, 3610, 2497, 3104, 2611, 2560, 1921, 3130, 3229,
	2741, 664, 2301, 2803, 2919, 2868, 1236, 3074, 2217, 1366,
	2191, 2549, 1072, 648, 1323, 1080, 1108, 1147, 2150, 914,
	2751, 2739, 210, 882, 836, 1169, 646, 3298, 61, 2673,
	1126, 2713, 2677, 2676, 2675, 2096, 2064, 671, 2666, 3153,
	12, 1231, 2557, 1913, 2553, 2600, 2507, 2498, 2504, 3393,
	3276, 2435, 1422, 2425, 663, 1410, 790, 1360, 833, 2802,
	726, 206, 2801, 1170, 1172, 2815, 691, 1936, 2451, 2689,
	1977, 952, 2583, 1393, 111, 113, 777, 961, 1385, 1391,
	1411, 840, 1328, 2341, 178, 177, 2340, 2190, 2178, 630,
	134, 2123, 1426, 934, 933, 1394, 1358, 1244, 654, 883,
	885, 1229, 2171, 198, 935, 670, 1392, 89, 652, 3231,
	668, 662, 90, 660, 3154, 1303, 1302, 2108, 5196, 3362,
	1277, 5194, 5074, 4493, 5073, 5192, 1304, 5113, 1459, 4914,
	5153, 1429, 1303, 1303, 5113, 1441, 1442, 1443, 1377, 3072,
	1367, 908, 3361, 1304, 1304, 4725, 995, 2074, 727, 5152,
	2075, 3363, 976, 4528, 2080, 3178, 2072, 635, 5153, 727,
	727, 2077, 2081, 2076, 982, 2078, 5140, 5137, 4526, 2079,
	1452, 1453, 2073, 1429, 1379, 4780, 2070, 1382, 2639, 2082,
	804, 157, 5121, 1381, 1163, 1459, 5112, 2619, 1429, 3176,
	3451, 2070, 1380, 820, 824, 5113, 771, 772, 2072, 637,
	5089, 5082, 1163, 3194, 636, 2661, 657, 5064, 1383, 5090,
	3253, 2080, 5047, 2072, 2073, 5003, 4740, 803, 2077, 2081,
	2076, 4361, 2078, 635, 2070, 5002, 2452, 913, 4990, 2073,
	819, 822, 1459, 4284, 2070, 1429, 2082, 2692, 4952, 4946,
	3123, 4922, 4340, 4885, 4884, 5052, 1459, 4953, 4947, 1429,
	3402, 3124, 4883, 4883, 3232, 3129, 4882, 4862, 4861, 3155,
	2072, 5051, 4858, 876, 900, 4883, 2070, 2070, 1427, 895,
	897, 4859, 4856, 4779, 2072, 4777, 2073, 4039, 4776, 4756,
	4755, 4857, 4780, 2082, 2070, 4650, 4635, 1306, 3217, 2070,
	2073, 4625, 4608, 4600, 4361, 3064, 4599, 2082, 4477, 2692,
	4626, 4607, 3402, 4467, 4457, 1306, 4439, 4478, 1429, 4374,
	4373, 4372, 2692, 3363, 4370, 4438, 4360, 4329, 4375, 3402,
	3402, 4327, 3263, 1306, 3122, 4361, 2070, 4784, 4300, 4243,
	4328, 667, 4242, 2072, 2070, 2070, 976, 4301, 4244, 3178,
	4740, 2692, 701, 3188, 3189, 3190, 4241, 4235, 4609, 712,
	713, 714, 4183, 4153, 4049, 2692, 2692, 4027, 4738, 4578,
	1342, 3363, 4154, 2070, 1459, 2444, 2070, 1429, 927, 3181,
	3182, 3183, 3184, 4302, 3803, 3720, 3709, 3192, 4288, 907,
	909, 911, 915, 2692, 3721, 3710, 947, 3194, 4135, 1428,
	3637, 649, 2072, 3068, 656, 3628, 3593, 665, 3178, 2070,
	3521, 4092, 3508, 2204, 3859, 2070, 3813, 3365, 2073, 3522,
	649, 3509, 1095, 649, 649, 2082, 3366, 3344, 649, 649,
	3258, 649, 3252, 793, 793, 656, 3345, 793, 3243, 3259,
	3812, 3253, 3224, 3216, 3214, 3213, 3212, 2070, 695, 695,
	3211, 3176, 3217, 2070, 2070, 2070, 3127, 3125, 3642, 2070,
	3038, 1459, 2779, 2693, 1429, 2070, 2070, 976, 2747, 2070,
	3178, 2780, 2692, 649, 3188, 3189, 3190, 3604, 666, 1434,
	1435, 1436, 1437, 3402, 2645, 2641, 4041, 2071, 3305, 2072,
	3240, 3239, 3623, 1306, 2070, 3238, 2070, 3176, 3064, 2846,
	2524, 2423, 2414, 1078, 651, 2073, 4654, 99, 3192, 3184,
	1437, 656, 2082, 1315, 656, 2147, 1070, 2147, 3194, 1074,
	3823, 695, 4178, 1073, 2147, 2228, 4248, 995, 1315, 1074,
	1125, 1101, 903, 1073, 1125, 902, 3510, 1074, 649, 649,
	949, 1073, 3511, 1130, 1315, 96, 2147, 905, 1429, 2156,
	3800, 2231, 2111, 5185, 1367, 3003, 656, 695, 695, 5159,
	995, 5010, 995, 908, 4994, 1459, 1324, 1325, 1429, 656,
	943, 944, 93, 1324, 1325, 4985, 94, 4770, 4744, 1322,
	2692, 976, 2692, 4745, 3178, 4737, 1326, 2692, 3188, 3189,
	3190, 4736, 4735, 2072, 3867, 98, 3622, 4695, 4587, 1203,
	4040, 4474, 1132, 1342, 1922, 4580, 4563, 4728, 4545, 2073,
	3452, 1342, 4940, 3230, 671, 671, 2082, 908, 3226, 4481,
	992, 5193, 3192, 4458, 4429, 2661, 1342, 4384, 4336, 695,
	1086, 976, 3194, 3408, 3178, 4333, 4319, 4318, 3188, 3189,
	3190, 1068, 1301, 1448, 4306, 946, 4106, 4099, 1384, 842,
	842, 2869, 1438, 1439, 1440, 4096, 1374, 4082, 4941, 1310,
	1306, 1432, 1433, 1434, 1435, 1436, 1437, 4077, 3744, 3157,
	2157, 4069, 3192, 4068, 4938, 1087, 1390, 3452, 1368, 1369,
	4058, 4056, 3194, 1124, 1923, 3179, 3180, 3181, 3182, 3183,
	3184, 4055, 2229, 1152, 4054, 4053, 3858, 3771, 3733, 1306,
	1448, 1071, 3732, 1432, 1433, 1434, 1435, 1436, 1437, 1371,
	1371, 914, 1371, 2661, 3716, 914, 914, 2846, 1432, 1433,
	1434, 1435, 1436, 1437, 3706, 3705, 3704, 3645, 3639, 3464,
	1225, 93, 3421, 3401, 2603, 94, 3360, 929, 1167, 1168,
	921, 920, 3304, 922, 3234, 924, 1428, 3227, 930, 3207,
	3199, 3198, 3177, 3174, 98, 3866, 1131, 3173, 1137, 637,
	3169, 3167, 3166, 2517, 636, 1432, 1433, 1434, 1435, 1436,
	1437, 3165, 1079, 3164, 3142, 1117, 3131, 2168, 1261, 1432,
	1433, 1434, 1435, 1436, 1437, 3126, 3045, 1276, 1097, 1098,
	1159, 1282, 3043, 3040, 3039, 923, 2640, 926, 3801, 2631,
	2112, 2288, 1116, 1922, 928, 92, 2232, 1099, 908, 639,
	2327, 1362, 1362, 2155, 1378, 949, 1195, 1138, 948, 1201,
	110, 1219, 5181, 5177, 1101, 5092, 5059, 649, 5032, 656,
	2230, 5027, 656, 5020, 4475, 4264, 4962, 1314, 1432, 1433,
	1434, 1435, 1436, 1437, 4892, 2099, 3151, 2100, 4683, 4855,
	4830, 4827, 2109, 1319, 1320, 1321, 649, 994, 4743, 2122,
	3185, 3186, 3187, 1979, 656, 4742, 709, 710, 711, 3179,
	3180, 3181, 3182, 3183, 3184, 703, 704, 705, 706, 707,
	708, 700, 2234, 2518, 695, 695, 695, 695, 2234, 695,
	4713, 1327, 4709, 3308, 3739, 656, 4640, 1432, 1433, 1434,
	1435, 1436, 1437, 4603, 649, 4542, 4541, 4540, 649, 4518,
	4502, 4501, 1087, 2194, 1242, 1979, 4500, 2151, 4491, 1354,
	4488, 1351, 4144, 4368, 4365, 3346, 2215, 1260, 3179, 3180,
	3181, 3182, 3183, 3184, 649, 4330, 695, 2069, 2167, 1299,
	4164, 2154, 4148, 4134, 649, 699, 96, 1338, 4126, 96,
	649, 2090, 1279, 2093, 1127, 1283, 1284, 4123, 4002, 3799,
	3905, 2110, 3862, 1307, 1331, 1332, 3607, 1311, 1335, 649,
	3846, 3838, 649, 93, 3835, 3808, 93, 94, 656, 3776,
	94, 3185, 3186, 3187, 1432, 1433, 1434, 1435, 1436, 1437,
	3179, 3180, 3181, 3182, 3183, 3184, 98, 2261, 904, 98,
	3774, 649, 656, 1336, 905, 2194, 2194, 2194, 3588, 3766,
	1924, 1372, 3747, 1371, 3588, 2091, 1074, 1371, 1371, 3487,
	1073, 3486, 1918, 649, 649, 3481, 976, 97, 2250, 3178,
	1081, 1926, 1966, 3188, 3189, 3190, 3296, 1402, 2114, 1403,
	92, 695, 695, 695, 695, 695, 1395, 1320, 1319, 3004,
	3005, 695, 695, 1424, 1321, 3294, 656, 656, 637, 695,
	656, 637, 637, 1418, 1425, 3367, 1419, 1420, 1432, 1433,
	1434, 1435, 1436, 1437, 915, 2214, 1356, 3194, 915, 915,
	3293, 1376, 1368, 1369, 3004, 3005, 1327, 5139, 1432, 1433,
	1434, 1435, 1436, 1437, 1976, 3185, 3186, 3187, 2084, 3484,
	1127, 3750, 649, 4939, 3179, 3180, 3181, 3182, 3183, 3184,
	1127, 3246, 3061, 3148, 3141, 2266, 3117, 3115, 2509, 2269,
	2270, 2211, 3022, 2394, 2965, 3743, 2352, 2353, 2395, 2866,
	1127, 2788, 2398, 2706, 2515, 2254, 2400, 2565, 2559, 658,
	2419, 1931, 1332, 1331, 92, 3185, 3186, 3187, 2399, 2253,
	1335, 2223, 2225, 2138, 3179, 3180, 3181, 3182, 3183, 3184,
	2133, 2386, 2124, 1927, 1929, 1930, 1975, 2265, 649, 1315,
	1317, 1974, 1973, 1972, 2415, 2417, 1971, 1970, 649, 1969,
	1968, 695, 2273, 2274, 2175, 2120, 2195, 2067, 1967, 976,
	2184, 1965, 3178, 1964, 1963, 2277, 3188, 3189, 3190, 92,
	1962, 1961, 1960, 1959, 2198, 1958, 2148, 1957, 3636, 1956,
	1955, 1954, 1953, 2125, 1952, 1951, 2343, 1950, 2343, 1949,
	2436, 2436, 2343, 2343, 2322, 1948, 1947, 1946, 1945, 2152,
	3192, 1944, 1943, 1942, 1941, 1939, 108, 1938, 1165, 1925,
	3194, 1923, 1330, 1230, 1077, 769, 2781, 2514, 1459, 2662,
	3291, 1429, 1324, 1325, 1976, 1441, 1442, 1443, 2279, 1141,
	5146, 2283, 1141, 3070, 4434, 2347, 2202, 2203, 2409, 2410,
	2411, 1278, 3982, 3977, 2080, 3162, 2072, 3528, 2195, 2195,
	2195, 2077, 2081, 2076, 1127, 2078, 3479, 2303, 2226, 2079,
	1452, 1453, 2073, 4648, 1459, 2315, 2303, 1429, 2224, 2082,
	2221, 1441, 1442, 1443, 2205, 2326, 3538, 2947, 2943, 4647,
	2392, 4291, 2332, 2074, 2276, 2175, 2075, 635, 634, 3159,
	2080, 4879, 2072, 2172, 2406, 2558, 1259, 2077, 2081, 2076,
	3414, 2078, 1928, 3530, 4427, 2079, 1452, 1453, 2073, 2199,
	1459, 2513, 1192, 1429, 4823, 2082, 4822, 4646, 1398, 3490,
	2883, 916, 2316, 2317, 2318, 1459, 4639, 4453, 1429, 5147,
	2207, 3845, 1441, 1442, 1443, 633, 2871, 2870, 2072, 2384,
	2421, 3091, 5066, 2345, 2175, 4223, 2408, 2349, 2350, 2348,
	4574, 2080, 2300, 2072, 2073, 1935, 622, 2546, 2077, 2081,
	2076, 2082, 2078, 1082, 2378, 2368, 620, 2220, 4308, 2073,
	4084, 102, 4083, 2799, 2391, 1089, 2082, 1262, 2137, 2804,
	1398, 2804, 3347, 2771, 1153, 3491, 1105, 894, 887, 787,
	4464, 677, 4433, 3418, 1237, 677, 2401, 2402, 97, 2403,
	101, 97, 1262, 3723, 4669, 1192, 2547, 2323, 679, 3438,
	2328, 92, 679, 2798, 2092, 4236, 3634, 3633, 2648, 4447,
	4193, 4446, 4177, 3379, 3953, 3814, 1148, 988, 3400, 3384,
	2186, 3378, 3384, 1113, 102, 2404, 3380, 2896, 2805, 3380,
	2805, 2753, 2755, 2754, 102, 2432, 2894, 2438, 2243, 2242,
	2548, 2824, 114, 2545, 685, 892, 4026, 2219, 818, 760,
	1238, 2413, 1459, 101, 629, 1429, 618, 3601, 2424, 3080,
	3764, 3079, 3078, 101, 3077, 4214, 1350, 139, 5006, 2450,
	2461, 4454, 2950, 2844, 2449, 2895, 1206, 4876, 3493, 632,
	2072, 4839, 4722, 3084, 2893, 4573, 776, 2241, 775, 2218,
	4721, 774, 1348, 773, 1294, 1136, 2073, 4275, 3955, 3375,
	3185, 3186, 3187, 2082, 4463, 3970, 3967, 2946, 2259, 3179,
	3180, 3181, 3182, 3183, 3184, 2255, 2550, 5005, 635, 4980,
	1292, 1134, 3477, 3992, 4832, 5136, 4334, 3574, 2355, 5135,
	139, 4460, 901, 4459, 2440, 2422, 4983, 2086, 4852, 4480,
	2827, 4211, 4205, 1208, 2134, 4024, 3048, 2087, 2998, 4224,
	4833, 2146, 2806, 1239, 2806, 4679, 2812, 3961, 3654, 2550,
	3657, 3520, 3517, 3516, 3333, 1399, 3419, 4662, 791, 2088,
	3458, 5065, 5050, 802, 4898, 2434, 2905, 3432, 802, 2252,
	802, 4921, 1459, 1286, 3952, 1429, 2992, 4003, 1256, 1441,
	1442, 1443, 2882, 2976, 2342, 4180, 3558, 2544, 3010, 3009,
	1397, 2074, 3655, 1347, 2075, 2441, 3008, 3007, 2080, 1289,
	2072, 4878, 2338, 2989, 4507, 2077, 2081, 2076, 2337, 2078,
	3324, 2988, 2308, 2079, 1452, 1453, 2073, 1399, 1280, 4237,
	1275, 1291, 1133, 2082, 3387, 700, 2550, 3561, 1400, 1258,
	1257, 976, 1252, 1297, 3178, 2208, 1243, 2647, 3188, 3189,
	3190, 1241, 2533, 1234, 1254, 2208, 1233, 1232, 1228, 2649,
	3635, 2852, 1915, 3185, 3186, 3187, 1207, 3386, 4566, 2825,
	3386, 176, 3179, 3180, 3181, 3182, 3183, 3184, 2550, 4432,
	2331, 2330, 3192, 3492, 3498, 2208, 2208, 1349, 2617, 2329,
	2208, 4949, 3194, 3388, 3436, 2530, 3435, 2551, 140, 699,
	1400, 1142, 2821, 4880, 1142, 1156, 3162, 2566, 2567, 2568,
	2569, 3883, 2512, 1448, 1401, 1293, 1135, 2208, 685, 2208,
	2208, 2208, 1438, 1439, 1440, 4897, 3792, 2208, 4060, 2302,
	2257, 1432, 1433, 1434, 1435, 1436, 1437, 680, 2302, 2390,
	2210, 842, 2209, 1910, 3352, 4525, 2823, 3993, 3979, 3630,
	3103, 5008, 2335, 2796, 4674, 1235, 3534, 1255, 1209, 1448,
	3382, 140, 4950, 3382, 2136, 3597, 842, 2624, 1438, 1439,
	1440, 3385, 2066, 668, 3385, 3171, 1401, 1432, 1433, 1434,
	1435, 1436, 1437, 695, 3172, 2991, 1090, 684, 1210, 1192,
	2511, 1211, 3531, 2615, 678, 1212, 2609, 2756, 678, 2573,
	686, 4353, 908, 2657, 4381, 2659, 3560, 2118, 2820, 2099,
	3884, 3325, 1296, 2682, 2682, 1084, 668, 1213, 2797, 4896,
	1448, 2215, 695, 1432, 1433, 1434, 1435, 1436, 1437, 1438,
	1439, 1440, 1408, 2272, 1240, 4567, 2237, 3653, 1432, 1433,
	1434, 1435, 1436, 1437, 2884, 4680, 656, 649, 3923, 4354,
	3381, 891, 5007, 3381, 763, 1216, 2776, 4473, 2462, 2433,
	138, 3063, 137, 2262, 656, 2183, 2787, 2499, 2500, 2501,
	2502, 2261, 1214, 3598, 695, 4976, 656, 3518, 2215, 2912,
	142, 2903, 1118, 2898, 656, 1388, 4975, 682, 1285, 1215,
	2528, 1287, 3383, 3498, 639, 3383, 2522, 1979, 2840, 695,
	3994, 1976, 81, 649, 1088, 4681, 2822, 3336, 4022, 1976,
	2768, 4663, 3431, 2826, 1288, 2135, 656, 656, 656, 3923,
	649, 649, 4045, 138, 2215, 137, 1217, 656, 1918, 4565,
	2974, 2620, 2831, 893, 2874, 656, 2878, 656, 656, 2749,
	805, 4044, 3816, 656, 4977, 1118, 656, 656, 633, 918,
	656, 1085, 656, 656, 2867, 4441, 649, 4176, 2516, 1253,
	2740, 4188, 3787, 2685, 2685, 3334, 656, 656, 649, 2740,
	656, 656, 2555, 2837, 4840, 1432, 1433, 1434, 1435, 1436,
	1437, 2246, 695, 695, 2888, 4979, 683, 656, 656, 2875,
	4240, 4420, 649, 2594, 667, 4588, 649, 4672, 656, 3519,
	656, 656, 656, 656, 656, 3817, 4826, 656, 3559, 2613,
	2393, 656, 2688, 2636, 1295, 656, 656, 3483, 4835, 3980,
	656, 656, 2635, 681, 656, 656, 4505, 3535, 3335, 4702,
	656, 656, 656, 1371, 4150, 2238, 656, 667, 656, 1371,
	1371, 656, 656, 2576, 4951, 4718, 2240, 2239, 2685, 2251,
	3450, 2938, 2772, 219, 1268, 656, 4239, 3369, 2664, 687,
	665, 684, 656, 3532, 689, 656, 3950, 4149, 2841, 3924,
	2845, 3852, 656, 656, 2738, 2830, 5171, 2807, 656, 695,
	793, 2580, 3997, 793, 700, 793, 793, 1448, 2850, 2851,
	1409, 2262, 2577, 5170, 2847, 2236, 1438, 1439, 1440, 4837,
	1110, 1111, 4238, 665, 1114, 1432, 1433, 1434, 1435, 1436,
	1437, 2263, 3223, 2665, 4210, 2264, 695, 3853, 4836, 2862,
	1264, 1371, 4225, 2625, 3937, 4701, 2810, 3024, 3925, 3029,
	3030, 666, 2759, 2294, 2660, 2931, 2578, 2245, 2128, 2575,
	3924, 2934, 2935, 2984, 3028, 2691, 2986, 2987, 699, 1109,
	1937, 2127, 2563, 4686, 2246, 3185, 3186, 3187, 2789, 2790,
	2791, 2792, 2793, 2682, 3179, 3180, 3181, 3182, 3183, 3184,
	649, 3926, 806, 901, 666, 5134, 3445, 936, 2626, 2628,
	1371, 2630, 2775, 2632, 2633, 2634, 914, 2949, 2778, 2773,
	2774, 4829, 2970, 3059, 3059, 936, 938, 4411, 4894, 3925,
	4412, 3662, 4217, 4413, 2554, 4974, 2849, 4968, 4659, 2985,
	936, 938, 2579, 2836, 1091, 2944, 4072, 3697, 1387, 2948,
	3067, 4414, 2490, 1267, 3843, 2344, 700, 3696, 4484, 4025,
	807, 889, 2494, 639, 2492, 3424, 788, 1164, 2489, 2855,
	2491, 2493, 3926, 2906, 1386, 722, 770, 3073, 3917, 4812,
	2921, 2083, 4015, 3128, 2927, 2129, 899, 932, 4416, 1265,
	899, 3133, 3134, 3810, 3372, 4014, 1352, 1119, 4415, 3150,
	919, 2936, 3002, 3851, 2941, 2758, 5054, 1329, 4417, 2361,
	1333, 1334, 1362, 1246, 1246, 1270, 3116, 3231, 2922, 1318,
	699, 1269, 3154, 2574, 976, 4577, 4423, 3178, 3907, 3105,
	727, 3188, 3189, 3190, 3676, 5166, 3998, 5081, 4146, 4757,
	2245, 639, 4363, 2685, 4335, 3097, 2952, 3095, 3251, 2951,
	3156, 3093, 2365, 3094, 3096, 4088, 3108, 4067, 3193, 2364,
	5102, 3109, 5101, 727, 4622, 3192, 2854, 2969, 3110, 2263,
	727, 4760, 4759, 2264, 5069, 3194, 5068, 3107, 4089, 4905,
	4623, 4904, 5014, 1298, 4764, 5013, 4907, 2503, 4910, 3215,
	4763, 4765, 4766, 4908, 4911, 3222, 4906, 3242, 3938, 4909,
	2993, 4692, 2099, 2363, 2995, 4583, 2994, 2997, 3868, 1346,
	4584, 3275, 3275, 793, 2994, 2682, 3287, 3275, 3275, 937,
	4343, 3939, 1227, 4348, 1144, 4762, 3021, 4346, 3444, 4347,
	4349, 4761, 5103, 3303, 3850, 4769, 3472, 937, 4418, 4419,
	888, 649, 3470, 649, 649, 789, 3145, 2109, 649, 649,
	1341, 1266, 937, 1151, 721, 1263, 2362, 4576, 4424, 3842,
	3908, 3106, 3232, 3076, 3047, 4073, 3081, 3155, 3052, 4728,
	2503, 695, 3053, 3340, 219, 4216, 3698, 4449, 3056, 3055,
	2438, 2495, 1245, 1245, 3100, 4621, 4913, 1271, 4912, 4174,
	3448, 1163, 3427, 3331, 3049, 3066, 3132, 3065, 3031, 2782,
	4926, 3033, 932, 3034, 2201, 3035, 639, 1940, 3037, 656,
	4400, 1396, 649, 1281, 1115, 4396, 4345, 914, 4350, 3221,
	3046, 4101, 5147, 5117, 1371, 1371, 5035, 4928, 3013, 5165,
	3016, 5034, 3469, 3090, 3088, 3312, 4927, 656, 3101, 5143,
	4931, 3775, 5189, 4929, 5076, 656, 4933, 656, 4208, 649,
	649, 4378, 1340, 656, 4160, 1150, 3752, 3358, 2808, 2757,
	2151, 3355, 2702, 2685, 3098, 2685, 2824, 3120, 2248, 1417,
	1357, 2499, 2500, 2501, 2502, 2292, 4110, 1371, 2496, 915,
	2295, 2304, 2227, 4393, 4394, 1162, 3067, 2194, 2690, 2294,
	4936, 3446, 4934, 656, 4791, 4792, 908, 3144, 3147, 914,
	914, 4942, 4943, 1206, 4107, 3348, 4790, 2819, 4615, 4613,
	4616, 3260, 3428, 3283, 656, 3233, 4402, 4395, 2307, 4398,
	4399, 4401, 4397, 3235, 4930, 3506, 3337, 3338, 4358, 5164,
	3250, 2293, 2621, 4795, 656, 656, 656, 656, 2653, 2654,
	3315, 4359, 3285, 3204, 3205, 3206, 4794, 2525, 2529, 3420,
	2531, 4941, 4391, 2910, 2499, 2500, 2501, 2502, 3225, 2853,
	4141, 3099, 3392, 3249, 3, 2827, 2296, 5120, 4846, 1918,
	1208, 4845, 4846, 4845, 2864, 3054, 3244, 3440, 2522, 2605,
	2606, 2607, 2608, 4935, 656, 656, 4593, 656, 656, 656,
	3500, 3499, 2909, 3006, 3370, 1094, 2911, 3256, 3463, 3255,
	2637, 3254, 3300, 3301, 3282, 3280, 3279, 3278, 4774, 3249,
	3891, 3320, 656, 2683, 2683, 4773, 2447, 2448, 649, 3302,
	3373, 3272, 2261, 2908, 3295, 3329, 4390, 3288, 3289, 4592,
	4591, 656, 3429, 3430, 104, 105, 106, 107, 4590, 656,
	3349, 3351, 3439, 4357, 3326, 3608, 3609, 890, 829, 100,
	3523, 3524, 3892, 716, 3455, 4941, 3341, 3412, 5031, 2817,
	3912, 2658, 3350, 3247, 659, 759, 205, 695, 695, 2644,
	5071, 3457, 3760, 3459, 5172, 1912, 3443, 695, 4469, 3359,
	3556, 4720, 3391, 2873, 3564, 3893, 3894, 3895, 4200, 656,
	4019, 4018, 5072, 1207, 2825, 3785, 2310, 2309, 2683, 3389,
	2415, 2417, 2153, 2103, 2102, 649, 3415, 3410, 3411, 3758,
	3271, 3269, 3270, 3268, 4120, 649, 212, 649, 3237, 3462,
	914, 103, 649, 2643, 3313, 3407, 2869, 2821, 3496, 3425,
	3023, 3357, 617, 3755, 619, 621, 3032, 3754, 3185, 3186,
	3187, 4637, 5070, 4678, 5012, 3357, 5011, 3179, 3180, 3181,
	3182, 3183, 3184, 4844, 3299, 3606, 3299, 3456, 4842, 3454,
	2195, 4771, 1976, 3266, 3271, 3269, 3270, 3268, 3942, 3264,
	3267, 2823, 3828, 4581, 3478, 4165, 3485, 3471, 3900, 3328,
	915, 3489, 3648, 3649, 3650, 1209, 3356, 3809, 3529, 3730,
	3729, 3565, 3667, 3671, 3567, 3670, 3568, 3569, 609, 3332,
	3036, 2977, 2708, 2651, 2235, 3550, 2187, 3539, 2182, 3297,
	3266, 3271, 3269, 3270, 3268, 1210, 3264, 3267, 1211, 1308,
	1273, 1272, 1212, 3525, 1250, 1157, 1069, 1427, 673, 669,
	4031, 3611, 2556, 2820, 2118, 4999, 4916, 3660, 4915, 4796,
	4086, 4317, 4276, 4152, 1213, 4032, 3395, 639, 3971, 3968,
	2684, 2684, 3829, 3406, 3675, 3364, 3415, 2271, 2268, 945,
	938, 3437, 915, 915, 3075, 4227, 3600, 3554, 2818, 2420,
	3072, 3542, 3058, 4186, 4228, 3547, 4185, 5094, 3461, 2667,
	3152, 2107, 1216, 5095, 2106, 3433, 4456, 4323, 4226, 4071,
	3629, 3292, 3170, 4229, 2657, 3502, 3599, 3504, 3712, 1214,
	2099, 3102, 3057, 2452, 2682, 672, 661, 2682, 2816, 4988,
	4533, 4530, 4293, 4271, 4266, 3765, 1215, 4265, 3275, 3287,
	3275, 3275, 3275, 3596, 3989, 3988, 3981, 3772, 3583, 3976,
	3889, 2822, 3580, 3579, 3578, 2684, 3577, 925, 2826, 3576,
	3575, 3571, 3570, 3562, 3551, 3549, 2215, 3537, 3536, 3797,
	3780, 3533, 3467, 1217, 1087, 3591, 3466, 656, 3592, 3465,
	3140, 3139, 3138, 2683, 3137, 3089, 2506, 4119, 3266, 3271,
	3269, 3270, 3268, 2175, 3264, 3267, 4118, 3552, 3087, 3018,
	3228, 2990, 2971, 2488, 3527, 3615, 3616, 3617, 3618, 3647,
	2505, 2506, 3083, 2354, 2351, 675, 3631, 649, 2346, 2109,
	3745, 3746, 2339, 2325, 2321, 2320, 2319, 2314, 2313, 2306,
	656, 2305, 2291, 2290, 2289, 2287, 656, 2260, 2256, 695,
	2249, 2104, 3644, 2464, 3044, 2465, 649, 3042, 3041, 3837,
	917, 906, 2397, 2522, 2396, 4657, 3647, 2554, 5056, 5024,
	3798, 908, 4803, 2787, 3843, 5055, 3844, 3665, 3669, 695,
	3656, 3658, 3659, 4255, 2685, 3805, 3062, 2685, 3674, 4251,
	3802, 3807, 2485, 1371, 3594, 4171, 3680, 4098, 4097, 2483,
	2486, 2482, 3067, 2484, 4064, 908, 4063, 3815, 3319, 3581,
	2966, 3434, 649, 915, 656, 2963, 3887, 2959, 4218, 2848,
	2282, 656, 2682, 2840, 2415, 2417, 1278, 1200, 3796, 3902,
	3749, 3880, 3753, 1194, 221, 3756, 941, 656, 656, 4248,
	3119, 2740, 3836, 3711, 2215, 2324, 5138, 908, 3918, 3726,
	3724, 3834, 2109, 3725, 656, 2109, 942, 2109, 3934, 2740,
	2740, 2521, 4199, 1371, 3113, 3738, 3870, 3741, 3740, 143,
	3748, 2520, 3956, 3118, 656, 3285, 3403, 3864, 3392, 3751,
	912, 3857, 3757, 3865, 2298, 3782, 5156, 3933, 3761, 3762,
	656, 3768, 5155, 2297, 3878, 2705, 644, 2522, 4162, 656,
	656, 656, 1163, 3051, 656, 3941, 3897, 656, 656, 656,
	656, 690, 3788, 2683, 4667, 2683, 645, 3804, 4666, 2888,
	656, 3960, 656, 3896, 656, 4001, 4245, 4156, 1303, 3929,
	2684, 1912, 3831, 656, 3582, 5009, 1371, 3661, 1976, 1304,
	3474, 656, 656, 2861, 2829, 3067, 656, 656, 656, 656,
	656, 3946, 3949, 3826, 2709, 2738, 3818, 3209, 3767, 733,
	3769, 3770, 3824, 2177, 2169, 3830, 2119, 3832, 2113, 2392,
	733, 733, 2685, 2685, 1160, 1149, 3872, 3873, 700, 3821,
	1143, 3822, 1139, 1121, 4388, 795, 649, 649, 649, 649,
	795, 733, 661, 2841, 3959, 795, 4517, 795, 3391, 4516,
	1371, 4016, 3914, 3906, 733, 733, 3553, 3855, 2685, 3503,
	3501, 3473, 3861, 3441, 3876, 868, 868, 3316, 733, 733,
	733, 3392, 2813, 2809, 3869, 3863, 3839, 2707, 3935, 3672,
	3673, 3871, 2703, 2407, 2405, 3879, 2285, 2281, 4029, 3913,
	2188, 2173, 699, 2165, 3898, 2163, 2145, 3727, 1345, 1344,
	1343, 3731, 733, 1337, 1312, 3901, 1309, 3904, 1305, 1300,
	1290, 1251, 1221, 1218, 1199, 1193, 4253, 4252, 3015, 2144,
	1109, 878, 4919, 4849, 4838, 1123, 4739, 4497, 4579, 4519,
	4435, 2175, 3947, 3951, 3948, 3954, 4377, 4256, 4212, 4198,
	4189, 4017, 3311, 2834, 2828, 3958, 1353, 2200, 2094, 2068,
	3135, 3136, 2418, 3728, 2416, 995, 3827, 3963, 995, 3060,
	995, 3584, 908, 5163, 3934, 995, 5148, 4986, 4698, 2832,
	3589, 3833, 3449, 656, 4658, 2682, 2682, 2267, 3784, 2682,
	1206, 1000, 998, 997, 989, 793, 2085, 656, 3978, 4111,
	910, 3391, 3275, 3983, 2787, 4129, 1375, 793, 4172, 4455,
	2684, 3002, 2684, 4966, 4450, 4179, 4007, 4006, 4661, 4452,
	4136, 4831, 3395, 4448, 2126, 4443, 3327, 3779, 2718, 3330,
	2215, 695, 2712, 3317, 2735, 2731, 604, 605, 211, 2299,
	2686, 2686, 4102, 4103, 2763, 2132, 2131, 4462, 4461, 4187,
	4685, 4184, 4163, 3995, 4133, 4151, 2835, 1208, 2975, 649,
	3888, 3890, 3447, 688, 4147, 2833, 1155, 2336, 4697, 2109,
	3885, 3017, 2795, 2366, 3405, 3404, 39, 38, 37, 36,
	35, 34, 33, 32, 59, 58, 57, 56, 695, 3921,
	3874, 3875, 3928, 3877, 3930, 4157, 4052, 2215, 55, 656,
	4127, 4128, 54, 53, 52, 51, 50, 49, 48, 4166,
	47, 46, 45, 793, 44, 43, 42, 3678, 4066, 41,
	3909, 40, 31, 30, 2685, 2686, 29, 3682, 4155, 28,
	27, 2840, 26, 25, 24, 2685, 2685, 23, 4085, 2685,
	22, 21, 20, 2814, 3935, 2215, 69, 68, 4232, 67,
	66, 65, 3703, 64, 63, 5, 62, 2685, 60, 17,
	2139, 125, 4206, 1092, 4169, 3395, 2149, 2453, 3494, 4203,
	3475, 4105, 3915, 179, 2367, 1196, 5045, 4132, 4104, 2886,
	1207, 4813, 3791, 4115, 4116, 2740, 4204, 4121, 112, 4673,
	3377, 3374, 3922, 3789, 4703, 3931, 3795, 4023, 656, 2698,
	3793, 656, 2695, 5116, 4344, 3158, 2618, 656, 656, 656,
	2623, 4338, 656, 656, 656, 4231, 4611, 4379, 4924, 656,
	656, 4167, 4376, 4130, 4234, 2784, 3941, 95, 4125, 4158,
	4145, 1371, 4589, 4356, 2642, 4013, 2101, 74, 643, 642,
	1371, 1371, 4918, 4249, 4194, 4195, 950, 3495, 4627, 656,
	656, 4807, 4403, 656, 4143, 656, 4392, 4182, 3783, 109,
	4113, 2105, 4197, 4140, 4139, 4192, 4793, 4789, 4788, 3742,
	2650, 4137, 1209, 4191, 2587, 2663, 3602, 2089, 4285, 4286,
	16, 2685, 15, 4289, 4290, 14, 11, 10, 9, 8,
	7, 4281, 4315, 4558, 4220, 4556, 4207, 4557, 656, 4316,
	4051, 2841, 1210, 4555, 2510, 1211, 702, 791, 1456, 1212,
	802, 2439, 802, 802, 939, 4219, 1416, 931, 4564, 3666,
	4059, 2118, 4549, 4221, 1934, 4920, 3763, 2543, 846, 847,
	1316, 1213, 3640, 844, 990, 870, 3587, 795, 795, 4091,
	4230, 656, 4260, 3722, 4352, 4342, 3713, 4062, 2586, 3854,
	2582, 2682, 4065, 795, 656, 2571, 2593, 4129, 4079, 2526,
	974, 973, 2552, 3143, 2683, 1932, 4254, 2683, 968, 1216,
	969, 964, 1407, 4268, 4258, 1404, 4270, 795, 795, 649,
	2907, 795, 3002, 4425, 3505, 3797, 1214, 4257, 3526, 2913,
	2686, 649, 3002, 4719, 3014, 3934, 649, 4261, 1463, 2572,
	1458, 2, 4095, 1215, 1, 0, 0, 0, 0, 0,
	0, 0, 4408, 0, 4405, 0, 0, 0, 0, 656,
	0, 0, 0, 3707, 0, 0, 0, 0, 0, 0,
	0, 656, 0, 0, 0, 4428, 656, 0, 0, 649,
	1217, 0, 656, 0, 0, 656, 4190, 0, 3887, 4310,
	0, 0, 4436, 4371, 793, 0, 0, 695, 0, 4369,
	0, 0, 4369, 0, 868, 0, 4489, 4173, 0, 0,
	0, 0, 0, 0, 0, 3934, 700, 0, 695, 695,
	4430, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 656, 656, 4495, 0,
	4470, 2685, 656, 0, 3933, 0, 656, 4355, 4331, 4483,
	4512, 0, 0, 0, 4202, 0, 700, 793, 4421, 4426,
	0, 4465, 0, 0, 656, 0, 0, 0, 4466, 4389,
	0, 0, 4364, 4445, 3796, 4406, 4510, 4020, 19, 4551,
	699, 18, 0, 0, 91, 2685, 13, 0, 4498, 4367,
	1371, 4486, 2683, 2683, 4527, 4386, 4409, 0, 0, 3067,
	0, 4537, 4503, 4262, 4263, 3935, 0, 0, 0, 0,
	4492, 0, 4385, 0, 4490, 0, 4535, 0, 0, 0,
	699, 0, 0, 0, 4444, 0, 0, 4437, 2683, 0,
	0, 61, 3934, 4280, 733, 4506, 656, 4508, 733, 733,
	0, 2684, 4509, 12, 2684, 4520, 793, 0, 4521, 4606,
	2686, 4594, 2686, 0, 0, 0, 0, 0, 0, 4294,
	0, 4595, 0, 4539, 0, 2685, 0, 0, 4536, 4534,
	0, 795, 0, 795, 0, 3392, 0, 0, 0, 0,
	795, 0, 0, 0, 0, 3935, 0, 0, 0, 0,
	0, 795, 795, 795, 795, 795, 0, 4633, 0, 0,
	4440, 0, 795, 0, 0, 4634, 0, 0, 0, 4295,
	4296, 0, 4572, 0, 0, 0, 0, 0, 4628, 0,
	0, 4532, 0, 0, 0, 0, 795, 649, 0, 0,
	0, 1371, 0, 4642, 656, 0, 0, 914, 0, 0,
	0, 4597, 4596, 0, 0, 4617, 4618, 0, 4644, 4619,
	4620, 656, 0, 4602, 4601, 0, 4671, 0, 0, 0,
	793, 0, 0, 0, 2682, 0, 0, 0, 4670, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 649, 0,
	0, 0, 2685, 4638, 0, 4643, 0, 0, 0, 0,
	0, 0, 4645, 0, 0, 3391, 2685, 0, 4641, 4664,
	0, 656, 3935, 4175, 656, 0, 0, 4651, 1981, 795,
	4652, 0, 795, 4653, 4649, 4660, 4132, 0, 4337, 4688,
	0, 4351, 0, 0, 0, 4693, 0, 0, 0, 2684,
	2684, 0, 4705, 4629, 4169, 0, 4668, 4690, 0, 0,
	4694, 4407, 4687, 4691, 0, 0, 0, 0, 4699, 0,
	868, 4714, 0, 0, 733, 0, 4724, 868, 4700, 0,
	1981, 2109, 1981, 4716, 2099, 2684, 0, 0, 0, 3111,
	3112, 0, 0, 4715, 2787, 0, 0, 0, 0, 0,
	0, 0, 0, 4787, 2683, 733, 0, 4729, 0, 4768,
	0, 733, 2109, 0, 2109, 2683, 2683, 4732, 4733, 2683,
	0, 4775, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4815, 0, 0, 2685, 4752, 4753, 2683, 4811, 4785,
	0, 639, 0, 0, 4767, 0, 0, 4810, 0, 0,
	0, 0, 0, 0, 0, 0, 4405, 0, 0, 4818,
	0, 868, 4259, 0, 4708, 4809, 4710, 0, 4712, 4820,
	4783, 4824, 0, 0, 3195, 3196, 3197, 695, 4786, 3395,
	0, 4819, 0, 656, 914, 4080, 0, 4806, 0, 0,
	4778, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2109, 0, 4821, 4287, 700, 0, 0, 0, 0, 0,
	0, 0, 656, 656, 0, 4828, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4297, 0, 0, 4551,
	4843, 4834, 0, 0, 4841, 0, 733, 0, 0, 4847,
	0, 0, 0, 0, 0, 0, 0, 0, 4853, 4851,
	4903, 4860, 0, 4869, 0, 0, 0, 0, 0, 0,
	0, 2683, 0, 0, 4868, 868, 4895, 868, 699, 0,
	795, 4606, 4872, 4863, 4870, 4865, 0, 4867, 4881, 0,
	4889, 2685, 4888, 0, 0, 4887, 4917, 0, 0, 0,
	0, 0, 868, 0, 2109, 733, 0, 733, 733, 733,
	733, 4816, 4901, 4902, 0, 0, 0, 0, 0, 0,
	0, 0, 4948, 0, 0, 0, 0, 4624, 3934, 0,
	915, 4923, 0, 0, 0, 4967, 0, 793, 793, 0,
	656, 4957, 0, 0, 4954, 4955, 0, 4959, 3403, 4964,
	4961, 2684, 0, 656, 4958, 0, 0, 0, 0, 0,
	0, 0, 2684, 2684, 0, 0, 2684, 0, 0, 4960,
	0, 0, 795, 0, 0, 0, 0, 656, 0, 795,
	795, 4969, 4970, 793, 2684, 4963, 0, 0, 4993, 0,
	4981, 2261, 4978, 795, 868, 4866, 0, 795, 795, 795,
	795, 795, 795, 795, 795, 795, 795, 795, 795, 795,
	795, 795, 795, 4987, 795, 5016, 2109, 2109, 4992, 4995,
	5019, 4705, 1981, 0, 4984, 5015, 0, 5000, 0, 4996,
	4997, 5004, 0, 0, 0, 0, 2099, 4989, 0, 4991,
	2657, 0, 0, 0, 0, 0, 0, 4971, 0, 0,
	0, 0, 0, 0, 4815, 695, 695, 0, 0, 0,
	5029, 0, 0, 3934, 0, 793, 5021, 0, 4772, 5040,
	0, 2686, 0, 5028, 2686, 0, 5030, 0, 2685, 5026,
	5044, 5033, 5042, 0, 656, 5041, 0, 5037, 5038, 5036,
	4809, 2683, 5046, 0, 0, 5043, 0, 0, 3935, 4801,
	695, 4804, 0, 5053, 0, 0, 0, 0, 2684, 914,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4546, 4548, 0, 5060, 0, 0, 0, 0, 5079, 0,
	0, 0, 0, 796, 0, 2683, 0, 5067, 0, 0,
	0, 0, 4797, 4798, 4799, 4800, 0, 0, 0, 0,
	0, 0, 5057, 5062, 5086, 0, 5088, 915, 0, 0,
	0, 0, 0, 0, 5085, 0, 0, 5061, 5084, 0,
	5087, 5091, 793, 5107, 5108, 5109, 5093, 4606, 0, 0,
	5104, 0, 0, 0, 0, 695, 0, 4864, 0, 5118,
	5119, 3934, 0, 5111, 0, 0, 0, 5123, 0, 0,
	0, 0, 0, 0, 2685, 0, 0, 0, 0, 5125,
	5124, 0, 0, 2685, 5079, 2683, 5127, 5122, 0, 0,
	5126, 5145, 0, 0, 4816, 4342, 0, 5141, 5098, 5142,
	0, 0, 5133, 3935, 5100, 0, 5150, 0, 0, 793,
	0, 0, 5149, 0, 0, 0, 5151, 5157, 5130, 0,
	5161, 5162, 0, 5158, 5154, 793, 0, 0, 735, 2686,
	2686, 0, 5160, 5167, 5168, 4655, 656, 5174, 5173, 735,
	735, 793, 793, 5184, 5179, 4342, 5186, 5176, 5079, 5175,
	5188, 4944, 5187, 3625, 3626, 5190, 0, 0, 5180, 5191,
	735, 0, 0, 5133, 5079, 2686, 5195, 0, 0, 0,
	0, 0, 0, 735, 735, 0, 0, 0, 0, 5130,
	0, 0, 0, 0, 0, 5182, 5183, 735, 735, 735,
	0, 5133, 0, 0, 0, 0, 0, 0, 2684, 0,
	0, 0, 2683, 0, 0, 0, 0, 5130, 0, 5096,
	5097, 2685, 0, 0, 0, 0, 2683, 0, 0, 0,
	0, 735, 0, 0, 0, 0, 2714, 4731, 0, 4731,
	4731, 3935, 0, 0, 2727, 0, 0, 0, 0, 0,
	0, 0, 2684, 0, 3683, 3684, 3685, 3686, 3687, 3688,
	3689, 3690, 3691, 3692, 3693, 3694, 3695, 0, 3699, 0,
	0, 0, 0, 5017, 5018, 0, 0, 0, 0, 0,
	0, 0, 4568, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 4571, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4781, 2733, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2684, 4598, 0, 0, 0, 0, 0, 0,
	2729, 0, 0, 0, 2683, 0, 0, 0, 0, 0,
	0, 0, 915, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 795, 795, 0,
	795, 0, 0, 795, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 795, 795, 0, 0, 0, 0, 0,
	795, 0, 795, 795, 795, 795, 795, 795, 795, 795,
	795, 795, 795, 0, 795, 0, 795, 0, 795, 795,
	795, 795, 795, 795, 0, 795, 795, 795, 0, 0,
	795, 0, 0, 0, 0, 0, 0, 0, 2719, 0,
	0, 2686, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2686, 2686, 0, 0, 2686, 0, 0, 2684,
	2728, 0, 4122, 0, 0, 0, 0, 0, 0, 3847,
	0, 0, 0, 2684, 2686, 0, 4706, 4707, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2724, 2683, 0, 0, 0, 0, 0, 5132, 0, 0,
	77, 0, 0, 0, 76, 78, 0, 0, 0, 0,
	1927, 0, 0, 2721, 96, 795, 0, 0, 0, 795,
	795, 795, 795, 0, 1915, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2715, 0, 0, 2726, 0, 0,
	0, 93, 0, 0, 0, 94, 0, 795, 795, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 5132, 0,
	0, 0, 0, 0, 98, 0, 0, 0, 0, 868,
	4215, 80, 0, 0, 0, 0, 0, 0, 868, 2732,
	0, 2684, 5001, 0, 1083, 0, 5132, 0, 2686, 75,
	4051, 0, 1981, 0, 0, 0, 0, 0, 0, 0,
	1459, 0, 0, 1429, 0, 0, 0, 1441, 1442, 1443,
	0, 0, 0, 0, 81, 0, 0, 2750, 0, 2074,
	0, 0, 2075, 0, 0, 0, 2080, 1981, 2072, 0,
	0, 2725, 795, 2077, 2081, 2076, 0, 2078, 0, 0,
	0, 2079, 1452, 1453, 2073, 868, 0, 2722, 0, 0,
	0, 2082, 0, 0, 2720, 0, 0, 0, 2730, 0,
	868, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 2716, 0, 0, 0, 0, 0, 0, 2683, 1981,
	0, 0, 0, 1459, 0, 0, 1429, 0, 0, 0,
	1441, 1442, 1443, 0, 733, 2723, 0, 2717, 1981, 0,
	0, 0, 2074, 0, 0, 2075, 84, 4890, 4891, 2080,
	0, 2072, 0, 0, 0, 0, 2077, 2081, 2076, 0,
	2078, 0, 0, 0, 2079, 1452, 1453, 2073, 2684, 0,
	0, 0, 0, 0, 2082, 0, 0, 0, 0, 0,
	0, 0, 795, 0, 4442, 0, 0, 0, 0, 0,
	0, 733, 733, 0, 0, 2445, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1176, 2447, 2448, 0, 0,
	1177, 0, 0, 0, 1186, 0, 0, 0, 5115, 0,
	0, 0, 0, 0, 733, 0, 0, 0, 0, 0,
	0, 733, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2683, 0, 0, 0, 2686, 0,
	0, 0, 0, 2683, 795, 0, 868, 795, 0, 795,
	795, 0, 868, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1179, 0, 0, 0,
	0, 0, 0, 0, 795, 0, 0, 0, 0, 0,
	0, 0, 2686, 0, 0, 0, 88, 0, 0, 733,
	0, 0, 0, 0, 0, 1185, 0, 0, 795, 0,
	0, 0, 79, 0, 0, 87, 795, 0, 0, 81,
	0, 3325, 0, 0, 0, 85, 0, 0, 0, 795,
	0, 86, 0, 0, 0, 0, 1190, 795, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 802, 0, 735, 83, 2684, 0, 735, 735, 0,
	0, 0, 0, 0, 0, 0, 0, 795, 795, 0,
	0, 0, 2686, 795, 0, 0, 0, 0, 0, 1175,
	0, 2683, 0, 0, 0, 0, 0, 0, 0, 795,
	795, 0, 0, 0, 795, 0, 0, 0, 0, 0,
	0, 0, 0, 795, 0, 0, 1180, 0, 0, 795,
	0, 0, 0, 0, 802, 0, 0, 0, 0, 0,
	0, 795, 795, 795, 0, 0, 1459, 0, 0, 1429,
	0, 0, 0, 1441, 1442, 1443, 97, 5083, 0, 795,
	0, 1182, 0, 0, 0, 2074, 0, 1181, 2075, 92,
	795, 0, 2080, 0, 2072, 0, 0, 0, 0, 2077,
	2081, 2076, 0, 2078, 5099, 0, 0, 2079, 1452, 1453,
	2073, 0, 0, 0, 795, 795, 795, 2082, 0, 0,
	0, 2684, 795, 795, 795, 0, 0, 795, 0, 2686,
	2684, 0, 1183, 0, 1981, 0, 0, 0, 795, 0,
	1981, 0, 0, 2686, 0, 0, 868, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	795, 0, 0, 0, 795, 0, 0, 1983, 0, 0,
	77, 0, 0, 0, 76, 78, 0, 1184, 0, 0,
	0, 0, 0, 0, 96, 1448, 0, 795, 1187, 0,
	0, 0, 795, 0, 1438, 1439, 1440, 795, 0, 795,
	0, 0, 0, 1432, 1433, 1434, 1435, 1436, 1437, 0,
	3210, 93, 0, 735, 0, 94, 0, 0, 0, 1983,
	0, 1983, 0, 1189, 1188, 0, 4322, 0, 0, 0,
	0, 0, 0, 0, 98, 868, 0, 0, 0, 0,
	733, 80, 0, 0, 735, 0, 0, 0, 0, 0,
	735, 0, 0, 0, 0, 0, 0, 4696, 2684, 75,
	0, 2686, 0, 0, 868, 868, 0, 0, 1448, 0,
	0, 0, 0, 868, 0, 0, 0, 1438, 1439, 1440,
	0, 0, 0, 0, 0, 0, 1432, 1433, 1434, 1435,
	1436, 1437, 0, 0, 0, 0, 0, 0, 0, 0,
	1178, 0, 0, 0, 0, 1981, 868, 953, 953, 0,
	0, 0, 868, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 733, 733, 0, 0, 0, 0, 0, 0,
	1192, 837, 0, 0, 0, 0, 0, 1459, 4900, 82,
	1429, 0, 733, 733, 1441, 1442, 1443, 0, 0, 0,
	0, 0, 733, 0, 0, 0, 2074, 0, 0, 2075,
	71, 0, 0, 2080, 0, 2072, 0, 795, 0, 0,
	2077, 2081, 2076, 0, 3200, 735, 84, 0, 2079, 1452,
	1453, 2073, 0, 0, 0, 0, 0, 0, 2082, 0,
	3201, 795, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2686, 0,
	0, 0, 0, 0, 70, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 655, 655,
	0, 0, 4899, 0, 735, 0, 735, 735, 735, 735,
	0, 1981, 1981, 1981, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 719, 0, 723, 3202, 0, 0, 761,
	762, 0, 0, 767, 768, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4570, 0,
	0, 0, 0, 0, 0, 799, 0, 0, 0, 0,
	795, 808, 0, 811, 0, 813, 814, 815, 816, 817,
	0, 733, 0, 826, 0, 0, 0, 831, 0, 0,
	0, 838, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4610, 0, 0,
	0, 0, 79, 733, 0, 87, 0, 868, 0, 81,
	0, 1983, 0, 0, 0, 85, 868, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 1176, 0, 0,
	0, 1448, 1177, 0, 733, 0, 1186, 0, 0, 0,
	1438, 1439, 1440, 0, 83, 0, 795, 0, 0, 1432,
	1433, 1434, 1435, 1436, 1437, 2686, 0, 795, 0, 0,
	0, 1405, 0, 1412, 802, 802, 0, 0, 795, 795,
	1423, 0, 795, 795, 795, 0, 795, 0, 0, 0,
	0, 1905, 1906, 1907, 1908, 1909, 0, 795, 0, 0,
	0, 0, 1914, 0, 0, 0, 0, 0, 1179, 0,
	795, 0, 795, 0, 0, 0, 0, 0, 0, 0,
	802, 0, 0, 0, 795, 0, 1933, 0, 0, 0,
	795, 795, 0, 0, 0, 0, 97, 1185, 0, 0,
	795, 0, 0, 0, 0, 0, 0, 795, 0, 92,
	0, 795, 795, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 868, 0, 795, 0, 0, 1190, 0,
	795, 795, 0, 868, 795, 795, 795, 795, 795, 795,
	795, 795, 795, 795, 795, 795, 795, 0, 795, 0,
	0, 2686, 0, 0, 0, 795, 795, 795, 868, 0,
	2686, 0, 5048, 795, 0, 795, 0, 0, 0, 2063,
	0, 1175, 795, 1981, 0, 0, 795, 0, 0, 0,
	0, 795, 1173, 0, 0, 795, 0, 0, 0, 0,
	0, 0, 0, 795, 795, 795, 0, 0, 1180, 0,
	0, 0, 0, 0, 795, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 795, 0,
	0, 795, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1174, 0, 1182, 0, 0, 0, 0, 0, 1181,
	0, 0, 0, 0, 0, 0, 0, 0, 795, 795,
	0, 795, 795, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 1176, 0, 0, 0, 0, 1177, 0, 5105,
	0, 1186, 1448, 0, 0, 0, 0, 0, 0, 0,
	795, 1438, 1439, 1440, 1183, 0, 0, 0, 2686, 0,
	1432, 1433, 1434, 1435, 1436, 1437, 0, 0, 0, 0,
	868, 795, 795, 868, 0, 868, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 868, 868,
	0, 0, 868, 0, 0, 0, 0, 733, 0, 1184,
	0, 0, 0, 1179, 0, 0, 5105, 0, 0, 795,
	1187, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 5169, 0, 0, 868, 0, 0, 0, 0,
	114, 0, 1185, 0, 0, 0, 0, 143, 802, 802,
	0, 0, 0, 2923, 0, 1189, 1188, 0, 0, 0,
	734, 0, 733, 0, 0, 139, 733, 733, 0, 117,
	0, 734, 734, 1190, 0, 0, 0, 0, 136, 0,
	0, 0, 0, 0, 0, 0, 795, 795, 0, 0,
	0, 0, 734, 0, 0, 655, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 734, 734, 0, 0, 0,
	124, 0, 0, 0, 0, 0, 1175, 0, 0, 734,
	734, 734, 795, 0, 0, 0, 1112, 1173, 0, 0,
	1459, 0, 1178, 1429, 0, 0, 0, 1441, 1442, 1443,
	0, 0, 0, 1180, 1981, 868, 1981, 0, 0, 2074,
	0, 0, 2075, 734, 0, 0, 2080, 1981, 2072, 0,
	0, 0, 1192, 2077, 2081, 2076, 0, 2078, 0, 0,
	0, 2079, 1452, 1453, 2073, 0, 1174, 0, 1182, 0,
	0, 2082, 0, 0, 1181, 0, 0, 0, 0, 1905,
	1906, 5022, 5023, 0, 0, 5025, 0, 0, 0, 0,
	0, 129, 1154, 953, 0, 1158, 0, 2466, 2467, 2468,
	2469, 2470, 2471, 2472, 2473, 2474, 2475, 2476, 2477, 2478,
	2479, 2480, 2481, 868, 2487, 0, 0, 0, 0, 1183,
	0, 0, 120, 0, 0, 0, 0, 0, 0, 795,
	0, 0, 0, 0, 0, 0, 1176, 1247, 0, 0,
	0, 1177, 0, 0, 0, 1186, 0, 795, 795, 0,
	1274, 0, 0, 795, 795, 0, 0, 0, 116, 0,
	795, 795, 0, 0, 1184, 126, 0, 795, 0, 0,
	0, 795, 0, 121, 0, 1187, 0, 0, 0, 0,
	0, 122, 0, 0, 0, 0, 140, 0, 0, 795,
	0, 0, 0, 0, 0, 0, 1459, 0, 0, 1429,
	795, 0, 0, 1441, 1442, 1443, 0, 1179, 1171, 0,
	1189, 1188, 0, 0, 0, 2074, 0, 0, 2075, 0,
	0, 0, 2080, 0, 2072, 0, 0, 0, 0, 2077,
	2081, 2076, 0, 2078, 0, 795, 1185, 2079, 1452, 1453,
	2073, 1983, 0, 795, 0, 0, 795, 2082, 795, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 868, 0, 0, 0, 0, 1190, 795, 0,
	0, 0, 128, 0, 0, 795, 1983, 0, 0, 795,
	795, 0, 0, 795, 131, 0, 0, 1178, 0, 795,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 795, 0, 135, 0, 0, 0, 0, 0, 0,
	1175, 115, 0, 0, 0, 0, 0, 1192, 0, 123,
	0, 1198, 0, 0, 0, 0, 0, 0, 1983, 0,
	0, 0, 0, 868, 0, 130, 0, 1180, 0, 868,
	132, 0, 0, 735, 0, 0, 127, 1983, 138, 0,
	137, 119, 0, 0, 868, 0, 0, 0, 0, 0,
	0, 118, 0, 0, 0, 0, 0, 0, 142, 0,
	141, 795, 1182, 0, 0, 0, 0, 0, 1181, 0,
	0, 0, 0, 0, 0, 0, 0, 1981, 0, 3714,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	735, 735, 0, 0, 0, 0, 0, 795, 0, 133,
	655, 0, 0, 1459, 733, 0, 1429, 0, 0, 0,
	1441, 1442, 1443, 1183, 0, 795, 0, 0, 0, 0,
	795, 0, 2074, 735, 0, 2075, 0, 0, 0, 2080,
	735, 2072, 0, 0, 0, 2130, 2077, 2081, 2076, 0,
	2078, 3715, 0, 0, 2079, 1452, 1453, 2073, 0, 0,
	0, 795, 0, 0, 2082, 0, 958, 0, 1184, 0,
	0, 0, 0, 0, 0, 0, 2166, 0, 868, 1187,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 733, 0, 0, 733, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 735, 0,
	0, 0, 1197, 0, 1189, 1188, 0, 0, 0, 868,
	0, 0, 0, 0, 0, 1448, 0, 795, 0, 0,
	0, 0, 0, 0, 1438, 1439, 1440, 0, 0, 0,
	0, 0, 868, 1432, 1433, 1434, 1435, 1436, 1437, 0,
	0, 0, 0, 0, 0, 0, 795, 0, 0, 2286,
	0, 0, 0, 0, 795, 795, 795, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2312, 0, 0, 0, 0, 0, 0,
	0, 1178, 0, 2540, 0, 795, 795, 0, 0, 795,
	795, 795, 0, 2562, 2564, 0, 0, 0, 0, 0,
	2570, 0, 2581, 2584, 0, 2595, 2596, 2601, 2604, 0,
	0, 1192, 0, 0, 2612, 0, 795, 0, 2616, 2622,
	2564, 2564, 2629, 2564, 0, 2564, 2564, 2564, 2387, 0,
	0, 2389, 0, 0, 795, 795, 0, 0, 0, 0,
	0, 0, 0, 0, 868, 0, 0, 0, 0, 795,
	795, 0, 0, 0, 0, 0, 0, 0, 0, 1981,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 795,
	0, 0, 0, 0, 868, 0, 0, 0, 0, 0,
	0, 1448, 0, 1983, 0, 0, 0, 0, 0, 1983,
	1438, 1439, 1440, 0, 0, 0, 0, 5110, 0, 1432,
	1433, 1434, 1435, 1436, 1437, 734, 0, 0, 0, 734,
	734, 0, 0, 0, 0, 2646, 0, 0, 0, 2479,
	2480, 2481, 2487, 0, 0, 0, 0, 0, 795, 0,
	0, 0, 0, 0, 0, 0, 0, 1176, 0, 0,
	0, 0, 1177, 0, 0, 0, 1186, 1206, 0, 795,
	0, 1459, 0, 0, 1429, 3943, 0, 0, 1441, 1442,
	1443, 0, 0, 0, 2297, 0, 0, 0, 0, 868,
	2074, 0, 0, 2075, 0, 0, 0, 2080, 0, 2072,
	0, 733, 0, 0, 2077, 2081, 2076, 0, 2078, 735,
	0, 795, 2079, 1452, 1453, 2073, 0, 0, 0, 0,
	0, 0, 2082, 0, 0, 0, 868, 868, 1179, 0,
	0, 0, 0, 0, 1208, 795, 0, 0, 0, 0,
	0, 0, 795, 0, 0, 0, 0, 0, 795, 0,
	0, 0, 0, 795, 0, 795, 0, 1185, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 795, 0,
	0, 0, 0, 0, 1983, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 795, 0, 1190, 0,
	0, 735, 735, 795, 0, 0, 0, 0, 0, 1982,
	795, 0, 0, 0, 0, 0, 0, 795, 0, 0,
	0, 735, 735, 795, 0, 0, 0, 0, 1448, 0,
	0, 735, 0, 0, 0, 0, 0, 1438, 1439, 1440,
	733, 1175, 0, 0, 5049, 0, 1432, 1433, 1434, 1435,
	1436, 1437, 0, 0, 0, 734, 0, 0, 0, 0,
	0, 1982, 0, 1982, 0, 0, 0, 1207, 1180, 0,
	0, 0, 2962, 868, 0, 0, 0, 0, 0, 0,
	0, 868, 0, 0, 3917, 0, 734, 0, 0, 0,
	0, 0, 734, 0, 0, 0, 0, 0, 0, 0,
	3940, 0, 0, 1182, 0, 1065, 0, 0, 0, 1181,
	795, 0, 0, 1981, 0, 0, 0, 0, 0, 0,
	1983, 1983, 1983, 0, 795, 0, 0, 0, 795, 3944,
	0, 0, 0, 0, 0, 733, 795, 795, 0, 0,
	0, 0, 3942, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 795, 1183, 0, 0, 0, 0, 1209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 868, 0, 868, 868, 795, 0, 0,
	735, 0, 0, 0, 0, 0, 0, 0, 0, 1210,
	0, 0, 1211, 0, 795, 0, 1212, 0, 1412, 1184,
	795, 795, 795, 0, 795, 0, 1914, 0, 2118, 0,
	1187, 0, 0, 795, 1981, 0, 0, 734, 1213, 1423,
	0, 0, 735, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 868, 795, 3548, 1981, 1189, 1188, 0, 0, 0,
	0, 0, 0, 735, 0, 0, 1216, 3085, 3086, 0,
	0, 1981, 0, 3092, 0, 0, 0, 733, 0, 0,
	0, 0, 0, 1214, 0, 795, 734, 0, 734, 734,
	734, 734, 0, 0, 0, 0, 862, 862, 0, 0,
	1215, 0, 3945, 3477, 0, 0, 0, 0, 0, 3121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2540, 2540, 2540, 0, 792, 1459, 0, 0, 1429,
	0, 0, 1178, 1441, 1442, 1443, 0, 1217, 0, 3146,
	0, 0, 0, 0, 0, 2074, 0, 0, 2075, 0,
	3163, 0, 2080, 0, 2072, 0, 0, 0, 0, 2077,
	2081, 2076, 1192, 2078, 0, 795, 0, 2079, 1452, 1453,
	2073, 0, 0, 0, 0, 0, 0, 2082, 0, 0,
	0, 0, 2601, 2601, 2601, 795, 0, 795, 795, 0,
	0, 0, 0, 795, 0, 2234, 1448, 0, 3219, 0,
	0, 0, 0, 1982, 0, 1438, 1439, 1440, 0, 0,
	0, 0, 5039, 0, 1432, 1433, 1434, 1435, 1436, 1437,
	3241, 0, 0, 0, 3245, 0, 0, 0, 0, 795,
	0, 0, 1983, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3257, 0, 0,
	0, 1459, 3261, 0, 1429, 0, 0, 0, 1441, 1442,
	1443, 0, 795, 0, 0, 0, 0, 0, 0, 0,
	2074, 0, 795, 2075, 0, 795, 0, 2080, 0, 2072,
	0, 795, 795, 0, 2077, 2081, 2076, 0, 2078, 0,
	0, 0, 2079, 1452, 1453, 2073, 0, 0, 0, 0,
	0, 0, 2082, 0, 733, 0, 849, 849, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1459, 0, 0,
	1429, 0, 0, 0, 1441, 1442, 1443, 795, 868, 0,
	0, 0, 0, 0, 0, 0, 2074, 795, 0, 2075,
	1444, 0, 0, 2080, 0, 2072, 0, 0, 0, 0,
	2077, 2081, 2076, 0, 2078, 0, 0, 0, 2079, 1452,
	1453, 2073, 0, 0, 0, 0, 0, 0, 2082, 0,
	0, 795, 795, 0, 0, 795, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 735, 2769, 0, 0,
	0, 0, 733, 0, 0, 0, 0, 0, 795, 0,
	0, 0, 0, 0, 0, 2783, 0, 795, 0, 795,
	0, 0, 0, 0, 0, 0, 0, 2800, 0, 0,
	0, 0, 0, 0, 0, 2811, 0, 3453, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 735, 0, 0, 0, 735, 735, 0, 0, 0,
	0, 3480, 0, 0, 795, 0, 0, 2856, 2857, 2858,
	0, 0, 0, 0, 0, 795, 0, 0, 2865, 0,
	1444, 0, 0, 0, 0, 0, 2876, 795, 2880, 2881,
	0, 0, 0, 0, 2885, 0, 0, 2889, 2890, 0,
	0, 2897, 0, 2899, 2902, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 795, 0, 0, 2924, 2925, 0,
	0, 2929, 2930, 0, 0, 0, 795, 0, 0, 0,
	0, 0, 0, 1983, 868, 1983, 0, 0, 2939, 2940,
	0, 0, 0, 0, 0, 795, 1983, 1981, 0, 2953,
	0, 2954, 2955, 2956, 2957, 2958, 0, 0, 2960, 0,
	3555, 0, 2964, 0, 0, 0, 2967, 2968, 0, 0,
	0, 2972, 2973, 0, 0, 2978, 2979, 0, 0, 0,
	0, 2980, 2981, 2982, 0, 0, 0, 2983, 0, 0,
	0, 0, 0, 795, 795, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2996, 0, 1981, 795,
	0, 0, 0, 2999, 0, 0, 3000, 0, 0, 0,
	0, 0, 0, 3011, 3012, 795, 795, 0, 0, 3019,
	0, 0, 0, 0, 0, 1064, 1981, 0, 0, 0,
	0, 1448, 0, 0, 0, 0, 0, 0, 0, 0,
	1438, 1439, 1440, 0, 0, 0, 0, 4886, 0, 1432,
	1433, 1434, 1435, 1436, 1437, 0, 0, 3612, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3620, 3621,
	0, 0, 3624, 0, 0, 0, 3627, 0, 0, 0,
	0, 0, 0, 0, 0, 862, 0, 3632, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3638, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2540, 0, 0, 0, 0, 0,
	3651, 3652, 0, 0, 0, 0, 0, 0, 0, 0,
	3663, 0, 0, 0, 0, 0, 0, 3668, 0, 0,
	0, 2564, 2564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3679, 1448, 0, 0, 0,
	3681, 2540, 0, 0, 0, 1438, 1439, 1440, 0, 0,
	0, 0, 4871, 0, 1432, 1433, 1434, 1435, 1436, 1437,
	0, 0, 0, 0, 0, 3700, 3701, 3702, 0, 0,
	0, 1176, 1444, 0, 0, 3708, 1177, 0, 0, 1444,
	1186, 0, 2612, 0, 0, 0, 861, 861, 0, 0,
	1444, 2562, 0, 0, 0, 2564, 0, 0, 0, 0,
	0, 0, 1448, 3734, 3735, 3736, 0, 0, 0, 0,
	999, 1438, 1439, 1440, 953, 0, 0, 0, 4848, 0,
	1432, 1433, 1434, 1435, 1436, 1437, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1983, 0, 0, 2564,
	0, 2540, 3781, 0, 0, 0, 0, 0, 0, 0,
	0, 1185, 0, 1982, 0, 849, 0, 0, 0, 0,
	0, 0, 0, 735, 0, 0, 0, 0, 0, 0,
	3811, 0, 0, 0, 0, 0, 0, 0, 1459, 0,
	0, 1429, 1190, 0, 0, 1441, 1442, 1443, 1982, 0,
	4612, 3819, 3820, 0, 0, 0, 0, 2074, 0, 0,
	2075, 0, 0, 0, 2080, 0, 2072, 0, 0, 0,
	0, 2077, 2081, 2076, 0, 2078, 0, 0, 0, 2079,
	1452, 1453, 2073, 0, 0, 1175, 0, 0, 0, 2082,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1982, 1459, 735, 0, 1429, 735, 0, 0, 1441, 1442,
	1443, 0, 1180, 0, 0, 734, 0, 0, 0, 1982,
	2074, 0, 0, 2075, 0, 0, 0, 2080, 0, 2072,
	0, 848, 848, 0, 2077, 2081, 2076, 0, 2078, 0,
	3368, 0, 2079, 1452, 1453, 2073, 0, 1182, 0, 0,
	0, 862, 2082, 1181, 0, 0, 0, 0, 862, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3409, 0,
	0, 0, 734, 734, 0, 0, 3417, 0, 3417, 0,
	0, 0, 0, 0, 3426, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1183, 0,
	0, 1176, 0, 0, 0, 734, 1177, 0, 0, 0,
	1186, 0, 734, 0, 0, 0, 0, 0, 0, 0,
	4569, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 862, 1184, 0, 3488, 0, 0, 0, 0,
	0, 0, 0, 1067, 1187, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3512, 3513, 3514, 3515, 0,
	0, 0, 1179, 0, 0, 0, 0, 0, 1983, 0,
	734, 0, 0, 0, 0, 0, 0, 3543, 0, 1189,
	1188, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1185, 0, 0, 0, 0, 0, 0, 0, 4028,
	0, 0, 0, 0, 0, 3540, 3541, 0, 3544, 3545,
	3546, 0, 0, 0, 0, 0, 0, 4037, 4038, 0,
	0, 0, 1190, 4042, 4043, 0, 0, 0, 0, 0,
	4046, 4047, 0, 3557, 0, 0, 862, 4050, 862, 0,
	0, 2540, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 849, 3572, 0, 0, 0, 1178, 0, 849, 4057,
	3573, 0, 0, 862, 0, 1175, 0, 0, 0, 0,
	1423, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 970, 73, 0, 0, 1176, 1192, 0, 0, 0,
	1177, 0, 1180, 0, 1186, 0, 0, 0, 0, 0,
	735, 0, 1444, 1444, 1444, 1444, 1444, 0, 0, 0,
	3595, 1444, 0, 0, 0, 0, 4090, 0, 4093, 0,
	0, 0, 0, 0, 864, 864, 0, 1182, 0, 0,
	1444, 0, 0, 1181, 0, 0, 0, 0, 0, 0,
	0, 0, 849, 0, 0, 4112, 2591, 0, 0, 0,
	0, 0, 0, 0, 0, 862, 1179, 0, 0, 0,
	0, 0, 0, 0, 0, 1982, 0, 0, 0, 955,
	0, 1982, 0, 638, 640, 0, 0, 0, 1183, 0,
	0, 73, 0, 0, 1459, 1185, 0, 1429, 0, 0,
	73, 1441, 1442, 1443, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2074, 0, 861, 2075, 0, 0, 0,
	2080, 0, 2072, 0, 0, 0, 1190, 2077, 2081, 2076,
	0, 2078, 0, 1184, 4141, 2079, 1452, 1453, 2073, 735,
	0, 0, 0, 1448, 1187, 2082, 0, 0, 0, 0,
	0, 4196, 1438, 1439, 1440, 0, 849, 0, 849, 0,
	0, 1432, 1433, 1434, 1435, 1436, 1437, 0, 0, 1175,
	1444, 0, 0, 0, 0, 0, 0, 2942, 0, 1189,
	1188, 734, 0, 849, 0, 0, 0, 0, 0, 0,
	1176, 0, 0, 0, 0, 1177, 1180, 0, 0, 1186,
	0, 0, 0, 0, 0, 0, 1448, 0, 0, 0,
	4222, 0, 1983, 0, 0, 1438, 1439, 1440, 0, 0,
	0, 0, 0, 0, 1432, 1433, 1434, 1435, 1436, 1437,
	0, 1182, 0, 0, 735, 0, 0, 1181, 0, 0,
	0, 4250, 0, 0, 0, 0, 1982, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1178, 0, 0, 0,
	0, 1179, 0, 734, 734, 0, 0, 0, 0, 0,
	1066, 0, 0, 0, 0, 849, 0, 0, 0, 0,
	0, 0, 1183, 734, 734, 0, 1192, 0, 3806, 0,
	1185, 0, 0, 734, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4292, 0, 0,
	0, 0, 0, 1983, 0, 0, 0, 0, 0, 0,
	848, 1190, 0, 0, 0, 0, 0, 1184, 0, 0,
	0, 0, 0, 0, 0, 0, 4309, 0, 1187, 0,
	0, 3417, 0, 1983, 4311, 4312, 4313, 3840, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1983, 0, 0, 0, 1175, 0, 735, 0, 0, 0,
	0, 2928, 0, 1189, 1188, 4321, 0, 0, 0, 4324,
	4325, 4326, 1982, 1982, 1982, 0, 1459, 0, 0, 1429,
	0, 1180, 0, 1441, 1442, 1443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2074, 2564, 0, 2075, 0,
	0, 0, 2080, 0, 2072, 3881, 0, 0, 0, 2077,
	2081, 2076, 3417, 2078, 4366, 0, 1182, 2079, 1452, 1453,
	2073, 0, 1181, 0, 0, 0, 0, 2082, 3910, 3911,
	4383, 0, 734, 0, 0, 0, 0, 0, 0, 0,
	1178, 863, 863, 0, 0, 3927, 0, 0, 0, 0,
	0, 861, 0, 0, 0, 0, 0, 0, 861, 0,
	0, 0, 0, 0, 0, 3957, 0, 1183, 0, 0,
	1192, 0, 0, 0, 734, 0, 0, 0, 0, 0,
	0, 3962, 0, 0, 0, 0, 0, 0, 0, 0,
	3964, 3965, 3966, 0, 0, 3969, 0, 0, 3972, 3973,
	3974, 3975, 0, 0, 0, 734, 0, 0, 0, 0,
	0, 3984, 1184, 3985, 0, 3986, 0, 0, 0, 0,
	0, 0, 0, 1187, 3999, 0, 0, 0, 0, 0,
	0, 0, 4004, 4005, 0, 0, 0, 4008, 4009, 4010,
	4011, 4012, 861, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2284, 0, 1189, 1188,
	0, 0, 0, 1444, 1444, 1444, 1444, 1444, 1444, 1444,
	1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444, 0,
	0, 0, 0, 735, 1444, 0, 0, 0, 0, 1448,
	0, 0, 0, 0, 0, 0, 0, 0, 1438, 1439,
	1440, 2591, 2591, 0, 0, 4554, 0, 1432, 1433, 1434,
	1435, 1436, 1437, 864, 0, 0, 0, 996, 0, 0,
	0, 0, 0, 638, 0, 2612, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1178, 0, 1444, 4582, 0,
	0, 0, 0, 0, 0, 0, 861, 0, 861, 0,
	0, 0, 0, 0, 0, 0, 848, 0, 0, 1444,
	0, 1444, 0, 848, 0, 1192, 0, 1444, 0, 0,
	0, 735, 0, 861, 1982, 0, 0, 0, 1444, 0,
	0, 1444, 0, 4614, 3191, 0, 2591, 2591, 2591, 0,
	0, 0, 1444, 1444, 0, 0, 0, 0, 1444, 0,
	0, 1444, 0, 0, 0, 0, 0, 0, 0, 1444,
	0, 0, 0, 1444, 4114, 0, 0, 0, 0, 1444,
	0, 0, 0, 0, 0, 0, 1444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1444, 0, 0, 0, 848, 0, 0,
	862, 0, 0, 0, 0, 0, 0, 0, 0, 862,
	0, 0, 0, 0, 2542, 861, 0, 0, 0, 0,
	4684, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2542, 0, 2542, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 845, 845,
	2542, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 4717, 0, 0, 1983, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 862, 0, 734, 0,
	4209, 0, 0, 0, 0, 0, 0, 4734, 0, 0,
	0, 862, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 848, 0, 848, 1914, 0, 0, 0, 0, 0,
	4751, 4751, 4751, 0, 4754, 0, 0, 0, 0, 0,
	0, 0, 0, 2564, 0, 0, 0, 1983, 848, 0,
	0, 1448, 0, 734, 0, 0, 0, 734, 734, 0,
	1438, 1439, 1440, 0, 0, 0, 0, 4543, 0, 1432,
	1433, 1434, 1435, 1436, 1437, 1983, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 638, 0, 0, 638, 638, 0, 0, 4267,
	0, 0, 4269, 0, 0, 0, 0, 0, 4272, 4273,
	4274, 0, 0, 4277, 4278, 4279, 0, 0, 0, 1916,
	4282, 4283, 0, 1919, 1920, 0, 0, 0, 0, 864,
	2746, 0, 0, 0, 0, 1982, 864, 1982, 0, 2746,
	848, 0, 0, 0, 0, 0, 0, 0, 1982, 0,
	4298, 4299, 0, 0, 4303, 0, 4304, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 862, 0, 0,
	0, 0, 0, 862, 0, 0, 0, 0, 1413, 0,
	0, 0, 0, 0, 0, 4873, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4320,
	863, 0, 0, 0, 0, 4554, 849, 0, 0, 0,
	0, 0, 0, 4751, 0, 0, 0, 0, 0, 0,
	864, 849, 0, 0, 0, 0, 0, 0, 0, 1444,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 4362, 0, 73, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1459, 0, 0,
	1429, 0, 0, 0, 1441, 1442, 1443, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2074, 0, 2714, 2075,
	0, 0, 4956, 2080, 0, 2072, 2727, 0, 0, 0,
	2077, 2081, 2076, 0, 2078, 4965, 0, 0, 2079, 1452,
	1453, 2073, 0, 0, 0, 0, 0, 0, 2082, 1176,
	0, 0, 0, 0, 1177, 0, 0, 0, 1186, 0,
	3417, 0, 0, 0, 864, 0, 864, 0, 0, 0,
	0, 0, 4476, 0, 0, 0, 0, 4479, 0, 0,
	0, 0, 0, 4485, 0, 0, 4487, 0, 2733, 0,
	0, 864, 1444, 1444, 0, 2591, 2591, 4554, 0, 1444,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 849, 3191, 3191,
	1179, 0, 2729, 849, 0, 0, 0, 0, 1444, 0,
	0, 0, 0, 0, 0, 0, 0, 4522, 4523, 0,
	0, 0, 0, 4529, 0, 0, 0, 4531, 0, 1185,
	0, 0, 0, 1444, 0, 0, 0, 862, 0, 0,
	0, 0, 0, 0, 0, 4544, 0, 0, 0, 0,
	1444, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1190, 0, 0, 864, 0, 0, 2591, 2591, 2591, 2591,
	2591, 2591, 2591, 2591, 2591, 2591, 2591, 2591, 2591, 0,
	2591, 0, 3191, 3191, 3191, 0, 0, 0, 0, 0,
	2719, 0, 0, 0, 4751, 0, 0, 0, 0, 0,
	0, 0, 0, 1175, 0, 5075, 1444, 0, 1982, 0,
	0, 0, 2728, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 862, 0, 1444, 0,
	1180, 0, 1444, 0, 0, 734, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 0, 0, 0, 1444, 0,
	1459, 0, 2724, 1429, 0, 862, 862, 1441, 1442, 1443,
	0, 0, 2542, 2542, 2542, 1182, 863, 0, 0, 2074,
	0, 1181, 2075, 863, 0, 2721, 2080, 845, 2072, 0,
	0, 0, 0, 2077, 2081, 2076, 0, 2078, 0, 0,
	0, 2079, 1452, 1453, 2073, 0, 2715, 862, 0, 2726,
	0, 2082, 0, 862, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 734, 3417, 1183, 734, 0, 0,
	0, 0, 0, 0, 2540, 0, 0, 2508, 0, 0,
	0, 0, 4689, 0, 0, 0, 0, 0, 0, 0,
	0, 2732, 0, 0, 0, 0, 0, 849, 0, 0,
	861, 0, 0, 0, 0, 0, 766, 863, 0, 861,
	0, 1184, 0, 0, 0, 0, 0, 2426, 0, 0,
	0, 2591, 1187, 0, 0, 0, 81, 0, 0, 2710,
	0, 0, 4723, 0, 0, 4726, 0, 0, 0, 0,
	0, 0, 186, 2725, 0, 0, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 2280, 0, 1189, 1188, 2722,
	189, 0, 0, 0, 0, 0, 2720, 0, 0, 0,
	2730, 0, 0, 0, 0, 0, 861, 0, 183, 0,
	0, 0, 0, 2716, 0, 0, 3321, 0, 0, 0,
	1444, 861, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2723, 0, 2717,
	0, 863, 0, 863, 0, 2746, 3321, 1444, 0, 0,
	0, 0, 0, 694, 3354, 715, 0, 717, 0, 0,
	0, 0, 1448, 0, 1178, 0, 0, 0, 863, 0,
	1982, 1438, 1439, 1440, 0, 0, 0, 0, 4515, 0,
	1432, 1433, 1434, 1435, 1436, 1437, 0, 3321, 797, 798,
	0, 800, 0, 849, 1192, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 827,
	0, 830, 0, 0, 834, 0, 0, 0, 862, 0,
	0, 0, 1444, 0, 4854, 0, 0, 862, 0, 0,
	191, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	0, 192, 0, 0, 848, 0, 0, 0, 0, 0,
	0, 0, 0, 4874, 4875, 0, 0, 0, 0, 0,
	863, 0, 0, 0, 0, 0, 181, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 0, 861, 0, 1444,
	0, 197, 0, 861, 0, 0, 0, 1444, 1444, 190,
	0, 1444, 3191, 3191, 1444, 0, 0, 0, 0, 1444,
	0, 0, 734, 845, 0, 1444, 0, 0, 0, 0,
	845, 848, 182, 0, 0, 0, 0, 0, 1444, 1444,
	0, 0, 0, 0, 0, 0, 848, 0, 0, 0,
	1444, 0, 0, 0, 0, 1444, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1444, 0, 1444, 0,
	3191, 3191, 3191, 3191, 3191, 3191, 3191, 3191, 3191, 3191,
	3191, 3191, 3191, 0, 862, 0, 3191, 1444, 1444, 1444,
	0, 4972, 0, 0, 862, 1444, 0, 0, 0, 1459,
	202, 0, 1429, 0, 4982, 0, 1441, 1442, 1443, 176,
	0, 0, 199, 0, 845, 0, 0, 0, 2074, 862,
	0, 1444, 1444, 1444, 0, 2080, 0, 2072, 4998, 0,
	0, 184, 2077, 2081, 2076, 0, 2078, 203, 0, 200,
	2079, 1452, 1453, 2073, 187, 0, 0, 201, 849, 0,
	2082, 734, 0, 0, 0, 1448, 0, 849, 0, 0,
	0, 0, 0, 193, 1438, 1439, 1440, 0, 1444, 0,
	0, 4494, 0, 1432, 1433, 1434, 1435, 1436, 1437, 194,
	0, 0, 0, 2519, 0, 204, 0, 0, 0, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 1444, 0,
	0, 0, 848, 0, 0, 188, 1444, 1444, 848, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 845, 0,
	845, 0, 0, 0, 1982, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3191, 5058, 0, 2627, 0, 0,
	0, 0, 0, 0, 0, 845, 734, 861, 0, 0,
	0, 0, 0, 0, 0, 2542, 0, 0, 864, 0,
	0, 862, 0, 0, 862, 0, 862, 864, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 862,
	862, 0, 0, 862, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 849, 0, 0, 0, 2561, 0,
	0, 0, 2542, 0, 849, 0, 0, 0, 0, 2588,
	0, 0, 0, 0, 0, 0, 862, 0, 0, 0,
	0, 2614, 0, 0, 2561, 1982, 0, 0, 0, 849,
	0, 0, 0, 0, 864, 0, 861, 845, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 864,
	0, 0, 0, 2508, 0, 1982, 0, 0, 0, 0,
	0, 0, 0, 0, 640, 861, 861, 0, 0, 0,
	0, 0, 1982, 0, 2671, 2671, 0, 0, 734, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 861, 0, 0,
	0, 0, 0, 861, 0, 1444, 0, 5178, 0, 0,
	0, 0, 2542, 0, 1444, 1444, 862, 0, 0, 1444,
	1444, 0, 0, 1444, 1444, 0, 0, 1444, 0, 0,
	0, 0, 0, 0, 1444, 0, 0, 0, 0, 0,
	0, 0, 848, 0, 1128, 1129, 0, 0, 2591, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2746, 0, 0, 3321, 0, 3321, 1444, 0, 0,
	1444, 0, 0, 0, 0, 0, 0, 0, 0, 2746,
	2746, 0, 0, 3321, 0, 0, 0, 0, 0, 1444,
	0, 0, 0, 0, 862, 864, 0, 0, 0, 0,
	0, 864, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2591, 0, 0, 0, 0, 849, 1166, 0, 0,
	0, 0, 0, 0, 647, 0, 0, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1248, 1249, 0, 0, 0, 0, 0,
	848, 848, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1444, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1448, 734, 0, 0, 0, 1444,
	0, 0, 848, 1438, 1439, 1440, 0, 0, 848, 0,
	0, 0, 1432, 1433, 1434, 1435, 1436, 1437, 0, 0,
	0, 0, 0, 0, 0, 834, 3321, 1444, 0, 0,
	0, 0, 0, 0, 676, 0, 0, 0, 861, 0,
	0, 0, 0, 862, 0, 0, 0, 861, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 863, 0, 0, 0, 1444,
	780, 783, 785, 0, 863, 0, 0, 0, 0, 0,
	0, 0, 0, 734, 0, 0, 1444, 0, 1444, 1444,
	1444, 0, 0, 1916, 0, 0, 0, 0, 1444, 3191,
	2591, 1444, 1444, 1444, 849, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2671, 0, 0, 0, 0, 0,
	862, 0, 0, 0, 0, 0, 0, 1176, 0, 0,
	0, 0, 1177, 0, 0, 862, 1186, 0, 0, 0,
	0, 863, 0, 1444, 0, 864, 0, 0, 2508, 0,
	0, 0, 0, 0, 0, 0, 863, 0, 3191, 2591,
	1444, 0, 2542, 0, 0, 0, 0, 0, 0, 0,
	0, 1916, 3114, 1459, 0, 0, 1429, 0, 0, 0,
	1441, 1442, 1443, 0, 861, 0, 0, 0, 0, 0,
	0, 0, 2074, 0, 861, 2075, 0, 0, 1179, 2080,
	0, 2072, 0, 0, 0, 0, 2077, 2081, 2076, 0,
	2078, 0, 0, 0, 2079, 1452, 1453, 2073, 0, 861,
	0, 0, 0, 0, 2082, 0, 0, 1185, 1982, 0,
	0, 0, 0, 0, 864, 0, 0, 0, 0, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 0, 0,
	0, 0, 848, 849, 2588, 2588, 0, 0, 1190, 862,
	0, 0, 0, 864, 864, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2158, 2159, 2160, 2161, 0, 2162, 0, 0, 0, 1982,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	862, 1175, 0, 0, 0, 864, 0, 0, 0, 0,
	0, 864, 863, 0, 0, 0, 0, 1982, 863, 0,
	0, 0, 0, 862, 4170, 0, 0, 0, 1180, 0,
	849, 1444, 2247, 0, 3277, 0, 3281, 0, 0, 2588,
	2588, 2588, 0, 0, 0, 2746, 0, 3191, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	0, 861, 0, 1182, 861, 0, 861, 0, 0, 1181,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 861,
	861, 0, 0, 861, 2591, 0, 0, 3191, 0, 848,
	0, 1444, 0, 0, 0, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1183, 0, 861, 0, 0, 0,
	0, 0, 845, 0, 848, 0, 0, 0, 0, 0,
	0, 845, 0, 0, 0, 862, 0, 2356, 2357, 2358,
	2359, 2360, 0, 0, 0, 0, 0, 834, 2385, 0,
	0, 0, 0, 0, 0, 2388, 0, 0, 0, 1184,
	0, 1444, 0, 0, 0, 0, 0, 0, 0, 849,
	1187, 0, 0, 0, 0, 862, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	73, 0, 0, 0, 1444, 0, 0, 0, 845, 0,
	0, 0, 0, 1220, 0, 1189, 1188, 0, 0, 0,
	849, 1444, 0, 845, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 861, 0, 1444, 0,
	0, 1444, 0, 849, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 864, 0, 0, 0,
	0, 0, 0, 0, 0, 864, 0, 0, 0, 0,
	0, 0, 863, 0, 0, 0, 848, 0, 0, 848,
	862, 848, 0, 0, 0, 1075, 0, 2463, 0, 0,
	0, 0, 1178, 0, 848, 848, 0, 0, 848, 0,
	0, 0, 0, 0, 1093, 0, 0, 0, 0, 0,
	0, 0, 1102, 1104, 861, 1106, 0, 862, 862, 0,
	0, 0, 1192, 0, 0, 0, 0, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 849, 0, 1145, 0, 0,
	1444, 863, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 845,
	0, 0, 0, 0, 0, 845, 0, 0, 1448, 0,
	863, 863, 0, 0, 0, 3321, 0, 1438, 1439, 1440,
	0, 0, 864, 0, 4471, 0, 1432, 1433, 1434, 1435,
	1436, 1437, 864, 2591, 2591, 0, 0, 2591, 0, 0,
	0, 0, 1222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 863, 0, 0, 0, 0, 864, 863, 0,
	0, 848, 0, 1444, 0, 0, 0, 0, 0, 0,
	0, 1459, 1444, 0, 1429, 0, 0, 0, 1441, 1442,
	1443, 0, 862, 861, 0, 0, 0, 0, 0, 0,
	2074, 0, 0, 2075, 0, 0, 0, 2080, 0, 2072,
	0, 0, 0, 0, 2077, 2081, 2076, 1916, 2078, 0,
	3321, 0, 2079, 1452, 1453, 2073, 0, 0, 0, 0,
	0, 0, 2082, 0, 0, 0, 0, 0, 0, 3191,
	3191, 0, 3191, 0, 0, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 0, 0, 0, 849, 849, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	861, 0, 0, 0, 0, 0, 0, 0, 2588, 2588,
	0, 0, 0, 0, 862, 861, 862, 862, 0, 0,
	0, 0, 1444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 864,
	0, 0, 864, 0, 864, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 864, 864, 0,
	0, 864, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 73, 0,
	0, 0, 862, 73, 73, 0, 0, 0, 0, 845,
	0, 0, 0, 0, 864, 2671, 0, 0, 2671, 2588,
	2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
	2588, 2588, 0, 2588, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4170, 0, 0, 0, 848, 0,
	0, 0, 849, 863, 0, 0, 0, 0, 0, 861,
	0, 3717, 863, 73, 0, 0, 2561, 0, 0, 0,
	0, 1459, 0, 0, 1429, 0, 0, 0, 1441, 1442,
	1443, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2074, 2065, 0, 2075, 0, 0, 0, 2080, 845, 2072,
	861, 0, 0, 0, 2077, 2081, 2076, 0, 2078, 0,
	0, 0, 2079, 1452, 1453, 2073, 0, 0, 0, 0,
	2115, 0, 2082, 861, 864, 848, 0, 845, 845, 0,
	0, 0, 0, 3777, 0, 0, 0, 0, 0, 0,
	848, 0, 0, 0, 849, 1459, 849, 849, 1429, 0,
	0, 0, 1441, 1442, 1443, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2074, 0, 0, 2075, 2181, 845,
	0, 2080, 2185, 2072, 0, 845, 0, 2197, 2077, 2081,
	2076, 0, 2078, 0, 0, 0, 2079, 1452, 1453, 2073,
	0, 0, 0, 0, 0, 0, 2082, 0, 2244, 863,
	0, 0, 864, 2671, 0, 0, 0, 0, 0, 863,
	0, 0, 849, 0, 2258, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2588, 0, 0, 0, 0, 0,
	0, 0, 0, 2275, 863, 861, 2278, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 848, 2311, 0, 0, 0, 2197,
	2197, 2197, 0, 0, 0, 861, 0, 0, 0, 862,
	0, 0, 1459, 0, 0, 1429, 0, 2333, 2334, 1441,
	1442, 1443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2074, 0, 0, 2075, 848, 0, 0, 2080, 2463,
	2072, 0, 0, 0, 0, 2077, 2081, 2076, 0, 2078,
	0, 0, 0, 2079, 1452, 1453, 2073, 0, 848, 0,
	0, 0, 0, 2082, 0, 0, 1448, 0, 0, 0,
	0, 0, 0, 0, 0, 1438, 1439, 1440, 2701, 0,
	0, 864, 4332, 0, 1432, 1433, 1434, 1435, 1436, 1437,
	0, 0, 0, 0, 0, 0, 2412, 0, 0, 0,
	861, 0, 0, 0, 0, 0, 863, 0, 0, 863,
	0, 863, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 863, 863, 0, 0, 863, 0,
	2794, 0, 0, 0, 0, 0, 0, 861, 861, 0,
	845, 0, 0, 0, 0, 0, 0, 0, 0, 845,
	0, 0, 0, 0, 0, 2843, 0, 0, 864, 0,
	1459, 863, 2443, 1429, 0, 0, 0, 1441, 1442, 1443,
	848, 0, 2460, 864, 0, 0, 0, 0, 0, 2074,
	0, 0, 2075, 0, 0, 0, 2080, 0, 2072, 0,
	0, 0, 0, 2077, 2081, 2076, 0, 2078, 0, 0,
	0, 2079, 1452, 1453, 2073, 862, 0, 0, 0, 0,
	848, 2082, 0, 0, 0, 0, 0, 0, 0, 849,
	0, 0, 1459, 0, 0, 1429, 0, 0, 0, 1441,
	1442, 1443, 0, 0, 0, 0, 2671, 2671, 2932, 2933,
	2671, 2074, 0, 0, 2075, 0, 0, 0, 2080, 0,
	2072, 0, 0, 0, 0, 2077, 2081, 2076, 0, 2078,
	0, 0, 0, 2079, 1452, 1453, 2073, 0, 0, 0,
	0, 863, 0, 2082, 0, 4076, 0, 0, 4101, 0,
	0, 0, 861, 0, 0, 0, 845, 0, 4087, 0,
	0, 0, 0, 0, 0, 0, 845, 864, 0, 0,
	0, 0, 0, 0, 0, 848, 1448, 0, 0, 0,
	0, 1459, 0, 0, 1429, 1438, 1439, 1440, 1441, 1442,
	1443, 845, 4314, 0, 1432, 1433, 1434, 1435, 1436, 1437,
	2074, 0, 0, 2075, 0, 3020, 0, 2080, 864, 2072,
	0, 0, 848, 848, 2077, 2081, 2076, 0, 2078, 863,
	0, 0, 2079, 1452, 1453, 2073, 0, 0, 0, 0,
	0, 864, 2082, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 834, 0, 861, 0, 861, 861, 0, 0,
	1448, 0, 0, 0, 0, 0, 0, 0, 0, 1438,
	1439, 1440, 0, 0, 0, 0, 4305, 0, 1432, 1433,
	1434, 1435, 1436, 1437, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1459, 0, 849, 1429, 0, 0, 0,
	1441, 1442, 1443, 0, 0, 0, 0, 0, 0, 0,
	4075, 0, 2074, 0, 0, 2075, 0, 0, 0, 2080,
	0, 2072, 861, 0, 4074, 0, 2077, 2081, 2076, 0,
	2078, 0, 0, 0, 2079, 1452, 1453, 2073, 0, 0,
	0, 0, 0, 845, 2082, 0, 845, 0, 845, 0,
	0, 0, 0, 864, 0, 2542, 0, 0, 0, 0,
	0, 845, 845, 0, 0, 845, 0, 848, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 863, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 864, 0, 0, 0, 1448, 845, 0,
	0, 0, 0, 0, 0, 0, 1438, 1439, 1440, 0,
	0, 0, 0, 4078, 0, 1432, 1433, 1434, 1435, 1436,
	1437, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1459, 0, 0, 1429, 0, 0, 0, 1441, 1442, 1443,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2074,
	0, 0, 2075, 0, 0, 863, 2080, 0, 2072, 848,
	0, 848, 848, 2077, 2081, 2076, 0, 2078, 0, 0,
	863, 2079, 1452, 1453, 2073, 0, 0, 0, 0, 0,
	0, 2082, 2671, 4070, 0, 0, 0, 0, 864, 0,
	0, 0, 0, 0, 0, 0, 1459, 0, 0, 1429,
	0, 0, 0, 1441, 1442, 1443, 0, 0, 845, 0,
	0, 0, 0, 0, 0, 2074, 0, 0, 2075, 0,
	0, 2588, 2080, 0, 2072, 864, 864, 848, 0, 2077,
	2081, 2076, 0, 2078, 73, 0, 0, 2079, 1452, 1453,
	2073, 0, 0, 0, 0, 1448, 0, 2082, 0, 0,
	0, 73, 0, 0, 1438, 1439, 1440, 0, 0, 0,
	0, 0, 0, 1432, 1433, 1434, 1435, 1436, 1437, 0,
	0, 0, 0, 0, 73, 0, 0, 3339, 0, 0,
	0, 0, 0, 0, 2588, 0, 845, 0, 0, 0,
	0, 0, 0, 0, 863, 0, 0, 0, 0, 861,
	0, 0, 0, 0, 0, 0, 0, 1448, 0, 0,
	0, 0, 0, 0, 0, 0, 1438, 1439, 1440, 0,
	0, 0, 0, 0, 0, 1432, 1433, 1434, 1435, 1436,
	1437, 1459, 0, 0, 1429, 863, 0, 0, 1441, 1442,
	1443, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2074, 0, 0, 2075, 0, 0, 0, 2080, 863, 2072,
	0, 0, 0, 0, 2077, 2081, 2076, 0, 2078, 0,
	864, 0, 2079, 1452, 1453, 2073, 0, 0, 0, 0,
	0, 0, 2082, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1448, 0, 0, 0,
	0, 0, 0, 0, 0, 1438, 1439, 1440, 0, 0,
	0, 0, 0, 0, 1432, 1433, 1434, 1435, 1436, 1437,
	0, 0, 0, 0, 0, 73, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 845, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1459,
	0, 0, 1429, 0, 0, 0, 1441, 1442, 1443, 0,
	0, 2770, 864, 0, 864, 864, 0, 0, 2074, 0,
	863, 2075, 0, 2588, 0, 2080, 0, 2072, 0, 0,
	0, 0, 2077, 2081, 2076, 0, 2078, 0, 0, 0,
	2079, 1452, 1453, 2073, 0, 861, 0, 73, 1448, 0,
	2082, 0, 0, 0, 848, 0, 0, 1438, 1439, 1440,
	863, 0, 845, 0, 0, 0, 1432, 1433, 1434, 1435,
	1436, 1437, 0, 0, 0, 0, 0, 845, 0, 0,
	864, 0, 2588, 0, 2859, 2860, 0, 0, 0, 0,
	0, 0, 0, 1459, 0, 0, 1429, 0, 0, 0,
	1441, 1442, 1443, 0, 0, 2671, 0, 0, 0, 0,
	0, 0, 2074, 0, 0, 2075, 0, 0, 0, 2080,
	2904, 2072, 0, 3585, 3586, 0, 2077, 2081, 2076, 0,
	2078, 0, 2926, 3590, 2079, 1452, 1453, 2073, 0, 1459,
	0, 0, 1429, 0, 2082, 0, 1441, 1442, 1443, 0,
	0, 0, 0, 0, 0, 863, 2945, 0, 2074, 0,
	0, 2075, 0, 0, 0, 2080, 0, 2072, 0, 0,
	0, 1916, 2077, 2081, 2076, 0, 2078, 0, 0, 0,
	2079, 1452, 1453, 2073, 0, 1448, 0, 0, 0, 0,
	2082, 0, 863, 863, 1438, 1439, 1440, 0, 0, 0,
	0, 845, 0, 1432, 1433, 1434, 1435, 1436, 1437, 0,
	0, 0, 1459, 0, 0, 1429, 0, 0, 0, 1441,
	1442, 1443, 0, 0, 3737, 0, 0, 0, 0, 0,
	0, 2074, 0, 0, 2075, 0, 0, 0, 2080, 0,
	2072, 0, 845, 0, 0, 2077, 2081, 2076, 0, 2078,
	848, 1448, 0, 2079, 1452, 1453, 2073, 0, 0, 0,
	1438, 1439, 1440, 2082, 0, 845, 0, 4061, 0, 1432,
	1433, 1434, 1435, 1436, 1437, 0, 1459, 0, 0, 1429,
	0, 0, 0, 1441, 1442, 1443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2074, 0, 0, 2075, 0,
	0, 0, 2080, 0, 2072, 0, 0, 2588, 0, 2077,
	2081, 2076, 0, 2078, 0, 0, 0, 2079, 1452, 1453,
	2073, 1459, 0, 0, 1429, 0, 0, 2082, 1441, 1442,
	1443, 0, 0, 0, 3082, 0, 0, 863, 0, 0,
	2074, 0, 0, 2075, 0, 0, 0, 2080, 0, 2072,
	0, 0, 0, 0, 2077, 2081, 2076, 864, 2078, 0,
	0, 0, 2079, 1452, 1453, 2073, 0, 0, 0, 0,
	0, 0, 2082, 0, 0, 0, 0, 845, 0, 0,
	0, 0, 0, 0, 0, 0, 1448, 0, 0, 0,
	0, 0, 0, 0, 0, 1438, 1439, 1440, 0, 0,
	0, 0, 4048, 0, 1432, 1433, 1434, 1435, 1436, 1437,
	0, 0, 0, 0, 0, 0, 3664, 845, 0, 1459,
	0, 0, 1429, 0, 0, 0, 1441, 1442, 1443, 863,
	0, 863, 863, 0, 0, 0, 0, 0, 2074, 0,
	0, 2075, 0, 0, 0, 2080, 0, 2072, 0, 0,
	73, 0, 2077, 2081, 2076, 0, 2078, 0, 0, 0,
	2079, 1452, 1453, 2073, 0, 0, 0, 0, 0, 0,
	2082, 0, 0, 0, 0, 3841, 0, 0, 0, 0,
	0, 0, 0, 0, 4932, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 863, 0, 0,
	0, 0, 0, 0, 1448, 3860, 0, 0, 0, 0,
	0, 0, 845, 1438, 1439, 1440, 0, 0, 0, 0,
	3987, 0, 1432, 1433, 1434, 1435, 1436, 1437, 0, 1459,
	0, 0, 1429, 0, 0, 0, 1441, 1442, 1443, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2074, 845,
	845, 2075, 0, 864, 0, 2080, 0, 2072, 0, 0,
	0, 0, 2077, 2081, 2076, 0, 2078, 0, 0, 0,
	2079, 1452, 1453, 2073, 0, 3306, 0, 3309, 3310, 0,
	2082, 0, 3314, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1448, 0,
	0, 0, 0, 0, 0, 0, 0, 1438, 1439, 1440,
	0, 0, 0, 0, 3920, 0, 1432, 1433, 1434, 1435,
	1436, 1437, 0, 0, 0, 0, 2588, 2588, 0, 0,
	2588, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1448, 0, 3371, 0, 0, 0,
	0, 0, 0, 1438, 1439, 1440, 0, 0, 0, 0,
	3899, 0, 1432, 1433, 1434, 1435, 1436, 1437, 0, 1459,
	0, 0, 1429, 0, 0, 0, 1441, 1442, 1443, 0,
	0, 3218, 0, 3422, 3423, 0, 0, 0, 2074, 0,
	0, 2075, 0, 0, 845, 2080, 0, 2072, 0, 0,
	0, 0, 2077, 2081, 2076, 0, 2078, 0, 0, 0,
	2079, 1452, 1453, 2073, 0, 0, 0, 1448, 0, 0,
	2082, 2197, 1459, 0, 0, 1429, 1438, 1439, 1440, 1441,
	1442, 1443, 0, 0, 0, 1432, 1433, 1434, 1435, 1436,
	1437, 2074, 0, 0, 2075, 0, 0, 0, 2080, 0,
	2072, 0, 0, 0, 0, 2077, 2081, 2076, 0, 2078,
	0, 0, 0, 2079, 1452, 1453, 2073, 0, 0, 0,
	0, 0, 0, 2082, 863, 3208, 0, 0, 0, 0,
	0, 1448, 0, 0, 0, 0, 845, 0, 845, 845,
	1438, 1439, 1440, 0, 0, 0, 0, 3677, 0, 1432,
	1433, 1434, 1435, 1436, 1437, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1448, 0, 0, 0,
	0, 0, 0, 0, 0, 1438, 1439, 1440, 0, 0,
	0, 0, 0, 0, 1432, 1433, 1434, 1435, 1436, 1437,
	1459, 0, 3566, 1429, 845, 0, 0, 1441, 1442, 1443,
	0, 0, 3203, 0, 0, 0, 0, 0, 0, 2074,
	0, 0, 2075, 0, 0, 0, 2080, 0, 2072, 0,
	0, 0, 0, 2077, 2081, 2076, 0, 2078, 0, 0,
	0, 2079, 1452, 1453, 2073, 0, 0, 4159, 0, 0,
	0, 2082, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1448, 0, 0, 0, 0, 0,
	0, 0, 0, 1438, 1439, 1440, 0, 0, 0, 3605,
	3643, 0, 1432, 1433, 1434, 1435, 1436, 1437, 0, 3613,
	1459, 3614, 0, 1429, 4201, 0, 3619, 1441, 1442, 1443,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2074,
	863, 0, 2075, 0, 0, 0, 2080, 0, 2072, 0,
	0, 0, 0, 2077, 2081, 2076, 0, 2078, 0, 0,
	0, 2079, 1452, 1453, 2073, 1459, 0, 0, 1429, 0,
	0, 2082, 1441, 1442, 1443, 0, 0, 3168, 0, 0,
	0, 0, 0, 0, 2074, 0, 0, 2075, 0, 0,
	0, 2080, 0, 2072, 0, 0, 0, 0, 2077, 2081,
	2076, 0, 2078, 0, 1448, 0, 2079, 1452, 1453, 2073,
	0, 0, 0, 1438, 1439, 1440, 2082, 0, 0, 0,
	3236, 0, 1432, 1433, 1434, 1435, 1436, 1437, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2373, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	189, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 845, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1448, 0, 0, 0, 0, 0,
	0, 0, 0, 1438, 1439, 1440, 0, 0, 0, 0,
	0, 0, 1432, 1433, 1434, 1435, 1436, 1437, 0, 195,
	0, 0, 0, 0, 2369, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1448, 0, 0,
	191, 3825, 0, 0, 0, 0, 1438, 1439, 1440, 0,
	0, 192, 0, 0, 0, 1432, 1433, 1434, 1435, 1436,
	1437, 0, 2379, 0, 0, 0, 0, 0, 0, 0,
	3848, 0, 0, 0, 0, 0, 2371, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 0, 0, 0, 0, 0, 0, 0, 190,
	0, 2372, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3175, 2383, 0, 0, 0, 2181, 0, 0, 0,
	0, 0, 0, 4499, 0, 0, 0, 845, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4513, 4514, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1448, 0, 0, 0, 0,
	0, 0, 0, 0, 1438, 1439, 1440, 0, 0, 0,
	0, 0, 0, 1432, 1433, 1434, 1435, 1436, 1437, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	2374, 0, 199, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2380, 0, 0, 2375, 0, 0, 0, 0, 200,
	0, 0, 0, 0, 187, 0, 0, 201, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 0, 0, 0, 0, 2381, 0,
	0, 0, 0, 0, 2382, 1448, 0, 0, 0, 194,
	0, 0, 0, 2376, 1438, 1439, 1440, 0, 0, 2377,
	0, 0, 0, 1432, 1433, 1434, 1435, 1436, 1437, 0,
	0, 0, 0, 0, 0, 188, 0, 0, 0, 0,
	4033, 4034, 4035, 4036, 0, 0, 0, 0, 0, 0,
	1448, 0, 0, 0, 0, 0, 0, 0, 0, 1438,
	1439, 1440, 0, 0, 0, 0, 0, 2370, 1432, 1433,
	1434, 1435, 1436, 1437, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2767, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 250, 739, 0, 299, 336, 0, 0,
	0, 396, 0, 449, 453, 0, 0, 0, 0, 0,
	0, 307, 0, 744, 2742, 750, 0, 756, 0, 518,
	0, 746, 747, 752, 238, 866, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 748, 745, 749, 755, 743, 753,
	740, 751, 0, 440, 374, 0, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 737, 742, 0, 758, 0, 276,
	277, 398, 258, 406, 0, 0, 461, 419, 417, 0,
	384, 441, 0, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 0, 0, 0, 0, 0,
	0, 0, 0, 4181, 323, 0, 0, 535, 869, 859,
	851, 852, 853, 854, 855, 856, 0, 871, 872, 873,
	874, 875, 528, 865, 0, 850, 857, 858, 860, 2745,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 736, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 0, 738, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 741, 0, 4850, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 0, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 0, 0, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 0, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 0, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 0, 0, 392, 394, 395, 0,
	2743, 0, 754, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 0, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	0, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 2748, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 0, 496, 497, 0, 499, 500, 757,
	502, 503, 504, 505, 506, 0, 625, 507, 0, 508,
	0, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 2443, 534, 536, 538, 616, 0, 0,
	0, 0, 0, 0, 0, 4431, 0, 539, 540, 2744,
	407, 401, 357, 399, 400, 404, 405, 408, 2762, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2760, 0, 0, 0, 0,
	0, 0, 0, 4482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5063, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4665, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1980, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 4711, 1985, 233, 1991, 250, 739, 2001, 299,
	336, 551, 1988, 2033, 396, 2038, 449, 453, 2062, 542,
	1995, 1998, 2008, 2011, 307, 2016, 744, 2024, 750, 2034,
	756, 2053, 518, 2059, 746, 747, 752, 238, 626, 541,
	612, 2047, 1993, 2051, 403, 2044, 2020, 2060, 2037, 2049,
	2030, 2035, 246, 2022, 2023, 2027, 2036, 748, 745, 749,
	755, 743, 753, 740, 751, 2057, 440, 374, 591, 467,
	245, 291, 278, 320, 362, 474, 1992, 2010, 352, 522,
	287, 376, 2043, 266, 409, 2056, 498, 373, 2050, 481,
	501, 2012, 393, 272, 432, 488, 489, 737, 742, 2000,
	758, 1987, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 2018, 384, 441, 598, 1990, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 2058, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 1986, 235, 236, 237, 239, 240,
	241, 736, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 738, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 2002, 2003, 2004, 741, 2005, 2006, 2007, 279, 280,
	281, 282, 283, 284, 2009, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 2013, 302, 304, 2014, 305,
	308, 2015, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 2017, 318, 319, 321, 2019, 324, 325, 326,
	327, 328, 2021, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 2025, 349, 350, 351, 353, 2026, 354,
	355, 358, 359, 360, 361, 2028, 363, 571, 2029, 364,
	365, 366, 2031, 2032, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 754, 410, 411, 412, 413,
	414, 415, 416, 418, 2040, 420, 421, 422, 581, 423,
	424, 425, 426, 2041, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 2042, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 584, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 2045, 475, 585, 476,
	477, 478, 479, 480, 2046, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 2048,
	499, 500, 757, 502, 503, 504, 505, 506, 2052, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 2054, 2055, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 2061, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 2039, 1989, 1994, 1996, 1997, 1999, 0, 0, 0,
	0, 0, 0, 0, 0, 1462, 0, 0, 0, 0,
	0, 0, 1459, 0, 0, 1429, 0, 0, 1978, 1441,
	1442, 1443, 1473, 1475, 1457, 1502, 1523, 0, 1574, 1620,
	1590, 1445, 1707, 1713, 1446, 1774, 1778, 0, 1454, 1504,
	1430, 1554, 1569, 1584, 1596, 1449, 1455, 1447, 1711, 1450,
	1855, 1866, 1886, 1451, 1452, 1453, 1431, 1847, 1904, 1673,
	1832, 1484, 0, 1460, 1798, 0, 0, 1721, 1836, 0,
	0, 1498, 0, 0, 0, 0, 1646, 1635, 1669, 1782,
	1607, 1727, 1535, 1694, 1872, 1764, 1683, 1878, 1796, 1497,
	1563, 1547, 1599, 1664, 1805, 1480, 1564, 1639, 1870, 1559,
	1685, 0, 1526, 1729, 1871, 1834, 1682, 1845, 1815, 1840,
	1570, 1708, 1533, 1755, 1822, 1823, 1493, 1606, 1528, 1881,
	1478, 1538, 1546, 1716, 1517, 1724, 1902, 1656, 1789, 1739,
	1737, 0, 1696, 1765, 1897, 0, 0, 1583, 0, 1577,
	1715, 1889, 1524, 1863, 1758, 1720, 1658, 1792, 1827, 1579,
	1560, 1561, 1617, 1757, 1602, 1536, 1877, 1653, 1657, 1655,
	1651, 1648, 1652, 1649, 1650, 1654, 1604, 1647, 0, 0,
	1494, 1714, 1642, 1812, 1492, 1761, 1600, 1573, 0, 0,
	0, 1879, 1693, 1695, 0, 1848, 1643, 1641, 1552, 1551,
	1495, 1880, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471,
	1472, 1474, 1476, 1477, 1481, 1482, 1483, 1485, 1486, 1487,
	1488, 1489, 1490, 1491, 1499, 1500, 1501, 1503, 1506, 1507,
	1508, 1510, 1511, 1512, 1513, 1514, 1515, 1518, 1519, 1520,
	1521, 1522, 1525, 1527, 1529, 1530, 1531, 1532, 1534, 1537,
	1539, 1540, 1541, 1542, 1543, 1544, 1545, 1548, 1549, 0,
	1550, 1553, 1555, 1556, 1557, 1558, 1562, 1565, 1566, 1567,
	1568, 1571, 1572, 1575, 1576, 1578, 1580, 1581, 1582, 1585,
	0, 1586, 1587, 1588, 1589, 1591, 1592, 1593, 1594, 1595,
	1597, 0, 0, 1598, 1601, 1603, 1605, 1608, 1609, 1610,
	1611, 0, 1612, 1613, 1614, 1615, 1616, 1618, 0, 1619,
	1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630,
	1631, 1632, 1633, 1634, 1637, 1638, 1640, 0, 1644, 1645,
	1660, 1661, 1662, 1663, 1665, 1667, 1668, 1666, 1670, 1671,
	1672, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1684,
	1686, 1687, 0, 1688, 1689, 0, 1690, 1691, 1692, 1697,
	1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1709,
	1710, 1712, 1726, 1728, 0, 1730, 1731, 1732, 1733, 1734,
	1735, 1736, 1738, 1740, 1741, 1742, 1743, 1744, 1745, 1746,
	1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1756, 1759,
	1760, 1762, 1763, 1766, 1767, 1768, 1769, 1770, 1771, 1772,
	1773, 1775, 1776, 1777, 1779, 1780, 1781, 1783, 1784, 1785,
	1786, 1787, 1788, 1790, 1791, 1793, 1794, 1795, 0, 1797,
	1799, 1800, 1801, 1802, 1803, 1804, 1807, 1806, 1808, 1809,
	1810, 1811, 1813, 1814, 1816, 1817, 1818, 1819, 1820, 1821,
	1824, 1825, 1826, 1828, 1829, 1830, 1831, 1833, 1835, 1837,
	1839, 1838, 1841, 1842, 1843, 1844, 1846, 1849, 1850, 1851,
	1852, 1853, 1854, 1856, 1857, 1858, 1859, 1860, 1861, 1862,
	1864, 0, 1865, 1867, 1868, 1869, 1873, 1874, 1875, 1876,
	1882, 1883, 1884, 1885, 1887, 0, 0, 1888, 1890, 1891,
	1892, 1893, 1894, 1895, 1896, 1898, 1899, 1900, 1901, 0,
	1903, 1636, 1725, 1719, 1659, 1717, 1718, 1722, 1723, 0,
	0, 1479, 1496, 1505, 1509, 1516, 0, 1448, 0, 0,
	0, 0, 0, 0, 0, 0, 1438, 1439, 1440, 0,
	0, 0, 0, 0, 0, 1432, 1433, 1434, 1435, 1436,
	1437, 1980, 0, 5131, 908, 0, 0, 0, 0, 995,
	0, 0, 0, 0, 0, 0, 0, 0, 1985, 233,
	1991, 250, 739, 2001, 299, 336, 551, 1988, 2033, 396,
	2038, 449, 453, 2062, 542, 1995, 1998, 2008, 2011, 307,
	2016, 744, 2024, 750, 2034, 756, 2053, 518, 2059, 746,
	747, 752, 238, 626, 541, 612, 2047, 1993, 2051, 403,
	2044, 2020, 2060, 2037, 2049, 2030, 2035, 246, 2022, 2023,
	2027, 2036, 748, 745, 749, 755, 743, 753, 740, 751,
	2057, 440, 374, 591, 467, 245, 291, 278, 320, 362,
	474, 1992, 2010, 352, 522, 287, 376, 2043, 266, 409,
	2056, 498, 373, 2050, 481, 501, 2012, 393, 272, 432,
	488, 489, 737, 742, 2000, 758, 1987, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 2018, 384, 441,
	598, 1990, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 2058, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 1986,
	235, 236, 237, 239, 240, 241, 736, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 738, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 2002, 2003, 2004, 741,
	2005, 2006, 2007, 279, 280, 281, 282, 283, 284, 2009,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	2013, 302, 304, 2014, 305, 308, 2015, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 2017, 318, 319,
	321, 2019, 324, 325, 326, 327, 328, 2021, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 2025, 349,
	350, 351, 353, 2026, 354, 355, 358, 359, 360, 361,
	2028, 363, 571, 2029, 364, 365, 366, 2031, 2032, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	754, 410, 411, 412, 413, 414, 415, 416, 418, 2040,
	420, 421, 422, 581, 423, 424, 425, 426, 2041, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 2042,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 2045, 475, 585, 476, 477, 478, 479, 480, 2046,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 2048, 499, 500, 757, 502, 503,
	504, 505, 506, 2052, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 2054, 2055, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 2061, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 2039, 1989, 1994, 1996,
	1997, 1999, 1980, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1985,
	233, 1991, 250, 739, 2001, 299, 336, 551, 1988, 2033,
	396, 2038, 449, 453, 2062, 542, 1995, 1998, 2008, 2011,
	307, 2016, 744, 2024, 750, 2034, 756, 2053, 518, 2059,
	746, 747, 752, 238, 626, 541, 612, 2047, 1993, 2051,
	403, 2044, 2020, 2060, 2037, 2049, 2030, 2035, 246, 2022,
	2023, 2027, 2036, 748, 745, 749, 755, 743, 753, 740,
	751, 2057, 440, 374, 591, 467, 245, 291, 278, 320,
	362, 474, 1992, 2010, 352, 522, 287, 376, 2043, 266,
	409, 2056, 498, 373, 2050, 481, 501, 2012, 393, 272,
	432, 488, 489, 737, 742, 2000, 758, 1987, 276, 277,
	398, 258, 406, 603, 569, 461, 419, 417, 2018, 384,
	441, 598, 1990, 0, 306, 0, 301, 397, 537, 264,
	516, 435, 402, 356, 464, 493, 303, 288, 289, 332,
	434, 322, 274, 527, 566, 570, 568, 564, 561, 565,
	562, 563, 567, 323, 560, 0, 535, 544, 578, 558,
	586, 543, 583, 553, 298, 582, 547, 546, 592, 573,
	574, 528, 588, 559, 557, 550, 549, 545, 2058, 223,
	224, 225, 226, 227, 228, 229, 230, 231, 232, 234,
	1986, 235, 236, 237, 239, 240, 241, 736, 242, 243,
	244, 247, 248, 249, 251, 611, 252, 253, 254, 255,
	256, 257, 548, 738, 259, 260, 261, 262, 263, 265,
	267, 268, 269, 270, 271, 273, 275, 2002, 2003, 2004,
	741, 2005, 2006, 2007, 279, 280, 281, 282, 283, 284,
	2009, 285, 286, 290, 292, 293, 294, 295, 296, 297,
	300, 2013, 302, 304, 2014, 305, 308, 2015, 309, 310,
	311, 312, 313, 314, 315, 316, 552, 317, 2017, 318,
	319, 321, 2019, 324, 325, 326, 327, 328, 2021, 329,
	554, 555, 330, 331, 333, 334, 335, 337, 338, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 2025,
	349, 350, 351, 353, 2026, 354, 355, 358, 359, 360,
	361, 2028, 363, 571, 2029, 364, 365, 366, 2031, 2032,
	367, 368, 369, 370, 371, 372, 375, 572, 377, 378,
	379, 380, 381, 382, 383, 613, 385, 386, 387, 388,
	389, 390, 391, 575, 576, 392, 394, 395, 577, 579,
	580, 754, 410, 411, 412, 413, 414, 415, 416, 418,
	2040, 420, 421, 422, 581, 423, 424, 425, 426, 2041,
	427, 428, 429, 430, 431, 433, 436, 437, 438, 439,
	2042, 442, 443, 444, 445, 446, 447, 448, 450, 451,
	452, 454, 455, 456, 614, 457, 458, 459, 460, 584,
	462, 463, 615, 465, 466, 468, 469, 470, 471, 472,
	473, 624, 2045, 475, 585, 476, 477, 478, 479, 480,
	2046, 482, 483, 484, 485, 486, 487, 490, 491, 492,
	494, 495, 587, 496, 497, 2048, 499, 500, 757, 502,
	503, 504, 505, 506, 2052, 625, 507, 589, 508, 590,
	509, 510, 511, 512, 513, 514, 515, 517, 2054, 2055,
	519, 520, 521, 523, 524, 525, 526, 529, 530, 531,
	532, 533, 2061, 534, 536, 538, 616, 593, 594, 595,
	596, 597, 599, 600, 601, 602, 539, 540, 556, 407,
	401, 357, 399, 400, 404, 405, 408, 2039, 1989, 1994,
	1996, 1997, 1999, 1980, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1985, 233, 1991, 250, 739, 2001, 2918, 336, 551, 1988,
	2033, 396, 2038, 449, 453, 2062, 542, 1995, 1998, 2008,
	2011, 307, 2016, 744, 2024, 750, 2034, 756, 2053, 518,
	2059, 746, 747, 752, 238, 626, 541, 612, 2047, 1993,
	2051, 403, 2044, 2020, 2060, 2037, 2049, 2030, 2035, 246,
	2022, 2023, 2027, 2036, 748, 745, 749, 755, 743, 753,
	740, 751, 2057, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 2916, 1992, 2010, 352, 522, 287, 376, 2043,
	266, 409, 2056, 498, 373, 2050, 481, 501, 2012, 393,
	272, 432, 488, 489, 737, 742, 2000, 758, 1987, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 2018,
	384, 441, 598, 1990, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 2058,
	223, 224, 225, 226, 227, 2917, 229, 230, 231, 232,
	234, 1986, 235, 236, 237, 239, 240, 241, 736, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 738, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 2002, 2003,
	2004, 741, 2005, 2006, 2007, 279, 280, 281, 282, 283,
	284, 2009, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 2013, 302, 304, 2014, 305, 308, 2015, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 2017,
	318, 319, 321, 2019, 324, 325, 326, 327, 328, 2021,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	2025, 349, 350, 351, 353, 2026, 354, 355, 358, 359,
	360, 361, 2028, 363, 571, 2029, 364, 365, 366, 2031,
	2032, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 754, 410, 411, 412, 413, 414, 415, 416,
	418, 2040, 420, 421, 422, 581, 423, 424, 425, 426,
	2041, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 2042, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 2045, 475, 585, 476, 477, 478, 479,
	480, 2046, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 2048, 499, 500, 757,
	502, 503, 504, 505, 506, 2052, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 2054,
	2055, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 2061, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 2039, 1989,
	1994, 1996, 1997, 1999, 867, 0, 1367, 908, 0, 0,
	0, 701, 995, 0, 0, 0, 0, 0, 712, 713,
	714, 1985, 233, 1991, 250, 739, 2001, 299, 336, 0,
	1988, 2033, 396, 2038, 449, 453, 2062, 0, 1995, 1998,
	2008, 2011, 307, 2016, 744, 2024, 750, 2034, 756, 2053,
	518, 2059, 746, 747, 752, 238, 866, 541, 612, 2047,
	1993, 2051, 3397, 2044, 2020, 2060, 2037, 2049, 2030, 2035,
	246, 2022, 2023, 2027, 2036, 748, 745, 749, 755, 743,
	753, 740, 751, 2057, 440, 374, 0, 467, 245, 291,
	278, 320, 362, 474, 1992, 2010, 352, 522, 287, 376,
	2043, 266, 409, 2056, 498, 373, 2050, 481, 501, 2012,
	393, 272, 432, 488, 489, 737, 742, 2000, 758, 1987,
	276, 277, 398, 258, 406, 0, 0, 461, 419, 417,
	2018, 384, 441, 0, 1990, 0, 306, 0, 301, 397,
	537, 264, 516, 435, 402, 356, 464, 493, 303, 288,
	289, 332, 434, 322, 274, 527, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 323, 0, 0, 535, 869,
	859, 851, 852, 853, 854, 855, 856, 0, 871, 872,
	873, 874, 875, 528, 865, 0, 850, 857, 858, 860,
	2058, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 234, 1986, 235, 236, 237, 239, 240, 241, 736,
	242, 243, 244, 247, 248, 249, 251, 611, 252, 253,
	254, 255, 256, 257, 0, 738, 259, 260, 261, 262,
	263, 265, 267, 268, 269, 270, 271, 273, 275, 2002,
	2003, 2004, 741, 2005, 2006, 2007, 279, 280, 281, 282,
	283, 284, 2009, 285, 286, 290, 292, 293, 294, 295,
	296, 297, 300, 2013, 302, 304, 2014, 305, 308, 2015,
	309, 310, 311, 312, 313, 314, 315, 316, 0, 317,
	2017, 318, 319, 321, 2019, 324, 325, 326, 327, 328,
	2021, 329, 0, 0, 330, 331, 333, 334, 335, 337,
	338, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 2025, 349, 350, 351, 353, 2026, 354, 355, 358,
	359, 360, 361, 2028, 363, 0, 2029, 364, 365, 366,
	2031, 2032, 367, 368, 369, 370, 371, 372, 375, 0,
	377, 378, 379, 380, 381, 382, 383, 613, 385, 386,
	387, 388, 389, 390, 391, 3396, 0, 392, 394, 395,
	0, 0, 0, 754, 410, 411, 412, 413, 414, 415,
	416, 418, 2040, 420, 421, 422, 0, 423, 424, 425,
	426, 2041, 427, 428, 429, 430, 431, 433, 436, 437,
	438, 439, 2042, 442, 443, 444, 445, 446, 447, 448,
	450, 451, 452, 454, 455, 456, 614, 457, 458, 459,
	460, 0, 462, 463, 615, 465, 466, 468, 469, 470,
	471, 472, 473, 624, 2045, 475, 2748, 476, 477, 478,
	479, 480, 2046, 482, 483, 484, 485, 486, 487, 490,
	491, 492, 494, 495, 0, 496, 497, 2048, 499, 500,
	757, 502, 503, 504, 505, 506, 2052, 625, 507, 0,
	508, 0, 509, 510, 511, 512, 513, 514, 515, 517,
	2054, 2055, 519, 520, 521, 523, 524, 525, 526, 529,
	530, 531, 532, 533, 2061, 534, 536, 538, 616, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 539, 540,
	0, 407, 401, 357, 399, 400, 404, 405, 408, 2039,
	1989, 1994, 1996, 1997, 1999, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 709, 710, 711, 0, 0,
	0, 0, 0, 0, 3398, 3399, 705, 706, 707, 708,
	794, 0, 981, 908, 0, 986, 987, 976, 995, 966,
	0, 0, 0, 0, 0, 0, 0, 2537, 233, 0,
	250, 739, 0, 299, 336, 971, 0, 959, 396, 0,
	449, 453, 0, 542, 991, 0, 963, 2538, 307, 984,
	744, 0, 750, 985, 756, 983, 518, 0, 746, 747,
	752, 238, 1061, 541, 612, 0, 0, 0, 977, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 748, 745, 749, 755, 743, 753, 740, 751, 0,
	440, 374, 591, 467, 245, 291, 278, 320, 362, 474,
	0, 0, 352, 522, 287, 376, 0, 266, 409, 1014,
	498, 373, 0, 481, 501, 0, 393, 272, 432, 488,
	489, 737, 742, 0, 758, 0, 276, 277, 398, 258,
	406, 603, 569, 461, 419, 417, 0, 384, 441, 598,
	972, 0, 306, 0, 301, 397, 537, 264, 516, 435,
	402, 356, 464, 493, 303, 288, 289, 332, 434, 322,
	274, 527, 1042, 1044, 1040, 1036, 1037, 1002, 1003, 1043,
	1039, 323, 1038, 0, 535, 1047, 1058, 1055, 1060, 1046,
	1059, 1053, 856, 582, 1050, 1049, 1063, 1056, 1057, 528,
	1062, 1001, 1054, 1052, 1051, 1048, 2536, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 234, 0, 235,
	236, 237, 239, 240, 241, 736, 242, 243, 244, 247,
	248, 249, 251, 611, 252, 253, 254, 255, 256, 257,
	1026, 1004, 259, 260, 261, 262, 263, 265, 267, 268,
	269, 270, 271, 273, 275, 1015, 1005, 1010, 1016, 1006,
	1007, 1011, 279, 280, 281, 282, 283, 284, 0, 285,
	286, 290, 292, 293, 294, 295, 296, 297, 300, 0,
	302, 304, 0, 305, 308, 0, 309, 310, 311, 312,
	313, 314, 315, 316, 1018, 317, 0, 318, 319, 321,
	0, 324, 325, 326, 327, 328, 0, 329, 1027, 975,
	330, 331, 333, 334, 335, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 0, 349, 350,
	351, 353, 0, 354, 355, 358, 359, 360, 361, 0,
	363, 1028, 0, 364, 365, 366, 1008, 1009, 367, 368,
	369, 370, 371, 372, 375, 1041, 377, 378, 379, 380,
	381, 382, 383, 613, 385, 386, 387, 388, 389, 390,
	391, 575, 1019, 392, 394, 395, 1025, 579, 1020, 754,
	410, 411, 412, 413, 414, 415, 416, 418, 0, 420,
	421, 422, 1021, 423, 424, 425, 426, 0, 427, 428,
	429, 430, 431, 433, 436, 437, 438, 439, 0, 442,
	443, 444, 445, 446, 447, 448, 450, 451, 452, 454,
	455, 456, 614, 457, 458, 459, 460, 978, 462, 463,
	615, 465, 466, 468, 469, 470, 471, 472, 473, 624,
	1012, 475, 585, 476, 477, 478, 479, 480, 0, 482,
	483, 484, 485, 486, 487, 490, 491, 492, 494, 495,
	1022, 496, 497, 1013, 499, 500, 757, 502, 503, 504,
	505, 506, 0, 625, 507, 1023, 508, 1024, 509, 510,
	511, 512, 513, 514, 515, 517, 0, 962, 519, 520,
	521, 523, 524, 525, 526, 529, 530, 531, 532, 533,
	0, 534, 536, 538, 616, 593, 1029, 1030, 1033, 1031,
	1032, 1034, 1035, 1045, 539, 540, 556, 407, 401, 357,
	399, 400, 404, 405, 408, 0, 0, 0, 1017, 0,
	0, 0, 960, 0, 0, 794, 0, 981, 908, 0,
	986, 987, 976, 995, 966, 0, 0, 967, 2534, 0,
	956, 957, 2535, 233, 0, 250, 739, 0, 299, 336,
	971, 0, 959, 396, 0, 449, 453, 96, 542, 991,
	0, 963, 0, 307, 984, 744, 0, 750, 985, 756,
	983, 518, 0, 746, 747, 752, 238, 1061, 541, 612,
	0, 0, 0, 977, 93, 0, 0, 0, 94, 0,
	0, 246, 0, 0, 0, 0, 748, 745, 749, 755,
	743, 753, 740, 751, 0, 440, 374, 1917, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 1014, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 737, 742, 0, 758,
	0, 276, 277, 398, 258, 406, 603, 569, 461, 419,
	417, 0, 384, 441, 598, 972, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 1042, 1044, 1040,
	1036, 1037, 1002, 1003, 1043, 1039, 323, 1038, 0, 535,
	1047, 1058, 1055, 1060, 1046, 1059, 1053, 856, 582, 1050,
	1049, 1063, 1056, 1057, 528, 1062, 1001, 1054, 1052, 1051,
	1048, 0, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	736, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 1026, 1004, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	1015, 1005, 1010, 1016, 1006, 1007, 1011, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 1018,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 1027, 975, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 1028, 0, 364, 365,
	366, 1008, 1009, 367, 368, 369, 370, 371, 372, 375,
	1041, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 575, 1019, 392, 394,
	395, 1025, 579, 1020, 754, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 1021, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 978, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 1012, 475, 585, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 1022, 496, 497, 1013, 499,
	500, 757, 502, 503, 504, 505, 506, 0, 625, 507,
	1023, 508, 1024, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 962, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	593, 1029, 1030, 1033, 1031, 1032, 1034, 1035, 1045, 539,
	540, 556, 407, 401, 357, 399, 400, 404, 405, 408,
	0, 0, 0, 1017, 0, 0, 0, 960, 0, 97,
	794, 0, 981, 908, 0, 986, 987, 976, 995, 966,
	0, 0, 967, 4741, 0, 956, 957, 0, 233, 0,
	250, 739, 0, 299, 336, 971, 0, 959, 396, 0,
	449, 453, 96, 542, 991, 0, 963, 0, 307, 984,
	744, 0, 750, 985, 756, 983, 518, 0, 746, 747,
	752, 238, 1061, 541, 612, 0, 0, 0, 977, 93,
	0, 0, 0, 94, 0, 0, 246, 0, 0, 0,
	0, 748, 745, 749, 755, 743, 753, 740, 751, 0,
	440, 374, 1917, 467, 245, 291, 278, 320, 362, 474,
	0, 0, 352, 522, 287, 376, 2621, 266, 409, 1014,
	498, 373, 0, 481, 501, 0, 393, 272, 432, 488,
	489, 737, 742, 0, 758, 0, 276, 277, 398, 258,
	406, 603, 569, 461, 419, 417, 0, 384, 441, 598,
	972, 0, 306, 0, 301, 397, 537, 264, 516, 435,
	402, 356, 464, 493, 303, 288, 289, 332, 434, 322,
	274, 527, 1042, 1044, 1040, 1036, 1037, 1002, 1003, 1043,
	1039, 323, 1038, 0, 535, 1047, 1058, 1055, 1060, 1046,
	1059, 1053, 856, 582, 1050, 1049, 1063, 1056, 1057, 528,
	1062, 1001, 1054, 1052, 1051, 1048, 0, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 234, 0, 235,
	236, 237, 239, 240, 241, 736, 242, 243, 244, 247,
	248, 249, 251, 611, 252, 253, 254, 255, 256, 257,
	1026, 1004, 259, 260, 261, 262, 263, 265, 267, 268,
	269, 270, 271, 273, 275, 1015, 1005, 1010, 1016, 1006,
	1007, 1011, 279, 280, 281, 282, 283, 284, 0, 285,
	286, 290, 292, 293, 294, 295, 296, 297, 300, 0,
	302, 304, 0, 305, 308, 0, 309, 310, 311, 312,
	313, 314, 315, 316, 1018, 317, 0, 318, 319, 321,
	0, 324, 325, 326, 327, 328, 0, 329, 1027, 975,
	330, 331, 333, 334, 335, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 0, 349, 350,
	351, 353, 0, 354, 355, 358, 359, 360, 361, 0,
	363, 1028, 0, 364, 365, 366, 1008, 1009, 367, 368,
	369, 370, 371, 372, 375, 1041, 377, 378, 379, 380,
	381, 382, 383, 613, 385, 386, 387, 388, 389, 390,
	391, 575, 1019, 392, 394, 395, 1025, 579, 1020, 754,
	410, 411, 412, 413, 414, 415, 416, 418, 0, 420,
	421, 422, 1021, 423, 424, 425, 426, 0, 427, 428,
	429, 430, 431, 433, 436, 437, 438, 439, 0, 442,
	443, 444, 445, 446, 447, 448, 450, 451, 452, 454,
	455, 456, 614, 457, 458, 459, 460, 978, 462, 463,
	615, 465, 466, 468, 469, 470, 471, 472, 473, 624,
	1012, 475, 585, 476, 477, 478, 479, 480, 0, 482,
	483, 484, 485, 486, 487, 490, 491, 492, 494, 495,
	1022, 496, 497, 1013, 499, 500, 757, 502, 503, 504,
	505, 506, 0, 625, 507, 1023, 508, 1024, 509, 510,
	511, 512, 513, 514, 515, 517, 0, 962, 519, 520,
	521, 523, 524, 525, 526, 529, 530, 531, 532, 533,
	0, 534, 536, 538, 616, 593, 1029, 1030, 1033, 1031,
	1032, 1034, 1035, 1045, 539, 540, 556, 407, 401, 357,
	399, 400, 404, 405, 408, 0, 0, 0, 1017, 0,
	0, 0, 960, 0, 97, 794, 0, 981, 908, 0,
	986, 987, 976, 995, 966, 0, 0, 967, 0, 0,
	956, 957, 0, 233, 0, 250, 739, 0, 299, 336,
	971, 0, 959, 396, 0, 449, 453, 96, 542, 991,
	0, 963, 0, 307, 984, 744, 0, 750, 985, 756,
	983, 518, 0, 746, 747, 752, 238, 1061, 541, 612,
	0, 0, 0, 977, 93, 0, 0, 0, 94, 0,
	0, 246, 0, 0, 0, 0, 748, 745, 749, 755,
	743, 753, 740, 751, 0, 440, 374, 1917, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 1014, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 737, 742, 0, 758,
	0, 276, 277, 398, 258, 406, 603, 569, 461, 419,
	417, 0, 384, 441, 598, 972, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 1042, 1044, 1040,
	1036, 1037, 1002, 1003, 1043, 1039, 323, 1038, 0, 535,
	1047, 1058, 1055, 1060, 1046, 1059, 1053, 856, 582, 1050,
	1049, 1063, 1056, 1057, 528, 1062, 1001, 1054, 1052, 1051,
	1048, 0, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	736, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 1026, 1004, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	1015, 1005, 1010, 1016, 1006, 1007, 1011, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 1018,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 1027, 975, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 1028, 0, 364, 365,
	366, 1008, 1009, 367, 368, 369, 370, 371, 372, 375,
	1041, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 575, 1019, 392, 394,
	395, 1025, 579, 1020, 754, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 1021, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 978, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 1012, 475, 585, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 1022, 496, 497, 1013, 499,
	500, 757, 502, 503, 504, 505, 506, 0, 625, 507,
	1023, 508, 1024, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 962, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	593, 1029, 1030, 1033, 1031, 1032, 1034, 1035, 1045, 539,
	540, 556, 407, 401, 357, 399, 400, 404, 405, 408,
	0, 0, 0, 1017, 0, 0, 0, 960, 0, 97,
	794, 0, 981, 908, 0, 986, 987, 976, 995, 966,
	0, 0, 967, 0, 0, 956, 957, 0, 233, 0,
	250, 739, 0, 299, 336, 971, 0, 959, 396, 0,
	449, 453, 0, 542, 991, 0, 963, 0, 307, 984,
	744, 0, 750, 985, 756, 983, 518, 0, 746, 747,
	752, 238, 1061, 541, 612, 0, 0, 0, 977, 0,
	2602, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 748, 745, 749, 755, 743, 753, 740, 751, 0,
	440, 374, 591, 467, 245, 291, 278, 320, 362, 474,
	0, 0, 352, 522, 287, 376, 0, 266, 409, 1014,
	498, 373, 0, 481, 501, 0, 393, 272, 432, 488,
	489, 737, 742, 0, 758, 0, 276, 277, 398, 258,
	406, 603, 569, 461, 419, 417, 0, 384, 441, 598,
	972, 0, 306, 0, 301, 397, 537, 264, 516, 435,
	402, 356, 464, 493, 303, 288, 289, 332, 434, 322,
	274, 527, 1042, 1044, 1040, 1036, 1037, 1002, 1003, 1043,
	1039, 323, 1038, 0, 535, 1047, 1058, 1055, 1060, 1046,
	1059, 1053, 856, 582, 1050, 1049, 1063, 1056, 1057, 528,
	1062, 1001, 1054, 1052, 1051, 1048, 0, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 234, 0, 235,
	236, 237, 239, 240, 241, 736, 242, 243, 244, 247,
	248, 249, 251, 611, 252, 253, 254, 255, 256, 257,
	1026, 1004, 259, 260, 261, 262, 263, 265, 267, 268,
	269, 270, 271, 273, 275, 1015, 1005, 1010, 1016, 1006,
	1007, 1011, 279, 280, 281, 282, 283, 284, 0, 285,
	286, 290, 292, 293, 294, 295, 296, 297, 300, 0,
	302, 304, 0, 305, 308, 0, 309, 310, 311, 312,
	313, 314, 315, 316, 1018, 317, 0, 318, 319, 321,
	0, 324, 325, 326, 327, 328, 0, 329, 1027, 975,
	330, 331, 333, 334, 335, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 0, 349, 350,
	351, 353, 0, 354, 355, 358, 359, 360, 361, 0,
	363, 1028, 2598, 364, 365, 366, 1008, 1009, 367, 368,
	369, 370, 371, 372, 375, 1041, 377, 378, 379, 380,
	381, 382, 383, 613, 385, 386, 387, 388, 389, 390,
	391, 575, 1019, 392, 394, 395, 1025, 579, 1020, 754,
	410, 411, 412, 413, 414, 415, 416, 418, 0, 420,
	421, 422, 1021, 423, 424, 425, 426, 0, 427, 428,
	429, 430, 431, 433, 436, 437, 438, 439, 0, 442,
	443, 444, 445, 446, 447, 448, 450, 451, 452, 454,
	455, 456, 614, 457, 458, 459, 460, 978, 462, 463,
	615, 465, 466, 468, 469, 470, 471, 472, 473, 624,
	1012, 475, 585, 476, 477, 478, 479, 480, 0, 482,
	483, 484, 485, 486, 487, 490, 491, 492, 494, 495,
	1022, 496, 497, 1013, 499, 500, 757, 502, 503, 504,
	505, 506, 2599, 625, 507, 1023, 508, 1024, 509, 510,
	511, 512, 513, 514, 515, 517, 0, 962, 519, 520,
	521, 523, 524, 525, 526, 529, 530, 531, 532, 533,
	0, 534, 536, 538, 616, 593, 1029, 1030, 1033, 1031,
	1032, 1034, 1035, 1045, 539, 540, 556, 407, 401, 357,
	399, 400, 404, 405, 408, 0, 0, 2597, 1017, 0,
	0, 0, 960, 0, 794, 0, 981, 908, 0, 986,
	987, 976, 995, 966, 0, 0, 0, 967, 0, 0,
	956, 957, 233, 0, 250, 739, 0, 299, 336, 971,
	0, 959, 396, 0, 449, 453, 0, 542, 991, 0,
	963, 0, 307, 984, 744, 0, 750, 985, 756, 983,
	518, 0, 746, 747, 752, 238, 1061, 541, 612, 0,
	0, 0, 977, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 748, 745, 749, 755, 743,
	753, 740, 751, 0, 440, 374, 591, 467, 245, 291,
	278, 320, 362, 474, 0, 0, 352, 522, 287, 376,
	0, 266, 409, 1014, 498, 373, 0, 481, 501, 0,
	393, 272, 432, 488, 489, 737, 742, 0, 758, 0,
	276, 277, 398, 258, 406, 603, 569, 461, 419, 417,
	0, 384, 441, 598, 972, 0, 306, 0, 301, 397,
	537, 264, 516, 435, 402, 356, 464, 493, 303, 288,
	289, 332, 434, 322, 274, 527, 1042, 1044, 1040, 1036,
	1037, 1002, 1003, 1043, 1039, 323, 1038, 0, 535, 1047,
	1058, 1055, 1060, 1046, 1059, 1053, 856, 582, 1050, 1049,
	1063, 1056, 1057, 528, 1062, 1001, 1054, 1052, 1051, 1048,
	0, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 234, 0, 235, 236, 237, 239, 240, 241, 736,
	242, 243, 244, 247, 248, 249, 251, 611, 252, 253,
	254, 255, 256, 257, 1026, 1004, 259, 260, 261, 262,
	263, 265, 267, 268, 269, 270, 271, 273, 275, 1015,
	1005, 1010, 1016, 1006, 1007, 1011, 279, 280, 281, 282,
	283, 284, 0, 285, 286, 290, 292, 293, 294, 295,
	296, 297, 300, 0, 302, 304, 0, 305, 308, 0,
	309, 310, 311, 312, 313, 314, 315, 316, 1018, 317,
	0, 318, 319, 321, 0, 324, 325, 326, 327, 328,
	0, 329, 1027, 975, 330, 331, 333, 334, 335, 337,
	338, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 0, 349, 350, 351, 353, 0, 354, 355, 358,
	359, 360, 361, 0, 363, 1028, 0, 364, 365, 366,
	1008, 1009, 367, 368, 369, 370, 371, 372, 375, 1041,
	377, 378, 379, 380, 381, 382, 383, 613, 385, 386,
	387, 388, 389, 390, 391, 575, 1019, 392, 394, 395,
	1025, 579, 1020, 754, 410, 411, 412, 413, 414, 415,
	416, 418, 0, 420, 421, 422, 1021, 423, 424, 425,
	426, 0, 427, 428, 429, 430, 431, 433, 436, 437,
	438, 439, 0, 442, 443, 444, 445, 446, 447, 448,
	450, 451, 452, 454, 455, 456, 614, 457, 458, 459,
	460, 978, 462, 463, 615, 465, 466, 468, 469, 470,
	471, 472, 473, 624, 1012, 475, 585, 476, 477, 478,
	479, 480, 0, 482, 483, 484, 485, 486, 487, 490,
	491, 492, 494, 495, 1022, 496, 497, 1013, 499, 500,
	757, 502, 503, 504, 505, 506, 0, 625, 507, 1023,
	508, 1024, 509, 510, 511, 512, 513, 514, 515, 517,
	0, 962, 519, 520, 521, 523, 524, 525, 526, 529,
	530, 531, 532, 533, 0, 534, 536, 538, 616, 593,
	1029, 1030, 1033, 1031, 1032, 1034, 1035, 1045, 539, 540,
	556, 407, 401, 357, 399, 400, 404, 405, 408, 0,
	0, 0, 1017, 0, 0, 0, 960, 0, 0, 794,
	0, 981, 908, 0, 986, 987, 976, 995, 966, 0,
	0, 967, 0, 0, 956, 957, 954, 233, 0, 250,
	739, 0, 299, 336, 971, 0, 959, 396, 0, 449,
	453, 0, 542, 991, 0, 963, 0, 307, 984, 744,
	0, 750, 985, 756, 983, 518, 0, 746, 747, 752,
	238, 1061, 541, 612, 0, 0, 0, 977, 0, 0,
	0, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	748, 745, 749, 755, 743, 753, 740, 751, 0, 440,
	374, 591, 467, 245, 291, 278, 320, 362, 474, 0,
	0, 352, 522, 287, 376, 0, 266, 409, 1014, 498,
	373, 0, 481, 501, 0, 393, 272, 432, 488, 489,
	737, 742, 0, 758, 0, 276, 277, 398, 258, 406,
	603, 569, 461, 419, 417, 0, 384, 441, 598, 972,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 1042, 1044, 1040, 1036, 1037, 1002, 1003, 1043, 1039,
	323, 1038, 0, 535, 1047, 1058, 1055, 1060, 1046, 1059,
	1053, 856, 582, 1050, 1049, 1063, 1056, 1057, 528, 1062,
	1001, 1054, 1052, 1051, 1048, 0, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 0, 235, 236,
	237, 239, 240, 241, 736, 242, 243, 244, 247, 248,
	249, 251, 611, 252, 253, 254, 255, 256, 257, 1026,
	1004, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 1015, 1005, 1010, 1016, 1006, 1007,
	1011, 279, 280, 281, 282, 283, 284, 0, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 0, 302,
	304, 0, 305, 308, 0, 309, 310, 311, 312, 313,
	314, 315, 316, 1018, 317, 0, 318, 319, 321, 0,
	324, 325, 326, 327, 328, 0, 329, 1027, 975, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 0, 349, 350, 351,
	353, 0, 354, 355, 358, 359, 360, 361, 0, 363,
	1028, 0, 364, 365, 366, 1008, 1009, 367, 368, 369,
	370, 371, 372, 375, 1041, 377, 378, 379, 380, 381,
	382, 383, 613, 385, 386, 387, 388, 389, 390, 391,
	575, 1019, 392, 394, 395, 1025, 579, 1020, 754, 410,
	411, 412, 413, 414, 415, 416, 418, 0, 420, 421,
	422, 1021, 423, 424, 425, 426, 0, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 0, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 614, 457, 458, 459, 460, 978, 462, 463, 615,
	465, 466, 468, 469, 470, 471, 472, 473, 624, 1012,
	475, 585, 476, 477, 478, 479, 480, 0, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 1022,
	496, 497, 1013, 499, 500, 757, 502, 503, 504, 505,
	506, 0, 625, 507, 1023, 508, 1024, 509, 510, 511,
	512, 513, 514, 515, 517, 0, 962, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 0,
	534, 536, 538, 616, 593, 1029, 1030, 1033, 1031, 1032,
	1034, 1035, 1045, 539, 540, 556, 407, 401, 357, 399,
	400, 404, 405, 408, 0, 0, 0, 1017, 0, 0,
	0, 960, 0, 794, 0, 981, 908, 0, 986, 987,
	976, 995, 966, 0, 1922, 2527, 967, 0, 0, 956,
	957, 233, 0, 250, 739, 0, 299, 336, 971, 0,
	959, 396, 0, 449, 453, 0, 542, 991, 0, 963,
	0, 307, 984, 744, 0, 750, 985, 756, 983, 518,
	0, 746, 747, 752, 238, 1061, 541, 612, 0, 0,
	2488, 977, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 748, 745, 749, 755, 743, 753,
	740, 751, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 1014, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 737, 742, 0, 758, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 972, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 1042, 1044, 1040, 1036, 1037,
	1002, 1003, 1043, 1039, 323, 1038, 0, 535, 1047, 1058,
	1055, 1060, 1046, 1059, 1053, 856, 582, 1050, 1049, 1063,
	1056, 1057, 528, 1062, 1001, 1054, 1052, 1051, 1048, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 736, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 1026, 1004, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 1015, 1005,
	1010, 1016, 1006, 1007, 1011, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 1018, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 1027, 975, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 1028, 0, 364, 365, 366, 1008,
	1009, 367, 368, 369, 370, 371, 372, 375, 1041, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 1019, 392, 394, 395, 1025,
	579, 1020, 754, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 1021, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	978, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 1012, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 1022, 496, 497, 1013, 499, 500, 757,
	502, 503, 504, 505, 506, 0, 625, 507, 1023, 508,
	1024, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	962, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 1029,
	1030, 1033, 1031, 1032, 1034, 1035, 1045, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 0, 0,
	0, 1017, 0, 0, 0, 960, 0, 794, 0, 981,
	908, 0, 986, 987, 976, 995, 966, 0, 0, 0,
	967, 0, 0, 956, 957, 233, 0, 250, 739, 0,
	299, 336, 971, 0, 959, 396, 0, 449, 453, 0,
	542, 991, 0, 963, 0, 307, 984, 744, 0, 750,
	985, 756, 983, 518, 0, 746, 747, 752, 238, 1061,
	541, 612, 0, 0, 0, 977, 0, 0, 0, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 748, 745,
	749, 755, 743, 753, 740, 751, 0, 440, 374, 591,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 1014, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 737, 742,
	0, 758, 0, 276, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 598, 972, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 1042,
	1044, 1040, 1036, 1037, 1002, 1003, 1043, 1039, 323, 1038,
	0, 535, 1047, 1058, 1055, 1060, 1046, 1059, 1053, 856,
	582, 1050, 1049, 1063, 1056, 1057, 528, 1062, 1001, 1054,
	1052, 1051, 1048, 3646, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 736, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 1026, 1004, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 1015, 1005, 1010, 1016, 1006, 1007, 1011, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 1018, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 1027, 975, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 1028, 0,
	364, 365, 366, 1008, 1009, 367, 368, 369, 370, 371,
	372, 375, 1041, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 1019,
	392, 394, 395, 1025, 579, 1020, 754, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 1021,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 978, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 1012, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 1022, 496, 497,
	1013, 499, 500, 757, 502, 503, 504, 505, 506, 0,
	625, 507, 1023, 508, 1024, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 962, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 593, 1029, 1030, 1033, 1031, 1032, 1034, 1035,
	1045, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 0, 0, 0, 1017, 0, 0, 0, 960,
	0, 794, 0, 981, 908, 0, 986, 987, 976, 995,
	966, 0, 0, 0, 967, 0, 0, 956, 957, 233,
	0, 250, 739, 0, 299, 336, 971, 0, 959, 396,
	0, 449, 453, 0, 542, 991, 0, 963, 0, 307,
	984, 744, 0, 750, 985, 756, 983, 518, 0, 746,
	747, 752, 238, 1061, 541, 612, 0, 0, 0, 977,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 748, 745, 749, 755, 743, 753, 740, 751,
	0, 440, 374, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	1014, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 737, 742, 0, 758, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 972, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 1042, 1044, 1040, 1036, 1037, 1002, 1003,
	1043, 1039, 323, 1038, 0, 535, 1047, 1058, 1055, 1060,
	1046, 1059, 1053, 856, 582, 1050, 1049, 1063, 1056, 1057,
	528, 1062, 1001, 1054, 1052, 1051, 1048, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 736, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 1026, 1004, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 1015, 1005, 1010, 1016,
	1006, 1007, 1011, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 1018, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 1027,
	975, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 1028, 0, 364, 365, 366, 1008, 1009, 367,
	368, 369, 370, 371, 372, 375, 1041, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 1019, 392, 394, 395, 1025, 579, 1020,
	754, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 1021, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 978, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 1012, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 1022, 496, 497, 1013, 499, 500, 757, 502, 503,
	504, 505, 506, 0, 625, 507, 1023, 508, 1024, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 962, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 1029, 1030, 1033,
	1031, 1032, 1034, 1035, 1045, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 0, 0, 0, 1017,
	0, 0, 0, 960, 0, 794, 0, 981, 908, 0,
	986, 987, 976, 995, 966, 0, 0, 0, 967, 3641,
	0, 956, 957, 233, 0, 250, 739, 0, 299, 336,
	971, 0, 959, 396, 0, 449, 453, 0, 542, 991,
	0, 963, 0, 307, 984, 744, 0, 750, 985, 756,
	983, 518, 0, 746, 747, 752, 238, 1061, 541, 612,
	0, 0, 0, 977, 0, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 748, 745, 749, 755,
	743, 753, 740, 751, 0, 440, 374, 591, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 1014, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 737, 742, 0, 758,
	0, 276, 277, 398, 258, 406, 603, 569, 461, 419,
	417, 0, 384, 441, 598, 972, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 1042, 1044, 1040,
	1036, 1037, 1002, 1003, 1043, 1039, 323, 1038, 0, 535,
	1047, 1058, 1055, 1060, 1046, 1059, 1053, 856, 582, 1050,
	1049, 1063, 1056, 1057, 528, 1062, 1001, 1054, 1052, 1051,
	1048, 0, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	736, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 1026, 1004, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	1015, 1005, 1010, 1016, 1006, 1007, 1011, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 1018,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 1027, 975, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 1028, 0, 364, 365,
	366, 1008, 1009, 367, 368, 369, 370, 371, 372, 375,
	1041, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 575, 1019, 392, 394,
	395, 1025, 579, 1020, 754, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 1021, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 978, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 1012, 475, 585, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 1022, 496, 497, 1013, 499,
	500, 757, 502, 503, 504, 505, 506, 0, 625, 507,
	1023, 508, 1024, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 962, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	593, 1029, 1030, 1033, 1031, 1032, 1034, 1035, 1045, 539,
	540, 556, 407, 401, 357, 399, 400, 404, 405, 408,
	0, 0, 0, 1017, 0, 0, 0, 960, 0, 794,
	0, 981, 908, 0, 986, 987, 976, 995, 966, 0,
	0, 0, 967, 3603, 0, 956, 957, 233, 0, 250,
	739, 0, 299, 336, 971, 0, 959, 396, 0, 449,
	453, 0, 542, 991, 0, 963, 0, 307, 984, 744,
	0, 750, 985, 756, 983, 518, 0, 746, 747, 752,
	238, 1061, 541, 612, 0, 0, 0, 977, 0, 2602,
	0, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	748, 745, 749, 755, 743, 753, 740, 751, 0, 440,
	374, 591, 467, 245, 291, 278, 320, 362, 474, 0,
	0, 352, 522, 287, 376, 0, 266, 409, 1014, 498,
	373, 0, 481, 501, 0, 393, 272, 432, 488, 489,
	737, 742, 0, 758, 0, 276, 277, 398, 258, 406,
	603, 569, 461, 419, 417, 0, 384, 441, 598, 972,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 1042, 1044, 1040, 1036, 1037, 1002, 1003, 1043, 1039,
	323, 1038, 0, 535, 1047, 1058, 1055, 1060, 1046, 1059,
	1053, 856, 582, 1050, 1049, 1063, 1056, 1057, 528, 1062,
	1001, 1054, 1052, 1051, 1048, 0, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 0, 235, 236,
	237, 239, 240, 241, 736, 242, 243, 244, 247, 248,
	249, 251, 611, 252, 253, 254, 255, 256, 257, 1026,
	1004, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 1015, 1005, 1010, 1016, 1006, 1007,
	1011, 279, 280, 281, 282, 283, 284, 0, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 0, 302,
	304, 0, 305, 308, 0, 309, 310, 311, 312, 313,
	314, 315, 316, 1018, 317, 0, 318, 319, 321, 0,
	324, 325, 326, 327, 328, 0, 329, 1027, 975, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 0, 349, 350, 351,
	353, 0, 354, 355, 358, 359, 360, 361, 0, 363,
	1028, 0, 364, 365, 366, 1008, 1009, 367, 368, 369,
	370, 371, 372, 375, 1041, 377, 378, 379, 380, 381,
	382, 383, 613, 385, 386, 387, 388, 389, 390, 391,
	575, 1019, 392, 394, 395, 1025, 579, 1020, 754, 410,
	411, 412, 413, 414, 415, 416, 418, 0, 420, 421,
	422, 1021, 423, 424, 425, 426, 0, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 0, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 614, 457, 458, 459, 460, 978, 462, 463, 615,
	465, 466, 468, 469, 470, 471, 472, 473, 624, 1012,
	475, 585, 476, 477, 478, 479, 480, 0, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 1022,
	496, 497, 1013, 499, 500, 757, 502, 503, 504, 505,
	506, 0, 625, 507, 1023, 508, 1024, 509, 510, 511,
	512, 513, 514, 515, 517, 0, 962, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 0,
	534, 536, 538, 616, 593, 1029, 1030, 1033, 1031, 1032,
	1034, 1035, 1045, 539, 540, 556, 407, 401, 357, 399,
	400, 404, 405, 408, 0, 0, 0, 1017, 0, 0,
	0, 960, 0, 794, 0, 981, 908, 0, 986, 987,
	976, 995, 966, 0, 0, 0, 967, 0, 0, 956,
	957, 233, 0, 250, 739, 0, 299, 336, 971, 0,
	959, 396, 0, 449, 453, 0, 542, 991, 0, 963,
	0, 307, 984, 744, 0, 750, 985, 756, 983, 518,
	0, 746, 747, 752, 238, 1061, 541, 612, 0, 0,
	0, 977, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 748, 745, 749, 755, 743, 753,
	740, 751, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 2621,
	266, 409, 1014, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 737, 742, 0, 758, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 972, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 1042, 1044, 1040, 1036, 1037,
	1002, 1003, 1043, 1039, 323, 1038, 0, 535, 1047, 1058,
	1055, 1060, 1046, 1059, 1053, 856, 582, 1050, 1049, 1063,
	1056, 1057, 528, 1062, 1001, 1054, 1052, 1051, 1048, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 736, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 1026, 1004, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 1015, 1005,
	1010, 1016, 1006, 1007, 1011, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 1018, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 1027, 975, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 1028, 0, 364, 365, 366, 1008,
	1009, 367, 368, 369, 370, 371, 372, 375, 1041, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 1019, 392, 394, 395, 1025,
	579, 1020, 754, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 1021, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	978, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 1012, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 1022, 496, 497, 1013, 499, 500, 757,
	502, 503, 504, 505, 506, 0, 625, 507, 1023, 508,
	1024, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	962, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 1029,
	1030, 1033, 1031, 1032, 1034, 1035, 1045, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 0, 0,
	0, 1017, 0, 0, 0, 960, 0, 794, 0, 981,
	908, 0, 986, 987, 976, 995, 966, 0, 0, 0,
	967, 0, 0, 956, 957, 233, 0, 250, 739, 0,
	299, 336, 971, 0, 959, 396, 0, 449, 453, 0,
	542, 991, 0, 963, 0, 307, 984, 744, 0, 750,
	985, 756, 983, 518, 0, 746, 747, 752, 238, 1061,
	541, 612, 0, 0, 0, 977, 0, 0, 0, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 748, 745,
	749, 755, 743, 753, 740, 751, 0, 440, 374, 591,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 1014, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 737, 742,
	0, 758, 0, 276, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 598, 972, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 1042,
	1044, 1040, 1036, 1037, 1002, 1003, 1043, 1039, 323, 1038,
	0, 535, 1047, 1058, 1055, 1060, 1046, 1059, 1053, 856,
	582, 1050, 1049, 1063, 1056, 1057, 528, 1062, 1001, 1054,
	1052, 1051, 1048, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 736, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 1026, 1004, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 1015, 1005, 1010, 1016, 1006, 1007, 1011, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 1018, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 1027, 975, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 1028, 0,
	364, 365, 366, 1008, 1009, 367, 368, 369, 370, 371,
	372, 375, 1041, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 1019,
	392, 394, 395, 1025, 579, 1020, 754, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 1021,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 978, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 1012, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 1022, 496, 497,
	1013, 499, 500, 757, 502, 503, 504, 505, 506, 0,
	625, 507, 1023, 508, 1024, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 962, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 593, 1029, 1030, 1033, 1031, 1032, 1034, 1035,
	1045, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 0, 0, 0, 1017, 0, 0, 0, 960,
	0, 0, 794, 0, 981, 908, 0, 986, 987, 976,
	995, 966, 0, 0, 967, 2532, 0, 956, 957, 1406,
	233, 0, 250, 739, 0, 299, 336, 971, 0, 959,
	396, 0, 449, 453, 0, 542, 991, 0, 963, 0,
	307, 984, 744, 0, 750, 985, 756, 983, 518, 0,
	746, 747, 752, 238, 1061, 541, 612, 0, 0, 0,
	977, 0, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 748, 745, 749, 755, 743, 753, 740,
	751, 0, 440, 374, 591, 467, 245, 291, 278, 320,
	362, 474, 0, 0, 352, 522, 287, 376, 0, 266,
	409, 1014, 498, 373, 0, 481, 501, 0, 393, 272,
	432, 488, 489, 737, 742, 0, 758, 0, 276, 277,
	398, 258, 406, 603, 569, 461, 419, 417, 0, 384,
	441, 598, 972, 0, 306, 0, 301, 397, 537, 264,
	516, 435, 402, 356, 464, 493, 303, 288, 289, 332,
	434, 322, 274, 527, 1042, 1044, 1040, 1036, 1037, 1002,
	1003, 1043, 1039, 323, 1038, 0, 535, 1047, 1058, 1055,
	1060, 1046, 1059, 1053, 856, 582, 1050, 1049, 1063, 1056,
	1057, 528, 1062, 1001, 1054, 1052, 1051, 1048, 0, 223,
	224, 225, 226, 227, 228, 229, 230, 231, 232, 234,
	0, 235, 236, 237, 239, 240, 241, 736, 242, 243,
	244, 247, 248, 249, 251, 611, 252, 253, 254, 255,
	256, 257, 1026, 1004, 259, 260, 261, 262, 263, 265,
	267, 268, 269, 270, 271, 273, 275, 1015, 1005, 1010,
	1016, 1006, 1007, 1011, 279, 280, 281, 282, 283, 284,
	0, 285, 286, 290, 292, 293, 294, 295, 296, 297,
	300, 0, 302, 304, 0, 305, 308, 0, 309, 310,
	311, 312, 313, 314, 315, 316, 1018, 317, 0, 318,
	319, 321, 0, 324, 325, 326, 327, 328, 0, 329,
	1027, 975, 330, 331, 333, 334, 335, 337, 338, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 0,
	349, 350, 351, 353, 0, 354, 355, 358, 359, 360,
	361, 0, 363, 1028, 0, 364, 365, 366, 1008, 1009,
	367, 368, 369, 370, 371, 372, 375, 1041, 377, 378,
	379, 380, 381, 382, 383, 613, 385, 386, 387, 388,
	389, 390, 391, 575, 1019, 392, 394, 395, 1025, 579,
	1020, 754, 410, 411, 412, 413, 414, 415, 416, 418,
	0, 420, 421, 422, 1021, 423, 424, 425, 426, 0,
	427, 428, 429, 430, 431, 433, 436, 437, 438, 439,
	0, 442, 443, 444, 445, 446, 447, 448, 450, 451,
	452, 454, 455, 456, 614, 457, 458, 459, 460, 978,
	462, 463, 615, 465, 466, 468, 469, 470, 471, 472,
	473, 624, 1012, 475, 585, 476, 477, 478, 479, 480,
	0, 482, 483, 484, 485, 486, 487, 490, 491, 492,
	494, 495, 1022, 496, 497, 1013, 499, 500, 757, 502,
	503, 504, 505, 506, 0, 625, 507, 1023, 508, 1024,
	509, 510, 511, 512, 513, 514, 515, 517, 0, 962,
	519, 520, 521, 523, 524, 525, 526, 529, 530, 531,
	532, 533, 0, 534, 536, 538, 616, 593, 1029, 1030,
	1033, 1031, 1032, 1034, 1035, 1045, 539, 540, 556, 407,
	401, 357, 399, 400, 404, 405, 408, 0, 0, 0,
	1017, 0, 0, 0, 960, 0, 794, 0, 981, 908,
	0, 986, 987, 976, 995, 966, 0, 0, 0, 967,
	0, 0, 956, 957, 233, 0, 250, 739, 0, 299,
	336, 971, 0, 959, 396, 0, 449, 453, 0, 542,
	991, 0, 963, 0, 307, 984, 744, 0, 750, 985,
	756, 983, 518, 0, 746, 747, 752, 238, 1061, 541,
	612, 0, 0, 0, 977, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 748, 745, 749,
	755, 743, 753, 740, 751, 0, 440, 374, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 1014, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 737, 742, 0,
	758, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 972, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 1042, 1044,
	1040, 1036, 1037, 1002, 1003, 1043, 1039, 323, 1038, 0,
	535, 1047, 1058, 1055, 1060, 1046, 1059, 1053, 856, 582,
	1050, 1049, 1063, 1056, 1057, 528, 1062, 1001, 1054, 1052,
	1051, 1048, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 736, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 1026, 1004, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 1015, 1005, 1010, 1016, 1006, 1007, 1011, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	1018, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 1027, 975, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 1028, 0, 364,
	365, 366, 1008, 1009, 367, 368, 369, 370, 371, 372,
	375, 1041, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 1019, 392,
	394, 395, 1025, 579, 1020, 754, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 1021, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 978, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 1012, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 1022, 496, 497, 1013,
	499, 500, 757, 502, 503, 504, 505, 506, 0, 625,
	507, 1023, 508, 1024, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 962, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 1029, 1030, 1033, 1031, 1032, 1034, 1035, 1045,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 0, 0, 0, 1017, 0, 0, 0, 960, 0,
	794, 0, 981, 908, 0, 986, 987, 976, 995, 966,
	0, 0, 0, 967, 0, 0, 956, 957, 233, 0,
	250, 739, 0, 299, 336, 971, 0, 959, 396, 0,
	449, 453, 0, 542, 991, 0, 963, 0, 307, 984,
	744, 0, 750, 985, 756, 983, 518, 0, 746, 747,
	752, 238, 1061, 541, 612, 0, 0, 0, 977, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 748, 745, 749, 755, 743, 753, 740, 751, 0,
	440, 374, 591, 467, 245, 291, 278, 320, 362, 474,
	0, 0, 352, 522, 287, 376, 0, 266, 409, 1014,
	498, 373, 0, 481, 501, 0, 393, 272, 432, 488,
	489, 737, 742, 0, 758, 0, 4750, 277, 398, 258,
	406, 603, 569, 461, 419, 417, 0, 384, 441, 598,
	972, 0, 306, 0, 301, 397, 537, 264, 516, 435,
	402, 356, 464, 493, 303, 288, 289, 332, 434, 322,
	274, 527, 1042, 1044, 1040, 1036, 1037, 1002, 1003, 1043,
	1039, 323, 1038, 0, 535, 1047, 1058, 1055, 1060, 1046,
	1059, 1053, 856, 582, 1050, 1049, 1063, 1056, 1057, 528,
	1062, 1001, 1054, 1052, 1051, 1048, 0, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 234, 0, 235,
	236, 237, 239, 240, 241, 736, 242, 243, 244, 247,
	248, 249, 251, 611, 252, 253, 254, 255, 256, 257,
	1026, 1004, 259, 260, 261, 262, 263, 265, 267, 268,
	269, 270, 271, 273, 275, 1015, 1005, 1010, 1016, 1006,
	1007, 1011, 279, 280, 281, 282, 283, 284, 0, 285,
	286, 290, 292, 293, 294, 295, 296, 297, 300, 0,
	302, 304, 0, 305, 308, 0, 309, 310, 311, 312,
	313, 314, 315, 316, 1018, 317, 0, 318, 319, 321,
	0, 324, 325, 326, 327, 328, 0, 329, 1027, 975,
	330, 331, 333, 334, 335, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 0, 349, 350,
	351, 353, 0, 354, 355, 358, 359, 360, 361, 0,
	363, 1028, 0, 364, 365, 366, 1008, 1009, 367, 368,
	369, 370, 371, 372, 375, 1041, 377, 378, 379, 380,
	381, 382, 383, 613, 385, 386, 387, 388, 389, 390,
	391, 575, 1019, 392, 394, 395, 1025, 579, 1020, 754,
	410, 411, 412, 413, 414, 415, 416, 418, 0, 420,
	421, 422, 1021, 423, 424, 425, 426, 0, 427, 428,
	429, 430, 431, 433, 436, 437, 438, 439, 0, 442,
	443, 444, 445, 446, 447, 448, 450, 451, 452, 454,
	455, 456, 614, 457, 458, 459, 460, 978, 462, 463,
	615, 465, 466, 468, 469, 470, 471, 472, 473, 624,
	1012, 475, 585, 476, 477, 478, 479, 480, 0, 482,
	483, 484, 485, 486, 487, 490, 491, 492, 494, 495,
	1022, 496, 497, 1013, 499, 500, 757, 502, 503, 504,
	505, 506, 0, 625, 507, 1023, 508, 1024, 509, 510,
	511, 512, 513, 4749, 515, 517, 0, 962, 519, 520,
	521, 523, 524, 525, 526, 529, 530, 531, 532, 533,
	0, 534, 536, 538, 616, 593, 1029, 1030, 1033, 1031,
	1032, 1034, 1035, 1045, 539, 540, 556, 407, 401, 357,
	399, 400, 404, 405, 408, 0, 0, 0, 1017, 0,
	0, 0, 960, 0, 794, 0, 981, 908, 0, 986,
	987, 976, 995, 966, 0, 0, 0, 967, 0, 0,
	956, 957, 233, 0, 250, 739, 0, 299, 336, 971,
	0, 959, 396, 0, 449, 453, 0, 542, 991, 0,
	963, 0, 307, 984, 744, 0, 750, 985, 756, 983,
	518, 0, 746, 747, 752, 238, 1061, 541, 612, 0,
	0, 0, 977, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 748, 745, 749, 755, 743,
	753, 740, 751, 0, 440, 374, 591, 467, 245, 291,
	278, 320, 362, 474, 0, 0, 352, 522, 287, 376,
	0, 266, 409, 1014, 498, 373, 0, 481, 501, 0,
	393, 272, 432, 488, 489, 737, 742, 0, 758, 0,
	276, 277, 398, 258, 406, 603, 569, 461, 419, 417,
	0, 384, 441, 598, 972, 0, 306, 0, 301, 397,
	537, 264, 516, 435, 402, 356, 464, 493, 303, 288,
	289, 332, 434, 322, 274, 527, 1042, 1044, 1040, 1036,
	1037, 1002, 1003, 1043, 1039, 323, 1038, 0, 535, 1047,
	1058, 1055, 1060, 1046, 1059, 1053, 856, 582, 1050, 1049,
	1063, 1056, 1057, 528, 1062, 1001, 1054, 1052, 1051, 1048,
	0, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 234, 0, 235, 236, 237, 239, 240, 241, 736,
	242, 243, 244, 247, 248, 249, 251, 611, 252, 253,
	254, 255, 256, 257, 1026, 1004, 259, 260, 261, 262,
	263, 265, 267, 268, 269, 270, 271, 273, 4560, 1015,
	1005, 1010, 1016, 1006, 1007, 1011, 279, 280, 281, 282,
	283, 284, 0, 285, 286, 290, 292, 293, 294, 295,
	296, 297, 300, 0, 302, 304, 0, 305, 308, 0,
	309, 310, 311, 312, 313, 314, 315, 316, 1018, 317,
	0, 318, 319, 321, 0, 324, 325, 326, 327, 328,
	0, 329, 1027, 4562, 330, 331, 333, 334, 335, 337,
	338, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 0, 349, 350, 351, 353, 0, 354, 355, 358,
	359, 360, 361, 0, 363, 1028, 0, 364, 365, 366,
	1008, 1009, 367, 368, 369, 370, 371, 372, 375, 1041,
	377, 378, 379, 380, 381, 382, 383, 613, 385, 386,
	387, 388, 389, 390, 391, 575, 1019, 392, 394, 395,
	1025, 579, 1020, 754, 410, 411, 412, 413, 414, 415,
	416, 418, 0, 420, 421, 422, 1021, 423, 424, 425,
	426, 0, 427, 428, 429, 430, 431, 433, 436, 437,
	438, 439, 0, 442, 443, 444, 445, 446, 447, 448,
	450, 451, 452, 454, 455, 456, 614, 457, 4561, 459,
	460, 978, 462, 463, 615, 465, 466, 468, 469, 470,
	471, 472, 473, 624, 1012, 475, 585, 476, 477, 478,
	479, 480, 0, 482, 483, 484, 485, 486, 487, 490,
	491, 492, 494, 495, 1022, 496, 497, 1013, 499, 500,
	757, 502, 503, 504, 505, 506, 0, 625, 507, 1023,
	508, 1024, 509, 510, 511, 512, 513, 514, 515, 517,
	0, 962, 519, 520, 521, 523, 524, 525, 526, 529,
	530, 531, 532, 533, 0, 534, 536, 538, 616, 593,
	1029, 1030, 1033, 1031, 1032, 1034, 1035, 1045, 539, 540,
	556, 407, 401, 357, 399, 400, 404, 405, 408, 0,
	0, 0, 1017, 0, 0, 0, 960, 0, 794, 0,
	981, 908, 0, 986, 987, 976, 995, 966, 0, 0,
	0, 4559, 0, 0, 956, 957, 233, 0, 250, 739,
	0, 299, 336, 971, 0, 959, 396, 0, 449, 453,
	0, 4748, 991, 0, 963, 0, 307, 984, 744, 0,
	750, 985, 756, 983, 518, 0, 746, 747, 752, 238,
	1061, 541, 612, 0, 0, 0, 977, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 748,
	745, 749, 755, 743, 753, 740, 751, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 1014, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 737,
	742, 0, 758, 0, 4750, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 972, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	1042, 1044, 1040, 1036, 1037, 1002, 1003, 1043, 1039, 323,
	1038, 0, 535, 1047, 1058, 1055, 1060, 1046, 1059, 1053,
	856, 582, 1050, 1049, 1063, 1056, 1057, 528, 1062, 1001,
	1054, 1052, 1051, 1048, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 736, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 1026, 1004,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 1015, 1005, 1010, 1016, 1006, 1007, 1011,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 1018, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 1027, 975, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 1028,
	0, 364, 365, 366, 1008, 1009, 367, 368, 369, 370,
	371, 372, 375, 1041, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	1019, 392, 394, 395, 1025, 579, 1020, 754, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	1021, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 978, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 1012, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 1022, 496,
	497, 1013, 499, 500, 757, 502, 503, 504, 505, 506,
	0, 625, 507, 1023, 508, 1024, 509, 510, 511, 512,
	513, 4749, 515, 517, 0, 962, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 1029, 1030, 1033, 1031, 1032, 1034,
	1035, 1045, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 0, 0, 0, 1017, 0, 0, 0,
	960, 0, 794, 0, 981, 908, 0, 986, 987, 976,
	995, 966, 0, 0, 0, 967, 0, 0, 956, 957,
	233, 0, 250, 739, 0, 299, 336, 971, 0, 959,
	396, 0, 449, 453, 0, 542, 991, 0, 963, 0,
	307, 984, 744, 0, 750, 985, 756, 983, 518, 0,
	746, 747, 752, 238, 1061, 541, 612, 0, 0, 0,
	977, 0, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 748, 745, 749, 755, 743, 753, 740,
	751, 0, 440, 374, 591, 467, 245, 291, 278, 320,
	362, 474, 0, 0, 352, 522, 287, 376, 0, 266,
	409, 1014, 498, 373, 0, 481, 501, 0, 393, 272,
	432, 488, 489, 737, 742, 0, 758, 0, 276, 277,
	398, 258, 406, 603, 569, 461, 419, 417, 0, 384,
	441, 598, 972, 0, 306, 0, 301, 397, 537, 264,
	516, 435, 402, 356, 464, 493, 303, 288, 289, 332,
	434, 322, 274, 527, 1042, 1044, 1040, 1036, 1037, 1002,
	1003, 1043, 1039, 323, 1038, 0, 535, 1047, 1058, 1055,
	1060, 1046, 1059, 1053, 856, 582, 1050, 1049, 1063, 1056,
	1057, 528, 1062, 1001, 1054, 1052, 1051, 1048, 0, 223,
	224, 225, 226, 227, 228, 229, 230, 231, 232, 234,
	0, 235, 236, 237, 239, 240, 241, 736, 242, 243,
	244, 247, 248, 249, 251, 611, 252, 253, 254, 255,
	256, 257, 1026, 1004, 259, 260, 261, 262, 263, 265,
	267, 268, 269, 270, 271, 273, 275, 1015, 1005, 1010,
	1016, 1006, 1007, 1011, 279, 280, 281, 282, 283, 284,
	0, 285, 286, 290, 292, 293, 294, 295, 296, 297,
	300, 0, 302, 304, 0, 305, 308, 0, 309, 310,
	311, 312, 313, 314, 315, 316, 1018, 317, 0, 318,
	319, 321, 0, 324, 325, 326, 327, 328, 0, 329,
	1027, 975, 330, 331, 333, 334, 335, 337, 338, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 0,
	349, 350, 351, 353, 0, 354, 355, 358, 359, 360,
	361, 0, 363, 1028, 0, 364, 365, 366, 1008, 1009,
	367, 368, 369, 370, 371, 372, 375, 1041, 377, 378,
	379, 380, 381, 382, 383, 613, 385, 386, 387, 388,
	389, 390, 4094, 575, 1019, 392, 394, 395, 1025, 579,
	1020, 754, 410, 411, 412, 413, 414, 415, 416, 418,
	0, 420, 421, 422, 1021, 423, 424, 425, 426, 0,
	427, 428, 429, 430, 431, 433, 436, 437, 438, 439,
	0, 442, 443, 444, 445, 446, 447, 448, 450, 451,
	452, 454, 455, 456, 614, 457, 458, 459, 460, 978,
	462, 463, 615, 465, 466, 468, 469, 470, 471, 472,
	473, 624, 1012, 475, 585, 476, 477, 478, 479, 480,
	0, 482, 483, 484, 485, 486, 487, 490, 491, 492,
	494, 495, 1022, 496, 497, 1013, 499, 500, 757, 502,
	503, 504, 505, 506, 0, 625, 507, 1023, 508, 1024,
	509, 510, 511, 512, 513, 514, 515, 517, 0, 962,
	519, 520, 521, 523, 524, 525, 526, 529, 530, 531,
	532, 533, 0, 534, 536, 538, 616, 593, 1029, 1030,
	1033, 1031, 1032, 1034, 1035, 1045, 539, 540, 556, 407,
	401, 357, 399, 400, 404, 405, 408, 0, 0, 0,
	1017, 0, 0, 0, 960, 0, 794, 0, 981, 908,
	0, 986, 987, 976, 995, 966, 0, 0, 0, 967,
	0, 0, 956, 957, 233, 0, 250, 739, 0, 299,
	336, 971, 0, 959, 396, 0, 449, 453, 0, 542,
	991, 0, 963, 0, 307, 984, 744, 0, 750, 985,
	756, 983, 518, 0, 746, 747, 752, 238, 1061, 541,
	612, 0, 0, 0, 977, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 748, 745, 749,
	755, 743, 753, 740, 751, 0, 440, 374, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 1014, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 737, 742, 0,
	758, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 972, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 1042, 1044,
	1040, 1036, 1037, 1002, 1003, 1043, 1039, 323, 1038, 0,
	535, 1047, 1058, 1055, 1060, 1046, 1059, 1053, 856, 582,
	1050, 1049, 1063, 1056, 1057, 528, 1062, 1001, 1054, 1052,
	1051, 1048, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 736, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 1026, 1004, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 1015, 1005, 1010, 1016, 1006, 1007, 1011, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	1018, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 1027, 975, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 1028, 0, 364,
	365, 366, 1008, 1009, 367, 368, 369, 370, 371, 372,
	375, 1041, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 1019, 392,
	394, 395, 1025, 579, 1020, 754, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 1021, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 978, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 1012, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 1022, 496, 497, 1013,
	499, 500, 757, 502, 503, 504, 505, 506, 0, 625,
	507, 1023, 508, 1024, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 962, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 4081, 1029, 1030, 1033, 1031, 1032, 1034, 1035, 1045,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 0, 0, 0, 1017, 0, 0, 0, 960, 0,
	794, 0, 981, 908, 0, 986, 987, 976, 995, 966,
	0, 0, 0, 967, 0, 0, 956, 957, 233, 0,
	250, 739, 0, 299, 336, 971, 0, 959, 396, 0,
	449, 453, 0, 542, 991, 0, 963, 0, 307, 984,
	744, 0, 750, 985, 756, 983, 518, 0, 746, 747,
	752, 238, 1061, 541, 612, 0, 0, 0, 977, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 748, 745, 749, 755, 743, 753, 740, 751, 0,
	440, 374, 591, 467, 245, 291, 278, 320, 362, 474,
	0, 0, 352, 522, 287, 376, 0, 266, 409, 1014,
	498, 373, 0, 481, 501, 0, 393, 272, 432, 488,
	489, 737, 742, 0, 758, 0, 3262, 277, 398, 258,
	406, 603, 569, 461, 419, 417, 0, 384, 441, 598,
	972, 0, 306, 0, 301, 397, 537, 264, 516, 435,
	402, 356, 464, 493, 303, 288, 289, 332, 434, 322,
	274, 527, 1042, 1044, 1040, 1036, 1037, 1002, 1003, 1043,
	1039, 323, 1038, 0, 535, 1047, 1058, 1055, 1060, 1046,
	1059, 1053, 856, 582, 1050, 1049, 1063, 1056, 1057, 528,
	1062, 1001, 1054, 1052, 1051, 1048, 0, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 234, 0, 235,
	236, 237, 239, 240, 241, 736, 242, 243, 244, 247,
	248, 249, 251, 611, 252, 253, 254, 255, 256, 257,
	1026, 1004, 259, 260, 261, 262, 263, 265, 267, 268,
	269, 270, 271, 273, 275, 1015, 1005, 1010, 1016, 1006,
	1007, 1011, 279, 280, 281, 282, 283, 284, 0, 285,
	286, 290, 292, 293, 294, 295, 296, 297, 300, 0,
	302, 304, 0, 305, 308, 0, 309, 310, 311, 312,
	313, 314, 315, 316, 1018, 317, 0, 318, 319, 321,
	0, 324, 325, 326, 327, 328, 0, 329, 1027, 975,
	330, 331, 333, 334, 335, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 0, 349, 350,
	351, 353, 0, 354, 355, 358, 359, 360, 361, 0,
	363, 1028, 0, 364, 365, 366, 1008, 1009, 367, 368,
	369, 370, 371, 372, 375, 1041, 377, 378, 379, 380,
	381, 382, 383, 613, 385, 386, 387, 388, 389, 390,
	391, 575, 1019, 392, 394, 395, 1025, 579, 1020, 754,
	410, 411, 412, 413, 414, 415, 416, 418, 0, 420,
	421, 422, 1021, 423, 424, 425, 426, 0, 427, 428,
	429, 430, 431, 433, 436, 437, 438, 439, 0, 442,
	443, 444, 445, 446, 447, 448, 450, 451, 452, 454,
	455, 456, 614, 457, 458, 459, 460, 978, 462, 463,
	615, 465, 466, 468, 469, 470, 471, 472, 473, 624,
	1012, 475, 585, 476, 477, 478, 479, 480, 0, 482,
	483, 484, 485, 486, 487, 490, 491, 492, 494, 495,
	1022, 496, 497, 1013, 499, 500, 757, 502, 503, 504,
	505, 506, 0, 625, 507, 1023, 508, 1024, 509, 510,
	511, 512, 513, 514, 515, 517, 0, 962, 519, 520,
	521, 523, 524, 525, 526, 529, 530, 531, 532, 533,
	0, 534, 536, 538, 616, 593, 1029, 1030, 1033, 1031,
	1032, 1034, 1035, 1045, 539, 540, 556, 407, 401, 357,
	399, 400, 404, 405, 408, 0, 0, 0, 1017, 0,
	0, 0, 960, 0, 794, 0, 2437, 908, 0, 986,
	987, 976, 995, 966, 0, 0, 0, 967, 0, 0,
	956, 957, 233, 0, 250, 739, 0, 299, 336, 971,
	0, 959, 396, 0, 449, 453, 0, 542, 991, 0,
	963, 0, 307, 984, 744, 0, 750, 985, 756, 983,
	518, 0, 746, 747, 752, 238, 1061, 541, 612, 0,
	0, 0, 977, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 748, 745, 749, 755, 743,
	753, 740, 751, 0, 440, 374, 591, 467, 245, 291,
	278, 320, 362, 474, 0, 0, 352, 522, 287, 376,
	0, 266, 409, 1014, 498, 373, 0, 481, 501, 0,
	393, 272, 432, 488, 489, 737, 742, 0, 758, 0,
	276, 277, 398, 258, 406, 603, 569, 461, 419, 417,
	0, 384, 441, 598, 972, 0, 306, 0, 301, 397,
	537, 264, 516, 435, 402, 356, 464, 493, 303, 288,
	289, 332, 434, 322, 274, 527, 1042, 1044, 1040, 1036,
	1037, 1002, 1003, 1043, 1039, 323, 1038, 0, 535, 1047,
	1058, 1055, 1060, 1046, 1059, 1053, 856, 582, 1050, 1049,
	1063, 1056, 1057, 528, 1062, 1001, 1054, 1052, 1051, 1048,
	0, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 234, 0, 235, 236, 237, 239, 240, 241, 736,
	242, 243, 244, 247, 248, 249, 251, 611, 252, 253,
	254, 255, 256, 257, 1026, 1004, 259, 260, 261, 262,
	263, 265, 267, 268, 269, 270, 271, 273, 275, 1015,
	1005, 1010, 1016, 1006, 1007, 1011, 279, 280, 281, 282,
	283, 284, 0, 285, 286, 290, 292, 293, 294, 295,
	296, 297, 300, 0, 302, 304, 0, 305, 308, 0,
	309, 310, 311, 312, 313, 314, 315, 316, 1018, 317,
	0, 318, 319, 321, 0, 324, 325, 326, 327, 328,
	0, 329, 1027, 975, 330, 331, 333, 334, 335, 337,
	338, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 0, 349, 350, 351, 353, 0, 354, 355, 358,
	359, 360, 361, 0, 363, 1028, 0, 364, 365, 366,
	1008, 1009, 367, 368, 369, 370, 371, 372, 375, 1041,
	377, 378, 379, 380, 381, 382, 383, 613, 385, 386,
	387, 388, 389, 390, 391, 575, 1019, 392, 394, 395,
	1025, 579, 1020, 754, 410, 411, 412, 413, 414, 415,
	416, 418, 0, 420, 421, 422, 1021, 423, 424, 425,
	426, 0, 427, 428, 429, 430, 431, 433, 436, 437,
	438, 439, 0, 442, 443, 444, 445, 446, 447, 448,
	450, 451, 452, 454, 455, 456, 614, 457, 458, 459,
	460, 978, 462, 463, 615, 465, 466, 468, 469, 470,
	471, 472, 473, 624, 1012, 475, 585, 476, 477, 478,
	479, 480, 0, 482, 483, 484, 485, 486, 487, 490,
	491, 492, 494, 495, 1022, 496, 497, 1013, 499, 500,
	757, 502, 503, 504, 505, 506, 0, 625, 507, 1023,
	508, 1024, 509, 510, 511, 512, 513, 514, 515, 517,
	0, 962, 519, 520, 521, 523, 524, 525, 526, 529,
	530, 531, 532, 533, 0, 534, 536, 538, 616, 593,
	1029, 1030, 1033, 1031, 1032, 1034, 1035, 1045, 539, 540,
	556, 407, 401, 357, 399, 400, 404, 405, 408, 0,
	0, 0, 1017, 0, 0, 0, 960, 0, 794, 0,
	981, 908, 0, 986, 987, 976, 995, 966, 0, 0,
	0, 967, 0, 0, 956, 957, 233, 0, 250, 739,
	0, 299, 336, 971, 0, 959, 396, 0, 449, 453,
	0, 542, 991, 0, 963, 0, 307, 984, 744, 0,
	750, 985, 756, 983, 518, 0, 746, 747, 752, 238,
	1061, 541, 612, 0, 0, 0, 977, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 748,
	745, 749, 755, 743, 753, 740, 751, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 1014, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 737,
	742, 0, 758, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 972, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	1042, 1044, 1040, 1036, 1037, 1002, 1003, 1043, 1039, 323,
	1038, 0, 535, 1047, 1058, 1055, 1060, 1046, 1059, 1053,
	856, 582, 1050, 1049, 1063, 1056, 1057, 528, 1062, 1001,
	1054, 1052, 1051, 1048, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 736, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 1026, 1004,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 1015, 1005, 1010, 1016, 1006, 1007, 1011,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 1018, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 1027, 975, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 1028,
	0, 364, 365, 366, 1008, 1009, 367, 368, 369, 370,
	371, 372, 375, 1041, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	1019, 392, 394, 395, 1025, 579, 1020, 754, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	1021, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 978, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 1012, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 1022, 496,
	497, 1013, 499, 500, 757, 502, 503, 504, 505, 506,
	0, 625, 507, 1023, 508, 1024, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 962, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 1029, 1030, 1033, 1031, 1032, 1034,
	1035, 1045, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 0, 0, 0, 1017, 0, 0, 0,
	960, 0, 794, 0, 981, 908, 0, 986, 987, 976,
	995, 966, 0, 0, 0, 967, 0, 0, 1414, 1415,
	233, 0, 250, 739, 0, 299, 336, 971, 0, 0,
	396, 0, 449, 453, 0, 542, 991, 0, 4382, 0,
	307, 984, 744, 0, 750, 985, 756, 983, 518, 0,
	746, 747, 752, 238, 1061, 541, 612, 0, 0, 0,
	977, 0, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 748, 745, 749, 755, 743, 753, 740,
	751, 0, 440, 374, 591, 467, 245, 291, 278, 320,
	362, 474, 0, 0, 352, 522, 287, 376, 0, 266,
	409, 1014, 498, 373, 0, 481, 501, 0, 393, 272,
	432, 488, 489, 737, 742, 0, 758, 0, 276, 277,
	398, 258, 406, 603, 569, 461, 419, 417, 0, 384,
	441, 598, 972, 0, 306, 0, 301, 397, 537, 264,
	516, 435, 402, 356, 464, 493, 303, 288, 289, 332,
	434, 322, 274, 527, 1042, 1044, 1040, 1036, 1037, 1002,
	1003, 1043, 1039, 323, 1038, 0, 535, 1047, 1058, 1055,
	1060, 1046, 1059, 1053, 856, 582, 1050, 1049, 1063, 1056,
	1057, 528, 1062, 1001, 1054, 1052, 1051, 1048, 0, 223,
	224, 225, 226, 227, 228, 229, 230, 231, 232, 234,
	0, 235, 236, 237, 239, 240, 241, 736, 242, 243,
	244, 247, 248, 249, 251, 611, 252, 253, 254, 255,
	256, 257, 1026, 1004, 259, 260, 261, 262, 263, 265,
	267, 268, 269, 270, 271, 273, 275, 1015, 1005, 1010,
	1016, 1006, 1007, 1011, 279, 280, 281, 282, 283, 284,
	0, 285, 286, 290, 292, 293, 294, 295, 296, 297,
	300, 0, 302, 304, 0, 305, 308, 0, 309, 310,
	311, 312, 313, 314, 315, 316, 1018, 317, 0, 318,
	319, 321, 0, 324, 325, 326, 327, 328, 0, 329,
	1027, 975, 330, 331, 333, 334, 335, 337, 338, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 0,
	349, 350, 351, 353, 0, 354, 355, 358, 359, 360,
	361, 0, 363, 1028, 0, 364, 365, 366, 1008, 1009,
	367, 368, 369, 370, 371, 372, 375, 1041, 377, 378,
	379, 380, 381, 382, 383, 613, 385, 386, 387, 388,
	389, 390, 391, 575, 1019, 392, 394, 395, 1025, 579,
	1020, 754, 410, 411, 412, 413, 414, 415, 416, 418,
	0, 420, 421, 422, 1021, 423, 424, 425, 426, 0,
	427, 428, 429, 430, 431, 433, 436, 437, 438, 439,
	0, 442, 443, 444, 445, 446, 447, 448, 450, 451,
	452, 454, 455, 456, 614, 457, 458, 459, 460, 2592,
	462, 463, 615, 465, 466, 468, 469, 470, 471, 472,
	473, 624, 1012, 475, 585, 476, 477, 478, 479, 480,
	0, 482, 483, 484, 485, 486, 487, 490, 491, 492,
	494, 495, 1022, 496, 497, 1013, 499, 500, 757, 502,
	503, 504, 505, 506, 0, 625, 507, 1023, 508, 1024,
	509, 510, 511, 512, 513, 514, 515, 517, 0, 0,
	519, 520, 521, 523, 524, 525, 526, 529, 530, 531,
	532, 533, 0, 534, 536, 538, 616, 593, 1029, 1030,
	1033, 1031, 1032, 1034, 1035, 1045, 539, 540, 556, 407,
	401, 357, 399, 400, 404, 405, 408, 0, 0, 0,
	1017, 0, 0, 0, 0, 0, 794, 0, 981, 908,
	0, 986, 987, 976, 995, 966, 0, 0, 0, 2431,
	0, 0, 2589, 2590, 233, 0, 250, 739, 0, 299,
	336, 971, 0, 0, 396, 0, 449, 453, 0, 542,
	991, 0, 0, 0, 307, 984, 744, 0, 750, 985,
	756, 983, 518, 0, 746, 747, 752, 238, 1061, 541,
	612, 0, 0, 0, 977, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 748, 745, 749,
	755, 743, 753, 740, 751, 0, 440, 374, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 1014, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 737, 742, 0,
	758, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 972, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 1042, 1044,
	1040, 1036, 1037, 1002, 1003, 1043, 1039, 323, 1038, 0,
	535, 1047, 1058, 1055, 1060, 1046, 1059, 1053, 856, 582,
	1050, 1049, 1063, 1056, 1057, 528, 1062, 1001, 1054, 1052,
	1051, 1048, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 736, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 1026, 1004, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 1015, 1005, 1010, 1016, 1006, 1007, 1011, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	1018, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 1027, 975, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 1028, 0, 364,
	365, 366, 1008, 1009, 367, 368, 369, 370, 371, 372,
	375, 1041, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 1019, 392,
	394, 395, 1025, 579, 1020, 754, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 1021, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 2592, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 1012, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 1022, 496, 497, 1013,
	499, 500, 757, 502, 503, 504, 505, 506, 0, 625,
	507, 1023, 508, 1024, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 1029, 1030, 1033, 1031, 1032, 1034, 1035, 1045,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 0, 0, 0, 1017, 0, 0, 0, 0, 0,
	794, 0, 981, 908, 0, 986, 987, 0, 995, 966,
	0, 0, 0, 2431, 0, 0, 2589, 2590, 233, 0,
	250, 739, 0, 299, 336, 971, 0, 0, 396, 0,
	449, 453, 0, 542, 991, 0, 0, 0, 307, 984,
	744, 0, 750, 985, 756, 983, 518, 0, 746, 747,
	752, 238, 1061, 541, 612, 0, 0, 0, 403, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 748, 745, 749, 755, 743, 753, 740, 751, 0,
	440, 374, 591, 467, 245, 291, 278, 320, 362, 474,
	0, 0, 352, 522, 287, 376, 0, 266, 409, 1014,
	498, 373, 0, 481, 501, 0, 393, 272, 432, 488,
	489, 737, 742, 0, 758, 0, 276, 277, 398, 258,
	406, 603, 569, 2430, 419, 417, 0, 384, 441, 598,
	972, 0, 306, 0, 301, 397, 537, 264, 516, 435,
	402, 356, 464, 493, 303, 288, 289, 332, 434, 322,
	274, 527, 1042, 1044, 1040, 1036, 1037, 1002, 1003, 1043,
	1039, 323, 1038, 0, 535, 1047, 1058, 1055, 1060, 1046,
	1059, 1053, 856, 582, 1050, 1049, 1063, 1056, 1057, 528,
	1062, 1001, 1054, 1052, 1051, 1048, 0, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 234, 0, 235,
	236, 237, 239, 240, 241, 736, 242, 243, 244, 247,
	248, 249, 251, 611, 252, 253, 254, 255, 256, 257,
	1026, 1004, 259, 260, 261, 262, 263, 265, 267, 268,
	269, 270, 271, 273, 275, 1015, 1005, 1010, 1016, 1006,
	1007, 1011, 279, 280, 281, 282, 283, 284, 0, 285,
	286, 290, 292, 293, 294, 295, 296, 297, 300, 0,
	302, 304, 0, 305, 308, 0, 309, 310, 311, 312,
	313, 314, 315, 316, 1018, 317, 0, 318, 319, 321,
	0, 324, 325, 326, 327, 328, 0, 329, 1027, 975,
	330, 331, 333, 334, 335, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 0, 349, 350,
	351, 353, 0, 354, 355, 358, 359, 360, 361, 0,
	363, 1028, 0, 364, 365, 366, 1008, 1009, 367, 368,
	369, 370, 371, 372, 375, 1041, 377, 378, 379, 380,
	381, 382, 383, 613, 385, 386, 387, 388, 389, 390,
	391, 575, 1019, 392, 394, 395, 1025, 579, 1020, 754,
	410, 411, 412, 413, 414, 415, 416, 418, 0, 420,
	421, 422, 1021, 423, 424, 425, 426, 0, 427, 428,
	429, 430, 431, 433, 436, 437, 438, 439, 0, 442,
	443, 444, 445, 446, 447, 448, 450, 451, 452, 454,
	455, 456, 614, 457, 458, 459, 460, 2429, 462, 463,
	615, 465, 466, 468, 469, 470, 471, 472, 473, 624,
	1012, 475, 585, 476, 477, 478, 479, 480, 0, 482,
	483, 484, 485, 486, 487, 490, 491, 492, 494, 495,
	1022, 496, 497, 1013, 499, 500, 757, 502, 503, 504,
	505, 506, 0, 625, 507, 1023, 508, 1024, 509, 510,
	511, 512, 513, 514, 515, 517, 0, 0, 519, 520,
	521, 523, 524, 525, 526, 529, 530, 531, 532, 533,
	0, 534, 536, 538, 616, 593, 1029, 1030, 1033, 1031,
	1032, 1034, 1035, 1045, 539, 540, 556, 407, 401, 357,
	399, 400, 404, 405, 408, 0, 0, 0, 1017, 0,
	0, 0, 0, 0, 794, 0, 981, 908, 0, 986,
	987, 976, 995, 966, 0, 0, 0, 2431, 0, 0,
	2427, 2428, 233, 0, 250, 739, 0, 299, 336, 971,
	0, 959, 396, 0, 449, 453, 0, 0, 991, 0,
	963, 0, 307, 984, 0, 0, 0, 985, 0, 983,
	518, 0, 0, 0, 0, 238, 1061, 541, 612, 0,
	0, 0, 977, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 748, 745, 749, 755, 743,
	753, 740, 751, 0, 440, 374, 591, 467, 245, 291,
	278, 320, 362, 474, 0, 0, 352, 522, 287, 376,
	0, 266, 409, 1014, 498, 373, 0, 481, 501, 0,
	393, 272, 432, 488, 489, 737, 742, 0, 758, 0,
	4750, 277, 398, 258, 406, 603, 569, 461, 419, 417,
	0, 384, 441, 598, 972, 0, 306, 0, 301, 397,
	537, 264, 516, 435, 402, 356, 464, 493, 303, 288,
	289, 332, 434, 322, 274, 527, 1042, 1044, 1040, 1036,
	1037, 1002, 1003, 1043, 1039, 323, 1038, 0, 535, 1047,
	1058, 1055, 1060, 1046, 1059, 1053, 856, 582, 1050, 1049,
	1063, 1056, 1057, 528, 1062, 1001, 1054, 1052, 1051, 1048,
	0, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 234, 0, 235, 236, 237, 239, 240, 241, 736,
	242, 243, 244, 247, 248, 249, 251, 611, 252, 253,
	254, 255, 256, 257, 1026, 1004, 259, 260, 261, 262,
	263, 265, 267, 268, 269, 270, 271, 273, 275, 1015,
	1005, 1010, 1016, 1006, 1007, 1011, 279, 280, 281, 282,
	283, 284, 0, 285, 286, 290, 292, 293, 294, 295,
	296, 297, 300, 0, 302, 304, 0, 305, 308, 0,
	309, 310, 311, 312, 313, 314, 315, 316, 1018, 317,
	0, 318, 319, 321, 0, 324, 325, 326, 327, 328,
	0, 329, 1027, 975, 330, 331, 333, 334, 335, 337,
	338, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 0, 349, 350, 351, 353, 0, 354, 355, 358,
	359, 360, 361, 0, 363, 1028, 0, 364, 365, 366,
	1008, 1009, 367, 368, 369, 370, 371, 372, 375, 1041,
	377, 378, 379, 380, 381, 382, 383, 613, 385, 386,
	387, 388, 389, 390, 391, 575, 1019, 392, 394, 395,
	1025, 579, 1020, 754, 410, 411, 412, 413, 414, 415,
	416, 418, 0, 420, 421, 422, 1021, 423, 424, 425,
	426, 0, 427, 428, 429, 430, 431, 433, 436, 437,
	438, 439, 0, 442, 443, 444, 445, 446, 447, 448,
	450, 451, 452, 454, 455, 456, 614, 457, 458, 459,
	460, 978, 462, 463, 615, 465, 466, 468, 469, 470,
	471, 472, 473, 624, 1012, 475, 585, 476, 477, 478,
	479, 480, 0, 482, 483, 484, 485, 486, 487, 490,
	491, 492, 494, 495, 1022, 496, 497, 1013, 499, 500,
	757, 502, 503, 504, 505, 506, 0, 625, 507, 1023,
	508, 1024, 509, 510, 511, 512, 513, 4749, 515, 517,
	0, 962, 519, 520, 521, 523, 524, 525, 526, 529,
	530, 531, 532, 533, 0, 534, 536, 538, 616, 593,
	1029, 1030, 1033, 1031, 1032, 1034, 1035, 1045, 539, 540,
	556, 407, 401, 357, 399, 400, 404, 405, 408, 0,
	0, 0, 1017, 0, 0, 0, 0, 0, 794, 0,
	981, 908, 0, 986, 987, 0, 995, 966, 0, 0,
	0, 967, 0, 0, 956, 957, 233, 0, 250, 739,
	0, 299, 336, 971, 0, 0, 396, 0, 449, 453,
	0, 542, 991, 0, 0, 0, 307, 984, 744, 0,
	750, 985, 756, 983, 518, 0, 746, 747, 752, 238,
	1061, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 748,
	745, 749, 755, 743, 753, 740, 751, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 1014, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 737,
	742, 0, 758, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 972, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	1042, 1044, 1040, 1036, 1037, 1002, 1003, 1043, 1039, 323,
	1038, 0, 535, 1047, 1058, 1055, 1060, 1046, 1059, 1053,
	856, 582, 1050, 1049, 1063, 1056, 1057, 528, 1062, 1001,
	1054, 1052, 1051, 1048, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 736, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 1026, 1004,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 1015, 1005, 1010, 1016, 1006, 1007, 1011,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 1018, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 1027, 975, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 1028,
	0, 364, 365, 366, 1008, 1009, 367, 368, 369, 370,
	371, 372, 375, 1041, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	1019, 392, 394, 395, 1025, 579, 1020, 754, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	1021, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 2592, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 1012, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 1022, 496,
	497, 1013, 499, 500, 757, 502, 503, 504, 505, 506,
	0, 625, 507, 1023, 508, 1024, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 1029, 1030, 1033, 1031, 1032, 1034,
	1035, 1045, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 0, 0, 0, 1017, 0, 794, 0,
	981, 908, 0, 986, 987, 0, 995, 966, 0, 0,
	0, 0, 0, 0, 0, 2431, 233, 0, 250, 739,
	0, 299, 336, 971, 0, 0, 396, 0, 449, 453,
	0, 542, 991, 0, 0, 0, 307, 984, 744, 0,
	750, 985, 756, 983, 518, 0, 746, 747, 752, 238,
	1061, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 748,
	745, 749, 755, 743, 753, 740, 751, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 1014, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 737,
	742, 0, 758, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 3778, 972, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	1042, 1044, 1040, 1036, 1037, 1002, 1003, 1043, 1039, 323,
	1038, 0, 535, 1047, 1058, 1055, 1060, 1046, 1059, 1053,
	856, 582, 1050, 1049, 1063, 1056, 1057, 528, 1062, 1001,
	1054, 1052, 1051, 1048, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 736, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 1026, 1004,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 1015, 1005, 1010, 1016, 1006, 1007, 1011,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 1018, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 1027, 975, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 1028,
	0, 364, 365, 366, 1008, 1009, 367, 368, 369, 370,
	371, 372, 375, 1041, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	1019, 392, 394, 395, 1025, 579, 1020, 754, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	1021, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 2592, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 1012, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 1022, 496,
	497, 1013, 499, 500, 757, 502, 503, 504, 505, 506,
	0, 625, 507, 1023, 508, 1024, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 1029, 1030, 1033, 1031, 1032, 1034,
	1035, 1045, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 0, 0, 0, 1017, 0, 794, 0,
	981, 908, 0, 986, 987, 0, 995, 966, 0, 0,
	0, 0, 0, 0, 0, 2431, 233, 0, 250, 739,
	0, 299, 336, 971, 0, 0, 396, 0, 449, 453,
	0, 542, 991, 0, 0, 0, 307, 984, 744, 0,
	750, 985, 756, 983, 518, 0, 746, 747, 752, 238,
	1061, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 3719, 0, 0, 0, 0, 748,
	745, 749, 755, 743, 753, 740, 751, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 1014, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 737,
	742, 0, 758, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 972, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	1042, 1044, 1040, 1036, 1037, 1002, 1003, 1043, 1039, 323,
	1038, 0, 535, 1047, 1058, 1055, 1060, 1046, 1059, 1053,
	856, 582, 1050, 1049, 1063, 1056, 1057, 528, 1062, 1001,
	1054, 1052, 1051, 1048, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 736, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 1026, 1004,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 1015, 1005, 1010, 1016, 1006, 1007, 1011,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 1018, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 1027, 975, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 1028,
	0, 364, 365, 366, 1008, 1009, 367, 368, 369, 370,
	371, 372, 375, 1041, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	1019, 392, 394, 395, 1025, 579, 1020, 754, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	1021, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 2592, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 1012, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 1022, 496,
	497, 1013, 499, 500, 757, 502, 503, 504, 505, 506,
	0, 625, 507, 1023, 508, 1024, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 1029, 1030, 1033, 1031, 1032, 1034,
	1035, 1045, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 794, 0, 0, 1017, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 250, 739, 2431, 299, 336, 551, 0,
	0, 396, 0, 449, 453, 96, 542, 0, 0, 0,
	0, 307, 0, 744, 0, 750, 0, 756, 0, 518,
	0, 746, 747, 752, 238, 626, 541, 612, 0, 0,
	0, 403, 93, 0, 0, 650, 94, 0, 0, 246,
	0, 0, 0, 0, 748, 745, 749, 755, 743, 753,
	740, 751, 0, 440, 374, 1917, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 1014, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 737, 742, 0, 758, 0, 276,
	277, 398, 258, 406, 2680, 2681, 2679, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 1042, 1044, 1040, 1036, 1037,
	1002, 1003, 1043, 1039, 323, 2687, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 736, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 1026, 1004, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 1015, 1005,
	1010, 1016, 1006, 1007, 1011, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 1018, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 1027, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 2672, 363, 1028, 0, 364, 365, 366, 1008,
	1009, 367, 368, 369, 370, 371, 372, 375, 1041, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 1019, 392, 394, 395, 1025,
	579, 1020, 754, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 1021, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 1012, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 1022, 496, 497, 1013, 499, 500, 757,
	502, 503, 504, 505, 506, 0, 625, 507, 1023, 508,
	1024, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 1029,
	1030, 1033, 1031, 1032, 1034, 1035, 1045, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 0, 0,
	0, 1017, 0, 732, 0, 1367, 908, 97, 0, 0,
	0, 995, 0, 0, 0, 0, 0, 0, 0, 0,
	2674, 233, 0, 250, 739, 0, 299, 336, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 4631,
	0, 307, 1364, 744, 0, 750, 0, 756, 1363, 518,
	0, 746, 747, 752, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 1365, 748, 745, 749, 755, 743, 753,
	740, 751, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 737, 742, 0, 758, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 736, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 738, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 741, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 754, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 757,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 794, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4632, 0, 0, 1368, 1369, 4630, 233, 0, 250, 739,
	0, 299, 336, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 744, 0,
	750, 0, 756, 0, 518, 0, 746, 747, 752, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	650, 0, 0, 0, 246, 0, 0, 0, 0, 748,
	745, 749, 755, 743, 753, 740, 751, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 1014, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 737,
	742, 0, 758, 0, 276, 277, 398, 258, 406, 2680,
	2681, 2679, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	1042, 1044, 1040, 1036, 1037, 1002, 1003, 1043, 1039, 323,
	2687, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 736, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 1026, 1004,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 1015, 1005, 1010, 1016, 1006, 1007, 1011,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 1018, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 1027, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 2672, 363, 1028,
	0, 364, 365, 366, 1008, 1009, 367, 368, 369, 370,
	371, 372, 375, 1041, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	1019, 392, 394, 395, 1025, 579, 1020, 754, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	1021, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 1012, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 1022, 496,
	497, 1013, 499, 500, 757, 502, 503, 504, 505, 506,
	0, 625, 507, 1023, 508, 1024, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 1029, 1030, 1033, 1031, 1032, 1034,
	1035, 1045, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 794, 0, 0, 1017, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 250, 739, 2674, 299, 336, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 0,
	0, 307, 0, 744, 0, 750, 0, 756, 0, 518,
	0, 746, 747, 752, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 748, 745, 749, 755, 743, 753,
	740, 751, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 1014, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 737, 742, 0, 758, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 1042, 1044, 1040, 1036, 1037,
	1002, 1003, 1043, 1039, 323, 2687, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 736, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 1026, 1004, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 1015, 1005,
	1010, 1016, 1006, 1007, 1011, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 1018, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 1027, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 1028, 0, 364, 365, 366, 1008,
	1009, 367, 368, 369, 370, 371, 372, 375, 1041, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 1019, 392, 394, 395, 1025,
	579, 1020, 754, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 1021, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 1012, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 1022, 496, 497, 1013, 499, 500, 757,
	502, 503, 504, 505, 506, 0, 625, 507, 1023, 508,
	1024, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 1029,
	1030, 1033, 1031, 1032, 1034, 1035, 1045, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 794, 0,
	0, 1017, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 739,
	3936, 299, 336, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 744, 0,
	750, 0, 756, 0, 518, 0, 746, 747, 752, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 748,
	745, 749, 755, 743, 753, 740, 751, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 1014, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 737,
	742, 0, 758, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	1042, 1044, 1040, 1036, 1037, 1002, 1003, 1043, 1039, 323,
	2687, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 736, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 1026, 1004,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 1015, 1005, 1010, 1016, 1006, 1007, 1011,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 1018, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 1027, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 1028,
	0, 364, 365, 366, 1008, 1009, 367, 368, 369, 370,
	371, 372, 375, 1041, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	1019, 392, 394, 395, 1025, 579, 1020, 754, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	1021, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 1012, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 1022, 496,
	497, 1013, 499, 500, 757, 502, 503, 504, 505, 506,
	0, 625, 507, 1023, 508, 1024, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 1029, 1030, 1033, 1031, 1032, 1034,
	1035, 1045, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 794, 0, 0, 1017, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 250, 739, 4817, 299, 336, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 0,
	0, 307, 0, 744, 0, 750, 0, 756, 0, 518,
	0, 746, 747, 752, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 748, 745, 749, 755, 743, 753,
	740, 751, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 1014, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 737, 742, 0, 758, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 1042, 1044, 1040, 1036, 1037,
	1002, 1003, 1043, 1039, 323, 2687, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 736, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 1026, 1004, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 1015, 1005,
	1010, 1016, 1006, 1007, 1011, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 1018, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 1027, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 1028, 0, 364, 365, 366, 1008,
	1009, 367, 368, 369, 370, 371, 372, 375, 1041, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 1019, 392, 394, 395, 1025,
	579, 1020, 754, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 1021, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 1012, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 1022, 496, 497, 1013, 499, 500, 757,
	502, 503, 504, 505, 506, 0, 625, 507, 1023, 508,
	1024, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 1029,
	1030, 1033, 1031, 1032, 1034, 1035, 1045, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 794, 0,
	0, 1017, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 739,
	2842, 299, 336, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 744, 0,
	750, 0, 756, 0, 518, 0, 746, 747, 752, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 748,
	745, 749, 755, 743, 753, 740, 751, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 1014, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 737,
	742, 0, 758, 0, 276, 277, 398, 258, 406, 2680,
	2681, 2679, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	1042, 1044, 1040, 1036, 1037, 1002, 1003, 1043, 1039, 323,
	2687, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 736, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 1026, 1004,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 1015, 1005, 1010, 1016, 1006, 1007, 1011,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 1018, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 1027, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 1028,
	0, 364, 365, 366, 1008, 1009, 367, 368, 369, 370,
	371, 372, 375, 1041, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	1019, 392, 394, 395, 1025, 579, 1020, 754, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	1021, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 1012, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 1022, 496,
	497, 1013, 499, 500, 757, 502, 503, 504, 505, 506,
	0, 625, 507, 1023, 508, 1024, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 1029, 1030, 1033, 1031, 1032, 1034,
	1035, 1045, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 0, 0, 0, 1017, 0, 732, 0,
	1367, 908, 0, 0, 0, 0, 995, 0, 0, 0,
	0, 0, 0, 0, 0, 92, 233, 0, 250, 739,
	0, 299, 336, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 1373, 0, 307, 1364, 744, 0,
	750, 0, 756, 1363, 518, 0, 746, 747, 752, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 1365, 748,
	745, 749, 755, 743, 753, 740, 751, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 737,
	742, 0, 758, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 736, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 738,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 741, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 754, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 757, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 732, 0, 1367, 908, 0, 0, 0, 0,
	995, 0, 0, 0, 0, 0, 0, 0, 1368, 1369,
	233, 0, 250, 739, 0, 299, 336, 551, 0, 0,
	396, 0, 449, 453, 0, 542, 0, 0, 1359, 0,
	307, 1364, 744, 0, 750, 0, 756, 1363, 518, 0,
	746, 747, 752, 238, 626, 541, 612, 0, 0, 0,
	403, 0, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 0, 1365, 748, 745, 749, 755, 743, 753, 740,
	751, 0, 440, 374, 591, 467, 245, 291, 278, 320,
	362, 474, 0, 0, 352, 522, 287, 376, 0, 266,
	409, 0, 498, 373, 0, 481, 501, 0, 393, 272,
	432, 488, 489, 737, 742, 0, 758, 0, 276, 277,
	398, 258, 406, 603, 569, 461, 419, 417, 0, 384,
	441, 598, 0, 0, 306, 0, 301, 397, 537, 264,
	516, 435, 402, 356, 464, 493, 303, 288, 289, 332,
	434, 322, 274, 527, 566, 570, 568, 564, 561, 565,
	562, 563, 567, 323, 560, 0, 535, 544, 578, 558,
	586, 543, 583, 553, 298, 582, 547, 546, 592, 573,
	574, 528, 588, 559, 557, 550, 549, 545, 0, 223,
	224, 225, 226, 227, 228, 229, 230, 231, 232, 234,
	0, 235, 236, 237, 239, 240, 241, 736, 242, 243,
	244, 247, 248, 249, 251, 611, 252, 253, 254, 255,
	256, 257, 548, 738, 259, 260, 261, 262, 263, 265,
	267, 268, 269, 270, 271, 273, 275, 0, 0, 0,
	741, 0, 0, 0, 279, 280, 281, 282, 283, 284,
	0, 285, 286, 290, 292, 293, 294, 295, 296, 297,
	300, 0, 302, 304, 0, 305, 308, 0, 309, 310,
	311, 312, 313, 314, 315, 316, 552, 317, 0, 318,
	319, 321, 0, 324, 325, 326, 327, 328, 0, 329,
	554, 555, 330, 331, 333, 334, 335, 337, 338, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 0,
	349, 350, 351, 353, 0, 354, 355, 358, 359, 360,
	361, 0, 363, 571, 0, 364, 365, 366, 0, 0,
	367, 368, 369, 370, 371, 372, 375, 572, 377, 378,
	379, 380, 381, 382, 383, 613, 385, 386, 387, 388,
	389, 390, 391, 575, 576, 392, 394, 395, 577, 579,
	580, 754, 410, 411, 412, 413, 414, 415, 416, 418,
	0, 420, 421, 422, 581, 423, 424, 425, 426, 0,
	427, 428, 429, 430, 431, 433, 436, 437, 438, 439,
	0, 442, 443, 444, 445, 446, 447, 448, 450, 451,
	452, 454, 455, 456, 614, 457, 458, 459, 460, 584,
	462, 463, 615, 465, 466, 468, 469, 470, 471, 472,
	473, 624, 0, 475, 585, 476, 477, 478, 479, 480,
	0, 482, 483, 484, 485, 486, 487, 490, 491, 492,
	494, 495, 587, 496, 497, 0, 499, 500, 757, 502,
	503, 504, 505, 506, 0, 625, 507, 589, 508, 590,
	509, 510, 511, 512, 513, 514, 515, 517, 0, 0,
	519, 520, 521, 523, 524, 525, 526, 529, 530, 531,
	532, 533, 0, 534, 536, 538, 616, 593, 594, 595,
	596, 597, 599, 600, 601, 602, 539, 540, 556, 407,
	401, 357, 399, 400, 404, 405, 408, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 732, 0, 1367, 908,
	0, 0, 0, 0, 995, 0, 0, 0, 0, 0,
	0, 0, 1368, 1369, 233, 0, 250, 739, 0, 299,
	336, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 1364, 744, 0, 750, 0,
	756, 1363, 518, 0, 746, 747, 752, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 1365, 748, 745, 749,
	755, 743, 753, 740, 751, 0, 440, 374, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 737, 742, 0,
	758, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 736, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 738, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 741, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 754, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 584, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 757, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	794, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1368, 1369, 233, 0,
	250, 739, 0, 299, 336, 551, 0, 0, 396, 0,
	449, 453, 0, 542, 0, 0, 0, 0, 307, 0,
	744, 0, 750, 0, 756, 0, 518, 0, 746, 747,
	752, 238, 626, 541, 612, 0, 0, 0, 403, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 748, 745, 749, 755, 743, 753, 740, 751, 0,
	440, 374, 591, 467, 245, 291, 278, 320, 362, 474,
	0, 0, 352, 522, 287, 376, 0, 266, 409, 0,
	498, 373, 0, 481, 501, 0, 393, 272, 432, 488,
	489, 737, 742, 0, 758, 0, 276, 277, 398, 258,
	406, 603, 569, 461, 419, 417, 0, 384, 441, 598,
	0, 0, 306, 0, 301, 397, 537, 264, 516, 435,
	402, 356, 464, 493, 303, 288, 289, 332, 434, 322,
	274, 527, 566, 570, 568, 564, 561, 565, 562, 563,
	567, 323, 560, 0, 535, 544, 578, 558, 586, 543,
	583, 553, 298, 582, 547, 546, 592, 573, 574, 528,
	588, 559, 557, 550, 549, 545, 0, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 234, 0, 235,
	236, 237, 239, 240, 241, 736, 242, 243, 244, 247,
	248, 249, 251, 611, 252, 253, 254, 255, 256, 257,
	548, 738, 259, 260, 261, 262, 263, 265, 267, 268,
	269, 270, 271, 273, 275, 0, 0, 0, 741, 0,
	0, 0, 279, 280, 281, 282, 283, 284, 0, 285,
	286, 290, 292, 293, 294, 295, 296, 297, 300, 0,
	302, 304, 0, 305, 308, 0, 309, 310, 311, 312,
	313, 314, 315, 316, 552, 317, 0, 318, 319, 321,
	0, 324, 325, 326, 327, 328, 0, 329, 554, 555,
	330, 331, 333, 334, 335, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 0, 349, 350,
	351, 353, 0, 354, 355, 358, 359, 360, 361, 0,
	363, 571, 0, 364, 365, 366, 0, 0, 367, 368,
	369, 370, 371, 372, 375, 572, 377, 378, 379, 380,
	381, 382, 383, 613, 385, 386, 387, 388, 389, 390,
	391, 575, 576, 392, 394, 395, 577, 579, 580, 754,
	410, 411, 412, 413, 414, 415, 416, 418, 0, 420,
	421, 422, 581, 423, 424, 425, 426, 0, 427, 428,
	429, 430, 431, 433, 436, 437, 438, 439, 0, 442,
	443, 444, 445, 446, 447, 448, 450, 451, 452, 454,
	455, 456, 614, 457, 458, 459, 460, 584, 462, 463,
	615, 465, 466, 468, 469, 470, 471, 472, 473, 624,
	0, 475, 585, 476, 477, 478, 479, 480, 0, 482,
	483, 484, 485, 486, 487, 490, 491, 492, 494, 495,
	587, 496, 497, 0, 499, 500, 757, 502, 503, 504,
	505, 506, 0, 625, 507, 589, 508, 590, 509, 510,
	511, 512, 513, 514, 515, 517, 0, 0, 519, 520,
	521, 523, 524, 525, 526, 529, 530, 531, 532, 533,
	0, 534, 536, 538, 616, 593, 594, 595, 596, 597,
	599, 600, 601, 602, 539, 540, 556, 407, 401, 357,
	399, 400, 404, 405, 408, 220, 0, 0, 0, 0,
	0, 0, 701, 0, 0, 0, 0, 0, 0, 712,
	713, 714, 0, 233, 0, 250, 0, 4538, 299, 336,
	551, 0, 0, 396, 0, 449, 453, 0, 542, 0,
	0, 0, 0, 307, 0, 0, 0, 0, 0, 0,
	0, 518, 0, 0, 0, 0, 238, 626, 541, 612,
	0, 0, 0, 403, 0, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 440, 374, 591, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 0, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 0, 0, 0, 0,
	0, 276, 277, 398, 258, 406, 603, 569, 461, 419,
	417, 0, 384, 441, 598, 0, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 566, 570, 568,
	564, 561, 565, 562, 563, 567, 323, 560, 0, 535,
	544, 578, 558, 586, 543, 583, 553, 298, 582, 547,
	546, 592, 573, 574, 528, 588, 559, 557, 550, 549,
	545, 0, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	0, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 548, 0, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	0, 0, 0, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 552,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 554, 555, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 571, 0, 364, 365,
	366, 0, 0, 367, 368, 369, 370, 371, 372, 375,
	572, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 575, 576, 392, 394,
	395, 577, 579, 580, 0, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 581, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 584, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 0, 475, 585, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 587, 496, 497, 0, 499,
	500, 0, 502, 503, 504, 505, 506, 0, 625, 507,
	589, 508, 590, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 0, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	593, 594, 595, 596, 597, 599, 600, 601, 602, 539,
	540, 556, 407, 401, 357, 399, 400, 404, 405, 408,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 709, 710, 711, 0,
	0, 0, 0, 0, 220, 703, 704, 705, 706, 707,
	708, 701, 0, 0, 0, 0, 0, 0, 712, 713,
	714, 0, 233, 0, 250, 0, 0, 299, 336, 551,
	0, 0, 396, 0, 449, 453, 0, 542, 0, 0,
	0, 0, 307, 0, 0, 0, 0, 0, 0, 0,
	518, 0, 0, 0, 0, 238, 626, 541, 612, 0,
	0, 0, 4511, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 440, 374, 591, 467, 245, 291,
	278, 320, 362, 474, 0, 0, 352, 522, 287, 376,
	0, 266, 409, 0, 498, 373, 0, 481, 501, 0,
	393, 272, 432, 488, 489, 0, 0, 0, 0, 0,
	276, 277, 398, 258, 406, 603, 569, 461, 419, 417,
	0, 384, 441, 598, 0, 0, 306, 0, 301, 397,
	537, 264, 516, 435, 402, 356, 464, 493, 303, 288,
	289, 332, 434, 322, 274, 527, 566, 570, 568, 564,
	561, 565, 562, 563, 567, 323, 560, 0, 535, 544,
	578, 558, 586, 543, 583, 553, 298, 582, 547, 546,
	592, 573, 574, 528, 588, 559, 557, 550, 549, 545,
	0, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 234, 0, 235, 236, 237, 239, 240, 241, 0,
	242, 243, 244, 247, 248, 249, 251, 611, 252, 253,
	254, 255, 256, 257, 548, 0, 259, 260, 261, 262,
	263, 265, 267, 268, 269, 270, 271, 273, 275, 0,
	0, 0, 0, 0, 0, 0, 279, 280, 281, 282,
	283, 284, 0, 285, 286, 290, 292, 293, 294, 295,
	296, 297, 300, 0, 302, 304, 0, 305, 308, 0,
	309, 310, 311, 312, 313, 314, 315, 316, 552, 317,
	0, 318, 319, 321, 0, 324, 325, 326, 327, 328,
	0, 329, 554, 555, 330, 331, 333, 334, 335, 337,
	338, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 0, 349, 350, 351, 353, 0, 354, 355, 358,
	359, 360, 361, 0, 363, 571, 0, 364, 365, 366,
	0, 0, 367, 368, 369, 370, 371, 372, 375, 572,
	377, 378, 379, 380, 381, 382, 383, 613, 385, 386,
	387, 388, 389, 390, 391, 575, 576, 392, 394, 395,
	577, 579, 580, 0, 410, 411, 412, 413, 414, 415,
	416, 418, 0, 420, 421, 422, 581, 423, 424, 425,
	426, 0, 427, 428, 429, 430, 431, 433, 436, 437,
	438, 439, 0, 442, 443, 444, 445, 446, 447, 448,
	450, 451, 452, 454, 455, 456, 614, 457, 458, 459,
	460, 584, 462, 463, 615, 465, 466, 468, 469, 470,
	471, 472, 473, 624, 0, 475, 585, 476, 477, 478,
	479, 480, 0, 482, 483, 484, 485, 486, 487, 490,
	491, 492, 494, 495, 587, 496, 497, 0, 499, 500,
	0, 502, 503, 504, 505, 506, 0, 625, 507, 589,
	508, 590, 509, 510, 511, 512, 513, 514, 515, 517,
	0, 0, 519, 520, 521, 523, 524, 525, 526, 529,
	530, 531, 532, 533, 0, 534, 536, 538, 616, 593,
	594, 595, 596, 597, 599, 600, 601, 602, 539, 540,
	556, 407, 401, 357, 399, 400, 404, 405, 408, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 709, 710, 711, 0, 0,
	0, 0, 0, 220, 703, 704, 705, 706, 707, 708,
	701, 0, 0, 0, 0, 0, 0, 712, 713, 714,
	0, 233, 0, 250, 0, 0, 299, 336, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 0,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 518,
	0, 0, 0, 0, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	3026, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 3027, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 709, 710, 711, 0, 0, 0,
	0, 0, 220, 703, 704, 705, 706, 707, 708, 701,
	0, 0, 0, 0, 0, 0, 712, 713, 714, 0,
	233, 0, 250, 0, 0, 299, 336, 551, 0, 0,
	396, 0, 449, 453, 0, 542, 0, 0, 0, 0,
	307, 0, 0, 0, 0, 0, 0, 0, 518, 0,
	0, 0, 0, 238, 626, 541, 612, 0, 0, 0,
	403, 0, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 440, 374, 591, 467, 245, 291, 278, 320,
	362, 474, 0, 0, 352, 522, 287, 376, 0, 266,
	409, 0, 498, 373, 0, 481, 501, 0, 393, 272,
	432, 488, 489, 0, 0, 0, 0, 0, 276, 277,
	398, 258, 406, 603, 569, 461, 419, 417, 0, 384,
	441, 598, 0, 0, 306, 0, 301, 397, 537, 264,
	516, 435, 402, 356, 464, 493, 303, 288, 289, 332,
	434, 322, 274, 527, 566, 570, 568, 564, 561, 565,
	562, 563, 567, 323, 560, 0, 535, 544, 578, 558,
	586, 543, 583, 553, 298, 582, 547, 546, 592, 573,
	574, 528, 588, 559, 557, 550, 549, 545, 0, 223,
	224, 225, 226, 227, 228, 229, 230, 231, 232, 234,
	0, 235, 236, 237, 239, 240, 241, 0, 242, 243,
	244, 247, 248, 249, 251, 611, 252, 253, 254, 697,
	256, 257, 548, 0, 259, 260, 261, 262, 263, 265,
	267, 268, 269, 270, 271, 273, 275, 0, 0, 0,
	0, 0, 0, 0, 279, 280, 281, 282, 283, 284,
	0, 285, 286, 290, 292, 293, 294, 295, 296, 297,
	300, 0, 302, 304, 0, 305, 308, 0, 309, 310,
	311, 312, 313, 314, 315, 316, 552, 698, 0, 318,
	319, 321, 0, 324, 325, 326, 327, 328, 0, 329,
	554, 555, 330, 331, 333, 334, 335, 337, 338, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 0,
	349, 350, 351, 353, 0, 354, 355, 358, 359, 360,
	361, 0, 363, 571, 0, 364, 365, 366, 0, 0,
	367, 368, 369, 370, 371, 372, 375, 572, 377, 378,
	379, 380, 381, 382, 383, 613, 385, 386, 387, 388,
	389, 390, 391, 575, 576, 392, 394, 395, 577, 579,
	580, 0, 410, 411, 412, 413, 414, 415, 416, 418,
	0, 420, 421, 422, 581, 423, 424, 425, 426, 0,
	427, 428, 429, 430, 431, 433, 436, 437, 438, 439,
	0, 442, 443, 444, 445, 446, 447, 448, 450, 451,
	452, 454, 455, 456, 614, 457, 458, 459, 460, 584,
	462, 463, 615, 465, 466, 468, 469, 470, 471, 472,
	473, 624, 0, 475, 585, 476, 477, 478, 479, 480,
	0, 482, 483, 484, 485, 486, 487, 490, 491, 492,
	494, 495, 587, 496, 497, 0, 499, 500, 0, 502,
	503, 504, 505, 506, 0, 625, 507, 589, 508, 590,
	509, 510, 511, 512, 513, 514, 515, 517, 0, 0,
	519, 520, 521, 523, 524, 525, 526, 529, 530, 531,
	532, 533, 0, 534, 536, 538, 616, 593, 594, 595,
	596, 597, 599, 600, 601, 602, 539, 540, 556, 407,
	401, 357, 399, 400, 404, 405, 408, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	794, 0, 0, 709, 710, 711, 0, 0, 0, 0,
	0, 0, 703, 704, 705, 706, 707, 708, 233, 0,
	250, 739, 0, 299, 336, 551, 0, 0, 396, 0,
	449, 453, 0, 542, 0, 0, 0, 0, 307, 0,
	744, 0, 750, 0, 756, 0, 518, 0, 746, 747,
	752, 238, 626, 541, 612, 0, 0, 0, 403, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 748, 745, 749, 755, 743, 753, 740, 751, 0,
	440, 374, 591, 467, 245, 291, 278, 320, 362, 474,
	0, 0, 352, 522, 287, 376, 0, 266, 409, 1014,
	498, 373, 0, 481, 501, 0, 393, 272, 432, 488,
	489, 737, 742, 0, 758, 0, 276, 277, 398, 258,
	406, 603, 569, 461, 419, 417, 0, 384, 441, 598,
	0, 0, 306, 0, 301, 397, 537, 264, 516, 435,
	402, 356, 464, 493, 303, 288, 289, 332, 434, 322,
	274, 527, 1042, 1044, 1040, 1036, 1037, 1002, 1003, 1043,
	1039, 323, 2687, 0, 535, 544, 578, 558, 586, 543,
	583, 553, 298, 582, 547, 546, 592, 573, 574, 528,
	588, 559, 557, 550, 549, 545, 0, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 234, 0, 235,
	236, 237, 239, 240, 241, 736, 242, 243, 244, 247,
	248, 249, 251, 611, 252, 253, 254, 255, 256, 257,
	1026, 1004, 259, 260, 261, 262, 263, 265, 267, 268,
	269, 270, 271, 273, 275, 1015, 1005, 1010, 1016, 1006,
	1007, 1011, 279, 280, 281, 282, 283, 284, 0, 285,
	286, 290, 292, 293, 294, 295, 296, 297, 300, 0,
	302, 304, 0, 305, 308, 0, 309, 310, 311, 312,
	313, 314, 315, 316, 1018, 317, 0, 318, 319, 321,
	0, 324, 325, 326, 327, 328, 0, 329, 1027, 555,
	330, 331, 333, 334, 335, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 0, 349, 350,
	351, 353, 0, 354, 355, 358, 359, 360, 361, 0,
	363, 1028, 0, 364, 365, 366, 1008, 1009, 367, 368,
	369, 370, 371, 372, 375, 1041, 377, 378, 379, 380,
	381, 382, 383, 613, 385, 386, 387, 388, 389, 390,
	391, 575, 1019, 392, 394, 395, 1025, 579, 1020, 754,
	410, 411, 412, 413, 414, 415, 416, 418, 0, 420,
	421, 422, 1021, 423, 424, 425, 426, 0, 427, 428,
	429, 430, 431, 433, 436, 437, 438, 439, 0, 442,
	443, 444, 445, 446, 447, 448, 450, 451, 452, 454,
	455, 456, 614, 457, 458, 459, 460, 584, 462, 463,
	615, 465, 466, 468, 469, 470, 471, 472, 473, 624,
	1012, 475, 585, 476, 477, 478, 479, 480, 0, 482,
	483, 484, 485, 486, 487, 490, 491, 492, 494, 495,
	1022, 496, 497, 1013, 499, 500, 757, 502, 503, 504,
	505, 506, 0, 625, 507, 1023, 508, 1024, 509, 510,
	511, 512, 513, 514, 515, 517, 0, 0, 519, 520,
	521, 523, 524, 525, 526, 529, 530, 531, 532, 533,
	0, 534, 536, 538, 616, 593, 1029, 1030, 1033, 1031,
	1032, 1034, 1035, 1045, 539, 540, 556, 407, 401, 357,
	399, 400, 404, 405, 408, 0, 0, 794, 1017, 981,
	908, 0, 986, 987, 0, 995, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 0, 250, 739, 0,
	299, 336, 551, 0, 0, 396, 0, 449, 453, 0,
	542, 0, 0, 0, 0, 307, 984, 744, 0, 750,
	985, 756, 983, 518, 0, 746, 747, 752, 238, 1061,
	541, 612, 0, 0, 0, 403, 0, 0, 0, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 748, 745,
	749, 755, 743, 753, 740, 751, 0, 440, 374, 591,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 0, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 737, 742,
	0, 758, 0, 276, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 598, 0, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 566,
	570, 568, 564, 561, 565, 562, 563, 567, 323, 5106,
	0, 535, 1047, 1058, 1055, 1060, 1046, 1059, 1053, 856,
	582, 1050, 1049, 1063, 1056, 1057, 528, 1062, 1001, 1054,
	1052, 1051, 1048, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 736, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 548, 738, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 0, 0, 0, 741, 0, 0, 0, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 552, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 554, 555, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 571, 0,
	364, 365, 366, 0, 0, 367, 368, 369, 370, 371,
	372, 375, 572, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 576,
	392, 394, 395, 577, 579, 580, 754, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 581,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 584, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 0, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 587, 496, 497,
	0, 499, 500, 757, 502, 503, 504, 505, 506, 0,
	625, 507, 589, 508, 590, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 0, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 593, 594, 595, 596, 597, 599, 600, 601,
	602, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 220, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	233, 0, 250, 0, 0, 299, 336, 551, 0, 0,
	396, 0, 449, 453, 0, 542, 0, 0, 0, 0,
	307, 0, 0, 0, 0, 0, 0, 0, 518, 0,
	0, 0, 0, 238, 626, 541, 612, 0, 0, 0,
	403, 0, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 440, 374, 591, 467, 245, 291, 278, 320,
	362, 474, 0, 0, 352, 522, 287, 376, 0, 266,
	409, 0, 498, 373, 0, 481, 501, 0, 393, 272,
	432, 488, 489, 0, 0, 0, 0, 0, 276, 277,
	398, 258, 406, 603, 569, 461, 419, 417, 0, 384,
	441, 598, 0, 0, 306, 0, 301, 397, 537, 264,
	516, 435, 402, 356, 464, 493, 303, 288, 289, 332,
	434, 322, 274, 527, 566, 570, 568, 564, 561, 565,
	562, 563, 567, 323, 560, 0, 535, 544, 578, 558,
	586, 543, 583, 553, 298, 582, 547, 546, 592, 573,
	574, 528, 588, 559, 557, 550, 549, 545, 0, 223,
	224, 225, 226, 227, 228, 229, 230, 231, 232, 234,
	0, 235, 236, 237, 239, 240, 241, 0, 242, 243,
	244, 247, 248, 249, 251, 611, 252, 253, 254, 255,
	256, 257, 548, 0, 259, 260, 261, 262, 263, 265,
	267, 268, 269, 270, 271, 273, 275, 0, 0, 0,
	0, 0, 0, 0, 279, 280, 281, 282, 283, 284,
	0, 285, 286, 290, 292, 293, 294, 295, 296, 297,
	300, 0, 302, 304, 0, 305, 308, 0, 309, 310,
	311, 312, 313, 314, 315, 316, 552, 317, 0, 318,
	319, 321, 0, 324, 325, 326, 327, 328, 0, 329,
	554, 555, 330, 331, 333, 334, 335, 337, 338, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 0,
	349, 350, 351, 353, 0, 354, 355, 358, 359, 360,
	361, 0, 363, 571, 0, 364, 365, 366, 0, 0,
	367, 368, 369, 370, 371, 372, 375, 572, 377, 378,
	379, 380, 381, 382, 383, 613, 385, 386, 387, 388,
	389, 390, 391, 575, 576, 392, 394, 395, 577, 579,
	580, 0, 410, 411, 412, 413, 414, 415, 416, 418,
	0, 420, 421, 422, 581, 423, 424, 425, 426, 0,
	427, 428, 429, 430, 431, 433, 436, 437, 438, 439,
	0, 442, 443, 444, 445, 446, 447, 448, 450, 451,
	452, 454, 455, 456, 614, 457, 458, 459, 460, 584,
	462, 463, 615, 465, 466, 468, 469, 470, 471, 472,
	473, 624, 0, 475, 585, 476, 477, 478, 479, 480,
	0, 482, 483, 484, 485, 486, 487, 490, 491, 492,
	494, 495, 587, 496, 497, 0, 499, 500, 0, 502,
	503, 504, 505, 506, 0, 625, 507, 589, 508, 590,
	509, 510, 511, 512, 513, 514, 515, 517, 0, 0,
	519, 520, 521, 523, 524, 525, 526, 529, 530, 531,
	532, 533, 0, 534, 536, 538, 616, 593, 594, 595,
	596, 597, 599, 600, 601, 602, 539, 540, 556, 407,
	401, 357, 399, 400, 404, 405, 408, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 0, 250, 0, 0,
	299, 336, 551, 0, 4945, 396, 0, 449, 453, 0,
	542, 0, 0, 0, 0, 307, 0, 0, 0, 0,
	0, 0, 0, 518, 0, 0, 0, 0, 238, 626,
	541, 612, 0, 0, 0, 403, 0, 0, 0, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 440, 374, 591,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 0, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 0, 0,
	0, 0, 0, 276, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 598, 0, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 566,
	570, 568, 564, 561, 565, 562, 563, 567, 323, 560,
	0, 535, 544, 578, 558, 586, 543, 583, 553, 298,
	582, 547, 546, 592, 573, 574, 528, 588, 559, 557,
	550, 549, 545, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 0, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 548, 0, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 0, 0, 0, 0, 0, 0, 0, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 552, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 554, 555, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 571, 0,
	364, 365, 366, 0, 0, 367, 368, 369, 370, 371,
	372, 375, 572, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 576,
	392, 394, 395, 577, 579, 580, 0, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 581,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 584, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 0, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 587, 496, 497,
	0, 499, 500, 0, 502, 503, 504, 505, 506, 0,
	625, 507, 589, 508, 590, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 0, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 593, 594, 595, 596, 597, 599, 600, 601,
	602, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 220, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	233, 0, 250, 0, 0, 299, 336, 551, 0, 4805,
	396, 0, 449, 453, 0, 542, 0, 0, 0, 0,
	307, 0, 0, 0, 0, 0, 0, 0, 518, 0,
	0, 0, 0, 238, 626, 541, 612, 0, 0, 0,
	403, 0, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 440, 374, 591, 467, 245, 291, 278, 320,
	362, 474, 0, 0, 352, 522, 287, 376, 0, 266,
	409, 0, 498, 373, 0, 481, 501, 0, 393, 272,
	432, 488, 489, 0, 0, 0, 0, 0, 276, 277,
	398, 258, 406, 603, 569, 461, 419, 417, 0, 384,
	441, 598, 0, 0, 306, 0, 301, 397, 537, 264,
	516, 435, 402, 356, 464, 493, 303, 288, 289, 332,
	434, 322, 274, 527, 566, 570, 568, 564, 561, 565,
	562, 563, 567, 323, 560, 0, 535, 544, 578, 558,
	586, 543, 583, 553, 298, 582, 547, 546, 592, 573,
	574, 528, 588, 559, 557, 550, 549, 545, 0, 223,
	224, 225, 226, 227, 228, 229, 230, 231, 232, 234,
	0, 235, 236, 237, 239, 240, 241, 0, 242, 243,
	244, 247, 248, 249, 251, 611, 252, 253, 254, 255,
	256, 257, 548, 0, 259, 260, 261, 262, 263, 265,
	267, 268, 269, 270, 271, 273, 275, 0, 0, 0,
	0, 0, 0, 0, 279, 280, 281, 282, 283, 284,
	0, 285, 286, 290, 292, 293, 294, 295, 296, 297,
	300, 0, 302, 304, 0, 305, 308, 0, 309, 310,
	311, 312, 313, 314, 315, 316, 552, 317, 0, 318,
	319, 321, 0, 324, 325, 326, 327, 328, 0, 329,
	554, 555, 330, 331, 333, 334, 335, 337, 338, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 0,
	349, 350, 351, 353, 0, 354, 355, 358, 359, 360,
	361, 0, 363, 571, 0, 364, 365, 366, 0, 0,
	367, 368, 369, 370, 371, 372, 375, 572, 377, 378,
	379, 380, 381, 382, 383, 613, 385, 386, 387, 388,
	389, 390, 391, 575, 576, 392, 394, 395, 577, 579,
	580, 0, 410, 411, 412, 413, 414, 415, 416, 418,
	0, 420, 421, 422, 581, 423, 424, 425, 426, 0,
	427, 428, 429, 430, 431, 433, 436, 437, 438, 439,
	0, 442, 443, 444, 445, 446, 447, 448, 450, 451,
	452, 454, 455, 456, 614, 457, 458, 459, 460, 584,
	462, 463, 615, 465, 466, 468, 469, 470, 471, 472,
	473, 624, 0, 475, 585, 476, 477, 478, 479, 480,
	0, 482, 483, 484, 485, 486, 487, 490, 491, 492,
	494, 495, 587, 496, 497, 0, 499, 500, 0, 502,
	503, 504, 505, 506, 0, 625, 507, 589, 508, 590,
	509, 510, 511, 512, 513, 514, 515, 517, 0, 0,
	519, 520, 521, 523, 524, 525, 526, 529, 530, 531,
	532, 533, 0, 534, 536, 538, 616, 593, 594, 595,
	596, 597, 599, 600, 601, 602, 539, 540, 556, 407,
	401, 357, 399, 400, 404, 405, 408, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 0, 250, 0, 0,
	299, 336, 551, 0, 4802, 396, 0, 449, 453, 96,
	542, 0, 0, 0, 0, 307, 0, 0, 0, 0,
	0, 0, 0, 518, 0, 0, 0, 0, 238, 626,
	541, 612, 0, 0, 0, 403, 93, 0, 0, 0,
	94, 0, 0, 246, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 440, 374, 1917,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 0, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 0, 0,
	0, 0, 0, 276, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 598, 0, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 566,
	570, 568, 564, 561, 565, 562, 563, 567, 323, 560,
	0, 535, 544, 578, 558, 586, 543, 583, 553, 298,
	582, 547, 546, 592, 573, 574, 528, 588, 559, 557,
	550, 549, 545, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 0, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 548, 0, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 0, 0, 0, 0, 0, 0, 0, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 552, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 554, 555, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 571, 0,
	364, 365, 366, 0, 0, 367, 368, 369, 370, 371,
	372, 375, 572, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 576,
	392, 394, 395, 577, 579, 580, 0, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 581,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 584, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 0, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 587, 496, 497,
	0, 499, 500, 0, 502, 503, 504, 505, 506, 0,
	625, 507, 589, 508, 590, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 0, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 593, 594, 595, 596, 597, 599, 600, 601,
	602, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 732, 0, 0, 908, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	233, 0, 250, 739, 92, 299, 336, 551, 0, 0,
	396, 0, 449, 453, 0, 542, 0, 0, 0, 0,
	307, 1364, 744, 0, 750, 0, 756, 1363, 518, 0,
	746, 747, 752, 238, 626, 541, 612, 0, 0, 0,
	403, 0, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 0, 1365, 748, 745, 749, 755, 743, 753, 740,
	751, 0, 440, 374, 591, 467, 245, 291, 278, 320,
	362, 474, 0, 0, 352, 522, 287, 376, 0, 266,
	409, 0, 498, 373, 0, 481, 501, 0, 393, 272,
	432, 488, 489, 737, 742, 0, 758, 0, 276, 277,
	398, 258, 406, 603, 569, 461, 419, 417, 0, 384,
	441, 598, 0, 0, 306, 0, 301, 397, 537, 264,
	516, 435, 402, 356, 464, 493, 303, 288, 289, 332,
	434, 322, 274, 527, 566, 570, 568, 564, 561, 565,
	562, 563, 567, 323, 560, 0, 535, 544, 578, 558,
	586, 543, 583, 553, 298, 582, 547, 546, 592, 573,
	574, 528, 588, 559, 557, 550, 549, 545, 0, 223,
	224, 225, 226, 227, 228, 229, 230, 231, 232, 234,
	0, 235, 236, 237, 239, 240, 241, 736, 242, 243,
	244, 247, 248, 249, 251, 611, 252, 253, 254, 255,
	256, 257, 548, 738, 259, 260, 261, 262, 263, 265,
	267, 268, 269, 270, 271, 273, 275, 0, 0, 0,
	741, 0, 0, 0, 279, 280, 281, 282, 283, 284,
	0, 285, 286, 290, 292, 293, 294, 295, 296, 297,
	300, 0, 302, 304, 0, 305, 308, 0, 309, 310,
	311, 312, 313, 314, 315, 316, 552, 317, 0, 318,
	319, 321, 0, 324, 325, 326, 327, 328, 0, 329,
	554, 555, 330, 331, 333, 334, 335, 337, 338, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 0,
	349, 350, 351, 353, 0, 354, 355, 358, 359, 360,
	361, 0, 363, 571, 0, 364, 365, 366, 0, 0,
	367, 368, 369, 370, 371, 372, 375, 572, 377, 378,
	379, 380, 381, 382, 383, 613, 385, 386, 387, 388,
	389, 390, 391, 575, 576, 392, 394, 395, 577, 579,
	580, 754, 410, 411, 412, 413, 414, 415, 416, 418,
	0, 420, 421, 422, 581, 423, 424, 425, 426, 0,
	427, 428, 429, 430, 431, 433, 436, 437, 438, 439,
	0, 442, 443, 444, 445, 446, 447, 448, 450, 451,
	452, 454, 455, 456, 614, 457, 458, 459, 460, 584,
	462, 463, 615, 465, 466, 468, 469, 470, 471, 472,
	473, 624, 0, 475, 585, 476, 477, 478, 479, 480,
	0, 482, 483, 484, 485, 486, 487, 490, 491, 492,
	494, 495, 587, 496, 497, 0, 499, 500, 757, 502,
	503, 504, 505, 506, 0, 625, 507, 589, 508, 590,
	509, 510, 511, 512, 513, 514, 515, 517, 0, 0,
	519, 520, 521, 523, 524, 525, 526, 529, 530, 531,
	532, 533, 0, 534, 536, 538, 616, 593, 594, 595,
	596, 597, 599, 600, 601, 602, 539, 540, 556, 407,
	401, 357, 399, 400, 404, 405, 408, 732, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 0, 250, 739, 0,
	299, 336, 551, 0, 0, 396, 0, 449, 453, 0,
	542, 0, 0, 0, 0, 307, 0, 744, 0, 750,
	0, 756, 0, 518, 0, 746, 747, 752, 238, 626,
	541, 612, 0, 0, 0, 403, 0, 0, 0, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 748, 745,
	749, 755, 743, 753, 740, 751, 0, 440, 374, 591,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 2176, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 737, 742,
	0, 758, 0, 276, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 598, 0, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 566,
	570, 568, 564, 561, 565, 562, 563, 567, 323, 560,
	0, 535, 544, 578, 558, 586, 543, 583, 553, 298,
	582, 547, 546, 592, 573, 574, 528, 588, 559, 557,
	550, 549, 545, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 736, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 548, 738, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 0, 0, 729, 741, 0, 0, 730, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 552, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 554, 555, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 571, 0,
	364, 365, 366, 0, 0, 367, 368, 369, 370, 371,
	372, 375, 572, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 576,
	392, 394, 395, 577, 579, 580, 754, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 581,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 584, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 731, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 587, 496, 497,
	0, 499, 500, 757, 502, 503, 504, 505, 506, 0,
	625, 507, 589, 508, 590, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 0, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 593, 594, 595, 596, 597, 599, 600, 601,
	602, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 220, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	233, 0, 250, 0, 0, 299, 336, 551, 0, 0,
	396, 0, 449, 453, 0, 542, 0, 0, 0, 0,
	307, 0, 0, 0, 0, 0, 0, 0, 518, 0,
	0, 0, 0, 238, 626, 541, 612, 0, 0, 0,
	403, 0, 0, 0, 650, 2192, 0, 0, 246, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 440, 374, 591, 467, 245, 291, 278, 320,
	362, 474, 0, 0, 352, 522, 287, 376, 0, 266,
	409, 0, 498, 373, 0, 481, 501, 0, 393, 272,
	432, 488, 489, 0, 0, 0, 0, 0, 276, 277,
	398, 258, 406, 603, 569, 461, 419, 417, 0, 384,
	441, 598, 0, 0, 306, 0, 301, 397, 537, 264,
	516, 435, 402, 356, 464, 493, 303, 288, 289, 332,
	434, 322, 274, 527, 566, 570, 568, 564, 561, 565,
	562, 563, 567, 323, 560, 0, 535, 544, 578, 558,
	586, 543, 583, 553, 298, 582, 547, 546, 592, 573,
	574, 528, 588, 559, 557, 550, 549, 545, 0, 223,
	224, 225, 226, 227, 228, 229, 230, 231, 232, 234,
	0, 235, 236, 237, 239, 240, 241, 0, 242, 243,
	244, 247, 248, 249, 251, 611, 252, 253, 254, 255,
	256, 257, 548, 0, 259, 260, 261, 262, 263, 265,
	267, 268, 269, 270, 271, 273, 275, 0, 0, 0,
	2196, 0, 0, 0, 279, 280, 281, 282, 283, 284,
	0, 285, 286, 290, 292, 293, 294, 295, 296, 297,
	300, 0, 302, 304, 0, 305, 308, 0, 309, 310,
	311, 312, 313, 314, 315, 316, 552, 317, 0, 318,
	319, 321, 0, 324, 325, 326, 327, 328, 0, 329,
	554, 555, 330, 331, 333, 334, 335, 337, 338, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 0,
	349, 350, 351, 353, 0, 354, 355, 358, 359, 360,
	361, 0, 363, 571, 0, 364, 365, 366, 0, 0,
	367, 368, 369, 370, 371, 372, 375, 572, 377, 378,
	379, 380, 381, 382, 383, 613, 385, 386, 387, 388,
	389, 390, 391, 575, 576, 392, 394, 395, 577, 579,
	580, 0, 410, 411, 412, 413, 414, 415, 416, 418,
	0, 420, 421, 422, 581, 423, 424, 425, 426, 0,
	427, 428, 429, 430, 431, 433, 436, 437, 438, 439,
	0, 442, 443, 444, 445, 446, 447, 448, 450, 451,
	452, 454, 455, 456, 614, 457, 458, 459, 460, 584,
	462, 463, 615, 465, 466, 468, 469, 470, 471, 472,
	473, 624, 0, 475, 585, 476, 477, 478, 479, 480,
	0, 482, 483, 484, 485, 486, 487, 490, 491, 492,
	494, 495, 587, 496, 497, 0, 2193, 500, 0, 502,
	503, 504, 505, 506, 0, 625, 507, 589, 508, 590,
	509, 510, 511, 512, 513, 514, 515, 517, 0, 0,
	519, 520, 521, 523, 524, 525, 526, 529, 530, 531,
	532, 533, 0, 534, 536, 538, 616, 593, 594, 595,
	596, 597, 599, 600, 601, 602, 539, 540, 556, 407,
	401, 357, 399, 400, 404, 405, 408, 732, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 825, 233, 0, 250, 739, 1127,
	299, 336, 551, 0, 0, 396, 0, 449, 453, 0,
	542, 0, 0, 0, 0, 307, 0, 744, 0, 750,
	0, 756, 0, 518, 0, 746, 747, 752, 238, 626,
	541, 612, 0, 0, 0, 403, 0, 0, 0, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 748, 745,
	749, 755, 743, 753, 740, 751, 0, 440, 374, 591,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 0, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 737, 742,
	0, 758, 0, 276, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 598, 0, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 566,
	570, 568, 564, 561, 565, 562, 563, 567, 323, 560,
	0, 535, 544, 578, 558, 586, 543, 583, 553, 298,
	582, 547, 546, 592, 573, 574, 528, 588, 559, 557,
	550, 549, 545, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 736, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 548, 738, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 0, 0, 729, 741, 0, 0, 730, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 552, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 554, 555, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 571, 0,
	364, 365, 366, 0, 0, 367, 368, 369, 370, 823,
	372, 375, 572, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 576,
	392, 394, 395, 577, 579, 580, 754, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 581,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 584, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 731, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 587, 496, 497,
	0, 499, 500, 757, 502, 503, 504, 505, 506, 0,
	625, 507, 589, 508, 590, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 0, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 593, 594, 595, 596, 597, 599, 600, 601,
	602, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 732, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 821,
	233, 0, 250, 739, 0, 299, 336, 551, 0, 0,
	396, 0, 449, 453, 0, 542, 0, 0, 0, 0,
	307, 0, 744, 0, 750, 0, 756, 0, 518, 0,
	746, 747, 752, 238, 626, 541, 612, 0, 0, 0,
	403, 0, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 748, 745, 749, 755, 743, 753, 740,
	751, 0, 440, 374, 591, 467, 245, 291, 278, 320,
	362, 474, 0, 0, 352, 522, 287, 376, 0, 266,
	409, 0, 498, 373, 0, 481, 501, 0, 393, 272,
	432, 488, 489, 737, 742, 0, 758, 0, 276, 277,
	398, 258, 406, 603, 569, 461, 419, 417, 0, 384,
	441, 598, 0, 0, 306, 0, 301, 397, 537, 264,
	516, 435, 402, 356, 464, 493, 303, 288, 289, 332,
	434, 322, 274, 527, 566, 570, 568, 564, 561, 565,
	562, 563, 567, 323, 560, 0, 535, 544, 578, 558,
	586, 543, 583, 553, 298, 582, 547, 546, 592, 573,
	574, 528, 588, 559, 557, 550, 549, 545, 0, 223,
	224, 225, 226, 227, 228, 229, 230, 231, 232, 234,
	0, 235, 236, 237, 239, 240, 241, 736, 242, 243,
	244, 247, 248, 249, 251, 611, 252, 253, 254, 255,
	256, 257, 548, 738, 259, 260, 261, 262, 263, 265,
	267, 268, 269, 270, 271, 273, 275, 0, 0, 729,
	741, 0, 0, 730, 279, 280, 281, 282, 283, 284,
	0, 285, 286, 290, 292, 293, 294, 295, 296, 297,
	300, 0, 302, 304, 0, 305, 308, 0, 309, 310,
	311, 312, 313, 314, 315, 316, 552, 317, 0, 318,
	319, 321, 0, 324, 325, 326, 327, 328, 0, 329,
	554, 555, 330, 331, 333, 334, 335, 337, 338, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 0,
	349, 350, 351, 353, 0, 354, 355, 358, 359, 360,
	361, 0, 363, 571, 0, 364, 365, 366, 0, 0,
	367, 368, 369, 370, 371, 372, 375, 572, 377, 378,
	379, 380, 381, 382, 383, 613, 385, 386, 387, 388,
	389, 390, 391, 575, 576, 392, 394, 395, 577, 579,
	580, 754, 410, 411, 412, 413, 414, 415, 416, 418,
	0, 420, 421, 422, 581, 423, 424, 425, 426, 0,
	427, 428, 429, 430, 431, 433, 436, 437, 438, 439,
	0, 442, 443, 444, 445, 446, 447, 448, 450, 451,
	452, 454, 455, 456, 614, 457, 458, 459, 460, 584,
	462, 463, 615, 465, 466, 468, 469, 470, 471, 472,
	473, 624, 731, 475, 585, 476, 477, 478, 479, 480,
	0, 482, 483, 484, 485, 486, 487, 490, 491, 492,
	494, 495, 587, 496, 497, 0, 499, 500, 757, 502,
	503, 504, 505, 506, 0, 625, 507, 589, 508, 590,
	509, 510, 511, 512, 513, 514, 515, 517, 0, 0,
	519, 520, 521, 523, 524, 525, 526, 529, 530, 531,
	532, 533, 0, 534, 536, 538, 616, 593, 594, 595,
	596, 597, 599, 600, 601, 602, 539, 540, 556, 407,
	401, 357, 399, 400, 404, 405, 408, 732, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 0, 250, 739, 0,
	299, 336, 551, 0, 0, 396, 0, 449, 453, 0,
	542, 0, 0, 0, 0, 307, 0, 744, 0, 750,
	0, 756, 0, 518, 0, 746, 747, 752, 238, 626,
	541, 612, 0, 0, 0, 403, 0, 0, 0, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 748, 745,
	749, 755, 743, 753, 740, 751, 0, 440, 374, 591,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 0, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 737, 742,
	0, 758, 0, 276, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 598, 0, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 566,
	570, 568, 564, 561, 565, 562, 563, 567, 323, 560,
	0, 535, 544, 578, 558, 586, 543, 583, 553, 298,
	582, 547, 546, 592, 573, 574, 528, 588, 559, 557,
	550, 549, 545, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 736, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 548, 738, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 0, 0, 729, 741, 0, 0, 730, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 552, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 554, 555, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 571, 0,
	364, 365, 366, 0, 0, 367, 368, 369, 370, 371,
	372, 375, 572, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 576,
	392, 394, 395, 577, 579, 580, 754, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 581,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 584, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 731, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 587, 496, 497,
	0, 499, 500, 757, 502, 503, 504, 505, 506, 0,
	625, 507, 589, 508, 590, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 0, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 593, 594, 595, 596, 597, 599, 600, 601,
	602, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 220, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	233, 3274, 250, 0, 0, 299, 336, 551, 0, 0,
	396, 0, 449, 453, 0, 542, 0, 0, 0, 0,
	307, 0, 0, 0, 0, 0, 0, 0, 518, 0,
	0, 0, 0, 238, 626, 541, 612, 0, 0, 0,
	403, 0, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 440, 374, 591, 467, 245, 291, 278, 320,
	362, 474, 0, 0, 352, 522, 287, 376, 0, 266,
	409, 0, 498, 373, 0, 481, 501, 0, 393, 272,
	432, 488, 489, 0, 0, 0, 0, 0, 276, 277,
	398, 258, 406, 603, 569, 461, 419, 417, 0, 384,
	441, 598, 0, 0, 306, 0, 301, 397, 537, 264,
	516, 435, 402, 356, 464, 493, 303, 288, 289, 332,
	434, 322, 274, 527, 566, 570, 568, 564, 561, 565,
	562, 563, 567, 323, 560, 0, 535, 544, 578, 558,
	586, 543, 583, 553, 298, 582, 547, 546, 592, 573,
	574, 528, 588, 559, 557, 550, 549, 545, 0, 223,
	224, 225, 226, 227, 228, 229, 230, 231, 232, 234,
	0, 235, 236, 237, 239, 240, 241, 0, 242, 243,
	244, 247, 248, 249, 251, 611, 252, 253, 254, 255,
	256, 257, 548, 0, 259, 260, 261, 262, 263, 265,
	267, 268, 269, 270, 271, 273, 275, 0, 0, 0,
	0, 0, 0, 0, 279, 280, 281, 282, 283, 284,
	0, 285, 286, 290, 292, 293, 294, 295, 296, 297,
	300, 0, 302, 304, 0, 305, 308, 0, 309, 310,
	311, 312, 313, 314, 315, 316, 552, 317, 0, 318,
	319, 321, 0, 324, 325, 326, 327, 328, 0, 329,
	554, 555, 330, 331, 333, 334, 335, 337, 338, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 0,
	349, 350, 351, 353, 0, 354, 355, 358, 359, 360,
	361, 0, 363, 571, 0, 364, 365, 366, 0, 0,
	367, 368, 369, 370, 371, 372, 375, 572, 377, 378,
	379, 380, 381, 382, 383, 613, 385, 386, 387, 388,
	389, 390, 391, 575, 576, 392, 394, 395, 577, 579,
	580, 0, 410, 411, 412, 413, 414, 415, 416, 418,
	0, 420, 421, 422, 581, 423, 424, 425, 426, 0,
	427, 428, 429, 430, 431, 433, 436, 437, 438, 439,
	0, 442, 443, 444, 445, 446, 447, 448, 450, 451,
	452, 454, 455, 456, 614, 457, 458, 459, 460, 584,
	462, 463, 615, 465, 466, 468, 469, 470, 471, 472,
	473, 624, 0, 475, 585, 476, 477, 478, 479, 480,
	0, 482, 483, 484, 485, 486, 487, 490, 491, 492,
	494, 495, 587, 496, 497, 0, 499, 500, 0, 502,
	503, 504, 505, 506, 0, 625, 507, 589, 508, 590,
	509, 510, 511, 512, 513, 514, 515, 517, 0, 0,
	519, 520, 521, 523, 524, 525, 526, 529, 530, 531,
	532, 533, 0, 534, 536, 538, 616, 593, 594, 595,
	596, 597, 599, 600, 601, 602, 539, 540, 556, 407,
	401, 357, 399, 400, 404, 405, 408, 0, 732, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 739,
	949, 299, 886, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 744, 0,
	750, 0, 756, 0, 518, 0, 746, 747, 752, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 748,
	745, 749, 755, 743, 753, 740, 751, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 737,
	742, 0, 758, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 736, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 738,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 729, 741, 0, 0, 730,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 754, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 731, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 757, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 732, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 250, 739, 0, 299, 884, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 0,
	0, 307, 0, 744, 0, 750, 0, 756, 0, 518,
	0, 746, 747, 752, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 748, 745, 749, 755, 743, 753,
	740, 751, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 737, 742, 0, 758, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 736, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 738, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	729, 741, 0, 0, 730, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 754, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 731, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 757,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 732, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 739,
	0, 299, 881, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 744, 0,
	750, 0, 756, 0, 518, 0, 746, 747, 752, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 748,
	745, 749, 755, 743, 753, 740, 751, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 737,
	742, 0, 758, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 736, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 738,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 729, 741, 0, 0, 730,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	879, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 754, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 731, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 757, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 732, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 250, 739, 0, 299, 336, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 0,
	0, 307, 0, 744, 0, 750, 0, 756, 0, 518,
	0, 746, 747, 752, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 748, 745, 749, 755, 743, 753,
	740, 751, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 737, 742, 0, 758, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 736, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 738, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	729, 741, 0, 0, 730, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 725, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 754, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 731, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 757,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 732, 0,
	0, 908, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 739,
	0, 299, 336, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 1355, 0, 307, 0, 744, 0,
	750, 0, 756, 0, 518, 0, 746, 747, 752, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 748,
	745, 749, 755, 743, 753, 740, 751, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 737,
	742, 0, 758, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 736, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 738,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 741, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 754, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 757, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 250, 0, 0, 299, 336, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 0,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 518,
	0, 0, 0, 0, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 0,
	2098, 299, 336, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 0,
	0, 0, 0, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 0, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 0,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 0, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 0, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 732, 0, 0, 908, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 250, 739, 3773, 299, 336, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 0,
	0, 307, 0, 744, 0, 750, 0, 756, 0, 518,
	0, 746, 747, 752, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 748, 745, 749, 755, 743, 753,
	740, 751, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 737, 742, 0, 758, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 736, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 738, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 741, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 754, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 757,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 0,
	0, 299, 336, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 0,
	0, 0, 0, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 0, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 0,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 0, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 0, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 250, 0, 3151, 299, 336, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 0,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 518,
	0, 0, 0, 0, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 794, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 739,
	1076, 299, 336, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 744, 0,
	750, 0, 756, 0, 518, 0, 746, 747, 752, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 748,
	745, 749, 755, 743, 753, 740, 751, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 737,
	742, 0, 758, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 736, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 738,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 741, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 754, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 757, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 732, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 250, 739, 0, 299, 336, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 0,
	0, 307, 0, 744, 0, 750, 0, 756, 0, 518,
	0, 746, 747, 752, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 748, 745, 749, 755, 743, 753,
	740, 751, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 737, 742, 0, 758, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 736, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 738, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 741, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 754, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 757,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 0,
	0, 299, 2212, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 0,
	0, 2216, 0, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 0, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 0,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 2222, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 2221, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 0, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 2220, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 0, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 2219, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 220, 0, 0, 0, 2218, 2213, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 250, 0, 0, 299, 336, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 0,
	0, 307, 0, 0, 0, 2700, 0, 0, 0, 518,
	0, 0, 0, 0, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 2216, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 2222,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 2221, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	2220, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	2219, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 2218, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 0,
	0, 299, 336, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 0,
	0, 2216, 0, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 0, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 0,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 2222, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 2221, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 0, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 2220, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 0, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 2219, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 867, 0, 0, 0, 2218, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 250, 739, 0, 299, 336, 0, 0,
	0, 396, 0, 449, 453, 0, 0, 0, 0, 0,
	0, 307, 0, 744, 2742, 750, 0, 756, 0, 518,
	0, 746, 747, 752, 238, 866, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 748, 745, 749, 755, 743, 753,
	740, 751, 0, 440, 374, 0, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 737, 742, 0, 758, 0, 276,
	277, 398, 258, 406, 0, 0, 461, 419, 417, 0,
	384, 441, 0, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 323, 0, 0, 535, 869, 859,
	851, 852, 853, 854, 855, 856, 0, 871, 872, 873,
	874, 875, 528, 865, 0, 850, 857, 858, 860, 2745,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 736, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 0, 738, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 741, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 0, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 0, 0, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 0, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 0, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 0, 0, 392, 394, 395, 0,
	2743, 0, 754, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 0, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	0, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 2748, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 0, 496, 497, 0, 499, 500, 757,
	502, 503, 504, 505, 506, 0, 625, 507, 0, 508,
	0, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 539, 540, 2744,
	407, 401, 357, 399, 400, 404, 405, 408, 2189, 233,
	0, 250, 0, 0, 299, 336, 551, 0, 0, 396,
	0, 449, 453, 0, 542, 0, 0, 0, 0, 307,
	0, 2736, 0, 0, 0, 0, 0, 518, 0, 0,
	0, 0, 238, 626, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 650, 2192, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 374, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 2196,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 2193, 500, 0, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 250, 0, 0, 299,
	336, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 650, 2192,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 0, 0, 0,
	0, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 0, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 0, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 2196, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 0, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 584, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	2193, 500, 0, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2900, 233,
	0, 250, 0, 0, 299, 336, 551, 0, 0, 396,
	0, 449, 453, 0, 542, 0, 0, 0, 0, 307,
	0, 0, 0, 0, 0, 0, 0, 518, 0, 0,
	0, 0, 238, 626, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 374, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	2901, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2891, 233, 0, 250, 0, 0, 299,
	336, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 2892, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 0, 0, 0,
	0, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 0, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 0, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 0, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 584, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 0, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 779, 233,
	0, 250, 0, 0, 299, 778, 551, 0, 0, 396,
	0, 449, 453, 0, 542, 0, 0, 0, 0, 307,
	0, 0, 0, 0, 0, 0, 0, 518, 0, 0,
	0, 0, 238, 626, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 650, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 374, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 250, 0, 0, 299,
	336, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 650, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 0, 0, 0,
	0, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 0, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 0, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 0, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 584, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 0, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 250, 0, 0, 299, 336, 551, 0, 0, 396,
	0, 449, 453, 0, 542, 0, 0, 4233, 0, 307,
	0, 0, 0, 0, 0, 0, 0, 518, 0, 0,
	0, 0, 238, 626, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 374, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 3274, 250, 0, 0, 299,
	336, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 0, 0, 0,
	0, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 0, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 0, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 0, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 584, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 0, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 250, 0, 0, 299, 336, 551, 0, 0, 396,
	0, 449, 453, 0, 542, 0, 0, 3919, 0, 307,
	0, 0, 0, 0, 0, 0, 0, 518, 0, 0,
	0, 0, 238, 626, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 374, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 250, 0, 0, 299,
	336, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 0, 0, 0,
	0, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 0, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 0, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 3903, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 0, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 584, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 0, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	3286, 250, 0, 0, 299, 336, 551, 0, 0, 396,
	0, 449, 453, 0, 542, 0, 0, 0, 0, 307,
	0, 0, 0, 0, 0, 0, 0, 518, 0, 0,
	0, 0, 238, 626, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 374, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 250, 0, 0, 299,
	336, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 3507, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 0, 0, 0,
	0, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 0, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 0, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 0, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 584, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 0, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 220, 0, 0, 0, 0, 0, 0, 0, 995,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 250, 0, 0, 299, 336, 551, 0, 0, 396,
	0, 449, 453, 0, 542, 0, 0, 0, 0, 307,
	0, 0, 0, 0, 0, 0, 0, 518, 0, 0,
	0, 0, 238, 626, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 374, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 250, 0, 0, 299,
	336, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	2456, 0, 0, 0, 403, 0, 0, 0, 0, 2459,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 0, 0, 0,
	0, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 0, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 0, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 2457, 0, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 0, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 584, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 0, 2455, 503, 2454, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 2458, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 250, 0, 0, 299, 1226, 551, 0, 0, 396,
	0, 449, 453, 0, 542, 0, 0, 0, 0, 307,
	0, 0, 0, 0, 0, 0, 0, 518, 0, 0,
	0, 0, 238, 626, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 650, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 374, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1224, 233, 0, 250, 0, 0, 299,
	1223, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 0, 0, 0,
	0, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 0, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 0, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 0, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 584, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 0, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 250, 0, 0, 299, 336, 551, 0, 0, 396,
	0, 449, 453, 0, 542, 0, 0, 0, 0, 307,
	0, 0, 0, 0, 0, 0, 0, 518, 0, 0,
	0, 0, 238, 213, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 374, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 899, 242, 243, 244,
	247, 248, 249, 251, 214, 252, 898, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 216, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 217, 457, 458, 459, 460, 584, 462,
	463, 215, 465, 466, 468, 469, 470, 471, 472, 473,
	896, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 209, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 218, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 782, 233, 0, 250, 0, 0, 299,
	781, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 0, 0, 0,
	0, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 0, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 0, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 0, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 584, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 0, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 610, 233,
	0, 250, 0, 0, 299, 336, 551, 0, 0, 396,
	0, 449, 453, 0, 542, 0, 0, 0, 0, 307,
	0, 0, 0, 0, 0, 0, 0, 518, 0, 0,
	0, 0, 238, 606, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 374, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	608, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 607, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 250, 0, 0, 299,
	336, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 0, 0, 0,
	0, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 5080, 441, 598, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 0, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 0, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 0, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 584, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 0, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 250, 0, 0, 299, 336, 551, 0, 0, 396,
	0, 449, 453, 0, 542, 0, 0, 0, 0, 307,
	0, 0, 0, 0, 0, 0, 0, 518, 0, 0,
	0, 0, 238, 626, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 374, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 250, 0, 0, 299,
	336, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 213, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 0, 0, 0,
	0, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 0, 242, 243, 244, 247, 248, 249, 251, 214,
	252, 253, 254, 255, 256, 257, 548, 0, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 216,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 0, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 217, 457,
	458, 459, 460, 584, 462, 463, 215, 465, 466, 468,
	469, 470, 471, 472, 473, 3342, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 0, 502, 503, 504, 505, 506, 0, 3343,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	218, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 250, 0, 0, 299, 336, 551, 0, 0, 396,
	0, 449, 453, 0, 542, 0, 0, 0, 0, 307,
	0, 0, 0, 0, 0, 0, 0, 518, 0, 0,
	0, 0, 238, 213, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 374, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 214, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 216, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 217, 457, 458, 459, 460, 584, 462,
	463, 215, 465, 466, 468, 469, 470, 471, 472, 473,
	896, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 209, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 218, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 250, 0, 0, 299,
	2961, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 0, 0, 0,
	0, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 0, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 0, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 0, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 584, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 0, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 250, 0, 0, 299, 2879, 551, 0, 0, 396,
	0, 449, 453, 0, 542, 0, 0, 0, 0, 307,
	0, 0, 0, 0, 0, 0, 0, 518, 0, 0,
	0, 0, 238, 626, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 374, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 250, 0, 0, 299,
	2877, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 0, 0, 0,
	0, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 0, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 0, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 0, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 584, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 0, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 250, 0, 0, 299, 2863, 551, 0, 0, 396,
	0, 449, 453, 0, 542, 0, 0, 0, 0, 307,
	0, 0, 0, 0, 0, 0, 0, 518, 0, 0,
	0, 0, 238, 626, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 374, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 250, 0, 0, 299,
	2180, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 0, 0, 0,
	0, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 0, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 0, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 0, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 584, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 0, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 250, 0, 0, 299, 2121, 551, 0, 0, 396,
	0, 449, 453, 0, 542, 0, 0, 0, 0, 307,
	0, 0, 0, 0, 0, 0, 0, 518, 0, 0,
	0, 0, 238, 626, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 374, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 250, 0, 0, 299,
	336, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 0, 0, 0,
	0, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 0, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 0, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 0, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 584, 462, 1389, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 0, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 250, 0, 0, 299, 1339, 551, 0, 0, 396,
	0, 449, 453, 0, 542, 0, 0, 0, 0, 307,
	0, 0, 0, 0, 0, 0, 0, 518, 0, 0,
	0, 0, 238, 626, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 374, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 250, 0, 0, 299,
	1146, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 0, 0, 0,
	0, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 0, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 0, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 0, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 584, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 0, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 250, 0, 0, 299, 1107, 551, 0, 0, 396,
	0, 449, 453, 0, 542, 0, 0, 0, 0, 307,
	0, 0, 0, 0, 0, 0, 0, 518, 0, 0,
	0, 0, 238, 626, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 374, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 250, 0, 0, 299,
	1103, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 0, 0, 0,
	0, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 0, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 0, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 0, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 584, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 0, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	1096, 250, 0, 0, 299, 336, 551, 0, 0, 396,
	0, 449, 453, 0, 542, 0, 0, 0, 0, 307,
	0, 0, 0, 0, 0, 0, 0, 518, 0, 0,
	0, 0, 238, 626, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 374, 591, 467, 245, 291, 278, 320, 362,
	0, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 250, 0, 0, 299,
	839, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 0, 0, 0,
	0, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 0, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 0, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 0, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 584, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 0, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 250, 0, 0, 299, 835, 551, 0, 0, 396,
	0, 449, 453, 0, 542, 0, 0, 0, 0, 307,
	0, 0, 0, 0, 0, 0, 0, 518, 0, 0,
	0, 0, 238, 626, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 374, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 250, 0, 0, 299,
	832, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 0, 0, 0,
	0, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 0, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 0, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 0, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 584, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 0, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 250, 0, 0, 299, 828, 551, 0, 0, 396,
	0, 449, 453, 0, 542, 0, 0, 0, 0, 307,
	0, 0, 0, 0, 0, 0, 0, 518, 0, 0,
	0, 0, 238, 626, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 374, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 250, 0, 0, 299,
	809, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 0, 0, 0,
	0, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 0, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 0, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 0, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 584, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 0, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 250, 0, 0, 299, 786, 551, 0, 0, 396,
	0, 449, 453, 0, 542, 0, 0, 0, 0, 307,
	0, 0, 0, 0, 0, 0, 0, 518, 0, 0,
	0, 0, 238, 626, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 374, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 250, 0, 0, 299,
	784, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 0, 0, 0,
	0, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 0, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 0, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 0, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 584, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 0, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 250, 0, 0, 299, 765, 551, 0, 0, 396,
	0, 449, 453, 0, 542, 0, 0, 0, 0, 307,
	0, 0, 0, 0, 0, 0, 0, 518, 0, 0,
	0, 0, 238, 626, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 374, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 250, 0, 0, 299,
	724, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 0, 0, 0,
	0, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 0, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 0, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 0, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 584, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 0, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 250, 0, 0, 299, 720, 551, 0, 0, 396,
	0, 449, 453, 0, 542, 0, 0, 0, 0, 307,
	0, 0, 0, 0, 0, 0, 0, 518, 0, 0,
	0, 0, 238, 626, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 374, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 250, 0, 0, 299,
	718, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 0, 0, 0,
	0, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 0, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 0, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 0, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 584, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 0, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 250, 0, 0, 299, 693, 551, 0, 0, 396,
	0, 449, 453, 0, 542, 0, 0, 0, 0, 307,
	0, 0, 0, 0, 0, 0, 0, 518, 0, 0,
	0, 0, 238, 626, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 374, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 250, 0, 0, 299,
	336, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 653, 374, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 0, 0, 0,
	0, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 0, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 0, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 0, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 584, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 0, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 250, 0, 0, 299, 336, 551, 0, 0, 396,
	0, 449, 453, 0, 542, 0, 0, 0, 0, 307,
	0, 0, 0, 0, 0, 0, 0, 518, 0, 0,
	0, 0, 238, 626, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 374, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	627, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 250, 0, 0, 299,
	336, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 213, 541,
	207, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 0, 0, 0,
	0, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 0, 242, 243, 244, 247, 248, 249, 251, 214,
	252, 253, 254, 255, 256, 257, 548, 0, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 216,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 0, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 217, 457,
	458, 459, 460, 584, 462, 463, 215, 465, 466, 468,
	469, 470, 471, 472, 473, 208, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 0, 502, 503, 504, 505, 506, 0, 209,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	218, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 250, 0, 0, 299, 336, 551, 0, 0, 396,
	0, 449, 453, 0, 542, 0, 0, 0, 0, 307,
	0, 0, 0, 0, 0, 0, 0, 518, 0, 0,
	0, 0, 238, 626, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 374, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 0, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 0, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 0, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 0, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 867, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 250, 739, 0, 299,
	336, 0, 0, 0, 396, 0, 449, 453, 0, 0,
	0, 0, 0, 0, 307, 0, 744, 2742, 750, 0,
	756, 0, 518, 0, 746, 747, 752, 238, 866, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 748, 745, 749,
	755, 743, 753, 740, 751, 0, 440, 374, 0, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 737, 742, 0,
	758, 0, 276, 277, 398, 258, 406, 0, 0, 461,
	419, 417, 0, 384, 441, 0, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 323, 0, 0,
	535, 869, 859, 851, 852, 853, 854, 855, 856, 0,
	871, 872, 873, 874, 875, 528, 865, 0, 850, 857,
	858, 860, 2745, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 736, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 0, 738, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 741, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	0, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 0, 0, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 0, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 0, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 0, 0, 392,
	394, 395, 0, 2743, 0, 754, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 0, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 0, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 2748, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 0, 496, 497, 0,
	499, 500, 757, 502, 503, 504, 505, 506, 0, 625,
	507, 0, 508, 0, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 0, 0, 867, 0, 0, 0, 0, 0, 0,
	539, 540, 2744, 407, 401, 357, 399, 400, 404, 405,
	408, 233, 0, 250, 739, 0, 299, 336, 0, 0,
	0, 396, 0, 449, 453, 0, 0, 0, 0, 0,
	0, 307, 0, 744, 0, 750, 3319, 756, 0, 518,
	0, 746, 747, 752, 238, 866, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 3318, 0, 0, 246,
	0, 0, 0, 0, 748, 745, 749, 755, 743, 753,
	740, 751, 0, 440, 374, 0, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 737, 742, 0, 758, 0, 276,
	277, 398, 258, 406, 0, 0, 461, 419, 417, 0,
	384, 441, 0, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 323, 0, 0, 535, 869, 859,
	851, 852, 853, 854, 855, 856, 0, 871, 872, 873,
	874, 875, 528, 865, 0, 850, 857, 858, 860, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 736, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 0, 738, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 741, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 0, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 0, 0, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 0, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 0, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 0, 0, 392, 394, 395, 0,
	0, 0, 754, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 0, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	0, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 2748, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 0, 496, 497, 0, 499, 500, 757,
	502, 503, 504, 505, 506, 0, 625, 507, 0, 508,
	0, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 0, 0,
	867, 0, 0, 0, 0, 0, 0, 539, 540, 0,
	407, 401, 357, 399, 400, 404, 405, 408, 233, 0,
	250, 739, 0, 299, 336, 0, 0, 0, 396, 0,
	449, 453, 0, 0, 0, 0, 0, 0, 307, 0,
	744, 0, 750, 0, 756, 0, 518, 0, 746, 747,
	752, 238, 866, 541, 612, 0, 0, 0, 403, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 748, 745, 749, 755, 743, 753, 740, 751, 0,
	440, 374, 0, 467, 245, 291, 278, 320, 362, 474,
	0, 0, 352, 522, 287, 376, 0, 266, 409, 0,
	498, 373, 0, 481, 501, 0, 393, 272, 432, 488,
	489, 737, 742, 0, 758, 0, 276, 277, 398, 258,
	406, 0, 0, 461, 419, 417, 5114, 384, 441, 0,
	0, 0, 306, 0, 301, 397, 537, 264, 516, 435,
	402, 356, 464, 493, 303, 288, 289, 332, 434, 322,
	274, 527, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 323, 0, 0, 535, 869, 859, 851, 852, 853,
	854, 855, 856, 0, 871, 872, 873, 874, 875, 528,
	865, 0, 850, 857, 858, 860, 0, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 234, 0, 235,
	236, 237, 239, 240, 241, 736, 242, 243, 244, 247,
	248, 249, 251, 611, 252, 253, 254, 255, 256, 257,
	0, 738, 259, 260, 261, 262, 263, 265, 267, 268,
	269, 270, 271, 273, 275, 0, 0, 0, 741, 0,
	0, 0, 279, 280, 281, 282, 283, 284, 0, 285,
	286, 290, 292, 293, 294, 295, 296, 297, 300, 0,
	302, 304, 0, 305, 308, 0, 309, 310, 311, 312,
	313, 314, 315, 316, 0, 317, 0, 318, 319, 321,
	0, 324, 325, 326, 327, 328, 0, 329, 0, 0,
	330, 331, 333, 334, 335, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 0, 349, 350,
	351, 353, 0, 354, 355, 358, 359, 360, 361, 0,
	363, 0, 0, 364, 365, 366, 0, 0, 367, 368,
	369, 370, 371, 372, 375, 0, 377, 378, 379, 380,
	381, 382, 383, 613, 385, 386, 387, 388, 389, 390,
	391, 0, 0, 392, 394, 395, 0, 0, 0, 754,
	410, 411, 412, 413, 414, 415, 416, 418, 0, 420,
	421, 422, 0, 423, 424, 425, 426, 0, 427, 428,
	429, 430, 431, 433, 436, 437, 438, 439, 0, 442,
	443, 444, 445, 446, 447, 448, 450, 451, 452, 454,
	455, 456, 614, 457, 458, 459, 460, 0, 462, 463,
	615, 465, 466, 468, 469, 470, 471, 472, 473, 624,
	0, 475, 0, 476, 477, 478, 479, 480, 0, 482,
	483, 484, 485, 486, 487, 490, 491, 492, 494, 495,
	0, 496, 497, 0, 499, 500, 757, 502, 503, 504,
	505, 506, 0, 625, 507, 0, 508, 0, 509, 510,
	511, 512, 513, 514, 515, 517, 0, 0, 519, 520,
	521, 523, 524, 525, 526, 529, 530, 531, 532, 533,
	0, 534, 536, 538, 616, 0, 0, 867, 0, 0,
	0, 0, 0, 0, 539, 540, 0, 407, 401, 357,
	399, 400, 404, 405, 408, 233, 0, 250, 739, 0,
	299, 336, 0, 0, 0, 396, 0, 449, 453, 0,
	0, 0, 0, 0, 0, 307, 0, 744, 0, 750,
	0, 756, 0, 518, 0, 746, 747, 752, 238, 866,
	541, 612, 0, 0, 0, 403, 0, 0, 0, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 748, 745,
	749, 755, 743, 753, 740, 751, 0, 440, 374, 0,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 0, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 737, 742,
	0, 758, 0, 276, 277, 398, 258, 406, 0, 0,
	461, 419, 417, 4782, 384, 441, 0, 0, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 323, 0,
	0, 535, 869, 859, 851, 852, 853, 854, 855, 856,
	0, 871, 872, 873, 874, 875, 528, 865, 0, 850,
	857, 858, 860, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 736, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 0, 738, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 0, 0, 0, 741, 0, 0, 0, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 0, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 0, 0, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 0, 0,
	364, 365, 366, 0, 0, 367, 368, 369, 370, 371,
	372, 375, 0, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 0, 0,
	392, 394, 395, 0, 0, 0, 754, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 0,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 0, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 0, 475, 0,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 0, 496, 497,
	0, 499, 500, 757, 502, 503, 504, 505, 506, 0,
	625, 507, 0, 508, 0, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 0, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 0, 0, 867, 0, 0, 0, 0, 0,
	0, 539, 540, 0, 407, 401, 357, 399, 400, 404,
	405, 408, 233, 0, 250, 739, 0, 299, 336, 0,
	0, 0, 396, 0, 449, 453, 0, 0, 0, 0,
	0, 0, 307, 0, 744, 0, 750, 0, 756, 0,
	518, 0, 746, 747, 752, 238, 866, 541, 612, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 748, 745, 749, 755, 743,
	753, 740, 751, 0, 440, 374, 0, 467, 245, 291,
	278, 320, 362, 474, 0, 0, 352, 522, 287, 376,
	0, 266, 409, 0, 498, 373, 0, 481, 501, 0,
	393, 272, 432, 488, 489, 737, 742, 0, 758, 0,
	276, 277, 398, 258, 406, 0, 0, 461, 419, 417,
	0, 384, 441, 0, 0, 0, 306, 0, 301, 397,
	537, 264, 516, 435, 402, 356, 464, 493, 303, 288,
	289, 332, 434, 322, 274, 527, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 323, 0, 0, 535, 869,
	859, 851, 852, 853, 854, 855, 856, 0, 871, 872,
	873, 874, 875, 528, 865, 0, 850, 857, 858, 860,
	0, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 234, 0, 235, 236, 237, 239, 240, 241, 736,
	242, 243, 244, 247, 248, 249, 251, 611, 252, 253,
	254, 255, 256, 257, 0, 738, 259, 260, 261, 262,
	263, 265, 267, 268, 269, 270, 271, 273, 275, 0,
	0, 0, 741, 0, 0, 0, 279, 280, 281, 282,
	283, 284, 0, 285, 286, 290, 292, 293, 294, 295,
	296, 297, 300, 0, 302, 304, 0, 305, 308, 0,
	309, 310, 311, 312, 313, 314, 315, 316, 0, 317,
	0, 318, 319, 321, 0, 324, 325, 326, 327, 328,
	0, 329, 0, 0, 330, 331, 333, 334, 335, 337,
	338, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 0, 349, 350, 351, 353, 0, 354, 355, 358,
	359, 360, 361, 0, 363, 0, 0, 364, 365, 366,
	0, 0, 367, 368, 369, 370, 371, 372, 375, 0,
	377, 378, 379, 380, 381, 382, 383, 613, 385, 386,
	387, 388, 389, 390, 391, 4547, 0, 392, 394, 395,
	0, 0, 0, 754, 410, 411, 412, 413, 414, 415,
	416, 418, 0, 420, 421, 422, 0, 423, 424, 425,
	426, 0, 427, 428, 429, 430, 431, 433, 436, 437,
	438, 439, 0, 442, 443, 444, 445, 446, 447, 448,
	450, 451, 452, 454, 455, 456, 614, 457, 458, 459,
	460, 0, 462, 463, 615, 465, 466, 468, 469, 470,
	471, 472, 473, 624, 0, 475, 0, 476, 477, 478,
	479, 480, 0, 482, 483, 484, 485, 486, 487, 490,
	491, 492, 494, 495, 0, 496, 497, 0, 499, 500,
	757, 502, 503, 504, 505, 506, 0, 625, 507, 0,
	508, 0, 509, 510, 511, 512, 513, 514, 515, 517,
	0, 0, 519, 520, 521, 523, 524, 525, 526, 529,
	530, 531, 532, 533, 0, 534, 536, 538, 616, 0,
	0, 867, 0, 0, 0, 0, 0, 0, 539, 540,
	0, 407, 401, 357, 399, 400, 404, 405, 408, 233,
	0, 250, 739, 0, 299, 336, 0, 0, 0, 396,
	0, 449, 453, 0, 0, 0, 0, 0, 0, 307,
	0, 744, 0, 750, 0, 756, 0, 518, 0, 746,
	747, 752, 238, 866, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 748, 745, 749, 755, 743, 753, 740, 751,
	0, 440, 374, 0, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 737, 742, 0, 758, 0, 276, 277, 398,
	258, 406, 0, 0, 461, 419, 417, 0, 384, 441,
	0, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 323, 0, 0, 535, 869, 859, 851, 852,
	853, 854, 855, 856, 0, 871, 872, 873, 874, 875,
	528, 865, 0, 850, 857, 858, 860, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 736, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 0, 738, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 741,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 0, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 0,
	0, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 0, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 0, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 0, 0, 392, 394, 395, 0, 0, 0,
	754, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 0, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 0, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 2748, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 0, 496, 497, 0, 499, 500, 757, 502, 503,
	504, 505, 506, 0, 625, 507, 0, 508, 0, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 0, 0, 867, 0,
	0, 0, 0, 0, 0, 539, 540, 0, 407, 401,
	357, 399, 400, 404, 405, 408, 233, 0, 250, 739,
	0, 299, 336, 0, 0, 0, 396, 0, 449, 453,
	0, 0, 0, 0, 0, 0, 307, 0, 744, 0,
	750, 0, 756, 0, 518, 0, 746, 747, 752, 238,
	866, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 748,
	745, 749, 755, 743, 753, 740, 751, 0, 440, 374,
	0, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 737,
	742, 0, 758, 0, 276, 277, 398, 258, 406, 0,
	0, 461, 419, 417, 0, 384, 441, 0, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 323,
	0, 0, 535, 869, 859, 851, 852, 853, 854, 855,
	856, 0, 871, 872, 873, 874, 875, 528, 865, 0,
	850, 857, 858, 860, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 736, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 0, 738,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 741, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 0, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 0, 0, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 0,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 0, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 4021,
	0, 392, 394, 395, 0, 0, 0, 754, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	0, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 0, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 0, 475,
	0, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 0, 496,
	497, 0, 499, 500, 757, 502, 503, 504, 505, 506,
	0, 625, 507, 0, 508, 0, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 0, 0, 867, 0, 0, 0, 0,
	0, 0, 539, 540, 0, 407, 401, 357, 399, 400,
	404, 405, 408, 233, 0, 250, 739, 0, 299, 336,
	0, 0, 0, 396, 0, 449, 453, 0, 0, 0,
	0, 0, 0, 307, 0, 744, 0, 750, 0, 756,
	0, 518, 0, 746, 747, 752, 238, 866, 541, 612,
	0, 0, 0, 403, 0, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 748, 745, 749, 755,
	743, 753, 740, 751, 0, 440, 374, 0, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 0, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 737, 742, 0, 758,
	0, 276, 277, 398, 258, 406, 0, 0, 461, 419,
	417, 0, 384, 441, 0, 0, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 0, 0, 535,
	869, 859, 851, 852, 853, 854, 855, 856, 0, 871,
	872, 873, 874, 875, 528, 865, 0, 850, 857, 858,
	860, 0, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	736, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 0, 738, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	0, 0, 0, 741, 0, 0, 0, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 0,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 0, 0, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 0, 0, 364, 365,
	366, 0, 0, 367, 368, 369, 370, 371, 372, 375,
	0, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 0, 0, 392, 394,
	395, 0, 0, 0, 754, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 0, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 0, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 0, 475, 0, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 0, 496, 497, 0, 499,
	500, 757, 502, 503, 504, 505, 506, 0, 625, 507,
	0, 508, 0, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 0, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	0, 0, 867, 0, 0, 0, 0, 0, 0, 539,
	540, 0, 407, 401, 357, 399, 400, 404, 405, 408,
	233, 0, 250, 739, 0, 299, 877, 0, 0, 0,
	396, 0, 449, 453, 0, 0, 0, 0, 0, 0,
	307, 0, 744, 0, 750, 0, 756, 0, 518, 0,
	746, 747, 752, 238, 866, 541, 612, 0, 0, 0,
	403, 0, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 748, 745, 749, 755, 743, 753, 740,
	751, 0, 440, 374, 0, 467, 245, 291, 278, 320,
	362, 474, 0, 0, 352, 522, 287, 376, 0, 266,
	409, 0, 498, 373, 0, 481, 501, 0, 393, 272,
	432, 488, 489, 737, 742, 0, 758, 0, 276, 277,
	398, 258, 406, 0, 0, 461, 419, 417, 0, 384,
	441, 0, 0, 0, 306, 0, 301, 397, 537, 264,
	516, 435, 402, 356, 464, 493, 303, 288, 289, 332,
	434, 322, 274, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 323, 0, 0, 535, 869, 859, 851,
	852, 853, 854, 855, 856, 0, 871, 872, 873, 874,
	875, 528, 865, 0, 850, 857, 858, 860, 0, 223,
	224, 225, 226, 227, 228, 229, 230, 231, 232, 234,
	0, 235, 236, 237, 239, 240, 241, 736, 242, 243,
	244, 247, 248, 249, 251, 611, 252, 253, 254, 255,
	256, 257, 0, 738, 259, 260, 261, 262, 263, 265,
	267, 268, 269, 270, 271, 273, 275, 0, 0, 0,
	741, 0, 0, 0, 279, 280, 281, 282, 283, 284,
	0, 285, 286, 290, 292, 293, 294, 295, 296, 297,
	300, 0, 302, 304, 0, 305, 308, 0, 309, 310,
	311, 312, 313, 314, 315, 316, 0, 317, 0, 318,
	319, 321, 0, 324, 325, 326, 327, 328, 0, 329,
	0, 0, 330, 331, 333, 334, 335, 337, 338, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 0,
	349, 350, 351, 353, 0, 354, 355, 358, 359, 360,
	361, 0, 363, 0, 0, 364, 365, 366, 0, 0,
	367, 368, 369, 370, 371, 372, 375, 0, 377, 378,
	379, 380, 381, 382, 383, 613, 385, 386, 387, 388,
	389, 390, 391, 0, 0, 392, 394, 395, 0, 0,
	0, 754, 410, 411, 412, 413, 414, 415, 416, 418,
	0, 420, 421, 422, 0, 423, 424, 425, 426, 0,
	427, 428, 429, 430, 431, 433, 436, 437, 438, 439,
	0, 442, 443, 444, 445, 446, 447, 448, 450, 451,
	452, 454, 455, 456, 614, 457, 458, 459, 460, 0,
	462, 463, 615, 465, 466, 468, 469, 470, 471, 472,
	473, 624, 0, 475, 0, 476, 477, 478, 479, 480,
	0, 482, 483, 484, 485, 486, 487, 490, 491, 492,
	494, 495, 0, 496, 497, 0, 499, 500, 757, 502,
	503, 504, 505, 506, 0, 625, 507, 0, 508, 0,
	509, 510, 511, 512, 513, 514, 515, 517, 0, 0,
	519, 520, 521, 523, 524, 525, 526, 529, 530, 531,
	532, 533, 0, 534, 536, 538, 616, 0, 0, 867,
	0, 0, 0, 0, 0, 0, 539, 540, 0, 407,
	401, 357, 399, 400, 404, 405, 408, 233, 0, 250,
	739, 0, 299, 841, 0, 0, 0, 396, 0, 449,
	453, 0, 0, 0, 0, 0, 0, 307, 0, 744,
	0, 750, 0, 756, 0, 518, 0, 746, 747, 752,
	238, 866, 541, 612, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	748, 745, 749, 755, 743, 753, 740, 751, 0, 440,
	374, 0, 467, 245, 291, 278, 320, 362, 474, 0,
	0, 352, 522, 287, 376, 0, 266, 409, 0, 498,
	373, 0, 481, 501, 0, 393, 272, 432, 488, 489,
	737, 742, 0, 758, 0, 276, 277, 398, 258, 406,
	0, 0, 461, 419, 417, 0, 384, 441, 0, 0,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	323, 0, 0, 535, 869, 859, 851, 852, 853, 854,
	855, 856, 0, 871, 872, 873, 874, 875, 528, 865,
	0, 850, 857, 858, 860, 0, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 0, 235, 236,
	237, 239, 240, 241, 736, 242, 243, 244, 247, 248,
	249, 251, 611, 252, 253, 254, 255, 256, 257, 0,
	738, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 0, 0, 0, 741, 0, 0,
	0, 279, 280, 281, 282, 283, 284, 0, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 0, 302,
	304, 0, 305, 308, 0, 309, 310, 311, 312, 313,
	314, 315, 316, 0, 317, 0, 318, 319, 321, 0,
	324, 325, 326, 327, 328, 0, 329, 0, 0, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 0, 349, 350, 351,
	353, 0, 354, 355, 358, 359, 360, 361, 0, 363,
	0, 0, 364, 365, 366, 0, 0, 367, 368, 369,
	370, 371, 372, 375, 0, 377, 378, 379, 380, 381,
	382, 383, 613, 385, 386, 387, 388, 389, 390, 391,
	0, 0, 392, 394, 395, 0, 0, 0, 754, 410,
	411, 412, 413, 414, 415, 416, 418, 0, 420, 421,
	422, 0, 423, 424, 425, 426, 0, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 0, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 614, 457, 458, 459, 460, 0, 462, 463, 615,
	465, 466, 468, 469, 470, 471, 472, 473, 624, 0,
	475, 0, 476, 477, 478, 479, 480, 0, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 0,
	496, 497, 0, 499, 500, 757, 502, 503, 504, 505,
	506, 0, 625, 507, 0, 508, 0, 509, 510, 511,
	512, 513, 514, 515, 517, 0, 0, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 0,
	534, 536, 538, 616, 0, 0, 867, 0, 0, 0,
	0, 0, 0, 539, 540, 0, 407, 401, 357, 399,
	400, 404, 405, 408, 233, 0, 250, 739, 0, 299,
	336, 0, 0, 0, 396, 0, 449, 453, 0, 0,
	0, 0, 0, 0, 307, 0, 744, 0, 750, 0,
	756, 0, 518, 0, 746, 747, 752, 238, 0, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 748, 745, 749,
	755, 743, 753, 740, 751, 0, 440, 374, 0, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 737, 742, 0,
	758, 0, 276, 277, 398, 258, 406, 0, 0, 461,
	419, 417, 0, 384, 441, 0, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 323, 0, 0,
	535, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 0, 0, 0, 0, 528, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 736, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 0, 738, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 741, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	0, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 0, 0, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 0, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 0, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 0, 0, 392,
	394, 395, 0, 0, 0, 754, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 0, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 0, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 0, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 0, 496, 497, 0,
	499, 500, 757, 502, 503, 504, 505, 506, 0, 625,
	507, 0, 508, 0, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	539, 540, 0, 407, 401, 357, 399, 400, 404, 405,
	408, 1459, 0, 0, 1429, 0, 0, 0, 1441, 1442,
	1443, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2074, 0, 0, 2075, 0, 0, 0, 2080, 0, 2072,
	0, 0, 0, 0, 2077, 2081, 2076, 0, 2078, 0,
	0, 0, 2079, 1452, 1453, 2073, 1459, 0, 0, 1429,
	0, 0, 2082, 1441, 1442, 1443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2074, 0, 0, 2075, 0,
	0, 0, 2080, 0, 2072, 0, 0, 0, 0, 2077,
	2081, 2076, 0, 2078, 0, 0, 0, 2079, 1452, 1453,
	2073, 1459, 0, 0, 1429, 0, 0, 2082, 1441, 1442,
	1443, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2074, 0, 0, 2075, 0, 0, 0, 2080, 0, 2072,
	0, 0, 0, 0, 2077, 2081, 2076, 0, 2078, 0,
	0, 0, 2079, 1452, 1453, 2073, 1459, 0, 0, 1429,
	0, 0, 2082, 1441, 1442, 1443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2074, 0, 0, 2075, 0,
	0, 0, 2080, 0, 2072, 0, 0, 0, 0, 2077,
	2081, 2076, 0, 2078, 0, 0, 0, 2079, 1452, 1453,
	2073, 0, 0, 0, 0, 0, 0, 2082, 1176, 1206,
	0, 0, 0, 1177, 0, 0, 0, 1186, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1208, 0, 0, 1179,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1185, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1176, 1206, 0, 0, 0, 1177, 0, 1190,
	0, 1186, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1175, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1207,
	1208, 0, 0, 1179, 0, 0, 0, 0, 0, 1180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1185, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1182, 0, 0, 0, 0, 0,
	1181, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1190, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1209, 0, 158, 0, 1183, 0, 0, 144, 0,
	0, 0, 156, 0, 0, 0, 1175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 148, 0, 0, 0,
	0, 1210, 0, 1207, 1211, 3162, 1448, 0, 1212, 0,
	0, 0, 0, 1180, 170, 1438, 1439, 1440, 0, 0,
	1205, 0, 0, 0, 1432, 1433, 1434, 1435, 1436, 1437,
	1213, 1187, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1182, 0,
	0, 1448, 0, 0, 1181, 0, 0, 0, 0, 0,
	1438, 1439, 1440, 0, 2937, 2638, 1189, 1188, 1216, 1432,
	1433, 1434, 1435, 1436, 1437, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1214, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1209, 1448, 0, 0, 1183,
	0, 0, 1215, 0, 0, 1438, 1439, 1440, 0, 0,
	150, 0, 2523, 0, 1432, 1433, 1434, 1435, 1436, 1437,
	0, 0, 0, 0, 0, 1210, 0, 0, 1211, 0,
	0, 0, 1212, 0, 0, 0, 151, 0, 0, 1217,
	0, 1448, 0, 1178, 1205, 0, 0, 152, 0, 0,
	1438, 1439, 1440, 0, 1213, 1187, 0, 0, 153, 1432,
	1433, 1434, 1435, 1436, 1437, 0, 0, 0, 0, 0,
	0, 0, 154, 1192, 0, 0, 0, 0, 0, 168,
	0, 0, 0, 0, 0, 0, 0, 175, 1202, 0,
	1189, 1188, 1216, 0, 0, 149, 0, 155, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1214,
	0, 0, 0, 0, 0, 0, 0, 0, 145, 0,
	0, 0, 0, 0, 0, 0, 1215, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1217, 0, 0, 0, 1178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 159, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 160, 1192, 161, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 169, 0, 0,
	162, 0, 0, 166, 0, 163, 0, 0, 0, 0,
	146, 0, 0, 164, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 172,
	0, 0, 0, 0, 165, 0, 0, 0, 0, 0,
	171, 0, 0, 0, 0, 173, 0, 0, 0, 0,
	0, 167, 0, 0, 0, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 147,
}

var yyPact = [...]int32{
	6088, -1000, 217, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1194, 1194, -1000, -1000, 2898, 955, 6837, 88971, 10745, 2941,
	82172, 66517, 1194, 1289, 1267, 1257, 67527, 81667, 1287, -1000,
	1299, 918, 759, 3505, 59952, 213, 81162, 67527, 858, 6088,
	3592, -1000, -1000, 2075, 3116, 59952, 3201, 3115, 759, 67527,
	-1000, 1608, 2006, 1891, 3507, 80657, 67527, 42278, 67527, 2926,
	80152, 79647, 2468, 79142, 50879, 2940, 1279, 67527, 67527, 1804,
	78637, 67527, 67527, 964, 2300, 48353, 48353, -1000, -1000, 1330,
	1325, -1000, -1000, -1000, 59447, 66012, 78132, 77627, 1189, 2459,
	54414, 67527, 67527, 67527, 67527, 54414, 48353, 1909, 2241, 77122,
	54414, 67527, 54414, 67527, 67527, 67527, 67527, 67527, 1278, 47848,
	47343, 67527, 76617, 2921, 67527, 67527, -1000, 76112, 75607, 75102,
	87565, 87078, 3676, 50374, 49869, 49364, -1000, -1000, -1000, 1188,
	2454, -1000, -1000, -1000, 2920, 1801, 1275, -1000, 1902, -1000,
	-1000, -1000, -1000, -1000, -1000, 1187, -1000, 68537, 65507, 2032,
	-1000, -1000, 721, 3334, 3735, 3735, 3470, 52899, 1095, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3333, 1921, 2351, 264,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3592, 2075, 3592,
	3735, 3236, 3735, -1000, -1000, -1000, -1000, 67527, -1000, 3735,
	-1000, 2417, 3445, 3445, 3445, 3149, 1299, -1000, -1000, 536,
	533, 918, 21740, 21740, -1000, 3112, -1000, 230, -1000, 240,
	53909, 963, 212, 67527, -1000, 749, -1000, 212, 26882, -1000,
	-1000, 1887, -1000, 339, -1000, 1867, 1589, -1000, 2252, 67527,
	2862, 74597, 59952, 59952, 525, -1000, 543, 74092, 67527, 1186,
	73587, 3675, 54414, 54414, 67527, 1253, 54414, 2644, 1577, -1000,
	1762, 2348, -1000, 3582, 3682, 251, 849, 67527, 67527, -1000,
	260, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 829, 1554, 1003, 3581, 1473,
	3579, 2544, 73082, 1242, 3574, 2685, 1473, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1184,
	67527, 1630, 3111, 67527, 749, 3573, -1000, 2715, 2295, 86591,
	67527, 1473, 1473, -1000, -1000, -1000, -1000, 6750, 3666, 3418,
	7054, 3665, 3412, 88850, 3664, 11735, 3663, 65002, 64497, 2542,
	1550, 962, -1000, 240, -1000, -1000, -1000, 1549, 1548, 1545,
	1647, 1543, 962, 1538, 2547, 67527, 67527, 67527, 3110, 3662,
	1534, 1851, 1532, 1531, 1178, 2317, 3107, 3106, 67527, 1522,
	1476, 3411, 1520, 2643, 1476, 3411, 1780, 1806, 3661, 1553,
	1906, 2546, 3660, 351, -1000, 3659, 369, -1000, 3105, 3657,
	368, 3655, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 247,
	-1000, -1000, -1000, -1000, -1000, 889, 2402, 888, 888, 888,
	-1000, -1000, -1000, -1000, -1000, 298, 305, -1000, -1000, 2384,
	961, 2384, 2384, -1000, 2392, 2384, 368, 3654, 72577, 2682,
	79, 3651, -1000, 79, 3650, 79, 3649, -1000, 2529, -1000,
	1525, -1000, -1000, -1000, 3675, -1000, 2337, -1000, 3703, 51384,
	339, 3735, 2710, 39158, 38644, 67527, 394, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2274, -1000, 1848, -1000,
	-1000, -1000, -1000, -1000, -1000, 72072, -1000, -1000, -1000, 2432,
	2632, 2641, 1501, 3151, 2399, -1000, 26368, 2031, 30994, 2707,
	918, -1000, -1000, 918, 918, 26882, -1000, 2417, -1000, -1000,
	3114, 108, -1000, 16561, -1000, -1000, 26882, 26882, 26882, 26882,
	26882, 1670, 3529, -1000, -1000, -1000, -1000, 20711, -1000, -1000,
	240, 863, 524, -1000, -1000, 960, -1000, 729, 958, 240,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1051, 3735,
	860, 26882, 1150, 2159, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 956, 954, 2637, -1000, 953, 952, 951, 950,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 947, 946, 945,
	944, 938, 936, 934, 933, 931, 930, 929, 928, 926,
	924, 922, 921, 920, 919, 913, 912, 910, 751, 907,
	899, 898, 896, 895, 892, 891, -1000, 2384, -1000, 2384,
	2384, 888, 888, 889, -1000, -1000, 2392, 2384, 888, -1000,
	-1000, 305, 298, -1000, -1000, -1000, -1000, -1000, 455, 885,
	-1000, 240, -1000, 16042, 26882, -1000, 67527, 26882, 67527, 212,
	3706, 67527, 205, 88685, -1000, 2323, 2075, -1000, 1438, -1000,
	-1000, -1000, 1163, 3705, 51889, -1000, 67527, 2981, 2980, 3320,
	3180, 67527, 680, 3567, 543, 67527, 3737, 3565, 71567, -1000,
	881, 881, 2230, 67527, 879, 86591, 1884, 1574, -1000, 48353,
	3673, 3647, 86591, -1000, 241, 17608, -1000, 17608, 3459, 2979,
	40691, -1000, 532, 67527, 67527, 67527, 67527, -1000, 67527, 3646,
	-1000, -1000, -1000, 3644, 67527, 657, 3563, 1203, 3735, 3642,
	46333, 3562, -1000, 71062, 3094, 1823, 48353, 67527, 1246, 3092,
	3641, -1000, 57427, 849, 3735, 3704, 2634, -1000, -1000, 122,
	-1000, 1493, -1000, 1662, 1660, 55424, 1431, 1421, 2725, 607,
	3090, 1925, 1317, 67527, 2118, 67527, 2706, 3319, 601, 2041,
	1458, -1000, 868, 59952, 1356, 122, -1000, 3317, 1650, 67527,
	1349, 122, 3316, 3737, -1000, 2291, 86591, 798, -1000, 3148,
	-1000, 798, 798, 3147, 1777, 1473, 1473, -1000, 67527, 122,
	1503, 67527, 10427, 3638, 3405, 9468, 3637, 67527, 3314, -1000,
	519, 240, 3313, 3312, 3311, 2774, -1000, 2809, 3483, 1515,
	2724, 3310, -1000, 3308, 2775, -1000, -1000, 1514, 2974, 2973,
	67527, 67527, 3307, 3306, 46838, 57932, 57932, 3305, 3304, 3303,
	1085, -1000, 3428, 3302, 673, 3735, 1592, 1584, 1583, -1000,
	-1000, 849, 67527, 67527, 1644, 3301, -1000, 1791, 2268, 1791,
	3297, 46333, -1000, 1791, 1791, 3293, 601, 601, 3292, 1380,
	67527, 67527, 67527, 67527, 67527, 2508, 2464, 2457, -1000, 14685,
	67527, 67527, -1000, -1000, -1000, 67527, 67527, -1000, 67527, 67527,
	86591, -1000, 86591, -1000, 263, 26882, -1000, 3723, -1000, -1000,
	-1000, -1000, 3723, -1000, 3338, 3336, 3723, -1000, 867, -1000,
	3723, -1000, -1000, 2384, 2384, -1000, -1000, 86591, 351, 3635,
	46333, 3634, 48353, 48353, 48353, 48353, -1000, -1000, -1000, -1000,
	-1000, 67527, 3703, 1284, -1000, -1000, -1000, -1000, 211, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3728, 3726,
	-1000, -1000, 211, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 67527,
	-1000, -1000, -1000, -1000, -1000, -1000, 1563, 3163, -1000, 1117,
	-1000, 1398, -1000, -1000, 210, 88685, -1000, 32536, -1000, -1000,
	-1000, 1738, 88685, -1000, 30480, 30480, 1465, 67527, 1922, -1000,
	1922, 84, -1000, 5692, 2432, 2632, 3199, 63992, 21740, 86591,
	67527, 3327, 26882, 26882, 26882, 26882, 26882, 26882, 26882, 26882,
	26882, 26882, 26882, 26882, 26882, 26882, 26882, 26882, 3385, 26882,
	3282, 2481, -1000, -1000, 3291, 837, 1570, 17608, -1000, -1000,
	853, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 784, 784, 419, 1487, 1487,
	602, 863, 3460, 240, 88640, 209, 258, 858, 240, -1000,
	-1000, -1000, 22255, 26882, 40691, 25853, 240, -1000, 19166, -1000,
	1389, 3723, 3346, 88685, 2159, 3121, 1067, 857, 26882, 26882,
	856, 3723, 3723, 3723, 3723, 26882, 2085, 26882, 26882, 32022,
	26882, 26882, 21226, 26882, 26882, 26882, 26882, 26882, 1740, 26882,
	2274, 33564, 1737, 26882, 25339, 20196, 26882, 26882, 26882, 517,
	26882, 26882, 26882, 2274, 3199, 26882, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 88595, -104, 514, 203, -1000, 2998, 202,
	26882, -1000, 67527, 3327, 26882, 26882, 26882, 26882, 3282, 2481,
	3291, 837, 853, -1000, -1000, -1000, 1469, 1560, -1000, 3089,
	-1000, 2795, 45323, 2935, 67527, 422, -1000, 972, 67527, -1000,
	-1000, 3174, 36114, 36114, 2736, 2736, -1000, -1000, 181, -1000,
	55929, 67527, 2700, 3633, 3489, 852, -1000, 3737, 2063, 3628,
	3088, 3553, -1000, 10395, 56939, 5233, 1625, -1000, -1000, 2697,
	2367, 849, -1000, 15219, 1879, 67527, 67527, 1183, -1000, -1000,
	-1000, -1000, -1000, -1000, 1699, 67527, -1000, 17608, -1000, 180,
	-1000, 969, 2629, 67527, -1000, 67527, 850, 849, 849, 849,
	849, 849, -1000, 67527, 1629, 67527, 1366, 55929, 2696, 3624,
	2132, -1000, -1000, 67527, 1424, -1000, -1000, 3623, 2822, 3701,
	3543, 543, 17608, 3742, -1000, 3700, 2196, 37629, 67527, 1315,
	426, -1000, 59952, 3404, 250, 543, -1000, 230, -1000, 1564,
	86591, 3735, 2822, 2822, 5763, 67527, 67527, 67527, -1000, 67527,
	67527, -1000, 3542, 70557, -1000, 86591, 67527, -1000, 848, 3003,
	1114, 1113, 2960, 63487, 67527, 70052, 69547, 67527, 1377, -1000,
	-1000, 1794, 67527, -1000, 17608, 67527, 58942, 1314, 1305, 67527,
	1846, 58437, 67527, 1844, -1000, 67527, 1455, -1000, -1000, 48353,
	-1000, 2873, 1842, 18119, 6485, 67527, 67527, 67527, 9273, 67527,
	67527, -1000, -1000, -1000, -1000, -1000, -1000, 798, -1000, -1000,
	-1000, 67527, 67527, 798, 798, 88726, 67527, 67527, 9079, 122,
	1497, 67527, 1348, 122, 1496, 59952, 1364, 67527, -1000, 67527,
	67527, 67527, 67527, 67527, -1000, 3400, 69042, 26882, 3398, -1000,
	67527, -1000, 843, 3393, 67527, 67527, 48353, 48353, 3281, 67527,
	67527, 1822, 3087, 67527, 67527, -1000, 208, 208, 208, 67527,
	67527, 67527, -1000, -1000, -1000, 67527, -1000, 67527, -1000, 3496,
	67527, 67527, -1000, 1513, 1505, 3280, -1000, 1675, -1000, 48353,
	1727, -1000, 68537, -1000, 67527, -1000, 48353, 1416, 1727, -1000,
	-1000, 67527, -1000, -1000, 67527, 765, 2860, 1499, 1498, 1491,
	1490, 67527, 67527, 3735, 3670, 3735, 3278, 67527, 67527, 54414,
	841, 86591, 54414, 41749, 54414, 54414, 2628, 86591, -1000, -1000,
	-1000, -1000, -1000, -1000, 351, -1000, 369, -1000, 3534, 3086,
	-1000, 368, -1000, 178, 512, 511, 3331, 3330, 510, 26882,
	504, -1000, -1000, 368, -1000, 67527, 1414, 2624, -1000, 79,
	79, 79, 3497, 2075, 39672, -1000, -1000, -1000, -1000, -1000,
	-1000, 2838, -1000, 26882, 1738, 3196, -1000, 3733, 3733, 831,
	-1000, 20711, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1817, 207, -1000, 26882, 591, 996, -1000, -1000, -1000,
	-1000, 3165, 36114, -1000, 3157, 3157, 1301, 1298, 3157, 67527,
	-1000, -1000, -1000, -1000, 3295, -1000, 193, 193, 221, 221,
	221, -1000, 434, 434, 434, 434, 434, 434, 419, 1487,
	11108, 1731, 26882, 26882, 3277, 3266, 837, 1579, 26882, -1000,
	2564, -1000, -1000, -1000, 3197, -1000, -1000, 1683, 2553, -1000,
	-1000, -1000, -1000, 2482, 32022, 32022, -1000, -1000, -1000, 20711,
	836, -1000, -1000, -1000, -1000, 40691, -1000, 835, 26882, -1000,
	-1000, 3429, -1000, -1000, 26882, 54, -30, -1000, -1000, 175,
	503, 174, -1000, -26, -1000, 494, 26882, 26882, 26882, -1000,
	88685, 3714, -1000, -1000, 3263, -1000, 3261, 3260, 3259, -1000,
	833, 492, 2443, -1000, 26882, 1067, 832, -1000, 53404, 3175,
	2535, 2455, 377, 1060, 88550, 26882, 491, 489, 480, 479,
	14664, 478, 3188, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1533, 475, 471, 14619, 206, 470, 2573, -1000, 32022,
	32022, 32022, 831, 469, 468, 6266, 14519, 24825, 24825, 24825,
	467, 14391, 26882, 53, 5609, 168, 164, 163, 162, 17608,
	161, -1000, 14338, 26882, 2650, 17608, 1861, 160, 327, 465,
	-1000, 86591, 377, 322, 1010, 462, -1000, 240, 2553, 14198,
	2792, -1000, 204, 200, 199, 26882, 3165, 156, -1000, 26882,
	-1000, -1000, 830, -1000, 2938, -1000, 88685, -1000, -1000, -1000,
	2823, 2789, 2453, -1000, -1000, 150, -1000, -1000, -1000, -1000,
	3174, 51889, 26882, 148, -1000, 240, 2823, 29966, 41, 3048,
	60962, 60962, 38134, -1000, 35089, 62477, 60962, 60962, 982, 3187,
	799, 774, 240, -1000, -1000, -1000, 755, 751, 3095, 2849,
	-1000, 2849, 67527, -1000, 460, 197, -1000, -1000, -1000, -1000,
	67527, 612, 67527, 67527, 3699, 601, 67527, 67527, 59952, 3618,
	83669, 1698, 5233, -1000, 3735, 52899, 2623, -1000, -1000, 3085,
	-1000, -1000, -1000, -1000, 1436, 2001, -1000, 1873, 798, 798,
	67527, -1000, 67527, 68032, -1000, 145, -1000, -1000, 1135, 85617,
	83182, -1000, 1673, -1000, -1000, -1000, 247, -1000, 88052, 1698,
	3391, 3072, -1000, -1000, -1000, 2695, -1000, -1000, 1625, -1000,
	454, -130, 3145, 135, -1000, -1000, -1000, 788, 67527, 2052,
	543, 67527, 3673, 1604, 1617, 2345, -1000, 1672, -1000, -1000,
	17608, 18630, 1244, -1000, 451, 192, -1000, 86591, 3735, -1000,
	-1000, -1000, -1000, -1000, 819, -1000, 67527, 52899, 52899, -1000,
	1473, 1073, 1366, -1000, 67527, 1378, 67527, 450, 67527, 67527,
	2279, 1242, 67527, 2622, -1000, -1000, 3723, 48353, 48353, 1796,
	3394, 1615, 1613, -1000, -1000, 3153, 1215, 48353, 759, 3614,
	2953, 2415, 3489, 2620, 3748, 2045, -1000, -1000, 386, -1000,
	240, -1000, 26882, 749, 3496, -1000, 57932, 543, 1446, 250,
	3173, 3173, 67527, 447, 3258, -1000, -1000, 3255, 3251, 2662,
	2414, 3612, -1000, 3539, 1373, 1266, 26882, 744, -1000, 2000,
	818, 740, 738, 67527, 1572, 2858, -1000, 3611, 3534, 3610,
	3534, -1000, -1000, -1000, 62982, -1000, 130, -1000, 259, -1000,
	-1000, -1000, -1000, 67527, 67527, 67527, 67527, -1000, 1435, -1000,
	-1000, -1000, -1000, 1434, -1000, 1840, -1000, -1000, -1000, -1000,
	-1000, 1982, 1433, 128, -1000, -1000, 17608, 17608, 17608, 3735,
	-1000, 122, -1000, 1466, 1989, -1000, -1000, 122, 3250, 1953,
	-1000, -1000, -1000, -1000, -1000, -1000, 122, 3247, 3737, -1000,
	3246, 122, 1495, 67527, 67527, 8789, 67527, 67527, 67527, 7675,
	3244, 1085, 1366, -1000, -1000, -1000, -1000, -1000, 3243, -1000,
	3534, 3607, 88685, -1000, 1506, 26882, -1000, -1000, -1000, -1000,
	79, 67527, 1488, 1900, 3242, 2961, 48353, 67527, -1000, -1000,
	-1000, -1000, -1000, -1000, 408, -1000, 408, 408, 3241, 3240,
	67527, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 67527, -1000,
	-1000, -1000, -1000, -1000, 3723, 3723, 1379, 3239, 3238, 3235,
	3233, -1000, 3232, 3231, 3735, 3533, -1000, -1000, 52899, -1000,
	-1000, -1000, 86591, -1000, -1000, -1000, 67527, 67527, 733, -1000,
	-1000, 86591, -1000, -1000, -1000, -1000, 67527, -1000, -1000, -1000,
	984, -1000, -1000, 984, 124, -1000, -1000, 351, 67527, 46333,
	-1000, 1809, 339, -1000, -1000, -1000, 3190, -1000, 1292, -1000,
	-1000, 24311, 186, -1000, 67527, -1000, 996, -1000, 685, -1000,
	2914, 3120, 26882, 41, 67527, -1000, 67527, 3157, 3157, 3157,
	3157, 67527, -1000, 26882, 26882, 804, 700, 26882, 32022, 32022,
	-1000, 26882, 613, -1000, -1000, -1000, -1000, 3186, -1000, -1000,
	1682, 2553, 26882, -1000, -1000, 1226, 1225, -1000, -1000, -1000,
	-1000, 1920, 1428, 118, -1000, 20711, 446, 23797, 167, -1000,
	240, 14088, -1000, -1000, 325, -1000, -1000, -1000, 445, 23283,
	-1000, -1000, 1058, -92, -92, 26882, 26882, 1783, 1551, 1509,
	1432, 3723, 3735, 2225, -1000, 26882, 13990, -1000, 1058, -1000,
	-1000, 82677, 26882, 2553, 3081, 3079, 26882, 26882, 2530, 3144,
	-1000, -1000, 2428, 13945, -1000, -1000, -1000, -1000, 86591, -1000,
	26882, -1000, 1807, -1000, -1000, 26882, 26882, -1000, 86591, 32022,
	32022, 32022, 32022, 32022, 32022, 32022, 32022, 32022, 32022, 32022,
	32022, 32022, 2476, 32022, 729, 644, 644, 644, -1000, -1000,
	22769, 26882, 26882, 86591, 444, 443, 442, -1000, 26882, 53,
	26882, -1000, -1000, -1000, -1000, 104, -1000, 26882, 17608, 6949,
	432, 34584, 103, 1204, -1000, 2553, 26882, -1000, 1010, 2792,
	26882, 3076, 3075, 2792, -1000, 420, -1000, 416, 26882, 26882,
	26882, 13881, 3120, -1000, 614, 88685, 759, -1000, -1000, 21740,
	844, 759, 1160, 67527, 240, 2823, -1000, 88685, 824, 67527,
	-1000, 88685, 2694, 36114, 3022, 3018, 36114, 2994, 2952, 2952,
	2952, -1000, 1300, -1000, 67527, 728, -1000, 60962, 62477, 60962,
	60962, 48858, 415, 3048, -1000, -1000, 52394, 719, -1000, -1000,
	-1000, 2677, 698, 34074, 26882, 240, 19166, 26882, 1473, -1000,
	-1000, -1000, 2972, -1000, 1942, 55929, -1000, 1646, 56434, 612,
	678, 759, -1000, 102, 3737, 2960, 67527, 5233, 694, 3073,
	-1000, 247, -1000, -1000, 2347, 26882, -1000, -1000, 149, -1000,
	125, 1241, 3390, 1978, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2341, 1391, -1000, 83182, 26882, 26882, 85617, -1000,
	85617, -1000, -1000, 232, 251, -1000, 67527, 1625, 67527, 3058,
	-1000, -1000, 3142, 83182, 83182, -1000, 3747, 18630, 693, 67527,
	3489, 690, 48353, 3673, -1000, 67527, -1000, -1000, 67527, 2467,
	-1000, 3529, 1108, 689, 32022, 67527, 2493, -1000, 2108, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 685, 3728, 3726,
	86591, -1000, 67527, 3472, 414, 123, -1000, -1000, 67527, -1000,
	-1000, -1000, -1000, -1000, 681, -1000, -1000, 251, -1000, -1000,
	-1000, 1942, 612, 474, 2528, 1203, 1073, 46333, -1000, 79,
	79, 48353, 48353, -1000, -1000, 3735, 3735, 800, 3735, 79,
	3497, 67527, 3489, 67527, 1715, 67527, -1000, 3229, 2949, -1000,
	67527, 36114, 37629, 13808, 3064, -1000, -1000, 3173, 61972, 3173,
	-1000, 679, -1000, 408, 2552, 3735, 67527, 67527, -1000, 2934,
	-1000, -1000, -1000, 67527, 3603, 2308, -1000, 61467, -1000, 2960,
	13762, 67527, 2107, 67527, 67527, -1000, 67527, 36619, -1000, -1000,
	2383, 7684, 601, 2068, 1781, 1240, -1000, -1000, 1473, 1350,
	2107, 67527, -1000, 67527, -1000, -1000, -1000, -1000, -1000, 17608,
	18630, 17608, -1000, -1000, -1000, -1000, -1000, -1000, 1429, 67527,
	-1000, -1000, 18119, -1000, -1000, -1000, -1000, -1000, 67527, 67527,
	67527, 1347, 3139, 67527, 1346, 3138, 67527, 67527, 67527, 67527,
	-1000, 3228, 122, 1462, 1945, -1000, 3225, 122, 1461, 67527,
	-1000, 67527, -1000, 67527, -1000, 13668, 2107, -1000, 3224, 3223,
	1751, 2310, 67527, 3519, 677, 79, 1479, -1000, -1000, -1000,
	67527, 67527, -1000, 1085, 765, 67527, 67527, 67527, 67527, 67527,
	3735, 2344, 3602, -1000, 3698, 2968, 2967, -1000, 86104, 1877,
	3534, -1000, -1000, -1000, -1000, -1000, 1413, -1000, 2273, -1000,
	1281, -1000, 85, -1000, 26882, -1000, -1000, 40691, -1000, -1000,
	3118, 3135, 88685, -1000, -1000, 67527, 67527, 67527, 67527, -1000,
	554, 481, 26882, 26882, 495, 820, 706, 481, 26882, 26882,
	-1000, -1000, 1594, 1912, 1893, 26882, 26882, -1000, 13550, -1000,
	82, -1000, 26882, -1000, -1000, 3735, 26882, -1000, 413, 412,
	409, 88685, 88685, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	399, -1000, -1000, 88685, 26882, 398, 1648, -1000, 13415, 2792,
	3389, 3387, -1000, -1000, 2792, 26882, 2469, -1000, 391, 88685,
	389, 13349, -1000, 93, 93, 220, 220, 220, -1000, 401,
	401, 401, 401, 401, 401, 644, 3185, 2465, -1000, 870,
	13212, 13110, 13021, 385, -1000, -1000, -1000, 53, 12811, -1000,
	29452, -1000, -1000, 375, 1169, 1167, -1000, 3130, 33564, 2483,
	-1000, 26882, 120, 28938, 2792, -1000, -1000, 373, -1000, 3381,
	3380, 365, -1000, -1000, 12959, 12959, 12959, 86591, 3118, -1000,
	364, 108, 2755, 36619, 2719, -1000, -1000, 2795, -1000, -1000,
	26882, -1000, 67527, 3048, 36114, 36114, 3253, 2999, 36114, -1000,
	-1000, -1000, -1000, -1000, 54414, 676, 67527, -1000, -1000, -1000,
	-1000, 60962, 667, 67527, 67527, -1000, 42796, 2650, 662, 107,
	-26, 9383, 641, 1473, 2448, -1000, 1646, 661, -1000, 2053,
	2953, -1000, 3133, 81, -1000, -1000, -1000, 3521, 2662, 55929,
	67527, 2692, 3492, 3489, -1000, 659, 3061, 1698, 88052, 3378,
	-1000, 88685, 3735, 2619, 86591, 1934, -1000, -1000, -1000, 88685,
	88685, -1000, -1000, 1238, 234, 1492, -1000, 18, 67527, 83182,
	-1000, 80, -1000, 788, -1000, 3172, 1939, 3697, 67527, -1000,
	1669, -1000, -1000, -1000, 3496, 3496, 26882, 870, 543, 3696,
	-1000, 3452, -1000, -1000, 2965, -1000, -1000, 67527, -1000, 3735,
	-1000, 1629, 17608, 241, 1410, 2662, 55929, 2686, 67527, 2120,
	-1000, 1409, 79, 79, -1000, -1000, -1000, -1000, -1000, 3695,
	1306, -1000, 54414, -1000, -1000, 2462, -1000, 3403, 2961, 48353,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 41, -1000, -1000,
	37629, -1000, -1000, -1000, -1000, 26882, -1000, 1339, 2126, 3184,
	-1000, -1000, 3189, -1000, 67527, 1073, -1000, 60457, -1000, -1000,
	-1000, 75, -1000, 1443, -1000, 2093, 1971, -1000, 74, 2107,
	60, 57, -1000, 3520, 737, 3430, 26882, 3372, 3669, 3668,
	-1000, -1000, 2493, 3366, 3694, 765, -1000, -1000, -1000, -1000,
	2493, -1000, 2840, 86591, 798, 765, 3534, 3534, -1000, -1000,
	558, -1000, -1000, -1000, -1000, 3216, 3213, 67527, 48353, -1000,
	67527, 48353, -1000, -1000, -1000, 3212, 67527, 67527, 67527, 1338,
	3132, 67527, 67527, 67527, -1000, -1000, 3534, -1000, 67527, 67527,
	-48, -1000, 3723, 3723, 86591, 97, -1000, 3723, 3723, -1000,
	-1000, 1048, 26882, 3211, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3534, -1000, 3735, 3735, -1000, 86591, 67527, 67527,
	56, 92, 67527, -1000, 67527, -1000, -1000, -1000, 12674, 362,
	1164, 26882, 3445, -1000, -1000, -1000, -1000, 481, 481, 26882,
	26882, 26882, 481, 1594, -1000, -1000, 481, 481, -1000, -1000,
	12600, -1000, 1058, -1000, -1000, -1000, -1000, 88685, -1000, 1058,
	3131, -1000, 355, -1000, -1000, 354, 84, 67527, -1000, -1000,
	26882, 32022, 3183, -1000, 26882, 26882, 26882, -1000, -1000, 49,
	45, 654, -1000, -1000, -1000, -1000, 2483, 3130, -1000, -1000,
	12360, 353, 1381, 88685, 2449, 346, -1000, -1000, -1000, -1000,
	2792, 26882, 2640, 2792, 1785, 1164, 2916, 2791, 44, -1000,
	67527, 2447, 88685, -1000, -1000, -1000, 3253, -1000, 643, 26882,
	36114, -1000, 642, 67527, 42, -1000, 67527, 39, 38, 86591,
	37, -1000, 3693, 2688, 31508, 26882, 345, 2869, -1000, 3584,
	3584, 2881, -1000, 2728, 17608, 641, 3735, 2953, 67527, 2260,
	2260, 2550, 67527, -1000, 56434, 1672, 1077, 1646, 342, 612,
	67527, -1000, 1456, 3687, 36619, 59952, -1000, 34, -1000, 85617,
	-1000, 1932, 5498, -1000, 1237, -1000, -1000, -1000, 1235, 2607,
	1259, 3182, 32, -1000, 341, 1390, 1388, 1316, 67527, 759,
	31, 3673, -1000, 3357, 2955, 2955, 11792, 1810, 553, -1000,
	67527, -1000, -1000, 26, -1000, 67527, 1407, 337, 67527, 1073,
	2272, 67527, 759, -1000, 67527, 639, 1715, 67527, 637, 3519,
	79, 319, 10659, 54414, 3684, 3684, 67527, 635, 630, 629,
	-1000, -1000, -1000, -1000, 2107, 2013, -1000, -1000, -1000, -1000,
	-1000, 2013, 1512, 2013, 36619, 41220, -1000, 67527, 67527, -1000,
	10386, -1000, 3600, 3597, -1000, -1000, 628, -1000, 3686, 3472,
	-1000, -1000, -1000, -1000, 18630, 67527, 67527, 1676, 335, 1676,
	320, 67527, -1000, -1000, 3210, 67527, 48353, -1000, -1000, 3209,
	-1000, 2107, -1000, -1000, 1751, 40691, 40186, -1000, 2310, 626,
	625, 624, 9675, 67527, -1000, -1000, -1000, 326, -1000, -1000,
	-1000, 85130, 86591, -1000, -1000, -1000, -1000, -1000, 67527, 88685,
	27910, 481, 481, 481, -1000, 324, 1831, 26882, -1000, -1000,
	-1000, 8990, 1265, 32022, 88685, 88685, 88685, -1000, 26882, -1000,
	26882, -1000, -1000, -1000, 1276, -1000, -1000, 2549, 78, -1000,
	3685, 323, 3059, 26882, -1000, -1000, -1000, -1000, -1000, -1000,
	2531, 2640, 316, -1000, 1979, -1000, 2908, 2901, 2853, -1000,
	3165, 36619, -1000, 759, -1000, 67527, 88685, -1000, 26882, 24,
	-1000, 21, -1000, -1000, 982, 42796, -1000, 622, 67527, 20,
	-1000, 585, 32022, 8927, -1000, -1000, -1000, 2763, 26882, 2762,
	-1000, 2765, -1000, -1000, -1000, 3682, 3682, -1000, -1000, 3682,
	3682, 2593, 3735, 19, -1000, 35599, 3165, -1000, 2550, 14,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3027, 601, 1101, 615, -1000, -1000, 2953, 1942,
	1646, 612, 1091, 1046, 1030, 759, 13, 2960, 88052, 5233,
	-1000, -1000, -1000, 216, -1000, -1000, 86591, -1000, 3344, 2236,
	1259, -1000, 1790, -1000, -1000, -1000, 67527, -1000, -1000, 3512,
	3508, -1000, -1000, 67527, 1206, -1000, 3492, 3489, -1000, 1980,
	-1000, 1690, 3029, 1766, 567, 26882, 2164, -1000, 17608, 1073,
	67527, 1942, 612, -1000, 2521, 1073, 3497, -1000, 315, 54414,
	-1000, 3741, -1000, 36114, -1000, 3684, -1000, 2114, -1000, -1000,
	54919, 26882, 26882, 1672, 3496, 611, 3496, 67527, 3496, -1000,
	-1000, 609, 2882, 601, -1000, 3430, -1000, -1000, 26882, 2037,
	2958, -1000, -1000, -1000, -1000, -1000, 1331, -1000, 1323, -1000,
	67527, 1676, 312, 67527, -1000, 727, 2599, -1000, 86591, -1000,
	86591, 86591, 26882, -1000, -1000, -1000, 310, 309, 303, 77,
	-1000, 3683, 59, -1000, 88685, -1000, -1000, -1000, -1000, 19681,
	584, 577, 403, -1000, 301, 28424, 28424, 28424, 53, 26882,
	1265, 8, 7, -1000, 2444, 2487, 2551, 2510, 26882, 17608,
	-1000, 2559, 88685, -1000, -1000, 295, 3047, -1000, -1000, -1000,
	67527, 2884, 2877, 51889, -1000, -1000, -1000, 6, 3, -1000,
	-1000, -1000, -1000, 67527, 1, -1000, 84643, 31508, 46, 17608,
	870, 2652, 67527, 2757, 88685, 2797, 3129, 3735, 3735, 3735,
	3735, 44818, 3355, 44313, -1000, -1000, 17608, -1000, -1000, -1000,
	-1000, -1000, 45828, -1000, 3027, -1000, 1306, 2311, -1000, -1000,
	37124, 1672, 2550, 1646, 2953, 2662, -1000, 1090, 1088, 3492,
	1993, 570, -1000, 1698, -1000, -1000, 2208, 569, 1403, -1000,
	-1000, 3682, -1000, -1000, 2178, -1000, 2122, 2103, -1000, -1000,
	-1000, 3681, 1322, -1000, 1955, -1000, 3044, 3039, 2834, -1000,
	-1000, -1000, -1000, 3737, 8326, 3680, 67527, -1000, -1000, 1073,
	1406, 2662, 67527, -1000, -1000, -1000, 568, 0, -1000, 41,
	-1000, -1000, -1000, -10, -1000, 3723, -14, -15, 2955, 67527,
	2955, 543, 2955, 40691, 996, 2882, -1000, 8260, 567, -1000,
	26882, 67527, 67527, -1000, -1000, 1318, -1000, 1510, 1484, 1510,
	-16, -1000, -28, -29, 8135, -1000, -1000, -1000, 67527, 565,
	27910, -1000, 26882, 26882, 563, -1000, 2218, -1000, 33050, 1732,
	1453, 5995, 2218, 2218, 88685, -1000, -1000, -1000, 2640, 2498,
	2496, -1000, 2516, -1000, 2506, 2519, 2514, -1000, -1000, -1000,
	-1000, 2610, 296, 3128, 3126, 334, 3679, 1472, -31, -1000,
	67527, 2756, 2676, -1000, 33564, -1000, 2683, -1000, -1000, -1000,
	2742, 2850, -1000, -1000, 2740, 822, 2754, -1000, -1000, -1000,
	-1000, 18, -1000, 43808, 18, -1000, -1000, -33, -1000, -1000,
	1306, -1000, 1954, -34, -1000, 737, 3430, 26882, 3027, 2953,
	2550, 1646, -1000, -1000, -1000, 3529, 555, 36619, -1000, 1715,
	26882, -1000, -1000, -1000, 67527, 2235, 54414, 54414, 759, 67527,
	-1000, -1000, 2830, -1000, 2836, 2141, 2141, 1743, 1369, 1751,
	-1000, -1000, 67527, 1404, 1073, 293, -1000, 3740, -1000, 54919,
	-1000, -1000, 3208, -1000, -44, -1000, 1810, 3165, 282, -1000,
	996, -1000, -1000, 88685, 1676, 1676, 67527, -1000, -1000, -1000,
	3125, -1000, 54414, 86591, -1000, -1000, -1000, -1000, -1000, -1000,
	-47, -57, 27910, -1000, 1687, 3535, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 279, 3032, 3030, -1000, -1000, 2505, -1000,
	2502, -1000, 2640, -1000, 67527, 67527, 67527, -1000, -1000, 67527,
	-1000, 552, -1000, -1000, 2756, -1000, 32022, 32022, 3352, -1000,
	32022, -1000, 2650, 550, -1000, 51889, -1000, -1000, 2795, 67527,
	2932, 547, -1000, -1000, 18, -1000, -1000, 45828, -1000, -1000,
	2664, 2659, -1000, 37124, 67527, 67527, 7700, 1306, 2550, 3027,
	2953, 3489, 36619, -60, 54414, 7342, -1000, -1000, 1451, -20,
	-36, 3492, -1000, -1000, 2371, -1000, -1000, 3358, -1000, -1000,
	-1000, -48, 1073, 67527, -1000, -1000, -1000, -1000, 545, 2107,
	-1000, 2107, 3029, -1000, -1000, -1000, -1000, -1000, 1676, 67527,
	-1000, -1000, -1000, -1000, -65, 1450, -1000, -1000, 1121, 27396,
	-1000, 2490, 2488, -1000, -1000, 3028, 2969, 291, 289, -1000,
	26882, -1000, 870, 870, -1000, 870, 2681, 67022, -76, 2442,
	-71, -1000, 26882, -1000, -1000, -1000, -1000, -1000, -1000, 3430,
	-1000, 3027, 1306, 2550, 1306, -72, -1000, 1993, 544, -1000,
	3344, 3176, 3179, -1000, -1000, 543, 543, -1000, 1073, 26882,
	-1000, 2107, -1000, -1000, -1000, -1000, -1000, -1000, 2475, 2473,
	2556, 43303, 67527, 67527, 67527, 7125, 67527, -86, -1000, 84156,
	2655, 2929, 2825, -90, 67527, 1306, -1000, 3027, 3165, -1000,
	36619, 3529, 17097, 2192, 1386, 1382, -1000, -1000, -1000, -105,
	2107, -1000, -1000, -1000, 3436, 806, -1000, -1000, -1000, -1000,
	-1000, -106, 2640, 67022, 2675, 1481, 3739, -1000, -1000, -1000,
	2795, -1000, -1000, -1000, 1306, -1000, -1000, 3489, -123, -1000,
	-1000, -1000, -1000, -1000, 1715, 3486, 3480, -1000, 43303, 26882,
	-1000, 277, -1000, -1000, 2549, 2654, 2654, 3736, 2766, 2440,
	-1000, 1306, -1000, 17097, 54414, 2097, 2080, 2951, -92, -1000,
	2487, 2549, 2640, -1000, 542, 67527, 2929, 3165, -1000, 541,
	54414, 54414, 67527, 271, 2640, 2487, -1000, 67022, 2679, -1000,
	-1000, 17097, -1000, -1000, -1000, 3735, -1000, 2640, -147, 340,
	-151, -1000, -1000, 67022, -1000, -154, -1000,
}

var yyPgo = [...]int16{
	0, 4174, 4171, 2924, 181, 0, 39, 6271, 4170, 61,
	264, 320, 4169, 105, 377, 10776, 177, 318, 326, 3464,
	6765, 5033, 140, 4168, 275, 4168, 4164, 335, 276, 216,
	4163, 213, 4159, 4158, 211, 214, 4154, 4150, 361, 26,
	252, 186, 339, 366, 354, 353, 4145, 315, 340, 311,
	313, 4142, 5604, 2094, 9379, 8, 4141, 4140, 1107, 4138,
	4135, 4133, 304, 4132, 257, 4131, 4130, 4129, 4128, 13,
	332, 4128, 4126, 305, 4125, 4120, 4118, 111, 4116, 4114,
	4113, 4109, 219, 301, 303, 4106, 272, 296, 55, 206,
	424, 8145, 4105, 330, 125, 718, 210, 4104, 4103, 9927,
	4100, 4099, 9570, 9153, 8850, 4098, 8645, 7935, 260, 237,
	245, 4097, 271, 274, 342, 984, 337, 9, 870, 327,
	4096, 4095, 4094, 171, 4092, 4090, 56, 52, 302, 4089,
	4088, 78, 27, 59, 355, 333, 4087, 4086, 364, 4084,
	4081, 7406, 60, 309, 4078, 64, 4076, 306, 308, 68,
	48, 4074, 307, 253, 254, 38, 258, 212, 49, 202,
	312, 4073, 4067, 4065, 4063, 108, 251, 91, 9291, 372,
	367, 4060, 4059, 4058, 4057, 4056, 200, 143, 4055, 4052,
	4050, 4047, 36, 37, 4045, 4041, 246, 249, 255, 295,
	4040, 298, 204, 7, 28, 187, 158, 4039, 4038, 4037,
	4036, 29, 77, 21, 4034, 4033, 4031, 329, 4031, 4031,
	4031, 4031, 4030, 287, 4029, 4028, 4026, 159, 4024, 4022,
	4021, 183, 4021, 57, 70, 4018, 33, 157, 317, 4017,
	341, 42, 269, 3076, 247, 4016, 356, 331, 328, 84,
	198, 20, 227, 226, 310, 4012, 242, 4009, 4008, 4008,
	352, 289, 244, 248, 185, 141, 4007, 368, 4006, 358,
	4004, 4003, 4002, 3997, 294, 170, 96, 3995, 234, 3993,
	107, 3992, 3991, 109, 293, 16, 50, 3988, 41, 115,
	46, 190, 3987, 72, 292, 2, 15, 4, 3986, 502,
	3981, 75, 3980, 150, 256, 3976, 299, 259, 3975, 447,
	76, 14, 12, 3974, 1, 17, 6, 5, 250, 3973,
	199, 3972, 90, 3970, 236, 195, 149, 3969, 134, 3966,
	66, 53, 127, 3965, 3964, 3963, 137, 73, 3962, 100,
	3961, 194, 268, 3960, 3959, 3958, 24, 51, 123, 62,
	67, 45, 30, 85, 47, 3952, 3951, 35, 89, 3949,
	215, 22, 11, 74, 265, 99, 3946, 23, 32, 18,
	285, 174, 324, 323, 3945, 54, 266, 345, 3944, 3943,
	344, 113, 334, 34, 222, 3942, 220, 3940, 69, 3939,
	93, 58, 193, 65, 63, 3938, 43, 218, 3937, 169,
	290, 3936, 278, 376, 11554, 3933, 191, 273, 365, 83,
	3931, 223, 203, 3930, 44, 316, 112, 3929, 138, 135,
	130, 3928, 188, 3926, 3925, 3924, 3923, 3921, 3920, 3919,
	3917, 3916, 380, 373, 3913, 325, 314, 371, 348, 346,
	283, 357, 3912, 3911, 3910, 3907, 3904, 3903, 3902, 3900,
	3899, 3896, 3893, 3892, 3891, 3889, 3886, 3885, 3884, 3882,
	3881, 3880, 3878, 3877, 3876, 3875, 3874, 3873, 3872, 3868,
	3857, 3856, 3855, 3854, 3853, 3852, 3851, 3850, 3849, 3848,
	3847, 3846, 3845, 3844, 232, 229, 3843, 3842, 3841, 322,
	319, 263, 277, 362, 228, 233, 102, 3840, 3838, 126,
	3837, 3836, 3835, 350, 3833, 363, 3832, 3831, 3830, 3828,
	196, 120, 3826, 92, 192, 347, 40, 3823, 3821, 221,
	270, 114, 104, 3820, 3819, 3818, 3817, 3816, 197, 3815,
	3814, 230, 79, 3809, 262, 231, 3808, 321, 282, 3807,
	3806, 343, 3805, 1707, 351, 3804, 240, 239, 101, 281,
	3803, 103, 3802, 3799, 291, 3798, 3796, 71, 3795, 3794,
	225, 280, 3793, 3791, 3789, 3788, 3785, 3784, 3, 94,
	25, 10, 3783, 3779, 31, 3778, 3776, 261, 3770, 3766,
	338, 80, 86, 3764, 3763, 3762, 3761, 267, 3758, 3757,
	224, 19, 3754, 3754, 3009,
}

var yyR1 = [...]int16{
	0, 1, 2, 2, 3, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 18, 18, 358, 358, 393, 393, 393, 25, 25,
	26, 26, 27, 27, 28, 28, 39, 39, 39, 5,
	5, 5, 6, 6, 6, 6, 6, 8, 8, 7,
	13, 13, 14, 14, 394, 394, 24, 24, 16, 16,
	577, 577, 388, 388, 388, 388, 388, 388, 388, 388,
	388, 15, 15, 17, 17, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 54, 573, 573, 573, 573, 573, 55, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	88, 90, 89, 89, 89, 97, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	112, 112, 56, 56, 83, 83, 87, 87, 86, 86,
	86, 86, 84, 84, 57, 57, 57, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 70, 70, 72,
	72, 72, 72, 72, 73, 73, 73, 74, 12, 12,
	12, 12, 12, 12, 12, 12, 75, 75, 76, 68,
	77, 77, 188, 188, 78, 78, 78, 79, 79, 79,
	80, 80, 81, 81, 81, 81, 265, 265, 265, 533,
	533, 118, 118, 118, 118, 118, 118, 118, 69, 69,
	82, 82, 82, 59, 60, 60, 63, 63, 62, 61,
	61, 64, 64, 64, 67, 67, 116, 116, 116, 65,
	65, 66, 151, 151, 151, 144, 144, 144, 144, 144,
	144, 153, 153, 153, 153, 152, 152, 152, 152, 152,
	154, 154, 154, 154, 154, 115, 115, 95, 96, 96,
	96, 96, 96, 91, 91, 91, 93, 94, 109, 109,
	110, 110, 98, 98, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 105, 105, 101, 101, 574,
	574, 575, 575, 92, 92, 92, 92, 92, 92, 102,
	103, 106, 107, 104, 104, 104, 104, 576, 113, 113,
	113, 114, 114, 100, 100, 141, 141, 143, 143, 145,
	145, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 142, 142, 117, 117, 122, 122, 119,
	119, 148, 148, 147, 147, 165, 165, 166, 168, 168,
	169, 169, 167, 167, 167, 167, 167, 167, 167, 167,
	134, 134, 135, 135, 136, 136, 138, 139, 139, 139,
	139, 137, 137, 140, 140, 140, 170, 170, 170, 170,
	170, 170, 170, 235, 235, 234, 234, 237, 237, 237,
	237, 238, 238, 239, 239, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 396, 396, 397,
	397, 397, 398, 398, 398, 251, 251, 251, 251, 251,
	251, 252, 252, 252, 252, 253, 253, 254, 254, 255,
	255, 255, 256, 256, 257, 257, 259, 260, 260, 260,
	261, 261, 261, 262, 262, 262, 263, 263, 241, 241,
	191, 191, 191, 212, 244, 244, 243, 243, 243, 243,
	246, 246, 246, 246, 246, 245, 245, 247, 247, 248,
	248, 249, 249, 250, 250, 264, 264, 273, 273, 269,
	269, 270, 271, 271, 272, 272, 538, 267, 267, 266,
	266, 268, 279, 279, 281, 281, 280, 280, 280, 280,
	282, 282, 283, 283, 274, 274, 275, 275, 276, 276,
	276, 277, 277, 278, 278, 278, 278, 278, 284, 289,
	288, 288, 300, 300, 290, 290, 291, 292, 292, 295,
	295, 294, 294, 296, 296, 296, 297, 297, 297, 298,
	298, 293, 293, 299, 299, 302, 302, 303, 303, 303,
	303, 303, 303, 303, 303, 304, 304, 304, 304, 301,
	301, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	306, 306, 306, 306, 306, 307, 307, 308, 308, 309,
	309, 285, 285, 286, 286, 286, 286, 286, 286, 287,
	287, 171, 395, 395, 181, 181, 181, 181, 181, 203,
	203, 182, 182, 186, 172, 183, 183, 189, 189, 187,
	184, 184, 173, 258, 258, 174, 185, 185, 175, 175,
	206, 206, 207, 207, 213, 213, 213, 214, 214, 215,
	215, 217, 217, 218, 218, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	219, 219, 224, 225, 225, 225, 225, 225, 225, 220,
	220, 226, 231, 231, 231, 231, 227, 227, 227, 227,
	34, 34, 370, 370, 370, 370, 370, 370, 370, 370,
	369, 369, 369, 368, 368, 368, 368, 368, 230, 230,
	495, 495, 229, 229, 578, 578, 522, 522, 208, 208,
	209, 209, 210, 210, 211, 211, 195, 195, 195, 195,
	195, 204, 204, 205, 205, 196, 196, 198, 199, 200,
	200, 200, 200, 200, 193, 190, 190, 190, 197, 197,
	197, 222, 222, 223, 223, 201, 201, 201, 202, 202,
	194, 194, 149, 149, 149, 150, 150, 150, 192, 192,
	176, 176, 176, 176, 176, 176, 372, 372, 372, 372,
	372, 372, 372, 372, 310, 310, 311, 311, 314, 314,
	314, 317, 325, 325, 325, 326, 326, 326, 326, 326,
	326, 326, 326, 326, 326, 374, 374, 375, 375, 376,
	376, 377, 377, 312, 312, 313, 313, 318, 318, 319,
	319, 320, 320, 320, 320, 321, 324, 324, 378, 378,
	379, 379, 380, 10, 33, 315, 329, 329, 330, 330,
	330, 330, 333, 333, 333, 333, 336, 336, 336, 382,
	382, 385, 385, 387, 387, 387, 387, 383, 383, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 579, 579, 29, 29, 29,
	381, 381, 384, 384, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 316, 316, 332, 332, 332, 332, 332,
	332, 332, 334, 334, 323, 323, 322, 322, 338, 338,
	337, 337, 337, 337, 342, 342, 342, 342, 342, 339,
	340, 341, 341, 341, 341, 341, 343, 343, 344, 344,
	345, 346, 346, 347, 347, 347, 373, 373, 351, 351,
	351, 351, 352, 352, 353, 353, 354, 177, 177, 335,
	335, 355, 355, 357, 357, 356, 356, 359, 359, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	360, 360, 365, 365, 361, 361, 11, 430, 430, 430,
	430, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 363, 363, 363, 364, 366, 366, 580, 580,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 411, 411, 411, 527, 527, 527, 530, 530,
	530, 530, 529, 529, 531, 531, 412, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	38, 404, 406, 85, 85, 85, 85, 405, 71, 71,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 327, 327, 328, 328, 328,
	328, 328, 328, 348, 349, 349, 350, 350, 350, 350,
	407, 407, 407, 407, 534, 534, 535, 535, 536, 536,
	536, 537, 537, 537, 537, 537, 539, 539, 539, 539,
	539, 540, 108, 108, 108, 541, 541, 542, 542, 544,
	544, 544, 544, 544, 546, 546, 543, 543, 547, 547,
	547, 410, 565, 565, 548, 548, 545, 545, 545, 545,
	545, 545, 545, 545, 545, 545, 545, 545, 545, 545,
	545, 545, 545, 532, 532, 408, 408, 549, 549, 549,
	551, 551, 550, 550, 550, 550, 550, 556, 556, 557,
	557, 559, 554, 554, 555, 555, 562, 552, 552, 582,
	582, 553, 553, 560, 560, 581, 581, 558, 558, 558,
	561, 561, 561, 561, 563, 563, 409, 409, 409, 409,
	221, 221, 564, 564, 564, 564, 434, 434, 434, 434,
	435, 436, 436, 436, 436, 436, 436, 436, 437, 437,
	437, 437, 437, 437, 437, 437, 437, 437, 437, 437,
	437, 437, 437, 437, 439, 439, 474, 474, 583, 583,
	440, 440, 441, 441, 475, 475, 477, 477, 477, 477,
	442, 476, 476, 478, 443, 443, 443, 443, 443, 443,
	443, 443, 443, 443, 443, 443, 443, 464, 465, 465,
	481, 481, 481, 481, 480, 480, 479, 479, 486, 486,
	466, 466, 467, 467, 467, 482, 482, 483, 483, 484,
	484, 468, 468, 468, 468, 469, 469, 470, 471, 471,
	485, 485, 517, 517, 517, 517, 518, 518, 525, 519,
	520, 520, 521, 438, 438, 438, 438, 438, 472, 472,
	473, 473, 523, 523, 524, 524, 432, 432, 433, 400,
	400, 401, 399, 399, 399, 402, 402, 403, 403, 403,
	403, 528, 528, 528, 528, 528, 528, 528, 528, 528,
	528, 528, 526, 526, 526, 526, 233, 233, 236, 236,
	228, 228, 566, 566, 566, 566, 566, 566, 566, 566,
	566, 568, 568, 568, 232, 232, 9, 9, 9, 9,
	570, 570, 426, 426, 426, 567, 567, 567, 567, 567,
	569, 569, 569, 569, 427, 427, 371, 371, 371, 371,
	371, 371, 389, 389, 30, 30, 31, 32, 32, 35,
	35, 35, 35, 36, 36, 37, 37, 37, 37, 390,
	391, 391, 392, 392, 444, 444, 445, 490, 490, 490,
	490, 487, 487, 489, 488, 488, 446, 491, 491, 447,
	447, 448, 449, 492, 492, 496, 496, 497, 497, 497,
	497, 497, 498, 498, 499, 499, 500, 500, 501, 501,
	450, 502, 502, 451, 451, 452, 452, 504, 504, 509,
	509, 509, 453, 453, 453, 454, 454, 454, 454, 505,
	505, 510, 510, 510, 510, 510, 510, 510, 242, 242,
	455, 456, 456, 456, 456, 456, 456, 456, 456, 456,
	457, 457, 457, 503, 503, 503, 458, 513, 513, 506,
	506, 511, 511, 511, 511, 511, 493, 493, 571, 571,
	571, 572, 572, 459, 460, 460, 507, 507, 512, 512,
	461, 462, 508, 508, 508, 508, 463, 463, 494, 494,
	514, 514, 515, 515, 516, 516, 41, 41, 41, 40,
	40, 155, 155, 158, 158, 158, 158, 158, 161, 162,
	163, 164, 159, 159, 156, 157, 157, 160, 160, 123,
	123, 124, 124, 126, 128, 128, 128, 127, 129, 129,
	125, 125, 130, 130, 130, 130, 131, 131, 132, 132,
	132, 132, 132, 133, 133, 133, 133, 133, 43, 43,
	43, 43, 42, 42, 44, 44, 44, 44, 44, 44,
	45, 45, 46, 46, 47, 48, 48, 48, 49, 49,
	50, 50, 51, 51, 413, 413, 413, 413, 413, 413,
	413, 413, 413, 413, 413, 413, 414, 414, 584, 584,
	584, 423, 423, 423, 415, 421, 419, 416, 416, 417,
	417, 417, 417, 422, 422, 420, 418, 418, 418, 418,
	418, 418, 428, 428, 429, 429, 424, 424, 424, 424,
	424, 424, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 431, 431, 120, 121, 121,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 0, 2, 0,
	3, 0, 2, 0, 1, 0, 2, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 2, 3, 0, 1, 3,
	1, 0, 3, 3, 4, 4, 4, 4, 3, 2,
	1, 1, 2, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 5, 3, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 3,
	3, 2, 2, 3, 5, 4, 6, 3, 5, 4,
	6, 4, 6, 5, 7, 3, 2, 4, 2, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 3, 4, 4, 6, 3, 3, 4, 3,
	4, 4, 5, 4, 5, 1, 1, 3, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 5, 6, 3, 4, 1, 1,
	2, 4, 1, 1, 1, 2, 2, 2, 2, 1,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 6, 2, 3, 5,
	1, 1, 1, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 4, 1, 2, 1, 2, 1, 0, 2, 2,
	3, 5, 0, 2, 4, 3, 1, 5, 1, 1,
	4, 1, 4, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 6, 4, 4, 6, 4, 4,
	4, 4, 4, 6, 5, 5, 5, 4, 6, 4,
	4, 4, 4, 5, 7, 7, 9, 4, 6, 5,
	5, 7, 7, 4, 7, 4, 6, 6, 4, 5,
	4, 5, 3, 11, 8, 9, 8, 1, 0, 5,
	5, 3, 3, 5, 3, 2, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 7, 5, 3, 4,
	1, 3, 3, 1, 2, 2, 0, 1, 2, 0,
	2, 3, 3, 3, 4, 0, 1, 1, 1, 1,
	2, 3, 4, 5, 6, 8, 6, 6, 1, 3,
	1, 3, 3, 5, 1, 0, 1, 2, 4, 2,
	0, 3, 3, 2, 1, 3, 4, 3, 5, 4,
	3, 5, 1, 1, 1, 1, 4, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	3, 2, 3, 2, 0, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 3,
	3, 0, 2, 3, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 1, 3, 3, 2, 4,
	1, 5, 2, 5, 2, 5, 2, 1, 3, 3,
	0, 1, 0, 3, 0, 1, 4, 1, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 0, 5, 0, 5,
	0, 0, 1, 1, 3, 1, 1, 1, 3, 3,
	1, 1, 1, 2, 4, 4, 2, 3, 5, 5,
	1, 3, 1, 0, 1, 2, 3, 2, 4, 2,
	3, 2, 0, 1, 2, 0, 9, 9, 2, 1,
	4, 4, 4, 1, 0, 1, 3, 3, 2, 1,
	1, 2, 0, 1, 3, 2, 3, 2, 3, 1,
	4, 2, 3, 2, 3, 2, 3, 1, 1, 2,
	2, 4, 1, 2, 3, 3, 4, 5, 4, 5,
	4, 2, 2, 2, 1, 1, 0, 5, 2, 2,
	2, 3, 1, 0, 1, 3, 9, 1, 2, 0,
	7, 7, 0, 10, 6, 0, 4, 5, 2, 0,
	2, 4, 0, 1, 1, 0, 5, 2, 4, 1,
	1, 4, 5, 4, 0, 2, 0, 1, 0, 1,
	5, 1, 0, 2, 0, 2, 6, 2, 0, 1,
	3, 2, 4, 0, 1, 3, 2, 1, 0, 1,
	3, 3, 2, 0, 2, 2, 2, 3, 3, 4,
	1, 3, 3, 2, 7, 12, 1, 3, 2, 3,
	3, 1, 2, 2, 2, 2, 1, 2, 13, 2,
	2, 0, 2, 0, 1, 3, 3, 1, 3, 1,
	3, 3, 3, 3, 3, 0, 3, 3, 0, 3,
	0, 7, 7, 3, 0, 2, 1, 1, 1, 1,
	1, 1, 2, 2, 1, 3, 3, 6, 0, 3,
	0, 2, 3, 2, 3, 4, 4, 3, 3, 0,
	5, 2, 5, 2, 0, 4, 2, 1, 0, 1,
	0, 1, 3, 3, 6, 7, 5, 7, 9, 2,
	0, 7, 1, 3, 1, 4, 4, 7, 2, 1,
	1, 1, 3, 2, 8, 1, 3, 3, 5, 2,
	1, 3, 7, 2, 0, 10, 1, 2, 9, 11,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 3,
	0, 1, 3, 2, 0, 1, 1, 3, 3, 1,
	1, 3, 3, 3, 3, 4, 4, 3, 3, 2,
	1, 3, 2, 1, 1, 1, 1, 3, 0, 1,
	3, 1, 1, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 2, 2, 1, 3, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 0, 2, 0, 1, 0, 1, 0, 1, 0,
	1, 0, 1, 0, 1, 0, 4, 4, 4, 5,
	5, 2, 5, 3, 5, 2, 0, 3, 1, 2,
	5, 5, 8, 3, 4, 8, 5, 0, 4, 3,
	0, 1, 3, 1, 3, 2, 2, 4, 4, 5,
	2, 0, 1, 1, 0, 2, 2, 0, 2, 0,
	13, 16, 12, 15, 14, 17, 1, 1, 2, 2,
	2, 2, 1, 0, 1, 0, 1, 3, 1, 1,
	1, 3, 3, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 1, 0, 2,
	2, 1, 0, 3, 0, 1, 3, 1, 1, 2,
	4, 6, 6, 10, 1, 2, 1, 3, 4, 0,
	1, 3, 2, 1, 1, 6, 2, 0, 3, 1,
	1, 2, 1, 2, 2, 2, 2, 3, 0, 1,
	2, 1, 2, 1, 3, 2, 3, 1, 2, 2,
	2, 1, 2, 3, 1, 2, 2, 2, 2, 3,
	3, 3, 1, 3, 1, 1, 0, 1, 1, 0,
	1, 0, 3, 0, 2, 1, 4, 4, 5, 2,
	5, 5, 7, 3, 1, 5, 9, 3, 9, 4,
	11, 10, 2, 0, 1, 3, 3, 6, 4, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 3, 3, 4, 0, 1, 0,
	6, 1, 3, 3, 3, 5, 2, 0, 3, 4,
	4, 0, 2, 0, 4, 0, 3, 16, 19, 1,
	0, 2, 0, 4, 0, 1, 3, 2, 0, 4,
	6, 4, 6, 4, 4, 6, 4, 6, 5, 7,
	5, 7, 4, 6, 10, 13, 10, 13, 11, 14,
	1, 3, 1, 0, 1, 3, 1, 1, 1, 1,
	1, 2, 5, 3, 6, 4, 6, 6, 9, 5,
	7, 6, 6, 5, 5, 5, 5, 9, 4, 5,
	7, 6, 4, 8, 4, 2, 4, 3, 6, 4,
	3, 3, 3, 2, 2, 3, 4, 4, 3, 3,
	3, 3, 3, 3, 4, 4, 3, 2, 3, 2,
	2, 3, 4, 3, 2, 2, 3, 4, 4, 4,
	5, 1, 4, 4, 4, 3, 3, 2, 1, 0,
	6, 4, 6, 4, 6, 8, 4, 6, 4, 6,
	5, 7, 2, 3, 3, 2, 5, 1, 1, 2,
	3, 2, 1, 1, 2, 1, 2, 1, 1, 1,
	2, 1, 2, 1, 1, 1, 3, 3, 3, 3,
	2, 2, 2, 3, 5, 5, 5, 2, 1, 3,
	6, 6, 6, 6, 6, 8, 8, 6, 6, 7,
	9, 9, 8, 10, 6, 6, 6, 6, 6, 6,
	6, 8, 6, 8, 6, 8, 7, 9, 6, 8,
	7, 9, 8, 10, 8, 10, 9, 11, 8, 10,
	9, 11, 8, 8, 7, 6, 6, 6, 6, 8,
	8, 8, 8, 6, 9, 0, 2, 2, 1, 2,
	2, 2, 2, 3, 1, 3, 3, 1, 5, 3,
	9, 12, 7, 7, 3, 2, 1, 3, 1, 3,
	3, 3, 3, 2, 2, 1, 1, 1, 1, 2,
	1, 1, 1, 4, 5, 1, 0, 1, 2, 2,
	2, 2, 1, 1, 1, 3, 3, 5, 1, 4,
	0, 2, 3, 0, 1, 1, 4, 5, 1, 1,
	1, 1, 3, 3, 2, 2, 1, 2, 2, 2,
	2, 1, 2, 2, 1, 17, 21, 1, 1, 2,
	1, 3, 1, 1, 1, 3, 1, 2, 0, 1,
	2, 4, 1, 1, 1, 1, 1, 3, 0, 1,
	0, 1, 1, 4, 0, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 2, 0, 9, 11, 12, 14,
	3, 0, 3, 4, 4, 0, 6, 4, 9, 7,
	6, 4, 6, 6, 5, 7, 9, 6, 6, 5,
	4, 4, 3, 6, 6, 6, 6, 4, 7, 5,
	8, 7, 8, 6, 5, 8, 1, 0, 1, 0,
	4, 6, 5, 8, 2, 0, 2, 2, 2, 1,
	5, 2, 0, 2, 6, 6, 6, 10, 6, 6,
	6, 9, 9, 6, 6, 9, 6, 7, 7, 6,
	2, 2, 2, 2, 1, 2, 1, 0, 1, 2,
	10, 13, 5, 4, 4, 2, 0, 2, 2, 1,
	0, 11, 14, 12, 15, 8, 11, 8, 7, 9,
	1, 1, 3, 3, 5, 6, 1, 3, 1, 3,
	1, 3, 3, 7, 9, 9, 8, 6, 1, 0,
	1, 3, 3, 1, 5, 3, 8, 11, 6, 1,
	0, 5, 2, 3, 0, 2, 0, 1, 1, 1,
	1, 1, 3, 3, 2, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 2, 2, 1, 2,
	2, 2, 2, 1, 1, 0, 1, 1, 1, 1,
	1, 1, 2, 0, 2, 0, 4, 1, 3, 1,
	2, 2, 2, 1, 1, 1, 1, 1, 3, 3,
	1, 3, 1, 3, 11, 13, 5, 1, 2, 2,
	1, 1, 3, 5, 1, 3, 7, 2, 0, 5,
	5, 10, 8, 2, 0, 2, 0, 1, 1, 1,
	1, 1, 2, 0, 2, 0, 4, 0, 5, 0,
	8, 1, 1, 8, 11, 6, 8, 1, 3, 1,
	1, 3, 4, 7, 6, 5, 5, 5, 5, 1,
	3, 4, 4, 4, 3, 4, 3, 1, 4, 0,
	8, 5, 5, 6, 7, 7, 7, 4, 4, 5,
	11, 10, 10, 2, 2, 0, 13, 2, 0, 1,
	3, 5, 5, 3, 6, 2, 1, 0, 2, 4,
	0, 1, 3, 6, 8, 8, 1, 3, 5, 5,
	10, 10, 11, 11, 5, 5, 6, 10, 1, 0,
	2, 0, 1, 0, 2, 2, 1, 1, 0, 4,
	0, 1, 3, 1, 1, 1, 1, 1, 2, 4,
	4, 5, 2, 0, 3, 1, 3, 4, 3, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 3, 3, 3, 0, 1, 4, 2, 2,
	2, 2, 2, 3, 2, 2, 3, 0, 2, 2,
	1, 1, 1, 0, 2, 4, 5, 6, 4, 5,
	2, 3, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 2, 3,
	2, 5, 4, 3, 3, 3, 3, 3, 1, 1,
	0, 2, 3, 0, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 0, 3, 6, 3, 5, 3, 5,
	3, 5, 2, 0, 2, 0, 1, 2, 2, 2,
	3, 3, 2, 2, 3, 3, 1, 1, 3, 3,
	2, 1, 1, 6, 4, 0,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -414, -165, -171, -172, -173,
	-174, -175, -176, -177, -178, -179, -180, -407, -408, -409,
	-432, -433, -434, -435, -436, -437, -438, -439, -440, -441,
	-442, -443, -464, -465, -466, -467, -468, -469, -470, -471,
	-444, -445, -446, -447, -448, -449, -450, -451, -452, -453,
	-454, -455, -456, -457, -458, -459, -460, -461, -462, -463,
	-411, -412, -413, -415, -416, -417, -418, -419, -420, -421,
	266, 212, -167, -168, -256, 111, 26, 22, 27, 394,
	93, 401, 191, 436, 228, 407, 413, 397, 378, -170,
	-169, -255, 531, 63, 67, -263, 36, 518, 86, 540,
	-584, 486, 457, -584, 96, 97, 98, 99, 531, -214,
	115, -372, -335, -27, 33, 414, 261, 62, 464, 454,
	225, 276, 284, 422, 103, -400, 268, 449, 375, 194,
	438, 387, 443, 512, -493, 406, 71, 453, 451, 58,
	289, 473, 471, 40, 67, 307, 419, 480, 85, 284,
	199, 225, 236, 247, 261, 286, 71, -495, 62, 375,
	385, 387, 409, 414, 422, 443, 412, 460, 268, 406,
	103, 449, 438, 454, 464, 276, 384, -367, -370, -369,
	464, 261, 307, 103, 406, 71, 67, 419, 480, 85,
	284, 225, 236, 438, 454, 194, 268, 276, -495, 387,
	414, 422, 375, 412, 460, 85, -527, 58, 423, 457,
	-528, -526, -233, 56, 217, 414, 347, 406, 488, -5,
	4, -19, -20, 191, 192, 193, 194, 195, 196, 197,
	198, 199, 200, 22, 201, 203, 204, 205, 55, 206,
	207, 208, 210, 211, 212, 88, 70, 213, 214, 215,
	24, 216, 218, 219, 220, 221, 222, 223, 123, 226,
	227, 228, 229, 230, 141, 231, 101, 232, 233, 234,
	235, 236, 111, 237, 154, 238, 120, 121, 90, 246,
	247, 248, 249, 250, 251, 253, 254, 98, 149, 150,
	255, 89, 256, 257, 258, 259, 260, 261, 176, 27,
	262, 138, 264, 148, 265, 267, 136, 42, 268, 270,
	271, 272, 273, 274, 275, 276, 277, 279, 281, 282,
	91, 283, 153, 165, 285, 286, 287, 288, 289, 291,
	294, 295, 151, 296, 297, 298, 28, 299, 300, 301,
	302, 303, 304, 305, 306, 307, 308, 309, 310, 312,
	313, 314, 96, 315, 317, 318, 145, 503, 319, 320,
	321, 322, 92, 324, 327, 328, 329, 332, 333, 334,
	335, 336, 337, 105, 85, 338, 99, 340, 341, 342,
	343, 344, 345, 346, 131, 348, 349, 350, 351, 352,
	353, 354, 357, 110, 358, 359, 32, 139, 122, 504,
	505, 502, 144, 62, 506, 507, 124, 501, 508, 102,
	364, 365, 366, 367, 368, 369, 370, 129, 371, 128,
	373, 374, 375, 377, 378, 379, 380, 382, 383, 384,
	385, 386, 112, 387, 152, 143, 388, 389, 390, 391,
	84, 132, 393, 394, 395, 396, 397, 398, 399, 34,
	400, 401, 402, 35, 403, 404, 405, 407, 408, 409,
	410, 127, 412, 413, 146, 415, 416, 87, 417, 418,
	419, 420, 421, 422, 93, 425, 427, 428, 429, 430,
	431, 107, 433, 434, 435, 436, 437, 438, 113, 114,
	439, 440, 441, 147, 442, 443, 445, 446, 104, 448,
	449, 108, 451, 452, 453, 454, 455, 458, 460, 462,
	463, 464, 465, 466, 467, 468, 142, 469, 50, 472,
	473, 474, 97, 475, 476, 477, 478, 155, 183, 479,
	480, 481, 482, 483, 485, 168, 486, 140, 487, 498,
	499, 57, 37, 173, 169, 189, 179, 178, 224, 188,
	187, 29, 278, 175, 292, 293, 500, 186, 171, 185,
	166, 160, 162, 163, 159, 161, 156, 164, 158, 126,
	157, 325, 339, 181, 182, 355, 356, 360, 170, 361,
	362, 376, 177, 174, 411, 426, 172, 444, 184, 459,
	461, 86, 180, 489, 490, 491, 492, 493, 133, 494,
	495, 496, 497, 125, -530, -529, 56, 457, 423, -233,
	21, 217, 58, 347, 406, 414, 488, -584, 457, -584,
	379, -584, 379, -5, 423, 457, 56, 413, -5, 457,
	-156, -117, 470, 316, 269, 509, -169, -170, -168, -167,
	-168, -255, -247, -248, 21, 41, -396, -394, -397, -5,
	66, 541, -257, 84, -259, -7, -5, -257, 531, -3,
	-423, 30, -427, -426, -567, 318, 389, 252, 31, 73,
	-398, -396, 64, 73, -166, -165, -394, 67, 480, 84,
	419, 307, 286, 385, 460, 117, 199, 458, -494, 463,
	34, -18, -5, 28, -15, -5, -142, 221, 279, -145,
	-5, 11, -146, 534, 535, 536, 537, 538, 539, 525,
	526, 527, 18, 19, 20, -15, 87, -15, 28, -7,
	28, 246, 67, -7, 28, 336, -11, -430, -9, 241,
	245, 424, 4, -19, -20, -21, 209, 115, 225, 25,
	81, 242, 116, 79, 44, 76, 52, 53, 75, 77,
	46, 82, 54, 80, 363, 78, 48, 450, 118, 85,
	460, -7, -7, 340, -358, 28, -15, -7, -7, 531,
	236, -11, -11, 453, 451, 453, 451, -396, 28, 21,
	-394, 28, 21, -394, 28, -394, 28, 480, 67, 246,
	-405, -533, -91, -5, 4, -19, -21, -15, -15, -7,
	-15, -404, -533, -11, -430, 321, 221, 279, -7, 28,
	-404, -7, -404, -7, -7, -7, -7, -7, 460, -11,
	-430, 21, -11, 336, -430, 21, -7, -15, 28, 87,
	-15, -7, 28, -17, -15, 28, -13, -7, -7, 28,
	-230, 28, -95, -96, -98, -99, -105, -101, -104, -91,
	186, 171, 172, 173, 174, 175, 176, 187, 188, 170,
	189, -106, -107, -102, -103, 184, 56, 4, -19, 169,
	-92, 178, 179, 180, 181, 182, -230, 28, 25, 336,
	-361, 28, -430, -361, 28, -361, 28, 480, 246, 67,
	87, 340, 460, 321, 480, -527, 423, -527, 219, 209,
	-426, 431, 64, 61, 527, 533, 57, -90, 7, -90,
	-568, -90, 40, -232, -9, -90, 506, 57, 318, 209,
	-423, -427, -423, -90, -423, 61, -90, -5, -90, -134,
	-43, -136, 130, -44, -45, -138, 68, 280, 69, -139,
	-41, 21, 41, -41, -41, 70, -156, -117, 532, 532,
	-235, -234, -237, -52, 536, -54, 534, 535, -141, 31,
	516, -116, 471, 40, -56, -55, 13, 531, -59, -57,
	-168, 29, 134, -65, -66, 293, 11, 62, 411, -5,
	-88, 6, -90, 49, 43, 47, 9, 10, -533, -573,
	-97, 38, -118, -293, -58, 12, -99, -574, -575, -104,
	-576, 185, 161, 162, 225, 240, 243, 244, 330, 331,
	241, 245, 424, 447, 103, 239, 242, 512, 278, 356,
	362, 376, 444, 459, 461, 360, 224, 292, 325, 490,
	491, 493, 494, 492, 495, 496, 159, 160, 166, 164,
	158, 339, 156, 163, 157, 497, 173, 169, 189, 179,
	178, 188, 187, 175, 186, 171, 181, 182, 170, 174,
	172, 56, 184, 180, -106, -107, -102, -103, -234, 74,
	536, -83, -86, 533, 529, -394, 531, 531, 541, -257,
	-24, 531, -115, -52, 218, 354, 541, -567, 327, 66,
	487, 252, -395, -394, 93, -5, 23, -398, -398, 532,
	-221, 531, -394, 28, -394, 480, -394, 28, -28, 25,
	-533, -533, -7, 460, -533, 130, -495, -372, 473, 209,
	-402, 31, -522, 23, -109, 533, -390, 531, -15, -15,
	533, -390, 23, 368, 257, 452, 231, -390, 64, 31,
	-29, 36, 518, 31, 140, -394, 28, -482, 464, 31,
	130, 28, -29, 480, -7, -491, 365, 74, -7, -24,
	31, -389, 130, 36, 232, -95, -15, -29, -29, -360,
	-363, 398, -362, 207, 256, 196, 22, 27, 477, 93,
	223, 264, 258, 309, 354, 122, 31, 365, 401, 400,
	153, -31, 507, 29, 45, -360, -364, 398, 207, 29,
	45, -360, 398, -383, -386, 354, 23, 213, 90, 305,
	335, 338, 342, 364, 419, 436, 402, 473, 29, -360,
	398, 29, -394, 28, 21, -396, 28, 140, 398, -38,
	531, -83, 398, 398, 398, 398, -366, 27, 93, 196,
	477, 398, -38, 398, -431, 196, 27, -7, -15, -15,
	74, 29, 398, 398, 93, 196, 27, 398, 398, 398,
	-483, -31, 479, 398, 93, 232, 394, 196, 27, 264,
	258, 430, 74, 74, -7, 398, -29, -422, 45, -422,
	398, 130, -29, -422, -422, 398, 93, 401, 398, 93,
	29, 368, 257, 452, 231, 398, 196, 27, 97, -431,
	29, 541, -393, 24, 35, 29, 541, -393, 74, 29,
	541, -393, 29, -110, -109, 531, -100, 531, 177, -110,
	-110, -110, 531, -113, 518, 519, 531, -113, -114, 183,
	531, -114, -114, 178, 179, -114, -393, 29, -17, 28,
	130, 28, 541, 29, 29, 29, 140, 368, 257, 452,
	231, -28, 219, 23, -232, 40, -90, 120, -236, 40,
	-228, -231, -227, 49, 43, 74, -232, 6, 534, 535,
	-89, -88, -236, 40, -5, -566, -90, 4, -227, 40,
	58, 49, 43, 74, 504, -570, 260, 234, 327, 413,
	-5, -42, -43, -135, -134, -138, 130, 389, 97, 354,
	427, 503, -45, -44, -46, -52, 21, -51, 91, 349,
	-47, -48, -52, -54, 534, 535, -137, 122, -169, -169,
	-169, -157, -160, -52, -134, -43, -250, 73, 541, 14,
	39, 55, 534, 535, 536, 537, 538, 539, 525, 526,
	527, 18, 19, 20, -141, 30, 33, 46, 516, 44,
	48, 52, 53, 54, 37, 45, -144, 23, -8, 11,
	62, -145, 4, -23, 191, 192, 193, 194, 195, 196,
	197, 198, 199, 21, 200, 22, 201, 202, 119, 510,
	94, 203, 204, 205, 60, 206, 207, 208, 209, 210,
	211, 212, 173, 115, 169, 189, 511, 88, 70, 213,
	214, 215, 24, 216, 38, 512, 217, 218, 219, 513,
	220, 221, 222, 223, 224, 225, 514, 123, 226, 227,
	228, 229, 230, 25, 141, 231, 101, 232, 117, 233,
	234, 235, 236, 111, 237, 81, 154, 238, 120, 239,
	240, 241, 242, 243, 244, 245, 121, 90, 246, 247,
	249, 188, 187, 250, 40, 251, 252, 253, 254, 98,
	149, 150, 255, 89, 95, 256, 257, 258, 259, 41,
	109, 260, 261, 176, 27, 262, 263, 138, 264, 148,
	265, 266, 267, 136, 42, 268, 270, 271, 272, 273,
	29, 274, 275, 276, 277, 278, 43, 279, 282, 91,
	175, 283, 153, 284, 165, 285, 116, 79, 286, 287,
	288, 289, 291, 292, 293, 294, 295, 151, 296, 298,
	28, 299, 300, 301, 302, 303, 304, 305, 306, 307,
	308, 309, 310, 311, 312, 76, 500, 313, 314, 96,
	315, 186, 171, 185, 317, 318, 75, 166, 160, 162,
	163, 159, 161, 156, 164, 158, 126, 157, 145, 503,
	319, 320, 321, 322, 92, 323, 326, 324, 325, 77,
	327, 328, 329, 58, 330, 331, 332, 333, 334, 335,
	336, 337, 105, 85, 338, 99, 339, 340, 342, 343,
	345, 346, 347, 181, 82, 182, 131, 348, 349, 350,
	351, 352, 353, 354, 355, 356, 357, 31, 110, 358,
	359, 47, 360, 32, 170, 139, 122, 504, 505, 502,
	144, 66, 506, 507, 124, 501, 361, 80, 362, 102,
	364, 365, 366, 367, 368, 369, 370, 129, 371, 128,
	372, 373, 374, 375, 376, 377, 378, 379, 380, 381,
	382, 383, 384, 385, 386, 112, 387, 152, 143, 388,
	389, 174, 390, 391, 84, 132, 392, 393, 394, 395,
	396, 397, 398, 399, 34, 400, 401, 402, 35, 403,
	404, 405, 78, 406, 407, 408, 409, 410, 411, 127,
	412, 413, 146, 414, 415, 416, 87, 418, 63, 419,
	420, 421, 422, 423, 424, 93, 426, 425, 427, 428,
	429, 430, 172, 431, 432, 107, 433, 434, 435, 436,
	437, 438, 113, 114, 439, 440, 441, 147, 442, 443,
	444, 445, 59, 446, 104, 447, 67, 448, 450, 449,
	108, 451, 452, 453, 454, 106, 455, 56, 184, 456,
	457, 458, 459, 460, 461, 49, 462, 463, 464, 465,
	466, 467, 468, 142, 469, 471, 50, 472, 473, 474,
	97, 103, 83, 475, 476, 477, 478, 155, 86, 180,
	190, 118, 479, 480, 481, 482, 51, 483, 486, 140,
	487, 488, 489, 490, 491, 492, 493, 133, 494, 495,
	496, 497, 125, 499, 57, -52, -52, -52, -52, -52,
	363, -336, 32, -84, -52, -115, -168, 86, -83, -168,
	-168, -64, 529, 531, 531, 531, -83, -90, 531, -90,
	-90, 531, -60, -52, -122, 485, -119, 281, 531, 531,
	130, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, -250, 531, -86, -93, 536, -6,
	4, -19, -20, -21, -22, 21, 202, 119, 30, 510,
	134, 23, 94, 60, 511, 38, 512, 513, 39, 514,
	117, 26, 239, 240, 241, 243, 244, 245, 40, 252,
	95, 41, 109, 263, 266, 269, 43, 280, 130, 284,
	64, 290, 71, 72, 45, 311, 316, 73, 323, 326,
	68, 330, 331, 31, 47, 69, 74, 66, 33, 509,
	372, 381, 392, 100, 63, 424, 432, 59, 447, 67,
	106, 61, 456, 49, 470, 471, 103, 83, 190, 51,
	65, 484, 36, -52, -87, -394, -115, -259, 23, -13,
	541, 532, 39, 55, 30, 33, 46, 44, 48, 52,
	37, 45, 62, 218, -567, -569, 389, 399, 421, -181,
	-165, 102, 531, 40, 23, -183, -189, -187, 531, -5,
	-5, -258, 83, 83, 61, -206, 64, 61, -14, -5,
	531, 122, 370, 31, -221, -394, -474, -383, 354, 31,
	-18, 28, -5, -534, 531, -534, -549, 211, 198, 315,
	-7, -517, -519, 531, -95, 321, 480, 84, -430, -403,
	-176, -177, -408, -409, 26, 29, -95, 533, -93, -391,
	-392, -6, -493, 83, -142, 531, 267, 388, -15, -15,
	-15, -15, -15, 29, -475, 29, -7, 531, 370, 31,
	-484, -483, -90, 29, -485, -430, 103, 31, -428, -401,
	28, -394, 74, 332, -430, -394, 464, 74, 29, 21,
	-505, -510, 67, 448, -5, -397, 242, -394, -390, -90,
	23, 130, -428, -428, 541, 61, -580, 117, 514, 370,
	370, -315, 28, 514, -316, -5, 117, -332, 513, 471,
	381, 284, 270, -580, 117, -580, 117, 117, 168, 335,
	473, 194, 449, -348, 531, 74, 460, 201, 400, 412,
	411, 460, 412, 411, -394, 309, 153, -15, 122, 61,
	-348, 298, 411, 531, -396, 449, 61, 370, -394, 449,
	61, -386, 90, 338, 342, -96, -227, -579, 70, -227,
	-227, 70, 346, -29, -29, -394, 61, -580, -394, -360,
	398, 29, 45, -360, 398, 29, -7, 61, 532, 61,
	61, 61, 61, 117, 40, 31, 117, 40, 31, -523,
	117, -524, 513, 31, 117, 61, 61, 103, 398, 83,
	83, -394, -7, 61, 61, -390, -505, -505, -505, 61,
	61, 61, -31, -90, 47, 61, -390, 387, -90, 387,
	387, 387, -390, -394, -394, 398, -490, 264, 258, 61,
	-429, -531, 93, -412, 247, -531, 61, -485, -429, -531,
	-531, 61, -348, -348, 61, 438, -15, -15, -15, -15,
	-15, 61, 208, 155, 155, 155, -476, -368, -367, 199,
	512, 261, 286, 62, 385, 409, 458, 464, -370, 247,
	406, 443, 449, 307, -17, -15, -13, -7, -15, -7,
	-95, -230, -110, -115, -88, -88, 56, 56, -88, 531,
	-88, -114, -114, -230, -393, 29, -485, 29, -430, -361,
	-361, -361, -394, 457, 541, -88, 6, -88, 6, -5,
	66, 503, 427, 541, -48, -50, -54, 534, 535, 411,
	127, 531, -50, 411, 127, -49, -88, 6, -49, -140,
	359, 430, -16, -394, 541, 83, -149, 94, 95, -42,
	-135, -238, 64, -388, 453, 451, 58, 289, 473, 67,
	-394, -237, -95, -15, 56, 58, -52, -52, -52, -52,
	-52, -52, -52, -52, -52, -52, -52, -52, -52, -52,
	-52, -52, 46, 44, 48, 37, 45, -52, 61, 47,
	31, 49, 43, 50, 41, 260, 357, -153, -152, 350,
	351, 352, 353, 166, -148, 59, 60, -147, -168, 531,
	-151, 510, 432, 21, -6, 531, -116, 411, 531, -168,
	41, 31, -86, 532, 541, -115, -67, 530, -64, -115,
	-142, -115, 532, -69, 532, 536, 190, 21, 41, -82,
	-52, -94, -91, -111, 498, 344, 248, 297, 341, -112,
	417, -88, -63, -62, 51, -119, 71, -128, 508, 531,
	-294, -54, -52, -289, -52, 531, -88, -88, -88, -88,
	-52, -74, -12, 4, 498, 344, 248, 297, 341, 417,
	-90, -52, -75, -70, -52, -69, -76, -53, -54, 534,
	535, -141, 411, -72, -70, -52, -52, 511, 326, 456,
	-73, -52, 64, -115, -52, -115, -115, -115, -115, 346,
	-77, -188, -52, -570, -54, 346, -52, -69, -295, -299,
	-294, 100, -52, -292, -167, -299, -289, -168, -289, -52,
	-289, 532, -289, -289, -289, -570, -238, -115, 530, 542,
	532, 532, -260, 85, 31, 532, -52, 468, 229, 389,
	-190, 74, -203, 103, 104, -182, -186, -5, 86, -5,
	-238, 541, 527, -184, -187, -84, -191, 65, -239, -240,
	-396, -168, 323, -251, 531, -264, -274, -284, -265, 127,
	125, 126, -5, -118, -58, -293, -533, 166, -240, -207,
	112, -207, 541, 532, -310, -311, -314, -315, -317, -316,
	46, -15, 122, 29, -359, 36, 531, 29, 74, 31,
	404, -541, -542, -544, 23, 321, 458, 484, -545, 215,
	441, 300, 434, 482, 277, 418, 324, 31, 237, 127,
	445, -532, 366, 93, -412, -535, 532, -536, -537, -539,
	-94, -108, 45, 361, 500, 190, -91, -95, 426, -541,
	404, -551, -550, 96, 98, 97, 462, 122, 198, -390,
	536, -518, 509, -520, -525, -521, -537, 4, 321, -7,
	-394, 480, -402, -372, -27, -18, -5, -329, -93, 532,
	541, 527, 130, -7, -267, -266, -268, -5, 531, -390,
	-390, -390, -390, -390, -15, -477, 414, 479, 64, 24,
	-7, -479, -480, -481, 295, 354, 478, -310, 122, 29,
	284, -7, 422, 29, -424, -425, 446, 197, 406, 45,
	371, 265, 469, 309, 4, 232, 476, 103, 23, 31,
	-221, -6, 7, -492, 23, -502, 307, 67, -504, -509,
	-5, -265, 531, -15, 448, -389, 541, -396, 45, -83,
	-221, -221, 387, -95, -90, -362, -7, -7, -7, -394,
	-394, 31, -315, 28, -95, -7, 531, -336, -354, 83,
	503, 503, -355, 83, -5, -88, -7, 28, -5, 28,
	-7, -7, 505, 223, 340, -7, -349, -350, -6, -7,
	-7, 21, 103, 460, 412, 460, 412, -7, 327, -7,
	21, 103, -7, 327, -394, 411, -430, -37, 110, 79,
	40, 83, 327, -32, -35, -380, 93, 196, 27, -10,
	-6, -360, -363, 398, -7, -7, -394, -360, 398, -7,
	-7, -227, -15, -15, -227, -227, -360, 398, -383, -7,
	-7, -360, 398, 61, -580, -394, 449, 61, -580, -396,
	398, -479, -480, -7, -7, -7, -7, -7, -7, 47,
	-7, 28, -52, 47, -7, 531, 47, -7, -7, -11,
	-361, 61, -7, -7, 398, -499, 61, 74, -7, -7,
	-7, -7, -7, -7, -13, -389, -13, -13, 398, 398,
	61, 400, 201, -11, -425, -527, -7, -11, 422, -7,
	-7, -34, -89, 40, 534, 535, 93, 398, 398, 398,
	398, -7, -7, -90, -26, 28, -90, -478, 61, -7,
	-15, -405, 531, -95, -404, -406, 221, 279, -142, -404,
	-404, 130, -95, -393, -393, -393, 74, -393, 532, 532,
	532, 57, 57, 532, -115, 532, -393, -17, 422, 130,
	-399, 36, -426, -228, 97, -47, -50, 66, 36, -88,
	6, 531, -115, 334, 541, -160, -143, -145, 62, -150,
	517, -241, 65, -239, -577, 67, -577, 453, 451, 453,
	451, -577, -394, 57, 42, -52, -52, 61, -148, 59,
	-147, 42, -52, 47, 49, 43, 50, 41, 260, 357,
	-153, -152, 64, 357, -154, 36, 168, 155, 134, 139,
	146, -53, -53, -115, -168, 531, -142, 531, -115, 41,
	-84, -52, 530, 530, 541, 532, 532, 532, -117, 541,
	-156, 532, -82, -69, -69, 16, 17, 61, 61, 61,
	61, 531, 532, -61, -62, 263, -52, -128, 531, -127,
	-5, 531, 65, -296, 47, 192, 155, 542, -298, 509,
	-308, -307, 515, -52, 532, 532, 532, 532, 23, 532,
	64, 532, 541, 532, 532, 372, 541, 532, 14, 534,
	535, 536, 537, 538, 539, 525, 526, 527, 18, 19,
	20, -141, 52, 45, 62, -53, -53, -53, 532, 532,
	48, 64, 130, 23, -73, -73, -73, 532, 64, -115,
	541, 532, 532, 532, 532, -6, 532, 541, 23, -52,
	-280, 129, -6, 541, 532, -296, 541, 532, -95, -297,
	541, 47, 192, -308, 532, -154, 532, -299, 541, 541,
	541, -52, -241, 532, -87, -52, 531, 85, -192, 100,
	101, 155, 532, 541, -84, -191, -189, -52, 532, 541,
	-192, -52, 120, 541, 81, -252, 75, 82, 79, 77,
	78, 76, -244, -243, 23, -5, -244, -168, -264, -274,
	-284, -168, -251, -240, -246, -243, 23, -5, -244, -244,
	-273, 518, 64, 531, 531, -83, 531, 74, -213, -90,
	113, 114, -213, -5, 532, 541, -394, -312, 531, -394,
	-394, 23, -348, -14, -394, -396, 29, -540, 67, 47,
	-108, -91, -547, -410, 212, 403, -544, -546, -90, -232,
	-543, 130, 74, 418, 254, 317, 324, -227, -227, -15,
	-5, -528, 423, 457, 532, 541, 40, 527, -94, -108,
	-539, -108, 361, -109, -91, -547, 74, 33, 122, -551,
	532, 532, 509, 541, 70, 532, 541, 527, -7, 295,
	-221, -394, 209, -402, -330, 117, -331, -333, 39, 31,
	47, 471, 381, 513, 40, 392, 288, 252, 311, -392,
	-371, -108, -22, -143, -227, -90, 355, 62, 534, 535,
	464, 532, 541, -95, -472, -473, -90, -390, 64, -7,
	-232, -232, -29, -378, 507, -481, -486, -7, 295, 478,
	-486, 532, -394, -394, 246, -482, -7, 130, -88, -361,
	-361, 406, 71, -90, 47, 371, 371, 68, 474, -361,
	-165, 29, -373, 83, 273, 51, -359, -496, 130, 4,
	295, 64, 541, -52, -24, -389, -510, -221, 414, -221,
	-242, 65, -242, -13, 532, 61, 61, 61, -320, 130,
	40, -28, 282, 29, 31, -377, -376, 439, -332, 270,
	-52, 531, -327, 307, 531, -354, 531, 531, -7, -366,
	27, 93, 401, 196, -385, -229, -31, -387, 402, 93,
	-327, 29, -393, 29, -393, -36, -5, 40, 532, 541,
	527, 533, -7, -7, -7, -7, 418, 418, 327, 307,
	418, 532, 541, -380, -380, -10, -33, -90, 61, -580,
	117, 93, 364, 61, 93, 364, 61, 61, 61, -580,
	-7, -7, -360, 398, -7, -7, -7, -360, 398, 61,
	-31, 61, -393, 29, -524, -52, -327, -7, 398, 398,
	196, 27, 61, -500, 83, -361, -394, -389, -389, -389,
	61, 61, -7, -7, 438, 61, 61, 61, 61, 61,
	61, -90, 31, -232, -95, -15, -15, -85, 531, -95,
	-15, -113, -113, 532, -393, -7, -485, 246, 354, 66,
	36, 455, -115, 532, 541, -394, -150, 531, 91, 92,
	-40, 71, -52, -394, -394, -577, -577, -577, -577, -394,
	-52, -52, 42, 42, -52, -53, -53, -52, 42, 64,
	357, -154, -52, 471, 471, 30, 30, 532, -52, 532,
	-115, 532, 541, 532, -64, 532, 190, -82, -117, -117,
	-117, -52, -52, 344, 297, 341, -112, 341, -112, -112,
	-88, -90, 266, -52, 106, -156, -129, -5, -52, -154,
	74, 74, -289, -289, -297, 70, 166, 532, -95, -52,
	-153, -52, -95, -53, -53, -53, -53, -53, -53, -53,
	-53, -53, -53, -53, -53, -53, 41, 31, 260, -53,
	-52, -52, -52, -95, 532, 532, 532, -115, -52, 532,
	541, -188, -6, -78, 380, 442, 532, -54, -281, 70,
	532, 541, -80, 479, -154, -294, -308, -299, -289, 74,
	74, -299, 532, 532, -52, -52, -52, 23, -40, 530,
	-166, -234, -197, 531, 74, -165, -165, 102, -186, -192,
	527, -187, 122, -240, 75, 75, -240, -252, 75, -253,
	80, -253, -253, -120, 450, -5, 531, -244, -246, -244,
	-244, 532, -5, 531, 531, 124, 531, -54, 133, -289,
	-69, -52, -29, -215, -578, 83, -343, 310, -314, -325,
	-344, -345, 370, -313, -318, -319, -316, -5, -312, 531,
	122, 370, -165, 532, -474, -355, -7, -541, 531, 74,
	206, -52, 541, 541, 464, 47, 254, 317, -536, -52,
	-52, -108, -108, 538, -109, -394, -550, -14, 74, 70,
	-525, -518, -521, 4, -371, 531, -486, -359, 531, -430,
	-7, -15, 252, 47, -336, 503, 531, -53, -394, -382,
	201, 70, 253, 299, -95, -268, -279, 39, 532, 541,
	-15, -475, 531, -109, -343, -312, 531, 370, 140, -484,
	-378, -485, -361, -361, -90, -90, -89, -90, -399, -401,
	-359, -7, -581, 286, 385, -487, -489, -5, -498, 61,
	-497, 21, 63, 96, 97, 98, -486, -239, -509, 532,
	74, -242, -5, 242, -242, 531, -389, 36, 168, -90,
	-7, -7, 86, -315, 29, -375, -374, 230, -5, 40,
	532, -14, -328, 31, 252, 311, 354, -7, -14, -327,
	-14, -323, -322, -201, -5, -265, 531, 31, 275, 298,
	246, -386, 288, 31, 275, 438, -348, -376, -374, -348,
	288, -387, 93, 464, -29, 438, -5, -7, -350, -371,
	-6, 418, -7, -35, -7, -7, -7, 449, 70, -7,
	449, 70, -7, -7, -7, -7, 61, 61, -580, 93,
	364, 61, 61, -580, -7, -7, -7, 532, 61, 61,
	-506, -511, 62, 286, 439, -507, -512, 62, 286, -7,
	-501, 36, 531, 398, -7, -7, -31, -34, -7, -7,
	-7, -7, -7, -90, 211, 198, 29, 23, 83, 83,
	-95, 355, 321, -393, 422, 246, 455, 532, -52, -142,
	-159, 72, 70, -394, -394, -394, -394, -52, -52, 42,
	30, 30, -52, -52, 319, 319, -52, -52, 532, 532,
	-52, -90, -82, 532, 532, 532, 532, -52, 532, -125,
	370, 532, -299, 47, 47, -299, -157, 148, 532, 532,
	64, 64, 41, 260, 42, 130, 64, 532, 532, -68,
	-115, 489, 532, 483, 483, -281, 70, -54, 132, 155,
	-52, -81, 541, -52, 354, -299, 532, 47, 47, 532,
	-300, 129, -300, -300, -96, -159, 532, 109, -223, -201,
	117, -203, -52, -212, -7, -240, -240, -254, 83, 74,
	75, -240, -533, 531, -13, -243, 531, -266, -266, -5,
	-269, -270, -265, -280, 531, 541, -117, -185, -195, -204,
	-205, 51, -217, -218, 531, -29, 150, -344, 531, 304,
	271, -373, 70, 532, 541, -329, 36, -320, -310, -15,
	122, -564, 36, -359, 531, 74, -547, -272, -538, -94,
	-91, 47, -565, -90, 130, -95, 313, 464, 538, -556,
	393, -394, -518, 532, -508, 64, 61, -514, 312, 23,
	-14, -402, -331, 31, -389, -389, -52, -221, 23, 40,
	83, -15, -90, -379, -380, 422, -320, -310, 122, -7,
	284, 422, 23, -352, 449, -533, 273, 30, 45, -500,
	-361, -504, -52, 286, 500, 286, 64, 36, 45, 64,
	-315, -378, -5, 40, -327, 532, 252, 476, 299, 253,
	309, 532, 532, 532, 541, 36, -202, -194, 39, -202,
	-52, 47, 28, 28, -382, 47, 23, -34, -382, -95,
	-227, -34, -393, -393, 527, 61, 61, -7, -361, -7,
	-361, 61, -7, -7, -7, 449, 70, -7, -7, -7,
	-393, -327, -7, -7, 541, -88, -88, -95, 541, -88,
	-88, 513, -52, 61, -393, -90, -90, -95, -7, -7,
	532, 541, 541, -7, -7, 532, 532, -123, 484, -52,
	-41, -52, -52, -52, 532, -117, -117, 70, 532, 532,
	-7, -52, -53, 64, -52, -52, -52, 532, 541, 532,
	531, -281, 532, 532, 435, 155, 532, -299, -290, -291,
	-289, -301, -302, 40, -303, 136, 47, 49, 43, 50,
	138, -299, -79, 306, 354, -123, -261, 87, 97, 110,
	532, 541, -7, 155, -254, 531, -52, -240, 531, -13,
	532, -266, 532, 532, 532, 541, -271, 23, 123, -282,
	-283, -53, 40, -52, 532, -192, -195, -196, 30, -196,
	105, 31, -216, 115, 116, 149, 47, 154, 151, 152,
	42, 153, 148, -219, -224, -6, -217, -90, -373, -16,
	-326, 227, 230, 233, 251, 298, 288, 308, 438, 439,
	21, -326, -39, 36, 168, -5, -318, 507, -344, 532,
	-312, -394, 513, 216, 58, 23, -223, -396, 541, 532,
	-108, 313, 266, -548, -4, -410, 464, 464, -552, 130,
	-557, -559, -554, 348, 502, -563, 64, 532, 532, 433,
	433, -515, -516, 478, 354, -486, -165, 532, -353, 83,
	-353, 532, -337, 337, 298, 531, -7, 532, 541, -7,
	422, 532, -394, -378, 246, -7, -165, -7, 531, -581,
	-489, 531, -501, 64, 532, -404, -503, 23, -503, -15,
	531, 531, 531, -329, -338, 303, -338, 392, -338, -322,
	-142, 62, -358, -15, -15, 532, 29, 29, 531, 23,
	-279, -371, -7, -7, -365, 359, 93, -365, 93, -7,
	61, -7, -361, 61, -511, -142, -406, -404, 531, -512,
	531, 531, 531, 532, -7, 532, -95, 355, -95, -124,
	-126, -5, -155, -158, -52, -161, -163, -162, -164, 531,
	238, 408, 293, 532, -130, 388, 127, 294, -115, 130,
	-53, -115, -77, 499, 354, -305, 168, 36, 541, 23,
	532, 74, -52, 134, 139, -304, -302, 532, 306, -262,
	90, 89, 88, 93, -241, -201, -165, -13, -115, 532,
	532, -273, -270, 531, -275, -276, -5, 541, 532, 23,
	-53, -288, 23, 106, -52, 106, 105, -522, -522, -522,
	-522, 152, 31, 47, -90, 532, 541, -225, -231, -227,
	536, 40, 531, -241, -39, 532, -351, 74, -348, 505,
	531, -329, -373, -343, -344, -312, 506, 513, 513, -165,
	532, -355, -538, -541, 540, -95, -560, 51, -582, 262,
	-559, -555, 67, 411, -327, -394, 36, 36, -486, 478,
	-564, -359, 307, -334, 354, -342, -339, -340, 74, 79,
	369, 429, -384, 531, -52, -513, 279, -380, -378, -7,
	-343, -312, 140, -378, -399, 532, -533, -488, 7, -239,
	-503, 301, 205, -324, -321, -9, -115, -115, -389, 531,
	-389, -394, -389, 531, -149, -348, -202, -52, 298, -30,
	83, 449, 449, -7, -365, 93, -7, -571, 130, -571,
	-572, -95, -572, -572, -52, 532, 532, 532, 541, 23,
	541, 532, 531, 531, 425, 532, -131, -132, 37, 467,
	120, -52, -131, -131, -52, 532, 532, 155, -306, 145,
	144, 140, 134, 140, 134, 141, 142, -291, -6, 136,
	532, 74, -14, 91, 91, -183, 532, 532, -266, 532,
	541, -95, 130, -283, 541, -6, -300, -5, -198, -199,
	109, 97, 98, -200, 109, 96, 70, -90, -90, -90,
	-90, -14, 536, 47, -14, 536, -224, -220, -226, -231,
	-351, -352, 228, -346, -347, -5, -265, 531, -39, -344,
	-373, -320, 506, 506, -564, -357, 303, 531, -547, 273,
	531, -553, 411, 437, -522, 130, 286, 286, 23, 449,
	309, -340, 74, -339, 74, 97, 98, -383, 532, 23,
	-15, -378, 422, -320, -7, 531, 532, 541, 532, 541,
	-88, 532, 532, -353, -14, -353, -221, -353, -142, -150,
	-149, 532, -384, -52, -7, -7, 449, -381, 391, 87,
	509, -381, 532, 541, 532, 532, 532, -126, -127, -158,
	-115, -115, 531, -133, 270, -132, 377, 283, 411, 377,
	283, -133, -133, -304, 143, 143, 140, 140, 134, 140,
	134, 140, 138, 136, 93, 70, 70, -241, -245, 23,
	-121, 399, 532, -276, -277, -278, 4, 40, 31, 47,
	128, 124, -54, 123, 110, 93, 110, -193, 102, 531,
	40, 86, 107, 108, -14, 536, 532, 541, -352, 27,
	98, 380, 532, 541, -194, -194, -52, -351, -373, -39,
	-344, -336, 531, -223, -581, -52, -562, -5, 262, -404,
	-404, -165, -7, -341, 354, 35, 24, 93, -341, 532,
	440, -506, -7, 422, -378, 532, 7, -321, 61, -327,
	532, -327, -337, -241, 532, -150, -365, -365, -7, 70,
	-404, -95, 532, 532, -155, 120, 71, 455, 354, 30,
	532, 74, 74, 140, 140, -302, -5, -14, -14, -5,
	531, -278, -53, -53, 47, -53, -280, 531, -183, -203,
	-182, 86, 531, -226, 127, 127, -347, -358, -358, 532,
	-352, -39, -351, -373, -359, -356, -201, 532, -533, 532,
	411, 541, 541, -564, 195, 47, 40, -378, -7, 531,
	-342, -327, -365, -15, 532, 411, 501, -132, 146, 146,
	74, 61, 83, 93, 93, -52, 123, -285, -286, -5,
	131, 155, 532, -115, -194, -351, -352, -39, -352, 532,
	541, -357, 531, -560, 61, 64, -221, -221, -378, -115,
	-327, 147, 147, 136, -55, -533, 166, -5, -5, -5,
	532, -275, 532, 541, 130, -95, -309, 128, -193, -193,
	102, 532, -358, -352, -351, -241, -201, -336, -558, -561,
	-88, 6, -90, -6, 273, 433, 433, 532, 40, 531,
	532, -301, -286, 124, -287, -307, 29, 128, 7, -203,
	-352, -359, 532, 541, -581, 36, 36, -55, -69, 532,
	-305, -287, -287, 7, 123, 23, 155, -352, -561, -533,
	286, 286, 83, -117, -306, -305, -301, 531, -7, -193,
	-241, 531, -404, -404, -5, 532, -304, -306, -285, 123,
	-558, -304, 532, 531, 532, -285, 532,
}

var yyDef = [...]int16{
	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	2840, 2840, 1475, -2, 0, 1758, -2, 1821, 1821, 0,
	0, 0, 2840, 0, 2840, 2840, 0, 0, 0, -2,
	1466, 1562, 0, 1598, 0, 1509, 0, 0, 0, -2,
	2843, 2838, 2839, 2595, 0, 0, 0, 0, 0, 0,
	1757, 0, 0, 2739, 0, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 1886, 1887, 0,
	0, -2, 2059, 2716, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1820, 0, 0, 0,
	0, 0, 2201, 0, 0, 0, 2197, 2198, 2199, 0,
	0, 2203, 2204, 2205, 0, 0, 0, 1804, 0, 1807,
	1808, 1809, 1810, 1811, 1812, 0, 2182, 270, 381, 415,
	2187, 2541, 0, 498, 154, 371, -2, 362, 448, 2556,
	89, 90, 91, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 164, 165, 166, 167, 168, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 178, 179, 180, 181, 182,
	183, 184, 185, 186, 187, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 207, 208, 209, 210, 211, 212,
	213, 214, 215, 216, 217, 218, 219, 220, 221, 222,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 280, 281, 282, 283,
	284, 285, 286, 287, 289, 290, 291, 292, 293, 294,
	295, 296, 297, 298, 299, 300, 301, 302, 303, 304,
	305, 306, 307, 308, 309, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 322, 323, 324,
	325, 326, 327, 328, 329, 330, 331, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 349, 350, 351, 352, 353, 354,
	355, 356, 357, 358, 359, 360, 361, 363, 364, 365,
	366, 367, 368, 369, 370, 372, 373, 374, 375, 376,
	377, 378, 379, 380, 382, 383, 384, 385, 386, 387,
	388, 389, 390, 391, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 404, 405, 406, 407,
	408, 409, 410, 411, 412, 413, 414, 416, 417, 418,
	419, 420, 421, 422, 423, 424, 425, 426, 427, 428,
	429, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 449,
	450, 451, 452, 453, 454, 455, 456, 457, 458, 459,
	460, 461, 462, 463, 464, 465, 466, 467, 468, 469,
	470, 471, 472, 473, 474, 475, 476, 477, 478, 479,
	480, 481, 482, 483, 484, 485, 486, 487, 488, 489,
	490, 491, 492, 493, 494, 495, 496, 497, 499, 500,
	501, 502, 503, 504, 505, 506, 507, 508, 509, 510,
	511, 512, 513, 514, 2196, 2188, 498, 415, 381, 2192,
	2193, 154, 270, 288, 362, 371, 448, 2843, 2595, 2843,
	0, 2843, 0, 2828, 381, 415, 498, 369, 2830, 0,
	-2, 0, 2748, 2748, 2748, 0, -2, 1480, 1481, 0,
	1481, 0, 1514, 0, 1597, 1599, 1508, 1537, 1538, 104,
	0, 0, 1559, 345, 1564, 107, 99, 1560, 0, 2,
	2836, 0, 2837, 2594, 2582, 0, 0, 2588, 0, 0,
	0, 1542, 0, 0, 0, 1477, 2401, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 0, 0, 1821, 2738,
	-2, 0, -2, 239, 1827, 121, 0, 158, 220, 1463,
	0, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457,
	1458, 1459, 1460, 1461, 1462, 2422, 0, 0, 239, 1989,
	239, 0, 0, 2486, 239, 275, 1989, 2096, 2097, 2098,
	2099, 2100, 2576, 2577, 2578, 2579, 515, 516, 517, 518,
	519, 520, 521, 522, 523, 524, 525, 526, 527, 528,
	529, 530, 531, 532, 533, 534, 535, 536, 537, 0,
	0, 2638, 0, 0, 107, 239, 73, 2603, 0, 0,
	0, 1989, 1989, 1888, 1889, 1890, 1891, 0, 239, 0,
	0, 239, 0, 0, 239, 0, 239, 0, 0, 0,
	0, 0, 1329, 0, -2, -2, 1395, 0, 0, 0,
	0, 0, 0, 0, 2096, 0, 0, 0, 0, 239,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	-2, 2853, 0, 275, -2, 2853, 0, 0, 239, 0,
	0, 0, 239, 77, 123, 239, 77, 100, 0, 239,
	77, 239, 1818, 1387, 1388, 1389, 1390, 1391, 1392, 1401,
	1404, 1405, 1406, 1407, 1408, 1444, 201, 1401, 1401, 1401,
	1414, 1415, 1416, 1417, 1418, 1440, 1440, 1393, 1394, 1442,
	1430, 1442, 1442, 1425, 0, 1442, 77, 239, 0, 275,
	2858, 239, 2094, 2856, 239, 2860, 239, 2200, 0, 2202,
	0, 1802, 1803, 1806, 85, 2183, 381, 2184, 156, 0,
	2185, 0, 0, 0, 0, 0, 0, 2544, 1191, 2545,
	2546, 2571, 2572, 2547, 2574, 2575, 0, 2189, 0, 2191,
	2824, 2825, 2826, 2834, 2827, 0, 2835, 2829, 2833, 2803,
	1493, 1490, 0, 2800, 2801, 1494, 0, 0, 0, 1502,
	0, 2746, 2747, 0, 0, 0, -2, 0, 1478, 1479,
	1604, 1513, 1515, 1519, 1520, 1068, 0, 0, 0, 0,
	0, 0, 1958, 1135, 1158, 1159, 1222, 0, 1162, 1163,
	1164, 461, 0, 1169, 1170, 465, 1445, 308, 494, 1212,
	1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 0, 0,
	0, 1345, 1468, 1470, 1226, 1190, 1172, 1173, 1174, 1175,
	1176, -2, 475, 472, 517, 1228, 1229, 1231, 1233, 1235,
	1237, 1238, 1239, 1240, 1241, 1242, -2, 0, 462, 486,
	490, 491, 497, 500, 501, 487, 458, 464, 481, 505,
	506, 508, 510, 507, 511, 512, 474, 471, -2, 477,
	478, 482, 476, 473, 480, 513, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 483, -2, -2, -2,
	-2, -2, -2, -2, 1419, 1420, 1421, 1422, 1604, 0,
	1539, 105, 1214, 0, 1217, 1540, 0, 0, 0, 1561,
	0, 0, 0, 1385, 2841, 0, 0, 2584, 0, 2586,
	2587, 2589, 0, 1722, 0, 1543, 0, 1744, 0, 0,
	0, 0, 0, 239, 2401, 0, 2437, 239, 72, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 1892, 0,
	2407, 0, 0, 1826, 122, 0, 2420, 0, 2717, 0,
	0, 2421, 0, 0, 0, 0, 0, 2427, 0, 0,
	2445, 1987, 1988, 0, 0, 0, 239, 2490, 0, 0,
	0, 0, 2863, 0, 0, 0, 0, 0, 0, 0,
	0, 2672, 0, 0, 0, 0, 0, 2863, 2863, 2069,
	2082, 2169, 2090, 0, 0, 0, 2169, 2169, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2161, 0, 0, 0, 2071, 2073, 0, 0, 0,
	0, 2074, 0, 2440, 1967, 0, 0, 0, 1971, 1986,
	1974, 0, 0, 0, 0, 1989, -2, 1984, 0, 2076,
	2169, 0, 0, 239, 0, 0, 239, 0, 0, 2217,
	0, 1330, 0, 0, 0, 0, 2411, 0, 0, 0,
	0, 0, 2211, 0, 0, 2881, 2882, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2483, 2484, 0, 0, 0, 0, 0, 0, 0, 2697,
	2698, 0, 0, 0, 0, 0, 2865, 0, 0, 0,
	0, 0, 2865, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2452, 1821,
	0, 0, 2171, 75, 76, 0, 0, 2173, 0, 0,
	0, 2176, 0, 1402, 1401, 0, 1409, 0, 1410, 1411,
	1412, 1413, 0, 1434, 0, 0, 0, 1436, 1432, 1441,
	0, 1423, 1424, 1442, 1442, 1428, 2178, 0, 77, 239,
	0, 0, 0, 0, 0, 0, 1805, 2206, 2207, 2208,
	2209, 0, 0, 0, 2548, 2549, 2551, 2542, 2552, 2554,
	2558, 2560, 2561, 1792, 1793, 1794, 1795, 1796, 0, 0,
	1799, 1192, 2553, 2555, 2557, 2543, 2562, 2563, 2564, 2565,
	2566, 2567, 2568, 2569, 2570, 2550, 2580, 2581, 2190, 369,
	2832, 1484, 2802, 1485, 1492, 1495, 0, 0, 1497, 0,
	1499, 0, 2798, 2799, 2804, 2812, 2813, 0, 2822, 2823,
	2810, 0, 2814, -2, 0, 0, 1505, 0, 1510, 1511,
	1512, 2764, 2765, 1874, 2803, 1493, 1522, 0, 0, 0,
	670, 638, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458,
	1459, 1460, 1461, 1462, 0, 631, 885, -2, 0, -2,
	972, 803, 1106, 1108, -2, 782, 0, 0, 1518, -2,
	882, 1365, 97, 98, 616, 617, 618, 619, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 632,
	633, 634, 635, 636, 637, 639, 640, 641, 642, 643,
	644, 645, 647, 648, 649, 650, 651, 652, 653, 654,
	655, 656, 657, 658, 659, 660, 661, 662, 663, 664,
	665, 666, 667, 668, 669, 671, 672, 673, 674, 675,
	676, 677, 678, 679, 680, 681, 682, 683, 684, 685,
	686, 687, 688, 689, 690, 691, 692, 693, 694, 695,
	696, 697, 698, 699, 700, 701, 702, 703, 704, 705,
	706, 707, 708, 709, 710, 711, 712, 713, 714, 715,
	716, 717, 718, 719, 720, 721, 722, 723, 724, 725,
	726, 727, 728, 729, 730, 731, 732, 733, 734, 735,
	736, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 778, 779, 780, 781, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 792, 793, 794, 795, 796, 797,
	798, 799, 800, 801, 802, 804, 805, 806, 807, 808,
	809, 810, 811, 812, 813, 814, 815, 816, 817, 818,
	819, 820, 821, 822, 823, 824, 825, 826, 827, 828,
	829, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 883, 884, 886, 887, 888, 889, 890, 891,
	892, 893, 894, 895, 896, 897, 898, 899, 900, 901,
	902, 903, 904, 905, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919, 920, 921,
	922, 923, 924, 925, 926, 927, 928, 929, 930, 931,
	932, 933, 934, 935, 936, 937, 938, 939, 940, 941,
	942, 943, 944, 945, 946, 947, 948, 949, 950, 951,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 963, 964, 965, 966, 967, 968, 969, 970, 971,
	973, 974, 975, 976, 977, 978, 979, 980, 981, 982,
	983, 984, 985, 986, 987, 988, 989, 990, 991, 992,
	993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002,
	1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
	1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
	1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
	1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042,
	1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052,
	1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
	1063, 1064, 1065, 1066, 1067, 1073, 1074, 1088, 1091, 1092,
	0, 0, 0, 1160, 1385, 0, -2, 502, 1165, 1166,
	1167, 1168, 0, 0, 0, 0, -2, 1185, 0, 1187,
	1209, 0, 0, 1344, 1470, 0, 2776, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1288, 0,
	1288, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1674, 1674, 0, 0, 0, 0,
	0, 0, 0, 0, 1522, 0, 1215, 1218, 1219, 1396,
	92, 93, 94, 95, 96, 538, 539, 540, 541, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 552,
	553, 554, 555, 556, 557, 558, 559, 560, 561, 562,
	563, 564, 565, 566, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 577, 578, 579, 580, 581, 582,
	583, 584, 585, 586, 587, 588, 589, 590, 591, 592,
	593, 594, 595, 596, 597, 598, 599, 600, 601, 602,
	603, 604, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 614, 615, 1216, 0, 0, 0, 1565, 1569, 0,
	0, 1576, 0, 0, 0, 0, 1367, 1369, 0, 0,
	1471, 0, 0, 2842, 2583, 2585, 0, 0, 2593, 1857,
	1724, 0, 0, 0, 0, 1522, 1735, 0, 0, 1222,
	1544, 1582, 0, 0, 1753, 1753, 1750, 1751, 0, 102,
	1895, 0, 0, 0, 2068, 0, 2434, 2436, 0, 0,
	0, 239, 71, 2316, 0, 2316, 0, 2357, 2358, 0,
	0, 0, 2419, 0, 0, 0, 0, 0, 2536, 2535,
	2537, 2538, 2539, 2540, -2, 72, 1947, 0, 1398, 0,
	2620, 2622, 0, 0, 1464, 1618, 0, 0, 0, 0,
	0, 0, 2429, 0, 2442, 0, 2477, 1895, 0, 0,
	0, 2489, 2485, 0, 0, 2500, 2501, 0, 2845, 0,
	239, 2401, 0, 0, 2637, 2644, 0, 0, 0, 0,
	2603, 2679, 0, 407, -2, 2401, 2687, 0, 2602, 0,
	0, 0, 2844, 2846, 0, 0, 0, 0, 2168, 0,
	0, 2101, 239, 0, 2125, 0, 0, 2004, 0, 1958,
	0, 0, -2, 0, 0, 0, 0, 0, 0, 2133,
	2134, 0, 0, 2154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2147, 0, 0, 2149, 2150, 0,
	2155, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1968, 1972, 1977, 1978, 1969, 1970, 0, 1985, 1975,
	1976, 0, 0, 0, 0, 0, 0, 0, 0, 2078,
	2169, 0, 0, 2080, 2169, 0, 2477, 0, 2210, 0,
	0, 0, 0, 0, 2167, 0, 0, 0, 0, 2414,
	0, 2523, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2655, 0, 0, 0, 2675, 2677, 2676, 2678, 0,
	0, 0, 2482, 2487, 2488, 0, 2691, 0, 2692, 2603,
	0, 0, 2699, 0, 0, 0, 2626, 2627, 2630, 0,
	2847, 2849, 0, 2195, 0, 2850, 0, 0, 2848, 2851,
	2852, 0, 2639, 2640, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 0, 2450, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1813, 1814,
	1815, 1816, 1817, 2201, 77, 124, 77, 101, 77, 0,
	1819, 77, 1403, 0, 0, 0, 0, 0, 0, 0,
	0, 1426, 1427, 77, 2180, 0, 0, 0, 2095, 2859,
	2857, 2861, 2534, 0, 0, 1193, 1797, 1194, 1798, 2831,
	1491, 0, 1500, 0, 0, 0, 2815, 0, 0, -2,
	-2, 0, 2811, 2820, 2821, 2816, -2, -2, 2817, 1496,
	1503, 0, 1501, 108, 0, 0, 1877, 1872, 1873, 1488,
	1489, 1579, 0, 1603, -2, -2, 270, 231, -2, 0,
	120, 1516, 1069, 1070, 0, 1072, 1075, 1076, 1077, 1078,
	1079, 1080, -2, -2, -2, -2, -2, -2, 1087, 1089,
	1090, -2, 1368, 1370, 0, 1471, 0, -2, 0, 1105,
	0, 1110, 1112, 1114, 0, 1127, 1129, 0, 1384, 1371,
	1372, 1373, 1374, 1375, 0, 0, 1472, 1122, 1473, 0,
	0, 1362, 1363, 1364, 1517, 0, 1109, 0, 0, 1126,
	1956, 0, 1223, 1222, 0, 0, 0, 1353, 1354, 0,
	0, 0, -2, 1466, 1331, 0, 0, 0, 0, 1338,
	1340, 0, -2, 1188, 1196, 1197, 1198, 1199, 1200, 1201,
	1210, 0, 1350, 1346, 0, 2776, 0, 1225, 0, 0,
	1665, 1068, 0, 1670, 1708, 0, 0, 0, 0, 0,
	0, 0, 0, 1298, 1299, 1300, 1301, 1302, 1303, 1304,
	1305, 0, 0, 0, 1340, 1287, 0, 0, 1136, 0,
	0, 0, 494, 0, 0, 1340, 0, 0, 0, 0,
	0, 1385, 0, 1296, 0, 0, 0, 0, 0, 0,
	0, 1310, 1313, 0, 0, 0, 0, 0, 1665, 0,
	1659, 0, 1340, 1668, 1708, 0, 1657, -2, 1384, 0,
	1674, 1282, 0, 0, 0, 0, 1579, 0, 1220, 1217,
	1541, 1577, 0, 1567, 0, 106, 1386, 2590, 2591, 2592,
	1879, 0, 0, 1729, 1730, 0, 1731, 1222, 1728, 1723,
	1582, 0, 0, 0, 1740, 1739, 1879, 0, 1743, 1523,
	1585, 1585, 0, 1529, 0, 1594, 1585, 1585, 1608, 367,
	514, 479, 104, 1326, 1327, 1328, 0, 470, 0, 0,
	1752, 0, 0, 2400, 0, 1894, 1896, 1898, 1899, 1900,
	0, 1924, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2330, 2315, 2317, 0, 0, 0, 2322, 2323, 0,
	2338, 2339, 2340, 2341, 0, 0, 2346, 0, 0, 0,
	0, 2351, 0, 0, 2354, 0, 2295, 2296, 2298, 0,
	0, 2305, 2306, 2307, 2308, 2310, -2, 2312, 0, 2330,
	0, 0, 2360, 2362, 2363, 2364, 2366, 2359, 0, 2418,
	0, 0, 0, 0, 2506, 2510, 2508, 1393, 0, 2736,
	2401, 0, 2406, 0, 0, 0, -2, 2410, 1399, 2619,
	0, 0, 0, 2723, 0, 1617, 1619, 0, 2519, 2433,
	2423, 2424, 2425, 2426, 0, 2444, 0, 0, 0, 2449,
	1989, 1939, 2476, 2474, 0, 0, 0, 0, 0, 0,
	0, 2486, 0, 0, 2862, 2866, 0, 0, 0, 0,
	0, 0, 0, 2876, 2877, 0, 0, 0, 0, 0,
	2047, 0, 2068, 2646, 0, 0, 2661, 2662, 0, 2667,
	2669, 2670, 0, 107, 2603, 2674, 0, 2401, 0, -2,
	2689, 2689, 0, 0, 0, 2091, 2240, 0, 0, 0,
	85, 0, 2103, 239, 1922, 0, 0, 0, 2275, 0,
	0, 0, 0, 0, 1823, 0, 2275, 239, 77, 239,
	77, 2127, 2130, 2132, 0, 2153, 0, 2284, 2287, 2131,
	2135, 2138, 2139, 0, 0, 0, 0, 2143, 0, 2140,
	2141, 2142, 2146, 0, 2148, 0, 2151, 2156, 2615, 2616,
	2617, 0, 0, 0, 2607, 2609, 382, 130, 202, 0,
	1943, 2070, 2083, 2169, 0, 2248, 2165, 2072, 0, 0,
	2242, 1973, 1979, 1980, 1981, 1983, 2075, 0, 2441, 2244,
	0, 2077, 2169, 0, 0, 0, 0, 0, 0, 0,
	0, 0, -2, 2220, 2221, 2222, 2223, 2224, 0, 2412,
	77, 239, 2166, 2413, 0, 0, 2275, 2417, 2227, 2228,
	2855, 0, 0, 0, 0, 2657, 0, 0, 2234, 2235,
	2236, 2237, 2238, 2239, 2603, 2693, 2603, 2603, 0, 0,
	0, 2628, 2629, 2265, 2864, 2194, 2854, 2266, 0, 2267,
	2268, 2665, 1800, 1801, 0, 0, 0, 0, 0, 0,
	0, 2273, 0, 0, 0, 0, 2517, 2451, 0, 2454,
	2455, 2456, 0, 2458, 2459, 2460, 158, 220, 0, 2463,
	2464, 0, 2466, 2170, 2172, 2174, 0, 2177, 1400, 1443,
	1440, 1438, 1439, 1440, 0, 1429, 2179, 77, 0, 0,
	2528, 0, 2186, 2559, 1498, 2805, 0, 2808, 0, 2818,
	2819, 0, 0, 1504, 0, 2766, 1877, 1447, 0, 2768,
	0, 2750, 0, 1521, 0, 110, 0, 111, 111, 111,
	111, 0, 119, 0, 0, -2, -2, 0, 0, 0,
	1123, 0, -2, 1107, 1111, 1113, 1115, 0, 1128, 1131,
	0, 1384, 0, 1130, 1133, 0, 0, 1376, 1377, 1378,
	1379, 0, 0, 0, 1124, 0, 0, 0, 0, 1957,
	1161, 1386, 1351, 1352, 0, 1171, 1446, -2, 0, 0,
	1465, 1332, 1466, 1466, 1466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1347, 0, 0, 1224, 0, 2774,
	2775, 2779, 0, 1384, 0, 0, 0, 0, 1668, 0,
	1649, 1707, 0, 0, 1230, 1232, 1234, 1236, 0, 1245,
	0, 1246, 0, 1248, 1249, 0, 0, 1250, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1138, 1139, 1153, 1251, 1252,
	0, 0, 0, 0, 0, 0, 0, 1257, 0, 1295,
	0, 1259, 1260, 1261, 1262, 0, 1267, 0, 0, 1316,
	0, 0, 0, 0, 1273, 1384, 0, 1275, 1708, 1674,
	0, 0, 0, 1674, 1278, 0, 1280, 0, 0, 0,
	0, 0, 2750, 1600, 0, 1216, 0, 1568, 1721, 0,
	1860, 0, 0, 0, 1733, 1879, 1736, 1737, 0, 0,
	1742, 1580, 179, 0, 0, 0, 0, 0, 1556, 1556,
	1556, 1554, 1525, 1584, 0, 1589, 1527, 1585, 1594, 1585,
	1585, -2, 1529, 0, 1531, 1590, 0, 1589, 1533, 1535,
	1605, 0, 0, 0, 0, -2, 0, 0, 1989, 1754,
	1755, 1756, -2, 103, 2037, 0, 1904, 2039, 0, 1924,
	0, 0, 2067, 0, 2437, 2062, 0, 2316, 0, 0,
	2311, 1401, 2292, 2328, 0, 0, 2318, 2319, 2324, 2320,
	2321, 0, 0, 0, 2344, 2345, 2347, 2348, 2349, 2350,
	2352, 2353, 381, 415, 2294, 0, 0, 0, 0, 2304,
	0, 2303, 2309, 1401, 0, 2293, 0, 0, 0, 0,
	2502, 2503, 0, 0, 0, 2509, 0, 0, 0, 0,
	2068, 0, 0, 2409, 1946, 0, 1949, 1950, 0, 0,
	1995, 1958, 0, 0, 0, 0, 0, 1952, 0, 2621,
	2623, 2596, 2597, 2598, 2599, 2600, 2601, 308, 1451, 1452,
	0, 2431, 0, 1623, 0, 2518, 2520, 2428, 0, 2446,
	2447, 2448, 2445, 2467, 0, 2475, 2470, 2478, 2471, 2473,
	2472, 2037, 1924, 0, 0, 2490, 1939, 0, 2867, 2868,
	2869, 0, 0, 2872, 2873, 0, 0, 0, 0, 2880,
	2534, 0, 2068, 0, 0, 0, 2636, 2653, 0, 2643,
	0, 0, 0, 0, 0, 2673, 2680, 2689, 0, 2689,
	2684, 0, 2686, 2603, 0, 0, 0, 0, 2162, 0,
	1934, 2163, 2164, 0, 0, 1918, 1921, 0, 2003, 2062,
	0, 0, 2007, 0, 0, 2275, 0, 0, 2061, 2105,
	0, 0, 0, 0, 2118, 0, 2124, 1961, -2, 0,
	2126, 0, 2122, 0, 2129, 2152, 2613, 2614, 2283, 0,
	0, 0, 2136, 2144, 2137, 2145, 2157, 2158, 0, 0,
	2159, 2606, 0, 2610, 2611, 2612, 1942, 1944, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2246, 0, 2079, 2169, 0, 2250, 0, 2081, 2169, 0,
	2468, 0, 2415, 0, 2522, 0, 2525, 2229, 0, 0,
	0, 0, 0, 2659, 0, 2654, 0, 2696, 2694, 2695,
	0, 0, 2264, 0, 0, 0, 0, 0, 0, 0,
	0, 2513, 0, 2453, 0, 0, 0, 2212, 0, 0,
	77, 1433, 1435, 1431, 2181, 2498, 0, 2532, 0, 2806,
	0, 2809, 0, 1360, 0, 109, 2767, 0, 1875, 1876,
	2763, 0, 1578, 112, 113, 0, 0, 0, 0, 118,
	1071, -2, 0, 0, -2, 0, 0, -2, 0, 0,
	1132, 1134, -2, 1381, 1383, 0, 0, 1474, 0, -2,
	0, 1357, 0, -2, 1355, 1333, 0, 1339, 0, 0,
	0, 1341, 1342, 1202, 1203, 1204, 1205, 1206, 1207, 1208,
	0, 1189, 1343, 1349, 0, 0, 2781, 2778, 0, 1674,
	0, 0, 1661, 1662, 1674, 0, 1706, 1227, 0, 1297,
	0, 0, 1137, 1140, 1141, 1142, 1143, 1144, 1145, -2,
	-2, -2, -2, -2, -2, 1152, 0, 0, 1156, 1308,
	0, 1291, 1292, 0, 1254, 1255, 1256, 1294, 0, 1263,
	0, 1311, 1312, 0, 0, 0, 1269, 1626, 0, 148,
	1270, 0, 1325, 0, 1674, 1660, 1673, 0, 1658, 0,
	0, 0, 1279, 1281, 1653, 1653, 1653, 0, 2763, 1221,
	0, 1878, 0, 0, 0, 1725, 1726, 0, 1732, 1734,
	0, 1741, 0, 1524, 0, 0, 0, 0, 0, 1551,
	1555, 1552, 1553, 1526, 0, 1587, 0, 1528, 1532, 1534,
	1536, 1545, 1587, 0, 0, 1607, 0, 0, 509, 0,
	1466, 0, 1764, 1989, 0, 1824, 2039, 0, 1897, 1901,
	2047, 2038, 0, 0, 1925, 1927, 1928, 1947, 0, 1895,
	0, 0, 2405, 2068, 2435, 0, 0, 2330, 0, 0,
	2333, 2331, 0, 0, 0, 0, 2342, 2343, 2297, 2299,
	2300, 2301, 2302, 0, 0, 2368, 2361, 2365, 0, 0,
	2507, 0, 2511, 0, 2512, 0, 2741, 0, 0, 2536,
	0, 1951, 1953, 1994, 2603, 2603, 0, 1999, 2401, 0,
	1959, 0, 1954, 1955, 0, 1620, 1621, 0, 2432, 0,
	2430, 2443, 0, 2479, 0, 0, 1895, 0, 0, 0,
	2495, 0, 2870, 2871, 2874, 2875, 2878, 2879, 2526, 0,
	2053, 2046, 0, 2385, 2386, 0, 2631, 0, 2657, 0,
	2645, 2647, 2648, 2649, 2650, 2651, 2660, 2663, 2668, 2671,
	0, 2681, 2682, 2683, 2685, 0, 2690, 0, 0, 0,
	2252, 2258, 0, 2102, 0, 1939, 1917, 0, 1919, 1920,
	2275, 0, 2276, 0, 2278, 0, 0, 2056, 0, 2009,
	0, 0, 2014, 0, 1871, 1871, 0, 0, 2109, 2119,
	1822, 1965, 0, 0, 0, 0, 2113, 2115, 2116, 2114,
	0, 1962, 0, 0, 0, 0, 77, 77, 2285, 2286,
	2289, 2160, 2618, 2608, 2241, 0, 0, 0, 0, 2249,
	0, 0, 2243, 2254, 2245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2226, 2225, 77, 2275, 0, 0,
	2724, 2709, 0, 0, 0, 2725, 2726, 0, 0, 2232,
	2642, 0, 0, 0, 2262, 2263, 2497, 2666, 2269, 2270,
	2271, 2272, 77, 2516, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 2175, 0, 2533, 2807, 1359, 1386, 0,
	2770, 0, 2748, 114, 115, 116, 117, -2, -2, 0,
	0, 0, -2, -2, 1380, 1382, -2, -2, 1125, 1356,
	1386, 1186, 1466, 1334, 1336, 1337, 1211, 1348, 1467, 1466,
	0, 1469, 0, 1663, 1664, 0, 1669, 0, 1244, 1247,
	0, 0, 0, 1157, 0, 0, 0, 1253, 1258, 0,
	0, 504, 1268, 1314, 1315, 1627, 0, 1628, 1624, 1625,
	0, 0, 0, 1320, 296, 0, 1276, 1666, 1667, 1277,
	1674, 0, 1690, 1674, 1319, 2770, 1572, 0, 0, 1863,
	0, 0, 1738, 1581, 1583, 1546, 0, 1548, 0, 0,
	0, 1550, 0, 0, 0, 1530, 0, 0, 0, 99,
	0, 1609, 1613, 0, 0, 0, 0, 1879, 1746, 1846,
	1846, 0, 1748, 1761, 0, 1764, 0, 2047, 0, 0,
	0, 88, 0, 1923, 0, 1929, 0, 2039, 0, 1924,
	0, 2396, 0, 0, 0, 0, 2290, 0, 1614, 0,
	1397, 0, -2, 2325, 0, 2326, 2336, 2313, 0, 2378,
	0, 2395, 0, 2504, 0, 0, 0, 2743, 0, 0,
	0, 2408, 1948, 0, 2055, 2055, 0, 2023, 0, 1960,
	0, 1622, 2521, 0, 1940, 0, 0, 0, 0, 1939,
	0, 0, 0, 2531, 0, 0, 0, 0, 0, 2659,
	2652, 0, 0, 0, 2705, 2705, 0, 0, 0, 0,
	2104, 1947, 1915, 1916, 2005, 2019, 2277, 2281, 2279, 2280,
	2282, 2019, 0, 2019, 0, 0, 1865, 74, 0, 1866,
	0, 2106, 0, 0, 1966, 2107, 0, 2111, 0, 1623,
	1964, 2112, 2121, 2128, 0, 0, 0, 2093, 0, 2093,
	0, 0, 2256, 2247, 0, 0, 0, 2260, 2251, 0,
	2416, 2524, 2230, 2231, 0, 0, 0, 2715, 0, 0,
	0, 0, 0, 0, 2274, 2514, 2515, 0, 2461, 2462,
	2213, 0, 0, 2465, 2499, 1361, 1448, 1506, 0, 2762,
	0, -2, -2, -2, 1358, 0, 2785, 0, 1671, 1672,
	1705, 1307, -2, 0, 1293, 1289, 1290, 1264, 0, 1265,
	0, 1629, 1271, 1272, 0, 1321, 1274, 1699, 1652, 1654,
	0, 0, 0, 0, 1676, 1677, 1678, 1679, 1680, 1681,
	1684, 1688, 0, 1317, 0, 1507, 1575, 0, 0, 1856,
	1579, 0, 1859, 0, 1547, 0, 1558, 1549, 0, 0,
	1588, 0, 1591, 1593, 1608, 0, 1611, 0, 0, 0,
	1630, 0, 0, 1651, 1333, 1745, 1747, 0, 0, 0,
	1841, 0, 1763, 1765, 1766, 1827, 1827, 1769, 1770, 1827,
	1827, 0, 0, 0, 1780, 1788, 1579, 1759, 88, 0,
	1902, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913,
	1914, 1903, 2051, 0, 0, 0, 1926, 1947, 2047, 2037,
	2039, 1924, 0, 0, 0, 0, 0, 2062, 0, 2316,
	1616, 2337, 2329, 0, 2334, 2335, 0, 2314, 2384, 2380,
	2367, 2369, 0, 2372, 2373, 2275, 0, 2505, 2731, 0,
	0, 2737, 2742, 0, 0, 2740, 2405, 2068, 1996, 0,
	1997, 2013, 2028, 0, 1993, 0, 2708, 1938, 0, 1939,
	0, 2037, 1924, 2480, 0, 1939, 2534, 2052, 0, 0,
	2632, 0, 2641, 0, 2688, 2705, 2702, 0, 2701, 2730,
	0, 0, 0, 1945, 2603, 0, 2603, 0, 2603, 2015,
	2016, 308, 1874, 73, 1870, 1871, 2110, 2120, 0, 0,
	2605, 2288, 2253, 2259, 2084, 2092, 0, 2086, 0, 2255,
	0, 2093, 0, 0, 2710, 2720, 2720, 2713, 0, 2727,
	0, 0, 0, 2656, 2233, 2457, 0, 0, 0, 2769,
	2771, 0, 2749, 2751, 2753, 2754, 2755, 2756, 2757, 0,
	178, 364, 465, 1335, 0, 0, 0, 0, 2780, 0,
	-2, 0, 0, 1322, 1323, 1704, 0, 0, 0, 0,
	1284, 0, 1675, 1682, 1683, 0, 0, 1286, 1318, 1566,
	0, 0, 0, 0, 1858, 1864, 1727, 0, 0, 1586,
	1592, 1606, 1610, 0, 0, 1636, 0, 0, 0, 0,
	1633, 1653, 0, 0, 1845, 0, 1843, 0, 0, 0,
	0, 0, 0, 0, 1779, 1762, 0, 1782, 1783, 1784,
	1785, 1786, 0, 1749, 2051, 2036, 2053, 0, 86, 87,
	0, 1930, 88, 2039, 2047, 0, 2402, 0, 0, 2405,
	2064, 0, 1615, 2330, 2332, 2327, 0, 0, 0, 2379,
	2370, 1827, 2374, 2375, 0, 2394, 0, 0, 2744, 2745,
	2397, 0, 0, 1998, 0, 2000, 2024, 2025, 0, 2020,
	2021, 2022, 2001, 0, 0, 0, 0, 1941, 2491, 1939,
	0, 0, 0, 2496, 2527, 2624, 0, 0, 2634, 2664,
	2700, 2703, 2704, 0, 1936, 0, 0, 0, 2055, 0,
	2055, 2401, 2055, 0, 1877, 1874, 1867, 0, 1993, 2123,
	0, 0, 0, 2257, 2088, 0, 2261, 1991, 0, 1991,
	0, 2721, 0, 0, 0, 2214, 2216, 2215, 0, 0,
	0, 2758, 0, 0, 0, 2777, 2797, 2786, -2, 423,
	179, 0, 2797, 2797, 1306, 1266, 1309, 1324, 1688, 0,
	0, 1691, 0, 1693, 0, 0, 0, 1655, 1656, 1689,
	1285, 0, 0, 0, 0, 1579, 1596, 2885, 0, 1634,
	0, 1638, 0, 1631, 0, 1632, 0, 1650, 1836, 1837,
	0, 0, 1848, 1838, 0, 0, 0, 1767, 1768, 1771,
	1772, 1773, 1774, 0, 1777, 1778, 1781, 0, 1789, 1791,
	2053, 1882, 0, 0, 2041, 1871, 1871, 0, 2051, 2047,
	88, 2039, 2403, 2404, 2398, 1958, 0, 0, 2291, 0,
	0, 2377, 2381, 2382, 0, 0, 0, 0, 0, 0,
	2012, 2026, 0, 2027, 0, 0, 0, 0, 0, 0,
	2707, 2493, 0, 0, 1939, 0, 2633, 0, 1931, 0,
	1935, 1932, 0, 2275, 0, 2275, 2023, 1579, 0, 1868,
	1877, 2108, 2117, 2604, 2093, 2093, 0, 2711, 1990, 2718,
	0, 2712, 0, 0, 2728, 2729, 2658, 2772, 2773, 2752,
	0, 0, 0, 2782, 0, 0, 2788, 2789, 2790, 2791,
	2792, 2783, 2784, 0, 1701, 1703, 1692, 1694, 0, 1697,
	0, 1698, 1685, 1686, 0, 0, 0, 1855, 1557, 0,
	2883, 0, 1612, 1637, 1640, 1641, 0, 0, 0, 1646,
	0, 1639, 0, 0, 1839, 0, 1840, 1849, 0, 0,
	0, 0, 1842, 1844, 1775, 1776, 1787, 0, 1880, 2048,
	0, 0, 2040, 0, 74, 74, 0, 2053, 88, 2051,
	2047, 2068, 0, 0, 0, 0, 2371, 2376, 0, 2734,
	2735, 2405, 2054, 2029, 0, 2032, 2033, 0, 2030, 1992,
	2002, 2706, 1939, 0, 2481, 2625, 2635, 1937, 0, 2006,
	2018, 2008, 2028, 2275, 2017, 1869, 2085, 2087, 2093, 0,
	2714, 2722, 2760, 2759, 0, 0, 2794, 2795, 0, 0,
	1283, 0, 0, 1695, 1696, 0, 0, 0, 0, 1595,
	0, 1642, 1643, 1644, 1645, 1647, 0, 0, 1847, 0,
	0, 1853, 0, 1790, 2049, 2050, 2042, 2043, 2044, 1871,
	1884, 2051, 2053, 88, 2053, 0, 2065, 2064, 0, 2383,
	2384, 0, 0, 2399, 2031, 2401, 2401, 2492, 1939, 0,
	2275, 2011, 2089, 2719, 2761, 2793, 2796, 2787, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1711, 0,
	-2, 0, 0, 0, 74, 2053, 1883, 2051, 1579, 2063,
	0, 1958, 2389, 0, 0, 0, 2034, 2035, 2494, 0,
	2010, 1700, 1702, 1687, 0, 0, -2, 1574, 1570, 1571,
	2884, 0, 1690, 0, 0, 1720, 0, 1709, 1850, 1851,
	0, 1854, 2045, 1881, 2053, 2057, 2066, 2068, 0, 2387,
	2390, 2391, 2392, 2393, 0, 0, 0, 1933, 0, 0,
	1635, 0, 1712, 1713, 1699, 1720, 1720, 0, 0, 0,
	1885, 2053, 2355, 0, 0, 0, 0, 0, 1466, 1648,
	1704, 1699, 1690, 1719, 0, 0, 0, 1579, 2388, 0,
	0, 0, 0, 0, 1688, 1704, 1716, 0, 0, 1852,
	2058, 2389, 2732, 2733, 1573, 0, 1714, 1688, 0, 0,
	0, 1715, 1717, 0, 2356, 0, 1718,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 538, 3, 3,
	531, 532, 536, 534, 541, 535, 533, 537, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 542, 540,
	525, 527, 526, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 529, 3, 530, 539,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var yyTok3 = [...]uint16{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 464, 57807, 465, 57808, 466, 57809, 467,
	57810, 468, 57811, 469, 57812, 470, 57813, 471, 57814, 472,
	57815, 473, 57816, 474, 57817, 475, 57818, 476, 57819, 477,
	57820, 478, 57821, 479, 57822, 480, 57823, 481, 57824, 482,
	57825, 483, 57826, 484, 57827, 485, 57828, 486, 57829, 487,
	57830, 488, 57831, 489, 57832, 490, 57833, 491, 57834, 492,
	57835, 493, 57836, 494, 57837, 495, 57838, 496, 57839, 497,
	57840, 498, 57841, 499, 57842, 500, 57843, 501, 57844, 502,
	57845, 503, 57846, 504, 57847, 505, 57848, 506, 57849, 507,
	57850, 508, 57851, 509, 57852, 510, 57853, 511, 57854, 512,
	57855, 513, 57856, 514, 57857, 515, 57858, 516, 57859, 517,
	57860, 518, 57861, 519, 57862, 520, 57863, 521, 57864, 522,
	57865, 523, 57866, 524, 57867, 528, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:543
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:558
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:566
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:581
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:584
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:593
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:594
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:595
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:596
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:597
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:598
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:599
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:600
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:601
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:602
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:603
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:604
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:605
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:606
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:607
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:608
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:609
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:610
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:611
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:612
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:613
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:614
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:615
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:616
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:617
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:618
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:619
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:620
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:621
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:622
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:623
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:624
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:625
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:626
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:627
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:628
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:629
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:630
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:631
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:632
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:633
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:634
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:635
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:636
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:637
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:638
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:639
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:640
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:641
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:642
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:643
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:644
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:645
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:646
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:647
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:648
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:649
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:650
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:651
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:652
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:653
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:654
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:655
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:656
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:658
		{
			yyVAL.stmt = nil
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:669
		{
			yyVAL.str = yyDollar[1].str
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:670
		{
			yyVAL.str = ""
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:674
		{
			yyVAL.list = yyDollar[1].list
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:675
		{
			yyVAL.list = nil
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:679
		{
			yyVAL.dropBehav = ast.DropCascade
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:680
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:681
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:685
		{
			yyVAL.ival = 1
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:686
		{
			yyVAL.ival = 0
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:690
		{
			yyVAL.ival = 1
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:691
		{
			yyVAL.ival = 0
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:695
		{
			yyVAL.bval = true
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:696
		{
			yyVAL.bval = false
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:700
		{
			yyVAL.bval = true
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:701
		{
			yyVAL.bval = false
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:705
		{
			yyVAL.list = yyDollar[2].list
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:706
		{
			yyVAL.list = nil
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:707
		{
			yyVAL.list = nil
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:716
		{
			yyVAL.str = yyDollar[1].str
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:717
		{
			yyVAL.str = yyDollar[1].str
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:718
		{
			yyVAL.str = yyDollar[1].str
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:722
		{
			yyVAL.str = yyDollar[1].str
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:723
		{
			yyVAL.str = yyDollar[1].str
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:724
		{
			yyVAL.str = yyDollar[1].str
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:725
		{
			yyVAL.str = yyDollar[1].str
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:726
		{
			yyVAL.str = yyDollar[1].str
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:729
		{
			yyVAL.str = yyDollar[1].str
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:730
		{
			yyVAL.str = yyDollar[1].str
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:733
		{
			yyVAL.str = yyDollar[1].str
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:738
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:742
		{
			list := yyDollar[1].list
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = list
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:751
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:755
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:763
		{
			yyVAL.rangevar = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:770
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list.Items) == 1 {
				if str, ok := yyDollar[2].list.Items[0].(*ast.String); ok {
					yyVAL.rangevar = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.rangevar = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.rangevar = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:799
		{
			yyVAL.list = yyDollar[2].list
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:800
		{
			yyVAL.list = nil
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:805
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:809
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:822
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:828
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:834
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:840
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:846
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:853
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:860
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_UNLOGGED
			yyVAL.node = rangeVar
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:866
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:872
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:881
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:885
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				nodes.Append(item)
			}
			yyVAL.list = nodes
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:897
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:901
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].list)
			yyVAL.list = list
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:911
		{
			yyVAL.str = "abort"
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:912
		{
			yyVAL.str = "absent"
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:913
		{
			yyVAL.str = "absolute"
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:914
		{
			yyVAL.str = "access"
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:915
		{
			yyVAL.str = "action"
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:916
		{
			yyVAL.str = "add"
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:917
		{
			yyVAL.str = "admin"
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:918
		{
			yyVAL.str = "after"
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:919
		{
			yyVAL.str = "aggregate"
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:920
		{
			yyVAL.str = "also"
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:921
		{
			yyVAL.str = "alter"
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:922
		{
			yyVAL.str = "always"
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:923
		{
			yyVAL.str = "asensitive"
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:924
		{
			yyVAL.str = "assertion"
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:925
		{
			yyVAL.str = "assignment"
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:926
		{
			yyVAL.str = "at"
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:927
		{
			yyVAL.str = "atomic"
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:928
		{
			yyVAL.str = "attach"
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:929
		{
			yyVAL.str = "attribute"
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:930
		{
			yyVAL.str = "backward"
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:931
		{
			yyVAL.str = "before"
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:932
		{
			yyVAL.str = "begin"
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:933
		{
			yyVAL.str = "breadth"
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:934
		{
			yyVAL.str = "by"
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:935
		{
			yyVAL.str = "cache"
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:936
		{
			yyVAL.str = "call"
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:937
		{
			yyVAL.str = "called"
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:938
		{
			yyVAL.str = "cascade"
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:939
		{
			yyVAL.str = "cascaded"
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:940
		{
			yyVAL.str = "catalog"
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:941
		{
			yyVAL.str = "chain"
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:942
		{
			yyVAL.str = "characteristics"
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:943
		{
			yyVAL.str = "checkpoint"
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:944
		{
			yyVAL.str = "class"
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:945
		{
			yyVAL.str = "close"
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:946
		{
			yyVAL.str = "cluster"
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:947
		{
			yyVAL.str = "columns"
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:948
		{
			yyVAL.str = "comment"
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:949
		{
			yyVAL.str = "comments"
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:950
		{
			yyVAL.str = "commit"
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:951
		{
			yyVAL.str = "committed"
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:952
		{
			yyVAL.str = "compression"
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:953
		{
			yyVAL.str = "conditional"
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:954
		{
			yyVAL.str = "configuration"
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:955
		{
			yyVAL.str = "conflict"
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:956
		{
			yyVAL.str = "connection"
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:957
		{
			yyVAL.str = "constraints"
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:958
		{
			yyVAL.str = "content"
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:959
		{
			yyVAL.str = "continue"
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:960
		{
			yyVAL.str = "conversion"
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:961
		{
			yyVAL.str = "copy"
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:962
		{
			yyVAL.str = "cost"
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:963
		{
			yyVAL.str = "csv"
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:964
		{
			yyVAL.str = "cube"
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:965
		{
			yyVAL.str = "current"
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:966
		{
			yyVAL.str = "cursor"
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:967
		{
			yyVAL.str = "cycle"
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:968
		{
			yyVAL.str = "data"
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:969
		{
			yyVAL.str = "database"
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:970
		{
			yyVAL.str = "day"
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:971
		{
			yyVAL.str = "deallocate"
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:972
		{
			yyVAL.str = "declare"
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:973
		{
			yyVAL.str = "defaults"
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:974
		{
			yyVAL.str = "deferred"
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:975
		{
			yyVAL.str = "definer"
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:976
		{
			yyVAL.str = "delete"
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:977
		{
			yyVAL.str = "delimiter"
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:978
		{
			yyVAL.str = "delimiters"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:979
		{
			yyVAL.str = "depends"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:980
		{
			yyVAL.str = "depth"
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:981
		{
			yyVAL.str = "detach"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:982
		{
			yyVAL.str = "dictionary"
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:983
		{
			yyVAL.str = "disable"
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:984
		{
			yyVAL.str = "discard"
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:985
		{
			yyVAL.str = "document"
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:986
		{
			yyVAL.str = "domain"
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:987
		{
			yyVAL.str = "double"
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:988
		{
			yyVAL.str = "drop"
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:989
		{
			yyVAL.str = "each"
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:990
		{
			yyVAL.str = "empty"
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:991
		{
			yyVAL.str = "enable"
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:992
		{
			yyVAL.str = "encoding"
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:993
		{
			yyVAL.str = "encrypted"
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:994
		{
			yyVAL.str = "enum"
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:995
		{
			yyVAL.str = "error"
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:996
		{
			yyVAL.str = "escape"
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:997
		{
			yyVAL.str = "event"
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:998
		{
			yyVAL.str = "exclude"
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:999
		{
			yyVAL.str = "excluding"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1000
		{
			yyVAL.str = "exclusive"
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1001
		{
			yyVAL.str = "execute"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1002
		{
			yyVAL.str = "explain"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1003
		{
			yyVAL.str = "expression"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1004
		{
			yyVAL.str = "extension"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1005
		{
			yyVAL.str = "external"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1006
		{
			yyVAL.str = "family"
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1007
		{
			yyVAL.str = "filter"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1008
		{
			yyVAL.str = "finalize"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1009
		{
			yyVAL.str = "first"
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1010
		{
			yyVAL.str = "following"
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1011
		{
			yyVAL.str = "force"
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1012
		{
			yyVAL.str = "format"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1013
		{
			yyVAL.str = "forward"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1014
		{
			yyVAL.str = "function"
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1015
		{
			yyVAL.str = "functions"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1016
		{
			yyVAL.str = "generated"
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1017
		{
			yyVAL.str = "global"
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1018
		{
			yyVAL.str = "granted"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1019
		{
			yyVAL.str = "groups"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1020
		{
			yyVAL.str = "handler"
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1021
		{
			yyVAL.str = "header"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1022
		{
			yyVAL.str = "hold"
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1023
		{
			yyVAL.str = "hour"
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1024
		{
			yyVAL.str = "identity"
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1025
		{
			yyVAL.str = "if"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1026
		{
			yyVAL.str = "immediate"
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1027
		{
			yyVAL.str = "immutable"
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1028
		{
			yyVAL.str = "implicit"
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1029
		{
			yyVAL.str = "import"
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1030
		{
			yyVAL.str = "include"
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1031
		{
			yyVAL.str = "including"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1032
		{
			yyVAL.str = "increment"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1033
		{
			yyVAL.str = "indent"
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1034
		{
			yyVAL.str = "index"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1035
		{
			yyVAL.str = "indexes"
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1036
		{
			yyVAL.str = "inherit"
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1037
		{
			yyVAL.str = "inherits"
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1038
		{
			yyVAL.str = "inline"
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1039
		{
			yyVAL.str = "input"
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1040
		{
			yyVAL.str = "insensitive"
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1041
		{
			yyVAL.str = "insert"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1042
		{
			yyVAL.str = "instead"
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1043
		{
			yyVAL.str = "invoker"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1044
		{
			yyVAL.str = "isolation"
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1045
		{
			yyVAL.str = "keep"
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1046
		{
			yyVAL.str = "key"
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1047
		{
			yyVAL.str = "keys"
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1048
		{
			yyVAL.str = "label"
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1049
		{
			yyVAL.str = "language"
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1050
		{
			yyVAL.str = "large"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1051
		{
			yyVAL.str = "last"
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1052
		{
			yyVAL.str = "leakproof"
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1053
		{
			yyVAL.str = "level"
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1054
		{
			yyVAL.str = "listen"
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1055
		{
			yyVAL.str = "load"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1056
		{
			yyVAL.str = "local"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1057
		{
			yyVAL.str = "location"
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1058
		{
			yyVAL.str = "lock"
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1059
		{
			yyVAL.str = "locked"
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1060
		{
			yyVAL.str = "logged"
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1061
		{
			yyVAL.str = "mapping"
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1062
		{
			yyVAL.str = "match"
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1063
		{
			yyVAL.str = "matched"
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1064
		{
			yyVAL.str = "materialized"
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1065
		{
			yyVAL.str = "maxvalue"
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1066
		{
			yyVAL.str = "merge"
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1067
		{
			yyVAL.str = "method"
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1068
		{
			yyVAL.str = "minute"
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1069
		{
			yyVAL.str = "minvalue"
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1070
		{
			yyVAL.str = "mode"
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1071
		{
			yyVAL.str = "month"
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1072
		{
			yyVAL.str = "move"
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1073
		{
			yyVAL.str = "name"
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1074
		{
			yyVAL.str = "names"
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1075
		{
			yyVAL.str = "nested"
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1076
		{
			yyVAL.str = "new"
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1077
		{
			yyVAL.str = "next"
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1078
		{
			yyVAL.str = "nfc"
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1079
		{
			yyVAL.str = "nfd"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1080
		{
			yyVAL.str = "nfkc"
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1081
		{
			yyVAL.str = "nfkd"
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1082
		{
			yyVAL.str = "no"
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1083
		{
			yyVAL.str = "normalized"
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1084
		{
			yyVAL.str = "nothing"
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1085
		{
			yyVAL.str = "notify"
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1086
		{
			yyVAL.str = "nowait"
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1087
		{
			yyVAL.str = "nulls"
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1088
		{
			yyVAL.str = "object"
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1089
		{
			yyVAL.str = "of"
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1090
		{
			yyVAL.str = "off"
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1091
		{
			yyVAL.str = "oids"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1092
		{
			yyVAL.str = "old"
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1093
		{
			yyVAL.str = "omit"
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1094
		{
			yyVAL.str = "operator"
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1095
		{
			yyVAL.str = "option"
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1096
		{
			yyVAL.str = "options"
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1097
		{
			yyVAL.str = "ordinality"
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1098
		{
			yyVAL.str = "others"
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1099
		{
			yyVAL.str = "over"
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1100
		{
			yyVAL.str = "overriding"
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1101
		{
			yyVAL.str = "owned"
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1102
		{
			yyVAL.str = "owner"
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1103
		{
			yyVAL.str = "parallel"
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1104
		{
			yyVAL.str = "parameter"
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1105
		{
			yyVAL.str = "parser"
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1106
		{
			yyVAL.str = "partial"
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1107
		{
			yyVAL.str = "partition"
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1108
		{
			yyVAL.str = "passing"
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1109
		{
			yyVAL.str = "password"
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1110
		{
			yyVAL.str = "path"
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1111
		{
			yyVAL.str = "plan"
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1112
		{
			yyVAL.str = "plans"
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1113
		{
			yyVAL.str = "policy"
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1114
		{
			yyVAL.str = "preceding"
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1115
		{
			yyVAL.str = "prepare"
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1116
		{
			yyVAL.str = "prepared"
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1117
		{
			yyVAL.str = "preserve"
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1118
		{
			yyVAL.str = "prior"
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1119
		{
			yyVAL.str = "privileges"
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1120
		{
			yyVAL.str = "procedural"
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1121
		{
			yyVAL.str = "procedure"
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1122
		{
			yyVAL.str = "procedures"
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1123
		{
			yyVAL.str = "program"
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1124
		{
			yyVAL.str = "publication"
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1125
		{
			yyVAL.str = "quote"
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1126
		{
			yyVAL.str = "quotes"
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1127
		{
			yyVAL.str = "range"
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1128
		{
			yyVAL.str = "read"
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1129
		{
			yyVAL.str = "reassign"
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1130
		{
			yyVAL.str = "recheck"
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1131
		{
			yyVAL.str = "recursive"
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1132
		{
			yyVAL.str = "ref"
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1133
		{
			yyVAL.str = "referencing"
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1134
		{
			yyVAL.str = "refresh"
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1135
		{
			yyVAL.str = "reindex"
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1136
		{
			yyVAL.str = "relative"
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1137
		{
			yyVAL.str = "release"
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1138
		{
			yyVAL.str = "rename"
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1139
		{
			yyVAL.str = "repeatable"
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1140
		{
			yyVAL.str = "replace"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1141
		{
			yyVAL.str = "replica"
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1142
		{
			yyVAL.str = "reset"
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1143
		{
			yyVAL.str = "restart"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1144
		{
			yyVAL.str = "restrict"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1145
		{
			yyVAL.str = "return"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1146
		{
			yyVAL.str = "returns"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1147
		{
			yyVAL.str = "revoke"
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1148
		{
			yyVAL.str = "role"
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1149
		{
			yyVAL.str = "rollback"
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1150
		{
			yyVAL.str = "rollup"
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1151
		{
			yyVAL.str = "routine"
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1152
		{
			yyVAL.str = "routines"
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1153
		{
			yyVAL.str = "rows"
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1154
		{
			yyVAL.str = "rule"
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1155
		{
			yyVAL.str = "savepoint"
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1156
		{
			yyVAL.str = "scalar"
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1157
		{
			yyVAL.str = "schema"
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1158
		{
			yyVAL.str = "schemas"
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1159
		{
			yyVAL.str = "scroll"
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1160
		{
			yyVAL.str = "search"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1161
		{
			yyVAL.str = "second"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1162
		{
			yyVAL.str = "security"
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1163
		{
			yyVAL.str = "sequence"
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1164
		{
			yyVAL.str = "sequences"
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1165
		{
			yyVAL.str = "serializable"
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1166
		{
			yyVAL.str = "server"
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1167
		{
			yyVAL.str = "session"
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1168
		{
			yyVAL.str = "set"
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1169
		{
			yyVAL.str = "sets"
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1170
		{
			yyVAL.str = "share"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1171
		{
			yyVAL.str = "show"
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1172
		{
			yyVAL.str = "simple"
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1173
		{
			yyVAL.str = "skip"
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1174
		{
			yyVAL.str = "snapshot"
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1175
		{
			yyVAL.str = "source"
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1176
		{
			yyVAL.str = "sql"
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1177
		{
			yyVAL.str = "stable"
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1178
		{
			yyVAL.str = "standalone"
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1179
		{
			yyVAL.str = "start"
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1180
		{
			yyVAL.str = "statement"
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1181
		{
			yyVAL.str = "statistics"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1182
		{
			yyVAL.str = "stdin"
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1183
		{
			yyVAL.str = "stdout"
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1184
		{
			yyVAL.str = "storage"
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1185
		{
			yyVAL.str = "stored"
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1186
		{
			yyVAL.str = "strict"
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1187
		{
			yyVAL.str = "string"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1188
		{
			yyVAL.str = "strip"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1189
		{
			yyVAL.str = "subscription"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1190
		{
			yyVAL.str = "support"
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1191
		{
			yyVAL.str = "sysid"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1192
		{
			yyVAL.str = "system"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1193
		{
			yyVAL.str = "tables"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1194
		{
			yyVAL.str = "tablespace"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1195
		{
			yyVAL.str = "target"
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1196
		{
			yyVAL.str = "temp"
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1197
		{
			yyVAL.str = "template"
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1198
		{
			yyVAL.str = "temporary"
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1199
		{
			yyVAL.str = "text"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1200
		{
			yyVAL.str = "ties"
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1201
		{
			yyVAL.str = "transaction"
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1202
		{
			yyVAL.str = "transform"
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1203
		{
			yyVAL.str = "trigger"
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1204
		{
			yyVAL.str = "truncate"
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1205
		{
			yyVAL.str = "trusted"
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1206
		{
			yyVAL.str = "type"
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1207
		{
			yyVAL.str = "types"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1208
		{
			yyVAL.str = "uescape"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1209
		{
			yyVAL.str = "unbounded"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1210
		{
			yyVAL.str = "uncommitted"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1211
		{
			yyVAL.str = "unconditional"
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1212
		{
			yyVAL.str = "unencrypted"
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1213
		{
			yyVAL.str = "unknown"
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1214
		{
			yyVAL.str = "unlisten"
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1215
		{
			yyVAL.str = "unlogged"
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1216
		{
			yyVAL.str = "until"
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1217
		{
			yyVAL.str = "update"
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1218
		{
			yyVAL.str = "vacuum"
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1219
		{
			yyVAL.str = "valid"
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1220
		{
			yyVAL.str = "validate"
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1221
		{
			yyVAL.str = "validator"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1222
		{
			yyVAL.str = "value"
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1223
		{
			yyVAL.str = "varying"
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1224
		{
			yyVAL.str = "version"
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1225
		{
			yyVAL.str = "view"
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1226
		{
			yyVAL.str = "views"
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1227
		{
			yyVAL.str = "volatile"
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1228
		{
			yyVAL.str = "whitespace"
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1229
		{
			yyVAL.str = "within"
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1230
		{
			yyVAL.str = "without"
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1231
		{
			yyVAL.str = "work"
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1232
		{
			yyVAL.str = "wrapper"
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1233
		{
			yyVAL.str = "write"
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1234
		{
			yyVAL.str = "xml"
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1235
		{
			yyVAL.str = "year"
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1236
		{
			yyVAL.str = "yes"
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1237
		{
			yyVAL.str = "zone"
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1251
		{
			yyVAL.str = "between"
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1252
		{
			yyVAL.str = "bigint"
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1253
		{
			yyVAL.str = "bit"
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1254
		{
			yyVAL.str = "boolean"
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1255
		{
			yyVAL.str = "char"
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1256
		{
			yyVAL.str = "character"
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1257
		{
			yyVAL.str = "coalesce"
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1258
		{
			yyVAL.str = "dec"
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1259
		{
			yyVAL.str = "decimal"
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1260
		{
			yyVAL.str = "exists"
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1261
		{
			yyVAL.str = "extract"
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1262
		{
			yyVAL.str = "float"
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1263
		{
			yyVAL.str = "greatest"
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1264
		{
			yyVAL.str = "grouping"
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1265
		{
			yyVAL.str = "inout"
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1266
		{
			yyVAL.str = "int"
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1267
		{
			yyVAL.str = "integer"
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1268
		{
			yyVAL.str = "interval"
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1269
		{
			yyVAL.str = "json"
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1270
		{
			yyVAL.str = "json_array"
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1271
		{
			yyVAL.str = "json_arrayagg"
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1272
		{
			yyVAL.str = "json_exists"
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1273
		{
			yyVAL.str = "json_object"
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1274
		{
			yyVAL.str = "json_objectagg"
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1275
		{
			yyVAL.str = "json_query"
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1276
		{
			yyVAL.str = "json_scalar"
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1277
		{
			yyVAL.str = "json_serialize"
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1278
		{
			yyVAL.str = "json_table"
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1279
		{
			yyVAL.str = "json_value"
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1280
		{
			yyVAL.str = "least"
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1281
		{
			yyVAL.str = "merge_action"
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1282
		{
			yyVAL.str = "national"
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1283
		{
			yyVAL.str = "nchar"
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1284
		{
			yyVAL.str = "none"
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1285
		{
			yyVAL.str = "normalize"
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1286
		{
			yyVAL.str = "nullif"
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1287
		{
			yyVAL.str = "numeric"
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1288
		{
			yyVAL.str = "out"
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1289
		{
			yyVAL.str = "overlay"
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1290
		{
			yyVAL.str = "position"
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1291
		{
			yyVAL.str = "precision"
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1292
		{
			yyVAL.str = "real"
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1293
		{
			yyVAL.str = "row"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1294
		{
			yyVAL.str = "setof"
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1295
		{
			yyVAL.str = "smallint"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1296
		{
			yyVAL.str = "substring"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1297
		{
			yyVAL.str = "time"
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1298
		{
			yyVAL.str = "timestamp"
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1299
		{
			yyVAL.str = "treat"
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1300
		{
			yyVAL.str = "trim"
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1301
		{
			yyVAL.str = "values"
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1302
		{
			yyVAL.str = "varchar"
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1303
		{
			yyVAL.str = "xmlattributes"
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1304
		{
			yyVAL.str = "xmlconcat"
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1305
		{
			yyVAL.str = "xmlelement"
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1306
		{
			yyVAL.str = "xmlexists"
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1307
		{
			yyVAL.str = "xmlforest"
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1308
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1309
		{
			yyVAL.str = "xmlparse"
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1310
		{
			yyVAL.str = "xmlpi"
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1311
		{
			yyVAL.str = "xmlroot"
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1312
		{
			yyVAL.str = "xmlserialize"
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1313
		{
			yyVAL.str = "xmltable"
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1327
		{
			yyVAL.str = "authorization"
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1328
		{
			yyVAL.str = "binary"
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1329
		{
			yyVAL.str = "collation"
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1330
		{
			yyVAL.str = "concurrently"
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1331
		{
			yyVAL.str = "cross"
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1332
		{
			yyVAL.str = "current_schema"
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1333
		{
			yyVAL.str = "freeze"
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1334
		{
			yyVAL.str = "full"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1335
		{
			yyVAL.str = "ilike"
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1336
		{
			yyVAL.str = "inner"
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1337
		{
			yyVAL.str = "is"
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1338
		{
			yyVAL.str = "isnull"
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1339
		{
			yyVAL.str = "join"
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1340
		{
			yyVAL.str = "left"
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1341
		{
			yyVAL.str = "like"
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1342
		{
			yyVAL.str = "natural"
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1343
		{
			yyVAL.str = "notnull"
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1344
		{
			yyVAL.str = "outer"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1345
		{
			yyVAL.str = "overlaps"
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1346
		{
			yyVAL.str = "right"
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1347
		{
			yyVAL.str = "similar"
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1348
		{
			yyVAL.str = "tablesample"
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1349
		{
			yyVAL.str = "verbose"
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1359
		{
			yyVAL.str = "all"
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1360
		{
			yyVAL.str = "analyse"
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1361
		{
			yyVAL.str = "analyze"
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1362
		{
			yyVAL.str = "and"
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1363
		{
			yyVAL.str = "any"
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1364
		{
			yyVAL.str = "array"
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1365
		{
			yyVAL.str = "as"
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1366
		{
			yyVAL.str = "asc"
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1367
		{
			yyVAL.str = "asymmetric"
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1368
		{
			yyVAL.str = "both"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1369
		{
			yyVAL.str = "case"
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1370
		{
			yyVAL.str = "cast"
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1371
		{
			yyVAL.str = "check"
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1372
		{
			yyVAL.str = "collate"
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1373
		{
			yyVAL.str = "column"
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1374
		{
			yyVAL.str = "constraint"
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1375
		{
			yyVAL.str = "create"
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1376
		{
			yyVAL.str = "current_catalog"
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1377
		{
			yyVAL.str = "current_date"
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1378
		{
			yyVAL.str = "current_role"
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1379
		{
			yyVAL.str = "current_time"
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1380
		{
			yyVAL.str = "current_timestamp"
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1381
		{
			yyVAL.str = "current_user"
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1382
		{
			yyVAL.str = "default"
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1383
		{
			yyVAL.str = "deferrable"
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1384
		{
			yyVAL.str = "desc"
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1385
		{
			yyVAL.str = "distinct"
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1386
		{
			yyVAL.str = "do"
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1387
		{
			yyVAL.str = "else"
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1388
		{
			yyVAL.str = "end"
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1389
		{
			yyVAL.str = "except"
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1390
		{
			yyVAL.str = "false"
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1391
		{
			yyVAL.str = "fetch"
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1392
		{
			yyVAL.str = "for"
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1393
		{
			yyVAL.str = "foreign"
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1394
		{
			yyVAL.str = "from"
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1395
		{
			yyVAL.str = "grant"
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1396
		{
			yyVAL.str = "group"
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1397
		{
			yyVAL.str = "having"
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1398
		{
			yyVAL.str = "in"
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1399
		{
			yyVAL.str = "initially"
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1400
		{
			yyVAL.str = "intersect"
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1401
		{
			yyVAL.str = "into"
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1402
		{
			yyVAL.str = "lateral"
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1403
		{
			yyVAL.str = "leading"
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1404
		{
			yyVAL.str = "limit"
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1405
		{
			yyVAL.str = "localtime"
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1406
		{
			yyVAL.str = "localtimestamp"
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1407
		{
			yyVAL.str = "not"
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1408
		{
			yyVAL.str = "null"
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1409
		{
			yyVAL.str = "offset"
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1410
		{
			yyVAL.str = "on"
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1411
		{
			yyVAL.str = "only"
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1412
		{
			yyVAL.str = "or"
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1413
		{
			yyVAL.str = "order"
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1414
		{
			yyVAL.str = "placing"
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1415
		{
			yyVAL.str = "primary"
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1416
		{
			yyVAL.str = "references"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1417
		{
			yyVAL.str = "returning"
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1418
		{
			yyVAL.str = "select"
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1419
		{
			yyVAL.str = "session_user"
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1420
		{
			yyVAL.str = "some"
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1421
		{
			yyVAL.str = "symmetric"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1422
		{
			yyVAL.str = "system_user"
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1423
		{
			yyVAL.str = "table"
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1424
		{
			yyVAL.str = "then"
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1425
		{
			yyVAL.str = "to"
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1426
		{
			yyVAL.str = "trailing"
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1427
		{
			yyVAL.str = "true"
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1428
		{
			yyVAL.str = "union"
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1429
		{
			yyVAL.str = "unique"
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1430
		{
			yyVAL.str = "user"
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1431
		{
			yyVAL.str = "using"
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1432
		{
			yyVAL.str = "variadic"
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1433
		{
			yyVAL.str = "when"
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1434
		{
			yyVAL.str = "where"
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1435
		{
			yyVAL.str = "window"
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1436
		{
			yyVAL.str = "with"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1449
		{
			yyVAL.str = "abort"
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1450
		{
			yyVAL.str = "absent"
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1451
		{
			yyVAL.str = "absolute"
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1452
		{
			yyVAL.str = "access"
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1453
		{
			yyVAL.str = "action"
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1454
		{
			yyVAL.str = "add"
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1455
		{
			yyVAL.str = "admin"
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1456
		{
			yyVAL.str = "after"
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1457
		{
			yyVAL.str = "aggregate"
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1458
		{
			yyVAL.str = "all"
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1459
		{
			yyVAL.str = "also"
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1460
		{
			yyVAL.str = "alter"
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1461
		{
			yyVAL.str = "always"
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1462
		{
			yyVAL.str = "analyse"
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1463
		{
			yyVAL.str = "analyze"
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1464
		{
			yyVAL.str = "and"
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1465
		{
			yyVAL.str = "any"
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1466
		{
			yyVAL.str = "asc"
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1467
		{
			yyVAL.str = "asensitive"
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1468
		{
			yyVAL.str = "assertion"
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1469
		{
			yyVAL.str = "assignment"
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1470
		{
			yyVAL.str = "asymmetric"
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1471
		{
			yyVAL.str = "at"
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1472
		{
			yyVAL.str = "atomic"
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1473
		{
			yyVAL.str = "attach"
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1474
		{
			yyVAL.str = "attribute"
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1475
		{
			yyVAL.str = "authorization"
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1476
		{
			yyVAL.str = "backward"
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1477
		{
			yyVAL.str = "before"
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1478
		{
			yyVAL.str = "begin"
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1479
		{
			yyVAL.str = "between"
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1480
		{
			yyVAL.str = "bigint"
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1481
		{
			yyVAL.str = "binary"
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1482
		{
			yyVAL.str = "bit"
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1483
		{
			yyVAL.str = "boolean"
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1484
		{
			yyVAL.str = "both"
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1485
		{
			yyVAL.str = "breadth"
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1486
		{
			yyVAL.str = "by"
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1487
		{
			yyVAL.str = "cache"
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1488
		{
			yyVAL.str = "call"
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1489
		{
			yyVAL.str = "called"
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1490
		{
			yyVAL.str = "cascade"
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1491
		{
			yyVAL.str = "cascaded"
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1492
		{
			yyVAL.str = "case"
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1493
		{
			yyVAL.str = "cast"
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1494
		{
			yyVAL.str = "catalog"
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1495
		{
			yyVAL.str = "chain"
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1496
		{
			yyVAL.str = "characteristics"
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1497
		{
			yyVAL.str = "check"
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1498
		{
			yyVAL.str = "checkpoint"
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1499
		{
			yyVAL.str = "class"
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1500
		{
			yyVAL.str = "close"
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1501
		{
			yyVAL.str = "cluster"
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1502
		{
			yyVAL.str = "coalesce"
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1503
		{
			yyVAL.str = "collate"
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1504
		{
			yyVAL.str = "collation"
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1505
		{
			yyVAL.str = "column"
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1506
		{
			yyVAL.str = "columns"
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1507
		{
			yyVAL.str = "comment"
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1508
		{
			yyVAL.str = "comments"
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1509
		{
			yyVAL.str = "commit"
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1510
		{
			yyVAL.str = "committed"
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1511
		{
			yyVAL.str = "compression"
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1512
		{
			yyVAL.str = "concurrently"
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1513
		{
			yyVAL.str = "conditional"
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1514
		{
			yyVAL.str = "configuration"
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1515
		{
			yyVAL.str = "conflict"
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1516
		{
			yyVAL.str = "connection"
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1517
		{
			yyVAL.str = "constraint"
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1518
		{
			yyVAL.str = "constraints"
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1519
		{
			yyVAL.str = "content"
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1520
		{
			yyVAL.str = "continue"
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1521
		{
			yyVAL.str = "conversion"
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1522
		{
			yyVAL.str = "copy"
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1523
		{
			yyVAL.str = "cost"
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1524
		{
			yyVAL.str = "cross"
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1525
		{
			yyVAL.str = "csv"
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1526
		{
			yyVAL.str = "cube"
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1527
		{
			yyVAL.str = "current"
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1528
		{
			yyVAL.str = "current_catalog"
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1529
		{
			yyVAL.str = "current_date"
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1530
		{
			yyVAL.str = "current_role"
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1531
		{
			yyVAL.str = "current_schema"
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1532
		{
			yyVAL.str = "current_time"
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1533
		{
			yyVAL.str = "current_timestamp"
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1534
		{
			yyVAL.str = "current_user"
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1535
		{
			yyVAL.str = "cursor"
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1536
		{
			yyVAL.str = "cycle"
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1537
		{
			yyVAL.str = "data"
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1538
		{
			yyVAL.str = "database"
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1539
		{
			yyVAL.str = "deallocate"
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1540
		{
			yyVAL.str = "dec"
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1541
		{
			yyVAL.str = "decimal"
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1542
		{
			yyVAL.str = "declare"
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1543
		{
			yyVAL.str = "default"
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1544
		{
			yyVAL.str = "defaults"
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1545
		{
			yyVAL.str = "deferrable"
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1546
		{
			yyVAL.str = "deferred"
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1547
		{
			yyVAL.str = "definer"
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1548
		{
			yyVAL.str = "delete"
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1549
		{
			yyVAL.str = "delimiter"
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1550
		{
			yyVAL.str = "delimiters"
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1551
		{
			yyVAL.str = "depends"
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1552
		{
			yyVAL.str = "depth"
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1553
		{
			yyVAL.str = "desc"
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1554
		{
			yyVAL.str = "detach"
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1555
		{
			yyVAL.str = "dictionary"
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1556
		{
			yyVAL.str = "disable"
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1557
		{
			yyVAL.str = "discard"
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1558
		{
			yyVAL.str = "distinct"
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1559
		{
			yyVAL.str = "do"
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1560
		{
			yyVAL.str = "document"
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1561
		{
			yyVAL.str = "domain"
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1562
		{
			yyVAL.str = "double"
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1563
		{
			yyVAL.str = "drop"
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1564
		{
			yyVAL.str = "each"
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1565
		{
			yyVAL.str = "else"
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1566
		{
			yyVAL.str = "empty"
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1567
		{
			yyVAL.str = "enable"
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1568
		{
			yyVAL.str = "encoding"
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1569
		{
			yyVAL.str = "encrypted"
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1570
		{
			yyVAL.str = "end"
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1571
		{
			yyVAL.str = "enum"
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1572
		{
			yyVAL.str = "error"
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1573
		{
			yyVAL.str = "escape"
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1574
		{
			yyVAL.str = "event"
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1575
		{
			yyVAL.str = "exclude"
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1576
		{
			yyVAL.str = "excluding"
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1577
		{
			yyVAL.str = "exclusive"
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1578
		{
			yyVAL.str = "execute"
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1579
		{
			yyVAL.str = "exists"
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1580
		{
			yyVAL.str = "explain"
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1581
		{
			yyVAL.str = "expression"
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1582
		{
			yyVAL.str = "extension"
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1583
		{
			yyVAL.str = "external"
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1584
		{
			yyVAL.str = "extract"
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1585
		{
			yyVAL.str = "false"
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1586
		{
			yyVAL.str = "family"
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1587
		{
			yyVAL.str = "finalize"
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1588
		{
			yyVAL.str = "first"
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1589
		{
			yyVAL.str = "float"
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1590
		{
			yyVAL.str = "following"
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1591
		{
			yyVAL.str = "force"
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1592
		{
			yyVAL.str = "foreign"
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1593
		{
			yyVAL.str = "format"
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1594
		{
			yyVAL.str = "forward"
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1595
		{
			yyVAL.str = "freeze"
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1596
		{
			yyVAL.str = "full"
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1597
		{
			yyVAL.str = "function"
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1598
		{
			yyVAL.str = "functions"
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1599
		{
			yyVAL.str = "generated"
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1600
		{
			yyVAL.str = "global"
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1601
		{
			yyVAL.str = "granted"
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1602
		{
			yyVAL.str = "greatest"
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1603
		{
			yyVAL.str = "grouping"
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1604
		{
			yyVAL.str = "groups"
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1605
		{
			yyVAL.str = "handler"
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1606
		{
			yyVAL.str = "header"
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1607
		{
			yyVAL.str = "hold"
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1608
		{
			yyVAL.str = "identity"
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1609
		{
			yyVAL.str = "if"
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1610
		{
			yyVAL.str = "ilike"
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1611
		{
			yyVAL.str = "immediate"
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1612
		{
			yyVAL.str = "immutable"
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1613
		{
			yyVAL.str = "implicit"
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1614
		{
			yyVAL.str = "import"
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1615
		{
			yyVAL.str = "in"
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1616
		{
			yyVAL.str = "include"
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1617
		{
			yyVAL.str = "including"
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1618
		{
			yyVAL.str = "increment"
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1619
		{
			yyVAL.str = "indent"
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1620
		{
			yyVAL.str = "index"
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1621
		{
			yyVAL.str = "indexes"
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1622
		{
			yyVAL.str = "inherit"
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1623
		{
			yyVAL.str = "inherits"
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1624
		{
			yyVAL.str = "initially"
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1625
		{
			yyVAL.str = "inline"
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1626
		{
			yyVAL.str = "inner"
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1627
		{
			yyVAL.str = "inout"
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1628
		{
			yyVAL.str = "input"
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1629
		{
			yyVAL.str = "insensitive"
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1630
		{
			yyVAL.str = "insert"
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1631
		{
			yyVAL.str = "instead"
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1632
		{
			yyVAL.str = "int"
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1633
		{
			yyVAL.str = "integer"
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1634
		{
			yyVAL.str = "interval"
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1635
		{
			yyVAL.str = "invoker"
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1636
		{
			yyVAL.str = "is"
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1637
		{
			yyVAL.str = "isolation"
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1638
		{
			yyVAL.str = "join"
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1639
		{
			yyVAL.str = "json"
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1640
		{
			yyVAL.str = "json_array"
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1641
		{
			yyVAL.str = "json_arrayagg"
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1642
		{
			yyVAL.str = "json_exists"
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1643
		{
			yyVAL.str = "json_object"
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1644
		{
			yyVAL.str = "json_objectagg"
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1645
		{
			yyVAL.str = "json_query"
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1646
		{
			yyVAL.str = "json_scalar"
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1647
		{
			yyVAL.str = "json_serialize"
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1648
		{
			yyVAL.str = "json_table"
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1649
		{
			yyVAL.str = "json_value"
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1650
		{
			yyVAL.str = "keep"
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1651
		{
			yyVAL.str = "key"
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1652
		{
			yyVAL.str = "keys"
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1653
		{
			yyVAL.str = "label"
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1654
		{
			yyVAL.str = "language"
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1655
		{
			yyVAL.str = "large"
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1656
		{
			yyVAL.str = "last"
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1657
		{
			yyVAL.str = "lateral"
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1658
		{
			yyVAL.str = "leading"
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1659
		{
			yyVAL.str = "leakproof"
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1660
		{
			yyVAL.str = "least"
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1661
		{
			yyVAL.str = "left"
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1662
		{
			yyVAL.str = "level"
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1663
		{
			yyVAL.str = "like"
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1664
		{
			yyVAL.str = "listen"
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1665
		{
			yyVAL.str = "load"
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1666
		{
			yyVAL.str = "local"
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1667
		{
			yyVAL.str = "localtime"
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1668
		{
			yyVAL.str = "localtimestamp"
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1669
		{
			yyVAL.str = "location"
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1670
		{
			yyVAL.str = "lock"
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1671
		{
			yyVAL.str = "locked"
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1672
		{
			yyVAL.str = "logged"
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1673
		{
			yyVAL.str = "mapping"
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1674
		{
			yyVAL.str = "match"
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1675
		{
			yyVAL.str = "matched"
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1676
		{
			yyVAL.str = "materialized"
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1677
		{
			yyVAL.str = "maxvalue"
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1678
		{
			yyVAL.str = "merge"
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1679
		{
			yyVAL.str = "merge_action"
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1680
		{
			yyVAL.str = "method"
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1681
		{
			yyVAL.str = "minvalue"
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1682
		{
			yyVAL.str = "mode"
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1683
		{
			yyVAL.str = "move"
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1684
		{
			yyVAL.str = "name"
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1685
		{
			yyVAL.str = "names"
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1686
		{
			yyVAL.str = "national"
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1687
		{
			yyVAL.str = "natural"
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1688
		{
			yyVAL.str = "nchar"
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1689
		{
			yyVAL.str = "nested"
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1690
		{
			yyVAL.str = "new"
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1691
		{
			yyVAL.str = "next"
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1692
		{
			yyVAL.str = "nfc"
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1693
		{
			yyVAL.str = "nfd"
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1694
		{
			yyVAL.str = "nfkc"
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1695
		{
			yyVAL.str = "nfkd"
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1696
		{
			yyVAL.str = "no"
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1697
		{
			yyVAL.str = "none"
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1698
		{
			yyVAL.str = "normalize"
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1699
		{
			yyVAL.str = "normalized"
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1700
		{
			yyVAL.str = "not"
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1701
		{
			yyVAL.str = "nothing"
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1702
		{
			yyVAL.str = "notify"
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1703
		{
			yyVAL.str = "nowait"
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1704
		{
			yyVAL.str = "null"
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1705
		{
			yyVAL.str = "nullif"
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1706
		{
			yyVAL.str = "nulls"
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1707
		{
			yyVAL.str = "numeric"
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1708
		{
			yyVAL.str = "object"
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1709
		{
			yyVAL.str = "of"
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1710
		{
			yyVAL.str = "off"
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1711
		{
			yyVAL.str = "oids"
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1712
		{
			yyVAL.str = "old"
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1713
		{
			yyVAL.str = "omit"
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1714
		{
			yyVAL.str = "only"
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1715
		{
			yyVAL.str = "operator"
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1716
		{
			yyVAL.str = "option"
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1717
		{
			yyVAL.str = "options"
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1718
		{
			yyVAL.str = "or"
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1719
		{
			yyVAL.str = "ordinality"
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1720
		{
			yyVAL.str = "others"
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1721
		{
			yyVAL.str = "out"
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1722
		{
			yyVAL.str = "outer"
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1723
		{
			yyVAL.str = "overlay"
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1724
		{
			yyVAL.str = "overriding"
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1725
		{
			yyVAL.str = "owned"
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1726
		{
			yyVAL.str = "owner"
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1727
		{
			yyVAL.str = "parallel"
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1728
		{
			yyVAL.str = "parameter"
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1729
		{
			yyVAL.str = "parser"
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1730
		{
			yyVAL.str = "partial"
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1731
		{
			yyVAL.str = "partition"
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1732
		{
			yyVAL.str = "passing"
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1733
		{
			yyVAL.str = "password"
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1734
		{
			yyVAL.str = "path"
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1735
		{
			yyVAL.str = "placing"
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1736
		{
			yyVAL.str = "plan"
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1737
		{
			yyVAL.str = "plans"
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1738
		{
			yyVAL.str = "policy"
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1739
		{
			yyVAL.str = "position"
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1740
		{
			yyVAL.str = "preceding"
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1741
		{
			yyVAL.str = "prepare"
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1742
		{
			yyVAL.str = "prepared"
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1743
		{
			yyVAL.str = "preserve"
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1744
		{
			yyVAL.str = "primary"
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1745
		{
			yyVAL.str = "prior"
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1746
		{
			yyVAL.str = "privileges"
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1747
		{
			yyVAL.str = "procedural"
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1748
		{
			yyVAL.str = "procedure"
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1749
		{
			yyVAL.str = "procedures"
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1750
		{
			yyVAL.str = "program"
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1751
		{
			yyVAL.str = "publication"
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1752
		{
			yyVAL.str = "quote"
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1753
		{
			yyVAL.str = "quotes"
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1754
		{
			yyVAL.str = "range"
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1755
		{
			yyVAL.str = "read"
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1756
		{
			yyVAL.str = "real"
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1757
		{
			yyVAL.str = "reassign"
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1758
		{
			yyVAL.str = "recheck"
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1759
		{
			yyVAL.str = "recursive"
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1760
		{
			yyVAL.str = "ref"
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1761
		{
			yyVAL.str = "references"
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1762
		{
			yyVAL.str = "referencing"
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1763
		{
			yyVAL.str = "refresh"
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1764
		{
			yyVAL.str = "reindex"
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1765
		{
			yyVAL.str = "relative"
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1766
		{
			yyVAL.str = "release"
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1767
		{
			yyVAL.str = "rename"
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1768
		{
			yyVAL.str = "repeatable"
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1769
		{
			yyVAL.str = "replace"
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1770
		{
			yyVAL.str = "replica"
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1771
		{
			yyVAL.str = "reset"
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1772
		{
			yyVAL.str = "restart"
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1773
		{
			yyVAL.str = "restrict"
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1774
		{
			yyVAL.str = "return"
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1775
		{
			yyVAL.str = "returns"
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1776
		{
			yyVAL.str = "revoke"
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1777
		{
			yyVAL.str = "right"
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1778
		{
			yyVAL.str = "role"
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1779
		{
			yyVAL.str = "rollback"
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1780
		{
			yyVAL.str = "rollup"
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1781
		{
			yyVAL.str = "routine"
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1782
		{
			yyVAL.str = "routines"
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1783
		{
			yyVAL.str = "row"
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1784
		{
			yyVAL.str = "rows"
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1785
		{
			yyVAL.str = "rule"
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1786
		{
			yyVAL.str = "savepoint"
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1787
		{
			yyVAL.str = "scalar"
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1788
		{
			yyVAL.str = "schema"
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1789
		{
			yyVAL.str = "schemas"
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1790
		{
			yyVAL.str = "scroll"
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1791
		{
			yyVAL.str = "search"
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1792
		{
			yyVAL.str = "security"
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1793
		{
			yyVAL.str = "select"
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1794
		{
			yyVAL.str = "sequence"
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1795
		{
			yyVAL.str = "sequences"
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1796
		{
			yyVAL.str = "serializable"
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1797
		{
			yyVAL.str = "server"
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1798
		{
			yyVAL.str = "session"
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1799
		{
			yyVAL.str = "session_user"
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1800
		{
			yyVAL.str = "set"
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1801
		{
			yyVAL.str = "setof"
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1802
		{
			yyVAL.str = "sets"
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1803
		{
			yyVAL.str = "share"
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1804
		{
			yyVAL.str = "show"
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1805
		{
			yyVAL.str = "similar"
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1806
		{
			yyVAL.str = "simple"
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1807
		{
			yyVAL.str = "skip"
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1808
		{
			yyVAL.str = "smallint"
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1809
		{
			yyVAL.str = "snapshot"
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1810
		{
			yyVAL.str = "some"
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1811
		{
			yyVAL.str = "source"
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1812
		{
			yyVAL.str = "sql"
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1813
		{
			yyVAL.str = "stable"
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1814
		{
			yyVAL.str = "standalone"
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1815
		{
			yyVAL.str = "start"
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1816
		{
			yyVAL.str = "statement"
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1817
		{
			yyVAL.str = "statistics"
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1818
		{
			yyVAL.str = "stdin"
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1819
		{
			yyVAL.str = "stdout"
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1820
		{
			yyVAL.str = "storage"
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1821
		{
			yyVAL.str = "stored"
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1822
		{
			yyVAL.str = "strict"
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1823
		{
			yyVAL.str = "string"
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1824
		{
			yyVAL.str = "strip"
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1825
		{
			yyVAL.str = "subscription"
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1826
		{
			yyVAL.str = "substring"
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1827
		{
			yyVAL.str = "support"
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1828
		{
			yyVAL.str = "symmetric"
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1829
		{
			yyVAL.str = "sysid"
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1830
		{
			yyVAL.str = "system"
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1831
		{
			yyVAL.str = "system_user"
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1832
		{
			yyVAL.str = "table"
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1833
		{
			yyVAL.str = "tables"
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1834
		{
			yyVAL.str = "tablesample"
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1835
		{
			yyVAL.str = "tablespace"
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1836
		{
			yyVAL.str = "target"
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1837
		{
			yyVAL.str = "temp"
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1838
		{
			yyVAL.str = "template"
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1839
		{
			yyVAL.str = "temporary"
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1840
		{
			yyVAL.str = "text"
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1841
		{
			yyVAL.str = "then"
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1842
		{
			yyVAL.str = "ties"
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1843
		{
			yyVAL.str = "time"
		}
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1844
		{
			yyVAL.str = "timestamp"
		}
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1845
		{
			yyVAL.str = "trailing"
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1846
		{
			yyVAL.str = "transaction"
		}
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1847
		{
			yyVAL.str = "transform"
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1848
		{
			yyVAL.str = "treat"
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1849
		{
			yyVAL.str = "trigger"
		}
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1850
		{
			yyVAL.str = "trim"
		}
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1851
		{
			yyVAL.str = "true"
		}
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1852
		{
			yyVAL.str = "truncate"
		}
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1853
		{
			yyVAL.str = "trusted"
		}
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1854
		{
			yyVAL.str = "type"
		}
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1855
		{
			yyVAL.str = "types"
		}
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1856
		{
			yyVAL.str = "uescape"
		}
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1857
		{
			yyVAL.str = "unbounded"
		}
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1858
		{
			yyVAL.str = "uncommitted"
		}
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1859
		{
			yyVAL.str = "unconditional"
		}
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1860
		{
			yyVAL.str = "unencrypted"
		}
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1861
		{
			yyVAL.str = "unique"
		}
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1862
		{
			yyVAL.str = "unknown"
		}
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1863
		{
			yyVAL.str = "unlisten"
		}
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1864
		{
			yyVAL.str = "unlogged"
		}
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1865
		{
			yyVAL.str = "until"
		}
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1866
		{
			yyVAL.str = "update"
		}
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1867
		{
			yyVAL.str = "user"
		}
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1868
		{
			yyVAL.str = "using"
		}
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1869
		{
			yyVAL.str = "vacuum"
		}
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1870
		{
			yyVAL.str = "valid"
		}
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1871
		{
			yyVAL.str = "validate"
		}
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1872
		{
			yyVAL.str = "validator"
		}
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1873
		{
			yyVAL.str = "value"
		}
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1874
		{
			yyVAL.str = "values"
		}
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1875
		{
			yyVAL.str = "varchar"
		}
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1876
		{
			yyVAL.str = "variadic"
		}
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1877
		{
			yyVAL.str = "verbose"
		}
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1878
		{
			yyVAL.str = "version"
		}
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1879
		{
			yyVAL.str = "view"
		}
	case 1047:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1880
		{
			yyVAL.str = "views"
		}
	case 1048:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1881
		{
			yyVAL.str = "volatile"
		}
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1882
		{
			yyVAL.str = "when"
		}
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1883
		{
			yyVAL.str = "whitespace"
		}
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1884
		{
			yyVAL.str = "work"
		}
	case 1052:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1885
		{
			yyVAL.str = "wrapper"
		}
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1886
		{
			yyVAL.str = "write"
		}
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1887
		{
			yyVAL.str = "xml"
		}
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1888
		{
			yyVAL.str = "xmlattributes"
		}
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1889
		{
			yyVAL.str = "xmlconcat"
		}
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1890
		{
			yyVAL.str = "xmlelement"
		}
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1891
		{
			yyVAL.str = "xmlexists"
		}
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1892
		{
			yyVAL.str = "xmlforest"
		}
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1893
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1894
		{
			yyVAL.str = "xmlparse"
		}
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1895
		{
			yyVAL.str = "xmlpi"
		}
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1896
		{
			yyVAL.str = "xmlroot"
		}
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1897
		{
			yyVAL.str = "xmlserialize"
		}
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1898
		{
			yyVAL.str = "xmltable"
		}
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1899
		{
			yyVAL.str = "yes"
		}
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1900
		{
			yyVAL.str = "zone"
		}
	case 1068:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1915
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1069:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1917
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1070:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1921
		{
			collateClause := ast.NewCollateClause(yyDollar[3].list)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 1071:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1927
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[1].node), 0)
		}
	case 1072:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1932
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[1].node), 0)
		}
	case 1073:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1937
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1074:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1942
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1075:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1947
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1076:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1952
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1077:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1957
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1078:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1962
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1079:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1967
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1080:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1972
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1081:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1977
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1082:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1982
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1083:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1987
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1084:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1992
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1085:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1997
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1086:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2002
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1087:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2007
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1088:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2011
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1089:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2015
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1090:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2019
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1091:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2023
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1092:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2027
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1093:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2031
		{
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1094:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2036
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1095:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2043
		{
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1096:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2048
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1097:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2055
		{
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1098:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2060
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1099:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2067
		{
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1100:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2072
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1101:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2079
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1102:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2086
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1103:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2093
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1104:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2100
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2107
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2111
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2115
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2119
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2123
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlaps"))
			leftList := yyDollar[1].list
			rightList := yyDollar[3].list
			combinedList := ast.NewNodeList()
			combinedList.Items = append(leftList.Items, rightList.Items...)
			yyVAL.node = ast.NewFuncCall(funcName, combinedList, 0)
		}
	case 1110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2132
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_TRUE)
		}
	case 1111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2136
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_TRUE)
		}
	case 1112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2140
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_FALSE)
		}
	case 1113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2144
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_FALSE)
		}
	case 1114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2148
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_UNKNOWN)
		}
	case 1115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2152
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_UNKNOWN)
		}
	case 1116:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2156
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1117:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2161
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1118:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2166
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1119:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2171
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1120:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2176
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1121:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2181
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2186
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2191
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2196
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			sublink := ast.NewSubLink(subLinkType, yyDollar[4].stmt)
			sublink.Testexpr = yyDollar[1].node
			sublink.OperName = operName
			yyVAL.node = sublink
		}
	case 1125:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2205
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			if subLinkType == ast.ANY_SUBLINK {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ANY, operName, yyDollar[1].node, yyDollar[5].node, 0)
			} else {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ALL, operName, yyDollar[1].node, yyDollar[5].node, 0)
			}
		}
	case 1126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2215
		{
			yylex.Error("UNIQUE predicate is not yet implemented")
		}
	case 1127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2219
		{
			args := ast.NewNodeList(yyDollar[1].node.(ast.Expression))
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
		}
	case 1128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2224
		{
			args := ast.NewNodeList(yyDollar[1].node.(ast.Expression))
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2230
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2236
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[3].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2243
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1132:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2250
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[4].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1133:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2258
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[3].ival)
			uniqueKeys := yyDollar[4].bval
			yyVAL.node = ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
		}
	case 1134:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2275
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[4].ival)
			uniqueKeys := yyDollar[5].bval
			jsonPredicate := ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(jsonPredicate))
		}
	case 1135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2294
		{
			yyVAL.node = ast.NewSetToDefault(0, 0, 0)
		}
	case 1136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2299
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2301
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2305
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2310
		{
			yyVAL.node = doNegate(yyDollar[2].node, 0)
		}
	case 1140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2314
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2319
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2324
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2329
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2334
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2339
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2344
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2349
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2354
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2359
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2364
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2369
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2374
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2378
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1154:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2382
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1155:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2387
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2392
		{
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1157:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2397
		{
			args := ast.NewNodeList(yyDollar[1].node)
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2404
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2405
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2407
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 1161:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2416
		{
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewParenExpr(ast.NewA_Indirection(yyDollar[2].node, yyDollar[4].list, 0), 0)
			} else {
				yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
			}
		}
	case 1162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2423
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2424
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2426
		{
			yyVAL.node = ast.NewExprSublink(yyDollar[1].stmt)
		}
	case 1165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2430
		{
			sublink := ast.NewExprSublink(yyDollar[1].stmt)
			yyVAL.node = ast.NewA_Indirection(sublink, yyDollar[2].list, 0)
		}
	case 1166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2435
		{
			yyVAL.node = ast.NewExistsSublink(yyDollar[2].stmt)
		}
	case 1167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2439
		{
			yyVAL.node = ast.NewArraySublink(yyDollar[2].stmt)
		}
	case 1168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2443
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2447
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = rowExpr
		}
	case 1170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2453
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_IMPLICIT_CAST
			yyVAL.node = rowExpr
		}
	case 1171:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2459
		{
			exprList := yyDollar[3].list
			grouping := &ast.GroupingFunc{
				BaseExpr: ast.BaseExpr{BaseNode: ast.BaseNode{Tag: ast.T_GroupingFunc}},
				Args:     exprList,
			}
			yyVAL.node = grouping
		}
	case 1172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2476
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2477
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2478
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2479
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2480
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2484
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 1178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2488
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 1179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2492
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 1180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2496
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 1181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2500
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 1182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2504
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 1183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2508
		{
			yyVAL.node = ast.NewA_Const(ast.NewBitString(yyDollar[1].str), 0)
		}
	case 1184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2512
		{
			// This is a bit constant per SQL99
			yyVAL.node = ast.NewA_Const(ast.NewBitString(yyDollar[1].str), 0)
		}
	case 1185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2517
		{
			// generic type 'literal' syntax
			typeName := makeTypeNameFromNodeList(yyDollar[1].list)
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, typeName, 0)
		}
	case 1186:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2524
		{
			// generic syntax with a type modifier
			typeName := makeTypeNameFromNodeList(yyDollar[1].list)
			// For now, we'll skip the error checking for NamedArgExpr and ORDER BY
			// TODO: Add proper validation when needed
			typeName.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[6].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, typeName, 0)
		}
	case 1187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2534
		{
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, yyDollar[1].typnam, 0)
		}
	case 1188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2539
		{
			t := yyDollar[1].typnam
			t.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 1189:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2546
		{
			t := yyDollar[1].typnam
			// INTERVAL_FULL_RANGE equivalent and precision
			fullRange := ast.NewInteger(ast.INTERVAL_FULL_RANGE)
			precision := ast.NewInteger(yyDollar[3].ival)
			t.Typmods = ast.NewNodeList(fullRange, precision)
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[5].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 1190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2557
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2560
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2563
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2564
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 1194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2565
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 1195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2569
		{
			yyVAL.typnam = makeTypeNameFromNodeList(ast.NewNodeList(ast.NewString("interval")))
		}
	case 1196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2576
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_YEAR))
		}
	case 1197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2578
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_MONTH))
		}
	case 1198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2580
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY))
		}
	case 1199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2582
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_HOUR))
		}
	case 1200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2584
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_MINUTE))
		}
	case 1201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2586
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2588
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_YEAR | ast.INTERVAL_MASK_MONTH))
		}
	case 1203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2592
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR))
		}
	case 1204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2596
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE))
		}
	case 1205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2600
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2611
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE))
		}
	case 1207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2615
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2626
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1209:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2637
		{
			yyVAL.list = nil
		}
	case 1210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2642
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_SECOND))
		}
	case 1211:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2646
		{
			yyVAL.list = ast.NewNodeList(
				ast.NewInteger(ast.INTERVAL_MASK_SECOND),
				ast.NewInteger(yyDollar[3].ival), // precision
			)
		}
	case 1212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2656
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 1213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2660
		{
			// Create all fields: first ColId followed by indirection items
			allFields := []ast.Node{ast.NewString(yyDollar[1].str)}
			allFields = append(allFields, yyDollar[2].list.Items...)
			yyVAL.node = ast.NewColumnRef(allFields...)
		}
	case 1214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2670
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2674
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2680
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1217:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2681
		{
			yyVAL.node = nil
		}
	case 1218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2685
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2689
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 1220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2693
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 1221:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2697
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 1222:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2702
		{
			yyVAL.list = nil
		}
	case 1223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2704
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2716
		{
			funcCall := yyDollar[1].node.(*ast.FuncCall)

			// Apply within_group_clause if present
			if yyDollar[2].list != nil {
				// WITHIN GROUP (ORDER BY ...) - store the sort list
				funcCall.AggOrder = yyDollar[2].list
				funcCall.AggWithinGroup = true
			}

			// Apply filter_clause if present
			if yyDollar[3].node != nil {
				// FILTER (WHERE condition) - store the filter expression
				funcCall.AggFilter = yyDollar[3].node
			}

			// Apply over_clause if present (window functions)
			if yyDollar[4].windef != nil {
				funcCall.Over = yyDollar[4].windef
			}

			yyVAL.node = funcCall
		}
	case 1225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2740
		{
			jsonAgg := yyDollar[1].node

			// Create or get the Constructor
			var constructor *ast.JsonAggConstructor

			// Handle the filter_clause and over_clause by setting them in the Constructor
			switch jsonFunc := jsonAgg.(type) {
			case *ast.JsonObjectAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			case *ast.JsonArrayAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			}

			// Set filter and over clauses outside the switch (DRY)
			if constructor != nil {
				if yyDollar[2].node != nil {
					constructor.AggFilter = yyDollar[2].node.(ast.Node)
				}
				if yyDollar[3].windef != nil {
					constructor.Over = yyDollar[3].windef
				}
			}

			yyVAL.node = jsonAgg
		}
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2773
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1227:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2779
		{
			// SystemFuncName("pg_collation_for")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("pg_collation_for"))
			funcCall := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2787
		{
			// makeSQLValueFunction(SVFOP_CURRENT_DATE, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_DATE, 0, -1, 0)
		}
	case 1229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2792
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIME, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIME, 0, -1, 0)
		}
	case 1230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2797
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIME_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIME_N, 0, yyDollar[3].ival, 0)
		}
	case 1231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2802
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIMESTAMP, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIMESTAMP, 0, -1, 0)
		}
	case 1232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2807
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIMESTAMP_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIMESTAMP_N, 0, yyDollar[3].ival, 0)
		}
	case 1233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2812
		{
			// makeSQLValueFunction(SVFOP_LOCALTIME, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIME, 0, -1, 0)
		}
	case 1234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2817
		{
			// makeSQLValueFunction(SVFOP_LOCALTIME_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIME_N, 0, yyDollar[3].ival, 0)
		}
	case 1235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2822
		{
			// makeSQLValueFunction(SVFOP_LOCALTIMESTAMP, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIMESTAMP, 0, -1, 0)
		}
	case 1236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2827
		{
			// makeSQLValueFunction(SVFOP_LOCALTIMESTAMP_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIMESTAMP_N, 0, yyDollar[3].ival, 0)
		}
	case 1237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2832
		{
			// makeSQLValueFunction(SVFOP_CURRENT_ROLE, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_ROLE, 0, -1, 0)
		}
	case 1238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2837
		{
			// makeSQLValueFunction(SVFOP_CURRENT_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_USER, 0, -1, 0)
		}
	case 1239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2842
		{
			// makeSQLValueFunction(SVFOP_SESSION_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_SESSION_USER, 0, -1, 0)
		}
	case 1240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2847
		{
			// SystemFuncName("system_user")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("system_user"))
			funcCall := ast.NewFuncCall(funcName, nil, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2855
		{
			// makeSQLValueFunction(SVFOP_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_USER, 0, -1, 0)
		}
	case 1242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2860
		{
			// makeSQLValueFunction(SVFOP_CURRENT_CATALOG, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_CATALOG, 0, -1, 0)
		}
	case 1243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2865
		{
			// makeSQLValueFunction(SVFOP_CURRENT_SCHEMA, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_SCHEMA, 0, -1, 0)
		}
	case 1244:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2870
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[3].node, yyDollar[5].typnam, 0)
		}
	case 1245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2874
		{
			// SystemFuncName("extract")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("extract"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2882
		{
			// SystemFuncName("normalize")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("normalize"))
			funcCall := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node), 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1247:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2890
		{
			// SystemFuncName("normalize")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("normalize"))
			args := ast.NewNodeList(yyDollar[3].node)
			args.Items = append(args.Items, ast.NewA_Const(ast.NewString(yyDollar[5].str), -1))
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2900
		{
			// SystemFuncName("overlay")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlay"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2908
		{
			// SystemFuncName("overlay")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlay"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2916
		{
			// SystemFuncName("position")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("position"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2924
		{
			// SystemFuncName("substring")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("substring"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2932
		{
			// SystemFuncName("substring")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("substring"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1253:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2940
		{
			// SystemFuncName("treat")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), llast(yyDollar[5].typnam.Names))
			args := ast.NewNodeList(yyDollar[3].node)
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1254:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2949
		{
			// SystemFuncName("btrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("btrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1255:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2957
		{
			// SystemFuncName("ltrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("ltrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1256:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2965
		{
			// SystemFuncName("rtrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("rtrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2973
		{
			// SystemFuncName("btrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("btrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1258:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2981
		{
			// makeSimpleA_Expr(AEXPR_NULLIF, "=", $3, $5, @1)
			operName := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NULLIF, operName, yyDollar[3].node, yyDollar[5].node, 0)
		}
	case 1259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2987
		{
			// CoalesceExpr *c = makeNode(CoalesceExpr); c->args = $3; c->location = @1
			yyVAL.node = ast.NewCoalesceExpr(0, yyDollar[3].list)
		}
	case 1260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2992
		{
			// MinMaxExpr *v = makeNode(MinMaxExpr); v->args = $3; v->op = IS_GREATEST; v->location = @1
			yyVAL.node = ast.NewMinMaxExpr(0, 0, 0, ast.IS_GREATEST, yyDollar[3].list, 0)
		}
	case 1261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2997
		{
			// MinMaxExpr *v = makeNode(MinMaxExpr); v->args = $3; v->op = IS_LEAST; v->location = @1
			yyVAL.node = ast.NewMinMaxExpr(0, 0, 0, ast.IS_LEAST, yyDollar[3].list, 0)
		}
	case 1262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3002
		{
			// makeXmlExpr(IS_XMLCONCAT, NULL, NIL, $3, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLCONCAT, "", nil, nil, yyDollar[3].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1263:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3007
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, NIL, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, nil, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1264:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3012
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, $6, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, yyDollar[6].list, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1265:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3017
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, NIL, $6, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, nil, nil, yyDollar[6].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1266:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3022
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, $6, $8, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, yyDollar[6].list, nil, yyDollar[8].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3027
		{
			// makeXmlExpr(IS_XMLFOREST, NULL, $3, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLFOREST, "", yyDollar[3].list, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1268:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3032
		{
			// makeXmlExpr(IS_XMLPARSE, NULL, NIL, list_make2($4, makeBoolAConst($5, -1)), @1)
			// x->xmloption = $3
			wsOption := ast.NewA_Const(ast.NewBoolean(yyDollar[5].bval), -1)
			args := ast.NewNodeList(yyDollar[4].node, wsOption)
			xmlOption := ast.XmlOptionType(yyDollar[3].ival)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPARSE, "", nil, nil, args, xmlOption, false, 0, -1, 0)
		}
	case 1269:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3041
		{
			// SystemFuncName("xmlexists") - xmlexists(A PASSING [BY REF] B [BY REF]) is converted to xmlexists(A, B)
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("xmlexists"))
			args := ast.NewNodeList(yyDollar[3].node, yyDollar[4].node)
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1270:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3050
		{
			// makeXmlExpr(IS_XMLPI, $4, NIL, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPI, yyDollar[4].str, nil, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1271:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3055
		{
			// makeXmlExpr(IS_XMLPI, $4, NIL, list_make1($6), @1)
			args := ast.NewNodeList(yyDollar[6].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPI, yyDollar[4].str, nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1272:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3061
		{
			// makeXmlExpr(IS_XMLROOT, NULL, NIL, list_make3(...), @1)
			args := ast.NewNodeList(yyDollar[3].node, yyDollar[5].node, yyDollar[6].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLROOT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3067
		{
			/* Support for legacy (non-standard) json_object() */
			funcName := ast.NewNodeList(ast.NewString("json_object"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1274:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3078
		{
			n := ast.NewJsonObjectConstructor(yyDollar[3].list, yyDollar[4].bval, yyDollar[5].bval)
			if yyDollar[6].node != nil {
				n.Output = yyDollar[6].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3086
		{
			n := ast.NewJsonObjectConstructor(nil, false, false)
			if yyDollar[3].node != nil {
				n.Output = yyDollar[3].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1276:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3098
		{
			n := ast.NewJsonArrayConstructor(yyDollar[3].list, yyDollar[4].bval)
			if yyDollar[5].node != nil {
				n.Output = yyDollar[5].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1277:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3110
		{
			n := ast.NewJsonArrayQueryConstructor(yyDollar[3].stmt, true) /* XXX: absent_on_null = true */
			if yyDollar[4].node != nil {
				n.Format = yyDollar[4].node.(*ast.JsonFormat)
			}
			if yyDollar[5].node != nil {
				n.Output = yyDollar[5].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3123
		{
			n := ast.NewJsonArrayConstructor(nil, true)
			if yyDollar[3].node != nil {
				n.Output = yyDollar[3].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1279:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3131
		{
			n := ast.NewJsonParseExpr(yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[4].bval)
			n.Output = nil
			yyVAL.node = n
		}
	case 1280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3137
		{
			n := ast.NewJsonScalarExpr(yyDollar[3].node.(ast.Expr))
			n.Output = nil
			yyVAL.node = n
		}
	case 1281:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3143
		{
			n := ast.NewJsonSerializeExpr(yyDollar[3].node.(*ast.JsonValueExpr))
			if yyDollar[4].node != nil {
				n.Output = yyDollar[4].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3151
		{
			m := ast.NewMergeSupportFunc(ast.TEXTOID, ast.InvalidOid, 0)
			yyVAL.node = m
		}
	case 1283:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:3162
		{
			n := ast.NewJsonFuncExpr(ast.JSON_QUERY_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			if yyDollar[7].node != nil {
				n.Output = yyDollar[7].node.(*ast.JsonOutput)
			}
			n.Wrapper = ast.JsonWrapper(yyDollar[8].ival)
			n.Quotes = ast.JsonQuotes(yyDollar[9].ival)
			if yyDollar[10].node != nil {
				behaviors := yyDollar[10].node.(*ast.NodeList)
				if linitial(behaviors) != nil {
					n.OnEmpty = linitial(behaviors).(*ast.JsonBehavior)
				}
				if lsecond(behaviors) != nil {
					n.OnError = lsecond(behaviors).(*ast.JsonBehavior)
				}
			}
			yyVAL.node = n
		}
	case 1284:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3187
		{
			n := ast.NewJsonFuncExpr(ast.JSON_EXISTS_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			n.Output = nil
			if yyDollar[7].node != nil {
				n.OnError = yyDollar[7].node.(*ast.JsonBehavior)
			}
			yyVAL.node = n
		}
	case 1285:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3203
		{
			n := ast.NewJsonFuncExpr(ast.JSON_VALUE_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			if yyDollar[7].node != nil {
				n.Output = yyDollar[7].node.(*ast.JsonOutput)
			}
			if yyDollar[8].node != nil {
				behaviors := yyDollar[8].node.(*ast.NodeList)
				if linitial(behaviors) != nil {
					n.OnEmpty = linitial(behaviors).(*ast.JsonBehavior)
				}
				if lsecond(behaviors) != nil {
					n.OnError = lsecond(behaviors).(*ast.JsonBehavior)
				}
			}
			yyVAL.node = n
		}
	case 1286:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3223
		{
			// XmlSerialize node - n->xmloption = $3; n->expr = $4; n->typeName = $6; n->indent = $7;
			xmlOption := ast.XmlOptionType(yyDollar[3].ival)
			yyVAL.node = ast.NewXmlSerialize(xmlOption, yyDollar[4].node, yyDollar[6].typnam, yyDollar[7].bval, 0)
		}
	case 1287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3233
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3237
		{
			yyVAL.list = nil
		}
	case 1289:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3244
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1290:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3248
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3252
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node)
		}
	case 1292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3256
		{
			sysTypeName := &ast.TypeName{
				Names:   ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("int4")),
				Typemod: -1,
			}
			tc := ast.NewTypeCast(yyDollar[3].node, sysTypeName, -1)
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, ast.NewInteger(1), tc)
		}
	case 1293:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3265
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3272
		{
			yyDollar[3].list.Append(yyDollar[1].node)
			yyVAL.list = yyDollar[3].list
		}
	case 1295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3277
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3281
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3288
		{
			// list_make2(makeStringConst($1, @1), $3)
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str), yyDollar[3].node)
		}
	case 1298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3298
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3299
		{
			yyVAL.str = "year"
		}
	case 1300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3300
		{
			yyVAL.str = "month"
		}
	case 1301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3301
		{
			yyVAL.str = "day"
		}
	case 1302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3302
		{
			yyVAL.str = "hour"
		}
	case 1303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3303
		{
			yyVAL.str = "minute"
		}
	case 1304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3304
		{
			yyVAL.str = "second"
		}
	case 1305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3305
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1306:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3310
		{
			/* overlay(A PLACING B FROM C FOR D) is converted to overlay(A, B, C, D) */
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 1307:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3315
		{
			/* overlay(A PLACING B FROM C) is converted to overlay(A, B, C) */
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3323
		{
			yyVAL.list = ast.NewNodeList(yyDollar[3].node, yyDollar[1].node)
		}
	case 1309:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3326
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3331
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3335
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3343
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3347
		{
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3352
		{
			yyVAL.bval = true
		}
	case 1315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3353
		{
			yyVAL.bval = false
		}
	case 1316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3354
		{
			yyVAL.bval = false
		}
	case 1317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3357
		{
			yyVAL.bval = true
		}
	case 1318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3358
		{
			yyVAL.bval = false
		}
	case 1319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3359
		{
			yyVAL.bval = false
		}
	case 1320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3364
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3368
		{
			yyVAL.node = ast.NewA_Const(ast.NewNull(), 0)
		}
	case 1322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3375
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_YES)), 0)
		}
	case 1323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3379
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_NO)), 0)
		}
	case 1324:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3383
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_NO_VALUE)), 0)
		}
	case 1325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3387
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_OMITTED)), 0)
		}
	case 1326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3394
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3395
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3396
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3400
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3404
		{
			// PostgreSQL uses check_func_name here
			// We implement the logic inline - prepend ColId to indirection list
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[2].list.Items...)
			result := ast.NewNodeList(items...)
			yyVAL.list = result
		}
	case 1331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3415
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].list, nil, 0)
		}
	case 1332:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3419
		{
			// Special case for aggregates like COUNT(*) - set AggStar to true
			funcCall := ast.NewFuncCall(yyDollar[1].list, nil, 0)
			funcCall.AggStar = true
			yyVAL.node = funcCall
		}
	case 1333:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3426
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[3].list, 0)
			// Note: In full implementation, would set agg_order from $4
			yyVAL.node = funcCall
		}
	case 1334:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3432
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, ast.NewNodeList(yyDollar[4].node), 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1335:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3438
		{
			yyDollar[3].list.Append(yyDollar[6].node)
			args := yyDollar[3].list
			funcCall := ast.NewFuncCall(yyDollar[1].list, args, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $7
			yyVAL.node = funcCall
		}
	case 1336:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3446
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would mark as aggregate and set agg_order from $5
			yyVAL.node = funcCall
		}
	case 1337:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3452
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would set agg_distinct = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3460
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3464
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3471
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3475
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3479
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1343:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3486
		{
			yyVAL.node = ast.NewCaseExpr(0, yyDollar[2].node, yyDollar[3].list, yyDollar[4].node)
		}
	case 1344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3491
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3492
		{
			yyVAL.node = nil
		}
	case 1346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3496
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3498
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1348:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3506
		{
			yyVAL.node = ast.NewCaseWhen(yyDollar[2].node, yyDollar[4].node)
		}
	case 1349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3512
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3513
		{
			yyVAL.node = nil
		}
	case 1351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3518
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3522
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3526
		{
			yyVAL.node = ast.NewArrayConstructor(ast.NewNodeList())
		}
	case 1354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3531
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3533
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1356:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3540
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3541
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1358:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3543
		{
			nodeList := yyDollar[2].list
			nodeList.Append(yyDollar[4].node)
			yyVAL.list = nodeList
		}
	case 1359:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3550
		{
			yyVAL.node = yyDollar[3].list
		}
	case 1360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3551
		{
			yyVAL.node = ast.NewNodeList()
		}
	case 1361:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3555
		{
			yyDollar[2].list.Append(yyDollar[4].node)
			yyVAL.node = yyDollar[2].list
		}
	case 1362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3561
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3562
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3563
		{
			yyVAL.ival = int(ast.ALL_SUBLINK)
		}
	case 1365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3568
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1366:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3572
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3576
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~"))
		}
	case 1368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3580
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~"))
		}
	case 1369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3584
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~*"))
		}
	case 1370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3588
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~*"))
		}
	case 1371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3594
		{
			yyVAL.str = "NFC"
		}
	case 1372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3595
		{
			yyVAL.str = "NFD"
		}
	case 1373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3596
		{
			yyVAL.str = "NFKC"
		}
	case 1374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3597
		{
			yyVAL.str = "NFKD"
		}
	case 1375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3601
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3602
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3603
		{
			yyVAL.ival = int(ast.JS_TYPE_ARRAY)
		}
	case 1378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3604
		{
			yyVAL.ival = int(ast.JS_TYPE_OBJECT)
		}
	case 1379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3605
		{
			yyVAL.ival = int(ast.JS_TYPE_SCALAR)
		}
	case 1380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3609
		{
			yyVAL.bval = true
		}
	case 1381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3610
		{
			yyVAL.bval = true
		}
	case 1382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3611
		{
			yyVAL.bval = false
		}
	case 1383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3612
		{
			yyVAL.bval = false
		}
	case 1384:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3613
		{
			yyVAL.bval = false
		}
	case 1385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3618
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3622
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3631
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3636
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3637
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3638
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3639
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3640
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3643
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3644
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3645
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3648
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3651
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3655
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[2].str))
		}
	case 1399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3659
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3666
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1401:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3670
		{
			yyVAL.list = nil
		}
	case 1402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3676
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3682
		{
			// Create qualified type name from name + attrs
			name := ast.NewString(yyDollar[1].str)
			names := &ast.NodeList{Items: append([]ast.Node{name}, yyDollar[2].list.Items...)}
			typeName := makeTypeNameFromNodeList(names)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3693
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3697
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3701
		{
			yyVAL.typnam = makeTypeNameFromString("int2")
		}
	case 1407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3705
		{
			yyVAL.typnam = makeTypeNameFromString("int8")
		}
	case 1408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3709
		{
			yyVAL.typnam = makeTypeNameFromString("float4")
		}
	case 1409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3713
		{
			yyVAL.typnam = yyDollar[2].typnam
		}
	case 1410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3717
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3721
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3726
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3731
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3736
		{
			yyVAL.typnam = makeTypeNameFromString("bool")
		}
	case 1415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3742
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3746
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3752
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3756
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3762
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3766
		{
			yyVAL.typnam = yyDollar[1].typnam
			// Set typmods to nil for BitWithoutLength in const context
			yyVAL.typnam.Typmods = nil
		}
	case 1421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3774
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3778
		{
			yyVAL.typnam = yyDollar[1].typnam
			// Set typmods to nil for CharacterWithoutLength in const context
			yyVAL.typnam.Typmods = nil
		}
	case 1423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3786
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3794
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3802
		{
			yyVAL.str = "varchar"
		}
	case 1426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3806
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3814
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3822
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1429:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3832
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Set typmods with the length parameter, similar to PostgreSQL's approach
			lengthConst := ast.NewInteger(int(yyDollar[3].ival))
			typeName.Typmods = ast.NewNodeList()
			typeName.Typmods.Append(lengthConst)
			yyVAL.typnam = typeName
		}
	case 1430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3843
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// CHAR defaults to CHAR(1)
				lengthConst := ast.NewInteger(1)
				typeName.Typmods = ast.NewNodeList()
				typeName.Typmods.Append(lengthConst)
			}
			yyVAL.typnam = typeName
		}
	case 1431:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3857
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3869
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1433:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3881
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3891
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1435:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3901
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3911
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3923
		{
			yyVAL.typnam = makeTypeNameFromString("json")
		}
	case 1438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3928
		{
			yyVAL.ival = 1
		}
	case 1439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3929
		{
			yyVAL.ival = 0
		}
	case 1440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3930
		{
			yyVAL.ival = 0
		}
	case 1441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3933
		{
			yyVAL.ival = 1
		}
	case 1442:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3934
		{
			yyVAL.ival = 0
		}
	case 1443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3938
		{
			if yyDollar[2].ival < 1 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else if yyDollar[2].ival <= 7 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else {
				yyVAL.typnam = makeTypeNameFromString("float8")
			}
		}
	case 1444:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3948
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3955
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1446:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3959
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3966
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1448:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3970
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3975
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3976
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3979
		{
			yyVAL.str = "+"
		}
	case 1452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3980
		{
			yyVAL.str = "-"
		}
	case 1453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3981
		{
			yyVAL.str = "*"
		}
	case 1454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3982
		{
			yyVAL.str = "/"
		}
	case 1455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3983
		{
			yyVAL.str = "%"
		}
	case 1456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3984
		{
			yyVAL.str = "^"
		}
	case 1457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3985
		{
			yyVAL.str = "<"
		}
	case 1458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3986
		{
			yyVAL.str = ">"
		}
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3987
		{
			yyVAL.str = "="
		}
	case 1460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3988
		{
			yyVAL.str = "<="
		}
	case 1461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3989
		{
			yyVAL.str = ">="
		}
	case 1462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3990
		{
			yyVAL.str = "<>"
		}
	case 1463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3994
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3998
		{
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[3].list.Items...)
			yyVAL.list = ast.NewNodeList(items...)
		}
	case 1465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4007
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4008
		{
			yyVAL.list = nil
		}
	case 1467:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4013
		{
			// WITHIN GROUP (ORDER BY ...) for ordered-set aggregates
			yyVAL.list = yyDollar[4].list
		}
	case 1468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4017
		{
			yyVAL.list = nil
		}
	case 1469:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4022
		{
			// FILTER (WHERE condition) for aggregate filtering
			yyVAL.node = yyDollar[4].node
		}
	case 1470:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4026
		{
			yyVAL.node = nil
		}
	case 1471:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4030
		{
			yyVAL.ival = 0
		}
	case 1472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4031
		{
			yyVAL.ival = 0
		}
	case 1473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4035
		{
			subLink := ast.NewSubLink(ast.ANY_SUBLINK, yyDollar[1].stmt.(*ast.SelectStmt))
			yyVAL.node = subLink
		}
	case 1474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4040
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4055
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4056
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4060
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4065
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4066
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4075
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4076
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4085
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4087
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			// Use NodeList directly for SortClause
			selectStmt.SortClause = yyDollar[2].list
			yyVAL.stmt = selectStmt
		}
	case 1484:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4094
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			selectStmt.LockingClause = yyDollar[3].list // Set the locking clause
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1485:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4106
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			if yyDollar[3].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[3].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[3].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[3].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4118
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			yyVAL.stmt = selectStmt
		}
	case 1487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4124
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			yyVAL.stmt = selectStmt
		}
	case 1488:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4131
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			if yyDollar[5].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[5].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[5].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[5].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1489:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4144
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[5].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4163
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4164
		{
			yyVAL.list = nil
		}
	case 1492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4168
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1493:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4169
		{
			yyVAL.list = nil
		}
	case 1494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4174
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4178
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4186
		{
			lockingClause := &ast.LockingClause{
				BaseNode:   ast.BaseNode{Tag: ast.T_LockingClause},
				Strength:   ast.LockClauseStrength(yyDollar[1].ival),
				LockedRels: yyDollar[2].list, // Store as *NodeList directly
				WaitPolicy: ast.LockWaitPolicy(yyDollar[3].ival),
			}
			yyVAL.node = lockingClause
		}
	case 1497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4198
		{
			yyVAL.ival = int(ast.LCS_FORUPDATE)
		}
	case 1498:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4199
		{
			yyVAL.ival = int(ast.LCS_FORNOKEYUPDATE)
		}
	case 1499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4200
		{
			yyVAL.ival = int(ast.LCS_FORSHARE)
		}
	case 1500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4201
		{
			yyVAL.ival = int(ast.LCS_FORKEYSHARE)
		}
	case 1501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4205
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1502:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4206
		{
			yyVAL.list = nil
		}
	case 1503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4211
		{
			yyVAL.ival = int(ast.LockWaitError)
		}
	case 1504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4212
		{
			yyVAL.ival = int(ast.LockWaitSkip)
		}
	case 1505:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4213
		{
			yyVAL.ival = int(ast.LockWaitBlock)
		}
	case 1506:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4224
		{
			selectStmt := ast.NewSelectStmt()
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1507:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4243
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].list
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4261
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = ast.NewNodeList(starTarget)
			selectStmt.FromClause = ast.NewNodeList(yyDollar[2].rangevar)
			yyVAL.stmt = selectStmt
		}
	case 1509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4271
		{
			// VALUES clause is a SelectStmt with ValuesLists
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1510:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4276
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_UNION, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1511:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4281
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_INTERSECT, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1512:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4286
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_EXCEPT, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4297
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4298
		{
			yyVAL.list = nil
		}
	case 1515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4302
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4303
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4308
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4312
		{
			// Implicit alias (no AS keyword)
			yyVAL.target = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 1519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4317
		{
			// No alias - use default naming
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4322
		{
			// SELECT * - all columns
			yyVAL.target = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 1521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4333
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1522:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4334
		{
			yyVAL.list = nil
		}
	case 1523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4338
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4339
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4348
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeVar
		}
	case 1526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4356
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			rangeTableSample := yyDollar[3].node.(*ast.RangeTableSample)
			rangeTableSample.Relation = rangeVar
			yyVAL.node = rangeTableSample
		}
	case 1527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4366
		{
			/* Subquery in FROM clause */
			subquery := yyDollar[1].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[2].alias != nil {
				alias = yyDollar[2].alias
			}
			rangeSubselect := ast.NewRangeSubselect(false, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4377
		{
			/* LATERAL subquery in FROM clause */
			subquery := yyDollar[2].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[3].alias != nil {
				alias = yyDollar[3].alias
			}
			rangeSubselect := ast.NewRangeSubselect(true, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4388
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1530:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4392
		{
			joinExpr := yyDollar[2].node.(*ast.JoinExpr)
			joinExpr.Alias = yyDollar[4].alias
			yyVAL.node = joinExpr
		}
	case 1531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4398
		{
			rangeFunc := yyDollar[1].node.(*ast.RangeFunction)
			funcAliasList := yyDollar[2].list
			if funcAliasList != nil && funcAliasList.Len() >= 2 {
				// func_alias_clause returns [alias, coldeflist]
				if alias := linitial(funcAliasList); alias != nil {
					rangeFunc.Alias = alias.(*ast.Alias)
				}
				if coldeflist := lsecond(funcAliasList); coldeflist != nil {
					// ColDefList is now *NodeList, no conversion needed
					if nodeList, ok := coldeflist.(*ast.NodeList); ok && nodeList != nil {
						rangeFunc.ColDefList = nodeList
					}
				}
			}
			yyVAL.node = rangeFunc
		}
	case 1532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4416
		{
			rangeFunc := yyDollar[2].node.(*ast.RangeFunction)
			rangeFunc.Lateral = true
			funcAliasList := yyDollar[3].list
			if funcAliasList != nil && funcAliasList.Len() >= 2 {
				// func_alias_clause returns [alias, coldeflist]
				if alias := linitial(funcAliasList); alias != nil {
					rangeFunc.Alias = alias.(*ast.Alias)
				}
				if coldeflist := lsecond(funcAliasList); coldeflist != nil {
					// ColDefList is now *NodeList, no conversion needed
					if nodeList, ok := coldeflist.(*ast.NodeList); ok && nodeList != nil {
						rangeFunc.ColDefList = nodeList
					}
				}
			}
			yyVAL.node = rangeFunc
		}
	case 1533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4435
		{
			rangeTableFunc := yyDollar[1].node.(*ast.RangeTableFunc)
			if yyDollar[2].alias != nil {
				rangeTableFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4443
		{
			rangeTableFunc := yyDollar[2].node.(*ast.RangeTableFunc)
			rangeTableFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeTableFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4452
		{
			jsonTable := yyDollar[1].node.(*ast.JsonTable)
			if yyDollar[2].alias != nil {
				jsonTable.Alias = yyDollar[2].alias
			}
			yyVAL.node = jsonTable
		}
	case 1536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4460
		{
			jsonTable := yyDollar[2].node.(*ast.JsonTable)
			jsonTable.Lateral = true
			if yyDollar[3].alias != nil {
				jsonTable.Alias = yyDollar[3].alias
			}
			yyVAL.node = jsonTable
		}
	case 1537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4472
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.rangevar = rangeVar
		}
	case 1538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4478
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4485
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.rangevar = rangeVar
		}
	case 1540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4491
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1541:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4497
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4507
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4511
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4517
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4534
		{
			yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
		}
	case 1546:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4538
		{
			/* CROSS JOIN is same as unqualified inner join */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewJoinExpr(ast.JOIN_INNER, left, right, nil)
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1547:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4547
		{
			left := yyDollar[1].node
			right := yyDollar[4].node
			joinType := ast.JoinType(yyDollar[2].ival)
			joinQual := yyDollar[5].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(joinType, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(joinType, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1548:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4573
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[3].node
			joinQual := yyDollar[4].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(ast.JOIN_INNER, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(ast.JOIN_INNER, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1549:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4599
		{
			left := yyDollar[1].node
			right := yyDollar[5].node
			joinType := ast.JoinType(yyDollar[3].ival)
			join := ast.NewNaturalJoinExpr(joinType, left, right)
			yyVAL.node = join
		}
	case 1550:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4607
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewNaturalJoinExpr(ast.JOIN_INNER, left, right)
			yyVAL.node = join
		}
	case 1551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4617
		{
			yyVAL.ival = int(ast.JOIN_FULL)
		}
	case 1552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4618
		{
			yyVAL.ival = int(ast.JOIN_LEFT)
		}
	case 1553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4619
		{
			yyVAL.ival = int(ast.JOIN_RIGHT)
		}
	case 1554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4620
		{
			yyVAL.ival = int(ast.JOIN_INNER)
		}
	case 1555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4625
		{
			yyVAL.ival = 1
		}
	case 1556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4626
		{
			yyVAL.ival = 0
		}
	case 1557:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4636
		{
			/* Create a two-element list: [name_list, alias_or_null] following PostgreSQL */
			nameList := yyDollar[3].list
			var aliasNode ast.Node = nil
			if yyDollar[5].alias != nil {
				aliasNode = yyDollar[5].alias
			}
			usingList := ast.NewNodeList(nameList, aliasNode)
			yyVAL.node = usingList
		}
	case 1558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4647
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4658
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4662
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4666
		{
			yyVAL.with = ast.NewWithClause(yyDollar[3].list, true, 0)
		}
	case 1562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4672
		{
			yyVAL.with = yyDollar[1].with
		}
	case 1563:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4673
		{
			yyVAL.with = nil
		}
	case 1564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4678
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4682
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1566:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4690
		{
			ctename := yyDollar[1].str
			query := yyDollar[6].stmt
			cte := ast.NewCommonTableExpr(ctename, query)

			// Set column names if provided
			if yyDollar[2].list != nil {
				cte.Aliascolnames = yyDollar[2].list
			}

			// Set materialized option
			cte.Ctematerialized = ast.CTEMaterialized(yyDollar[4].ival)

			// Set search clause if provided
			if yyDollar[8].node != nil {
				cte.SearchClause = yyDollar[8].node.(*ast.CTESearchClause)
			}

			// Set cycle clause if provided
			if yyDollar[9].node != nil {
				cte.CycleClause = yyDollar[9].node.(*ast.CTECycleClause)
			}

			yyVAL.node = cte
		}
	case 1567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4718
		{
			yyVAL.ival = int(ast.CTEMaterializeAlways)
		}
	case 1568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4719
		{
			yyVAL.ival = int(ast.CTEMaterializeNever)
		}
	case 1569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4720
		{
			yyVAL.ival = int(ast.CTEMaterializeDefault)
		}
	case 1570:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4725
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, false, seqColumn)
		}
	case 1571:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4731
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, true, seqColumn)
		}
	case 1572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4737
		{
			yyVAL.node = nil
		}
	case 1573:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:4744
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			markValue := yyDollar[6].node.(ast.Expression)
			markDefault := yyDollar[8].node.(ast.Expression)
			pathColumn := yyDollar[10].str
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, markValue, markDefault, pathColumn)
		}
	case 1574:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4753
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			pathColumn := yyDollar[6].str
			// For simple CYCLE clause, use nil for mark values to avoid TO/DEFAULT in deparsing
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, nil, nil, pathColumn)
		}
	case 1575:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4761
		{
			yyVAL.node = nil
		}
	case 1576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4772
		{
			/* Create a SelectStmt with VALUES clause following PostgreSQL */
			selectStmt := ast.NewSelectStmt()
			exprList := yyDollar[3].list
			selectStmt.ValuesLists = ast.NewNodeList(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1577:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4780
		{
			/* Add additional VALUES row to existing SelectStmt */
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			exprList := yyDollar[4].list
			selectStmt.ValuesLists.Append(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4794
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4795
		{
			yyVAL.node = nil
		}
	case 1580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4803
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1581:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4805
		{
			cursorExpr := ast.NewCurrentOfExpr(0, yyDollar[4].str) // cvarno filled in by parse analysis
			yyVAL.node = cursorExpr
		}
	case 1582:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4809
		{
			yyVAL.node = nil
		}
	case 1583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4813
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4821
		{
			yyVAL.alias = yyDollar[1].alias
		}
	case 1585:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4822
		{
			yyVAL.alias = nil
		}
	case 1586:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4827
		{
			nameList := yyDollar[4].list
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nameList)
		}
	case 1587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4832
		{
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 1588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4836
		{
			nameList := yyDollar[3].list
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nameList)
		}
	case 1589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4841
		{
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 1590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4852
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].alias, nil)
		}
	case 1591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4856
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[3].list)
		}
	case 1592:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4860
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.list = ast.NewNodeList(alias, yyDollar[4].list)
		}
	case 1593:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4865
		{
			alias := ast.NewAlias(yyDollar[1].str, nil)
			yyVAL.list = ast.NewNodeList(alias, yyDollar[3].list)
		}
	case 1594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4870
		{
			yyVAL.list = ast.NewNodeList(nil, nil)
		}
	case 1595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4878
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.alias = alias
		}
	case 1596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4882
		{
			yyVAL.alias = nil
		}
	case 1597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4890
		{
			yyVAL.ival = 1
		}
	case 1598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4891
		{
			yyVAL.ival = 0
		}
	case 1599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4895
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1600:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4896
		{
			yyVAL.list = yyDollar[4].list
		}
	case 1601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4900
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1602:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4901
		{
			yyVAL.list = nil
		}
	case 1603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4911
		{
			yyVAL.into = ast.NewIntoClause(yyDollar[2].node.(*ast.RangeVar), nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 1604:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4914
		{
			yyVAL.into = nil
		}
	case 1605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4925
		{
			hasOrdinality := yyDollar[2].ival == 1
			// For a simple function, create a NodeList containing a single NodeList with the function
			funcList := ast.NewNodeList(yyDollar[1].node)
			functions := ast.NewNodeList(funcList)
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, false, functions, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1606:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4934
		{
			hasOrdinality := yyDollar[6].ival == 1
			// rowsfrom_list is already a NodeList containing NodeLists
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, true, yyDollar[4].list, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4944
		{
			yyVAL.ival = 1
		}
	case 1608:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4945
		{
			yyVAL.ival = 0
		}
	case 1609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4951
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 1610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4955
		{
			yyDollar[1].list.Append(yyDollar[3].list)
			yyVAL.list = yyDollar[1].list
		}
	case 1611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4962
		{
			funcList := ast.NewNodeList(yyDollar[1].node)
			if yyDollar[2].list != nil {
				funcList.Append(yyDollar[2].list)
			}
			yyVAL.list = funcList
		}
	case 1612:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4971
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4972
		{
			yyVAL.list = nil
		}
	case 1614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4982
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 1615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4986
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 1616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4998
		{
			yyVAL.funparam = &ast.FunctionParameter{
				BaseNode: ast.BaseNode{Tag: ast.T_FunctionParameter},
				Name:     yyDollar[1].str,
				ArgType:  yyDollar[2].typnam,
				Mode:     ast.FUNC_PARAM_TABLE,
				DefExpr:  nil,
			}
		}
	case 1617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5011
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5012
		{
			yyVAL.list = nil
		}
	case 1619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5018
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5022
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5031
		{
			columnDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			// Note: opt_collate_clause support can be added when needed
			// PostgreSQL sets: n->collClause = (CollateClause *) $3;
			yyVAL.node = columnDef
		}
	case 1622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5042
		{
			// Pass the NodeList directly to NewCollateClause
			nameList := yyDollar[2].list
			yyVAL.node = ast.NewCollateClause(nameList)
		}
	case 1623:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5047
		{
			yyVAL.node = nil
		}
	case 1624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5052
		{
			yyVAL.str = "BY REF"
		}
	case 1625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5053
		{
			yyVAL.str = "BY VALUE"
		}
	case 1626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5059
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5063
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5067
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1629:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5071
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5079
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5083
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5091
		{
			target := ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
			yyVAL.node = target
		}
	case 1633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5096
		{
			target := ast.NewResTarget("", yyDollar[2].node)
			yyVAL.node = target
		}
	case 1634:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5105
		{
			// XMLTABLE(xpath_expr PASSING doc_expr COLUMNS ...)
			// $3 is xpath_expr (should be RowExpr), $4 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[4].node.(ast.Expression), yyDollar[3].node.(ast.Expression), nil, yyDollar[6].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1635:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:5113
		{
			// XMLTABLE(XMLNAMESPACES(...), xpath_expr PASSING doc_expr COLUMNS ...)
			// $8 is xpath_expr (should be RowExpr), $9 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[9].node.(ast.Expression), yyDollar[8].node.(ast.Expression), yyDollar[5].list, yyDollar[11].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5124
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5128
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5137
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5142
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, nil, true, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5147
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			// TODO: Process column options from $3
			yyVAL.node = rangeTableFuncCol
		}
	case 1641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5157
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5161
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5170
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5174
		{
			yyVAL.node = ast.NewDefElem("default", yyDollar[2].node)
		}
	case 1645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5178
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(true))
		}
	case 1646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5182
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(false))
		}
	case 1647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5186
		{
			yyVAL.node = ast.NewDefElem("path", yyDollar[2].node)
		}
	case 1648:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:5199
		{
			// Extract path name from optional path name node
			var pathName string
			if yyDollar[6].node != nil {
				if strNode, ok := yyDollar[6].node.(*ast.String); ok {
					pathName = strNode.SVal
				}
			}

			// Create JsonTablePathSpec from the a_expr (path expression) and optional path name
			pathSpec := ast.NewJsonTablePathSpec(yyDollar[5].node, pathName, 0)

			// Create JsonTable with context item and path spec
			jsonTable := ast.NewJsonTable(yyDollar[3].node.(*ast.JsonValueExpr), pathSpec)
			if yyDollar[10].list != nil {
				jsonTable.Columns = yyDollar[10].list
			}
			yyVAL.node = jsonTable
		}
	case 1649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5223
		{
			var format *ast.JsonFormat
			if yyDollar[2].node != nil {
				format = yyDollar[2].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonValueExpr(yyDollar[1].node, format)
		}
	case 1650:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5234
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1651:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5235
		{
			yyVAL.node = nil
		}
	case 1652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5240
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1653:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5241
		{
			yyVAL.node = nil
		}
	case 1654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5245
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5246
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5251
		{
			jsonArg := ast.NewJsonArgument(yyDollar[1].node.(*ast.JsonValueExpr), yyDollar[3].str)
			yyVAL.node = jsonArg
		}
	case 1657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5257
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5258
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5264
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5268
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5280
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1662:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5284
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5291
		{
			yyVAL.bval = false
		}
	case 1664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5292
		{
			yyVAL.bval = true
		}
	case 1665:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5293
		{
			yyVAL.bval = false
		}
	case 1666:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5297
		{
			yyVAL.bval = false
		}
	case 1667:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5298
		{
			yyVAL.bval = true
		}
	case 1668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5299
		{
			yyVAL.bval = true
		}
	case 1669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5304
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5305
		{
			yyVAL.list = nil
		}
	case 1671:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5316
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)

			yyVAL.node = ast.NewJsonObjectAgg(constructor, yyDollar[3].node.(*ast.JsonKeyValue), yyDollar[4].bval, yyDollar[5].bval)
		}
	case 1672:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5331
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)
			constructor.AggOrder = yyDollar[4].list
			yyVAL.node = ast.NewJsonArrayAgg(constructor, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].bval)
		}
	case 1673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5344
		{
			var jsonFormat *ast.JsonFormat
			if yyDollar[3].node != nil {
				jsonFormat = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonOutput(yyDollar[2].typnam, ast.NewJsonReturning(jsonFormat, 0, 0))
		}
	case 1674:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5351
		{
			yyVAL.node = nil
		}
	case 1675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5357
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JSON_BEHAVIOR_DEFAULT,
				Expr:     yyDollar[2].node,
			}
		}
	case 1676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5365
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JsonBehaviorType(yyDollar[1].ival),
				Expr:     nil,
			}
		}
	case 1677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5376
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_ERROR)
		}
	case 1678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5377
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_NULL)
		}
	case 1679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5378
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_TRUE)
		}
	case 1680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5379
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_FALSE)
		}
	case 1681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5380
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_UNKNOWN)
		}
	case 1682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5381
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_ARRAY)
		}
	case 1683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5382
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_OBJECT)
		}
	case 1684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5383
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY)
		}
	case 1685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5388
		{
			// Return a list with ON EMPTY behavior and nil for ON ERROR
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, nil}}
		}
	case 1686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5392
		{
			// Return a list with nil for ON EMPTY and ON ERROR behavior
			yyVAL.node = &ast.NodeList{Items: []ast.Node{nil, yyDollar[1].node}}
		}
	case 1687:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5396
		{
			// Return a list with both ON EMPTY and ON ERROR behaviors
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, yyDollar[4].node}}
		}
	case 1688:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5400
		{
			yyVAL.node = nil
		}
	case 1689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5405
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1690:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5406
		{
			yyVAL.node = nil
		}
	case 1691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5411
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5412
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5413
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5414
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1695:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5415
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1696:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5416
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5417
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5418
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1699:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5419
		{
			yyVAL.ival = int(ast.JSW_UNSPEC)
		}
	case 1700:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5424
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5425
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1702:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5426
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5427
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1704:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5428
		{
			yyVAL.ival = int(ast.JS_QUOTES_UNSPEC)
		}
	case 1705:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5434
		{
			// Parse the encoding name and map to JsonEncoding constant
			var encoding ast.JsonEncoding
			switch yyDollar[4].str {
			case "utf8":
				encoding = ast.JS_ENC_UTF8
			case "utf16":
				encoding = ast.JS_ENC_UTF16
			case "utf32":
				encoding = ast.JS_ENC_UTF32
			default:
				encoding = ast.JS_ENC_DEFAULT
			}
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   encoding,
			}
		}
	case 1706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5454
		{
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   ast.JS_ENC_DEFAULT,
			}
		}
	case 1707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5464
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1708:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5465
		{
			yyVAL.node = nil
		}
	case 1709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5470
		{
			yyVAL.node = ast.NewString("path")
		}
	case 1710:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5471
		{
			yyVAL.node = nil
		}
	case 1711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5477
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1712:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5481
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1713:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5490
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FOR_ORDINALITY, yyDollar[1].str)
			yyVAL.node = jsonTableCol
		}
	case 1714:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5499
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_REGULAR, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[3].node != nil {
				strNode := yyDollar[3].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1715:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5513
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FORMATTED, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			if yyDollar[3].node != nil {
				jsonTableCol.Format = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = jsonTableCol
		}
	case 1716:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5527
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_EXISTS, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1717:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5538
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, "")
			jsonTableCol.Columns = yyDollar[6].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1718:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5547
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, yyDollar[5].str)
			jsonTableCol.Columns = yyDollar[8].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5558
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1720:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5559
		{
			yyVAL.node = nil
		}
	case 1721:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5575
		{
			insertStmt := yyDollar[5].node.(*ast.InsertStmt)
			insertStmt.Relation = yyDollar[4].rangevar
			insertStmt.WithClause = yyDollar[1].with
			insertStmt.OnConflictClause = yyDollar[6].onconflict
			insertStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = insertStmt
		}
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5587
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1723:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5591
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5600
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.SelectStmt = yyDollar[1].stmt
			yyVAL.node = insertStmt
		}
	case 1725:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5606
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Override = ast.OverridingKind(yyDollar[2].ival)
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1726:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5613
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1727:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5620
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.Override = ast.OverridingKind(yyDollar[5].ival)
			insertStmt.SelectStmt = yyDollar[7].stmt
			yyVAL.node = insertStmt
		}
	case 1728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5628
		{
			insertStmt := ast.NewInsertStmt(nil)
			// For DEFAULT VALUES, SelectStmt should be nil
			insertStmt.SelectStmt = nil
			yyVAL.node = insertStmt
		}
	case 1729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5637
		{
			yyVAL.ival = int(ast.OVERRIDING_USER_VALUE)
		}
	case 1730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5638
		{
			yyVAL.ival = int(ast.OVERRIDING_SYSTEM_VALUE)
		}
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5643
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1732:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5647
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1733:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5655
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1734:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:5667
		{
			updateStmt := ast.NewUpdateStmt(yyDollar[3].rangevar)
			updateStmt.WithClause = yyDollar[1].with
			updateStmt.TargetList = yyDollar[5].list
			updateStmt.FromClause = yyDollar[6].list
			updateStmt.WhereClause = yyDollar[7].node
			updateStmt.ReturningList = yyDollar[8].list
			yyVAL.stmt = updateStmt
		}
	case 1735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5680
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1736:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5684
		{
			// Concatenate the lists - equivalent to PostgreSQL's list_concat
			for _, item := range yyDollar[3].list.Items {
				yyDollar[1].list.Append(item)
			}
			yyVAL.list = yyDollar[1].list
		}
	case 1737:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5695
		{
			target := yyDollar[1].target
			target.Val = yyDollar[3].node
			yyVAL.list = ast.NewNodeList(target)
		}
	case 1738:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5701
		{
			// Multi-column assignment: (col1, col2) = (val1, val2)
			// Create MultiAssignRef nodes for each target, matching PostgreSQL exactly
			targetList := yyDollar[2].list
			ncolumns := len(targetList.Items)

			// Create a MultiAssignRef source for each target
			for i, item := range targetList.Items {
				resCol := item.(*ast.ResTarget)
				multiAssignRef := ast.NewMultiAssignRef(yyDollar[5].node, i+1, ncolumns, 0)
				resCol.Val = multiAssignRef
			}

			// Return the entire target list
			yyVAL.list = targetList
		}
	case 1739:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5721
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5727
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1741:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5728
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1742:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5738
		{
			deleteStmt := ast.NewDeleteStmt(yyDollar[4].rangevar)
			deleteStmt.WithClause = yyDollar[1].with
			deleteStmt.UsingClause = yyDollar[5].list
			deleteStmt.WhereClause = yyDollar[6].node
			deleteStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = deleteStmt
		}
	case 1743:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5750
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1744:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5754
		{
			yyVAL.list = nil
		}
	case 1745:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5769
		{
			mergeStmt := &ast.MergeStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_MergeStmt},
			}
			mergeStmt.WithClause = yyDollar[1].with
			mergeStmt.Relation = yyDollar[4].rangevar
			mergeStmt.SourceRelation = yyDollar[6].node
			mergeStmt.JoinCondition = yyDollar[8].node
			mergeStmt.MergeWhenClauses = yyDollar[9].list
			mergeStmt.ReturningList = yyDollar[10].list
			yyVAL.stmt = mergeStmt
		}
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5786
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1747:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5790
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1748:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5801
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Query:     yyDollar[3].stmt,
				IsFrom:    false,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Initialize Options as empty NodeList
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[9].list != nil {
				nodeList := yyDollar[9].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			yyVAL.stmt = copyStmt
		}
	case 1749:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:5825
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Relation:  yyDollar[3].rangevar,
				IsFrom:    yyDollar[5].ival != 0,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Assign column list directly as NodeList
			copyStmt.Attlist = yyDollar[4].list

			// Initialize Options as empty NodeList and add options
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[2].node != nil {
				copyStmt.Options.Append(yyDollar[2].node)
			}
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[10].list != nil {
				nodeList := yyDollar[10].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			if yyDollar[11].node != nil {
				copyStmt.WhereClause = yyDollar[11].node
			}
			yyVAL.stmt = copyStmt
		}
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5861
		{
			yyVAL.ival = 1
		}
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5862
		{
			yyVAL.ival = 0
		}
	case 1752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5866
		{
			yyVAL.ival = 1
		}
	case 1753:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5867
		{
			yyVAL.ival = 0
		}
	case 1754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5871
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5872
		{
			yyVAL.str = ""
		}
	case 1756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5873
		{
			yyVAL.str = ""
		}
	case 1757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5878
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1758:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5881
		{
			yyVAL.node = nil
		}
	case 1759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5886
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1760:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5889
		{
			yyVAL.node = nil
		}
	case 1761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5893
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1762:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5894
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1763:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5899
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1764:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5907
		{
			yyVAL.list = nil
		}
	case 1765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5914
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5918
		{
			yyVAL.node = ast.NewDefElem("freeze", ast.NewString("true"))
		}
	case 1767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5922
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1768:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5926
		{
			yyVAL.node = ast.NewDefElem("null", ast.NewString(yyDollar[3].str))
		}
	case 1769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5930
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("csv"))
		}
	case 1770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5934
		{
			yyVAL.node = ast.NewDefElem("header", ast.NewString("true"))
		}
	case 1771:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5938
		{
			yyVAL.node = ast.NewDefElem("quote", ast.NewString(yyDollar[3].str))
		}
	case 1772:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5942
		{
			yyVAL.node = ast.NewDefElem("escape", ast.NewString(yyDollar[3].str))
		}
	case 1773:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5946
		{
			yyVAL.node = ast.NewDefElem("force_quote", yyDollar[3].list)
		}
	case 1774:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5950
		{
			yyVAL.node = ast.NewDefElem("force_quote", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1775:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5954
		{
			yyVAL.node = ast.NewDefElem("force_not_null", yyDollar[4].list)
		}
	case 1776:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5958
		{
			yyVAL.node = ast.NewDefElem("force_not_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1777:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5962
		{
			yyVAL.node = ast.NewDefElem("force_null", yyDollar[3].list)
		}
	case 1778:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5966
		{
			yyVAL.node = ast.NewDefElem("force_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1779:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5970
		{
			yyVAL.node = ast.NewDefElem("encoding", ast.NewString(yyDollar[2].str))
		}
	case 1780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5978
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1781:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5982
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1782:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5989
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5995
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5996
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5997
		{
			yyVAL.node = ast.NewA_Star(0)
		}
	case 1786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5998
		{
			yyVAL.node = ast.NewString("default")
		}
	case 1787:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5999
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1788:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6000
		{
			yyVAL.node = nil
		}
	case 1789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6005
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1790:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6009
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6015
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6019
		{
			yyVAL.str = "true"
		}
	case 1793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6020
		{
			yyVAL.str = "false"
		}
	case 1794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6021
		{
			yyVAL.str = "on"
		}
	case 1795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6022
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6026
		{
			yyVAL.node = ast.NewFloat(yyDollar[1].str)
		}
	case 1797:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6027
		{
			yyVAL.node = ast.NewFloat(yyDollar[2].str)
		}
	case 1798:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6029
		{
			f := ast.NewFloat(yyDollar[2].str)
			f.FVal = "-" + f.FVal
			yyVAL.node = f
		}
	case 1799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6034
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6038
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6039
		{
			yyVAL.node = nil
		}
	case 1802:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6043
		{
			yyVAL.objType = ast.OBJECT_ACCESS_METHOD
		}
	case 1803:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6044
		{
			yyVAL.objType = ast.OBJECT_EVENT_TRIGGER
		}
	case 1804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6045
		{
			yyVAL.objType = ast.OBJECT_EXTENSION
		}
	case 1805:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6046
		{
			yyVAL.objType = ast.OBJECT_FDW
		}
	case 1806:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6047
		{
			yyVAL.objType = ast.OBJECT_LANGUAGE
		}
	case 1807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6048
		{
			yyVAL.objType = ast.OBJECT_PUBLICATION
		}
	case 1808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6049
		{
			yyVAL.objType = ast.OBJECT_SCHEMA
		}
	case 1809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6050
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_SERVER
		}
	case 1810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6054
		{
			yyVAL.objType = ast.OBJECT_POLICY
		}
	case 1811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6055
		{
			yyVAL.objType = ast.OBJECT_RULE
		}
	case 1812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6056
		{
			yyVAL.objType = ast.OBJECT_TRIGGER
		}
	case 1813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6060
		{
			yyVAL.objType = yyDollar[1].objType
		}
	case 1814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6061
		{
			yyVAL.objType = ast.OBJECT_DATABASE
		}
	case 1815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6062
		{
			yyVAL.objType = ast.OBJECT_ROLE
		}
	case 1816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6063
		{
			yyVAL.objType = ast.OBJECT_SUBSCRIPTION
		}
	case 1817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6064
		{
			yyVAL.objType = ast.OBJECT_TABLESPACE
		}
	case 1818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6069
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].typnam)
		}
	case 1819:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6074
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 1820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6081
		{
			yyVAL.bval = true
		}
	case 1821:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6082
		{
			yyVAL.bval = false
		}
	case 1822:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6086
		{
			yyVAL.ival = 1
		}
	case 1823:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6087
		{
			yyVAL.ival = 0
		}
	case 1826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6103
		{
			yyVAL.node = nil
		}
	case 1827:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6105
		{
			yyVAL.node = nil
		}
	case 1828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6113
		{
			yyVAL.ival = 1
		}
	case 1829:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6114
		{
			yyVAL.ival = 0
		}
	case 1830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6118
		{
			yyVAL.ival = 1
		}
	case 1831:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6119
		{
			yyVAL.ival = 0
		}
	case 1832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6123
		{
			yyVAL.ival = 1
		}
	case 1833:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6124
		{
			yyVAL.ival = 0
		}
	case 1834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6128
		{
			yyVAL.ival = 1
		}
	case 1835:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6129
		{
			yyVAL.ival = 0
		}
	case 1836:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6138
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1837:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6144
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1838:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6150
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1839:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6156
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1840:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6162
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1841:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6170
		{
			yyVAL.ival = int(ast.MERGE_WHEN_MATCHED)
		}
	case 1842:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6171
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_SOURCE)
		}
	case 1843:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6175
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1844:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6176
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1845:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6180
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1846:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6181
		{
			yyVAL.node = nil
		}
	case 1847:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6186
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_UPDATE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			yyVAL.node = mergeWhen
		}
	case 1848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6201
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_DELETE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1849:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6210
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			mergeWhen.Values = yyDollar[2].list
			yyVAL.node = mergeWhen
		}
	case 1850:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6217
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[3].ival)
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1851:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6224
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1852:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6237
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[6].ival)
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[8].list
			yyVAL.node = mergeWhen
		}
	case 1853:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6250
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1854:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6259
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1855:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6274
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_UPDATE)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			onConflict.TargetList = yyDollar[7].list
			onConflict.WhereClause = yyDollar[8].node
			yyVAL.onconflict = onConflict
		}
	case 1856:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6284
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_NOTHING)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			yyVAL.onconflict = onConflict
		}
	case 1857:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6292
		{
			yyVAL.onconflict = nil
		}
	case 1858:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6303
		{
			// Create InferClause for column-based conflict detection
			infer := ast.NewInferClause()
			// Assign IndexElems directly as NodeList
			infer.IndexElems = yyDollar[2].list
			infer.WhereClause = yyDollar[4].node
			yyVAL.node = infer
		}
	case 1859:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6312
		{
			// Create InferClause for constraint-based conflict detection
			infer := ast.NewInferClause()
			infer.Conname = yyDollar[3].str
			yyVAL.node = infer
		}
	case 1860:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6319
		{
			yyVAL.node = nil
		}
	case 1861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6330
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1862:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6334
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6341
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1864:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6345
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1865:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6352
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Name = yyDollar[1].str
		}
	case 1866:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6357
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[1].node
		}
	case 1867:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6362
		{
			yyVAL.node = yyDollar[4].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[2].node
		}
	case 1868:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6370
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Ordering = ast.SortByDir(yyDollar[3].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[4].ival)
			yyVAL.node = indexElem
		}
	case 1869:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6381
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Opclassopts = yyDollar[3].list
			indexElem.Ordering = ast.SortByDir(yyDollar[4].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[5].ival)
			yyVAL.node = indexElem
		}
	case 1870:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6395
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1871:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6396
		{
			yyVAL.list = nil
		}
	case 1872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6400
		{
			yyVAL.ival = int(ast.SORTBY_ASC)
		}
	case 1873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6401
		{
			yyVAL.ival = int(ast.SORTBY_DESC)
		}
	case 1874:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6402
		{
			yyVAL.ival = int(ast.SORTBY_DEFAULT)
		}
	case 1875:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6406
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_FIRST)
		}
	case 1876:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6407
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_LAST)
		}
	case 1877:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6408
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_DEFAULT)
		}
	case 1878:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6413
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1879:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6417
		{
			yyVAL.list = nil
		}
	case 1880:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6438
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[6].list
			createStmt.InhRelations = yyDollar[8].list
			createStmt.PartSpec = yyDollar[9].partspec
			createStmt.AccessMethod = yyDollar[10].str
			createStmt.Options = yyDollar[11].list
			createStmt.OnCommit = yyDollar[12].oncommit
			createStmt.TableSpaceName = yyDollar[13].str
			yyVAL.stmt = createStmt
		}
	case 1881:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:6454
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[9].list
			createStmt.InhRelations = yyDollar[11].list
			createStmt.PartSpec = yyDollar[12].partspec
			createStmt.AccessMethod = yyDollar[13].str
			createStmt.Options = yyDollar[14].list
			createStmt.OnCommit = yyDollar[15].oncommit
			createStmt.TableSpaceName = yyDollar[16].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1882:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:6471
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[6].list)
			createStmt.TableElts = yyDollar[7].list
			createStmt.PartSpec = yyDollar[8].partspec
			createStmt.AccessMethod = yyDollar[9].str
			createStmt.Options = yyDollar[10].list
			createStmt.OnCommit = yyDollar[11].oncommit
			createStmt.TableSpaceName = yyDollar[12].str
			yyVAL.stmt = createStmt
		}
	case 1883:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:6487
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[9].list)
			createStmt.TableElts = yyDollar[10].list
			createStmt.PartSpec = yyDollar[11].partspec
			createStmt.AccessMethod = yyDollar[12].str
			createStmt.Options = yyDollar[13].list
			createStmt.OnCommit = yyDollar[14].oncommit
			createStmt.TableSpaceName = yyDollar[15].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1884:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:6504
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[7].rangevar)
			createStmt.TableElts = yyDollar[8].list
			createStmt.PartBound = yyDollar[9].partboundspec
			createStmt.PartSpec = yyDollar[10].partspec
			createStmt.AccessMethod = yyDollar[11].str
			createStmt.Options = yyDollar[12].list
			createStmt.OnCommit = yyDollar[13].oncommit
			createStmt.TableSpaceName = yyDollar[14].str
			yyVAL.stmt = createStmt
		}
	case 1885:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:6521
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[10].rangevar)
			createStmt.TableElts = yyDollar[11].list
			createStmt.PartBound = yyDollar[12].partboundspec
			createStmt.PartSpec = yyDollar[13].partspec
			createStmt.AccessMethod = yyDollar[14].str
			createStmt.Options = yyDollar[15].list
			createStmt.OnCommit = yyDollar[16].oncommit
			createStmt.TableSpaceName = yyDollar[17].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6539
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6540
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1888:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6541
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1889:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6542
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1890:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6543
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1891:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6544
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6545
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 1893:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6546
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 1894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6550
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1895:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6551
		{
			yyVAL.list = nil
		}
	case 1896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6556
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1897:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6561
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6568
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6569
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6570
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1901:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6575
		{
			yyVAL.node = ast.NewTableLikeClause(yyDollar[2].rangevar, ast.TableLikeOption(yyDollar[3].ival))
		}
	case 1902:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6582
		{
			yyVAL.ival = yyDollar[1].ival | yyDollar[3].ival
		}
	case 1903:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6586
		{
			yyVAL.ival = yyDollar[1].ival & ^yyDollar[3].ival
		}
	case 1904:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6590
		{
			yyVAL.ival = 0
		}
	case 1905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6596
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMMENTS)
		}
	case 1906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6597
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMPRESSION)
		}
	case 1907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6598
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_CONSTRAINTS)
		}
	case 1908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6599
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_DEFAULTS)
		}
	case 1909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6600
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_IDENTITY)
		}
	case 1910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6601
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_GENERATED)
		}
	case 1911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6602
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_INDEXES)
		}
	case 1912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6603
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STATISTICS)
		}
	case 1913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6604
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STORAGE)
		}
	case 1914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6605
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_ALL)
		}
	case 1915:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6610
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1916:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6611
		{
			yyVAL.str = "default"
		}
	case 1917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6615
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1918:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6616
		{
			yyVAL.str = ""
		}
	case 1919:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6620
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1920:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6621
		{
			yyVAL.str = "default"
		}
	case 1921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6625
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1922:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6626
		{
			yyVAL.str = ""
		}
	case 1923:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6631
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1924:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6632
		{
			yyVAL.list = nil
		}
	case 1925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6637
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1926:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6643
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6650
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6651
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1929:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6656
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[2].list
			yyVAL.node = colDef
		}
	case 1930:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6662
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[4].list
			yyVAL.node = colDef
		}
	case 1931:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6673
		{
			hashSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_HASH)
			hashSpec.IsDefault = false

			// Parse hash partition bounds (modulus and remainder)
			hashOptions := yyDollar[5].list
			for _, optNode := range hashOptions.Items {
				if defElem, ok := optNode.(*ast.DefElem); ok {
					if defElem.Defname == "modulus" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Modulus = integerVal.IVal
							}
						}
					} else if defElem.Defname == "remainder" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Remainder = integerVal.IVal
							}
						}
					}
				}
			}

			yyVAL.partboundspec = hashSpec
		}
	case 1932:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6702
		{
			listSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			listSpec.IsDefault = false
			listSpec.ListDatums = yyDollar[5].list
			yyVAL.partboundspec = listSpec
		}
	case 1933:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6711
		{
			rangeSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_RANGE)
			rangeSpec.IsDefault = false
			rangeSpec.LowDatums = yyDollar[5].list
			rangeSpec.HighDatums = yyDollar[9].list
			yyVAL.partboundspec = rangeSpec
		}
	case 1934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6721
		{
			defaultSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			defaultSpec.IsDefault = true
			yyVAL.partboundspec = defaultSpec
		}
	case 1935:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6730
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, ast.NewA_Const(ast.NewInteger(yyDollar[2].ival), 0))
		}
	case 1936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6737
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1937:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6741
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1938:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6749
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1939:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6750
		{
			yyVAL.list = nil
		}
	case 1940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6755
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1941:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6759
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1942:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6767
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6773
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6778
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1945:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6783
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			colDef.StorageName = yyDollar[3].str
			colDef.Compression = yyDollar[4].str
			colDef.Fdwoptions = yyDollar[5].list
			colDef.Constraints = yyDollar[6].list
			yyVAL.node = colDef
		}
	case 1946:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6795
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1947:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6800
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1948:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6807
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6812
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6813
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1951:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6815
		{
			/*
			 * Note: the CollateClause is momentarily included in
			 * the list built by ColQualList, but we split it out
			 * again in SplitColQualList.
			 */
			collateClause := ast.NewCollateClause(yyDollar[2].list)
			yyVAL.node = collateClause
		}
	case 1952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6828
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1953:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6833
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_NOT_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1954:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6838
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRED)
			yyVAL.node = constraint
		}
	case 1955:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6843
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_IMMEDIATE)
			yyVAL.node = constraint
		}
	case 1956:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6851
		{
			yyVAL.bval = true
		}
	case 1957:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6852
		{
			yyVAL.bval = false
		}
	case 1958:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6853
		{
			yyVAL.bval = true
		}
	case 1959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6857
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_ALWAYS
		}
	case 1960:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6858
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_BY_DEFAULT
		}
	case 1961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6863
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1962:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6865
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6870
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1964:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6874
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1965:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6878
		{
			// SeqOptElem already returns a DefElem, so we can use it directly
			// Check for invalid options as per PostgreSQL
			defElem := yyDollar[2].defelt
			if defElem.Defname == "as" || defElem.Defname == "restart" || defElem.Defname == "owned_by" {
				yylex.Error("sequence option not supported here")
			}
			yyVAL.defelt = yyDollar[2].defelt
		}
	case 1966:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6888
		{
			yyVAL.defelt = ast.NewDefElem("generated", ast.NewInteger(int(yyDollar[3].byt)))
		}
	case 1967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6894
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1968:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6895
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1969:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6900
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].typnam)
		}
	case 1970:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6904
		{
			yyVAL.defelt = ast.NewDefElem("cache", yyDollar[2].node)
		}
	case 1971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6908
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(true))
		}
	case 1972:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6912
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(false))
		}
	case 1973:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6916
		{
			yyVAL.defelt = ast.NewDefElem("increment", yyDollar[3].node)
		}
	case 1974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6920
		{
			yyVAL.defelt = ast.NewDefElem("logged", nil)
		}
	case 1975:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6924
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", yyDollar[2].node)
		}
	case 1976:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6928
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", yyDollar[2].node)
		}
	case 1977:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6932
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", nil)
		}
	case 1978:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6936
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", nil)
		}
	case 1979:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6940
		{
			yyVAL.defelt = ast.NewDefElem("owned_by", yyDollar[3].list)
		}
	case 1980:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6944
		{
			yyVAL.defelt = ast.NewDefElem("sequence_name", yyDollar[3].list)
		}
	case 1981:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6948
		{
			yyVAL.defelt = ast.NewDefElem("start", yyDollar[3].node)
		}
	case 1982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6952
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1983:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6956
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6960
		{
			yyVAL.defelt = ast.NewDefElem("unlogged", nil)
		}
	case 1985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6966
		{
		}
	case 1986:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6967
		{
		}
	case 1987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6971
		{
		}
	case 1988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6972
		{
		}
	case 1989:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6973
		{
		}
	case 1990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6978
		{
			// RECHECK no longer does anything in opclass definitions,
			// but we still accept it to ease porting of old database dumps.
			// When this is used, we should emit a notice.
			// For now, just return true to indicate RECHECK was present
			yyVAL.bval = true
		}
	case 1991:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6985
		{
			yyVAL.bval = false
		}
	case 1992:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6989
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1993:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6990
		{
			yyVAL.list = nil
		}
	case 1994:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6995
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NOTNULL)
		}
	case 1995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6999
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NULL)
		}
	case 1996:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7003
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Keys = nil // Will be filled by the parser
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Options = yyDollar[3].list
			constraint.Indexspace = yyDollar[4].str
			yyVAL.node = constraint
		}
	case 1997:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7012
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = nil // Will be filled by the parser
			yyVAL.node = constraint
		}
	case 1998:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7018
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			yyVAL.node = constraint
		}
	case 1999:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7024
		{
			constraint := ast.NewConstraint(ast.CONSTR_DEFAULT)
			constraint.RawExpr = yyDollar[2].node
			yyVAL.node = constraint
		}
	case 2000:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7030
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Pktable = yyDollar[2].rangevar
			constraint.PkAttrs = yyDollar[3].list
			constraint.FkMatchtype = yyDollar[4].byt
			if actions := yyDollar[5].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			yyVAL.node = constraint
		}
	case 2001:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7047
		{
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.Options = yyDollar[5].list
			yyVAL.node = constraint
		}
	case 2002:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7054
		{
			constraint := ast.NewConstraint(ast.CONSTR_GENERATED)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.RawExpr = yyDollar[5].node
			yyVAL.node = constraint
		}
	case 2003:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7064
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 2004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7069
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2005:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7074
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			processConstraintAttributeSpec(yyDollar[5].ival, constraint)
			yyVAL.node = constraint
		}
	case 2006:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7082
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 2007:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7093
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Indexname = yyDollar[2].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[3].ival, constraint)
			yyVAL.node = constraint
		}
	case 2008:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7104
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 2009:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7114
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Indexname = yyDollar[3].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[4].ival, constraint)
			yyVAL.node = constraint
		}
	case 2010:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7125
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.FkAttrs = yyDollar[4].list
			constraint.Pktable = yyDollar[7].rangevar
			constraint.PkAttrs = yyDollar[8].list
			constraint.FkMatchtype = yyDollar[9].byt
			if actions := yyDollar[10].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			processConstraintAttributeSpec(yyDollar[11].ival, constraint)
			yyVAL.node = constraint
		}
	case 2011:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7146
		{
			constraint := ast.NewConstraint(ast.CONSTR_EXCLUSION)
			constraint.AccessMethod = yyDollar[2].str
			constraint.Exclusions = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			constraint.WhereClause = yyDollar[9].node
			processConstraintAttributeSpec(yyDollar[10].ival, constraint)
			yyVAL.node = constraint
		}
	case 2012:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7160
		{
			yyVAL.bval = true
		}
	case 2013:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7161
		{
			yyVAL.bval = false
		}
	case 2014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7167
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2015:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7173
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2016:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7181
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[3].list)
		}
	case 2017:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7186
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[5].list)
		}
	case 2018:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7194
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2019:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7198
		{
			yyVAL.list = nil
		}
	case 2020:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7205
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_FULL
		}
	case 2021:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7209
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_PARTIAL
		}
	case 2022:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7213
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 2023:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7217
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 2024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7224
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 2025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7234
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 2026:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7244
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = yyDollar[2].keyaction
			yyVAL.keyactions = n
		}
	case 2027:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7251
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[2].keyaction
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 2028:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7258
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 2029:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7273
		{
			// Check for unsupported column lists on UPDATE actions
			keyAction := yyDollar[3].keyaction
			if keyAction.Cols != nil {
				if len(keyAction.Cols.Items) > 0 {
					yylex.Error("column list with SET NULL/SET DEFAULT is only supported for ON DELETE actions")
				}
			}
			yyVAL.keyaction = keyAction
		}
	case 2030:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7286
		{
			yyVAL.keyaction = yyDollar[3].keyaction
		}
	case 2031:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7293
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_NOACTION
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7300
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_RESTRICT
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7307
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_CASCADE
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2034:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7314
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETNULL
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 2035:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7321
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETDEFAULT
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 2036:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7330
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2037:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7331
		{
			yyVAL.list = nil
		}
	case 2038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7335
		{
			yyVAL.partspec = yyDollar[1].partspec
		}
	case 2039:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7336
		{
			yyVAL.partspec = nil
		}
	case 2040:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7341
		{
			partitionSpec := ast.NewPartitionSpec(ast.PartitionStrategy(yyDollar[3].str), yyDollar[5].list)
			yyVAL.partspec = partitionSpec
		}
	case 2041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7349
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2042:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7354
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2043:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7362
		{
			partElem := ast.NewPartitionElem(yyDollar[1].str, nil, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 2044:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7369
		{
			partElem := ast.NewPartitionElem("", yyDollar[1].node, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 2045:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7376
		{
			partElem := ast.NewPartitionElem("", yyDollar[2].node, 0)
			partElem.Collation = yyDollar[4].list
			partElem.Opclass = yyDollar[5].list
			yyVAL.node = partElem
		}
	case 2046:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7385
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2047:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7386
		{
			yyVAL.str = ""
		}
	case 2048:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7390
		{
			yyVAL.oncommit = ast.ONCOMMIT_DROP
		}
	case 2049:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7391
		{
			yyVAL.oncommit = ast.ONCOMMIT_DELETE_ROWS
		}
	case 2050:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7392
		{
			yyVAL.oncommit = ast.ONCOMMIT_PRESERVE_ROWS
		}
	case 2051:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7393
		{
			yyVAL.oncommit = ast.ONCOMMIT_NOOP
		}
	case 2052:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7397
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2053:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7398
		{
			yyVAL.str = ""
		}
	case 2054:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7402
		{
			yyVAL.str = yyDollar[4].str
		}
	case 2055:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7403
		{
			yyVAL.str = ""
		}
	case 2056:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7407
		{
			yyVAL.str = yyDollar[3].str
		}
	case 2057:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:7420
		{
			indexStmt := ast.NewIndexStmt(yyDollar[5].str, yyDollar[7].rangevar, yyDollar[10].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.AccessMethod = yyDollar[8].str
			indexStmt.IndexIncludingParams = yyDollar[12].list
			indexStmt.NullsNotDistinct = !yyDollar[13].bval
			indexStmt.Options = yyDollar[14].list
			indexStmt.TableSpace = yyDollar[15].str
			indexStmt.WhereClause = yyDollar[16].node
			yyVAL.stmt = indexStmt
		}
	case 2058:
		yyDollar = yyS[yypt-19 : yypt+1]
//line postgres.y:7435
		{
			indexStmt := ast.NewIndexStmt(yyDollar[8].str, yyDollar[10].rangevar, yyDollar[13].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.IfNotExists = true
			indexStmt.AccessMethod = yyDollar[11].str
			indexStmt.IndexIncludingParams = yyDollar[15].list
			indexStmt.NullsNotDistinct = !yyDollar[16].bval
			indexStmt.Options = yyDollar[17].list
			indexStmt.TableSpace = yyDollar[18].str
			indexStmt.WhereClause = yyDollar[19].node
			yyVAL.stmt = indexStmt
		}
	case 2059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7451
		{
			yyVAL.bval = true
		}
	case 2060:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7452
		{
			yyVAL.bval = false
		}
	case 2061:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7456
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2062:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7457
		{
			yyVAL.str = "btree"
		}
	case 2063:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7461
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2064:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7462
		{
			yyVAL.list = nil
		}
	case 2065:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7467
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2066:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7472
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2067:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7480
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2068:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7481
		{
			yyVAL.list = nil
		}
	case 2069:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7493
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2070:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7499
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2071:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7506
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 2072:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7512
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2073:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7519
		{
			// Index partition attachment - dedicated rule
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 2074:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7528
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			yyVAL.stmt = alterStmt
		}
	case 2075:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7534
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2076:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7541
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			yyVAL.stmt = alterStmt
		}
	case 2077:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7547
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2078:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7554
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			yyVAL.stmt = alterStmt
		}
	case 2079:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7560
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2080:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7567
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2081:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7573
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2082:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7580
		{
			// Partition commands - dedicated rule for partition-only operations
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2083:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7589
		{
			// Partition commands with IF EXISTS
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[6].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2084:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7599
		{
			// Bulk tablespace move for tables
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 2085:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:7606
		{
			// Bulk tablespace move for tables owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 2086:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7614
		{
			// Bulk tablespace move for indexes
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 2087:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:7621
		{
			// Bulk tablespace move for indexes owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 2088:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7629
		{
			// Bulk tablespace move for materialized views
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[10].str)
			moveStmt.Nowait = yyDollar[11].bval
			yyVAL.stmt = moveStmt
		}
	case 2089:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:7636
		{
			// Bulk tablespace move for materialized views owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[13].str)
			moveStmt.Roles = yyDollar[10].list
			moveStmt.Nowait = yyDollar[14].bval
			yyVAL.stmt = moveStmt
		}
	case 2090:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7647
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2091:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7652
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2092:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7660
		{
			yyVAL.bval = true
		}
	case 2093:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7661
		{
			yyVAL.bval = false
		}
	case 2094:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7666
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].rolespec)
		}
	case 2095:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7671
		{
			yyDollar[1].list.Append(yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 2096:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7679
		{
			roleSpec := yyDollar[1].rolespec

			switch roleSpec.Roletype {
			case ast.ROLESPEC_CSTRING:
				yyVAL.str = roleSpec.Rolename
			case ast.ROLESPEC_PUBLIC:
				// PostgreSQL throws an error for "public" role name
				yylex.Error(`role name "public" is reserved`)
				return 1
			case ast.ROLESPEC_SESSION_USER:
				// PostgreSQL throws an error: SESSION_USER cannot be used as a role name here
				yylex.Error(`SESSION_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_USER:
				// PostgreSQL throws an error: CURRENT_USER cannot be used as a role name here
				yylex.Error(`CURRENT_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_ROLE:
				// PostgreSQL throws an error: CURRENT_ROLE cannot be used as a role name here
				yylex.Error(`CURRENT_ROLE cannot be used as a role name here`)
				return 1
			default:
				yylex.Error(`invalid role specification`)
				return 1
			}
		}
	case 2097:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7710
		{
			// Handle special role names: "public" and "none"
			var roleSpec *ast.RoleSpec

			if yyDollar[1].str == "public" {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_PUBLIC,
				}
			} else if yyDollar[1].str == "none" {
				// PostgreSQL throws an error for "none" - role name "none" is reserved
				yylex.Error(`role name "none" is reserved`)
				return 1
			} else {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_CSTRING,
					Rolename: yyDollar[1].str,
				}
			}
			yyVAL.rolespec = roleSpec
		}
	case 2098:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7733
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_ROLE,
			}
		}
	case 2099:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7740
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_USER,
			}
		}
	case 2100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7747
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_SESSION_USER,
			}
		}
	case 2101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7758
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[2].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2102:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7765
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[5].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7772
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2104:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7779
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[6].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2105:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7786
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ColumnDefault, yyDollar[3].str, yyDollar[4].node)
		}
	case 2106:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7791
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropNotNull, yyDollar[3].str, nil)
		}
	case 2107:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7796
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetNotNull, yyDollar[3].str, nil)
		}
	case 2108:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7801
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetExpression, yyDollar[3].str, yyDollar[8].node)
		}
	case 2109:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7806
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
		}
	case 2110:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7811
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2111:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7818
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStatistics, yyDollar[3].str, yyDollar[6].node)
		}
	case 2112:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7823
		{
			cmd := ast.NewAlterTableCmd(ast.AT_SetStatistics, "", yyDollar[6].node)
			cmd.Num = int16(yyDollar[3].ival)
			yyVAL.node = cmd
		}
	case 2113:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7830
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 2114:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7835
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 2115:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7840
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStorage, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 2116:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7845
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetCompression, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 2117:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7850
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddIdentity, yyDollar[3].str, nil)
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[6].byt
			constraint.Options = yyDollar[9].list
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 2118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7860
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetIdentity, yyDollar[3].str, yyDollar[4].list)
		}
	case 2119:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7865
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2120:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7872
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2121:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7879
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7887
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2123:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7898
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, nil)
			def := ast.NewColumnDef("", yyDollar[6].typnam, 0)
			def.Collclause = yyDollar[7].node.(*ast.CollateClause)
			def.RawDefault = yyDollar[8].node
			cmd.Def = def
			yyVAL.node = cmd
		}
	case 2124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7908
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AlterColumnGenericOptions, yyDollar[3].str, yyDollar[4].list)
		}
	case 2125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7913
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddConstraint, "", yyDollar[2].node)
		}
	case 2126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7918
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterConstraint, "", nil)
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Conname = yyDollar[3].str
			constraint.Deferrable = (yyDollar[4].ival & ast.CAS_DEFERRABLE) != 0
			constraint.Initdeferred = (yyDollar[4].ival & ast.CAS_INITIALLY_DEFERRED) != 0
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 2127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7929
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ValidateConstraint, yyDollar[3].str, nil)
		}
	case 2128:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7934
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2129:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7942
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7950
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOids, "", nil)
		}
	case 2131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7955
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ClusterOn, yyDollar[3].str, nil)
		}
	case 2132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7960
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropCluster, "", nil)
		}
	case 2133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7965
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetLogged, "", nil)
		}
	case 2134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7970
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetUnLogged, "", nil)
		}
	case 2135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7975
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrig, yyDollar[3].str, nil)
		}
	case 2136:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7980
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysTrig, yyDollar[4].str, nil)
		}
	case 2137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7985
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaTrig, yyDollar[4].str, nil)
		}
	case 2138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7990
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigAll, "", nil)
		}
	case 2139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7995
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigUser, "", nil)
		}
	case 2140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8000
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrig, yyDollar[3].str, nil)
		}
	case 2141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8005
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigAll, "", nil)
		}
	case 2142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8010
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigUser, "", nil)
		}
	case 2143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8015
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRule, yyDollar[3].str, nil)
		}
	case 2144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8020
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysRule, yyDollar[4].str, nil)
		}
	case 2145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8025
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaRule, yyDollar[4].str, nil)
		}
	case 2146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8030
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRule, yyDollar[3].str, nil)
		}
	case 2147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8035
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddInherit, "", yyDollar[2].rangevar)
		}
	case 2148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8040
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropInherit, "", yyDollar[3].rangevar)
		}
	case 2149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8045
		{
			typeName := makeTypeNameFromNodeList(yyDollar[2].list)
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddOf, "", typeName)
		}
	case 2150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8051
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOf, "", nil)
		}
	case 2151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8056
		{
			cmd := ast.NewAlterTableCmd(ast.AT_ChangeOwner, "", nil)
			cmd.Newowner = yyDollar[3].rolespec
			yyVAL.node = cmd
		}
	case 2152:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8063
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetAccessMethod, yyDollar[4].str, nil)
		}
	case 2153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8068
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetTableSpace, yyDollar[3].str, nil)
		}
	case 2154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8073
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetRelOptions, "", yyDollar[2].list)
		}
	case 2155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8078
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetRelOptions, "", yyDollar[2].list)
		}
	case 2156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8083
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ReplicaIdentity, "", yyDollar[3].node)
		}
	case 2157:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8088
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRowSecurity, "", nil)
		}
	case 2158:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8093
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRowSecurity, "", nil)
		}
	case 2159:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8098
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ForceRowSecurity, "", nil)
		}
	case 2160:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8103
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_NoForceRowSecurity, "", nil)
		}
	case 2161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8107
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_GenericOptions, "", yyDollar[1].list)
		}
	case 2162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8115
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, yyDollar[4].partboundspec, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2163:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8123
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, yyDollar[4].bval, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8130
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartitionFinalize, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8141
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8150
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8151
		{
			yyVAL.node = nil
		}
	case 2168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8155
		{
		}
	case 2169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8156
		{
		}
	case 2170:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8167
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2171:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8180
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2172:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8193
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2173:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8206
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2174:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8219
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[5].list
			objects.Append(ast.NewString(yyDollar[3].str))
			n.Objects = objects
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2175:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8234
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[7].list
			objects.Append(ast.NewString(yyDollar[5].str))
			n.Objects = objects
			n.Behavior = yyDollar[8].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8249
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2177:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8262
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2178:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8275
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2179:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8288
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2180:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8301
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = false
			n.Objects = yyDollar[4].list
			n.Behavior = yyDollar[5].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2181:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8314
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = true
			n.Objects = yyDollar[6].list
			n.Behavior = yyDollar[7].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8330
		{
			stmt := yyDollar[2].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8336
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = true
			yyVAL.stmt = stmt
		}
	case 2184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8342
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8351
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "TRANSACTION", yyDollar[2].list, false)
		}
	case 2186:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8355
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "SESSION CHARACTERISTICS AS TRANSACTION", yyDollar[5].list, false)
		}
	case 2187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8358
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8362
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8364
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "timezone", nil, false)
		}
	case 2190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8368
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "transaction_isolation", nil, false)
		}
	case 2191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8372
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "session_authorization", nil, false)
		}
	case 2192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8379
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, yyDollar[1].str, nil, false)
		}
	case 2193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8383
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET_ALL, "", nil, false)
		}
	case 2194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8389
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8390
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8394
		{
			yyVAL.stmt = ast.Stmt(yyDollar[2].vsetstmt)
		}
	case 2197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8399
		{
			yyVAL.objType = ast.OBJECT_TABLE
		}
	case 2198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8400
		{
			yyVAL.objType = ast.OBJECT_SEQUENCE
		}
	case 2199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8401
		{
			yyVAL.objType = ast.OBJECT_VIEW
		}
	case 2200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8402
		{
			yyVAL.objType = ast.OBJECT_MATVIEW
		}
	case 2201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8403
		{
			yyVAL.objType = ast.OBJECT_INDEX
		}
	case 2202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8404
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_TABLE
		}
	case 2203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8405
		{
			yyVAL.objType = ast.OBJECT_COLLATION
		}
	case 2204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8406
		{
			yyVAL.objType = ast.OBJECT_CONVERSION
		}
	case 2205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8407
		{
			yyVAL.objType = ast.OBJECT_STATISTIC_EXT
		}
	case 2206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8408
		{
			yyVAL.objType = ast.OBJECT_TSPARSER
		}
	case 2207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8409
		{
			yyVAL.objType = ast.OBJECT_TSDICTIONARY
		}
	case 2208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8410
		{
			yyVAL.objType = ast.OBJECT_TSTEMPLATE
		}
	case 2209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8411
		{
			yyVAL.objType = ast.OBJECT_TSCONFIGURATION
		}
	case 2210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8424
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8429
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8443
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode: ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:  yyDollar[1].list,
				Objargs:  yyDollar[2].list,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8455
		{
			yylex.Error("Use NONE to denote the missing argument of a unary operator.")
			return 1
		}
	case 2214:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8460
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, yyDollar[4].typnam)
		}
	case 2215:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8462
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[4].typnam)
		}
	case 2216:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8464
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, nil)
		}
	case 2217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8468
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8481
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 2219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8483
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 2220:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8487
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2221:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8498
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2222:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8509
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2223:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8520
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DATABASE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2224:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8531
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2225:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8542
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMCONSTRAINT,
				Object:     yyDollar[3].list,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2226:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8554
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2227:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8565
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2228:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8576
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2229:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8587
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2230:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8598
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2231:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8615
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2232:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8632
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2233:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:8644
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[7].rangevar,
				Subname:    yyDollar[5].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2234:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8656
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2235:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8667
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2236:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8678
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2237:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8689
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SCHEMA,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2238:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8700
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2239:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8711
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2240:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8722
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2241:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8733
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2242:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8744
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2243:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8755
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2244:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8766
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2245:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8777
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2246:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8788
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2247:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8799
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2248:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8810
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2249:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8821
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2250:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8832
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2251:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8843
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2252:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8854
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2253:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:8867
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2254:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8880
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2255:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:8893
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2256:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8906
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2257:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:8919
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2258:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8932
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[3].rangevar,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2259:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:8944
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[8].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2260:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8956
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2261:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:8969
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2262:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8982
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_RULE,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2263:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8994
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TRIGGER,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2264:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9006
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2265:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9017
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2266:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9028
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2267:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9039
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLESPACE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2268:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9050
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2269:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9061
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSPARSER,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2270:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9072
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2271:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9083
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSTEMPLATE,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2272:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9094
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2273:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9105
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2274:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9116
		{
			rv, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(err.Error())
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_ATTRIBUTE,
				RelationType: ast.OBJECT_TYPE,
				Relation:     rv,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				Behavior:     ast.DropBehavior(yyDollar[9].dropBehav),
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2275:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9142
		{
			yyVAL.ival = 0
		}
	case 2276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9144
		{
			// Combine constraint attribute bits
			newspec := yyDollar[1].ival | yyDollar[2].ival

			// Check for conflicts (NOT DEFERRABLE + INITIALLY DEFERRED)
			if (newspec & (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED)) == (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED) {
				// This would be an error in real PostgreSQL parser
			}

			yyVAL.ival = newspec
		}
	case 2277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9158
		{
			yyVAL.ival = ast.CAS_NOT_DEFERRABLE
		}
	case 2278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9159
		{
			yyVAL.ival = ast.CAS_DEFERRABLE
		}
	case 2279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9160
		{
			yyVAL.ival = ast.CAS_INITIALLY_IMMEDIATE
		}
	case 2280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9161
		{
			yyVAL.ival = ast.CAS_INITIALLY_DEFERRED
		}
	case 2281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9162
		{
			yyVAL.ival = ast.CAS_NOT_VALID
		}
	case 2282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9163
		{
			yyVAL.ival = ast.CAS_NO_INHERIT
		}
	case 2283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9167
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9172
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9177
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9185
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9189
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2288:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9193
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, yyDollar[5].node, ast.DEFELEM_UNSPEC)
		}
	case 2289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9197
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, nil, ast.DEFELEM_UNSPEC)
		}
	case 2290:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9211
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  yyDollar[7].typnam,
				Options:     yyDollar[8].list,
				SQLBody:     yyDollar[9].node,
			}
			yyVAL.stmt = stmt
		}
	case 2291:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:9225
		{
			// Handle RETURNS TABLE variant
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil, // TODO: Handle table return type
				Options:     yyDollar[11].list,
				SQLBody:     yyDollar[12].node,
			}
			// TODO: Process table_func_column_list into appropriate return type
			yyVAL.stmt = stmt
		}
	case 2292:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9241
		{
			// No explicit return type (for procedures disguised as functions)
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2293:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9256
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: true,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9271
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9272
		{
			yyVAL.list = nil
		}
	case 2296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9277
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9281
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9289
		{
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9293
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9298
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9306
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    yyDollar[2].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9315
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[2].funparammode,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9324
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9333
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    "",
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9342
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    "",
				ArgType: yyDollar[1].typnam,
			}
			yyVAL.funparam = param
		}
	case 2306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9353
		{
			yyVAL.funparammode = ast.FUNC_PARAM_IN
		}
	case 2307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9354
		{
			yyVAL.funparammode = ast.FUNC_PARAM_OUT
		}
	case 2308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9355
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9356
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9357
		{
			yyVAL.funparammode = ast.FUNC_PARAM_VARIADIC
		}
	case 2311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9361
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9365
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2313:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9367
		{
			// Handle %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				// TODO: Add %TYPE indicator
			}
		}
	case 2314:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9377
		{
			// Handle SETOF %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[2].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				Setof: true,
			}
		}
	case 2315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9389
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9390
		{
			yyVAL.list = nil
		}
	case 2317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9395
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].defelt)
			yyVAL.list = list
		}
	case 2318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9401
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9409
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].node)
		}
	case 2320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9413
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 2321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9417
		{
			yyVAL.defelt = ast.NewDefElem("transform", yyDollar[2].list)
		}
	case 2322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9421
		{
			yyVAL.defelt = ast.NewDefElem("window", ast.NewBoolean(true))
		}
	case 2323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9425
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9432
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.node = list
		}
	case 2325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9438
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 2326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9448
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[3].typnam)
			yyVAL.list = list
		}
	case 2327:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9454
		{
			yyDollar[1].list.Append(yyDollar[5].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9462
		{
			yyVAL.node = yyDollar[1].stmt
		}
	case 2329:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9466
		{
			/*
			 * A compound statement is stored as a single-item list
			 * containing the list of statements as its member.  That
			 * way, the parse analysis code can tell apart an empty
			 * body from no body at all.
			 */
			list := ast.NewNodeList()
			list.Append(yyDollar[3].list)
			yyVAL.node = list
		}
	case 2330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9478
		{
			yyVAL.node = nil
		}
	case 2331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9485
		{
			yyVAL.stmt = &ast.ReturnStmt{
				ReturnVal: yyDollar[2].node,
			}
		}
	case 2332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9494
		{
			/* As in stmtmulti, discard empty statements */
			if yyDollar[2].stmt != nil {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			} else {
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9504
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9510
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9511
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2336:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9516
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(false))
		}
	case 2337:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9520
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 2338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9524
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 2339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9528
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("immutable"))
		}
	case 2340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9532
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("stable"))
		}
	case 2341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9536
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("volatile"))
		}
	case 2342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9540
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 2343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9544
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 2344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9548
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 2345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9552
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 2346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9556
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(true))
		}
	case 2347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9560
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(false))
		}
	case 2348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9564
		{
			yyVAL.defelt = ast.NewDefElem("cost", yyDollar[2].node)
		}
	case 2349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9568
		{
			yyVAL.defelt = ast.NewDefElem("rows", yyDollar[2].node)
		}
	case 2350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9572
		{
			yyVAL.defelt = ast.NewDefElem("support", yyDollar[2].list)
		}
	case 2351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9576
		{
			yyVAL.defelt = ast.NewDefElem("set", yyDollar[1].vsetstmt)
		}
	case 2352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9580
		{
			yyVAL.defelt = ast.NewDefElem("parallel", ast.NewString(yyDollar[2].str))
		}
	case 2353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9587
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9591
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2355:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:9607
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[6].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: false,
				Trigname:     yyDollar[4].str,
				Relation:     yyDollar[8].rangevar,
				Funcname:     yyDollar[14].list,
				Args:         yyDollar[16].list,
				Row:          yyDollar[10].bval,
				Timing:       int16(yyDollar[5].ival),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[11].node,
				Transitions:  yyDollar[9].list,
				Deferrable:   false,
				Initdeferred: false,
				Constrrel:    nil,
			}
			yyVAL.stmt = stmt
		}
	case 2356:
		yyDollar = yyS[yypt-21 : yypt+1]
//line postgres.y:9639
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[7].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: true,
				Trigname:     yyDollar[5].str,
				Relation:     yyDollar[9].rangevar,
				Funcname:     yyDollar[18].list,
				Args:         yyDollar[20].list,
				Row:          true,
				Timing:       int16(ast.TRIGGER_TIMING_AFTER),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[15].node,
				Transitions:  nil,
				Deferrable:   true, // Default for constraint triggers
				Initdeferred: false,
				Constrrel:    yyDollar[10].rangevar,
			}
			yyVAL.stmt = stmt
		}
	case 2357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9670
		{
			yyVAL.ival = ast.TRIGGER_TIMING_BEFORE
		}
	case 2358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9671
		{
			yyVAL.ival = ast.TRIGGER_TIMING_AFTER
		}
	case 2359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9672
		{
			yyVAL.ival = ast.TRIGGER_TIMING_INSTEAD
		}
	case 2360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9677
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9679
		{
			// Extract event types and column lists from both sides
			events1 := yyDollar[1].list.Items[0].(*ast.Integer).IVal
			events2 := yyDollar[3].list.Items[0].(*ast.Integer).IVal
			columns1 := yyDollar[1].list.Items[1]
			columns2 := yyDollar[3].list.Items[1]

			// Check for duplicate events
			if events1&events2 != 0 {
				// TODO: Generate parse error for duplicate trigger events
			}

			// Create combined result [events1|events2, combined_columns]
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(events1 | events2))

			// Concatenate column lists (if any)
			if columns1 != nil && columns2 != nil {
				// Both have columns - concatenate
				combinedCols := columns1.(*ast.NodeList)
				if columns2List, ok := columns2.(*ast.NodeList); ok {
					for _, item := range columns2List.Items {
						combinedCols.Append(item)
					}
				}
				list.Append(combinedCols)
			} else if columns1 != nil {
				list.Append(columns1)
			} else if columns2 != nil {
				list.Append(columns2)
			} else {
				list.Append(nil)
			}

			yyVAL.list = list
		}
	case 2362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9719
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_INSERT)))
			list.Append(nil) // No columns for INSERT
			yyVAL.list = list
		}
	case 2363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9726
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_DELETE)))
			list.Append(nil) // No columns for DELETE
			yyVAL.list = list
		}
	case 2364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9733
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(nil) // No columns for UPDATE
			yyVAL.list = list
		}
	case 2365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9740
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(yyDollar[3].list) // Column list for UPDATE OF
			yyVAL.list = list
		}
	case 2366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9747
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_TRUNCATE)))
			list.Append(nil) // No columns for TRUNCATE
			yyVAL.list = list
		}
	case 2367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9756
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9757
		{
			yyVAL.list = nil
		}
	case 2369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9761
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9766
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2371:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9774
		{
			trans := &ast.TriggerTransition{
				Name:    yyDollar[4].str,
				IsNew:   yyDollar[1].bval,
				IsTable: yyDollar[2].bval,
			}
			yyVAL.node = trans
		}
	case 2372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9785
		{
			yyVAL.bval = true
		}
	case 2373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9786
		{
			yyVAL.bval = false
		}
	case 2374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9790
		{
			yyVAL.bval = true
		}
	case 2375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9791
		{
			yyVAL.bval = false
		}
	case 2376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9795
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9800
		{
			yyVAL.bval = yyDollar[3].bval
		}
	case 2378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9804
		{
			// If ROW/STATEMENT not specified, default to STATEMENT
			yyVAL.bval = false
		}
	case 2381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9816
		{
			yyVAL.bval = true
		}
	case 2382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9817
		{
			yyVAL.bval = false
		}
	case 2383:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9821
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2384:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9822
		{
			yyVAL.node = nil
		}
	case 2387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9831
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9836
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9840
		{
			yyVAL.list = nil
		}
	case 2390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9845
		{
			yyVAL.node = ast.NewString(fmt.Sprintf("%d", yyDollar[1].ival))
		}
	case 2391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9848
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9849
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9850
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9854
		{
			yyVAL.rangevar = yyDollar[2].rangevar
		}
	case 2395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9855
		{
			yyVAL.rangevar = nil
		}
	case 2396:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9868
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[4].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[5].list,
				Query:           yyDollar[8].stmt,
				Replace:         false,
				Options:         yyDollar[6].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[9].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2397:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9884
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[6].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[10].stmt,
				Replace:         true,
				Options:         yyDollar[8].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[11].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2398:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:9900
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[5].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[11].stmt,
				Replace:         false,
				Options:         yyDollar[9].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[12].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2399:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:9916
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[7].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[9].list,
				Query:           yyDollar[13].stmt,
				Replace:         true,
				Options:         yyDollar[11].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[14].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9933
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2401:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9934
		{
			yyVAL.list = nil
		}
	case 2402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9938
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2403:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9939
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2404:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9940
		{
			yyVAL.ival = int(ast.LOCAL_CHECK_OPTION)
		}
	case 2405:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9941
		{
			yyVAL.ival = int(ast.NO_CHECK_OPTION)
		}
	case 2406:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9952
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = yyDollar[5].rolespec
			n.SchemaElts = yyDollar[6].list
			yyVAL.stmt = n
		}
	case 2407:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9959
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = nil
			n.SchemaElts = yyDollar[4].list
			yyVAL.stmt = n
		}
	case 2408:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9966
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = yyDollar[8].rolespec
			n.SchemaElts = yyDollar[9].list
			yyVAL.stmt = n
		}
	case 2409:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9973
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = nil
			n.SchemaElts = yyDollar[7].list
			yyVAL.stmt = n
		}
	case 2410:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9989
		{
			n := ast.NewCreateDomainStmt(yyDollar[3].list, yyDollar[5].typnam)
			// Use SplitColQualList to separate constraints and collate clause
			constraints, collClause := SplitColQualList(yyDollar[6].list)
			n.Constraints = constraints
			n.CollClause = collClause
			yyVAL.stmt = n
		}
	case 2411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10007
		{
			n := ast.NewAlterDomainStmt('T', yyDollar[3].list)
			n.Def = yyDollar[4].node
			yyVAL.stmt = n
		}
	case 2412:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10013
		{
			n := ast.NewAlterDomainStmt('N', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2413:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10018
		{
			n := ast.NewAlterDomainStmt('O', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2414:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10023
		{
			n := ast.NewAlterDomainStmt('C', yyDollar[3].list)
			n.Def = yyDollar[5].node
			yyVAL.stmt = n
		}
	case 2415:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10029
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[6].str
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			yyVAL.stmt = n
		}
	case 2416:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10037
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[8].str
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			yyVAL.stmt = n
		}
	case 2417:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10045
		{
			n := ast.NewAlterDomainStmt('V', yyDollar[3].list)
			n.Name = yyDollar[6].str
			yyVAL.stmt = n
		}
	case 2418:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10060
		{
			// Extract actual arguments from aggr_args which returns [args, position_indicator]
			var args *ast.NodeList
			if yyDollar[5].list != nil && yyDollar[5].list.Len() > 0 {
				// First element contains the actual arguments (or nil for *)
				if firstElem, ok := yyDollar[5].list.Items[0].(*ast.NodeList); ok {
					args = firstElem
				} else if yyDollar[5].list.Items[0] == nil {
					// Special case for COUNT(*) - create a list with a single nil element
					args = ast.NewNodeList(nil)
				}
			}
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, false, yyDollar[4].list, args, yyDollar[6].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2419:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10076
		{
			// old-style (pre-8.2) syntax for CREATE AGGREGATE
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, true, yyDollar[4].list, nil, yyDollar[5].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2420:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10082
		{
			n := ast.NewDefineStmt(ast.OBJECT_OPERATOR, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2421:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10087
		{
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10092
		{
			// Shell type (identified by lack of definition)
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, nil, false, false)
			yyVAL.stmt = n
		}
	case 2423:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10098
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSPARSER, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2424:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10103
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSDICTIONARY, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2425:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10108
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSTEMPLATE, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2426:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10113
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSCONFIGURATION, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10118
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2428:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10123
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, yyDollar[7].list, true, false)
			yyVAL.stmt = n
		}
	case 2429:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10128
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, ast.NewNodeList(yyDollar[5].list), false, false)
			yyVAL.stmt = n
		}
	case 2430:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10133
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, ast.NewNodeList(yyDollar[8].list), true, false)
			yyVAL.stmt = n
		}
	case 2431:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10138
		{
			typevar, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(fmt.Sprintf("invalid type name: %v", err))
				return 1
			}

			n := ast.NewCompositeTypeStmt(typevar, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2432:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10149
		{
			n := ast.NewCreateEnumStmt(yyDollar[3].list, yyDollar[7].list)
			yyVAL.stmt = n
		}
	case 2433:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10154
		{
			n := ast.NewCreateRangeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2434:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10168
		{
			n := ast.NewCreateSeqStmt(yyDollar[4].rangevar, yyDollar[5].list, 0, false, false)
			yyVAL.stmt = n
		}
	case 2435:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10173
		{
			n := ast.NewCreateSeqStmt(yyDollar[7].rangevar, yyDollar[8].list, 0, false, true)
			yyVAL.stmt = n
		}
	case 2436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10180
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10181
		{
			yyVAL.list = nil
		}
	case 2438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10184
		{
		}
	case 2439:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10185
		{
		}
	case 2440:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10196
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[3].rangevar, yyDollar[4].list, false, false)
		}
	case 2441:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10200
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[5].rangevar, yyDollar[6].list, false, true)
		}
	case 2442:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10213
		{
			n := ast.NewCreateExtensionStmt(yyDollar[3].str, false, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2443:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10218
		{
			n := ast.NewCreateExtensionStmt(yyDollar[6].str, true, yyDollar[8].list)
			yyVAL.stmt = n
		}
	case 2444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10226
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10235
		{
			yyVAL.list = nil
		}
	case 2446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10242
		{
			yyVAL.defelt = ast.NewDefElem("schema", ast.NewString(yyDollar[2].str))
		}
	case 2447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10246
		{
			yyVAL.defelt = ast.NewDefElem("version", ast.NewString(yyDollar[2].str))
		}
	case 2448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10250
		{
			yylex.Error("CREATE EXTENSION ... FROM is no longer supported")
			return 1
		}
	case 2449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10255
		{
			yyVAL.defelt = ast.NewDefElem("cascade", ast.NewBoolean(true))
		}
	case 2450:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10268
		{
			n := ast.NewAlterExtensionStmt(yyDollar[3].str, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10276
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2452:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10285
		{
			yyVAL.list = nil
		}
	case 2453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10292
		{
			yyVAL.defelt = ast.NewDefElem("to", ast.NewString(yyDollar[2].str))
		}
	case 2454:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10305
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), ast.NewString(yyDollar[6].str))
		}
	case 2455:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10309
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), yyDollar[6].list)
		}
	case 2456:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10313
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_AGGREGATE), yyDollar[6].objwithargs)
		}
	case 2457:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10317
		{
			// CAST takes two TypeNames as a NodeList
			list := ast.NewNodeList(yyDollar[7].typnam)
			list.Append(yyDollar[9].typnam)
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_CAST), list)
		}
	case 2458:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10324
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_DOMAIN), yyDollar[6].typnam)
		}
	case 2459:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10328
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_FUNCTION), yyDollar[6].objwithargs)
		}
	case 2460:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10332
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPERATOR), yyDollar[6].objwithargs)
		}
	case 2461:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10336
		{
			// OPERATOR CLASS takes method name + class name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then class name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPCLASS), list)
		}
	case 2462:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10345
		{
			// OPERATOR FAMILY takes method name + family name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then family name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPFAMILY), list)
		}
	case 2463:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10354
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_PROCEDURE), yyDollar[6].objwithargs)
		}
	case 2464:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10358
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_ROUTINE), yyDollar[6].objwithargs)
		}
	case 2465:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10362
		{
			list := ast.NewNodeList(yyDollar[7].typnam, ast.NewString(yyDollar[9].str))
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TRANSFORM), list)
		}
	case 2466:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10367
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TYPE), yyDollar[6].typnam)
		}
	case 2467:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10379
		{
			yyVAL.stmt = ast.NewCreateFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2468:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10385
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2469:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10389
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, nil)
		}
	case 2470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10395
		{
			yyVAL.defelt = ast.NewDefElem("handler", yyDollar[2].list)
		}
	case 2471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10396
		{
			yyVAL.defelt = ast.NewDefElem("handler", nil)
		}
	case 2472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10397
		{
			yyVAL.defelt = ast.NewDefElem("validator", yyDollar[2].list)
		}
	case 2473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10398
		{
			yyVAL.defelt = ast.NewDefElem("validator", nil)
		}
	case 2474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10402
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10403
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10407
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2477:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10408
		{
			yyVAL.list = nil
		}
	case 2478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10412
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10413
		{
			result := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				result.Append(item)
			}
			yyVAL.list = result
		}
	case 2480:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10430
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].str, yyDollar[9].str, yyDollar[10].list, false)
		}
	case 2481:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:10435
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[6].str, yyDollar[7].str, yyDollar[8].str, yyDollar[12].str, yyDollar[13].list, true)
		}
	case 2482:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10441
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].list, true)
		}
	case 2483:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10445
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, nil, true)
		}
	case 2484:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10449
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, "", yyDollar[4].list, false)
		}
	case 2485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10455
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2486:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10456
		{
			yyVAL.str = ""
		}
	case 2487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10460
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10461
		{
			yyVAL.str = ""
		}
	case 2489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10465
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2490:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10466
		{
			yyVAL.str = ""
		}
	case 2491:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10479
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[6].list, yyDollar[8].list, yyDollar[10].str, yyDollar[11].list, nil, false)
		}
	case 2492:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:10485
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[9].list, yyDollar[11].list, yyDollar[13].str, yyDollar[14].list, nil, true)
		}
	case 2493:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:10491
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[8].list, ast.NewNodeList(yyDollar[7].rangevar), yyDollar[11].str, yyDollar[12].list, yyDollar[9].partboundspec, false)
		}
	case 2494:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:10497
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[11].list, ast.NewNodeList(yyDollar[10].rangevar), yyDollar[14].str, yyDollar[15].list, yyDollar[12].partboundspec, true)
		}
	case 2495:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10509
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list, false)
		}
	case 2496:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10513
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[8].rolespec, yyDollar[10].str, yyDollar[11].list, true)
		}
	case 2497:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10519
		{
			yyVAL.stmt = ast.NewAlterUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list)
		}
	case 2498:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10525
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, false)
		}
	case 2499:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10529
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[7].rolespec, yyDollar[9].str, true)
		}
	case 2500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10535
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 2501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10536
		{
			yyVAL.rolespec = ast.NewRoleSpec(ast.ROLESPEC_CURRENT_USER, "")
		}
	case 2502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10541
		{
			// For aggregates like COUNT(*)
			// Return a list with [nil, -1] matching PostgreSQL's list_make2(NIL, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(nil, ast.NewInteger(-1))
		}
	case 2503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10547
		{
			// Regular aggregate arguments
			// Return a list with [args, -1] matching PostgreSQL's list_make2($2, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(yyDollar[2].list, ast.NewInteger(-1))
		}
	case 2504:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10553
		{
			// Ordered-set aggregate without direct arguments
			// Return a list with [args, 0] matching PostgreSQL's list_make2($4, makeInteger(0))
			yyVAL.list = ast.NewNodeList(yyDollar[4].list, ast.NewInteger(0))
		}
	case 2505:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10559
		{
			// Hypothetical-set aggregate
			// This is the only case requiring consistency checking in PostgreSQL
			result, err := makeOrderedSetArgs(yyDollar[2].list, yyDollar[5].list)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.list = result
		}
	case 2506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10573
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10577
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10585
		{
			yyVAL.node = yyDollar[1].funparam
		}
	case 2509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10592
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10599
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10603
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10611
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2513:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10618
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			n.NewValIsAfter = true
			yyVAL.stmt = n
		}
	case 2514:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10626
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = false
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2515:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10635
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = true
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2516:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10644
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.OldVal = yyDollar[6].str
			n.NewVal = yyDollar[8].str
			n.SkipIfNewValExists = false
			yyVAL.stmt = n
		}
	case 2517:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10652
		{
			// Following PostgreSQL's approach - DROP VALUE is parsed but not implemented
			// PostgreSQL throws an error saying "dropping an enum value is not implemented"
			yylex.Error("dropping an enum value is not implemented")
			return 1
		}
	case 2518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10668
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10670
		{
			yyVAL.list = nil
		}
	case 2520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10675
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10677
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10682
		{
			if constraint, ok := yyDollar[3].node.(*ast.Constraint); ok {
				constraint.Conname = yyDollar[2].str
				yyVAL.node = constraint
			} else {
				yyVAL.node = yyDollar[3].node
			}
		}
	case 2523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10691
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2524:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10696
		{
			n := ast.NewConstraint(ast.CONSTR_CHECK)
			n.RawExpr = yyDollar[3].node
			n.CookedExpr = "" // Empty string, not nil
			// Process constraint attributes from $5
			processConstraintAttributeSpec(yyDollar[5].ival, n)
			// PostgreSQL: n->initially_valid = !n->skip_validation
			n.InitiallyValid = !n.SkipValidation
			yyVAL.node = n
		}
	case 2525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10707
		{
			n := ast.NewConstraint(ast.CONSTR_NOTNULL)
			// In PostgreSQL, domain NOT NULL constraints have keys = list_make1(makeString("value"))
			n.Keys = ast.NewNodeList(ast.NewString("value"))
			// Process constraint attributes from $3
			processConstraintAttributeSpec(yyDollar[3].ival, n)
			// PostgreSQL sets initially_valid = true for NOT NULL (no NOT VALID support yet)
			n.InitiallyValid = true
			yyVAL.node = n
		}
	case 2526:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10727
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[7].stmt, yyDollar[5].into, ast.OBJECT_MATVIEW, false, false)
			/* cram additional flags into the IntoClause */
			yyDollar[5].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[5].into.SkipData = !yyDollar[8].bval
			yyVAL.stmt = ctas
		}
	case 2527:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10735
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[10].stmt, yyDollar[8].into, ast.OBJECT_MATVIEW, false, true)
			/* cram additional flags into the IntoClause */
			yyDollar[8].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[8].into.SkipData = !yyDollar[11].bval
			yyVAL.stmt = ctas
		}
	case 2528:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10746
		{
			n := ast.NewRefreshMatViewStmt(yyDollar[4].bval, !yyDollar[6].bval, yyDollar[5].rangevar)
			yyVAL.stmt = n
		}
	case 2529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10752
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 2530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10753
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 2531:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10758
		{
			yyVAL.into = &ast.IntoClause{
				Rel:            yyDollar[1].rangevar,
				ColNames:       yyDollar[2].list,
				AccessMethod:   yyDollar[3].str,
				Options:        yyDollar[4].list,
				TableSpaceName: yyDollar[5].str,
			}
		}
	case 2532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10770
		{
			yyVAL.bval = true
		}
	case 2533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10771
		{
			yyVAL.bval = false
		}
	case 2534:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10772
		{
			yyVAL.bval = true
		}
	case 2535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10777
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].stmt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10786
		{
			yyVAL.list = nil
		}
	case 2541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10797
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10799
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_CURRENT, yyDollar[1].str, nil, false)
		}
	case 2543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10803
		{
			args := ast.NewNodeList(yyDollar[3].node)
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "timezone", args, false)
		}
	case 2544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10808
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "catalog", args, false)
		}
	case 2545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10813
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "search_path", args, false)
		}
	case 2546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10818
		{
			var args *ast.NodeList
			if yyDollar[2].str != "" {
				args = ast.NewNodeList(ast.NewString(yyDollar[2].str))
			}
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "client_encoding", args, false)
		}
	case 2547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10826
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "role", args, false)
		}
	case 2548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10831
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "session_authorization", args, false)
		}
	case 2549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10836
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, "session_authorization", nil, false)
		}
	case 2550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10840
		{
			var value string
			if yyDollar[3].ival == int(ast.XMLOPTION_DOCUMENT) {
				value = "document"
			} else {
				value = "content"
			}
			args := ast.NewNodeList(ast.NewString(value))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "xmloption", args, false)
		}
	case 2551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10851
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "transaction_snapshot", args, false)
		}
	case 2552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10859
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10863
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10867
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10871
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10878
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10882
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 2558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10889
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10895
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10902
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10903
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10907
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10908
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10909
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10910
		{
			yyVAL.node = ast.NewString("default")
		}
	case 2566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10911
		{
			yyVAL.node = ast.NewString("local")
		}
	case 2567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10912
		{
			yyVAL.node = ast.NewString("true")
		}
	case 2568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10913
		{
			yyVAL.node = ast.NewString("false")
		}
	case 2569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10914
		{
			yyVAL.node = ast.NewString("on")
		}
	case 2570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10915
		{
			yyVAL.node = ast.NewString("off")
		}
	case 2571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10919
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10920
		{
			yyVAL.str = "default"
		}
	case 2573:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10921
		{
			yyVAL.str = ""
		}
	case 2574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10925
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10926
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10930
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10931
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10932
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10933
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10937
		{
			yyVAL.ival = int(ast.XMLOPTION_DOCUMENT)
		}
	case 2581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10938
		{
			yyVAL.ival = int(ast.XMLOPTION_CONTENT)
		}
	case 2582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10943
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10949
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10954
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10962
		{
			yyVAL.node = ast.NewDefElem("transaction_isolation", ast.NewString(yyDollar[3].str))
		}
	case 2586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10966
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(true))
		}
	case 2587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10970
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(false))
		}
	case 2588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10974
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(true))
		}
	case 2589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10978
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(false))
		}
	case 2590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10984
		{
			yyVAL.str = "read uncommitted"
		}
	case 2591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10985
		{
			yyVAL.str = "read committed"
		}
	case 2592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10986
		{
			yyVAL.str = "repeatable read"
		}
	case 2593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10987
		{
			yyVAL.str = "serializable"
		}
	case 2594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10991
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10992
		{
			yyVAL.list = nil
		}
	case 2596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10996
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 2597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10997
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10998
		{
			yyVAL.node = yyDollar[1].list
		}
	case 2599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11001
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11002
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11003
		{
			yyVAL.node = ast.NewString("none")
		}
	case 2602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11007
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2603:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11008
		{
			yyVAL.list = nil
		}
	case 2604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11012
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11013
		{
			yyVAL.node = nil
		}
	case 2606:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11017
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11022
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11027
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11035
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11039
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_SET
			yyVAL.defelt = elem
		}
	case 2611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11045
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_ADD
			yyVAL.defelt = elem
		}
	case 2612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11051
		{
			yyVAL.defelt = ast.NewDefElemExtended("", yyDollar[2].str, nil, ast.DEFELEM_DROP)
		}
	case 2613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11057
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11058
		{
			yyVAL.str = ""
		}
	case 2615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11062
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_NOTHING, "")
		}
	case 2616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11063
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_FULL, "")
		}
	case 2617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11064
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_DEFAULT, "")
		}
	case 2618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11065
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_INDEX, yyDollar[3].str)
		}
	case 2619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11069
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11074
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11079
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11086
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11087
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2624:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11098
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[9].list, nil)
		}
	case 2625:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:11102
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[11].list, yyDollar[8].list)
		}
	case 2626:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11108
		{
			yyVAL.stmt = ast.NewAlterEventTrigStmt(yyDollar[4].str, ast.TriggerFires(yyDollar[5].ival))
		}
	case 2627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11114
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_ORIGIN)
		}
	case 2628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11115
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_REPLICA)
		}
	case 2629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11116
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ALWAYS)
		}
	case 2630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11117
		{
			yyVAL.ival = int(ast.TRIGGER_DISABLED)
		}
	case 2631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11122
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11127
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2633:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11135
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[4].list)
		}
	case 2634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11142
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(ast.NewString(yyDollar[1].str))
		}
	case 2635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11147
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2636:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11161
		{
			yyVAL.stmt = ast.NewCreateTableSpaceStmt(yyDollar[3].str, yyDollar[4].rolespec, yyDollar[6].str, yyDollar[7].list)
		}
	case 2637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11167
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 2638:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11168
		{
			yyVAL.rolespec = nil
		}
	case 2639:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11173
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, false)
		}
	case 2640:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11177
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, true)
		}
	case 2641:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11192
		{
			yyVAL.stmt = ast.NewCreatePolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].bval, yyDollar[7].str, yyDollar[8].list, yyDollar[9].node, yyDollar[10].node)
		}
	case 2642:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11200
		{
			yyVAL.stmt = ast.NewAlterPolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].list, yyDollar[7].node, yyDollar[8].node)
		}
	case 2643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11207
		{
			// Check for "permissive" or "restrictive" (case-insensitive)
			if strings.EqualFold(yyDollar[2].str, "permissive") {
				yyVAL.bval = true
			} else if strings.EqualFold(yyDollar[2].str, "restrictive") {
				yyVAL.bval = false
			} else {
				// Parser will error on invalid value
				yylex.Error("unrecognized row security option")
				return 1
			}
		}
	case 2644:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11219
		{
			yyVAL.bval = true
		}
	case 2645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11223
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2646:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11224
		{
			yyVAL.str = "all"
		}
	case 2647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11228
		{
			yyVAL.str = "all"
		}
	case 2648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11229
		{
			yyVAL.str = "select"
		}
	case 2649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11230
		{
			yyVAL.str = "insert"
		}
	case 2650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11231
		{
			yyVAL.str = "update"
		}
	case 2651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11232
		{
			yyVAL.str = "delete"
		}
	case 2652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11236
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2653:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11237
		{
			// Default to PUBLIC when no TO clause is specified
			publicRole := ast.NewRoleSpec(ast.ROLESPEC_PUBLIC, "")
			yyVAL.list = ast.NewNodeList(publicRole)
		}
	case 2654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11245
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2655:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11246
		{
			yyVAL.list = nil
		}
	case 2656:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11250
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2657:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11251
		{
			yyVAL.node = nil
		}
	case 2658:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11255
		{
			yyVAL.node = yyDollar[4].node
		}
	case 2659:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11256
		{
			yyVAL.node = nil
		}
	case 2660:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11267
		{
			yyVAL.stmt = ast.NewCreateAmStmt(yyDollar[4].str, ast.AmType(yyDollar[6].ival), yyDollar[8].list)
		}
	case 2661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11273
		{
			yyVAL.ival = int(ast.AMTYPE_INDEX)
		}
	case 2662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11274
		{
			yyVAL.ival = int(ast.AMTYPE_TABLE)
		}
	case 2663:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11285
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[3].list, yyDollar[4].list, yyDollar[6].list, yyDollar[8].list, "", false, false)
		}
	case 2664:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11289
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[6].list, yyDollar[7].list, yyDollar[9].list, yyDollar[11].list, "", false, true)
		}
	case 2665:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11296
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[3].list, yyDollar[6].node, false)
		}
	case 2666:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11300
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[5].list, yyDollar[8].node, true)
		}
	case 2667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11306
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].statelem)
		}
	case 2668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11307
		{
			yyDollar[1].list.Append(yyDollar[3].statelem)
			yyVAL.list = yyDollar[1].list
		}
	case 2669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11311
		{
			yyVAL.statelem = ast.NewStatsElem(yyDollar[1].str)
		}
	case 2670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11312
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[1].node)
		}
	case 2671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11313
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[2].node)
		}
	case 2672:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11324
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, false, yyDollar[4].list)
		}
	case 2673:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11328
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, true, yyDollar[7].list)
		}
	case 2674:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11332
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, yyDollar[5].list, false, yyDollar[6].list)
		}
	case 2675:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11339
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, yyDollar[5].list, nil, ast.AP_SetOptions)
		}
	case 2676:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11343
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_AddObjects)
		}
	case 2677:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11347
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_SetObjects)
		}
	case 2678:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11351
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_DropObjects)
		}
	case 2679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11357
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11358
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2681:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11363
		{
			pubTable := ast.NewPublicationTable(yyDollar[2].rangevar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_TABLE, pubTable)
		}
	case 2682:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11368
		{
			yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_TABLES_IN_SCHEMA, yyDollar[4].str)
		}
	case 2683:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11372
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA)
		}
	case 2684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11376
		{
			// If either a row filter or column list is specified, create a PublicationTable object
			if yyDollar[2].list != nil || yyDollar[3].node != nil {
				// Create a simple RangeVar from the ColId
				rangeVar := ast.NewRangeVar(yyDollar[1].str, "", "")
				pubTable := ast.NewPublicationTable(rangeVar, yyDollar[3].node, yyDollar[2].list)
				yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
			} else {
				yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_CONTINUATION, yyDollar[1].str)
			}
		}
	case 2685:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11388
		{
			rangeVar := makeRangeVarFromQualifiedName(yyDollar[1].str, yyDollar[2].list, -1)
			pubTable := ast.NewPublicationTable(rangeVar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11394
		{
			pubTable := ast.NewPublicationTable(yyDollar[1].rangevar, yyDollar[3].node, yyDollar[2].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11399
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_CONTINUATION)
		}
	case 2688:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11405
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2689:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11406
		{
			yyVAL.node = nil
		}
	case 2690:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11417
		{
			yyVAL.stmt = ast.NewCreateSubscriptionStmt(yyDollar[3].str, yyDollar[5].str, yyDollar[7].list, yyDollar[8].list)
		}
	case 2691:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11424
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_OPTIONS, "", nil, yyDollar[5].list)
		}
	case 2692:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11428
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_CONNECTION, yyDollar[5].str, nil, nil)
		}
	case 2693:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11432
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_REFRESH, "", nil, yyDollar[6].list)
		}
	case 2694:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11436
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ADD_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2695:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11440
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_DROP_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2696:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11444
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SET_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2697:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11448
		{
			enableOpt := ast.NewNodeList()
			enableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(true)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, enableOpt)
		}
	case 2698:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11454
		{
			disableOpt := ast.NewNodeList()
			disableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(false)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, disableOpt)
		}
	case 2699:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11460
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SKIP, "", nil, yyDollar[5].list)
		}
	case 2700:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11473
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, yyDollar[10].objwithargs, ast.CoercionContext(yyDollar[11].ival), false)
		}
	case 2701:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11477
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), false)
		}
	case 2702:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11481
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), true)
		}
	case 2703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11487
		{
			yyVAL.ival = int(ast.COERCION_IMPLICIT)
		}
	case 2704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11488
		{
			yyVAL.ival = int(ast.COERCION_ASSIGNMENT)
		}
	case 2705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11489
		{
			yyVAL.ival = int(ast.COERCION_EXPLICIT)
		}
	case 2706:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:11501
		{
			yyVAL.stmt = ast.NewCreateOpClassStmt(yyDollar[4].list, yyDollar[11].list, yyDollar[10].str, yyDollar[8].typnam, yyDollar[13].list, yyDollar[5].bval)
		}
	case 2707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11507
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2708:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11508
		{
			yyVAL.list = nil
		}
	case 2709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11512
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11513
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2711:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11518
		{
			// Create ObjectWithArgs for simple operator
			owa := ast.NewObjectWithArgs(yyDollar[3].list, nil, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, yyDollar[4].list)
		}
	case 2712:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11524
		{
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, yyDollar[3].objwithargs, yyDollar[4].list)
		}
	case 2713:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11528
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[3].objwithargs, nil)
		}
	case 2714:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11532
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[6].objwithargs, yyDollar[4].list)
		}
	case 2715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11536
		{
			yyVAL.node = ast.NewOpClassItemStorage(yyDollar[2].typnam)
		}
	case 2716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11542
		{
			yyVAL.bval = true
		}
	case 2717:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11543
		{
			yyVAL.bval = false
		}
	case 2718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11547
		{
			yyVAL.list = nil
		}
	case 2719:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11548
		{
			yyVAL.list = yyDollar[4].list
		}
	case 2720:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11549
		{
			yyVAL.list = nil
		}
	case 2721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11553
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].typnam)
		}
	case 2722:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11554
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2723:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11565
		{
			yyVAL.stmt = ast.NewCreateOpFamilyStmt(yyDollar[4].list, yyDollar[6].str)
		}
	case 2724:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11578
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, false, yyDollar[8].list)
		}
	case 2725:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11582
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, true, yyDollar[8].list)
		}
	case 2726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11588
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2727:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11589
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2728:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11594
		{
			// Create ObjectWithArgs for operator with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, nil)
		}
	case 2729:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11600
		{
			// Create ObjectWithArgs for function with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, owa, nil)
		}
	case 2730:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11615
		{
			yyVAL.stmt = ast.NewCreateConversionStmt(yyDollar[4].list, yyDollar[6].str, yyDollar[8].str, yyDollar[10].list, yyDollar[2].bval)
		}
	case 2731:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11628
		{
			yyVAL.stmt = ast.NewCreateTransformStmt(yyDollar[2].bval, yyDollar[5].typnam, yyDollar[7].str, linitial(yyDollar[9].list), lsecond(yyDollar[9].list))
		}
	case 2732:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11635
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs)  // fromsql
			yyVAL.list.Append(yyDollar[11].objwithargs) // tosql
		}
	case 2733:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11641
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[11].objwithargs) // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs)  // tosql
		}
	case 2734:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11647
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs) // fromsql
			yyVAL.list.Append(nil)                     // tosql
		}
	case 2735:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11653
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(nil)                     // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs) // tosql
		}
	case 2736:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11668
		{
			// Parameterless CREATE LANGUAGE is now treated as CREATE EXTENSION
			yyVAL.stmt = ast.NewCreateExtensionStmt(yyDollar[6].str, yyDollar[2].bval, nil)
		}
	case 2737:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11674
		{
			yyVAL.stmt = ast.NewCreatePLangStmt(yyDollar[2].bval, yyDollar[6].str, yyDollar[8].list, yyDollar[9].list, yyDollar[10].list, yyDollar[3].bval)
		}
	case 2738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11680
		{
			yyVAL.bval = true
		}
	case 2739:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11681
		{
			yyVAL.bval = false
		}
	case 2740:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11686
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2741:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11687
		{
			yyVAL.list = nil
		}
	case 2742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11691
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2743:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11692
		{
			yyVAL.list = nil
		}
	case 2744:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11696
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2745:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11697
		{
			yyVAL.list = nil
		}
	case 2746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11700
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_ALL
		}
	case 2747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11701
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DISTINCT
		}
	case 2748:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11702
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DEFAULT
		}
	case 2749:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11707
		{
			yyVAL.groupClause = &ast.GroupClause{
				Distinct: yyDollar[3].setquant == ast.SET_QUANTIFIER_DISTINCT,
				List:     yyDollar[4].list,
			}
		}
	case 2750:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11714
		{
			yyVAL.groupClause = nil
		}
	case 2751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11720
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2752:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11721
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11725
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11726
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11727
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11728
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11729
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11734
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_EMPTY, ast.NewNodeList(), 0)
		}
	case 2759:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11741
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_ROLLUP, yyDollar[3].list, 0)
		}
	case 2760:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11748
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_CUBE, yyDollar[3].list, 0)
		}
	case 2761:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11755
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_SETS, yyDollar[4].list, 0)
		}
	case 2762:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11764
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2763:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11765
		{
			yyVAL.node = nil
		}
	case 2764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11772
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11776
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2766:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11777
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2767:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11782
		{
			sortBy := ast.NewSortBy(yyDollar[1].node, ast.SORTBY_USING, ast.SortByNulls(yyDollar[4].ival), 0)
			// Use qual_all_Op (NodeList) directly for UseOp
			sortBy.UseOp = yyDollar[3].list
			yyVAL.node = sortBy
		}
	case 2768:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11789
		{
			yyVAL.node = ast.NewSortBy(yyDollar[1].node, ast.SortByDir(yyDollar[2].ival), ast.SortByNulls(yyDollar[3].ival), 0)
		}
	case 2769:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11800
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2770:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11802
		{
			yyVAL.list = nil
		}
	case 2771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11807
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[1].windef)
		}
	case 2772:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11812
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[3].windef)
		}
	case 2773:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11820
		{
			n := yyDollar[3].windef
			n.Name = yyDollar[1].str
			yyVAL.windef = n
		}
	case 2774:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11829
		{
			yyVAL.windef = yyDollar[2].windef
		}
	case 2775:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11831
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			yyVAL.windef = n
		}
	case 2776:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11838
		{
			yyVAL.windef = nil
		}
	case 2777:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11843
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.PartitionClause = yyDollar[3].list
			n.OrderClause = yyDollar[4].list

			n.FrameOptions = yyDollar[5].windef.FrameOptions
			n.StartOffset = yyDollar[5].windef.StartOffset
			n.EndOffset = yyDollar[5].windef.EndOffset
			yyVAL.windef = n
		}
	case 2778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11857
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2779:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11858
		{
			yyVAL.str = ""
		}
	case 2780:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11862
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2781:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11863
		{
			yyVAL.list = nil
		}
	case 2782:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11868
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_RANGE
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2783:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11875
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_ROWS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2784:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11882
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_GROUPS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2785:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11889
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11900
		{
			n := yyDollar[1].windef
			// reject invalid cases - these would be runtime errors in PostgreSQL
			if (n.FrameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (n.FrameOptions & ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 {
				yylex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			n.FrameOptions |= ast.FRAMEOPTION_END_CURRENT_ROW
			yyVAL.windef = n
		}
	case 2787:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11914
		{
			n1 := yyDollar[2].windef
			n2 := yyDollar[4].windef

			// form merged options
			frameOptions := n1.FrameOptions
			// shift converts START_ options to END_ options
			frameOptions |= (n2.FrameOptions << 1)
			frameOptions |= ast.FRAMEOPTION_BETWEEN

			// reject invalid cases
			if (frameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (frameOptions & ast.FRAMEOPTION_END_UNBOUNDED_PRECEDING) != 0 {
				yylex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_CURRENT_ROW) != 0 &&
				(frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 {
				yylex.Error("frame starting from current row cannot have preceding rows")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 &&
				((frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 ||
					(frameOptions&ast.FRAMEOPTION_END_CURRENT_ROW) != 0) {
				yylex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			n1.FrameOptions = frameOptions
			n1.EndOffset = n2.StartOffset
			yyVAL.windef = n1
		}
	case 2788:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11949
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_PRECEDING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2789:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11957
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2790:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11965
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_CURRENT_ROW
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2791:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11973
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_PRECEDING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2792:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11981
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_FOLLOWING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2793:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11991
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_CURRENT_ROW
		}
	case 2794:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11992
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_GROUP
		}
	case 2795:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11993
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_TIES
		}
	case 2796:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11994
		{
			yyVAL.ival = 0
		}
	case 2797:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11995
		{
			yyVAL.ival = 0
		}
	case 2798:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12004
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[2].node
		}
	case 2799:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12009
		{
			yyVAL.selectLimit = yyDollar[2].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[1].node
		}
	case 2800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12014
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12018
		{
			n := &selectLimit{}
			n.limitOffset = yyDollar[1].node
			n.limitCount = nil
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12028
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2803:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12029
		{
			yyVAL.selectLimit = nil
		}
	case 2804:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12034
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[2].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2805:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12042
		{
			// Disabled because it was too confusing - PostgreSQL error
			yylex.Error("LIMIT #,# syntax is not supported. Use separate LIMIT and OFFSET clauses.")
			return 1
		}
	case 2806:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12049
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2807:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12057
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2808:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12065
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2809:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12073
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2810:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12084
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2811:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12087
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12091
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12093
		{
			/* LIMIT ALL is represented as a NULL constant */
			yyVAL.node = ast.NewA_Const(ast.NewNull(), -1)
		}
	case 2814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12100
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12113
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2816:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12115
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("+")}}, nil, yyDollar[2].node, -1)
		}
	case 2817:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12119
		{
			// Create a unary minus expression
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("-")}}, nil, yyDollar[2].node, -1)
		}
	case 2818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12126
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), -1)
		}
	case 2819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12127
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), -1)
		}
	case 2820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12132
		{
			yyVAL.ival = 0
		}
	case 2821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12133
		{
			yyVAL.ival = 0
		}
	case 2822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12137
		{
			yyVAL.ival = 0
		}
	case 2823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12138
		{
			yyVAL.ival = 0
		}
	case 2824:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12151
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2825:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12157
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_START)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 2826:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12163
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2827:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12169
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2828:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12175
		{
			stmt := ast.NewSavepointStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 2829:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12180
		{
			stmt := ast.NewReleaseStmt(yyDollar[3].str)
			yyVAL.stmt = stmt
		}
	case 2830:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12185
		{
			stmt := ast.NewReleaseStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 2831:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12190
		{
			stmt := ast.NewRollbackToStmt(yyDollar[5].str)
			yyVAL.stmt = stmt
		}
	case 2832:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12195
		{
			stmt := ast.NewRollbackToStmt(yyDollar[4].str)
			yyVAL.stmt = stmt
		}
	case 2833:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12200
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_PREPARE)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2834:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12206
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2835:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12212
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2836:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12221
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2837:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12227
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_BEGIN)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 2838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12234
		{
		}
	case 2839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12235
		{
		}
	case 2840:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12236
		{
		}
	case 2841:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12240
		{
			yyVAL.bval = true
		}
	case 2842:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12241
		{
			yyVAL.bval = false
		}
	case 2843:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12242
		{
			yyVAL.bval = false
		}
	case 2844:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12255
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_ROLE, yyDollar[3].str, yyDollar[5].list)
		}
	case 2845:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12262
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_USER, yyDollar[3].str, yyDollar[5].list)
		}
	case 2846:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12269
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_GROUP, yyDollar[3].str, yyDollar[5].list)
		}
	case 2847:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12276
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 2848:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12282
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 2849:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12291
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2850:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12295
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2851:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12299
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2852:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12303
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2853:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12309
		{
			yyVAL.str = ""
		}
	case 2854:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12310
		{
			yyVAL.str = yyDollar[3].str
		}
	case 2855:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12315
		{
			options := ast.NewNodeList(ast.NewDefElem("rolemembers", yyDollar[6].list))
			stmt := ast.NewAlterRoleStmt(yyDollar[3].rolespec, options)
			stmt.Action = yyDollar[4].ival
			yyVAL.stmt = stmt
		}
	case 2856:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12325
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2857:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12329
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2858:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12333
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2859:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12337
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2860:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12341
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2861:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12345
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2862:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12353
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 2863:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12364
		{
			yyVAL.list = nil
		}
	case 2864:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12369
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 2865:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12380
		{
			yyVAL.list = nil
		}
	case 2866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12384
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2867:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12386
		{
			yyVAL.defelt = ast.NewDefElem("sysid", ast.NewInteger(yyDollar[2].ival))
		}
	case 2868:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12390
		{
			yyVAL.defelt = ast.NewDefElem("adminmembers", yyDollar[2].list)
		}
	case 2869:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12394
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 2870:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12398
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 2871:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12402
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 2872:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12409
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[2].str))
		}
	case 2873:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12413
		{
			yyVAL.defelt = ast.NewDefElem("password", nil)
		}
	case 2874:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12417
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[3].str))
		}
	case 2875:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12421
		{
			yylex.Error("UNENCRYPTED PASSWORD is no longer supported")
			return 1
		}
	case 2876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12426
		{
			yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(true))
		}
	case 2877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12430
		{
			// Handle identifiers like PostgreSQL does with string comparisons
			if yyDollar[1].str == "superuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nosuperuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createrole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreaterole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createdb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreatedb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(false))
			} else if yyDollar[1].str == "login" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nologin" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(false))
			} else if yyDollar[1].str == "replication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(true))
			} else if yyDollar[1].str == "noreplication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(false))
			} else if yyDollar[1].str == "bypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nobypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(false))
			} else if yyDollar[1].str == "noinherit" {
				yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(false))
			} else {
				// Return error for unrecognized role option
				yylex.Error("unrecognized role option \"" + yyDollar[1].str + "\"")
				yyVAL.defelt = nil
			}
		}
	case 2878:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12465
		{
			yyVAL.defelt = ast.NewDefElem("connectionlimit", ast.NewInteger(yyDollar[3].ival))
		}
	case 2879:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12469
		{
			yyVAL.defelt = ast.NewDefElem("validUntil", ast.NewString(yyDollar[3].str))
		}
	case 2880:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12473
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 2881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12479
		{
			yyVAL.ival = 1
		}
	case 2882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12480
		{
			yyVAL.ival = -1
		}
	case 2883:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12485
		{
			n := ast.NewRangeTableSample(nil, yyDollar[2].list, yyDollar[4].list, yyDollar[6].node, 0)
			yyVAL.node = n
		}
	case 2884:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12493
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2885:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12497
		{
			yyVAL.node = nil
		}
	}
	goto yystack /* stack new state and value */
}
