// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
)

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:28
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string

	// AST nodes
	node       ast.Node
	stmt       ast.Stmt
	stmtList   []ast.Stmt
	list       *ast.NodeList
	strList    []string
	astStrList []*ast.String

	// Specific AST node types
	onconflict *ast.OnConflictClause

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const UNKNOWN = 57392
const WHEN = 57393
const IS = 57394
const ISNULL = 57395
const NOTNULL = 57396
const AT = 57397
const TIME = 57398
const ZONE = 57399
const LOCAL = 57400
const SYMMETRIC = 57401
const ASYMMETRIC = 57402
const TO = 57403
const OPERATOR = 57404
const SELECT = 57405
const FROM = 57406
const WHERE = 57407
const ONLY = 57408
const TABLE = 57409
const LIMIT = 57410
const OFFSET = 57411
const ORDER_P = 57412
const BY = 57413
const GROUP_P = 57414
const HAVING = 57415
const INTO = 57416
const ON = 57417
const JOIN = 57418
const INNER_P = 57419
const LEFT = 57420
const RIGHT = 57421
const FULL = 57422
const OUTER_P = 57423
const CROSS = 57424
const NATURAL = 57425
const USING = 57426
const RECURSIVE = 57427
const MATERIALIZED = 57428
const LATERAL = 57429
const VALUES = 57430
const SEARCH = 57431
const BREADTH = 57432
const DEPTH = 57433
const CYCLE = 57434
const FIRST_P = 57435
const LAST_P = 57436
const SET = 57437
const ASC = 57438
const DESC = 57439
const INSERT = 57440
const UPDATE = 57441
const DELETE_P = 57442
const MERGE = 57443
const RETURNING = 57444
const CONFLICT = 57445
const OVERRIDING = 57446
const USER = 57447
const SYSTEM_P = 57448
const MATCHED = 57449
const THEN = 57450
const SOURCE = 57451
const TARGET = 57452
const DO = 57453
const NOTHING = 57454
const COPY = 57455
const PROGRAM = 57456
const STDIN = 57457
const STDOUT = 57458
const BINARY = 57459
const FREEZE = 57460
const CONSTRAINT = 57461
const VERBOSE = 57462
const ANALYZE = 57463
const CURRENT_P = 57464
const CURSOR = 57465
const OF = 57466
const COLUMNS = 57467
const ORDINALITY = 57468
const XMLTABLE = 57469
const JSON_TABLE = 57470
const ROWS = 57471
const PATH = 57472
const PASSING = 57473
const FOR = 57474
const NESTED = 57475
const REF_P = 57476
const XMLNAMESPACES = 57477
const ARRAY = 57478
const ERROR = 57479
const ERROR_P = 57480
const EMPTY = 57481
const EMPTY_P = 57482
const OBJECT_P = 57483
const WRAPPER = 57484
const CONDITIONAL = 57485
const UNCONDITIONAL = 57486
const QUOTES = 57487
const OMIT = 57488
const KEEP = 57489
const SCALAR = 57490
const STRING_P = 57491
const ENCODING = 57492
const DELIMITER = 57493
const DELIMITERS = 57494
const HEADER_P = 57495
const QUOTE = 57496
const FORCE = 57497
const CSV = 57498
const VALUE_P = 57499
const JSON_QUERY = 57500
const JSON_VALUE = 57501
const JSON_SERIALIZE = 57502
const JSON_OBJECT = 57503
const JSON_ARRAY = 57504
const JSON_OBJECTAGG = 57505
const JSON_ARRAYAGG = 57506
const JSON_EXISTS = 57507
const JSON_SCALAR = 57508
const FORMAT = 57509
const JSON = 57510
const UTF8 = 57511
const WITHOUT = 57512
const BIT = 57513
const NUMERIC = 57514
const INTEGER = 57515
const SMALLINT = 57516
const BIGINT = 57517
const REAL = 57518
const FLOAT_P = 57519
const DOUBLE_P = 57520
const PRECISION = 57521
const CHARACTER = 57522
const CHAR_P = 57523
const VARCHAR = 57524
const NATIONAL = 57525
const NCHAR = 57526
const VARYING = 57527
const TIMESTAMP = 57528
const INTERVAL = 57529
const INT_P = 57530
const DECIMAL_P = 57531
const DEC = 57532
const BOOLEAN_P = 57533
const VARIADIC = 57534
const FORMAT_LA = 57535
const NOT_LA = 57536
const NULLS_LA = 57537
const WITH_LA = 57538
const WITHOUT_LA = 57539
const MODE_TYPE_NAME = 57540
const MODE_PLPGSQL_EXPR = 57541
const MODE_PLPGSQL_ASSIGN1 = 57542
const MODE_PLPGSQL_ASSIGN2 = 57543
const MODE_PLPGSQL_ASSIGN3 = 57544
const UNION = 57545
const EXCEPT = 57546
const INTERSECT = 57547
const PARTITION = 57548
const RANGE = 57549
const GROUPS = 57550
const PRECEDING = 57551
const FOLLOWING = 57552
const CUBE = 57553
const ROLLUP = 57554
const KEYS = 57555
const UMINUS = 57556

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"UNKNOWN",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"ORDER_P",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"JOIN",
	"INNER_P",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER_P",
	"CROSS",
	"NATURAL",
	"USING",
	"RECURSIVE",
	"MATERIALIZED",
	"LATERAL",
	"VALUES",
	"SEARCH",
	"BREADTH",
	"DEPTH",
	"CYCLE",
	"FIRST_P",
	"LAST_P",
	"SET",
	"ASC",
	"DESC",
	"INSERT",
	"UPDATE",
	"DELETE_P",
	"MERGE",
	"RETURNING",
	"CONFLICT",
	"OVERRIDING",
	"USER",
	"SYSTEM_P",
	"MATCHED",
	"THEN",
	"SOURCE",
	"TARGET",
	"DO",
	"NOTHING",
	"COPY",
	"PROGRAM",
	"STDIN",
	"STDOUT",
	"BINARY",
	"FREEZE",
	"CONSTRAINT",
	"VERBOSE",
	"ANALYZE",
	"CURRENT_P",
	"CURSOR",
	"OF",
	"COLUMNS",
	"ORDINALITY",
	"XMLTABLE",
	"JSON_TABLE",
	"ROWS",
	"PATH",
	"PASSING",
	"FOR",
	"NESTED",
	"REF_P",
	"XMLNAMESPACES",
	"ARRAY",
	"ERROR",
	"ERROR_P",
	"EMPTY",
	"EMPTY_P",
	"OBJECT_P",
	"WRAPPER",
	"CONDITIONAL",
	"UNCONDITIONAL",
	"QUOTES",
	"OMIT",
	"KEEP",
	"SCALAR",
	"STRING_P",
	"ENCODING",
	"DELIMITER",
	"DELIMITERS",
	"HEADER_P",
	"QUOTE",
	"FORCE",
	"CSV",
	"VALUE_P",
	"JSON_QUERY",
	"JSON_VALUE",
	"JSON_SERIALIZE",
	"JSON_OBJECT",
	"JSON_ARRAY",
	"JSON_OBJECTAGG",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_SCALAR",
	"FORMAT",
	"JSON",
	"UTF8",
	"WITHOUT",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"'<'",
	"'>'",
	"'='",
	"PARTITION",
	"RANGE",
	"GROUPS",
	"PRECEDING",
	"FOLLOWING",
	"CUBE",
	"ROLLUP",
	"KEYS",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"';'",
	"','",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:3724

// Helper functions for converting between grammar types and AST types

// convertToResTargetList converts a slice of ast.Node to []*ast.ResTarget
func convertToResTargetList(nodes []ast.Node) []*ast.ResTarget {
	if nodes == nil {
		return nil
	}
	targets := make([]*ast.ResTarget, len(nodes))
	for i, node := range nodes {
		if target, ok := node.(*ast.ResTarget); ok {
			targets[i] = target
		}
	}
	return targets
}

// convertToIntoClause converts an ast.Node to *ast.IntoClause
func convertToIntoClause(node ast.Node) *ast.IntoClause {
	if node == nil {
		return nil
	}
	if intoClause, ok := node.(*ast.IntoClause); ok {
		return intoClause
	}
	return nil
}

// convertToStringList converts an ast.Node to []*ast.String
func convertToStringList(node ast.Node) []*ast.String {
	if node == nil {
		return nil
	}
	if nodeList, ok := node.(*ast.NodeList); ok {
		strings := make([]*ast.String, len(nodeList.Items))
		for i, item := range nodeList.Items {
			if str, ok := item.(*ast.String); ok {
				strings[i] = str
			}
		}
		return strings
	}
	return nil
}

// convertToNodeList converts an ast.Node to []ast.Node
func convertToNodeList(node ast.Node) []ast.Node {
	if node == nil {
		return nil
	}
	if nodeList, ok := node.(*ast.NodeList); ok {
		return nodeList.Items
	}
	// If it's a single node, wrap it in a slice
	return []ast.Node{node}
}

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 11,
	229, 11,
	-2, 368,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 24,
	1, 11,
	229, 11,
	-2, 368,
	-1, 141,
	16, 234,
	17, 234,
	220, 234,
	-2, 199,
	-1, 229,
	220, 214,
	-2, 200,
	-1, 235,
	218, 205,
	222, 205,
	-2, 47,
	-1, 311,
	18, 0,
	19, 0,
	20, 0,
	206, 0,
	207, 0,
	208, 0,
	-2, 129,
	-1, 312,
	18, 0,
	19, 0,
	20, 0,
	206, 0,
	207, 0,
	208, 0,
	-2, 130,
	-1, 313,
	18, 0,
	19, 0,
	20, 0,
	206, 0,
	207, 0,
	208, 0,
	-2, 131,
	-1, 314,
	18, 0,
	19, 0,
	20, 0,
	206, 0,
	207, 0,
	208, 0,
	-2, 132,
	-1, 315,
	18, 0,
	19, 0,
	20, 0,
	206, 0,
	207, 0,
	208, 0,
	-2, 133,
	-1, 316,
	18, 0,
	19, 0,
	20, 0,
	206, 0,
	207, 0,
	208, 0,
	-2, 134,
	-1, 321,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	194, 0,
	-2, 142,
	-1, 327,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	194, 0,
	-2, 146,
	-1, 369,
	220, 213,
	-2, 238,
	-1, 414,
	220, 234,
	-2, 46,
	-1, 451,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	194, 0,
	-2, 144,
	-1, 452,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	194, 0,
	-2, 148,
	-1, 467,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	194, 0,
	-2, 161,
	-1, 505,
	220, 234,
	221, 41,
	230, 41,
	-2, 46,
	-1, 533,
	220, 214,
	-2, 48,
	-1, 535,
	152, 588,
	-2, 545,
	-1, 555,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	194, 0,
	-2, 143,
	-1, 560,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	194, 0,
	-2, 163,
	-1, 561,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	194, 0,
	-2, 147,
	-1, 650,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	194, 0,
	-2, 145,
	-1, 651,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	194, 0,
	-2, 149,
	-1, 655,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	194, 0,
	-2, 155,
	-1, 663,
	18, 0,
	19, 0,
	20, 0,
	206, 0,
	207, 0,
	208, 0,
	-2, 175,
	-1, 664,
	18, 0,
	19, 0,
	20, 0,
	206, 0,
	207, 0,
	208, 0,
	-2, 176,
	-1, 665,
	18, 0,
	19, 0,
	20, 0,
	206, 0,
	207, 0,
	208, 0,
	-2, 177,
	-1, 666,
	18, 0,
	19, 0,
	20, 0,
	206, 0,
	207, 0,
	208, 0,
	-2, 178,
	-1, 667,
	18, 0,
	19, 0,
	20, 0,
	206, 0,
	207, 0,
	208, 0,
	-2, 179,
	-1, 668,
	18, 0,
	19, 0,
	20, 0,
	206, 0,
	207, 0,
	208, 0,
	-2, 180,
	-1, 669,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	194, 0,
	-2, 157,
	-1, 670,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	194, 0,
	-2, 162,
	-1, 679,
	220, 234,
	-2, 634,
	-1, 721,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	194, 0,
	-2, 156,
	-1, 722,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	194, 0,
	-2, 158,
	-1, 723,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	194, 0,
	-2, 164,
	-1, 908,
	218, 205,
	222, 205,
	-2, 47,
	-1, 976,
	7, 493,
	-2, 113,
}

const yyPrivate = 57344

const yyLast = 8307

var yyAct = [...]int16{
	141, 1002, 1051, 931, 1001, 705, 1013, 973, 1036, 135,
	974, 1025, 801, 170, 384, 926, 272, 387, 144, 700,
	44, 545, 110, 110, 895, 254, 916, 44, 328, 802,
	44, 753, 245, 861, 154, 849, 422, 142, 779, 731,
	750, 42, 896, 404, 12, 698, 44, 528, 410, 821,
	714, 153, 138, 760, 109, 109, 436, 244, 678, 708,
	690, 34, 5, 486, 516, 472, 544, 388, 12, 639,
	927, 119, 508, 618, 12, 160, 125, 256, 161, 120,
	409, 535, 441, 342, 425, 255, 48, 163, 11, 408,
	406, 407, 398, 121, 336, 239, 366, 226, 333, 148,
	362, 459, 418, 268, 139, 401, 33, 185, 110, 970,
	969, 423, 1080, 568, 1070, 44, 902, 175, 44, 44,
	568, 990, 1000, 990, 578, 579, 580, 519, 269, 811,
	209, 864, 206, 185, 998, 989, 980, 205, 210, 203,
	109, 211, 940, 246, 990, 491, 24, 373, 207, 213,
	911, 941, 863, 393, 185, 140, 173, 859, 206, 912,
	235, 864, 217, 830, 810, 44, 379, 110, 901, 797,
	110, 744, 831, 809, 207, 258, 743, 259, 379, 241,
	745, 110, 729, 959, 44, 379, 297, 571, 572, 573,
	574, 730, 720, 642, 611, 584, 496, 869, 703, 109,
	490, 246, 246, 379, 246, 497, 240, 329, 184, 491,
	480, 592, 506, 473, 216, 139, 12, 229, 185, 246,
	188, 189, 190, 191, 420, 270, 166, 380, 105, 344,
	574, 359, 375, 379, 339, 249, 379, 279, 266, 237,
	247, 246, 185, 206, 901, 901, 654, 217, 371, 246,
	191, 901, 389, 158, 391, 733, 162, 162, 258, 207,
	857, 230, 414, 414, 541, 162, 140, 206, 601, 159,
	414, 427, 427, 541, 428, 470, 393, 458, 437, 438,
	437, 438, 1020, 781, 369, 31, 675, 204, 674, 673,
	672, 649, 647, 644, 393, 34, 643, 610, 587, 216,
	469, 374, 439, 1071, 435, 340, 181, 123, 237, 122,
	1047, 965, 575, 576, 577, 958, 186, 187, 188, 189,
	190, 191, 569, 570, 571, 572, 573, 574, 800, 569,
	570, 571, 572, 573, 574, 396, 716, 370, 739, 596,
	33, 702, 186, 187, 188, 189, 190, 191, 695, 630,
	623, 466, 551, 440, 133, 532, 397, 531, 392, 21,
	607, 415, 415, 186, 187, 188, 189, 190, 191, 415,
	421, 483, 432, 433, 434, 424, 337, 443, 427, 430,
	110, 426, 234, 444, 445, 232, 18, 448, 30, 228,
	19, 180, 169, 165, 258, 112, 394, 437, 438, 529,
	442, 505, 431, 1015, 518, 518, 524, 479, 518, 518,
	518, 23, 485, 600, 757, 369, 369, 369, 414, 934,
	455, 108, 126, 453, 446, 447, 1027, 186, 187, 188,
	189, 190, 191, 1033, 162, 979, 14, 536, 230, 468,
	536, 543, 737, 489, 501, 182, 713, 807, 815, 520,
	1079, 186, 187, 188, 189, 190, 191, 21, 503, 562,
	474, 501, 498, 217, 1078, 475, 476, 935, 546, 481,
	808, 344, 1075, 547, 1074, 1054, 340, 550, 1053, 494,
	1068, 552, 208, 932, 18, 493, 523, 492, 19, 33,
	533, 502, 389, 217, 1067, 522, 1056, 521, 258, 1055,
	415, 1082, 518, 539, 1016, 415, 33, 414, 502, 23,
	414, 542, 1038, 1037, 1059, 216, 827, 415, 622, 22,
	1060, 518, 518, 518, 518, 369, 208, 12, 149, 553,
	554, 515, 828, 12, 12, 525, 526, 527, 1057, 1035,
	590, 591, 593, 17, 1058, 565, 121, 340, 47, 701,
	47, 47, 602, 603, 586, 47, 1040, 606, 47, 605,
	1026, 1023, 1039, 597, 598, 648, 1024, 706, 872, 297,
	589, 340, 1016, 994, 47, 608, 217, 208, 208, 208,
	208, 533, 208, 616, 1042, 656, 620, 621, 242, 1032,
	1041, 1043, 1044, 208, 1073, 1012, 1072, 922, 629, 933,
	628, 679, 233, 633, 1063, 972, 415, 271, 641, 415,
	110, 518, 237, 402, 414, 414, 924, 22, 414, 683,
	279, 748, 609, 1003, 110, 115, 1008, 754, 216, 682,
	1006, 524, 1007, 1009, 419, 930, 47, 928, 676, 826,
	369, 17, 686, 47, 369, 47, 47, 47, 624, 625,
	626, 627, 818, 680, 936, 937, 215, 403, 816, 819,
	208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 208, 208, 208, 935, 687, 208, 41, 764, 699,
	488, 696, 208, 110, 116, 671, 727, 208, 47, 589,
	997, 1031, 487, 47, 414, 47, 110, 882, 47, 728,
	151, 718, 929, 47, 719, 47, 712, 237, 852, 47,
	881, 786, 47, 415, 415, 736, 174, 415, 385, 386,
	734, 1005, 208, 1010, 106, 129, 711, 878, 879, 851,
	415, 679, 766, 792, 329, 47, 208, 724, 780, 877,
	110, 215, 783, 177, 178, 726, 524, 111, 935, 803,
	738, 217, 917, 742, 763, 628, 964, 47, 390, 47,
	775, 791, 793, 765, 762, 771, 787, 759, 855, 856,
	484, 758, 946, 947, 790, 116, 116, 487, 1034, 919,
	47, 12, 47, 680, 850, 638, 47, 258, 918, 788,
	804, 799, 798, 415, 699, 920, 829, 796, 262, 847,
	795, 862, 820, 216, 297, 378, 208, 208, 537, 538,
	785, 784, 853, 18, 261, 873, 110, 19, 848, 619,
	865, 823, 208, 833, 824, 825, 967, 850, 693, 850,
	614, 613, 167, 870, 858, 768, 769, 208, 23, 1081,
	884, 868, 885, 886, 887, 415, 217, 867, 874, 968,
	208, 1066, 1065, 780, 208, 279, 847, 21, 908, 1064,
	377, 252, 888, 297, 891, 803, 217, 1021, 777, 770,
	893, 773, 774, 776, 772, 383, 416, 157, 921, 913,
	183, 897, 899, 118, 18, 114, 904, 903, 19, 883,
	905, 850, 217, 805, 914, 208, 423, 399, 216, 530,
	269, 117, 942, 943, 850, 850, 456, 338, 47, 23,
	208, 948, 267, 862, 279, 208, 208, 265, 216, 646,
	264, 208, 47, 568, 645, 250, 938, 578, 579, 580,
	258, 460, 47, 47, 389, 549, 47, 47, 47, 944,
	945, 548, 952, 957, 565, 955, 949, 962, 890, 208,
	208, 963, 329, 454, 335, 961, 330, 215, 331, 975,
	847, 461, 465, 334, 335, 320, 966, 449, 38, 985,
	986, 987, 999, 803, 951, 977, 297, 982, 733, 981,
	971, 319, 978, 995, 996, 988, 640, 564, 40, 208,
	208, 975, 992, 907, 124, 217, 761, 960, 1014, 47,
	910, 1011, 822, 35, 16, 208, 208, 747, 253, 1019,
	208, 3, 1018, 243, 504, 477, 478, 22, 150, 1030,
	47, 1028, 1029, 900, 208, 208, 47, 279, 16, 150,
	47, 504, 156, 110, 1046, 1050, 113, 1049, 1052, 208,
	1045, 251, 25, 26, 27, 28, 47, 216, 975, 47,
	47, 47, 47, 1017, 1061, 1062, 898, 717, 151, 462,
	462, 637, 150, 1052, 1069, 1048, 993, 704, 1004, 871,
	215, 15, 975, 925, 1077, 21, 208, 208, 208, 1076,
	568, 558, 559, 813, 578, 579, 580, 752, 32, 950,
	208, 581, 582, 915, 746, 208, 653, 509, 514, 512,
	513, 511, 18, 507, 510, 697, 19, 32, 860, 20,
	782, 208, 725, 376, 13, 575, 576, 577, 260, 37,
	612, 39, 36, 615, 568, 909, 43, 23, 578, 579,
	580, 841, 569, 570, 571, 572, 573, 574, 47, 47,
	652, 834, 832, 604, 677, 179, 692, 509, 514, 512,
	513, 511, 47, 507, 510, 691, 894, 778, 715, 568,
	767, 636, 29, 578, 579, 580, 534, 509, 514, 512,
	513, 511, 208, 507, 510, 583, 685, 263, 906, 462,
	462, 854, 139, 710, 709, 185, 732, 880, 876, 462,
	462, 617, 514, 512, 513, 511, 875, 657, 658, 659,
	660, 661, 662, 663, 664, 665, 666, 667, 668, 599,
	206, 47, 324, 585, 382, 707, 171, 395, 248, 323,
	325, 322, 172, 326, 47, 10, 207, 688, 689, 9,
	8, 694, 7, 140, 6, 22, 346, 343, 143, 151,
	471, 360, 568, 231, 150, 215, 578, 579, 580, 429,
	292, 291, 294, 127, 127, 293, 368, 631, 567, 17,
	299, 47, 47, 278, 277, 276, 275, 274, 47, 273,
	845, 152, 575, 576, 577, 984, 134, 47, 168, 147,
	789, 983, 218, 4, 2, 1, 0, 0, 0, 569,
	570, 571, 572, 573, 574, 462, 462, 462, 462, 462,
	462, 462, 462, 462, 462, 462, 462, 741, 0, 846,
	0, 0, 47, 0, 0, 47, 575, 576, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 47,
	0, 0, 0, 569, 570, 571, 572, 573, 574, 0,
	215, 0, 0, 47, 47, 0, 0, 222, 223, 224,
	225, 575, 576, 577, 227, 47, 0, 47, 0, 0,
	215, 0, 0, 0, 0, 0, 846, 0, 569, 570,
	571, 572, 573, 574, 0, 0, 0, 208, 0, 238,
	0, 0, 0, 812, 0, 0, 564, 0, 0, 0,
	0, 0, 0, 47, 186, 187, 188, 189, 190, 191,
	0, 127, 0, 305, 306, 307, 308, 309, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 0, 0, 47,
	321, 0, 327, 0, 0, 332, 0, 749, 462, 0,
	47, 47, 47, 47, 575, 576, 577, 0, 0, 47,
	0, 47, 0, 0, 0, 0, 0, 0, 0, 367,
	0, 569, 570, 571, 572, 573, 574, 0, 47, 0,
	0, 0, 47, 381, 0, 0, 139, 0, 0, 185,
	846, 0, 139, 0, 0, 185, 806, 0, 0, 0,
	47, 462, 0, 0, 0, 0, 0, 47, 0, 215,
	0, 0, 0, 139, 206, 0, 185, 47, 47, 47,
	206, 47, 0, 557, 0, 0, 0, 0, 0, 0,
	207, 0, 0, 0, 0, 0, 207, 140, 0, 47,
	0, 206, 139, 140, 556, 185, 0, 0, 139, 0,
	0, 185, 0, 0, 0, 462, 0, 207, 0, 451,
	452, 0, 0, 0, 140, 953, 954, 0, 0, 956,
	206, 0, 0, 457, 0, 467, 206, 0, 0, 450,
	0, 47, 0, 47, 0, 0, 207, 0, 0, 0,
	0, 0, 207, 140, 0, 0, 47, 0, 0, 140,
	367, 367, 367, 0, 0, 0, 0, 0, 0, 0,
	482, 0, 0, 0, 0, 923, 0, 0, 0, 0,
	47, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 495, 0, 0, 0, 0, 499, 0, 0, 0,
	139, 0, 0, 185, 0, 0, 0, 195, 196, 197,
	0, 0, 814, 0, 0, 0, 0, 0, 0, 198,
	540, 0, 199, 462, 462, 0, 209, 462, 206, 0,
	0, 0, 0, 205, 210, 203, 0, 211, 0, 0,
	0, 200, 201, 202, 207, 0, 0, 555, 0, 0,
	0, 140, 0, 560, 561, 0, 0, 566, 186, 187,
	188, 189, 190, 191, 186, 187, 188, 189, 190, 191,
	367, 0, 0, 0, 594, 595, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 186, 187, 188, 189, 190,
	191, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 187, 188, 189, 190, 191,
	186, 187, 188, 189, 190, 191, 0, 0, 0, 634,
	0, 635, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 650, 651, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 655, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	669, 0, 670, 204, 0, 367, 0, 0, 0, 367,
	0, 0, 0, 0, 0, 192, 193, 194, 0, 0,
	0, 0, 0, 0, 684, 0, 0, 0, 0, 0,
	0, 0, 186, 187, 188, 189, 190, 191, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 721,
	722, 723, 0, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 0, 0, 139, 0, 0, 185, 0, 0,
	0, 195, 196, 197, 49, 221, 212, 0, 735, 219,
	220, 0, 0, 198, 0, 0, 199, 0, 0, 740,
	209, 0, 206, 0, 0, 0, 60, 205, 210, 203,
	756, 211, 59, 0, 0, 200, 201, 202, 207, 0,
	0, 0, 0, 0, 0, 140, 0, 0, 0, 0,
	0, 0, 0, 0, 58, 0, 0, 0, 0, 0,
	0, 0, 0, 155, 0, 0, 0, 0, 51, 50,
	0, 0, 52, 53, 54, 55, 56, 0, 57, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 817, 0,
	68, 0, 70, 71, 0, 69, 0, 72, 73, 74,
	75, 76, 0, 77, 78, 0, 0, 0, 98, 99,
	100, 101, 102, 61, 103, 0, 104, 0, 0, 0,
	63, 0, 64, 0, 0, 65, 66, 67, 79, 80,
	81, 82, 83, 84, 0, 0, 0, 0, 0, 0,
	62, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 0, 46, 0, 0, 0, 0,
	0, 0, 345, 0, 0, 0, 0, 0, 0, 356,
	357, 358, 49, 0, 0, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 192,
	193, 194, 0, 0, 60, 0, 0, 0, 0, 634,
	59, 0, 0, 0, 0, 0, 186, 187, 188, 189,
	190, 191, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 51, 50, 0, 0,
	52, 53, 54, 55, 56, 0, 57, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 68, 0,
	70, 71, 0, 69, 0, 72, 73, 74, 75, 76,
	0, 77, 78, 0, 0, 0, 98, 99, 100, 101,
	102, 61, 103, 0, 104, 0, 634, 0, 63, 0,
	64, 0, 0, 65, 66, 67, 79, 80, 81, 82,
	83, 84, 0, 0, 0, 0, 0, 0, 62, 85,
	86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 0, 0, 46, 0, 143, 151, 0, 0,
	1022, 139, 150, 136, 0, 0, 0, 0, 0, 0,
	0, 364, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 0, 0, 0, 0, 0, 353, 354, 355,
	0, 365, 0, 146, 0, 0, 0, 147, 0, 145,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 352,
	0, 0, 140, 0, 0, 0, 0, 0, 0, 0,
	0, 58, 0, 0, 0, 0, 0, 0, 0, 0,
	155, 0, 0, 0, 0, 51, 50, 0, 0, 52,
	53, 54, 55, 56, 0, 57, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 0, 70,
	71, 0, 69, 0, 72, 73, 74, 75, 76, 0,
	77, 78, 0, 0, 0, 98, 99, 100, 101, 102,
	61, 103, 0, 104, 0, 0, 0, 63, 0, 64,
	0, 0, 65, 66, 67, 79, 80, 81, 82, 83,
	84, 0, 0, 0, 0, 0, 0, 62, 85, 86,
	87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
	97, 46, 0, 143, 151, 0, 0, 0, 139, 150,
	136, 0, 0, 0, 0, 0, 0, 0, 49, 0,
	0, 0, 363, 0, 0, 0, 0, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 0, 0, 0, 147, 0, 145, 0, 0, 0,
	137, 361, 0, 130, 131, 0, 0, 0, 0, 140,
	0, 0, 0, 0, 0, 0, 0, 0, 58, 0,
	0, 0, 0, 0, 0, 0, 0, 155, 0, 0,
	0, 0, 51, 50, 0, 0, 52, 53, 54, 55,
	56, 0, 57, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 70, 71, 0, 69,
	0, 72, 73, 74, 75, 76, 0, 77, 78, 0,
	0, 0, 98, 99, 100, 101, 102, 61, 103, 0,
	104, 0, 0, 0, 63, 0, 64, 0, 0, 65,
	66, 67, 79, 80, 81, 82, 83, 84, 0, 0,
	0, 0, 0, 0, 62, 85, 86, 87, 88, 89,
	90, 91, 92, 93, 94, 95, 96, 97, 46, 0,
	143, 151, 0, 0, 0, 139, 150, 136, 0, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 0, 0,
	0, 147, 0, 145, 0, 0, 0, 137, 0, 0,
	130, 131, 128, 0, 0, 0, 140, 0, 0, 0,
	0, 0, 0, 0, 0, 58, 0, 0, 0, 0,
	0, 0, 0, 0, 155, 0, 0, 0, 0, 51,
	50, 0, 0, 52, 53, 54, 55, 56, 0, 57,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 68, 0, 70, 71, 0, 69, 0, 72, 73,
	74, 75, 76, 0, 77, 78, 0, 0, 0, 98,
	99, 100, 101, 102, 61, 103, 0, 104, 0, 0,
	0, 63, 0, 64, 0, 0, 65, 66, 67, 79,
	80, 81, 82, 83, 84, 0, 0, 0, 0, 0,
	0, 62, 85, 86, 87, 88, 89, 90, 91, 92,
	93, 94, 95, 96, 97, 46, 0, 143, 151, 0,
	0, 0, 139, 150, 136, 0, 0, 0, 0, 0,
	0, 0, 49, 0, 0, 0, 588, 0, 0, 0,
	0, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 0, 0, 0, 147, 0,
	145, 0, 0, 0, 137, 0, 0, 130, 131, 0,
	0, 0, 0, 140, 0, 0, 0, 0, 0, 0,
	0, 0, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 155, 0, 0, 0, 0, 51, 50, 0, 0,
	52, 53, 54, 55, 56, 0, 57, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 68, 0,
	70, 71, 0, 69, 0, 72, 73, 74, 75, 76,
	0, 77, 78, 500, 0, 0, 98, 99, 100, 101,
	102, 61, 103, 0, 104, 0, 0, 0, 63, 0,
	64, 0, 0, 65, 66, 67, 79, 80, 81, 82,
	83, 84, 0, 0, 0, 0, 0, 0, 62, 85,
	86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 46, 0, 143, 151, 0, 0, 0, 139,
	150, 136, 0, 0, 0, 0, 0, 0, 0, 49,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 0, 0, 0, 147, 0, 145, 0, 0,
	0, 137, 0, 0, 130, 131, 0, 0, 0, 0,
	140, 0, 0, 0, 0, 0, 0, 0, 0, 58,
	0, 0, 0, 0, 0, 0, 0, 0, 155, 0,
	0, 0, 0, 51, 50, 0, 0, 52, 53, 54,
	55, 56, 0, 57, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 68, 0, 70, 71, 0,
	69, 0, 72, 73, 74, 75, 76, 0, 77, 78,
	0, 0, 0, 98, 99, 100, 101, 102, 61, 103,
	0, 104, 0, 0, 0, 63, 0, 64, 0, 0,
	65, 66, 67, 79, 80, 81, 82, 83, 84, 0,
	0, 0, 0, 0, 0, 62, 85, 86, 87, 88,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 46,
	0, 143, 151, 0, 0, 0, 0, 150, 136, 0,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 755, 0, 0, 146, 0,
	0, 0, 147, 0, 145, 0, 0, 0, 137, 0,
	0, 130, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 58, 0, 0, 0,
	0, 0, 0, 0, 0, 155, 0, 0, 0, 0,
	51, 50, 0, 0, 52, 53, 54, 55, 56, 0,
	57, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 0, 70, 71, 0, 69, 0, 72,
	73, 74, 75, 76, 0, 77, 78, 0, 0, 0,
	98, 99, 100, 101, 102, 61, 103, 0, 104, 0,
	0, 0, 63, 0, 64, 0, 0, 65, 66, 67,
	79, 80, 81, 82, 83, 84, 0, 0, 0, 0,
	0, 0, 62, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 46, 0, 143, 151,
	0, 0, 0, 0, 150, 136, 0, 0, 0, 0,
	0, 0, 0, 49, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 0, 185, 0, 0,
	0, 195, 196, 197, 0, 146, 0, 0, 0, 147,
	0, 145, 0, 198, 0, 137, 199, 0, 463, 464,
	209, 0, 206, 0, 0, 0, 0, 205, 210, 203,
	0, 211, 0, 58, 0, 200, 201, 202, 207, 0,
	0, 0, 155, 0, 0, 140, 0, 51, 50, 0,
	0, 52, 53, 54, 55, 56, 0, 57, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 70, 71, 0, 69, 0, 72, 73, 74, 75,
	76, 0, 77, 78, 0, 0, 0, 98, 99, 100,
	101, 102, 61, 103, 0, 104, 0, 0, 0, 63,
	0, 64, 0, 0, 65, 66, 67, 79, 80, 81,
	82, 83, 84, 0, 0, 0, 0, 0, 0, 62,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 842, 151, 0, 0, 0, 0, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 49, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 836, 0, 0,
	839, 0, 0, 0, 0, 0, 838, 204, 0, 0,
	0, 0, 137, 0, 0, 463, 464, 0, 0, 192,
	193, 194, 0, 0, 0, 0, 0, 0, 58, 0,
	0, 0, 840, 0, 794, 0, 186, 187, 188, 189,
	190, 191, 51, 50, 0, 0, 52, 53, 54, 55,
	56, 0, 57, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 70, 71, 0, 69,
	0, 72, 73, 74, 75, 76, 0, 77, 78, 0,
	0, 0, 98, 99, 100, 101, 102, 61, 103, 0,
	104, 0, 0, 0, 63, 0, 64, 0, 0, 65,
	66, 67, 79, 80, 81, 82, 83, 84, 0, 0,
	0, 563, 0, 0, 62, 85, 86, 87, 88, 89,
	90, 91, 92, 93, 94, 95, 96, 97, 49, 221,
	0, 0, 0, 219, 220, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	60, 0, 0, 0, 0, 0, 59, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 837, 58, 0,
	843, 844, 835, 0, 0, 0, 0, 155, 0, 0,
	0, 0, 51, 50, 0, 0, 52, 53, 54, 55,
	56, 0, 57, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 70, 71, 0, 69,
	0, 72, 73, 74, 75, 76, 0, 77, 78, 0,
	0, 0, 98, 99, 100, 101, 102, 61, 103, 0,
	104, 0, 0, 0, 63, 0, 64, 0, 0, 65,
	66, 67, 79, 80, 81, 82, 83, 84, 0, 0,
	0, 46, 0, 0, 62, 85, 86, 87, 88, 89,
	90, 91, 92, 93, 94, 95, 96, 97, 49, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 21, 0, 0, 0, 0, 0, 0,
	60, 0, 0, 0, 0, 0, 59, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	18, 0, 0, 45, 19, 0, 0, 0, 58, 0,
	0, 0, 236, 0, 0, 0, 0, 155, 0, 0,
	0, 0, 51, 50, 405, 23, 52, 53, 54, 55,
	56, 0, 57, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 70, 71, 0, 69,
	0, 72, 73, 74, 75, 76, 0, 77, 78, 0,
	0, 0, 98, 99, 412, 413, 411, 61, 103, 0,
	104, 0, 0, 0, 63, 0, 64, 0, 0, 65,
	66, 67, 79, 80, 81, 82, 83, 84, 0, 0,
	0, 0, 0, 0, 62, 85, 86, 87, 88, 89,
	90, 91, 92, 93, 94, 95, 96, 97, 46, 0,
	143, 151, 0, 0, 0, 0, 150, 136, 0, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 0,
	0, 0, 0, 22, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 0, 0,
	0, 147, 0, 145, 0, 0, 0, 417, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 58, 0, 0, 0, 0,
	0, 0, 0, 0, 155, 0, 0, 0, 0, 51,
	50, 0, 0, 52, 53, 54, 55, 56, 0, 57,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 68, 0, 70, 71, 0, 69, 0, 72, 73,
	74, 75, 76, 0, 77, 78, 0, 0, 0, 98,
	99, 100, 101, 102, 61, 103, 0, 104, 0, 632,
	0, 63, 0, 64, 0, 0, 65, 66, 67, 79,
	80, 81, 82, 83, 84, 0, 0, 0, 0, 0,
	0, 62, 85, 86, 87, 88, 89, 90, 91, 92,
	93, 94, 95, 96, 97, 46, 0, 143, 151, 0,
	0, 0, 0, 150, 136, 0, 0, 0, 0, 0,
	0, 0, 49, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 0, 0, 0, 147, 0,
	145, 0, 0, 0, 137, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 155, 0, 0, 0, 0, 51, 50, 0, 0,
	52, 53, 54, 55, 56, 0, 57, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 68, 0,
	70, 71, 0, 69, 0, 72, 73, 74, 75, 76,
	0, 77, 78, 0, 0, 0, 98, 99, 100, 101,
	102, 61, 103, 0, 104, 0, 0, 0, 63, 0,
	64, 0, 0, 65, 66, 67, 79, 80, 81, 82,
	83, 84, 0, 0, 0, 0, 0, 0, 62, 85,
	86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 46, 0, 143, 151, 0, 0, 0, 0,
	150, 136, 0, 0, 0, 0, 0, 0, 0, 49,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 0, 0, 0, 147, 0, 145, 0, 0,
	0, 137, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 751,
	0, 0, 0, 0, 0, 0, 0, 0, 155, 0,
	0, 0, 0, 51, 50, 0, 0, 52, 53, 54,
	55, 56, 0, 57, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 68, 0, 70, 71, 0,
	69, 0, 72, 73, 74, 75, 76, 0, 77, 78,
	0, 0, 0, 98, 99, 100, 101, 102, 61, 103,
	0, 104, 0, 0, 46, 63, 0, 64, 0, 0,
	65, 66, 67, 79, 80, 81, 82, 83, 84, 0,
	0, 49, 0, 0, 0, 62, 85, 86, 87, 88,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 0,
	0, 0, 0, 60, 0, 0, 0, 0, 0, 59,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 58, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 51, 50, 0, 137, 52,
	53, 54, 55, 56, 0, 57, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 0, 70,
	71, 0, 69, 0, 72, 73, 74, 75, 76, 0,
	77, 78, 0, 0, 0, 98, 99, 100, 101, 102,
	61, 103, 0, 104, 0, 46, 0, 63, 0, 64,
	0, 0, 65, 66, 67, 79, 80, 81, 82, 83,
	84, 0, 49, 0, 0, 0, 0, 62, 85, 86,
	87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
	97, 0, 0, 0, 60, 0, 0, 0, 0, 0,
	59, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 51, 50, 0, 0,
	52, 53, 54, 55, 56, 939, 57, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 68, 0,
	70, 71, 0, 69, 0, 72, 73, 74, 75, 76,
	0, 77, 78, 0, 0, 0, 98, 99, 100, 101,
	102, 61, 103, 0, 104, 0, 46, 0, 63, 0,
	64, 0, 0, 65, 66, 67, 79, 80, 81, 82,
	83, 84, 0, 49, 0, 0, 0, 0, 62, 85,
	86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 0, 0, 0, 60, 0, 0, 0, 0,
	0, 59, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 58, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 51, 50, 0,
	0, 52, 53, 54, 55, 56, 892, 57, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 70, 71, 0, 69, 0, 72, 73, 74, 75,
	76, 0, 77, 78, 0, 0, 0, 98, 99, 100,
	101, 102, 61, 103, 0, 104, 0, 0, 0, 63,
	0, 64, 0, 0, 65, 66, 67, 79, 80, 81,
	82, 83, 84, 0, 0, 0, 46, 0, 0, 62,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 49, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 21, 0,
	0, 0, 0, 0, 0, 60, 0, 0, 0, 0,
	0, 59, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 18, 0, 0, 0, 19,
	0, 0, 0, 58, 0, 0, 0, 889, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 51, 50, 0,
	23, 52, 53, 54, 55, 56, 0, 57, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 70, 71, 0, 69, 0, 72, 73, 74, 75,
	76, 0, 77, 78, 0, 0, 0, 98, 99, 100,
	101, 102, 61, 103, 0, 104, 0, 0, 46, 63,
	0, 64, 0, 0, 65, 66, 67, 79, 80, 81,
	82, 83, 84, 0, 0, 49, 0, 0, 0, 62,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 0, 0, 0, 0, 60, 0, 0,
	0, 0, 0, 59, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 22, 0,
	0, 0, 0, 0, 0, 58, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 51,
	50, 0, 17, 52, 53, 54, 55, 56, 0, 57,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 68, 0, 70, 71, 0, 69, 0, 72, 73,
	74, 75, 76, 0, 77, 78, 0, 0, 0, 98,
	99, 100, 101, 102, 61, 103, 0, 104, 0, 46,
	0, 63, 0, 64, 0, 0, 65, 66, 67, 79,
	80, 81, 82, 83, 84, 0, 49, 0, 0, 0,
	0, 62, 85, 86, 87, 88, 89, 90, 91, 92,
	93, 94, 95, 96, 97, 0, 0, 0, 60, 0,
	0, 0, 0, 0, 59, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 45, 0, 0, 0, 0, 58, 0, 0, 0,
	0, 0, 0, 0, 0, 155, 0, 0, 0, 0,
	51, 50, 405, 0, 52, 53, 54, 55, 56, 236,
	57, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 0, 70, 71, 0, 69, 0, 72,
	73, 74, 75, 76, 0, 77, 78, 0, 0, 0,
	98, 99, 412, 413, 411, 61, 103, 0, 104, 0,
	0, 46, 63, 0, 64, 0, 0, 65, 66, 67,
	79, 80, 81, 82, 83, 84, 0, 0, 49, 0,
	0, 0, 62, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 0, 0, 0, 0,
	60, 0, 0, 0, 0, 0, 59, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 45, 0, 0, 0, 0, 58, 0,
	0, 0, 0, 0, 0, 0, 0, 155, 0, 0,
	0, 0, 51, 50, 405, 417, 52, 53, 54, 55,
	56, 0, 57, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 70, 71, 0, 69,
	0, 72, 73, 74, 75, 76, 0, 77, 78, 0,
	0, 0, 98, 99, 412, 413, 411, 61, 103, 0,
	104, 0, 0, 46, 63, 0, 64, 0, 0, 65,
	66, 67, 79, 80, 81, 82, 83, 84, 0, 0,
	49, 0, 517, 0, 62, 85, 86, 87, 88, 89,
	90, 91, 92, 93, 94, 95, 96, 97, 0, 0,
	0, 0, 60, 0, 0, 0, 0, 0, 59, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	58, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 51, 50, 0, 400, 52, 53,
	54, 55, 56, 0, 57, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 0, 70, 71,
	0, 69, 0, 72, 73, 74, 75, 76, 0, 77,
	78, 0, 0, 0, 98, 99, 100, 101, 102, 61,
	103, 0, 104, 0, 0, 0, 63, 46, 64, 0,
	0, 65, 66, 67, 79, 80, 81, 82, 83, 84,
	0, 0, 0, 0, 49, 0, 62, 85, 86, 87,
	88, 89, 90, 91, 92, 93, 94, 95, 96, 97,
	0, 0, 0, 0, 0, 0, 60, 0, 0, 0,
	0, 0, 59, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 58, 0, 0, 0, 0, 0,
	0, 0, 0, 155, 0, 0, 0, 0, 51, 50,
	123, 0, 52, 53, 54, 55, 56, 0, 57, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 0, 70, 71, 0, 69, 0, 72, 73, 74,
	75, 76, 0, 77, 78, 0, 0, 0, 98, 99,
	100, 101, 102, 61, 103, 0, 104, 0, 0, 46,
	63, 0, 64, 0, 0, 65, 66, 67, 79, 80,
	81, 82, 83, 84, 0, 0, 49, 0, 0, 0,
	62, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 0, 0, 0, 0, 60, 0,
	0, 0, 0, 0, 59, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 58, 0, 0, 0,
	0, 0, 0, 0, 0, 155, 0, 0, 0, 0,
	51, 50, 0, 681, 52, 53, 54, 55, 56, 0,
	57, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 0, 70, 71, 0, 69, 0, 72,
	73, 74, 75, 76, 0, 77, 78, 0, 0, 0,
	98, 99, 412, 413, 411, 61, 103, 0, 104, 0,
	0, 46, 63, 0, 64, 0, 0, 65, 66, 67,
	79, 80, 81, 82, 83, 84, 0, 0, 49, 0,
	0, 0, 62, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 0, 0, 0, 0,
	60, 0, 0, 0, 0, 0, 59, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 58, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 51, 50, 0, 17, 52, 53, 54, 55,
	56, 0, 57, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 70, 71, 0, 69,
	0, 72, 73, 74, 75, 76, 0, 77, 78, 0,
	0, 0, 98, 99, 100, 101, 102, 61, 103, 0,
	104, 0, 0, 46, 63, 0, 64, 0, 0, 65,
	66, 67, 79, 80, 81, 82, 83, 84, 0, 0,
	49, 0, 0, 0, 62, 85, 86, 87, 88, 89,
	90, 91, 92, 93, 94, 95, 96, 97, 0, 0,
	0, 0, 60, 0, 0, 0, 0, 0, 59, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	58, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 51, 50, 0, 257, 52, 53,
	54, 55, 56, 0, 57, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 0, 70, 71,
	0, 69, 0, 72, 73, 74, 75, 76, 0, 77,
	78, 0, 0, 0, 98, 99, 100, 101, 102, 61,
	103, 0, 104, 0, 0, 46, 63, 0, 64, 0,
	0, 65, 66, 67, 79, 80, 81, 82, 83, 84,
	0, 0, 49, 0, 0, 0, 62, 85, 86, 87,
	88, 89, 90, 91, 92, 93, 94, 95, 96, 97,
	0, 0, 0, 0, 60, 0, 0, 0, 0, 0,
	59, 0, 0, 0, 0, 0, 0, 296, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 155, 0, 0, 0, 0, 51, 50, 0, 164,
	52, 53, 54, 55, 56, 0, 57, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 68, 0,
	70, 71, 0, 69, 0, 72, 73, 74, 75, 76,
	0, 77, 78, 0, 0, 0, 98, 99, 100, 101,
	102, 61, 103, 991, 104, 0, 0, 0, 63, 0,
	64, 0, 0, 65, 66, 67, 79, 80, 81, 82,
	83, 84, 0, 0, 0, 0, 0, 0, 62, 85,
	86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 298, 289, 281, 282, 283, 284, 285, 286,
	46, 300, 301, 302, 303, 304, 0, 295, 0, 280,
	287, 288, 290, 0, 0, 0, 0, 49, 0, 0,
	0, 139, 0, 0, 185, 0, 0, 0, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 0, 60,
	198, 0, 0, 199, 0, 59, 0, 209, 0, 206,
	0, 0, 296, 0, 205, 210, 203, 0, 211, 0,
	0, 711, 200, 201, 202, 207, 0, 58, 0, 0,
	0, 0, 140, 0, 0, 0, 155, 0, 0, 0,
	0, 51, 50, 0, 0, 52, 53, 54, 55, 56,
	0, 57, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 68, 0, 70, 71, 0, 69, 0,
	72, 73, 74, 75, 76, 0, 77, 78, 0, 0,
	0, 98, 99, 100, 101, 102, 61, 103, 866, 104,
	0, 0, 0, 63, 0, 64, 0, 0, 65, 66,
	67, 79, 80, 81, 82, 83, 84, 0, 0, 0,
	0, 0, 0, 62, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 298, 289, 281,
	282, 283, 284, 285, 286, 46, 300, 301, 302, 303,
	304, 0, 295, 0, 280, 287, 288, 290, 0, 0,
	0, 0, 49, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 60, 0, 192, 193, 194, 0,
	59, 0, 0, 0, 0, 0, 0, 296, 0, 0,
	0, 0, 0, 186, 187, 188, 189, 190, 191, 0,
	0, 0, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 155, 0, 0, 0, 0, 51, 50, 0, 0,
	52, 53, 54, 55, 56, 0, 57, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 68, 0,
	70, 71, 0, 69, 0, 72, 73, 74, 75, 76,
	0, 77, 78, 0, 0, 0, 98, 99, 100, 101,
	102, 61, 103, 0, 104, 0, 0, 0, 63, 0,
	64, 0, 0, 65, 66, 67, 79, 80, 81, 82,
	83, 84, 0, 0, 0, 0, 0, 0, 62, 85,
	86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 298, 289, 281, 282, 283, 284, 285, 286,
	0, 300, 301, 302, 303, 304, 0, 295, 0, 280,
	287, 288, 290, 139, 0, 0, 185, 0, 0, 0,
	195, 196, 197, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 199, 0, 0, 0, 209,
	0, 206, 0, 0, 0, 0, 205, 210, 203, 0,
	211, 0, 0, 0, 200, 201, 202, 207, 139, 0,
	0, 185, 0, 0, 140, 195, 196, 197, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 198, 0, 0,
	199, 0, 0, 0, 209, 0, 206, 0, 0, 0,
	0, 205, 210, 203, 0, 211, 0, 0, 0, 200,
	201, 202, 207, 139, 0, 0, 185, 0, 0, 140,
	195, 196, 197, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 199, 0, 0, 0, 209,
	0, 206, 0, 0, 0, 0, 205, 210, 203, 0,
	211, 0, 0, 0, 200, 201, 202, 207, 139, 0,
	0, 185, 0, 0, 140, 195, 196, 197, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 198, 0, 0,
	199, 0, 0, 0, 209, 0, 206, 0, 0, 0,
	0, 205, 210, 203, 0, 211, 0, 0, 0, 200,
	201, 202, 207, 0, 0, 706, 204, 0, 0, 140,
	0, 0, 0, 0, 0, 0, 0, 0, 192, 193,
	194, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 187, 188, 189, 190,
	191, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 192, 193, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 372, 0, 0, 0,
	186, 187, 188, 189, 190, 191, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 192, 193,
	194, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 341, 0, 186, 187, 188, 189, 190,
	191, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 192, 193, 194, 0, 139, 0, 0,
	185, 0, 0, 0, 195, 196, 197, 0, 0, 0,
	186, 187, 188, 189, 190, 191, 198, 0, 0, 0,
	0, 0, 0, 209, 0, 206, 0, 0, 0, 0,
	205, 210, 203, 0, 211, 0, 0, 0, 200, 201,
	202, 207, 139, 0, 0, 185, 0, 0, 140, 195,
	196, 197, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 0,
	206, 0, 0, 0, 0, 205, 210, 203, 0, 211,
	0, 0, 0, 200, 201, 202, 207, 0, 0, 0,
	0, 0, 0, 140, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 49, 221, 0, 0,
	204, 219, 220, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 192, 193, 194, 0, 0, 0, 60, 0,
	0, 0, 0, 0, 59, 0, 0, 0, 0, 186,
	187, 188, 189, 190, 191, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 58, 0, 0, 0,
	0, 0, 0, 0, 0, 155, 0, 192, 193, 194,
	51, 50, 0, 0, 52, 53, 54, 55, 56, 0,
	57, 0, 0, 0, 186, 187, 188, 189, 190, 191,
	0, 0, 68, 0, 70, 71, 0, 69, 0, 72,
	73, 74, 75, 76, 0, 77, 78, 0, 0, 0,
	98, 99, 100, 101, 102, 61, 103, 0, 104, 0,
	0, 0, 63, 0, 64, 0, 0, 65, 66, 67,
	79, 80, 81, 82, 83, 84, 0, 0, 0, 563,
	0, 0, 62, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 49, 221, 0, 0,
	0, 219, 220, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 60, 0,
	0, 0, 0, 0, 59, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 58, 0, 0, 0,
	0, 0, 0, 0, 0, 155, 0, 0, 0, 0,
	51, 50, 0, 0, 52, 53, 54, 55, 56, 0,
	57, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 0, 70, 71, 0, 69, 0, 72,
	73, 74, 75, 76, 0, 77, 78, 0, 0, 0,
	98, 99, 100, 101, 102, 61, 103, 0, 104, 0,
	0, 0, 63, 151, 64, 0, 0, 65, 66, 67,
	79, 80, 81, 82, 83, 84, 0, 49, 0, 0,
	0, 0, 62, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 0, 0, 0, 839,
	0, 0, 0, 0, 0, 838, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 58, 0, 0,
	0, 840, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 50, 0, 0, 52, 53, 54, 55, 56,
	0, 57, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 68, 0, 70, 71, 0, 69, 0,
	72, 73, 74, 75, 76, 0, 77, 78, 0, 0,
	0, 98, 99, 100, 101, 102, 61, 103, 0, 104,
	46, 0, 0, 63, 0, 64, 0, 0, 65, 66,
	67, 79, 80, 81, 82, 83, 84, 49, 0, 0,
	0, 0, 0, 62, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 0, 0, 60,
	0, 0, 0, 0, 0, 59, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 58, 0, 0,
	0, 0, 0, 0, 0, 0, 155, 0, 0, 0,
	0, 51, 50, 0, 0, 52, 53, 54, 55, 56,
	0, 57, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 68, 0, 70, 71, 0, 69, 0,
	72, 73, 74, 75, 76, 0, 77, 78, 0, 0,
	0, 98, 99, 100, 101, 102, 61, 103, 0, 104,
	46, 0, 0, 63, 0, 64, 0, 0, 65, 66,
	67, 79, 80, 81, 82, 83, 84, 49, 0, 517,
	0, 0, 0, 62, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 0, 0, 60,
	0, 0, 0, 0, 0, 59, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 58, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 50, 0, 0, 52, 53, 54, 55, 56,
	0, 57, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 68, 0, 70, 71, 0, 69, 0,
	72, 73, 74, 75, 76, 0, 77, 78, 0, 0,
	0, 98, 99, 100, 101, 102, 61, 103, 0, 104,
	46, 0, 0, 63, 0, 64, 0, 0, 65, 66,
	67, 79, 80, 81, 82, 83, 84, 49, 0, 0,
	0, 0, 0, 62, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 0, 0, 60,
	0, 0, 0, 0, 0, 59, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 45, 0, 0, 0, 0, 58, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 50, 0, 0, 52, 53, 54, 55, 56,
	0, 57, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 68, 0, 70, 71, 0, 69, 0,
	72, 73, 74, 75, 76, 0, 77, 78, 0, 0,
	0, 98, 99, 100, 101, 102, 61, 103, 0, 104,
	46, 0, 0, 63, 0, 64, 0, 0, 65, 66,
	67, 79, 80, 81, 82, 83, 84, 49, 0, 0,
	0, 0, 0, 62, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 0, 0, 60,
	0, 0, 0, 0, 0, 59, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 58, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 50, 0, 0, 52, 53, 54, 55, 56,
	0, 57, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 68, 0, 70, 71, 0, 69, 0,
	72, 73, 74, 75, 76, 0, 77, 78, 0, 0,
	0, 98, 99, 100, 101, 102, 61, 103, 0, 976,
	46, 0, 0, 63, 0, 64, 0, 0, 65, 66,
	67, 79, 80, 81, 82, 83, 84, 49, 0, 0,
	0, 0, 0, 62, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 0, 0, 60,
	0, 0, 0, 0, 0, 59, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 58, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 50, 0, 0, 52, 53, 54, 55, 56,
	0, 57, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 68, 0, 70, 71, 0, 69, 0,
	72, 73, 74, 75, 76, 0, 77, 78, 0, 0,
	0, 98, 99, 100, 101, 102, 61, 103, 0, 104,
	46, 0, 0, 63, 0, 64, 0, 0, 65, 66,
	67, 79, 80, 81, 82, 83, 84, 49, 0, 176,
	0, 0, 0, 62, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 0, 0, 60,
	0, 0, 0, 0, 0, 59, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 58, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 50, 0, 0, 52, 53, 54, 55, 56,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 68, 0, 70, 71, 0, 69, 0,
	72, 73, 74, 75, 76, 0, 77, 78, 0, 0,
	0, 98, 99, 100, 101, 102, 61, 103, 0, 104,
	46, 0, 0, 63, 0, 64, 0, 0, 65, 66,
	67, 79, 80, 81, 82, 83, 84, 49, 0, 0,
	0, 0, 0, 62, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 0, 0, 60,
	0, 0, 0, 0, 0, 59, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 58, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 50, 0, 0, 52, 53, 54, 55, 56,
	0, 57, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 68, 0, 70, 71, 0, 69, 0,
	72, 73, 74, 75, 76, 0, 77, 78, 0, 0,
	0, 98, 99, 100, 101, 102, 61, 103, 0, 104,
	0, 0, 0, 63, 0, 64, 0, 0, 65, 66,
	67, 79, 80, 81, 82, 83, 84, 0, 0, 0,
	0, 0, 0, 62, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97,
}

var yyPact = [...]int16{
	323, -1000, -83, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 944, 168, -1000, 750, 421, 947, 7616,
	-2, 8136, 7876, 175, 323, 811, 7616, 837, 809, 7876,
	421, -1000, -1000, 88, 86, 750, 2377, 2377, -1000, -1000,
	802, -1000, 28, -1000, 47, 5779, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 173, -4, 7876, -1000, 172,
	-1000, -4, 2878, -1000, 7876, 621, 8006, 7616, 7616, 171,
	85, -1000, -1000, -1000, 806, -22, -1000, 1873, -1000, -1000,
	2878, 2878, 2878, 2878, -1000, -1000, -1000, 2878, -1000, -1000,
	169, 39, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 165, -1000, -1000, -1000, 806, 162, -1000, 4854,
	39, -1000, 2878, -1000, 7876, 2878, 7876, -4, 990, 7876,
	19, 6577, 821, 985, 5647, -1000, 7876, 730, 714, 856,
	7876, 851, 836, 7876, 2377, 6261, 2878, 2878, 2878, 2878,
	2878, 2878, 2878, 2878, 2878, 2878, 2878, 2878, 2878, 2878,
	934, -1000, -1000, 2878, 1175, 2878, 7876, 900, 2878, 904,
	156, 846, 6945, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 140, 140, 6821, 119, 39, 6532, 2041, 39,
	4854, -1000, 2210, 836, 2878, -1000, -1000, -1000, 6487, -84,
	80, 11, -1000, 774, 6, -1000, 2878, -1000, 800, -1000,
	613, 4722, 670, 7876, 64, -1000, 188, 7876, -1000, -1000,
	832, 5117, 4985, 520, -1000, -1000, 3, 520, 831, 4985,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 52,
	-1000, -1000, -1000, -1000, -1000, 159, 223, 158, 158, 158,
	-1000, -1000, -1000, -1000, -1000, 84, 82, -1000, 215, 157,
	215, 215, -1000, 244, 215, -5, -5, 22, 22, 22,
	-1000, 93, 93, 93, 93, 93, 93, 6821, 6776, -1000,
	920, 1517, 2878, 2878, 894, 156, 845, 1511, -1000, 55,
	874, -1000, 119, 3212, 3212, -1000, -1000, 2878, 2878, -1000,
	-1000, -1000, 79, -1000, 53, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -17, 2878, 2878, 2878, -1000, 6577, 999, -1000,
	831, -11, -1000, 2878, -1000, -1000, 151, -1000, 684, 7876,
	-1000, 6577, 590, 577, 286, -1000, -1000, -21, -1000, -1000,
	-1000, -1000, 832, 5647, 2878, -25, -1000, 39, 590, 2711,
	3677, -18, 1021, 7486, 7486, 5515, -1000, 7486, 7486, 7486,
	203, 835, 137, 135, 47, -1000, 1091, 3677, 693, -1000,
	-1000, 693, -1000, 2878, -18, -1000, 51, 2878, 6945, -1000,
	1006, -1000, -1000, -1000, -1000, 1006, -1000, 885, 879, 1006,
	-1000, 132, -1000, 1006, -1000, -1000, 215, 215, -1000, -1000,
	2878, 1482, 1461, 3212, 3212, -1000, 2878, 2878, 7095, 42,
	2878, 1228, -1000, 3212, 3212, 1145, -26, 1171, 39, -1000,
	2041, -1000, 77, 2544, -1000, -19, -19, 2878, 2878, -1000,
	-1000, 120, 6577, 421, -1000, -1000, -1000, 2377, 193, 421,
	1039, 7876, 39, 590, -1000, 6577, 152, 7876, -1000, 6577,
	498, 5249, 76, -27, 1021, 47, 4985, 755, 754, 4985,
	1115, 738, 738, 738, -1000, -1000, -1000, 7876, 130, -1000,
	7486, 7486, 7486, 7486, 39, -1000, -1000, -1000, -1000, 472,
	129, 3844, 2878, 39, 2878, 701, -1000, -1000, -1000, 950,
	6577, 6945, -1000, -28, -1000, -1000, 75, 72, 867, 862,
	71, 2878, 70, -1000, -1000, 1455, 2878, 2878, 1110, 1066,
	204, 1455, -1000, -1000, -1000, -1000, 228, 2878, 6261, 3212,
	3212, 3212, 3212, 3212, 3212, 3212, 3212, 3212, 3212, 3212,
	3212, 99, 99, 2878, -1000, 2878, -1000, -1000, 2878, -1000,
	69, 68, 2878, 67, 6577, 6577, -1000, 65, -22, 527,
	5383, 510, -1000, -1000, 613, -1000, -1000, 2878, -1000, 7876,
	7486, -1000, 1021, 4985, 4985, 1071, 752, 4985, -1000, -1000,
	-1000, -1000, 128, 7876, -1000, -1000, -1000, -1000, 39, -1000,
	7356, 418, 121, -32, 6442, 6100, 950, 294, -1000, 116,
	1053, -1000, -1000, -1000, 201, -1000, -1000, 201, -29, -1000,
	1455, 1455, 2878, 2878, 2878, 1455, -1000, -38, -38, 2,
	2, 2, -1000, 99, 99, 99, 99, 99, 99, 1455,
	1455, -1000, -1000, -1000, -1000, 656, 587, -39, -1000, 216,
	939, 2878, 7876, 285, 6577, -1000, -1000, -1000, -1000, 1071,
	-1000, 118, 2878, 4985, -1000, 7876, -45, -50, -1000, 984,
	496, 4178, 3045, 2878, -1000, -1000, 246, 675, -1000, 966,
	966, 647, 116, 1051, -1000, 718, 6945, -1000, -1000, -1000,
	-1000, 1455, 1455, 1455, 62, 650, 720, 616, -1000, 831,
	5383, -1000, 7876, 7876, -1000, 3233, -1000, 421, -1000, 7876,
	6577, -1000, -52, -1000, 203, 7356, -1000, 108, 7876, 822,
	4011, 313, -57, -1000, 106, 3212, 1609, 298, -1000, -1000,
	550, 2878, 544, -1000, 552, 831, -1000, -1000, -1000, -1000,
	979, 979, -1000, -1000, 979, 979, 485, 1051, -58, -1000,
	3377, -1000, -1000, 7876, 636, 615, 5647, -1000, -1000, 672,
	-1000, -1000, 38, -1000, 939, -1000, -64, -1000, -1000, -1000,
	7876, -69, -1000, 6086, -1000, 313, 822, -1000, -1000, 3045,
	-33, 6945, 909, 437, 7876, 7876, 628, 6577, 599, 818,
	-1000, 1051, -1000, 1051, 1051, 1051, 4572, 901, 4441, -1000,
	-1000, 6945, -1000, -1000, -1000, -1000, -1000, 7226, -1000, -1000,
	-1000, -1000, -1000, 1050, 1017, -1000, -1000, -1000, -1000, 21,
	-1000, 816, 815, 46, 961, -1000, -1000, 3527, -1000, 977,
	-71, -1000, 6261, -1000, 7876, 748, 471, -1000, -1000, 4011,
	-1000, 491, 2878, -1000, -1000, -1000, -1000, 525, 607, -1000,
	-1000, 523, 379, 545, -1000, -1000, -1000, -1000, -62, -1000,
	4310, -62, -1000, -1000, -79, -1000, -1000, -1000, -1000, -1000,
	-1000, 7876, 7876, 7876, 7876, -1000, -1000, 679, -1000, -1000,
	7876, -1000, 7876, 935, -1000, 748, -1000, 3212, 3212, 898,
	-1000, 3212, -1000, 418, 95, -47, -1000, 974, -1000, 5647,
	-1000, -1000, 613, 7876, 668, 91, -1000, -1000, -62, -1000,
	-1000, 7226, -1000, 765, 15, 14, -1000, -1000, -1000, -1000,
	-1000, 7876, -1000, 909, 909, -1000, 909, 480, 7746, 2878,
	6945, -77, 278, -85, -1000, 2878, -1000, 1232, 7876, 7876,
	7876, -1000, 7876, -86, -1000, 5911, 443, -1000, -1000, 660,
	586, -87, 932, -1000, -1000, -1000, -1000, -1000, -99, 583,
	7746, 469, 374, 1046, -1000, -1000, -1000, 613, -1000, 1232,
	-1000, 61, 792, 2878, -1000, -1000, -1000, -1000, -1000, -1000,
	425, -1000, -1000, 390, 442, 442, 1012, 566, 276, 694,
	-1000, 401, 6577, -1000, -1000, 366, 420, 448, 390, 583,
	-1000, 90, 7876, 660, 7876, -1000, 583, 333, 330, -1000,
	357, -1000, 354, 402, 378, 366, -1000, 7746, 479, -1000,
	-1000, -1000, 784, 777, 776, -1000, -1000, 352, -1000, 338,
	-1000, 583, -107, 83, 456, 326, 324, -1000, -1000, -1000,
	-1000, 7746, 583, -1000, 315, 301, -109, 764, -1000, -1000,
	-1000, 363, -1000,
}

var yyPgo = [...]int16{
	0, 1285, 1284, 1011, 1283, 0, 21, 32, 57, 35,
	41, 28, 1283, 1283, 1283, 528, 86, 34, 1282, 1280,
	1278, 1278, 1278, 1278, 1278, 1278, 69, 1278, 1216, 627,
	725, 9, 1276, 52, 1271, 100, 96, 75, 97, 78,
	95, 37, 1270, 18, 16, 1269, 1267, 1266, 1265, 1264,
	1263, 51, 1260, 66, 1256, 1255, 1252, 1251, 1250, 101,
	84, 56, 82, 1249, 13, 65, 99, 1243, 1241, 1240,
	354, 83, 1237, 1236, 94, 98, 62, 79, 88, 43,
	1071, 1234, 1232, 1230, 1229, 1225, 1222, 1218, 17, 25,
	1217, 1215, 67, 77, 85, 1214, 92, 63, 59, 53,
	1209, 1196, 1188, 1187, 3, 58, 39, 1186, 14, 1184,
	1183, 1181, 1178, 1177, 102, 1177, 1177, 1177, 1177, 1176,
	81, 1162, 1161, 1160, 50, 1158, 1157, 1156, 1145, 1145,
	1144, 38, 1142, 24, 1141, 42, 1131, 76, 994, 422,
	103, 105, 613, 657, 1126, 625, 36, 1126, 64, 127,
	1125, 1122, 1121, 1119, 445, 90, 72, 73, 60, 1118,
	1003, 1114, 724, 421, 1113, 1112, 1110, 1109, 91, 48,
	1108, 1108, 33, 1105, 45, 1094, 1094, 1094, 1094, 47,
	89, 12, 29, 1093, 26, 1089, 19, 40, 1087, 31,
	80, 7, 10, 6, 1083, 70, 1073, 15, 1069, 4,
	1, 1068, 2, 11, 8, 5, 1067, 1066, 1061, 49,
}

var yyR1 = [...]uint8{
	0, 1, 2, 2, 3, 4, 4, 4, 4, 4,
	4, 4, 14, 14, 19, 19, 21, 21, 21, 22,
	22, 23, 23, 24, 24, 25, 25, 26, 26, 27,
	27, 27, 27, 5, 5, 5, 6, 6, 6, 6,
	6, 7, 8, 8, 9, 9, 10, 10, 10, 20,
	20, 12, 12, 11, 11, 11, 13, 13, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 16, 17, 18, 18, 18, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 30, 30, 30, 30, 30, 31, 31, 31, 31,
	31, 31, 64, 64, 41, 43, 42, 42, 42, 32,
	32, 37, 37, 40, 40, 39, 39, 39, 39, 38,
	38, 33, 169, 34, 34, 66, 66, 66, 66, 66,
	66, 35, 35, 36, 36, 36, 64, 64, 44, 45,
	45, 45, 45, 45, 51, 51, 51, 53, 54, 178,
	59, 59, 60, 60, 46, 46, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 48, 48, 49,
	49, 52, 52, 52, 52, 52, 52, 55, 56, 57,
	58, 50, 50, 50, 50, 61, 61, 61, 62, 62,
	63, 63, 70, 70, 72, 72, 73, 73, 73, 73,
	73, 73, 73, 73, 73, 73, 73, 73, 71, 71,
	65, 67, 68, 69, 75, 75, 74, 76, 76, 77,
	79, 79, 78, 78, 80, 80, 80, 80, 138, 138,
	137, 137, 139, 139, 139, 139, 140, 140, 141, 141,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 143, 143, 144, 144, 144, 145, 145, 145, 155,
	155, 155, 155, 155, 155, 156, 156, 156, 156, 157,
	157, 158, 158, 159, 160, 160, 160, 161, 161, 162,
	162, 163, 164, 164, 164, 165, 165, 165, 166, 166,
	166, 167, 167, 146, 146, 147, 96, 96, 96, 119,
	149, 149, 148, 148, 148, 148, 150, 150, 151, 151,
	152, 152, 153, 153, 154, 154, 168, 168, 179, 179,
	173, 173, 174, 175, 175, 176, 176, 177, 171, 171,
	170, 170, 172, 185, 185, 187, 187, 186, 186, 186,
	186, 188, 188, 189, 189, 180, 180, 181, 181, 182,
	182, 182, 183, 183, 184, 184, 184, 184, 184, 190,
	195, 194, 194, 198, 198, 196, 196, 197, 200, 200,
	201, 201, 201, 201, 201, 201, 201, 201, 202, 202,
	202, 202, 199, 199, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 204, 204, 204, 204, 204, 205, 205,
	206, 206, 207, 207, 191, 191, 192, 192, 192, 192,
	192, 192, 193, 193, 81, 86, 86, 87, 87, 87,
	87, 87, 108, 108, 88, 88, 92, 128, 128, 82,
	89, 89, 94, 94, 93, 90, 90, 83, 159, 159,
	84, 91, 91, 85, 85, 113, 113, 114, 114, 120,
	120, 120, 121, 121, 122, 122, 124, 124, 125, 125,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 126, 126, 131, 132, 132,
	132, 132, 132, 132, 127, 127, 133, 135, 135, 135,
	135, 136, 136, 134, 134, 134, 134, 208, 208, 209,
	209, 77, 115, 115, 116, 116, 117, 117, 118, 118,
	98, 98, 98, 98, 98, 109, 109, 110, 110, 99,
	99, 101, 102, 103, 103, 103, 103, 103, 104, 95,
	95, 95, 100, 100, 100, 129, 129, 130, 130, 105,
	105, 105, 106, 107, 107, 19, 19, 111, 111, 111,
	112, 112, 112, 97, 97,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 2,
	0, 3, 0, 2, 0, 1, 0, 2, 0, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 1, 3, 2, 3,
	0, 1, 3, 1, 3, 2, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 3, 2,
	4, 2, 3, 5, 4, 6, 3, 5, 4, 6,
	3, 5, 3, 3, 2, 6, 7, 6, 7, 3,
	4, 4, 6, 5, 7, 1, 3, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 1, 1, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 0, 2, 2, 3, 5, 0,
	2, 4, 1, 1, 2, 3, 5, 6, 8, 6,
	6, 1, 3, 1, 3, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 3, 3, 0, 2, 3, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 2, 2, 1, 3, 3, 2, 4, 1, 5,
	2, 5, 2, 5, 2, 3, 3, 0, 1, 0,
	3, 0, 1, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 0, 0, 0, 0, 1, 3, 1, 1, 1,
	3, 3, 1, 2, 6, 6, 2, 1, 1, 0,
	1, 3, 3, 2, 1, 1, 2, 0, 1, 3,
	2, 2, 3, 1, 4, 2, 3, 2, 3, 2,
	3, 1, 1, 2, 2, 4, 1, 2, 3, 3,
	4, 5, 4, 5, 4, 2, 2, 2, 1, 1,
	0, 5, 2, 4, 2, 2, 3, 1, 0, 1,
	3, 9, 1, 2, 0, 7, 7, 0, 10, 6,
	0, 4, 5, 2, 0, 1, 2, 4, 0, 1,
	1, 0, 5, 2, 4, 1, 2, 0, 1, 0,
	1, 5, 1, 0, 2, 0, 2, 6, 2, 0,
	1, 3, 2, 4, 0, 1, 3, 2, 4, 0,
	1, 3, 3, 2, 0, 2, 2, 2, 3, 3,
	4, 1, 3, 3, 2, 7, 12, 1, 3, 2,
	3, 3, 1, 2, 2, 2, 2, 1, 2, 13,
	2, 2, 0, 2, 0, 1, 3, 3, 2, 1,
	1, 1, 1, 1, 1, 2, 2, 1, 3, 3,
	6, 0, 3, 0, 2, 3, 2, 3, 4, 4,
	3, 3, 0, 5, 2, 5, 2, 0, 4, 2,
	1, 0, 1, 0, 1, 3, 3, 6, 7, 5,
	7, 9, 2, 0, 7, 1, 3, 1, 4, 4,
	7, 2, 1, 1, 1, 3, 2, 3, 0, 8,
	1, 3, 3, 5, 2, 1, 3, 7, 2, 0,
	10, 1, 2, 11, 9, 1, 1, 1, 0, 1,
	1, 1, 1, 0, 3, 0, 1, 3, 2, 0,
	1, 1, 3, 3, 1, 1, 3, 3, 3, 3,
	4, 4, 3, 3, 2, 1, 3, 2, 1, 1,
	1, 1, 3, 0, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 1, 1, 0, 1,
	0, 1, 1, 0, 1, 0, 1, 0, 1, 0,
	4, 4, 4, 5, 5, 2, 5, 3, 5, 2,
	0, 3, 1, 2, 5, 5, 8, 3, 4, 8,
	5, 0, 4, 3, 0, 1, 3, 1, 3, 2,
	2, 4, 4, 2, 0, 1, 0, 1, 1, 0,
	2, 2, 0, 2, 0,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -76, -81, -82, -83, -84,
	-85, -78, -79, -161, 113, -80, -160, 220, 63, 67,
	-167, 36, 196, 88, 229, 98, 99, 100, 101, -121,
	220, 117, -80, -78, -79, -160, -151, -153, 21, -152,
	41, -143, -10, -144, -5, 66, 4, -15, -16, 21,
	86, 85, 89, 90, 91, 92, 93, 95, 71, 49,
	43, 130, 157, 137, 139, 142, 143, 144, 107, 112,
	109, 110, 114, 115, 116, 117, 118, 120, 121, 145,
	146, 147, 148, 149, 150, 158, 159, 160, 161, 162,
	163, 164, 165, 166, 167, 168, 169, 170, 125, 126,
	127, 128, 129, 131, 133, 230, -162, 85, -163, -7,
	-5, -162, 220, -3, 74, -145, -143, 64, 74, -10,
	-77, -76, 221, 221, -138, -137, -139, -28, 225, -30,
	223, 224, 31, -70, -32, -31, 13, 220, -33, 11,
	62, -5, -41, 6, -43, 49, 43, 47, -66, -15,
	12, 7, -34, -51, -17, 80, -138, 75, 225, 222,
	-37, -39, 218, -10, 220, 220, 230, -162, -20, 220,
	-64, -28, -86, -10, 95, -5, 23, -145, -145, -128,
	220, 221, -154, 74, 230, 14, 223, 224, 225, 226,
	227, 228, 206, 207, 208, 18, 19, 20, 30, 33,
	52, 53, 54, 46, 194, 44, 39, 55, -70, 37,
	45, 48, 23, -6, 4, -15, -16, -17, -18, 26,
	27, 22, -28, -28, -28, -28, -38, -28, 220, -37,
	222, -67, 220, -154, 220, -5, 225, -39, -28, -40,
	-10, -64, -163, 23, -8, -7, 230, 221, -87, -76,
	104, 220, 40, 23, -89, -94, -93, 220, -5, -5,
	-159, 84, 84, -113, 64, 61, -8, 61, -140, 64,
	-10, -139, -44, -45, -46, -47, -48, -49, -50, -51,
	188, 173, 174, 175, 176, 177, 178, 189, 190, 172,
	191, -57, -58, -55, -56, 186, 56, -5, 171, -52,
	180, 181, 182, 183, 184, -28, -28, -28, -28, -28,
	-28, -28, -28, -28, -28, -28, -28, -28, -28, 47,
	31, -28, 46, 44, 37, 45, 48, -28, -11, -5,
	56, 58, -28, -75, 59, 60, -74, 220, 61, -6,
	-39, 221, -71, -72, -5, 11, -73, 223, 224, 225,
	226, 227, 228, 206, 207, 208, 18, 19, 20, -5,
	-68, 221, -35, 192, 21, 41, -36, -28, -54, -51,
	-140, -64, 219, 231, 221, 221, -164, 86, 31, 230,
	221, -28, -95, 75, -108, 105, 106, -88, -92, -5,
	88, -5, -140, 230, 208, -90, -93, -38, -96, 65,
	220, -141, -142, -143, -79, 87, -155, -168, -180, -190,
	-169, 129, 127, 128, -5, -66, -142, 220, -114, 114,
	221, -114, -146, 65, -141, -60, -59, 220, 222, -63,
	220, 179, -60, -60, -60, 220, -61, 196, 197, 220,
	-61, -62, 185, 220, -62, -62, 180, 181, -62, 47,
	42, -28, -28, -75, 59, -74, 61, 42, 222, -59,
	57, -29, -30, 223, 224, -29, -64, -28, -38, 221,
	222, -69, -65, 230, -36, -35, -35, 16, 17, -146,
	221, -40, -28, 220, 86, -7, -97, 102, 103, 157,
	221, 230, -38, -96, -94, -28, 221, 230, -97, -28,
	122, -79, -155, -8, -142, -5, 230, 82, -156, 76,
	83, 80, 78, 79, 77, -149, -148, 23, -5, -149,
	-79, -168, -180, -190, -5, -149, -149, -149, -179, 196,
	64, 220, 220, -37, 75, -120, -43, 115, 116, -120,
	-28, 222, -60, -64, -53, -6, -41, -41, 56, 56,
	-41, 220, -41, -62, -62, -28, 42, 42, -29, -29,
	-28, -28, -5, 4, -15, -16, -28, 30, 14, 223,
	224, 225, 226, 227, 228, 206, 207, 208, 18, 19,
	20, -29, -29, 30, 221, 42, -71, 221, 192, -36,
	-65, -65, 230, -65, -28, -28, 219, -77, -137, -100,
	220, 75, -76, -76, 104, -92, -97, 208, -93, 124,
	221, 221, -142, 76, 76, -142, -156, 76, -157, 81,
	-157, -157, -5, 220, -149, -149, -149, -149, -37, 126,
	220, -30, 135, -195, -28, -28, -122, -208, 84, -26,
	36, -53, 221, 221, 221, 57, 57, 221, -64, 221,
	-28, -28, 30, 30, 42, -28, -44, -29, -29, -29,
	-29, -29, -29, -29, -29, -29, -29, -29, -29, -28,
	-28, -36, 221, 221, 221, 221, 111, -130, -105, -5,
	-33, 220, 119, -108, -28, -119, -7, -148, -142, -142,
	-158, 84, 75, 76, -142, 220, -8, -173, -174, -169,
	-186, 131, 220, 230, -206, -205, 193, -91, -98, -109,
	-110, 51, -26, 152, -124, -125, 220, 4, -61, -61,
	221, -28, -28, -28, -65, -165, 89, 99, 112, 221,
	230, -106, -107, 39, -106, -28, -7, 157, -158, 220,
	-28, -142, -8, 221, 221, 230, -175, 23, 125, -30,
	-187, 71, -188, -189, -29, 40, -28, 168, -97, -98,
	-99, 30, -99, 107, 31, -124, -43, -123, 117, 118,
	151, 47, 156, 153, 154, 42, 155, 150, -126, -131,
	-6, 221, -166, 92, 91, 90, 95, -146, -105, -19,
	-10, -11, -5, -11, 221, -76, -8, 221, -179, -174,
	220, -181, -182, -5, -187, 71, -30, 134, 157, 230,
	221, 23, -29, -194, 23, 150, 108, -28, 108, 107,
	-146, -209, 23, -209, -209, -209, 154, 31, 47, -43,
	221, 230, -132, -135, -134, 225, 40, 220, 49, 43,
	75, -136, 6, 223, 224, -42, -15, -43, -41, -9,
	-5, 93, 93, -89, -111, 96, 97, 222, -106, 221,
	-170, -172, -5, 221, 230, -44, 132, -187, -189, 230,
	-6, -198, 131, -5, -7, -101, -102, 111, 99, 100,
	-103, 111, 98, 71, -43, -43, -43, -43, -9, 225,
	47, -9, 225, -131, -127, -133, -135, -41, 6, -41,
	6, 230, 95, 71, 71, -146, -112, 32, -5, -150,
	23, 221, 230, -44, -182, -183, -184, 4, 40, 31,
	47, 130, 126, -30, 125, -196, -197, -195, 112, 95,
	112, -104, 104, 220, 40, 88, 109, 110, -9, 225,
	221, 230, -5, -5, -9, -9, 93, 94, -5, -172,
	-185, 39, -184, -29, -29, 47, -29, -186, 220, 230,
	23, -89, -108, -88, 88, 220, -133, 61, 84, 95,
	95, -11, 125, -191, -192, -5, 133, -197, -6, 157,
	221, -64, -31, 49, 43, -5, -5, -5, -181, 221,
	230, 132, -44, -207, 130, -104, -104, 104, 221, 40,
	221, -199, -200, 40, -201, 138, 47, 49, 43, 50,
	140, -192, 126, -193, -205, 29, 130, 7, -108, -31,
	221, 75, -28, 136, 141, -203, 170, 36, -193, -193,
	7, 125, 23, 157, 84, 138, -204, 147, 146, 142,
	136, 142, 136, 143, 144, -203, -199, 220, -7, -104,
	-5, -202, -200, 145, 145, 142, 142, 136, 142, 136,
	142, -204, -191, 125, 75, 75, 75, 142, 142, -202,
	221, 220, 140, 138, 148, 148, -191, -200, 149, 149,
	221, 75, 138,
}

var yyDef = [...]int16{
	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 307, 308, 0, 543, 312, 367, 0, 399, 0,
	317, 0, 0, 0, -2, 0, 0, 0, 0, 0,
	0, 542, 313, 0, 0, 0, 319, 319, 398, 402,
	400, 316, 341, 342, 46, 0, 33, 34, 35, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, 80, 81, 82, 83, 84, 85, 86, 87, 88,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 0, 364, 60, 369, 50,
	41, 365, 0, 2, 0, 0, 346, 0, 0, 518,
	0, 309, 310, 311, 405, 318, 320, 324, 325, 119,
	0, 0, 0, 0, 181, 182, 209, 0, 185, 282,
	0, -2, 186, 187, 188, 68, 69, 191, 301, 34,
	194, 195, 0, 213, 236, 115, 405, 0, 343, 0,
	48, 201, 204, 344, 0, 0, 0, 366, 0, 0,
	0, 192, 0, 505, 0, 347, 0, 529, 0, 0,
	0, 0, 327, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 141, 0, 0, 0, 0, 0, 0, 304,
	0, 0, 0, 323, 36, 37, 38, 39, 40, 116,
	117, 118, 120, 121, 137, 154, 183, 0, 0, -2,
	0, 302, 0, 327, 0, -2, 206, 202, 203, 0,
	0, 0, 370, 374, 0, 42, 0, 381, 621, 507,
	0, 0, 0, 0, 327, 520, 0, 0, 209, 348,
	388, 0, 0, 538, 535, 536, 0, 538, 384, 0,
	404, 321, 122, 228, 229, 230, 231, 232, 233, 243,
	246, 247, 248, 249, 250, 281, 0, 243, 243, 243,
	256, 257, 258, 259, 260, 277, 277, 234, 279, 268,
	279, 279, 263, 0, 279, 123, 124, 125, 126, 127,
	128, -2, -2, -2, -2, -2, -2, 135, 136, 138,
	0, -2, 0, 0, 304, 0, 0, -2, 150, 53,
	0, 152, 153, 0, 0, 305, 159, 0, 0, 322,
	210, 209, 0, 298, 0, 284, 285, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 295, 296, 297, 205,
	303, 215, 300, 0, 58, 0, 221, 223, 0, -2,
	384, 0, 207, 204, 345, 382, 0, 372, 0, 0,
	49, 193, 644, 0, 0, 512, 513, 0, 514, 209,
	511, 506, 388, 0, 0, 0, 525, 524, 644, 0,
	0, 528, 328, 391, 391, 0, 333, 391, 391, 391,
	409, 111, 109, 110, -2, 212, 0, 0, 0, 537,
	517, 0, 314, 0, 326, 244, 243, 0, 0, 251,
	0, 252, 253, 254, 255, 0, 272, 0, 0, 0,
	274, 270, 278, 0, 261, 262, 279, 279, 266, 140,
	0, -2, -2, 0, 0, 160, 0, 0, 0, 55,
	0, 0, 165, 0, 0, 0, 0, -2, 184, 283,
	0, 211, 0, 0, 300, 300, 300, 0, 0, 315,
	401, 0, 203, 0, 373, 43, 504, 0, 624, 0,
	0, 0, 516, 644, 521, 522, 0, 0, 527, 386,
	0, 391, 333, 0, 0, -2, 0, 0, 0, 0,
	0, 360, 360, 360, 358, 330, 390, 0, 395, 331,
	391, 391, 391, 391, 234, 335, 337, 339, 406, 0,
	0, 0, 0, -2, 0, -2, 539, 540, 541, 28,
	383, 0, 245, 0, 240, 237, 0, 0, 0, 0,
	0, 0, 0, 264, 265, -2, 0, 0, 0, 0,
	-2, -2, 54, 33, 34, 35, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 167, 168, 0, 306, 0, 299, 216, 0, 222,
	0, 0, 0, 0, 224, 225, 208, 0, 643, 0,
	0, 0, 508, 509, 0, 515, 519, 0, 526, 0,
	349, 363, 329, 0, 0, 0, 0, 0, 355, 359,
	356, 357, 393, 0, 332, 336, 338, 340, 214, 408,
	0, 0, 0, 0, 491, 0, 28, 0, 587, 549,
	0, 241, 242, 280, 277, 275, 276, 277, 0, 267,
	-2, -2, 0, 0, 0, -2, 166, 169, 170, 171,
	172, 173, 174, -2, -2, -2, -2, -2, -2, -2,
	-2, 300, 217, 219, 220, 377, 0, 0, 627, -2,
	634, 0, 0, 0, 523, 387, 389, 334, 350, 0,
	352, 0, 0, 0, 354, 0, 0, 0, 410, 414,
	0, 0, 0, 0, 450, 490, 0, 644, 531, 610,
	610, 0, 549, 0, 534, 546, 0, 27, 271, 273,
	269, -2, -2, -2, 0, 380, 0, 0, 620, 384,
	0, 629, 15, 0, 630, 0, 623, 0, 351, 0,
	362, 353, 0, 394, 409, 0, 412, 0, 0, 427,
	0, 67, 0, 431, 0, 0, 452, 489, 530, 532,
	0, 0, 0, 605, 0, 384, 544, 548, 550, 551,
	590, 590, 554, 555, 590, 590, 0, 0, 0, 565,
	573, 218, 371, 0, 0, 0, 0, 622, 628, 639,
	14, 635, 46, 633, 634, 510, 0, 392, 407, 411,
	0, 0, 437, 0, 428, 0, 429, 425, 426, 0,
	0, 0, 434, 454, 0, 0, 0, 609, 0, 607,
	533, 0, 589, 0, 0, 0, 0, 0, 0, 564,
	547, 0, 567, 568, 569, 570, 571, 0, 68, 69,
	579, 580, 583, 0, 0, 586, 581, 582, 196, 0,
	44, 0, 0, 384, 642, 637, 638, 0, 631, 397,
	0, 420, 0, 435, 0, 439, 0, 430, 432, 0,
	433, 0, 0, 451, 488, 600, 601, 0, 0, 612,
	602, 0, 0, 0, 552, 553, 556, 557, 558, 559,
	0, 562, 563, 566, 0, 574, 576, 197, 584, 198,
	585, 0, 0, 0, 0, 619, 632, 0, -2, 361,
	0, 413, 0, 424, 438, 441, 442, 0, 0, 0,
	447, 0, 440, 0, 0, 453, 455, 0, 603, 0,
	604, 613, 0, 0, 0, 0, 606, 608, 560, 561,
	572, 0, 45, 0, 0, 0, 640, 641, 396, 421,
	422, 0, 443, 444, 445, 446, 448, 0, 0, 0,
	0, 611, 0, 0, 617, 0, 575, 0, 0, 0,
	0, 423, 0, 0, 494, 0, -2, 456, 457, 0,
	0, 0, 0, 189, 190, 379, 375, 376, 0, 473,
	0, 0, 503, 0, 492, 614, 615, 0, 618, 0,
	436, 0, 0, 0, 459, 460, 461, 462, 463, 464,
	467, 495, 496, 482, 503, 503, 0, 0, 0, 0,
	449, 0, 458, 465, 466, 487, 0, 0, 482, 473,
	502, 0, 0, 0, 0, 472, 471, 0, 0, 474,
	0, 476, 0, 0, 0, 487, 499, 0, 0, 616,
	378, 497, 0, 484, 486, 475, 477, 0, 480, 0,
	481, 471, 0, 0, 0, 0, 0, 478, 479, 498,
	500, 0, 468, 469, 0, 0, 0, 0, 483, 485,
	501, 0, 470,
}

var yyTok1 = [...]uint8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 227, 3, 3,
	220, 221, 225, 223, 230, 224, 222, 226, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 231, 229,
	206, 208, 207, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 218, 3, 219, 228,
}

var yyTok2 = [...]uint8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 209, 210, 211, 212, 213, 214,
	215, 216, 217,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:278
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:293
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:301
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:316
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:327
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:328
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:329
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:330
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:331
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:332
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:334
		{
			yyVAL.stmt = nil
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:345
		{
			yyVAL.str = yyDollar[1].str
		}
	case 13:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:346
		{
			yyVAL.str = ""
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:350
		{
			yyVAL.node = yyDollar[1].node
		}
	case 15:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:351
		{
			yyVAL.node = nil
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:355
		{
			yyVAL.ival = int(ast.DropCascade)
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:356
		{
			yyVAL.ival = int(ast.DropRestrict)
		}
	case 18:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:357
		{
			yyVAL.ival = int(ast.DropRestrict)
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:361
		{
			yyVAL.ival = 1
		}
	case 20:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:362
		{
			yyVAL.ival = 0
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:366
		{
			yyVAL.ival = 1
		}
	case 22:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:367
		{
			yyVAL.ival = 0
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:371
		{
			yyVAL.ival = 1
		}
	case 24:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:372
		{
			yyVAL.ival = 0
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:376
		{
			yyVAL.ival = 1
		}
	case 26:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:377
		{
			yyVAL.ival = 0
		}
	case 27:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:381
		{
			yyVAL.node = ast.NewWithClause(nil, false, 0)
		}
	case 28:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:382
		{
			yyVAL.node = nil
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:386
		{
			yyVAL.node = ast.NewWithClause(nil, false, 0)
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:387
		{
			yyVAL.node = ast.NewWithClause(nil, false, 0)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:388
		{
			yyVAL.node = nil
		}
	case 32:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:389
		{
			yyVAL.node = nil
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:398
		{
			yyVAL.str = yyDollar[1].str
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:399
		{
			yyVAL.str = yyDollar[1].str
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:400
		{
			yyVAL.str = yyDollar[1].str
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:404
		{
			yyVAL.str = yyDollar[1].str
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:405
		{
			yyVAL.str = yyDollar[1].str
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:406
		{
			yyVAL.str = yyDollar[1].str
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:407
		{
			yyVAL.str = yyDollar[1].str
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:408
		{
			yyVAL.str = yyDollar[1].str
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:412
		{
			yyVAL.str = yyDollar[1].str
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:417
		{
			yyVAL.node = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:421
		{
			list := yyDollar[1].node.(*ast.NodeList)
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:430
		{
			yyVAL.node = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:434
		{
			list := yyDollar[1].node.(*ast.NodeList)
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:443
		{
			yyVAL.node = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:450
		{
			yyVAL.node = &ast.RangeVar{
				SchemaName: yyDollar[1].str,
				RelName:    yyDollar[3].str,
				Inh:        true, // inheritance enabled by default
			}
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:458
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list.Items) == 1 {
				if str, ok := yyDollar[2].list.Items[0].(*ast.String); ok {
					yyVAL.node = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.node = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.node = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:487
		{
			yyVAL.node = yyDollar[2].node
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:488
		{
			yyVAL.node = nil
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:493
		{
			yyVAL.node = ast.NewNodeList(yyDollar[1].node)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:497
		{
			list := yyDollar[1].node.(*ast.NodeList)
			list.Append(yyDollar[3].node)
			yyVAL.node = list
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:506
		{
			yyVAL.node = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:510
		{
			yyVAL.node = ast.NewNodeList(ast.NewString(yyDollar[1].str), ast.NewString(yyDollar[3].str))
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:514
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				nodes.Append(item)
			}
			yyVAL.node = nodes
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:526
		{
			yyVAL.node = ast.NewNodeList(yyDollar[1].node)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:530
		{
			list := yyDollar[1].node.(*ast.NodeList)
			list.Append(yyDollar[3].node)
			yyVAL.node = list
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:544
		{
			yyVAL.str = "all"
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:545
		{
			yyVAL.str = "materialized"
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:546
		{
			yyVAL.str = "recursive"
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:547
		{
			yyVAL.str = "search"
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:548
		{
			yyVAL.str = "breadth"
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:549
		{
			yyVAL.str = "depth"
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:550
		{
			yyVAL.str = "cycle"
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:551
		{
			yyVAL.str = "first"
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:552
		{
			yyVAL.str = "set"
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:553
		{
			yyVAL.str = "by"
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:554
		{
			yyVAL.str = "true"
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:555
		{
			yyVAL.str = "false"
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:556
		{
			yyVAL.str = "path"
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:557
		{
			yyVAL.str = "value"
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:558
		{
			yyVAL.str = "error"
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:559
		{
			yyVAL.str = "empty"
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:560
		{
			yyVAL.str = "wrapper"
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:561
		{
			yyVAL.str = "conditional"
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:562
		{
			yyVAL.str = "unconditional"
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:563
		{
			yyVAL.str = "matched"
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:564
		{
			yyVAL.str = "nothing"
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:565
		{
			yyVAL.str = "source"
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:566
		{
			yyVAL.str = "target"
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:567
		{
			yyVAL.str = "program"
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:568
		{
			yyVAL.str = "stdin"
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:569
		{
			yyVAL.str = "stdout"
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:570
		{
			yyVAL.str = "binary"
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:571
		{
			yyVAL.str = "freeze"
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:572
		{
			yyVAL.str = "verbose"
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:573
		{
			yyVAL.str = "analyze"
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:574
		{
			yyVAL.str = "quotes"
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:575
		{
			yyVAL.str = "omit"
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:576
		{
			yyVAL.str = "keep"
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:577
		{
			yyVAL.str = "scalar"
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:578
		{
			yyVAL.str = "string"
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:579
		{
			yyVAL.str = "encoding"
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:580
		{
			yyVAL.str = "json_query"
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:581
		{
			yyVAL.str = "json_value"
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:582
		{
			yyVAL.str = "json_serialize"
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:583
		{
			yyVAL.str = "json_object"
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:584
		{
			yyVAL.str = "json_array"
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:585
		{
			yyVAL.str = "json_objectagg"
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:586
		{
			yyVAL.str = "json_arrayagg"
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:587
		{
			yyVAL.str = "json_exists"
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:588
		{
			yyVAL.str = "json_scalar"
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:589
		{
			yyVAL.str = "format"
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:590
		{
			yyVAL.str = "json"
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:591
		{
			yyVAL.str = "utf8"
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:592
		{
			yyVAL.str = "without"
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:593
		{
			yyVAL.str = "columns"
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:594
		{
			yyVAL.str = "ordinality"
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:595
		{
			yyVAL.str = "xmltable"
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:596
		{
			yyVAL.str = "json_table"
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:597
		{
			yyVAL.str = "rows"
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:598
		{
			yyVAL.str = "passing"
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:599
		{
			yyVAL.str = "nested"
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:604
		{
			yyVAL.str = yyDollar[1].str
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:609
		{
			yyVAL.str = "full"
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:614
		{
			yyVAL.str = "create"
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:615
		{
			yyVAL.str = "drop"
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:616
		{
			yyVAL.str = "alter"
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:631
		{
			yyVAL.node = yyDollar[1].node
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:633
		{
			name := []*ast.String{ast.NewString("+")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:638
		{
			name := []*ast.String{ast.NewString("-")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:643
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].node.(*ast.TypeName), 0)
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:647
		{
			name := []*ast.String{ast.NewString("+")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:652
		{
			name := []*ast.String{ast.NewString("-")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:657
		{
			name := []*ast.String{ast.NewString("*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:662
		{
			name := []*ast.String{ast.NewString("/")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:667
		{
			name := []*ast.String{ast.NewString("%")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:672
		{
			name := []*ast.String{ast.NewString("^")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:677
		{
			name := []*ast.String{ast.NewString("<")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:682
		{
			name := []*ast.String{ast.NewString(">")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:687
		{
			name := []*ast.String{ast.NewString("=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:692
		{
			name := []*ast.String{ast.NewString("<=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:697
		{
			name := []*ast.String{ast.NewString(">=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:702
		{
			name := []*ast.String{ast.NewString("<>")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:707
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:711
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:715
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:719
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:723
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:727
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:731
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:735
		{
			name := []*ast.String{ast.NewString("~~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:740
		{
			// Create like_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("like_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := []*ast.String{ast.NewString("~~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:748
		{
			name := []*ast.String{ast.NewString("!~~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 145:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:753
		{
			// Create like_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("like_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := []*ast.String{ast.NewString("!~~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:761
		{
			name := []*ast.String{ast.NewString("~~*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:766
		{
			// Create like_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("like_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := []*ast.String{ast.NewString("~~*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:774
		{
			name := []*ast.String{ast.NewString("!~~*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 149:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:779
		{
			// Create like_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("like_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := []*ast.String{ast.NewString("!~~*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:787
		{
			// Pass the NodeList directly to NewCollateClause
			nodeList := yyDollar[3].node.(*ast.NodeList)
			collateClause := ast.NewCollateClause(nodeList)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 151:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:795
		{
			// Create timezone function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("timezone")}
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[1].node), 0)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:801
		{
			// Create timezone function call with no argument
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("timezone")}
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[1].node), 0)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:807
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].astStrList, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:811
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].astStrList, nil, yyDollar[2].node, 0)
		}
	case 155:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:815
		{
			name := []*ast.String{ast.NewString("BETWEEN")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 156:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:820
		{
			name := []*ast.String{ast.NewString("NOT BETWEEN")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 157:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:825
		{
			name := []*ast.String{ast.NewString("BETWEEN SYMMETRIC")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 158:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:830
		{
			name := []*ast.String{ast.NewString("NOT BETWEEN SYMMETRIC")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:835
		{
			name := []*ast.String{ast.NewString("=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:840
		{
			name := []*ast.String{ast.NewString("<>")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:845
		{
			name := []*ast.String{ast.NewString("~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 162:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:850
		{
			// Create similar_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("similar_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := []*ast.String{ast.NewString("~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 163:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:858
		{
			name := []*ast.String{ast.NewString("!~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 164:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:863
		{
			// Create similar_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("similar_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
			name := []*ast.String{ast.NewString("!~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:872
		{
			yyVAL.node = yyDollar[1].node
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:874
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].node.(*ast.TypeName), 0)
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:878
		{
			name := []*ast.String{ast.NewString("+")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:883
		{
			name := []*ast.String{ast.NewString("-")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:888
		{
			name := []*ast.String{ast.NewString("+")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:893
		{
			name := []*ast.String{ast.NewString("-")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:898
		{
			name := []*ast.String{ast.NewString("*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:903
		{
			name := []*ast.String{ast.NewString("/")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:908
		{
			name := []*ast.String{ast.NewString("%")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:913
		{
			name := []*ast.String{ast.NewString("^")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:918
		{
			name := []*ast.String{ast.NewString("<")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:923
		{
			name := []*ast.String{ast.NewString(">")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:928
		{
			name := []*ast.String{ast.NewString("=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:933
		{
			name := []*ast.String{ast.NewString("<=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:938
		{
			name := []*ast.String{ast.NewString(">=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:943
		{
			name := []*ast.String{ast.NewString("<>")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:949
		{
			yyVAL.node = yyDollar[1].node
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:950
		{
			yyVAL.node = yyDollar[1].node
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:952
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:961
		{
			parenExpr := ast.NewParenExpr(yyDollar[2].node, 0)
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewA_Indirection(parenExpr, yyDollar[4].list, 0)
			} else {
				yyVAL.node = parenExpr
			}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:969
		{
			yyVAL.node = yyDollar[1].node
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:974
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:978
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:982
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:986
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:990
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:994
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1001
		{
			yyVAL.node = ast.NewNodeList(yyDollar[1].node)
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1005
		{
			list := yyDollar[1].node.(*ast.NodeList)
			list.Append(yyDollar[3].node)
			yyVAL.node = list
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1012
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1015
		{
			yyVAL.str = yyDollar[1].str
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1018
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1019
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1020
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1025
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1029
		{
			// Create all fields: first ColId followed by indirection items
			allFields := []ast.Node{ast.NewString(yyDollar[1].str)}
			allFields = append(allFields, yyDollar[2].list.Items...)
			yyVAL.node = ast.NewColumnRef(allFields...)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1039
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1043
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1049
		{
			yyVAL.node = yyDollar[1].node
		}
	case 204:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1050
		{
			yyVAL.node = nil
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1054
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1058
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1062
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 208:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1066
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 209:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1071
		{
			yyVAL.list = nil
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1073
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1085
		{
			// For now, just return the func_application
			// Note: In full implementation, would apply within_group_clause, filter_clause, over_clause
			yyVAL.node = yyDollar[1].node
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1094
		{
			yyVAL.node = yyDollar[1].node
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1098
		{
			yyVAL.astStrList = []*ast.String{ast.NewString(yyDollar[1].str)}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1102
		{
			// Create function name from ColId + indirection
			result := []*ast.String{ast.NewString(yyDollar[1].str)}
			for _, node := range yyDollar[2].list.Items {
				if str, ok := node.(*ast.String); ok {
					result = append(result, str)
				}
			}
			yyVAL.astStrList = result
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1115
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].astStrList, nil, 0)
		}
	case 216:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1119
		{
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, yyDollar[3].list, 0)
			// Note: In full implementation, would set agg_order from $4
			yyVAL.node = funcCall
		}
	case 217:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1125
		{
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, ast.NewNodeList(yyDollar[4].node), 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 218:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:1131
		{
			yyDollar[3].list.Append(yyDollar[6].node)
			args := yyDollar[3].list
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, args, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $7
			yyVAL.node = funcCall
		}
	case 219:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1139
		{
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, yyDollar[4].list, 0)
			// Note: In full implementation, would mark as aggregate and set agg_order from $5
			yyVAL.node = funcCall
		}
	case 220:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1145
		{
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, yyDollar[4].list, 0)
			// Note: In full implementation, would set agg_distinct = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1153
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1157
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1164
		{
			yyVAL.node = yyDollar[1].node
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1168
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1172
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1179
		{
			yyVAL.node = ast.NewNodeList(yyDollar[1].node)
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1183
		{
			nodeList := yyDollar[1].node.(*ast.NodeList)
			nodeList.Append(yyDollar[3].node)
			yyVAL.node = nodeList
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1192
		{
			yyVAL.node = yyDollar[1].node
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1197
		{
			yyVAL.node = yyDollar[1].node
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1198
		{
			yyVAL.node = yyDollar[1].node
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1199
		{
			yyVAL.node = yyDollar[1].node
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1200
		{
			yyVAL.node = yyDollar[1].node
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1201
		{
			yyVAL.node = yyDollar[1].node
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1204
		{
			yyVAL.str = yyDollar[1].str
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1205
		{
			yyVAL.str = yyDollar[1].str
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1206
		{
			yyVAL.str = yyDollar[1].str
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1209
		{
			yyVAL.str = yyDollar[1].str
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1212
		{
			yyVAL.str = yyDollar[1].str
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1215
		{
			yyVAL.node = yyDollar[1].node
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1219
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[2].str))
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1223
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1230
		{
			yyVAL.list = yyDollar[2].node.(*ast.NodeList)
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1234
		{
			yyVAL.list = nil
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1240
		{
			typeName := ast.NewTypeName([]string{yyDollar[1].str})
			// Note: In full implementation, would set type modifiers
			yyVAL.node = typeName
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1246
		{
			// Create qualified type name from name + attrs
			names := []string{yyDollar[1].str}
			for _, attr := range yyDollar[2].list.Items {
				names = append(names, attr.(*ast.String).SVal)
			}
			typeName := ast.NewTypeName(names)
			// Note: In full implementation, would set type modifiers
			yyVAL.node = typeName
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1259
		{
			yyVAL.node = ast.NewTypeName([]string{"int4"})
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1263
		{
			yyVAL.node = ast.NewTypeName([]string{"int4"})
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1267
		{
			yyVAL.node = ast.NewTypeName([]string{"int2"})
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1271
		{
			yyVAL.node = ast.NewTypeName([]string{"int8"})
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1275
		{
			yyVAL.node = ast.NewTypeName([]string{"float4"})
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1279
		{
			yyVAL.node = yyDollar[2].node
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1283
		{
			yyVAL.node = ast.NewTypeName([]string{"float8"})
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1287
		{
			yyVAL.node = ast.NewTypeName([]string{"numeric"})
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1291
		{
			yyVAL.node = ast.NewTypeName([]string{"numeric"})
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1295
		{
			yyVAL.node = ast.NewTypeName([]string{"numeric"})
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1299
		{
			yyVAL.node = ast.NewTypeName([]string{"bool"})
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1305
		{
			yyVAL.node = yyDollar[1].node
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1309
		{
			yyVAL.node = yyDollar[1].node
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1315
		{
			yyVAL.node = yyDollar[1].node
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1319
		{
			yyVAL.node = yyDollar[1].node
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1325
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1333
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1341
		{
			yyVAL.str = "varchar"
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1345
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1353
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1361
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1371
		{
			yyVAL.node = ast.NewTypeName([]string{yyDollar[1].str})
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1377
		{
			typeName := ast.NewTypeName([]string{yyDollar[1].str})
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// Note: In full implementation, would set typmods to list with 1
			}
			yyVAL.node = typeName
		}
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1388
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1400
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 271:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1412
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1422
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 273:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1432
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1442
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1453
		{
			yyVAL.ival = 1
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1454
		{
			yyVAL.ival = 0
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1455
		{
			yyVAL.ival = 0
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1458
		{
			yyVAL.ival = 1
		}
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1459
		{
			yyVAL.ival = 0
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1463
		{
			if yyDollar[2].ival < 1 {
				yyVAL.node = ast.NewTypeName([]string{"float4"})
			} else if yyDollar[2].ival <= 7 {
				yyVAL.node = ast.NewTypeName([]string{"float4"})
			} else {
				yyVAL.node = ast.NewTypeName([]string{"float8"})
			}
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1473
		{
			yyVAL.node = ast.NewTypeName([]string{"float8"})
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1480
		{
			yyVAL.astStrList = []*ast.String{ast.NewString(yyDollar[1].str)}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1484
		{
			yyVAL.astStrList = yyDollar[3].astStrList
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1489
		{
			yyVAL.str = yyDollar[1].str
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1490
		{
			yyVAL.str = yyDollar[1].str
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1493
		{
			yyVAL.str = "+"
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1494
		{
			yyVAL.str = "-"
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1495
		{
			yyVAL.str = "*"
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1496
		{
			yyVAL.str = "/"
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1497
		{
			yyVAL.str = "%"
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1498
		{
			yyVAL.str = "^"
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1499
		{
			yyVAL.str = "<"
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1500
		{
			yyVAL.str = ">"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1501
		{
			yyVAL.str = "="
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1502
		{
			yyVAL.str = "<="
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1503
		{
			yyVAL.str = ">="
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1504
		{
			yyVAL.str = "<>"
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1508
		{
			yyVAL.astStrList = []*ast.String{ast.NewString(yyDollar[1].str)}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1512
		{
			yyVAL.astStrList = append([]*ast.String{ast.NewString(yyDollar[1].str)}, yyDollar[3].astStrList...)
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1518
		{
			yyVAL.list = nil
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1521
		{
			yyVAL.node = nil
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1524
		{
			yyVAL.node = nil
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1527
		{
			yyVAL.node = nil
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1530
		{
			yyVAL.ival = 0
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1531
		{
			yyVAL.ival = 0
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1535
		{
			yyVAL.node = yyDollar[2].node
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1550
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1551
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1555
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1560
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1561
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1569
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1571
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].node.(*ast.WithClause)
			yyVAL.stmt = selectStmt
		}
	case 314:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1585
		{
			selectStmt := ast.NewSelectStmt()
			if yyDollar[3].list != nil {
				selectStmt.TargetList = convertToResTargetList(yyDollar[3].list.Items)
			}
			selectStmt.IntoClause = convertToIntoClause(yyDollar[4].node)
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			yyVAL.stmt = selectStmt
		}
	case 315:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1597
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].list
			if yyDollar[3].list != nil {
				selectStmt.TargetList = convertToResTargetList(yyDollar[3].list.Items)
			}
			selectStmt.IntoClause = convertToIntoClause(yyDollar[4].node)
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			yyVAL.stmt = selectStmt
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1609
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = []*ast.ResTarget{starTarget}
			selectStmt.FromClause = ast.NewNodeList(yyDollar[2].node)
			yyVAL.stmt = selectStmt
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1619
		{
			// VALUES clause is a SelectStmt with ValuesLists
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1630
		{
			yyVAL.list = yyDollar[1].list
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1631
		{
			yyVAL.list = nil
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1635
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1636
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1641
		{
			yyVAL.node = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1645
		{
			// Implicit alias (no AS keyword)
			yyVAL.node = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1650
		{
			// No alias - use default naming
			yyVAL.node = ast.NewResTarget("", yyDollar[1].node)
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1655
		{
			// SELECT * - all columns
			yyVAL.node = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1666
		{
			yyVAL.list = yyDollar[2].list
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1667
		{
			yyVAL.list = nil
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1671
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1672
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1681
		{
			rangeVar := yyDollar[1].node.(*ast.RangeVar)
			if yyDollar[2].node != nil {
				rangeVar.Alias = yyDollar[2].node.(*ast.Alias)
			}
			yyVAL.node = rangeVar
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1689
		{
			/* Subquery in FROM clause */
			subquery := yyDollar[1].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[2].node != nil {
				alias = yyDollar[2].node.(*ast.Alias)
			}
			rangeSubselect := ast.NewRangeSubselect(false, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1700
		{
			/* LATERAL subquery in FROM clause */
			subquery := yyDollar[2].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[3].node != nil {
				alias = yyDollar[3].node.(*ast.Alias)
			}
			rangeSubselect := ast.NewRangeSubselect(true, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1711
		{
			yyVAL.node = yyDollar[1].node
		}
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1715
		{
			joinExpr := yyDollar[2].node.(*ast.JoinExpr)
			joinExpr.Alias = yyDollar[4].node.(*ast.Alias)
			yyVAL.node = joinExpr
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1721
		{
			rangeFunc := yyDollar[1].node.(*ast.RangeFunction)
			if yyDollar[2].node != nil {
				rangeFunc.Alias = yyDollar[2].node.(*ast.Alias)
			}
			yyVAL.node = rangeFunc
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1729
		{
			rangeFunc := yyDollar[2].node.(*ast.RangeFunction)
			rangeFunc.Lateral = true
			if yyDollar[3].node != nil {
				rangeFunc.Alias = yyDollar[3].node.(*ast.Alias)
			}
			yyVAL.node = rangeFunc
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1738
		{
			rangeTableFunc := yyDollar[1].node.(*ast.RangeTableFunc)
			if yyDollar[2].node != nil {
				rangeTableFunc.Alias = yyDollar[2].node.(*ast.Alias)
			}
			yyVAL.node = rangeTableFunc
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1746
		{
			rangeTableFunc := yyDollar[2].node.(*ast.RangeTableFunc)
			rangeTableFunc.Lateral = true
			if yyDollar[3].node != nil {
				rangeTableFunc.Alias = yyDollar[3].node.(*ast.Alias)
			}
			yyVAL.node = rangeTableFunc
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1755
		{
			jsonTable := yyDollar[1].node.(*ast.JsonTable)
			if yyDollar[2].node != nil {
				jsonTable.Alias = yyDollar[2].node.(*ast.Alias)
			}
			yyVAL.node = jsonTable
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1763
		{
			jsonTable := yyDollar[2].node.(*ast.JsonTable)
			jsonTable.Lateral = true
			if yyDollar[3].node != nil {
				jsonTable.Alias = yyDollar[3].node.(*ast.Alias)
			}
			yyVAL.node = jsonTable
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1775
		{
			rangeVar := yyDollar[1].node.(*ast.RangeVar)
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.node = rangeVar
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1781
		{
			yyVAL.node = yyDollar[1].node
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1788
		{
			rangeVar := yyDollar[1].node.(*ast.RangeVar)
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.node = rangeVar
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1794
		{
			rangeVar := yyDollar[2].node.(*ast.RangeVar)
			rangeVar.Inh = false // no inheritance
			yyVAL.node = rangeVar
		}
	case 345:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1800
		{
			rangeVar := yyDollar[3].node.(*ast.RangeVar)
			rangeVar.Inh = false // no inheritance
			yyVAL.node = rangeVar
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1810
		{
			yyVAL.node = yyDollar[1].node
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1814
		{
			rangeVar := yyDollar[1].node.(*ast.RangeVar)
			rangeVar.Alias = ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.node = rangeVar
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1820
		{
			rangeVar := yyDollar[1].node.(*ast.RangeVar)
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.node = rangeVar
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1837
		{
			yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
		}
	case 350:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1841
		{
			/* CROSS JOIN is same as unqualified inner join */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewJoinExpr(ast.JOIN_INNER, left, right, nil)
			join.IsNatural = false
			yyVAL.node = join
		}
	case 351:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1850
		{
			left := yyDollar[1].node
			right := yyDollar[4].node
			joinType := ast.JoinType(yyDollar[2].ival)
			joinQual := yyDollar[5].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(joinType, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(joinType, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 352:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1876
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[3].node
			joinQual := yyDollar[4].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(ast.JOIN_INNER, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(ast.JOIN_INNER, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 353:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1902
		{
			left := yyDollar[1].node
			right := yyDollar[5].node
			joinType := ast.JoinType(yyDollar[3].ival)
			join := ast.NewNaturalJoinExpr(joinType, left, right)
			yyVAL.node = join
		}
	case 354:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1910
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewNaturalJoinExpr(ast.JOIN_INNER, left, right)
			yyVAL.node = join
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1920
		{
			yyVAL.ival = int(ast.JOIN_FULL)
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1921
		{
			yyVAL.ival = int(ast.JOIN_LEFT)
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1922
		{
			yyVAL.ival = int(ast.JOIN_RIGHT)
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1923
		{
			yyVAL.ival = int(ast.JOIN_INNER)
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1928
		{
			yyVAL.ival = 1
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1929
		{
			yyVAL.ival = 0
		}
	case 361:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1939
		{
			/* Create a two-element list: [name_list, alias_or_null] following PostgreSQL */
			nameList := yyDollar[3].node
			var aliasNode ast.Node = nil
			if yyDollar[5].node != nil {
				aliasNode = yyDollar[5].node
			}
			usingList := ast.NewNodeList(nameList, aliasNode)
			yyVAL.node = usingList
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1950
		{
			yyVAL.node = yyDollar[2].node
		}
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1957
		{
			yyVAL.node = yyDollar[3].node
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1968
		{
			yyVAL.node = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1972
		{
			yyVAL.node = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1976
		{
			yyVAL.node = ast.NewWithClause(yyDollar[3].list, true, 0)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1982
		{
			yyVAL.node = yyDollar[1].node
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1983
		{
			yyVAL.node = nil
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1988
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1992
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 371:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:2000
		{
			ctename := yyDollar[1].str
			query := yyDollar[6].stmt
			cte := ast.NewCommonTableExpr(ctename, query)

			// Set column names if provided
			if yyDollar[2].node != nil {
				cte.Aliascolnames = yyDollar[2].node.(*ast.NodeList)
			}

			// Set materialized option
			cte.Ctematerialized = ast.CTEMaterialized(yyDollar[4].ival)

			// Set search clause if provided
			if yyDollar[8].node != nil {
				cte.SearchClause = yyDollar[8].node.(*ast.CTESearchClause)
			}

			// Set cycle clause if provided
			if yyDollar[9].node != nil {
				cte.CycleClause = yyDollar[9].node.(*ast.CTECycleClause)
			}

			yyVAL.node = cte
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2028
		{
			yyVAL.ival = int(ast.CTEMaterializeAlways)
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2029
		{
			yyVAL.ival = int(ast.CTEMaterializeNever)
		}
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2030
		{
			yyVAL.ival = int(ast.CTEMaterializeDefault)
		}
	case 375:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2035
		{
			searchColList := yyDollar[5].node.(*ast.NodeList)
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, false, seqColumn)
		}
	case 376:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2041
		{
			searchColList := yyDollar[5].node.(*ast.NodeList)
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, true, seqColumn)
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2047
		{
			yyVAL.node = nil
		}
	case 378:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:2054
		{
			cycleColList := yyDollar[2].node.(*ast.NodeList)
			markColumn := yyDollar[4].str
			markValue := yyDollar[6].node.(ast.Expression)
			markDefault := yyDollar[8].node.(ast.Expression)
			pathColumn := yyDollar[10].str
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, markValue, markDefault, pathColumn)
		}
	case 379:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2063
		{
			cycleColList := yyDollar[2].node.(*ast.NodeList)
			markColumn := yyDollar[4].str
			pathColumn := yyDollar[6].str
			// For simple CYCLE clause, use nil for mark values to avoid TO/DEFAULT in deparsing
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, nil, nil, pathColumn)
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2071
		{
			yyVAL.node = nil
		}
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2082
		{
			/* Create a SelectStmt with VALUES clause following PostgreSQL */
			selectStmt := ast.NewSelectStmt()
			exprList := yyDollar[3].node.(*ast.NodeList)
			selectStmt.ValuesLists = []*ast.NodeList{exprList}
			yyVAL.stmt = selectStmt
		}
	case 382:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2090
		{
			/* Add additional VALUES row to existing SelectStmt */
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			exprList := yyDollar[4].node.(*ast.NodeList)
			selectStmt.ValuesLists = append(selectStmt.ValuesLists, exprList)
			yyVAL.stmt = selectStmt
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2104
		{
			yyVAL.node = yyDollar[2].node
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2105
		{
			yyVAL.node = nil
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2109
		{
			yyVAL.node = yyDollar[1].node
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2117
		{
			yyVAL.node = yyDollar[2].node
		}
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2119
		{
			cursorExpr := ast.NewCurrentOfExpr(0, yyDollar[4].str) // cvarno filled in by parse analysis
			yyVAL.node = cursorExpr
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2123
		{
			yyVAL.node = nil
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2127
		{
			yyVAL.str = yyDollar[1].str
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2135
		{
			yyVAL.node = yyDollar[1].node
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2136
		{
			yyVAL.node = nil
		}
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2141
		{
			nameList := yyDollar[4].node.(*ast.NodeList)
			yyVAL.node = ast.NewAlias(yyDollar[2].str, nameList)
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2146
		{
			yyVAL.node = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 394:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2150
		{
			nameList := yyDollar[3].node.(*ast.NodeList)
			yyVAL.node = ast.NewAlias(yyDollar[1].str, nameList)
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2155
		{
			yyVAL.node = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2163
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.node = alias
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2167
		{
			yyVAL.node = nil
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2175
		{
			yyVAL.ival = 1
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2176
		{
			yyVAL.ival = 0
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2180
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 401:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2181
		{
			yyVAL.list = yyDollar[4].node.(*ast.NodeList)
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2185
		{
			yyVAL.list = yyDollar[1].list
		}
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2186
		{
			yyVAL.list = nil
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2196
		{
			yyVAL.node = ast.NewIntoClause(yyDollar[2].node.(*ast.RangeVar), nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2199
		{
			yyVAL.node = nil
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2210
		{
			hasOrdinality := yyDollar[2].ival == 1
			// For a simple function, create a NodeList containing a single NodeList with the function
			funcList := ast.NewNodeList(yyDollar[1].node)
			functions := ast.NewNodeList(funcList)
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, false, functions, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 407:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2219
		{
			hasOrdinality := yyDollar[6].ival == 1
			// rowsfrom_list is already a NodeList containing NodeLists
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, true, yyDollar[4].list, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2229
		{
			yyVAL.ival = 1
		}
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2230
		{
			yyVAL.ival = 0
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2236
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2240
		{
			yyDollar[1].list.Append(yyDollar[3].list)
			yyVAL.list = yyDollar[1].list
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2247
		{
			funcList := ast.NewNodeList(yyDollar[1].node)
			if yyDollar[2].node != nil {
				funcList.Append(yyDollar[2].node)
			}
			yyVAL.list = funcList
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2256
		{
			yyVAL.node = yyDollar[3].list
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2257
		{
			yyVAL.node = nil
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2267
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2271
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2283
		{
			name := yyDollar[1].str
			fp := &ast.FunctionParameter{
				BaseNode: ast.BaseNode{Tag: ast.T_FunctionParameter},
				Name:     &name,
				ArgType:  yyDollar[2].node.(*ast.TypeName),
				Mode:     ast.FUNC_PARAM_TABLE,
				DefExpr:  nil,
			}
			yyVAL.node = fp
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2298
		{
			yyVAL.list = yyDollar[3].list
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2299
		{
			yyVAL.list = nil
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2305
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2309
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2318
		{
			columnDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].node.(*ast.TypeName), 0)
			// Note: opt_collate_clause support can be added when needed
			// PostgreSQL sets: n->collClause = (CollateClause *) $3;
			yyVAL.node = columnDef
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2329
		{
			// Pass the NodeList directly to NewCollateClause
			nameList := yyDollar[2].node.(*ast.NodeList)
			yyVAL.node = ast.NewCollateClause(nameList)
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2334
		{
			yyVAL.node = nil
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2339
		{
			yyVAL.str = "BY REF"
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2340
		{
			yyVAL.str = "BY VALUE"
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2346
		{
			yyVAL.node = yyDollar[2].node
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2350
		{
			yyVAL.node = yyDollar[2].node
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2354
		{
			yyVAL.node = yyDollar[3].node
		}
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2358
		{
			yyVAL.node = yyDollar[3].node
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2366
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2370
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2378
		{
			target := ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
			yyVAL.node = target
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2383
		{
			target := ast.NewResTarget("", yyDollar[2].node)
			yyVAL.node = target
		}
	case 435:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2392
		{
			// XMLTABLE(xpath_expr PASSING doc_expr COLUMNS ...)
			// $3 is xpath_expr (should be RowExpr), $4 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[4].node.(ast.Expression), yyDollar[3].node.(ast.Expression), nil, nil, nil, 0)
			// Convert column list to RangeTableFuncCol
			if yyDollar[6].list != nil {
				columns := make([]*ast.RangeTableFuncCol, 0)
				for _, col := range yyDollar[6].list.Items {
					columns = append(columns, col.(*ast.RangeTableFuncCol))
				}
				rangeTableFunc.Columns = columns
			}
			yyVAL.node = rangeTableFunc
		}
	case 436:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:2408
		{
			// Convert namespace list to []*ResTarget
			var namespaces []*ast.ResTarget
			if yyDollar[5].list != nil {
				namespaces = make([]*ast.ResTarget, len(yyDollar[5].list.Items))
				for i, item := range yyDollar[5].list.Items {
					namespaces[i] = item.(*ast.ResTarget)
				}
			}
			// XMLTABLE(XMLNAMESPACES(...), xpath_expr PASSING doc_expr COLUMNS ...)
			// $8 is xpath_expr (should be RowExpr), $9 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[9].node.(ast.Expression), yyDollar[8].node.(ast.Expression), namespaces, nil, nil, 0)
			// Convert column list to RangeTableFuncCol
			if yyDollar[11].list != nil {
				columns := make([]*ast.RangeTableFuncCol, 0)
				for _, col := range yyDollar[11].list.Items {
					columns = append(columns, col.(*ast.RangeTableFuncCol))
				}
				rangeTableFunc.Columns = columns
			}
			yyVAL.node = rangeTableFunc
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2435
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2439
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2448
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].node.(*ast.TypeName), false, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2453
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, nil, true, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2458
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].node.(*ast.TypeName), false, false, nil, nil, 0)
			// TODO: Process column options from $3
			yyVAL.node = rangeTableFuncCol
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2468
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2472
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2481
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2485
		{
			yyVAL.node = ast.NewDefElem("default", yyDollar[2].node)
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2489
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(true))
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2493
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(false))
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2497
		{
			yyVAL.node = ast.NewDefElem("path", yyDollar[2].node)
		}
	case 449:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:2510
		{
			// Extract path name from optional path name node
			var pathName string
			if yyDollar[6].node != nil {
				if strNode, ok := yyDollar[6].node.(*ast.String); ok {
					pathName = strNode.SVal
				}
			}

			// Create JsonTablePathSpec from the a_expr (path expression) and optional path name
			pathSpec := ast.NewJsonTablePathSpec(yyDollar[5].node, pathName, 0)

			// Create JsonTable with context item and path spec
			jsonTable := ast.NewJsonTable(yyDollar[3].node.(*ast.JsonValueExpr), pathSpec)
			if yyDollar[10].list != nil {
				jsonTable.Columns = yyDollar[10].list
			}
			yyVAL.node = jsonTable
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2534
		{
			var format *ast.JsonFormat
			if yyDollar[2].node != nil {
				format = yyDollar[2].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonValueExpr(yyDollar[1].node, format)
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2545
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2546
		{
			yyVAL.node = nil
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2551
		{
			yyVAL.node = yyDollar[2].list
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2552
		{
			yyVAL.node = nil
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2556
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2557
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2562
		{
			jsonArg := ast.NewJsonArgument(yyDollar[1].node.(*ast.JsonValueExpr), yyDollar[3].str)
			yyVAL.node = jsonArg
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2570
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JSON_BEHAVIOR_DEFAULT,
				Expr:     yyDollar[2].node,
			}
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2578
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JsonBehaviorType(yyDollar[1].ival),
				Expr:     nil,
			}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2589
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_ERROR)
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2590
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_NULL)
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2591
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_TRUE)
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2592
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_FALSE)
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2593
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_UNKNOWN)
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2594
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_ARRAY)
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2595
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_OBJECT)
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2596
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY)
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2601
		{
			// Return a list with ON EMPTY behavior and nil for ON ERROR
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, nil}}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2605
		{
			// Return a list with nil for ON EMPTY and ON ERROR behavior
			yyVAL.node = &ast.NodeList{Items: []ast.Node{nil, yyDollar[1].node}}
		}
	case 470:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2609
		{
			// Return a list with both ON EMPTY and ON ERROR behaviors
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, yyDollar[4].node}}
		}
	case 471:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2613
		{
			yyVAL.node = nil
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2618
		{
			yyVAL.node = yyDollar[1].node
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2619
		{
			yyVAL.node = nil
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2624
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2625
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2626
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2627
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2628
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2629
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2630
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2631
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2632
		{
			yyVAL.ival = int(ast.JSW_UNSPEC)
		}
	case 483:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2637
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2638
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 485:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2639
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2640
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2641
		{
			yyVAL.ival = int(ast.JS_QUOTES_UNSPEC)
		}
	case 488:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2647
		{
			// Parse the encoding name and map to JsonEncoding constant
			var encoding ast.JsonEncoding
			switch yyDollar[4].str {
			case "utf8":
				encoding = ast.JS_ENC_UTF8
			case "utf16":
				encoding = ast.JS_ENC_UTF16
			case "utf32":
				encoding = ast.JS_ENC_UTF32
			default:
				encoding = ast.JS_ENC_DEFAULT
			}
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   encoding,
			}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2667
		{
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   ast.JS_ENC_DEFAULT,
			}
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2677
		{
			yyVAL.node = yyDollar[1].node
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2678
		{
			yyVAL.node = nil
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2683
		{
			yyVAL.node = ast.NewString("path")
		}
	case 493:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2684
		{
			yyVAL.node = nil
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2690
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2694
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2703
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FOR_ORDINALITY, yyDollar[1].str)
			yyVAL.node = jsonTableCol
		}
	case 497:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2712
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_REGULAR, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].node.(*ast.TypeName)
			if yyDollar[3].node != nil {
				strNode := yyDollar[3].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 498:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2726
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FORMATTED, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].node.(*ast.TypeName)
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			if yyDollar[3].node != nil {
				jsonTableCol.Format = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = jsonTableCol
		}
	case 499:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2740
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_EXISTS, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].node.(*ast.TypeName)
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 500:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2751
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, "")
			jsonTableCol.Columns = yyDollar[6].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 501:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:2760
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, yyDollar[5].str)
			jsonTableCol.Columns = yyDollar[8].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2771
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 503:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2772
		{
			yyVAL.node = nil
		}
	case 504:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2788
		{
			insertStmt := yyDollar[5].node.(*ast.InsertStmt)
			insertStmt.Relation = yyDollar[4].node.(*ast.RangeVar)
			if yyDollar[1].node != nil {
				insertStmt.WithClause = yyDollar[1].node.(*ast.WithClause)
			}
			if yyDollar[6].onconflict != nil {
				insertStmt.OnConflictClause = yyDollar[6].onconflict
			}
			if yyDollar[7].list != nil {
				insertStmt.ReturningList = convertToResTargetList(convertToNodeList(yyDollar[7].list))
			}
			yyVAL.stmt = insertStmt
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2806
		{
			yyVAL.node = yyDollar[1].node
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2810
		{
			rangeVar := yyDollar[1].node.(*ast.RangeVar)
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.node = rangeVar
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2819
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.SelectStmt = yyDollar[1].stmt
			yyVAL.node = insertStmt
		}
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2825
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Override = ast.OverridingKind(yyDollar[2].ival)
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 509:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2832
		{
			insertStmt := ast.NewInsertStmt(nil)
			if yyDollar[2].list != nil {
				insertStmt.Cols = convertToResTargetList(yyDollar[2].list.Items)
			}
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 510:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2841
		{
			insertStmt := ast.NewInsertStmt(nil)
			if yyDollar[2].list != nil {
				insertStmt.Cols = convertToResTargetList(yyDollar[2].list.Items)
			}
			insertStmt.Override = ast.OverridingKind(yyDollar[5].ival)
			insertStmt.SelectStmt = yyDollar[7].stmt
			yyVAL.node = insertStmt
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2851
		{
			insertStmt := ast.NewInsertStmt(nil)
			// For DEFAULT VALUES, SelectStmt should be nil
			insertStmt.SelectStmt = nil
			yyVAL.node = insertStmt
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2860
		{
			yyVAL.ival = int(ast.OVERRIDING_USER_VALUE)
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2861
		{
			yyVAL.ival = int(ast.OVERRIDING_SYSTEM_VALUE)
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2866
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2870
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2878
		{
			yyVAL.node = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2887
		{
			yyVAL.list = yyDollar[2].node.(*ast.NodeList)
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2888
		{
			yyVAL.list = nil
		}
	case 519:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:2898
		{
			updateStmt := ast.NewUpdateStmt(yyDollar[3].node.(*ast.RangeVar))
			if yyDollar[1].node != nil {
				updateStmt.WithClause = yyDollar[1].node.(*ast.WithClause)
			}
			updateStmt.TargetList = convertToResTargetList(yyDollar[5].list.Items)
			if yyDollar[6].list != nil {
				updateStmt.FromClause = yyDollar[6].list
			}
			updateStmt.WhereClause = yyDollar[7].node
			if yyDollar[8].list != nil {
				updateStmt.ReturningList = convertToResTargetList(convertToNodeList(yyDollar[8].list))
			}
			yyVAL.stmt = updateStmt
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2917
		{
			yyVAL.list = yyDollar[1].list
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2921
		{
			// Concatenate the lists - equivalent to PostgreSQL's list_concat
			for _, item := range yyDollar[3].list.Items {
				yyDollar[1].list.Append(item)
			}
			yyVAL.list = yyDollar[1].list
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2932
		{
			target := yyDollar[1].node.(*ast.ResTarget)
			target.Val = yyDollar[3].node
			yyVAL.list = ast.NewNodeList(target)
		}
	case 523:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2938
		{
			// Multi-column assignment: (col1, col2) = (val1, val2)
			// Create MultiAssignRef nodes for each target, matching PostgreSQL exactly
			targetList := yyDollar[2].list
			ncolumns := len(targetList.Items)

			// Create a MultiAssignRef source for each target
			for i, item := range targetList.Items {
				resCol := item.(*ast.ResTarget)
				multiAssignRef := ast.NewMultiAssignRef(yyDollar[5].node, i+1, ncolumns, 0)
				resCol.Val = multiAssignRef
			}

			// Return the entire target list
			yyVAL.list = targetList
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2958
		{
			yyVAL.node = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2964
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2965
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 527:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2975
		{
			deleteStmt := ast.NewDeleteStmt(yyDollar[4].node.(*ast.RangeVar))
			if yyDollar[1].node != nil {
				deleteStmt.WithClause = yyDollar[1].node.(*ast.WithClause)
			}
			if yyDollar[5].node != nil {
				deleteStmt.UsingClause = yyDollar[5].node.(*ast.NodeList)
			}
			deleteStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].list != nil {
				deleteStmt.ReturningList = convertToResTargetList(convertToNodeList(yyDollar[7].list))
			}
			yyVAL.stmt = deleteStmt
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2993
		{
			yyVAL.node = yyDollar[2].list
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2997
		{
			yyVAL.node = nil
		}
	case 530:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:3012
		{
			mergeStmt := &ast.MergeStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_MergeStmt},
			}
			if yyDollar[1].node != nil {
				mergeStmt.WithClause = yyDollar[1].node.(*ast.WithClause)
			}
			mergeStmt.Relation = yyDollar[4].node.(*ast.RangeVar)
			mergeStmt.SourceRelation = yyDollar[6].node
			mergeStmt.JoinCondition = yyDollar[8].node
			if yyDollar[9].list != nil {
				// Convert NodeList to slice of MergeWhenClause
				nodeList := yyDollar[9].list
				for _, node := range nodeList.Items {
					mergeStmt.MergeWhenClauses = append(mergeStmt.MergeWhenClauses, node.(*ast.MergeWhenClause))
				}
			}
			if yyDollar[10].list != nil {
				mergeStmt.ReturningList = yyDollar[10].list
			}
			yyVAL.stmt = mergeStmt
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3039
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3043
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 533:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:3056
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Relation:  yyDollar[3].node.(*ast.RangeVar),
				IsFrom:    yyDollar[5].ival != 0,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Convert column list NodeList to []string
			if yyDollar[4].list != nil {
				nodeList := yyDollar[4].list
				for _, node := range nodeList.Items {
					copyStmt.Attlist = append(copyStmt.Attlist, node.(*ast.String).SVal)
				}
			}
			// Handle legacy options - convert to []*DefElem
			if yyDollar[2].node != nil {
				copyStmt.Options = append(copyStmt.Options, yyDollar[2].node.(*ast.DefElem))
			}
			if yyDollar[8].node != nil {
				copyStmt.Options = append(copyStmt.Options, yyDollar[8].node.(*ast.DefElem))
			}
			if yyDollar[10].list != nil {
				nodeList := yyDollar[10].list
				for _, node := range nodeList.Items {
					copyStmt.Options = append(copyStmt.Options, node.(*ast.DefElem))
				}
			}
			if yyDollar[11].node != nil {
				copyStmt.WhereClause = yyDollar[11].node
			}
			yyVAL.stmt = copyStmt
		}
	case 534:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3090
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Query:     yyDollar[3].stmt,
				IsFrom:    false,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			if yyDollar[8].node != nil {
				copyStmt.Options = append(copyStmt.Options, yyDollar[8].node.(*ast.DefElem))
			}
			if yyDollar[9].list != nil {
				nodeList := yyDollar[9].list
				for _, node := range nodeList.Items {
					copyStmt.Options = append(copyStmt.Options, node.(*ast.DefElem))
				}
			}
			yyVAL.stmt = copyStmt
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3115
		{
			yyVAL.ival = 1
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3116
		{
			yyVAL.ival = 0
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3120
		{
			yyVAL.ival = 1
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3121
		{
			yyVAL.ival = 0
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3125
		{
			yyVAL.str = yyDollar[1].str
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3126
		{
			yyVAL.str = ""
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3127
		{
			yyVAL.str = ""
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3132
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "format",
				Arg:      ast.NewString("binary"),
			}
		}
	case 543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3139
		{
			yyVAL.node = nil
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3144
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "delimiter",
				Arg:      ast.NewString(yyDollar[3].str),
			}
		}
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3151
		{
			yyVAL.node = nil
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3155
		{
			yyVAL.list = yyDollar[1].list
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3156
		{
			yyVAL.list = yyDollar[2].list
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3161
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3169
		{
			yyVAL.list = nil
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3176
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "format",
				Arg:      ast.NewString("binary"),
			}
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3184
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "freeze",
				Arg:      ast.NewString("true"),
			}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3192
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "delimiter",
				Arg:      ast.NewString(yyDollar[3].str),
			}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3200
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "null",
				Arg:      ast.NewString(yyDollar[3].str),
			}
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3208
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "format",
				Arg:      ast.NewString("csv"),
			}
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3216
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "header",
				Arg:      ast.NewString("true"),
			}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3224
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "quote",
				Arg:      ast.NewString(yyDollar[3].str),
			}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3232
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "escape",
				Arg:      ast.NewString(yyDollar[3].str),
			}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3240
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "force_quote",
				Arg:      yyDollar[3].node,
			}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3248
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "force_quote",
				Arg:      &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}},
			}
		}
	case 560:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3256
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "force_not_null",
				Arg:      yyDollar[4].node,
			}
		}
	case 561:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3264
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "force_not_null",
				Arg:      &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}},
			}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3272
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "force_null",
				Arg:      yyDollar[3].node,
			}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3280
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "force_null",
				Arg:      &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}},
			}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3288
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "encoding",
				Arg:      ast.NewString(yyDollar[2].str),
			}
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3300
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3304
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3311
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  yyDollar[1].str,
				Arg:      yyDollar[2].node,
			}
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3321
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3322
		{
			yyVAL.node = yyDollar[1].node
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3323
		{
			yyVAL.node = ast.NewA_Star(0)
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3324
		{
			yyVAL.node = ast.NewString("default")
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3325
		{
			yyVAL.node = yyDollar[2].list
		}
	case 573:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3326
		{
			yyVAL.node = nil
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3331
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3335
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3341
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3345
		{
			yyVAL.str = "true"
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3346
		{
			yyVAL.str = "false"
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3347
		{
			yyVAL.str = "on"
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3348
		{
			yyVAL.str = yyDollar[1].str
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3352
		{
			yyVAL.str = yyDollar[1].str
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3353
		{
			yyVAL.str = yyDollar[1].str
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3357
		{
			yyVAL.node = ast.NewFloat(yyDollar[1].str)
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3358
		{
			yyVAL.node = ast.NewFloat(yyDollar[2].str)
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3360
		{
			f := ast.NewFloat(yyDollar[2].str)
			f.FVal = "-" + f.FVal
			yyVAL.node = f
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3365
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3389
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3397
		{
			yyVAL.ival = 1
		}
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3398
		{
			yyVAL.ival = 0
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3402
		{
			yyVAL.ival = 1
		}
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3403
		{
			yyVAL.ival = 0
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3407
		{
			yyVAL.ival = 1
		}
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3408
		{
			yyVAL.ival = 0
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3412
		{
			yyVAL.ival = 1
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3413
		{
			yyVAL.ival = 0
		}
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3422
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 601:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3428
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 602:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3434
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 603:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3440
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3446
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3454
		{
			yyVAL.ival = int(ast.MERGE_WHEN_MATCHED)
		}
	case 606:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3455
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_SOURCE)
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3459
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 608:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3460
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3464
		{
			yyVAL.node = yyDollar[2].node
		}
	case 610:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3465
		{
			yyVAL.node = nil
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3470
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_UPDATE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			yyVAL.node = mergeWhen
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3485
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_DELETE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3494
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			mergeWhen.Values = yyDollar[2].node.(*ast.NodeList)
			yyVAL.node = mergeWhen
		}
	case 614:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3501
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[3].ival)
			mergeWhen.Values = yyDollar[5].node.(*ast.NodeList)
			yyVAL.node = mergeWhen
		}
	case 615:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3508
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[5].node.(*ast.NodeList)
			yyVAL.node = mergeWhen
		}
	case 616:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3521
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[6].ival)
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[8].node.(*ast.NodeList)
			yyVAL.node = mergeWhen
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3534
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3543
		{
			yyVAL.node = yyDollar[3].node
		}
	case 619:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3558
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_UPDATE)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			// Convert NodeList to []*ResTarget for SET clause
			if yyDollar[7].list != nil {
				nodeList := yyDollar[7].list
				for _, node := range nodeList.Items {
					onConflict.TargetList = append(onConflict.TargetList, node.(*ast.ResTarget))
				}
			}
			onConflict.WhereClause = yyDollar[8].node
			yyVAL.onconflict = onConflict
		}
	case 620:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3574
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_NOTHING)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			yyVAL.onconflict = onConflict
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3582
		{
			yyVAL.onconflict = nil
		}
	case 622:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3593
		{
			// Create InferClause for column-based conflict detection
			infer := ast.NewInferClause()
			// Convert NodeList to []*IndexElem
			if yyDollar[2].list != nil {
				nodeList := yyDollar[2].list
				for _, node := range nodeList.Items {
					indexElem := node.(*ast.IndexElem)
					infer.IndexElems = append(infer.IndexElems, indexElem)
				}
			}
			infer.WhereClause = yyDollar[4].node
			yyVAL.node = infer
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3608
		{
			// Create InferClause for constraint-based conflict detection
			infer := ast.NewInferClause()
			infer.Conname = yyDollar[3].str
			yyVAL.node = infer
		}
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3615
		{
			yyVAL.node = nil
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3626
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3630
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3637
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3641
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3648
		{
			indexElem := yyDollar[2].node.(*ast.IndexElem)
			indexElem.Name = yyDollar[1].str
			yyVAL.node = indexElem
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3654
		{
			indexElem := yyDollar[2].node.(*ast.IndexElem)
			indexElem.Expr = yyDollar[1].node
			yyVAL.node = indexElem
		}
	case 631:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3660
		{
			indexElem := yyDollar[4].node.(*ast.IndexElem)
			indexElem.Expr = yyDollar[2].node
			yyVAL.node = indexElem
		}
	case 632:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3669
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			if yyDollar[1].node != nil {
				nodeList := yyDollar[1].node.(*ast.NodeList)
				for _, node := range nodeList.Items {
					indexElem.Collation = append(indexElem.Collation, node.(*ast.String).SVal)
				}
			}
			if yyDollar[2].node != nil {
				nodeList := yyDollar[2].node.(*ast.NodeList)
				for _, node := range nodeList.Items {
					indexElem.Opclass = append(indexElem.Opclass, node.(*ast.String).SVal)
				}
			}
			indexElem.Ordering = ast.SortByDir(yyDollar[3].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[4].ival)
			yyVAL.node = indexElem
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3692
		{
			yyVAL.node = yyDollar[2].node
		}
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3693
		{
			yyVAL.node = nil
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3697
		{
			yyVAL.node = yyDollar[1].node
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3698
		{
			yyVAL.node = nil
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3702
		{
			yyVAL.ival = int(ast.SORTBY_ASC)
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3703
		{
			yyVAL.ival = int(ast.SORTBY_DESC)
		}
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3704
		{
			yyVAL.ival = int(ast.SORTBY_DEFAULT)
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3708
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_FIRST)
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3709
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_LAST)
		}
	case 642:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3710
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_DEFAULT)
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3715
		{
			yyVAL.list = yyDollar[2].list
		}
	case 644:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3719
		{
			yyVAL.list = nil
		}
	}
	goto yystack /* stack new state and value */
}
