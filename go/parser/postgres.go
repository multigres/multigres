// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
	"strings"
)

// Parser state for handling complex grammar constructs
var parserState struct {
	// Future parser state variables can be added here
}

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:35
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string
	bval    bool
	byt     byte
	rune    rune

	// AST nodes
	node        ast.Node
	stmt        ast.Stmt
	stmtList    []ast.Stmt
	list        *ast.NodeList
	groupClause *ast.GroupClause

	// Specific AST node types
	into          *ast.IntoClause
	onconflict    *ast.OnConflictClause
	createStmt    *ast.CreateStmt
	indexStmt     *ast.IndexStmt
	alterStmt     *ast.AlterTableStmt
	dropStmt      *ast.DropStmt
	columnDef     *ast.ColumnDef
	constraint    *ast.Constraint
	indexElem     *ast.IndexElem
	alterCmd      *ast.AlterTableCmd
	with          *ast.WithClause
	rangevar      *ast.RangeVar
	objType       ast.ObjectType
	dropBehav     ast.DropBehavior
	setquant      ast.SetQuantifier
	typnam        *ast.TypeName
	partspec      *ast.PartitionSpec
	partboundspec *ast.PartitionBoundSpec
	oncommit      ast.OnCommitAction
	defelt        *ast.DefElem
	target        *ast.ResTarget            // For select targets, insert columns
	alias         *ast.Alias                // For table and column aliases
	jtype         ast.JoinType              // For join type specifications
	jexpr         *ast.JoinExpr             // For joined table expressions
	keyaction     *ast.KeyAction            // For foreign key actions
	keyactions    *ast.KeyActions           // For foreign key action sets
	funparam      *ast.FunctionParameter    // For function parameters
	funparammode  ast.FunctionParameterMode // For parameter modes (IN/OUT/INOUT/VARIADIC)
	vsetstmt      *ast.VariableSetStmt      // For SET/RESET statements
	rolespec      *ast.RoleSpec
	objwithargs   *ast.ObjectWithArgs
	statelem      *ast.StatsElem

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const UNKNOWN = 57392
const WHEN = 57393
const IS = 57394
const ISNULL = 57395
const NOTNULL = 57396
const AT = 57397
const TIME = 57398
const ZONE = 57399
const LOCAL = 57400
const SYMMETRIC = 57401
const ASYMMETRIC = 57402
const TO = 57403
const OPERATOR = 57404
const SELECT = 57405
const FROM = 57406
const WHERE = 57407
const ONLY = 57408
const TABLE = 57409
const LIMIT = 57410
const OFFSET = 57411
const BY = 57412
const GROUP_P = 57413
const HAVING = 57414
const INTO = 57415
const ON = 57416
const JOIN = 57417
const INNER_P = 57418
const LEFT = 57419
const RIGHT = 57420
const FULL = 57421
const OUTER_P = 57422
const CROSS = 57423
const NATURAL = 57424
const USING = 57425
const RECURSIVE = 57426
const MATERIALIZED = 57427
const LATERAL = 57428
const VALUES = 57429
const SEARCH = 57430
const BREADTH = 57431
const DEPTH = 57432
const CYCLE = 57433
const FIRST_P = 57434
const LAST_P = 57435
const SET = 57436
const ASC = 57437
const DESC = 57438
const INSERT = 57439
const UPDATE = 57440
const DELETE_P = 57441
const MERGE = 57442
const RETURNING = 57443
const CONFLICT = 57444
const OVERRIDING = 57445
const USER = 57446
const SYSTEM_P = 57447
const MATCHED = 57448
const THEN = 57449
const SOURCE = 57450
const TARGET = 57451
const DO = 57452
const NOTHING = 57453
const COPY = 57454
const PROGRAM = 57455
const STDIN = 57456
const STDOUT = 57457
const BINARY = 57458
const FREEZE = 57459
const CONSTRAINT = 57460
const VERBOSE = 57461
const ANALYZE = 57462
const CURRENT_P = 57463
const CURSOR = 57464
const OF = 57465
const COLUMNS = 57466
const ORDINALITY = 57467
const XMLTABLE = 57468
const JSON_TABLE = 57469
const ROWS = 57470
const PATH = 57471
const PASSING = 57472
const FOR = 57473
const NESTED = 57474
const REF_P = 57475
const XMLNAMESPACES = 57476
const ARRAY = 57477
const ERROR = 57478
const ERROR_P = 57479
const EMPTY = 57480
const EMPTY_P = 57481
const OBJECT_P = 57482
const WRAPPER = 57483
const CONDITIONAL = 57484
const UNCONDITIONAL = 57485
const QUOTES = 57486
const OMIT = 57487
const KEEP = 57488
const SCALAR = 57489
const STRING_P = 57490
const ENCODING = 57491
const DELIMITER = 57492
const DELIMITERS = 57493
const HEADER_P = 57494
const QUOTE = 57495
const FORCE = 57496
const CSV = 57497
const VALUE_P = 57498
const JSON_QUERY = 57499
const JSON_VALUE = 57500
const JSON_SERIALIZE = 57501
const JSON_OBJECT = 57502
const JSON_ARRAY = 57503
const JSON_OBJECTAGG = 57504
const JSON_ARRAYAGG = 57505
const JSON_EXISTS = 57506
const JSON_SCALAR = 57507
const FORMAT = 57508
const JSON = 57509
const UTF8 = 57510
const WITHOUT = 57511
const BIT = 57512
const NUMERIC = 57513
const INTEGER = 57514
const SMALLINT = 57515
const BIGINT = 57516
const REAL = 57517
const FLOAT_P = 57518
const DOUBLE_P = 57519
const PRECISION = 57520
const CHARACTER = 57521
const CHAR_P = 57522
const VARCHAR = 57523
const NATIONAL = 57524
const NCHAR = 57525
const VARYING = 57526
const TIMESTAMP = 57527
const INTERVAL = 57528
const INT_P = 57529
const DECIMAL_P = 57530
const DEC = 57531
const BOOLEAN_P = 57532
const VARIADIC = 57533
const ABORT_P = 57534
const ABSENT = 57535
const ABSOLUTE_P = 57536
const ACCESS = 57537
const ACTION = 57538
const ADD_P = 57539
const ADMIN = 57540
const AFTER = 57541
const AGGREGATE = 57542
const ALSO = 57543
const ALWAYS = 57544
const ANALYSE = 57545
const ASENSITIVE = 57546
const ASSERTION = 57547
const ASSIGNMENT = 57548
const ATOMIC = 57549
const ATTACH = 57550
const ATTRIBUTE = 57551
const AUTHORIZATION = 57552
const BACKWARD = 57553
const BEFORE = 57554
const BEGIN_P = 57555
const CACHE = 57556
const CALL = 57557
const CALLED = 57558
const CASCADED = 57559
const CATALOG_P = 57560
const CHAIN = 57561
const CHARACTERISTICS = 57562
const CHECKPOINT = 57563
const CLASS = 57564
const CLOSE = 57565
const CLUSTER = 57566
const COALESCE = 57567
const COLLATION = 57568
const COMMENT = 57569
const COMMENTS = 57570
const COMMIT = 57571
const COMMITTED = 57572
const COMPRESSION = 57573
const CONFIGURATION = 57574
const CONNECTION = 57575
const CONSTRAINTS = 57576
const CONTENT_P = 57577
const CONTINUE_P = 57578
const CONVERSION_P = 57579
const COST = 57580
const CUBE = 57581
const CURRENT_CATALOG = 57582
const CURRENT_DATE = 57583
const CURRENT_ROLE = 57584
const CURRENT_SCHEMA = 57585
const CURRENT_TIME = 57586
const CURRENT_TIMESTAMP = 57587
const CURRENT_USER = 57588
const DATA_P = 57589
const DATABASE = 57590
const DAY_P = 57591
const DEALLOCATE = 57592
const DECLARE = 57593
const DEFAULTS = 57594
const DEFERRABLE = 57595
const DEFERRED = 57596
const DEFINER = 57597
const DEPENDS = 57598
const DETACH = 57599
const DICTIONARY = 57600
const DISABLE_P = 57601
const DISCARD = 57602
const DOCUMENT_P = 57603
const DOMAIN_P = 57604
const EACH = 57605
const ELSE = 57606
const ENABLE_P = 57607
const ENCRYPTED = 57608
const END_P = 57609
const ENUM_P = 57610
const EVENT = 57611
const EXCEPT = 57612
const EXCLUDE = 57613
const EXCLUDING = 57614
const EXCLUSIVE = 57615
const EXECUTE = 57616
const EXPLAIN = 57617
const EXPRESSION = 57618
const EXTENSION = 57619
const EXTERNAL = 57620
const EXTRACT = 57621
const FAMILY = 57622
const FETCH = 57623
const FILTER = 57624
const FINALIZE = 57625
const FOLLOWING = 57626
const FOREIGN = 57627
const FORWARD = 57628
const FUNCTION = 57629
const FUNCTIONS = 57630
const GENERATED = 57631
const GLOBAL = 57632
const GRANT = 57633
const GRANTED = 57634
const GREATEST = 57635
const GROUPING = 57636
const GROUPS = 57637
const HANDLER = 57638
const HOLD = 57639
const HOUR_P = 57640
const IDENTITY_P = 57641
const IMMEDIATE = 57642
const IMMUTABLE = 57643
const IMPLICIT_P = 57644
const IMPORT_P = 57645
const INCLUDE = 57646
const INCLUDING = 57647
const INCREMENT = 57648
const INDENT = 57649
const INDEX = 57650
const INDEXES = 57651
const INHERIT = 57652
const INHERITS = 57653
const INITIALLY = 57654
const INLINE_P = 57655
const INPUT_P = 57656
const INSENSITIVE = 57657
const INSTEAD = 57658
const INTERSECT = 57659
const INVOKER = 57660
const ISOLATION = 57661
const KEYS = 57662
const LABEL = 57663
const LANGUAGE = 57664
const LARGE_P = 57665
const LATERAL_P = 57666
const LEAKPROOF = 57667
const LEAST = 57668
const LEADING = 57669
const LEVEL = 57670
const LISTEN = 57671
const LOAD = 57672
const LOCALTIME = 57673
const LOCALTIMESTAMP = 57674
const LOCATION = 57675
const LOCK_P = 57676
const LOCKED = 57677
const LOGGED = 57678
const MAPPING = 57679
const MATCH = 57680
const MAXVALUE = 57681
const MERGE_ACTION = 57682
const METHOD = 57683
const MINUTE_P = 57684
const MINVALUE = 57685
const MODE = 57686
const MONTH_P = 57687
const MOVE = 57688
const NAME_P = 57689
const NAMES = 57690
const NEW = 57691
const NEXT = 57692
const NFC = 57693
const NFD = 57694
const NFKC = 57695
const NFKD = 57696
const NO = 57697
const NONE = 57698
const NORMALIZE = 57699
const NORMALIZED = 57700
const NOTIFY = 57701
const NOWAIT = 57702
const NULLIF = 57703
const OUT_P = 57704
const OVERLAY = 57705
const OVERLAPS = 57706
const OWNED = 57707
const OWNER = 57708
const PARALLEL = 57709
const PARAMETER = 57710
const PARSER = 57711
const PARTIAL = 57712
const PARTITION = 57713
const PASSWORD = 57714
const PLACING = 57715
const PLAN = 57716
const PLANS = 57717
const POLICY = 57718
const POSITION = 57719
const PRECEDING = 57720
const PREPARE = 57721
const PREPARED = 57722
const PRESERVE = 57723
const PRIMARY = 57724
const PRIOR = 57725
const PRIVILEGES = 57726
const PROCEDURAL = 57727
const PROCEDURE = 57728
const PROCEDURES = 57729
const PUBLICATION = 57730
const RANGE = 57731
const READ = 57732
const REASSIGN = 57733
const RECHECK = 57734
const REFERENCES = 57735
const REFERENCING = 57736
const REFRESH = 57737
const REINDEX = 57738
const RELATIVE_P = 57739
const RELEASE = 57740
const RENAME = 57741
const REPEATABLE = 57742
const REPLICA = 57743
const RESET = 57744
const RESTART = 57745
const RETURN = 57746
const RETURNS = 57747
const REVOKE = 57748
const ROLE = 57749
const ROLLBACK = 57750
const ROLLUP = 57751
const ROUTINE = 57752
const ROUTINES = 57753
const ROW = 57754
const RULE = 57755
const SAVEPOINT = 57756
const SCHEMA = 57757
const SCHEMAS = 57758
const SCROLL = 57759
const SECOND_P = 57760
const SECURITY = 57761
const SEQUENCE = 57762
const SEQUENCES = 57763
const SERIALIZABLE = 57764
const SERVER = 57765
const SESSION = 57766
const SESSION_USER = 57767
const SETS = 57768
const SETOF = 57769
const SHARE = 57770
const SHOW = 57771
const SIMPLE = 57772
const SKIP = 57773
const SNAPSHOT = 57774
const SOME = 57775
const SQL_P = 57776
const STABLE = 57777
const STANDALONE_P = 57778
const START = 57779
const STATEMENT = 57780
const STATISTICS = 57781
const STORAGE = 57782
const STORED = 57783
const STRICT_P = 57784
const STRIP_P = 57785
const SUBSCRIPTION = 57786
const SUBSTRING = 57787
const SUPPORT = 57788
const SYSID = 57789
const SYSTEM_USER = 57790
const TABLES = 57791
const TABLESPACE = 57792
const TABLESAMPLE = 57793
const TEMP = 57794
const TEMPLATE = 57795
const TEMPORARY = 57796
const TEXT_P = 57797
const TIES = 57798
const TRAILING = 57799
const TRANSACTION = 57800
const TRANSFORM = 57801
const TREAT = 57802
const TRIGGER = 57803
const TRIM = 57804
const TRUNCATE = 57805
const TRUSTED = 57806
const TYPE_P = 57807
const TYPES_P = 57808
const UESCAPE = 57809
const UNBOUNDED = 57810
const UNCOMMITTED = 57811
const UNENCRYPTED = 57812
const UNION = 57813
const UNIQUE = 57814
const UNLISTEN = 57815
const UNLOGGED = 57816
const UNTIL = 57817
const VACUUM = 57818
const VALID = 57819
const VALIDATE = 57820
const VALIDATOR = 57821
const VERSION_P = 57822
const VIEW = 57823
const VIEWS = 57824
const VOLATILE = 57825
const WHITESPACE_P = 57826
const WINDOW = 57827
const WITHIN = 57828
const WORK = 57829
const WRITE = 57830
const XML_P = 57831
const XMLATTRIBUTES = 57832
const XMLCONCAT = 57833
const XMLELEMENT = 57834
const XMLEXISTS = 57835
const XMLFOREST = 57836
const XMLPARSE = 57837
const XMLPI = 57838
const XMLROOT = 57839
const XMLSERIALIZE = 57840
const YEAR_P = 57841
const YES_P = 57842
const INOUT = 57843
const OTHERS = 57844
const OLD = 57845
const KEY = 57846
const OFF = 57847
const OIDS = 57848
const OPTION = 57849
const OPTIONS = 57850
const OVER = 57851
const ORDER = 57852
const ANY = 57853
const BOTH = 57854
const CAST = 57855
const CHECK = 57856
const COLUMN = 57857
const FORMAT_LA = 57858
const NOT_LA = 57859
const NULLS_LA = 57860
const WITH_LA = 57861
const WITHOUT_LA = 57862
const MODE_TYPE_NAME = 57863
const MODE_PLPGSQL_EXPR = 57864
const MODE_PLPGSQL_ASSIGN1 = 57865
const MODE_PLPGSQL_ASSIGN2 = 57866
const MODE_PLPGSQL_ASSIGN3 = 57867
const UMINUS = 57868

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"UNKNOWN",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"JOIN",
	"INNER_P",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER_P",
	"CROSS",
	"NATURAL",
	"USING",
	"RECURSIVE",
	"MATERIALIZED",
	"LATERAL",
	"VALUES",
	"SEARCH",
	"BREADTH",
	"DEPTH",
	"CYCLE",
	"FIRST_P",
	"LAST_P",
	"SET",
	"ASC",
	"DESC",
	"INSERT",
	"UPDATE",
	"DELETE_P",
	"MERGE",
	"RETURNING",
	"CONFLICT",
	"OVERRIDING",
	"USER",
	"SYSTEM_P",
	"MATCHED",
	"THEN",
	"SOURCE",
	"TARGET",
	"DO",
	"NOTHING",
	"COPY",
	"PROGRAM",
	"STDIN",
	"STDOUT",
	"BINARY",
	"FREEZE",
	"CONSTRAINT",
	"VERBOSE",
	"ANALYZE",
	"CURRENT_P",
	"CURSOR",
	"OF",
	"COLUMNS",
	"ORDINALITY",
	"XMLTABLE",
	"JSON_TABLE",
	"ROWS",
	"PATH",
	"PASSING",
	"FOR",
	"NESTED",
	"REF_P",
	"XMLNAMESPACES",
	"ARRAY",
	"ERROR",
	"ERROR_P",
	"EMPTY",
	"EMPTY_P",
	"OBJECT_P",
	"WRAPPER",
	"CONDITIONAL",
	"UNCONDITIONAL",
	"QUOTES",
	"OMIT",
	"KEEP",
	"SCALAR",
	"STRING_P",
	"ENCODING",
	"DELIMITER",
	"DELIMITERS",
	"HEADER_P",
	"QUOTE",
	"FORCE",
	"CSV",
	"VALUE_P",
	"JSON_QUERY",
	"JSON_VALUE",
	"JSON_SERIALIZE",
	"JSON_OBJECT",
	"JSON_ARRAY",
	"JSON_OBJECTAGG",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_SCALAR",
	"FORMAT",
	"JSON",
	"UTF8",
	"WITHOUT",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"ABORT_P",
	"ABSENT",
	"ABSOLUTE_P",
	"ACCESS",
	"ACTION",
	"ADD_P",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALSO",
	"ALWAYS",
	"ANALYSE",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"BACKWARD",
	"BEFORE",
	"BEGIN_P",
	"CACHE",
	"CALL",
	"CALLED",
	"CASCADED",
	"CATALOG_P",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATION",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPRESSION",
	"CONFIGURATION",
	"CONNECTION",
	"CONSTRAINTS",
	"CONTENT_P",
	"CONTINUE_P",
	"CONVERSION_P",
	"COST",
	"CUBE",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"DATA_P",
	"DATABASE",
	"DAY_P",
	"DEALLOCATE",
	"DECLARE",
	"DEFAULTS",
	"DEFERRABLE",
	"DEFERRED",
	"DEFINER",
	"DEPENDS",
	"DETACH",
	"DICTIONARY",
	"DISABLE_P",
	"DISCARD",
	"DOCUMENT_P",
	"DOMAIN_P",
	"EACH",
	"ELSE",
	"ENABLE_P",
	"ENCRYPTED",
	"END_P",
	"ENUM_P",
	"EVENT",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXCLUSIVE",
	"EXECUTE",
	"EXPLAIN",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"EXTRACT",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FINALIZE",
	"FOLLOWING",
	"FOREIGN",
	"FORWARD",
	"FUNCTION",
	"FUNCTIONS",
	"GENERATED",
	"GLOBAL",
	"GRANT",
	"GRANTED",
	"GREATEST",
	"GROUPING",
	"GROUPS",
	"HANDLER",
	"HOLD",
	"HOUR_P",
	"IDENTITY_P",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT_P",
	"IMPORT_P",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INDEX",
	"INDEXES",
	"INHERIT",
	"INHERITS",
	"INITIALLY",
	"INLINE_P",
	"INPUT_P",
	"INSENSITIVE",
	"INSTEAD",
	"INTERSECT",
	"INVOKER",
	"ISOLATION",
	"KEYS",
	"LABEL",
	"LANGUAGE",
	"LARGE_P",
	"LATERAL_P",
	"LEAKPROOF",
	"LEAST",
	"LEADING",
	"LEVEL",
	"LISTEN",
	"LOAD",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCATION",
	"LOCK_P",
	"LOCKED",
	"LOGGED",
	"MAPPING",
	"MATCH",
	"MAXVALUE",
	"MERGE_ACTION",
	"METHOD",
	"MINUTE_P",
	"MINVALUE",
	"MODE",
	"MONTH_P",
	"MOVE",
	"NAME_P",
	"NAMES",
	"NEW",
	"NEXT",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NO",
	"NONE",
	"NORMALIZE",
	"NORMALIZED",
	"NOTIFY",
	"NOWAIT",
	"NULLIF",
	"OUT_P",
	"OVERLAY",
	"OVERLAPS",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PARSER",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECEDING",
	"PREPARE",
	"PREPARED",
	"PRESERVE",
	"PRIMARY",
	"PRIOR",
	"PRIVILEGES",
	"PROCEDURAL",
	"PROCEDURE",
	"PROCEDURES",
	"PUBLICATION",
	"RANGE",
	"READ",
	"REASSIGN",
	"RECHECK",
	"REFERENCES",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE_P",
	"RELEASE",
	"RENAME",
	"REPEATABLE",
	"REPLICA",
	"RESET",
	"RESTART",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLE",
	"ROLLBACK",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"RULE",
	"SAVEPOINT",
	"SCHEMA",
	"SCHEMAS",
	"SCROLL",
	"SECOND_P",
	"SECURITY",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSION_USER",
	"SETS",
	"SETOF",
	"SHARE",
	"SHOW",
	"SIMPLE",
	"SKIP",
	"SNAPSHOT",
	"SOME",
	"SQL_P",
	"STABLE",
	"STANDALONE_P",
	"START",
	"STATEMENT",
	"STATISTICS",
	"STORAGE",
	"STORED",
	"STRICT_P",
	"STRIP_P",
	"SUBSCRIPTION",
	"SUBSTRING",
	"SUPPORT",
	"SYSID",
	"SYSTEM_USER",
	"TABLES",
	"TABLESPACE",
	"TABLESAMPLE",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TEXT_P",
	"TIES",
	"TRAILING",
	"TRANSACTION",
	"TRANSFORM",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUNCATE",
	"TRUSTED",
	"TYPE_P",
	"TYPES_P",
	"UESCAPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNENCRYPTED",
	"UNION",
	"UNIQUE",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VERSION_P",
	"VIEW",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE_P",
	"WINDOW",
	"WITHIN",
	"WORK",
	"WRITE",
	"XML_P",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"YEAR_P",
	"YES_P",
	"INOUT",
	"OTHERS",
	"OLD",
	"KEY",
	"OFF",
	"OIDS",
	"OPTION",
	"OPTIONS",
	"OVER",
	"ORDER",
	"ANY",
	"BOTH",
	"CAST",
	"CHECK",
	"COLUMN",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"'<'",
	"'>'",
	"'='",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"';'",
	"','",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:10549

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 61,
	541, 61,
	-2, 1383,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 65,
	67, 1690,
	84, 1690,
	85, 2327,
	237, 2512,
	308, 1857,
	420, 1690,
	481, 1690,
	-2, 74,
	-1, 80,
	1, 61,
	541, 61,
	-2, 1383,
	-1, 116,
	85, 2326,
	-2, 1689,
	-1, 189,
	61, 279,
	64, 279,
	528, 279,
	534, 279,
	-2, 2370,
	-1, 638,
	84, 1690,
	481, 1690,
	-2, 73,
	-1, 640,
	210, 62,
	-2, 2333,
	-1, 707,
	16, 1246,
	17, 1246,
	532, 1246,
	-2, 80,
	-1, 708,
	16, 1247,
	17, 1247,
	532, 1247,
	-2, 81,
	-1, 1039,
	6, 1786,
	12, 1786,
	535, 1786,
	536, 1786,
	-2, 1779,
	-1, 1230,
	21, 1220,
	433, 1220,
	511, 1220,
	-2, 821,
	-1, 1232,
	21, 1222,
	433, 1222,
	511, 1222,
	-2, 768,
	-1, 1237,
	1, 637,
	26, 637,
	36, 637,
	64, 637,
	65, 637,
	71, 637,
	72, 637,
	73, 637,
	74, 637,
	101, 637,
	510, 637,
	533, 637,
	541, 637,
	542, 637,
	-2, 1317,
	-1, 1242,
	21, 1297,
	433, 1297,
	511, 1297,
	-2, 1293,
	-1, 1709,
	532, 1183,
	-2, 1169,
	-1, 1878,
	118, 74,
	308, 1857,
	461, 74,
	-2, 1690,
	-1, 1927,
	537, 95,
	-2, 2196,
	-1, 1953,
	532, 1859,
	-2, 203,
	-1, 2160,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1072,
	-1, 2161,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1073,
	-1, 2162,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1074,
	-1, 2163,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1075,
	-1, 2164,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1076,
	-1, 2165,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1077,
	-1, 2169,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1084,
	-1, 2175,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1088,
	-1, 2220,
	364, 1210,
	-2, 1213,
	-1, 2234,
	532, 1182,
	-2, 1250,
	-1, 2338,
	40, 1254,
	510, 1254,
	528, 1254,
	533, 1254,
	542, 1254,
	-2, 1250,
	-1, 2368,
	210, 62,
	-2, 2333,
	-1, 2427,
	537, 96,
	-2, 2196,
	-1, 2530,
	508, 2273,
	-2, 2266,
	-1, 2642,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1086,
	-1, 2643,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1090,
	-1, 2649,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1092,
	-1, 2689,
	364, 1209,
	-2, 1212,
	-1, 2753,
	532, 1183,
	-2, 96,
	-1, 2759,
	151, 1622,
	-2, 1557,
	-1, 2943,
	6, 1786,
	12, 1786,
	535, 1786,
	536, 1786,
	-2, 1760,
	-1, 3053,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1085,
	-1, 3056,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1094,
	-1, 3059,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1089,
	-1, 3064,
	52, 0,
	53, 0,
	54, 0,
	-2, 1107,
	-1, 3088,
	21, 1219,
	433, 1219,
	511, 1219,
	-2, 1294,
	-1, 3092,
	364, 1211,
	-2, 1214,
	-1, 3388,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1087,
	-1, 3389,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1091,
	-1, 3393,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1093,
	-1, 3394,
	52, 0,
	53, 0,
	54, 0,
	-2, 1108,
	-1, 3397,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1109,
	-1, 3405,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1137,
	-1, 3406,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1138,
	-1, 3407,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1139,
	-1, 3408,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1140,
	-1, 3409,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1141,
	-1, 3410,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1142,
	-1, 3414,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1111,
	-1, 3488,
	541, 61,
	-2, 1383,
	-1, 3627,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1095,
	-1, 3628,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1110,
	-1, 3629,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1112,
	-1, 4271,
	7, 1507,
	-2, 280,
}

const yyPrivate = 57344

const yyLast = 69557

var yyAct = [...]int16{
	613, 4268, 2498, 4327, 4374, 4393, 4328, 4358, 2637, 4316,
	4145, 4339, 3529, 877, 2248, 3451, 4269, 4055, 3427, 3853,
	679, 3912, 4315, 4140, 4044, 3931, 1829, 2251, 2296, 3446,
	4130, 1178, 3477, 3239, 4037, 1694, 3960, 2635, 3700, 3347,
	3854, 4181, 3828, 4107, 3802, 2274, 644, 3827, 3750, 3426,
	2143, 3938, 2887, 1027, 3563, 3892, 2870, 3932, 2913, 1851,
	2927, 901, 3153, 3746, 2779, 3681, 948, 3933, 2377, 3562,
	192, 192, 737, 3657, 3986, 1244, 603, 3983, 3774, 2264,
	3654, 2624, 2764, 603, 2303, 2873, 3729, 603, 1964, 61,
	2493, 986, 2450, 640, 643, 648, 643, 3444, 643, 2233,
	3484, 2369, 2748, 3353, 3010, 3149, 2851, 3219, 643, 2599,
	2847, 3348, 3243, 3782, 3688, 3289, 3357, 3664, 2780, 3454,
	603, 603, 603, 603, 926, 4, 706, 643, 643, 3157,
	643, 706, 2326, 60, 1877, 18, 706, 3458, 706, 1724,
	2291, 2709, 1876, 17, 776, 2266, 595, 72, 643, 1187,
	643, 3435, 2416, 643, 3008, 892, 1875, 12, 2286, 2465,
	1698, 2575, 2833, 593, 2353, 1874, 11, 946, 2289, 3385,
	647, 2696, 2921, 2734, 2492, 3212, 3658, 1014, 2942, 2231,
	3273, 192, 192, 1898, 2417, 2265, 2905, 704, 2356, 2378,
	2288, 2357, 738, 2344, 2329, 2358, 1912, 738, 2333, 738,
	966, 1904, 1850, 1831, 863, 1908, 1128, 3127, 754, 906,
	756, 2252, 2726, 60, 622, 18, 2661, 835, 4141, 1138,
	2497, 600, 2032, 17, 741, 3049, 2395, 72, 619, 1059,
	2810, 1704, 1183, 1948, 2446, 1937, 934, 12, 1924, 914,
	973, 2343, 183, 2331, 1884, 2269, 11, 5, 2305, 602,
	2755, 2273, 2272, 2271, 1830, 1696, 2222, 1804, 2227, 2185,
	1054, 2262, 2186, 2192, 2850, 690, 1177, 2195, 1207, 833,
	2394, 773, 703, 2393, 993, 739, 995, 88, 2281, 2146,
	90, 873, 1717, 864, 780, 153, 1143, 152, 611, 783,
	1209, 111, 1175, 1905, 1857, 1052, 171, 1923, 71, 590,
	4424, 839, 609, 639, 618, 1118, 2238, 2819, 3771, 4300,
	1242, 4415, 4413, 1212, 4347, 1118, 1119, 1224, 1225, 1226,
	4348, 4300, 992, 4348, 1118, 4326, 1119, 4266, 1242, 1814,
	2818, 1212, 1815, 623, 4006, 1119, 1820, 4324, 1812, 2820,
	4308, 740, 988, 1817, 1821, 1816, 1810, 1818, 4299, 1810,
	4265, 1819, 1235, 1236, 1813, 4282, 1812, 4300, 4275, 3390,
	4262, 1822, 4121, 132, 4283, 4245, 4211, 2714, 681, 3994,
	988, 592, 1813, 4210, 3639, 1810, 3981, 1210, 4198, 1822,
	4160, 614, 1810, 1194, 4154, 1184, 846, 2284, 4127, 4161,
	2638, 900, 2737, 4155, 4115, 1842, 4114, 2859, 4112, 4092,
	4091, 4088, 4086, 4113, 4005, 4113, 2257, 4113, 1810, 1810,
	4089, 4087, 709, 4006, 1242, 852, 4003, 1212, 3906, 1196,
	763, 764, 1199, 851, 3891, 1121, 3880, 3639, 1198, 3862,
	3849, 3806, 3600, 3890, 3804, 3881, 4250, 1197, 3861, 1121,
	1820, 816, 1812, 3755, 2896, 952, 3745, 1817, 1821, 1816,
	3735, 1818, 3756, 1200, 3717, 2284, 2147, 4249, 1813, 2820,
	3648, 3647, 642, 3716, 663, 1822, 665, 3638, 3068, 3649,
	1121, 3631, 3078, 3079, 3080, 2284, 3639, 3863, 3617, 3559,
	1810, 3071, 3072, 3073, 3074, 3558, 904, 3618, 3560, 4224,
	3557, 3551, 3499, 3469, 2284, 733, 734, 3416, 736, 2284,
	2284, 2820, 3470, 3166, 3086, 3039, 1810, 2724, 2966, 4011,
	2953, 2822, 2284, 1810, 1810, 2801, 767, 2967, 770, 2954,
	2823, 774, 2719, 838, 2802, 2713, 2704, 2689, 2687, 2685,
	2684, 2720, 3994, 2612, 2714, 1810, 1810, 1810, 3360, 3619,
	2686, 1810, 1810, 2371, 748, 1217, 1218, 1219, 1220, 3604,
	2285, 3449, 2372, 2244, 1211, 2240, 1811, 748, 748, 2284,
	1242, 3411, 1121, 1212, 1810, 1810, 1935, 3222, 3176, 3175,
	3102, 3091, 2859, 2762, 2697, 2424, 2212, 2141, 2136, 912,
	608, 3910, 899, 1130, 80, 1881, 3074, 1881, 1812, 836,
	3186, 3060, 3494, 1130, 1220, 951, 2955, 891, 891, 1130,
	3564, 1881, 2956, 748, 1813, 603, 900, 1881, 908, 908,
	927, 1822, 907, 907, 77, 951, 891, 1890, 603, 956,
	921, 603, 603, 843, 4353, 4202, 603, 603, 4193, 603,
	3163, 706, 706, 1212, 2577, 706, 908, 1845, 3998, 861,
	907, 74, 1139, 1140, 3993, 75, 643, 643, 3992, 3991,
	3951, 1139, 1140, 4148, 1242, 1141, 3230, 1212, 1812, 3839,
	837, 1224, 1225, 1226, 1137, 79, 3823, 3759, 77, 3752,
	3736, 603, 1827, 3068, 1813, 3707, 3622, 3984, 1242, 1184,
	1820, 1212, 1812, 3424, 3422, 900, 643, 1817, 1821, 1816,
	3421, 1818, 936, 937, 3420, 74, 940, 3221, 1813, 75,
	4149, 603, 603, 3137, 3097, 1822, 1812, 3112, 3088, 3055,
	2909, 2878, 2447, 2858, 2817, 2761, 4146, 2865, 2695, 79,
	2688, 2619, 1813, 2617, 2614, 2613, 2239, 2019, 925, 1822,
	2205, 2057, 1902, 958, 1705, 1825, 73, 87, 1891, 861,
	860, 4414, 964, 4389, 1706, 4385, 1242, 927, 4285, 1212,
	4257, 643, 643, 1224, 1225, 1226, 1026, 1242, 4230, 4223,
	1212, 4170, 4120, 3939, 4085, 1814, 619, 619, 1815, 4060,
	4057, 3997, 1820, 3996, 1812, 2284, 916, 1959, 1965, 1817,
	1821, 1816, 3969, 1818, 1212, 1812, 2897, 1819, 1235, 1236,
	1813, 1212, 3965, 841, 2765, 3896, 840, 1822, 2284, 3852,
	3107, 1813, 902, 1962, 3820, 3819, 3818, 3796, 1822, 1812,
	2284, 3780, 1167, 2749, 1705, 3779, 1231, 3229, 2142, 643,
	3778, 3769, 3766, 1116, 3360, 1221, 1222, 1223, 3460, 3643,
	2144, 2145, 4247, 1125, 1215, 1216, 1217, 1218, 1219, 1220,
	3480, 3464, 1121, 3448, 1191, 3440, 1211, 1048, 1121, 2803,
	2206, 3359, 1215, 1216, 1217, 1218, 1219, 1220, 3262, 891,
	3225, 3046, 3209, 3201, 905, 3198, 3580, 2257, 3171, 891,
	891, 891, 891, 891, 950, 953, 2424, 3139, 3164, 3360,
	891, 1889, 3360, 3068, 1201, 1846, 3132, 3078, 3079, 3080,
	3084, 3034, 859, 1901, 592, 2932, 2931, 2926, 915, 891,
	2752, 3068, 3753, 2751, 2707, 3078, 3079, 3080, 2679, 891,
	1719, 603, 891, 913, 1185, 1186, 943, 3392, 2677, 984,
	1231, 1833, 2897, 1834, 2824, 923, 924, 1242, 1843, 2197,
	1212, 2596, 603, 942, 2257, 1856, 1081, 2543, 1215, 1216,
	1217, 1218, 1219, 1220, 1960, 2444, 953, 2380, 1179, 1179,
	2298, 1195, 2203, 615, 1719, 1812, 1885, 648, 3054, 894,
	643, 643, 643, 643, 73, 643, 2120, 1984, 1867, 593,
	1858, 1813, 1715, 1713, 1708, 1707, 1706, 1145, 1822, 603,
	3075, 3076, 3077, 603, 1130, 1132, 3118, 1053, 1927, 3069,
	3070, 3071, 3072, 3073, 3074, 911, 684, 1188, 1188, 1946,
	1188, 2373, 2258, 1888, 1134, 1135, 1136, 603, 967, 643,
	1139, 1140, 2636, 4341, 954, 955, 1018, 603, 3904, 1024,
	1129, 1042, 1957, 603, 2973, 3339, 1142, 3903, 3334, 3607,
	591, 3068, 647, 3712, 1065, 3078, 3079, 3080, 2034, 3162,
	3509, 2034, 603, 1955, 1936, 603, 1844, 3391, 2983, 2841,
	2525, 1168, 1080, 2521, 991, 1848, 2837, 852, 1963, 2007,
	1809, 649, 2871, 3705, 1162, 1165, 852, 852, 660, 661,
	662, 603, 1806, 1015, 4053, 1927, 1927, 1927, 3034, 4109,
	1992, 2975, 1961, 4052, 1215, 1216, 1217, 1218, 1219, 1220,
	1153, 908, 3902, 603, 603, 907, 854, 78, 1146, 1147,
	1981, 1938, 1150, 2201, 643, 643, 643, 643, 643, 957,
	73, 963, 2634, 4342, 3731, 1716, 643, 643, 3895, 1068,
	1069, 2461, 3068, 3925, 643, 2031, 3078, 3079, 3080, 2578,
	2579, 891, 1079, 3539, 3208, 1189, 1171, 1997, 3085, 1945,
	1965, 2000, 2001, 1701, 2449, 4147, 2448, 845, 847, 849,
	853, 78, 1709, 85, 1215, 1216, 1217, 1218, 1219, 1220,
	1231, 2929, 1985, 603, 1826, 3111, 1824, 1942, 3068, 1221,
	1222, 1223, 3078, 3079, 3080, 2363, 978, 1871, 1215, 1216,
	1217, 1218, 1219, 1220, 3067, 953, 1188, 774, 2073, 2074,
	1188, 1188, 3711, 1714, 3069, 3070, 3071, 3072, 3073, 3074,
	931, 1807, 1215, 1216, 1217, 1218, 1219, 1220, 1185, 1186,
	953, 603, 891, 1082, 643, 827, 891, 891, 891, 891,
	891, 891, 891, 891, 891, 891, 891, 891, 891, 891,
	891, 891, 1859, 891, 1882, 1954, 1956, 1928, 1854, 2004,
	2005, 1015, 953, 2202, 820, 748, 1886, 700, 1082, 2391,
	2875, 3742, 1231, 3552, 748, 748, 3066, 3065, 2052, 1029,
	842, 1221, 1222, 1223, 1716, 2107, 843, 3300, 3732, 2628,
	1215, 1216, 1217, 1218, 1219, 1220, 2028, 3725, 1060, 2008,
	633, 1215, 1216, 1217, 1218, 1219, 1220, 1872, 2115, 2390,
	2935, 2114, 3724, 2116, 2345, 2347, 2346, 2119, 2843, 3493,
	3310, 2121, 3177, 2071, 625, 1215, 1216, 1217, 1218, 1219,
	1220, 2396, 1215, 1216, 1217, 1218, 1219, 1220, 1909, 1996,
	1723, 627, 625, 1917, 1928, 1928, 1928, 1031, 1892, 1893,
	1894, 1895, 1242, 1896, 114, 1212, 2113, 2804, 974, 627,
	91, 2137, 2139, 2857, 1919, 1061, 939, 3540, 2130, 825,
	1968, 2474, 1974, 1973, 762, 675, 633, 2936, 748, 3530,
	1812, 2127, 634, 2648, 1723, 114, 1723, 689, 2010, 688,
	2397, 2014, 2046, 2047, 2048, 3741, 1813, 1978, 867, 4106,
	687, 2472, 686, 1822, 2396, 2131, 4069, 2105, 2422, 748,
	77, 2839, 3978, 3977, 748, 3075, 3076, 3077, 2099, 2473,
	2089, 1972, 2842, 2460, 3069, 3070, 3071, 3072, 3073, 3074,
	3591, 3327, 2112, 3075, 3076, 3077, 2924, 74, 4188, 1939,
	3324, 75, 3069, 3070, 3071, 3072, 3073, 3074, 1029, 2471,
	1952, 2524, 1990, 2876, 1931, 2122, 2123, 2124, 2339, 1909,
	1939, 79, 3349, 2397, 1986, 2922, 839, 3312, 1062, 630,
	1030, 1215, 1216, 1217, 1218, 1219, 1220, 3115, 3020, 2076,
	2938, 4323, 1161, 4322, 4062, 3738, 3737, 3274, 834, 4191,
	4082, 3935, 2077, 2078, 2079, 2080, 2081, 3553, 1939, 1939,
	3758, 2838, 1939, 3297, 774, 2106, 3527, 2528, 1159, 3710,
	4063, 968, 2109, 3318, 2398, 2149, 1031, 1909, 1939, 3521,
	3452, 4110, 1939, 3382, 1939, 2903, 2133, 1939, 2627, 2622,
	748, 2965, 3301, 1939, 2572, 2200, 2134, 2404, 2962, 2961,
	2045, 2033, 2790, 2840, 2033, 3299, 4248, 1951, 2781, 3918,
	2056, 2836, 2483, 1983, 3309, 3361, 1099, 2062, 2135, 2835,
	2841, 3003, 1032, 3075, 3076, 3077, 2569, 2837, 631, 1969,
	2553, 3006, 3069, 3070, 3071, 3072, 3073, 3074, 1172, 66,
	1971, 1970, 3698, 65, 67, 2584, 115, 2398, 748, 2583,
	1102, 2582, 1033, 77, 1870, 1034, 657, 658, 659, 1035,
	2581, 1110, 2151, 2566, 2565, 651, 652, 653, 654, 655,
	656, 1852, 2068, 2199, 782, 782, 3496, 115, 2067, 1158,
	74, 1036, 1107, 962, 75, 2038, 1096, 1095, 1078, 1967,
	1242, 1077, 1072, 1212, 1066, 1064, 1057, 1950, 2832, 1030,
	1056, 635, 1055, 632, 79, 1051, 637, 3785, 1105, 960,
	1088, 69, 839, 1076, 3075, 3076, 3077, 4108, 1812, 1039,
	2388, 2641, 2629, 3069, 3070, 3071, 3072, 3073, 3074, 64,
	1058, 151, 2430, 1723, 1813, 2061, 1037, 628, 2060, 1949,
	2348, 1822, 2306, 2059, 3240, 2937, 2943, 3350, 838, 3155,
	2319, 4157, 1988, 1038, 1941, 3302, 2922, 1940, 981, 1029,
	3075, 3076, 3077, 1160, 1693, 3336, 2809, 3803, 2979, 3069,
	3070, 3071, 3072, 3073, 3074, 3062, 2660, 1084, 2976, 632,
	1074, 3043, 3930, 3280, 4184, 2389, 891, 891, 648, 891,
	1040, 1032, 2003, 2462, 891, 4183, 891, 824, 626, 2782,
	678, 3005, 3751, 819, 673, 2963, 3280, 1916, 113, 1063,
	112, 2490, 2065, 2325, 836, 2481, 626, 2476, 1205, 1104,
	959, 1033, 1170, 4158, 1034, 2568, 2793, 1031, 1035, 1993,
	944, 1109, 3380, 2844, 2218, 2360, 1869, 826, 749, 113,
	1852, 112, 3936, 3241, 3396, 3395, 856, 2321, 1965, 3689,
	1036, 1015, 3690, 3719, 4185, 3691, 3179, 1862, 3492, 117,
	3504, 944, 3150, 647, 4070, 2791, 3466, 1977, 3556, 2843,
	1861, 2415, 853, 3692, 1169, 3928, 2964, 4056, 2928, 629,
	1087, 853, 853, 1075, 1193, 837, 3783, 3555, 1039, 3044,
	3974, 891, 2845, 643, 3958, 891, 891, 891, 891, 3465,
	3351, 1982, 3937, 1106, 961, 1037, 4065, 2253, 2895, 2255,
	3694, 2826, 1993, 1833, 3307, 3215, 1085, 2278, 2278, 3180,
	3693, 1098, 1038, 2943, 1100, 1946, 643, 834, 2792, 4371,
	3695, 4370, 3354, 3554, 838, 2311, 1215, 1216, 1217, 1218,
	1219, 1220, 1090, 3294, 4067, 3526, 2213, 2217, 1089, 2219,
	1030, 603, 2025, 78, 3919, 1101, 2236, 2320, 2402, 1040,
	2368, 3216, 2839, 4066, 1719, 3541, 73, 935, 2551, 750,
	2379, 3942, 2890, 2842, 1863, 1977, 3533, 4321, 643, 4059,
	4176, 3094, 1946, 2223, 3915, 1992, 2210, 1173, 3206, 1204,
	3957, 1716, 822, 3762, 685, 3383, 593, 2316, 2409, 1716,
	836, 2418, 643, 3004, 701, 3281, 603, 670, 2881, 989,
	3274, 4042, 68, 832, 1906, 1203, 832, 2216, 4187, 70,
	2313, 603, 603, 1976, 2341, 1946, 1163, 751, 3281, 1932,
	3373, 3214, 2082, 1108, 2829, 2452, 3337, 2456, 2332, 2980,
	1701, 2307, 1032, 3372, 2318, 945, 2419, 2332, 2466, 2977,
	857, 3173, 2838, 2350, 999, 2204, 4252, 603, 1144, 1000,
	3696, 3697, 1133, 1009, 3282, 3661, 2445, 1148, 1149, 603,
	4366, 837, 1033, 1114, 2235, 1034, 4360, 1994, 1086, 1035,
	3701, 1995, 1083, 643, 643, 1073, 2324, 3282, 179, 4274,
	3264, 1852, 3641, 603, 2840, 2423, 3462, 603, 3867, 2712,
	2662, 1036, 3877, 2280, 2086, 4159, 3859, 3283, 2085, 891,
	4423, 4422, 2414, 4419, 1091, 4182, 2260, 4418, 3878, 2408,
	2364, 70, 2053, 4396, 2342, 2058, 1002, 2084, 4395, 3860,
	3283, 1976, 2428, 2429, 2330, 4411, 78, 4401, 2317, 1039,
	2399, 4376, 4375, 4402, 1111, 4410, 2516, 2665, 4398, 73,
	4397, 2425, 2666, 4356, 2314, 1008, 1037, 3355, 4357, 2667,
	1994, 2312, 3948, 3213, 1995, 2322, 3231, 1157, 2664, 2261,
	643, 706, 821, 1038, 706, 648, 706, 706, 2308, 1050,
	2083, 2915, 970, 3984, 702, 2509, 1013, 669, 3295, 2256,
	2453, 2512, 2513, 2440, 3205, 2889, 2692, 4417, 2283, 4416,
	4399, 891, 2315, 990, 2309, 4426, 4400, 643, 3727, 4359,
	1040, 3296, 4373, 3702, 1215, 1216, 1217, 1218, 1219, 1220,
	3532, 2602, 891, 3265, 3876, 2917, 1156, 988, 2278, 998,
	977, 2562, 704, 2663, 1188, 738, 2365, 738, 738, 2366,
	1188, 1188, 2527, 1113, 2370, 3490, 2598, 4380, 2603, 2604,
	647, 891, 891, 4379, 4381, 4382, 1003, 891, 4378, 2893,
	2884, 2151, 2788, 2367, 4377, 2623, 2605, 2374, 2427, 828,
	830, 1934, 2914, 891, 891, 1097, 941, 3447, 891, 4014,
	4342, 4304, 2561, 4233, 648, 2563, 2564, 891, 4232, 4365,
	4338, 1005, 2433, 891, 2293, 4136, 3138, 1004, 2633, 4405,
	4267, 4138, 3652, 3677, 891, 3524, 2576, 2639, 3673, 891,
	891, 891, 1188, 3476, 4131, 3120, 2815, 2400, 870, 891,
	2349, 1174, 987, 1179, 2703, 4329, 2294, 2522, 4334, 1155,
	2678, 2526, 4332, 976, 4333, 4335, 1979, 2023, 1833, 891,
	2500, 4133, 1006, 3428, 891, 2035, 2386, 2736, 2736, 706,
	4132, 2278, 2736, 2736, 2736, 2026, 1958, 4134, 2488, 647,
	2282, 2618, 846, 4144, 2025, 2760, 4142, 593, 2530, 3636,
	2421, 2529, 1188, 603, 1723, 603, 603, 3670, 3671, 1843,
	603, 603, 3637, 3425, 4020, 4021, 4024, 1007, 2499, 3870,
	4364, 2351, 2505, 2547, 2024, 3868, 4019, 2487, 1010, 4023,
	3668, 2489, 2484, 643, 3871, 2797, 192, 4149, 1723, 2514,
	3679, 3672, 2519, 3675, 3676, 3678, 3674, 2381, 2382, 2383,
	2384, 2385, 4331, 4307, 4336, 2570, 2571, 4150, 4151, 2486,
	2711, 2993, 4076, 1012, 1011, 2249, 2250, 3248, 2675, 4135,
	593, 852, 2027, 2595, 603, 3457, 2710, 2680, 4075, 2668,
	2674, 2510, 2511, 4143, 3844, 1885, 4075, 4076, 1723, 2944,
	1868, 81, 82, 83, 84, 2580, 2769, 1880, 920, 2757,
	2758, 2144, 2145, 748, 4001, 3667, 4000, 1723, 2621, 3249,
	2626, 603, 603, 2630, 2721, 3635, 2812, 2632, 2698, 3841,
	2631, 3047, 3048, 3843, 3842, 2710, 823, 769, 664, 2279,
	2279, 891, 4149, 2708, 4229, 1927, 3269, 2794, 2795, 2254,
	1001, 2805, 2243, 3250, 3251, 3252, 674, 2645, 2657, 2891,
	178, 2658, 2647, 4263, 74, 891, 2772, 1695, 75, 2633,
	748, 4372, 2888, 3747, 2178, 3976, 2744, 2451, 2594, 3009,
	1015, 3516, 3377, 2951, 2182, 4264, 2180, 2682, 79, 3376,
	2177, 2210, 2179, 2181, 3148, 2040, 1188, 1188, 2691, 2039,
	1887, 1837, 748, 748, 2877, 1836, 2242, 2827, 2699, 2700,
	3128, 3438, 2814, 3, 3123, 774, 2705, 3122, 2447, 4425,
	2814, 2777, 4409, 2279, 4408, 4407, 4354, 1117, 3893, 2715,
	3934, 4074, 2717, 2849, 2900, 2945, 2743, 4072, 2716, 3481,
	2741, 2740, 2739, 3126, 2732, 2730, 2731, 2729, 3257, 1188,
	2806, 2808, 852, 3191, 2759, 3172, 2830, 2789, 2610, 2753,
	2786, 2813, 2554, 2300, 891, 2247, 1966, 1920, 1915, 748,
	2902, 1123, 2904, 2783, 1093, 603, 2727, 2732, 2730, 2731,
	2729, 1092, 2725, 2728, 2111, 1070, 782, 982, 2798, 903,
	1992, 2654, 2848, 2652, 616, 2908, 2807, 2650, 1210, 2651,
	2653, 621, 617, 3386, 3050, 2968, 2969, 185, 4207, 4123,
	2191, 782, 2816, 2869, 4122, 4025, 3857, 3592, 3468, 3387,
	2638, 643, 643, 3328, 3325, 3001, 3192, 2821, 2002, 1999,
	858, 643, 2906, 2263, 852, 852, 2907, 2846, 4288, 3734,
	3542, 2872, 2867, 2868, 3437, 2727, 2732, 2730, 2731, 2729,
	2941, 2725, 2728, 3436, 3543, 3502, 3061, 1716, 3501, 891,
	2750, 891, 891, 3544, 2882, 891, 891, 891, 2659, 891,
	2147, 2150, 620, 3013, 2885, 3014, 3015, 4287, 582, 2733,
	891, 2899, 3545, 2901, 2745, 2746, 2747, 4196, 3811, 3808,
	3045, 891, 891, 891, 1928, 2916, 1841, 2923, 891, 1840,
	891, 3610, 2934, 2930, 2183, 3587, 3582, 3581, 3346, 3345,
	3338, 2796, 3333, 891, 2770, 3246, 3026, 2191, 891, 3025,
	3024, 3023, 891, 891, 3022, 3021, 3017, 2995, 3016, 3007,
	2996, 891, 2994, 2982, 2981, 2253, 2978, 2970, 2912, 2911,
	748, 1833, 2910, 2646, 2194, 2278, 2644, 2592, 2278, 2567,
	2279, 2548, 2193, 2194, 2137, 2139, 3131, 2974, 2176, 2736,
	2736, 2736, 2736, 2736, 2075, 2072, 2070, 2069, 2055, 2051,
	2050, 2049, 891, 891, 2044, 891, 2984, 2872, 2043, 2037,
	2036, 2022, 593, 1946, 2021, 2999, 3160, 593, 2020, 2018,
	1991, 1987, 1980, 1838, 2187, 2188, 2189, 2190, 2152, 2118,
	2153, 2184, 2640, 891, 2616, 1723, 2615, 855, 844, 2117,
	3913, 2655, 2754, 2727, 2732, 2730, 2731, 2729, 2223, 2725,
	2728, 2173, 748, 748, 891, 891, 4254, 4220, 2171, 2174,
	2170, 2681, 2172, 4253, 603, 846, 1843, 852, 4032, 3206,
	3571, 3567, 3057, 3058, 3487, 3029, 3178, 2776, 2544, 3042,
	2541, 2537, 2864, 3083, 3037, 3534, 643, 3038, 2426, 2013,
	3089, 1023, 891, 603, 1168, 1017, 2987, 3081, 3082, 3161,
	2992, 2279, 2029, 2279, 2209, 2054, 3200, 194, 3117, 3170,
	2379, 2028, 893, 846, 2208, 3168, 643, 4325, 900, 3625,
	3100, 3101, 3103, 598, 3207, 3063, 3515, 3099, 846, 118,
	3564, 2187, 2188, 2189, 2190, 3220, 4351, 603, 2656, 3626,
	4350, 3244, 2210, 599, 2432, 3011, 2297, 2278, 2418, 896,
	2633, 3478, 2332, 897, 3259, 895, 3159, 1723, 1723, 1723,
	3121, 850, 3199, 3124, 988, 3109, 3237, 2625, 3093, 1946,
	2332, 2332, 3108, 3275, 3119, 2210, 3116, 1843, 3923, 3106,
	1843, 3922, 1843, 3291, 3358, 3197, 3561, 1118, 3129, 3130,
	3233, 3125, 3472, 2419, 638, 3665, 1695, 3313, 1119, 3028,
	2919, 3290, 2439, 3151, 2407, 623, 3145, 2466, 2301, 3317,
	3113, 3114, 3228, 1716, 2849, 1909, 748, 3235, 1911, 3031,
	3032, 3142, 1903, 1853, 3167, 1847, 3254, 985, 3292, 3036,
	1188, 3253, 975, 708, 3227, 969, 3194, 965, 708, 746,
	3298, 3286, 947, 708, 3795, 708, 3794, 3181, 2330, 3374,
	3263, 3271, 746, 746, 3184, 748, 3185, 2998, 3189, 3193,
	2948, 2137, 2139, 808, 808, 3195, 3165, 2113, 3210, 2946,
	2918, 2886, 2773, 2848, 2405, 3303, 3306, 2401, 2299, 2295,
	2128, 2633, 2126, 2016, 2012, 1921, 748, 1907, 1899, 1897,
	1879, 1152, 3187, 1127, 2587, 1124, 2590, 648, 746, 3218,
	1120, 1115, 1103, 3224, 1071, 891, 891, 1044, 1041, 1022,
	1016, 891, 891, 3569, 3568, 2589, 3316, 1878, 891, 935,
	891, 891, 891, 891, 891, 891, 891, 891, 891, 891,
	891, 891, 3255, 3236, 3232, 891, 891, 3270, 818, 3258,
	3234, 3261, 891, 3384, 4225, 2849, 853, 891, 4126, 891,
	4079, 4068, 949, 891, 1227, 3226, 3775, 3797, 3713, 3304,
	3651, 1188, 3291, 3572, 3315, 3528, 3514, 3305, 3308, 891,
	3505, 3375, 647, 2278, 2278, 2768, 2412, 2278, 2406, 1164,
	3429, 3133, 3134, 3135, 3136, 1933, 1828, 1808, 2736, 900,
	706, 2140, 3320, 2138, 3311, 2701, 2702, 900, 4363, 900,
	4343, 4194, 846, 3954, 2848, 2410, 1227, 3292, 3196, 2894,
	3914, 1998, 3147, 1946, 643, 1202, 2132, 848, 1192, 3488,
	2576, 3202, 3733, 4174, 3728, 3495, 1188, 3917, 3730, 4061,
	3726, 1860, 3365, 3721, 2784, 3445, 2310, 2787, 2304, 2774,
	2327, 2323, 603, 577, 578, 3479, 184, 3364, 2030, 2355,
	1866, 1865, 1843, 3740, 3204, 3739, 3467, 3503, 3941, 3500,
	891, 3190, 3463, 3352, 2413, 2552, 3245, 3247, 2892, 636,
	3473, 643, 2411, 980, 3335, 1112, 1909, 2066, 3953, 3340,
	1946, 3242, 2591, 2387, 3223, 3482, 2087, 2862, 2861, 38,
	706, 2756, 748, 2756, 37, 3412, 3399, 3400, 3401, 3402,
	3403, 3404, 3405, 3406, 3407, 3408, 3409, 3410, 2418, 36,
	35, 34, 3471, 891, 33, 32, 2785, 853, 31, 58,
	57, 3485, 1946, 56, 55, 3548, 3423, 3441, 3419, 54,
	53, 52, 3099, 51, 1122, 50, 49, 3522, 1126, 48,
	47, 46, 2332, 45, 891, 44, 43, 748, 42, 3510,
	3511, 3531, 41, 2419, 40, 39, 30, 2279, 3433, 3434,
	2279, 3442, 3439, 29, 28, 27, 3520, 26, 25, 24,
	23, 3474, 3278, 22, 1151, 3285, 21, 3287, 20, 3547,
	19, 59, 16, 2852, 1873, 102, 3513, 918, 3550, 1883,
	2863, 2939, 3519, 2920, 3272, 154, 2088, 3461, 1019, 853,
	853, 3536, 4243, 2464, 4043, 3154, 89, 3498, 3929, 2834,
	891, 2831, 3565, 3298, 3279, 3152, 3508, 1723, 3959, 1723,
	3507, 3288, 2431, 3158, 2290, 3156, 2287, 4303, 3450, 4330,
	1723, 4013, 4139, 3865, 3656, 2442, 4129, 891, 3523, 3483,
	3650, 891, 891, 891, 3443, 2376, 76, 3840, 3634, 2241,
	3535, 1835, 63, 597, 596, 3597, 4125, 862, 2940, 3882,
	3537, 4036, 891, 3680, 3459, 3669, 3146, 86, 3576, 3431,
	1839, 3456, 3455, 4022, 4018, 4017, 3110, 2246, 3453, 2259,
	3584, 1823, 15, 3586, 14, 13, 10, 9, 891, 2278,
	3546, 8, 7, 6, 3833, 3831, 3832, 1227, 891, 891,
	891, 3830, 2576, 1206, 708, 708, 2198, 2972, 1188, 650,
	1239, 2694, 2576, 3682, 3573, 603, 2224, 1188, 1188, 3703,
	1712, 3160, 802, 708, 3577, 3570, 801, 603, 786, 2279,
	2279, 3291, 603, 3574, 788, 804, 803, 787, 708, 708,
	1131, 785, 708, 784, 810, 3033, 2214, 886, 885, 2221,
	2690, 1710, 880, 881, 876, 3601, 3602, 3624, 2485, 2950,
	3605, 3606, 2971, 2491, 3975, 2279, 3685, 2588, 1246, 3686,
	1241, 2, 1, 0, 0, 603, 3292, 0, 0, 0,
	3714, 2597, 3475, 0, 3244, 0, 3706, 2606, 0, 0,
	706, 0, 808, 643, 0, 0, 0, 0, 3027, 0,
	0, 0, 853, 0, 0, 0, 0, 0, 3708, 0,
	0, 3291, 648, 0, 643, 643, 3767, 0, 0, 0,
	0, 2669, 2669, 3663, 3666, 3748, 0, 0, 0, 3290,
	0, 3699, 3761, 0, 3790, 3646, 3642, 0, 3011, 3517,
	3743, 3633, 0, 0, 0, 3662, 0, 3506, 0, 3683,
	3704, 738, 648, 706, 0, 0, 3292, 3723, 3788, 0,
	0, 3159, 3773, 0, 3722, 0, 0, 0, 0, 0,
	3776, 60, 0, 18, 3645, 891, 0, 3715, 0, 0,
	3805, 17, 0, 0, 0, 72, 0, 647, 1723, 0,
	3291, 0, 0, 0, 0, 12, 3768, 3845, 3813, 3781,
	706, 0, 3770, 3855, 11, 891, 2633, 0, 3846, 748,
	891, 2125, 0, 0, 738, 0, 891, 3011, 0, 0,
	3011, 3784, 0, 3786, 0, 3815, 3787, 647, 0, 0,
	0, 0, 0, 3798, 3718, 3292, 0, 0, 0, 0,
	746, 3799, 3888, 0, 2279, 3445, 0, 3810, 0, 746,
	746, 0, 3609, 0, 0, 2279, 2279, 0, 3817, 2279,
	0, 3814, 3812, 0, 3883, 0, 708, 0, 0, 0,
	2849, 0, 2279, 0, 3889, 0, 708, 708, 708, 708,
	708, 0, 0, 0, 3856, 603, 1188, 708, 748, 3872,
	3873, 748, 0, 3874, 3875, 0, 0, 3851, 0, 0,
	0, 3850, 0, 3744, 891, 0, 708, 0, 0, 3898,
	0, 0, 0, 0, 0, 1721, 708, 0, 706, 708,
	0, 3900, 2278, 748, 3927, 0, 3764, 3926, 0, 2848,
	891, 891, 0, 0, 2852, 0, 603, 0, 3848, 3884,
	3894, 0, 3901, 0, 3920, 0, 0, 891, 0, 808,
	0, 0, 3909, 746, 0, 0, 808, 3897, 3907, 1721,
	0, 1721, 0, 3899, 3944, 3916, 3485, 3908, 2860, 0,
	3949, 891, 0, 0, 0, 0, 0, 3924, 0, 3952,
	0, 0, 0, 0, 746, 891, 3864, 0, 1188, 746,
	2279, 3970, 1843, 3947, 0, 1833, 3950, 3943, 0, 0,
	0, 3955, 3956, 2379, 3980, 0, 0, 0, 0, 0,
	0, 0, 891, 3972, 0, 3946, 4012, 4015, 0, 0,
	3266, 4002, 0, 1723, 3964, 0, 3966, 1843, 3968, 1843,
	3971, 0, 0, 0, 3682, 0, 0, 808, 0, 3847,
	0, 603, 3985, 3988, 3989, 0, 0, 4045, 0, 0,
	0, 0, 0, 0, 0, 4041, 0, 852, 0, 0,
	0, 3777, 0, 0, 0, 2852, 0, 0, 0, 4038,
	0, 4004, 0, 0, 593, 0, 0, 1227, 1227, 1227,
	1227, 1227, 3791, 3792, 3011, 4010, 1227, 4048, 4054, 4009,
	3962, 3963, 4046, 643, 0, 4039, 0, 4035, 0, 0,
	1227, 0, 0, 4050, 0, 746, 0, 0, 0, 0,
	4051, 3905, 4049, 0, 0, 0, 1843, 0, 0, 0,
	648, 0, 0, 0, 4058, 0, 0, 891, 0, 0,
	0, 0, 0, 808, 4064, 808, 3371, 0, 708, 0,
	0, 4073, 0, 0, 0, 891, 0, 891, 891, 4077,
	4071, 0, 4081, 3961, 0, 748, 4083, 3855, 4099, 0,
	808, 4124, 891, 746, 0, 891, 4098, 0, 0, 0,
	0, 2279, 4100, 0, 2669, 2669, 4102, 0, 4093, 4111,
	4095, 0, 4097, 1843, 0, 3030, 0, 4117, 0, 0,
	0, 0, 1227, 0, 3035, 647, 0, 4128, 891, 2669,
	2669, 0, 4156, 0, 0, 0, 0, 0, 3291, 0,
	0, 891, 0, 2279, 0, 4175, 0, 706, 706, 708,
	808, 0, 0, 708, 708, 708, 708, 708, 708, 708,
	708, 708, 708, 708, 708, 708, 708, 708, 708, 4167,
	708, 4169, 4096, 4172, 0, 748, 0, 0, 1721, 0,
	4162, 4163, 4166, 3292, 4165, 0, 4201, 4171, 0, 0,
	0, 0, 852, 706, 4168, 0, 0, 4090, 4186, 4189,
	0, 891, 4213, 1843, 1843, 0, 4195, 4216, 738, 738,
	3140, 1992, 891, 891, 0, 3489, 891, 195, 4203, 4177,
	4178, 4192, 0, 2279, 1833, 4200, 0, 0, 2253, 4204,
	4205, 0, 0, 0, 4197, 0, 4199, 4118, 4119, 0,
	4217, 4227, 4045, 643, 643, 0, 0, 4222, 4212, 1723,
	4226, 3291, 0, 706, 738, 4228, 0, 0, 4238, 0,
	0, 0, 3518, 4235, 4236, 4208, 4234, 4038, 0, 4244,
	4231, 748, 0, 0, 0, 0, 0, 0, 4242, 0,
	0, 0, 0, 0, 0, 4239, 0, 4046, 643, 0,
	0, 0, 4251, 0, 0, 0, 3292, 0, 0, 0,
	2669, 4241, 2279, 4240, 4270, 891, 4258, 0, 4273, 0,
	0, 891, 2279, 0, 4246, 0, 0, 3999, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4255, 4272, 0,
	0, 4260, 0, 4279, 0, 4281, 0, 0, 891, 0,
	0, 0, 4259, 4284, 0, 4295, 4296, 4297, 3855, 747,
	4286, 0, 4030, 0, 4033, 0, 1723, 4294, 643, 0,
	4280, 0, 747, 747, 3291, 4305, 4306, 4298, 4320, 0,
	4312, 4310, 4277, 0, 1723, 4278, 3217, 0, 4309, 0,
	748, 4270, 4313, 0, 0, 0, 0, 0, 4218, 4219,
	0, 4080, 4221, 4291, 3961, 0, 4179, 4337, 4340, 4293,
	4314, 0, 4344, 0, 4345, 0, 0, 0, 747, 3292,
	891, 0, 3612, 3613, 0, 0, 4311, 0, 0, 4352,
	0, 0, 0, 4346, 0, 0, 0, 0, 0, 0,
	706, 4320, 4361, 4362, 2279, 4349, 0, 0, 4368, 4367,
	0, 4094, 0, 0, 0, 0, 4384, 0, 0, 4383,
	0, 706, 706, 4392, 0, 0, 4388, 4387, 4289, 4290,
	852, 4394, 0, 0, 0, 0, 4270, 4404, 4403, 0,
	0, 4276, 4320, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
	1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 4412,
	4394, 4369, 4406, 0, 1227, 4270, 4420, 0, 4292, 0,
	0, 66, 3684, 4421, 0, 65, 67, 0, 4152, 0,
	0, 0, 738, 738, 0, 77, 0, 0, 0, 0,
	0, 4317, 0, 4390, 4391, 0, 0, 0, 2669, 2669,
	2669, 2669, 2669, 2669, 2669, 2669, 2669, 2669, 2669, 2669,
	0, 0, 74, 0, 0, 0, 75, 0, 0, 0,
	0, 1227, 0, 3378, 0, 0, 0, 0, 0, 2279,
	0, 0, 0, 0, 1227, 0, 79, 1242, 0, 0,
	1212, 0, 0, 69, 1224, 1225, 1226, 0, 0, 0,
	0, 0, 748, 0, 4317, 0, 1814, 3398, 0, 1815,
	0, 64, 0, 1820, 0, 1812, 0, 0, 4214, 4215,
	1817, 1821, 1816, 0, 1818, 0, 0, 0, 1819, 1235,
	1236, 1813, 0, 0, 0, 0, 0, 0, 1822, 0,
	2852, 0, 0, 0, 0, 4317, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2306, 708, 708, 0, 708, 0, 748, 0,
	2319, 708, 0, 708, 0, 0, 4261, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2607, 0, 2608, 3491, 2609, 1242, 0,
	2611, 1212, 0, 0, 0, 1224, 1225, 1226, 0, 0,
	0, 0, 2620, 2325, 0, 0, 0, 1814, 1723, 3879,
	2279, 0, 853, 0, 1820, 0, 1812, 0, 0, 0,
	0, 1817, 1821, 1816, 0, 1818, 0, 0, 0, 1819,
	1235, 1236, 1813, 0, 0, 0, 3720, 2321, 708, 1822,
	0, 0, 708, 708, 708, 708, 0, 1242, 0, 0,
	1212, 0, 0, 0, 1224, 1225, 1226, 0, 0, 0,
	0, 0, 0, 0, 708, 708, 1814, 0, 1723, 1815,
	0, 0, 0, 1820, 0, 1812, 0, 0, 0, 0,
	1817, 1821, 1816, 0, 1818, 0, 808, 0, 1819, 1235,
	1236, 1813, 0, 0, 0, 808, 0, 0, 1822, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1721,
	0, 0, 0, 0, 2279, 0, 0, 0, 0, 3575,
	0, 0, 0, 2279, 0, 2311, 0, 0, 0, 0,
	0, 1723, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1721, 0, 0, 0, 2320, 708, 1227,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3603, 808, 0, 0, 68, 0, 0, 0, 0, 0,
	0, 70, 1723, 2782, 808, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3614, 0, 0, 2316, 0, 0,
	0, 0, 0, 1721, 0, 0, 3653, 2669, 0, 0,
	0, 0, 4026, 4027, 4028, 4029, 0, 0, 746, 0,
	2313, 0, 1721, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2307, 0, 0, 2318, 0, 2279, 0, 0, 0,
	1242, 0, 0, 1212, 0, 0, 0, 1224, 1225, 1226,
	0, 1227, 1227, 0, 0, 0, 708, 0, 1227, 1814,
	0, 0, 1815, 0, 0, 746, 1820, 0, 1812, 0,
	0, 0, 0, 1817, 1821, 1816, 2324, 1818, 0, 0,
	0, 1819, 1235, 1236, 1813, 0, 0, 0, 78, 0,
	0, 1822, 1227, 0, 0, 0, 0, 746, 746, 0,
	0, 73, 1227, 0, 0, 0, 0, 0, 0, 0,
	0, 70, 0, 0, 2302, 1227, 0, 0, 708, 0,
	808, 708, 0, 708, 708, 0, 808, 1227, 2317, 0,
	0, 1227, 0, 0, 2947, 0, 2949, 0, 0, 0,
	747, 0, 0, 0, 2314, 0, 0, 0, 708, 747,
	747, 2312, 0, 0, 0, 2322, 0, 0, 0, 0,
	0, 0, 0, 1231, 746, 0, 0, 0, 2308, 708,
	0, 0, 1221, 1222, 1223, 708, 0, 0, 0, 4237,
	0, 1215, 1216, 1217, 1218, 1219, 1220, 0, 0, 0,
	0, 0, 2315, 0, 2309, 0, 0, 0, 708, 708,
	0, 0, 0, 3858, 708, 0, 0, 0, 2669, 0,
	0, 0, 0, 0, 0, 1722, 2997, 0, 0, 0,
	708, 708, 0, 0, 0, 708, 0, 3824, 3826, 0,
	0, 0, 0, 0, 708, 0, 0, 0, 0, 0,
	708, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 708, 0, 747, 0, 0, 708, 708, 708, 1722,
	0, 1722, 0, 0, 0, 0, 708, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 747, 853, 708, 0, 0, 747,
	0, 708, 0, 0, 1231, 0, 708, 0, 708, 3040,
	0, 0, 0, 1221, 1222, 1223, 0, 1227, 0, 0,
	0, 0, 1215, 1216, 1217, 1218, 1219, 1220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	808, 0, 0, 3911, 1227, 746, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1231, 0, 0, 0, 0, 0, 808,
	808, 0, 1221, 1222, 1223, 0, 0, 0, 808, 4116,
	0, 1215, 1216, 1217, 1218, 1219, 1220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1721, 808, 0, 0, 0, 747, 0, 808, 0, 1227,
	2669, 0, 0, 0, 0, 4319, 0, 746, 746, 0,
	0, 0, 0, 0, 0, 3987, 0, 3987, 3987, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 705, 0, 0, 0, 708, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1227, 1227, 1227, 747, 4007, 1227, 0, 0, 1227, 0,
	0, 0, 708, 1227, 0, 0, 0, 0, 4319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1227, 0, 0, 1242,
	0, 0, 1212, 0, 1227, 0, 1224, 1225, 1226, 0,
	0, 3866, 0, 1227, 1227, 0, 0, 0, 1814, 4319,
	0, 1815, 1721, 1721, 1721, 1820, 0, 1812, 0, 0,
	0, 0, 1817, 1821, 1816, 0, 1818, 0, 0, 0,
	1819, 1235, 1236, 1813, 0, 0, 1231, 0, 1722, 0,
	1822, 0, 1227, 1227, 0, 1221, 1222, 1223, 0, 0,
	4137, 0, 4101, 0, 1215, 1216, 1217, 1218, 1219, 1220,
	0, 708, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 746, 0, 1227, 0, 0, 0, 0, 0, 0,
	0, 1227, 1227, 0, 0, 0, 0, 0, 0, 0,
	789, 789, 0, 0, 0, 0, 0, 777, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	746, 0, 0, 0, 808, 0, 0, 0, 0, 0,
	0, 0, 0, 808, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 746, 0, 91, 0, 0, 0, 0, 0, 0,
	118, 0, 0, 0, 0, 0, 708, 0, 708, 708,
	0, 0, 708, 708, 708, 0, 708, 0, 114, 0,
	2669, 2669, 94, 0, 2669, 612, 612, 708, 0, 0,
	0, 882, 62, 0, 0, 0, 0, 0, 708, 708,
	708, 0, 0, 0, 0, 708, 667, 708, 671, 0,
	0, 0, 676, 677, 3381, 0, 682, 683, 0, 0,
	708, 0, 4209, 0, 101, 708, 0, 0, 0, 708,
	708, 0, 0, 0, 0, 0, 735, 0, 708, 0,
	0, 0, 752, 0, 755, 0, 757, 758, 759, 760,
	761, 0, 708, 0, 766, 708, 0, 0, 771, 0,
	0, 0, 778, 0, 0, 594, 0, 0, 0, 0,
	0, 0, 62, 0, 0, 0, 0, 62, 0, 708,
	708, 0, 708, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1227, 1227, 0,
	0, 0, 1227, 1227, 0, 0, 1227, 0, 0, 0,
	708, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 1227, 0, 0, 1227, 1227, 0, 0,
	808, 708, 708, 808, 0, 808, 0, 0, 0, 1227,
	0, 0, 0, 0, 0, 0, 97, 0, 808, 808,
	0, 0, 808, 0, 0, 1029, 0, 746, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 708,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4302,
	0, 0, 93, 0, 0, 808, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 0, 0, 98, 0, 0,
	1242, 0, 0, 1212, 0, 99, 0, 1224, 1225, 1226,
	115, 0, 746, 0, 0, 0, 0, 0, 0, 1814,
	0, 1227, 1815, 1031, 708, 708, 1820, 0, 1812, 0,
	0, 0, 0, 1817, 1821, 1816, 0, 1818, 0, 0,
	0, 1819, 1235, 1236, 1813, 0, 0, 1227, 0, 0,
	0, 1822, 0, 0, 0, 0, 0, 0, 0, 0,
	708, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1227, 0, 0, 0, 0,
	0, 0, 1721, 808, 1721, 0, 0, 0, 0, 0,
	0, 3578, 3579, 0, 0, 1721, 105, 917, 0, 0,
	0, 0, 0, 0, 0, 1231, 0, 0, 108, 0,
	0, 0, 0, 0, 1221, 1222, 1223, 1227, 0, 0,
	0, 3596, 0, 1215, 1216, 1217, 1218, 1219, 1220, 0,
	0, 0, 1227, 0, 0, 92, 1227, 1227, 1227, 1227,
	0, 0, 0, 100, 0, 0, 1030, 0, 3611, 0,
	0, 0, 0, 1227, 0, 0, 0, 0, 0, 107,
	0, 0, 808, 0, 109, 0, 0, 0, 0, 1227,
	104, 0, 113, 0, 112, 96, 0, 0, 0, 0,
	0, 0, 708, 708, 0, 95, 0, 0, 708, 708,
	0, 0, 117, 0, 116, 708, 808, 708, 708, 708,
	708, 708, 708, 708, 708, 708, 708, 708, 708, 0,
	0, 0, 708, 708, 0, 0, 0, 0, 0, 708,
	0, 3299, 0, 0, 708, 0, 708, 0, 0, 789,
	708, 0, 0, 110, 0, 0, 0, 0, 1032, 708,
	0, 0, 0, 0, 0, 0, 708, 0, 0, 0,
	708, 708, 0, 0, 708, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 708, 1033, 0,
	0, 1034, 0, 0, 0, 1035, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1852, 0, 1722,
	0, 0, 0, 0, 0, 0, 0, 1036, 0, 808,
	0, 0, 0, 0, 0, 808, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 612, 0,
	808, 1242, 0, 1722, 1212, 0, 0, 0, 1224, 1225,
	1226, 0, 0, 0, 0, 1039, 0, 708, 1227, 0,
	938, 0, 0, 0, 0, 0, 0, 1820, 0, 1812,
	0, 0, 1037, 1721, 1817, 1821, 1816, 0, 1818, 0,
	0, 0, 1819, 1235, 1236, 1813, 0, 708, 0, 1038,
	0, 0, 1822, 1722, 746, 0, 0, 0, 1227, 0,
	0, 0, 0, 979, 0, 708, 983, 0, 747, 0,
	708, 0, 1722, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1040, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 708, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 808, 0,
	0, 0, 0, 0, 0, 747, 0, 0, 0, 1227,
	0, 0, 0, 746, 0, 0, 746, 1067, 601, 0,
	0, 0, 0, 999, 0, 0, 0, 0, 1000, 0,
	1094, 0, 1009, 0, 0, 0, 0, 747, 747, 808,
	0, 0, 1227, 0, 0, 0, 789, 708, 746, 0,
	0, 0, 0, 789, 0, 0, 0, 0, 0, 1227,
	0, 0, 0, 808, 0, 0, 1231, 0, 0, 0,
	0, 0, 0, 0, 708, 1221, 1222, 1223, 708, 708,
	708, 0, 4078, 0, 1215, 1216, 1217, 1218, 1219, 1220,
	0, 0, 999, 0, 0, 1002, 0, 1000, 0, 708,
	0, 1009, 0, 0, 747, 624, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1008, 708, 708, 0, 0, 0,
	0, 0, 0, 0, 789, 708, 708, 708, 0, 693,
	696, 698, 0, 0, 0, 0, 0, 0, 1721, 0,
	0, 0, 0, 0, 0, 1013, 0, 0, 0, 0,
	0, 0, 0, 0, 1002, 0, 0, 0, 708, 0,
	0, 0, 1227, 808, 0, 0, 0, 0, 0, 0,
	612, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1008, 0, 0, 0, 0, 998, 0,
	0, 0, 0, 0, 0, 0, 0, 1864, 0, 996,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1013, 1003, 0, 708, 0, 0,
	789, 1699, 789, 1227, 0, 1702, 1703, 0, 1900, 0,
	0, 0, 1227, 0, 0, 0, 0, 0, 708, 0,
	0, 0, 0, 0, 865, 865, 0, 789, 997, 0,
	1005, 0, 0, 0, 0, 0, 1004, 998, 808, 0,
	62, 0, 0, 0, 0, 747, 0, 0, 1021, 0,
	746, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	708, 0, 0, 0, 1003, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 808, 808, 0, 0,
	0, 1006, 708, 0, 0, 0, 0, 789, 2017, 0,
	0, 0, 0, 0, 0, 0, 0, 708, 0, 1005,
	0, 0, 0, 0, 0, 1004, 0, 708, 0, 2042,
	1722, 0, 708, 0, 0, 0, 0, 708, 0, 0,
	999, 0, 0, 708, 0, 1000, 1007, 747, 747, 1009,
	999, 0, 0, 0, 0, 1000, 0, 1010, 0, 1009,
	746, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1006, 0, 0, 0, 0, 0, 0, 1231, 0, 2108,
	0, 0, 2110, 0, 0, 0, 1221, 1222, 1223, 0,
	2501, 0, 1012, 1011, 808, 1215, 1216, 1217, 1218, 1219,
	1220, 0, 808, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1002, 0, 1227, 1007, 0, 0, 0, 0,
	0, 0, 1002, 0, 0, 0, 1010, 0, 0, 0,
	0, 708, 0, 0, 1721, 0, 0, 0, 0, 0,
	0, 1008, 0, 0, 0, 708, 0, 0, 0, 708,
	0, 1008, 1722, 1722, 1722, 0, 746, 708, 708, 1020,
	0, 1012, 1011, 0, 0, 0, 0, 0, 0, 1001,
	0, 0, 1013, 0, 708, 0, 0, 0, 0, 0,
	0, 0, 1013, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 808, 0, 808, 808, 708, 1015,
	0, 0, 0, 0, 0, 0, 1208, 0, 0, 0,
	0, 747, 708, 0, 0, 998, 1688, 1689, 1690, 1691,
	1692, 0, 0, 0, 0, 998, 996, 1697, 0, 0,
	0, 0, 0, 808, 0, 0, 0, 0, 1001, 708,
	0, 1721, 1003, 0, 0, 0, 1711, 0, 0, 0,
	747, 0, 1003, 0, 0, 0, 1803, 0, 0, 1721,
	0, 0, 0, 0, 0, 746, 0, 0, 1015, 0,
	0, 0, 0, 0, 708, 997, 0, 1005, 0, 0,
	2196, 747, 0, 1004, 0, 0, 0, 1005, 1242, 0,
	0, 1212, 0, 1004, 0, 1224, 1225, 1226, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1814, 0, 0,
	1815, 0, 0, 909, 1820, 0, 1812, 0, 0, 0,
	0, 1817, 1821, 1816, 0, 1818, 919, 0, 1006, 1819,
	1235, 1236, 1813, 0, 928, 930, 0, 932, 1006, 1822,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 708, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 708, 1007, 708, 708, 0, 0, 0, 971,
	0, 0, 0, 1007, 1010, 0, 0, 0, 0, 708,
	0, 0, 708, 0, 1010, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1045,
	0, 0, 0, 0, 0, 0, 0, 994, 0, 1012,
	1011, 0, 0, 0, 0, 708, 0, 2988, 0, 1012,
	1011, 0, 0, 0, 0, 708, 0, 0, 708, 0,
	0, 0, 0, 0, 708, 708, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 746, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 747, 0, 0,
	708, 808, 0, 0, 0, 0, 1001, 0, 708, 0,
	0, 0, 0, 0, 0, 0, 1001, 0, 2234, 708,
	708, 0, 0, 708, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1015, 0, 0, 0,
	0, 0, 0, 746, 0, 0, 1015, 0, 0, 708,
	0, 0, 747, 0, 0, 0, 0, 0, 708, 0,
	708, 0, 0, 0, 0, 0, 0, 0, 0, 865,
	0, 0, 0, 2154, 2155, 2156, 2157, 2158, 2159, 2160,
	2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 0,
	2175, 0, 0, 0, 0, 0, 0, 1242, 0, 0,
	1212, 0, 0, 0, 1224, 1225, 1226, 0, 0, 0,
	0, 0, 708, 1721, 0, 0, 1814, 0, 708, 1815,
	0, 0, 1722, 1820, 1722, 1812, 0, 0, 0, 1805,
	1817, 1821, 1816, 0, 1818, 1722, 0, 0, 1819, 1235,
	1236, 1813, 0, 0, 0, 708, 0, 0, 1822, 0,
	1849, 0, 0, 0, 0, 0, 0, 0, 808, 0,
	0, 0, 0, 2338, 0, 0, 0, 0, 0, 0,
	0, 708, 2338, 1721, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1914, 0, 0,
	0, 1918, 0, 0, 0, 0, 1930, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 708, 0, 0,
	0, 0, 0, 0, 0, 1975, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1721, 708, 789, 0,
	0, 1989, 0, 0, 0, 0, 2207, 0, 0, 0,
	0, 789, 0, 0, 0, 0, 0, 0, 708, 708,
	2006, 0, 0, 2009, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1721, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2041,
	0, 0, 0, 1930, 1930, 1930, 0, 0, 0, 0,
	0, 0, 0, 0, 1231, 0, 0, 0, 0, 0,
	0, 2063, 2064, 1221, 1222, 1223, 0, 0, 0, 0,
	3838, 0, 1215, 1216, 1217, 1218, 1219, 1220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2361, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2375, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2392, 0, 0,
	0, 0, 0, 2196, 0, 2403, 0, 0, 594, 0,
	0, 2129, 0, 0, 0, 0, 0, 0, 2267, 2267,
	0, 0, 0, 1722, 0, 0, 0, 789, 0, 0,
	0, 0, 0, 789, 2434, 2435, 2436, 0, 0, 0,
	0, 0, 0, 999, 747, 2443, 0, 0, 1000, 0,
	0, 0, 1009, 2454, 0, 2458, 2459, 0, 0, 2148,
	0, 2463, 0, 0, 2467, 2468, 0, 0, 2475, 0,
	2477, 2480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2502, 2503, 0, 0, 2507, 2508,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2517, 2518, 0, 0, 0,
	0, 0, 0, 0, 0, 1002, 2531, 0, 2532, 2533,
	2534, 2535, 2536, 747, 0, 2538, 747, 0, 0, 2542,
	0, 0, 0, 2545, 2546, 0, 0, 2549, 2550, 0,
	0, 2555, 2556, 0, 1008, 999, 1029, 2557, 2558, 2559,
	1000, 0, 0, 2560, 1009, 0, 0, 0, 747, 0,
	0, 0, 0, 2234, 2234, 2234, 0, 0, 0, 0,
	2573, 0, 0, 2574, 0, 1013, 0, 0, 0, 0,
	2585, 2586, 0, 0, 0, 0, 2593, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1031, 0, 0, 1002, 998, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1231, 0, 0, 0, 2778, 0, 0,
	0, 0, 1221, 1222, 1223, 1003, 1008, 0, 0, 3821,
	0, 1215, 1216, 1217, 1218, 1219, 1220, 0, 1722, 0,
	0, 0, 0, 0, 0, 0, 2338, 2778, 0, 0,
	0, 0, 0, 0, 0, 2811, 0, 1013, 0, 0,
	1005, 0, 0, 0, 0, 0, 1004, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2245, 0,
	0, 0, 2167, 2168, 2169, 2175, 0, 0, 2778, 0,
	0, 0, 0, 0, 789, 0, 1242, 0, 0, 1212,
	998, 0, 0, 1224, 1225, 1226, 0, 0, 0, 2267,
	0, 1006, 0, 0, 0, 1814, 0, 1030, 1815, 0,
	0, 0, 1820, 0, 1812, 0, 0, 1003, 0, 1817,
	1821, 1816, 0, 1818, 0, 0, 2196, 1819, 1235, 1236,
	1813, 0, 0, 0, 0, 0, 0, 1822, 0, 0,
	0, 0, 0, 0, 0, 0, 1007, 0, 0, 1699,
	2676, 0, 1005, 0, 0, 0, 0, 1010, 1004, 0,
	747, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1242, 0, 0, 1212, 0, 0, 0, 1224,
	1225, 1226, 1012, 1011, 0, 0, 0, 0, 0, 1032,
	0, 1814, 0, 1006, 1815, 0, 0, 0, 1820, 0,
	1812, 0, 0, 0, 0, 1817, 1821, 1816, 0, 1818,
	2738, 0, 2742, 1819, 1235, 1236, 1813, 0, 2825, 1033,
	0, 0, 1034, 1822, 0, 0, 1035, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1028, 0,
	747, 0, 0, 0, 0, 0, 2866, 0, 1036, 1010,
	0, 0, 0, 0, 2874, 0, 2874, 0, 0, 1001,
	0, 0, 2883, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2540, 0, 0, 0,
	0, 0, 2515, 0, 1012, 1011, 1039, 0, 0, 1015,
	0, 789, 0, 0, 0, 0, 0, 0, 0, 0,
	789, 0, 0, 1037, 0, 0, 0, 0, 0, 2933,
	0, 0, 0, 0, 1722, 0, 0, 0, 0, 0,
	1038, 0, 0, 0, 0, 0, 0, 0, 0, 2957,
	2958, 2959, 2960, 0, 0, 0, 747, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 62, 0,
	0, 0, 0, 0, 0, 0, 0, 1040, 0, 0,
	0, 1001, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2985,
	2986, 0, 2989, 2990, 2991, 0, 0, 0, 0, 1208,
	0, 1015, 2234, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3002, 1242, 0, 0,
	1212, 0, 0, 0, 1224, 1225, 1226, 0, 2642, 2643,
	0, 1722, 0, 0, 2649, 3018, 1814, 0, 0, 1815,
	3019, 0, 0, 1820, 0, 1812, 0, 0, 0, 1722,
	1817, 1821, 1816, 0, 1818, 747, 0, 0, 1819, 1235,
	1236, 1813, 0, 0, 0, 0, 0, 0, 1822, 0,
	2683, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2693, 0, 0, 0, 0, 2232, 2232, 2232, 2362,
	3041, 0, 0, 0, 0, 0, 2706, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2338, 0, 0,
	2778, 0, 2778, 0, 0, 0, 2718, 0, 0, 0,
	0, 2722, 0, 0, 0, 2338, 2338, 0, 0, 2778,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1242, 0, 0, 1212, 0, 0, 0, 1224,
	1225, 1226, 0, 0, 0, 0, 0, 0, 0, 2437,
	2438, 1814, 789, 0, 1815, 0, 0, 0, 1820, 0,
	1812, 0, 0, 0, 0, 1817, 1821, 1816, 0, 1818,
	0, 0, 0, 1819, 1235, 1236, 1813, 0, 0, 0,
	0, 0, 1231, 1822, 0, 2482, 0, 0, 0, 0,
	0, 1221, 1222, 1223, 0, 0, 0, 2504, 3793, 0,
	1215, 1216, 1217, 1218, 1219, 1220, 0, 0, 0, 0,
	0, 0, 0, 0, 1699, 0, 0, 0, 0, 1699,
	0, 2523, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3169, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 747, 0, 62,
	2778, 0, 0, 0, 62, 62, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2267, 0, 2898, 2267,
	0, 0, 0, 0, 0, 0, 0, 0, 1231, 0,
	0, 0, 0, 0, 2874, 0, 0, 1221, 1222, 1223,
	3203, 0, 2925, 0, 3772, 0, 1215, 1216, 1217, 1218,
	1219, 1220, 0, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 0, 747, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 789,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3238, 0, 0, 0,
	0, 0, 0, 2874, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 789, 0, 0, 0, 0, 1242, 3267,
	3268, 1212, 0, 0, 0, 1224, 1225, 1226, 0, 0,
	0, 0, 0, 1722, 0, 0, 3284, 1814, 0, 0,
	1815, 3000, 0, 2234, 1820, 0, 1812, 2234, 0, 0,
	0, 1817, 1821, 1816, 0, 1818, 3314, 0, 3457, 1819,
	1235, 1236, 1813, 0, 0, 0, 0, 0, 0, 1822,
	0, 0, 3319, 0, 0, 0, 0, 0, 0, 0,
	0, 3321, 3322, 3323, 0, 0, 3326, 0, 2267, 3329,
	3330, 3331, 3332, 1722, 0, 0, 0, 0, 0, 0,
	0, 0, 3341, 0, 3342, 0, 3343, 0, 0, 0,
	0, 0, 0, 0, 0, 3356, 3486, 0, 0, 0,
	0, 0, 789, 0, 3362, 3363, 0, 0, 0, 3366,
	3367, 3368, 3369, 3370, 0, 0, 3051, 2338, 3052, 3053,
	0, 0, 3056, 0, 0, 0, 3059, 0, 0, 0,
	0, 2763, 0, 2766, 2767, 0, 1722, 3064, 2771, 0,
	0, 0, 0, 1231, 0, 0, 0, 0, 0, 0,
	1697, 0, 1221, 1222, 1223, 3087, 0, 0, 0, 3749,
	0, 1215, 1216, 1217, 1218, 1219, 1220, 0, 0, 0,
	3095, 0, 0, 0, 0, 2232, 0, 1722, 1242, 3104,
	3105, 1212, 0, 0, 0, 1224, 1225, 1226, 865, 0,
	0, 0, 0, 0, 0, 0, 0, 1814, 0, 0,
	1815, 0, 2828, 0, 1820, 0, 1812, 0, 3432, 0,
	0, 1817, 1821, 1816, 0, 1818, 0, 0, 0, 1819,
	1235, 1236, 1813, 0, 0, 0, 0, 0, 0, 1822,
	3143, 0, 3144, 0, 0, 789, 0, 0, 0, 2879,
	2880, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3174, 0, 0, 1930, 0, 0, 0, 0, 1231, 0,
	0, 0, 0, 0, 0, 0, 789, 1221, 1222, 1223,
	0, 3182, 3183, 0, 3632, 0, 1215, 1216, 1217, 1218,
	1219, 1220, 0, 0, 2267, 2267, 0, 0, 2267, 1242,
	789, 0, 1212, 0, 0, 0, 1224, 1225, 1226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1814, 3525,
	0, 1815, 0, 0, 0, 1820, 0, 1812, 0, 0,
	0, 0, 1817, 1821, 1816, 0, 1818, 0, 0, 0,
	1819, 1235, 1236, 1813, 0, 0, 0, 0, 0, 0,
	1822, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3012, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2778, 0, 3583, 0, 0, 3585, 0, 0, 0, 0,
	0, 3588, 3589, 3590, 0, 0, 3593, 3594, 3595, 0,
	0, 0, 0, 3598, 3599, 0, 0, 0, 0, 0,
	0, 1242, 0, 0, 1212, 0, 0, 0, 1224, 1225,
	1226, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1814, 0, 0, 1815, 3615, 3616, 0, 1820, 3620, 1812,
	3621, 0, 0, 0, 1817, 1821, 1816, 0, 1818, 0,
	0, 0, 1819, 1235, 1236, 1813, 0, 0, 0, 0,
	0, 0, 1822, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1231, 2778, 0, 0, 0, 0,
	0, 0, 0, 1221, 1222, 1223, 3640, 0, 0, 0,
	0, 0, 1215, 1216, 1217, 1218, 1219, 1220, 0, 0,
	0, 0, 3388, 3389, 0, 0, 0, 0, 3393, 3394,
	0, 0, 0, 789, 789, 3397, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3414, 0, 0, 0, 0, 0, 3417,
	0, 0, 0, 0, 3418, 0, 2232, 0, 0, 1242,
	2232, 0, 1212, 0, 0, 0, 1224, 1225, 1226, 0,
	0, 0, 2874, 0, 0, 0, 3430, 0, 1814, 0,
	0, 1815, 0, 0, 3754, 1820, 0, 1812, 0, 3757,
	2267, 0, 1817, 1821, 1816, 3763, 1818, 0, 3765, 0,
	1819, 1235, 1236, 1813, 0, 0, 0, 0, 0, 0,
	1822, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3486, 0, 0, 0, 0, 0, 0, 0, 789,
	0, 0, 3188, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 0, 0, 0, 0, 0, 0, 0, 3800,
	3801, 0, 0, 0, 0, 3807, 0, 62, 0, 3809,
	0, 3211, 0, 3452, 1231, 0, 0, 3512, 0, 0,
	0, 0, 0, 1221, 1222, 1223, 0, 0, 3822, 0,
	62, 0, 1215, 1216, 1217, 1218, 1219, 1220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1914, 1242, 0, 0, 1212,
	0, 0, 0, 1224, 1225, 1226, 0, 0, 0, 0,
	3538, 789, 0, 789, 789, 1814, 0, 0, 1815, 0,
	0, 0, 1820, 0, 1812, 0, 0, 0, 0, 1817,
	1821, 1816, 0, 1818, 0, 0, 0, 1819, 1235, 1236,
	1813, 3566, 0, 0, 0, 0, 0, 1822, 0, 0,
	789, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1231, 0, 0, 0, 0,
	0, 0, 0, 62, 1221, 1222, 1223, 0, 0, 0,
	0, 3415, 0, 1215, 1216, 1217, 1218, 1219, 1220, 2874,
	0, 0, 0, 0, 0, 0, 0, 3608, 0, 0,
	0, 0, 0, 0, 0, 0, 3945, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3623, 0, 0, 0, 3627, 3628,
	3629, 0, 0, 0, 0, 1242, 0, 0, 1212, 0,
	0, 0, 1224, 1225, 1226, 62, 0, 0, 0, 3630,
	0, 0, 0, 0, 1814, 0, 3979, 1815, 0, 3982,
	0, 1820, 0, 1812, 0, 0, 0, 0, 1817, 1821,
	1816, 0, 1818, 0, 0, 3644, 1819, 1235, 1236, 1813,
	0, 0, 0, 0, 0, 0, 1822, 3660, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2267, 0, 0, 0, 1231, 0, 0,
	0, 0, 0, 0, 0, 4016, 1221, 1222, 1223, 0,
	0, 0, 0, 3344, 0, 1215, 1216, 1217, 1218, 1219,
	1220, 3096, 0, 0, 1242, 0, 0, 1212, 0, 0,
	0, 1224, 1225, 1226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1814, 0, 0, 1815, 0, 0, 0,
	1820, 0, 1812, 0, 0, 0, 1699, 1817, 1821, 1816,
	0, 1818, 0, 0, 0, 1819, 1235, 1236, 1813, 0,
	1242, 0, 0, 1212, 0, 1822, 0, 1224, 1225, 1226,
	3497, 0, 0, 0, 0, 0, 4084, 0, 789, 1814,
	0, 0, 1815, 0, 0, 0, 1820, 0, 1812, 0,
	0, 0, 0, 1817, 1821, 1816, 0, 1818, 0, 0,
	0, 1819, 1235, 1236, 1813, 4104, 4105, 0, 0, 0,
	0, 1822, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 999, 0, 1231, 0, 0, 1000, 0,
	1242, 0, 1009, 1212, 1221, 1222, 1223, 1224, 1225, 1226,
	0, 3277, 3829, 1215, 1216, 1217, 1218, 1219, 1220, 1814,
	0, 0, 1815, 0, 0, 0, 1820, 0, 1812, 0,
	0, 0, 0, 1817, 1821, 1816, 0, 1818, 0, 0,
	0, 1819, 1235, 1236, 1813, 999, 1029, 0, 0, 1242,
	1000, 1822, 1212, 3869, 1009, 0, 1224, 1225, 1226, 0,
	0, 0, 0, 0, 0, 1002, 0, 4180, 1814, 0,
	0, 1815, 0, 0, 0, 1820, 0, 1812, 0, 0,
	4190, 0, 1817, 1821, 1816, 0, 1818, 0, 0, 0,
	1819, 1235, 1236, 1813, 1008, 0, 0, 999, 0, 0,
	1822, 0, 1000, 0, 4206, 789, 1009, 0, 0, 0,
	0, 0, 0, 0, 1031, 0, 0, 1002, 0, 0,
	0, 0, 0, 0, 0, 1013, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3940, 1231, 0, 0, 0, 1008, 0, 0, 0,
	62, 1221, 1222, 1223, 0, 0, 0, 0, 3256, 0,
	1215, 1216, 1217, 1218, 1219, 1220, 0, 0, 998, 1002,
	0, 0, 0, 0, 0, 0, 0, 1013, 0, 0,
	0, 0, 0, 0, 3973, 0, 0, 0, 0, 4256,
	0, 0, 0, 0, 0, 1003, 0, 0, 1008, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3990, 0,
	0, 0, 0, 3687, 0, 0, 0, 0, 0, 0,
	998, 0, 1697, 0, 0, 3709, 0, 0, 0, 1013,
	1005, 0, 0, 0, 0, 0, 1004, 1030, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1003, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 998, 3760, 0, 0, 0, 0, 0, 0,
	0, 1006, 1005, 0, 0, 0, 0, 0, 1004, 0,
	0, 1231, 0, 0, 0, 0, 0, 0, 0, 1003,
	1221, 1222, 1223, 0, 0, 0, 0, 0, 0, 1215,
	1216, 1217, 1218, 1219, 1220, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1007, 0, 0, 1032,
	0, 0, 0, 1006, 1005, 0, 0, 1010, 0, 0,
	1004, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1033,
	0, 0, 1034, 4386, 4103, 0, 1035, 0, 0, 0,
	2520, 0, 1012, 1011, 0, 0, 0, 0, 1028, 0,
	0, 0, 3829, 0, 0, 1006, 0, 0, 1036, 1010,
	1231, 0, 0, 0, 0, 0, 0, 0, 0, 1221,
	1222, 1223, 3143, 0, 0, 0, 3092, 0, 1215, 1216,
	1217, 1218, 1219, 1220, 0, 0, 0, 0, 0, 0,
	0, 0, 1025, 0, 1012, 1011, 1039, 0, 0, 0,
	1007, 0, 0, 0, 0, 4164, 1231, 0, 0, 0,
	0, 1010, 0, 1037, 0, 1221, 1222, 1223, 4173, 1001,
	2237, 0, 0, 0, 1215, 1216, 1217, 1218, 1219, 1220,
	1038, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2506, 0, 1012, 1011, 0, 1015,
	0, 0, 0, 3921, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1040, 0, 0,
	0, 1001, 0, 0, 0, 0, 1231, 0, 3829, 0,
	0, 0, 0, 0, 0, 1221, 1222, 1223, 0, 0,
	0, 0, 2211, 0, 1215, 1216, 1217, 1218, 1219, 1220,
	0, 1015, 0, 0, 3967, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1001, 0, 1231, 0, 0, 0, 0,
	0, 0, 0, 0, 1221, 1222, 1223, 0, 0, 0,
	0, 0, 0, 1215, 1216, 1217, 1218, 1219, 1220, 0,
	0, 0, 0, 1015, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1720, 0, 0, 0, 4040,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1725, 206, 1731, 223, 713, 1741, 272, 309,
	524, 1728, 1773, 369, 1778, 422, 426, 1802, 515, 1735,
	1738, 1748, 1751, 280, 1756, 718, 1764, 724, 1774, 730,
	1793, 491, 1799, 720, 721, 726, 211, 607, 514, 585,
	1787, 1733, 1791, 376, 1784, 1760, 1800, 1777, 1789, 1770,
	1775, 219, 1762, 1763, 1767, 1776, 722, 719, 723, 729,
	717, 727, 714, 725, 1797, 413, 347, 4355, 564, 440,
	218, 264, 251, 293, 335, 447, 1732, 1750, 325, 495,
	260, 349, 1783, 239, 382, 1796, 471, 346, 1790, 454,
	474, 1752, 366, 245, 405, 461, 462, 711, 716, 1740,
	732, 1727, 249, 250, 371, 231, 379, 576, 542, 434,
	392, 390, 1758, 357, 414, 571, 1730, 0, 279, 0,
	274, 370, 510, 237, 489, 408, 375, 329, 437, 466,
	276, 261, 262, 305, 407, 295, 247, 500, 539, 543,
	541, 537, 534, 538, 535, 536, 540, 296, 533, 0,
	508, 517, 551, 531, 559, 516, 556, 526, 271, 555,
	520, 519, 565, 546, 547, 501, 561, 532, 530, 523,
	522, 518, 1798, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 207, 1726, 208, 209, 210, 212, 213,
	214, 710, 215, 216, 217, 220, 221, 222, 224, 584,
	225, 226, 227, 228, 229, 230, 521, 712, 232, 233,
	234, 235, 236, 238, 240, 241, 242, 243, 244, 246,
	248, 1742, 1743, 1744, 715, 1745, 1746, 1747, 252, 253,
	254, 255, 256, 257, 1749, 258, 259, 263, 265, 266,
	267, 268, 269, 270, 273, 1753, 275, 277, 1754, 278,
	281, 1755, 282, 283, 284, 285, 286, 287, 288, 289,
	525, 290, 1757, 291, 292, 294, 1759, 297, 298, 299,
	300, 301, 1761, 302, 527, 528, 303, 304, 306, 307,
	308, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 1765, 322, 323, 324, 326, 1766, 327,
	328, 331, 332, 333, 334, 1768, 336, 544, 1769, 337,
	338, 339, 1771, 1772, 340, 341, 342, 343, 344, 345,
	348, 545, 350, 351, 352, 353, 354, 355, 356, 586,
	358, 359, 360, 361, 362, 363, 364, 548, 549, 365,
	367, 368, 550, 552, 553, 728, 383, 384, 385, 386,
	387, 388, 389, 391, 1780, 393, 394, 395, 554, 396,
	397, 398, 399, 1781, 400, 401, 402, 403, 404, 406,
	409, 410, 411, 412, 1782, 415, 416, 417, 418, 419,
	420, 421, 423, 424, 425, 427, 428, 429, 587, 430,
	431, 432, 433, 557, 435, 436, 588, 438, 439, 441,
	442, 443, 444, 445, 446, 605, 1785, 448, 558, 449,
	450, 451, 452, 453, 1786, 455, 456, 457, 458, 459,
	460, 463, 464, 465, 467, 468, 560, 469, 470, 1788,
	472, 473, 731, 475, 476, 477, 478, 479, 1792, 606,
	480, 562, 481, 563, 482, 483, 484, 485, 486, 487,
	488, 490, 1794, 1795, 492, 493, 494, 496, 497, 498,
	499, 502, 503, 504, 505, 506, 1801, 507, 509, 511,
	589, 566, 567, 568, 569, 570, 572, 573, 574, 575,
	512, 513, 529, 380, 374, 330, 372, 373, 377, 378,
	381, 1779, 1729, 1734, 1736, 1737, 1739, 0, 0, 0,
	0, 0, 0, 0, 0, 1245, 0, 0, 0, 0,
	0, 0, 1242, 0, 0, 1212, 0, 0, 1718, 1224,
	1225, 1226, 1256, 1258, 1240, 1285, 1306, 0, 1357, 1403,
	1373, 1228, 1490, 1496, 1229, 1557, 1561, 0, 1237, 1287,
	1213, 1337, 1352, 1367, 1379, 1232, 1238, 1230, 1494, 1233,
	1638, 1649, 1669, 1234, 1235, 1236, 1214, 1630, 1687, 1456,
	1615, 1267, 0, 1243, 1581, 0, 0, 1504, 1619, 0,
	0, 1281, 0, 0, 0, 0, 1429, 1418, 1452, 1565,
	1390, 1510, 1318, 1477, 1655, 1547, 1466, 0, 1661, 1579,
	1280, 1346, 1330, 1382, 1447, 1588, 1263, 1347, 1422, 1653,
	1342, 1468, 0, 1309, 1512, 1654, 1617, 1465, 1628, 1598,
	1623, 1353, 1491, 1316, 1538, 1605, 1606, 1276, 1389, 1311,
	1664, 1261, 1321, 1329, 1499, 1300, 1507, 1685, 1439, 1572,
	1522, 1520, 0, 1479, 1548, 1680, 0, 0, 1366, 0,
	1360, 1498, 1672, 1307, 1646, 1541, 1503, 1441, 1575, 1610,
	1362, 1343, 1344, 1400, 1540, 1385, 1319, 1660, 1436, 1440,
	1438, 1434, 1431, 1435, 1432, 1433, 1437, 1387, 1430, 0,
	0, 1277, 1497, 1425, 1595, 1275, 1544, 1383, 1356, 0,
	0, 0, 1662, 1476, 1478, 0, 1631, 1426, 1424, 1335,
	1334, 1278, 1663, 1247, 1248, 1249, 1250, 1251, 1252, 1253,
	1254, 1255, 1257, 1259, 1260, 1264, 1265, 1266, 1268, 1269,
	1270, 1271, 1272, 1273, 1274, 1282, 1283, 1284, 1286, 1289,
	1290, 1291, 1293, 1294, 1295, 1296, 1297, 1298, 1301, 1302,
	1303, 1304, 1305, 1308, 1310, 1312, 1313, 1314, 1315, 1317,
	1320, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1331, 1332,
	0, 1333, 1336, 1338, 1339, 1340, 1341, 1345, 1348, 1349,
	1350, 1351, 1354, 1355, 1358, 1359, 1361, 1363, 1364, 1365,
	1368, 0, 1369, 1370, 1371, 1372, 1374, 1375, 1376, 1377,
	1378, 1380, 0, 0, 1381, 1384, 1386, 1388, 1391, 1392,
	1393, 1394, 0, 1395, 1396, 1397, 1398, 1399, 1401, 0,
	1402, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412,
	1413, 1414, 1415, 1416, 1417, 1420, 1421, 1423, 0, 1427,
	1428, 1443, 1444, 1445, 1446, 1448, 1450, 1451, 1449, 1453,
	1454, 1455, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464,
	1467, 1469, 1470, 0, 1471, 1472, 0, 1473, 1474, 1475,
	1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489,
	1492, 1493, 1495, 1509, 1511, 0, 1513, 1514, 1515, 1516,
	1517, 1518, 1519, 1521, 1523, 1524, 1525, 1526, 1527, 1528,
	1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1539,
	1542, 1543, 1545, 1546, 1549, 1550, 1551, 1552, 1553, 1554,
	1555, 1556, 1558, 1559, 1560, 1562, 1563, 1564, 1566, 1567,
	1568, 1569, 1570, 1571, 1573, 1574, 1576, 1577, 1578, 0,
	1580, 1582, 1583, 1584, 1585, 1586, 1587, 1590, 1589, 1591,
	1592, 1593, 1594, 1596, 1597, 1599, 1600, 1601, 1602, 1603,
	1604, 1607, 1608, 1609, 1611, 1612, 1613, 1614, 1616, 1618,
	1620, 1622, 1621, 1624, 1625, 1626, 1627, 1629, 1632, 1633,
	1634, 1635, 1636, 1637, 1639, 1640, 1641, 1642, 1643, 1644,
	1645, 1647, 0, 1648, 1650, 1651, 1652, 1656, 1657, 1658,
	1659, 1665, 1666, 1667, 1668, 1670, 0, 0, 1671, 1673,
	1674, 1675, 1676, 1677, 1678, 1679, 1681, 1682, 1683, 1684,
	0, 1686, 1419, 1508, 1502, 1442, 1500, 1501, 1505, 1506,
	0, 0, 1262, 1279, 1288, 1292, 1299, 0, 1231, 0,
	0, 0, 0, 0, 0, 0, 0, 1221, 1222, 1223,
	0, 0, 0, 0, 0, 0, 1215, 1216, 1217, 1218,
	1219, 1220, 1720, 0, 4318, 846, 0, 0, 0, 0,
	900, 0, 0, 0, 0, 0, 0, 0, 0, 1725,
	206, 1731, 223, 713, 1741, 272, 309, 524, 1728, 1773,
	369, 1778, 422, 426, 1802, 515, 1735, 1738, 1748, 1751,
	280, 1756, 718, 1764, 724, 1774, 730, 1793, 491, 1799,
	720, 721, 726, 211, 607, 514, 585, 1787, 1733, 1791,
	376, 1784, 1760, 1800, 1777, 1789, 1770, 1775, 219, 1762,
	1763, 1767, 1776, 722, 719, 723, 729, 717, 727, 714,
	725, 1797, 413, 347, 0, 564, 440, 218, 264, 251,
	293, 335, 447, 1732, 1750, 325, 495, 260, 349, 1783,
	239, 382, 1796, 471, 346, 1790, 454, 474, 1752, 366,
	245, 405, 461, 462, 711, 716, 1740, 732, 1727, 249,
	250, 371, 231, 379, 576, 542, 434, 392, 390, 1758,
	357, 414, 571, 1730, 0, 279, 0, 274, 370, 510,
	237, 489, 408, 375, 329, 437, 466, 276, 261, 262,
	305, 407, 295, 247, 500, 539, 543, 541, 537, 534,
	538, 535, 536, 540, 296, 533, 0, 508, 517, 551,
	531, 559, 516, 556, 526, 271, 555, 520, 519, 565,
	546, 547, 501, 561, 532, 530, 523, 522, 518, 1798,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	207, 1726, 208, 209, 210, 212, 213, 214, 710, 215,
	216, 217, 220, 221, 222, 224, 584, 225, 226, 227,
	228, 229, 230, 521, 712, 232, 233, 234, 235, 236,
	238, 240, 241, 242, 243, 244, 246, 248, 1742, 1743,
	1744, 715, 1745, 1746, 1747, 252, 253, 254, 255, 256,
	257, 1749, 258, 259, 263, 265, 266, 267, 268, 269,
	270, 273, 1753, 275, 277, 1754, 278, 281, 1755, 282,
	283, 284, 285, 286, 287, 288, 289, 525, 290, 1757,
	291, 292, 294, 1759, 297, 298, 299, 300, 301, 1761,
	302, 527, 528, 303, 304, 306, 307, 308, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	1765, 322, 323, 324, 326, 1766, 327, 328, 331, 332,
	333, 334, 1768, 336, 544, 1769, 337, 338, 339, 1771,
	1772, 340, 341, 342, 343, 344, 345, 348, 545, 350,
	351, 352, 353, 354, 355, 356, 586, 358, 359, 360,
	361, 362, 363, 364, 548, 549, 365, 367, 368, 550,
	552, 553, 728, 383, 384, 385, 386, 387, 388, 389,
	391, 1780, 393, 394, 395, 554, 396, 397, 398, 399,
	1781, 400, 401, 402, 403, 404, 406, 409, 410, 411,
	412, 1782, 415, 416, 417, 418, 419, 420, 421, 423,
	424, 425, 427, 428, 429, 587, 430, 431, 432, 433,
	557, 435, 436, 588, 438, 439, 441, 442, 443, 444,
	445, 446, 605, 1785, 448, 558, 449, 450, 451, 452,
	453, 1786, 455, 456, 457, 458, 459, 460, 463, 464,
	465, 467, 468, 560, 469, 470, 1788, 472, 473, 731,
	475, 476, 477, 478, 479, 1792, 606, 480, 562, 481,
	563, 482, 483, 484, 485, 486, 487, 488, 490, 1794,
	1795, 492, 493, 494, 496, 497, 498, 499, 502, 503,
	504, 505, 506, 1801, 507, 509, 511, 589, 566, 567,
	568, 569, 570, 572, 573, 574, 575, 512, 513, 529,
	380, 374, 330, 372, 373, 377, 378, 381, 1779, 1729,
	1734, 1736, 1737, 1739, 1720, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1725, 206, 1731, 223, 713, 1741, 272, 309, 524,
	1728, 1773, 369, 1778, 422, 426, 1802, 515, 1735, 1738,
	1748, 1751, 280, 1756, 718, 1764, 724, 1774, 730, 1793,
	491, 1799, 720, 721, 726, 211, 607, 514, 585, 1787,
	1733, 1791, 376, 1784, 1760, 1800, 1777, 1789, 1770, 1775,
	219, 1762, 1763, 1767, 1776, 722, 719, 723, 729, 717,
	727, 714, 725, 1797, 413, 347, 0, 564, 440, 218,
	264, 251, 293, 335, 447, 1732, 1750, 325, 495, 260,
	349, 1783, 239, 382, 1796, 471, 346, 1790, 454, 474,
	1752, 366, 245, 405, 461, 462, 711, 716, 1740, 732,
	1727, 249, 250, 371, 231, 379, 576, 542, 434, 392,
	390, 1758, 357, 414, 571, 1730, 0, 279, 0, 274,
	370, 510, 237, 489, 408, 375, 329, 437, 466, 276,
	261, 262, 305, 407, 295, 247, 500, 539, 543, 541,
	537, 534, 538, 535, 536, 540, 296, 533, 0, 508,
	517, 551, 531, 559, 516, 556, 526, 271, 555, 520,
	519, 565, 546, 547, 501, 561, 532, 530, 523, 522,
	518, 1798, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 207, 1726, 208, 209, 210, 212, 213, 214,
	710, 215, 216, 217, 220, 221, 222, 224, 584, 225,
	226, 227, 228, 229, 230, 521, 712, 232, 233, 234,
	235, 236, 238, 240, 241, 242, 243, 244, 246, 248,
	1742, 1743, 1744, 715, 1745, 1746, 1747, 252, 253, 254,
	255, 256, 257, 1749, 258, 259, 263, 265, 266, 267,
	268, 269, 270, 273, 1753, 275, 277, 1754, 278, 281,
	1755, 282, 283, 284, 285, 286, 287, 288, 289, 525,
	290, 1757, 291, 292, 294, 1759, 297, 298, 299, 300,
	301, 1761, 302, 527, 528, 303, 304, 306, 307, 308,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 1765, 322, 323, 324, 326, 1766, 327, 328,
	331, 332, 333, 334, 1768, 336, 544, 1769, 337, 338,
	339, 1771, 1772, 340, 341, 342, 343, 344, 345, 348,
	545, 350, 351, 352, 353, 354, 355, 356, 586, 358,
	359, 360, 361, 362, 363, 364, 548, 549, 365, 367,
	368, 550, 552, 553, 728, 383, 384, 385, 386, 387,
	388, 389, 391, 1780, 393, 394, 395, 554, 396, 397,
	398, 399, 1781, 400, 401, 402, 403, 404, 406, 409,
	410, 411, 412, 1782, 415, 416, 417, 418, 419, 420,
	421, 423, 424, 425, 427, 428, 429, 587, 430, 431,
	432, 433, 557, 435, 436, 588, 438, 439, 441, 442,
	443, 444, 445, 446, 605, 1785, 448, 558, 449, 450,
	451, 452, 453, 1786, 455, 456, 457, 458, 459, 460,
	463, 464, 465, 467, 468, 560, 469, 470, 1788, 472,
	473, 731, 475, 476, 477, 478, 479, 1792, 606, 480,
	562, 481, 563, 482, 483, 484, 485, 486, 487, 488,
	490, 1794, 1795, 492, 493, 494, 496, 497, 498, 499,
	502, 503, 504, 505, 506, 1801, 507, 509, 511, 589,
	566, 567, 568, 569, 570, 572, 573, 574, 575, 512,
	513, 529, 380, 374, 330, 372, 373, 377, 378, 381,
	1779, 1729, 1734, 1736, 1737, 1739, 1720, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1725, 206, 1731, 223, 713, 1741, 2496,
	309, 524, 1728, 1773, 369, 1778, 422, 426, 1802, 515,
	1735, 1738, 1748, 1751, 280, 1756, 718, 1764, 724, 1774,
	730, 1793, 491, 1799, 720, 721, 726, 211, 607, 514,
	585, 1787, 1733, 1791, 376, 1784, 1760, 1800, 1777, 1789,
	1770, 1775, 219, 1762, 1763, 1767, 1776, 722, 719, 723,
	729, 717, 727, 714, 725, 1797, 413, 347, 0, 564,
	440, 218, 264, 251, 293, 335, 2494, 1732, 1750, 325,
	495, 260, 349, 1783, 239, 382, 1796, 471, 346, 1790,
	454, 474, 1752, 366, 245, 405, 461, 462, 711, 716,
	1740, 732, 1727, 249, 250, 371, 231, 379, 576, 542,
	434, 392, 390, 1758, 357, 414, 571, 1730, 0, 279,
	0, 274, 370, 510, 237, 489, 408, 375, 329, 437,
	466, 276, 261, 262, 305, 407, 295, 247, 500, 539,
	543, 541, 537, 534, 538, 535, 536, 540, 296, 533,
	0, 508, 517, 551, 531, 559, 516, 556, 526, 271,
	555, 520, 519, 565, 546, 547, 501, 561, 532, 530,
	523, 522, 518, 1798, 196, 197, 198, 199, 200, 2495,
	202, 203, 204, 205, 207, 1726, 208, 209, 210, 212,
	213, 214, 710, 215, 216, 217, 220, 221, 222, 224,
	584, 225, 226, 227, 228, 229, 230, 521, 712, 232,
	233, 234, 235, 236, 238, 240, 241, 242, 243, 244,
	246, 248, 1742, 1743, 1744, 715, 1745, 1746, 1747, 252,
	253, 254, 255, 256, 257, 1749, 258, 259, 263, 265,
	266, 267, 268, 269, 270, 273, 1753, 275, 277, 1754,
	278, 281, 1755, 282, 283, 284, 285, 286, 287, 288,
	289, 525, 290, 1757, 291, 292, 294, 1759, 297, 298,
	299, 300, 301, 1761, 302, 527, 528, 303, 304, 306,
	307, 308, 310, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 1765, 322, 323, 324, 326, 1766,
	327, 328, 331, 332, 333, 334, 1768, 336, 544, 1769,
	337, 338, 339, 1771, 1772, 340, 341, 342, 343, 344,
	345, 348, 545, 350, 351, 352, 353, 354, 355, 356,
	586, 358, 359, 360, 361, 362, 363, 364, 548, 549,
	365, 367, 368, 550, 552, 553, 728, 383, 384, 385,
	386, 387, 388, 389, 391, 1780, 393, 394, 395, 554,
	396, 397, 398, 399, 1781, 400, 401, 402, 403, 404,
	406, 409, 410, 411, 412, 1782, 415, 416, 417, 418,
	419, 420, 421, 423, 424, 425, 427, 428, 429, 587,
	430, 431, 432, 433, 557, 435, 436, 588, 438, 439,
	441, 442, 443, 444, 445, 446, 605, 1785, 448, 558,
	449, 450, 451, 452, 453, 1786, 455, 456, 457, 458,
	459, 460, 463, 464, 465, 467, 468, 560, 469, 470,
	1788, 472, 473, 731, 475, 476, 477, 478, 479, 1792,
	606, 480, 562, 481, 563, 482, 483, 484, 485, 486,
	487, 488, 490, 1794, 1795, 492, 493, 494, 496, 497,
	498, 499, 502, 503, 504, 505, 506, 1801, 507, 509,
	511, 589, 566, 567, 568, 569, 570, 572, 573, 574,
	575, 512, 513, 529, 380, 374, 330, 372, 373, 377,
	378, 381, 1779, 1729, 1734, 1736, 1737, 1739, 807, 0,
	1184, 846, 0, 0, 0, 649, 900, 0, 0, 0,
	0, 0, 660, 661, 662, 1725, 206, 1731, 223, 713,
	1741, 272, 309, 0, 1728, 1773, 369, 1778, 422, 426,
	1802, 0, 1735, 1738, 1748, 1751, 280, 1756, 718, 1764,
	724, 1774, 730, 1793, 491, 1799, 720, 721, 726, 211,
	806, 514, 585, 1787, 1733, 1791, 2854, 1784, 1760, 1800,
	1777, 1789, 1770, 1775, 219, 1762, 1763, 1767, 1776, 722,
	719, 723, 729, 717, 727, 714, 725, 1797, 413, 347,
	0, 0, 440, 218, 264, 251, 293, 335, 447, 1732,
	1750, 325, 495, 260, 349, 1783, 239, 382, 1796, 471,
	346, 1790, 454, 474, 1752, 366, 245, 405, 461, 462,
	711, 716, 1740, 732, 1727, 249, 250, 371, 231, 379,
	0, 0, 434, 392, 390, 1758, 357, 414, 0, 1730,
	0, 279, 0, 274, 370, 510, 237, 489, 408, 375,
	329, 437, 466, 276, 261, 262, 305, 407, 295, 247,
	500, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	296, 0, 0, 508, 809, 799, 791, 792, 793, 794,
	795, 796, 0, 811, 812, 813, 814, 815, 501, 805,
	0, 790, 797, 798, 800, 1798, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 207, 1726, 208, 209,
	210, 212, 213, 214, 710, 215, 216, 217, 220, 221,
	222, 224, 584, 225, 226, 227, 228, 229, 230, 0,
	712, 232, 233, 234, 235, 236, 238, 240, 241, 242,
	243, 244, 246, 248, 1742, 1743, 1744, 715, 1745, 1746,
	1747, 252, 253, 254, 255, 256, 257, 1749, 258, 259,
	263, 265, 266, 267, 268, 269, 270, 273, 1753, 275,
	277, 1754, 278, 281, 1755, 282, 283, 284, 285, 286,
	287, 288, 289, 0, 290, 1757, 291, 292, 294, 1759,
	297, 298, 299, 300, 301, 1761, 302, 0, 0, 303,
	304, 306, 307, 308, 310, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 1765, 322, 323, 324,
	326, 1766, 327, 328, 331, 332, 333, 334, 1768, 336,
	0, 1769, 337, 338, 339, 1771, 1772, 340, 341, 342,
	343, 344, 345, 348, 0, 350, 351, 352, 353, 354,
	355, 356, 586, 358, 359, 360, 361, 362, 363, 364,
	2853, 0, 365, 367, 368, 0, 0, 0, 728, 383,
	384, 385, 386, 387, 388, 389, 391, 1780, 393, 394,
	395, 0, 396, 397, 398, 399, 1781, 400, 401, 402,
	403, 404, 406, 409, 410, 411, 412, 1782, 415, 416,
	417, 418, 419, 420, 421, 423, 424, 425, 427, 428,
	429, 587, 430, 431, 432, 433, 0, 435, 436, 588,
	438, 439, 441, 442, 443, 444, 445, 446, 605, 1785,
	448, 2340, 449, 450, 451, 452, 453, 1786, 455, 456,
	457, 458, 459, 460, 463, 464, 465, 467, 468, 0,
	469, 470, 1788, 472, 473, 731, 475, 476, 477, 478,
	479, 1792, 606, 480, 0, 481, 0, 482, 483, 484,
	485, 486, 487, 488, 490, 1794, 1795, 492, 493, 494,
	496, 497, 498, 499, 502, 503, 504, 505, 506, 1801,
	507, 509, 511, 589, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 512, 513, 0, 380, 374, 330, 372,
	373, 377, 378, 381, 1779, 1729, 1734, 1736, 1737, 1739,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	657, 658, 659, 0, 0, 0, 0, 0, 0, 2855,
	2856, 653, 654, 655, 656, 707, 0, 893, 846, 0,
	0, 0, 888, 900, 878, 0, 0, 0, 0, 0,
	0, 0, 2229, 206, 0, 223, 713, 0, 272, 309,
	883, 0, 871, 369, 0, 422, 426, 0, 515, 898,
	0, 875, 2230, 280, 896, 718, 0, 724, 897, 730,
	895, 491, 0, 720, 721, 726, 211, 607, 514, 585,
	0, 0, 0, 889, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 0, 722, 719, 723, 729,
	717, 727, 714, 725, 0, 413, 347, 0, 564, 440,
	218, 264, 251, 293, 335, 447, 0, 0, 325, 495,
	260, 349, 0, 239, 382, 0, 471, 346, 0, 454,
	474, 0, 366, 245, 405, 461, 462, 711, 716, 0,
	732, 0, 249, 250, 371, 231, 379, 576, 542, 434,
	392, 390, 0, 357, 414, 571, 884, 0, 279, 0,
	274, 370, 510, 237, 489, 408, 375, 329, 437, 466,
	276, 261, 262, 305, 407, 295, 247, 500, 539, 543,
	541, 537, 534, 538, 535, 536, 540, 296, 533, 0,
	508, 517, 551, 531, 559, 516, 556, 526, 271, 555,
	520, 519, 565, 546, 547, 501, 561, 532, 530, 523,
	522, 518, 2228, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 207, 0, 208, 209, 210, 212, 213,
	214, 710, 215, 216, 217, 220, 221, 222, 224, 584,
	225, 226, 227, 228, 229, 230, 521, 712, 232, 233,
	234, 235, 236, 238, 240, 241, 242, 243, 244, 246,
	248, 0, 0, 0, 715, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 0, 258, 259, 263, 265, 266,
	267, 268, 269, 270, 273, 0, 275, 277, 0, 278,
	281, 0, 282, 283, 284, 285, 286, 287, 288, 289,
	525, 290, 0, 291, 292, 294, 0, 297, 298, 299,
	300, 301, 0, 302, 527, 887, 303, 304, 306, 307,
	308, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 0, 322, 323, 324, 326, 0, 327,
	328, 331, 332, 333, 334, 0, 336, 544, 0, 337,
	338, 339, 0, 0, 340, 341, 342, 343, 344, 345,
	348, 545, 350, 351, 352, 353, 354, 355, 356, 586,
	358, 359, 360, 361, 362, 363, 364, 548, 549, 365,
	367, 368, 550, 552, 553, 728, 383, 384, 385, 386,
	387, 388, 389, 391, 0, 393, 394, 395, 554, 396,
	397, 398, 399, 0, 400, 401, 402, 403, 404, 406,
	409, 410, 411, 412, 0, 415, 416, 417, 418, 419,
	420, 421, 423, 424, 425, 427, 428, 429, 587, 430,
	431, 432, 433, 890, 435, 436, 588, 438, 439, 441,
	442, 443, 444, 445, 446, 605, 0, 448, 558, 449,
	450, 451, 452, 453, 0, 455, 456, 457, 458, 459,
	460, 463, 464, 465, 467, 468, 560, 469, 470, 0,
	472, 473, 731, 475, 476, 477, 478, 479, 0, 606,
	480, 562, 481, 563, 482, 483, 484, 485, 486, 487,
	488, 490, 0, 874, 492, 493, 494, 496, 497, 498,
	499, 502, 503, 504, 505, 506, 0, 507, 509, 511,
	589, 566, 567, 568, 569, 570, 572, 573, 574, 575,
	512, 513, 529, 380, 374, 330, 372, 373, 377, 378,
	381, 0, 0, 0, 0, 0, 0, 0, 872, 0,
	0, 707, 0, 893, 846, 0, 0, 0, 888, 900,
	878, 0, 0, 879, 2225, 0, 868, 869, 2226, 206,
	0, 223, 713, 0, 272, 309, 883, 0, 871, 369,
	0, 422, 426, 77, 515, 898, 0, 875, 0, 280,
	896, 718, 0, 724, 897, 730, 895, 491, 0, 720,
	721, 726, 211, 607, 514, 585, 0, 0, 0, 889,
	74, 0, 0, 0, 75, 0, 0, 219, 0, 0,
	0, 0, 722, 719, 723, 729, 717, 727, 714, 725,
	0, 413, 347, 0, 1700, 440, 218, 264, 251, 293,
	335, 447, 0, 0, 325, 495, 260, 349, 0, 239,
	382, 0, 471, 346, 0, 454, 474, 0, 366, 245,
	405, 461, 462, 711, 716, 0, 732, 0, 249, 250,
	371, 231, 379, 576, 542, 434, 392, 390, 0, 357,
	414, 571, 884, 0, 279, 0, 274, 370, 510, 237,
	489, 408, 375, 329, 437, 466, 276, 261, 262, 305,
	407, 295, 247, 500, 539, 543, 541, 537, 534, 538,
	535, 536, 540, 296, 533, 0, 508, 517, 551, 531,
	559, 516, 556, 526, 271, 555, 520, 519, 565, 546,
	547, 501, 561, 532, 530, 523, 522, 518, 0, 196,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 207,
	0, 208, 209, 210, 212, 213, 214, 710, 215, 216,
	217, 220, 221, 222, 224, 584, 225, 226, 227, 228,
	229, 230, 521, 712, 232, 233, 234, 235, 236, 238,
	240, 241, 242, 243, 244, 246, 248, 0, 0, 0,
	715, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	0, 258, 259, 263, 265, 266, 267, 268, 269, 270,
	273, 0, 275, 277, 0, 278, 281, 0, 282, 283,
	284, 285, 286, 287, 288, 289, 525, 290, 0, 291,
	292, 294, 0, 297, 298, 299, 300, 301, 0, 302,
	527, 887, 303, 304, 306, 307, 308, 310, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 0,
	322, 323, 324, 326, 0, 327, 328, 331, 332, 333,
	334, 0, 336, 544, 0, 337, 338, 339, 0, 0,
	340, 341, 342, 343, 344, 345, 348, 545, 350, 351,
	352, 353, 354, 355, 356, 586, 358, 359, 360, 361,
	362, 363, 364, 548, 549, 365, 367, 368, 550, 552,
	553, 728, 383, 384, 385, 386, 387, 388, 389, 391,
	0, 393, 394, 395, 554, 396, 397, 398, 399, 0,
	400, 401, 402, 403, 404, 406, 409, 410, 411, 412,
	0, 415, 416, 417, 418, 419, 420, 421, 423, 424,
	425, 427, 428, 429, 587, 430, 431, 432, 433, 890,
	435, 436, 588, 438, 439, 441, 442, 443, 444, 445,
	446, 605, 0, 448, 558, 449, 450, 451, 452, 453,
	0, 455, 456, 457, 458, 459, 460, 463, 464, 465,
	467, 468, 560, 469, 470, 0, 472, 473, 731, 475,
	476, 477, 478, 479, 0, 606, 480, 562, 481, 563,
	482, 483, 484, 485, 486, 487, 488, 490, 0, 874,
	492, 493, 494, 496, 497, 498, 499, 502, 503, 504,
	505, 506, 0, 507, 509, 511, 589, 566, 567, 568,
	569, 570, 572, 573, 574, 575, 512, 513, 529, 380,
	374, 330, 372, 373, 377, 378, 381, 0, 0, 0,
	0, 0, 0, 0, 872, 0, 78, 707, 0, 893,
	846, 0, 0, 0, 888, 900, 878, 0, 0, 879,
	3995, 0, 868, 869, 0, 206, 0, 223, 713, 0,
	272, 309, 883, 0, 871, 369, 0, 422, 426, 77,
	515, 898, 0, 875, 0, 280, 896, 718, 0, 724,
	897, 730, 895, 491, 0, 720, 721, 726, 211, 607,
	514, 585, 0, 0, 0, 889, 74, 0, 0, 0,
	75, 0, 0, 219, 0, 0, 0, 0, 722, 719,
	723, 729, 717, 727, 714, 725, 0, 413, 347, 0,
	1700, 440, 218, 264, 251, 293, 335, 447, 0, 0,
	325, 495, 260, 349, 0, 239, 382, 0, 471, 346,
	0, 454, 474, 0, 366, 245, 405, 461, 462, 711,
	716, 0, 732, 0, 249, 250, 371, 231, 379, 576,
	542, 434, 392, 390, 0, 357, 414, 571, 884, 0,
	279, 0, 274, 370, 510, 237, 489, 408, 375, 329,
	437, 466, 276, 261, 262, 305, 407, 295, 247, 500,
	539, 543, 541, 537, 534, 538, 535, 536, 540, 296,
	533, 0, 508, 517, 551, 531, 559, 516, 556, 526,
	271, 555, 520, 519, 565, 546, 547, 501, 561, 532,
	530, 523, 522, 518, 0, 196, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 207, 0, 208, 209, 210,
	212, 213, 214, 710, 215, 216, 217, 220, 221, 222,
	224, 584, 225, 226, 227, 228, 229, 230, 521, 712,
	232, 233, 234, 235, 236, 238, 240, 241, 242, 243,
	244, 246, 248, 0, 0, 0, 715, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 0, 258, 259, 263,
	265, 266, 267, 268, 269, 270, 273, 0, 275, 277,
	0, 278, 281, 0, 282, 283, 284, 285, 286, 287,
	288, 289, 525, 290, 0, 291, 292, 294, 0, 297,
	298, 299, 300, 301, 0, 302, 527, 887, 303, 304,
	306, 307, 308, 310, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 0, 322, 323, 324, 326,
	0, 327, 328, 331, 332, 333, 334, 0, 336, 544,
	0, 337, 338, 339, 0, 0, 340, 341, 342, 343,
	344, 345, 348, 545, 350, 351, 352, 353, 354, 355,
	356, 586, 358, 359, 360, 361, 362, 363, 364, 548,
	549, 365, 367, 368, 550, 552, 553, 728, 383, 384,
	385, 386, 387, 388, 389, 391, 0, 393, 394, 395,
	554, 396, 397, 398, 399, 0, 400, 401, 402, 403,
	404, 406, 409, 410, 411, 412, 0, 415, 416, 417,
	418, 419, 420, 421, 423, 424, 425, 427, 428, 429,
	587, 430, 431, 432, 433, 890, 435, 436, 588, 438,
	439, 441, 442, 443, 444, 445, 446, 605, 0, 448,
	558, 449, 450, 451, 452, 453, 0, 455, 456, 457,
	458, 459, 460, 463, 464, 465, 467, 468, 560, 469,
	470, 0, 472, 473, 731, 475, 476, 477, 478, 479,
	0, 606, 480, 562, 481, 563, 482, 483, 484, 485,
	486, 487, 488, 490, 0, 874, 492, 493, 494, 496,
	497, 498, 499, 502, 503, 504, 505, 506, 0, 507,
	509, 511, 589, 566, 567, 568, 569, 570, 572, 573,
	574, 575, 512, 513, 529, 380, 374, 330, 372, 373,
	377, 378, 381, 0, 0, 0, 0, 0, 0, 0,
	872, 0, 78, 707, 0, 893, 846, 0, 0, 0,
	888, 900, 878, 0, 0, 879, 0, 0, 868, 869,
	0, 206, 0, 223, 713, 0, 272, 309, 883, 0,
	871, 369, 0, 422, 426, 0, 515, 898, 0, 875,
	0, 280, 896, 718, 0, 724, 897, 730, 895, 491,
	0, 720, 721, 726, 211, 607, 514, 585, 0, 0,
	0, 889, 0, 0, 0, 0, 0, 0, 0, 219,
	0, 0, 0, 0, 722, 719, 723, 729, 717, 727,
	714, 725, 0, 413, 347, 0, 564, 440, 218, 264,
	251, 293, 335, 447, 0, 0, 325, 495, 260, 349,
	0, 239, 382, 0, 471, 346, 0, 454, 474, 0,
	366, 245, 405, 461, 462, 711, 716, 0, 732, 0,
	249, 250, 371, 231, 379, 576, 542, 434, 392, 390,
	0, 357, 414, 571, 884, 0, 279, 0, 274, 370,
	510, 237, 489, 408, 375, 329, 437, 466, 276, 261,
	262, 305, 407, 295, 247, 500, 539, 543, 541, 537,
	534, 538, 535, 536, 540, 296, 533, 0, 508, 517,
	551, 531, 559, 516, 556, 526, 271, 555, 520, 519,
	565, 546, 547, 501, 561, 532, 530, 523, 522, 518,
	0, 196, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 207, 0, 208, 209, 210, 212, 213, 214, 710,
	215, 216, 217, 220, 221, 222, 224, 584, 225, 226,
	227, 228, 229, 230, 521, 712, 232, 233, 234, 235,
	236, 238, 240, 241, 242, 243, 244, 246, 248, 0,
	0, 0, 715, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 0, 258, 259, 263, 265, 266, 267, 268,
	269, 270, 273, 0, 275, 277, 0, 278, 281, 0,
	282, 283, 284, 285, 286, 287, 288, 289, 525, 290,
	0, 291, 292, 294, 0, 297, 298, 299, 300, 301,
	0, 302, 527, 887, 303, 304, 306, 307, 308, 310,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 0, 322, 323, 324, 326, 0, 327, 328, 331,
	332, 333, 334, 0, 336, 544, 0, 337, 338, 339,
	0, 0, 340, 341, 342, 343, 344, 345, 348, 545,
	350, 351, 352, 353, 354, 355, 356, 586, 358, 359,
	360, 361, 362, 363, 364, 548, 549, 365, 367, 368,
	550, 552, 553, 728, 383, 384, 385, 386, 387, 388,
	389, 391, 0, 393, 394, 395, 554, 396, 397, 398,
	399, 0, 400, 401, 402, 403, 404, 406, 409, 410,
	411, 412, 0, 415, 416, 417, 418, 419, 420, 421,
	423, 424, 425, 427, 428, 429, 587, 430, 431, 432,
	433, 890, 435, 436, 588, 438, 439, 441, 442, 443,
	444, 445, 446, 605, 0, 448, 558, 449, 450, 451,
	452, 453, 0, 455, 456, 457, 458, 459, 460, 463,
	464, 465, 467, 468, 560, 469, 470, 0, 472, 473,
	731, 475, 476, 477, 478, 479, 0, 606, 480, 562,
	481, 563, 482, 483, 484, 485, 486, 487, 488, 490,
	0, 874, 492, 493, 494, 496, 497, 498, 499, 502,
	503, 504, 505, 506, 0, 507, 509, 511, 589, 566,
	567, 568, 569, 570, 572, 573, 574, 575, 512, 513,
	529, 380, 374, 330, 372, 373, 377, 378, 381, 0,
	0, 0, 0, 0, 0, 0, 872, 0, 0, 707,
	0, 893, 846, 0, 0, 0, 888, 900, 878, 0,
	0, 879, 0, 0, 868, 869, 866, 206, 0, 223,
	713, 0, 272, 309, 883, 0, 871, 369, 0, 422,
	426, 0, 515, 898, 0, 875, 0, 280, 896, 718,
	0, 724, 897, 730, 895, 491, 0, 720, 721, 726,
	211, 607, 514, 585, 0, 0, 0, 889, 0, 0,
	0, 0, 0, 0, 0, 219, 0, 0, 0, 0,
	722, 719, 723, 729, 717, 727, 714, 725, 0, 413,
	347, 0, 564, 440, 218, 264, 251, 293, 335, 447,
	0, 0, 325, 495, 260, 349, 0, 239, 382, 0,
	471, 346, 0, 454, 474, 0, 366, 245, 405, 461,
	462, 711, 716, 0, 732, 0, 249, 250, 371, 231,
	379, 576, 542, 434, 392, 390, 0, 357, 414, 571,
	884, 0, 279, 0, 274, 370, 510, 237, 489, 408,
	375, 329, 437, 466, 276, 261, 262, 305, 407, 295,
	247, 500, 539, 543, 541, 537, 534, 538, 535, 536,
	540, 296, 533, 0, 508, 517, 551, 531, 559, 516,
	556, 526, 271, 555, 520, 519, 565, 546, 547, 501,
	561, 532, 530, 523, 522, 518, 0, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 207, 0, 208,
	209, 210, 212, 213, 214, 710, 215, 216, 217, 220,
	221, 222, 224, 584, 225, 226, 227, 228, 229, 230,
	521, 712, 232, 233, 234, 235, 236, 238, 240, 241,
	242, 243, 244, 246, 248, 0, 0, 0, 715, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 0, 258,
	259, 263, 265, 266, 267, 268, 269, 270, 273, 0,
	275, 277, 0, 278, 281, 0, 282, 283, 284, 285,
	286, 287, 288, 289, 525, 290, 0, 291, 292, 294,
	0, 297, 298, 299, 300, 301, 0, 302, 527, 887,
	303, 304, 306, 307, 308, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 0, 322, 323,
	324, 326, 0, 327, 328, 331, 332, 333, 334, 0,
	336, 544, 0, 337, 338, 339, 0, 0, 340, 341,
	342, 343, 344, 345, 348, 545, 350, 351, 352, 353,
	354, 355, 356, 586, 358, 359, 360, 361, 362, 363,
	364, 548, 549, 365, 367, 368, 550, 552, 553, 728,
	383, 384, 385, 386, 387, 388, 389, 391, 0, 393,
	394, 395, 554, 396, 397, 398, 399, 0, 400, 401,
	402, 403, 404, 406, 409, 410, 411, 412, 0, 415,
	416, 417, 418, 419, 420, 421, 423, 424, 425, 427,
	428, 429, 587, 430, 431, 432, 433, 890, 435, 436,
	588, 438, 439, 441, 442, 443, 444, 445, 446, 605,
	0, 448, 558, 449, 450, 451, 452, 453, 0, 455,
	456, 457, 458, 459, 460, 463, 464, 465, 467, 468,
	560, 469, 470, 0, 472, 473, 731, 475, 476, 477,
	478, 479, 0, 606, 480, 562, 481, 563, 482, 483,
	484, 485, 486, 487, 488, 490, 0, 874, 492, 493,
	494, 496, 497, 498, 499, 502, 503, 504, 505, 506,
	0, 507, 509, 511, 589, 566, 567, 568, 569, 570,
	572, 573, 574, 575, 512, 513, 529, 380, 374, 330,
	372, 373, 377, 378, 381, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 707, 0, 893, 846, 0, 0,
	0, 888, 900, 878, 0, 1705, 2215, 879, 0, 0,
	868, 869, 206, 0, 223, 713, 0, 272, 309, 883,
	0, 871, 369, 0, 422, 426, 0, 515, 898, 0,
	875, 0, 280, 896, 718, 0, 724, 897, 730, 895,
	491, 0, 720, 721, 726, 211, 607, 514, 585, 0,
	0, 0, 889, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 722, 719, 723, 729, 717,
	727, 714, 725, 0, 413, 347, 0, 564, 440, 218,
	264, 251, 293, 335, 447, 0, 0, 325, 495, 260,
	349, 0, 239, 382, 0, 471, 346, 0, 454, 474,
	0, 366, 245, 405, 461, 462, 711, 716, 0, 732,
	0, 249, 250, 371, 231, 379, 576, 542, 434, 392,
	390, 0, 357, 414, 571, 884, 0, 279, 0, 274,
	370, 510, 237, 489, 408, 375, 329, 437, 466, 276,
	261, 262, 305, 407, 295, 247, 500, 539, 543, 541,
	537, 534, 538, 535, 536, 540, 296, 533, 0, 508,
	517, 551, 531, 559, 516, 556, 526, 271, 555, 520,
	519, 565, 546, 547, 501, 561, 532, 530, 523, 522,
	518, 0, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 207, 0, 208, 209, 210, 212, 213, 214,
	710, 215, 216, 217, 220, 221, 222, 224, 584, 225,
	226, 227, 228, 229, 230, 521, 712, 232, 233, 234,
	235, 236, 238, 240, 241, 242, 243, 244, 246, 248,
	0, 0, 0, 715, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 0, 258, 259, 263, 265, 266, 267,
	268, 269, 270, 273, 0, 275, 277, 0, 278, 281,
	0, 282, 283, 284, 285, 286, 287, 288, 289, 525,
	290, 0, 291, 292, 294, 0, 297, 298, 299, 300,
	301, 0, 302, 527, 887, 303, 304, 306, 307, 308,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 323, 324, 326, 0, 327, 328,
	331, 332, 333, 334, 0, 336, 544, 0, 337, 338,
	339, 0, 0, 340, 341, 342, 343, 344, 345, 348,
	545, 350, 351, 352, 353, 354, 355, 356, 586, 358,
	359, 360, 361, 362, 363, 364, 548, 549, 365, 367,
	368, 550, 552, 553, 728, 383, 384, 385, 386, 387,
	388, 389, 391, 0, 393, 394, 395, 554, 396, 397,
	398, 399, 0, 400, 401, 402, 403, 404, 406, 409,
	410, 411, 412, 0, 415, 416, 417, 418, 419, 420,
	421, 423, 424, 425, 427, 428, 429, 587, 430, 431,
	432, 433, 890, 435, 436, 588, 438, 439, 441, 442,
	443, 444, 445, 446, 605, 0, 448, 558, 449, 450,
	451, 452, 453, 0, 455, 456, 457, 458, 459, 460,
	463, 464, 465, 467, 468, 560, 469, 470, 0, 472,
	473, 731, 475, 476, 477, 478, 479, 0, 606, 480,
	562, 481, 563, 482, 483, 484, 485, 486, 487, 488,
	490, 0, 874, 492, 493, 494, 496, 497, 498, 499,
	502, 503, 504, 505, 506, 0, 507, 509, 511, 589,
	566, 567, 568, 569, 570, 572, 573, 574, 575, 512,
	513, 529, 380, 374, 330, 372, 373, 377, 378, 381,
	0, 0, 0, 0, 0, 0, 0, 872, 0, 707,
	0, 893, 846, 0, 0, 0, 888, 900, 878, 0,
	0, 0, 879, 3413, 0, 868, 869, 206, 0, 223,
	713, 0, 272, 309, 883, 0, 871, 369, 0, 422,
	426, 0, 515, 898, 0, 875, 0, 280, 896, 718,
	0, 724, 897, 730, 895, 491, 0, 720, 721, 726,
	211, 607, 514, 585, 0, 0, 0, 889, 0, 0,
	0, 0, 0, 0, 0, 219, 0, 0, 0, 0,
	722, 719, 723, 729, 717, 727, 714, 725, 0, 413,
	347, 0, 564, 440, 218, 264, 251, 293, 335, 447,
	0, 0, 325, 495, 260, 349, 0, 239, 382, 0,
	471, 346, 0, 454, 474, 0, 366, 245, 405, 461,
	462, 711, 716, 0, 732, 0, 249, 250, 371, 231,
	379, 576, 542, 434, 392, 390, 0, 357, 414, 571,
	884, 0, 279, 0, 274, 370, 510, 237, 489, 408,
	375, 329, 437, 466, 276, 261, 262, 305, 407, 295,
	247, 500, 539, 543, 541, 537, 534, 538, 535, 536,
	540, 296, 533, 0, 508, 517, 551, 531, 559, 516,
	556, 526, 271, 555, 520, 519, 565, 546, 547, 501,
	561, 532, 530, 523, 522, 518, 3098, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 207, 0, 208,
	209, 210, 212, 213, 214, 710, 215, 216, 217, 220,
	221, 222, 224, 584, 225, 226, 227, 228, 229, 230,
	521, 712, 232, 233, 234, 235, 236, 238, 240, 241,
	242, 243, 244, 246, 248, 0, 0, 0, 715, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 0, 258,
	259, 263, 265, 266, 267, 268, 269, 270, 273, 0,
	275, 277, 0, 278, 281, 0, 282, 283, 284, 285,
	286, 287, 288, 289, 525, 290, 0, 291, 292, 294,
	0, 297, 298, 299, 300, 301, 0, 302, 527, 887,
	303, 304, 306, 307, 308, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 0, 322, 323,
	324, 326, 0, 327, 328, 331, 332, 333, 334, 0,
	336, 544, 0, 337, 338, 339, 0, 0, 340, 341,
	342, 343, 344, 345, 348, 545, 350, 351, 352, 353,
	354, 355, 356, 586, 358, 359, 360, 361, 362, 363,
	364, 548, 549, 365, 367, 368, 550, 552, 553, 728,
	383, 384, 385, 386, 387, 388, 389, 391, 0, 393,
	394, 395, 554, 396, 397, 398, 399, 0, 400, 401,
	402, 403, 404, 406, 409, 410, 411, 412, 0, 415,
	416, 417, 418, 419, 420, 421, 423, 424, 425, 427,
	428, 429, 587, 430, 431, 432, 433, 890, 435, 436,
	588, 438, 439, 441, 442, 443, 444, 445, 446, 605,
	0, 448, 558, 449, 450, 451, 452, 453, 0, 455,
	456, 457, 458, 459, 460, 463, 464, 465, 467, 468,
	560, 469, 470, 0, 472, 473, 731, 475, 476, 477,
	478, 479, 0, 606, 480, 562, 481, 563, 482, 483,
	484, 485, 486, 487, 488, 490, 0, 874, 492, 493,
	494, 496, 497, 498, 499, 502, 503, 504, 505, 506,
	0, 507, 509, 511, 589, 566, 567, 568, 569, 570,
	572, 573, 574, 575, 512, 513, 529, 380, 374, 330,
	372, 373, 377, 378, 381, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 707, 0, 893, 846, 0, 0,
	0, 888, 900, 878, 0, 0, 0, 879, 0, 0,
	868, 869, 206, 0, 223, 713, 0, 272, 309, 883,
	0, 871, 369, 0, 422, 426, 0, 515, 898, 0,
	875, 0, 280, 896, 718, 0, 724, 897, 730, 895,
	491, 0, 720, 721, 726, 211, 607, 514, 585, 0,
	0, 0, 889, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 722, 719, 723, 729, 717,
	727, 714, 725, 0, 413, 347, 0, 564, 440, 218,
	264, 251, 293, 335, 447, 0, 0, 325, 495, 260,
	349, 0, 239, 382, 0, 471, 346, 0, 454, 474,
	0, 366, 245, 405, 461, 462, 711, 716, 0, 732,
	0, 249, 250, 371, 231, 379, 576, 542, 434, 392,
	390, 0, 357, 414, 571, 884, 0, 279, 0, 274,
	370, 510, 237, 489, 408, 375, 329, 437, 466, 276,
	261, 262, 305, 407, 295, 247, 500, 539, 543, 541,
	537, 534, 538, 535, 536, 540, 296, 533, 0, 508,
	517, 551, 531, 559, 516, 556, 526, 271, 555, 520,
	519, 565, 546, 547, 501, 561, 532, 530, 523, 522,
	518, 0, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 207, 0, 208, 209, 210, 212, 213, 214,
	710, 215, 216, 217, 220, 221, 222, 224, 584, 225,
	226, 227, 228, 229, 230, 521, 712, 232, 233, 234,
	235, 236, 238, 240, 241, 242, 243, 244, 246, 248,
	0, 0, 0, 715, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 0, 258, 259, 263, 265, 266, 267,
	268, 269, 270, 273, 0, 275, 277, 0, 278, 281,
	0, 282, 283, 284, 285, 286, 287, 288, 289, 525,
	290, 0, 291, 292, 294, 0, 297, 298, 299, 300,
	301, 0, 302, 527, 887, 303, 304, 306, 307, 308,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 323, 324, 326, 0, 327, 328,
	331, 332, 333, 334, 0, 336, 544, 0, 337, 338,
	339, 0, 0, 340, 341, 342, 343, 344, 345, 348,
	545, 350, 351, 352, 353, 354, 355, 356, 586, 358,
	359, 360, 361, 362, 363, 364, 548, 549, 365, 367,
	368, 550, 552, 553, 728, 383, 384, 385, 386, 387,
	388, 389, 391, 0, 393, 394, 395, 554, 396, 397,
	398, 399, 0, 400, 401, 402, 403, 404, 406, 409,
	410, 411, 412, 0, 415, 416, 417, 418, 419, 420,
	421, 423, 424, 425, 427, 428, 429, 587, 430, 431,
	432, 433, 890, 435, 436, 588, 438, 439, 441, 442,
	443, 444, 445, 446, 605, 0, 448, 558, 449, 450,
	451, 452, 453, 0, 455, 456, 457, 458, 459, 460,
	463, 464, 465, 467, 468, 560, 469, 470, 0, 472,
	473, 731, 475, 476, 477, 478, 479, 0, 606, 480,
	562, 481, 563, 482, 483, 484, 485, 486, 487, 488,
	490, 0, 874, 492, 493, 494, 496, 497, 498, 499,
	502, 503, 504, 505, 506, 0, 507, 509, 511, 589,
	566, 567, 568, 569, 570, 572, 573, 574, 575, 512,
	513, 529, 380, 374, 330, 372, 373, 377, 378, 381,
	0, 0, 0, 0, 0, 0, 0, 872, 0, 707,
	0, 893, 846, 0, 0, 0, 888, 900, 878, 0,
	0, 0, 879, 3090, 0, 868, 869, 206, 0, 223,
	713, 0, 272, 309, 883, 0, 871, 369, 0, 422,
	426, 0, 515, 898, 0, 875, 0, 280, 896, 718,
	0, 724, 897, 730, 895, 491, 0, 720, 721, 726,
	211, 607, 514, 585, 0, 0, 0, 889, 0, 0,
	0, 0, 0, 0, 0, 219, 0, 0, 0, 0,
	722, 719, 723, 729, 717, 727, 714, 725, 0, 413,
	347, 0, 564, 440, 218, 264, 251, 293, 335, 447,
	0, 0, 325, 495, 260, 349, 0, 239, 382, 0,
	471, 346, 0, 454, 474, 0, 366, 245, 405, 461,
	462, 711, 716, 0, 732, 0, 249, 250, 371, 231,
	379, 576, 542, 434, 392, 390, 0, 357, 414, 571,
	884, 0, 279, 0, 274, 370, 510, 237, 489, 408,
	375, 329, 437, 466, 276, 261, 262, 305, 407, 295,
	247, 500, 539, 543, 541, 537, 534, 538, 535, 536,
	540, 296, 533, 0, 508, 517, 551, 531, 559, 516,
	556, 526, 271, 555, 520, 519, 565, 546, 547, 501,
	561, 532, 530, 523, 522, 518, 0, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 207, 0, 208,
	209, 210, 212, 213, 214, 710, 215, 216, 217, 220,
	221, 222, 224, 584, 225, 226, 227, 228, 229, 230,
	521, 712, 232, 233, 234, 235, 236, 238, 240, 241,
	242, 243, 244, 246, 248, 0, 0, 0, 715, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 0, 258,
	259, 263, 265, 266, 267, 268, 269, 270, 273, 0,
	275, 277, 0, 278, 281, 0, 282, 283, 284, 285,
	286, 287, 288, 289, 525, 290, 0, 291, 292, 294,
	0, 297, 298, 299, 300, 301, 0, 302, 527, 887,
	303, 304, 306, 307, 308, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 0, 322, 323,
	324, 326, 0, 327, 328, 331, 332, 333, 334, 0,
	336, 544, 0, 337, 338, 339, 0, 0, 340, 341,
	342, 343, 344, 345, 348, 545, 350, 351, 352, 353,
	354, 355, 356, 586, 358, 359, 360, 361, 362, 363,
	364, 548, 549, 365, 367, 368, 550, 552, 553, 728,
	383, 384, 385, 386, 387, 388, 389, 391, 0, 393,
	394, 395, 554, 396, 397, 398, 399, 0, 400, 401,
	402, 403, 404, 406, 409, 410, 411, 412, 0, 415,
	416, 417, 418, 419, 420, 421, 423, 424, 425, 427,
	428, 429, 587, 430, 431, 432, 433, 890, 435, 436,
	588, 438, 439, 441, 442, 443, 444, 445, 446, 605,
	0, 448, 558, 449, 450, 451, 452, 453, 0, 455,
	456, 457, 458, 459, 460, 463, 464, 465, 467, 468,
	560, 469, 470, 0, 472, 473, 731, 475, 476, 477,
	478, 479, 0, 606, 480, 562, 481, 563, 482, 483,
	484, 485, 486, 487, 488, 490, 0, 874, 492, 493,
	494, 496, 497, 498, 499, 502, 503, 504, 505, 506,
	0, 507, 509, 511, 589, 566, 567, 568, 569, 570,
	572, 573, 574, 575, 512, 513, 529, 380, 374, 330,
	372, 373, 377, 378, 381, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 707, 0, 893, 846, 0, 0,
	0, 888, 900, 878, 0, 0, 0, 879, 2220, 0,
	868, 869, 206, 0, 223, 713, 0, 272, 309, 883,
	0, 871, 369, 0, 422, 426, 0, 515, 898, 0,
	875, 0, 280, 896, 718, 0, 724, 897, 730, 895,
	491, 0, 720, 721, 726, 211, 607, 514, 585, 0,
	0, 0, 889, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 722, 719, 723, 729, 717,
	727, 714, 725, 0, 413, 347, 0, 564, 440, 218,
	264, 251, 293, 335, 447, 0, 0, 325, 495, 260,
	349, 0, 239, 382, 0, 471, 346, 0, 454, 474,
	0, 366, 245, 405, 461, 462, 711, 716, 0, 732,
	0, 249, 250, 371, 231, 379, 576, 542, 434, 392,
	390, 0, 357, 414, 571, 884, 0, 279, 0, 274,
	370, 510, 237, 489, 408, 375, 329, 437, 466, 276,
	261, 262, 305, 407, 295, 247, 500, 539, 543, 541,
	537, 534, 538, 535, 536, 540, 296, 533, 0, 508,
	517, 551, 531, 559, 516, 556, 526, 271, 555, 520,
	519, 565, 546, 547, 501, 561, 532, 530, 523, 522,
	518, 0, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 207, 0, 208, 209, 210, 212, 213, 214,
	710, 215, 216, 217, 220, 221, 222, 224, 584, 225,
	226, 227, 228, 229, 230, 521, 712, 232, 233, 234,
	235, 236, 238, 240, 241, 242, 243, 244, 246, 248,
	0, 0, 0, 715, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 0, 258, 259, 263, 265, 266, 267,
	268, 269, 270, 273, 0, 275, 277, 0, 278, 281,
	0, 282, 283, 284, 285, 286, 287, 288, 289, 525,
	290, 0, 291, 292, 294, 0, 297, 298, 299, 300,
	301, 0, 302, 527, 887, 303, 304, 306, 307, 308,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 323, 324, 326, 0, 327, 328,
	331, 332, 333, 334, 0, 336, 544, 0, 337, 338,
	339, 0, 0, 340, 341, 342, 343, 344, 345, 348,
	545, 350, 351, 352, 353, 354, 355, 356, 586, 358,
	359, 360, 361, 362, 363, 364, 548, 549, 365, 367,
	368, 550, 552, 553, 728, 383, 384, 385, 386, 387,
	388, 389, 391, 0, 393, 394, 395, 554, 396, 397,
	398, 399, 0, 400, 401, 402, 403, 404, 406, 409,
	410, 411, 412, 0, 415, 416, 417, 418, 419, 420,
	421, 423, 424, 425, 427, 428, 429, 587, 430, 431,
	432, 433, 890, 435, 436, 588, 438, 439, 441, 442,
	443, 444, 445, 446, 605, 0, 448, 558, 449, 450,
	451, 452, 453, 0, 455, 456, 457, 458, 459, 460,
	463, 464, 465, 467, 468, 560, 469, 470, 0, 472,
	473, 731, 475, 476, 477, 478, 479, 0, 606, 480,
	562, 481, 563, 482, 483, 484, 485, 486, 487, 488,
	490, 0, 874, 492, 493, 494, 496, 497, 498, 499,
	502, 503, 504, 505, 506, 0, 507, 509, 511, 589,
	566, 567, 568, 569, 570, 572, 573, 574, 575, 512,
	513, 529, 380, 374, 330, 372, 373, 377, 378, 381,
	0, 0, 0, 0, 0, 0, 0, 872, 0, 707,
	0, 893, 846, 0, 0, 0, 888, 900, 878, 0,
	0, 0, 879, 0, 0, 868, 869, 206, 0, 223,
	713, 0, 272, 309, 883, 0, 871, 369, 0, 422,
	426, 0, 515, 898, 0, 875, 0, 280, 896, 718,
	0, 724, 897, 730, 895, 491, 0, 720, 721, 726,
	211, 607, 514, 585, 0, 0, 0, 889, 0, 0,
	0, 0, 0, 0, 0, 219, 0, 0, 0, 0,
	722, 719, 723, 729, 717, 727, 714, 725, 0, 413,
	347, 0, 564, 440, 218, 264, 251, 293, 335, 447,
	0, 0, 325, 495, 260, 349, 0, 239, 382, 0,
	471, 346, 0, 454, 474, 0, 366, 245, 405, 461,
	462, 711, 716, 0, 732, 0, 249, 250, 371, 231,
	379, 576, 542, 434, 392, 390, 0, 357, 414, 571,
	884, 0, 279, 0, 274, 370, 510, 237, 489, 408,
	375, 329, 437, 466, 276, 261, 262, 305, 407, 295,
	247, 500, 539, 543, 541, 537, 534, 538, 535, 536,
	540, 296, 533, 0, 508, 517, 551, 531, 559, 516,
	556, 526, 271, 555, 520, 519, 565, 546, 547, 501,
	561, 532, 530, 523, 522, 518, 0, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 207, 0, 208,
	209, 210, 212, 213, 214, 710, 215, 216, 217, 220,
	221, 222, 224, 584, 225, 226, 227, 228, 229, 230,
	521, 712, 232, 233, 234, 235, 236, 238, 240, 241,
	242, 243, 244, 246, 3835, 0, 0, 0, 715, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 0, 258,
	259, 263, 265, 266, 267, 268, 269, 270, 273, 0,
	275, 277, 0, 278, 281, 0, 282, 283, 284, 285,
	286, 287, 288, 289, 525, 290, 0, 291, 292, 294,
	0, 297, 298, 299, 300, 301, 0, 302, 527, 3837,
	303, 304, 306, 307, 308, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 0, 322, 323,
	324, 326, 0, 327, 328, 331, 332, 333, 334, 0,
	336, 544, 0, 337, 338, 339, 0, 0, 340, 341,
	342, 343, 344, 345, 348, 545, 350, 351, 352, 353,
	354, 355, 356, 586, 358, 359, 360, 361, 362, 363,
	364, 548, 549, 365, 367, 368, 550, 552, 553, 728,
	383, 384, 385, 386, 387, 388, 389, 391, 0, 393,
	394, 395, 554, 396, 397, 398, 399, 0, 400, 401,
	402, 403, 404, 406, 409, 410, 411, 412, 0, 415,
	416, 417, 418, 419, 420, 421, 423, 424, 425, 427,
	428, 429, 587, 430, 3836, 432, 433, 890, 435, 436,
	588, 438, 439, 441, 442, 443, 444, 445, 446, 605,
	0, 448, 558, 449, 450, 451, 452, 453, 0, 455,
	456, 457, 458, 459, 460, 463, 464, 465, 467, 468,
	560, 469, 470, 0, 472, 473, 731, 475, 476, 477,
	478, 479, 0, 606, 480, 562, 481, 563, 482, 483,
	484, 485, 486, 487, 488, 490, 0, 874, 492, 493,
	494, 496, 497, 498, 499, 502, 503, 504, 505, 506,
	0, 507, 509, 511, 589, 566, 567, 568, 569, 570,
	572, 573, 574, 575, 512, 513, 529, 380, 374, 330,
	372, 373, 377, 378, 381, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 707, 0, 893, 846, 0, 0,
	0, 888, 900, 878, 0, 0, 0, 3834, 0, 0,
	868, 869, 206, 0, 223, 713, 0, 272, 309, 883,
	0, 871, 369, 0, 422, 426, 0, 515, 898, 0,
	875, 0, 280, 896, 718, 0, 724, 897, 730, 895,
	491, 0, 720, 721, 726, 211, 607, 514, 585, 0,
	0, 0, 889, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 722, 719, 723, 729, 717,
	727, 714, 725, 0, 413, 347, 0, 564, 440, 218,
	264, 251, 293, 335, 447, 0, 0, 325, 495, 260,
	349, 0, 239, 382, 0, 471, 346, 0, 454, 474,
	0, 366, 245, 405, 461, 462, 711, 716, 0, 732,
	0, 2723, 250, 371, 231, 379, 576, 542, 434, 392,
	390, 0, 357, 414, 571, 884, 0, 279, 0, 274,
	370, 510, 237, 489, 408, 375, 329, 437, 466, 276,
	261, 262, 305, 407, 295, 247, 500, 539, 543, 541,
	537, 534, 538, 535, 536, 540, 296, 533, 0, 508,
	517, 551, 531, 559, 516, 556, 526, 271, 555, 520,
	519, 565, 546, 547, 501, 561, 532, 530, 523, 522,
	518, 0, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 207, 0, 208, 209, 210, 212, 213, 214,
	710, 215, 216, 217, 220, 221, 222, 224, 584, 225,
	226, 227, 228, 229, 230, 521, 712, 232, 233, 234,
	235, 236, 238, 240, 241, 242, 243, 244, 246, 248,
	0, 0, 0, 715, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 0, 258, 259, 263, 265, 266, 267,
	268, 269, 270, 273, 0, 275, 277, 0, 278, 281,
	0, 282, 283, 284, 285, 286, 287, 288, 289, 525,
	290, 0, 291, 292, 294, 0, 297, 298, 299, 300,
	301, 0, 302, 527, 887, 303, 304, 306, 307, 308,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 323, 324, 326, 0, 327, 328,
	331, 332, 333, 334, 0, 336, 544, 0, 337, 338,
	339, 0, 0, 340, 341, 342, 343, 344, 345, 348,
	545, 350, 351, 352, 353, 354, 355, 356, 586, 358,
	359, 360, 361, 362, 363, 364, 548, 549, 365, 367,
	368, 550, 552, 553, 728, 383, 384, 385, 386, 387,
	388, 389, 391, 0, 393, 394, 395, 554, 396, 397,
	398, 399, 0, 400, 401, 402, 403, 404, 406, 409,
	410, 411, 412, 0, 415, 416, 417, 418, 419, 420,
	421, 423, 424, 425, 427, 428, 429, 587, 430, 431,
	432, 433, 890, 435, 436, 588, 438, 439, 441, 442,
	443, 444, 445, 446, 605, 0, 448, 558, 449, 450,
	451, 452, 453, 0, 455, 456, 457, 458, 459, 460,
	463, 464, 465, 467, 468, 560, 469, 470, 0, 472,
	473, 731, 475, 476, 477, 478, 479, 0, 606, 480,
	562, 481, 563, 482, 483, 484, 485, 486, 487, 488,
	490, 0, 874, 492, 493, 494, 496, 497, 498, 499,
	502, 503, 504, 505, 506, 0, 507, 509, 511, 589,
	566, 567, 568, 569, 570, 572, 573, 574, 575, 512,
	513, 529, 380, 374, 330, 372, 373, 377, 378, 381,
	0, 0, 0, 0, 0, 0, 0, 872, 0, 707,
	0, 893, 846, 0, 0, 0, 0, 900, 878, 0,
	0, 0, 879, 0, 0, 868, 869, 206, 0, 223,
	713, 0, 272, 309, 883, 0, 0, 369, 0, 422,
	426, 0, 515, 898, 0, 3659, 0, 280, 896, 718,
	0, 724, 897, 730, 895, 491, 0, 720, 721, 726,
	211, 607, 514, 585, 0, 0, 0, 376, 0, 0,
	0, 0, 0, 0, 0, 219, 0, 0, 0, 0,
	722, 719, 723, 729, 717, 727, 714, 725, 0, 413,
	347, 0, 564, 440, 218, 264, 251, 293, 335, 447,
	0, 0, 325, 495, 260, 349, 0, 239, 382, 0,
	471, 346, 0, 454, 474, 0, 366, 245, 405, 461,
	462, 711, 716, 0, 732, 0, 249, 250, 371, 231,
	379, 576, 542, 434, 392, 390, 0, 357, 414, 571,
	884, 0, 279, 0, 274, 370, 510, 237, 489, 408,
	375, 329, 437, 466, 276, 261, 262, 305, 407, 295,
	247, 500, 539, 543, 541, 537, 534, 538, 535, 536,
	540, 296, 533, 0, 508, 517, 551, 531, 559, 516,
	556, 526, 271, 555, 520, 519, 565, 546, 547, 501,
	561, 532, 530, 523, 522, 518, 0, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 207, 0, 208,
	209, 210, 212, 213, 214, 710, 215, 216, 217, 220,
	221, 222, 224, 584, 225, 226, 227, 228, 229, 230,
	521, 712, 232, 233, 234, 235, 236, 238, 240, 241,
	242, 243, 244, 246, 248, 0, 0, 0, 715, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 0, 258,
	259, 263, 265, 266, 267, 268, 269, 270, 273, 0,
	275, 277, 0, 278, 281, 0, 282, 283, 284, 285,
	286, 287, 288, 289, 525, 290, 0, 291, 292, 294,
	0, 297, 298, 299, 300, 301, 0, 302, 527, 887,
	303, 304, 306, 307, 308, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 0, 322, 323,
	324, 326, 0, 327, 328, 331, 332, 333, 334, 0,
	336, 544, 0, 337, 338, 339, 0, 0, 340, 341,
	342, 343, 344, 345, 348, 545, 350, 351, 352, 353,
	354, 355, 356, 586, 358, 359, 360, 361, 362, 363,
	364, 548, 549, 365, 367, 368, 550, 552, 553, 728,
	383, 384, 385, 386, 387, 388, 389, 391, 0, 393,
	394, 395, 554, 396, 397, 398, 399, 0, 400, 401,
	402, 403, 404, 406, 409, 410, 411, 412, 0, 415,
	416, 417, 418, 419, 420, 421, 423, 424, 425, 427,
	428, 429, 587, 430, 431, 432, 433, 2673, 435, 436,
	588, 438, 439, 441, 442, 443, 444, 445, 446, 605,
	0, 448, 558, 449, 450, 451, 452, 453, 0, 455,
	456, 457, 458, 459, 460, 463, 464, 465, 467, 468,
	560, 469, 470, 0, 472, 473, 731, 475, 476, 477,
	478, 479, 0, 606, 480, 562, 481, 563, 482, 483,
	484, 485, 486, 487, 488, 490, 0, 0, 492, 493,
	494, 496, 497, 498, 499, 502, 503, 504, 505, 506,
	0, 507, 509, 511, 589, 566, 567, 568, 569, 570,
	572, 573, 574, 575, 512, 513, 529, 380, 374, 330,
	372, 373, 377, 378, 381, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 707, 0, 893, 846, 0, 0,
	0, 0, 900, 878, 0, 0, 0, 2672, 0, 0,
	2670, 2671, 206, 0, 223, 713, 0, 272, 309, 883,
	0, 0, 369, 0, 422, 426, 0, 515, 898, 0,
	0, 0, 280, 896, 718, 0, 724, 897, 730, 895,
	491, 0, 720, 721, 726, 211, 607, 514, 585, 0,
	0, 0, 376, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 722, 719, 723, 729, 717,
	727, 714, 725, 0, 413, 347, 0, 564, 440, 218,
	264, 251, 293, 335, 447, 0, 0, 325, 495, 260,
	349, 0, 239, 382, 0, 471, 346, 0, 454, 474,
	0, 366, 245, 405, 461, 462, 711, 716, 0, 732,
	0, 249, 250, 371, 231, 379, 576, 542, 434, 392,
	390, 0, 357, 414, 571, 884, 0, 279, 0, 274,
	370, 510, 237, 489, 408, 375, 329, 437, 466, 276,
	261, 262, 305, 407, 295, 247, 500, 539, 543, 541,
	537, 534, 538, 535, 536, 540, 296, 533, 0, 508,
	517, 551, 531, 559, 516, 556, 526, 271, 555, 520,
	519, 565, 546, 547, 501, 561, 532, 530, 523, 522,
	518, 0, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 207, 0, 208, 209, 210, 212, 213, 214,
	710, 215, 216, 217, 220, 221, 222, 224, 584, 225,
	226, 227, 228, 229, 230, 521, 712, 232, 233, 234,
	235, 236, 238, 240, 241, 242, 243, 244, 246, 248,
	0, 0, 0, 715, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 0, 258, 259, 263, 265, 266, 267,
	268, 269, 270, 273, 0, 275, 277, 0, 278, 281,
	0, 282, 283, 284, 285, 286, 287, 288, 289, 525,
	290, 0, 291, 292, 294, 0, 297, 298, 299, 300,
	301, 0, 302, 527, 887, 303, 304, 306, 307, 308,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 323, 324, 326, 0, 327, 328,
	331, 332, 333, 334, 0, 336, 544, 0, 337, 338,
	339, 0, 0, 340, 341, 342, 343, 344, 345, 348,
	545, 350, 351, 352, 353, 354, 355, 356, 586, 358,
	359, 360, 361, 362, 363, 364, 548, 549, 365, 367,
	368, 550, 552, 553, 728, 383, 384, 385, 386, 387,
	388, 389, 391, 0, 393, 394, 395, 554, 396, 397,
	398, 399, 0, 400, 401, 402, 403, 404, 406, 409,
	410, 411, 412, 0, 415, 416, 417, 418, 419, 420,
	421, 423, 424, 425, 427, 428, 429, 587, 430, 431,
	432, 433, 2673, 435, 436, 588, 438, 439, 441, 442,
	443, 444, 445, 446, 605, 0, 448, 558, 449, 450,
	451, 452, 453, 0, 455, 456, 457, 458, 459, 460,
	463, 464, 465, 467, 468, 560, 469, 470, 0, 472,
	473, 731, 475, 476, 477, 478, 479, 0, 606, 480,
	562, 481, 563, 482, 483, 484, 485, 486, 487, 488,
	490, 0, 0, 492, 493, 494, 496, 497, 498, 499,
	502, 503, 504, 505, 506, 0, 507, 509, 511, 589,
	566, 567, 568, 569, 570, 572, 573, 574, 575, 512,
	513, 529, 380, 374, 330, 372, 373, 377, 378, 381,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 745,
	0, 1184, 846, 0, 0, 0, 0, 900, 0, 0,
	0, 0, 2672, 0, 0, 2670, 2671, 206, 0, 223,
	713, 0, 272, 309, 524, 0, 0, 369, 0, 422,
	426, 0, 515, 0, 0, 3886, 0, 280, 1181, 718,
	0, 724, 0, 730, 1180, 491, 0, 720, 721, 726,
	211, 607, 514, 585, 0, 0, 0, 376, 0, 0,
	0, 0, 0, 0, 0, 219, 0, 0, 0, 1182,
	722, 719, 723, 729, 717, 727, 714, 725, 0, 413,
	347, 0, 564, 440, 218, 264, 251, 293, 335, 447,
	0, 0, 325, 495, 260, 349, 0, 239, 382, 0,
	471, 346, 0, 454, 474, 0, 366, 245, 405, 461,
	462, 711, 716, 0, 732, 0, 249, 250, 371, 231,
	379, 576, 542, 434, 392, 390, 0, 357, 414, 571,
	0, 0, 279, 0, 274, 370, 510, 237, 489, 408,
	375, 329, 437, 466, 276, 261, 262, 305, 407, 295,
	247, 500, 539, 543, 541, 537, 534, 538, 535, 536,
	540, 296, 533, 0, 508, 517, 551, 531, 559, 516,
	556, 526, 271, 555, 520, 519, 565, 546, 547, 501,
	561, 532, 530, 523, 522, 518, 0, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 207, 0, 208,
	209, 210, 212, 213, 214, 710, 215, 216, 217, 220,
	221, 222, 224, 584, 225, 226, 227, 228, 229, 230,
	521, 712, 232, 233, 234, 235, 236, 238, 240, 241,
	242, 243, 244, 246, 248, 0, 0, 0, 715, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 0, 258,
	259, 263, 265, 266, 267, 268, 269, 270, 273, 0,
	275, 277, 0, 278, 281, 0, 282, 283, 284, 285,
	286, 287, 288, 289, 525, 290, 0, 291, 292, 294,
	0, 297, 298, 299, 300, 301, 0, 302, 527, 528,
	303, 304, 306, 307, 308, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 0, 322, 323,
	324, 326, 0, 327, 328, 331, 332, 333, 334, 0,
	336, 544, 0, 337, 338, 339, 0, 0, 340, 341,
	342, 343, 344, 345, 348, 545, 350, 351, 352, 353,
	354, 355, 356, 586, 358, 359, 360, 361, 362, 363,
	364, 548, 549, 365, 367, 368, 550, 552, 553, 728,
	383, 384, 385, 386, 387, 388, 389, 391, 0, 393,
	394, 395, 554, 396, 397, 398, 399, 0, 400, 401,
	402, 403, 404, 406, 409, 410, 411, 412, 0, 415,
	416, 417, 418, 419, 420, 421, 423, 424, 425, 427,
	428, 429, 587, 430, 431, 432, 433, 557, 435, 436,
	588, 438, 439, 441, 442, 443, 444, 445, 446, 605,
	0, 448, 558, 449, 450, 451, 452, 453, 0, 455,
	456, 457, 458, 459, 460, 463, 464, 465, 467, 468,
	560, 469, 470, 0, 472, 473, 731, 475, 476, 477,
	478, 479, 0, 606, 480, 562, 481, 563, 482, 483,
	484, 485, 486, 487, 488, 490, 0, 0, 492, 493,
	494, 496, 497, 498, 499, 502, 503, 504, 505, 506,
	0, 507, 509, 511, 589, 566, 567, 568, 569, 570,
	572, 573, 574, 575, 512, 513, 529, 380, 374, 330,
	372, 373, 377, 378, 381, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 745, 0, 1184, 846, 0,
	0, 0, 0, 900, 0, 0, 0, 3887, 0, 0,
	1185, 1186, 3885, 206, 0, 223, 713, 0, 272, 309,
	524, 0, 0, 369, 0, 422, 426, 0, 515, 0,
	0, 1190, 0, 280, 1181, 718, 0, 724, 0, 730,
	1180, 491, 0, 720, 721, 726, 211, 607, 514, 585,
	0, 0, 0, 376, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 1182, 722, 719, 723, 729,
	717, 727, 714, 725, 0, 413, 347, 0, 564, 440,
	218, 264, 251, 293, 335, 447, 0, 0, 325, 495,
	260, 349, 0, 239, 382, 0, 471, 346, 0, 454,
	474, 0, 366, 245, 405, 461, 462, 711, 716, 0,
	732, 0, 249, 250, 371, 231, 379, 576, 542, 434,
	392, 390, 0, 357, 414, 571, 0, 0, 279, 0,
	274, 370, 510, 237, 489, 408, 375, 329, 437, 466,
	276, 261, 262, 305, 407, 295, 247, 500, 539, 543,
	541, 537, 534, 538, 535, 536, 540, 296, 533, 0,
	508, 517, 551, 531, 559, 516, 556, 526, 271, 555,
	520, 519, 565, 546, 547, 501, 561, 532, 530, 523,
	522, 518, 0, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 207, 0, 208, 209, 210, 212, 213,
	214, 710, 215, 216, 217, 220, 221, 222, 224, 584,
	225, 226, 227, 228, 229, 230, 521, 712, 232, 233,
	234, 235, 236, 238, 240, 241, 242, 243, 244, 246,
	248, 0, 0, 0, 715, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 0, 258, 259, 263, 265, 266,
	267, 268, 269, 270, 273, 0, 275, 277, 0, 278,
	281, 0, 282, 283, 284, 285, 286, 287, 288, 289,
	525, 290, 0, 291, 292, 294, 0, 297, 298, 299,
	300, 301, 0, 302, 527, 528, 303, 304, 306, 307,
	308, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 0, 322, 323, 324, 326, 0, 327,
	328, 331, 332, 333, 334, 0, 336, 544, 0, 337,
	338, 339, 0, 0, 340, 341, 342, 343, 344, 345,
	348, 545, 350, 351, 352, 353, 354, 355, 356, 586,
	358, 359, 360, 361, 362, 363, 364, 548, 549, 365,
	367, 368, 550, 552, 553, 728, 383, 384, 385, 386,
	387, 388, 389, 391, 0, 393, 394, 395, 554, 396,
	397, 398, 399, 0, 400, 401, 402, 403, 404, 406,
	409, 410, 411, 412, 0, 415, 416, 417, 418, 419,
	420, 421, 423, 424, 425, 427, 428, 429, 587, 430,
	431, 432, 433, 557, 435, 436, 588, 438, 439, 441,
	442, 443, 444, 445, 446, 605, 0, 448, 558, 449,
	450, 451, 452, 453, 0, 455, 456, 457, 458, 459,
	460, 463, 464, 465, 467, 468, 560, 469, 470, 0,
	472, 473, 731, 475, 476, 477, 478, 479, 0, 606,
	480, 562, 481, 563, 482, 483, 484, 485, 486, 487,
	488, 490, 0, 0, 492, 493, 494, 496, 497, 498,
	499, 502, 503, 504, 505, 506, 0, 507, 509, 511,
	589, 566, 567, 568, 569, 570, 572, 573, 574, 575,
	512, 513, 529, 380, 374, 330, 372, 373, 377, 378,
	381, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	745, 0, 1184, 846, 0, 0, 0, 0, 900, 0,
	0, 0, 0, 0, 0, 0, 1185, 1186, 206, 0,
	223, 713, 0, 272, 309, 524, 0, 0, 369, 0,
	422, 426, 0, 515, 0, 0, 1176, 0, 280, 1181,
	718, 0, 724, 0, 730, 1180, 491, 0, 720, 721,
	726, 211, 607, 514, 585, 0, 0, 0, 376, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	1182, 722, 719, 723, 729, 717, 727, 714, 725, 0,
	413, 347, 0, 564, 440, 218, 264, 251, 293, 335,
	447, 0, 0, 325, 495, 260, 349, 0, 239, 382,
	0, 471, 346, 0, 454, 474, 0, 366, 245, 405,
	461, 462, 711, 716, 0, 732, 0, 249, 250, 371,
	231, 379, 576, 542, 434, 392, 390, 0, 357, 414,
	571, 0, 0, 279, 0, 274, 370, 510, 237, 489,
	408, 375, 329, 437, 466, 276, 261, 262, 305, 407,
	295, 247, 500, 539, 543, 541, 537, 534, 538, 535,
	536, 540, 296, 533, 0, 508, 517, 551, 531, 559,
	516, 556, 526, 271, 555, 520, 519, 565, 546, 547,
	501, 561, 532, 530, 523, 522, 518, 0, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 207, 0,
	208, 209, 210, 212, 213, 214, 710, 215, 216, 217,
	220, 221, 222, 224, 584, 225, 226, 227, 228, 229,
	230, 521, 712, 232, 233, 234, 235, 236, 238, 240,
	241, 242, 243, 244, 246, 248, 0, 0, 0, 715,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 0,
	258, 259, 263, 265, 266, 267, 268, 269, 270, 273,
	0, 275, 277, 0, 278, 281, 0, 282, 283, 284,
	285, 286, 287, 288, 289, 525, 290, 0, 291, 292,
	294, 0, 297, 298, 299, 300, 301, 0, 302, 527,
	528, 303, 304, 306, 307, 308, 310, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 0, 322,
	323, 324, 326, 0, 327, 328, 331, 332, 333, 334,
	0, 336, 544, 0, 337, 338, 339, 0, 0, 340,
	341, 342, 343, 344, 345, 348, 545, 350, 351, 352,
	353, 354, 355, 356, 586, 358, 359, 360, 361, 362,
	363, 364, 548, 549, 365, 367, 368, 550, 552, 553,
	728, 383, 384, 385, 386, 387, 388, 389, 391, 0,
	393, 394, 395, 554, 396, 397, 398, 399, 0, 400,
	401, 402, 403, 404, 406, 409, 410, 411, 412, 0,
	415, 416, 417, 418, 419, 420, 421, 423, 424, 425,
	427, 428, 429, 587, 430, 431, 432, 433, 557, 435,
	436, 588, 438, 439, 441, 442, 443, 444, 445, 446,
	605, 0, 448, 558, 449, 450, 451, 452, 453, 0,
	455, 456, 457, 458, 459, 460, 463, 464, 465, 467,
	468, 560, 469, 470, 0, 472, 473, 731, 475, 476,
	477, 478, 479, 0, 606, 480, 562, 481, 563, 482,
	483, 484, 485, 486, 487, 488, 490, 0, 0, 492,
	493, 494, 496, 497, 498, 499, 502, 503, 504, 505,
	506, 0, 507, 509, 511, 589, 566, 567, 568, 569,
	570, 572, 573, 574, 575, 512, 513, 529, 380, 374,
	330, 372, 373, 377, 378, 381, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 745, 0, 1184, 846, 0,
	0, 0, 0, 900, 0, 0, 0, 0, 0, 0,
	0, 1185, 1186, 206, 0, 223, 713, 0, 272, 309,
	524, 0, 0, 369, 0, 422, 426, 0, 515, 0,
	0, 0, 0, 280, 1181, 718, 0, 724, 0, 730,
	1180, 491, 0, 720, 721, 726, 211, 607, 514, 585,
	0, 0, 0, 376, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 1182, 722, 719, 723, 729,
	717, 727, 714, 725, 0, 413, 347, 0, 564, 440,
	218, 264, 251, 293, 335, 447, 0, 0, 325, 495,
	260, 349, 0, 239, 382, 0, 471, 346, 0, 454,
	474, 0, 366, 245, 405, 461, 462, 711, 716, 0,
	732, 0, 249, 250, 371, 231, 379, 576, 542, 434,
	392, 390, 0, 357, 414, 571, 0, 0, 279, 0,
	274, 370, 510, 237, 489, 408, 375, 329, 437, 466,
	276, 261, 262, 305, 407, 295, 247, 500, 539, 543,
	541, 537, 534, 538, 535, 536, 540, 296, 533, 0,
	508, 517, 551, 531, 559, 516, 556, 526, 271, 555,
	520, 519, 565, 546, 547, 501, 561, 532, 530, 523,
	522, 518, 0, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 207, 0, 208, 209, 210, 212, 213,
	214, 710, 215, 216, 217, 220, 221, 222, 224, 584,
	225, 226, 227, 228, 229, 230, 521, 712, 232, 233,
	234, 235, 236, 238, 240, 241, 242, 243, 244, 246,
	248, 0, 0, 0, 715, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 0, 258, 259, 263, 265, 266,
	267, 268, 269, 270, 273, 0, 275, 277, 0, 278,
	281, 0, 282, 283, 284, 285, 286, 287, 288, 289,
	525, 290, 0, 291, 292, 294, 0, 297, 298, 299,
	300, 301, 0, 302, 527, 528, 303, 304, 306, 307,
	308, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 0, 322, 323, 324, 326, 0, 327,
	328, 331, 332, 333, 334, 0, 336, 544, 0, 337,
	338, 339, 0, 0, 340, 341, 342, 343, 344, 345,
	348, 545, 350, 351, 352, 353, 354, 355, 356, 586,
	358, 359, 360, 361, 362, 363, 364, 548, 549, 365,
	367, 368, 550, 552, 553, 728, 383, 384, 385, 386,
	387, 388, 389, 391, 0, 393, 394, 395, 554, 396,
	397, 398, 399, 0, 400, 401, 402, 403, 404, 406,
	409, 410, 411, 412, 0, 415, 416, 417, 418, 419,
	420, 421, 423, 424, 425, 427, 428, 429, 587, 430,
	431, 432, 433, 557, 435, 436, 588, 438, 439, 441,
	442, 443, 444, 445, 446, 605, 0, 448, 558, 449,
	450, 451, 452, 453, 0, 455, 456, 457, 458, 459,
	460, 463, 464, 465, 467, 468, 560, 469, 470, 0,
	472, 473, 731, 475, 476, 477, 478, 479, 0, 606,
	480, 562, 481, 563, 482, 483, 484, 485, 486, 487,
	488, 490, 0, 0, 492, 493, 494, 496, 497, 498,
	499, 502, 503, 504, 505, 506, 0, 507, 509, 511,
	589, 566, 567, 568, 569, 570, 572, 573, 574, 575,
	512, 513, 529, 380, 374, 330, 372, 373, 377, 378,
	381, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	707, 0, 893, 846, 0, 0, 0, 0, 900, 878,
	0, 0, 0, 0, 0, 0, 1185, 1186, 206, 0,
	223, 713, 0, 272, 309, 883, 0, 0, 369, 0,
	422, 426, 0, 515, 898, 0, 0, 0, 280, 896,
	718, 0, 724, 897, 730, 895, 491, 0, 720, 721,
	726, 211, 607, 514, 585, 0, 0, 0, 376, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	0, 722, 719, 723, 729, 717, 727, 714, 725, 0,
	413, 347, 0, 564, 440, 218, 264, 251, 293, 335,
	447, 0, 0, 325, 495, 260, 349, 0, 239, 382,
	0, 471, 346, 0, 454, 474, 0, 366, 245, 405,
	461, 462, 711, 716, 0, 732, 0, 249, 250, 371,
	231, 379, 576, 542, 434, 392, 390, 0, 357, 414,
	571, 884, 0, 279, 0, 274, 370, 510, 237, 489,
	408, 375, 329, 437, 466, 276, 261, 262, 305, 407,
	295, 247, 500, 539, 543, 541, 537, 534, 538, 535,
	536, 540, 296, 533, 0, 508, 517, 551, 531, 559,
	516, 556, 526, 271, 555, 520, 519, 565, 546, 547,
	501, 561, 532, 530, 523, 522, 518, 0, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 207, 0,
	208, 209, 210, 212, 213, 214, 710, 215, 216, 217,
	220, 221, 222, 224, 584, 225, 226, 227, 228, 229,
	230, 521, 712, 232, 233, 234, 235, 236, 238, 240,
	241, 242, 243, 244, 246, 248, 0, 0, 0, 715,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 0,
	258, 259, 263, 265, 266, 267, 268, 269, 270, 273,
	0, 275, 277, 0, 278, 281, 0, 282, 283, 284,
	285, 286, 287, 288, 289, 525, 290, 0, 291, 292,
	294, 0, 297, 298, 299, 300, 301, 0, 302, 527,
	887, 303, 304, 306, 307, 308, 310, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 0, 322,
	323, 324, 326, 0, 327, 328, 331, 332, 333, 334,
	0, 336, 544, 0, 337, 338, 339, 0, 0, 340,
	341, 342, 343, 344, 345, 348, 545, 350, 351, 352,
	353, 354, 355, 356, 586, 358, 359, 360, 361, 362,
	363, 364, 548, 549, 365, 367, 368, 550, 552, 553,
	728, 383, 384, 385, 386, 387, 388, 389, 391, 0,
	393, 394, 395, 554, 396, 397, 398, 399, 0, 400,
	401, 402, 403, 404, 406, 409, 410, 411, 412, 0,
	415, 416, 417, 418, 419, 420, 421, 423, 424, 425,
	427, 428, 429, 587, 430, 431, 432, 433, 2673, 435,
	436, 588, 438, 439, 441, 442, 443, 444, 445, 446,
	605, 0, 448, 558, 449, 450, 451, 452, 453, 0,
	455, 456, 457, 458, 459, 460, 463, 464, 465, 467,
	468, 560, 469, 470, 0, 472, 473, 731, 475, 476,
	477, 478, 479, 0, 606, 480, 562, 481, 563, 482,
	483, 484, 485, 486, 487, 488, 490, 0, 0, 492,
	493, 494, 496, 497, 498, 499, 502, 503, 504, 505,
	506, 0, 507, 509, 511, 589, 566, 567, 568, 569,
	570, 572, 573, 574, 575, 512, 513, 529, 380, 374,
	330, 372, 373, 377, 378, 381, 707, 0, 893, 846,
	0, 0, 0, 0, 900, 878, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 223, 713, 2672, 272,
	309, 883, 0, 0, 369, 0, 422, 426, 0, 515,
	898, 0, 0, 0, 280, 896, 718, 0, 724, 897,
	730, 895, 491, 0, 720, 721, 726, 211, 607, 514,
	585, 0, 0, 0, 376, 0, 0, 0, 0, 0,
	0, 0, 3655, 0, 0, 0, 0, 722, 719, 723,
	729, 717, 727, 714, 725, 0, 413, 347, 0, 564,
	440, 218, 264, 251, 293, 335, 447, 0, 0, 325,
	495, 260, 349, 0, 239, 382, 0, 471, 346, 0,
	454, 474, 0, 366, 245, 405, 461, 462, 711, 716,
	0, 732, 0, 249, 250, 371, 231, 379, 576, 542,
	434, 392, 390, 0, 357, 414, 571, 884, 0, 279,
	0, 274, 370, 510, 237, 489, 408, 375, 329, 437,
	466, 276, 261, 262, 305, 407, 295, 247, 500, 539,
	543, 541, 537, 534, 538, 535, 536, 540, 296, 533,
	0, 508, 517, 551, 531, 559, 516, 556, 526, 271,
	555, 520, 519, 565, 546, 547, 501, 561, 532, 530,
	523, 522, 518, 0, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 207, 0, 208, 209, 210, 212,
	213, 214, 710, 215, 216, 217, 220, 221, 222, 224,
	584, 225, 226, 227, 228, 229, 230, 521, 712, 232,
	233, 234, 235, 236, 238, 240, 241, 242, 243, 244,
	246, 248, 0, 0, 0, 715, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 0, 258, 259, 263, 265,
	266, 267, 268, 269, 270, 273, 0, 275, 277, 0,
	278, 281, 0, 282, 283, 284, 285, 286, 287, 288,
	289, 525, 290, 0, 291, 292, 294, 0, 297, 298,
	299, 300, 301, 0, 302, 527, 887, 303, 304, 306,
	307, 308, 310, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 0, 322, 323, 324, 326, 0,
	327, 328, 331, 332, 333, 334, 0, 336, 544, 0,
	337, 338, 339, 0, 0, 340, 341, 342, 343, 344,
	345, 348, 545, 350, 351, 352, 353, 354, 355, 356,
	586, 358, 359, 360, 361, 362, 363, 364, 548, 549,
	365, 367, 368, 550, 552, 553, 728, 383, 384, 385,
	386, 387, 388, 389, 391, 0, 393, 394, 395, 554,
	396, 397, 398, 399, 0, 400, 401, 402, 403, 404,
	406, 409, 410, 411, 412, 0, 415, 416, 417, 418,
	419, 420, 421, 423, 424, 425, 427, 428, 429, 587,
	430, 431, 432, 433, 2673, 435, 436, 588, 438, 439,
	441, 442, 443, 444, 445, 446, 605, 0, 448, 558,
	449, 450, 451, 452, 453, 0, 455, 456, 457, 458,
	459, 460, 463, 464, 465, 467, 468, 560, 469, 470,
	0, 472, 473, 731, 475, 476, 477, 478, 479, 0,
	606, 480, 562, 481, 563, 482, 483, 484, 485, 486,
	487, 488, 490, 0, 0, 492, 493, 494, 496, 497,
	498, 499, 502, 503, 504, 505, 506, 0, 507, 509,
	511, 589, 566, 567, 568, 569, 570, 572, 573, 574,
	575, 512, 513, 529, 380, 374, 330, 372, 373, 377,
	378, 381, 707, 0, 893, 846, 0, 0, 0, 0,
	900, 878, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 223, 713, 2672, 272, 309, 883, 0, 0,
	369, 0, 422, 426, 0, 515, 898, 0, 0, 0,
	280, 896, 718, 0, 724, 897, 730, 895, 491, 0,
	720, 721, 726, 211, 607, 514, 585, 0, 0, 0,
	376, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 0, 0, 722, 719, 723, 729, 717, 727, 714,
	725, 0, 413, 347, 0, 564, 440, 218, 264, 251,
	293, 335, 447, 0, 0, 325, 495, 260, 349, 0,
	239, 382, 0, 471, 346, 0, 454, 474, 0, 366,
	245, 405, 461, 462, 711, 716, 0, 732, 0, 249,
	250, 371, 231, 379, 576, 542, 434, 392, 390, 0,
	357, 414, 3141, 884, 0, 279, 0, 274, 370, 510,
	237, 489, 408, 375, 329, 437, 466, 276, 261, 262,
	305, 407, 295, 247, 500, 539, 543, 541, 537, 534,
	538, 535, 536, 540, 296, 533, 0, 508, 517, 551,
	531, 559, 516, 556, 526, 271, 555, 520, 519, 565,
	546, 547, 501, 561, 532, 530, 523, 522, 518, 0,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	207, 0, 208, 209, 210, 212, 213, 214, 710, 215,
	216, 217, 220, 221, 222, 224, 584, 225, 226, 227,
	228, 229, 230, 521, 712, 232, 233, 234, 235, 236,
	238, 240, 241, 242, 243, 244, 246, 248, 0, 0,
	0, 715, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 0, 258, 259, 263, 265, 266, 267, 268, 269,
	270, 273, 0, 275, 277, 0, 278, 281, 0, 282,
	283, 284, 285, 286, 287, 288, 289, 525, 290, 0,
	291, 292, 294, 0, 297, 298, 299, 300, 301, 0,
	302, 527, 887, 303, 304, 306, 307, 308, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 323, 324, 326, 0, 327, 328, 331, 332,
	333, 334, 0, 336, 544, 0, 337, 338, 339, 0,
	0, 340, 341, 342, 343, 344, 345, 348, 545, 350,
	351, 352, 353, 354, 355, 356, 586, 358, 359, 360,
	361, 362, 363, 364, 548, 549, 365, 367, 368, 550,
	552, 553, 728, 383, 384, 385, 386, 387, 388, 389,
	391, 0, 393, 394, 395, 554, 396, 397, 398, 399,
	0, 400, 401, 402, 403, 404, 406, 409, 410, 411,
	412, 0, 415, 416, 417, 418, 419, 420, 421, 423,
	424, 425, 427, 428, 429, 587, 430, 431, 432, 433,
	2673, 435, 436, 588, 438, 439, 441, 442, 443, 444,
	445, 446, 605, 0, 448, 558, 449, 450, 451, 452,
	453, 0, 455, 456, 457, 458, 459, 460, 463, 464,
	465, 467, 468, 560, 469, 470, 0, 472, 473, 731,
	475, 476, 477, 478, 479, 0, 606, 480, 562, 481,
	563, 482, 483, 484, 485, 486, 487, 488, 490, 0,
	0, 492, 493, 494, 496, 497, 498, 499, 502, 503,
	504, 505, 506, 0, 507, 509, 511, 589, 566, 567,
	568, 569, 570, 572, 573, 574, 575, 512, 513, 529,
	380, 374, 330, 372, 373, 377, 378, 381, 707, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 206, 0, 223, 713,
	2672, 272, 309, 524, 0, 0, 369, 0, 422, 426,
	77, 515, 0, 0, 0, 0, 280, 0, 718, 0,
	724, 0, 730, 0, 491, 0, 720, 721, 726, 211,
	607, 514, 585, 0, 0, 0, 376, 74, 0, 0,
	604, 75, 0, 0, 219, 0, 0, 0, 0, 722,
	719, 723, 729, 717, 727, 714, 725, 0, 413, 347,
	2268, 1700, 440, 218, 264, 251, 293, 335, 447, 0,
	0, 325, 495, 260, 349, 0, 239, 382, 0, 471,
	346, 0, 454, 474, 0, 366, 245, 405, 461, 462,
	711, 716, 0, 732, 0, 249, 250, 371, 231, 379,
	2276, 2277, 2275, 392, 390, 0, 357, 414, 571, 0,
	0, 279, 0, 274, 370, 510, 237, 489, 408, 375,
	329, 437, 466, 276, 261, 262, 305, 407, 295, 247,
	500, 539, 543, 541, 537, 534, 538, 535, 536, 540,
	296, 533, 0, 508, 517, 551, 531, 559, 516, 556,
	526, 271, 555, 520, 519, 565, 546, 547, 501, 561,
	532, 530, 523, 522, 518, 0, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 207, 0, 208, 209,
	210, 212, 213, 214, 710, 215, 216, 217, 220, 221,
	222, 224, 584, 225, 226, 227, 228, 229, 230, 521,
	712, 232, 233, 234, 235, 236, 238, 240, 241, 242,
	243, 244, 246, 248, 0, 0, 0, 715, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 0, 258, 259,
	263, 265, 266, 267, 268, 269, 270, 273, 0, 275,
	277, 0, 278, 281, 0, 282, 283, 284, 285, 286,
	287, 288, 289, 525, 290, 0, 291, 292, 294, 0,
	297, 298, 299, 300, 301, 0, 302, 527, 528, 303,
	304, 306, 307, 308, 310, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 323, 324,
	326, 0, 327, 328, 331, 332, 333, 334, 0, 336,
	544, 0, 337, 338, 339, 0, 0, 340, 341, 342,
	343, 344, 345, 348, 545, 350, 351, 352, 353, 354,
	355, 356, 586, 358, 359, 360, 361, 362, 363, 364,
	548, 549, 365, 367, 368, 550, 552, 553, 728, 383,
	384, 385, 386, 387, 388, 389, 391, 0, 393, 394,
	395, 554, 396, 397, 398, 399, 0, 400, 401, 402,
	403, 404, 406, 409, 410, 411, 412, 0, 415, 416,
	417, 418, 419, 420, 421, 423, 424, 425, 427, 428,
	429, 587, 430, 431, 432, 433, 557, 435, 436, 588,
	438, 439, 441, 442, 443, 444, 445, 446, 605, 0,
	448, 558, 449, 450, 451, 452, 453, 0, 455, 456,
	457, 458, 459, 460, 463, 464, 465, 467, 468, 560,
	469, 470, 0, 472, 473, 731, 475, 476, 477, 478,
	479, 0, 606, 480, 562, 481, 563, 482, 483, 484,
	485, 486, 487, 488, 490, 0, 0, 492, 493, 494,
	496, 497, 498, 499, 502, 503, 504, 505, 506, 0,
	507, 509, 511, 589, 566, 567, 568, 569, 570, 572,
	573, 574, 575, 512, 513, 529, 380, 374, 330, 372,
	373, 377, 378, 381, 707, 0, 0, 0, 0, 0,
	0, 0, 0, 78, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 0, 223, 713, 2270, 272, 309, 524,
	0, 0, 369, 0, 422, 426, 0, 515, 0, 0,
	0, 0, 280, 0, 718, 0, 724, 0, 730, 0,
	491, 0, 720, 721, 726, 211, 607, 514, 585, 0,
	0, 0, 376, 0, 0, 0, 604, 0, 0, 0,
	219, 0, 0, 0, 0, 722, 719, 723, 729, 717,
	727, 714, 725, 0, 413, 347, 2268, 564, 440, 218,
	264, 251, 293, 335, 447, 0, 0, 325, 495, 260,
	349, 0, 239, 382, 0, 471, 346, 0, 454, 474,
	0, 366, 245, 405, 461, 462, 711, 716, 0, 732,
	0, 249, 250, 371, 231, 379, 2276, 2277, 2275, 392,
	390, 0, 357, 414, 571, 0, 0, 279, 0, 274,
	370, 510, 237, 489, 408, 375, 329, 437, 466, 276,
	261, 262, 305, 407, 295, 247, 500, 539, 543, 541,
	537, 534, 538, 535, 536, 540, 296, 533, 0, 508,
	517, 551, 531, 559, 516, 556, 526, 271, 555, 520,
	519, 565, 546, 547, 501, 561, 532, 530, 523, 522,
	518, 0, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 207, 0, 208, 209, 210, 212, 213, 214,
	710, 215, 216, 217, 220, 221, 222, 224, 584, 225,
	226, 227, 228, 229, 230, 521, 712, 232, 233, 234,
	235, 236, 238, 240, 241, 242, 243, 244, 246, 248,
	0, 0, 0, 715, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 0, 258, 259, 263, 265, 266, 267,
	268, 269, 270, 273, 0, 275, 277, 0, 278, 281,
	0, 282, 283, 284, 285, 286, 287, 288, 289, 525,
	290, 0, 291, 292, 294, 0, 297, 298, 299, 300,
	301, 0, 302, 527, 528, 303, 304, 306, 307, 308,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 323, 324, 326, 0, 327, 328,
	331, 332, 333, 334, 0, 336, 544, 0, 337, 338,
	339, 0, 0, 340, 341, 342, 343, 344, 345, 348,
	545, 350, 351, 352, 353, 354, 355, 356, 586, 358,
	359, 360, 361, 362, 363, 364, 548, 549, 365, 367,
	368, 550, 552, 553, 728, 383, 384, 385, 386, 387,
	388, 389, 391, 0, 393, 394, 395, 554, 396, 397,
	398, 399, 0, 400, 401, 402, 403, 404, 406, 409,
	410, 411, 412, 0, 415, 416, 417, 418, 419, 420,
	421, 423, 424, 425, 427, 428, 429, 587, 430, 431,
	432, 433, 557, 435, 436, 588, 438, 439, 441, 442,
	443, 444, 445, 446, 605, 0, 448, 558, 449, 450,
	451, 452, 453, 0, 455, 456, 457, 458, 459, 460,
	463, 464, 465, 467, 468, 560, 469, 470, 0, 472,
	473, 731, 475, 476, 477, 478, 479, 0, 606, 480,
	562, 481, 563, 482, 483, 484, 485, 486, 487, 488,
	490, 0, 0, 492, 493, 494, 496, 497, 498, 499,
	502, 503, 504, 505, 506, 0, 507, 509, 511, 589,
	566, 567, 568, 569, 570, 572, 573, 574, 575, 512,
	513, 529, 380, 374, 330, 372, 373, 377, 378, 381,
	707, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	223, 713, 2270, 272, 309, 524, 0, 0, 369, 0,
	422, 426, 0, 515, 0, 0, 0, 0, 280, 0,
	718, 0, 724, 0, 730, 0, 491, 0, 720, 721,
	726, 211, 607, 514, 585, 0, 0, 0, 376, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	0, 722, 719, 723, 729, 717, 727, 714, 725, 0,
	413, 347, 0, 564, 440, 218, 264, 251, 293, 335,
	447, 0, 0, 325, 495, 260, 349, 0, 239, 382,
	0, 471, 346, 0, 454, 474, 0, 366, 245, 405,
	461, 462, 711, 716, 0, 732, 0, 249, 250, 371,
	231, 379, 576, 542, 434, 392, 390, 0, 357, 414,
	571, 0, 0, 279, 0, 274, 370, 510, 237, 489,
	408, 375, 329, 437, 466, 276, 261, 262, 305, 407,
	295, 247, 500, 539, 543, 541, 537, 534, 538, 535,
	536, 540, 296, 533, 0, 508, 517, 551, 531, 559,
	516, 556, 526, 271, 555, 520, 519, 565, 546, 547,
	501, 561, 532, 530, 523, 522, 518, 0, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 207, 0,
	208, 209, 210, 212, 213, 214, 710, 215, 216, 217,
	220, 221, 222, 224, 584, 225, 226, 227, 228, 229,
	230, 521, 712, 232, 233, 234, 235, 236, 238, 240,
	241, 242, 243, 244, 246, 248, 0, 0, 0, 715,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 0,
	258, 259, 263, 265, 266, 267, 268, 269, 270, 273,
	0, 275, 277, 0, 278, 281, 0, 282, 283, 284,
	285, 286, 287, 288, 289, 525, 290, 0, 291, 292,
	294, 0, 297, 298, 299, 300, 301, 0, 302, 527,
	528, 303, 304, 306, 307, 308, 310, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 0, 322,
	323, 324, 326, 0, 327, 328, 331, 332, 333, 334,
	0, 336, 544, 0, 337, 338, 339, 0, 0, 340,
	341, 342, 343, 344, 345, 348, 545, 350, 351, 352,
	353, 354, 355, 356, 586, 358, 359, 360, 361, 362,
	363, 364, 548, 549, 365, 367, 368, 550, 552, 553,
	728, 383, 384, 385, 386, 387, 388, 389, 391, 0,
	393, 394, 395, 554, 396, 397, 398, 399, 0, 400,
	401, 402, 403, 404, 406, 409, 410, 411, 412, 0,
	415, 416, 417, 418, 419, 420, 421, 423, 424, 425,
	427, 428, 429, 587, 430, 431, 432, 433, 557, 435,
	436, 588, 438, 439, 441, 442, 443, 444, 445, 446,
	605, 0, 448, 558, 449, 450, 451, 452, 453, 0,
	455, 456, 457, 458, 459, 460, 463, 464, 465, 467,
	468, 560, 469, 470, 0, 472, 473, 731, 475, 476,
	477, 478, 479, 0, 606, 480, 562, 481, 563, 482,
	483, 484, 485, 486, 487, 488, 490, 0, 0, 492,
	493, 494, 496, 497, 498, 499, 502, 503, 504, 505,
	506, 0, 507, 509, 511, 589, 566, 567, 568, 569,
	570, 572, 573, 574, 575, 512, 513, 529, 380, 374,
	330, 372, 373, 377, 378, 381, 707, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 223, 713, 3293, 272,
	309, 524, 0, 0, 369, 0, 422, 426, 0, 515,
	0, 0, 0, 0, 280, 0, 718, 0, 724, 0,
	730, 0, 491, 0, 720, 721, 726, 211, 607, 514,
	585, 0, 0, 0, 376, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 0, 722, 719, 723,
	729, 717, 727, 714, 725, 0, 413, 347, 0, 564,
	440, 218, 264, 251, 293, 335, 447, 0, 0, 325,
	495, 260, 349, 0, 239, 382, 0, 471, 346, 0,
	454, 474, 0, 366, 245, 405, 461, 462, 711, 716,
	0, 732, 0, 249, 250, 371, 231, 379, 576, 542,
	434, 392, 390, 0, 357, 414, 571, 0, 0, 279,
	0, 274, 370, 510, 237, 489, 408, 375, 329, 437,
	466, 276, 261, 262, 305, 407, 295, 247, 500, 539,
	543, 541, 537, 534, 538, 535, 536, 540, 296, 533,
	0, 508, 517, 551, 531, 559, 516, 556, 526, 271,
	555, 520, 519, 565, 546, 547, 501, 561, 532, 530,
	523, 522, 518, 0, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 207, 0, 208, 209, 210, 212,
	213, 214, 710, 215, 216, 217, 220, 221, 222, 224,
	584, 225, 226, 227, 228, 229, 230, 521, 712, 232,
	233, 234, 235, 236, 238, 240, 241, 242, 243, 244,
	246, 248, 0, 0, 0, 715, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 0, 258, 259, 263, 265,
	266, 267, 268, 269, 270, 273, 0, 275, 277, 0,
	278, 281, 0, 282, 283, 284, 285, 286, 287, 288,
	289, 525, 290, 0, 291, 292, 294, 0, 297, 298,
	299, 300, 301, 0, 302, 527, 528, 303, 304, 306,
	307, 308, 310, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 0, 322, 323, 324, 326, 0,
	327, 328, 331, 332, 333, 334, 0, 336, 544, 0,
	337, 338, 339, 0, 0, 340, 341, 342, 343, 344,
	345, 348, 545, 350, 351, 352, 353, 354, 355, 356,
	586, 358, 359, 360, 361, 362, 363, 364, 548, 549,
	365, 367, 368, 550, 552, 553, 728, 383, 384, 385,
	386, 387, 388, 389, 391, 0, 393, 394, 395, 554,
	396, 397, 398, 399, 0, 400, 401, 402, 403, 404,
	406, 409, 410, 411, 412, 0, 415, 416, 417, 418,
	419, 420, 421, 423, 424, 425, 427, 428, 429, 587,
	430, 431, 432, 433, 557, 435, 436, 588, 438, 439,
	441, 442, 443, 444, 445, 446, 605, 0, 448, 558,
	449, 450, 451, 452, 453, 0, 455, 456, 457, 458,
	459, 460, 463, 464, 465, 467, 468, 560, 469, 470,
	0, 472, 473, 731, 475, 476, 477, 478, 479, 0,
	606, 480, 562, 481, 563, 482, 483, 484, 485, 486,
	487, 488, 490, 0, 0, 492, 493, 494, 496, 497,
	498, 499, 502, 503, 504, 505, 506, 0, 507, 509,
	511, 589, 566, 567, 568, 569, 570, 572, 573, 574,
	575, 512, 513, 529, 380, 374, 330, 372, 373, 377,
	378, 381, 707, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 223, 713, 4047, 272, 309, 524, 0, 0,
	369, 0, 422, 426, 0, 515, 0, 0, 0, 0,
	280, 0, 718, 0, 724, 0, 730, 0, 491, 0,
	720, 721, 726, 211, 607, 514, 585, 0, 0, 0,
	376, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 0, 0, 722, 719, 723, 729, 717, 727, 714,
	725, 0, 413, 347, 0, 564, 440, 218, 264, 251,
	293, 335, 447, 0, 0, 325, 495, 260, 349, 0,
	239, 382, 0, 471, 346, 0, 454, 474, 0, 366,
	245, 405, 461, 462, 711, 716, 0, 732, 0, 249,
	250, 371, 231, 379, 576, 542, 434, 392, 390, 0,
	357, 414, 571, 0, 0, 279, 0, 274, 370, 510,
	237, 489, 408, 375, 329, 437, 466, 276, 261, 262,
	305, 407, 295, 247, 500, 539, 543, 541, 537, 534,
	538, 535, 536, 540, 296, 533, 0, 508, 517, 551,
	531, 559, 516, 556, 526, 271, 555, 520, 519, 565,
	546, 547, 501, 561, 532, 530, 523, 522, 518, 0,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	207, 0, 208, 209, 210, 212, 213, 214, 710, 215,
	216, 217, 220, 221, 222, 224, 584, 225, 226, 227,
	228, 229, 230, 521, 712, 232, 233, 234, 235, 236,
	238, 240, 241, 242, 243, 244, 246, 248, 0, 0,
	0, 715, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 0, 258, 259, 263, 265, 266, 267, 268, 269,
	270, 273, 0, 275, 277, 0, 278, 281, 0, 282,
	283, 284, 285, 286, 287, 288, 289, 525, 290, 0,
	291, 292, 294, 0, 297, 298, 299, 300, 301, 0,
	302, 527, 528, 303, 304, 306, 307, 308, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 323, 324, 326, 0, 327, 328, 331, 332,
	333, 334, 0, 336, 544, 0, 337, 338, 339, 0,
	0, 340, 341, 342, 343, 344, 345, 348, 545, 350,
	351, 352, 353, 354, 355, 356, 586, 358, 359, 360,
	361, 362, 363, 364, 548, 549, 365, 367, 368, 550,
	552, 553, 728, 383, 384, 385, 386, 387, 388, 389,
	391, 0, 393, 394, 395, 554, 396, 397, 398, 399,
	0, 400, 401, 402, 403, 404, 406, 409, 410, 411,
	412, 0, 415, 416, 417, 418, 419, 420, 421, 423,
	424, 425, 427, 428, 429, 587, 430, 431, 432, 433,
	557, 435, 436, 588, 438, 439, 441, 442, 443, 444,
	445, 446, 605, 0, 448, 558, 449, 450, 451, 452,
	453, 0, 455, 456, 457, 458, 459, 460, 463, 464,
	465, 467, 468, 560, 469, 470, 0, 472, 473, 731,
	475, 476, 477, 478, 479, 0, 606, 480, 562, 481,
	563, 482, 483, 484, 485, 486, 487, 488, 490, 0,
	0, 492, 493, 494, 496, 497, 498, 499, 502, 503,
	504, 505, 506, 0, 507, 509, 511, 589, 566, 567,
	568, 569, 570, 572, 573, 574, 575, 512, 513, 529,
	380, 374, 330, 372, 373, 377, 378, 381, 707, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 206, 0, 223, 713,
	3816, 272, 309, 524, 0, 0, 369, 0, 422, 426,
	0, 515, 0, 0, 0, 0, 280, 0, 718, 0,
	724, 0, 730, 0, 491, 0, 720, 721, 726, 211,
	607, 514, 585, 0, 0, 0, 376, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 722,
	719, 723, 729, 717, 727, 714, 725, 0, 413, 347,
	0, 564, 440, 218, 264, 251, 293, 335, 447, 0,
	0, 325, 495, 260, 349, 0, 239, 382, 0, 471,
	346, 0, 454, 474, 0, 366, 245, 405, 461, 462,
	711, 716, 0, 732, 0, 249, 250, 371, 231, 379,
	576, 542, 434, 392, 390, 0, 357, 414, 571, 0,
	0, 279, 0, 274, 370, 510, 237, 489, 408, 375,
	329, 437, 466, 276, 261, 262, 305, 407, 295, 247,
	500, 539, 543, 541, 537, 534, 538, 535, 536, 540,
	296, 533, 0, 508, 517, 551, 531, 559, 516, 556,
	526, 271, 555, 520, 519, 565, 546, 547, 501, 561,
	532, 530, 523, 522, 518, 0, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 207, 0, 208, 209,
	210, 212, 213, 214, 710, 215, 216, 217, 220, 221,
	222, 224, 584, 225, 226, 227, 228, 229, 230, 521,
	712, 232, 233, 234, 235, 236, 238, 240, 241, 242,
	243, 244, 246, 248, 0, 0, 0, 715, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 0, 258, 259,
	263, 265, 266, 267, 268, 269, 270, 273, 0, 275,
	277, 0, 278, 281, 0, 282, 283, 284, 285, 286,
	287, 288, 289, 525, 290, 0, 291, 292, 294, 0,
	297, 298, 299, 300, 301, 0, 302, 527, 528, 303,
	304, 306, 307, 308, 310, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 323, 324,
	326, 0, 327, 328, 331, 332, 333, 334, 0, 336,
	544, 0, 337, 338, 339, 0, 0, 340, 341, 342,
	343, 344, 345, 348, 545, 350, 351, 352, 353, 354,
	355, 356, 586, 358, 359, 360, 361, 362, 363, 364,
	548, 549, 365, 367, 368, 550, 552, 553, 728, 383,
	384, 385, 386, 387, 388, 389, 391, 0, 393, 394,
	395, 554, 396, 397, 398, 399, 0, 400, 401, 402,
	403, 404, 406, 409, 410, 411, 412, 0, 415, 416,
	417, 418, 419, 420, 421, 423, 424, 425, 427, 428,
	429, 587, 430, 431, 432, 433, 557, 435, 436, 588,
	438, 439, 441, 442, 443, 444, 445, 446, 605, 0,
	448, 558, 449, 450, 451, 452, 453, 0, 455, 456,
	457, 458, 459, 460, 463, 464, 465, 467, 468, 560,
	469, 470, 0, 472, 473, 731, 475, 476, 477, 478,
	479, 0, 606, 480, 562, 481, 563, 482, 483, 484,
	485, 486, 487, 488, 490, 0, 0, 492, 493, 494,
	496, 497, 498, 499, 502, 503, 504, 505, 506, 0,
	507, 509, 511, 589, 566, 567, 568, 569, 570, 572,
	573, 574, 575, 512, 513, 529, 380, 374, 330, 372,
	373, 377, 378, 381, 707, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 0, 223, 713, 2420, 272, 309, 524,
	0, 0, 369, 0, 422, 426, 0, 515, 0, 0,
	0, 0, 280, 0, 718, 0, 724, 0, 730, 0,
	491, 0, 720, 721, 726, 211, 607, 514, 585, 0,
	0, 0, 376, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 722, 719, 723, 729, 717,
	727, 714, 725, 0, 413, 347, 0, 564, 440, 218,
	264, 251, 293, 335, 447, 0, 0, 325, 495, 260,
	349, 0, 239, 382, 0, 471, 346, 0, 454, 474,
	0, 366, 245, 405, 461, 462, 711, 716, 0, 732,
	0, 249, 250, 371, 231, 379, 2276, 2277, 2275, 392,
	390, 0, 357, 414, 571, 0, 0, 279, 0, 274,
	370, 510, 237, 489, 408, 375, 329, 437, 466, 276,
	261, 262, 305, 407, 295, 247, 500, 539, 543, 541,
	537, 534, 538, 535, 536, 540, 296, 533, 0, 508,
	517, 551, 531, 559, 516, 556, 526, 271, 555, 520,
	519, 565, 546, 547, 501, 561, 532, 530, 523, 522,
	518, 0, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 207, 0, 208, 209, 210, 212, 213, 214,
	710, 215, 216, 217, 220, 221, 222, 224, 584, 225,
	226, 227, 228, 229, 230, 521, 712, 232, 233, 234,
	235, 236, 238, 240, 241, 242, 243, 244, 246, 248,
	0, 0, 0, 715, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 0, 258, 259, 263, 265, 266, 267,
	268, 269, 270, 273, 0, 275, 277, 0, 278, 281,
	0, 282, 283, 284, 285, 286, 287, 288, 289, 525,
	290, 0, 291, 292, 294, 0, 297, 298, 299, 300,
	301, 0, 302, 527, 528, 303, 304, 306, 307, 308,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 323, 324, 326, 0, 327, 328,
	331, 332, 333, 334, 0, 336, 544, 0, 337, 338,
	339, 0, 0, 340, 341, 342, 343, 344, 345, 348,
	545, 350, 351, 352, 353, 354, 355, 356, 586, 358,
	359, 360, 361, 362, 363, 364, 548, 549, 365, 367,
	368, 550, 552, 553, 728, 383, 384, 385, 386, 387,
	388, 389, 391, 0, 393, 394, 395, 554, 396, 397,
	398, 399, 0, 400, 401, 402, 403, 404, 406, 409,
	410, 411, 412, 0, 415, 416, 417, 418, 419, 420,
	421, 423, 424, 425, 427, 428, 429, 587, 430, 431,
	432, 433, 557, 435, 436, 588, 438, 439, 441, 442,
	443, 444, 445, 446, 605, 0, 448, 558, 449, 450,
	451, 452, 453, 0, 455, 456, 457, 458, 459, 460,
	463, 464, 465, 467, 468, 560, 469, 470, 0, 472,
	473, 731, 475, 476, 477, 478, 479, 0, 606, 480,
	562, 481, 563, 482, 483, 484, 485, 486, 487, 488,
	490, 0, 0, 492, 493, 494, 496, 497, 498, 499,
	502, 503, 504, 505, 506, 0, 507, 509, 511, 589,
	566, 567, 568, 569, 570, 572, 573, 574, 575, 512,
	513, 529, 380, 374, 330, 372, 373, 377, 378, 381,
	193, 0, 0, 0, 0, 0, 0, 649, 0, 0,
	0, 0, 0, 0, 660, 661, 662, 0, 206, 0,
	223, 0, 73, 272, 309, 524, 0, 0, 369, 0,
	422, 426, 0, 515, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 491, 0, 0, 0,
	0, 211, 607, 514, 585, 0, 0, 0, 376, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	413, 347, 0, 564, 440, 218, 264, 251, 293, 335,
	447, 0, 0, 325, 495, 260, 349, 0, 239, 382,
	0, 471, 346, 0, 454, 474, 0, 366, 245, 405,
	461, 462, 0, 0, 0, 0, 0, 249, 250, 371,
	231, 379, 576, 542, 434, 392, 390, 0, 357, 414,
	571, 0, 0, 279, 0, 274, 370, 510, 237, 489,
	408, 375, 329, 437, 466, 276, 261, 262, 305, 407,
	295, 247, 500, 539, 543, 541, 537, 534, 538, 535,
	536, 540, 296, 533, 0, 508, 517, 551, 531, 559,
	516, 556, 526, 271, 555, 520, 519, 565, 546, 547,
	501, 561, 532, 530, 523, 522, 518, 0, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 207, 0,
	208, 209, 210, 212, 213, 214, 0, 215, 216, 217,
	220, 221, 222, 224, 584, 225, 226, 227, 228, 229,
	230, 521, 0, 232, 233, 234, 235, 236, 238, 240,
	241, 242, 243, 244, 246, 248, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 0,
	258, 259, 263, 265, 266, 267, 268, 269, 270, 273,
	0, 275, 277, 0, 278, 281, 0, 282, 283, 284,
	285, 286, 287, 288, 289, 525, 290, 0, 291, 292,
	294, 0, 297, 298, 299, 300, 301, 0, 302, 527,
	528, 303, 304, 306, 307, 308, 310, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 0, 322,
	323, 324, 326, 0, 327, 328, 331, 332, 333, 334,
	0, 336, 544, 0, 337, 338, 339, 0, 0, 340,
	341, 342, 343, 344, 345, 348, 545, 350, 351, 352,
	353, 354, 355, 356, 586, 358, 359, 360, 361, 362,
	363, 364, 548, 549, 365, 367, 368, 550, 552, 553,
	0, 383, 384, 385, 386, 387, 388, 389, 391, 0,
	393, 394, 395, 554, 396, 397, 398, 399, 0, 400,
	401, 402, 403, 404, 406, 409, 410, 411, 412, 0,
	415, 416, 417, 418, 419, 420, 421, 423, 424, 425,
	427, 428, 429, 587, 430, 431, 432, 433, 557, 435,
	436, 588, 438, 439, 441, 442, 443, 444, 445, 446,
	605, 0, 448, 558, 449, 450, 451, 452, 453, 0,
	455, 456, 457, 458, 459, 460, 463, 464, 465, 467,
	468, 560, 469, 470, 0, 472, 473, 0, 475, 476,
	477, 478, 479, 0, 606, 480, 562, 481, 563, 482,
	483, 484, 485, 486, 487, 488, 490, 0, 0, 492,
	493, 494, 496, 497, 498, 499, 502, 503, 504, 505,
	506, 0, 507, 509, 511, 589, 566, 567, 568, 569,
	570, 572, 573, 574, 575, 512, 513, 529, 380, 374,
	330, 372, 373, 377, 378, 381, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 657, 658, 659, 0, 0, 0, 0, 0,
	193, 651, 652, 653, 654, 655, 656, 649, 0, 0,
	0, 0, 0, 0, 660, 661, 662, 0, 206, 0,
	223, 0, 0, 272, 309, 524, 0, 0, 369, 0,
	422, 426, 0, 515, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 491, 0, 0, 0,
	0, 211, 607, 514, 585, 0, 0, 0, 3789, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	413, 347, 0, 564, 440, 218, 264, 251, 293, 335,
	447, 0, 0, 325, 495, 260, 349, 0, 239, 382,
	0, 471, 346, 0, 454, 474, 0, 366, 245, 405,
	461, 462, 0, 0, 0, 0, 0, 249, 250, 371,
	231, 379, 576, 542, 434, 392, 390, 0, 357, 414,
	571, 0, 0, 279, 0, 274, 370, 510, 237, 489,
	408, 375, 329, 437, 466, 276, 261, 262, 305, 407,
	295, 247, 500, 539, 543, 541, 537, 534, 538, 535,
	536, 540, 296, 533, 0, 508, 517, 551, 531, 559,
	516, 556, 526, 271, 555, 520, 519, 565, 546, 547,
	501, 561, 532, 530, 523, 522, 518, 0, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 207, 0,
	208, 209, 210, 212, 213, 214, 0, 215, 216, 217,
	220, 221, 222, 224, 584, 225, 226, 227, 228, 229,
	230, 521, 0, 232, 233, 234, 235, 236, 238, 240,
	241, 242, 243, 244, 246, 248, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 0,
	258, 259, 263, 265, 266, 267, 268, 269, 270, 273,
	0, 275, 277, 0, 278, 281, 0, 282, 283, 284,
	285, 286, 287, 288, 289, 525, 290, 0, 291, 292,
	294, 0, 297, 298, 299, 300, 301, 0, 302, 527,
	528, 303, 304, 306, 307, 308, 310, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 0, 322,
	323, 324, 326, 0, 327, 328, 331, 332, 333, 334,
	0, 336, 544, 0, 337, 338, 339, 0, 0, 340,
	341, 342, 343, 344, 345, 348, 545, 350, 351, 352,
	353, 354, 355, 356, 586, 358, 359, 360, 361, 362,
	363, 364, 548, 549, 365, 367, 368, 550, 552, 553,
	0, 383, 384, 385, 386, 387, 388, 389, 391, 0,
	393, 394, 395, 554, 396, 397, 398, 399, 0, 400,
	401, 402, 403, 404, 406, 409, 410, 411, 412, 0,
	415, 416, 417, 418, 419, 420, 421, 423, 424, 425,
	427, 428, 429, 587, 430, 431, 432, 433, 557, 435,
	436, 588, 438, 439, 441, 442, 443, 444, 445, 446,
	605, 0, 448, 558, 449, 450, 451, 452, 453, 0,
	455, 456, 457, 458, 459, 460, 463, 464, 465, 467,
	468, 560, 469, 470, 0, 472, 473, 0, 475, 476,
	477, 478, 479, 0, 606, 480, 562, 481, 563, 482,
	483, 484, 485, 486, 487, 488, 490, 0, 0, 492,
	493, 494, 496, 497, 498, 499, 502, 503, 504, 505,
	506, 0, 507, 509, 511, 589, 566, 567, 568, 569,
	570, 572, 573, 574, 575, 512, 513, 529, 380, 374,
	330, 372, 373, 377, 378, 381, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 657, 658, 659, 0, 0, 0, 0, 0,
	193, 651, 652, 653, 654, 655, 656, 649, 0, 0,
	0, 0, 0, 0, 660, 661, 662, 0, 206, 0,
	223, 0, 0, 272, 309, 524, 0, 0, 369, 0,
	422, 426, 0, 515, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 491, 0, 0, 0,
	0, 211, 607, 514, 585, 0, 0, 0, 376, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	413, 347, 0, 564, 440, 218, 264, 251, 293, 335,
	447, 0, 0, 325, 495, 260, 349, 0, 239, 382,
	0, 471, 346, 0, 454, 474, 0, 366, 245, 405,
	461, 462, 0, 0, 0, 0, 0, 249, 250, 371,
	231, 379, 576, 542, 434, 392, 390, 0, 357, 414,
	571, 0, 0, 279, 0, 274, 370, 510, 237, 489,
	408, 375, 329, 437, 466, 276, 261, 262, 305, 407,
	295, 247, 500, 539, 543, 541, 537, 534, 538, 535,
	536, 540, 296, 533, 0, 508, 517, 551, 531, 559,
	516, 556, 526, 271, 555, 520, 519, 565, 546, 547,
	501, 561, 532, 530, 523, 522, 518, 0, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 207, 0,
	208, 209, 210, 212, 213, 214, 0, 215, 216, 217,
	220, 221, 222, 224, 584, 225, 226, 227, 2600, 229,
	230, 521, 0, 232, 233, 234, 235, 236, 238, 240,
	241, 242, 243, 244, 246, 248, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 0,
	258, 259, 263, 265, 266, 267, 268, 269, 270, 273,
	0, 275, 277, 0, 278, 281, 0, 282, 283, 284,
	285, 286, 287, 288, 289, 525, 2601, 0, 291, 292,
	294, 0, 297, 298, 299, 300, 301, 0, 302, 527,
	528, 303, 304, 306, 307, 308, 310, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 0, 322,
	323, 324, 326, 0, 327, 328, 331, 332, 333, 334,
	0, 336, 544, 0, 337, 338, 339, 0, 0, 340,
	341, 342, 343, 344, 345, 348, 545, 350, 351, 352,
	353, 354, 355, 356, 586, 358, 359, 360, 361, 362,
	363, 364, 548, 549, 365, 367, 368, 550, 552, 553,
	0, 383, 384, 385, 386, 387, 388, 389, 391, 0,
	393, 394, 395, 554, 396, 397, 398, 399, 0, 400,
	401, 402, 403, 404, 406, 409, 410, 411, 412, 0,
	415, 416, 417, 418, 419, 420, 421, 423, 424, 425,
	427, 428, 429, 587, 430, 431, 432, 433, 557, 435,
	436, 588, 438, 439, 441, 442, 443, 444, 445, 446,
	605, 0, 448, 558, 449, 450, 451, 452, 453, 0,
	455, 456, 457, 458, 459, 460, 463, 464, 465, 467,
	468, 560, 469, 470, 0, 472, 473, 0, 475, 476,
	477, 478, 479, 0, 606, 480, 562, 481, 563, 482,
	483, 484, 485, 486, 487, 488, 490, 0, 0, 492,
	493, 494, 496, 497, 498, 499, 502, 503, 504, 505,
	506, 0, 507, 509, 511, 589, 566, 567, 568, 569,
	570, 572, 573, 574, 575, 512, 513, 529, 380, 374,
	330, 372, 373, 377, 378, 381, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 657, 658, 659, 0, 0, 0, 0, 0,
	193, 651, 652, 653, 654, 655, 656, 649, 0, 0,
	0, 0, 0, 0, 660, 661, 662, 0, 206, 0,
	223, 0, 0, 272, 309, 524, 0, 0, 369, 0,
	422, 426, 0, 515, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 491, 0, 0, 0,
	0, 211, 607, 514, 585, 0, 0, 0, 376, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	413, 347, 0, 564, 440, 218, 264, 251, 293, 335,
	447, 0, 0, 325, 495, 260, 349, 0, 239, 382,
	0, 471, 346, 0, 454, 474, 0, 366, 245, 405,
	461, 462, 0, 0, 0, 0, 0, 249, 250, 371,
	231, 379, 576, 542, 434, 392, 390, 0, 357, 414,
	571, 0, 0, 279, 0, 274, 370, 510, 237, 489,
	408, 375, 329, 437, 466, 276, 261, 262, 305, 407,
	295, 247, 500, 539, 543, 541, 537, 534, 538, 535,
	536, 540, 296, 533, 0, 508, 517, 551, 531, 559,
	516, 556, 526, 271, 555, 520, 519, 565, 546, 547,
	501, 561, 532, 530, 523, 522, 518, 0, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 207, 0,
	208, 209, 210, 212, 213, 214, 0, 215, 216, 217,
	220, 221, 222, 224, 584, 225, 226, 227, 645, 229,
	230, 521, 0, 232, 233, 234, 235, 236, 238, 240,
	241, 242, 243, 244, 246, 248, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 0,
	258, 259, 263, 265, 266, 267, 268, 269, 270, 273,
	0, 275, 277, 0, 278, 281, 0, 282, 283, 284,
	285, 286, 287, 288, 289, 525, 646, 0, 291, 292,
	294, 0, 297, 298, 299, 300, 301, 0, 302, 527,
	528, 303, 304, 306, 307, 308, 310, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 0, 322,
	323, 324, 326, 0, 327, 328, 331, 332, 333, 334,
	0, 336, 544, 0, 337, 338, 339, 0, 0, 340,
	341, 342, 343, 344, 345, 348, 545, 350, 351, 352,
	353, 354, 355, 356, 586, 358, 359, 360, 361, 362,
	363, 364, 548, 549, 365, 367, 368, 550, 552, 553,
	0, 383, 384, 385, 386, 387, 388, 389, 391, 0,
	393, 394, 395, 554, 396, 397, 398, 399, 0, 400,
	401, 402, 403, 404, 406, 409, 410, 411, 412, 0,
	415, 416, 417, 418, 419, 420, 421, 423, 424, 425,
	427, 428, 429, 587, 430, 431, 432, 433, 557, 435,
	436, 588, 438, 439, 441, 442, 443, 444, 445, 446,
	605, 0, 448, 558, 449, 450, 451, 452, 453, 0,
	455, 456, 457, 458, 459, 460, 463, 464, 465, 467,
	468, 560, 469, 470, 0, 472, 473, 0, 475, 476,
	477, 478, 479, 0, 606, 480, 562, 481, 563, 482,
	483, 484, 485, 486, 487, 488, 490, 0, 0, 492,
	493, 494, 496, 497, 498, 499, 502, 503, 504, 505,
	506, 0, 507, 509, 511, 589, 566, 567, 568, 569,
	570, 572, 573, 574, 575, 512, 513, 529, 380, 374,
	330, 372, 373, 377, 378, 381, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 657, 658, 659, 0, 0, 0, 0, 0,
	0, 651, 652, 653, 654, 655, 656, 206, 0, 223,
	0, 0, 272, 309, 524, 0, 0, 369, 0, 422,
	426, 0, 515, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 491, 0, 0, 0, 0,
	211, 607, 514, 585, 0, 0, 0, 376, 0, 0,
	0, 0, 0, 0, 0, 219, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 413,
	347, 0, 564, 440, 218, 264, 251, 293, 335, 447,
	0, 0, 325, 495, 260, 349, 0, 239, 382, 0,
	471, 346, 0, 454, 474, 0, 366, 245, 405, 461,
	462, 0, 0, 0, 0, 0, 249, 250, 371, 231,
	379, 576, 542, 434, 392, 390, 0, 357, 414, 571,
	0, 0, 279, 0, 274, 370, 510, 237, 489, 408,
	375, 329, 437, 466, 276, 261, 262, 305, 407, 295,
	247, 500, 539, 543, 541, 537, 534, 538, 535, 536,
	540, 296, 533, 0, 508, 517, 551, 531, 559, 516,
	556, 526, 271, 555, 520, 519, 565, 546, 547, 501,
	561, 532, 530, 523, 522, 518, 0, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 207, 0, 208,
	209, 210, 212, 213, 214, 0, 215, 216, 217, 220,
	221, 222, 224, 584, 225, 226, 227, 228, 229, 230,
	521, 0, 232, 233, 234, 235, 236, 238, 240, 241,
	242, 243, 244, 246, 248, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 0, 258,
	259, 263, 265, 266, 267, 268, 269, 270, 273, 0,
	275, 277, 0, 278, 281, 0, 282, 283, 284, 285,
	286, 287, 288, 289, 525, 290, 0, 291, 292, 294,
	0, 297, 298, 299, 300, 301, 0, 302, 527, 528,
	303, 304, 306, 307, 308, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 0, 322, 323,
	324, 326, 0, 327, 328, 331, 332, 333, 334, 0,
	336, 544, 0, 337, 338, 339, 0, 0, 340, 341,
	342, 343, 344, 345, 348, 545, 350, 351, 352, 353,
	354, 355, 356, 586, 358, 359, 360, 361, 362, 363,
	364, 548, 549, 365, 367, 368, 550, 552, 553, 0,
	383, 384, 385, 386, 387, 388, 389, 391, 0, 393,
	394, 395, 554, 396, 397, 398, 399, 0, 400, 401,
	402, 403, 404, 406, 409, 410, 411, 412, 0, 415,
	416, 417, 418, 419, 420, 421, 423, 424, 425, 427,
	428, 429, 587, 430, 431, 432, 433, 557, 435, 436,
	588, 438, 439, 441, 442, 443, 444, 445, 446, 605,
	0, 448, 558, 449, 450, 451, 452, 453, 0, 455,
	456, 457, 458, 459, 460, 463, 464, 465, 467, 468,
	560, 469, 470, 0, 472, 473, 0, 475, 476, 477,
	478, 479, 0, 606, 480, 562, 481, 563, 482, 483,
	484, 485, 486, 487, 488, 490, 0, 0, 492, 493,
	494, 496, 497, 498, 499, 502, 503, 504, 505, 506,
	0, 507, 509, 511, 589, 566, 567, 568, 569, 570,
	572, 573, 574, 575, 512, 513, 529, 380, 374, 330,
	372, 373, 377, 378, 381, 193, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 223, 0, 0, 272, 309,
	524, 0, 4153, 369, 0, 422, 426, 0, 515, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 491, 0, 0, 0, 0, 211, 607, 514, 585,
	0, 0, 0, 376, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 413, 347, 0, 564, 440,
	218, 264, 251, 293, 335, 447, 0, 0, 325, 495,
	260, 349, 0, 239, 382, 0, 471, 346, 0, 454,
	474, 0, 366, 245, 405, 461, 462, 0, 0, 0,
	0, 0, 249, 250, 371, 231, 379, 576, 542, 434,
	392, 390, 0, 357, 414, 571, 0, 0, 279, 0,
	274, 370, 510, 237, 489, 408, 375, 329, 437, 466,
	276, 261, 262, 305, 407, 295, 247, 500, 539, 543,
	541, 537, 534, 538, 535, 536, 540, 296, 533, 0,
	508, 517, 551, 531, 559, 516, 556, 526, 271, 555,
	520, 519, 565, 546, 547, 501, 561, 532, 530, 523,
	522, 518, 0, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 207, 0, 208, 209, 210, 212, 213,
	214, 0, 215, 216, 217, 220, 221, 222, 224, 584,
	225, 226, 227, 228, 229, 230, 521, 0, 232, 233,
	234, 235, 236, 238, 240, 241, 242, 243, 244, 246,
	248, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 0, 258, 259, 263, 265, 266,
	267, 268, 269, 270, 273, 0, 275, 277, 0, 278,
	281, 0, 282, 283, 284, 285, 286, 287, 288, 289,
	525, 290, 0, 291, 292, 294, 0, 297, 298, 299,
	300, 301, 0, 302, 527, 528, 303, 304, 306, 307,
	308, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 0, 322, 323, 324, 326, 0, 327,
	328, 331, 332, 333, 334, 0, 336, 544, 0, 337,
	338, 339, 0, 0, 340, 341, 342, 343, 344, 345,
	348, 545, 350, 351, 352, 353, 354, 355, 356, 586,
	358, 359, 360, 361, 362, 363, 364, 548, 549, 365,
	367, 368, 550, 552, 553, 0, 383, 384, 385, 386,
	387, 388, 389, 391, 0, 393, 394, 395, 554, 396,
	397, 398, 399, 0, 400, 401, 402, 403, 404, 406,
	409, 410, 411, 412, 0, 415, 416, 417, 418, 419,
	420, 421, 423, 424, 425, 427, 428, 429, 587, 430,
	431, 432, 433, 557, 435, 436, 588, 438, 439, 441,
	442, 443, 444, 445, 446, 605, 0, 448, 558, 449,
	450, 451, 452, 453, 0, 455, 456, 457, 458, 459,
	460, 463, 464, 465, 467, 468, 560, 469, 470, 0,
	472, 473, 0, 475, 476, 477, 478, 479, 0, 606,
	480, 562, 481, 563, 482, 483, 484, 485, 486, 487,
	488, 490, 0, 0, 492, 493, 494, 496, 497, 498,
	499, 502, 503, 504, 505, 506, 0, 507, 509, 511,
	589, 566, 567, 568, 569, 570, 572, 573, 574, 575,
	512, 513, 529, 380, 374, 330, 372, 373, 377, 378,
	381, 193, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	0, 223, 0, 0, 272, 309, 524, 0, 4034, 369,
	0, 422, 426, 0, 515, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 491, 0, 0,
	0, 0, 211, 607, 514, 585, 0, 0, 0, 376,
	0, 0, 0, 0, 0, 0, 0, 219, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 413, 347, 0, 564, 440, 218, 264, 251, 293,
	335, 447, 0, 0, 325, 495, 260, 349, 0, 239,
	382, 0, 471, 346, 0, 454, 474, 0, 366, 245,
	405, 461, 462, 0, 0, 0, 0, 0, 249, 250,
	371, 231, 379, 576, 542, 434, 392, 390, 0, 357,
	414, 571, 0, 0, 279, 0, 274, 370, 510, 237,
	489, 408, 375, 329, 437, 466, 276, 261, 262, 305,
	407, 295, 247, 500, 539, 543, 541, 537, 534, 538,
	535, 536, 540, 296, 533, 0, 508, 517, 551, 531,
	559, 516, 556, 526, 271, 555, 520, 519, 565, 546,
	547, 501, 561, 532, 530, 523, 522, 518, 0, 196,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 207,
	0, 208, 209, 210, 212, 213, 214, 0, 215, 216,
	217, 220, 221, 222, 224, 584, 225, 226, 227, 228,
	229, 230, 521, 0, 232, 233, 234, 235, 236, 238,
	240, 241, 242, 243, 244, 246, 248, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	0, 258, 259, 263, 265, 266, 267, 268, 269, 270,
	273, 0, 275, 277, 0, 278, 281, 0, 282, 283,
	284, 285, 286, 287, 288, 289, 525, 290, 0, 291,
	292, 294, 0, 297, 298, 299, 300, 301, 0, 302,
	527, 528, 303, 304, 306, 307, 308, 310, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 0,
	322, 323, 324, 326, 0, 327, 328, 331, 332, 333,
	334, 0, 336, 544, 0, 337, 338, 339, 0, 0,
	340, 341, 342, 343, 344, 345, 348, 545, 350, 351,
	352, 353, 354, 355, 356, 586, 358, 359, 360, 361,
	362, 363, 364, 548, 549, 365, 367, 368, 550, 552,
	553, 0, 383, 384, 385, 386, 387, 388, 389, 391,
	0, 393, 394, 395, 554, 396, 397, 398, 399, 0,
	400, 401, 402, 403, 404, 406, 409, 410, 411, 412,
	0, 415, 416, 417, 418, 419, 420, 421, 423, 424,
	425, 427, 428, 429, 587, 430, 431, 432, 433, 557,
	435, 436, 588, 438, 439, 441, 442, 443, 444, 445,
	446, 605, 0, 448, 558, 449, 450, 451, 452, 453,
	0, 455, 456, 457, 458, 459, 460, 463, 464, 465,
	467, 468, 560, 469, 470, 0, 472, 473, 0, 475,
	476, 477, 478, 479, 0, 606, 480, 562, 481, 563,
	482, 483, 484, 485, 486, 487, 488, 490, 0, 0,
	492, 493, 494, 496, 497, 498, 499, 502, 503, 504,
	505, 506, 0, 507, 509, 511, 589, 566, 567, 568,
	569, 570, 572, 573, 574, 575, 512, 513, 529, 380,
	374, 330, 372, 373, 377, 378, 381, 193, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 0, 223, 0, 0,
	272, 309, 524, 0, 4031, 369, 0, 422, 426, 77,
	515, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 491, 0, 0, 0, 0, 211, 607,
	514, 585, 0, 0, 0, 376, 74, 0, 0, 0,
	75, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 413, 347, 0,
	1700, 440, 218, 264, 251, 293, 335, 447, 0, 0,
	325, 495, 260, 349, 0, 239, 382, 0, 471, 346,
	0, 454, 474, 0, 366, 245, 405, 461, 462, 0,
	0, 0, 0, 0, 249, 250, 371, 231, 379, 576,
	542, 434, 392, 390, 0, 357, 414, 571, 0, 0,
	279, 0, 274, 370, 510, 237, 489, 408, 375, 329,
	437, 466, 276, 261, 262, 305, 407, 295, 247, 500,
	539, 543, 541, 537, 534, 538, 535, 536, 540, 296,
	533, 0, 508, 517, 551, 531, 559, 516, 556, 526,
	271, 555, 520, 519, 565, 546, 547, 501, 561, 532,
	530, 523, 522, 518, 0, 196, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 207, 0, 208, 209, 210,
	212, 213, 214, 0, 215, 216, 217, 220, 221, 222,
	224, 584, 225, 226, 227, 228, 229, 230, 521, 0,
	232, 233, 234, 235, 236, 238, 240, 241, 242, 243,
	244, 246, 248, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 0, 258, 259, 263,
	265, 266, 267, 268, 269, 270, 273, 0, 275, 277,
	0, 278, 281, 0, 282, 283, 284, 285, 286, 287,
	288, 289, 525, 290, 0, 291, 292, 294, 0, 297,
	298, 299, 300, 301, 0, 302, 527, 528, 303, 304,
	306, 307, 308, 310, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 0, 322, 323, 324, 326,
	0, 327, 328, 331, 332, 333, 334, 0, 336, 544,
	0, 337, 338, 339, 0, 0, 340, 341, 342, 343,
	344, 345, 348, 545, 350, 351, 352, 353, 354, 355,
	356, 586, 358, 359, 360, 361, 362, 363, 364, 548,
	549, 365, 367, 368, 550, 552, 553, 0, 383, 384,
	385, 386, 387, 388, 389, 391, 0, 393, 394, 395,
	554, 396, 397, 398, 399, 0, 400, 401, 402, 403,
	404, 406, 409, 410, 411, 412, 0, 415, 416, 417,
	418, 419, 420, 421, 423, 424, 425, 427, 428, 429,
	587, 430, 431, 432, 433, 557, 435, 436, 588, 438,
	439, 441, 442, 443, 444, 445, 446, 605, 0, 448,
	558, 449, 450, 451, 452, 453, 0, 455, 456, 457,
	458, 459, 460, 463, 464, 465, 467, 468, 560, 469,
	470, 0, 472, 473, 0, 475, 476, 477, 478, 479,
	0, 606, 480, 562, 481, 563, 482, 483, 484, 485,
	486, 487, 488, 490, 0, 0, 492, 493, 494, 496,
	497, 498, 499, 502, 503, 504, 505, 506, 0, 507,
	509, 511, 589, 566, 567, 568, 569, 570, 572, 573,
	574, 575, 512, 513, 529, 380, 374, 330, 372, 373,
	377, 378, 381, 745, 0, 0, 846, 0, 0, 0,
	0, 0, 78, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 0, 223, 713, 73, 272, 309, 524, 0,
	0, 369, 0, 422, 426, 0, 515, 0, 0, 0,
	0, 280, 1181, 718, 0, 724, 0, 730, 1180, 491,
	0, 720, 721, 726, 211, 607, 514, 585, 0, 0,
	0, 376, 0, 0, 0, 0, 0, 0, 0, 219,
	0, 0, 0, 1182, 722, 719, 723, 729, 717, 727,
	714, 725, 0, 413, 347, 0, 564, 440, 218, 264,
	251, 293, 335, 447, 0, 0, 325, 495, 260, 349,
	0, 239, 382, 0, 471, 346, 0, 454, 474, 0,
	366, 245, 405, 461, 462, 711, 716, 0, 732, 0,
	249, 250, 371, 231, 379, 576, 542, 434, 392, 390,
	0, 357, 414, 571, 0, 0, 279, 0, 274, 370,
	510, 237, 489, 408, 375, 329, 437, 466, 276, 261,
	262, 305, 407, 295, 247, 500, 539, 543, 541, 537,
	534, 538, 535, 536, 540, 296, 533, 0, 508, 517,
	551, 531, 559, 516, 556, 526, 271, 555, 520, 519,
	565, 546, 547, 501, 561, 532, 530, 523, 522, 518,
	0, 196, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 207, 0, 208, 209, 210, 212, 213, 214, 710,
	215, 216, 217, 220, 221, 222, 224, 584, 225, 226,
	227, 228, 229, 230, 521, 712, 232, 233, 234, 235,
	236, 238, 240, 241, 242, 243, 244, 246, 248, 0,
	0, 0, 715, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 0, 258, 259, 263, 265, 266, 267, 268,
	269, 270, 273, 0, 275, 277, 0, 278, 281, 0,
	282, 283, 284, 285, 286, 287, 288, 289, 525, 290,
	0, 291, 292, 294, 0, 297, 298, 299, 300, 301,
	0, 302, 527, 528, 303, 304, 306, 307, 308, 310,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 0, 322, 323, 324, 326, 0, 327, 328, 331,
	332, 333, 334, 0, 336, 544, 0, 337, 338, 339,
	0, 0, 340, 341, 342, 343, 344, 345, 348, 545,
	350, 351, 352, 353, 354, 355, 356, 586, 358, 359,
	360, 361, 362, 363, 364, 548, 549, 365, 367, 368,
	550, 552, 553, 728, 383, 384, 385, 386, 387, 388,
	389, 391, 0, 393, 394, 395, 554, 396, 397, 398,
	399, 0, 400, 401, 402, 403, 404, 406, 409, 410,
	411, 412, 0, 415, 416, 417, 418, 419, 420, 421,
	423, 424, 425, 427, 428, 429, 587, 430, 431, 432,
	433, 557, 435, 436, 588, 438, 439, 441, 442, 443,
	444, 445, 446, 605, 0, 448, 558, 449, 450, 451,
	452, 453, 0, 455, 456, 457, 458, 459, 460, 463,
	464, 465, 467, 468, 560, 469, 470, 0, 472, 473,
	731, 475, 476, 477, 478, 479, 0, 606, 480, 562,
	481, 563, 482, 483, 484, 485, 486, 487, 488, 490,
	0, 0, 492, 493, 494, 496, 497, 498, 499, 502,
	503, 504, 505, 506, 0, 507, 509, 511, 589, 566,
	567, 568, 569, 570, 572, 573, 574, 575, 512, 513,
	529, 380, 374, 330, 372, 373, 377, 378, 381, 745,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 223,
	713, 0, 272, 309, 524, 0, 0, 369, 0, 422,
	426, 0, 515, 0, 0, 0, 0, 280, 0, 718,
	0, 724, 0, 730, 0, 491, 0, 720, 721, 726,
	211, 607, 514, 585, 0, 0, 0, 376, 0, 0,
	0, 0, 0, 0, 0, 219, 0, 0, 0, 0,
	722, 719, 723, 729, 717, 727, 714, 725, 0, 413,
	347, 0, 564, 440, 218, 264, 251, 293, 335, 447,
	0, 0, 325, 495, 260, 349, 0, 239, 382, 1910,
	471, 346, 0, 454, 474, 0, 366, 245, 405, 461,
	462, 711, 716, 0, 732, 0, 249, 250, 371, 231,
	379, 576, 542, 434, 392, 390, 0, 357, 414, 571,
	0, 0, 279, 0, 274, 370, 510, 237, 489, 408,
	375, 329, 437, 466, 276, 261, 262, 305, 407, 295,
	247, 500, 539, 543, 541, 537, 534, 538, 535, 536,
	540, 296, 533, 0, 508, 517, 551, 531, 559, 516,
	556, 526, 271, 555, 520, 519, 565, 546, 547, 501,
	561, 532, 530, 523, 522, 518, 0, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 207, 0, 208,
	209, 210, 212, 213, 214, 710, 215, 216, 217, 220,
	221, 222, 224, 584, 225, 226, 227, 228, 229, 230,
	521, 712, 232, 233, 234, 235, 236, 238, 240, 241,
	242, 243, 244, 246, 248, 0, 0, 742, 715, 0,
	0, 743, 252, 253, 254, 255, 256, 257, 0, 258,
	259, 263, 265, 266, 267, 268, 269, 270, 273, 0,
	275, 277, 0, 278, 281, 0, 282, 283, 284, 285,
	286, 287, 288, 289, 525, 290, 0, 291, 292, 294,
	0, 297, 298, 299, 300, 301, 0, 302, 527, 528,
	303, 304, 306, 307, 308, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 0, 322, 323,
	324, 326, 0, 327, 328, 331, 332, 333, 334, 0,
	336, 544, 0, 337, 338, 339, 0, 0, 340, 341,
	342, 343, 344, 345, 348, 545, 350, 351, 352, 353,
	354, 355, 356, 586, 358, 359, 360, 361, 362, 363,
	364, 548, 549, 365, 367, 368, 550, 552, 553, 728,
	383, 384, 385, 386, 387, 388, 389, 391, 0, 393,
	394, 395, 554, 396, 397, 398, 399, 0, 400, 401,
	402, 403, 404, 406, 409, 410, 411, 412, 0, 415,
	416, 417, 418, 419, 420, 421, 423, 424, 425, 427,
	428, 429, 587, 430, 431, 432, 433, 557, 435, 436,
	588, 438, 439, 441, 442, 443, 444, 445, 446, 605,
	744, 448, 558, 449, 450, 451, 452, 453, 0, 455,
	456, 457, 458, 459, 460, 463, 464, 465, 467, 468,
	560, 469, 470, 0, 472, 473, 731, 475, 476, 477,
	478, 479, 0, 606, 480, 562, 481, 563, 482, 483,
	484, 485, 486, 487, 488, 490, 0, 0, 492, 493,
	494, 496, 497, 498, 499, 502, 503, 504, 505, 506,
	0, 507, 509, 511, 589, 566, 567, 568, 569, 570,
	572, 573, 574, 575, 512, 513, 529, 380, 374, 330,
	372, 373, 377, 378, 381, 193, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 223, 0, 0, 272, 309,
	524, 0, 0, 369, 0, 422, 426, 0, 515, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 491, 0, 0, 0, 0, 211, 607, 514, 585,
	0, 0, 0, 376, 0, 0, 0, 604, 1925, 0,
	0, 219, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 413, 347, 0, 564, 440,
	218, 264, 251, 293, 335, 447, 0, 0, 325, 495,
	260, 349, 0, 239, 382, 0, 471, 346, 0, 454,
	474, 0, 366, 245, 405, 461, 462, 0, 0, 0,
	0, 0, 249, 250, 371, 231, 379, 576, 542, 434,
	392, 390, 0, 357, 414, 571, 0, 0, 279, 0,
	274, 370, 510, 237, 489, 408, 375, 329, 437, 466,
	276, 261, 262, 305, 407, 295, 247, 500, 539, 543,
	541, 537, 534, 538, 535, 536, 540, 296, 533, 0,
	508, 517, 551, 531, 559, 516, 556, 526, 271, 555,
	520, 519, 565, 546, 547, 501, 561, 532, 530, 523,
	522, 518, 0, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 207, 0, 208, 209, 210, 212, 213,
	214, 0, 215, 216, 217, 220, 221, 222, 224, 584,
	225, 226, 227, 228, 229, 230, 521, 0, 232, 233,
	234, 235, 236, 238, 240, 241, 242, 243, 244, 246,
	248, 0, 0, 0, 1929, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 0, 258, 259, 263, 265, 266,
	267, 268, 269, 270, 273, 0, 275, 277, 0, 278,
	281, 0, 282, 283, 284, 285, 286, 287, 288, 289,
	525, 290, 0, 291, 292, 294, 0, 297, 298, 299,
	300, 301, 0, 302, 527, 528, 303, 304, 306, 307,
	308, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 0, 322, 323, 324, 326, 0, 327,
	328, 331, 332, 333, 334, 0, 336, 544, 0, 337,
	338, 339, 0, 0, 340, 341, 342, 343, 344, 345,
	348, 545, 350, 351, 352, 353, 354, 355, 356, 586,
	358, 359, 360, 361, 362, 363, 364, 548, 549, 365,
	367, 368, 550, 552, 553, 0, 383, 384, 385, 386,
	387, 388, 389, 391, 0, 393, 394, 395, 554, 396,
	397, 398, 399, 0, 400, 401, 402, 403, 404, 406,
	409, 410, 411, 412, 0, 415, 416, 417, 418, 419,
	420, 421, 423, 424, 425, 427, 428, 429, 587, 430,
	431, 432, 433, 557, 435, 436, 588, 438, 439, 441,
	442, 443, 444, 445, 446, 605, 0, 448, 558, 449,
	450, 451, 452, 453, 0, 455, 456, 457, 458, 459,
	460, 463, 464, 465, 467, 468, 560, 469, 470, 0,
	1926, 473, 0, 475, 476, 477, 478, 479, 0, 606,
	480, 562, 481, 563, 482, 483, 484, 485, 486, 487,
	488, 490, 0, 0, 492, 493, 494, 496, 497, 498,
	499, 502, 503, 504, 505, 506, 0, 507, 509, 511,
	589, 566, 567, 568, 569, 570, 572, 573, 574, 575,
	512, 513, 529, 380, 374, 330, 372, 373, 377, 378,
	381, 745, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	0, 223, 713, 953, 272, 309, 524, 0, 0, 369,
	0, 422, 426, 0, 515, 0, 0, 0, 0, 280,
	0, 718, 0, 724, 0, 730, 0, 491, 0, 720,
	721, 726, 211, 607, 514, 585, 0, 0, 0, 376,
	0, 0, 0, 0, 0, 0, 0, 219, 0, 0,
	0, 0, 722, 719, 723, 729, 717, 727, 714, 725,
	0, 413, 347, 0, 564, 440, 218, 264, 251, 293,
	335, 447, 0, 0, 325, 495, 260, 349, 0, 239,
	382, 0, 471, 346, 0, 454, 474, 0, 366, 245,
	405, 461, 462, 711, 716, 0, 732, 0, 249, 250,
	371, 231, 379, 576, 542, 434, 392, 390, 0, 357,
	414, 571, 0, 0, 279, 0, 274, 370, 510, 237,
	489, 408, 375, 329, 437, 466, 276, 261, 262, 305,
	407, 295, 247, 500, 539, 543, 541, 537, 534, 538,
	535, 536, 540, 296, 533, 0, 508, 517, 551, 531,
	559, 516, 556, 526, 271, 555, 520, 519, 565, 546,
	547, 501, 561, 532, 530, 523, 522, 518, 0, 196,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 207,
	0, 208, 209, 210, 212, 213, 214, 710, 215, 216,
	217, 220, 221, 222, 224, 584, 225, 226, 227, 228,
	229, 230, 521, 712, 232, 233, 234, 235, 236, 238,
	240, 241, 242, 243, 244, 246, 248, 0, 0, 742,
	715, 0, 0, 743, 252, 253, 254, 255, 256, 257,
	0, 258, 259, 263, 265, 266, 267, 268, 269, 270,
	273, 0, 275, 277, 0, 278, 281, 0, 282, 283,
	284, 285, 286, 287, 288, 289, 525, 290, 0, 291,
	292, 294, 0, 297, 298, 299, 300, 301, 0, 302,
	527, 528, 303, 304, 306, 307, 308, 310, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 0,
	322, 323, 324, 326, 0, 327, 328, 331, 332, 333,
	334, 0, 336, 544, 0, 337, 338, 339, 0, 0,
	340, 341, 342, 343, 344, 345, 348, 545, 350, 351,
	352, 353, 354, 355, 356, 586, 358, 359, 360, 361,
	362, 363, 364, 548, 549, 365, 367, 368, 550, 552,
	553, 728, 383, 384, 385, 386, 387, 388, 389, 391,
	0, 393, 394, 395, 554, 396, 397, 398, 399, 0,
	400, 401, 402, 403, 404, 406, 409, 410, 411, 412,
	0, 415, 416, 417, 418, 419, 420, 421, 423, 424,
	425, 427, 428, 429, 587, 430, 431, 432, 433, 557,
	435, 436, 588, 438, 439, 441, 442, 443, 444, 445,
	446, 605, 744, 448, 558, 449, 450, 451, 452, 453,
	0, 455, 456, 457, 458, 459, 460, 463, 464, 465,
	467, 468, 560, 469, 470, 0, 472, 473, 731, 475,
	476, 477, 478, 479, 0, 606, 480, 562, 481, 563,
	482, 483, 484, 485, 486, 487, 488, 490, 0, 0,
	492, 493, 494, 496, 497, 498, 499, 502, 503, 504,
	505, 506, 0, 507, 509, 511, 589, 566, 567, 568,
	569, 570, 572, 573, 574, 575, 512, 513, 529, 380,
	374, 330, 372, 373, 377, 378, 381, 193, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 2735, 223, 0, 0,
	272, 309, 524, 0, 0, 369, 0, 422, 426, 0,
	515, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 491, 0, 0, 0, 0, 211, 607,
	514, 585, 0, 0, 0, 376, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 413, 347, 0,
	564, 440, 218, 264, 251, 293, 335, 447, 0, 0,
	325, 495, 260, 349, 0, 239, 382, 0, 471, 346,
	0, 454, 474, 0, 366, 245, 405, 461, 462, 0,
	0, 0, 0, 0, 249, 250, 371, 231, 379, 576,
	542, 434, 392, 390, 0, 357, 414, 571, 0, 0,
	279, 0, 274, 370, 510, 237, 489, 408, 375, 329,
	437, 466, 276, 261, 262, 305, 407, 295, 247, 500,
	539, 543, 541, 537, 534, 538, 535, 536, 540, 296,
	533, 0, 508, 517, 551, 531, 559, 516, 556, 526,
	271, 555, 520, 519, 565, 546, 547, 501, 561, 532,
	530, 523, 522, 518, 0, 196, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 207, 0, 208, 209, 210,
	212, 213, 214, 0, 215, 216, 217, 220, 221, 222,
	224, 584, 225, 226, 227, 228, 229, 230, 521, 0,
	232, 233, 234, 235, 236, 238, 240, 241, 242, 243,
	244, 246, 248, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 0, 258, 259, 263,
	265, 266, 267, 268, 269, 270, 273, 0, 275, 277,
	0, 278, 281, 0, 282, 283, 284, 285, 286, 287,
	288, 289, 525, 290, 0, 291, 292, 294, 0, 297,
	298, 299, 300, 301, 0, 302, 527, 528, 303, 304,
	306, 307, 308, 310, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 0, 322, 323, 324, 326,
	0, 327, 328, 331, 332, 333, 334, 0, 336, 544,
	0, 337, 338, 339, 0, 0, 340, 341, 342, 343,
	344, 345, 348, 545, 350, 351, 352, 353, 354, 355,
	356, 586, 358, 359, 360, 361, 362, 363, 364, 548,
	549, 365, 367, 368, 550, 552, 553, 0, 383, 384,
	385, 386, 387, 388, 389, 391, 0, 393, 394, 395,
	554, 396, 397, 398, 399, 0, 400, 401, 402, 403,
	404, 406, 409, 410, 411, 412, 0, 415, 416, 417,
	418, 419, 420, 421, 423, 424, 425, 427, 428, 429,
	587, 430, 431, 432, 433, 557, 435, 436, 588, 438,
	439, 441, 442, 443, 444, 445, 446, 605, 0, 448,
	558, 449, 450, 451, 452, 453, 0, 455, 456, 457,
	458, 459, 460, 463, 464, 465, 467, 468, 560, 469,
	470, 0, 472, 473, 0, 475, 476, 477, 478, 479,
	0, 606, 480, 562, 481, 563, 482, 483, 484, 485,
	486, 487, 488, 490, 0, 0, 492, 493, 494, 496,
	497, 498, 499, 502, 503, 504, 505, 506, 0, 507,
	509, 511, 589, 566, 567, 568, 569, 570, 572, 573,
	574, 575, 512, 513, 529, 380, 374, 330, 372, 373,
	377, 378, 381, 0, 745, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 0, 223, 713, 861, 272, 309, 524,
	0, 0, 369, 0, 422, 426, 0, 515, 0, 0,
	0, 0, 280, 0, 718, 0, 724, 0, 730, 0,
	491, 0, 720, 721, 726, 211, 607, 514, 585, 0,
	0, 0, 376, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 722, 719, 723, 729, 717,
	727, 714, 725, 0, 413, 347, 0, 564, 440, 218,
	264, 251, 293, 335, 447, 0, 0, 325, 495, 260,
	349, 0, 239, 382, 0, 471, 346, 0, 454, 474,
	0, 366, 245, 405, 461, 462, 711, 716, 0, 732,
	0, 249, 250, 371, 231, 379, 576, 542, 434, 392,
	390, 0, 357, 414, 571, 0, 0, 279, 0, 274,
	370, 510, 237, 489, 408, 375, 329, 437, 466, 276,
	261, 262, 305, 407, 295, 247, 500, 539, 543, 541,
	537, 534, 538, 535, 536, 540, 296, 533, 0, 508,
	517, 551, 531, 559, 516, 556, 526, 271, 555, 520,
	519, 565, 546, 547, 501, 561, 532, 530, 523, 522,
	518, 0, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 207, 0, 208, 209, 210, 212, 213, 214,
	710, 215, 216, 217, 220, 221, 222, 224, 584, 225,
	226, 227, 228, 229, 230, 521, 712, 232, 233, 234,
	235, 236, 238, 240, 241, 242, 243, 244, 246, 248,
	0, 0, 742, 715, 0, 0, 743, 252, 253, 254,
	255, 256, 257, 0, 258, 259, 263, 265, 266, 267,
	268, 269, 270, 273, 0, 275, 277, 0, 278, 281,
	0, 282, 283, 284, 285, 286, 287, 288, 289, 525,
	290, 0, 291, 292, 294, 0, 297, 298, 299, 300,
	301, 0, 302, 527, 528, 303, 304, 306, 307, 308,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 323, 324, 326, 0, 327, 328,
	331, 332, 333, 334, 0, 336, 544, 0, 337, 338,
	339, 0, 0, 340, 341, 342, 343, 765, 345, 348,
	545, 350, 351, 352, 353, 354, 355, 356, 586, 358,
	359, 360, 361, 362, 363, 364, 548, 549, 365, 367,
	368, 550, 552, 553, 728, 383, 384, 385, 386, 387,
	388, 389, 391, 0, 393, 394, 395, 554, 396, 397,
	398, 399, 0, 400, 401, 402, 403, 404, 406, 409,
	410, 411, 412, 0, 415, 416, 417, 418, 419, 420,
	421, 423, 424, 425, 427, 428, 429, 587, 430, 431,
	432, 433, 557, 435, 436, 588, 438, 439, 441, 442,
	443, 444, 445, 446, 605, 744, 448, 558, 449, 450,
	451, 452, 453, 0, 455, 456, 457, 458, 459, 460,
	463, 464, 465, 467, 468, 560, 469, 470, 0, 472,
	473, 731, 475, 476, 477, 478, 479, 0, 606, 480,
	562, 481, 563, 482, 483, 484, 485, 486, 487, 488,
	490, 0, 0, 492, 493, 494, 496, 497, 498, 499,
	502, 503, 504, 505, 506, 0, 507, 509, 511, 589,
	566, 567, 568, 569, 570, 572, 573, 574, 575, 512,
	513, 529, 380, 374, 330, 372, 373, 377, 378, 381,
	745, 0, 0, 846, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	223, 713, 0, 272, 309, 524, 0, 0, 369, 0,
	422, 426, 0, 515, 0, 0, 1166, 0, 280, 0,
	718, 0, 724, 0, 730, 0, 491, 0, 720, 721,
	726, 211, 607, 514, 585, 0, 0, 0, 376, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	0, 722, 719, 723, 729, 717, 727, 714, 725, 0,
	413, 347, 0, 564, 440, 218, 264, 251, 293, 335,
	447, 0, 0, 325, 495, 260, 349, 0, 239, 382,
	0, 471, 346, 0, 454, 474, 0, 366, 245, 405,
	461, 462, 711, 716, 0, 732, 0, 249, 250, 371,
	231, 379, 576, 542, 434, 392, 390, 0, 357, 414,
	571, 0, 0, 279, 0, 274, 370, 510, 237, 489,
	408, 375, 329, 437, 466, 276, 261, 262, 305, 407,
	295, 247, 500, 539, 543, 541, 537, 534, 538, 535,
	536, 540, 296, 533, 0, 508, 517, 551, 531, 559,
	516, 556, 526, 271, 555, 520, 519, 565, 546, 547,
	501, 561, 532, 530, 523, 522, 518, 0, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 207, 0,
	208, 209, 210, 212, 213, 214, 710, 215, 216, 217,
	220, 221, 222, 224, 584, 225, 226, 227, 228, 229,
	230, 521, 712, 232, 233, 234, 235, 236, 238, 240,
	241, 242, 243, 244, 246, 248, 0, 0, 0, 715,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 0,
	258, 259, 263, 265, 266, 267, 268, 269, 270, 273,
	0, 275, 277, 0, 278, 281, 0, 282, 283, 284,
	285, 286, 287, 288, 289, 525, 290, 0, 291, 292,
	294, 0, 297, 298, 299, 300, 301, 0, 302, 527,
	528, 303, 304, 306, 307, 308, 310, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 0, 322,
	323, 324, 326, 0, 327, 328, 331, 332, 333, 334,
	0, 336, 544, 0, 337, 338, 339, 0, 0, 340,
	341, 342, 343, 344, 345, 348, 545, 350, 351, 352,
	353, 354, 355, 356, 586, 358, 359, 360, 361, 362,
	363, 364, 548, 549, 365, 367, 368, 550, 552, 553,
	728, 383, 384, 385, 386, 387, 388, 389, 391, 0,
	393, 394, 395, 554, 396, 397, 398, 399, 0, 400,
	401, 402, 403, 404, 406, 409, 410, 411, 412, 0,
	415, 416, 417, 418, 419, 420, 421, 423, 424, 425,
	427, 428, 429, 587, 430, 431, 432, 433, 557, 435,
	436, 588, 438, 439, 441, 442, 443, 444, 445, 446,
	605, 0, 448, 558, 449, 450, 451, 452, 453, 0,
	455, 456, 457, 458, 459, 460, 463, 464, 465, 467,
	468, 560, 469, 470, 0, 472, 473, 731, 475, 476,
	477, 478, 479, 0, 606, 480, 562, 481, 563, 482,
	483, 484, 485, 486, 487, 488, 490, 0, 0, 492,
	493, 494, 496, 497, 498, 499, 502, 503, 504, 505,
	506, 0, 507, 509, 511, 589, 566, 567, 568, 569,
	570, 572, 573, 574, 575, 512, 513, 529, 380, 374,
	330, 372, 373, 377, 378, 381, 193, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 223, 0, 0, 272,
	309, 524, 0, 0, 369, 0, 422, 426, 0, 515,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 491, 0, 0, 0, 0, 211, 607, 514,
	585, 0, 0, 0, 376, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 413, 347, 0, 564,
	440, 218, 264, 251, 293, 335, 447, 0, 0, 325,
	495, 260, 349, 0, 239, 382, 0, 471, 346, 0,
	454, 474, 0, 366, 245, 405, 461, 462, 0, 0,
	0, 0, 0, 249, 250, 371, 231, 379, 576, 542,
	434, 392, 390, 0, 357, 414, 571, 0, 0, 279,
	0, 274, 370, 510, 237, 489, 408, 375, 329, 437,
	466, 276, 261, 262, 305, 407, 295, 247, 500, 539,
	543, 541, 537, 534, 538, 535, 536, 540, 296, 533,
	0, 508, 517, 551, 531, 559, 516, 556, 526, 271,
	555, 520, 519, 565, 546, 547, 501, 561, 532, 530,
	523, 522, 518, 0, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 207, 0, 208, 209, 210, 212,
	213, 214, 0, 215, 216, 217, 220, 221, 222, 224,
	584, 225, 226, 227, 228, 229, 230, 521, 0, 232,
	233, 234, 235, 236, 238, 240, 241, 242, 243, 244,
	246, 248, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 0, 258, 259, 263, 265,
	266, 267, 268, 269, 270, 273, 0, 275, 277, 0,
	278, 281, 0, 282, 283, 284, 285, 286, 287, 288,
	289, 525, 290, 0, 291, 292, 294, 0, 297, 298,
	299, 300, 301, 0, 302, 527, 528, 303, 304, 306,
	307, 308, 310, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 0, 322, 323, 324, 326, 0,
	327, 328, 331, 332, 333, 334, 0, 336, 544, 0,
	337, 338, 339, 0, 0, 340, 341, 342, 343, 344,
	345, 348, 545, 350, 351, 352, 353, 354, 355, 356,
	586, 358, 359, 360, 361, 362, 363, 364, 548, 549,
	365, 367, 368, 550, 552, 553, 0, 383, 384, 385,
	386, 387, 388, 389, 391, 0, 393, 394, 395, 554,
	396, 397, 398, 399, 0, 400, 401, 402, 403, 404,
	406, 409, 410, 411, 412, 0, 415, 416, 417, 418,
	419, 420, 421, 423, 424, 425, 427, 428, 429, 587,
	430, 431, 432, 433, 557, 435, 436, 588, 438, 439,
	441, 442, 443, 444, 445, 446, 605, 0, 448, 558,
	449, 450, 451, 452, 453, 0, 455, 456, 457, 458,
	459, 460, 463, 464, 465, 467, 468, 560, 469, 470,
	0, 472, 473, 0, 475, 476, 477, 478, 479, 0,
	606, 480, 562, 481, 563, 482, 483, 484, 485, 486,
	487, 488, 490, 0, 0, 492, 493, 494, 496, 497,
	498, 499, 502, 503, 504, 505, 506, 0, 507, 509,
	511, 589, 566, 567, 568, 569, 570, 572, 573, 574,
	575, 512, 513, 529, 380, 374, 330, 372, 373, 377,
	378, 381, 745, 0, 0, 846, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 223, 713, 1832, 272, 309, 524, 0, 0,
	369, 0, 422, 426, 0, 515, 0, 0, 0, 0,
	280, 0, 718, 0, 724, 0, 730, 0, 491, 0,
	720, 721, 726, 211, 607, 514, 585, 0, 0, 0,
	376, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 0, 0, 722, 719, 723, 729, 717, 727, 714,
	725, 0, 413, 347, 0, 564, 440, 218, 264, 251,
	293, 335, 447, 0, 0, 325, 495, 260, 349, 0,
	239, 382, 0, 471, 346, 0, 454, 474, 0, 366,
	245, 405, 461, 462, 711, 716, 0, 732, 0, 249,
	250, 371, 231, 379, 576, 542, 434, 392, 390, 0,
	357, 414, 571, 0, 0, 279, 0, 274, 370, 510,
	237, 489, 408, 375, 329, 437, 466, 276, 261, 262,
	305, 407, 295, 247, 500, 539, 543, 541, 537, 534,
	538, 535, 536, 540, 296, 533, 0, 508, 517, 551,
	531, 559, 516, 556, 526, 271, 555, 520, 519, 565,
	546, 547, 501, 561, 532, 530, 523, 522, 518, 0,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	207, 0, 208, 209, 210, 212, 213, 214, 710, 215,
	216, 217, 220, 221, 222, 224, 584, 225, 226, 227,
	228, 229, 230, 521, 712, 232, 233, 234, 235, 236,
	238, 240, 241, 242, 243, 244, 246, 248, 0, 0,
	0, 715, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 0, 258, 259, 263, 265, 266, 267, 268, 269,
	270, 273, 0, 275, 277, 0, 278, 281, 0, 282,
	283, 284, 285, 286, 287, 288, 289, 525, 290, 0,
	291, 292, 294, 0, 297, 298, 299, 300, 301, 0,
	302, 527, 528, 303, 304, 306, 307, 308, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 323, 324, 326, 0, 327, 328, 331, 332,
	333, 334, 0, 336, 544, 0, 337, 338, 339, 0,
	0, 340, 341, 342, 343, 344, 345, 348, 545, 350,
	351, 352, 353, 354, 355, 356, 586, 358, 359, 360,
	361, 362, 363, 364, 548, 549, 365, 367, 368, 550,
	552, 553, 728, 383, 384, 385, 386, 387, 388, 389,
	391, 0, 393, 394, 395, 554, 396, 397, 398, 399,
	0, 400, 401, 402, 403, 404, 406, 409, 410, 411,
	412, 0, 415, 416, 417, 418, 419, 420, 421, 423,
	424, 425, 427, 428, 429, 587, 430, 431, 432, 433,
	557, 435, 436, 588, 438, 439, 441, 442, 443, 444,
	445, 446, 605, 0, 448, 558, 449, 450, 451, 452,
	453, 0, 455, 456, 457, 458, 459, 460, 463, 464,
	465, 467, 468, 560, 469, 470, 0, 472, 473, 731,
	475, 476, 477, 478, 479, 0, 606, 480, 562, 481,
	563, 482, 483, 484, 485, 486, 487, 488, 490, 0,
	0, 492, 493, 494, 496, 497, 498, 499, 502, 503,
	504, 505, 506, 0, 507, 509, 511, 589, 566, 567,
	568, 569, 570, 572, 573, 574, 575, 512, 513, 529,
	380, 374, 330, 372, 373, 377, 378, 381, 193, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 206, 0, 223, 0,
	0, 272, 309, 524, 0, 0, 369, 0, 422, 426,
	0, 515, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 491, 0, 0, 0, 0, 211,
	607, 514, 585, 0, 0, 0, 376, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 413, 347,
	0, 564, 440, 218, 264, 251, 293, 335, 447, 0,
	0, 325, 495, 260, 349, 0, 239, 382, 0, 471,
	346, 0, 454, 474, 0, 366, 245, 405, 461, 462,
	0, 0, 0, 0, 0, 249, 250, 371, 231, 379,
	576, 542, 434, 392, 390, 0, 357, 414, 571, 0,
	0, 279, 0, 274, 370, 510, 237, 489, 408, 375,
	329, 437, 466, 276, 261, 262, 305, 407, 295, 247,
	500, 539, 543, 541, 537, 534, 538, 535, 536, 540,
	296, 533, 0, 508, 517, 551, 531, 559, 516, 556,
	526, 271, 555, 520, 519, 565, 546, 547, 501, 561,
	532, 530, 523, 522, 518, 0, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 207, 0, 208, 209,
	210, 212, 213, 214, 0, 215, 216, 217, 220, 221,
	222, 224, 584, 225, 226, 227, 228, 229, 230, 521,
	0, 232, 233, 234, 235, 236, 238, 240, 241, 242,
	243, 244, 246, 248, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 0, 258, 259,
	263, 265, 266, 267, 268, 269, 270, 273, 0, 275,
	277, 0, 278, 281, 0, 282, 283, 284, 285, 286,
	287, 288, 289, 525, 290, 0, 291, 292, 294, 0,
	297, 298, 299, 300, 301, 0, 302, 527, 528, 303,
	304, 306, 307, 308, 310, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 323, 324,
	326, 0, 327, 328, 331, 332, 333, 334, 0, 336,
	544, 0, 337, 338, 339, 0, 0, 340, 341, 342,
	343, 344, 345, 348, 545, 350, 351, 352, 353, 354,
	355, 356, 586, 358, 359, 360, 361, 362, 363, 364,
	548, 549, 365, 367, 368, 550, 552, 553, 0, 383,
	384, 385, 386, 387, 388, 389, 391, 0, 393, 394,
	395, 554, 396, 397, 398, 399, 0, 400, 401, 402,
	403, 404, 406, 409, 410, 411, 412, 0, 415, 416,
	417, 418, 419, 420, 421, 423, 424, 425, 427, 428,
	429, 587, 430, 431, 432, 433, 557, 435, 436, 588,
	438, 439, 441, 442, 443, 444, 445, 446, 605, 0,
	448, 558, 449, 450, 451, 452, 453, 0, 455, 456,
	457, 458, 459, 460, 463, 464, 465, 467, 468, 560,
	469, 470, 0, 472, 473, 0, 475, 476, 477, 478,
	479, 0, 606, 480, 562, 481, 563, 482, 483, 484,
	485, 486, 487, 488, 490, 0, 0, 492, 493, 494,
	496, 497, 498, 499, 502, 503, 504, 505, 506, 0,
	507, 509, 511, 589, 566, 567, 568, 569, 570, 572,
	573, 574, 575, 512, 513, 529, 380, 374, 330, 372,
	373, 377, 378, 381, 707, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 0, 223, 713, 910, 272, 309, 524,
	0, 0, 369, 0, 422, 426, 0, 515, 0, 0,
	0, 0, 280, 0, 718, 0, 724, 0, 730, 0,
	491, 0, 720, 721, 726, 211, 607, 514, 585, 0,
	0, 0, 376, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 722, 719, 723, 729, 717,
	727, 714, 725, 0, 413, 347, 0, 564, 440, 218,
	264, 251, 293, 335, 447, 0, 0, 325, 495, 260,
	349, 0, 239, 382, 0, 471, 346, 0, 454, 474,
	0, 366, 245, 405, 461, 462, 711, 716, 0, 732,
	0, 249, 250, 371, 231, 379, 576, 542, 434, 392,
	390, 0, 357, 414, 571, 0, 0, 279, 0, 274,
	370, 510, 237, 489, 408, 375, 329, 437, 466, 276,
	261, 262, 305, 407, 295, 247, 500, 539, 543, 541,
	537, 534, 538, 535, 536, 540, 296, 533, 0, 508,
	517, 551, 531, 559, 516, 556, 526, 271, 555, 520,
	519, 565, 546, 547, 501, 561, 532, 530, 523, 522,
	518, 0, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 207, 0, 208, 209, 210, 212, 213, 214,
	710, 215, 216, 217, 220, 221, 222, 224, 584, 225,
	226, 227, 228, 229, 230, 521, 712, 232, 233, 234,
	235, 236, 238, 240, 241, 242, 243, 244, 246, 248,
	0, 0, 0, 715, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 0, 258, 259, 263, 265, 266, 267,
	268, 269, 270, 273, 0, 275, 277, 0, 278, 281,
	0, 282, 283, 284, 285, 286, 287, 288, 289, 525,
	290, 0, 291, 292, 294, 0, 297, 298, 299, 300,
	301, 0, 302, 527, 528, 303, 304, 306, 307, 308,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 323, 324, 326, 0, 327, 328,
	331, 332, 333, 334, 0, 336, 544, 0, 337, 338,
	339, 0, 0, 340, 341, 342, 343, 344, 345, 348,
	545, 350, 351, 352, 353, 354, 355, 356, 586, 358,
	359, 360, 361, 362, 363, 364, 548, 549, 365, 367,
	368, 550, 552, 553, 728, 383, 384, 385, 386, 387,
	388, 389, 391, 0, 393, 394, 395, 554, 396, 397,
	398, 399, 0, 400, 401, 402, 403, 404, 406, 409,
	410, 411, 412, 0, 415, 416, 417, 418, 419, 420,
	421, 423, 424, 425, 427, 428, 429, 587, 430, 431,
	432, 433, 557, 435, 436, 588, 438, 439, 441, 442,
	443, 444, 445, 446, 605, 0, 448, 558, 449, 450,
	451, 452, 453, 0, 455, 456, 457, 458, 459, 460,
	463, 464, 465, 467, 468, 560, 469, 470, 0, 472,
	473, 731, 475, 476, 477, 478, 479, 0, 606, 480,
	562, 481, 563, 482, 483, 484, 485, 486, 487, 488,
	490, 0, 0, 492, 493, 494, 496, 497, 498, 499,
	502, 503, 504, 505, 506, 0, 507, 509, 511, 589,
	566, 567, 568, 569, 570, 572, 573, 574, 575, 512,
	513, 529, 380, 374, 330, 372, 373, 377, 378, 381,
	745, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	223, 713, 0, 272, 309, 524, 0, 0, 369, 0,
	422, 426, 0, 515, 0, 0, 0, 0, 280, 0,
	718, 0, 724, 0, 730, 0, 491, 0, 720, 721,
	726, 211, 607, 514, 585, 0, 0, 0, 376, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	0, 722, 719, 723, 729, 717, 727, 714, 725, 0,
	413, 347, 0, 564, 440, 218, 264, 251, 293, 335,
	447, 0, 0, 325, 495, 260, 349, 0, 239, 382,
	0, 471, 346, 0, 454, 474, 0, 366, 245, 405,
	461, 462, 711, 716, 0, 732, 0, 249, 250, 371,
	231, 379, 576, 542, 434, 392, 390, 0, 357, 414,
	571, 0, 0, 279, 0, 274, 370, 510, 237, 489,
	408, 375, 329, 437, 466, 276, 261, 262, 305, 407,
	295, 247, 500, 539, 543, 541, 537, 534, 538, 535,
	536, 540, 296, 533, 0, 508, 517, 551, 531, 559,
	516, 556, 526, 271, 555, 520, 519, 565, 546, 547,
	501, 561, 532, 530, 523, 522, 518, 0, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 207, 0,
	208, 209, 210, 212, 213, 214, 710, 215, 216, 217,
	220, 221, 222, 224, 584, 225, 226, 227, 228, 229,
	230, 521, 712, 232, 233, 234, 235, 236, 238, 240,
	241, 242, 243, 244, 246, 248, 0, 0, 0, 715,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 0,
	258, 259, 263, 265, 266, 267, 268, 269, 270, 273,
	0, 275, 277, 0, 278, 281, 0, 282, 283, 284,
	285, 286, 287, 288, 289, 525, 290, 0, 291, 292,
	294, 0, 297, 298, 299, 300, 301, 0, 302, 527,
	528, 303, 304, 306, 307, 308, 310, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 0, 322,
	323, 324, 326, 0, 327, 328, 331, 332, 333, 334,
	0, 336, 544, 0, 337, 338, 339, 0, 0, 340,
	341, 342, 343, 344, 345, 348, 545, 350, 351, 352,
	353, 354, 355, 356, 586, 358, 359, 360, 361, 362,
	363, 364, 548, 549, 365, 367, 368, 550, 552, 553,
	728, 383, 384, 385, 386, 387, 388, 389, 391, 0,
	393, 394, 395, 554, 396, 397, 398, 399, 0, 400,
	401, 402, 403, 404, 406, 409, 410, 411, 412, 0,
	415, 416, 417, 418, 419, 420, 421, 423, 424, 425,
	427, 428, 429, 587, 430, 431, 432, 433, 557, 435,
	436, 588, 438, 439, 441, 442, 443, 444, 445, 446,
	605, 0, 448, 558, 449, 450, 451, 452, 453, 0,
	455, 456, 457, 458, 459, 460, 463, 464, 465, 467,
	468, 560, 469, 470, 0, 472, 473, 731, 475, 476,
	477, 478, 479, 0, 606, 480, 562, 481, 563, 482,
	483, 484, 485, 486, 487, 488, 490, 0, 0, 492,
	493, 494, 496, 497, 498, 499, 502, 503, 504, 505,
	506, 0, 507, 509, 511, 589, 566, 567, 568, 569,
	570, 572, 573, 574, 575, 512, 513, 529, 380, 374,
	330, 372, 373, 377, 378, 381, 2359, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 223, 713, 0, 272,
	309, 0, 0, 0, 369, 0, 422, 426, 0, 0,
	0, 0, 0, 0, 280, 0, 718, 2334, 724, 0,
	730, 0, 491, 0, 720, 721, 726, 211, 806, 514,
	585, 0, 0, 0, 376, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 0, 722, 719, 723,
	729, 717, 727, 714, 725, 0, 413, 347, 0, 0,
	440, 218, 264, 251, 293, 335, 447, 0, 0, 325,
	495, 260, 349, 0, 239, 382, 0, 471, 346, 0,
	454, 474, 0, 366, 245, 405, 461, 462, 711, 716,
	0, 732, 0, 249, 250, 371, 231, 379, 0, 0,
	434, 392, 390, 0, 357, 414, 0, 0, 0, 279,
	0, 274, 370, 510, 237, 489, 408, 375, 329, 437,
	466, 276, 261, 262, 305, 407, 295, 247, 500, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 296, 0,
	0, 508, 809, 799, 791, 792, 793, 794, 795, 796,
	0, 811, 812, 813, 814, 815, 501, 805, 0, 790,
	797, 798, 800, 2337, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 207, 0, 208, 209, 210, 212,
	213, 214, 710, 215, 216, 217, 220, 221, 222, 224,
	584, 225, 226, 227, 228, 229, 230, 0, 712, 232,
	233, 234, 235, 236, 238, 240, 241, 242, 243, 244,
	246, 248, 0, 0, 0, 715, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 0, 258, 259, 263, 265,
	266, 267, 268, 269, 270, 273, 0, 275, 277, 0,
	278, 281, 0, 282, 283, 284, 285, 286, 287, 288,
	289, 0, 290, 0, 291, 292, 294, 0, 297, 298,
	299, 300, 301, 0, 302, 0, 0, 303, 304, 306,
	307, 308, 310, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 0, 322, 323, 324, 326, 0,
	327, 328, 331, 332, 333, 334, 0, 336, 0, 0,
	337, 338, 339, 0, 0, 340, 341, 342, 343, 344,
	345, 348, 0, 350, 351, 352, 353, 354, 355, 356,
	586, 358, 359, 360, 361, 362, 363, 364, 0, 0,
	365, 367, 368, 0, 2335, 0, 728, 383, 384, 385,
	386, 387, 388, 389, 391, 0, 393, 394, 395, 0,
	396, 397, 398, 399, 0, 400, 401, 402, 403, 404,
	406, 409, 410, 411, 412, 0, 415, 416, 417, 418,
	419, 420, 421, 423, 424, 425, 427, 428, 429, 587,
	430, 431, 432, 433, 0, 435, 436, 588, 438, 439,
	441, 442, 443, 444, 445, 446, 605, 0, 448, 2340,
	449, 450, 451, 452, 453, 0, 455, 456, 457, 458,
	459, 460, 463, 464, 465, 467, 468, 0, 469, 470,
	0, 472, 473, 731, 475, 476, 477, 478, 479, 0,
	606, 480, 0, 481, 0, 482, 483, 484, 485, 486,
	487, 488, 490, 0, 0, 492, 493, 494, 496, 497,
	498, 499, 502, 503, 504, 505, 506, 0, 507, 509,
	511, 589, 0, 0, 0, 193, 0, 0, 0, 0,
	0, 512, 513, 2336, 380, 374, 330, 372, 373, 377,
	378, 381, 2354, 206, 0, 223, 0, 0, 272, 1943,
	524, 0, 0, 369, 0, 422, 426, 0, 515, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 2352,
	0, 491, 0, 0, 0, 0, 211, 607, 514, 585,
	0, 0, 0, 376, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 413, 347, 0, 564, 440,
	218, 264, 251, 293, 335, 447, 0, 0, 325, 495,
	260, 349, 0, 239, 382, 0, 471, 346, 0, 454,
	474, 0, 366, 245, 405, 461, 462, 0, 0, 1947,
	0, 0, 249, 250, 371, 231, 379, 576, 542, 434,
	392, 390, 0, 357, 414, 571, 0, 0, 279, 0,
	274, 370, 510, 237, 489, 408, 375, 329, 437, 466,
	276, 261, 262, 305, 407, 295, 247, 500, 539, 543,
	541, 537, 534, 538, 535, 536, 540, 296, 533, 0,
	508, 517, 551, 531, 559, 516, 556, 526, 271, 555,
	520, 519, 565, 546, 547, 501, 561, 532, 530, 523,
	522, 518, 0, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 207, 0, 208, 209, 210, 212, 213,
	214, 0, 215, 216, 217, 220, 221, 222, 224, 584,
	225, 226, 227, 228, 229, 230, 521, 0, 232, 233,
	234, 235, 236, 238, 240, 241, 242, 243, 244, 246,
	248, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 0, 258, 259, 263, 265, 266,
	267, 268, 269, 270, 273, 0, 275, 277, 0, 278,
	281, 0, 1953, 283, 284, 285, 286, 287, 288, 289,
	525, 290, 0, 291, 292, 294, 1952, 297, 298, 299,
	300, 301, 0, 302, 527, 528, 303, 304, 306, 307,
	308, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 0, 322, 323, 324, 326, 0, 327,
	328, 331, 332, 333, 334, 0, 336, 544, 0, 337,
	338, 339, 0, 0, 340, 341, 342, 343, 344, 345,
	348, 545, 350, 351, 352, 353, 354, 355, 356, 586,
	358, 359, 360, 361, 362, 363, 364, 548, 549, 365,
	367, 368, 550, 552, 553, 0, 383, 384, 385, 386,
	387, 388, 389, 391, 0, 393, 394, 395, 554, 396,
	397, 398, 399, 1951, 400, 401, 402, 403, 404, 406,
	409, 410, 411, 412, 0, 415, 416, 417, 418, 419,
	420, 421, 423, 424, 425, 427, 428, 429, 587, 430,
	431, 432, 433, 557, 435, 436, 588, 438, 439, 441,
	442, 443, 444, 445, 446, 605, 0, 448, 558, 449,
	450, 451, 452, 453, 0, 455, 456, 457, 458, 459,
	460, 463, 464, 465, 467, 468, 560, 469, 470, 0,
	472, 473, 0, 475, 476, 477, 478, 479, 0, 606,
	480, 562, 481, 563, 482, 483, 484, 485, 486, 487,
	488, 490, 0, 1950, 492, 493, 494, 496, 497, 498,
	499, 502, 503, 504, 505, 506, 0, 507, 509, 511,
	589, 566, 567, 568, 569, 570, 572, 573, 574, 575,
	512, 513, 529, 380, 374, 330, 372, 373, 377, 378,
	381, 193, 0, 0, 0, 1949, 1944, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	0, 223, 0, 0, 272, 309, 524, 0, 0, 369,
	0, 422, 426, 0, 515, 0, 0, 0, 0, 280,
	0, 0, 0, 2292, 0, 0, 0, 491, 0, 0,
	0, 0, 211, 607, 514, 585, 0, 0, 0, 376,
	0, 0, 0, 0, 0, 0, 0, 219, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 413, 347, 0, 564, 440, 218, 264, 251, 293,
	335, 447, 0, 0, 325, 495, 260, 349, 0, 239,
	382, 0, 471, 346, 0, 454, 474, 0, 366, 245,
	405, 461, 462, 0, 0, 1947, 0, 0, 249, 250,
	371, 231, 379, 576, 542, 434, 392, 390, 0, 357,
	414, 571, 0, 0, 279, 0, 274, 370, 510, 237,
	489, 408, 375, 329, 437, 466, 276, 261, 262, 305,
	407, 295, 247, 500, 539, 543, 541, 537, 534, 538,
	535, 536, 540, 296, 533, 0, 508, 517, 551, 531,
	559, 516, 556, 526, 271, 555, 520, 519, 565, 546,
	547, 501, 561, 532, 530, 523, 522, 518, 0, 196,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 207,
	0, 208, 209, 210, 212, 213, 214, 0, 215, 216,
	217, 220, 221, 222, 224, 584, 225, 226, 227, 228,
	229, 230, 521, 0, 232, 233, 234, 235, 236, 238,
	240, 241, 242, 243, 244, 246, 248, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	0, 258, 259, 263, 265, 266, 267, 268, 269, 270,
	273, 0, 275, 277, 0, 278, 281, 0, 1953, 283,
	284, 285, 286, 287, 288, 289, 525, 290, 0, 291,
	292, 294, 1952, 297, 298, 299, 300, 301, 0, 302,
	527, 528, 303, 304, 306, 307, 308, 310, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 0,
	322, 323, 324, 326, 0, 327, 328, 331, 332, 333,
	334, 0, 336, 544, 0, 337, 338, 339, 0, 0,
	340, 341, 342, 343, 344, 345, 348, 545, 350, 351,
	352, 353, 354, 355, 356, 586, 358, 359, 360, 361,
	362, 363, 364, 548, 549, 365, 367, 368, 550, 552,
	553, 0, 383, 384, 385, 386, 387, 388, 389, 391,
	0, 393, 394, 395, 554, 396, 397, 398, 399, 1951,
	400, 401, 402, 403, 404, 406, 409, 410, 411, 412,
	0, 415, 416, 417, 418, 419, 420, 421, 423, 424,
	425, 427, 428, 429, 587, 430, 431, 432, 433, 557,
	435, 436, 588, 438, 439, 441, 442, 443, 444, 445,
	446, 605, 0, 448, 558, 449, 450, 451, 452, 453,
	0, 455, 456, 457, 458, 459, 460, 463, 464, 465,
	467, 468, 560, 469, 470, 0, 472, 473, 0, 475,
	476, 477, 478, 479, 0, 606, 480, 562, 481, 563,
	482, 483, 484, 485, 486, 487, 488, 490, 0, 1950,
	492, 493, 494, 496, 497, 498, 499, 502, 503, 504,
	505, 506, 0, 507, 509, 511, 589, 566, 567, 568,
	569, 570, 572, 573, 574, 575, 512, 513, 529, 380,
	374, 330, 372, 373, 377, 378, 381, 193, 0, 0,
	0, 1949, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 0, 223, 0, 0,
	272, 309, 524, 0, 0, 369, 0, 422, 426, 0,
	515, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 491, 0, 0, 0, 0, 211, 607,
	514, 585, 0, 0, 0, 376, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 413, 347, 0,
	564, 440, 218, 264, 251, 293, 335, 447, 0, 0,
	325, 495, 260, 349, 0, 239, 382, 0, 471, 346,
	0, 454, 474, 0, 366, 245, 405, 461, 462, 0,
	0, 1947, 0, 0, 249, 250, 371, 231, 379, 576,
	542, 434, 392, 390, 0, 357, 414, 571, 0, 0,
	279, 0, 274, 370, 510, 237, 489, 408, 375, 329,
	437, 466, 276, 261, 262, 305, 407, 295, 247, 500,
	539, 543, 541, 537, 534, 538, 535, 536, 540, 296,
	533, 0, 508, 517, 551, 531, 559, 516, 556, 526,
	271, 555, 520, 519, 565, 546, 547, 501, 561, 532,
	530, 523, 522, 518, 0, 196, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 207, 0, 208, 209, 210,
	212, 213, 214, 0, 215, 216, 217, 220, 221, 222,
	224, 584, 225, 226, 227, 228, 229, 230, 521, 0,
	232, 233, 234, 235, 236, 238, 240, 241, 242, 243,
	244, 246, 248, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 0, 258, 259, 263,
	265, 266, 267, 268, 269, 270, 273, 0, 275, 277,
	0, 278, 281, 0, 1953, 283, 284, 285, 286, 287,
	288, 289, 525, 290, 0, 291, 292, 294, 1952, 297,
	298, 299, 300, 301, 0, 302, 527, 528, 303, 304,
	306, 307, 308, 310, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 0, 322, 323, 324, 326,
	0, 327, 328, 331, 332, 333, 334, 0, 336, 544,
	0, 337, 338, 339, 0, 0, 340, 341, 342, 343,
	344, 345, 348, 545, 350, 351, 352, 353, 354, 355,
	356, 586, 358, 359, 360, 361, 362, 363, 364, 548,
	549, 365, 367, 368, 550, 552, 553, 0, 383, 384,
	385, 386, 387, 388, 389, 391, 0, 393, 394, 395,
	554, 396, 397, 398, 399, 1951, 400, 401, 402, 403,
	404, 406, 409, 410, 411, 412, 0, 415, 416, 417,
	418, 419, 420, 421, 423, 424, 425, 427, 428, 429,
	587, 430, 431, 432, 433, 557, 435, 436, 588, 438,
	439, 441, 442, 443, 444, 445, 446, 605, 0, 448,
	558, 449, 450, 451, 452, 453, 0, 455, 456, 457,
	458, 459, 460, 463, 464, 465, 467, 468, 560, 469,
	470, 0, 472, 473, 0, 475, 476, 477, 478, 479,
	0, 606, 480, 562, 481, 563, 482, 483, 484, 485,
	486, 487, 488, 490, 0, 1950, 492, 493, 494, 496,
	497, 498, 499, 502, 503, 504, 505, 506, 0, 507,
	509, 511, 589, 566, 567, 568, 569, 570, 572, 573,
	574, 575, 512, 513, 529, 380, 374, 330, 372, 373,
	377, 378, 381, 807, 0, 0, 0, 1949, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 0, 223, 713, 0, 272, 309, 0, 0,
	0, 369, 0, 422, 426, 0, 0, 0, 0, 0,
	0, 280, 0, 718, 2334, 724, 0, 730, 0, 491,
	0, 720, 721, 726, 211, 806, 514, 585, 0, 0,
	0, 376, 0, 0, 0, 0, 0, 0, 0, 219,
	0, 0, 0, 0, 722, 719, 723, 729, 717, 727,
	714, 725, 0, 413, 347, 0, 0, 440, 218, 264,
	251, 293, 335, 447, 0, 0, 325, 495, 260, 349,
	0, 239, 382, 0, 471, 346, 0, 454, 474, 0,
	366, 245, 405, 461, 462, 711, 716, 0, 732, 0,
	249, 250, 371, 231, 379, 0, 0, 434, 392, 390,
	0, 357, 414, 0, 0, 0, 279, 0, 274, 370,
	510, 237, 489, 408, 375, 329, 437, 466, 276, 261,
	262, 305, 407, 295, 247, 500, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 296, 0, 0, 508, 809,
	799, 791, 792, 793, 794, 795, 796, 0, 811, 812,
	813, 814, 815, 501, 805, 0, 790, 797, 798, 800,
	2337, 196, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 207, 0, 208, 209, 210, 212, 213, 214, 710,
	215, 216, 217, 220, 221, 222, 224, 584, 225, 226,
	227, 228, 229, 230, 0, 712, 232, 233, 234, 235,
	236, 238, 240, 241, 242, 243, 244, 246, 248, 0,
	0, 0, 715, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 0, 258, 259, 263, 265, 266, 267, 268,
	269, 270, 273, 0, 275, 277, 0, 278, 281, 0,
	282, 283, 284, 285, 286, 287, 288, 289, 0, 290,
	0, 291, 292, 294, 0, 297, 298, 299, 300, 301,
	0, 302, 0, 0, 303, 304, 306, 307, 308, 310,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 0, 322, 323, 324, 326, 0, 327, 328, 331,
	332, 333, 334, 0, 336, 0, 0, 337, 338, 339,
	0, 0, 340, 341, 342, 343, 344, 345, 348, 0,
	350, 351, 352, 353, 354, 355, 356, 586, 358, 359,
	360, 361, 362, 363, 364, 0, 0, 365, 367, 368,
	0, 2335, 0, 728, 383, 384, 385, 386, 387, 388,
	389, 391, 0, 393, 394, 395, 0, 396, 397, 398,
	399, 0, 400, 401, 402, 403, 404, 406, 409, 410,
	411, 412, 0, 415, 416, 417, 418, 419, 420, 421,
	423, 424, 425, 427, 428, 429, 587, 430, 431, 432,
	433, 0, 435, 436, 588, 438, 439, 441, 442, 443,
	444, 445, 446, 605, 0, 448, 2340, 449, 450, 451,
	452, 453, 0, 455, 456, 457, 458, 459, 460, 463,
	464, 465, 467, 468, 0, 469, 470, 0, 472, 473,
	731, 475, 476, 477, 478, 479, 0, 606, 480, 0,
	481, 0, 482, 483, 484, 485, 486, 487, 488, 490,
	0, 0, 492, 493, 494, 496, 497, 498, 499, 502,
	503, 504, 505, 506, 0, 507, 509, 511, 589, 0,
	0, 0, 193, 0, 0, 0, 0, 0, 512, 513,
	2336, 380, 374, 330, 372, 373, 377, 378, 381, 1922,
	206, 0, 223, 0, 0, 272, 309, 524, 0, 0,
	369, 0, 422, 426, 0, 515, 0, 0, 0, 0,
	280, 0, 2328, 0, 0, 0, 0, 0, 491, 0,
	0, 0, 0, 211, 607, 514, 585, 0, 0, 0,
	376, 0, 0, 0, 604, 1925, 0, 0, 219, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 413, 347, 0, 564, 440, 218, 264, 251,
	293, 335, 447, 0, 0, 325, 495, 260, 349, 0,
	239, 382, 0, 471, 346, 0, 454, 474, 0, 366,
	245, 405, 461, 462, 0, 0, 0, 0, 0, 249,
	250, 371, 231, 379, 576, 542, 434, 392, 390, 0,
	357, 414, 571, 0, 0, 279, 0, 274, 370, 510,
	237, 489, 408, 375, 329, 437, 466, 276, 261, 262,
	305, 407, 295, 247, 500, 539, 543, 541, 537, 534,
	538, 535, 536, 540, 296, 533, 0, 508, 517, 551,
	531, 559, 516, 556, 526, 271, 555, 520, 519, 565,
	546, 547, 501, 561, 532, 530, 523, 522, 518, 0,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	207, 0, 208, 209, 210, 212, 213, 214, 0, 215,
	216, 217, 220, 221, 222, 224, 584, 225, 226, 227,
	228, 229, 230, 521, 0, 232, 233, 234, 235, 236,
	238, 240, 241, 242, 243, 244, 246, 248, 0, 0,
	0, 1929, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 0, 258, 259, 263, 265, 266, 267, 268, 269,
	270, 273, 0, 275, 277, 0, 278, 281, 0, 282,
	283, 284, 285, 286, 287, 288, 289, 525, 290, 0,
	291, 292, 294, 0, 297, 298, 299, 300, 301, 0,
	302, 527, 528, 303, 304, 306, 307, 308, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 323, 324, 326, 0, 327, 328, 331, 332,
	333, 334, 0, 336, 544, 0, 337, 338, 339, 0,
	0, 340, 341, 342, 343, 344, 345, 348, 545, 350,
	351, 352, 353, 354, 355, 356, 586, 358, 359, 360,
	361, 362, 363, 364, 548, 549, 365, 367, 368, 550,
	552, 553, 0, 383, 384, 385, 386, 387, 388, 389,
	391, 0, 393, 394, 395, 554, 396, 397, 398, 399,
	0, 400, 401, 402, 403, 404, 406, 409, 410, 411,
	412, 0, 415, 416, 417, 418, 419, 420, 421, 423,
	424, 425, 427, 428, 429, 587, 430, 431, 432, 433,
	557, 435, 436, 588, 438, 439, 441, 442, 443, 444,
	445, 446, 605, 0, 448, 558, 449, 450, 451, 452,
	453, 0, 455, 456, 457, 458, 459, 460, 463, 464,
	465, 467, 468, 560, 469, 470, 0, 1926, 473, 0,
	475, 476, 477, 478, 479, 0, 606, 480, 562, 481,
	563, 482, 483, 484, 485, 486, 487, 488, 490, 0,
	0, 492, 493, 494, 496, 497, 498, 499, 502, 503,
	504, 505, 506, 0, 507, 509, 511, 589, 566, 567,
	568, 569, 570, 572, 573, 574, 575, 512, 513, 529,
	380, 374, 330, 372, 373, 377, 378, 381, 193, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 206, 0, 223, 0,
	0, 272, 309, 524, 0, 0, 369, 0, 422, 426,
	0, 515, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 491, 0, 0, 0, 0, 211,
	607, 514, 585, 0, 0, 0, 376, 0, 0, 0,
	604, 1925, 0, 0, 219, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 413, 347,
	0, 564, 440, 218, 264, 251, 293, 335, 447, 0,
	0, 325, 495, 260, 349, 0, 239, 382, 0, 471,
	346, 0, 454, 474, 0, 366, 245, 405, 461, 462,
	0, 0, 0, 0, 0, 249, 250, 371, 231, 379,
	576, 542, 434, 392, 390, 0, 357, 414, 571, 0,
	0, 279, 0, 274, 370, 510, 237, 489, 408, 375,
	329, 437, 466, 276, 261, 262, 305, 407, 295, 247,
	500, 539, 543, 541, 537, 534, 538, 535, 536, 540,
	296, 533, 0, 508, 517, 551, 531, 559, 516, 556,
	526, 271, 555, 520, 519, 565, 546, 547, 501, 561,
	532, 530, 523, 522, 518, 0, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 207, 0, 208, 209,
	210, 212, 213, 214, 0, 215, 216, 217, 220, 221,
	222, 224, 584, 225, 226, 227, 228, 229, 230, 521,
	0, 232, 233, 234, 235, 236, 238, 240, 241, 242,
	243, 244, 246, 248, 0, 0, 0, 1929, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 0, 258, 259,
	263, 265, 266, 267, 268, 269, 270, 273, 0, 275,
	277, 0, 278, 281, 0, 282, 283, 284, 285, 286,
	287, 288, 289, 525, 290, 0, 291, 292, 294, 0,
	297, 298, 299, 300, 301, 0, 302, 527, 528, 303,
	304, 306, 307, 308, 310, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 323, 324,
	326, 0, 327, 328, 331, 332, 333, 334, 0, 336,
	544, 0, 337, 338, 339, 0, 0, 340, 341, 342,
	343, 344, 345, 348, 545, 350, 351, 352, 353, 354,
	355, 356, 586, 358, 359, 360, 361, 362, 363, 364,
	548, 549, 365, 367, 368, 550, 552, 553, 0, 383,
	384, 385, 386, 387, 388, 389, 391, 0, 393, 394,
	395, 554, 396, 397, 398, 399, 0, 400, 401, 402,
	403, 404, 406, 409, 410, 411, 412, 0, 415, 416,
	417, 418, 419, 420, 421, 423, 424, 425, 427, 428,
	429, 587, 430, 431, 432, 433, 557, 435, 436, 588,
	438, 439, 441, 442, 443, 444, 445, 446, 605, 0,
	448, 558, 449, 450, 451, 452, 453, 0, 455, 456,
	457, 458, 459, 460, 463, 464, 465, 467, 468, 560,
	469, 470, 0, 1926, 473, 0, 475, 476, 477, 478,
	479, 0, 606, 480, 562, 481, 563, 482, 483, 484,
	485, 486, 487, 488, 490, 0, 0, 492, 493, 494,
	496, 497, 498, 499, 502, 503, 504, 505, 506, 0,
	507, 509, 511, 589, 566, 567, 568, 569, 570, 572,
	573, 574, 575, 512, 513, 529, 380, 374, 330, 372,
	373, 377, 378, 381, 193, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2478, 206, 0, 223, 0, 0, 272, 309, 524,
	0, 0, 369, 0, 422, 426, 0, 515, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	491, 0, 0, 0, 0, 211, 607, 514, 585, 0,
	0, 0, 376, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 413, 347, 0, 564, 440, 218,
	264, 251, 293, 335, 447, 0, 0, 325, 495, 260,
	349, 0, 239, 382, 2479, 471, 346, 0, 454, 474,
	0, 366, 245, 405, 461, 462, 0, 0, 0, 0,
	0, 249, 250, 371, 231, 379, 576, 542, 434, 392,
	390, 0, 357, 414, 571, 0, 0, 279, 0, 274,
	370, 510, 237, 489, 408, 375, 329, 437, 466, 276,
	261, 262, 305, 407, 295, 247, 500, 539, 543, 541,
	537, 534, 538, 535, 536, 540, 296, 533, 0, 508,
	517, 551, 531, 559, 516, 556, 526, 271, 555, 520,
	519, 565, 546, 547, 501, 561, 532, 530, 523, 522,
	518, 0, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 207, 0, 208, 209, 210, 212, 213, 214,
	0, 215, 216, 217, 220, 221, 222, 224, 584, 225,
	226, 227, 228, 229, 230, 521, 0, 232, 233, 234,
	235, 236, 238, 240, 241, 242, 243, 244, 246, 248,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 0, 258, 259, 263, 265, 266, 267,
	268, 269, 270, 273, 0, 275, 277, 0, 278, 281,
	0, 282, 283, 284, 285, 286, 287, 288, 289, 525,
	290, 0, 291, 292, 294, 0, 297, 298, 299, 300,
	301, 0, 302, 527, 528, 303, 304, 306, 307, 308,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 323, 324, 326, 0, 327, 328,
	331, 332, 333, 334, 0, 336, 544, 0, 337, 338,
	339, 0, 0, 340, 341, 342, 343, 344, 345, 348,
	545, 350, 351, 352, 353, 354, 355, 356, 586, 358,
	359, 360, 361, 362, 363, 364, 548, 549, 365, 367,
	368, 550, 552, 553, 0, 383, 384, 385, 386, 387,
	388, 389, 391, 0, 393, 394, 395, 554, 396, 397,
	398, 399, 0, 400, 401, 402, 403, 404, 406, 409,
	410, 411, 412, 0, 415, 416, 417, 418, 419, 420,
	421, 423, 424, 425, 427, 428, 429, 587, 430, 431,
	432, 433, 557, 435, 436, 588, 438, 439, 441, 442,
	443, 444, 445, 446, 605, 0, 448, 558, 449, 450,
	451, 452, 453, 0, 455, 456, 457, 458, 459, 460,
	463, 464, 465, 467, 468, 560, 469, 470, 0, 472,
	473, 0, 475, 476, 477, 478, 479, 0, 606, 480,
	562, 481, 563, 482, 483, 484, 485, 486, 487, 488,
	490, 0, 0, 492, 493, 494, 496, 497, 498, 499,
	502, 503, 504, 505, 506, 0, 507, 509, 511, 589,
	566, 567, 568, 569, 570, 572, 573, 574, 575, 512,
	513, 529, 380, 374, 330, 372, 373, 377, 378, 381,
	193, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2469, 206, 0,
	223, 0, 0, 272, 309, 524, 0, 0, 369, 0,
	422, 426, 0, 515, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 491, 0, 0, 0,
	0, 211, 607, 514, 585, 0, 0, 0, 376, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	413, 347, 0, 564, 440, 218, 264, 251, 293, 335,
	447, 0, 0, 325, 495, 260, 349, 0, 239, 382,
	2470, 471, 346, 0, 454, 474, 0, 366, 245, 405,
	461, 462, 0, 0, 0, 0, 0, 249, 250, 371,
	231, 379, 576, 542, 434, 392, 390, 0, 357, 414,
	571, 0, 0, 279, 0, 274, 370, 510, 237, 489,
	408, 375, 329, 437, 466, 276, 261, 262, 305, 407,
	295, 247, 500, 539, 543, 541, 537, 534, 538, 535,
	536, 540, 296, 533, 0, 508, 517, 551, 531, 559,
	516, 556, 526, 271, 555, 520, 519, 565, 546, 547,
	501, 561, 532, 530, 523, 522, 518, 0, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 207, 0,
	208, 209, 210, 212, 213, 214, 0, 215, 216, 217,
	220, 221, 222, 224, 584, 225, 226, 227, 228, 229,
	230, 521, 0, 232, 233, 234, 235, 236, 238, 240,
	241, 242, 243, 244, 246, 248, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 0,
	258, 259, 263, 265, 266, 267, 268, 269, 270, 273,
	0, 275, 277, 0, 278, 281, 0, 282, 283, 284,
	285, 286, 287, 288, 289, 525, 290, 0, 291, 292,
	294, 0, 297, 298, 299, 300, 301, 0, 302, 527,
	528, 303, 304, 306, 307, 308, 310, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 0, 322,
	323, 324, 326, 0, 327, 328, 331, 332, 333, 334,
	0, 336, 544, 0, 337, 338, 339, 0, 0, 340,
	341, 342, 343, 344, 345, 348, 545, 350, 351, 352,
	353, 354, 355, 356, 586, 358, 359, 360, 361, 362,
	363, 364, 548, 549, 365, 367, 368, 550, 552, 553,
	0, 383, 384, 385, 386, 387, 388, 389, 391, 0,
	393, 394, 395, 554, 396, 397, 398, 399, 0, 400,
	401, 402, 403, 404, 406, 409, 410, 411, 412, 0,
	415, 416, 417, 418, 419, 420, 421, 423, 424, 425,
	427, 428, 429, 587, 430, 431, 432, 433, 557, 435,
	436, 588, 438, 439, 441, 442, 443, 444, 445, 446,
	605, 0, 448, 558, 449, 450, 451, 452, 453, 0,
	455, 456, 457, 458, 459, 460, 463, 464, 465, 467,
	468, 560, 469, 470, 0, 472, 473, 0, 475, 476,
	477, 478, 479, 0, 606, 480, 562, 481, 563, 482,
	483, 484, 485, 486, 487, 488, 490, 0, 0, 492,
	493, 494, 496, 497, 498, 499, 502, 503, 504, 505,
	506, 0, 507, 509, 511, 589, 566, 567, 568, 569,
	570, 572, 573, 574, 575, 512, 513, 529, 380, 374,
	330, 372, 373, 377, 378, 381, 193, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 692, 206, 0, 223, 0, 0, 272,
	691, 524, 0, 0, 369, 0, 422, 426, 0, 515,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 491, 0, 0, 0, 0, 211, 607, 514,
	585, 0, 0, 0, 376, 0, 0, 0, 604, 0,
	0, 0, 219, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 413, 347, 0, 564,
	440, 218, 264, 251, 293, 335, 447, 0, 0, 325,
	495, 260, 349, 0, 239, 382, 0, 471, 346, 0,
	454, 474, 0, 366, 245, 405, 461, 462, 0, 0,
	0, 0, 0, 249, 250, 371, 231, 379, 576, 542,
	434, 392, 390, 0, 357, 414, 571, 0, 0, 279,
	0, 274, 370, 510, 237, 489, 408, 375, 329, 437,
	466, 276, 261, 262, 305, 407, 295, 247, 500, 539,
	543, 541, 537, 534, 538, 535, 536, 540, 296, 533,
	0, 508, 517, 551, 531, 559, 516, 556, 526, 271,
	555, 520, 519, 565, 546, 547, 501, 561, 532, 530,
	523, 522, 518, 0, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 207, 0, 208, 209, 210, 212,
	213, 214, 0, 215, 216, 217, 220, 221, 222, 224,
	584, 225, 226, 227, 228, 229, 230, 521, 0, 232,
	233, 234, 235, 236, 238, 240, 241, 242, 243, 244,
	246, 248, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 0, 258, 259, 263, 265,
	266, 267, 268, 269, 270, 273, 0, 275, 277, 0,
	278, 281, 0, 282, 283, 284, 285, 286, 287, 288,
	289, 525, 290, 0, 291, 292, 294, 0, 297, 298,
	299, 300, 301, 0, 302, 527, 528, 303, 304, 306,
	307, 308, 310, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 0, 322, 323, 324, 326, 0,
	327, 328, 331, 332, 333, 334, 0, 336, 544, 0,
	337, 338, 339, 0, 0, 340, 341, 342, 343, 344,
	345, 348, 545, 350, 351, 352, 353, 354, 355, 356,
	586, 358, 359, 360, 361, 362, 363, 364, 548, 549,
	365, 367, 368, 550, 552, 553, 0, 383, 384, 385,
	386, 387, 388, 389, 391, 0, 393, 394, 395, 554,
	396, 397, 398, 399, 0, 400, 401, 402, 403, 404,
	406, 409, 410, 411, 412, 0, 415, 416, 417, 418,
	419, 420, 421, 423, 424, 425, 427, 428, 429, 587,
	430, 431, 432, 433, 557, 435, 436, 588, 438, 439,
	441, 442, 443, 444, 445, 446, 605, 0, 448, 558,
	449, 450, 451, 452, 453, 0, 455, 456, 457, 458,
	459, 460, 463, 464, 465, 467, 468, 560, 469, 470,
	0, 472, 473, 0, 475, 476, 477, 478, 479, 0,
	606, 480, 562, 481, 563, 482, 483, 484, 485, 486,
	487, 488, 490, 0, 0, 492, 493, 494, 496, 497,
	498, 499, 502, 503, 504, 505, 506, 0, 507, 509,
	511, 589, 566, 567, 568, 569, 570, 572, 573, 574,
	575, 512, 513, 529, 380, 374, 330, 372, 373, 377,
	378, 381, 193, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 223, 0, 0, 272, 309, 524, 0, 0,
	369, 0, 422, 426, 0, 515, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 491, 0,
	0, 0, 0, 211, 607, 514, 585, 0, 0, 0,
	376, 0, 0, 0, 604, 0, 0, 0, 219, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 413, 347, 0, 564, 440, 218, 264, 251,
	293, 335, 447, 0, 0, 325, 495, 260, 349, 0,
	239, 382, 0, 471, 346, 0, 454, 474, 0, 366,
	245, 405, 461, 462, 0, 0, 0, 0, 0, 249,
	250, 371, 231, 379, 576, 542, 434, 392, 390, 0,
	357, 414, 571, 0, 0, 279, 0, 274, 370, 510,
	237, 489, 408, 375, 329, 437, 466, 276, 261, 262,
	305, 407, 295, 247, 500, 539, 543, 541, 537, 534,
	538, 535, 536, 540, 296, 533, 0, 508, 517, 551,
	531, 559, 516, 556, 526, 271, 555, 520, 519, 565,
	546, 547, 501, 561, 532, 530, 523, 522, 518, 0,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	207, 0, 208, 209, 210, 212, 213, 214, 0, 215,
	216, 217, 220, 221, 222, 224, 584, 225, 226, 227,
	228, 229, 230, 521, 0, 232, 233, 234, 235, 236,
	238, 240, 241, 242, 243, 244, 246, 248, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 0, 258, 259, 263, 265, 266, 267, 268, 269,
	270, 273, 0, 275, 277, 0, 278, 281, 0, 282,
	283, 284, 285, 286, 287, 288, 289, 525, 290, 0,
	291, 292, 294, 0, 297, 298, 299, 300, 301, 0,
	302, 527, 528, 303, 304, 306, 307, 308, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 323, 324, 326, 0, 327, 328, 331, 332,
	333, 334, 0, 336, 544, 0, 337, 338, 339, 0,
	0, 340, 341, 342, 343, 344, 345, 348, 545, 350,
	351, 352, 353, 354, 355, 356, 586, 358, 359, 360,
	361, 362, 363, 364, 548, 549, 365, 367, 368, 550,
	552, 553, 0, 383, 384, 385, 386, 387, 388, 389,
	391, 0, 393, 394, 395, 554, 396, 397, 398, 399,
	0, 400, 401, 402, 403, 404, 406, 409, 410, 411,
	412, 0, 415, 416, 417, 418, 419, 420, 421, 423,
	424, 425, 427, 428, 429, 587, 430, 431, 432, 433,
	557, 435, 436, 588, 438, 439, 441, 442, 443, 444,
	445, 446, 605, 0, 448, 558, 449, 450, 451, 452,
	453, 0, 455, 456, 457, 458, 459, 460, 463, 464,
	465, 467, 468, 560, 469, 470, 0, 472, 473, 0,
	475, 476, 477, 478, 479, 0, 606, 480, 562, 481,
	563, 482, 483, 484, 485, 486, 487, 488, 490, 0,
	0, 492, 493, 494, 496, 497, 498, 499, 502, 503,
	504, 505, 506, 0, 507, 509, 511, 589, 566, 567,
	568, 569, 570, 572, 573, 574, 575, 512, 513, 529,
	380, 374, 330, 372, 373, 377, 378, 381, 193, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 206, 0, 223, 0,
	0, 272, 309, 524, 0, 0, 369, 0, 422, 426,
	0, 515, 0, 0, 3549, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 491, 0, 0, 0, 0, 211,
	607, 514, 585, 0, 0, 0, 376, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 413, 347,
	0, 564, 440, 218, 264, 251, 293, 335, 447, 0,
	0, 325, 495, 260, 349, 0, 239, 382, 0, 471,
	346, 0, 454, 474, 0, 366, 245, 405, 461, 462,
	0, 0, 0, 0, 0, 249, 250, 371, 231, 379,
	576, 542, 434, 392, 390, 0, 357, 414, 571, 0,
	0, 279, 0, 274, 370, 510, 237, 489, 408, 375,
	329, 437, 466, 276, 261, 262, 305, 407, 295, 247,
	500, 539, 543, 541, 537, 534, 538, 535, 536, 540,
	296, 533, 0, 508, 517, 551, 531, 559, 516, 556,
	526, 271, 555, 520, 519, 565, 546, 547, 501, 561,
	532, 530, 523, 522, 518, 0, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 207, 0, 208, 209,
	210, 212, 213, 214, 0, 215, 216, 217, 220, 221,
	222, 224, 584, 225, 226, 227, 228, 229, 230, 521,
	0, 232, 233, 234, 235, 236, 238, 240, 241, 242,
	243, 244, 246, 248, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 0, 258, 259,
	263, 265, 266, 267, 268, 269, 270, 273, 0, 275,
	277, 0, 278, 281, 0, 282, 283, 284, 285, 286,
	287, 288, 289, 525, 290, 0, 291, 292, 294, 0,
	297, 298, 299, 300, 301, 0, 302, 527, 528, 303,
	304, 306, 307, 308, 310, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 323, 324,
	326, 0, 327, 328, 331, 332, 333, 334, 0, 336,
	544, 0, 337, 338, 339, 0, 0, 340, 341, 342,
	343, 344, 345, 348, 545, 350, 351, 352, 353, 354,
	355, 356, 586, 358, 359, 360, 361, 362, 363, 364,
	548, 549, 365, 367, 368, 550, 552, 553, 0, 383,
	384, 385, 386, 387, 388, 389, 391, 0, 393, 394,
	395, 554, 396, 397, 398, 399, 0, 400, 401, 402,
	403, 404, 406, 409, 410, 411, 412, 0, 415, 416,
	417, 418, 419, 420, 421, 423, 424, 425, 427, 428,
	429, 587, 430, 431, 432, 433, 557, 435, 436, 588,
	438, 439, 441, 442, 443, 444, 445, 446, 605, 0,
	448, 558, 449, 450, 451, 452, 453, 0, 455, 456,
	457, 458, 459, 460, 463, 464, 465, 467, 468, 560,
	469, 470, 0, 472, 473, 0, 475, 476, 477, 478,
	479, 0, 606, 480, 562, 481, 563, 482, 483, 484,
	485, 486, 487, 488, 490, 0, 0, 492, 493, 494,
	496, 497, 498, 499, 502, 503, 504, 505, 506, 0,
	507, 509, 511, 589, 566, 567, 568, 569, 570, 572,
	573, 574, 575, 512, 513, 529, 380, 374, 330, 372,
	373, 377, 378, 381, 193, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 2735, 223, 0, 0, 272, 309, 524,
	0, 0, 369, 0, 422, 426, 0, 515, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	491, 0, 0, 0, 0, 211, 607, 514, 585, 0,
	0, 0, 376, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 413, 347, 0, 564, 440, 218,
	264, 251, 293, 335, 447, 0, 0, 325, 495, 260,
	349, 0, 239, 382, 0, 471, 346, 0, 454, 474,
	0, 366, 245, 405, 461, 462, 0, 0, 0, 0,
	0, 249, 250, 371, 231, 379, 576, 542, 434, 392,
	390, 0, 357, 414, 571, 0, 0, 279, 0, 274,
	370, 510, 237, 489, 408, 375, 329, 437, 466, 276,
	261, 262, 305, 407, 295, 247, 500, 539, 543, 541,
	537, 534, 538, 535, 536, 540, 296, 533, 0, 508,
	517, 551, 531, 559, 516, 556, 526, 271, 555, 520,
	519, 565, 546, 547, 501, 561, 532, 530, 523, 522,
	518, 0, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 207, 0, 208, 209, 210, 212, 213, 214,
	0, 215, 216, 217, 220, 221, 222, 224, 584, 225,
	226, 227, 228, 229, 230, 521, 0, 232, 233, 234,
	235, 236, 238, 240, 241, 242, 243, 244, 246, 248,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 0, 258, 259, 263, 265, 266, 267,
	268, 269, 270, 273, 0, 275, 277, 0, 278, 281,
	0, 282, 283, 284, 285, 286, 287, 288, 289, 525,
	290, 0, 291, 292, 294, 0, 297, 298, 299, 300,
	301, 0, 302, 527, 528, 303, 304, 306, 307, 308,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 323, 324, 326, 0, 327, 328,
	331, 332, 333, 334, 0, 336, 544, 0, 337, 338,
	339, 0, 0, 340, 341, 342, 343, 344, 345, 348,
	545, 350, 351, 352, 353, 354, 355, 356, 586, 358,
	359, 360, 361, 362, 363, 364, 548, 549, 365, 367,
	368, 550, 552, 553, 0, 383, 384, 385, 386, 387,
	388, 389, 391, 0, 393, 394, 395, 554, 396, 397,
	398, 399, 0, 400, 401, 402, 403, 404, 406, 409,
	410, 411, 412, 0, 415, 416, 417, 418, 419, 420,
	421, 423, 424, 425, 427, 428, 429, 587, 430, 431,
	432, 433, 557, 435, 436, 588, 438, 439, 441, 442,
	443, 444, 445, 446, 605, 0, 448, 558, 449, 450,
	451, 452, 453, 0, 455, 456, 457, 458, 459, 460,
	463, 464, 465, 467, 468, 560, 469, 470, 0, 472,
	473, 0, 475, 476, 477, 478, 479, 0, 606, 480,
	562, 481, 563, 482, 483, 484, 485, 486, 487, 488,
	490, 0, 0, 492, 493, 494, 496, 497, 498, 499,
	502, 503, 504, 505, 506, 0, 507, 509, 511, 589,
	566, 567, 568, 569, 570, 572, 573, 574, 575, 512,
	513, 529, 380, 374, 330, 372, 373, 377, 378, 381,
	193, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	223, 0, 0, 272, 309, 524, 0, 0, 369, 0,
	422, 426, 0, 515, 0, 0, 3276, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 491, 0, 0, 0,
	0, 211, 607, 514, 585, 0, 0, 0, 376, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	413, 347, 0, 564, 440, 218, 264, 251, 293, 335,
	447, 0, 0, 325, 495, 260, 349, 0, 239, 382,
	0, 471, 346, 0, 454, 474, 0, 366, 245, 405,
	461, 462, 0, 0, 0, 0, 0, 249, 250, 371,
	231, 379, 576, 542, 434, 392, 390, 0, 357, 414,
	571, 0, 0, 279, 0, 274, 370, 510, 237, 489,
	408, 375, 329, 437, 466, 276, 261, 262, 305, 407,
	295, 247, 500, 539, 543, 541, 537, 534, 538, 535,
	536, 540, 296, 533, 0, 508, 517, 551, 531, 559,
	516, 556, 526, 271, 555, 520, 519, 565, 546, 547,
	501, 561, 532, 530, 523, 522, 518, 0, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 207, 0,
	208, 209, 210, 212, 213, 214, 0, 215, 216, 217,
	220, 221, 222, 224, 584, 225, 226, 227, 228, 229,
	230, 521, 0, 232, 233, 234, 235, 236, 238, 240,
	241, 242, 243, 244, 246, 248, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 0,
	258, 259, 263, 265, 266, 267, 268, 269, 270, 273,
	0, 275, 277, 0, 278, 281, 0, 282, 283, 284,
	285, 286, 287, 288, 289, 525, 290, 0, 291, 292,
	294, 0, 297, 298, 299, 300, 301, 0, 302, 527,
	528, 303, 304, 306, 307, 308, 310, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 0, 322,
	323, 324, 326, 0, 327, 328, 331, 332, 333, 334,
	0, 336, 544, 0, 337, 338, 339, 0, 0, 340,
	341, 342, 343, 344, 345, 348, 545, 350, 351, 352,
	353, 354, 355, 356, 586, 358, 359, 360, 361, 362,
	363, 364, 548, 549, 365, 367, 368, 550, 552, 553,
	0, 383, 384, 385, 386, 387, 388, 389, 391, 0,
	393, 394, 395, 554, 396, 397, 398, 399, 0, 400,
	401, 402, 403, 404, 406, 409, 410, 411, 412, 0,
	415, 416, 417, 418, 419, 420, 421, 423, 424, 425,
	427, 428, 429, 587, 430, 431, 432, 433, 557, 435,
	436, 588, 438, 439, 441, 442, 443, 444, 445, 446,
	605, 0, 448, 558, 449, 450, 451, 452, 453, 0,
	455, 456, 457, 458, 459, 460, 463, 464, 465, 467,
	468, 560, 469, 470, 0, 472, 473, 0, 475, 476,
	477, 478, 479, 0, 606, 480, 562, 481, 563, 482,
	483, 484, 485, 486, 487, 488, 490, 0, 0, 492,
	493, 494, 496, 497, 498, 499, 502, 503, 504, 505,
	506, 0, 507, 509, 511, 589, 566, 567, 568, 569,
	570, 572, 573, 574, 575, 512, 513, 529, 380, 374,
	330, 372, 373, 377, 378, 381, 193, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 223, 0, 0, 272,
	309, 524, 0, 0, 369, 0, 422, 426, 0, 515,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 491, 0, 0, 0, 0, 211, 607, 514,
	585, 0, 0, 0, 376, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 413, 347, 0, 564,
	440, 218, 264, 251, 293, 335, 447, 0, 0, 325,
	495, 260, 349, 0, 239, 382, 0, 471, 346, 0,
	454, 474, 0, 366, 245, 405, 461, 462, 0, 0,
	0, 0, 0, 249, 250, 371, 231, 379, 576, 542,
	434, 392, 390, 0, 357, 414, 571, 0, 0, 279,
	0, 274, 370, 510, 237, 489, 408, 375, 329, 437,
	466, 276, 261, 262, 305, 407, 295, 247, 500, 539,
	543, 541, 537, 534, 538, 535, 536, 540, 296, 533,
	0, 508, 517, 551, 531, 559, 516, 556, 526, 271,
	555, 520, 519, 565, 546, 547, 501, 561, 532, 530,
	523, 522, 518, 0, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 207, 0, 208, 209, 210, 212,
	213, 214, 0, 215, 216, 217, 220, 221, 222, 224,
	584, 225, 226, 227, 228, 229, 230, 521, 0, 232,
	233, 234, 235, 236, 238, 240, 241, 242, 243, 244,
	246, 248, 0, 0, 0, 3260, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 0, 258, 259, 263, 265,
	266, 267, 268, 269, 270, 273, 0, 275, 277, 0,
	278, 281, 0, 282, 283, 284, 285, 286, 287, 288,
	289, 525, 290, 0, 291, 292, 294, 0, 297, 298,
	299, 300, 301, 0, 302, 527, 528, 303, 304, 306,
	307, 308, 310, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 0, 322, 323, 324, 326, 0,
	327, 328, 331, 332, 333, 334, 0, 336, 544, 0,
	337, 338, 339, 0, 0, 340, 341, 342, 343, 344,
	345, 348, 545, 350, 351, 352, 353, 354, 355, 356,
	586, 358, 359, 360, 361, 362, 363, 364, 548, 549,
	365, 367, 368, 550, 552, 553, 0, 383, 384, 385,
	386, 387, 388, 389, 391, 0, 393, 394, 395, 554,
	396, 397, 398, 399, 0, 400, 401, 402, 403, 404,
	406, 409, 410, 411, 412, 0, 415, 416, 417, 418,
	419, 420, 421, 423, 424, 425, 427, 428, 429, 587,
	430, 431, 432, 433, 557, 435, 436, 588, 438, 439,
	441, 442, 443, 444, 445, 446, 605, 0, 448, 558,
	449, 450, 451, 452, 453, 0, 455, 456, 457, 458,
	459, 460, 463, 464, 465, 467, 468, 560, 469, 470,
	0, 472, 473, 0, 475, 476, 477, 478, 479, 0,
	606, 480, 562, 481, 563, 482, 483, 484, 485, 486,
	487, 488, 490, 0, 0, 492, 493, 494, 496, 497,
	498, 499, 502, 503, 504, 505, 506, 0, 507, 509,
	511, 589, 566, 567, 568, 569, 570, 572, 573, 574,
	575, 512, 513, 529, 380, 374, 330, 372, 373, 377,
	378, 381, 193, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 223, 0, 0, 272, 309, 524, 0, 0,
	369, 0, 422, 426, 0, 515, 0, 0, 2952, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 491, 0,
	0, 0, 0, 211, 607, 514, 585, 0, 0, 0,
	376, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 413, 347, 0, 564, 440, 218, 264, 251,
	293, 335, 447, 0, 0, 325, 495, 260, 349, 0,
	239, 382, 0, 471, 346, 0, 454, 474, 0, 366,
	245, 405, 461, 462, 0, 0, 0, 0, 0, 249,
	250, 371, 231, 379, 576, 542, 434, 392, 390, 0,
	357, 414, 571, 0, 0, 279, 0, 274, 370, 510,
	237, 489, 408, 375, 329, 437, 466, 276, 261, 262,
	305, 407, 295, 247, 500, 539, 543, 541, 537, 534,
	538, 535, 536, 540, 296, 533, 0, 508, 517, 551,
	531, 559, 516, 556, 526, 271, 555, 520, 519, 565,
	546, 547, 501, 561, 532, 530, 523, 522, 518, 0,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	207, 0, 208, 209, 210, 212, 213, 214, 0, 215,
	216, 217, 220, 221, 222, 224, 584, 225, 226, 227,
	228, 229, 230, 521, 0, 232, 233, 234, 235, 236,
	238, 240, 241, 242, 243, 244, 246, 248, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 0, 258, 259, 263, 265, 266, 267, 268, 269,
	270, 273, 0, 275, 277, 0, 278, 281, 0, 282,
	283, 284, 285, 286, 287, 288, 289, 525, 290, 0,
	291, 292, 294, 0, 297, 298, 299, 300, 301, 0,
	302, 527, 528, 303, 304, 306, 307, 308, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 323, 324, 326, 0, 327, 328, 331, 332,
	333, 334, 0, 336, 544, 0, 337, 338, 339, 0,
	0, 340, 341, 342, 343, 344, 345, 348, 545, 350,
	351, 352, 353, 354, 355, 356, 586, 358, 359, 360,
	361, 362, 363, 364, 548, 549, 365, 367, 368, 550,
	552, 553, 0, 383, 384, 385, 386, 387, 388, 389,
	391, 0, 393, 394, 395, 554, 396, 397, 398, 399,
	0, 400, 401, 402, 403, 404, 406, 409, 410, 411,
	412, 0, 415, 416, 417, 418, 419, 420, 421, 423,
	424, 425, 427, 428, 429, 587, 430, 431, 432, 433,
	557, 435, 436, 588, 438, 439, 441, 442, 443, 444,
	445, 446, 605, 0, 448, 558, 449, 450, 451, 452,
	453, 0, 455, 456, 457, 458, 459, 460, 463, 464,
	465, 467, 468, 560, 469, 470, 0, 472, 473, 0,
	475, 476, 477, 478, 479, 0, 606, 480, 562, 481,
	563, 482, 483, 484, 485, 486, 487, 488, 490, 0,
	0, 492, 493, 494, 496, 497, 498, 499, 502, 503,
	504, 505, 506, 0, 507, 509, 511, 589, 566, 567,
	568, 569, 570, 572, 573, 574, 575, 512, 513, 529,
	380, 374, 330, 372, 373, 377, 378, 381, 193, 0,
	0, 0, 0, 0, 0, 0, 900, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 206, 0, 223, 0,
	0, 272, 309, 524, 0, 0, 369, 0, 422, 426,
	0, 515, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 491, 0, 0, 0, 0, 211,
	607, 514, 585, 0, 0, 0, 376, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 413, 347,
	0, 564, 440, 218, 264, 251, 293, 335, 447, 0,
	0, 325, 495, 260, 349, 0, 239, 382, 0, 471,
	346, 0, 454, 474, 0, 366, 245, 405, 461, 462,
	0, 0, 0, 0, 0, 249, 250, 371, 231, 379,
	576, 542, 434, 392, 390, 0, 357, 414, 571, 0,
	0, 279, 0, 274, 370, 510, 237, 489, 408, 375,
	329, 437, 466, 276, 261, 262, 305, 407, 295, 247,
	500, 539, 543, 541, 537, 534, 538, 535, 536, 540,
	296, 533, 0, 508, 517, 551, 531, 559, 516, 556,
	526, 271, 555, 520, 519, 565, 546, 547, 501, 561,
	532, 530, 523, 522, 518, 0, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 207, 0, 208, 209,
	210, 212, 213, 214, 0, 215, 216, 217, 220, 221,
	222, 224, 584, 225, 226, 227, 228, 229, 230, 521,
	0, 232, 233, 234, 235, 236, 238, 240, 241, 242,
	243, 244, 246, 248, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 0, 258, 259,
	263, 265, 266, 267, 268, 269, 270, 273, 0, 275,
	277, 0, 278, 281, 0, 282, 283, 284, 285, 286,
	287, 288, 289, 525, 290, 0, 291, 292, 294, 0,
	297, 298, 299, 300, 301, 0, 302, 527, 528, 303,
	304, 306, 307, 308, 310, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 323, 324,
	326, 0, 327, 328, 331, 332, 333, 334, 0, 336,
	544, 0, 337, 338, 339, 0, 0, 340, 341, 342,
	343, 344, 345, 348, 545, 350, 351, 352, 353, 354,
	355, 356, 586, 358, 359, 360, 361, 362, 363, 364,
	548, 549, 365, 367, 368, 550, 552, 553, 0, 383,
	384, 385, 386, 387, 388, 389, 391, 0, 393, 394,
	395, 554, 396, 397, 398, 399, 0, 400, 401, 402,
	403, 404, 406, 409, 410, 411, 412, 0, 415, 416,
	417, 418, 419, 420, 421, 423, 424, 425, 427, 428,
	429, 587, 430, 431, 432, 433, 557, 435, 436, 588,
	438, 439, 441, 442, 443, 444, 445, 446, 605, 0,
	448, 558, 449, 450, 451, 452, 453, 0, 455, 456,
	457, 458, 459, 460, 463, 464, 465, 467, 468, 560,
	469, 470, 0, 472, 473, 0, 475, 476, 477, 478,
	479, 0, 606, 480, 562, 481, 563, 482, 483, 484,
	485, 486, 487, 488, 490, 0, 0, 492, 493, 494,
	496, 497, 498, 499, 502, 503, 504, 505, 506, 0,
	507, 509, 511, 589, 566, 567, 568, 569, 570, 572,
	573, 574, 575, 512, 513, 529, 380, 374, 330, 372,
	373, 377, 378, 381, 193, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 0, 223, 0, 0, 272, 1049, 524,
	0, 0, 369, 0, 422, 426, 0, 515, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	491, 0, 0, 0, 0, 211, 607, 514, 585, 0,
	0, 0, 376, 0, 0, 0, 604, 0, 0, 0,
	219, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 413, 347, 0, 564, 440, 218,
	264, 251, 293, 335, 447, 0, 0, 325, 495, 260,
	349, 0, 239, 382, 0, 471, 346, 0, 454, 474,
	0, 366, 245, 405, 461, 462, 0, 0, 0, 0,
	0, 249, 250, 371, 231, 379, 576, 542, 434, 392,
	390, 0, 357, 414, 571, 0, 0, 279, 0, 274,
	370, 510, 237, 489, 408, 375, 329, 437, 466, 276,
	261, 262, 305, 407, 295, 247, 500, 539, 543, 541,
	537, 534, 538, 535, 536, 540, 296, 533, 0, 508,
	517, 551, 531, 559, 516, 556, 526, 271, 555, 520,
	519, 565, 546, 547, 501, 561, 532, 530, 523, 522,
	518, 0, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 207, 0, 208, 209, 210, 212, 213, 214,
	0, 215, 216, 217, 220, 221, 222, 224, 584, 225,
	226, 227, 228, 229, 230, 521, 0, 232, 233, 234,
	235, 236, 238, 240, 241, 242, 243, 244, 246, 248,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 0, 258, 259, 263, 265, 266, 267,
	268, 269, 270, 273, 0, 275, 277, 0, 278, 281,
	0, 282, 283, 284, 285, 286, 287, 288, 289, 525,
	290, 0, 291, 292, 294, 0, 297, 298, 299, 300,
	301, 0, 302, 527, 528, 303, 304, 306, 307, 308,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 323, 324, 326, 0, 327, 328,
	331, 332, 333, 334, 0, 336, 544, 0, 337, 338,
	339, 0, 0, 340, 341, 342, 343, 344, 345, 348,
	545, 350, 351, 352, 353, 354, 355, 356, 586, 358,
	359, 360, 361, 362, 363, 364, 548, 549, 365, 367,
	368, 550, 552, 553, 0, 383, 384, 385, 386, 387,
	388, 389, 391, 0, 393, 394, 395, 554, 396, 397,
	398, 399, 0, 400, 401, 402, 403, 404, 406, 409,
	410, 411, 412, 0, 415, 416, 417, 418, 419, 420,
	421, 423, 424, 425, 427, 428, 429, 587, 430, 431,
	432, 433, 557, 435, 436, 588, 438, 439, 441, 442,
	443, 444, 445, 446, 605, 0, 448, 558, 449, 450,
	451, 452, 453, 0, 455, 456, 457, 458, 459, 460,
	463, 464, 465, 467, 468, 560, 469, 470, 0, 472,
	473, 0, 475, 476, 477, 478, 479, 0, 606, 480,
	562, 481, 563, 482, 483, 484, 485, 486, 487, 488,
	490, 0, 0, 492, 493, 494, 496, 497, 498, 499,
	502, 503, 504, 505, 506, 0, 507, 509, 511, 589,
	566, 567, 568, 569, 570, 572, 573, 574, 575, 512,
	513, 529, 380, 374, 330, 372, 373, 377, 378, 381,
	193, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1047, 206, 0,
	223, 0, 0, 272, 1046, 524, 0, 0, 369, 0,
	422, 426, 0, 515, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 491, 0, 0, 0,
	0, 211, 607, 514, 585, 0, 0, 0, 376, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	413, 347, 0, 564, 440, 218, 264, 251, 293, 335,
	447, 0, 0, 325, 495, 260, 349, 0, 239, 382,
	0, 471, 346, 0, 454, 474, 0, 366, 245, 405,
	461, 462, 0, 0, 0, 0, 0, 249, 250, 371,
	231, 379, 576, 542, 434, 392, 390, 0, 357, 414,
	571, 0, 0, 279, 0, 274, 370, 510, 237, 489,
	408, 375, 329, 437, 466, 276, 261, 262, 305, 407,
	295, 247, 500, 539, 543, 541, 537, 534, 538, 535,
	536, 540, 296, 533, 0, 508, 517, 551, 531, 559,
	516, 556, 526, 271, 555, 520, 519, 565, 546, 547,
	501, 561, 532, 530, 523, 522, 518, 0, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 207, 0,
	208, 209, 210, 212, 213, 214, 0, 215, 216, 217,
	220, 221, 222, 224, 584, 225, 226, 227, 228, 229,
	230, 521, 0, 232, 233, 234, 235, 236, 238, 240,
	241, 242, 243, 244, 246, 248, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 0,
	258, 259, 263, 265, 266, 267, 268, 269, 270, 273,
	0, 275, 277, 0, 278, 281, 0, 282, 283, 284,
	285, 286, 287, 288, 289, 525, 290, 0, 291, 292,
	294, 0, 297, 298, 299, 300, 301, 0, 302, 527,
	528, 303, 304, 306, 307, 308, 310, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 0, 322,
	323, 324, 326, 0, 327, 328, 331, 332, 333, 334,
	0, 336, 544, 0, 337, 338, 339, 0, 0, 340,
	341, 342, 343, 344, 345, 348, 545, 350, 351, 352,
	353, 354, 355, 356, 586, 358, 359, 360, 361, 362,
	363, 364, 548, 549, 365, 367, 368, 550, 552, 553,
	0, 383, 384, 385, 386, 387, 388, 389, 391, 0,
	393, 394, 395, 554, 396, 397, 398, 399, 0, 400,
	401, 402, 403, 404, 406, 409, 410, 411, 412, 0,
	415, 416, 417, 418, 419, 420, 421, 423, 424, 425,
	427, 428, 429, 587, 430, 431, 432, 433, 557, 435,
	436, 588, 438, 439, 441, 442, 443, 444, 445, 446,
	605, 0, 448, 558, 449, 450, 451, 452, 453, 0,
	455, 456, 457, 458, 459, 460, 463, 464, 465, 467,
	468, 560, 469, 470, 0, 472, 473, 0, 475, 476,
	477, 478, 479, 0, 606, 480, 562, 481, 563, 482,
	483, 484, 485, 486, 487, 488, 490, 0, 0, 492,
	493, 494, 496, 497, 498, 499, 502, 503, 504, 505,
	506, 0, 507, 509, 511, 589, 566, 567, 568, 569,
	570, 572, 573, 574, 575, 512, 513, 529, 380, 374,
	330, 372, 373, 377, 378, 381, 193, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 223, 0, 0, 272,
	309, 524, 0, 0, 369, 0, 422, 426, 0, 515,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 491, 0, 0, 0, 0, 211, 186, 514,
	585, 0, 0, 0, 376, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 413, 347, 0, 564,
	440, 218, 264, 251, 293, 335, 447, 0, 0, 325,
	495, 260, 349, 0, 239, 382, 0, 471, 346, 0,
	454, 474, 0, 366, 245, 405, 461, 462, 0, 0,
	0, 0, 0, 249, 250, 371, 231, 379, 576, 542,
	434, 392, 390, 0, 357, 414, 571, 0, 0, 279,
	0, 274, 370, 510, 237, 489, 408, 375, 329, 437,
	466, 276, 261, 262, 305, 407, 295, 247, 500, 539,
	543, 541, 537, 534, 538, 535, 536, 540, 296, 533,
	0, 508, 517, 551, 531, 559, 516, 556, 526, 271,
	555, 520, 519, 565, 546, 547, 501, 561, 532, 530,
	523, 522, 518, 0, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 207, 0, 208, 209, 210, 212,
	213, 214, 832, 215, 216, 217, 220, 221, 222, 224,
	187, 225, 831, 227, 228, 229, 230, 521, 0, 232,
	233, 234, 235, 236, 238, 240, 241, 242, 243, 244,
	246, 248, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 0, 258, 259, 263, 265,
	266, 267, 268, 269, 270, 273, 0, 275, 277, 0,
	278, 281, 0, 282, 283, 284, 285, 286, 287, 288,
	289, 525, 290, 0, 291, 292, 294, 0, 297, 298,
	299, 300, 301, 0, 302, 527, 528, 303, 304, 306,
	307, 308, 310, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 0, 322, 323, 324, 326, 0,
	327, 328, 331, 332, 333, 334, 0, 336, 544, 0,
	337, 338, 339, 0, 0, 340, 341, 342, 343, 344,
	345, 348, 545, 350, 351, 352, 353, 354, 355, 356,
	189, 358, 359, 360, 361, 362, 363, 364, 548, 549,
	365, 367, 368, 550, 552, 553, 0, 383, 384, 385,
	386, 387, 388, 389, 391, 0, 393, 394, 395, 554,
	396, 397, 398, 399, 0, 400, 401, 402, 403, 404,
	406, 409, 410, 411, 412, 0, 415, 416, 417, 418,
	419, 420, 421, 423, 424, 425, 427, 428, 429, 190,
	430, 431, 432, 433, 557, 435, 436, 188, 438, 439,
	441, 442, 443, 444, 445, 446, 829, 0, 448, 558,
	449, 450, 451, 452, 453, 0, 455, 456, 457, 458,
	459, 460, 463, 464, 465, 467, 468, 560, 469, 470,
	0, 472, 473, 0, 475, 476, 477, 478, 479, 0,
	182, 480, 562, 481, 563, 482, 483, 484, 485, 486,
	487, 488, 490, 0, 0, 492, 493, 494, 496, 497,
	498, 499, 502, 503, 504, 505, 506, 0, 507, 509,
	511, 191, 566, 567, 568, 569, 570, 572, 573, 574,
	575, 512, 513, 529, 380, 374, 330, 372, 373, 377,
	378, 381, 193, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 695,
	206, 0, 223, 0, 0, 272, 694, 524, 0, 0,
	369, 0, 422, 426, 0, 515, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 491, 0,
	0, 0, 0, 211, 607, 514, 585, 0, 0, 0,
	376, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 413, 347, 0, 564, 440, 218, 264, 251,
	293, 335, 447, 0, 0, 325, 495, 260, 349, 0,
	239, 382, 0, 471, 346, 0, 454, 474, 0, 366,
	245, 405, 461, 462, 0, 0, 0, 0, 0, 249,
	250, 371, 231, 379, 576, 542, 434, 392, 390, 0,
	357, 414, 571, 0, 0, 279, 0, 274, 370, 510,
	237, 489, 408, 375, 329, 437, 466, 276, 261, 262,
	305, 407, 295, 247, 500, 539, 543, 541, 537, 534,
	538, 535, 536, 540, 296, 533, 0, 508, 517, 551,
	531, 559, 516, 556, 526, 271, 555, 520, 519, 565,
	546, 547, 501, 561, 532, 530, 523, 522, 518, 0,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	207, 0, 208, 209, 210, 212, 213, 214, 0, 215,
	216, 217, 220, 221, 222, 224, 584, 225, 226, 227,
	228, 229, 230, 521, 0, 232, 233, 234, 235, 236,
	238, 240, 241, 242, 243, 244, 246, 248, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 0, 258, 259, 263, 265, 266, 267, 268, 269,
	270, 273, 0, 275, 277, 0, 278, 281, 0, 282,
	283, 284, 285, 286, 287, 288, 289, 525, 290, 0,
	291, 292, 294, 0, 297, 298, 299, 300, 301, 0,
	302, 527, 528, 303, 304, 306, 307, 308, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 323, 324, 326, 0, 327, 328, 331, 332,
	333, 334, 0, 336, 544, 0, 337, 338, 339, 0,
	0, 340, 341, 342, 343, 344, 345, 348, 545, 350,
	351, 352, 353, 354, 355, 356, 586, 358, 359, 360,
	361, 362, 363, 364, 548, 549, 365, 367, 368, 550,
	552, 553, 0, 383, 384, 385, 386, 387, 388, 389,
	391, 0, 393, 394, 395, 554, 396, 397, 398, 399,
	0, 400, 401, 402, 403, 404, 406, 409, 410, 411,
	412, 0, 415, 416, 417, 418, 419, 420, 421, 423,
	424, 425, 427, 428, 429, 587, 430, 431, 432, 433,
	557, 435, 436, 588, 438, 439, 441, 442, 443, 444,
	445, 446, 605, 0, 448, 558, 449, 450, 451, 452,
	453, 0, 455, 456, 457, 458, 459, 460, 463, 464,
	465, 467, 468, 560, 469, 470, 0, 472, 473, 0,
	475, 476, 477, 478, 479, 0, 606, 480, 562, 481,
	563, 482, 483, 484, 485, 486, 487, 488, 490, 0,
	0, 492, 493, 494, 496, 497, 498, 499, 502, 503,
	504, 505, 506, 0, 507, 509, 511, 589, 566, 567,
	568, 569, 570, 572, 573, 574, 575, 512, 513, 529,
	380, 374, 330, 372, 373, 377, 378, 381, 193, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 583, 206, 0, 223, 0,
	0, 272, 309, 524, 0, 0, 369, 0, 422, 426,
	0, 515, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 491, 0, 0, 0, 0, 211,
	579, 514, 585, 0, 0, 0, 376, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 413, 347,
	0, 564, 440, 218, 264, 251, 293, 335, 447, 0,
	0, 325, 495, 260, 349, 0, 239, 382, 0, 471,
	346, 0, 454, 474, 0, 366, 245, 405, 461, 462,
	0, 0, 0, 0, 0, 249, 250, 371, 231, 379,
	576, 542, 434, 392, 390, 0, 357, 414, 571, 0,
	0, 279, 0, 274, 370, 510, 237, 489, 408, 375,
	329, 437, 466, 276, 261, 262, 305, 407, 295, 247,
	500, 539, 543, 541, 537, 534, 538, 535, 536, 540,
	296, 533, 0, 508, 517, 551, 531, 559, 516, 556,
	526, 271, 555, 520, 519, 565, 546, 547, 501, 561,
	532, 530, 523, 522, 518, 0, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 207, 0, 208, 209,
	210, 212, 213, 214, 0, 215, 216, 217, 220, 221,
	222, 224, 584, 225, 226, 227, 228, 229, 230, 521,
	0, 232, 233, 234, 235, 236, 238, 240, 241, 242,
	243, 244, 246, 248, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 0, 258, 259,
	263, 265, 266, 267, 268, 269, 270, 273, 0, 275,
	277, 0, 278, 281, 0, 282, 283, 284, 285, 286,
	287, 288, 289, 525, 290, 0, 291, 292, 294, 0,
	297, 298, 299, 300, 301, 0, 302, 527, 528, 303,
	304, 306, 307, 308, 310, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 323, 324,
	326, 0, 327, 328, 331, 332, 333, 334, 0, 336,
	544, 0, 337, 338, 339, 0, 0, 340, 341, 342,
	343, 344, 345, 348, 545, 350, 351, 352, 353, 354,
	355, 356, 586, 358, 359, 360, 361, 362, 363, 364,
	548, 549, 365, 367, 368, 550, 552, 553, 0, 383,
	384, 385, 386, 387, 388, 389, 391, 0, 393, 394,
	395, 554, 396, 397, 398, 399, 0, 400, 401, 402,
	403, 404, 406, 409, 410, 411, 412, 0, 415, 416,
	417, 418, 419, 420, 421, 423, 424, 425, 427, 428,
	429, 587, 430, 431, 432, 433, 557, 435, 436, 588,
	438, 439, 441, 442, 443, 444, 445, 446, 581, 0,
	448, 558, 449, 450, 451, 452, 453, 0, 455, 456,
	457, 458, 459, 460, 463, 464, 465, 467, 468, 560,
	469, 470, 0, 472, 473, 0, 475, 476, 477, 478,
	479, 0, 580, 480, 562, 481, 563, 482, 483, 484,
	485, 486, 487, 488, 490, 0, 0, 492, 493, 494,
	496, 497, 498, 499, 502, 503, 504, 505, 506, 0,
	507, 509, 511, 589, 566, 567, 568, 569, 570, 572,
	573, 574, 575, 512, 513, 529, 380, 374, 330, 372,
	373, 377, 378, 381, 193, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 0, 223, 0, 0, 272, 309, 524,
	0, 0, 369, 0, 422, 426, 0, 515, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	491, 0, 0, 0, 0, 211, 607, 514, 585, 0,
	0, 0, 376, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 413, 347, 0, 564, 440, 218,
	264, 251, 293, 335, 447, 0, 0, 325, 495, 260,
	349, 0, 239, 382, 0, 471, 346, 0, 454, 474,
	0, 366, 245, 405, 461, 462, 0, 0, 0, 0,
	0, 249, 250, 371, 231, 379, 576, 542, 434, 392,
	390, 0, 4271, 414, 571, 0, 0, 279, 0, 274,
	370, 510, 237, 489, 408, 375, 329, 437, 466, 276,
	261, 262, 305, 407, 295, 247, 500, 539, 543, 541,
	537, 534, 538, 535, 536, 540, 296, 533, 0, 508,
	517, 551, 531, 559, 516, 556, 526, 271, 555, 520,
	519, 565, 546, 547, 501, 561, 532, 530, 523, 522,
	518, 0, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 207, 0, 208, 209, 210, 212, 213, 214,
	0, 215, 216, 217, 220, 221, 222, 224, 584, 225,
	226, 227, 228, 229, 230, 521, 0, 232, 233, 234,
	235, 236, 238, 240, 241, 242, 243, 244, 246, 248,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 0, 258, 259, 263, 265, 266, 267,
	268, 269, 270, 273, 0, 275, 277, 0, 278, 281,
	0, 282, 283, 284, 285, 286, 287, 288, 289, 525,
	290, 0, 291, 292, 294, 0, 297, 298, 299, 300,
	301, 0, 302, 527, 528, 303, 304, 306, 307, 308,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 323, 324, 326, 0, 327, 328,
	331, 332, 333, 334, 0, 336, 544, 0, 337, 338,
	339, 0, 0, 340, 341, 342, 343, 344, 345, 348,
	545, 350, 351, 352, 353, 354, 355, 356, 586, 358,
	359, 360, 361, 362, 363, 364, 548, 549, 365, 367,
	368, 550, 552, 553, 0, 383, 384, 385, 386, 387,
	388, 389, 391, 0, 393, 394, 395, 554, 396, 397,
	398, 399, 0, 400, 401, 402, 403, 404, 406, 409,
	410, 411, 412, 0, 415, 416, 417, 418, 419, 420,
	421, 423, 424, 425, 427, 428, 429, 587, 430, 431,
	432, 433, 557, 435, 436, 588, 438, 439, 441, 442,
	443, 444, 445, 446, 605, 0, 448, 558, 449, 450,
	451, 452, 453, 0, 455, 456, 457, 458, 459, 460,
	463, 464, 465, 467, 468, 560, 469, 470, 0, 472,
	473, 0, 475, 476, 477, 478, 479, 0, 606, 480,
	562, 481, 563, 482, 483, 484, 485, 486, 487, 488,
	490, 0, 0, 492, 493, 494, 496, 497, 498, 499,
	502, 503, 504, 505, 506, 0, 507, 509, 511, 589,
	566, 567, 568, 569, 570, 572, 573, 574, 575, 512,
	513, 529, 380, 374, 330, 372, 373, 377, 378, 381,
	193, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	223, 0, 0, 272, 309, 524, 0, 0, 369, 0,
	422, 426, 0, 515, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 491, 0, 0, 0,
	0, 211, 607, 514, 585, 0, 0, 0, 376, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	413, 347, 0, 564, 440, 218, 264, 251, 293, 335,
	447, 0, 0, 325, 495, 260, 349, 0, 239, 382,
	0, 471, 346, 0, 454, 474, 0, 366, 245, 405,
	461, 462, 0, 0, 0, 0, 0, 249, 250, 371,
	231, 379, 576, 542, 434, 392, 390, 0, 357, 414,
	571, 0, 0, 279, 0, 274, 370, 510, 237, 489,
	408, 375, 329, 437, 466, 276, 261, 262, 305, 407,
	295, 247, 500, 539, 543, 541, 537, 534, 538, 535,
	536, 540, 296, 533, 0, 508, 517, 551, 531, 559,
	516, 556, 526, 271, 555, 520, 519, 565, 546, 547,
	501, 561, 532, 530, 523, 522, 518, 0, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 207, 0,
	208, 209, 210, 212, 213, 214, 0, 215, 216, 217,
	220, 221, 222, 224, 584, 225, 226, 227, 228, 229,
	230, 521, 0, 232, 233, 234, 235, 236, 238, 240,
	241, 242, 243, 244, 246, 248, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 0,
	258, 259, 263, 265, 266, 267, 268, 269, 270, 273,
	0, 275, 277, 0, 278, 281, 0, 282, 283, 284,
	285, 286, 287, 288, 289, 525, 290, 0, 291, 292,
	294, 0, 297, 298, 299, 300, 301, 0, 302, 527,
	528, 303, 304, 306, 307, 308, 310, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 0, 322,
	323, 324, 326, 0, 327, 328, 331, 332, 333, 334,
	0, 336, 544, 0, 337, 338, 339, 0, 0, 340,
	341, 342, 343, 344, 345, 348, 545, 350, 351, 352,
	353, 354, 355, 356, 586, 358, 359, 360, 361, 362,
	363, 364, 548, 549, 365, 367, 368, 550, 552, 553,
	0, 383, 384, 385, 386, 387, 388, 389, 391, 0,
	393, 394, 395, 554, 396, 397, 398, 399, 0, 400,
	401, 402, 403, 404, 406, 409, 410, 411, 412, 0,
	415, 416, 417, 418, 419, 420, 421, 423, 424, 425,
	427, 428, 429, 587, 430, 431, 432, 433, 557, 435,
	436, 588, 438, 439, 441, 442, 443, 444, 445, 446,
	605, 0, 448, 558, 449, 450, 451, 452, 453, 0,
	455, 456, 457, 458, 459, 460, 463, 464, 465, 467,
	468, 560, 469, 470, 0, 472, 473, 0, 475, 476,
	477, 478, 479, 0, 606, 480, 562, 481, 563, 482,
	483, 484, 485, 486, 487, 488, 490, 0, 0, 492,
	493, 494, 496, 497, 498, 499, 502, 503, 504, 505,
	506, 0, 507, 509, 511, 589, 566, 567, 568, 569,
	570, 572, 573, 574, 575, 512, 513, 529, 380, 374,
	330, 372, 373, 377, 378, 381, 193, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 223, 0, 0, 272,
	309, 524, 0, 0, 369, 0, 422, 426, 0, 515,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 491, 0, 0, 0, 0, 211, 186, 514,
	585, 0, 0, 0, 376, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 413, 347, 0, 564,
	440, 218, 264, 251, 293, 335, 447, 0, 0, 325,
	495, 260, 349, 0, 239, 382, 0, 471, 346, 0,
	454, 474, 0, 366, 245, 405, 461, 462, 0, 0,
	0, 0, 0, 249, 250, 371, 231, 379, 576, 542,
	434, 392, 390, 0, 357, 414, 571, 0, 0, 279,
	0, 274, 370, 510, 237, 489, 408, 375, 329, 437,
	466, 276, 261, 262, 305, 407, 295, 247, 500, 539,
	543, 541, 537, 534, 538, 535, 536, 540, 296, 533,
	0, 508, 517, 551, 531, 559, 516, 556, 526, 271,
	555, 520, 519, 565, 546, 547, 501, 561, 532, 530,
	523, 522, 518, 0, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 207, 0, 208, 209, 210, 212,
	213, 214, 0, 215, 216, 217, 220, 221, 222, 224,
	187, 225, 226, 227, 228, 229, 230, 521, 0, 232,
	233, 234, 235, 236, 238, 240, 241, 242, 243, 244,
	246, 248, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 0, 258, 259, 263, 265,
	266, 267, 268, 269, 270, 273, 0, 275, 277, 0,
	278, 281, 0, 282, 283, 284, 285, 286, 287, 288,
	289, 525, 290, 0, 291, 292, 294, 0, 297, 298,
	299, 300, 301, 0, 302, 527, 528, 303, 304, 306,
	307, 308, 310, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 0, 322, 323, 324, 326, 0,
	327, 328, 331, 332, 333, 334, 0, 336, 544, 0,
	337, 338, 339, 0, 0, 340, 341, 342, 343, 344,
	345, 348, 545, 350, 351, 352, 353, 354, 355, 356,
	189, 358, 359, 360, 361, 362, 363, 364, 548, 549,
	365, 367, 368, 550, 552, 553, 0, 383, 384, 385,
	386, 387, 388, 389, 391, 0, 393, 394, 395, 554,
	396, 397, 398, 399, 0, 400, 401, 402, 403, 404,
	406, 409, 410, 411, 412, 0, 415, 416, 417, 418,
	419, 420, 421, 423, 424, 425, 427, 428, 429, 190,
	430, 431, 432, 433, 557, 435, 436, 188, 438, 439,
	441, 442, 443, 444, 445, 446, 2799, 0, 448, 558,
	449, 450, 451, 452, 453, 0, 455, 456, 457, 458,
	459, 460, 463, 464, 465, 467, 468, 560, 469, 470,
	0, 472, 473, 0, 475, 476, 477, 478, 479, 0,
	2800, 480, 562, 481, 563, 482, 483, 484, 485, 486,
	487, 488, 490, 0, 0, 492, 493, 494, 496, 497,
	498, 499, 502, 503, 504, 505, 506, 0, 507, 509,
	511, 191, 566, 567, 568, 569, 570, 572, 573, 574,
	575, 512, 513, 529, 380, 374, 330, 372, 373, 377,
	378, 381, 193, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 223, 0, 0, 272, 2539, 524, 0, 0,
	369, 0, 422, 426, 0, 515, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 491, 0,
	0, 0, 0, 211, 607, 514, 585, 0, 0, 0,
	376, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 413, 347, 0, 564, 440, 218, 264, 251,
	293, 335, 447, 0, 0, 325, 495, 260, 349, 0,
	239, 382, 0, 471, 346, 0, 454, 474, 0, 366,
	245, 405, 461, 462, 0, 0, 0, 0, 0, 249,
	250, 371, 231, 379, 576, 542, 434, 392, 390, 0,
	357, 414, 571, 0, 0, 279, 0, 274, 370, 510,
	237, 489, 408, 375, 329, 437, 466, 276, 261, 262,
	305, 407, 295, 247, 500, 539, 543, 541, 537, 534,
	538, 535, 536, 540, 296, 533, 0, 508, 517, 551,
	531, 559, 516, 556, 526, 271, 555, 520, 519, 565,
	546, 547, 501, 561, 532, 530, 523, 522, 518, 0,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	207, 0, 208, 209, 210, 212, 213, 214, 0, 215,
	216, 217, 220, 221, 222, 224, 584, 225, 226, 227,
	228, 229, 230, 521, 0, 232, 233, 234, 235, 236,
	238, 240, 241, 242, 243, 244, 246, 248, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 0, 258, 259, 263, 265, 266, 267, 268, 269,
	270, 273, 0, 275, 277, 0, 278, 281, 0, 282,
	283, 284, 285, 286, 287, 288, 289, 525, 290, 0,
	291, 292, 294, 0, 297, 298, 299, 300, 301, 0,
	302, 527, 528, 303, 304, 306, 307, 308, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 323, 324, 326, 0, 327, 328, 331, 332,
	333, 334, 0, 336, 544, 0, 337, 338, 339, 0,
	0, 340, 341, 342, 343, 344, 345, 348, 545, 350,
	351, 352, 353, 354, 355, 356, 586, 358, 359, 360,
	361, 362, 363, 364, 548, 549, 365, 367, 368, 550,
	552, 553, 0, 383, 384, 385, 386, 387, 388, 389,
	391, 0, 393, 394, 395, 554, 396, 397, 398, 399,
	0, 400, 401, 402, 403, 404, 406, 409, 410, 411,
	412, 0, 415, 416, 417, 418, 419, 420, 421, 423,
	424, 425, 427, 428, 429, 587, 430, 431, 432, 433,
	557, 435, 436, 588, 438, 439, 441, 442, 443, 444,
	445, 446, 605, 0, 448, 558, 449, 450, 451, 452,
	453, 0, 455, 456, 457, 458, 459, 460, 463, 464,
	465, 467, 468, 560, 469, 470, 0, 472, 473, 0,
	475, 476, 477, 478, 479, 0, 606, 480, 562, 481,
	563, 482, 483, 484, 485, 486, 487, 488, 490, 0,
	0, 492, 493, 494, 496, 497, 498, 499, 502, 503,
	504, 505, 506, 0, 507, 509, 511, 589, 566, 567,
	568, 569, 570, 572, 573, 574, 575, 512, 513, 529,
	380, 374, 330, 372, 373, 377, 378, 381, 193, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 206, 0, 223, 0,
	0, 272, 2457, 524, 0, 0, 369, 0, 422, 426,
	0, 515, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 491, 0, 0, 0, 0, 211,
	607, 514, 585, 0, 0, 0, 376, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 413, 347,
	0, 564, 440, 218, 264, 251, 293, 335, 447, 0,
	0, 325, 495, 260, 349, 0, 239, 382, 0, 471,
	346, 0, 454, 474, 0, 366, 245, 405, 461, 462,
	0, 0, 0, 0, 0, 249, 250, 371, 231, 379,
	576, 542, 434, 392, 390, 0, 357, 414, 571, 0,
	0, 279, 0, 274, 370, 510, 237, 489, 408, 375,
	329, 437, 466, 276, 261, 262, 305, 407, 295, 247,
	500, 539, 543, 541, 537, 534, 538, 535, 536, 540,
	296, 533, 0, 508, 517, 551, 531, 559, 516, 556,
	526, 271, 555, 520, 519, 565, 546, 547, 501, 561,
	532, 530, 523, 522, 518, 0, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 207, 0, 208, 209,
	210, 212, 213, 214, 0, 215, 216, 217, 220, 221,
	222, 224, 584, 225, 226, 227, 228, 229, 230, 521,
	0, 232, 233, 234, 235, 236, 238, 240, 241, 242,
	243, 244, 246, 248, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 0, 258, 259,
	263, 265, 266, 267, 268, 269, 270, 273, 0, 275,
	277, 0, 278, 281, 0, 282, 283, 284, 285, 286,
	287, 288, 289, 525, 290, 0, 291, 292, 294, 0,
	297, 298, 299, 300, 301, 0, 302, 527, 528, 303,
	304, 306, 307, 308, 310, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 323, 324,
	326, 0, 327, 328, 331, 332, 333, 334, 0, 336,
	544, 0, 337, 338, 339, 0, 0, 340, 341, 342,
	343, 344, 345, 348, 545, 350, 351, 352, 353, 354,
	355, 356, 586, 358, 359, 360, 361, 362, 363, 364,
	548, 549, 365, 367, 368, 550, 552, 553, 0, 383,
	384, 385, 386, 387, 388, 389, 391, 0, 393, 394,
	395, 554, 396, 397, 398, 399, 0, 400, 401, 402,
	403, 404, 406, 409, 410, 411, 412, 0, 415, 416,
	417, 418, 419, 420, 421, 423, 424, 425, 427, 428,
	429, 587, 430, 431, 432, 433, 557, 435, 436, 588,
	438, 439, 441, 442, 443, 444, 445, 446, 605, 0,
	448, 558, 449, 450, 451, 452, 453, 0, 455, 456,
	457, 458, 459, 460, 463, 464, 465, 467, 468, 560,
	469, 470, 0, 472, 473, 0, 475, 476, 477, 478,
	479, 0, 606, 480, 562, 481, 563, 482, 483, 484,
	485, 486, 487, 488, 490, 0, 0, 492, 493, 494,
	496, 497, 498, 499, 502, 503, 504, 505, 506, 0,
	507, 509, 511, 589, 566, 567, 568, 569, 570, 572,
	573, 574, 575, 512, 513, 529, 380, 374, 330, 372,
	373, 377, 378, 381, 193, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 0, 223, 0, 0, 272, 2455, 524,
	0, 0, 369, 0, 422, 426, 0, 515, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	491, 0, 0, 0, 0, 211, 607, 514, 585, 0,
	0, 0, 376, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 413, 347, 0, 564, 440, 218,
	264, 251, 293, 335, 447, 0, 0, 325, 495, 260,
	349, 0, 239, 382, 0, 471, 346, 0, 454, 474,
	0, 366, 245, 405, 461, 462, 0, 0, 0, 0,
	0, 249, 250, 371, 231, 379, 576, 542, 434, 392,
	390, 0, 357, 414, 571, 0, 0, 279, 0, 274,
	370, 510, 237, 489, 408, 375, 329, 437, 466, 276,
	261, 262, 305, 407, 295, 247, 500, 539, 543, 541,
	537, 534, 538, 535, 536, 540, 296, 533, 0, 508,
	517, 551, 531, 559, 516, 556, 526, 271, 555, 520,
	519, 565, 546, 547, 501, 561, 532, 530, 523, 522,
	518, 0, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 207, 0, 208, 209, 210, 212, 213, 214,
	0, 215, 216, 217, 220, 221, 222, 224, 584, 225,
	226, 227, 228, 229, 230, 521, 0, 232, 233, 234,
	235, 236, 238, 240, 241, 242, 243, 244, 246, 248,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 0, 258, 259, 263, 265, 266, 267,
	268, 269, 270, 273, 0, 275, 277, 0, 278, 281,
	0, 282, 283, 284, 285, 286, 287, 288, 289, 525,
	290, 0, 291, 292, 294, 0, 297, 298, 299, 300,
	301, 0, 302, 527, 528, 303, 304, 306, 307, 308,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 323, 324, 326, 0, 327, 328,
	331, 332, 333, 334, 0, 336, 544, 0, 337, 338,
	339, 0, 0, 340, 341, 342, 343, 344, 345, 348,
	545, 350, 351, 352, 353, 354, 355, 356, 586, 358,
	359, 360, 361, 362, 363, 364, 548, 549, 365, 367,
	368, 550, 552, 553, 0, 383, 384, 385, 386, 387,
	388, 389, 391, 0, 393, 394, 395, 554, 396, 397,
	398, 399, 0, 400, 401, 402, 403, 404, 406, 409,
	410, 411, 412, 0, 415, 416, 417, 418, 419, 420,
	421, 423, 424, 425, 427, 428, 429, 587, 430, 431,
	432, 433, 557, 435, 436, 588, 438, 439, 441, 442,
	443, 444, 445, 446, 605, 0, 448, 558, 449, 450,
	451, 452, 453, 0, 455, 456, 457, 458, 459, 460,
	463, 464, 465, 467, 468, 560, 469, 470, 0, 472,
	473, 0, 475, 476, 477, 478, 479, 0, 606, 480,
	562, 481, 563, 482, 483, 484, 485, 486, 487, 488,
	490, 0, 0, 492, 493, 494, 496, 497, 498, 499,
	502, 503, 504, 505, 506, 0, 507, 509, 511, 589,
	566, 567, 568, 569, 570, 572, 573, 574, 575, 512,
	513, 529, 380, 374, 330, 372, 373, 377, 378, 381,
	193, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	223, 0, 0, 272, 2441, 524, 0, 0, 369, 0,
	422, 426, 0, 515, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 491, 0, 0, 0,
	0, 211, 607, 514, 585, 0, 0, 0, 376, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	413, 347, 0, 564, 440, 218, 264, 251, 293, 335,
	447, 0, 0, 325, 495, 260, 349, 0, 239, 382,
	0, 471, 346, 0, 454, 474, 0, 366, 245, 405,
	461, 462, 0, 0, 0, 0, 0, 249, 250, 371,
	231, 379, 576, 542, 434, 392, 390, 0, 357, 414,
	571, 0, 0, 279, 0, 274, 370, 510, 237, 489,
	408, 375, 329, 437, 466, 276, 261, 262, 305, 407,
	295, 247, 500, 539, 543, 541, 537, 534, 538, 535,
	536, 540, 296, 533, 0, 508, 517, 551, 531, 559,
	516, 556, 526, 271, 555, 520, 519, 565, 546, 547,
	501, 561, 532, 530, 523, 522, 518, 0, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 207, 0,
	208, 209, 210, 212, 213, 214, 0, 215, 216, 217,
	220, 221, 222, 224, 584, 225, 226, 227, 228, 229,
	230, 521, 0, 232, 233, 234, 235, 236, 238, 240,
	241, 242, 243, 244, 246, 248, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 0,
	258, 259, 263, 265, 266, 267, 268, 269, 270, 273,
	0, 275, 277, 0, 278, 281, 0, 282, 283, 284,
	285, 286, 287, 288, 289, 525, 290, 0, 291, 292,
	294, 0, 297, 298, 299, 300, 301, 0, 302, 527,
	528, 303, 304, 306, 307, 308, 310, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 0, 322,
	323, 324, 326, 0, 327, 328, 331, 332, 333, 334,
	0, 336, 544, 0, 337, 338, 339, 0, 0, 340,
	341, 342, 343, 344, 345, 348, 545, 350, 351, 352,
	353, 354, 355, 356, 586, 358, 359, 360, 361, 362,
	363, 364, 548, 549, 365, 367, 368, 550, 552, 553,
	0, 383, 384, 385, 386, 387, 388, 389, 391, 0,
	393, 394, 395, 554, 396, 397, 398, 399, 0, 400,
	401, 402, 403, 404, 406, 409, 410, 411, 412, 0,
	415, 416, 417, 418, 419, 420, 421, 423, 424, 425,
	427, 428, 429, 587, 430, 431, 432, 433, 557, 435,
	436, 588, 438, 439, 441, 442, 443, 444, 445, 446,
	605, 0, 448, 558, 449, 450, 451, 452, 453, 0,
	455, 456, 457, 458, 459, 460, 463, 464, 465, 467,
	468, 560, 469, 470, 0, 472, 473, 0, 475, 476,
	477, 478, 479, 0, 606, 480, 562, 481, 563, 482,
	483, 484, 485, 486, 487, 488, 490, 0, 0, 492,
	493, 494, 496, 497, 498, 499, 502, 503, 504, 505,
	506, 0, 507, 509, 511, 589, 566, 567, 568, 569,
	570, 572, 573, 574, 575, 512, 513, 529, 380, 374,
	330, 372, 373, 377, 378, 381, 193, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 223, 0, 0, 272,
	1913, 524, 0, 0, 369, 0, 422, 426, 0, 515,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 491, 0, 0, 0, 0, 211, 607, 514,
	585, 0, 0, 0, 376, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 413, 347, 0, 564,
	440, 218, 264, 251, 293, 335, 447, 0, 0, 325,
	495, 260, 349, 0, 239, 382, 0, 471, 346, 0,
	454, 474, 0, 366, 245, 405, 461, 462, 0, 0,
	0, 0, 0, 249, 250, 371, 231, 379, 576, 542,
	434, 392, 390, 0, 357, 414, 571, 0, 0, 279,
	0, 274, 370, 510, 237, 489, 408, 375, 329, 437,
	466, 276, 261, 262, 305, 407, 295, 247, 500, 539,
	543, 541, 537, 534, 538, 535, 536, 540, 296, 533,
	0, 508, 517, 551, 531, 559, 516, 556, 526, 271,
	555, 520, 519, 565, 546, 547, 501, 561, 532, 530,
	523, 522, 518, 0, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 207, 0, 208, 209, 210, 212,
	213, 214, 0, 215, 216, 217, 220, 221, 222, 224,
	584, 225, 226, 227, 228, 229, 230, 521, 0, 232,
	233, 234, 235, 236, 238, 240, 241, 242, 243, 244,
	246, 248, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 0, 258, 259, 263, 265,
	266, 267, 268, 269, 270, 273, 0, 275, 277, 0,
	278, 281, 0, 282, 283, 284, 285, 286, 287, 288,
	289, 525, 290, 0, 291, 292, 294, 0, 297, 298,
	299, 300, 301, 0, 302, 527, 528, 303, 304, 306,
	307, 308, 310, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 0, 322, 323, 324, 326, 0,
	327, 328, 331, 332, 333, 334, 0, 336, 544, 0,
	337, 338, 339, 0, 0, 340, 341, 342, 343, 344,
	345, 348, 545, 350, 351, 352, 353, 354, 355, 356,
	586, 358, 359, 360, 361, 362, 363, 364, 548, 549,
	365, 367, 368, 550, 552, 553, 0, 383, 384, 385,
	386, 387, 388, 389, 391, 0, 393, 394, 395, 554,
	396, 397, 398, 399, 0, 400, 401, 402, 403, 404,
	406, 409, 410, 411, 412, 0, 415, 416, 417, 418,
	419, 420, 421, 423, 424, 425, 427, 428, 429, 587,
	430, 431, 432, 433, 557, 435, 436, 588, 438, 439,
	441, 442, 443, 444, 445, 446, 605, 0, 448, 558,
	449, 450, 451, 452, 453, 0, 455, 456, 457, 458,
	459, 460, 463, 464, 465, 467, 468, 560, 469, 470,
	0, 472, 473, 0, 475, 476, 477, 478, 479, 0,
	606, 480, 562, 481, 563, 482, 483, 484, 485, 486,
	487, 488, 490, 0, 0, 492, 493, 494, 496, 497,
	498, 499, 502, 503, 504, 505, 506, 0, 507, 509,
	511, 589, 566, 567, 568, 569, 570, 572, 573, 574,
	575, 512, 513, 529, 380, 374, 330, 372, 373, 377,
	378, 381, 193, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 223, 0, 0, 272, 1855, 524, 0, 0,
	369, 0, 422, 426, 0, 515, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 491, 0,
	0, 0, 0, 211, 607, 514, 585, 0, 0, 0,
	376, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 413, 347, 0, 564, 440, 218, 264, 251,
	293, 335, 447, 0, 0, 325, 495, 260, 349, 0,
	239, 382, 0, 471, 346, 0, 454, 474, 0, 366,
	245, 405, 461, 462, 0, 0, 0, 0, 0, 249,
	250, 371, 231, 379, 576, 542, 434, 392, 390, 0,
	357, 414, 571, 0, 0, 279, 0, 274, 370, 510,
	237, 489, 408, 375, 329, 437, 466, 276, 261, 262,
	305, 407, 295, 247, 500, 539, 543, 541, 537, 534,
	538, 535, 536, 540, 296, 533, 0, 508, 517, 551,
	531, 559, 516, 556, 526, 271, 555, 520, 519, 565,
	546, 547, 501, 561, 532, 530, 523, 522, 518, 0,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	207, 0, 208, 209, 210, 212, 213, 214, 0, 215,
	216, 217, 220, 221, 222, 224, 584, 225, 226, 227,
	228, 229, 230, 521, 0, 232, 233, 234, 235, 236,
	238, 240, 241, 242, 243, 244, 246, 248, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 0, 258, 259, 263, 265, 266, 267, 268, 269,
	270, 273, 0, 275, 277, 0, 278, 281, 0, 282,
	283, 284, 285, 286, 287, 288, 289, 525, 290, 0,
	291, 292, 294, 0, 297, 298, 299, 300, 301, 0,
	302, 527, 528, 303, 304, 306, 307, 308, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 323, 324, 326, 0, 327, 328, 331, 332,
	333, 334, 0, 336, 544, 0, 337, 338, 339, 0,
	0, 340, 341, 342, 343, 344, 345, 348, 545, 350,
	351, 352, 353, 354, 355, 356, 586, 358, 359, 360,
	361, 362, 363, 364, 548, 549, 365, 367, 368, 550,
	552, 553, 0, 383, 384, 385, 386, 387, 388, 389,
	391, 0, 393, 394, 395, 554, 396, 397, 398, 399,
	0, 400, 401, 402, 403, 404, 406, 409, 410, 411,
	412, 0, 415, 416, 417, 418, 419, 420, 421, 423,
	424, 425, 427, 428, 429, 587, 430, 431, 432, 433,
	557, 435, 436, 588, 438, 439, 441, 442, 443, 444,
	445, 446, 605, 0, 448, 558, 449, 450, 451, 452,
	453, 0, 455, 456, 457, 458, 459, 460, 463, 464,
	465, 467, 468, 560, 469, 470, 0, 472, 473, 0,
	475, 476, 477, 478, 479, 0, 606, 480, 562, 481,
	563, 482, 483, 484, 485, 486, 487, 488, 490, 0,
	0, 492, 493, 494, 496, 497, 498, 499, 502, 503,
	504, 505, 506, 0, 507, 509, 511, 589, 566, 567,
	568, 569, 570, 572, 573, 574, 575, 512, 513, 529,
	380, 374, 330, 372, 373, 377, 378, 381, 193, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 206, 0, 223, 0,
	0, 272, 1154, 524, 0, 0, 369, 0, 422, 426,
	0, 515, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 491, 0, 0, 0, 0, 211,
	607, 514, 585, 0, 0, 0, 376, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 413, 347,
	0, 564, 440, 218, 264, 251, 293, 335, 447, 0,
	0, 325, 495, 260, 349, 0, 239, 382, 0, 471,
	346, 0, 454, 474, 0, 366, 245, 405, 461, 462,
	0, 0, 0, 0, 0, 249, 250, 371, 231, 379,
	576, 542, 434, 392, 390, 0, 357, 414, 571, 0,
	0, 279, 0, 274, 370, 510, 237, 489, 408, 375,
	329, 437, 466, 276, 261, 262, 305, 407, 295, 247,
	500, 539, 543, 541, 537, 534, 538, 535, 536, 540,
	296, 533, 0, 508, 517, 551, 531, 559, 516, 556,
	526, 271, 555, 520, 519, 565, 546, 547, 501, 561,
	532, 530, 523, 522, 518, 0, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 207, 0, 208, 209,
	210, 212, 213, 214, 0, 215, 216, 217, 220, 221,
	222, 224, 584, 225, 226, 227, 228, 229, 230, 521,
	0, 232, 233, 234, 235, 236, 238, 240, 241, 242,
	243, 244, 246, 248, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 0, 258, 259,
	263, 265, 266, 267, 268, 269, 270, 273, 0, 275,
	277, 0, 278, 281, 0, 282, 283, 284, 285, 286,
	287, 288, 289, 525, 290, 0, 291, 292, 294, 0,
	297, 298, 299, 300, 301, 0, 302, 527, 528, 303,
	304, 306, 307, 308, 310, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 323, 324,
	326, 0, 327, 328, 331, 332, 333, 334, 0, 336,
	544, 0, 337, 338, 339, 0, 0, 340, 341, 342,
	343, 344, 345, 348, 545, 350, 351, 352, 353, 354,
	355, 356, 586, 358, 359, 360, 361, 362, 363, 364,
	548, 549, 365, 367, 368, 550, 552, 553, 0, 383,
	384, 385, 386, 387, 388, 389, 391, 0, 393, 394,
	395, 554, 396, 397, 398, 399, 0, 400, 401, 402,
	403, 404, 406, 409, 410, 411, 412, 0, 415, 416,
	417, 418, 419, 420, 421, 423, 424, 425, 427, 428,
	429, 587, 430, 431, 432, 433, 557, 435, 436, 588,
	438, 439, 441, 442, 443, 444, 445, 446, 605, 0,
	448, 558, 449, 450, 451, 452, 453, 0, 455, 456,
	457, 458, 459, 460, 463, 464, 465, 467, 468, 560,
	469, 470, 0, 472, 473, 0, 475, 476, 477, 478,
	479, 0, 606, 480, 562, 481, 563, 482, 483, 484,
	485, 486, 487, 488, 490, 0, 0, 492, 493, 494,
	496, 497, 498, 499, 502, 503, 504, 505, 506, 0,
	507, 509, 511, 589, 566, 567, 568, 569, 570, 572,
	573, 574, 575, 512, 513, 529, 380, 374, 330, 372,
	373, 377, 378, 381, 193, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 0, 223, 0, 0, 272, 972, 524,
	0, 0, 369, 0, 422, 426, 0, 515, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	491, 0, 0, 0, 0, 211, 607, 514, 585, 0,
	0, 0, 376, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 413, 347, 0, 564, 440, 218,
	264, 251, 293, 335, 447, 0, 0, 325, 495, 260,
	349, 0, 239, 382, 0, 471, 346, 0, 454, 474,
	0, 366, 245, 405, 461, 462, 0, 0, 0, 0,
	0, 249, 250, 371, 231, 379, 576, 542, 434, 392,
	390, 0, 357, 414, 571, 0, 0, 279, 0, 274,
	370, 510, 237, 489, 408, 375, 329, 437, 466, 276,
	261, 262, 305, 407, 295, 247, 500, 539, 543, 541,
	537, 534, 538, 535, 536, 540, 296, 533, 0, 508,
	517, 551, 531, 559, 516, 556, 526, 271, 555, 520,
	519, 565, 546, 547, 501, 561, 532, 530, 523, 522,
	518, 0, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 207, 0, 208, 209, 210, 212, 213, 214,
	0, 215, 216, 217, 220, 221, 222, 224, 584, 225,
	226, 227, 228, 229, 230, 521, 0, 232, 233, 234,
	235, 236, 238, 240, 241, 242, 243, 244, 246, 248,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 0, 258, 259, 263, 265, 266, 267,
	268, 269, 270, 273, 0, 275, 277, 0, 278, 281,
	0, 282, 283, 284, 285, 286, 287, 288, 289, 525,
	290, 0, 291, 292, 294, 0, 297, 298, 299, 300,
	301, 0, 302, 527, 528, 303, 304, 306, 307, 308,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 323, 324, 326, 0, 327, 328,
	331, 332, 333, 334, 0, 336, 544, 0, 337, 338,
	339, 0, 0, 340, 341, 342, 343, 344, 345, 348,
	545, 350, 351, 352, 353, 354, 355, 356, 586, 358,
	359, 360, 361, 362, 363, 364, 548, 549, 365, 367,
	368, 550, 552, 553, 0, 383, 384, 385, 386, 387,
	388, 389, 391, 0, 393, 394, 395, 554, 396, 397,
	398, 399, 0, 400, 401, 402, 403, 404, 406, 409,
	410, 411, 412, 0, 415, 416, 417, 418, 419, 420,
	421, 423, 424, 425, 427, 428, 429, 587, 430, 431,
	432, 433, 557, 435, 436, 588, 438, 439, 441, 442,
	443, 444, 445, 446, 605, 0, 448, 558, 449, 450,
	451, 452, 453, 0, 455, 456, 457, 458, 459, 460,
	463, 464, 465, 467, 468, 560, 469, 470, 0, 472,
	473, 0, 475, 476, 477, 478, 479, 0, 606, 480,
	562, 481, 563, 482, 483, 484, 485, 486, 487, 488,
	490, 0, 0, 492, 493, 494, 496, 497, 498, 499,
	502, 503, 504, 505, 506, 0, 507, 509, 511, 589,
	566, 567, 568, 569, 570, 572, 573, 574, 575, 512,
	513, 529, 380, 374, 330, 372, 373, 377, 378, 381,
	193, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	223, 0, 0, 272, 933, 524, 0, 0, 369, 0,
	422, 426, 0, 515, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 491, 0, 0, 0,
	0, 211, 607, 514, 585, 0, 0, 0, 376, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	413, 347, 0, 564, 440, 218, 264, 251, 293, 335,
	447, 0, 0, 325, 495, 260, 349, 0, 239, 382,
	0, 471, 346, 0, 454, 474, 0, 366, 245, 405,
	461, 462, 0, 0, 0, 0, 0, 249, 250, 371,
	231, 379, 576, 542, 434, 392, 390, 0, 357, 414,
	571, 0, 0, 279, 0, 274, 370, 510, 237, 489,
	408, 375, 329, 437, 466, 276, 261, 262, 305, 407,
	295, 247, 500, 539, 543, 541, 537, 534, 538, 535,
	536, 540, 296, 533, 0, 508, 517, 551, 531, 559,
	516, 556, 526, 271, 555, 520, 519, 565, 546, 547,
	501, 561, 532, 530, 523, 522, 518, 0, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 207, 0,
	208, 209, 210, 212, 213, 214, 0, 215, 216, 217,
	220, 221, 222, 224, 584, 225, 226, 227, 228, 229,
	230, 521, 0, 232, 233, 234, 235, 236, 238, 240,
	241, 242, 243, 244, 246, 248, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 0,
	258, 259, 263, 265, 266, 267, 268, 269, 270, 273,
	0, 275, 277, 0, 278, 281, 0, 282, 283, 284,
	285, 286, 287, 288, 289, 525, 290, 0, 291, 292,
	294, 0, 297, 298, 299, 300, 301, 0, 302, 527,
	528, 303, 304, 306, 307, 308, 310, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 0, 322,
	323, 324, 326, 0, 327, 328, 331, 332, 333, 334,
	0, 336, 544, 0, 337, 338, 339, 0, 0, 340,
	341, 342, 343, 344, 345, 348, 545, 350, 351, 352,
	353, 354, 355, 356, 586, 358, 359, 360, 361, 362,
	363, 364, 548, 549, 365, 367, 368, 550, 552, 553,
	0, 383, 384, 385, 386, 387, 388, 389, 391, 0,
	393, 394, 395, 554, 396, 397, 398, 399, 0, 400,
	401, 402, 403, 404, 406, 409, 410, 411, 412, 0,
	415, 416, 417, 418, 419, 420, 421, 423, 424, 425,
	427, 428, 429, 587, 430, 431, 432, 433, 557, 435,
	436, 588, 438, 439, 441, 442, 443, 444, 445, 446,
	605, 0, 448, 558, 449, 450, 451, 452, 453, 0,
	455, 456, 457, 458, 459, 460, 463, 464, 465, 467,
	468, 560, 469, 470, 0, 472, 473, 0, 475, 476,
	477, 478, 479, 0, 606, 480, 562, 481, 563, 482,
	483, 484, 485, 486, 487, 488, 490, 0, 0, 492,
	493, 494, 496, 497, 498, 499, 502, 503, 504, 505,
	506, 0, 507, 509, 511, 589, 566, 567, 568, 569,
	570, 572, 573, 574, 575, 512, 513, 529, 380, 374,
	330, 372, 373, 377, 378, 381, 193, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 223, 0, 0, 272,
	929, 524, 0, 0, 369, 0, 422, 426, 0, 515,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 491, 0, 0, 0, 0, 211, 607, 514,
	585, 0, 0, 0, 376, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 413, 347, 0, 564,
	440, 218, 264, 251, 293, 335, 447, 0, 0, 325,
	495, 260, 349, 0, 239, 382, 0, 471, 346, 0,
	454, 474, 0, 366, 245, 405, 461, 462, 0, 0,
	0, 0, 0, 249, 250, 371, 231, 379, 576, 542,
	434, 392, 390, 0, 357, 414, 571, 0, 0, 279,
	0, 274, 370, 510, 237, 489, 408, 375, 329, 437,
	466, 276, 261, 262, 305, 407, 295, 247, 500, 539,
	543, 541, 537, 534, 538, 535, 536, 540, 296, 533,
	0, 508, 517, 551, 531, 559, 516, 556, 526, 271,
	555, 520, 519, 565, 546, 547, 501, 561, 532, 530,
	523, 522, 518, 0, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 207, 0, 208, 209, 210, 212,
	213, 214, 0, 215, 216, 217, 220, 221, 222, 224,
	584, 225, 226, 227, 228, 229, 230, 521, 0, 232,
	233, 234, 235, 236, 238, 240, 241, 242, 243, 244,
	246, 248, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 0, 258, 259, 263, 265,
	266, 267, 268, 269, 270, 273, 0, 275, 277, 0,
	278, 281, 0, 282, 283, 284, 285, 286, 287, 288,
	289, 525, 290, 0, 291, 292, 294, 0, 297, 298,
	299, 300, 301, 0, 302, 527, 528, 303, 304, 306,
	307, 308, 310, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 0, 322, 323, 324, 326, 0,
	327, 328, 331, 332, 333, 334, 0, 336, 544, 0,
	337, 338, 339, 0, 0, 340, 341, 342, 343, 344,
	345, 348, 545, 350, 351, 352, 353, 354, 355, 356,
	586, 358, 359, 360, 361, 362, 363, 364, 548, 549,
	365, 367, 368, 550, 552, 553, 0, 383, 384, 385,
	386, 387, 388, 389, 391, 0, 393, 394, 395, 554,
	396, 397, 398, 399, 0, 400, 401, 402, 403, 404,
	406, 409, 410, 411, 412, 0, 415, 416, 417, 418,
	419, 420, 421, 423, 424, 425, 427, 428, 429, 587,
	430, 431, 432, 433, 557, 435, 436, 588, 438, 439,
	441, 442, 443, 444, 445, 446, 605, 0, 448, 558,
	449, 450, 451, 452, 453, 0, 455, 456, 457, 458,
	459, 460, 463, 464, 465, 467, 468, 560, 469, 470,
	0, 472, 473, 0, 475, 476, 477, 478, 479, 0,
	606, 480, 562, 481, 563, 482, 483, 484, 485, 486,
	487, 488, 490, 0, 0, 492, 493, 494, 496, 497,
	498, 499, 502, 503, 504, 505, 506, 0, 507, 509,
	511, 589, 566, 567, 568, 569, 570, 572, 573, 574,
	575, 512, 513, 529, 380, 374, 330, 372, 373, 377,
	378, 381, 193, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 922, 223, 0, 0, 272, 309, 524, 0, 0,
	369, 0, 422, 426, 0, 515, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 491, 0,
	0, 0, 0, 211, 607, 514, 585, 0, 0, 0,
	376, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 413, 347, 0, 564, 440, 218, 264, 251,
	293, 335, 0, 0, 0, 325, 495, 260, 349, 0,
	239, 382, 0, 471, 346, 0, 454, 474, 0, 366,
	245, 405, 461, 462, 0, 0, 0, 0, 0, 249,
	250, 371, 231, 379, 576, 542, 434, 392, 390, 0,
	357, 414, 571, 0, 0, 279, 0, 274, 370, 510,
	237, 489, 408, 375, 329, 437, 466, 276, 261, 262,
	305, 407, 295, 247, 500, 539, 543, 541, 537, 534,
	538, 535, 536, 540, 296, 533, 0, 508, 517, 551,
	531, 559, 516, 556, 526, 271, 555, 520, 519, 565,
	546, 547, 501, 561, 532, 530, 523, 522, 518, 0,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	207, 0, 208, 209, 210, 212, 213, 214, 0, 215,
	216, 217, 220, 221, 222, 224, 584, 225, 226, 227,
	228, 229, 230, 521, 0, 232, 233, 234, 235, 236,
	238, 240, 241, 242, 243, 244, 246, 248, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 0, 258, 259, 263, 265, 266, 267, 268, 269,
	270, 273, 0, 275, 277, 0, 278, 281, 0, 282,
	283, 284, 285, 286, 287, 288, 289, 525, 290, 0,
	291, 292, 294, 0, 297, 298, 299, 300, 301, 0,
	302, 527, 528, 303, 304, 306, 307, 308, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 323, 324, 326, 0, 327, 328, 331, 332,
	333, 334, 0, 336, 544, 0, 337, 338, 339, 0,
	0, 340, 341, 342, 343, 344, 345, 348, 545, 350,
	351, 352, 353, 354, 355, 356, 586, 358, 359, 360,
	361, 362, 363, 364, 548, 549, 365, 367, 368, 550,
	552, 553, 0, 383, 384, 385, 386, 387, 388, 389,
	391, 0, 393, 394, 395, 554, 396, 397, 398, 399,
	0, 400, 401, 402, 403, 404, 406, 409, 410, 411,
	412, 0, 415, 416, 417, 418, 419, 420, 421, 423,
	424, 425, 427, 428, 429, 587, 430, 431, 432, 433,
	557, 435, 436, 588, 438, 439, 441, 442, 443, 444,
	445, 446, 605, 0, 448, 558, 449, 450, 451, 452,
	453, 0, 455, 456, 457, 458, 459, 460, 463, 464,
	465, 467, 468, 560, 469, 470, 0, 472, 473, 0,
	475, 476, 477, 478, 479, 0, 606, 480, 562, 481,
	563, 482, 483, 484, 485, 486, 487, 488, 490, 0,
	0, 492, 493, 494, 496, 497, 498, 499, 502, 503,
	504, 505, 506, 0, 507, 509, 511, 589, 566, 567,
	568, 569, 570, 572, 573, 574, 575, 512, 513, 529,
	380, 374, 330, 372, 373, 377, 378, 381, 193, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 206, 0, 223, 0,
	0, 272, 309, 524, 0, 0, 369, 0, 422, 426,
	0, 515, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 491, 0, 0, 0, 0, 211,
	186, 514, 585, 0, 0, 0, 376, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 413, 347,
	0, 564, 440, 218, 264, 251, 293, 335, 447, 0,
	0, 325, 495, 260, 349, 0, 239, 382, 0, 471,
	346, 0, 454, 474, 0, 366, 245, 405, 461, 462,
	0, 0, 0, 0, 0, 249, 250, 371, 231, 379,
	576, 542, 434, 392, 390, 0, 357, 414, 571, 0,
	0, 279, 0, 274, 370, 510, 237, 489, 408, 375,
	329, 437, 466, 276, 261, 262, 305, 407, 295, 247,
	500, 539, 543, 541, 537, 534, 538, 535, 536, 540,
	296, 533, 0, 508, 517, 551, 531, 559, 516, 556,
	526, 271, 555, 520, 519, 565, 546, 547, 501, 561,
	532, 530, 523, 522, 518, 0, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 207, 0, 208, 209,
	210, 212, 213, 214, 0, 215, 216, 217, 220, 221,
	222, 224, 187, 225, 226, 227, 228, 229, 230, 521,
	0, 232, 233, 234, 235, 236, 238, 240, 241, 242,
	243, 244, 246, 248, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 0, 258, 259,
	263, 265, 266, 267, 268, 269, 270, 273, 0, 275,
	277, 0, 278, 281, 0, 282, 283, 284, 285, 286,
	287, 288, 289, 525, 290, 0, 291, 292, 294, 0,
	297, 298, 299, 300, 301, 0, 302, 527, 528, 303,
	304, 306, 307, 308, 310, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 323, 324,
	326, 0, 327, 328, 331, 332, 333, 334, 0, 336,
	544, 0, 337, 338, 339, 0, 0, 340, 341, 342,
	343, 344, 345, 348, 545, 350, 351, 352, 353, 354,
	355, 356, 189, 358, 359, 360, 361, 362, 363, 364,
	548, 549, 365, 367, 368, 550, 552, 553, 0, 383,
	384, 385, 386, 387, 388, 389, 391, 0, 393, 394,
	395, 554, 396, 397, 398, 399, 0, 400, 401, 402,
	403, 404, 406, 409, 410, 411, 412, 0, 415, 416,
	417, 418, 419, 420, 421, 423, 424, 425, 427, 428,
	429, 190, 430, 431, 432, 433, 557, 435, 436, 188,
	438, 439, 441, 442, 443, 444, 445, 446, 829, 0,
	448, 558, 449, 450, 451, 452, 453, 0, 455, 456,
	457, 458, 459, 460, 463, 464, 465, 467, 468, 560,
	469, 470, 0, 472, 473, 0, 475, 476, 477, 478,
	479, 0, 182, 480, 562, 481, 563, 482, 483, 484,
	485, 486, 487, 488, 490, 0, 0, 492, 493, 494,
	496, 497, 498, 499, 502, 503, 504, 505, 506, 0,
	507, 509, 511, 191, 566, 567, 568, 569, 570, 572,
	573, 574, 575, 512, 513, 529, 380, 374, 330, 372,
	373, 377, 378, 381, 193, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 0, 223, 0, 0, 272, 779, 524,
	0, 0, 369, 0, 422, 426, 0, 515, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	491, 0, 0, 0, 0, 211, 607, 514, 585, 0,
	0, 0, 376, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 413, 347, 0, 564, 440, 218,
	264, 251, 293, 335, 447, 0, 0, 325, 495, 260,
	349, 0, 239, 382, 0, 471, 346, 0, 454, 474,
	0, 366, 245, 405, 461, 462, 0, 0, 0, 0,
	0, 249, 250, 371, 231, 379, 576, 542, 434, 392,
	390, 0, 357, 414, 571, 0, 0, 279, 0, 274,
	370, 510, 237, 489, 408, 375, 329, 437, 466, 276,
	261, 262, 305, 407, 295, 247, 500, 539, 543, 541,
	537, 534, 538, 535, 536, 540, 296, 533, 0, 508,
	517, 551, 531, 559, 516, 556, 526, 271, 555, 520,
	519, 565, 546, 547, 501, 561, 532, 530, 523, 522,
	518, 0, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 207, 0, 208, 209, 210, 212, 213, 214,
	0, 215, 216, 217, 220, 221, 222, 224, 584, 225,
	226, 227, 228, 229, 230, 521, 0, 232, 233, 234,
	235, 236, 238, 240, 241, 242, 243, 244, 246, 248,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 0, 258, 259, 263, 265, 266, 267,
	268, 269, 270, 273, 0, 275, 277, 0, 278, 281,
	0, 282, 283, 284, 285, 286, 287, 288, 289, 525,
	290, 0, 291, 292, 294, 0, 297, 298, 299, 300,
	301, 0, 302, 527, 528, 303, 304, 306, 307, 308,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 323, 324, 326, 0, 327, 328,
	331, 332, 333, 334, 0, 336, 544, 0, 337, 338,
	339, 0, 0, 340, 341, 342, 343, 344, 345, 348,
	545, 350, 351, 352, 353, 354, 355, 356, 586, 358,
	359, 360, 361, 362, 363, 364, 548, 549, 365, 367,
	368, 550, 552, 553, 0, 383, 384, 385, 386, 387,
	388, 389, 391, 0, 393, 394, 395, 554, 396, 397,
	398, 399, 0, 400, 401, 402, 403, 404, 406, 409,
	410, 411, 412, 0, 415, 416, 417, 418, 419, 420,
	421, 423, 424, 425, 427, 428, 429, 587, 430, 431,
	432, 433, 557, 435, 436, 588, 438, 439, 441, 442,
	443, 444, 445, 446, 605, 0, 448, 558, 449, 450,
	451, 452, 453, 0, 455, 456, 457, 458, 459, 460,
	463, 464, 465, 467, 468, 560, 469, 470, 0, 472,
	473, 0, 475, 476, 477, 478, 479, 0, 606, 480,
	562, 481, 563, 482, 483, 484, 485, 486, 487, 488,
	490, 0, 0, 492, 493, 494, 496, 497, 498, 499,
	502, 503, 504, 505, 506, 0, 507, 509, 511, 589,
	566, 567, 568, 569, 570, 572, 573, 574, 575, 512,
	513, 529, 380, 374, 330, 372, 373, 377, 378, 381,
	193, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	223, 0, 0, 272, 775, 524, 0, 0, 369, 0,
	422, 426, 0, 515, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 491, 0, 0, 0,
	0, 211, 607, 514, 585, 0, 0, 0, 376, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	413, 347, 0, 564, 440, 218, 264, 251, 293, 335,
	447, 0, 0, 325, 495, 260, 349, 0, 239, 382,
	0, 471, 346, 0, 454, 474, 0, 366, 245, 405,
	461, 462, 0, 0, 0, 0, 0, 249, 250, 371,
	231, 379, 576, 542, 434, 392, 390, 0, 357, 414,
	571, 0, 0, 279, 0, 274, 370, 510, 237, 489,
	408, 375, 329, 437, 466, 276, 261, 262, 305, 407,
	295, 247, 500, 539, 543, 541, 537, 534, 538, 535,
	536, 540, 296, 533, 0, 508, 517, 551, 531, 559,
	516, 556, 526, 271, 555, 520, 519, 565, 546, 547,
	501, 561, 532, 530, 523, 522, 518, 0, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 207, 0,
	208, 209, 210, 212, 213, 214, 0, 215, 216, 217,
	220, 221, 222, 224, 584, 225, 226, 227, 228, 229,
	230, 521, 0, 232, 233, 234, 235, 236, 238, 240,
	241, 242, 243, 244, 246, 248, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 0,
	258, 259, 263, 265, 266, 267, 268, 269, 270, 273,
	0, 275, 277, 0, 278, 281, 0, 282, 283, 284,
	285, 286, 287, 288, 289, 525, 290, 0, 291, 292,
	294, 0, 297, 298, 299, 300, 301, 0, 302, 527,
	528, 303, 304, 306, 307, 308, 310, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 0, 322,
	323, 324, 326, 0, 327, 328, 331, 332, 333, 334,
	0, 336, 544, 0, 337, 338, 339, 0, 0, 340,
	341, 342, 343, 344, 345, 348, 545, 350, 351, 352,
	353, 354, 355, 356, 586, 358, 359, 360, 361, 362,
	363, 364, 548, 549, 365, 367, 368, 550, 552, 553,
	0, 383, 384, 385, 386, 387, 388, 389, 391, 0,
	393, 394, 395, 554, 396, 397, 398, 399, 0, 400,
	401, 402, 403, 404, 406, 409, 410, 411, 412, 0,
	415, 416, 417, 418, 419, 420, 421, 423, 424, 425,
	427, 428, 429, 587, 430, 431, 432, 433, 557, 435,
	436, 588, 438, 439, 441, 442, 443, 444, 445, 446,
	605, 0, 448, 558, 449, 450, 451, 452, 453, 0,
	455, 456, 457, 458, 459, 460, 463, 464, 465, 467,
	468, 560, 469, 470, 0, 472, 473, 0, 475, 476,
	477, 478, 479, 0, 606, 480, 562, 481, 563, 482,
	483, 484, 485, 486, 487, 488, 490, 0, 0, 492,
	493, 494, 496, 497, 498, 499, 502, 503, 504, 505,
	506, 0, 507, 509, 511, 589, 566, 567, 568, 569,
	570, 572, 573, 574, 575, 512, 513, 529, 380, 374,
	330, 372, 373, 377, 378, 381, 193, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 223, 0, 0, 272,
	772, 524, 0, 0, 369, 0, 422, 426, 0, 515,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 491, 0, 0, 0, 0, 211, 607, 514,
	585, 0, 0, 0, 376, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 413, 347, 0, 564,
	440, 218, 264, 251, 293, 335, 447, 0, 0, 325,
	495, 260, 349, 0, 239, 382, 0, 471, 346, 0,
	454, 474, 0, 366, 245, 405, 461, 462, 0, 0,
	0, 0, 0, 249, 250, 371, 231, 379, 576, 542,
	434, 392, 390, 0, 357, 414, 571, 0, 0, 279,
	0, 274, 370, 510, 237, 489, 408, 375, 329, 437,
	466, 276, 261, 262, 305, 407, 295, 247, 500, 539,
	543, 541, 537, 534, 538, 535, 536, 540, 296, 533,
	0, 508, 517, 551, 531, 559, 516, 556, 526, 271,
	555, 520, 519, 565, 546, 547, 501, 561, 532, 530,
	523, 522, 518, 0, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 207, 0, 208, 209, 210, 212,
	213, 214, 0, 215, 216, 217, 220, 221, 222, 224,
	584, 225, 226, 227, 228, 229, 230, 521, 0, 232,
	233, 234, 235, 236, 238, 240, 241, 242, 243, 244,
	246, 248, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 0, 258, 259, 263, 265,
	266, 267, 268, 269, 270, 273, 0, 275, 277, 0,
	278, 281, 0, 282, 283, 284, 285, 286, 287, 288,
	289, 525, 290, 0, 291, 292, 294, 0, 297, 298,
	299, 300, 301, 0, 302, 527, 528, 303, 304, 306,
	307, 308, 310, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 0, 322, 323, 324, 326, 0,
	327, 328, 331, 332, 333, 334, 0, 336, 544, 0,
	337, 338, 339, 0, 0, 340, 341, 342, 343, 344,
	345, 348, 545, 350, 351, 352, 353, 354, 355, 356,
	586, 358, 359, 360, 361, 362, 363, 364, 548, 549,
	365, 367, 368, 550, 552, 553, 0, 383, 384, 385,
	386, 387, 388, 389, 391, 0, 393, 394, 395, 554,
	396, 397, 398, 399, 0, 400, 401, 402, 403, 404,
	406, 409, 410, 411, 412, 0, 415, 416, 417, 418,
	419, 420, 421, 423, 424, 425, 427, 428, 429, 587,
	430, 431, 432, 433, 557, 435, 436, 588, 438, 439,
	441, 442, 443, 444, 445, 446, 605, 0, 448, 558,
	449, 450, 451, 452, 453, 0, 455, 456, 457, 458,
	459, 460, 463, 464, 465, 467, 468, 560, 469, 470,
	0, 472, 473, 0, 475, 476, 477, 478, 479, 0,
	606, 480, 562, 481, 563, 482, 483, 484, 485, 486,
	487, 488, 490, 0, 0, 492, 493, 494, 496, 497,
	498, 499, 502, 503, 504, 505, 506, 0, 507, 509,
	511, 589, 566, 567, 568, 569, 570, 572, 573, 574,
	575, 512, 513, 529, 380, 374, 330, 372, 373, 377,
	378, 381, 193, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 223, 0, 0, 272, 768, 524, 0, 0,
	369, 0, 422, 426, 0, 515, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 491, 0,
	0, 0, 0, 211, 607, 514, 585, 0, 0, 0,
	376, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 413, 347, 0, 564, 440, 218, 264, 251,
	293, 335, 447, 0, 0, 325, 495, 260, 349, 0,
	239, 382, 0, 471, 346, 0, 454, 474, 0, 366,
	245, 405, 461, 462, 0, 0, 0, 0, 0, 249,
	250, 371, 231, 379, 576, 542, 434, 392, 390, 0,
	357, 414, 571, 0, 0, 279, 0, 274, 370, 510,
	237, 489, 408, 375, 329, 437, 466, 276, 261, 262,
	305, 407, 295, 247, 500, 539, 543, 541, 537, 534,
	538, 535, 536, 540, 296, 533, 0, 508, 517, 551,
	531, 559, 516, 556, 526, 271, 555, 520, 519, 565,
	546, 547, 501, 561, 532, 530, 523, 522, 518, 0,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	207, 0, 208, 209, 210, 212, 213, 214, 0, 215,
	216, 217, 220, 221, 222, 224, 584, 225, 226, 227,
	228, 229, 230, 521, 0, 232, 233, 234, 235, 236,
	238, 240, 241, 242, 243, 244, 246, 248, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 0, 258, 259, 263, 265, 266, 267, 268, 269,
	270, 273, 0, 275, 277, 0, 278, 281, 0, 282,
	283, 284, 285, 286, 287, 288, 289, 525, 290, 0,
	291, 292, 294, 0, 297, 298, 299, 300, 301, 0,
	302, 527, 528, 303, 304, 306, 307, 308, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 323, 324, 326, 0, 327, 328, 331, 332,
	333, 334, 0, 336, 544, 0, 337, 338, 339, 0,
	0, 340, 341, 342, 343, 344, 345, 348, 545, 350,
	351, 352, 353, 354, 355, 356, 586, 358, 359, 360,
	361, 362, 363, 364, 548, 549, 365, 367, 368, 550,
	552, 553, 0, 383, 384, 385, 386, 387, 388, 389,
	391, 0, 393, 394, 395, 554, 396, 397, 398, 399,
	0, 400, 401, 402, 403, 404, 406, 409, 410, 411,
	412, 0, 415, 416, 417, 418, 419, 420, 421, 423,
	424, 425, 427, 428, 429, 587, 430, 431, 432, 433,
	557, 435, 436, 588, 438, 439, 441, 442, 443, 444,
	445, 446, 605, 0, 448, 558, 449, 450, 451, 452,
	453, 0, 455, 456, 457, 458, 459, 460, 463, 464,
	465, 467, 468, 560, 469, 470, 0, 472, 473, 0,
	475, 476, 477, 478, 479, 0, 606, 480, 562, 481,
	563, 482, 483, 484, 485, 486, 487, 488, 490, 0,
	0, 492, 493, 494, 496, 497, 498, 499, 502, 503,
	504, 505, 506, 0, 507, 509, 511, 589, 566, 567,
	568, 569, 570, 572, 573, 574, 575, 512, 513, 529,
	380, 374, 330, 372, 373, 377, 378, 381, 193, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 206, 0, 223, 0,
	0, 272, 753, 524, 0, 0, 369, 0, 422, 426,
	0, 515, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 491, 0, 0, 0, 0, 211,
	607, 514, 585, 0, 0, 0, 376, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 413, 347,
	0, 564, 440, 218, 264, 251, 293, 335, 447, 0,
	0, 325, 495, 260, 349, 0, 239, 382, 0, 471,
	346, 0, 454, 474, 0, 366, 245, 405, 461, 462,
	0, 0, 0, 0, 0, 249, 250, 371, 231, 379,
	576, 542, 434, 392, 390, 0, 357, 414, 571, 0,
	0, 279, 0, 274, 370, 510, 237, 489, 408, 375,
	329, 437, 466, 276, 261, 262, 305, 407, 295, 247,
	500, 539, 543, 541, 537, 534, 538, 535, 536, 540,
	296, 533, 0, 508, 517, 551, 531, 559, 516, 556,
	526, 271, 555, 520, 519, 565, 546, 547, 501, 561,
	532, 530, 523, 522, 518, 0, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 207, 0, 208, 209,
	210, 212, 213, 214, 0, 215, 216, 217, 220, 221,
	222, 224, 584, 225, 226, 227, 228, 229, 230, 521,
	0, 232, 233, 234, 235, 236, 238, 240, 241, 242,
	243, 244, 246, 248, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 0, 258, 259,
	263, 265, 266, 267, 268, 269, 270, 273, 0, 275,
	277, 0, 278, 281, 0, 282, 283, 284, 285, 286,
	287, 288, 289, 525, 290, 0, 291, 292, 294, 0,
	297, 298, 299, 300, 301, 0, 302, 527, 528, 303,
	304, 306, 307, 308, 310, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 323, 324,
	326, 0, 327, 328, 331, 332, 333, 334, 0, 336,
	544, 0, 337, 338, 339, 0, 0, 340, 341, 342,
	343, 344, 345, 348, 545, 350, 351, 352, 353, 354,
	355, 356, 586, 358, 359, 360, 361, 362, 363, 364,
	548, 549, 365, 367, 368, 550, 552, 553, 0, 383,
	384, 385, 386, 387, 388, 389, 391, 0, 393, 394,
	395, 554, 396, 397, 398, 399, 0, 400, 401, 402,
	403, 404, 406, 409, 410, 411, 412, 0, 415, 416,
	417, 418, 419, 420, 421, 423, 424, 425, 427, 428,
	429, 587, 430, 431, 432, 433, 557, 435, 436, 588,
	438, 439, 441, 442, 443, 444, 445, 446, 605, 0,
	448, 558, 449, 450, 451, 452, 453, 0, 455, 456,
	457, 458, 459, 460, 463, 464, 465, 467, 468, 560,
	469, 470, 0, 472, 473, 0, 475, 476, 477, 478,
	479, 0, 606, 480, 562, 481, 563, 482, 483, 484,
	485, 486, 487, 488, 490, 0, 0, 492, 493, 494,
	496, 497, 498, 499, 502, 503, 504, 505, 506, 0,
	507, 509, 511, 589, 566, 567, 568, 569, 570, 572,
	573, 574, 575, 512, 513, 529, 380, 374, 330, 372,
	373, 377, 378, 381, 193, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 0, 223, 0, 0, 272, 699, 524,
	0, 0, 369, 0, 422, 426, 0, 515, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	491, 0, 0, 0, 0, 211, 607, 514, 585, 0,
	0, 0, 376, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 413, 347, 0, 564, 440, 218,
	264, 251, 293, 335, 447, 0, 0, 325, 495, 260,
	349, 0, 239, 382, 0, 471, 346, 0, 454, 474,
	0, 366, 245, 405, 461, 462, 0, 0, 0, 0,
	0, 249, 250, 371, 231, 379, 576, 542, 434, 392,
	390, 0, 357, 414, 571, 0, 0, 279, 0, 274,
	370, 510, 237, 489, 408, 375, 329, 437, 466, 276,
	261, 262, 305, 407, 295, 247, 500, 539, 543, 541,
	537, 534, 538, 535, 536, 540, 296, 533, 0, 508,
	517, 551, 531, 559, 516, 556, 526, 271, 555, 520,
	519, 565, 546, 547, 501, 561, 532, 530, 523, 522,
	518, 0, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 207, 0, 208, 209, 210, 212, 213, 214,
	0, 215, 216, 217, 220, 221, 222, 224, 584, 225,
	226, 227, 228, 229, 230, 521, 0, 232, 233, 234,
	235, 236, 238, 240, 241, 242, 243, 244, 246, 248,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 0, 258, 259, 263, 265, 266, 267,
	268, 269, 270, 273, 0, 275, 277, 0, 278, 281,
	0, 282, 283, 284, 285, 286, 287, 288, 289, 525,
	290, 0, 291, 292, 294, 0, 297, 298, 299, 300,
	301, 0, 302, 527, 528, 303, 304, 306, 307, 308,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 323, 324, 326, 0, 327, 328,
	331, 332, 333, 334, 0, 336, 544, 0, 337, 338,
	339, 0, 0, 340, 341, 342, 343, 344, 345, 348,
	545, 350, 351, 352, 353, 354, 355, 356, 586, 358,
	359, 360, 361, 362, 363, 364, 548, 549, 365, 367,
	368, 550, 552, 553, 0, 383, 384, 385, 386, 387,
	388, 389, 391, 0, 393, 394, 395, 554, 396, 397,
	398, 399, 0, 400, 401, 402, 403, 404, 406, 409,
	410, 411, 412, 0, 415, 416, 417, 418, 419, 420,
	421, 423, 424, 425, 427, 428, 429, 587, 430, 431,
	432, 433, 557, 435, 436, 588, 438, 439, 441, 442,
	443, 444, 445, 446, 605, 0, 448, 558, 449, 450,
	451, 452, 453, 0, 455, 456, 457, 458, 459, 460,
	463, 464, 465, 467, 468, 560, 469, 470, 0, 472,
	473, 0, 475, 476, 477, 478, 479, 0, 606, 480,
	562, 481, 563, 482, 483, 484, 485, 486, 487, 488,
	490, 0, 0, 492, 493, 494, 496, 497, 498, 499,
	502, 503, 504, 505, 506, 0, 507, 509, 511, 589,
	566, 567, 568, 569, 570, 572, 573, 574, 575, 512,
	513, 529, 380, 374, 330, 372, 373, 377, 378, 381,
	193, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	223, 0, 0, 272, 697, 524, 0, 0, 369, 0,
	422, 426, 0, 515, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 491, 0, 0, 0,
	0, 211, 607, 514, 585, 0, 0, 0, 376, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	413, 347, 0, 564, 440, 218, 264, 251, 293, 335,
	447, 0, 0, 325, 495, 260, 349, 0, 239, 382,
	0, 471, 346, 0, 454, 474, 0, 366, 245, 405,
	461, 462, 0, 0, 0, 0, 0, 249, 250, 371,
	231, 379, 576, 542, 434, 392, 390, 0, 357, 414,
	571, 0, 0, 279, 0, 274, 370, 510, 237, 489,
	408, 375, 329, 437, 466, 276, 261, 262, 305, 407,
	295, 247, 500, 539, 543, 541, 537, 534, 538, 535,
	536, 540, 296, 533, 0, 508, 517, 551, 531, 559,
	516, 556, 526, 271, 555, 520, 519, 565, 546, 547,
	501, 561, 532, 530, 523, 522, 518, 0, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 207, 0,
	208, 209, 210, 212, 213, 214, 0, 215, 216, 217,
	220, 221, 222, 224, 584, 225, 226, 227, 228, 229,
	230, 521, 0, 232, 233, 234, 235, 236, 238, 240,
	241, 242, 243, 244, 246, 248, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 0,
	258, 259, 263, 265, 266, 267, 268, 269, 270, 273,
	0, 275, 277, 0, 278, 281, 0, 282, 283, 284,
	285, 286, 287, 288, 289, 525, 290, 0, 291, 292,
	294, 0, 297, 298, 299, 300, 301, 0, 302, 527,
	528, 303, 304, 306, 307, 308, 310, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 0, 322,
	323, 324, 326, 0, 327, 328, 331, 332, 333, 334,
	0, 336, 544, 0, 337, 338, 339, 0, 0, 340,
	341, 342, 343, 344, 345, 348, 545, 350, 351, 352,
	353, 354, 355, 356, 586, 358, 359, 360, 361, 362,
	363, 364, 548, 549, 365, 367, 368, 550, 552, 553,
	0, 383, 384, 385, 386, 387, 388, 389, 391, 0,
	393, 394, 395, 554, 396, 397, 398, 399, 0, 400,
	401, 402, 403, 404, 406, 409, 410, 411, 412, 0,
	415, 416, 417, 418, 419, 420, 421, 423, 424, 425,
	427, 428, 429, 587, 430, 431, 432, 433, 557, 435,
	436, 588, 438, 439, 441, 442, 443, 444, 445, 446,
	605, 0, 448, 558, 449, 450, 451, 452, 453, 0,
	455, 456, 457, 458, 459, 460, 463, 464, 465, 467,
	468, 560, 469, 470, 0, 472, 473, 0, 475, 476,
	477, 478, 479, 0, 606, 480, 562, 481, 563, 482,
	483, 484, 485, 486, 487, 488, 490, 0, 0, 492,
	493, 494, 496, 497, 498, 499, 502, 503, 504, 505,
	506, 0, 507, 509, 511, 589, 566, 567, 568, 569,
	570, 572, 573, 574, 575, 512, 513, 529, 380, 374,
	330, 372, 373, 377, 378, 381, 193, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 223, 0, 0, 272,
	680, 524, 0, 0, 369, 0, 422, 426, 0, 515,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 491, 0, 0, 0, 0, 211, 607, 514,
	585, 0, 0, 0, 376, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 413, 347, 0, 564,
	440, 218, 264, 251, 293, 335, 447, 0, 0, 325,
	495, 260, 349, 0, 239, 382, 0, 471, 346, 0,
	454, 474, 0, 366, 245, 405, 461, 462, 0, 0,
	0, 0, 0, 249, 250, 371, 231, 379, 576, 542,
	434, 392, 390, 0, 357, 414, 571, 0, 0, 279,
	0, 274, 370, 510, 237, 489, 408, 375, 329, 437,
	466, 276, 261, 262, 305, 407, 295, 247, 500, 539,
	543, 541, 537, 534, 538, 535, 536, 540, 296, 533,
	0, 508, 517, 551, 531, 559, 516, 556, 526, 271,
	555, 520, 519, 565, 546, 547, 501, 561, 532, 530,
	523, 522, 518, 0, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 207, 0, 208, 209, 210, 212,
	213, 214, 0, 215, 216, 217, 220, 221, 222, 224,
	584, 225, 226, 227, 228, 229, 230, 521, 0, 232,
	233, 234, 235, 236, 238, 240, 241, 242, 243, 244,
	246, 248, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 0, 258, 259, 263, 265,
	266, 267, 268, 269, 270, 273, 0, 275, 277, 0,
	278, 281, 0, 282, 283, 284, 285, 286, 287, 288,
	289, 525, 290, 0, 291, 292, 294, 0, 297, 298,
	299, 300, 301, 0, 302, 527, 528, 303, 304, 306,
	307, 308, 310, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 0, 322, 323, 324, 326, 0,
	327, 328, 331, 332, 333, 334, 0, 336, 544, 0,
	337, 338, 339, 0, 0, 340, 341, 342, 343, 344,
	345, 348, 545, 350, 351, 352, 353, 354, 355, 356,
	586, 358, 359, 360, 361, 362, 363, 364, 548, 549,
	365, 367, 368, 550, 552, 553, 0, 383, 384, 385,
	386, 387, 388, 389, 391, 0, 393, 394, 395, 554,
	396, 397, 398, 399, 0, 400, 401, 402, 403, 404,
	406, 409, 410, 411, 412, 0, 415, 416, 417, 418,
	419, 420, 421, 423, 424, 425, 427, 428, 429, 587,
	430, 431, 432, 433, 557, 435, 436, 588, 438, 439,
	441, 442, 443, 444, 445, 446, 605, 0, 448, 558,
	449, 450, 451, 452, 453, 0, 455, 456, 457, 458,
	459, 460, 463, 464, 465, 467, 468, 560, 469, 470,
	0, 472, 473, 0, 475, 476, 477, 478, 479, 0,
	606, 480, 562, 481, 563, 482, 483, 484, 485, 486,
	487, 488, 490, 0, 0, 492, 493, 494, 496, 497,
	498, 499, 502, 503, 504, 505, 506, 0, 507, 509,
	511, 589, 566, 567, 568, 569, 570, 572, 573, 574,
	575, 512, 513, 529, 380, 374, 330, 372, 373, 377,
	378, 381, 193, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 223, 0, 0, 272, 672, 524, 0, 0,
	369, 0, 422, 426, 0, 515, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 491, 0,
	0, 0, 0, 211, 607, 514, 585, 0, 0, 0,
	376, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 413, 347, 0, 564, 440, 218, 264, 251,
	293, 335, 447, 0, 0, 325, 495, 260, 349, 0,
	239, 382, 0, 471, 346, 0, 454, 474, 0, 366,
	245, 405, 461, 462, 0, 0, 0, 0, 0, 249,
	250, 371, 231, 379, 576, 542, 434, 392, 390, 0,
	357, 414, 571, 0, 0, 279, 0, 274, 370, 510,
	237, 489, 408, 375, 329, 437, 466, 276, 261, 262,
	305, 407, 295, 247, 500, 539, 543, 541, 537, 534,
	538, 535, 536, 540, 296, 533, 0, 508, 517, 551,
	531, 559, 516, 556, 526, 271, 555, 520, 519, 565,
	546, 547, 501, 561, 532, 530, 523, 522, 518, 0,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	207, 0, 208, 209, 210, 212, 213, 214, 0, 215,
	216, 217, 220, 221, 222, 224, 584, 225, 226, 227,
	228, 229, 230, 521, 0, 232, 233, 234, 235, 236,
	238, 240, 241, 242, 243, 244, 246, 248, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 0, 258, 259, 263, 265, 266, 267, 268, 269,
	270, 273, 0, 275, 277, 0, 278, 281, 0, 282,
	283, 284, 285, 286, 287, 288, 289, 525, 290, 0,
	291, 292, 294, 0, 297, 298, 299, 300, 301, 0,
	302, 527, 528, 303, 304, 306, 307, 308, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 323, 324, 326, 0, 327, 328, 331, 332,
	333, 334, 0, 336, 544, 0, 337, 338, 339, 0,
	0, 340, 341, 342, 343, 344, 345, 348, 545, 350,
	351, 352, 353, 354, 355, 356, 586, 358, 359, 360,
	361, 362, 363, 364, 548, 549, 365, 367, 368, 550,
	552, 553, 0, 383, 384, 385, 386, 387, 388, 389,
	391, 0, 393, 394, 395, 554, 396, 397, 398, 399,
	0, 400, 401, 402, 403, 404, 406, 409, 410, 411,
	412, 0, 415, 416, 417, 418, 419, 420, 421, 423,
	424, 425, 427, 428, 429, 587, 430, 431, 432, 433,
	557, 435, 436, 588, 438, 439, 441, 442, 443, 444,
	445, 446, 605, 0, 448, 558, 449, 450, 451, 452,
	453, 0, 455, 456, 457, 458, 459, 460, 463, 464,
	465, 467, 468, 560, 469, 470, 0, 472, 473, 0,
	475, 476, 477, 478, 479, 0, 606, 480, 562, 481,
	563, 482, 483, 484, 485, 486, 487, 488, 490, 0,
	0, 492, 493, 494, 496, 497, 498, 499, 502, 503,
	504, 505, 506, 0, 507, 509, 511, 589, 566, 567,
	568, 569, 570, 572, 573, 574, 575, 512, 513, 529,
	380, 374, 330, 372, 373, 377, 378, 381, 193, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 206, 0, 223, 0,
	0, 272, 668, 524, 0, 0, 369, 0, 422, 426,
	0, 515, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 491, 0, 0, 0, 0, 211,
	607, 514, 585, 0, 0, 0, 376, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 413, 347,
	0, 564, 440, 218, 264, 251, 293, 335, 447, 0,
	0, 325, 495, 260, 349, 0, 239, 382, 0, 471,
	346, 0, 454, 474, 0, 366, 245, 405, 461, 462,
	0, 0, 0, 0, 0, 249, 250, 371, 231, 379,
	576, 542, 434, 392, 390, 0, 357, 414, 571, 0,
	0, 279, 0, 274, 370, 510, 237, 489, 408, 375,
	329, 437, 466, 276, 261, 262, 305, 407, 295, 247,
	500, 539, 543, 541, 537, 534, 538, 535, 536, 540,
	296, 533, 0, 508, 517, 551, 531, 559, 516, 556,
	526, 271, 555, 520, 519, 565, 546, 547, 501, 561,
	532, 530, 523, 522, 518, 0, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 207, 0, 208, 209,
	210, 212, 213, 214, 0, 215, 216, 217, 220, 221,
	222, 224, 584, 225, 226, 227, 228, 229, 230, 521,
	0, 232, 233, 234, 235, 236, 238, 240, 241, 242,
	243, 244, 246, 248, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 0, 258, 259,
	263, 265, 266, 267, 268, 269, 270, 273, 0, 275,
	277, 0, 278, 281, 0, 282, 283, 284, 285, 286,
	287, 288, 289, 525, 290, 0, 291, 292, 294, 0,
	297, 298, 299, 300, 301, 0, 302, 527, 528, 303,
	304, 306, 307, 308, 310, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 323, 324,
	326, 0, 327, 328, 331, 332, 333, 334, 0, 336,
	544, 0, 337, 338, 339, 0, 0, 340, 341, 342,
	343, 344, 345, 348, 545, 350, 351, 352, 353, 354,
	355, 356, 586, 358, 359, 360, 361, 362, 363, 364,
	548, 549, 365, 367, 368, 550, 552, 553, 0, 383,
	384, 385, 386, 387, 388, 389, 391, 0, 393, 394,
	395, 554, 396, 397, 398, 399, 0, 400, 401, 402,
	403, 404, 406, 409, 410, 411, 412, 0, 415, 416,
	417, 418, 419, 420, 421, 423, 424, 425, 427, 428,
	429, 587, 430, 431, 432, 433, 557, 435, 436, 588,
	438, 439, 441, 442, 443, 444, 445, 446, 605, 0,
	448, 558, 449, 450, 451, 452, 453, 0, 455, 456,
	457, 458, 459, 460, 463, 464, 465, 467, 468, 560,
	469, 470, 0, 472, 473, 0, 475, 476, 477, 478,
	479, 0, 606, 480, 562, 481, 563, 482, 483, 484,
	485, 486, 487, 488, 490, 0, 0, 492, 493, 494,
	496, 497, 498, 499, 502, 503, 504, 505, 506, 0,
	507, 509, 511, 589, 566, 567, 568, 569, 570, 572,
	573, 574, 575, 512, 513, 529, 380, 374, 330, 372,
	373, 377, 378, 381, 193, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 0, 223, 0, 0, 272, 666, 524,
	0, 0, 369, 0, 422, 426, 0, 515, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	491, 0, 0, 0, 0, 211, 607, 514, 585, 0,
	0, 0, 376, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 413, 347, 0, 564, 440, 218,
	264, 251, 293, 335, 447, 0, 0, 325, 495, 260,
	349, 0, 239, 382, 0, 471, 346, 0, 454, 474,
	0, 366, 245, 405, 461, 462, 0, 0, 0, 0,
	0, 249, 250, 371, 231, 379, 576, 542, 434, 392,
	390, 0, 357, 414, 571, 0, 0, 279, 0, 274,
	370, 510, 237, 489, 408, 375, 329, 437, 466, 276,
	261, 262, 305, 407, 295, 247, 500, 539, 543, 541,
	537, 534, 538, 535, 536, 540, 296, 533, 0, 508,
	517, 551, 531, 559, 516, 556, 526, 271, 555, 520,
	519, 565, 546, 547, 501, 561, 532, 530, 523, 522,
	518, 0, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 207, 0, 208, 209, 210, 212, 213, 214,
	0, 215, 216, 217, 220, 221, 222, 224, 584, 225,
	226, 227, 228, 229, 230, 521, 0, 232, 233, 234,
	235, 236, 238, 240, 241, 242, 243, 244, 246, 248,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 0, 258, 259, 263, 265, 266, 267,
	268, 269, 270, 273, 0, 275, 277, 0, 278, 281,
	0, 282, 283, 284, 285, 286, 287, 288, 289, 525,
	290, 0, 291, 292, 294, 0, 297, 298, 299, 300,
	301, 0, 302, 527, 528, 303, 304, 306, 307, 308,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 323, 324, 326, 0, 327, 328,
	331, 332, 333, 334, 0, 336, 544, 0, 337, 338,
	339, 0, 0, 340, 341, 342, 343, 344, 345, 348,
	545, 350, 351, 352, 353, 354, 355, 356, 586, 358,
	359, 360, 361, 362, 363, 364, 548, 549, 365, 367,
	368, 550, 552, 553, 0, 383, 384, 385, 386, 387,
	388, 389, 391, 0, 393, 394, 395, 554, 396, 397,
	398, 399, 0, 400, 401, 402, 403, 404, 406, 409,
	410, 411, 412, 0, 415, 416, 417, 418, 419, 420,
	421, 423, 424, 425, 427, 428, 429, 587, 430, 431,
	432, 433, 557, 435, 436, 588, 438, 439, 441, 442,
	443, 444, 445, 446, 605, 0, 448, 558, 449, 450,
	451, 452, 453, 0, 455, 456, 457, 458, 459, 460,
	463, 464, 465, 467, 468, 560, 469, 470, 0, 472,
	473, 0, 475, 476, 477, 478, 479, 0, 606, 480,
	562, 481, 563, 482, 483, 484, 485, 486, 487, 488,
	490, 0, 0, 492, 493, 494, 496, 497, 498, 499,
	502, 503, 504, 505, 506, 0, 507, 509, 511, 589,
	566, 567, 568, 569, 570, 572, 573, 574, 575, 512,
	513, 529, 380, 374, 330, 372, 373, 377, 378, 381,
	193, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	223, 0, 0, 272, 641, 524, 0, 0, 369, 0,
	422, 426, 0, 515, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 491, 0, 0, 0,
	0, 211, 607, 514, 585, 0, 0, 0, 376, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	413, 347, 0, 564, 440, 218, 264, 251, 293, 335,
	447, 0, 0, 325, 495, 260, 349, 0, 239, 382,
	0, 471, 346, 0, 454, 474, 0, 366, 245, 405,
	461, 462, 0, 0, 0, 0, 0, 249, 250, 371,
	231, 379, 576, 542, 434, 392, 390, 0, 357, 414,
	571, 0, 0, 279, 0, 274, 370, 510, 237, 489,
	408, 375, 329, 437, 466, 276, 261, 262, 305, 407,
	295, 247, 500, 539, 543, 541, 537, 534, 538, 535,
	536, 540, 296, 533, 0, 508, 517, 551, 531, 559,
	516, 556, 526, 271, 555, 520, 519, 565, 546, 547,
	501, 561, 532, 530, 523, 522, 518, 0, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 207, 0,
	208, 209, 210, 212, 213, 214, 0, 215, 216, 217,
	220, 221, 222, 224, 584, 225, 226, 227, 228, 229,
	230, 521, 0, 232, 233, 234, 235, 236, 238, 240,
	241, 242, 243, 244, 246, 248, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 0,
	258, 259, 263, 265, 266, 267, 268, 269, 270, 273,
	0, 275, 277, 0, 278, 281, 0, 282, 283, 284,
	285, 286, 287, 288, 289, 525, 290, 0, 291, 292,
	294, 0, 297, 298, 299, 300, 301, 0, 302, 527,
	528, 303, 304, 306, 307, 308, 310, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 0, 322,
	323, 324, 326, 0, 327, 328, 331, 332, 333, 334,
	0, 336, 544, 0, 337, 338, 339, 0, 0, 340,
	341, 342, 343, 344, 345, 348, 545, 350, 351, 352,
	353, 354, 355, 356, 586, 358, 359, 360, 361, 362,
	363, 364, 548, 549, 365, 367, 368, 550, 552, 553,
	0, 383, 384, 385, 386, 387, 388, 389, 391, 0,
	393, 394, 395, 554, 396, 397, 398, 399, 0, 400,
	401, 402, 403, 404, 406, 409, 410, 411, 412, 0,
	415, 416, 417, 418, 419, 420, 421, 423, 424, 425,
	427, 428, 429, 587, 430, 431, 432, 433, 557, 435,
	436, 588, 438, 439, 441, 442, 443, 444, 445, 446,
	605, 0, 448, 558, 449, 450, 451, 452, 453, 0,
	455, 456, 457, 458, 459, 460, 463, 464, 465, 467,
	468, 560, 469, 470, 0, 472, 473, 0, 475, 476,
	477, 478, 479, 0, 606, 480, 562, 481, 563, 482,
	483, 484, 485, 486, 487, 488, 490, 0, 0, 492,
	493, 494, 496, 497, 498, 499, 502, 503, 504, 505,
	506, 0, 507, 509, 511, 589, 566, 567, 568, 569,
	570, 572, 573, 574, 575, 512, 513, 529, 380, 374,
	330, 372, 373, 377, 378, 381, 193, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 223, 0, 0, 272,
	309, 524, 0, 0, 369, 0, 422, 426, 0, 515,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 491, 0, 0, 0, 0, 211, 607, 514,
	585, 0, 0, 0, 376, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 610, 347, 0, 564,
	440, 218, 264, 251, 293, 335, 447, 0, 0, 325,
	495, 260, 349, 0, 239, 382, 0, 471, 346, 0,
	454, 474, 0, 366, 245, 405, 461, 462, 0, 0,
	0, 0, 0, 249, 250, 371, 231, 379, 576, 542,
	434, 392, 390, 0, 357, 414, 571, 0, 0, 279,
	0, 274, 370, 510, 237, 489, 408, 375, 329, 437,
	466, 276, 261, 262, 305, 407, 295, 247, 500, 539,
	543, 541, 537, 534, 538, 535, 536, 540, 296, 533,
	0, 508, 517, 551, 531, 559, 516, 556, 526, 271,
	555, 520, 519, 565, 546, 547, 501, 561, 532, 530,
	523, 522, 518, 0, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 207, 0, 208, 209, 210, 212,
	213, 214, 0, 215, 216, 217, 220, 221, 222, 224,
	584, 225, 226, 227, 228, 229, 230, 521, 0, 232,
	233, 234, 235, 236, 238, 240, 241, 242, 243, 244,
	246, 248, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 0, 258, 259, 263, 265,
	266, 267, 268, 269, 270, 273, 0, 275, 277, 0,
	278, 281, 0, 282, 283, 284, 285, 286, 287, 288,
	289, 525, 290, 0, 291, 292, 294, 0, 297, 298,
	299, 300, 301, 0, 302, 527, 528, 303, 304, 306,
	307, 308, 310, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 0, 322, 323, 324, 326, 0,
	327, 328, 331, 332, 333, 334, 0, 336, 544, 0,
	337, 338, 339, 0, 0, 340, 341, 342, 343, 344,
	345, 348, 545, 350, 351, 352, 353, 354, 355, 356,
	586, 358, 359, 360, 361, 362, 363, 364, 548, 549,
	365, 367, 368, 550, 552, 553, 0, 383, 384, 385,
	386, 387, 388, 389, 391, 0, 393, 394, 395, 554,
	396, 397, 398, 399, 0, 400, 401, 402, 403, 404,
	406, 409, 410, 411, 412, 0, 415, 416, 417, 418,
	419, 420, 421, 423, 424, 425, 427, 428, 429, 587,
	430, 431, 432, 433, 557, 435, 436, 588, 438, 439,
	441, 442, 443, 444, 445, 446, 605, 0, 448, 558,
	449, 450, 451, 452, 453, 0, 455, 456, 457, 458,
	459, 460, 463, 464, 465, 467, 468, 560, 469, 470,
	0, 472, 473, 0, 475, 476, 477, 478, 479, 0,
	606, 480, 562, 481, 563, 482, 483, 484, 485, 486,
	487, 488, 490, 0, 0, 492, 493, 494, 496, 497,
	498, 499, 502, 503, 504, 505, 506, 0, 507, 509,
	511, 589, 566, 567, 568, 569, 570, 572, 573, 574,
	575, 512, 513, 529, 380, 374, 330, 372, 373, 377,
	378, 381, 193, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 223, 0, 0, 272, 309, 524, 0, 0,
	369, 0, 422, 426, 0, 515, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 491, 0,
	0, 0, 0, 211, 186, 514, 180, 0, 0, 0,
	376, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 413, 347, 0, 564, 440, 218, 264, 251,
	293, 335, 447, 0, 0, 325, 495, 260, 349, 0,
	239, 382, 0, 471, 346, 0, 454, 474, 0, 366,
	245, 405, 461, 462, 0, 0, 0, 0, 0, 249,
	250, 371, 231, 379, 576, 542, 434, 392, 390, 0,
	357, 414, 571, 0, 0, 279, 0, 274, 370, 510,
	237, 489, 408, 375, 329, 437, 466, 276, 261, 262,
	305, 407, 295, 247, 500, 539, 543, 541, 537, 534,
	538, 535, 536, 540, 296, 533, 0, 508, 517, 551,
	531, 559, 516, 556, 526, 271, 555, 520, 519, 565,
	546, 547, 501, 561, 532, 530, 523, 522, 518, 0,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	207, 0, 208, 209, 210, 212, 213, 214, 0, 215,
	216, 217, 220, 221, 222, 224, 187, 225, 226, 227,
	228, 229, 230, 521, 0, 232, 233, 234, 235, 236,
	238, 240, 241, 242, 243, 244, 246, 248, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 0, 258, 259, 263, 265, 266, 267, 268, 269,
	270, 273, 0, 275, 277, 0, 278, 281, 0, 282,
	283, 284, 285, 286, 287, 288, 289, 525, 290, 0,
	291, 292, 294, 0, 297, 298, 299, 300, 301, 0,
	302, 527, 528, 303, 304, 306, 307, 308, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 323, 324, 326, 0, 327, 328, 331, 332,
	333, 334, 0, 336, 544, 0, 337, 338, 339, 0,
	0, 340, 341, 342, 343, 344, 345, 348, 545, 350,
	351, 352, 353, 354, 355, 356, 189, 358, 359, 360,
	361, 362, 363, 364, 548, 549, 365, 367, 368, 550,
	552, 553, 0, 383, 384, 385, 386, 387, 388, 389,
	391, 0, 393, 394, 395, 554, 396, 397, 398, 399,
	0, 400, 401, 402, 403, 404, 406, 409, 410, 411,
	412, 0, 415, 416, 417, 418, 419, 420, 421, 423,
	424, 425, 427, 428, 429, 190, 430, 431, 432, 433,
	557, 435, 436, 188, 438, 439, 441, 442, 443, 444,
	445, 446, 181, 0, 448, 558, 449, 450, 451, 452,
	453, 0, 455, 456, 457, 458, 459, 460, 463, 464,
	465, 467, 468, 560, 469, 470, 0, 472, 473, 0,
	475, 476, 477, 478, 479, 0, 182, 480, 562, 481,
	563, 482, 483, 484, 485, 486, 487, 488, 490, 0,
	0, 492, 493, 494, 496, 497, 498, 499, 502, 503,
	504, 505, 506, 0, 507, 509, 511, 191, 566, 567,
	568, 569, 570, 572, 573, 574, 575, 512, 513, 529,
	380, 374, 330, 372, 373, 377, 378, 381, 807, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 206, 0, 223, 713,
	0, 272, 309, 0, 0, 0, 369, 0, 422, 426,
	0, 0, 0, 0, 0, 0, 280, 0, 718, 2334,
	724, 0, 730, 0, 491, 0, 720, 721, 726, 211,
	806, 514, 585, 0, 0, 0, 376, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 722,
	719, 723, 729, 717, 727, 714, 725, 0, 413, 347,
	0, 0, 440, 218, 264, 251, 293, 335, 447, 0,
	0, 325, 495, 260, 349, 0, 239, 382, 0, 471,
	346, 0, 454, 474, 0, 366, 245, 405, 461, 462,
	711, 716, 0, 732, 0, 249, 250, 371, 231, 379,
	0, 0, 434, 392, 390, 0, 357, 414, 0, 0,
	0, 279, 0, 274, 370, 510, 237, 489, 408, 375,
	329, 437, 466, 276, 261, 262, 305, 407, 295, 247,
	500, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	296, 0, 0, 508, 809, 799, 791, 792, 793, 794,
	795, 796, 0, 811, 812, 813, 814, 815, 501, 805,
	0, 790, 797, 798, 800, 2337, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 207, 0, 208, 209,
	210, 212, 213, 214, 710, 215, 216, 217, 220, 221,
	222, 224, 584, 225, 226, 227, 228, 229, 230, 0,
	712, 232, 233, 234, 235, 236, 238, 240, 241, 242,
	243, 244, 246, 248, 0, 0, 0, 715, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 0, 258, 259,
	263, 265, 266, 267, 268, 269, 270, 273, 0, 275,
	277, 0, 278, 281, 0, 282, 283, 284, 285, 286,
	287, 288, 289, 0, 290, 0, 291, 292, 294, 0,
	297, 298, 299, 300, 301, 0, 302, 0, 0, 303,
	304, 306, 307, 308, 310, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 323, 324,
	326, 0, 327, 328, 331, 332, 333, 334, 0, 336,
	0, 0, 337, 338, 339, 0, 0, 340, 341, 342,
	343, 344, 345, 348, 0, 350, 351, 352, 353, 354,
	355, 356, 586, 358, 359, 360, 361, 362, 363, 364,
	0, 0, 365, 367, 368, 0, 2335, 0, 728, 383,
	384, 385, 386, 387, 388, 389, 391, 0, 393, 394,
	395, 0, 396, 397, 398, 399, 0, 400, 401, 402,
	403, 404, 406, 409, 410, 411, 412, 0, 415, 416,
	417, 418, 419, 420, 421, 423, 424, 425, 427, 428,
	429, 587, 430, 431, 432, 433, 0, 435, 436, 588,
	438, 439, 441, 442, 443, 444, 445, 446, 605, 0,
	448, 2340, 449, 450, 451, 452, 453, 0, 455, 456,
	457, 458, 459, 460, 463, 464, 465, 467, 468, 0,
	469, 470, 0, 472, 473, 731, 475, 476, 477, 478,
	479, 0, 606, 480, 0, 481, 0, 482, 483, 484,
	485, 486, 487, 488, 490, 0, 0, 492, 493, 494,
	496, 497, 498, 499, 502, 503, 504, 505, 506, 0,
	507, 509, 511, 589, 0, 0, 807, 0, 0, 0,
	0, 0, 0, 512, 513, 2336, 380, 374, 330, 372,
	373, 377, 378, 381, 206, 0, 223, 713, 0, 272,
	309, 0, 0, 0, 369, 0, 422, 426, 0, 0,
	0, 0, 0, 0, 280, 0, 718, 0, 724, 2776,
	730, 0, 491, 0, 720, 721, 726, 211, 806, 514,
	585, 0, 0, 0, 376, 0, 0, 0, 0, 2775,
	0, 0, 219, 0, 0, 0, 0, 722, 719, 723,
	729, 717, 727, 714, 725, 0, 413, 347, 0, 0,
	440, 218, 264, 251, 293, 335, 447, 0, 0, 325,
	495, 260, 349, 0, 239, 382, 0, 471, 346, 0,
	454, 474, 0, 366, 245, 405, 461, 462, 711, 716,
	0, 732, 0, 249, 250, 371, 231, 379, 0, 0,
	434, 392, 390, 0, 357, 414, 0, 0, 0, 279,
	0, 274, 370, 510, 237, 489, 408, 375, 329, 437,
	466, 276, 261, 262, 305, 407, 295, 247, 500, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 296, 0,
	0, 508, 809, 799, 791, 792, 793, 794, 795, 796,
	0, 811, 812, 813, 814, 815, 501, 805, 0, 790,
	797, 798, 800, 0, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 207, 0, 208, 209, 210, 212,
	213, 214, 710, 215, 216, 217, 220, 221, 222, 224,
	584, 225, 226, 227, 228, 229, 230, 0, 712, 232,
	233, 234, 235, 236, 238, 240, 241, 242, 243, 244,
	246, 248, 0, 0, 0, 715, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 0, 258, 259, 263, 265,
	266, 267, 268, 269, 270, 273, 0, 275, 277, 0,
	278, 281, 0, 282, 283, 284, 285, 286, 287, 288,
	289, 0, 290, 0, 291, 292, 294, 0, 297, 298,
	299, 300, 301, 0, 302, 0, 0, 303, 304, 306,
	307, 308, 310, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 0, 322, 323, 324, 326, 0,
	327, 328, 331, 332, 333, 334, 0, 336, 0, 0,
	337, 338, 339, 0, 0, 340, 341, 342, 343, 344,
	345, 348, 0, 350, 351, 352, 353, 354, 355, 356,
	586, 358, 359, 360, 361, 362, 363, 364, 0, 0,
	365, 367, 368, 0, 0, 0, 728, 383, 384, 385,
	386, 387, 388, 389, 391, 0, 393, 394, 395, 0,
	396, 397, 398, 399, 0, 400, 401, 402, 403, 404,
	406, 409, 410, 411, 412, 0, 415, 416, 417, 418,
	419, 420, 421, 423, 424, 425, 427, 428, 429, 587,
	430, 431, 432, 433, 0, 435, 436, 588, 438, 439,
	441, 442, 443, 444, 445, 446, 605, 0, 448, 2340,
	449, 450, 451, 452, 453, 0, 455, 456, 457, 458,
	459, 460, 463, 464, 465, 467, 468, 0, 469, 470,
	0, 472, 473, 731, 475, 476, 477, 478, 479, 0,
	606, 480, 0, 481, 0, 482, 483, 484, 485, 486,
	487, 488, 490, 0, 0, 492, 493, 494, 496, 497,
	498, 499, 502, 503, 504, 505, 506, 0, 507, 509,
	511, 589, 0, 0, 807, 0, 0, 0, 0, 0,
	0, 512, 513, 0, 380, 374, 330, 372, 373, 377,
	378, 381, 206, 0, 223, 713, 0, 272, 309, 0,
	0, 0, 369, 0, 422, 426, 0, 0, 0, 0,
	0, 0, 280, 0, 718, 0, 724, 0, 730, 0,
	491, 0, 720, 721, 726, 211, 806, 514, 585, 0,
	0, 0, 376, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 722, 719, 723, 729, 717,
	727, 714, 725, 0, 413, 347, 0, 0, 440, 218,
	264, 251, 293, 335, 447, 0, 0, 325, 495, 260,
	349, 0, 239, 382, 0, 471, 346, 0, 454, 474,
	0, 366, 245, 405, 461, 462, 711, 716, 0, 732,
	0, 249, 250, 371, 231, 379, 0, 0, 434, 392,
	390, 4301, 357, 414, 0, 0, 0, 279, 0, 274,
	370, 510, 237, 489, 408, 375, 329, 437, 466, 276,
	261, 262, 305, 407, 295, 247, 500, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 0, 0, 508,
	809, 799, 791, 792, 793, 794, 795, 796, 0, 811,
	812, 813, 814, 815, 501, 805, 0, 790, 797, 798,
	800, 0, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 207, 0, 208, 209, 210, 212, 213, 214,
	710, 215, 216, 217, 220, 221, 222, 224, 584, 225,
	226, 227, 228, 229, 230, 0, 712, 232, 233, 234,
	235, 236, 238, 240, 241, 242, 243, 244, 246, 248,
	0, 0, 0, 715, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 0, 258, 259, 263, 265, 266, 267,
	268, 269, 270, 273, 0, 275, 277, 0, 278, 281,
	0, 282, 283, 284, 285, 286, 287, 288, 289, 0,
	290, 0, 291, 292, 294, 0, 297, 298, 299, 300,
	301, 0, 302, 0, 0, 303, 304, 306, 307, 308,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 323, 324, 326, 0, 327, 328,
	331, 332, 333, 334, 0, 336, 0, 0, 337, 338,
	339, 0, 0, 340, 341, 342, 343, 344, 345, 348,
	0, 350, 351, 352, 353, 354, 355, 356, 586, 358,
	359, 360, 361, 362, 363, 364, 0, 0, 365, 367,
	368, 0, 0, 0, 728, 383, 384, 385, 386, 387,
	388, 389, 391, 0, 393, 394, 395, 0, 396, 397,
	398, 399, 0, 400, 401, 402, 403, 404, 406, 409,
	410, 411, 412, 0, 415, 416, 417, 418, 419, 420,
	421, 423, 424, 425, 427, 428, 429, 587, 430, 431,
	432, 433, 0, 435, 436, 588, 438, 439, 441, 442,
	443, 444, 445, 446, 605, 0, 448, 0, 449, 450,
	451, 452, 453, 0, 455, 456, 457, 458, 459, 460,
	463, 464, 465, 467, 468, 0, 469, 470, 0, 472,
	473, 731, 475, 476, 477, 478, 479, 0, 606, 480,
	0, 481, 0, 482, 483, 484, 485, 486, 487, 488,
	490, 0, 0, 492, 493, 494, 496, 497, 498, 499,
	502, 503, 504, 505, 506, 0, 507, 509, 511, 589,
	0, 0, 807, 0, 0, 0, 0, 0, 0, 512,
	513, 0, 380, 374, 330, 372, 373, 377, 378, 381,
	206, 0, 223, 713, 0, 272, 309, 0, 0, 0,
	369, 0, 422, 426, 0, 0, 0, 0, 0, 0,
	280, 0, 718, 0, 724, 0, 730, 0, 491, 0,
	720, 721, 726, 211, 806, 514, 585, 0, 0, 0,
	376, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 0, 0, 722, 719, 723, 729, 717, 727, 714,
	725, 0, 413, 347, 0, 0, 440, 218, 264, 251,
	293, 335, 447, 0, 0, 325, 495, 260, 349, 0,
	239, 382, 0, 471, 346, 0, 454, 474, 0, 366,
	245, 405, 461, 462, 711, 716, 0, 732, 0, 249,
	250, 371, 231, 379, 0, 0, 434, 392, 390, 4008,
	357, 414, 0, 0, 0, 279, 0, 274, 370, 510,
	237, 489, 408, 375, 329, 437, 466, 276, 261, 262,
	305, 407, 295, 247, 500, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 296, 0, 0, 508, 809, 799,
	791, 792, 793, 794, 795, 796, 0, 811, 812, 813,
	814, 815, 501, 805, 0, 790, 797, 798, 800, 0,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	207, 0, 208, 209, 210, 212, 213, 214, 710, 215,
	216, 217, 220, 221, 222, 224, 584, 225, 226, 227,
	228, 229, 230, 0, 712, 232, 233, 234, 235, 236,
	238, 240, 241, 242, 243, 244, 246, 248, 0, 0,
	0, 715, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 0, 258, 259, 263, 265, 266, 267, 268, 269,
	270, 273, 0, 275, 277, 0, 278, 281, 0, 282,
	283, 284, 285, 286, 287, 288, 289, 0, 290, 0,
	291, 292, 294, 0, 297, 298, 299, 300, 301, 0,
	302, 0, 0, 303, 304, 306, 307, 308, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 323, 324, 326, 0, 327, 328, 331, 332,
	333, 334, 0, 336, 0, 0, 337, 338, 339, 0,
	0, 340, 341, 342, 343, 344, 345, 348, 0, 350,
	351, 352, 353, 354, 355, 356, 586, 358, 359, 360,
	361, 362, 363, 364, 0, 0, 365, 367, 368, 0,
	0, 0, 728, 383, 384, 385, 386, 387, 388, 389,
	391, 0, 393, 394, 395, 0, 396, 397, 398, 399,
	0, 400, 401, 402, 403, 404, 406, 409, 410, 411,
	412, 0, 415, 416, 417, 418, 419, 420, 421, 423,
	424, 425, 427, 428, 429, 587, 430, 431, 432, 433,
	0, 435, 436, 588, 438, 439, 441, 442, 443, 444,
	445, 446, 605, 0, 448, 0, 449, 450, 451, 452,
	453, 0, 455, 456, 457, 458, 459, 460, 463, 464,
	465, 467, 468, 0, 469, 470, 0, 472, 473, 731,
	475, 476, 477, 478, 479, 0, 606, 480, 0, 481,
	0, 482, 483, 484, 485, 486, 487, 488, 490, 0,
	0, 492, 493, 494, 496, 497, 498, 499, 502, 503,
	504, 505, 506, 0, 507, 509, 511, 589, 0, 0,
	807, 0, 0, 0, 0, 0, 0, 512, 513, 0,
	380, 374, 330, 372, 373, 377, 378, 381, 206, 0,
	223, 713, 0, 272, 309, 0, 0, 0, 369, 0,
	422, 426, 0, 0, 0, 0, 0, 0, 280, 0,
	718, 0, 724, 0, 730, 0, 491, 0, 720, 721,
	726, 211, 806, 514, 585, 0, 0, 0, 376, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	0, 722, 719, 723, 729, 717, 727, 714, 725, 0,
	413, 347, 0, 0, 440, 218, 264, 251, 293, 335,
	447, 0, 0, 325, 495, 260, 349, 0, 239, 382,
	0, 471, 346, 0, 454, 474, 0, 366, 245, 405,
	461, 462, 711, 716, 0, 732, 0, 249, 250, 371,
	231, 379, 0, 0, 434, 392, 390, 0, 357, 414,
	0, 0, 0, 279, 0, 274, 370, 510, 237, 489,
	408, 375, 329, 437, 466, 276, 261, 262, 305, 407,
	295, 247, 500, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 296, 0, 0, 508, 809, 799, 791, 792,
	793, 794, 795, 796, 0, 811, 812, 813, 814, 815,
	501, 805, 0, 790, 797, 798, 800, 0, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 207, 0,
	208, 209, 210, 212, 213, 214, 710, 215, 216, 217,
	220, 221, 222, 224, 584, 225, 226, 227, 228, 229,
	230, 0, 712, 232, 233, 234, 235, 236, 238, 240,
	241, 242, 243, 244, 246, 248, 0, 0, 0, 715,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 0,
	258, 259, 263, 265, 266, 267, 268, 269, 270, 273,
	0, 275, 277, 0, 278, 281, 0, 282, 283, 284,
	285, 286, 287, 288, 289, 0, 290, 0, 291, 292,
	294, 0, 297, 298, 299, 300, 301, 0, 302, 0,
	0, 303, 304, 306, 307, 308, 310, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 0, 322,
	323, 324, 326, 0, 327, 328, 331, 332, 333, 334,
	0, 336, 0, 0, 337, 338, 339, 0, 0, 340,
	341, 342, 343, 344, 345, 348, 0, 350, 351, 352,
	353, 354, 355, 356, 586, 358, 359, 360, 361, 362,
	363, 364, 3825, 0, 365, 367, 368, 0, 0, 0,
	728, 383, 384, 385, 386, 387, 388, 389, 391, 0,
	393, 394, 395, 0, 396, 397, 398, 399, 0, 400,
	401, 402, 403, 404, 406, 409, 410, 411, 412, 0,
	415, 416, 417, 418, 419, 420, 421, 423, 424, 425,
	427, 428, 429, 587, 430, 431, 432, 433, 0, 435,
	436, 588, 438, 439, 441, 442, 443, 444, 445, 446,
	605, 0, 448, 0, 449, 450, 451, 452, 453, 0,
	455, 456, 457, 458, 459, 460, 463, 464, 465, 467,
	468, 0, 469, 470, 0, 472, 473, 731, 475, 476,
	477, 478, 479, 0, 606, 480, 0, 481, 0, 482,
	483, 484, 485, 486, 487, 488, 490, 0, 0, 492,
	493, 494, 496, 497, 498, 499, 502, 503, 504, 505,
	506, 0, 507, 509, 511, 589, 0, 0, 807, 0,
	0, 0, 0, 0, 0, 512, 513, 0, 380, 374,
	330, 372, 373, 377, 378, 381, 206, 0, 223, 713,
	0, 272, 309, 0, 0, 0, 369, 0, 422, 426,
	0, 0, 0, 0, 0, 0, 280, 0, 718, 0,
	724, 0, 730, 0, 491, 0, 720, 721, 726, 211,
	806, 514, 585, 0, 0, 0, 376, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 722,
	719, 723, 729, 717, 727, 714, 725, 0, 413, 347,
	0, 0, 440, 218, 264, 251, 293, 335, 447, 0,
	0, 325, 495, 260, 349, 0, 239, 382, 0, 471,
	346, 0, 454, 474, 0, 366, 245, 405, 461, 462,
	711, 716, 0, 732, 0, 249, 250, 371, 231, 379,
	0, 0, 434, 392, 390, 0, 357, 414, 0, 0,
	0, 279, 0, 274, 370, 510, 237, 489, 408, 375,
	329, 437, 466, 276, 261, 262, 305, 407, 295, 247,
	500, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	296, 0, 0, 508, 809, 799, 791, 792, 793, 794,
	795, 796, 0, 811, 812, 813, 814, 815, 501, 805,
	0, 790, 797, 798, 800, 0, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 207, 0, 208, 209,
	210, 212, 213, 214, 710, 215, 216, 217, 220, 221,
	222, 224, 584, 225, 226, 227, 228, 229, 230, 0,
	712, 232, 233, 234, 235, 236, 238, 240, 241, 242,
	243, 244, 246, 248, 0, 0, 0, 715, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 0, 258, 259,
	263, 265, 266, 267, 268, 269, 270, 273, 0, 275,
	277, 0, 278, 281, 0, 282, 283, 284, 285, 286,
	287, 288, 289, 0, 290, 0, 291, 292, 294, 0,
	297, 298, 299, 300, 301, 0, 302, 0, 0, 303,
	304, 306, 307, 308, 310, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 323, 324,
	326, 0, 327, 328, 331, 332, 333, 334, 0, 336,
	0, 0, 337, 338, 339, 0, 0, 340, 341, 342,
	343, 344, 345, 348, 0, 350, 351, 352, 353, 354,
	355, 356, 586, 358, 359, 360, 361, 362, 363, 364,
	0, 0, 365, 367, 368, 0, 0, 0, 728, 383,
	384, 385, 386, 387, 388, 389, 391, 0, 393, 394,
	395, 0, 396, 397, 398, 399, 0, 400, 401, 402,
	403, 404, 406, 409, 410, 411, 412, 0, 415, 416,
	417, 418, 419, 420, 421, 423, 424, 425, 427, 428,
	429, 587, 430, 431, 432, 433, 0, 435, 436, 588,
	438, 439, 441, 442, 443, 444, 445, 446, 605, 0,
	448, 2340, 449, 450, 451, 452, 453, 0, 455, 456,
	457, 458, 459, 460, 463, 464, 465, 467, 468, 0,
	469, 470, 0, 472, 473, 731, 475, 476, 477, 478,
	479, 0, 606, 480, 0, 481, 0, 482, 483, 484,
	485, 486, 487, 488, 490, 0, 0, 492, 493, 494,
	496, 497, 498, 499, 502, 503, 504, 505, 506, 0,
	507, 509, 511, 589, 0, 0, 807, 0, 0, 0,
	0, 0, 0, 512, 513, 0, 380, 374, 330, 372,
	373, 377, 378, 381, 206, 0, 223, 713, 0, 272,
	309, 0, 0, 0, 369, 0, 422, 426, 0, 0,
	0, 0, 0, 0, 280, 0, 718, 0, 724, 0,
	730, 0, 491, 0, 720, 721, 726, 211, 806, 514,
	585, 0, 0, 0, 376, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 0, 722, 719, 723,
	729, 717, 727, 714, 725, 0, 413, 347, 0, 0,
	440, 218, 264, 251, 293, 335, 447, 0, 0, 325,
	495, 260, 349, 0, 239, 382, 0, 471, 346, 0,
	454, 474, 0, 366, 245, 405, 461, 462, 711, 716,
	0, 732, 0, 249, 250, 371, 231, 379, 0, 0,
	434, 392, 390, 0, 357, 414, 0, 0, 0, 279,
	0, 274, 370, 510, 237, 489, 408, 375, 329, 437,
	466, 276, 261, 262, 305, 407, 295, 247, 500, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 296, 0,
	0, 508, 809, 799, 791, 792, 793, 794, 795, 796,
	0, 811, 812, 813, 814, 815, 501, 805, 0, 790,
	797, 798, 800, 0, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 207, 0, 208, 209, 210, 212,
	213, 214, 710, 215, 216, 217, 220, 221, 222, 224,
	584, 225, 226, 227, 228, 229, 230, 0, 712, 232,
	233, 234, 235, 236, 238, 240, 241, 242, 243, 244,
	246, 248, 0, 0, 0, 715, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 0, 258, 259, 263, 265,
	266, 267, 268, 269, 270, 273, 0, 275, 277, 0,
	278, 281, 0, 282, 283, 284, 285, 286, 287, 288,
	289, 0, 290, 0, 291, 292, 294, 0, 297, 298,
	299, 300, 301, 0, 302, 0, 0, 303, 304, 306,
	307, 308, 310, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 0, 322, 323, 324, 326, 0,
	327, 328, 331, 332, 333, 334, 0, 336, 0, 0,
	337, 338, 339, 0, 0, 340, 341, 342, 343, 344,
	345, 348, 0, 350, 351, 352, 353, 354, 355, 356,
	586, 358, 359, 360, 361, 362, 363, 364, 3379, 0,
	365, 367, 368, 0, 0, 0, 728, 383, 384, 385,
	386, 387, 388, 389, 391, 0, 393, 394, 395, 0,
	396, 397, 398, 399, 0, 400, 401, 402, 403, 404,
	406, 409, 410, 411, 412, 0, 415, 416, 417, 418,
	419, 420, 421, 423, 424, 425, 427, 428, 429, 587,
	430, 431, 432, 433, 0, 435, 436, 588, 438, 439,
	441, 442, 443, 444, 445, 446, 605, 0, 448, 0,
	449, 450, 451, 452, 453, 0, 455, 456, 457, 458,
	459, 460, 463, 464, 465, 467, 468, 0, 469, 470,
	0, 472, 473, 731, 475, 476, 477, 478, 479, 0,
	606, 480, 0, 481, 0, 482, 483, 484, 485, 486,
	487, 488, 490, 0, 0, 492, 493, 494, 496, 497,
	498, 499, 502, 503, 504, 505, 506, 0, 507, 509,
	511, 589, 0, 0, 807, 0, 0, 0, 0, 0,
	0, 512, 513, 0, 380, 374, 330, 372, 373, 377,
	378, 381, 206, 0, 223, 713, 0, 272, 309, 0,
	0, 0, 369, 0, 422, 426, 0, 0, 0, 0,
	0, 0, 280, 0, 718, 0, 724, 0, 730, 0,
	491, 0, 720, 721, 726, 211, 806, 514, 585, 0,
	0, 0, 376, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 722, 719, 723, 729, 717,
	727, 714, 725, 0, 413, 347, 0, 0, 440, 218,
	264, 251, 293, 335, 447, 0, 0, 325, 495, 260,
	349, 0, 239, 382, 0, 471, 346, 0, 454, 474,
	0, 366, 245, 405, 461, 462, 711, 716, 0, 732,
	0, 249, 250, 371, 231, 379, 0, 0, 434, 392,
	390, 0, 357, 414, 0, 0, 0, 279, 0, 274,
	370, 510, 237, 489, 408, 375, 329, 437, 466, 276,
	261, 262, 305, 407, 295, 247, 500, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 0, 0, 508,
	809, 799, 791, 792, 793, 794, 795, 796, 0, 811,
	812, 813, 814, 815, 501, 805, 0, 790, 797, 798,
	800, 0, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 207, 0, 208, 209, 210, 212, 213, 214,
	710, 215, 216, 217, 220, 221, 222, 224, 584, 225,
	226, 227, 228, 229, 230, 0, 712, 232, 233, 234,
	235, 236, 238, 240, 241, 242, 243, 244, 246, 248,
	0, 0, 0, 715, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 0, 258, 259, 263, 265, 266, 267,
	268, 269, 270, 273, 0, 275, 277, 0, 278, 281,
	0, 282, 283, 284, 285, 286, 287, 288, 289, 0,
	290, 0, 291, 292, 294, 0, 297, 298, 299, 300,
	301, 0, 302, 0, 0, 303, 304, 306, 307, 308,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 323, 324, 326, 0, 327, 328,
	331, 332, 333, 334, 0, 336, 0, 0, 337, 338,
	339, 0, 0, 340, 341, 342, 343, 344, 345, 348,
	0, 350, 351, 352, 353, 354, 355, 356, 586, 358,
	359, 360, 361, 362, 363, 364, 0, 0, 365, 367,
	368, 0, 0, 0, 728, 383, 384, 385, 386, 387,
	388, 389, 391, 0, 393, 394, 395, 0, 396, 397,
	398, 399, 0, 400, 401, 402, 403, 404, 406, 409,
	410, 411, 412, 0, 415, 416, 417, 418, 419, 420,
	421, 423, 424, 425, 427, 428, 429, 587, 430, 431,
	432, 433, 0, 435, 436, 588, 438, 439, 441, 442,
	443, 444, 445, 446, 605, 0, 448, 0, 449, 450,
	451, 452, 453, 0, 455, 456, 457, 458, 459, 460,
	463, 464, 465, 467, 468, 0, 469, 470, 0, 472,
	473, 731, 475, 476, 477, 478, 479, 0, 606, 480,
	0, 481, 0, 482, 483, 484, 485, 486, 487, 488,
	490, 0, 0, 492, 493, 494, 496, 497, 498, 499,
	502, 503, 504, 505, 506, 0, 507, 509, 511, 589,
	0, 0, 807, 0, 0, 0, 0, 0, 0, 512,
	513, 0, 380, 374, 330, 372, 373, 377, 378, 381,
	206, 0, 223, 713, 0, 272, 817, 0, 0, 0,
	369, 0, 422, 426, 0, 0, 0, 0, 0, 0,
	280, 0, 718, 0, 724, 0, 730, 0, 491, 0,
	720, 721, 726, 211, 806, 514, 585, 0, 0, 0,
	376, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 0, 0, 722, 719, 723, 729, 717, 727, 714,
	725, 0, 413, 347, 0, 0, 440, 218, 264, 251,
	293, 335, 447, 0, 0, 325, 495, 260, 349, 0,
	239, 382, 0, 471, 346, 0, 454, 474, 0, 366,
	245, 405, 461, 462, 711, 716, 0, 732, 0, 249,
	250, 371, 231, 379, 0, 0, 434, 392, 390, 0,
	357, 414, 0, 0, 0, 279, 0, 274, 370, 510,
	237, 489, 408, 375, 329, 437, 466, 276, 261, 262,
	305, 407, 295, 247, 500, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 296, 0, 0, 508, 809, 799,
	791, 792, 793, 794, 795, 796, 0, 811, 812, 813,
	814, 815, 501, 805, 0, 790, 797, 798, 800, 0,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	207, 0, 208, 209, 210, 212, 213, 214, 710, 215,
	216, 217, 220, 221, 222, 224, 584, 225, 226, 227,
	228, 229, 230, 0, 712, 232, 233, 234, 235, 236,
	238, 240, 241, 242, 243, 244, 246, 248, 0, 0,
	0, 715, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 0, 258, 259, 263, 265, 266, 267, 268, 269,
	270, 273, 0, 275, 277, 0, 278, 281, 0, 282,
	283, 284, 285, 286, 287, 288, 289, 0, 290, 0,
	291, 292, 294, 0, 297, 298, 299, 300, 301, 0,
	302, 0, 0, 303, 304, 306, 307, 308, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 323, 324, 326, 0, 327, 328, 331, 332,
	333, 334, 0, 336, 0, 0, 337, 338, 339, 0,
	0, 340, 341, 342, 343, 344, 345, 348, 0, 350,
	351, 352, 353, 354, 355, 356, 586, 358, 359, 360,
	361, 362, 363, 364, 0, 0, 365, 367, 368, 0,
	0, 0, 728, 383, 384, 385, 386, 387, 388, 389,
	391, 0, 393, 394, 395, 0, 396, 397, 398, 399,
	0, 400, 401, 402, 403, 404, 406, 409, 410, 411,
	412, 0, 415, 416, 417, 418, 419, 420, 421, 423,
	424, 425, 427, 428, 429, 587, 430, 431, 432, 433,
	0, 435, 436, 588, 438, 439, 441, 442, 443, 444,
	445, 446, 605, 0, 448, 0, 449, 450, 451, 452,
	453, 0, 455, 456, 457, 458, 459, 460, 463, 464,
	465, 467, 468, 0, 469, 470, 0, 472, 473, 731,
	475, 476, 477, 478, 479, 0, 606, 480, 0, 481,
	0, 482, 483, 484, 485, 486, 487, 488, 490, 0,
	0, 492, 493, 494, 496, 497, 498, 499, 502, 503,
	504, 505, 506, 0, 507, 509, 511, 589, 0, 0,
	807, 0, 0, 0, 0, 0, 0, 512, 513, 0,
	380, 374, 330, 372, 373, 377, 378, 381, 206, 0,
	223, 713, 0, 272, 781, 0, 0, 0, 369, 0,
	422, 426, 0, 0, 0, 0, 0, 0, 280, 0,
	718, 0, 724, 0, 730, 0, 491, 0, 720, 721,
	726, 211, 806, 514, 585, 0, 0, 0, 376, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	0, 722, 719, 723, 729, 717, 727, 714, 725, 0,
	413, 347, 0, 0, 440, 218, 264, 251, 293, 335,
	447, 0, 0, 325, 495, 260, 349, 0, 239, 382,
	0, 471, 346, 0, 454, 474, 0, 366, 245, 405,
	461, 462, 711, 716, 0, 732, 0, 249, 250, 371,
	231, 379, 0, 0, 434, 392, 390, 0, 357, 414,
	0, 0, 0, 279, 0, 274, 370, 510, 237, 489,
	408, 375, 329, 437, 466, 276, 261, 262, 305, 407,
	295, 247, 500, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 296, 0, 0, 508, 809, 799, 791, 792,
	793, 794, 795, 796, 0, 811, 812, 813, 814, 815,
	501, 805, 0, 790, 797, 798, 800, 0, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 207, 0,
	208, 209, 210, 212, 213, 214, 710, 215, 216, 217,
	220, 221, 222, 224, 584, 225, 226, 227, 228, 229,
	230, 0, 712, 232, 233, 234, 235, 236, 238, 240,
	241, 242, 243, 244, 246, 248, 0, 0, 0, 715,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 0,
	258, 259, 263, 265, 266, 267, 268, 269, 270, 273,
	0, 275, 277, 0, 278, 281, 0, 282, 283, 284,
	285, 286, 287, 288, 289, 0, 290, 0, 291, 292,
	294, 0, 297, 298, 299, 300, 301, 0, 302, 0,
	0, 303, 304, 306, 307, 308, 310, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 0, 322,
	323, 324, 326, 0, 327, 328, 331, 332, 333, 334,
	0, 336, 0, 0, 337, 338, 339, 0, 0, 340,
	341, 342, 343, 344, 345, 348, 0, 350, 351, 352,
	353, 354, 355, 356, 586, 358, 359, 360, 361, 362,
	363, 364, 0, 0, 365, 367, 368, 0, 0, 0,
	728, 383, 384, 385, 386, 387, 388, 389, 391, 0,
	393, 394, 395, 0, 396, 397, 398, 399, 0, 400,
	401, 402, 403, 404, 406, 409, 410, 411, 412, 0,
	415, 416, 417, 418, 419, 420, 421, 423, 424, 425,
	427, 428, 429, 587, 430, 431, 432, 433, 0, 435,
	436, 588, 438, 439, 441, 442, 443, 444, 445, 446,
	605, 0, 448, 0, 449, 450, 451, 452, 453, 0,
	455, 456, 457, 458, 459, 460, 463, 464, 465, 467,
	468, 0, 469, 470, 0, 472, 473, 731, 475, 476,
	477, 478, 479, 0, 606, 480, 0, 481, 0, 482,
	483, 484, 485, 486, 487, 488, 490, 0, 0, 492,
	493, 494, 496, 497, 498, 499, 502, 503, 504, 505,
	506, 0, 507, 509, 511, 589, 0, 0, 807, 0,
	0, 0, 0, 0, 0, 512, 513, 0, 380, 374,
	330, 372, 373, 377, 378, 381, 206, 0, 223, 713,
	0, 272, 309, 0, 0, 0, 369, 0, 422, 426,
	0, 0, 0, 0, 0, 0, 280, 0, 718, 0,
	724, 0, 730, 0, 491, 0, 720, 721, 726, 211,
	0, 514, 585, 0, 0, 0, 376, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 722,
	719, 723, 729, 717, 727, 714, 725, 0, 413, 347,
	0, 0, 440, 218, 264, 251, 293, 335, 447, 0,
	0, 325, 495, 260, 349, 0, 239, 382, 0, 471,
	346, 0, 454, 474, 0, 366, 245, 405, 461, 462,
	711, 716, 0, 732, 0, 249, 250, 371, 231, 379,
	0, 0, 434, 392, 390, 0, 357, 414, 0, 0,
	0, 279, 0, 274, 370, 510, 237, 489, 408, 375,
	329, 437, 466, 276, 261, 262, 305, 407, 295, 247,
	500, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	296, 0, 0, 508, 0, 0, 0, 0, 0, 0,
	0, 271, 0, 0, 0, 0, 0, 0, 501, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 207, 0, 208, 209,
	210, 212, 213, 214, 710, 215, 216, 217, 220, 221,
	222, 224, 584, 225, 226, 227, 228, 229, 230, 0,
	712, 232, 233, 234, 235, 236, 238, 240, 241, 242,
	243, 244, 246, 248, 0, 0, 0, 715, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 0, 258, 259,
	263, 265, 266, 267, 268, 269, 270, 273, 0, 275,
	277, 0, 278, 281, 0, 282, 283, 284, 285, 286,
	287, 288, 289, 0, 290, 0, 291, 292, 294, 0,
	297, 298, 299, 300, 301, 0, 302, 0, 0, 303,
	304, 306, 307, 308, 310, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 323, 324,
	326, 0, 327, 328, 331, 332, 333, 334, 0, 336,
	0, 0, 337, 338, 339, 0, 0, 340, 341, 342,
	343, 344, 345, 348, 0, 350, 351, 352, 353, 354,
	355, 356, 586, 358, 359, 360, 361, 362, 363, 364,
	0, 0, 365, 367, 368, 0, 0, 0, 728, 383,
	384, 385, 386, 387, 388, 389, 391, 0, 393, 394,
	395, 0, 396, 397, 398, 399, 0, 400, 401, 402,
	403, 404, 406, 409, 410, 411, 412, 0, 415, 416,
	417, 418, 419, 420, 421, 423, 424, 425, 427, 428,
	429, 587, 430, 431, 432, 433, 0, 435, 436, 588,
	438, 439, 441, 442, 443, 444, 445, 446, 605, 0,
	448, 0, 449, 450, 451, 452, 453, 0, 455, 456,
	457, 458, 459, 460, 463, 464, 465, 467, 468, 0,
	469, 470, 0, 472, 473, 731, 475, 476, 477, 478,
	479, 0, 606, 480, 0, 481, 0, 482, 483, 484,
	485, 486, 487, 488, 490, 0, 0, 492, 493, 494,
	496, 497, 498, 499, 502, 503, 504, 505, 506, 0,
	507, 509, 511, 589, 2094, 0, 0, 0, 0, 159,
	0, 0, 0, 512, 513, 0, 380, 374, 330, 372,
	373, 377, 378, 381, 0, 0, 999, 162, 0, 0,
	0, 1000, 0, 999, 0, 1009, 0, 0, 1000, 0,
	0, 0, 1009, 0, 0, 999, 0, 0, 0, 0,
	1000, 0, 0, 0, 1009, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1002, 0,
	0, 0, 0, 0, 0, 1002, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1002, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1008, 0, 0,
	0, 0, 0, 0, 1008, 0, 0, 168, 0, 0,
	0, 0, 2090, 0, 0, 0, 1008, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1013, 0,
	0, 0, 0, 0, 0, 1013, 0, 0, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 1013, 0, 165,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 998, 0, 0, 2092, 0, 0, 0, 998, 0,
	0, 169, 0, 0, 0, 0, 0, 0, 0, 170,
	998, 0, 0, 0, 0, 0, 0, 163, 1003, 2093,
	0, 0, 0, 0, 0, 1003, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 0, 0, 1003, 0, 119,
	2104, 0, 0, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 159, 1005, 0, 0, 0, 123, 0, 1004,
	1005, 0, 0, 0, 0, 0, 1004, 0, 0, 0,
	162, 0, 1005, 0, 0, 0, 145, 0, 1004, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 158,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1006, 0, 0, 0, 0, 0,
	0, 1006, 0, 0, 0, 0, 0, 151, 2095, 0,
	172, 0, 0, 1006, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2101,
	0, 0, 2096, 0, 0, 0, 0, 173, 0, 1007,
	0, 0, 160, 0, 0, 174, 1007, 0, 0, 0,
	1010, 0, 0, 0, 0, 0, 0, 1010, 1007, 0,
	0, 166, 125, 0, 0, 0, 2102, 0, 0, 1010,
	168, 0, 2103, 0, 0, 0, 0, 167, 0, 0,
	0, 2097, 0, 2015, 0, 1012, 1011, 2098, 126, 0,
	2011, 0, 1012, 1011, 0, 0, 0, 0, 0, 127,
	0, 164, 1043, 161, 1012, 1011, 0, 0, 0, 0,
	128, 0, 165, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 0, 0, 0, 0, 0,
	0, 143, 0, 0, 0, 2091, 0, 156, 0, 150,
	0, 0, 0, 0, 169, 0, 0, 124, 0, 130,
	0, 0, 170, 0, 0, 0, 0, 0, 0, 0,
	163, 0, 1001, 0, 0, 0, 0, 0, 0, 1001,
	120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1001, 0, 157, 0, 0, 0, 0, 0, 0,
	0, 0, 1015, 0, 0, 0, 0, 0, 0, 1015,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1015, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 151, 135, 0,
	136, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	151, 0, 0, 172, 0, 0, 0, 0, 0, 144,
	0, 0, 137, 0, 0, 141, 0, 138, 0, 0,
	0, 0, 121, 0, 0, 139, 0, 0, 176, 0,
	173, 0, 0, 0, 0, 160, 0, 0, 174, 0,
	0, 147, 0, 0, 0, 0, 140, 0, 0, 0,
	0, 0, 146, 0, 166, 0, 0, 148, 0, 0,
	0, 0, 0, 142, 0, 0, 0, 149, 0, 0,
	167, 0, 0, 0, 0, 0, 177, 0, 0, 0,
	155, 0, 0, 122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 161,
}

var yyPact = [...]int32{
	1537, -1000, 43, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2284, 621, 5450, 69062, 69075, 2355, 63008,
	48334, 520, 2381, 578, 2852, 42768, 38, 62502, 49346, 421,
	1537, 2509, 42768, 2588, 2508, 578, 49346, -1000, 1237, 1491,
	1162, 2910, 61996, 49346, 29126, 49346, 2330, 61490, 60984, 1860,
	60478, 1387, 2351, 894, 49346, 49346, 1379, 59972, 49346, 49346,
	464, 1677, -1000, -1000, 928, 915, -1000, -1000, -1000, 42262,
	47828, 59466, 58960, 766, 1857, 36730, 49346, 49346, 49346, 49346,
	36730, 33187, 1436, 1667, 58454, 36730, 49346, 36730, 49346, 49346,
	49346, 49346, 49346, 893, 33187, 34200, 49346, 57948, 2329, 49346,
	49346, -1000, 57442, 56936, 56430, 67906, 67418, 3063, 1386, -1000,
	-1000, -1000, 763, 1845, -1000, -1000, -1000, 2328, 1376, 888,
	-1000, 1435, -1000, -1000, -1000, -1000, -1000, -1000, 734, -1000,
	55924, 47322, 1415, -1000, -1000, 732, 2731, 3145, 3145, 2871,
	35718, 589, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2730,
	1447, 1760, 89, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2540, 520, 207, 206, 2381, 14749, 14749, -1000, 2495,
	-1000, -51, -1000, 79, 36224, -1000, -1000, -1000, 463, 37,
	49346, -1000, 366, -1000, 37, 17840, -1000, 49346, 2294, 55418,
	42768, 42768, 195, -1000, 215, 54912, 49346, 719, 54406, 3044,
	36730, 36730, 49346, 885, 36730, 2065, 1266, -1000, 1276, 1755,
	-1000, 2961, 3079, 81, 414, 49346, 49346, -1000, 85, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 710, 1371, 678, 2956, 972, 2954, 1961,
	53900, 873, 2951, 2122, 695, 49346, 1312, 2493, 49346, 366,
	2946, -1000, 2111, 1696, 66930, 49346, -1000, -1000, -1000, -1000,
	6498, 3031, 2800, 6240, 3030, 2796, 9463, 3029, 68903, 3028,
	46816, 46310, 1958, 1226, 455, -1000, 79, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1223, 1221, 1217, 1251, 1216, 455, 1215,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 49346,
	49346, 49346, 2491, 3025, 1213, 1606, 1212, 1209, 733, 1603,
	2487, 2480, 49346, 1208, 1207, 2064, 1442, 1476, 3023, 1370,
	1554, 1966, 3022, 281, -1000, 3021, 300, -1000, 2477, 3016,
	291, 3014, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 61,
	-1000, -1000, -1000, -1000, -1000, 453, 1804, 452, 452, 452,
	-1000, -1000, -1000, -1000, -1000, 132, 123, -1000, -1000, 1794,
	445, 1794, 1794, -1000, 1808, 1794, 291, 3012, 53394, 2118,
	-1000, 1946, -1000, 1230, -1000, -1000, -1000, 3044, -1000, 1726,
	-1000, 3106, 34706, 270, 3145, -1000, 1414, 1070, -1000, 1654,
	2120, 21446, 20931, 49346, 379, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1674, -1000, 1410, -1000, 17840, -1000,
	-1000, -1000, 2505, 12, -1000, 10591, -1000, -1000, 17840, 17840,
	17840, 17840, 17840, 1320, 2914, -1000, -1000, -1000, -1000, 14233,
	-1000, -1000, 79, 432, 204, -1000, -1000, 444, -1000, 443,
	442, 79, -1000, -1000, -1000, -1000, -1000, -1000, 17840, -1000,
	-1000, 441, 304, 440, -1000, 79, -1000, 10071, 17840, -1000,
	49346, 17840, 49346, 37, 3114, 49346, 23, 9478, 632, 3113,
	35212, -1000, 49346, 2402, 2398, 2712, 2615, 49346, 514, 2944,
	215, 49346, 1656, 2942, 52888, -1000, 438, 438, 1578, 49346,
	436, 66930, 1434, 1093, -1000, 33187, 3041, 3011, 66930, -1000,
	73, 11640, -1000, 11640, 2839, 2397, 27536, -1000, 349, 49346,
	49346, 49346, 49346, -1000, 49346, 3010, -1000, -1000, -1000, 3009,
	49346, 361, 2941, 768, 3145, 3008, 32175, 2937, 52382, 2474,
	1394, 33187, 49346, 879, 2473, 3006, -1000, 40238, 414, 3145,
	3112, 2060, 24, -1000, 983, -1000, 1306, 1303, 38231, 925,
	904, 2158, 608, 2472, 1148, 940, 49346, 1633, 49346, 2133,
	2711, 246, 1522, 1121, -1000, 435, 42768, 994, 24, -1000,
	2710, 1301, 49346, 982, 24, 2709, 1656, -1000, 1741, 66930,
	673, -1000, 2539, -1000, 673, 673, 2538, 1365, 972, 972,
	-1000, 49346, 24, 998, 49346, 68891, 3005, 2794, 68884, 3004,
	49346, 2708, -1000, 194, 79, 2707, 2703, 2700, 2196, -1000,
	2244, 2821, 1007, 2147, 2699, -1000, 2698, 1206, 2396, 2392,
	49346, 49346, 2697, 2693, 32681, 40744, 40744, 2690, 2689, 2688,
	565, -1000, 2808, 2687, 343, 3145, 1275, 1270, 1267, -1000,
	-1000, 414, 49346, 49346, 1333, 2686, 2685, 32175, 2684, 246,
	246, 2683, 1020, 49346, 49346, 49346, 49346, 49346, 1891, 1872,
	1868, -1000, 68822, -1000, -1000, 49346, 49346, -1000, -1000, -1000,
	49346, 49346, -1000, 49346, 49346, 66930, -1000, 66930, -1000, 67,
	17840, -1000, 3127, -1000, -1000, -1000, -1000, 3127, -1000, 2733,
	2723, 3127, -1000, 434, -1000, 3127, -1000, -1000, 1794, 1794,
	-1000, -1000, 66930, 281, 3003, 32175, 3001, -1000, -1000, -1000,
	-1000, -1000, 49346, 3106, 890, -1000, -1000, 1601, -1000, -1000,
	1116, -1000, -1000, -1000, -1000, 36, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3137, 3135, -1000, -1000, 36,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 35, -1000, 735, 2586,
	49346, 14749, 66930, 49346, 2722, 17840, 17840, 17840, 17840, 17840,
	17840, 17840, 17840, 17840, 17840, 17840, 17840, 17840, 17840, 17840,
	17840, 2764, 17840, 2677, 2423, -1000, -1000, 2673, 397, 1082,
	11640, -1000, -1000, 420, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 777, 777,
	619, 6040, 6040, 318, 432, 2823, 79, 9429, 34, 106,
	421, 79, -1000, -1000, -1000, 15265, 17840, 27536, 17325, 79,
	2747, 9478, -1000, 13201, 2586, 17840, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 9359, -237, 193, 22, -1000, 2401, 20,
	17840, -1000, 49346, 2722, 17840, 17840, 17840, 17840, 2677, 2423,
	2673, 397, 420, 2471, -1000, 2251, 31163, 2342, 49346, 392,
	-1000, 474, 49346, -1000, -1000, 2548, 24500, 24500, 2167, 2167,
	-1000, -1000, 17, -1000, 38737, 49346, 2123, 3000, 2860, 418,
	-1000, 1656, 1658, 2999, 2469, 2927, -1000, 4539, 39749, 1639,
	1197, -1000, -1000, 2117, 1774, 414, -1000, 37742, 1433, 49346,
	49346, 694, -1000, -1000, -1000, -1000, -1000, -1000, 1307, 49346,
	-1000, 11640, -1000, 10, -1000, 473, 2056, 49346, -1000, 49346,
	415, 414, 414, 414, 414, 414, -1000, 49346, 1225, 49346,
	1015, 38737, 2114, 2998, 1593, -1000, -1000, 49346, 1094, -1000,
	-1000, 2995, 3105, 2923, 215, 11640, 3148, -1000, 3103, 1724,
	26524, 49346, 939, 334, -1000, 42768, 2793, 78, 215, -1000,
	-51, -1000, 1264, 66930, 3145, 7361, 49346, 49346, 49346, -1000,
	49346, 49346, -1000, 2921, 51876, -1000, 66930, 49346, -1000, 413,
	2415, 642, 640, 2374, 45804, 49346, 51370, 50864, 49346, 897,
	-1000, -1000, 1372, 49346, -1000, 11640, 49346, 41756, 968, 938,
	49346, 1409, 41250, 49346, 1407, -1000, 49346, 1120, -1000, -1000,
	33187, -1000, 2238, 1403, 12152, 6171, 49346, 49346, 49346, 9515,
	49346, 49346, -1000, -1000, -1000, -1000, -1000, -1000, 673, -1000,
	-1000, -1000, 49346, 49346, 673, 673, 7463, 49346, 49346, 9411,
	24, 992, 49346, 981, 24, 989, 42768, 1088, 49346, -1000,
	49346, 49346, 49346, 49346, 49346, -1000, 2784, 50358, 17840, 2783,
	-1000, 49346, -1000, 405, 2781, 49346, 49346, 33187, 2670, 49346,
	49346, 1489, 2468, 49346, 49346, -1000, 33, 33, 33, 49346,
	49346, 49346, -1000, -1000, -1000, 49346, -1000, 49346, -1000, 2878,
	49346, 49346, -1000, 1185, 1184, 2668, -1000, 1344, -1000, 33187,
	33187, 1091, 49346, -1000, -1000, 49346, 594, 2291, 1181, 1172,
	1170, 1166, 49346, 49346, 3145, 3037, 3145, 2666, 49346, 49346,
	36730, 399, 66930, 36730, 28596, 36730, 36730, 2055, 66930, -1000,
	-1000, -1000, -1000, -1000, -1000, 281, -1000, 300, -1000, 2913,
	2464, -1000, 291, -1000, 0, 192, 191, 2729, 2727, 190,
	17840, 188, -1000, -1000, 291, -1000, 49346, 1086, 2054, 2881,
	1601, -1000, -1000, 1039, 1252, -1000, 21961, -1000, -1000, -1000,
	-1000, 17840, 1050, 494, -1000, -1000, 2535, 24500, -1000, -1000,
	-1000, -1000, 2725, -1000, 8, 8, 54, 54, 54, -1000,
	403, 403, 403, 403, 403, 403, 619, 6040, 4607, 1599,
	17840, 17840, 2665, 2664, 397, 1321, 17840, -1000, 2530, -1000,
	-1000, -1000, 2584, -1000, -1000, 1338, 1984, -1000, -1000, -1000,
	-1000, 1932, 19900, 19900, -1000, -1000, -1000, 14233, 386, -1000,
	-1000, -1000, -1000, 27536, -1000, 376, 17840, -1000, -1000, 2770,
	-1000, -1000, 17840, -1, -2, -1000, -1000, -5, 187, -6,
	-1000, 1852, -1000, 17840, -1000, -1000, 185, 32, 17840, 17840,
	17840, -1000, 9478, 3129, -1000, 2535, -7, -1000, 17840, -1000,
	-1000, 372, -1000, 2338, -1000, 9478, 2265, 2248, 1863, -1000,
	-1000, -8, -1000, -1000, -1000, -1000, 2548, 35212, 17840, -11,
	-1000, 79, 2265, 18870, -35, 2481, 43780, 43780, 27030, -1000,
	23994, 43780, 43780, 43780, 294, 2576, 371, 368, 79, -1000,
	2718, 2275, -1000, 2275, 49346, -1000, 182, 31, -1000, -1000,
	-1000, -1000, 49346, 262, 49346, 49346, 3102, 246, 49346, 49346,
	42768, 2993, 64002, 1315, 1639, -1000, 3145, 35718, 2051, -1000,
	-1000, 2463, -1000, -1000, -1000, -1000, 1103, 1530, -1000, 1421,
	673, 673, 49346, -1000, 49346, 49852, -1000, -18, -1000, -1000,
	809, 65954, 63514, -1000, 1324, -1000, -1000, -1000, 61, -1000,
	68394, 1315, 2780, 2467, -1000, -1000, -1000, 2113, -1000, -1000,
	1197, -1000, 181, -203, 2537, -22, -1000, -1000, -1000, 396,
	49346, 1535, 215, 49346, 3041, 1255, 1238, 1744, -1000, 1500,
	-1000, -1000, 11640, 12664, 878, -1000, 180, 30, -1000, 66930,
	3145, -1000, -1000, -1000, -1000, -1000, 653, -1000, 49346, 35718,
	35718, -1000, 972, 554, 1015, -1000, 49346, 954, 49346, 178,
	49346, 49346, 1681, 873, 49346, 2049, 578, 2992, 2369, 1841,
	2860, 2048, 3155, 1532, -1000, -1000, 380, -1000, 79, -1000,
	17840, 366, 2878, -1000, 40744, 215, 1090, 78, 2547, 2547,
	49346, 177, 2661, -1000, -1000, 2658, 2657, 2061, 1862, 2991,
	-1000, 2919, 1005, 1145, 17840, 365, -1000, 1490, 629, 364,
	363, 49346, 1263, 2285, -1000, 2990, 2913, 2981, 2913, -1000,
	-1000, -1000, 45298, -1000, -23, -1000, 68, -1000, -1000, -1000,
	-1000, 49346, 49346, 49346, 49346, -1000, 1100, -1000, -1000, -1000,
	-1000, 1099, -1000, 1397, -1000, -1000, -1000, -1000, -1000, 1488,
	1092, -25, -1000, -1000, 11640, 11640, 11640, 3145, -1000, 24,
	-1000, 963, 1604, -1000, -1000, 24, 2655, 1594, -1000, -1000,
	-1000, -1000, -1000, -1000, 24, 2653, 1656, -1000, 2652, 24,
	987, 49346, 49346, 6508, 49346, 49346, 49346, 1952, 2651, 565,
	1015, -1000, -1000, -1000, -1000, -1000, 2649, -1000, 2913, 2978,
	9478, -1000, 1010, 17840, -1000, -1000, -1000, -1000, 49346, 1142,
	1524, 2648, 2376, 33187, 49346, -1000, -1000, -1000, -1000, -1000,
	-1000, 306, -1000, 306, 306, 2647, 2645, 49346, -1000, -1000,
	-1000, -1000, 49346, -1000, -1000, -1000, -1000, -1000, 3127, 3127,
	1019, 2644, 2643, 2640, 2639, -1000, 2638, 2635, 3145, 2918,
	-1000, -1000, 35718, -1000, -1000, -1000, 66930, -1000, -1000, -1000,
	49346, 49346, 359, -1000, -1000, 66930, -1000, -1000, -1000, -1000,
	49346, -1000, -1000, -1000, 491, -1000, -1000, 491, -28, -1000,
	-1000, 281, 49346, 32175, -1000, 1454, 270, -1000, -1000, -1000,
	-1000, -1000, 494, -1000, 329, -1000, 2319, 2513, 17840, -35,
	17840, 17840, 916, 667, 17840, 19900, 19900, -1000, 17840, 549,
	-1000, -1000, -1000, -1000, 2572, -1000, -1000, 1337, 1984, 17840,
	-1000, -1000, 785, 784, -1000, -1000, -1000, -1000, 1154, -1000,
	19900, 19900, 14233, 358, 1108, -29, -1000, 14233, 175, 16810,
	29, -1000, 79, 9313, -1000, -1000, 284, -1000, -1000, -1000,
	1634, -1000, 17840, 9214, -1000, -1000, 171, 16295, -1000, 28,
	28, 17840, 17840, 2513, -1000, 269, 9478, 578, -1000, -1000,
	14749, 633, 578, 1354, 49346, 79, 2265, -1000, 9478, 458,
	49346, -1000, 9478, 2112, 24500, 2422, 2419, 24500, 2448, 2410,
	2410, 2410, -1000, -1000, -1000, 49346, 354, -1000, 43780, 43780,
	43780, 43780, 33693, 170, 2481, -1000, -1000, -1000, -1000, 2091,
	345, 23488, 17840, 79, 17840, 972, -1000, -1000, -1000, 2391,
	-1000, 1471, 38737, -1000, 1298, 39243, 262, 507, 578, -1000,
	-30, 1656, 2374, 49346, 1639, 336, 2461, -1000, 61, -1000,
	-1000, 1764, 17840, -1000, -1000, 27, -1000, 26, 837, 2779,
	1521, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1723,
	1036, -1000, 63514, 17840, 17840, 65954, -1000, 65954, -1000, -1000,
	51, 81, -1000, 49346, 1197, 49346, 2459, -1000, -1000, 2536,
	63514, 63514, -1000, 3154, 12664, 333, 49346, 2860, 331, 33187,
	3041, -1000, 49346, -1000, -1000, 49346, 1861, -1000, 2914, 630,
	330, 19900, 49346, 1881, -1000, 1581, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 329, 3137, 3135, 66930, -1000, 49346,
	2846, 164, 25, -1000, -1000, 49346, -1000, -1000, -1000, -1000,
	-1000, 328, -1000, -1000, 81, -1000, -1000, -1000, 1471, 262,
	285, 1945, 768, 554, 32175, 2881, 49346, 2860, 49346, 1377,
	49346, -1000, 2634, 2336, -1000, 49346, 24500, 26524, 9065, 2454,
	-1000, -1000, 2547, 44792, 2547, -1000, 326, -1000, 306, 1974,
	3145, 49346, 49346, -1000, 2339, -1000, -1000, -1000, 49346, 2972,
	1699, -1000, 44286, -1000, 2374, 8918, 49346, 1672, 49346, 49346,
	-1000, 49346, 25006, -1000, -1000, 1832, 1236, 246, 1545, 1440,
	835, -1000, -1000, 972, 1008, 1672, 49346, -1000, 49346, -1000,
	-1000, -1000, -1000, -1000, 11640, 12664, 11640, -1000, -1000, -1000,
	-1000, -1000, -1000, 1074, 49346, -1000, -1000, 12152, -1000, -1000,
	-1000, -1000, -1000, 49346, 49346, 49346, 970, 2534, 49346, 961,
	2533, 49346, 49346, 49346, 49346, -1000, 2631, 24, 967, 1591,
	-1000, 2629, 24, 964, 49346, -1000, 49346, -1000, 49346, -1000,
	8780, 1672, -1000, 2628, 2627, 1380, 1790, 49346, 2898, 319,
	-4, -1000, 1136, -1000, -1000, -1000, 49346, 49346, -1000, 565,
	594, 49346, 49346, 49346, 49346, 49346, 3145, 1751, 2970, -1000,
	3098, 2386, 2379, -1000, 66442, 1430, 2913, -1000, -1000, -1000,
	-1000, -1000, 1080, -1000, 1668, -1000, 27536, -1000, -1000, 2511,
	2529, 9478, 770, 746, 17840, 17840, 317, 1017, 887, 746,
	17840, 17840, -1000, -1000, 643, 1445, 1444, 17840, 66930, 19900,
	19900, 19900, 19900, 19900, 19900, 19900, 19900, 19900, 19900, 19900,
	19900, 659, 659, 19, 15780, 17840, -1000, 8638, -1000, -36,
	-1000, 17840, -1000, -1000, -1000, 9478, 17840, -1000, 17840, -1000,
	161, 157, 17840, 151, 9478, 9478, 2511, -1000, 150, 12,
	2193, 25006, 2145, -1000, -1000, 2251, -1000, -1000, 17840, -1000,
	49346, 2481, 24500, 24500, 2550, 2416, 24500, -1000, -1000, -1000,
	-1000, 313, 49346, -1000, -1000, -1000, -1000, 43780, -1000, 36730,
	2067, 311, 9, 8517, 8337, 296, 972, 1865, -1000, 1298,
	309, -1000, 1514, 2369, -1000, 2528, -40, -1000, -1000, -1000,
	2906, 2061, 38737, 49346, 2110, 2865, 2860, -1000, 308, 2445,
	1315, 68394, 2777, -1000, 9478, 3145, 2034, 66930, 1464, -1000,
	-1000, -1000, 9478, 9478, -1000, -1000, 834, 53, 1202, -1000,
	-67, 49346, 63514, -1000, -41, -1000, 396, -1000, 2574, 1467,
	3097, 49346, -1000, 1009, -1000, -1000, -1000, 2878, 2878, 17840,
	869, 215, 3093, -1000, 2836, -1000, -1000, 2378, -1000, -1000,
	49346, -1000, 3145, -1000, 1225, 11640, 73, 1076, 2061, 38737,
	2102, 49346, 1580, -1000, 1063, -1000, 3092, 909, -1000, 36730,
	-1000, -1000, 1866, -1000, 2790, 2376, 33187, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -35, -1000, -1000, 26524, -1000, -1000,
	-1000, -1000, 17840, -1000, 846, 1598, 2556, -1000, -1000, 2598,
	-1000, 49346, 554, -1000, 43274, -1000, -1000, -1000, -42, -1000,
	1000, -1000, 1553, 1478, -1000, -43, 1672, -48, -54, -1000,
	2900, 561, 2841, 17840, 2774, 3036, 3035, -1000, -1000, 1881,
	2773, 3090, 594, -1000, -1000, -1000, -1000, 1881, -1000, 5662,
	66930, 673, 594, 2913, 2913, -1000, -1000, 338, -1000, -1000,
	-1000, -1000, 2626, 2625, 49346, 33187, -1000, 49346, 33187, -1000,
	-1000, -1000, 2624, 49346, 49346, 49346, 960, 2527, 49346, 49346,
	49346, -1000, -1000, 2913, -1000, 49346, 49346, -110, -1000, 3127,
	3127, 66930, 7, -1000, 3127, 3127, -1000, -1000, 515, 17840,
	33187, 2620, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2913, -1000, 3145, 3145, -1000, 66930, 49346, 49346, -55, -3,
	49346, -1000, 49346, -1000, 143, -1000, 17840, 2848, 746, 746,
	17840, 17840, 17840, 746, 643, -1000, -1000, 746, -1000, -56,
	-56, 46, 46, 46, -1000, 659, 659, 659, 659, 659,
	659, 17840, -62, -1000, 746, -1000, -1000, 8101, 9478, -1000,
	-1000, -1000, -1000, -1000, 2317, 2191, -66, -1000, 49346, 1856,
	9478, -1000, -1000, -1000, 2550, -1000, 297, 17840, 24500, -1000,
	49346, -72, -1000, -73, -1000, 3087, 2098, 22982, 19385, 17840,
	-1000, -1000, 1818, 2314, -1000, 2915, 2915, 2289, -1000, 2181,
	11640, 296, 3145, 2369, 49346, 1541, 1541, 1964, 49346, -1000,
	39243, 1500, 555, 1298, 142, 262, 49346, -1000, 975, 3085,
	25006, 42768, -1000, -79, -1000, 65954, -1000, 1459, 4399, -1000,
	827, -1000, -1000, -1000, 812, 1997, 765, 2555, -83, -1000,
	137, 1032, 1031, 896, 49346, 578, -87, 3041, -1000, 2772,
	2370, 2370, 7976, 1384, 370, -1000, 49346, -1000, -1000, -90,
	-1000, 49346, 1057, 134, 49346, 554, 1666, 49346, 578, -1000,
	49346, 290, 1377, 49346, 289, 2898, -4, 244, 7741, 36730,
	3083, 3083, 49346, 288, 283, 279, -1000, -1000, -1000, -1000,
	1672, 1502, -1000, -1000, -1000, -1000, -1000, 1502, 1234, 1502,
	25006, 28066, -1000, 49346, 49346, -1000, 7645, -1000, 2967, 2965,
	-1000, -1000, 275, -1000, 3084, 2846, -1000, -1000, -1000, -1000,
	12664, 49346, 49346, 1327, 340, 1327, 337, 49346, -1000, -1000,
	2608, 49346, 33187, -1000, -1000, 2607, -1000, 1672, -1000, -1000,
	1380, 27536, 26018, -1000, 1790, 274, 273, 272, 7056, -1000,
	49346, -1000, -1000, -1000, 133, -1000, -1000, -1000, 65466, 66930,
	-1000, -1000, -1000, 9478, 18355, -1000, -1000, 746, 746, 746,
	6757, -1000, -1000, 126, 2318, 2324, 2280, -1000, 2535, 25006,
	-1000, 578, -1000, 49346, 9478, -1000, -103, -1000, 294, 36730,
	-1000, 267, 49346, 2526, 22476, 1893, -104, -1000, 454, 19900,
	5318, 1869, -1000, -1000, 2208, 17840, 2202, -1000, 2218, -1000,
	-1000, -1000, 3079, 3079, -1000, -1000, 3079, 3079, 1991, 3145,
	-107, -1000, 20415, 2535, -1000, 1964, -109, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2434, 246, 612, 263, -1000, -1000, 2369, 1471, 1298, 262,
	585, 513, 504, 578, -115, 2374, 68394, 1639, -1000, -1000,
	-1000, 40, -1000, -1000, 66930, -1000, 2739, 1641, 765, -1000,
	1462, -1000, -1000, -1000, 49346, -1000, -1000, 2895, 2892, -1000,
	-1000, 49346, 644, -1000, 2865, 2860, -1000, 1487, -1000, 1347,
	2436, 1392, 231, 17840, 1611, -1000, 11640, 554, 49346, 1471,
	262, -1000, 1941, 554, 2881, -1000, 117, 36730, -1000, 3146,
	-1000, 24500, -1000, 3083, -1000, 1608, -1000, -1000, 37236, 17840,
	17840, 1500, 2878, 260, 2878, 49346, 2878, -1000, -1000, 250,
	2296, 246, -1000, 2841, -1000, -1000, 17840, 1511, 2372, -1000,
	-1000, -1000, -1000, -1000, 943, -1000, 942, -1000, 49346, 1327,
	282, 49346, -1000, 546, 1972, -1000, 66930, -1000, 66930, 66930,
	17840, -1000, -1000, -1000, 116, 115, 111, -10, -1000, 9478,
	-1000, -1000, -1000, -1000, 13717, 241, 239, 212, -1000, -1000,
	-1000, 49346, 2304, 2302, 35212, -1000, -1000, -1000, -117, -1000,
	-1000, -1000, 49346, -129, -1000, 64978, -1000, 1893, 2526, -1000,
	-1000, 19385, -33, 11640, 869, 2069, 49346, 49346, 2206, 9478,
	2209, 2525, 3145, 3145, 3145, 3145, 30657, 2771, 30151, -1000,
	-1000, 11640, -1000, -1000, -1000, -1000, -1000, 31669, -1000, 2434,
	49346, -1000, 909, 1702, -1000, -1000, 25512, 1500, 1964, 1298,
	2369, 2061, -1000, 576, 567, 2865, 1493, 238, -1000, 1315,
	-1000, -1000, 1625, 237, 1052, -1000, -1000, 3079, -1000, -1000,
	1695, -1000, 1596, 1577, -1000, -1000, -1000, 3078, 936, -1000,
	1474, -1000, 2443, 2437, 2278, -1000, -1000, -1000, -1000, 1656,
	5719, 3077, 49346, -1000, -1000, 554, 1047, 2061, 49346, -1000,
	-1000, -1000, 232, -131, -1000, -35, -1000, -1000, -1000, -132,
	-1000, 3127, -133, -134, 2370, 49346, 2370, 215, 2370, 27536,
	494, 2296, -1000, 4859, 231, -1000, 17840, 49346, 49346, -1000,
	-1000, 929, -1000, 1245, 991, 1245, -135, -1000, -137, -139,
	4666, -1000, -1000, -1000, 18355, -1000, 17840, 17840, 230, 268,
	2524, 2519, 325, 3075, -145, -1000, 49346, 2230, 2090, -1000,
	-1000, 22476, -1000, 2097, 17840, -1000, -1000, -1000, -1000, 2175,
	2279, -1000, -1000, 2172, 613, 2239, -1000, -1000, -1000, -1000,
	-67, -1000, 29645, -67, -1000, -1000, -149, -1000, -1000, 909,
	-1000, -1000, 1644, -153, -1000, 561, 2841, 17840, 2434, 2369,
	1964, 1298, -1000, -1000, -1000, 2914, 229, 25006, -1000, 1377,
	17840, -1000, -1000, -1000, 49346, 1637, 36730, 36730, 578, 49346,
	-1000, -1000, 2253, -1000, 2270, 1680, 1680, 1405, 977, 1380,
	-1000, -1000, 49346, 1046, 554, 95, -1000, 3144, -1000, 37236,
	-1000, -1000, 2606, -1000, -155, -1000, 1384, 2535, 92, -1000,
	494, -1000, -1000, 9478, 1327, 1327, 49346, -1000, -1000, -1000,
	2518, -1000, 36730, 66930, -1000, -1000, -1000, -1000, -160, -167,
	18355, 49346, 49346, 49346, -1000, -1000, 49346, -1000, -1000, 2230,
	-1000, 19900, 19900, 2760, -1000, 19900, -1000, 2067, 227, -53,
	-1000, 3071, -1000, 35212, -1000, -1000, 2251, 49346, 2337, 226,
	-1000, -1000, -67, -1000, -1000, 31669, -1000, -1000, 2080, 2075,
	-1000, 25512, 49346, 49346, 4476, 909, 1964, 2434, 2369, 2860,
	25006, -168, 36730, 299, -1000, -1000, 1114, -85, -106, 2865,
	-1000, -1000, 1780, -1000, -1000, 2766, -1000, -1000, -1000, -110,
	554, 49346, -1000, -1000, -1000, -1000, 218, 1672, -1000, 1672,
	2436, -1000, -1000, -1000, -1000, -1000, 1327, 49346, -1000, -1000,
	-1000, -1000, -173, 2382, 256, 233, -1000, -1000, 869, 869,
	-1000, 869, 2096, 48840, 17840, 11640, -136, 1853, -175, -1000,
	17840, -1000, -1000, -1000, -1000, -1000, -1000, 2841, -1000, 2434,
	909, 1964, 909, -178, -1000, 1493, 216, -1000, 2739, 2596,
	2554, -1000, -1000, 215, 215, -1000, 554, 17840, -1000, 1672,
	-1000, -1000, -1000, 2856, 49346, 49346, 49346, 49346, -185, -1000,
	64490, 2072, -1000, -1000, 2335, 2240, -193, 49346, 909, -1000,
	2434, 2535, -1000, 25006, 2914, 11128, 1623, 1029, 1027, -1000,
	-1000, -1000, -196, 1672, 2827, -1000, -1000, -1000, -208, 2205,
	48840, 2085, 984, 3143, -1000, -1000, -1000, 2251, -1000, -1000,
	-1000, 909, -1000, -1000, 2860, -219, -1000, -1000, -1000, -1000,
	-1000, 1377, 2854, 2850, -1000, 2856, -1000, 91, 2432, 17840,
	-1000, -1000, -1000, -1000, -1000, -1000, 1938, -1000, -1000, 1960,
	2071, 2071, 3141, 2186, 1834, -1000, 909, -1000, 11128, 36730,
	1564, 1562, 2368, -1000, 1995, 9478, -1000, -1000, 1916, 2043,
	2032, 1960, 2205, -1000, 213, 49346, 2335, 2535, -1000, 211,
	36730, 36730, 49346, -1000, 2205, 1904, 1899, -1000, 1929, -1000,
	1927, 1985, 1922, 1916, -1000, 48840, 2095, -1000, -1000, 11128,
	-1000, -1000, -1000, -1000, 2431, 2430, 2428, -1000, -1000, 1924,
	-1000, 1914, -1000, 2205, -221, 209, -222, 1980, 1890, 1886,
	-1000, -1000, -1000, -1000, 48840, -1000, 2205, -1000, 1883, 1882,
	-233, 2425, -1000, -1000, -1000, 1988, -1000,
}

var yyPgo = [...]int16{
	0, 3522, 3521, 2493, 125, 0, 2, 5437, 3520, 224,
	220, 275, 144, 395, 368, 3519, 271, 303, 2857, 4137,
	412, 139, 3518, 239, 3518, 3517, 280, 236, 200, 3514,
	177, 3513, 3512, 161, 174, 3509, 3508, 295, 38, 225,
	3507, 5827, 176, 1378, 13, 3504, 3503, 3502, 3501, 3500,
	256, 3499, 231, 3498, 3497, 3496, 258, 179, 260, 255,
	3495, 209, 257, 155, 149, 959, 5274, 3494, 282, 99,
	1438, 289, 3493, 3491, 3490, 3487, 3486, 3485, 3484, 3478,
	3476, 3472, 198, 230, 206, 219, 286, 160, 281, 171,
	582, 3470, 3466, 3461, 2238, 46, 264, 3460, 75, 3459,
	267, 263, 50, 37, 3456, 262, 259, 216, 47, 299,
	3453, 42, 169, 268, 3451, 3446, 3445, 3444, 247, 214,
	89, 5521, 298, 3443, 3442, 3441, 3437, 3436, 165, 156,
	3435, 3434, 3432, 3431, 27, 26, 3429, 3428, 211, 203,
	254, 3427, 261, 141, 10, 54, 119, 117, 3426, 3425,
	3424, 3423, 18, 69, 14, 3422, 3421, 3420, 278, 3420,
	3420, 3420, 3420, 3419, 250, 3417, 3416, 3415, 137, 3414,
	3413, 3411, 124, 3411, 49, 65, 3409, 34, 106, 266,
	3408, 284, 31, 232, 2587, 204, 3407, 292, 283, 279,
	79, 185, 8, 186, 173, 392, 3406, 3404, 3403, 3403,
	290, 245, 212, 207, 151, 146, 3402, 302, 3401, 288,
	3399, 3398, 3397, 3396, 253, 45, 68, 3395, 189, 3394,
	97, 3390, 3389, 102, 252, 19, 40, 3386, 30, 107,
	29, 80, 3384, 73, 251, 1, 16, 11, 3383, 218,
	3382, 23, 3381, 3, 6, 3379, 5, 7, 4, 15,
	3378, 3377, 158, 3376, 82, 3375, 190, 168, 140, 3374,
	129, 3373, 58, 36, 115, 3371, 3368, 3365, 114, 60,
	3364, 101, 3361, 162, 233, 3359, 3358, 3356, 35, 48,
	113, 57, 67, 41, 25, 105, 62, 3355, 3354, 24,
	88, 3353, 159, 55, 12, 63, 234, 92, 3352, 17,
	20, 28, 322, 104, 276, 274, 3348, 44, 229, 287,
	3346, 3345, 285, 110, 277, 52, 180, 3344, 172, 3343,
	56, 3342, 90, 43, 175, 59, 51, 3341, 53, 178,
	3341, 91, 445, 3339, 244, 2507, 6188, 3337, 145, 249,
	304, 81, 3335, 196, 167, 3334, 72, 272, 109, 3332,
	142, 134, 118, 3331, 132, 3330, 3328, 3326, 3323, 3320,
	3319, 3318, 3317, 3315, 3314, 3313, 3306, 3305, 3304, 3302,
	3298, 3296, 3295, 3293, 3291, 3290, 3289, 3286, 3285, 3283,
	3281, 3280, 3279, 3274, 3273, 3270, 3269, 3268, 3265, 3264,
	3261, 3260, 3259, 3244, 3239, 3238, 3237, 202, 183, 3236,
	3233, 3232, 273, 270, 226, 240, 293, 201, 205, 85,
	3231, 3228, 112, 3227, 3225, 3223, 3222, 291, 3219, 296,
	3218, 3217, 3216, 3215, 154, 116, 3214, 78, 152, 297,
	39, 3213, 3209, 184, 238, 111, 103, 3208, 3207, 3205,
	3203, 3201, 164, 3200, 3199, 191, 66, 3198, 222, 188,
	341, 3196, 2008, 242, 3194, 3193, 3193, 3191, 61, 294,
	3190, 194, 195, 100, 243, 3189, 84, 3188, 3187, 248,
	3186, 3184, 64, 3183, 3181, 193, 241, 3180, 3179, 3178,
	3177, 3175, 3174, 22, 86, 21, 9, 3173, 3172, 32,
	3169, 3168, 269, 217, 3167, 3166, 3165, 77, 74, 3165,
	3162, 3161, 235, 33, 3160, 3160,
}

var yyR1 = [...]int16{
	0, 1, 2, 2, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 17, 17, 300, 300, 335, 335, 335, 24,
	24, 25, 25, 26, 26, 27, 27, 38, 38, 38,
	5, 5, 5, 6, 6, 6, 6, 6, 8, 8,
	7, 12, 12, 13, 13, 336, 336, 23, 23, 15,
	15, 499, 499, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 14, 14, 16, 16, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 41,
	41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 41, 41, 42, 42, 42,
	42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 42, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 43, 43, 43, 44, 44, 44,
	44, 44, 44, 63, 65, 64, 64, 64, 45, 45,
	58, 58, 62, 62, 61, 61, 61, 61, 59, 59,
	46, 215, 458, 458, 90, 90, 90, 90, 90, 90,
	90, 56, 56, 57, 57, 57, 47, 48, 48, 51,
	51, 50, 49, 49, 52, 52, 52, 55, 55, 88,
	88, 88, 53, 53, 54, 104, 104, 104, 97, 97,
	97, 97, 97, 97, 106, 106, 106, 106, 105, 105,
	105, 105, 105, 107, 107, 107, 107, 107, 87, 87,
	70, 71, 71, 71, 71, 71, 66, 66, 66, 68,
	69, 83, 83, 84, 84, 72, 72, 73, 73, 73,
	73, 73, 73, 73, 73, 73, 73, 73, 79, 79,
	75, 75, 67, 67, 67, 67, 67, 67, 76, 77,
	80, 81, 78, 78, 78, 78, 85, 85, 85, 86,
	86, 74, 74, 94, 94, 96, 96, 98, 98, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 95, 95, 89, 91, 92, 93, 101, 101, 100,
	100, 118, 118, 119, 121, 121, 120, 120, 120, 120,
	122, 122, 122, 122, 186, 186, 185, 185, 188, 188,
	188, 188, 189, 189, 190, 190, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 338, 338, 339,
	339, 339, 340, 340, 340, 201, 201, 201, 201, 201,
	201, 202, 202, 202, 202, 203, 203, 204, 204, 205,
	205, 205, 206, 206, 207, 207, 209, 210, 210, 210,
	211, 211, 211, 212, 212, 212, 213, 213, 192, 192,
	142, 142, 142, 163, 195, 195, 194, 194, 194, 194,
	196, 196, 197, 197, 198, 198, 199, 199, 200, 200,
	214, 214, 223, 223, 219, 219, 220, 221, 221, 222,
	222, 463, 217, 217, 216, 216, 218, 229, 229, 231,
	231, 230, 230, 230, 230, 232, 232, 233, 233, 224,
	224, 225, 225, 226, 226, 226, 227, 227, 228, 228,
	228, 228, 228, 234, 239, 238, 238, 242, 242, 240,
	240, 241, 244, 244, 245, 245, 245, 245, 245, 245,
	245, 245, 246, 246, 246, 246, 243, 243, 247, 247,
	247, 247, 247, 247, 247, 247, 247, 248, 248, 248,
	248, 248, 249, 249, 250, 250, 251, 251, 235, 235,
	236, 236, 236, 236, 236, 236, 237, 237, 123, 337,
	337, 133, 133, 133, 133, 133, 154, 154, 134, 134,
	138, 124, 135, 135, 140, 140, 139, 136, 136, 125,
	208, 208, 126, 137, 137, 127, 127, 157, 157, 158,
	158, 164, 164, 164, 165, 165, 166, 166, 168, 168,
	169, 169, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 170, 170, 175,
	176, 176, 176, 176, 176, 176, 171, 171, 177, 182,
	182, 182, 182, 178, 178, 178, 178, 33, 33, 312,
	312, 312, 312, 312, 312, 312, 312, 311, 311, 311,
	310, 310, 310, 310, 310, 181, 181, 419, 419, 180,
	180, 500, 500, 446, 446, 159, 159, 160, 160, 161,
	161, 162, 162, 146, 146, 146, 146, 146, 155, 155,
	156, 156, 147, 147, 149, 150, 151, 151, 151, 151,
	151, 144, 141, 141, 141, 148, 148, 148, 173, 173,
	174, 174, 152, 152, 152, 153, 153, 145, 145, 102,
	102, 102, 103, 103, 103, 143, 143, 128, 128, 128,
	128, 128, 128, 314, 314, 314, 314, 314, 314, 314,
	314, 252, 252, 253, 253, 256, 256, 256, 259, 267,
	267, 267, 268, 268, 268, 268, 268, 268, 268, 268,
	268, 268, 316, 316, 317, 317, 318, 318, 319, 319,
	254, 254, 255, 255, 260, 260, 261, 261, 262, 262,
	262, 262, 263, 266, 266, 320, 320, 321, 321, 322,
	10, 32, 257, 271, 271, 272, 272, 272, 272, 275,
	275, 275, 275, 278, 278, 278, 324, 324, 327, 327,
	329, 329, 329, 329, 325, 325, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 501, 501, 28, 28, 28, 323, 323, 326,
	326, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	258, 258, 274, 274, 274, 274, 274, 274, 274, 276,
	276, 265, 265, 264, 264, 280, 280, 279, 279, 279,
	279, 284, 284, 284, 284, 284, 281, 282, 283, 283,
	283, 283, 283, 285, 285, 286, 286, 287, 288, 288,
	289, 289, 289, 315, 315, 293, 293, 293, 293, 294,
	294, 295, 295, 296, 129, 129, 277, 277, 297, 297,
	299, 299, 298, 298, 301, 301, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 302, 302, 307,
	307, 303, 303, 11, 450, 450, 450, 450, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 305,
	305, 305, 306, 308, 308, 502, 502, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 353,
	353, 353, 452, 452, 452, 455, 455, 455, 455, 454,
	454, 456, 456, 354, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 37, 346, 348,
	60, 60, 60, 60, 347, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	269, 269, 270, 270, 270, 270, 270, 270, 290, 291,
	291, 292, 292, 292, 292, 349, 349, 349, 349, 459,
	459, 460, 460, 461, 461, 461, 462, 462, 462, 462,
	462, 464, 464, 464, 464, 464, 465, 82, 82, 82,
	466, 466, 467, 467, 469, 469, 469, 469, 469, 471,
	471, 468, 468, 472, 472, 472, 352, 490, 490, 473,
	473, 470, 470, 470, 470, 470, 470, 470, 470, 470,
	470, 470, 470, 470, 470, 470, 470, 470, 457, 457,
	350, 350, 474, 474, 474, 476, 476, 475, 475, 475,
	475, 475, 481, 481, 482, 482, 484, 479, 479, 480,
	480, 487, 477, 477, 504, 504, 478, 478, 485, 485,
	503, 503, 483, 483, 483, 486, 486, 486, 486, 488,
	488, 351, 351, 351, 351, 172, 172, 489, 489, 489,
	489, 357, 357, 357, 357, 358, 359, 359, 359, 359,
	359, 359, 359, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 362,
	362, 397, 397, 505, 505, 363, 363, 364, 364, 398,
	398, 400, 400, 400, 400, 365, 399, 399, 401, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 414, 414, 387, 388, 388, 404, 404, 404,
	404, 403, 403, 402, 402, 409, 409, 389, 389, 390,
	390, 390, 405, 405, 406, 406, 407, 407, 391, 391,
	391, 391, 392, 392, 393, 394, 394, 408, 408, 441,
	441, 441, 441, 442, 442, 449, 443, 444, 444, 445,
	361, 361, 361, 361, 361, 395, 395, 396, 396, 447,
	447, 448, 448, 355, 355, 356, 342, 342, 343, 341,
	341, 341, 344, 344, 345, 345, 345, 345, 453, 453,
	453, 453, 453, 453, 453, 453, 453, 453, 453, 451,
	451, 451, 451, 184, 184, 187, 187, 179, 179, 491,
	491, 491, 491, 491, 491, 491, 491, 491, 494, 494,
	494, 183, 183, 9, 9, 9, 9, 496, 496, 492,
	492, 492, 493, 493, 493, 493, 493, 495, 495, 495,
	495, 313, 313, 313, 313, 313, 313, 331, 331, 29,
	29, 30, 31, 31, 34, 34, 34, 34, 35, 35,
	36, 36, 36, 36, 332, 333, 333, 334, 334, 367,
	367, 368, 413, 413, 413, 413, 410, 410, 412, 411,
	411, 369, 415, 415, 370, 370, 371, 372, 416, 416,
	420, 420, 421, 421, 421, 421, 421, 422, 422, 423,
	423, 424, 424, 425, 425, 373, 426, 426, 374, 374,
	375, 375, 428, 428, 433, 433, 433, 376, 376, 376,
	377, 377, 377, 377, 429, 429, 434, 434, 434, 434,
	434, 434, 434, 193, 193, 378, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 380, 380, 380, 427, 427,
	427, 381, 437, 437, 430, 430, 435, 435, 435, 435,
	435, 417, 417, 497, 497, 497, 498, 498, 382, 383,
	383, 431, 431, 436, 436, 384, 385, 432, 432, 432,
	432, 386, 386, 418, 418, 438, 438, 439, 439, 440,
	440, 40, 40, 40, 39, 39, 108, 108, 111, 111,
	111, 111, 111, 114, 115, 116, 117, 112, 112, 109,
	110, 110, 113, 113,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 2,
	0, 3, 0, 2, 0, 1, 0, 2, 2, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 3, 1, 2, 3, 0, 1,
	3, 1, 0, 3, 3, 4, 4, 4, 4, 3,
	2, 1, 1, 2, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 5, 3, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	3, 3, 2, 2, 3, 5, 4, 6, 3, 5,
	4, 6, 4, 6, 5, 7, 3, 2, 4, 2,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 3, 4, 4, 6, 3, 3, 4,
	3, 4, 4, 5, 4, 5, 1, 1, 3, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 2, 4, 1, 1, 1,
	2, 2, 2, 2, 1, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 2,
	1, 2, 1, 0, 2, 2, 3, 5, 0, 2,
	4, 1, 1, 2, 3, 4, 5, 6, 8, 6,
	6, 1, 3, 1, 3, 3, 5, 1, 0, 1,
	2, 4, 2, 0, 3, 3, 2, 1, 3, 4,
	3, 5, 4, 3, 5, 1, 1, 1, 1, 4,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 3, 2, 3, 2, 0, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 3, 3, 0, 2, 3, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 2, 2, 1, 3, 3, 2, 4, 1,
	5, 2, 5, 2, 5, 2, 3, 3, 0, 1,
	0, 3, 0, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 0, 0, 0, 0, 1, 1,
	3, 1, 1, 1, 3, 3, 1, 2, 2, 3,
	8, 8, 2, 1, 1, 0, 1, 3, 3, 2,
	1, 1, 2, 0, 1, 3, 2, 2, 3, 1,
	4, 2, 3, 2, 3, 2, 3, 1, 1, 2,
	2, 4, 1, 2, 3, 3, 4, 5, 4, 5,
	4, 2, 2, 2, 1, 1, 0, 5, 2, 2,
	2, 3, 1, 0, 1, 3, 9, 1, 2, 0,
	7, 7, 0, 10, 6, 0, 4, 5, 2, 0,
	2, 4, 0, 1, 1, 0, 5, 2, 4, 1,
	2, 0, 1, 0, 1, 5, 1, 0, 2, 0,
	2, 6, 2, 0, 1, 3, 2, 4, 0, 1,
	3, 2, 1, 0, 1, 3, 3, 2, 0, 2,
	2, 2, 3, 3, 4, 1, 3, 3, 2, 7,
	12, 1, 3, 2, 3, 3, 1, 2, 2, 2,
	2, 1, 2, 13, 2, 2, 0, 2, 0, 1,
	3, 3, 2, 1, 1, 1, 1, 1, 1, 2,
	2, 1, 3, 3, 6, 0, 3, 0, 2, 3,
	2, 3, 4, 4, 3, 3, 0, 5, 2, 5,
	2, 0, 4, 2, 1, 0, 1, 0, 1, 3,
	3, 6, 7, 5, 7, 9, 2, 0, 7, 1,
	3, 1, 4, 4, 7, 2, 1, 1, 1, 3,
	2, 8, 1, 3, 3, 5, 2, 1, 3, 7,
	2, 0, 10, 1, 2, 9, 11, 1, 1, 1,
	0, 1, 1, 1, 1, 0, 3, 0, 1, 3,
	2, 0, 1, 1, 3, 3, 1, 1, 3, 3,
	3, 3, 4, 4, 3, 3, 2, 1, 3, 2,
	1, 1, 1, 1, 3, 0, 1, 3, 1, 1,
	1, 1, 1, 1, 2, 2, 1, 1, 1, 2,
	2, 1, 3, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 0, 2,
	0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
	0, 1, 0, 4, 4, 4, 5, 5, 2, 5,
	3, 5, 2, 0, 3, 1, 2, 5, 5, 8,
	3, 4, 8, 5, 0, 4, 3, 0, 1, 3,
	1, 3, 2, 2, 4, 4, 5, 2, 0, 1,
	1, 0, 2, 2, 0, 2, 0, 13, 16, 12,
	15, 14, 17, 1, 1, 2, 2, 2, 2, 1,
	0, 1, 0, 1, 3, 1, 1, 1, 3, 3,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 1, 0, 2, 2, 1, 0,
	3, 0, 1, 3, 1, 1, 2, 4, 6, 6,
	10, 1, 2, 1, 3, 4, 0, 1, 3, 2,
	1, 1, 6, 2, 0, 3, 1, 1, 2, 1,
	2, 2, 2, 2, 3, 0, 1, 2, 1, 2,
	1, 3, 2, 3, 1, 2, 2, 2, 1, 2,
	3, 1, 2, 2, 2, 2, 3, 3, 3, 1,
	3, 1, 1, 0, 1, 1, 0, 1, 0, 3,
	0, 2, 1, 4, 4, 5, 2, 5, 5, 7,
	3, 1, 5, 9, 3, 9, 4, 11, 10, 2,
	0, 1, 3, 3, 6, 4, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 3, 3, 4, 0, 1, 0, 6, 1, 3,
	3, 3, 5, 2, 0, 3, 4, 4, 0, 2,
	0, 4, 0, 3, 16, 19, 1, 0, 2, 0,
	4, 0, 1, 3, 2, 0, 4, 6, 4, 6,
	4, 4, 6, 4, 6, 5, 7, 5, 7, 4,
	6, 10, 13, 10, 13, 11, 14, 1, 3, 1,
	0, 1, 3, 1, 1, 1, 1, 1, 2, 5,
	3, 6, 4, 6, 6, 9, 5, 7, 6, 6,
	5, 5, 5, 5, 9, 4, 5, 7, 6, 4,
	8, 4, 2, 4, 3, 6, 4, 3, 3, 3,
	2, 2, 3, 4, 4, 3, 3, 3, 3, 3,
	3, 4, 4, 3, 2, 3, 2, 2, 3, 4,
	3, 2, 2, 3, 4, 4, 4, 5, 1, 4,
	4, 4, 3, 3, 2, 1, 0, 6, 4, 6,
	4, 6, 8, 4, 6, 4, 6, 5, 7, 2,
	3, 3, 2, 5, 1, 1, 2, 3, 2, 1,
	1, 2, 1, 2, 1, 1, 1, 2, 1, 2,
	1, 1, 1, 3, 3, 3, 3, 2, 2, 2,
	3, 5, 5, 5, 2, 6, 6, 6, 6, 6,
	8, 8, 6, 6, 7, 9, 9, 8, 10, 6,
	6, 6, 6, 6, 6, 6, 8, 6, 8, 6,
	8, 7, 9, 6, 8, 7, 9, 8, 10, 8,
	10, 9, 11, 8, 10, 9, 11, 8, 8, 7,
	6, 6, 6, 6, 8, 8, 8, 8, 6, 9,
	0, 2, 2, 1, 2, 2, 2, 2, 3, 1,
	3, 3, 1, 5, 3, 9, 12, 7, 7, 3,
	2, 1, 3, 1, 3, 3, 3, 3, 2, 2,
	1, 1, 1, 1, 2, 1, 1, 1, 4, 5,
	1, 0, 1, 2, 2, 2, 2, 1, 1, 1,
	3, 3, 5, 1, 4, 0, 2, 3, 0, 1,
	1, 4, 5, 1, 1, 1, 1, 3, 3, 2,
	2, 1, 2, 2, 2, 2, 1, 2, 2, 1,
	17, 21, 1, 1, 2, 1, 3, 1, 1, 1,
	3, 1, 2, 0, 1, 2, 4, 1, 1, 1,
	1, 1, 3, 0, 1, 0, 1, 1, 4, 0,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 2,
	0, 9, 11, 12, 14, 3, 0, 3, 4, 4,
	0, 6, 4, 9, 7, 6, 4, 6, 6, 5,
	7, 9, 6, 6, 5, 4, 4, 3, 6, 6,
	6, 6, 4, 7, 5, 8, 7, 8, 6, 5,
	8, 1, 0, 1, 0, 4, 6, 5, 8, 2,
	0, 2, 2, 2, 1, 5, 2, 0, 2, 6,
	6, 6, 10, 6, 6, 6, 9, 9, 6, 6,
	9, 6, 1, 1, 7, 7, 6, 2, 2, 2,
	2, 1, 2, 1, 0, 1, 2, 10, 13, 5,
	4, 4, 2, 0, 2, 2, 1, 0, 11, 14,
	12, 15, 8, 11, 8, 7, 9, 1, 1, 3,
	3, 5, 6, 1, 3, 1, 3, 1, 3, 3,
	7, 9, 9, 8, 6, 1, 0, 1, 3, 3,
	1, 5, 3, 8, 11, 6, 1, 0, 5, 2,
	3, 0, 2, 0, 1, 1, 1, 1, 1, 3,
	3, 2, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 3, 2, 2, 1, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 2, 0, 2,
	0, 4, 1, 3, 1, 2, 2, 2, 1, 1,
	1, 1, 1, 3, 3, 1, 3, 1, 3, 11,
	13, 5, 1, 2, 2, 1, 1, 3, 5, 1,
	3, 7, 2, 0, 5, 5, 10, 8, 2, 0,
	2, 0, 1, 1, 1, 1, 1, 2, 0, 2,
	0, 4, 0, 5, 0, 8, 1, 1, 8, 11,
	6, 8, 1, 3, 1, 1, 3, 4, 7, 6,
	5, 5, 5, 5, 1, 3, 4, 4, 4, 3,
	4, 3, 1, 4, 0, 8, 5, 5, 6, 7,
	7, 7, 4, 4, 5, 11, 10, 10, 2, 2,
	0, 13, 2, 0, 1, 3, 5, 5, 3, 6,
	2, 1, 0, 2, 4, 0, 1, 3, 6, 8,
	8, 1, 3, 5, 5, 10, 10, 11, 11, 5,
	5, 6, 10, 1, 0, 2, 0, 1, 0, 2,
	2, 1, 1, 0, 4, 0, 1, 3, 1, 1,
	1, 1, 1, 2, 4, 4, 5, 2, 0, 3,
	1, 3, 4, 3,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -118, -123, -124, -125, -126,
	-127, -128, -129, -130, -131, -132, -349, -350, -351, -355,
	-356, -357, -358, -359, -360, -361, -362, -363, -364, -365,
	-366, -387, -388, -389, -390, -391, -392, -393, -394, -367,
	-368, -369, -370, -371, -372, -373, -374, -375, -376, -377,
	-378, -379, -380, -381, -382, -383, -384, -385, -386, -353,
	-354, -120, -121, -206, 112, 26, 22, 27, 395, 94,
	402, -122, -205, 532, 63, 67, -213, 36, 519, 87,
	541, 97, 98, 99, 100, 532, -165, 116, -314, -277,
	-26, 33, 415, 262, 62, 465, 455, 226, 277, 285,
	423, 104, -342, 269, 450, 376, 195, 439, 388, 444,
	513, -417, 454, 452, 58, 290, 474, 472, 40, 67,
	308, 420, 481, 85, 285, 200, 226, 237, 248, 262,
	287, 71, -419, 62, 376, 386, 388, 410, 415, 423,
	444, 413, 461, 269, 407, 104, 450, 439, 455, 465,
	277, 385, -309, -312, -311, 465, 262, 308, 104, 67,
	420, 481, 85, 285, 226, 237, 439, 455, 195, 269,
	277, -419, 388, 415, 423, 376, 413, 461, 85, -452,
	58, 424, 458, -453, -451, -184, 56, 218, 415, 348,
	407, 489, -5, 4, -18, -19, 192, 193, 194, 195,
	196, 197, 198, 199, 200, 201, 22, 202, 204, 205,
	206, 55, 207, 208, 209, 211, 212, 213, 89, 70,
	214, 215, 216, 24, 217, 219, 220, 221, 222, 223,
	224, 124, 227, 228, 229, 230, 231, 142, 232, 102,
	233, 234, 235, 236, 237, 112, 238, 155, 239, 121,
	122, 91, 247, 248, 249, 250, 251, 252, 254, 255,
	99, 150, 151, 256, 90, 257, 258, 259, 260, 261,
	262, 177, 27, 263, 139, 265, 149, 266, 268, 137,
	42, 269, 271, 272, 273, 274, 275, 276, 277, 278,
	280, 282, 283, 92, 284, 154, 166, 286, 287, 288,
	289, 290, 292, 295, 296, 152, 297, 298, 299, 28,
	300, 301, 302, 303, 304, 305, 306, 307, 308, 309,
	310, 311, 313, 314, 315, 97, 316, 318, 319, 146,
	504, 320, 321, 322, 323, 93, 325, 328, 329, 330,
	333, 334, 335, 336, 337, 338, 106, 85, 339, 100,
	341, 342, 343, 344, 345, 346, 347, 132, 349, 350,
	351, 352, 353, 354, 355, 358, 111, 359, 360, 32,
	140, 123, 505, 506, 503, 145, 62, 507, 508, 125,
	502, 509, 103, 365, 366, 367, 368, 369, 370, 371,
	130, 372, 129, 374, 375, 376, 378, 379, 380, 381,
	383, 384, 385, 386, 387, 113, 388, 153, 144, 389,
	390, 391, 392, 84, 133, 394, 395, 396, 397, 398,
	399, 400, 34, 401, 402, 403, 35, 404, 405, 406,
	408, 409, 410, 411, 128, 413, 414, 147, 416, 417,
	88, 418, 419, 420, 421, 422, 423, 94, 426, 428,
	429, 430, 431, 432, 108, 434, 435, 436, 437, 438,
	439, 114, 115, 440, 441, 442, 148, 443, 444, 446,
	447, 105, 449, 450, 109, 452, 453, 454, 455, 456,
	459, 461, 463, 464, 465, 466, 467, 468, 469, 143,
	470, 50, 473, 474, 475, 98, 476, 477, 478, 479,
	156, 184, 480, 481, 482, 483, 484, 486, 169, 487,
	141, 488, 499, 500, 57, 37, 174, 170, 190, 180,
	179, 225, 189, 188, 29, 279, 176, 293, 294, 501,
	187, 172, 186, 167, 161, 163, 164, 160, 162, 157,
	165, 159, 127, 158, 326, 340, 182, 183, 356, 357,
	361, 171, 362, 363, 377, 178, 175, 412, 427, 173,
	445, 185, 460, 462, 87, 181, 490, 491, 492, 493,
	494, 134, 495, 496, 497, 498, 126, -455, -454, 56,
	458, 424, -184, 21, 218, 58, 348, 407, 415, 489,
	-109, 510, -122, -120, -121, -205, -197, -198, 21, 41,
	-338, -336, -339, -5, 66, 424, 458, 56, 542, -207,
	84, -209, -7, -5, -207, 532, -3, 73, -340, -338,
	64, 73, -119, -118, -336, 67, 481, 84, 420, 308,
	287, 386, 461, 118, 200, 459, -418, 464, 34, -17,
	-5, 28, -14, -5, -95, 222, 280, -98, -5, 11,
	-99, 535, 536, 537, 538, 539, 540, 526, 527, 528,
	18, 19, 20, -14, 88, -14, 28, -7, 28, 247,
	67, -7, 28, 337, 85, 461, -7, -7, 341, -300,
	28, -14, -7, -7, 532, 237, 454, 452, 454, 452,
	-338, 28, 21, -336, 28, 21, -336, 28, -336, 28,
	481, 67, 247, -347, -458, -66, -5, 4, -18, -20,
	210, 116, 226, 25, 81, 243, 117, 79, 44, 76,
	52, 53, 75, 77, 46, 82, 54, 80, 364, 78,
	48, 451, 119, -14, -14, -7, -14, -346, -458, -11,
	-450, -9, 242, 246, 425, 4, -18, -19, -20, 322,
	222, 280, -7, 28, -346, -7, -346, -7, -7, -7,
	-7, -7, 461, -11, -11, 337, -7, -14, 28, 88,
	-14, -7, 28, -16, -14, 28, -12, -7, -7, 28,
	-181, 28, -70, -71, -72, -73, -79, -75, -78, -66,
	187, 172, 173, 174, 175, 176, 177, 188, 189, 171,
	190, -80, -81, -76, -77, 185, 56, 4, -18, 170,
	-67, 179, 180, 181, 182, 183, -181, 28, 25, 337,
	481, 247, 67, 88, 341, 461, 322, 481, -452, 424,
	-452, 220, 210, -492, 432, -493, 319, 390, 253, 31,
	64, 61, 528, 534, 57, -65, 7, -65, -494, -65,
	40, -183, -9, -65, 507, 57, 319, 210, 70, -109,
	533, 533, -186, -185, -188, -41, 537, -43, 535, 536,
	-94, 31, 517, -88, 472, 40, -45, -44, 13, 532,
	-47, -46, -121, 29, 135, -53, -54, 294, 11, 62,
	412, -5, -63, 6, -65, 49, 43, 47, 38, -90,
	12, -458, -185, 74, 537, -58, -61, 534, 530, -336,
	532, 532, 542, -207, -23, 532, -87, -41, -337, -336,
	94, -5, 23, -340, -340, 533, -172, 532, -336, 28,
	-336, 481, -336, 28, -27, 25, -458, -458, -7, 461,
	-458, 131, -419, -314, 474, 210, -344, 31, -446, 23,
	-83, 534, -332, 532, -14, -14, 534, -332, 23, 369,
	258, 453, 232, -332, 64, 31, -28, 36, 519, 31,
	141, -336, 28, -405, 465, 31, 131, 28, 481, -7,
	-415, 366, 74, -7, -23, 31, -331, 131, 36, 233,
	-70, -14, -302, -305, 399, -304, 208, 257, 197, 22,
	27, 478, 94, 224, 265, 259, 310, 355, 123, 31,
	366, 402, 401, 154, -30, 508, 29, 45, -302, -306,
	399, 208, 29, 45, -302, 399, -325, -328, 355, 23,
	214, 91, 306, 336, 339, 343, 365, 420, 437, 403,
	474, 29, -302, 399, 29, -336, 28, 21, -338, 28,
	141, 399, -37, 532, -58, 399, 399, 399, 399, -308,
	27, 94, 197, 478, 399, -37, 399, -7, -14, -14,
	74, 29, 399, 399, 94, 197, 27, 399, 399, 399,
	-406, -30, 480, 399, 94, 233, 395, 197, 27, 265,
	259, 431, 74, 74, -7, 399, 399, 131, 399, 94,
	402, 399, 94, 29, 369, 258, 453, 232, 399, 197,
	27, 98, -414, 197, 27, 29, 542, -335, 24, 35,
	29, 542, -335, 74, 29, 542, -335, 29, -84, -83,
	532, -74, 532, 178, -84, -84, -84, 532, -85, 519,
	520, 532, -85, -86, 184, 532, -86, -86, 179, 180,
	-86, -335, 29, -16, 28, 131, 28, 141, 369, 258,
	453, 232, -27, 220, 23, -183, 40, 542, -493, -65,
	328, 66, 488, 253, 121, -187, 40, -179, -182, -178,
	49, 43, 74, -183, 6, 535, 536, -64, -63, -187,
	40, -5, -491, -65, 4, -178, 40, 58, 49, 43,
	74, 505, -496, 261, 235, 328, -110, -113, -41, -200,
	73, 542, 14, 39, 55, 535, 536, 537, 538, 539,
	540, 526, 527, 528, 18, 19, 20, -94, 30, 33,
	46, 517, 44, 48, 52, 53, 54, 37, 45, -97,
	23, -8, 11, 62, -98, 4, -22, 192, 193, 194,
	195, 196, 197, 198, 199, 200, 21, 201, 22, 202,
	203, 120, 511, 95, 204, 205, 206, 60, 207, 208,
	209, 210, 211, 212, 213, 174, 116, 170, 190, 512,
	89, 70, 214, 215, 216, 24, 217, 38, 513, 218,
	219, 220, 514, 221, 222, 223, 224, 225, 226, 515,
	124, 227, 228, 229, 230, 231, 25, 142, 232, 102,
	233, 118, 234, 235, 236, 237, 112, 238, 81, 155,
	239, 121, 240, 241, 242, 243, 244, 245, 246, 122,
	91, 247, 248, 250, 189, 188, 251, 40, 252, 253,
	254, 255, 99, 150, 151, 256, 90, 96, 257, 258,
	259, 260, 41, 110, 261, 262, 177, 27, 263, 264,
	139, 265, 149, 266, 267, 268, 137, 42, 269, 271,
	272, 273, 274, 29, 275, 276, 277, 278, 279, 43,
	280, 283, 92, 176, 284, 154, 285, 166, 286, 117,
	79, 287, 288, 289, 290, 292, 293, 294, 295, 296,
	152, 297, 299, 28, 300, 301, 302, 303, 304, 305,
	306, 307, 308, 309, 310, 311, 312, 313, 76, 501,
	314, 315, 97, 316, 187, 172, 186, 318, 319, 75,
	167, 161, 163, 164, 160, 162, 157, 165, 159, 127,
	158, 146, 504, 320, 321, 322, 323, 93, 324, 327,
	325, 326, 77, 328, 329, 330, 58, 331, 332, 333,
	334, 335, 336, 337, 338, 106, 85, 339, 100, 340,
	341, 343, 344, 346, 347, 348, 182, 82, 183, 132,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 358,
	31, 111, 359, 360, 47, 361, 32, 171, 140, 123,
	505, 506, 503, 145, 66, 507, 508, 125, 502, 362,
	80, 363, 103, 365, 366, 367, 368, 369, 370, 371,
	130, 372, 129, 373, 374, 375, 376, 377, 378, 379,
	380, 381, 382, 383, 384, 385, 386, 387, 113, 388,
	153, 144, 389, 390, 175, 391, 392, 84, 133, 393,
	394, 395, 396, 397, 398, 399, 400, 34, 401, 402,
	403, 35, 404, 405, 406, 78, 407, 408, 409, 410,
	411, 412, 128, 413, 414, 147, 415, 416, 417, 88,
	419, 63, 420, 421, 422, 423, 424, 425, 94, 427,
	426, 428, 429, 430, 431, 173, 432, 433, 108, 434,
	435, 436, 437, 438, 439, 114, 115, 440, 441, 442,
	148, 443, 444, 445, 446, 59, 447, 105, 448, 67,
	449, 451, 450, 109, 452, 453, 454, 455, 107, 456,
	56, 185, 457, 458, 459, 460, 461, 462, 49, 463,
	464, 465, 466, 467, 468, 469, 143, 470, 472, 50,
	473, 474, 475, 98, 104, 83, 476, 477, 478, 479,
	156, 87, 181, 191, 119, 480, 481, 482, 483, 51,
	484, 487, 141, 488, 489, 490, 491, 492, 493, 494,
	134, 495, 496, 497, 498, 126, 500, 57, -41, -41,
	-41, -41, -41, 364, -278, 32, -59, -41, -87, -121,
	87, -58, -121, -121, -52, 530, 532, 532, 532, -58,
	-48, -41, -91, 532, -200, 532, -61, -68, 537, -6,
	4, -18, -19, -20, -21, 21, 203, 120, 30, 511,
	135, 23, 95, 60, 512, 38, 513, 514, 39, 515,
	118, 26, 240, 241, 242, 244, 245, 246, 40, 253,
	96, 41, 110, 264, 267, 270, 43, 281, 131, 285,
	64, 291, 71, 72, 45, 312, 317, 73, 324, 327,
	68, 331, 332, 31, 47, 69, 74, 66, 33, 510,
	373, 382, 393, 101, 63, 425, 433, 59, 448, 67,
	107, 61, 457, 49, 471, 472, 104, 83, 191, 51,
	65, 485, 36, -41, -62, -336, -87, -209, 23, -12,
	542, 533, 39, 55, 30, 33, 46, 44, 48, 52,
	37, 45, 62, -133, -118, 103, 532, 40, 23, -135,
	-140, -139, 532, -5, -5, -208, 83, 83, 61, -157,
	64, 61, -13, -5, 532, 123, 371, 31, -172, -336,
	-397, -325, 355, 31, -17, 28, -5, -459, 532, -459,
	-474, 212, 199, 316, -7, -441, -443, 532, -70, 322,
	481, 84, -450, -345, -128, -129, -350, -351, 26, 29,
	-70, 534, -68, -333, -334, -6, -417, 83, -95, 532,
	268, 389, -14, -14, -14, -14, -14, 29, -398, 29,
	-7, 532, 371, 31, -407, -406, -65, 29, -408, -450,
	104, 31, -343, 28, -336, 74, 333, -450, -336, 465,
	74, 29, 21, -429, -434, 67, 449, -5, -339, 243,
	-336, -332, -65, 23, 131, 542, 61, -502, 118, 515,
	371, 371, -257, 28, 515, -258, -5, 118, -274, 514,
	472, 382, 285, 271, -502, 118, -502, 118, 118, 169,
	336, 474, 195, 450, -290, 532, 74, 461, 202, 401,
	413, 412, 461, 413, 412, -336, 310, 154, -14, 123,
	61, -290, 299, 412, 532, -338, 450, 61, 371, -336,
	450, 61, -328, 91, 339, 343, -71, -178, -501, 70,
	-178, -178, 70, 347, -28, -28, -336, 61, -502, -336,
	-302, 399, 29, 45, -302, 399, 29, -7, 61, 533,
	61, 61, 61, 61, 118, 40, 31, 118, 40, 31,
	-447, 118, -448, 514, 31, 118, 61, 61, 399, 83,
	83, -336, -7, 61, 61, -332, -429, -429, -429, 61,
	61, 61, -30, -65, 47, 61, -332, 388, -65, 388,
	388, 388, -332, -336, -336, 399, -413, 265, 259, 61,
	61, -408, 61, -290, -290, 61, 439, -14, -14, -14,
	-14, -14, 61, 209, 156, 156, 156, -399, -310, -309,
	200, 513, 262, 287, 62, 386, 410, 459, 465, -312,
	248, 407, 444, 450, 308, -16, -14, -12, -7, -14,
	-7, -70, -181, -84, -87, -63, -63, 56, 56, -63,
	532, -63, -86, -86, -181, -335, 29, -408, 29, -336,
	458, -493, -495, 390, 400, 422, 542, -63, 6, -63,
	6, 542, 83, -102, 95, 96, -189, 64, -336, -188,
	-70, -14, 56, 58, -41, -41, -41, -41, -41, -41,
	-41, -41, -41, -41, -41, -41, -41, -41, -41, -41,
	46, 44, 48, 37, 45, -41, 61, 47, 31, 49,
	43, 50, 41, 261, 358, -106, -105, 351, 352, 353,
	354, 167, -101, 59, 60, -100, -121, 532, -104, 511,
	433, 21, -6, 532, -88, 412, 532, -121, 41, 31,
	-61, 533, 542, -87, -55, 531, -52, -87, -95, -87,
	533, -51, -50, 51, -92, 533, 537, -56, 191, 21,
	41, -57, -41, -69, -66, -189, -87, 531, 543, 533,
	533, -210, 85, 31, 533, -41, -141, 74, -154, 104,
	105, -134, -138, -5, 87, -5, -189, 542, 528, -136,
	-139, -59, -142, 65, -190, -191, -338, -121, 86, -201,
	532, -214, -224, -234, -215, 128, 126, 127, -5, -90,
	-191, -158, 113, -158, 542, 533, -252, -253, -256, -257,
	-259, -258, 46, -14, 123, 29, -301, 36, 532, 29,
	74, 31, 405, -466, -467, -469, 23, 322, 459, 485,
	-470, 216, 442, 301, 435, 483, 278, 419, 325, 31,
	238, 128, 446, -457, 367, 94, -354, -460, 533, -461,
	-462, -464, -69, -82, 45, 362, 501, 191, -66, -70,
	427, -466, 405, -476, -475, 97, 99, 98, 463, 123,
	199, -332, 537, -442, 510, -444, -449, -445, -462, 4,
	322, -7, -336, 481, -344, -314, -26, -17, -5, -271,
	-68, 533, 542, 528, 131, -7, -217, -216, -218, -5,
	532, -332, -332, -332, -332, -332, -14, -400, 415, 480,
	64, 24, -7, -402, -403, -404, 296, 355, 479, -252,
	123, 29, 285, -7, 423, 29, 23, 31, -172, -6,
	7, -416, 23, -426, 308, 67, -428, -433, -5, -215,
	532, -14, 449, -331, 542, -338, 45, -58, -172, -172,
	388, -70, -65, -304, -7, -7, -7, -336, -336, 31,
	-257, 28, -70, -7, 532, -278, -296, 83, 504, 504,
	-297, 83, -5, -63, -7, 28, -5, 28, -7, -7,
	506, 224, 341, -7, -291, -292, -6, -7, -7, 21,
	104, 461, 413, 461, 413, -7, 328, -7, 21, 104,
	-7, 328, -336, 412, -450, -36, 111, 79, 40, 83,
	328, -31, -34, -322, 94, 197, 27, -10, -6, -302,
	-305, 399, -7, -7, -336, -302, 399, -7, -7, -178,
	-14, -14, -178, -178, -302, 399, -325, -7, -7, -302,
	399, 61, -502, -336, 450, 61, -502, -338, 399, -402,
	-403, -7, -7, -7, -7, -7, -7, 47, -7, 28,
	-41, 47, -7, 532, 47, -7, -7, -11, 61, -7,
	-7, 399, -423, 61, 74, -7, -7, -7, -7, -7,
	-7, -12, -331, -12, -12, 399, 399, 61, 401, 202,
	-11, -11, 423, -7, -7, -33, -64, 40, 535, 536,
	94, 399, 399, 399, 399, -7, -7, -65, -25, 28,
	-65, -401, 61, -7, -14, -347, 532, -70, -346, -348,
	222, 280, -95, -346, -346, 131, -70, -335, -335, -335,
	74, -335, 533, 533, 533, 57, 57, 533, -87, 533,
	-335, -16, 423, 131, -341, 36, -492, 469, 230, 390,
	-179, -113, -96, -98, 62, -103, 518, -192, 65, -190,
	57, 42, -41, -41, 61, -101, 59, -100, 42, -41,
	47, 49, 43, 50, 41, 261, 358, -106, -105, 64,
	358, -107, 36, 169, 156, 135, 140, 147, -42, -43,
	535, 536, 532, 412, -42, -87, -121, 532, -95, 532,
	-87, 41, -59, -41, 531, 531, 542, 533, 533, 533,
	-49, -50, 264, -41, -93, 533, -89, 542, -57, -56,
	-56, 16, 17, -192, 533, -62, -41, 532, 85, -143,
	101, 102, 156, 533, 542, -59, -142, -140, -41, 533,
	542, -143, -41, 121, 542, 81, -202, 75, 82, 79,
	77, 78, 76, -195, -194, 23, -5, -195, -121, -214,
	-224, -234, -121, -201, -191, -195, -195, -195, -223, 519,
	64, 532, 532, -58, 74, -164, -65, 114, 115, -164,
	-5, 533, 542, -336, -254, 532, -336, -336, 23, -290,
	-13, -336, -338, 29, -465, 67, 47, -82, -66, -472,
	-352, 213, 404, -469, -471, -65, -183, -468, 131, 74,
	419, 255, 318, 325, -178, -178, -14, -5, -453, 424,
	458, 533, 542, 40, 528, -69, -82, -464, -82, 362,
	-83, -66, -472, 74, 33, 123, -476, 533, 533, 510,
	542, 70, 533, 542, 528, -7, 296, -172, -336, 210,
	-344, -272, 118, -273, -275, 39, 31, 47, 472, 382,
	514, 40, 393, 289, 253, 312, -334, -313, -82, -21,
	-96, -178, -65, 356, 62, 535, 536, 465, 533, 542,
	-70, -395, -396, -65, -332, 64, -7, -183, -183, -28,
	-320, 508, -404, -409, -7, 296, 479, -409, 533, -336,
	-336, 247, -405, -7, 131, -118, 29, -315, 83, 274,
	51, -301, -420, 131, 4, 296, 64, 542, -41, -23,
	-331, -434, -172, 415, -172, -193, 65, -193, -12, 533,
	61, 61, 61, -262, 131, 40, -27, 283, 29, 31,
	-319, -318, 440, -274, 271, -41, 532, -269, 308, 532,
	-296, 532, 532, -7, -308, 27, 94, 402, 197, -327,
	-180, -30, -329, 403, 94, -269, 29, -335, 29, -335,
	-35, -5, 40, 533, 542, 528, 534, -7, -7, -7,
	-7, 419, 419, 328, 308, 419, 533, 542, -322, -322,
	-10, -32, -65, 61, -502, 118, 94, 365, 61, 94,
	365, 61, 61, 61, -502, -7, -7, -302, 399, -7,
	-7, -7, -302, 399, 61, -30, 61, -335, 29, -448,
	-41, -269, -7, 399, 399, 197, 27, 61, -424, 83,
	-303, -450, -336, -331, -331, -331, 61, 61, -7, -7,
	439, 61, 61, 61, 61, 61, 61, -65, 31, -183,
	-70, -14, -14, -60, 532, -70, -14, -85, -85, 533,
	-335, -7, -408, 247, 355, -103, 532, 92, 93, -39,
	71, -41, -41, -41, 42, 42, -41, -42, -42, -41,
	42, 64, 358, -107, -41, 472, 472, 30, 14, 535,
	536, 537, 538, 539, 540, 526, 527, 528, 18, 19,
	20, -42, -42, -87, 532, 30, 533, -41, 533, -87,
	533, 542, 533, -52, 267, -41, 107, 533, 191, -57,
	-89, -89, 542, -89, -41, -41, -39, 531, -119, -185,
	-148, 532, 74, -118, -118, 103, -138, -143, 528, -139,
	123, -191, 75, 75, -191, -202, 75, -203, 80, -203,
	-203, -5, 532, -195, -195, -195, -195, 533, 125, 532,
	-43, 134, -239, -41, -41, -28, -166, -500, 83, -285,
	311, -256, -267, -286, -287, 371, -255, -260, -261, -258,
	-5, -254, 532, 123, 371, -118, 533, -397, -297, -7,
	-466, 532, 74, 207, -41, 542, 542, 465, 47, 255,
	318, -461, -41, -41, -82, -82, 539, -83, -336, -475,
	-13, 74, 70, -449, -442, -445, 4, -313, 532, -409,
	-301, 532, -450, -7, -14, 253, 47, -278, 504, 532,
	-42, -336, -324, 202, 70, 254, 300, -70, -218, -229,
	39, 533, 542, -14, -398, 532, -83, -285, -254, 532,
	371, 141, -407, -320, -408, -341, -343, -301, -7, -503,
	287, 386, -410, -412, -5, -422, 61, -421, 21, 63,
	97, 98, 99, -409, -190, -433, 533, 74, -193, -5,
	243, -193, 532, -331, 36, 169, -65, -7, -7, 87,
	-257, 29, -317, -316, 231, -5, 40, 533, -13, -270,
	31, 253, 312, 355, -7, -13, -269, -13, -265, -264,
	-152, -5, -215, 532, 31, 276, 299, 247, -328, 289,
	31, 276, 439, -290, -318, -316, -290, 289, -329, 94,
	465, -28, 439, -5, -7, -292, -313, -6, 419, -7,
	-34, -7, -7, -7, 450, 70, -7, 450, 70, -7,
	-7, -7, -7, 61, 61, -502, 94, 365, 61, 61,
	-502, -7, -7, -7, 533, 61, 61, -430, -435, 62,
	287, 440, -431, -436, 62, 287, -7, -425, 36, 532,
	542, 399, -7, -7, -30, -33, -7, -7, -7, -7,
	-7, -65, 212, 199, 29, 23, 83, 83, -70, 356,
	322, -335, 423, 247, -95, -112, 72, 70, -41, -41,
	42, 30, 30, -41, -41, 320, 320, -41, -70, -42,
	-42, -42, -42, -42, -42, -42, -42, -42, -42, -42,
	-42, 542, -87, 533, -41, 533, 533, -41, -41, -57,
	533, 533, 533, -112, 533, 110, -174, -152, 118, -154,
	-41, -163, -7, -191, -191, -204, 83, 74, 75, -191,
	532, -12, -194, -219, -220, -215, -230, 130, 532, 542,
	-250, -249, 516, -137, -146, -155, -156, 51, -168, -169,
	532, -28, 151, -286, 532, 305, 272, -315, 70, 533,
	542, -271, 36, -262, -252, -14, 123, -489, 36, -301,
	532, 74, -472, -222, -463, -69, -66, 47, -490, -65,
	131, -70, 314, 465, 539, -481, 394, -336, -442, 533,
	-432, 64, 61, -438, 313, 23, -13, -344, -273, 31,
	-331, -331, -41, -172, 23, 40, 83, -14, -65, -321,
	-322, 423, -262, -252, 123, -7, 285, 423, 23, -294,
	450, -458, 274, 30, 45, -424, -303, -428, -41, 287,
	501, 287, 64, 36, 45, 64, -257, -320, -5, 40,
	-269, 533, 253, 477, 300, 254, 310, 533, 533, 533,
	542, 36, -153, -145, 39, -153, -41, 47, 28, 28,
	-324, 47, 23, -33, -324, -70, -178, -33, -335, -335,
	528, 61, 61, -7, -303, -7, -303, 61, -7, -7,
	-7, 450, 70, -7, -7, -7, -335, -269, -7, -7,
	542, -63, -63, -70, 542, -63, -63, 514, -41, -450,
	61, -335, -65, -65, -70, -7, -7, 533, 542, 542,
	-7, -7, 533, -41, -40, 21, 41, -41, -41, -41,
	-41, 533, 533, -89, -211, 88, 98, 111, 533, 542,
	-7, 156, -204, 532, -41, -191, -12, 533, 533, 542,
	-221, 23, 124, -43, -231, 70, -232, -233, -42, 40,
	-41, 167, -143, -146, -147, 30, -147, 106, 31, -167,
	116, 117, 150, 47, 155, 152, 153, 42, 154, 149,
	-170, -175, -6, -168, -65, -315, -15, -336, -268, 228,
	231, 234, 252, 299, 289, 309, 439, 440, 21, -268,
	-38, 36, 169, -5, -260, 508, -286, 533, -254, -336,
	514, 217, 58, 23, -174, -338, 542, 533, -82, 314,
	267, -473, -4, -352, 465, 465, -477, 131, -482, -484,
	-479, 349, 503, -488, 64, 533, 533, 434, 434, -439,
	-440, 479, 355, -409, -118, 533, -295, 83, -295, 533,
	-279, 338, 299, 532, -7, 533, 542, -7, 423, 533,
	-336, -320, 247, -7, -118, -7, 532, -503, -412, 532,
	-425, 64, 533, -346, -427, 23, -427, -14, 532, 532,
	532, -271, -280, 304, -280, 393, -280, -264, -95, 62,
	-300, -14, -14, 533, 29, 29, 532, 23, -229, -313,
	-7, -7, -307, 360, 94, -307, 94, -7, 61, -7,
	-303, 61, -435, -95, -348, -346, 532, -436, 532, 532,
	532, 533, -7, 533, -70, 356, -70, -108, -111, -41,
	-114, -116, -115, -117, 532, 239, 409, 294, 533, 533,
	-212, 91, 90, 89, 94, -192, -152, -118, -12, 533,
	-223, -220, 532, -225, -226, -5, -231, 70, -43, 133,
	156, 542, 533, 23, -42, -238, 23, 149, 107, -41,
	107, 106, -446, -446, -446, -446, 153, 31, 47, -65,
	533, 542, -176, -182, -178, 537, 40, 532, -192, -38,
	542, 533, -293, 74, -290, 506, 532, -271, -315, -285,
	-286, -254, 507, 514, 514, -118, 533, -297, -463, -466,
	541, -70, -485, 51, -504, 263, -484, -480, 67, 412,
	-269, -336, 36, 36, -409, 479, -489, -301, 308, -276,
	355, -284, -281, -282, 74, 79, 370, 430, -326, 532,
	-41, -437, 280, -322, -320, -7, -285, -254, 141, -320,
	-341, 533, -458, -411, 7, -190, -427, 302, 206, -266,
	-263, -9, -87, -87, -331, 532, -331, -336, -331, 532,
	-102, -290, -153, -41, 299, -29, 83, 450, 450, -7,
	-307, 94, -7, -497, 131, -497, -498, -70, -498, -498,
	-41, 533, 533, 533, 542, 533, 532, 532, 426, -13,
	92, 92, -135, 533, -216, 533, 542, -70, 131, -231,
	-233, 542, -6, -242, 130, -5, -7, -149, -150, 110,
	98, 99, -151, 110, 97, 70, -65, -65, -65, -65,
	-13, 537, 47, -13, 537, -175, -171, -177, -182, -293,
	-336, -294, 229, -288, -289, -5, -215, 532, -38, -286,
	-315, -262, 507, 507, -489, -299, 304, 532, -472, 274,
	532, -478, 412, 438, -446, 131, 287, 287, 23, 450,
	310, -282, 74, -281, 74, 98, 99, -325, 533, 23,
	-14, -320, 423, -262, -7, 532, 533, 542, 533, 542,
	-63, 533, 533, -295, -13, -295, -172, -295, -95, -103,
	-102, 533, -326, -41, -7, -7, 450, -323, 392, 88,
	510, -323, 533, 542, 533, 533, 533, -111, -87, -87,
	532, 94, 70, 70, -192, -196, 23, 533, -226, -227,
	-228, 4, 40, 31, 47, 129, 125, -43, 124, -240,
	-241, -239, 111, 94, 111, -144, 103, 532, 40, 87,
	108, 109, -13, 537, 533, 542, -294, 27, 99, 381,
	533, 542, -145, -145, -41, -293, -315, -38, -286, -278,
	532, -174, -503, -41, -487, -5, 263, -346, -346, -118,
	-7, -283, 355, 35, 24, 94, -283, 533, 441, -430,
	-7, 423, -320, 533, 7, -263, 61, -269, 533, -269,
	-279, -192, 533, -103, -307, -307, -7, 70, -346, -70,
	533, 533, -108, -5, -13, -13, -5, -228, -42, -42,
	47, -42, -230, 532, 542, 23, -135, -154, -134, 87,
	532, -177, 128, 128, -289, -300, -300, 533, -294, -38,
	-293, -315, -301, -298, -152, 533, -458, 533, 412, 542,
	542, -489, 196, 47, 40, -320, -7, 532, -284, -269,
	-307, -14, 533, 61, 83, 94, 94, 124, -235, -236,
	-5, 132, -241, -6, 156, 533, -87, -145, -293, -294,
	-38, -294, 533, 542, -299, 532, -485, 61, 64, -172,
	-172, -320, -87, -269, -44, -5, -5, -5, -225, 533,
	542, 131, -70, -251, 129, -144, -144, 103, 533, -300,
	-294, -293, -192, -152, -278, -483, -486, -63, 6, -65,
	-6, 274, 434, 434, 533, 40, 533, -243, -244, 40,
	-245, 137, 47, 49, 43, 50, 139, -236, 125, -237,
	-249, 29, 129, 7, -154, -294, -301, 533, 542, -503,
	36, 36, -44, 533, 74, -41, 135, 140, -247, 169,
	36, -237, -237, 7, 124, 23, 156, -294, -486, -458,
	287, 287, 83, 137, -248, 146, 145, 141, 135, 141,
	135, 142, 143, -247, -243, 532, -7, -144, -192, 532,
	-346, -346, -5, -246, -244, 144, 144, 141, 141, 135,
	141, 135, 141, -248, -235, 124, -483, 74, 74, 74,
	141, 141, -246, 533, 532, 533, 139, 137, 147, 147,
	-235, -244, 148, 148, 533, 74, 137,
}

var yyDef = [...]int16{
	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 1321, 1322, 0, 1555, -2, 1618, 1618, 0, 0,
	0, 1326, 1382, 0, 1413, 0, 1333, 0, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 1554, 0, 0,
	2534, 0, 63, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 65, 0, 0,
	0, 0, 1683, 1684, 0, 0, -2, 1856, 2511, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1617, 0, 0, 0, 0, 0, 1998, 0, 1994,
	1995, 1996, 0, 0, 2000, 2001, 2002, 0, 0, 0,
	1601, 0, 1604, 1605, 1606, 1607, 1608, 1609, 0, 1979,
	261, 372, 406, 1984, 2338, 0, 489, 145, 362, -2,
	353, 439, 2353, 80, 81, 82, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
	140, 141, 142, 143, 144, 146, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
	161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
	191, 192, 193, 194, 195, 196, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 206, 207, 208, 209, 210,
	211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
	221, 222, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 257, 258, 259, 260,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 280, 281, 282,
	283, 284, 285, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 295, 296, 297, 298, 299, 300, 301, 302,
	303, 304, 305, 306, 307, 308, 309, 310, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	333, 334, 335, 336, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 349, 350, 351, 352,
	354, 355, 356, 357, 358, 359, 360, 361, 363, 364,
	365, 366, 367, 368, 369, 370, 371, 373, 374, 375,
	376, 377, 378, 379, 380, 381, 382, 383, 384, 385,
	386, 387, 388, 389, 390, 391, 392, 393, 394, 395,
	396, 397, 398, 399, 400, 401, 402, 403, 404, 405,
	407, 408, 409, 410, 411, 412, 413, 414, 415, 416,
	417, 418, 419, 420, 421, 422, 423, 424, 425, 426,
	427, 428, 429, 430, 431, 432, 433, 434, 435, 436,
	437, 438, 440, 441, 442, 443, 444, 445, 446, 447,
	448, 449, 450, 451, 452, 453, 454, 455, 456, 457,
	458, 459, 460, 461, 462, 463, 464, 465, 466, 467,
	468, 469, 470, 471, 472, 473, 474, 475, 476, 477,
	478, 479, 480, 481, 482, 483, 484, 485, 486, 487,
	488, 490, 491, 492, 493, 494, 495, 496, 497, 498,
	499, 500, 501, 502, 503, 504, 505, 1993, 1985, 489,
	406, 372, 1989, 1990, 145, 261, 279, 353, 362, 439,
	1327, 0, 1328, 0, 0, 0, 1335, 0, 1412, 1414,
	1332, 1357, 1358, 95, 0, 372, 406, 489, 0, 1379,
	336, 1384, 98, 90, 1380, 0, 2, 0, 0, 1362,
	0, 0, 0, 1323, 2196, 0, 0, 0, 0, 76,
	0, 0, 0, 0, 0, 0, 1618, 2533, -2, 0,
	-2, 230, 1624, 112, 0, 149, 211, 1311, 0, 1297,
	1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307,
	1308, 1309, 1310, 2217, 0, 0, 230, 1786, 230, 0,
	0, 2283, 230, 0, 0, 0, 2433, 0, 0, 98,
	230, 64, 2398, 0, 0, 0, 1685, 1686, 1687, 1688,
	0, 230, 0, 0, 230, 0, 0, 230, 0, 230,
	0, 0, 0, 0, 0, 1182, 0, -2, -2, 1248,
	506, 507, 508, 509, 510, 511, 512, 513, 514, 515,
	516, 517, 518, 519, 520, 521, 522, 523, 524, 525,
	526, 527, 528, 0, 0, 0, 0, 0, 0, 0,
	1893, 1894, 1895, 1896, 1897, 2373, 2374, 2375, 2376, 0,
	0, 0, 0, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 230, 0,
	0, 0, 230, 68, 114, 230, 68, 91, 0, 230,
	68, 230, 1615, 1240, 1241, 1242, 1243, 1244, 1245, 1254,
	1257, 1258, 1259, 1260, 1261, 1292, 192, 1254, 1254, 1254,
	1267, 1268, 1269, 1270, 1271, 1288, 1288, 1246, 1247, 1290,
	1279, 1290, 1290, 1274, 0, 1290, 68, 230, 0, 0,
	1997, 0, 1999, 0, 1599, 1600, 1603, 76, 1980, 372,
	1981, 147, 0, 1982, 0, 2379, 0, 0, 2385, 0,
	0, 0, 0, 0, 0, 2341, 1164, 2342, 2343, 2368,
	2369, 2344, 2371, 2372, 0, 1986, 0, 1988, 0, 1329,
	1324, 1325, 1419, 1334, 1336, 1340, 1341, 1059, 0, 0,
	0, 0, 0, 0, 1755, 1126, 1143, 1144, 1178, 0,
	1147, 1148, 1149, 452, 0, 1154, 1155, 456, 1293, 299,
	485, 1168, 1157, 1158, 1159, 1160, 1161, 1162, 1198, 1314,
	1163, 0, 1419, 0, 1359, 96, 1170, 0, 1173, 1360,
	0, 0, 0, 1381, 0, 0, 0, 1238, 0, 1519,
	0, 1363, 0, 1541, 0, 0, 0, 0, 0, 230,
	2196, 0, 2232, 230, 63, 75, 0, 0, 0, 0,
	0, 0, 0, 0, 1689, 0, 2202, 0, 0, 1623,
	113, 0, 2215, 0, 2512, 0, 0, 2216, 0, 0,
	0, 0, 0, 2222, 0, 0, 2240, 1784, 1785, 0,
	0, 0, 230, 2287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2467, 0, 0, 0,
	0, 0, 1866, 1879, 1966, 1887, 0, 0, 0, 1966,
	1966, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1958, 0, 0, 0, 1868, 1870,
	0, 0, 0, 0, 1871, 0, 2235, 1764, 0, 0,
	0, 1768, 1783, 1771, 0, 0, 0, 0, 1786, -2,
	1781, 0, 1873, 1966, 0, 0, 230, 0, 0, 230,
	0, 0, 2014, 0, 1183, 0, 0, 0, 0, 2206,
	0, 0, 0, 0, 0, 2008, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2280, 2281, 0, 0, 0, 0, 0, 0, 0, 2492,
	2493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2247, 1618, 2262, 2263, 0, 0, 1968, 66, 67,
	0, 0, 1970, 0, 0, 0, 1973, 0, 1255, 1254,
	0, 1262, 0, 1263, 1264, 1265, 1266, 0, 1283, 0,
	0, 0, 1285, 1281, 1289, 0, 1272, 1273, 1290, 1290,
	1277, 1975, 0, 68, 230, 0, 0, 1602, 2003, 2004,
	2005, 2006, 0, 0, 0, 2345, 2346, 0, 2381, 2348,
	0, 2383, 2384, 2386, 2339, 2349, 2351, 2355, 2357, 2358,
	1589, 1590, 1591, 1592, 1593, 0, 0, 1596, 1165, 2350,
	2352, 2354, 2340, 2359, 2360, 2361, 2362, 2363, 2364, 2365,
	2366, 2367, 2347, 2377, 2378, 1987, 2559, 2560, 1671, 1343,
	0, 0, 0, 661, 629, 1299, 1300, 1301, 1302, 1303,
	1304, 1305, 1306, 1307, 1308, 1309, 1310, 0, 622, 876,
	-2, 0, -2, 963, 794, 1097, 1099, -2, 773, 0,
	0, 1339, -2, 873, 1218, 88, 89, 607, 608, 609,
	610, 611, 612, 613, 614, 615, 616, 617, 618, 619,
	620, 621, 623, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 634, 635, 636, 638, 639, 640, 641, 642,
	643, 644, 645, 646, 647, 648, 649, 650, 651, 652,
	653, 654, 655, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 666, 667, 668, 669, 670, 671, 672, 673,
	674, 675, 676, 677, 678, 679, 680, 681, 682, 683,
	684, 685, 686, 687, 688, 689, 690, 691, 692, 693,
	694, 695, 696, 697, 698, 699, 700, 701, 702, 703,
	704, 705, 706, 707, 708, 709, 710, 711, 712, 713,
	714, 715, 716, 717, 718, 719, 720, 721, 722, 723,
	724, 725, 726, 727, 728, 729, 730, 731, 732, 733,
	734, 735, 736, 737, 738, 739, 740, 741, 742, 743,
	744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 763,
	764, 765, 766, 767, 769, 770, 771, 772, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 836, 837,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 874, 875, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	920, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	930, 931, 932, 933, 934, 935, 936, 937, 938, 939,
	940, 941, 942, 943, 944, 945, 946, 947, 948, 949,
	950, 951, 952, 953, 954, 955, 956, 957, 958, 959,
	960, 961, 962, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 975, 976, 977, 978, 979, 980,
	981, 982, 983, 984, 985, 986, 987, 988, 989, 990,
	991, 992, 993, 994, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
	1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
	1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030,
	1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040,
	1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050,
	1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1064, 1065,
	1079, 1082, 1083, 0, 0, 0, 1145, 1238, 0, 1149,
	493, 1150, 1151, 1152, 1153, 0, 0, 0, 0, -2,
	0, 1197, 1315, 0, 1343, 0, 1171, 1174, 1175, 1249,
	83, 84, 85, 86, 87, 529, 530, 531, 532, 533,
	534, 535, 536, 537, 538, 539, 540, 541, 542, 543,
	544, 545, 546, 547, 548, 549, 550, 551, 552, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, 578, 579, 580, 581, 582, 583,
	584, 585, 586, 587, 588, 589, 590, 591, 592, 593,
	594, 595, 596, 597, 598, 599, 600, 601, 602, 603,
	604, 605, 606, 1172, 0, 0, 0, 1385, 1389, 0,
	0, 1396, 0, 0, 0, 0, 1220, 1222, 0, 0,
	1317, 0, 0, 1654, 1521, 0, 0, 0, 0, 1343,
	1532, 0, 0, 1178, 1364, 1402, 0, 0, 1550, 1550,
	1547, 1548, 0, 93, 1692, 0, 0, 0, 1865, 0,
	2229, 2231, 0, 0, 0, 230, 62, 2111, 0, 2111,
	0, 2152, 2153, 0, 0, 0, 2214, 0, 0, 0,
	0, 0, 2333, 2332, 2334, 2335, 2336, 2337, -2, 63,
	1744, 0, 1251, 0, 2415, 2417, 0, 0, 1312, 1433,
	0, 0, 0, 0, 0, 0, 2224, 0, 2237, 0,
	2274, 1692, 0, 0, 0, 2286, 2282, 0, 0, 2297,
	2298, 0, 0, 230, 2196, 0, 0, 2432, 2439, 0,
	0, 0, 0, 2398, 2474, 0, 398, -2, 2196, 2482,
	0, 2397, 0, 0, 0, 0, 0, 0, 0, 1965,
	0, 0, 1898, 230, 0, 1922, 0, 0, 1801, 0,
	1755, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	1930, 1931, 0, 0, 1951, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1944, 0, 0, 1946, 1947,
	0, 1952, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1765, 1769, 1774, 1775, 1766, 1767, 0, 1782,
	1772, 1773, 0, 0, 0, 0, 0, 0, 0, 0,
	1875, 1966, 0, 0, 1877, 1966, 0, 2274, 0, 2007,
	0, 0, 0, 0, 0, 1964, 0, 0, 0, 0,
	2209, 0, 2320, 0, 0, 0, 0, 0, 0, 0,
	0, 2450, 0, 0, 0, 2470, 2472, 2471, 2473, 0,
	0, 0, 2279, 2284, 2285, 0, 2486, 0, 2487, 2398,
	0, 0, 2494, 0, 0, 0, 2421, 2422, 2425, 0,
	0, 0, 0, 2434, 2435, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 2245, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1610,
	1611, 1612, 1613, 1614, 1998, 68, 115, 68, 92, 68,
	0, 1616, 68, 1256, 0, 0, 0, 0, 0, 0,
	0, 0, 1275, 1276, 68, 1977, 0, 0, 0, 2331,
	0, 2380, 2382, 0, 0, 2390, 0, 1166, 1594, 1167,
	1595, 0, 0, 1674, 1669, 1670, 1399, 0, 1418, 1337,
	1060, 1061, 0, 1063, 1066, 1067, 1068, 1069, 1070, 1071,
	-2, -2, -2, -2, -2, -2, 1078, 1080, 1081, -2,
	1221, 1223, 0, 1317, 0, -2, 0, 1096, 0, 1101,
	1103, 1105, 0, 1118, 1120, 0, 1237, 1224, 1225, 1226,
	1227, 1228, 0, 0, 1318, 1113, 1319, 0, 0, 1215,
	1216, 1217, 1338, 0, 1100, 0, 0, 1117, 1753, 0,
	1179, 1178, 0, 0, 0, 1206, 1207, 0, 0, 0,
	-2, 1203, 1199, 0, 1316, 1184, 0, 1313, 0, 0,
	0, 1191, 1193, 0, -2, 1399, 0, 1176, 1173, 1361,
	1397, 0, 1387, 0, 97, 1239, 1676, 0, 0, 1526,
	1527, 0, 1528, 1178, 1525, 1520, 1402, 0, 0, 0,
	1537, 1536, 1676, 0, 1540, 1344, 1405, 1405, 0, 1349,
	0, 1405, 1405, 1405, 1423, 358, 505, 470, 95, 1181,
	0, 0, 1549, 0, 0, 2195, 0, 1691, 1693, 1695,
	1696, 1697, 0, 1721, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2125, 2110, 2112, 0, 0, 0, 2117,
	2118, 0, 2133, 2134, 2135, 2136, 0, 0, 2141, 0,
	0, 0, 0, 2146, 0, 0, 2149, 0, 2090, 2091,
	2093, 0, 0, 2100, 2101, 2102, 2103, 2105, -2, 2107,
	0, 2125, 0, 0, 2155, 2157, 2158, 2159, 2161, 2154,
	0, 2213, 0, 0, 0, 0, 2303, 2307, 2305, 1246,
	0, 2531, 2196, 0, 2201, 0, 0, 0, -2, 2205,
	1252, 2414, 0, 0, 0, 2518, 0, 1432, 1434, 0,
	2316, 2228, 2218, 2219, 2220, 2221, 0, 2239, 0, 0,
	0, 2244, 1786, 1736, 2273, 2271, 0, 0, 0, 0,
	0, 0, 0, 2283, 0, 0, 0, 0, 1844, 0,
	1865, 2441, 0, 0, 2456, 2457, 0, 2462, 2464, 2465,
	0, 98, 2398, 2469, 0, 2196, 0, -2, 2484, 2484,
	0, 0, 0, 1888, 2035, 0, 0, 0, 76, 0,
	1900, 230, 1719, 0, 0, 0, 2070, 0, 0, 0,
	0, 0, 1620, 0, 2070, 230, 68, 230, 68, 1924,
	1927, 1929, 0, 1950, 0, 2079, 2082, 1928, 1932, 1935,
	1936, 0, 0, 0, 0, 1940, 0, 1937, 1938, 1939,
	1943, 0, 1945, 0, 1948, 1953, 2410, 2411, 2412, 0,
	0, 0, 2402, 2404, 373, 121, 193, 0, 1740, 1867,
	1880, 1966, 0, 2043, 1962, 1869, 0, 0, 2037, 1770,
	1776, 1777, 1778, 1780, 1872, 0, 2236, 2039, 0, 1874,
	1966, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	-2, 2015, 2016, 2017, 2018, 2019, 0, 2207, 68, 230,
	1963, 2208, 0, 0, 2070, 2212, 2022, 2023, 0, 0,
	0, 0, 2452, 0, 0, 2029, 2030, 2031, 2032, 2033,
	2034, 2398, 2488, 2398, 2398, 0, 0, 0, 2423, 2424,
	2060, 2061, 0, 2062, 2063, 2460, 1597, 1598, 0, 0,
	0, 0, 0, 0, 0, 2068, 0, 0, 0, 0,
	2314, 2246, 0, 2249, 2250, 2251, 0, 2253, 2254, 2255,
	149, 211, 0, 2258, 2259, 0, 2261, 1967, 1969, 1971,
	0, 1974, 1253, 1291, 1288, 1286, 1287, 1288, 0, 1278,
	1976, 68, 0, 0, 2325, 0, 1983, 2387, 2388, 2389,
	2356, 2561, 1674, 1295, 0, 2563, 0, 2545, 0, 1342,
	0, 0, -2, -2, 0, 0, 0, 1114, 0, -2,
	1098, 1102, 1104, 1106, 0, 1119, 1122, 0, 1237, 0,
	1121, 1124, 0, 0, 1229, 1230, 1231, 1232, 0, 1127,
	0, 0, 0, 485, 0, 0, 1115, 0, 0, 0,
	0, 1754, 1146, 1239, 1204, 1205, 0, 1156, 1294, -2,
	0, 1200, 0, 0, 1180, 1185, 0, 0, 1313, 1313,
	1313, 0, 0, 2545, 1415, 0, 1172, 0, 1388, 1518,
	0, 1657, 0, 0, 0, 1530, 1676, 1533, 1534, 0,
	0, 1539, 1400, 170, 0, 0, 0, 0, 0, 1376,
	1376, 1376, 1374, 1346, 1404, 0, 1409, 1347, 1405, 1405,
	1405, 1405, 1405, 1349, 0, 1351, 1353, 1355, 1420, 0,
	0, 0, 0, -2, 0, 1786, 1551, 1552, 1553, -2,
	94, 1834, 0, 1701, 1836, 0, 1721, 0, 0, 1864,
	0, 2232, 1859, 0, 2111, 0, 0, 2106, 1254, 2087,
	2123, 0, 0, 2113, 2114, 2119, 2115, 2116, 0, 0,
	0, 2139, 2140, 2142, 2143, 2144, 2145, 2147, 2148, 372,
	406, 2089, 0, 0, 0, 0, 2099, 0, 2098, 2104,
	1254, 0, 2088, 0, 0, 0, 0, 2299, 2300, 0,
	0, 0, 2306, 0, 0, 0, 0, 1865, 0, 0,
	2204, 1743, 0, 1746, 1747, 0, 0, 1792, 1755, 0,
	0, 0, 0, 0, 1749, 0, 2416, 2418, 2391, 2392,
	2393, 2394, 2395, 2396, 299, 1299, 1300, 0, 2226, 0,
	1438, 0, 2315, 2317, 2223, 0, 2241, 2242, 2243, 2240,
	2264, 0, 2272, 2267, 2275, 2268, 2270, 2269, 1834, 1721,
	0, 0, 2287, 1736, 0, 2331, 0, 1865, 0, 0,
	0, 2431, 2448, 0, 2438, 0, 0, 0, 0, 0,
	2468, 2475, 2484, 0, 2484, 2479, 0, 2481, 2398, 0,
	0, 0, 0, 1959, 0, 1731, 1960, 1961, 0, 0,
	1715, 1718, 0, 1800, 1859, 0, 0, 1804, 0, 0,
	2070, 0, 0, 1858, 1902, 0, 0, 0, 0, 1915,
	0, 1921, 1758, -2, 0, 1923, 0, 1919, 0, 1926,
	1949, 2408, 2409, 2078, 0, 0, 0, 1933, 1941, 1934,
	1942, 1954, 1955, 0, 0, 1956, 2401, 0, 2405, 2406,
	2407, 1739, 1741, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2041, 0, 1876, 1966, 0,
	2045, 0, 1878, 1966, 0, 2265, 0, 2210, 0, 2319,
	0, 2322, 2024, 0, 0, 0, 0, 0, 2454, 0,
	2449, 1891, 0, 2491, 2489, 2490, 0, 0, 2059, 0,
	0, 0, 0, 0, 0, 0, 0, 2310, 0, 2248,
	0, 0, 0, 2009, 0, 0, 68, 1282, 1284, 1280,
	1978, 2295, 0, 2329, 0, 2562, 0, 1672, 1673, 2558,
	0, 1398, 1062, -2, 0, 0, -2, 0, 0, -2,
	0, 0, 1123, 1125, -2, 1234, 1236, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1129, 1130, 0, 0, 0, 1320, 0, -2, 0,
	1210, 0, -2, 1208, 1196, 1202, 0, 1186, 0, 1192,
	0, 0, 0, 0, 1194, 1195, 2558, 1177, 0, 1675,
	0, 0, 0, 1522, 1523, 0, 1529, 1531, 0, 1538,
	0, 1345, 0, 0, 0, 0, 0, 1371, 1375, 1372,
	1373, 1407, 0, 1348, 1352, 1354, 1356, 1365, 1422, 0,
	0, 500, 0, 1505, 0, 1561, 1786, 0, 1621, 1836,
	0, 1694, 1698, 1844, 1835, 0, 0, 1722, 1724, 1725,
	1744, 0, 1692, 0, 0, 2200, 1865, 2230, 0, 0,
	2125, 0, 0, 2128, 2126, 0, 0, 0, 0, 2137,
	2138, 2092, 2094, 2095, 2096, 2097, 0, 0, 2163, 2156,
	2160, 0, 0, 2304, 0, 2308, 0, 2309, 0, 2536,
	0, 0, 2333, 0, 1748, 1750, 1791, 2398, 2398, 0,
	1796, 2196, 0, 1756, 0, 1751, 1752, 0, 1435, 1436,
	0, 2227, 0, 2225, 2238, 0, 2276, 0, 0, 1692,
	0, 0, 0, 2292, 0, 2323, 0, 1850, 1843, 0,
	2180, 2181, 0, 2426, 0, 2452, 0, 2440, 2442, 2443,
	2444, 2445, 2446, 2455, 2458, 2463, 2466, 0, 2476, 2477,
	2478, 2480, 0, 2485, 0, 0, 0, 2047, 2053, 0,
	1899, 0, 1736, 1714, 0, 1716, 1717, 2070, 0, 2071,
	0, 2073, 0, 0, 1853, 0, 1806, 0, 0, 1811,
	0, 1668, 1668, 0, 0, 1906, 1916, 1619, 1762, 0,
	0, 0, 0, 1910, 1912, 1913, 1911, 0, 1759, 0,
	0, 0, 0, 68, 68, 2080, 2081, 2084, 1957, 2413,
	2403, 2036, 0, 0, 0, 0, 2044, 0, 0, 2038,
	2049, 2040, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2021, 2020, 68, 2070, 0, 0, 2519, 2504, 0,
	0, 0, 2520, 2521, 0, 0, 2027, 2437, 0, 0,
	0, 0, 2057, 2058, 2294, 2461, 2064, 2065, 2066, 2067,
	68, 2313, 0, 0, 71, 0, 0, 0, 0, 0,
	0, 1972, 0, 2330, 0, 1330, 0, 2543, -2, -2,
	0, 0, 0, -2, -2, 1233, 1235, -2, 1128, 1131,
	1132, 1133, 1134, 1135, 1136, -2, -2, -2, -2, -2,
	-2, 0, 0, 1213, -2, 1116, 1209, 1239, 1201, 1313,
	1187, 1189, 1190, 1331, 1392, 0, 0, 1660, 0, 0,
	1535, 1401, 1403, 1366, 0, 1368, 0, 0, 0, 1370,
	0, 0, 1350, 0, 1424, 1428, 0, 0, 0, 0,
	1464, 1504, 0, 1676, 1543, 1643, 1643, 0, 1545, 1558,
	0, 1561, 0, 1844, 0, 0, 0, 79, 0, 1720,
	0, 1726, 0, 1836, 0, 1721, 0, 2191, 0, 0,
	0, 0, 2085, 0, 1429, 0, 1250, 0, -2, 2120,
	0, 2121, 2131, 2108, 0, 2173, 0, 2190, 0, 2301,
	0, 0, 0, 2538, 0, 0, 0, 2203, 1745, 0,
	1852, 1852, 0, 1820, 0, 1757, 0, 1437, 2318, 0,
	1737, 0, 0, 0, 0, 1736, 0, 0, 0, 2328,
	0, 0, 0, 0, 0, 2454, 2447, 0, 0, 0,
	2500, 2500, 0, 0, 0, 0, 1901, 1744, 1712, 1713,
	1802, 1816, 2072, 2076, 2074, 2075, 2077, 1816, 0, 1816,
	0, 0, 1662, 65, 0, 1663, 0, 1903, 0, 0,
	1763, 1904, 0, 1908, 0, 1438, 1761, 1909, 1918, 1925,
	0, 0, 0, 1890, 0, 1890, 0, 0, 2051, 2042,
	0, 0, 0, 2055, 2046, 0, 2211, 2321, 2025, 2026,
	0, 0, 0, 2510, 0, 0, 0, 0, 0, 1892,
	0, 2069, 2311, 2312, 0, 2256, 2257, 2010, 0, 0,
	2260, 2296, 1296, 2557, 0, 2541, 2542, -2, -2, -2,
	1239, 1212, 1211, 0, 1395, 0, 0, 1653, 1399, 0,
	1656, 0, 1367, 0, 1378, 1369, 0, 1408, 1423, 0,
	1426, 0, 0, 1441, 0, 139, 0, 1445, 0, 0,
	1466, 1503, 1542, 1544, 0, 0, 0, 1638, 0, 1560,
	1562, 1563, 1624, 1624, 1566, 1567, 1624, 1624, 0, 0,
	0, 1577, 1585, 1399, 1556, 79, 0, 99, 1699, 1702,
	1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1700,
	1848, 0, 0, 0, 1723, 1744, 1844, 1834, 1836, 1721,
	0, 0, 0, 0, 0, 1859, 0, 2111, 1431, 2132,
	2124, 0, 2129, 2130, 0, 2109, 2179, 2175, 2162, 2164,
	0, 2167, 2168, 2070, 0, 2302, 2526, 0, 0, 2532,
	2537, 0, 0, 2535, 2200, 1865, 1793, 0, 1794, 1810,
	1825, 0, 1790, 0, 2503, 1735, 0, 1736, 0, 1834,
	1721, 2277, 0, 1736, 2331, 1849, 0, 0, 2427, 0,
	2436, 0, 2483, 2500, 2497, 0, 2496, 2525, 0, 0,
	0, 1742, 2398, 0, 2398, 0, 2398, 1812, 1813, 299,
	1671, 64, 1667, 1668, 1907, 1917, 0, 0, 2400, 2083,
	2048, 2054, 1881, 1889, 0, 1883, 0, 2050, 0, 1890,
	0, 0, 2505, 2515, 2515, 2508, 0, 2522, 0, 0,
	0, 2451, 2028, 2252, 0, 0, 0, 2544, 2546, 2548,
	2549, 2550, 2551, 2552, 0, 169, 355, 456, 1214, 1188,
	1386, 0, 0, 0, 0, 1655, 1661, 1524, 0, 1406,
	1421, 1425, 0, 0, 1451, 0, 1442, 0, 1443, 1439,
	1440, 0, 0, 0, 1448, 1468, 0, 0, 0, 1642,
	0, 1640, 0, 0, 0, 0, 0, 0, 0, 1576,
	1559, 0, 1579, 1580, 1581, 1582, 1583, 0, 1546, 1848,
	0, 1833, 1850, 0, 77, 78, 0, 1727, 79, 1836,
	1844, 0, 2197, 0, 0, 2200, 1861, 0, 1430, 2125,
	2127, 2122, 0, 0, 0, 2174, 2165, 1624, 2169, 2170,
	0, 2189, 0, 0, 2539, 2540, 2192, 0, 0, 1795,
	0, 1797, 1821, 1822, 0, 1817, 1818, 1819, 1798, 0,
	0, 0, 0, 1738, 2288, 1736, 0, 0, 0, 2293,
	2324, 2419, 0, 0, 2429, 2459, 2495, 2498, 2499, 0,
	1733, 0, 0, 0, 1852, 0, 1852, 2196, 1852, 0,
	1674, 1671, 1664, 0, 1790, 1920, 0, 0, 0, 2052,
	1885, 0, 2056, 1788, 0, 1788, 0, 2516, 0, 0,
	0, 2011, 2013, 2012, 0, 2553, 0, 0, 0, 0,
	0, 0, 1399, 1411, 0, 1449, 0, 1453, 0, 1444,
	1446, 0, 1447, 0, 0, 1465, 1502, 1633, 1634, 0,
	0, 1645, 1635, 0, 0, 0, 1564, 1565, 1568, 1569,
	1570, 1571, 0, 1574, 1575, 1578, 0, 1586, 1588, 1850,
	100, 1679, 0, 0, 1838, 1668, 1668, 0, 1848, 1844,
	79, 1836, 2198, 2199, 2193, 1755, 0, 0, 2086, 0,
	0, 2172, 2176, 2177, 0, 0, 0, 0, 0, 0,
	1809, 1823, 0, 1824, 0, 0, 0, 0, 0, 0,
	2502, 2290, 0, 0, 1736, 0, 2428, 0, 1728, 0,
	1732, 1729, 0, 2070, 0, 2070, 1820, 1399, 0, 1665,
	1674, 1905, 1914, 2399, 1890, 1890, 0, 2506, 1787, 2513,
	0, 2507, 0, 0, 2523, 2524, 2453, 2547, 0, 0,
	0, 0, 0, 0, 1652, 1377, 0, 1427, 1452, 1455,
	1456, 0, 0, 0, 1461, 0, 1454, 0, 0, 1467,
	1469, 0, 1636, 0, 1637, 1646, 0, 0, 0, 0,
	1639, 1641, 1572, 1573, 1584, 0, 1677, 1845, 0, 0,
	1837, 0, 65, 65, 0, 1850, 79, 1848, 1844, 1865,
	0, 0, 0, 0, 2166, 2171, 0, 2529, 2530, 2200,
	1851, 1826, 0, 1829, 1830, 0, 1827, 1789, 1799, 2501,
	1736, 0, 2278, 2420, 2430, 1734, 0, 1803, 1815, 1805,
	1825, 2070, 1814, 1666, 1882, 1884, 1890, 0, 2509, 2517,
	2555, 2554, 0, 0, 0, 0, 1410, 1457, 1458, 1459,
	1460, 1462, 0, 0, 0, 0, 1644, 0, 0, 1650,
	0, 1587, 1846, 1847, 1839, 1840, 1841, 1668, 1681, 1848,
	1850, 79, 1850, 0, 1862, 1861, 0, 2178, 2179, 0,
	0, 2194, 1828, 2196, 2196, 2289, 1736, 0, 2070, 1808,
	1886, 2514, 2556, 0, 0, 0, 0, 0, 0, 1508,
	0, -2, 1470, 1471, 0, 0, 0, 65, 1850, 1680,
	1848, 1399, 1860, 0, 1755, 2184, 0, 0, 0, 1831,
	1832, 2291, 0, 1807, 0, 1394, 1390, 1391, 0, 1487,
	0, 0, 1517, 0, 1506, 1647, 1648, 0, 1651, 1842,
	1678, 1850, 1854, 1863, 1865, 0, 2182, 2185, 2186, 2187,
	2188, 0, 0, 0, 1730, 0, 1450, 0, 0, 0,
	1473, 1474, 1475, 1476, 1477, 1478, 1481, 1509, 1510, 1496,
	1517, 1517, 0, 0, 0, 1682, 1850, 2150, 0, 0,
	0, 0, 0, 1463, 0, 1472, 1479, 1480, 1501, 0,
	0, 1496, 1487, 1516, 0, 0, 0, 1399, 2183, 0,
	0, 0, 0, 1486, 1485, 0, 0, 1488, 0, 1490,
	0, 0, 0, 1501, 1513, 0, 0, 1649, 1855, 2184,
	2527, 2528, 1393, 1511, 0, 1498, 1500, 1489, 1491, 0,
	1494, 0, 1495, 1485, 0, 0, 0, 0, 0, 0,
	1492, 1493, 1512, 1514, 0, 2151, 1482, 1483, 0, 0,
	0, 0, 1497, 1499, 1515, 0, 1484,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 539, 3, 3,
	532, 533, 537, 535, 542, 536, 534, 538, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 543, 541,
	526, 528, 527, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 530, 3, 531, 540,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var yyTok3 = [...]uint16{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 464, 57807, 465, 57808, 466, 57809, 467,
	57810, 468, 57811, 469, 57812, 470, 57813, 471, 57814, 472,
	57815, 473, 57816, 474, 57817, 475, 57818, 476, 57819, 477,
	57820, 478, 57821, 479, 57822, 480, 57823, 481, 57824, 482,
	57825, 483, 57826, 484, 57827, 485, 57828, 486, 57829, 487,
	57830, 488, 57831, 489, 57832, 490, 57833, 491, 57834, 492,
	57835, 493, 57836, 494, 57837, 495, 57838, 496, 57839, 497,
	57840, 498, 57841, 499, 57842, 500, 57843, 501, 57844, 502,
	57845, 503, 57846, 504, 57847, 505, 57848, 506, 57849, 507,
	57850, 508, 57851, 509, 57852, 510, 57853, 511, 57854, 512,
	57855, 513, 57856, 514, 57857, 515, 57858, 516, 57859, 517,
	57860, 518, 57861, 519, 57862, 520, 57863, 521, 57864, 522,
	57865, 523, 57866, 524, 57867, 525, 57868, 529, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:496
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:511
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:519
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:534
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:545
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:546
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:547
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:548
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:549
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:550
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:551
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:552
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:553
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:554
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:555
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:556
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:557
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:558
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:559
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:560
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:561
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:562
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:563
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:564
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:565
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:566
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:567
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:568
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:569
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:570
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:571
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:572
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:573
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:574
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:575
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:576
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:577
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:578
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:579
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:580
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:581
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:582
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:583
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:584
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:585
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:586
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:587
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:588
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:589
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:590
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:591
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:592
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:593
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:594
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:595
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:596
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:597
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:598
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:599
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:600
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:602
		{
			yyVAL.stmt = nil
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:613
		{
			yyVAL.str = yyDollar[1].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:614
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:618
		{
			yyVAL.list = yyDollar[1].list
		}
	case 65:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:619
		{
			yyVAL.list = nil
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:623
		{
			yyVAL.dropBehav = ast.DropCascade
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:624
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:625
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:629
		{
			yyVAL.ival = 1
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:630
		{
			yyVAL.ival = 0
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:634
		{
			yyVAL.ival = 1
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:635
		{
			yyVAL.ival = 0
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:639
		{
			yyVAL.bval = true
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:640
		{
			yyVAL.bval = false
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:644
		{
			yyVAL.bval = true
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:645
		{
			yyVAL.bval = false
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:649
		{
			yyVAL.list = yyDollar[2].list
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:650
		{
			yyVAL.list = nil
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:651
		{
			yyVAL.list = nil
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:660
		{
			yyVAL.str = yyDollar[1].str
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:661
		{
			yyVAL.str = yyDollar[1].str
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:662
		{
			yyVAL.str = yyDollar[1].str
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:666
		{
			yyVAL.str = yyDollar[1].str
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:667
		{
			yyVAL.str = yyDollar[1].str
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:668
		{
			yyVAL.str = yyDollar[1].str
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:669
		{
			yyVAL.str = yyDollar[1].str
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:670
		{
			yyVAL.str = yyDollar[1].str
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:673
		{
			yyVAL.str = yyDollar[1].str
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:674
		{
			yyVAL.str = yyDollar[1].str
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:677
		{
			yyVAL.str = yyDollar[1].str
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:682
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:686
		{
			list := yyDollar[1].list
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = list
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:695
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:699
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:707
		{
			yyVAL.rangevar = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:714
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list.Items) == 1 {
				if str, ok := yyDollar[2].list.Items[0].(*ast.String); ok {
					yyVAL.rangevar = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.rangevar = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.rangevar = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:743
		{
			yyVAL.list = yyDollar[2].list
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:744
		{
			yyVAL.list = nil
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:749
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:753
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:766
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:772
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:778
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:784
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:790
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:797
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:804
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_UNLOGGED
			yyVAL.node = rangeVar
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:810
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:816
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:825
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:829
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				nodes.Append(item)
			}
			yyVAL.list = nodes
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:841
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:845
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].list)
			yyVAL.list = list
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:855
		{
			yyVAL.str = "abort"
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:856
		{
			yyVAL.str = "absent"
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:857
		{
			yyVAL.str = "absolute"
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:858
		{
			yyVAL.str = "access"
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:859
		{
			yyVAL.str = "action"
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:860
		{
			yyVAL.str = "add"
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:861
		{
			yyVAL.str = "admin"
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:862
		{
			yyVAL.str = "after"
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:863
		{
			yyVAL.str = "aggregate"
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:864
		{
			yyVAL.str = "also"
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:865
		{
			yyVAL.str = "alter"
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:866
		{
			yyVAL.str = "always"
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:867
		{
			yyVAL.str = "asensitive"
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:868
		{
			yyVAL.str = "assertion"
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:869
		{
			yyVAL.str = "assignment"
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:870
		{
			yyVAL.str = "at"
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:871
		{
			yyVAL.str = "atomic"
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:872
		{
			yyVAL.str = "attach"
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:873
		{
			yyVAL.str = "attribute"
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:874
		{
			yyVAL.str = "backward"
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:875
		{
			yyVAL.str = "before"
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:876
		{
			yyVAL.str = "begin"
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:877
		{
			yyVAL.str = "breadth"
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:878
		{
			yyVAL.str = "by"
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:879
		{
			yyVAL.str = "cache"
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:880
		{
			yyVAL.str = "call"
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:881
		{
			yyVAL.str = "called"
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:882
		{
			yyVAL.str = "cascade"
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:883
		{
			yyVAL.str = "cascaded"
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:884
		{
			yyVAL.str = "catalog"
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:885
		{
			yyVAL.str = "chain"
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:886
		{
			yyVAL.str = "characteristics"
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:887
		{
			yyVAL.str = "checkpoint"
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:888
		{
			yyVAL.str = "class"
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:889
		{
			yyVAL.str = "close"
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:890
		{
			yyVAL.str = "cluster"
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:891
		{
			yyVAL.str = "columns"
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:892
		{
			yyVAL.str = "comment"
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:893
		{
			yyVAL.str = "comments"
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:894
		{
			yyVAL.str = "commit"
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:895
		{
			yyVAL.str = "committed"
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:896
		{
			yyVAL.str = "compression"
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:897
		{
			yyVAL.str = "conditional"
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:898
		{
			yyVAL.str = "configuration"
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:899
		{
			yyVAL.str = "conflict"
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:900
		{
			yyVAL.str = "connection"
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:901
		{
			yyVAL.str = "constraints"
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:902
		{
			yyVAL.str = "content"
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:903
		{
			yyVAL.str = "continue"
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:904
		{
			yyVAL.str = "conversion"
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:905
		{
			yyVAL.str = "copy"
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:906
		{
			yyVAL.str = "cost"
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:907
		{
			yyVAL.str = "csv"
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:908
		{
			yyVAL.str = "cube"
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:909
		{
			yyVAL.str = "current"
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:910
		{
			yyVAL.str = "cursor"
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:911
		{
			yyVAL.str = "cycle"
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:912
		{
			yyVAL.str = "data"
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:913
		{
			yyVAL.str = "database"
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:914
		{
			yyVAL.str = "day"
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:915
		{
			yyVAL.str = "deallocate"
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:916
		{
			yyVAL.str = "declare"
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:917
		{
			yyVAL.str = "defaults"
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:918
		{
			yyVAL.str = "deferred"
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:919
		{
			yyVAL.str = "definer"
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:920
		{
			yyVAL.str = "delete"
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:921
		{
			yyVAL.str = "delimiter"
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:922
		{
			yyVAL.str = "delimiters"
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:923
		{
			yyVAL.str = "depends"
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:924
		{
			yyVAL.str = "depth"
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:925
		{
			yyVAL.str = "detach"
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:926
		{
			yyVAL.str = "dictionary"
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:927
		{
			yyVAL.str = "disable"
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:928
		{
			yyVAL.str = "discard"
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:929
		{
			yyVAL.str = "document"
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:930
		{
			yyVAL.str = "domain"
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:931
		{
			yyVAL.str = "double"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:932
		{
			yyVAL.str = "drop"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:933
		{
			yyVAL.str = "each"
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:934
		{
			yyVAL.str = "empty"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:935
		{
			yyVAL.str = "enable"
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:936
		{
			yyVAL.str = "encoding"
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:937
		{
			yyVAL.str = "encrypted"
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:938
		{
			yyVAL.str = "enum"
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:939
		{
			yyVAL.str = "error"
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:940
		{
			yyVAL.str = "escape"
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:941
		{
			yyVAL.str = "event"
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:942
		{
			yyVAL.str = "exclude"
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:943
		{
			yyVAL.str = "excluding"
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:944
		{
			yyVAL.str = "exclusive"
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:945
		{
			yyVAL.str = "execute"
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:946
		{
			yyVAL.str = "explain"
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:947
		{
			yyVAL.str = "expression"
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:948
		{
			yyVAL.str = "extension"
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:949
		{
			yyVAL.str = "external"
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:950
		{
			yyVAL.str = "family"
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:951
		{
			yyVAL.str = "filter"
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:952
		{
			yyVAL.str = "finalize"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:953
		{
			yyVAL.str = "first"
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:954
		{
			yyVAL.str = "following"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:955
		{
			yyVAL.str = "force"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:956
		{
			yyVAL.str = "format"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:957
		{
			yyVAL.str = "forward"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:958
		{
			yyVAL.str = "function"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:959
		{
			yyVAL.str = "functions"
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:960
		{
			yyVAL.str = "generated"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:961
		{
			yyVAL.str = "global"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:962
		{
			yyVAL.str = "granted"
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:963
		{
			yyVAL.str = "groups"
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:964
		{
			yyVAL.str = "handler"
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:965
		{
			yyVAL.str = "header"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:966
		{
			yyVAL.str = "hold"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:967
		{
			yyVAL.str = "hour"
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:968
		{
			yyVAL.str = "identity"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:969
		{
			yyVAL.str = "if"
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:970
		{
			yyVAL.str = "immediate"
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:971
		{
			yyVAL.str = "immutable"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:972
		{
			yyVAL.str = "implicit"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:973
		{
			yyVAL.str = "import"
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:974
		{
			yyVAL.str = "include"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:975
		{
			yyVAL.str = "including"
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:976
		{
			yyVAL.str = "increment"
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:977
		{
			yyVAL.str = "indent"
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:978
		{
			yyVAL.str = "index"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:979
		{
			yyVAL.str = "indexes"
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:980
		{
			yyVAL.str = "inherit"
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:981
		{
			yyVAL.str = "inherits"
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:982
		{
			yyVAL.str = "inline"
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:983
		{
			yyVAL.str = "input"
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:984
		{
			yyVAL.str = "insensitive"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:985
		{
			yyVAL.str = "insert"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:986
		{
			yyVAL.str = "instead"
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:987
		{
			yyVAL.str = "invoker"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:988
		{
			yyVAL.str = "isolation"
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:989
		{
			yyVAL.str = "keep"
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:990
		{
			yyVAL.str = "key"
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:991
		{
			yyVAL.str = "keys"
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:992
		{
			yyVAL.str = "label"
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:993
		{
			yyVAL.str = "language"
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:994
		{
			yyVAL.str = "large"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:995
		{
			yyVAL.str = "last"
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:996
		{
			yyVAL.str = "leakproof"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:997
		{
			yyVAL.str = "level"
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:998
		{
			yyVAL.str = "listen"
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:999
		{
			yyVAL.str = "load"
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1000
		{
			yyVAL.str = "local"
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1001
		{
			yyVAL.str = "location"
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1002
		{
			yyVAL.str = "lock"
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1003
		{
			yyVAL.str = "locked"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1004
		{
			yyVAL.str = "logged"
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1005
		{
			yyVAL.str = "mapping"
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1006
		{
			yyVAL.str = "match"
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1007
		{
			yyVAL.str = "matched"
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1008
		{
			yyVAL.str = "materialized"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1009
		{
			yyVAL.str = "maxvalue"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1010
		{
			yyVAL.str = "merge"
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1011
		{
			yyVAL.str = "method"
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1012
		{
			yyVAL.str = "minute"
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1013
		{
			yyVAL.str = "minvalue"
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1014
		{
			yyVAL.str = "mode"
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1015
		{
			yyVAL.str = "month"
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1016
		{
			yyVAL.str = "move"
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1017
		{
			yyVAL.str = "name"
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1018
		{
			yyVAL.str = "names"
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1019
		{
			yyVAL.str = "nested"
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1020
		{
			yyVAL.str = "new"
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1021
		{
			yyVAL.str = "next"
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1022
		{
			yyVAL.str = "nfc"
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1023
		{
			yyVAL.str = "nfd"
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1024
		{
			yyVAL.str = "nfkc"
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1025
		{
			yyVAL.str = "nfkd"
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1026
		{
			yyVAL.str = "no"
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1027
		{
			yyVAL.str = "normalized"
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1028
		{
			yyVAL.str = "nothing"
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1029
		{
			yyVAL.str = "notify"
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1030
		{
			yyVAL.str = "nowait"
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1031
		{
			yyVAL.str = "nulls"
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1032
		{
			yyVAL.str = "object"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1033
		{
			yyVAL.str = "of"
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1034
		{
			yyVAL.str = "off"
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1035
		{
			yyVAL.str = "oids"
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1036
		{
			yyVAL.str = "old"
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1037
		{
			yyVAL.str = "omit"
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1038
		{
			yyVAL.str = "operator"
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1039
		{
			yyVAL.str = "option"
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1040
		{
			yyVAL.str = "options"
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1041
		{
			yyVAL.str = "ordinality"
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1042
		{
			yyVAL.str = "others"
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1043
		{
			yyVAL.str = "over"
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1044
		{
			yyVAL.str = "overriding"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1045
		{
			yyVAL.str = "owned"
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1046
		{
			yyVAL.str = "owner"
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1047
		{
			yyVAL.str = "parallel"
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1048
		{
			yyVAL.str = "parameter"
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1049
		{
			yyVAL.str = "parser"
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1050
		{
			yyVAL.str = "partial"
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1051
		{
			yyVAL.str = "partition"
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1052
		{
			yyVAL.str = "passing"
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1053
		{
			yyVAL.str = "password"
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1054
		{
			yyVAL.str = "path"
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1055
		{
			yyVAL.str = "plan"
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1056
		{
			yyVAL.str = "plans"
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1057
		{
			yyVAL.str = "policy"
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1058
		{
			yyVAL.str = "preceding"
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1059
		{
			yyVAL.str = "prepare"
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1060
		{
			yyVAL.str = "prepared"
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1061
		{
			yyVAL.str = "preserve"
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1062
		{
			yyVAL.str = "prior"
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1063
		{
			yyVAL.str = "privileges"
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1064
		{
			yyVAL.str = "procedural"
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1065
		{
			yyVAL.str = "procedure"
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1066
		{
			yyVAL.str = "procedures"
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1067
		{
			yyVAL.str = "program"
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1068
		{
			yyVAL.str = "publication"
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1069
		{
			yyVAL.str = "quote"
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1070
		{
			yyVAL.str = "quotes"
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1071
		{
			yyVAL.str = "range"
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1072
		{
			yyVAL.str = "read"
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1073
		{
			yyVAL.str = "reassign"
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1074
		{
			yyVAL.str = "recheck"
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1075
		{
			yyVAL.str = "recursive"
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1076
		{
			yyVAL.str = "ref"
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1077
		{
			yyVAL.str = "referencing"
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1078
		{
			yyVAL.str = "refresh"
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1079
		{
			yyVAL.str = "reindex"
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1080
		{
			yyVAL.str = "relative"
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1081
		{
			yyVAL.str = "release"
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1082
		{
			yyVAL.str = "rename"
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1083
		{
			yyVAL.str = "repeatable"
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1084
		{
			yyVAL.str = "replace"
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1085
		{
			yyVAL.str = "replica"
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1086
		{
			yyVAL.str = "reset"
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1087
		{
			yyVAL.str = "restart"
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1088
		{
			yyVAL.str = "restrict"
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1089
		{
			yyVAL.str = "return"
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1090
		{
			yyVAL.str = "returns"
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1091
		{
			yyVAL.str = "revoke"
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1092
		{
			yyVAL.str = "role"
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1093
		{
			yyVAL.str = "rollback"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1094
		{
			yyVAL.str = "rollup"
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1095
		{
			yyVAL.str = "routine"
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1096
		{
			yyVAL.str = "routines"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1097
		{
			yyVAL.str = "rows"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1098
		{
			yyVAL.str = "rule"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1099
		{
			yyVAL.str = "savepoint"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1100
		{
			yyVAL.str = "scalar"
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1101
		{
			yyVAL.str = "schema"
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1102
		{
			yyVAL.str = "schemas"
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1103
		{
			yyVAL.str = "scroll"
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1104
		{
			yyVAL.str = "search"
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1105
		{
			yyVAL.str = "second"
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1106
		{
			yyVAL.str = "security"
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1107
		{
			yyVAL.str = "sequence"
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1108
		{
			yyVAL.str = "sequences"
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1109
		{
			yyVAL.str = "serializable"
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1110
		{
			yyVAL.str = "server"
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1111
		{
			yyVAL.str = "session"
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1112
		{
			yyVAL.str = "set"
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1113
		{
			yyVAL.str = "sets"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1114
		{
			yyVAL.str = "share"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1115
		{
			yyVAL.str = "show"
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1116
		{
			yyVAL.str = "simple"
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1117
		{
			yyVAL.str = "skip"
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1118
		{
			yyVAL.str = "snapshot"
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1119
		{
			yyVAL.str = "source"
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1120
		{
			yyVAL.str = "sql"
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1121
		{
			yyVAL.str = "stable"
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1122
		{
			yyVAL.str = "standalone"
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1123
		{
			yyVAL.str = "start"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1124
		{
			yyVAL.str = "statement"
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1125
		{
			yyVAL.str = "statistics"
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1126
		{
			yyVAL.str = "stdin"
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1127
		{
			yyVAL.str = "stdout"
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1128
		{
			yyVAL.str = "storage"
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1129
		{
			yyVAL.str = "stored"
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1130
		{
			yyVAL.str = "strict"
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1131
		{
			yyVAL.str = "string"
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1132
		{
			yyVAL.str = "strip"
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1133
		{
			yyVAL.str = "subscription"
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1134
		{
			yyVAL.str = "support"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1135
		{
			yyVAL.str = "sysid"
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1136
		{
			yyVAL.str = "system"
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1137
		{
			yyVAL.str = "tables"
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1138
		{
			yyVAL.str = "tablespace"
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1139
		{
			yyVAL.str = "target"
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1140
		{
			yyVAL.str = "temp"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1141
		{
			yyVAL.str = "template"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1142
		{
			yyVAL.str = "temporary"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1143
		{
			yyVAL.str = "text"
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1144
		{
			yyVAL.str = "ties"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1145
		{
			yyVAL.str = "transaction"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1146
		{
			yyVAL.str = "transform"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1147
		{
			yyVAL.str = "trigger"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1148
		{
			yyVAL.str = "truncate"
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1149
		{
			yyVAL.str = "trusted"
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1150
		{
			yyVAL.str = "type"
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1151
		{
			yyVAL.str = "types"
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1152
		{
			yyVAL.str = "uescape"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1153
		{
			yyVAL.str = "unbounded"
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1154
		{
			yyVAL.str = "uncommitted"
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1155
		{
			yyVAL.str = "unconditional"
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1156
		{
			yyVAL.str = "unencrypted"
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1157
		{
			yyVAL.str = "unknown"
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1158
		{
			yyVAL.str = "unlisten"
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1159
		{
			yyVAL.str = "unlogged"
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1160
		{
			yyVAL.str = "until"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1161
		{
			yyVAL.str = "update"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1162
		{
			yyVAL.str = "vacuum"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1163
		{
			yyVAL.str = "valid"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1164
		{
			yyVAL.str = "validate"
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1165
		{
			yyVAL.str = "validator"
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1166
		{
			yyVAL.str = "value"
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1167
		{
			yyVAL.str = "varying"
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1168
		{
			yyVAL.str = "version"
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1169
		{
			yyVAL.str = "view"
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1170
		{
			yyVAL.str = "views"
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1171
		{
			yyVAL.str = "volatile"
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1172
		{
			yyVAL.str = "whitespace"
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1173
		{
			yyVAL.str = "within"
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1174
		{
			yyVAL.str = "without"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1175
		{
			yyVAL.str = "work"
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1176
		{
			yyVAL.str = "wrapper"
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1177
		{
			yyVAL.str = "write"
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1178
		{
			yyVAL.str = "xml"
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1179
		{
			yyVAL.str = "year"
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1180
		{
			yyVAL.str = "yes"
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1181
		{
			yyVAL.str = "zone"
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1195
		{
			yyVAL.str = "between"
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1196
		{
			yyVAL.str = "bigint"
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1197
		{
			yyVAL.str = "bit"
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1198
		{
			yyVAL.str = "boolean"
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1199
		{
			yyVAL.str = "char"
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1200
		{
			yyVAL.str = "character"
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1201
		{
			yyVAL.str = "coalesce"
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1202
		{
			yyVAL.str = "dec"
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1203
		{
			yyVAL.str = "decimal"
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1204
		{
			yyVAL.str = "exists"
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1205
		{
			yyVAL.str = "extract"
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1206
		{
			yyVAL.str = "float"
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1207
		{
			yyVAL.str = "greatest"
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1208
		{
			yyVAL.str = "grouping"
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1209
		{
			yyVAL.str = "inout"
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1210
		{
			yyVAL.str = "int"
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1211
		{
			yyVAL.str = "integer"
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1212
		{
			yyVAL.str = "interval"
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1213
		{
			yyVAL.str = "json"
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1214
		{
			yyVAL.str = "json_array"
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1215
		{
			yyVAL.str = "json_arrayagg"
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1216
		{
			yyVAL.str = "json_exists"
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1217
		{
			yyVAL.str = "json_object"
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1218
		{
			yyVAL.str = "json_objectagg"
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1219
		{
			yyVAL.str = "json_query"
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1220
		{
			yyVAL.str = "json_scalar"
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1221
		{
			yyVAL.str = "json_serialize"
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1222
		{
			yyVAL.str = "json_table"
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1223
		{
			yyVAL.str = "json_value"
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1224
		{
			yyVAL.str = "least"
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1225
		{
			yyVAL.str = "merge_action"
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1226
		{
			yyVAL.str = "national"
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1227
		{
			yyVAL.str = "nchar"
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1228
		{
			yyVAL.str = "none"
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1229
		{
			yyVAL.str = "normalize"
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1230
		{
			yyVAL.str = "nullif"
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1231
		{
			yyVAL.str = "numeric"
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1232
		{
			yyVAL.str = "out"
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1233
		{
			yyVAL.str = "overlay"
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1234
		{
			yyVAL.str = "position"
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1235
		{
			yyVAL.str = "precision"
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1236
		{
			yyVAL.str = "real"
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1237
		{
			yyVAL.str = "row"
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1238
		{
			yyVAL.str = "setof"
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1239
		{
			yyVAL.str = "smallint"
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1240
		{
			yyVAL.str = "substring"
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1241
		{
			yyVAL.str = "time"
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1242
		{
			yyVAL.str = "timestamp"
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1243
		{
			yyVAL.str = "treat"
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1244
		{
			yyVAL.str = "trim"
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1245
		{
			yyVAL.str = "values"
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1246
		{
			yyVAL.str = "varchar"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1247
		{
			yyVAL.str = "xmlattributes"
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1248
		{
			yyVAL.str = "xmlconcat"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1249
		{
			yyVAL.str = "xmlelement"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1250
		{
			yyVAL.str = "xmlexists"
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1251
		{
			yyVAL.str = "xmlforest"
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1252
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1253
		{
			yyVAL.str = "xmlparse"
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1254
		{
			yyVAL.str = "xmlpi"
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1255
		{
			yyVAL.str = "xmlroot"
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1256
		{
			yyVAL.str = "xmlserialize"
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1257
		{
			yyVAL.str = "xmltable"
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1271
		{
			yyVAL.str = "authorization"
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1272
		{
			yyVAL.str = "binary"
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1273
		{
			yyVAL.str = "collation"
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1274
		{
			yyVAL.str = "concurrently"
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1275
		{
			yyVAL.str = "cross"
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1276
		{
			yyVAL.str = "current_schema"
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1277
		{
			yyVAL.str = "freeze"
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1278
		{
			yyVAL.str = "full"
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1279
		{
			yyVAL.str = "ilike"
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1280
		{
			yyVAL.str = "inner"
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1281
		{
			yyVAL.str = "is"
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1282
		{
			yyVAL.str = "isnull"
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1283
		{
			yyVAL.str = "join"
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1284
		{
			yyVAL.str = "left"
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1285
		{
			yyVAL.str = "like"
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1286
		{
			yyVAL.str = "natural"
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1287
		{
			yyVAL.str = "notnull"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1288
		{
			yyVAL.str = "outer"
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1289
		{
			yyVAL.str = "overlaps"
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1290
		{
			yyVAL.str = "right"
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1291
		{
			yyVAL.str = "similar"
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1292
		{
			yyVAL.str = "tablesample"
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1293
		{
			yyVAL.str = "verbose"
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1303
		{
			yyVAL.str = "all"
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1304
		{
			yyVAL.str = "analyse"
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1305
		{
			yyVAL.str = "analyze"
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1306
		{
			yyVAL.str = "and"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1307
		{
			yyVAL.str = "any"
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1308
		{
			yyVAL.str = "array"
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1309
		{
			yyVAL.str = "as"
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1310
		{
			yyVAL.str = "asc"
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1311
		{
			yyVAL.str = "asymmetric"
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1312
		{
			yyVAL.str = "both"
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1313
		{
			yyVAL.str = "case"
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1314
		{
			yyVAL.str = "cast"
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1315
		{
			yyVAL.str = "check"
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1316
		{
			yyVAL.str = "collate"
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1317
		{
			yyVAL.str = "column"
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1318
		{
			yyVAL.str = "constraint"
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1319
		{
			yyVAL.str = "create"
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1320
		{
			yyVAL.str = "current_catalog"
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1321
		{
			yyVAL.str = "current_date"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1322
		{
			yyVAL.str = "current_role"
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1323
		{
			yyVAL.str = "current_time"
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1324
		{
			yyVAL.str = "current_timestamp"
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1325
		{
			yyVAL.str = "current_user"
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1326
		{
			yyVAL.str = "default"
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1327
		{
			yyVAL.str = "deferrable"
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1328
		{
			yyVAL.str = "desc"
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1329
		{
			yyVAL.str = "distinct"
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1330
		{
			yyVAL.str = "do"
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1331
		{
			yyVAL.str = "else"
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1332
		{
			yyVAL.str = "end"
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1333
		{
			yyVAL.str = "except"
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1334
		{
			yyVAL.str = "false"
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1335
		{
			yyVAL.str = "fetch"
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1336
		{
			yyVAL.str = "for"
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1337
		{
			yyVAL.str = "foreign"
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1338
		{
			yyVAL.str = "from"
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1339
		{
			yyVAL.str = "grant"
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1340
		{
			yyVAL.str = "group"
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1341
		{
			yyVAL.str = "having"
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1342
		{
			yyVAL.str = "in"
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1343
		{
			yyVAL.str = "initially"
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1344
		{
			yyVAL.str = "intersect"
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1345
		{
			yyVAL.str = "into"
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1346
		{
			yyVAL.str = "lateral"
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1347
		{
			yyVAL.str = "leading"
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1348
		{
			yyVAL.str = "limit"
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1349
		{
			yyVAL.str = "localtime"
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1350
		{
			yyVAL.str = "localtimestamp"
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1351
		{
			yyVAL.str = "not"
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1352
		{
			yyVAL.str = "null"
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1353
		{
			yyVAL.str = "offset"
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1354
		{
			yyVAL.str = "on"
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1355
		{
			yyVAL.str = "only"
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1356
		{
			yyVAL.str = "or"
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1357
		{
			yyVAL.str = "order"
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1358
		{
			yyVAL.str = "placing"
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1359
		{
			yyVAL.str = "primary"
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1360
		{
			yyVAL.str = "references"
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1361
		{
			yyVAL.str = "returning"
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1362
		{
			yyVAL.str = "select"
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1363
		{
			yyVAL.str = "session_user"
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1364
		{
			yyVAL.str = "some"
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1365
		{
			yyVAL.str = "symmetric"
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1366
		{
			yyVAL.str = "system_user"
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1367
		{
			yyVAL.str = "table"
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1368
		{
			yyVAL.str = "then"
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1369
		{
			yyVAL.str = "to"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1370
		{
			yyVAL.str = "trailing"
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1371
		{
			yyVAL.str = "true"
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1372
		{
			yyVAL.str = "union"
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1373
		{
			yyVAL.str = "unique"
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1374
		{
			yyVAL.str = "user"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1375
		{
			yyVAL.str = "using"
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1376
		{
			yyVAL.str = "variadic"
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1377
		{
			yyVAL.str = "when"
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1378
		{
			yyVAL.str = "where"
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1379
		{
			yyVAL.str = "window"
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1380
		{
			yyVAL.str = "with"
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1393
		{
			yyVAL.str = "abort"
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1394
		{
			yyVAL.str = "absent"
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1395
		{
			yyVAL.str = "absolute"
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1396
		{
			yyVAL.str = "access"
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1397
		{
			yyVAL.str = "action"
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1398
		{
			yyVAL.str = "add"
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1399
		{
			yyVAL.str = "admin"
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1400
		{
			yyVAL.str = "after"
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1401
		{
			yyVAL.str = "aggregate"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1402
		{
			yyVAL.str = "all"
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1403
		{
			yyVAL.str = "also"
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1404
		{
			yyVAL.str = "alter"
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1405
		{
			yyVAL.str = "always"
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1406
		{
			yyVAL.str = "analyse"
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1407
		{
			yyVAL.str = "analyze"
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1408
		{
			yyVAL.str = "and"
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1409
		{
			yyVAL.str = "any"
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1410
		{
			yyVAL.str = "asc"
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1411
		{
			yyVAL.str = "asensitive"
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1412
		{
			yyVAL.str = "assertion"
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1413
		{
			yyVAL.str = "assignment"
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1414
		{
			yyVAL.str = "asymmetric"
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1415
		{
			yyVAL.str = "at"
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1416
		{
			yyVAL.str = "atomic"
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1417
		{
			yyVAL.str = "attach"
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1418
		{
			yyVAL.str = "attribute"
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1419
		{
			yyVAL.str = "authorization"
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1420
		{
			yyVAL.str = "backward"
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1421
		{
			yyVAL.str = "before"
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1422
		{
			yyVAL.str = "begin"
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1423
		{
			yyVAL.str = "between"
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1424
		{
			yyVAL.str = "bigint"
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1425
		{
			yyVAL.str = "binary"
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1426
		{
			yyVAL.str = "bit"
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1427
		{
			yyVAL.str = "boolean"
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1428
		{
			yyVAL.str = "both"
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1429
		{
			yyVAL.str = "breadth"
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1430
		{
			yyVAL.str = "by"
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1431
		{
			yyVAL.str = "cache"
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1432
		{
			yyVAL.str = "call"
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1433
		{
			yyVAL.str = "called"
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1434
		{
			yyVAL.str = "cascade"
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1435
		{
			yyVAL.str = "cascaded"
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1436
		{
			yyVAL.str = "case"
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1437
		{
			yyVAL.str = "cast"
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1438
		{
			yyVAL.str = "catalog"
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1439
		{
			yyVAL.str = "chain"
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1440
		{
			yyVAL.str = "characteristics"
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1441
		{
			yyVAL.str = "check"
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1442
		{
			yyVAL.str = "checkpoint"
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1443
		{
			yyVAL.str = "class"
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1444
		{
			yyVAL.str = "close"
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1445
		{
			yyVAL.str = "cluster"
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1446
		{
			yyVAL.str = "coalesce"
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1447
		{
			yyVAL.str = "collate"
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1448
		{
			yyVAL.str = "collation"
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1449
		{
			yyVAL.str = "column"
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1450
		{
			yyVAL.str = "columns"
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1451
		{
			yyVAL.str = "comment"
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1452
		{
			yyVAL.str = "comments"
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1453
		{
			yyVAL.str = "commit"
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1454
		{
			yyVAL.str = "committed"
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1455
		{
			yyVAL.str = "compression"
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1456
		{
			yyVAL.str = "concurrently"
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1457
		{
			yyVAL.str = "conditional"
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1458
		{
			yyVAL.str = "configuration"
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1459
		{
			yyVAL.str = "conflict"
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1460
		{
			yyVAL.str = "connection"
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1461
		{
			yyVAL.str = "constraint"
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1462
		{
			yyVAL.str = "constraints"
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1463
		{
			yyVAL.str = "content"
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1464
		{
			yyVAL.str = "continue"
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1465
		{
			yyVAL.str = "conversion"
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1466
		{
			yyVAL.str = "copy"
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1467
		{
			yyVAL.str = "cost"
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1468
		{
			yyVAL.str = "cross"
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1469
		{
			yyVAL.str = "csv"
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1470
		{
			yyVAL.str = "cube"
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1471
		{
			yyVAL.str = "current"
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1472
		{
			yyVAL.str = "current_catalog"
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1473
		{
			yyVAL.str = "current_date"
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1474
		{
			yyVAL.str = "current_role"
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1475
		{
			yyVAL.str = "current_schema"
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1476
		{
			yyVAL.str = "current_time"
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1477
		{
			yyVAL.str = "current_timestamp"
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1478
		{
			yyVAL.str = "current_user"
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1479
		{
			yyVAL.str = "cursor"
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1480
		{
			yyVAL.str = "cycle"
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1481
		{
			yyVAL.str = "data"
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1482
		{
			yyVAL.str = "database"
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1483
		{
			yyVAL.str = "deallocate"
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1484
		{
			yyVAL.str = "dec"
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1485
		{
			yyVAL.str = "decimal"
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1486
		{
			yyVAL.str = "declare"
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1487
		{
			yyVAL.str = "default"
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1488
		{
			yyVAL.str = "defaults"
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1489
		{
			yyVAL.str = "deferrable"
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1490
		{
			yyVAL.str = "deferred"
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1491
		{
			yyVAL.str = "definer"
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1492
		{
			yyVAL.str = "delete"
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1493
		{
			yyVAL.str = "delimiter"
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1494
		{
			yyVAL.str = "delimiters"
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1495
		{
			yyVAL.str = "depends"
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1496
		{
			yyVAL.str = "depth"
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1497
		{
			yyVAL.str = "desc"
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1498
		{
			yyVAL.str = "detach"
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1499
		{
			yyVAL.str = "dictionary"
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1500
		{
			yyVAL.str = "disable"
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1501
		{
			yyVAL.str = "discard"
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1502
		{
			yyVAL.str = "distinct"
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1503
		{
			yyVAL.str = "do"
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1504
		{
			yyVAL.str = "document"
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1505
		{
			yyVAL.str = "domain"
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1506
		{
			yyVAL.str = "double"
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1507
		{
			yyVAL.str = "drop"
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1508
		{
			yyVAL.str = "each"
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1509
		{
			yyVAL.str = "else"
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1510
		{
			yyVAL.str = "empty"
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1511
		{
			yyVAL.str = "enable"
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1512
		{
			yyVAL.str = "encoding"
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1513
		{
			yyVAL.str = "encrypted"
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1514
		{
			yyVAL.str = "end"
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1515
		{
			yyVAL.str = "enum"
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1516
		{
			yyVAL.str = "error"
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1517
		{
			yyVAL.str = "escape"
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1518
		{
			yyVAL.str = "event"
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1519
		{
			yyVAL.str = "exclude"
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1520
		{
			yyVAL.str = "excluding"
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1521
		{
			yyVAL.str = "exclusive"
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1522
		{
			yyVAL.str = "execute"
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1523
		{
			yyVAL.str = "exists"
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1524
		{
			yyVAL.str = "explain"
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1525
		{
			yyVAL.str = "expression"
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1526
		{
			yyVAL.str = "extension"
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1527
		{
			yyVAL.str = "external"
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1528
		{
			yyVAL.str = "extract"
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1529
		{
			yyVAL.str = "false"
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1530
		{
			yyVAL.str = "family"
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1531
		{
			yyVAL.str = "finalize"
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1532
		{
			yyVAL.str = "first"
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1533
		{
			yyVAL.str = "float"
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1534
		{
			yyVAL.str = "following"
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1535
		{
			yyVAL.str = "force"
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1536
		{
			yyVAL.str = "foreign"
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1537
		{
			yyVAL.str = "format"
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1538
		{
			yyVAL.str = "forward"
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1539
		{
			yyVAL.str = "freeze"
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1540
		{
			yyVAL.str = "full"
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1541
		{
			yyVAL.str = "function"
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1542
		{
			yyVAL.str = "functions"
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1543
		{
			yyVAL.str = "generated"
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1544
		{
			yyVAL.str = "global"
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1545
		{
			yyVAL.str = "granted"
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1546
		{
			yyVAL.str = "greatest"
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1547
		{
			yyVAL.str = "grouping"
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1548
		{
			yyVAL.str = "groups"
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1549
		{
			yyVAL.str = "handler"
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1550
		{
			yyVAL.str = "header"
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1551
		{
			yyVAL.str = "hold"
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1552
		{
			yyVAL.str = "identity"
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1553
		{
			yyVAL.str = "if"
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1554
		{
			yyVAL.str = "ilike"
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1555
		{
			yyVAL.str = "immediate"
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1556
		{
			yyVAL.str = "immutable"
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1557
		{
			yyVAL.str = "implicit"
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1558
		{
			yyVAL.str = "import"
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1559
		{
			yyVAL.str = "in"
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1560
		{
			yyVAL.str = "include"
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1561
		{
			yyVAL.str = "including"
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1562
		{
			yyVAL.str = "increment"
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1563
		{
			yyVAL.str = "indent"
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1564
		{
			yyVAL.str = "index"
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1565
		{
			yyVAL.str = "indexes"
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1566
		{
			yyVAL.str = "inherit"
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1567
		{
			yyVAL.str = "inherits"
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1568
		{
			yyVAL.str = "initially"
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1569
		{
			yyVAL.str = "inline"
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1570
		{
			yyVAL.str = "inner"
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1571
		{
			yyVAL.str = "inout"
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1572
		{
			yyVAL.str = "input"
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1573
		{
			yyVAL.str = "insensitive"
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1574
		{
			yyVAL.str = "insert"
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1575
		{
			yyVAL.str = "instead"
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1576
		{
			yyVAL.str = "int"
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1577
		{
			yyVAL.str = "integer"
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1578
		{
			yyVAL.str = "interval"
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1579
		{
			yyVAL.str = "invoker"
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1580
		{
			yyVAL.str = "is"
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1581
		{
			yyVAL.str = "isolation"
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1582
		{
			yyVAL.str = "join"
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1583
		{
			yyVAL.str = "json"
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1584
		{
			yyVAL.str = "json_array"
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1585
		{
			yyVAL.str = "json_arrayagg"
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1586
		{
			yyVAL.str = "json_exists"
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1587
		{
			yyVAL.str = "json_object"
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1588
		{
			yyVAL.str = "json_objectagg"
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1589
		{
			yyVAL.str = "json_query"
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1590
		{
			yyVAL.str = "json_scalar"
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1591
		{
			yyVAL.str = "json_serialize"
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1592
		{
			yyVAL.str = "json_table"
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1593
		{
			yyVAL.str = "json_value"
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1594
		{
			yyVAL.str = "keep"
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1595
		{
			yyVAL.str = "key"
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1596
		{
			yyVAL.str = "keys"
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1597
		{
			yyVAL.str = "label"
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1598
		{
			yyVAL.str = "language"
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1599
		{
			yyVAL.str = "large"
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1600
		{
			yyVAL.str = "last"
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1601
		{
			yyVAL.str = "lateral"
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1602
		{
			yyVAL.str = "leading"
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1603
		{
			yyVAL.str = "leakproof"
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1604
		{
			yyVAL.str = "least"
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1605
		{
			yyVAL.str = "left"
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1606
		{
			yyVAL.str = "level"
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1607
		{
			yyVAL.str = "like"
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1608
		{
			yyVAL.str = "listen"
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1609
		{
			yyVAL.str = "load"
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1610
		{
			yyVAL.str = "local"
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1611
		{
			yyVAL.str = "localtime"
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1612
		{
			yyVAL.str = "localtimestamp"
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1613
		{
			yyVAL.str = "location"
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1614
		{
			yyVAL.str = "lock"
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1615
		{
			yyVAL.str = "locked"
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1616
		{
			yyVAL.str = "logged"
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1617
		{
			yyVAL.str = "mapping"
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1618
		{
			yyVAL.str = "match"
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1619
		{
			yyVAL.str = "matched"
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1620
		{
			yyVAL.str = "materialized"
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1621
		{
			yyVAL.str = "maxvalue"
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1622
		{
			yyVAL.str = "merge"
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1623
		{
			yyVAL.str = "merge_action"
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1624
		{
			yyVAL.str = "method"
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1625
		{
			yyVAL.str = "minvalue"
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1626
		{
			yyVAL.str = "mode"
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1627
		{
			yyVAL.str = "move"
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1628
		{
			yyVAL.str = "name"
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1629
		{
			yyVAL.str = "names"
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1630
		{
			yyVAL.str = "national"
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1631
		{
			yyVAL.str = "natural"
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1632
		{
			yyVAL.str = "nchar"
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1633
		{
			yyVAL.str = "nested"
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1634
		{
			yyVAL.str = "new"
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1635
		{
			yyVAL.str = "next"
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1636
		{
			yyVAL.str = "nfc"
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1637
		{
			yyVAL.str = "nfd"
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1638
		{
			yyVAL.str = "nfkc"
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1639
		{
			yyVAL.str = "nfkd"
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1640
		{
			yyVAL.str = "no"
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1641
		{
			yyVAL.str = "none"
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1642
		{
			yyVAL.str = "normalize"
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1643
		{
			yyVAL.str = "normalized"
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1644
		{
			yyVAL.str = "not"
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1645
		{
			yyVAL.str = "nothing"
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1646
		{
			yyVAL.str = "notify"
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1647
		{
			yyVAL.str = "nowait"
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1648
		{
			yyVAL.str = "null"
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1649
		{
			yyVAL.str = "nullif"
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1650
		{
			yyVAL.str = "nulls"
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1651
		{
			yyVAL.str = "numeric"
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1652
		{
			yyVAL.str = "object"
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1653
		{
			yyVAL.str = "of"
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1654
		{
			yyVAL.str = "off"
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1655
		{
			yyVAL.str = "oids"
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1656
		{
			yyVAL.str = "old"
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1657
		{
			yyVAL.str = "omit"
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1658
		{
			yyVAL.str = "only"
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1659
		{
			yyVAL.str = "operator"
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1660
		{
			yyVAL.str = "option"
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1661
		{
			yyVAL.str = "options"
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1662
		{
			yyVAL.str = "or"
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1663
		{
			yyVAL.str = "ordinality"
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1664
		{
			yyVAL.str = "others"
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1665
		{
			yyVAL.str = "out"
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1666
		{
			yyVAL.str = "outer"
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1667
		{
			yyVAL.str = "overlay"
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1668
		{
			yyVAL.str = "overriding"
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1669
		{
			yyVAL.str = "owned"
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1670
		{
			yyVAL.str = "owner"
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1671
		{
			yyVAL.str = "parallel"
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1672
		{
			yyVAL.str = "parameter"
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1673
		{
			yyVAL.str = "parser"
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1674
		{
			yyVAL.str = "partial"
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1675
		{
			yyVAL.str = "partition"
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1676
		{
			yyVAL.str = "passing"
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1677
		{
			yyVAL.str = "password"
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1678
		{
			yyVAL.str = "path"
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1679
		{
			yyVAL.str = "placing"
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1680
		{
			yyVAL.str = "plan"
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1681
		{
			yyVAL.str = "plans"
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1682
		{
			yyVAL.str = "policy"
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1683
		{
			yyVAL.str = "position"
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1684
		{
			yyVAL.str = "preceding"
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1685
		{
			yyVAL.str = "prepare"
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1686
		{
			yyVAL.str = "prepared"
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1687
		{
			yyVAL.str = "preserve"
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1688
		{
			yyVAL.str = "primary"
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1689
		{
			yyVAL.str = "prior"
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1690
		{
			yyVAL.str = "privileges"
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1691
		{
			yyVAL.str = "procedural"
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1692
		{
			yyVAL.str = "procedure"
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1693
		{
			yyVAL.str = "procedures"
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1694
		{
			yyVAL.str = "program"
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1695
		{
			yyVAL.str = "publication"
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1696
		{
			yyVAL.str = "quote"
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1697
		{
			yyVAL.str = "quotes"
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1698
		{
			yyVAL.str = "range"
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1699
		{
			yyVAL.str = "read"
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1700
		{
			yyVAL.str = "real"
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1701
		{
			yyVAL.str = "reassign"
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1702
		{
			yyVAL.str = "recheck"
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1703
		{
			yyVAL.str = "recursive"
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1704
		{
			yyVAL.str = "ref"
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1705
		{
			yyVAL.str = "references"
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1706
		{
			yyVAL.str = "referencing"
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1707
		{
			yyVAL.str = "refresh"
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1708
		{
			yyVAL.str = "reindex"
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1709
		{
			yyVAL.str = "relative"
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1710
		{
			yyVAL.str = "release"
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1711
		{
			yyVAL.str = "rename"
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1712
		{
			yyVAL.str = "repeatable"
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1713
		{
			yyVAL.str = "replace"
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1714
		{
			yyVAL.str = "replica"
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1715
		{
			yyVAL.str = "reset"
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1716
		{
			yyVAL.str = "restart"
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1717
		{
			yyVAL.str = "restrict"
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1718
		{
			yyVAL.str = "return"
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1719
		{
			yyVAL.str = "returns"
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1720
		{
			yyVAL.str = "revoke"
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1721
		{
			yyVAL.str = "right"
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1722
		{
			yyVAL.str = "role"
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1723
		{
			yyVAL.str = "rollback"
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1724
		{
			yyVAL.str = "rollup"
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1725
		{
			yyVAL.str = "routine"
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1726
		{
			yyVAL.str = "routines"
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1727
		{
			yyVAL.str = "row"
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1728
		{
			yyVAL.str = "rows"
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1729
		{
			yyVAL.str = "rule"
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1730
		{
			yyVAL.str = "savepoint"
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1731
		{
			yyVAL.str = "scalar"
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1732
		{
			yyVAL.str = "schema"
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1733
		{
			yyVAL.str = "schemas"
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1734
		{
			yyVAL.str = "scroll"
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1735
		{
			yyVAL.str = "search"
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1736
		{
			yyVAL.str = "security"
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1737
		{
			yyVAL.str = "select"
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1738
		{
			yyVAL.str = "sequence"
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1739
		{
			yyVAL.str = "sequences"
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1740
		{
			yyVAL.str = "serializable"
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1741
		{
			yyVAL.str = "server"
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1742
		{
			yyVAL.str = "session"
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1743
		{
			yyVAL.str = "session_user"
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1744
		{
			yyVAL.str = "set"
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1745
		{
			yyVAL.str = "setof"
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1746
		{
			yyVAL.str = "sets"
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1747
		{
			yyVAL.str = "share"
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1748
		{
			yyVAL.str = "show"
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1749
		{
			yyVAL.str = "similar"
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1750
		{
			yyVAL.str = "simple"
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1751
		{
			yyVAL.str = "skip"
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1752
		{
			yyVAL.str = "smallint"
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1753
		{
			yyVAL.str = "snapshot"
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1754
		{
			yyVAL.str = "some"
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1755
		{
			yyVAL.str = "source"
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1756
		{
			yyVAL.str = "sql"
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1757
		{
			yyVAL.str = "stable"
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1758
		{
			yyVAL.str = "standalone"
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1759
		{
			yyVAL.str = "start"
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1760
		{
			yyVAL.str = "statement"
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1761
		{
			yyVAL.str = "statistics"
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1762
		{
			yyVAL.str = "stdin"
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1763
		{
			yyVAL.str = "stdout"
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1764
		{
			yyVAL.str = "storage"
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1765
		{
			yyVAL.str = "stored"
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1766
		{
			yyVAL.str = "strict"
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1767
		{
			yyVAL.str = "string"
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1768
		{
			yyVAL.str = "strip"
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1769
		{
			yyVAL.str = "subscription"
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1770
		{
			yyVAL.str = "substring"
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1771
		{
			yyVAL.str = "support"
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1772
		{
			yyVAL.str = "symmetric"
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1773
		{
			yyVAL.str = "sysid"
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1774
		{
			yyVAL.str = "system"
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1775
		{
			yyVAL.str = "system_user"
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1776
		{
			yyVAL.str = "table"
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1777
		{
			yyVAL.str = "tables"
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1778
		{
			yyVAL.str = "tablesample"
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1779
		{
			yyVAL.str = "tablespace"
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1780
		{
			yyVAL.str = "target"
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1781
		{
			yyVAL.str = "temp"
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1782
		{
			yyVAL.str = "template"
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1783
		{
			yyVAL.str = "temporary"
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1784
		{
			yyVAL.str = "text"
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1785
		{
			yyVAL.str = "then"
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1786
		{
			yyVAL.str = "ties"
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1787
		{
			yyVAL.str = "time"
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1788
		{
			yyVAL.str = "timestamp"
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1789
		{
			yyVAL.str = "trailing"
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1790
		{
			yyVAL.str = "transaction"
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1791
		{
			yyVAL.str = "transform"
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1792
		{
			yyVAL.str = "treat"
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1793
		{
			yyVAL.str = "trigger"
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1794
		{
			yyVAL.str = "trim"
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1795
		{
			yyVAL.str = "true"
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1796
		{
			yyVAL.str = "truncate"
		}
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1797
		{
			yyVAL.str = "trusted"
		}
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1798
		{
			yyVAL.str = "type"
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1799
		{
			yyVAL.str = "types"
		}
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1800
		{
			yyVAL.str = "uescape"
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1801
		{
			yyVAL.str = "unbounded"
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1802
		{
			yyVAL.str = "uncommitted"
		}
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1803
		{
			yyVAL.str = "unconditional"
		}
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1804
		{
			yyVAL.str = "unencrypted"
		}
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1805
		{
			yyVAL.str = "unique"
		}
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1806
		{
			yyVAL.str = "unknown"
		}
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1807
		{
			yyVAL.str = "unlisten"
		}
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1808
		{
			yyVAL.str = "unlogged"
		}
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1809
		{
			yyVAL.str = "until"
		}
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1810
		{
			yyVAL.str = "update"
		}
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1811
		{
			yyVAL.str = "user"
		}
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1812
		{
			yyVAL.str = "using"
		}
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1813
		{
			yyVAL.str = "vacuum"
		}
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1814
		{
			yyVAL.str = "valid"
		}
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1815
		{
			yyVAL.str = "validate"
		}
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1816
		{
			yyVAL.str = "validator"
		}
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1817
		{
			yyVAL.str = "value"
		}
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1818
		{
			yyVAL.str = "values"
		}
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1819
		{
			yyVAL.str = "varchar"
		}
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1820
		{
			yyVAL.str = "variadic"
		}
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1821
		{
			yyVAL.str = "verbose"
		}
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1822
		{
			yyVAL.str = "version"
		}
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1823
		{
			yyVAL.str = "view"
		}
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1824
		{
			yyVAL.str = "views"
		}
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1825
		{
			yyVAL.str = "volatile"
		}
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1826
		{
			yyVAL.str = "when"
		}
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1827
		{
			yyVAL.str = "whitespace"
		}
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1828
		{
			yyVAL.str = "work"
		}
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1829
		{
			yyVAL.str = "wrapper"
		}
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1830
		{
			yyVAL.str = "write"
		}
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1831
		{
			yyVAL.str = "xml"
		}
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1832
		{
			yyVAL.str = "xmlattributes"
		}
	case 1047:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1833
		{
			yyVAL.str = "xmlconcat"
		}
	case 1048:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1834
		{
			yyVAL.str = "xmlelement"
		}
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1835
		{
			yyVAL.str = "xmlexists"
		}
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1836
		{
			yyVAL.str = "xmlforest"
		}
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1837
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 1052:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1838
		{
			yyVAL.str = "xmlparse"
		}
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1839
		{
			yyVAL.str = "xmlpi"
		}
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1840
		{
			yyVAL.str = "xmlroot"
		}
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1841
		{
			yyVAL.str = "xmlserialize"
		}
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1842
		{
			yyVAL.str = "xmltable"
		}
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1843
		{
			yyVAL.str = "yes"
		}
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1844
		{
			yyVAL.str = "zone"
		}
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1859
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1060:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1861
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1061:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1865
		{
			collateClause := ast.NewCollateClause(yyDollar[3].list)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 1062:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1871
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[1].node), 0)
		}
	case 1063:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1876
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[1].node), 0)
		}
	case 1064:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1881
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1065:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1886
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1066:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1891
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1067:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1896
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1068:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1901
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1069:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1906
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1070:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1911
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1071:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1916
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1072:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1921
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1926
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1074:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1931
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1075:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1936
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1076:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1941
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1077:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1946
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1078:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1951
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1079:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1955
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1080:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1959
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1081:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1963
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1082:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1967
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1083:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1971
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1084:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1975
		{
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1085:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1980
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1086:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1987
		{
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1087:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1992
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1088:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1999
		{
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1089:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2004
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1090:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2011
		{
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1091:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2016
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1092:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2023
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1093:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2030
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1094:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2037
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1095:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2044
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1096:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2051
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1097:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2055
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1098:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2059
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1099:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2063
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2067
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlaps"))
			leftList := yyDollar[1].list
			rightList := yyDollar[3].list
			combinedList := ast.NewNodeList()
			combinedList.Items = append(leftList.Items, rightList.Items...)
			yyVAL.node = ast.NewFuncCall(funcName, combinedList, 0)
		}
	case 1101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2076
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_TRUE)
		}
	case 1102:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2080
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_TRUE)
		}
	case 1103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2084
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_FALSE)
		}
	case 1104:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2088
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_FALSE)
		}
	case 1105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2092
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_UNKNOWN)
		}
	case 1106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2096
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_UNKNOWN)
		}
	case 1107:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2100
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1108:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2105
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1109:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2110
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1110:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2115
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1111:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2120
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1112:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2125
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2130
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2135
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2140
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			sublink := ast.NewSubLink(subLinkType, yyDollar[4].stmt)
			sublink.Testexpr = yyDollar[1].node
			sublink.OperName = operName
			yyVAL.node = sublink
		}
	case 1116:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2149
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			if subLinkType == ast.ANY_SUBLINK {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ANY, operName, yyDollar[1].node, yyDollar[5].node, 0)
			} else {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ALL, operName, yyDollar[1].node, yyDollar[5].node, 0)
			}
		}
	case 1117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2159
		{
			yylex.Error("UNIQUE predicate is not yet implemented")
		}
	case 1118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2163
		{
			args := []ast.Expression{yyDollar[1].node.(ast.Expression)}
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
		}
	case 1119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2168
		{
			args := []ast.Expression{yyDollar[1].node.(ast.Expression)}
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2174
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2180
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[3].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2187
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1123:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2194
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[4].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2202
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[3].ival)
			uniqueKeys := yyDollar[4].bval
			yyVAL.node = ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
		}
	case 1125:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2219
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[4].ival)
			uniqueKeys := yyDollar[5].bval
			jsonPredicate := ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(jsonPredicate))
		}
	case 1126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2238
		{
			yyVAL.node = ast.NewSetToDefault(0, 0, 0)
		}
	case 1127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2243
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2245
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2249
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2254
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2259
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2264
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2269
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2274
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2279
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2284
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2289
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2294
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2299
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2304
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2309
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2314
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2320
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2321
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2323
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 1146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2332
		{
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewParenExpr(ast.NewA_Indirection(yyDollar[2].node, yyDollar[4].list, 0), 0)
			} else {
				yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
			}
		}
	case 1147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2339
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2340
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2342
		{
			yyVAL.node = ast.NewExprSublink(yyDollar[1].stmt)
		}
	case 1150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2346
		{
			sublink := ast.NewExprSublink(yyDollar[1].stmt)
			yyVAL.node = ast.NewA_Indirection(sublink, yyDollar[2].list, 0)
		}
	case 1151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2351
		{
			yyVAL.node = ast.NewExistsSublink(yyDollar[2].stmt)
		}
	case 1152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2355
		{
			yyVAL.node = ast.NewArraySublink(yyDollar[2].stmt)
		}
	case 1153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2359
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2363
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = rowExpr
		}
	case 1155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2369
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_IMPLICIT_CAST
			yyVAL.node = rowExpr
		}
	case 1156:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2375
		{
			exprList := yyDollar[3].list
			grouping := &ast.GroupingFunc{
				BaseExpr: ast.BaseExpr{BaseNode: ast.BaseNode{Tag: ast.T_GroupingFunc}},
				Args:     exprList,
			}
			yyVAL.node = grouping
		}
	case 1157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2387
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 1158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2391
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 1159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2395
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 1160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2399
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 1161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2403
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 1162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2407
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 1163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2412
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2415
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2418
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2419
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 1167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2420
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 1168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2425
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 1169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2429
		{
			// Create all fields: first ColId followed by indirection items
			allFields := []ast.Node{ast.NewString(yyDollar[1].str)}
			allFields = append(allFields, yyDollar[2].list.Items...)
			yyVAL.node = ast.NewColumnRef(allFields...)
		}
	case 1170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2439
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2443
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2449
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2450
		{
			yyVAL.node = nil
		}
	case 1174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2454
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2458
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 1176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2462
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 1177:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2466
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 1178:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2471
		{
			yyVAL.list = nil
		}
	case 1179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2473
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1180:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2485
		{
			// For now, just return the func_application
			// Note: In full implementation, would apply within_group_clause, filter_clause, over_clause
			yyVAL.node = yyDollar[1].node
		}
	case 1181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2494
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2498
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2502
		{
			// PostgreSQL uses check_func_name here
			// We implement the logic inline - prepend ColId to indirection list
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[2].list.Items...)
			result := ast.NewNodeList(items...)
			yyVAL.list = result
		}
	case 1184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2513
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].list, nil, 0)
		}
	case 1185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2517
		{
			// Special case for aggregates like COUNT(*) - set AggStar to true
			funcCall := ast.NewFuncCall(yyDollar[1].list, nil, 0)
			funcCall.AggStar = true
			yyVAL.node = funcCall
		}
	case 1186:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2524
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[3].list, 0)
			// Note: In full implementation, would set agg_order from $4
			yyVAL.node = funcCall
		}
	case 1187:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2530
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, ast.NewNodeList(yyDollar[4].node), 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1188:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:2536
		{
			yyDollar[3].list.Append(yyDollar[6].node)
			args := yyDollar[3].list
			funcCall := ast.NewFuncCall(yyDollar[1].list, args, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $7
			yyVAL.node = funcCall
		}
	case 1189:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2544
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would mark as aggregate and set agg_order from $5
			yyVAL.node = funcCall
		}
	case 1190:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2550
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would set agg_distinct = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2558
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2562
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2569
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2573
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2577
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1196:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2584
		{
			yyVAL.node = ast.NewCaseExpr(0, yyDollar[2].node, yyDollar[3].list, yyDollar[4].node)
		}
	case 1197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2589
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1198:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2590
		{
			yyVAL.node = nil
		}
	case 1199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2594
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2596
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1201:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2604
		{
			yyVAL.node = ast.NewCaseWhen(yyDollar[2].node, yyDollar[4].node)
		}
	case 1202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2610
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1203:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2611
		{
			yyVAL.node = nil
		}
	case 1204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2616
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2620
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2624
		{
			yyVAL.node = ast.NewArrayConstructor(ast.NewNodeList())
		}
	case 1207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2629
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2631
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1209:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2638
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2639
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1211:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2641
		{
			nodeList := yyDollar[2].list
			nodeList.Append(yyDollar[4].node)
			yyVAL.list = nodeList
		}
	case 1212:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2648
		{
			yyVAL.node = yyDollar[3].list
		}
	case 1213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2649
		{
			yyVAL.node = ast.NewNodeList()
		}
	case 1214:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2653
		{
			yyDollar[2].list.Append(yyDollar[4].node)
			yyVAL.node = yyDollar[2].list
		}
	case 1215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2659
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2660
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2661
		{
			yyVAL.ival = int(ast.ALL_SUBLINK)
		}
	case 1218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2666
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1219:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2670
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2674
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~"))
		}
	case 1221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2678
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~"))
		}
	case 1222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2682
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~*"))
		}
	case 1223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2686
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~*"))
		}
	case 1224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2692
		{
			yyVAL.str = "NFC"
		}
	case 1225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2693
		{
			yyVAL.str = "NFD"
		}
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2694
		{
			yyVAL.str = "NFKC"
		}
	case 1227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2695
		{
			yyVAL.str = "NFKD"
		}
	case 1228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2699
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2700
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2701
		{
			yyVAL.ival = int(ast.JS_TYPE_ARRAY)
		}
	case 1231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2702
		{
			yyVAL.ival = int(ast.JS_TYPE_OBJECT)
		}
	case 1232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2703
		{
			yyVAL.ival = int(ast.JS_TYPE_SCALAR)
		}
	case 1233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2707
		{
			yyVAL.bval = true
		}
	case 1234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2708
		{
			yyVAL.bval = true
		}
	case 1235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2709
		{
			yyVAL.bval = false
		}
	case 1236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2710
		{
			yyVAL.bval = false
		}
	case 1237:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2711
		{
			yyVAL.bval = false
		}
	case 1238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2716
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2720
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2729
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2734
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2735
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2736
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2737
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2738
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2741
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2742
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2743
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2746
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2749
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2753
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[2].str))
		}
	case 1252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2757
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2764
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1254:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2768
		{
			yyVAL.list = nil
		}
	case 1255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2774
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2780
		{
			// Create qualified type name from name + attrs
			name := ast.NewString(yyDollar[1].str)
			names := &ast.NodeList{Items: append([]ast.Node{name}, yyDollar[2].list.Items...)}
			typeName := makeTypeNameFromNodeList(names)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2791
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2795
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2799
		{
			yyVAL.typnam = makeTypeNameFromString("int2")
		}
	case 1260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2803
		{
			yyVAL.typnam = makeTypeNameFromString("int8")
		}
	case 1261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2807
		{
			yyVAL.typnam = makeTypeNameFromString("float4")
		}
	case 1262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2811
		{
			yyVAL.typnam = yyDollar[2].typnam
		}
	case 1263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2815
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2819
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
		}
	case 1265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2823
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
		}
	case 1266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2827
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
		}
	case 1267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2831
		{
			yyVAL.typnam = makeTypeNameFromString("bool")
		}
	case 1268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2837
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2841
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2847
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2851
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2857
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2865
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2873
		{
			yyVAL.str = "varchar"
		}
	case 1275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2877
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2885
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2893
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2903
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Set typmods with the length parameter, similar to PostgreSQL's approach
			lengthConst := ast.NewInteger(int(yyDollar[3].ival))
			typeName.Typmods = ast.NewNodeList()
			typeName.Typmods.Append(lengthConst)
			yyVAL.typnam = typeName
		}
	case 1279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2914
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// CHAR defaults to CHAR(1)
				lengthConst := ast.NewInteger(1)
				typeName.Typmods = ast.NewNodeList()
				typeName.Typmods.Append(lengthConst)
			}
			yyVAL.typnam = typeName
		}
	case 1280:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2928
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2940
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1282:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2952
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2962
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1284:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2972
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2982
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2993
		{
			yyVAL.ival = 1
		}
	case 1287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2994
		{
			yyVAL.ival = 0
		}
	case 1288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2995
		{
			yyVAL.ival = 0
		}
	case 1289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2998
		{
			yyVAL.ival = 1
		}
	case 1290:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2999
		{
			yyVAL.ival = 0
		}
	case 1291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3003
		{
			if yyDollar[2].ival < 1 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else if yyDollar[2].ival <= 7 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else {
				yyVAL.typnam = makeTypeNameFromString("float8")
			}
		}
	case 1292:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3013
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3020
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3024
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3031
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3035
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3040
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3041
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3044
		{
			yyVAL.str = "+"
		}
	case 1300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3045
		{
			yyVAL.str = "-"
		}
	case 1301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3046
		{
			yyVAL.str = "*"
		}
	case 1302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3047
		{
			yyVAL.str = "/"
		}
	case 1303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3048
		{
			yyVAL.str = "%"
		}
	case 1304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3049
		{
			yyVAL.str = "^"
		}
	case 1305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3050
		{
			yyVAL.str = "<"
		}
	case 1306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3051
		{
			yyVAL.str = ">"
		}
	case 1307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3052
		{
			yyVAL.str = "="
		}
	case 1308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3053
		{
			yyVAL.str = "<="
		}
	case 1309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3054
		{
			yyVAL.str = ">="
		}
	case 1310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3055
		{
			yyVAL.str = "<>"
		}
	case 1311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3059
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3063
		{
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[3].list.Items...)
			yyVAL.list = ast.NewNodeList(items...)
		}
	case 1313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3071
		{
			yyVAL.list = nil
		}
	case 1314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3074
		{
			yyVAL.node = nil
		}
	case 1315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3077
		{
			yyVAL.node = nil
		}
	case 1316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3080
		{
			yyVAL.node = nil
		}
	case 1317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3083
		{
			yyVAL.ival = 0
		}
	case 1318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3084
		{
			yyVAL.ival = 0
		}
	case 1319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3088
		{
			subLink := ast.NewSubLink(ast.ANY_SUBLINK, yyDollar[1].stmt.(*ast.SelectStmt))
			yyVAL.node = subLink
		}
	case 1320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3093
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3108
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3109
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3113
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3118
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3119
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3127
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3129
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			// Use NodeList directly for SortClause
			selectStmt.SortClause = yyDollar[2].list
			yyVAL.stmt = selectStmt
		}
	case 1328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3136
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			yyVAL.stmt = selectStmt
		}
	case 1329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3142
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			// Use NodeList directly for SortClause
			selectStmt.SortClause = yyDollar[3].list
			yyVAL.stmt = selectStmt
		}
	case 1330:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3159
		{
			selectStmt := ast.NewSelectStmt()
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			yyVAL.stmt = selectStmt
		}
	case 1331:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3177
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].list
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			yyVAL.stmt = selectStmt
		}
	case 1332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3194
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = ast.NewNodeList(starTarget)
			selectStmt.FromClause = ast.NewNodeList(yyDollar[2].rangevar)
			yyVAL.stmt = selectStmt
		}
	case 1333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3204
		{
			// VALUES clause is a SelectStmt with ValuesLists
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3215
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3216
		{
			yyVAL.list = nil
		}
	case 1336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3220
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3221
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3226
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3230
		{
			// Implicit alias (no AS keyword)
			yyVAL.target = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 1340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3235
		{
			// No alias - use default naming
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3240
		{
			// SELECT * - all columns
			yyVAL.target = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 1342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3251
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3252
		{
			yyVAL.list = nil
		}
	case 1344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3256
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3257
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3266
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeVar
		}
	case 1347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3274
		{
			/* Subquery in FROM clause */
			subquery := yyDollar[1].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[2].alias != nil {
				alias = yyDollar[2].alias
			}
			rangeSubselect := ast.NewRangeSubselect(false, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3285
		{
			/* LATERAL subquery in FROM clause */
			subquery := yyDollar[2].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[3].alias != nil {
				alias = yyDollar[3].alias
			}
			rangeSubselect := ast.NewRangeSubselect(true, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3296
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1350:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3300
		{
			joinExpr := yyDollar[2].node.(*ast.JoinExpr)
			joinExpr.Alias = yyDollar[4].alias
			yyVAL.node = joinExpr
		}
	case 1351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3306
		{
			rangeFunc := yyDollar[1].node.(*ast.RangeFunction)
			if yyDollar[2].alias != nil {
				rangeFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeFunc
		}
	case 1352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3314
		{
			rangeFunc := yyDollar[2].node.(*ast.RangeFunction)
			rangeFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeFunc
		}
	case 1353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3323
		{
			rangeTableFunc := yyDollar[1].node.(*ast.RangeTableFunc)
			if yyDollar[2].alias != nil {
				rangeTableFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3331
		{
			rangeTableFunc := yyDollar[2].node.(*ast.RangeTableFunc)
			rangeTableFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeTableFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3340
		{
			jsonTable := yyDollar[1].node.(*ast.JsonTable)
			if yyDollar[2].alias != nil {
				jsonTable.Alias = yyDollar[2].alias
			}
			yyVAL.node = jsonTable
		}
	case 1356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3348
		{
			jsonTable := yyDollar[2].node.(*ast.JsonTable)
			jsonTable.Lateral = true
			if yyDollar[3].alias != nil {
				jsonTable.Alias = yyDollar[3].alias
			}
			yyVAL.node = jsonTable
		}
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3360
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.rangevar = rangeVar
		}
	case 1358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3366
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3373
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.rangevar = rangeVar
		}
	case 1360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3379
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3385
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3395
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3399
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3405
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3422
		{
			yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
		}
	case 1366:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3426
		{
			/* CROSS JOIN is same as unqualified inner join */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewJoinExpr(ast.JOIN_INNER, left, right, nil)
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1367:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3435
		{
			left := yyDollar[1].node
			right := yyDollar[4].node
			joinType := ast.JoinType(yyDollar[2].ival)
			joinQual := yyDollar[5].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(joinType, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(joinType, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1368:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3461
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[3].node
			joinQual := yyDollar[4].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(ast.JOIN_INNER, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(ast.JOIN_INNER, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1369:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3487
		{
			left := yyDollar[1].node
			right := yyDollar[5].node
			joinType := ast.JoinType(yyDollar[3].ival)
			join := ast.NewNaturalJoinExpr(joinType, left, right)
			yyVAL.node = join
		}
	case 1370:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3495
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewNaturalJoinExpr(ast.JOIN_INNER, left, right)
			yyVAL.node = join
		}
	case 1371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3505
		{
			yyVAL.ival = int(ast.JOIN_FULL)
		}
	case 1372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3506
		{
			yyVAL.ival = int(ast.JOIN_LEFT)
		}
	case 1373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3507
		{
			yyVAL.ival = int(ast.JOIN_RIGHT)
		}
	case 1374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3508
		{
			yyVAL.ival = int(ast.JOIN_INNER)
		}
	case 1375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3513
		{
			yyVAL.ival = 1
		}
	case 1376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3514
		{
			yyVAL.ival = 0
		}
	case 1377:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3524
		{
			/* Create a two-element list: [name_list, alias_or_null] following PostgreSQL */
			nameList := yyDollar[3].list
			var aliasNode ast.Node = nil
			if yyDollar[5].alias != nil {
				aliasNode = yyDollar[5].alias
			}
			usingList := ast.NewNodeList(nameList, aliasNode)
			yyVAL.node = usingList
		}
	case 1378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3535
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3546
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3550
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3554
		{
			yyVAL.with = ast.NewWithClause(yyDollar[3].list, true, 0)
		}
	case 1382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3560
		{
			yyVAL.with = yyDollar[1].with
		}
	case 1383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3561
		{
			yyVAL.with = nil
		}
	case 1384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3566
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3570
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1386:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3578
		{
			ctename := yyDollar[1].str
			query := yyDollar[6].stmt
			cte := ast.NewCommonTableExpr(ctename, query)

			// Set column names if provided
			if yyDollar[2].list != nil {
				cte.Aliascolnames = yyDollar[2].list
			}

			// Set materialized option
			cte.Ctematerialized = ast.CTEMaterialized(yyDollar[4].ival)

			// Set search clause if provided
			if yyDollar[8].node != nil {
				cte.SearchClause = yyDollar[8].node.(*ast.CTESearchClause)
			}

			// Set cycle clause if provided
			if yyDollar[9].node != nil {
				cte.CycleClause = yyDollar[9].node.(*ast.CTECycleClause)
			}

			yyVAL.node = cte
		}
	case 1387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3606
		{
			yyVAL.ival = int(ast.CTEMaterializeAlways)
		}
	case 1388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3607
		{
			yyVAL.ival = int(ast.CTEMaterializeNever)
		}
	case 1389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3608
		{
			yyVAL.ival = int(ast.CTEMaterializeDefault)
		}
	case 1390:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3613
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, false, seqColumn)
		}
	case 1391:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3619
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, true, seqColumn)
		}
	case 1392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3625
		{
			yyVAL.node = nil
		}
	case 1393:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:3632
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			markValue := yyDollar[6].node.(ast.Expression)
			markDefault := yyDollar[8].node.(ast.Expression)
			pathColumn := yyDollar[10].str
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, markValue, markDefault, pathColumn)
		}
	case 1394:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3641
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			pathColumn := yyDollar[6].str
			// For simple CYCLE clause, use nil for mark values to avoid TO/DEFAULT in deparsing
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, nil, nil, pathColumn)
		}
	case 1395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3649
		{
			yyVAL.node = nil
		}
	case 1396:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3660
		{
			/* Create a SelectStmt with VALUES clause following PostgreSQL */
			selectStmt := ast.NewSelectStmt()
			exprList := yyDollar[3].list
			selectStmt.ValuesLists = ast.NewNodeList(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1397:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3668
		{
			/* Add additional VALUES row to existing SelectStmt */
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			exprList := yyDollar[4].list
			selectStmt.ValuesLists.Append(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3682
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3683
		{
			yyVAL.node = nil
		}
	case 1400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3691
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1401:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3693
		{
			cursorExpr := ast.NewCurrentOfExpr(0, yyDollar[4].str) // cvarno filled in by parse analysis
			yyVAL.node = cursorExpr
		}
	case 1402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3697
		{
			yyVAL.node = nil
		}
	case 1403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3701
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3709
		{
			yyVAL.alias = yyDollar[1].alias
		}
	case 1405:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3710
		{
			yyVAL.alias = nil
		}
	case 1406:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3715
		{
			nameList := yyDollar[4].list
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nameList)
		}
	case 1407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3720
		{
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 1408:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3724
		{
			nameList := yyDollar[3].list
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nameList)
		}
	case 1409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3729
		{
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 1410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3737
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.alias = alias
		}
	case 1411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3741
		{
			yyVAL.alias = nil
		}
	case 1412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3749
		{
			yyVAL.ival = 1
		}
	case 1413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3750
		{
			yyVAL.ival = 0
		}
	case 1414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3754
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1415:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3755
		{
			yyVAL.list = yyDollar[4].list
		}
	case 1416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3759
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3760
		{
			yyVAL.list = nil
		}
	case 1418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3770
		{
			yyVAL.into = ast.NewIntoClause(yyDollar[2].rangevar, nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 1419:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3773
		{
			yyVAL.into = nil
		}
	case 1420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3784
		{
			hasOrdinality := yyDollar[2].ival == 1
			// For a simple function, create a NodeList containing a single NodeList with the function
			funcList := ast.NewNodeList(yyDollar[1].node)
			functions := ast.NewNodeList(funcList)
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, false, functions, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1421:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3793
		{
			hasOrdinality := yyDollar[6].ival == 1
			// rowsfrom_list is already a NodeList containing NodeLists
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, true, yyDollar[4].list, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3803
		{
			yyVAL.ival = 1
		}
	case 1423:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3804
		{
			yyVAL.ival = 0
		}
	case 1424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3810
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 1425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3814
		{
			yyDollar[1].list.Append(yyDollar[3].list)
			yyVAL.list = yyDollar[1].list
		}
	case 1426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3821
		{
			funcList := ast.NewNodeList(yyDollar[1].node)
			if yyDollar[2].list != nil {
				funcList.Append(yyDollar[2].list)
			}
			yyVAL.list = funcList
		}
	case 1427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3830
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3831
		{
			yyVAL.list = nil
		}
	case 1429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3841
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 1430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3845
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 1431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3857
		{
			yyVAL.funparam = &ast.FunctionParameter{
				BaseNode: ast.BaseNode{Tag: ast.T_FunctionParameter},
				Name:     yyDollar[1].str,
				ArgType:  yyDollar[2].typnam,
				Mode:     ast.FUNC_PARAM_TABLE,
				DefExpr:  nil,
			}
		}
	case 1432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3870
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1433:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3871
		{
			yyVAL.list = nil
		}
	case 1434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3877
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3881
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3890
		{
			columnDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			// Note: opt_collate_clause support can be added when needed
			// PostgreSQL sets: n->collClause = (CollateClause *) $3;
			yyVAL.node = columnDef
		}
	case 1437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3901
		{
			// Pass the NodeList directly to NewCollateClause
			nameList := yyDollar[2].list
			yyVAL.node = ast.NewCollateClause(nameList)
		}
	case 1438:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3906
		{
			yyVAL.node = nil
		}
	case 1439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3911
		{
			yyVAL.str = "BY REF"
		}
	case 1440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3912
		{
			yyVAL.str = "BY VALUE"
		}
	case 1441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3918
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3922
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3926
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1444:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3930
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3938
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3942
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3950
		{
			target := ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
			yyVAL.node = target
		}
	case 1448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3955
		{
			target := ast.NewResTarget("", yyDollar[2].node)
			yyVAL.node = target
		}
	case 1449:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3964
		{
			// XMLTABLE(xpath_expr PASSING doc_expr COLUMNS ...)
			// $3 is xpath_expr (should be RowExpr), $4 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[4].node.(ast.Expression), yyDollar[3].node.(ast.Expression), nil, yyDollar[6].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1450:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:3972
		{
			// XMLTABLE(XMLNAMESPACES(...), xpath_expr PASSING doc_expr COLUMNS ...)
			// $8 is xpath_expr (should be RowExpr), $9 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[9].node.(ast.Expression), yyDollar[8].node.(ast.Expression), yyDollar[5].list, yyDollar[11].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3983
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3987
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3996
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4001
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, nil, true, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4006
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			// TODO: Process column options from $3
			yyVAL.node = rangeTableFuncCol
		}
	case 1456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4016
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4020
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4029
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4033
		{
			yyVAL.node = ast.NewDefElem("default", yyDollar[2].node)
		}
	case 1460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4037
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(true))
		}
	case 1461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4041
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(false))
		}
	case 1462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4045
		{
			yyVAL.node = ast.NewDefElem("path", yyDollar[2].node)
		}
	case 1463:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:4058
		{
			// Extract path name from optional path name node
			var pathName string
			if yyDollar[6].node != nil {
				if strNode, ok := yyDollar[6].node.(*ast.String); ok {
					pathName = strNode.SVal
				}
			}

			// Create JsonTablePathSpec from the a_expr (path expression) and optional path name
			pathSpec := ast.NewJsonTablePathSpec(yyDollar[5].node, pathName, 0)

			// Create JsonTable with context item and path spec
			jsonTable := ast.NewJsonTable(yyDollar[3].node.(*ast.JsonValueExpr), pathSpec)
			if yyDollar[10].list != nil {
				jsonTable.Columns = yyDollar[10].list
			}
			yyVAL.node = jsonTable
		}
	case 1464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4082
		{
			var format *ast.JsonFormat
			if yyDollar[2].node != nil {
				format = yyDollar[2].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonValueExpr(yyDollar[1].node, format)
		}
	case 1465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4093
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4094
		{
			yyVAL.node = nil
		}
	case 1467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4099
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4100
		{
			yyVAL.node = nil
		}
	case 1469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4104
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4105
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4110
		{
			jsonArg := ast.NewJsonArgument(yyDollar[1].node.(*ast.JsonValueExpr), yyDollar[3].str)
			yyVAL.node = jsonArg
		}
	case 1472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4118
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JSON_BEHAVIOR_DEFAULT,
				Expr:     yyDollar[2].node,
			}
		}
	case 1473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4126
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JsonBehaviorType(yyDollar[1].ival),
				Expr:     nil,
			}
		}
	case 1474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4137
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_ERROR)
		}
	case 1475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4138
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_NULL)
		}
	case 1476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4139
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_TRUE)
		}
	case 1477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4140
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_FALSE)
		}
	case 1478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4141
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_UNKNOWN)
		}
	case 1479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4142
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_ARRAY)
		}
	case 1480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4143
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_OBJECT)
		}
	case 1481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4144
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY)
		}
	case 1482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4149
		{
			// Return a list with ON EMPTY behavior and nil for ON ERROR
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, nil}}
		}
	case 1483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4153
		{
			// Return a list with nil for ON EMPTY and ON ERROR behavior
			yyVAL.node = &ast.NodeList{Items: []ast.Node{nil, yyDollar[1].node}}
		}
	case 1484:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4157
		{
			// Return a list with both ON EMPTY and ON ERROR behaviors
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, yyDollar[4].node}}
		}
	case 1485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4161
		{
			yyVAL.node = nil
		}
	case 1486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4166
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1487:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4167
		{
			yyVAL.node = nil
		}
	case 1488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4172
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4173
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4174
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4175
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1492:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4176
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1493:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4177
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4178
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4179
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1496:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4180
		{
			yyVAL.ival = int(ast.JSW_UNSPEC)
		}
	case 1497:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4185
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4186
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1499:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4187
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4188
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1501:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4189
		{
			yyVAL.ival = int(ast.JS_QUOTES_UNSPEC)
		}
	case 1502:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4195
		{
			// Parse the encoding name and map to JsonEncoding constant
			var encoding ast.JsonEncoding
			switch yyDollar[4].str {
			case "utf8":
				encoding = ast.JS_ENC_UTF8
			case "utf16":
				encoding = ast.JS_ENC_UTF16
			case "utf32":
				encoding = ast.JS_ENC_UTF32
			default:
				encoding = ast.JS_ENC_DEFAULT
			}
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   encoding,
			}
		}
	case 1503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4215
		{
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   ast.JS_ENC_DEFAULT,
			}
		}
	case 1504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4225
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1505:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4226
		{
			yyVAL.node = nil
		}
	case 1506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4231
		{
			yyVAL.node = ast.NewString("path")
		}
	case 1507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4232
		{
			yyVAL.node = nil
		}
	case 1508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4238
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4242
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4251
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FOR_ORDINALITY, yyDollar[1].str)
			yyVAL.node = jsonTableCol
		}
	case 1511:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4260
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_REGULAR, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[3].node != nil {
				strNode := yyDollar[3].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1512:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4274
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FORMATTED, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			if yyDollar[3].node != nil {
				jsonTableCol.Format = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = jsonTableCol
		}
	case 1513:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4288
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_EXISTS, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1514:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4299
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, "")
			jsonTableCol.Columns = yyDollar[6].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1515:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4308
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, yyDollar[5].str)
			jsonTableCol.Columns = yyDollar[8].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4319
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4320
		{
			yyVAL.node = nil
		}
	case 1518:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4336
		{
			insertStmt := yyDollar[5].node.(*ast.InsertStmt)
			insertStmt.Relation = yyDollar[4].rangevar
			insertStmt.WithClause = yyDollar[1].with
			insertStmt.OnConflictClause = yyDollar[6].onconflict
			insertStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = insertStmt
		}
	case 1519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4348
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4352
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4361
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.SelectStmt = yyDollar[1].stmt
			yyVAL.node = insertStmt
		}
	case 1522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4367
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Override = ast.OverridingKind(yyDollar[2].ival)
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1523:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4374
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1524:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4381
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.Override = ast.OverridingKind(yyDollar[5].ival)
			insertStmt.SelectStmt = yyDollar[7].stmt
			yyVAL.node = insertStmt
		}
	case 1525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4389
		{
			insertStmt := ast.NewInsertStmt(nil)
			// For DEFAULT VALUES, SelectStmt should be nil
			insertStmt.SelectStmt = nil
			yyVAL.node = insertStmt
		}
	case 1526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4398
		{
			yyVAL.ival = int(ast.OVERRIDING_USER_VALUE)
		}
	case 1527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4399
		{
			yyVAL.ival = int(ast.OVERRIDING_SYSTEM_VALUE)
		}
	case 1528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4404
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4408
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4416
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1531:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:4428
		{
			updateStmt := ast.NewUpdateStmt(yyDollar[3].rangevar)
			updateStmt.WithClause = yyDollar[1].with
			updateStmt.TargetList = yyDollar[5].list
			updateStmt.FromClause = yyDollar[6].list
			updateStmt.WhereClause = yyDollar[7].node
			updateStmt.ReturningList = yyDollar[8].list
			yyVAL.stmt = updateStmt
		}
	case 1532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4441
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4445
		{
			// Concatenate the lists - equivalent to PostgreSQL's list_concat
			for _, item := range yyDollar[3].list.Items {
				yyDollar[1].list.Append(item)
			}
			yyVAL.list = yyDollar[1].list
		}
	case 1534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4456
		{
			target := yyDollar[1].target
			target.Val = yyDollar[3].node
			yyVAL.list = ast.NewNodeList(target)
		}
	case 1535:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4462
		{
			// Multi-column assignment: (col1, col2) = (val1, val2)
			// Create MultiAssignRef nodes for each target, matching PostgreSQL exactly
			targetList := yyDollar[2].list
			ncolumns := len(targetList.Items)

			// Create a MultiAssignRef source for each target
			for i, item := range targetList.Items {
				resCol := item.(*ast.ResTarget)
				multiAssignRef := ast.NewMultiAssignRef(yyDollar[5].node, i+1, ncolumns, 0)
				resCol.Val = multiAssignRef
			}

			// Return the entire target list
			yyVAL.list = targetList
		}
	case 1536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4482
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4488
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4489
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1539:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4499
		{
			deleteStmt := ast.NewDeleteStmt(yyDollar[4].rangevar)
			deleteStmt.WithClause = yyDollar[1].with
			deleteStmt.UsingClause = yyDollar[5].list
			deleteStmt.WhereClause = yyDollar[6].node
			deleteStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = deleteStmt
		}
	case 1540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4511
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4515
		{
			yyVAL.list = nil
		}
	case 1542:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:4530
		{
			mergeStmt := &ast.MergeStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_MergeStmt},
			}
			mergeStmt.WithClause = yyDollar[1].with
			mergeStmt.Relation = yyDollar[4].rangevar
			mergeStmt.SourceRelation = yyDollar[6].node
			mergeStmt.JoinCondition = yyDollar[8].node
			mergeStmt.MergeWhenClauses = yyDollar[9].list
			mergeStmt.ReturningList = yyDollar[10].list
			yyVAL.stmt = mergeStmt
		}
	case 1543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4547
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4551
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1545:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4562
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Query:     yyDollar[3].stmt,
				IsFrom:    false,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Initialize Options as empty NodeList
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[9].list != nil {
				nodeList := yyDollar[9].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			yyVAL.stmt = copyStmt
		}
	case 1546:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:4586
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Relation:  yyDollar[3].rangevar,
				IsFrom:    yyDollar[5].ival != 0,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Assign column list directly as NodeList
			copyStmt.Attlist = yyDollar[4].list

			// Initialize Options as empty NodeList and add options
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[2].node != nil {
				copyStmt.Options.Append(yyDollar[2].node)
			}
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[10].list != nil {
				nodeList := yyDollar[10].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			if yyDollar[11].node != nil {
				copyStmt.WhereClause = yyDollar[11].node
			}
			yyVAL.stmt = copyStmt
		}
	case 1547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4622
		{
			yyVAL.ival = 1
		}
	case 1548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4623
		{
			yyVAL.ival = 0
		}
	case 1549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4627
		{
			yyVAL.ival = 1
		}
	case 1550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4628
		{
			yyVAL.ival = 0
		}
	case 1551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4632
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4633
		{
			yyVAL.str = ""
		}
	case 1553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4634
		{
			yyVAL.str = ""
		}
	case 1554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4639
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1555:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4642
		{
			yyVAL.node = nil
		}
	case 1556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4647
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4650
		{
			yyVAL.node = nil
		}
	case 1558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4654
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4655
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4660
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4668
		{
			yyVAL.list = nil
		}
	case 1562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4675
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4679
		{
			yyVAL.node = ast.NewDefElem("freeze", ast.NewString("true"))
		}
	case 1564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4683
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4687
		{
			yyVAL.node = ast.NewDefElem("null", ast.NewString(yyDollar[3].str))
		}
	case 1566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4691
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("csv"))
		}
	case 1567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4695
		{
			yyVAL.node = ast.NewDefElem("header", ast.NewString("true"))
		}
	case 1568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4699
		{
			yyVAL.node = ast.NewDefElem("quote", ast.NewString(yyDollar[3].str))
		}
	case 1569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4703
		{
			yyVAL.node = ast.NewDefElem("escape", ast.NewString(yyDollar[3].str))
		}
	case 1570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4707
		{
			yyVAL.node = ast.NewDefElem("force_quote", yyDollar[3].list)
		}
	case 1571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4711
		{
			yyVAL.node = ast.NewDefElem("force_quote", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4715
		{
			yyVAL.node = ast.NewDefElem("force_not_null", yyDollar[4].list)
		}
	case 1573:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4719
		{
			yyVAL.node = ast.NewDefElem("force_not_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4723
		{
			yyVAL.node = ast.NewDefElem("force_null", yyDollar[3].list)
		}
	case 1575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4727
		{
			yyVAL.node = ast.NewDefElem("force_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4731
		{
			yyVAL.node = ast.NewDefElem("encoding", ast.NewString(yyDollar[2].str))
		}
	case 1577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4739
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4743
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4750
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4756
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4757
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4758
		{
			yyVAL.node = ast.NewA_Star(0)
		}
	case 1583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4759
		{
			yyVAL.node = ast.NewString("default")
		}
	case 1584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4760
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1585:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4761
		{
			yyVAL.node = nil
		}
	case 1586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4766
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4770
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4776
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4780
		{
			yyVAL.str = "true"
		}
	case 1590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4781
		{
			yyVAL.str = "false"
		}
	case 1591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4782
		{
			yyVAL.str = "on"
		}
	case 1592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4783
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4787
		{
			yyVAL.node = ast.NewFloat(yyDollar[1].str)
		}
	case 1594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4788
		{
			yyVAL.node = ast.NewFloat(yyDollar[2].str)
		}
	case 1595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4790
		{
			f := ast.NewFloat(yyDollar[2].str)
			f.FVal = "-" + f.FVal
			yyVAL.node = f
		}
	case 1596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4795
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4799
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4800
		{
			yyVAL.node = nil
		}
	case 1599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4804
		{
			yyVAL.objType = ast.OBJECT_ACCESS_METHOD
		}
	case 1600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4805
		{
			yyVAL.objType = ast.OBJECT_EVENT_TRIGGER
		}
	case 1601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4806
		{
			yyVAL.objType = ast.OBJECT_EXTENSION
		}
	case 1602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4807
		{
			yyVAL.objType = ast.OBJECT_FDW
		}
	case 1603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4808
		{
			yyVAL.objType = ast.OBJECT_LANGUAGE
		}
	case 1604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4809
		{
			yyVAL.objType = ast.OBJECT_PUBLICATION
		}
	case 1605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4810
		{
			yyVAL.objType = ast.OBJECT_SCHEMA
		}
	case 1606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4811
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_SERVER
		}
	case 1607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4815
		{
			yyVAL.objType = ast.OBJECT_POLICY
		}
	case 1608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4816
		{
			yyVAL.objType = ast.OBJECT_RULE
		}
	case 1609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4817
		{
			yyVAL.objType = ast.OBJECT_TRIGGER
		}
	case 1610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4821
		{
			yyVAL.objType = yyDollar[1].objType
		}
	case 1611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4822
		{
			yyVAL.objType = ast.OBJECT_DATABASE
		}
	case 1612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4823
		{
			yyVAL.objType = ast.OBJECT_ROLE
		}
	case 1613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4824
		{
			yyVAL.objType = ast.OBJECT_SUBSCRIPTION
		}
	case 1614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4825
		{
			yyVAL.objType = ast.OBJECT_TABLESPACE
		}
	case 1615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4830
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].typnam)
		}
	case 1616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4835
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 1617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4842
		{
			yyVAL.bval = true
		}
	case 1618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4843
		{
			yyVAL.bval = false
		}
	case 1619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4847
		{
			yyVAL.ival = 1
		}
	case 1620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4848
		{
			yyVAL.ival = 0
		}
	case 1623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4864
		{
			yyVAL.node = nil
		}
	case 1624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4866
		{
			yyVAL.node = nil
		}
	case 1625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4874
		{
			yyVAL.ival = 1
		}
	case 1626:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4875
		{
			yyVAL.ival = 0
		}
	case 1627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4879
		{
			yyVAL.ival = 1
		}
	case 1628:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4880
		{
			yyVAL.ival = 0
		}
	case 1629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4884
		{
			yyVAL.ival = 1
		}
	case 1630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4885
		{
			yyVAL.ival = 0
		}
	case 1631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4889
		{
			yyVAL.ival = 1
		}
	case 1632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4890
		{
			yyVAL.ival = 0
		}
	case 1633:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4899
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1634:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4905
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1635:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4911
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1636:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4917
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1637:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4923
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4931
		{
			yyVAL.ival = int(ast.MERGE_WHEN_MATCHED)
		}
	case 1639:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4932
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_SOURCE)
		}
	case 1640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4936
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1641:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4937
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4941
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1643:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4942
		{
			yyVAL.node = nil
		}
	case 1644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4947
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_UPDATE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			yyVAL.node = mergeWhen
		}
	case 1645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4962
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_DELETE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4971
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			mergeWhen.Values = yyDollar[2].list
			yyVAL.node = mergeWhen
		}
	case 1647:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4978
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[3].ival)
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1648:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4985
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1649:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:4998
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[6].ival)
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[8].list
			yyVAL.node = mergeWhen
		}
	case 1650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5011
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1651:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5020
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1652:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:5035
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_UPDATE)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			onConflict.TargetList = yyDollar[7].list
			onConflict.WhereClause = yyDollar[8].node
			yyVAL.onconflict = onConflict
		}
	case 1653:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5045
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_NOTHING)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			yyVAL.onconflict = onConflict
		}
	case 1654:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5053
		{
			yyVAL.onconflict = nil
		}
	case 1655:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5064
		{
			// Create InferClause for column-based conflict detection
			infer := ast.NewInferClause()
			// Assign IndexElems directly as NodeList
			infer.IndexElems = yyDollar[2].list
			infer.WhereClause = yyDollar[4].node
			yyVAL.node = infer
		}
	case 1656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5073
		{
			// Create InferClause for constraint-based conflict detection
			infer := ast.NewInferClause()
			infer.Conname = yyDollar[3].str
			yyVAL.node = infer
		}
	case 1657:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5080
		{
			yyVAL.node = nil
		}
	case 1658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5091
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5095
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5102
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5106
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5113
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Name = yyDollar[1].str
		}
	case 1663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5118
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[1].node
		}
	case 1664:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5123
		{
			yyVAL.node = yyDollar[4].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[2].node
		}
	case 1665:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5131
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Ordering = ast.SortByDir(yyDollar[3].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[4].ival)
			yyVAL.node = indexElem
		}
	case 1666:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5142
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Opclassopts = yyDollar[3].list
			indexElem.Ordering = ast.SortByDir(yyDollar[4].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[5].ival)
			yyVAL.node = indexElem
		}
	case 1667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5156
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5157
		{
			yyVAL.list = nil
		}
	case 1669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5161
		{
			yyVAL.ival = int(ast.SORTBY_ASC)
		}
	case 1670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5162
		{
			yyVAL.ival = int(ast.SORTBY_DESC)
		}
	case 1671:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5163
		{
			yyVAL.ival = int(ast.SORTBY_DEFAULT)
		}
	case 1672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5167
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_FIRST)
		}
	case 1673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5168
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_LAST)
		}
	case 1674:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5169
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_DEFAULT)
		}
	case 1675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5174
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1676:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5178
		{
			yyVAL.list = nil
		}
	case 1677:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:5199
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[6].list
			createStmt.InhRelations = yyDollar[8].list
			createStmt.PartSpec = yyDollar[9].partspec
			createStmt.AccessMethod = yyDollar[10].str
			createStmt.Options = yyDollar[11].list
			createStmt.OnCommit = yyDollar[12].oncommit
			createStmt.TableSpaceName = yyDollar[13].str
			yyVAL.stmt = createStmt
		}
	case 1678:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:5215
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[9].list
			createStmt.InhRelations = yyDollar[11].list
			createStmt.PartSpec = yyDollar[12].partspec
			createStmt.AccessMethod = yyDollar[13].str
			createStmt.Options = yyDollar[14].list
			createStmt.OnCommit = yyDollar[15].oncommit
			createStmt.TableSpaceName = yyDollar[16].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1679:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:5232
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[6].list)
			createStmt.TableElts = yyDollar[7].list
			createStmt.PartSpec = yyDollar[8].partspec
			createStmt.AccessMethod = yyDollar[9].str
			createStmt.Options = yyDollar[10].list
			createStmt.OnCommit = yyDollar[11].oncommit
			createStmt.TableSpaceName = yyDollar[12].str
			yyVAL.stmt = createStmt
		}
	case 1680:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:5248
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[9].list)
			createStmt.TableElts = yyDollar[10].list
			createStmt.PartSpec = yyDollar[11].partspec
			createStmt.AccessMethod = yyDollar[12].str
			createStmt.Options = yyDollar[13].list
			createStmt.OnCommit = yyDollar[14].oncommit
			createStmt.TableSpaceName = yyDollar[15].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1681:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:5265
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[7].rangevar)
			createStmt.TableElts = yyDollar[8].list
			createStmt.PartBound = yyDollar[9].partboundspec
			createStmt.PartSpec = yyDollar[10].partspec
			createStmt.AccessMethod = yyDollar[11].str
			createStmt.Options = yyDollar[12].list
			createStmt.OnCommit = yyDollar[13].oncommit
			createStmt.TableSpaceName = yyDollar[14].str
			yyVAL.stmt = createStmt
		}
	case 1682:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:5282
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[10].rangevar)
			createStmt.TableElts = yyDollar[11].list
			createStmt.PartBound = yyDollar[12].partboundspec
			createStmt.PartSpec = yyDollar[13].partspec
			createStmt.AccessMethod = yyDollar[14].str
			createStmt.Options = yyDollar[15].list
			createStmt.OnCommit = yyDollar[16].oncommit
			createStmt.TableSpaceName = yyDollar[17].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5300
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5301
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5302
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5303
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1687:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5304
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5305
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5306
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 1690:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5307
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 1691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5311
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1692:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5312
		{
			yyVAL.list = nil
		}
	case 1693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5317
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5322
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5329
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5330
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5331
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5336
		{
			yyVAL.node = ast.NewTableLikeClause(yyDollar[2].rangevar, ast.TableLikeOption(yyDollar[3].ival))
		}
	case 1699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5343
		{
			yyVAL.ival = yyDollar[1].ival | yyDollar[3].ival
		}
	case 1700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5347
		{
			yyVAL.ival = yyDollar[1].ival & ^yyDollar[3].ival
		}
	case 1701:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5351
		{
			yyVAL.ival = 0
		}
	case 1702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5357
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMMENTS)
		}
	case 1703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5358
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMPRESSION)
		}
	case 1704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5359
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_CONSTRAINTS)
		}
	case 1705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5360
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_DEFAULTS)
		}
	case 1706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5361
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_IDENTITY)
		}
	case 1707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5362
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_GENERATED)
		}
	case 1708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5363
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_INDEXES)
		}
	case 1709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5364
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STATISTICS)
		}
	case 1710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5365
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STORAGE)
		}
	case 1711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5366
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_ALL)
		}
	case 1712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5371
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1713:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5372
		{
			yyVAL.str = "default"
		}
	case 1714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5376
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1715:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5377
		{
			yyVAL.str = ""
		}
	case 1716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5381
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5382
		{
			yyVAL.str = "default"
		}
	case 1718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5386
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1719:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5387
		{
			yyVAL.str = ""
		}
	case 1720:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5392
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1721:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5393
		{
			yyVAL.list = nil
		}
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5398
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1723:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5404
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5411
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5412
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5417
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[2].list
			yyVAL.node = colDef
		}
	case 1727:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5423
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[4].list
			yyVAL.node = colDef
		}
	case 1728:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5434
		{
			hashSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_HASH)
			hashSpec.IsDefault = false

			// Parse hash partition bounds (modulus and remainder)
			hashOptions := yyDollar[5].list
			for _, optNode := range hashOptions.Items {
				if defElem, ok := optNode.(*ast.DefElem); ok {
					if defElem.Defname == "modulus" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Modulus = integerVal.IVal
							}
						}
					} else if defElem.Defname == "remainder" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Remainder = integerVal.IVal
							}
						}
					}
				}
			}

			yyVAL.partboundspec = hashSpec
		}
	case 1729:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5463
		{
			listSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			listSpec.IsDefault = false
			listSpec.ListDatums = yyDollar[5].list
			yyVAL.partboundspec = listSpec
		}
	case 1730:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5472
		{
			rangeSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_RANGE)
			rangeSpec.IsDefault = false
			rangeSpec.LowDatums = yyDollar[5].list
			rangeSpec.HighDatums = yyDollar[9].list
			yyVAL.partboundspec = rangeSpec
		}
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5482
		{
			defaultSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			defaultSpec.IsDefault = true
			yyVAL.partboundspec = defaultSpec
		}
	case 1732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5491
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, ast.NewA_Const(ast.NewInteger(yyDollar[2].ival), 0))
		}
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5498
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5502
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1735:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5510
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1736:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5511
		{
			yyVAL.list = nil
		}
	case 1737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5516
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1738:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5520
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1739:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5528
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5534
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5539
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1742:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5544
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			colDef.StorageName = yyDollar[3].str
			colDef.Compression = yyDollar[4].str
			colDef.Fdwoptions = yyDollar[5].list
			colDef.Constraints = yyDollar[6].list
			yyVAL.node = colDef
		}
	case 1743:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5556
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1744:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5561
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1745:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5568
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5573
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5574
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1748:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5576
		{
			/*
			 * Note: the CollateClause is momentarily included in
			 * the list built by ColQualList, but we split it out
			 * again in SplitColQualList.
			 */
			collateClause := ast.NewCollateClause(yyDollar[2].list)
			yyVAL.node = collateClause
		}
	case 1749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5589
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5594
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_NOT_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1751:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5599
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRED)
			yyVAL.node = constraint
		}
	case 1752:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5604
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_IMMEDIATE)
			yyVAL.node = constraint
		}
	case 1753:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5612
		{
			yyVAL.bval = true
		}
	case 1754:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5613
		{
			yyVAL.bval = false
		}
	case 1755:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5614
		{
			yyVAL.bval = true
		}
	case 1756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5618
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_ALWAYS
		}
	case 1757:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5619
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_BY_DEFAULT
		}
	case 1758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5624
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1759:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5626
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5631
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1761:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5635
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1762:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5639
		{
			// SeqOptElem already returns a DefElem, so we can use it directly
			// Check for invalid options as per PostgreSQL
			defElem := yyDollar[2].defelt
			if defElem.Defname == "as" || defElem.Defname == "restart" || defElem.Defname == "owned_by" {
				yylex.Error("sequence option not supported here")
			}
			yyVAL.defelt = yyDollar[2].defelt
		}
	case 1763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5649
		{
			yyVAL.defelt = ast.NewDefElem("generated", ast.NewInteger(int(yyDollar[3].byt)))
		}
	case 1764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5655
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5656
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1766:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5661
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].typnam)
		}
	case 1767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5665
		{
			yyVAL.defelt = ast.NewDefElem("cache", yyDollar[2].node)
		}
	case 1768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5669
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(true))
		}
	case 1769:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5673
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(false))
		}
	case 1770:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5677
		{
			yyVAL.defelt = ast.NewDefElem("increment", yyDollar[3].node)
		}
	case 1771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5681
		{
			yyVAL.defelt = ast.NewDefElem("logged", nil)
		}
	case 1772:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5685
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", yyDollar[2].node)
		}
	case 1773:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5689
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", yyDollar[2].node)
		}
	case 1774:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5693
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", nil)
		}
	case 1775:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5697
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", nil)
		}
	case 1776:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5701
		{
			yyVAL.defelt = ast.NewDefElem("owned_by", yyDollar[3].list)
		}
	case 1777:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5705
		{
			yyVAL.defelt = ast.NewDefElem("sequence_name", yyDollar[3].list)
		}
	case 1778:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5709
		{
			yyVAL.defelt = ast.NewDefElem("start", yyDollar[3].node)
		}
	case 1779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5713
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1780:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5717
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5721
		{
			yyVAL.defelt = ast.NewDefElem("unlogged", nil)
		}
	case 1782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5727
		{
		}
	case 1783:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5728
		{
		}
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5732
		{
		}
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5733
		{
		}
	case 1786:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5734
		{
		}
	case 1787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5739
		{
			// RECHECK no longer does anything in opclass definitions,
			// but we still accept it to ease porting of old database dumps.
			// When this is used, we should emit a notice.
			// For now, just return true to indicate RECHECK was present
			yyVAL.bval = true
		}
	case 1788:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5746
		{
			yyVAL.bval = false
		}
	case 1789:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5750
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1790:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5751
		{
			yyVAL.list = nil
		}
	case 1791:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5756
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NOTNULL)
		}
	case 1792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5760
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NULL)
		}
	case 1793:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5764
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Keys = nil // Will be filled by the parser
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Options = yyDollar[3].list
			constraint.Indexspace = yyDollar[4].str
			yyVAL.node = constraint
		}
	case 1794:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5773
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = nil // Will be filled by the parser
			yyVAL.node = constraint
		}
	case 1795:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5779
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			yyVAL.node = constraint
		}
	case 1796:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5785
		{
			constraint := ast.NewConstraint(ast.CONSTR_DEFAULT)
			constraint.RawExpr = yyDollar[2].node
			yyVAL.node = constraint
		}
	case 1797:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5791
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Pktable = yyDollar[2].rangevar
			constraint.PkAttrs = yyDollar[3].list
			constraint.FkMatchtype = yyDollar[4].byt
			if actions := yyDollar[5].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			yyVAL.node = constraint
		}
	case 1798:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5808
		{
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.Options = yyDollar[5].list
			yyVAL.node = constraint
		}
	case 1799:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5815
		{
			constraint := ast.NewConstraint(ast.CONSTR_GENERATED)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.RawExpr = yyDollar[5].node
			yyVAL.node = constraint
		}
	case 1800:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5825
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5830
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1802:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5835
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			processConstraintAttributeSpec(yyDollar[5].ival, constraint)
			yyVAL.node = constraint
		}
	case 1803:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5843
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 1804:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5854
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Indexname = yyDollar[2].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[3].ival, constraint)
			yyVAL.node = constraint
		}
	case 1805:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5865
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 1806:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5875
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Indexname = yyDollar[3].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[4].ival, constraint)
			yyVAL.node = constraint
		}
	case 1807:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:5886
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.FkAttrs = yyDollar[4].list
			constraint.Pktable = yyDollar[7].rangevar
			constraint.PkAttrs = yyDollar[8].list
			constraint.FkMatchtype = yyDollar[9].byt
			if actions := yyDollar[10].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			processConstraintAttributeSpec(yyDollar[11].ival, constraint)
			yyVAL.node = constraint
		}
	case 1808:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5907
		{
			constraint := ast.NewConstraint(ast.CONSTR_EXCLUSION)
			constraint.AccessMethod = yyDollar[2].str
			constraint.Exclusions = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			constraint.WhereClause = yyDollar[9].node
			processConstraintAttributeSpec(yyDollar[10].ival, constraint)
			yyVAL.node = constraint
		}
	case 1809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5921
		{
			yyVAL.bval = true
		}
	case 1810:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5922
		{
			yyVAL.bval = false
		}
	case 1811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5928
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1812:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5934
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1813:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5942
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[3].list)
		}
	case 1814:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5947
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[5].list)
		}
	case 1815:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5955
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1816:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5959
		{
			yyVAL.list = nil
		}
	case 1817:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5966
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_FULL
		}
	case 1818:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5970
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_PARTIAL
		}
	case 1819:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5974
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 1820:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5978
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 1821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5985
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 1822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5995
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 1823:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6005
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = yyDollar[2].keyaction
			yyVAL.keyactions = n
		}
	case 1824:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6012
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[2].keyaction
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 1825:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6019
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 1826:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6034
		{
			// Check for unsupported column lists on UPDATE actions
			keyAction := yyDollar[3].keyaction
			if keyAction.Cols != nil {
				if len(keyAction.Cols.Items) > 0 {
					yylex.Error("column list with SET NULL/SET DEFAULT is only supported for ON DELETE actions")
				}
			}
			yyVAL.keyaction = keyAction
		}
	case 1827:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6047
		{
			yyVAL.keyaction = yyDollar[3].keyaction
		}
	case 1828:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6054
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_NOACTION
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6061
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_RESTRICT
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6068
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_CASCADE
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1831:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6075
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETNULL
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 1832:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6082
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETDEFAULT
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 1833:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6091
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1834:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6092
		{
			yyVAL.list = nil
		}
	case 1835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6096
		{
			yyVAL.partspec = yyDollar[1].partspec
		}
	case 1836:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6097
		{
			yyVAL.partspec = nil
		}
	case 1837:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6102
		{
			partitionSpec := ast.NewPartitionSpec(ast.PartitionStrategy(yyDollar[3].str), yyDollar[5].list)
			yyVAL.partspec = partitionSpec
		}
	case 1838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6110
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1839:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6115
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1840:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6123
		{
			partElem := ast.NewPartitionElem(yyDollar[1].str, nil, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 1841:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6130
		{
			partElem := ast.NewPartitionElem("", yyDollar[1].node, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 1842:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6137
		{
			partElem := ast.NewPartitionElem("", yyDollar[2].node, 0)
			partElem.Collation = yyDollar[4].list
			partElem.Opclass = yyDollar[5].list
			yyVAL.node = partElem
		}
	case 1843:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6146
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1844:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6147
		{
			yyVAL.str = ""
		}
	case 1845:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6151
		{
			yyVAL.oncommit = ast.ONCOMMIT_DROP
		}
	case 1846:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6152
		{
			yyVAL.oncommit = ast.ONCOMMIT_DELETE_ROWS
		}
	case 1847:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6153
		{
			yyVAL.oncommit = ast.ONCOMMIT_PRESERVE_ROWS
		}
	case 1848:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6154
		{
			yyVAL.oncommit = ast.ONCOMMIT_NOOP
		}
	case 1849:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6158
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1850:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6159
		{
			yyVAL.str = ""
		}
	case 1851:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6163
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1852:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6164
		{
			yyVAL.str = ""
		}
	case 1853:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6168
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1854:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:6181
		{
			indexStmt := ast.NewIndexStmt(yyDollar[5].str, yyDollar[7].rangevar, yyDollar[10].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.AccessMethod = yyDollar[8].str
			indexStmt.IndexIncludingParams = yyDollar[12].list
			indexStmt.NullsNotDistinct = !yyDollar[13].bval
			indexStmt.Options = yyDollar[14].list
			indexStmt.TableSpace = yyDollar[15].str
			indexStmt.WhereClause = yyDollar[16].node
			yyVAL.stmt = indexStmt
		}
	case 1855:
		yyDollar = yyS[yypt-19 : yypt+1]
//line postgres.y:6196
		{
			indexStmt := ast.NewIndexStmt(yyDollar[8].str, yyDollar[10].rangevar, yyDollar[13].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.IfNotExists = true
			indexStmt.AccessMethod = yyDollar[11].str
			indexStmt.IndexIncludingParams = yyDollar[15].list
			indexStmt.NullsNotDistinct = !yyDollar[16].bval
			indexStmt.Options = yyDollar[17].list
			indexStmt.TableSpace = yyDollar[18].str
			indexStmt.WhereClause = yyDollar[19].node
			yyVAL.stmt = indexStmt
		}
	case 1856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6212
		{
			yyVAL.bval = true
		}
	case 1857:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6213
		{
			yyVAL.bval = false
		}
	case 1858:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6217
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1859:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6218
		{
			yyVAL.str = "btree"
		}
	case 1860:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6222
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1861:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6223
		{
			yyVAL.list = nil
		}
	case 1862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6228
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1863:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6233
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1864:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6241
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1865:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6242
		{
			yyVAL.list = nil
		}
	case 1866:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6254
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1867:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6260
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1868:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6267
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 1869:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6273
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1870:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6280
		{
			// Index partition attachment - dedicated rule
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 1871:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6289
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			yyVAL.stmt = alterStmt
		}
	case 1872:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6295
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1873:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6302
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			yyVAL.stmt = alterStmt
		}
	case 1874:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6308
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1875:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6315
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			yyVAL.stmt = alterStmt
		}
	case 1876:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6321
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1877:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6328
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1878:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6334
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1879:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6341
		{
			// Partition commands - dedicated rule for partition-only operations
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1880:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6350
		{
			// Partition commands with IF EXISTS
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[6].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1881:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6360
		{
			// Bulk tablespace move for tables
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 1882:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6367
		{
			// Bulk tablespace move for tables owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 1883:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6375
		{
			// Bulk tablespace move for indexes
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 1884:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6382
		{
			// Bulk tablespace move for indexes owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 1885:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:6390
		{
			// Bulk tablespace move for materialized views
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[10].str)
			moveStmt.Nowait = yyDollar[11].bval
			yyVAL.stmt = moveStmt
		}
	case 1886:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:6397
		{
			// Bulk tablespace move for materialized views owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[13].str)
			moveStmt.Roles = yyDollar[10].list
			moveStmt.Nowait = yyDollar[14].bval
			yyVAL.stmt = moveStmt
		}
	case 1887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6408
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1888:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6413
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6421
		{
			yyVAL.bval = true
		}
	case 1890:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6422
		{
			yyVAL.bval = false
		}
	case 1891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6427
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].rolespec)
		}
	case 1892:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6432
		{
			yyDollar[1].list.Append(yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 1893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6440
		{
			roleSpec := yyDollar[1].rolespec

			switch roleSpec.Roletype {
			case ast.ROLESPEC_CSTRING:
				yyVAL.str = roleSpec.Rolename
			case ast.ROLESPEC_PUBLIC:
				// PostgreSQL throws an error for "public" role name
				yylex.Error(`role name "public" is reserved`)
				return 1
			case ast.ROLESPEC_SESSION_USER:
				// PostgreSQL throws an error: SESSION_USER cannot be used as a role name here
				yylex.Error(`SESSION_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_USER:
				// PostgreSQL throws an error: CURRENT_USER cannot be used as a role name here
				yylex.Error(`CURRENT_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_ROLE:
				// PostgreSQL throws an error: CURRENT_ROLE cannot be used as a role name here
				yylex.Error(`CURRENT_ROLE cannot be used as a role name here`)
				return 1
			default:
				yylex.Error(`invalid role specification`)
				return 1
			}
		}
	case 1894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6471
		{
			// Handle special role names: "public" and "none"
			var roleSpec *ast.RoleSpec

			if yyDollar[1].str == "public" {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_PUBLIC,
				}
			} else if yyDollar[1].str == "none" {
				// PostgreSQL throws an error for "none" - role name "none" is reserved
				yylex.Error(`role name "none" is reserved`)
				return 1
			} else {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_CSTRING,
					Rolename: yyDollar[1].str,
				}
			}
			yyVAL.rolespec = roleSpec
		}
	case 1895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6494
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_ROLE,
			}
		}
	case 1896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6501
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_USER,
			}
		}
	case 1897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6508
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_SESSION_USER,
			}
		}
	case 1898:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6519
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[2].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1899:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6526
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[5].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1900:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6533
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1901:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6540
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[6].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1902:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6547
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ColumnDefault, yyDollar[3].str, yyDollar[4].node)
		}
	case 1903:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6552
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropNotNull, yyDollar[3].str, nil)
		}
	case 1904:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6557
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetNotNull, yyDollar[3].str, nil)
		}
	case 1905:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6562
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetExpression, yyDollar[3].str, yyDollar[8].node)
		}
	case 1906:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6567
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
		}
	case 1907:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6572
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1908:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6579
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStatistics, yyDollar[3].str, yyDollar[6].node)
		}
	case 1909:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6584
		{
			cmd := ast.NewAlterTableCmd(ast.AT_SetStatistics, "", yyDollar[6].node)
			cmd.Num = int16(yyDollar[3].ival)
			yyVAL.node = cmd
		}
	case 1910:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6591
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 1911:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6596
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 1912:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6601
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStorage, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 1913:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6606
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetCompression, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 1914:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6611
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddIdentity, yyDollar[3].str, nil)
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[6].byt
			constraint.Options = yyDollar[9].list
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 1915:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6621
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetIdentity, yyDollar[3].str, yyDollar[4].list)
		}
	case 1916:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6626
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1917:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6633
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1918:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6640
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1919:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6648
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1920:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6659
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, nil)
			def := ast.NewColumnDef("", yyDollar[6].typnam, 0)
			def.Collclause = yyDollar[7].node.(*ast.CollateClause)
			def.RawDefault = yyDollar[8].node
			cmd.Def = def
			yyVAL.node = cmd
		}
	case 1921:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6669
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AlterColumnGenericOptions, yyDollar[3].str, yyDollar[4].list)
		}
	case 1922:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6674
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddConstraint, "", yyDollar[2].node)
		}
	case 1923:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6679
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterConstraint, "", nil)
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Conname = yyDollar[3].str
			constraint.Deferrable = (yyDollar[4].ival & ast.CAS_DEFERRABLE) != 0
			constraint.Initdeferred = (yyDollar[4].ival & ast.CAS_INITIALLY_DEFERRED) != 0
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 1924:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6690
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ValidateConstraint, yyDollar[3].str, nil)
		}
	case 1925:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6695
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1926:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6703
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1927:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6711
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOids, "", nil)
		}
	case 1928:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6716
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ClusterOn, yyDollar[3].str, nil)
		}
	case 1929:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6721
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropCluster, "", nil)
		}
	case 1930:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6726
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetLogged, "", nil)
		}
	case 1931:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6731
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetUnLogged, "", nil)
		}
	case 1932:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6736
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrig, yyDollar[3].str, nil)
		}
	case 1933:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6741
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysTrig, yyDollar[4].str, nil)
		}
	case 1934:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6746
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaTrig, yyDollar[4].str, nil)
		}
	case 1935:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6751
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigAll, "", nil)
		}
	case 1936:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6756
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigUser, "", nil)
		}
	case 1937:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6761
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrig, yyDollar[3].str, nil)
		}
	case 1938:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6766
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigAll, "", nil)
		}
	case 1939:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6771
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigUser, "", nil)
		}
	case 1940:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6776
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRule, yyDollar[3].str, nil)
		}
	case 1941:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6781
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysRule, yyDollar[4].str, nil)
		}
	case 1942:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6786
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaRule, yyDollar[4].str, nil)
		}
	case 1943:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6791
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRule, yyDollar[3].str, nil)
		}
	case 1944:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6796
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddInherit, "", yyDollar[2].rangevar)
		}
	case 1945:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6801
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropInherit, "", yyDollar[3].rangevar)
		}
	case 1946:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6806
		{
			typeName := makeTypeNameFromNodeList(yyDollar[2].list)
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddOf, "", typeName)
		}
	case 1947:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6812
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOf, "", nil)
		}
	case 1948:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6817
		{
			cmd := ast.NewAlterTableCmd(ast.AT_ChangeOwner, "", nil)
			cmd.Newowner = yyDollar[3].rolespec
			yyVAL.node = cmd
		}
	case 1949:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6824
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetAccessMethod, yyDollar[4].str, nil)
		}
	case 1950:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6829
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetTableSpace, yyDollar[3].str, nil)
		}
	case 1951:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6834
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetRelOptions, "", yyDollar[2].list)
		}
	case 1952:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6839
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetRelOptions, "", yyDollar[2].list)
		}
	case 1953:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6844
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ReplicaIdentity, "", yyDollar[3].node)
		}
	case 1954:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6849
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRowSecurity, "", nil)
		}
	case 1955:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6854
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRowSecurity, "", nil)
		}
	case 1956:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6859
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ForceRowSecurity, "", nil)
		}
	case 1957:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6864
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_NoForceRowSecurity, "", nil)
		}
	case 1958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6868
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_GenericOptions, "", yyDollar[1].list)
		}
	case 1959:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6876
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, yyDollar[4].partboundspec, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1960:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6884
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, yyDollar[4].bval, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1961:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6891
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartitionFinalize, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1962:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6902
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1963:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6911
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1964:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6912
		{
			yyVAL.node = nil
		}
	case 1965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6916
		{
		}
	case 1966:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6917
		{
		}
	case 1967:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6928
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1968:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6941
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1969:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6954
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1970:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6967
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1971:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6980
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[5].list
			objects.Append(ast.NewString(yyDollar[3].str))
			n.Objects = objects
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1972:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6995
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[7].list
			objects.Append(ast.NewString(yyDollar[5].str))
			n.Objects = objects
			n.Behavior = yyDollar[8].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1973:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7010
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1974:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7023
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1975:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7036
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1976:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7049
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1977:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7062
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = false
			n.Objects = yyDollar[4].list
			n.Behavior = yyDollar[5].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 1978:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7075
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = true
			n.Objects = yyDollar[6].list
			n.Behavior = yyDollar[7].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 1979:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7091
		{
			stmt := yyDollar[2].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 1980:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7097
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = true
			yyVAL.stmt = stmt
		}
	case 1981:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7103
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 1982:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7112
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "TRANSACTION", yyDollar[2].list, false)
		}
	case 1983:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7116
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "SESSION CHARACTERISTICS AS TRANSACTION", yyDollar[5].list, false)
		}
	case 1984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7119
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 1985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7123
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 1986:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7125
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "timezone", nil, false)
		}
	case 1987:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7129
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "transaction_isolation", nil, false)
		}
	case 1988:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7133
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "session_authorization", nil, false)
		}
	case 1989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7140
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, yyDollar[1].str, nil, false)
		}
	case 1990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7144
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET_ALL, "", nil, false)
		}
	case 1991:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7150
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 1992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7151
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 1993:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7155
		{
			yyVAL.stmt = ast.Stmt(yyDollar[2].vsetstmt)
		}
	case 1994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7160
		{
			yyVAL.objType = ast.OBJECT_TABLE
		}
	case 1995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7161
		{
			yyVAL.objType = ast.OBJECT_SEQUENCE
		}
	case 1996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7162
		{
			yyVAL.objType = ast.OBJECT_VIEW
		}
	case 1997:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7163
		{
			yyVAL.objType = ast.OBJECT_MATVIEW
		}
	case 1998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7164
		{
			yyVAL.objType = ast.OBJECT_INDEX
		}
	case 1999:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7165
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_TABLE
		}
	case 2000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7166
		{
			yyVAL.objType = ast.OBJECT_COLLATION
		}
	case 2001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7167
		{
			yyVAL.objType = ast.OBJECT_CONVERSION
		}
	case 2002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7168
		{
			yyVAL.objType = ast.OBJECT_STATISTIC_EXT
		}
	case 2003:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7169
		{
			yyVAL.objType = ast.OBJECT_TSPARSER
		}
	case 2004:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7170
		{
			yyVAL.objType = ast.OBJECT_TSDICTIONARY
		}
	case 2005:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7171
		{
			yyVAL.objType = ast.OBJECT_TSTEMPLATE
		}
	case 2006:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7172
		{
			yyVAL.objType = ast.OBJECT_TSCONFIGURATION
		}
	case 2007:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7185
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2008:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7190
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2009:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7204
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode: ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:  yyDollar[1].list,
				Objargs:  yyDollar[2].list,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2010:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7216
		{
			yylex.Error("Use NONE to denote the missing argument of a unary operator.")
			return 1
		}
	case 2011:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7221
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, yyDollar[4].typnam)
		}
	case 2012:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7223
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[4].typnam)
		}
	case 2013:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7225
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, nil)
		}
	case 2014:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7229
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2015:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7243
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2016:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7254
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2017:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7265
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2018:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7276
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DATABASE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2019:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7287
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2020:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7298
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMCONSTRAINT,
				Object:     yyDollar[3].list,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2021:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7310
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2022:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7321
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2023:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7332
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2024:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7343
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2025:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7354
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2026:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7371
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2027:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7388
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2028:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7400
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[7].rangevar,
				Subname:    yyDollar[5].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2029:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7412
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2030:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7423
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2031:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7434
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2032:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7445
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SCHEMA,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2033:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7456
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2034:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7467
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2035:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7478
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2036:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7489
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2037:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7500
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2038:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7511
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2039:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7522
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2040:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7533
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2041:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7544
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2042:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7555
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2043:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7566
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2044:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7577
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2045:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7588
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2046:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7599
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2047:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7610
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2048:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7623
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2049:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7636
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2050:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7649
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2051:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7662
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2052:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7675
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2053:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7688
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[3].rangevar,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2054:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7700
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[8].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2055:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7712
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2056:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7725
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2057:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7738
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_RULE,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2058:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7750
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TRIGGER,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2059:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7762
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2060:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7773
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2061:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7784
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2062:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7795
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLESPACE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2063:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7806
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2064:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7817
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSPARSER,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2065:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7828
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2066:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7839
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSTEMPLATE,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2067:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7850
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2068:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7861
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2069:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7872
		{
			rv, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(err.Error())
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_ATTRIBUTE,
				RelationType: ast.OBJECT_TYPE,
				Relation:     rv,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				Behavior:     ast.DropBehavior(yyDollar[9].dropBehav),
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2070:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7898
		{
			yyVAL.ival = 0
		}
	case 2071:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7900
		{
			// Combine constraint attribute bits
			newspec := yyDollar[1].ival | yyDollar[2].ival

			// Check for conflicts (NOT DEFERRABLE + INITIALLY DEFERRED)
			if (newspec & (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED)) == (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED) {
				// This would be an error in real PostgreSQL parser
			}

			yyVAL.ival = newspec
		}
	case 2072:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7914
		{
			yyVAL.ival = ast.CAS_NOT_DEFERRABLE
		}
	case 2073:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7915
		{
			yyVAL.ival = ast.CAS_DEFERRABLE
		}
	case 2074:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7916
		{
			yyVAL.ival = ast.CAS_INITIALLY_IMMEDIATE
		}
	case 2075:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7917
		{
			yyVAL.ival = ast.CAS_INITIALLY_DEFERRED
		}
	case 2076:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7918
		{
			yyVAL.ival = ast.CAS_NOT_VALID
		}
	case 2077:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7919
		{
			yyVAL.ival = ast.CAS_NO_INHERIT
		}
	case 2078:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7923
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2079:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7928
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2080:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7933
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2081:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7941
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2082:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7945
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2083:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7949
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, yyDollar[5].node, ast.DEFELEM_UNSPEC)
		}
	case 2084:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7953
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, nil, ast.DEFELEM_UNSPEC)
		}
	case 2085:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7967
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  yyDollar[7].typnam,
				Options:     yyDollar[8].list,
				SQLBody:     yyDollar[9].node,
			}
			yyVAL.stmt = stmt
		}
	case 2086:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:7981
		{
			// Handle RETURNS TABLE variant
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil, // TODO: Handle table return type
				Options:     yyDollar[11].list,
				SQLBody:     yyDollar[12].node,
			}
			// TODO: Process table_func_column_list into appropriate return type
			yyVAL.stmt = stmt
		}
	case 2087:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7997
		{
			// No explicit return type (for procedures disguised as functions)
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2088:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8012
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: true,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2089:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8027
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2090:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8028
		{
			yyVAL.list = nil
		}
	case 2091:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8033
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2092:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8037
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2093:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8045
		{
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2094:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8049
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2095:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8054
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2096:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8062
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    yyDollar[2].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2097:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8071
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[2].funparammode,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2098:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8080
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2099:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8089
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    "",
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8098
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    "",
				ArgType: yyDollar[1].typnam,
			}
			yyVAL.funparam = param
		}
	case 2101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8109
		{
			yyVAL.funparammode = ast.FUNC_PARAM_IN
		}
	case 2102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8110
		{
			yyVAL.funparammode = ast.FUNC_PARAM_OUT
		}
	case 2103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8111
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8112
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8113
		{
			yyVAL.funparammode = ast.FUNC_PARAM_VARIADIC
		}
	case 2106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8117
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8121
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8123
		{
			// Handle %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				// TODO: Add %TYPE indicator
			}
		}
	case 2109:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8133
		{
			// Handle SETOF %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[2].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				Setof: true,
			}
		}
	case 2110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8145
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2111:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8146
		{
			yyVAL.list = nil
		}
	case 2112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8151
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].defelt)
			yyVAL.list = list
		}
	case 2113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8157
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8165
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].node)
		}
	case 2115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8169
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 2116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8173
		{
			yyVAL.defelt = ast.NewDefElem("transform", yyDollar[2].list)
		}
	case 2117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8177
		{
			yyVAL.defelt = ast.NewDefElem("window", ast.NewBoolean(true))
		}
	case 2118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8181
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8188
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.node = list
		}
	case 2120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8194
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 2121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8204
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[3].typnam)
			yyVAL.list = list
		}
	case 2122:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8210
		{
			yyDollar[1].list.Append(yyDollar[5].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8218
		{
			yyVAL.node = yyDollar[1].stmt
		}
	case 2124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8222
		{
			/*
			 * A compound statement is stored as a single-item list
			 * containing the list of statements as its member.  That
			 * way, the parse analysis code can tell apart an empty
			 * body from no body at all.
			 */
			list := ast.NewNodeList()
			list.Append(yyDollar[3].list)
			yyVAL.node = list
		}
	case 2125:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8234
		{
			yyVAL.node = nil
		}
	case 2126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8241
		{
			yyVAL.stmt = &ast.ReturnStmt{
				ReturnVal: yyDollar[2].node,
			}
		}
	case 2127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8250
		{
			/* As in stmtmulti, discard empty statements */
			if yyDollar[2].stmt != nil {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			} else {
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8260
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8266
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8267
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8272
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(false))
		}
	case 2132:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8276
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 2133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8280
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 2134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8284
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("immutable"))
		}
	case 2135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8288
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("stable"))
		}
	case 2136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8292
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("volatile"))
		}
	case 2137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8296
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 2138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8300
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 2139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8304
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 2140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8308
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 2141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8312
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(true))
		}
	case 2142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8316
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(false))
		}
	case 2143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8320
		{
			yyVAL.defelt = ast.NewDefElem("cost", yyDollar[2].node)
		}
	case 2144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8324
		{
			yyVAL.defelt = ast.NewDefElem("rows", yyDollar[2].node)
		}
	case 2145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8328
		{
			yyVAL.defelt = ast.NewDefElem("support", yyDollar[2].list)
		}
	case 2146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8332
		{
			yyVAL.defelt = ast.NewDefElem("set", yyDollar[1].vsetstmt)
		}
	case 2147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8336
		{
			yyVAL.defelt = ast.NewDefElem("parallel", ast.NewString(yyDollar[2].str))
		}
	case 2148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8343
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8347
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2150:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:8363
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[6].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: false,
				Trigname:     yyDollar[4].str,
				Relation:     yyDollar[8].rangevar,
				Funcname:     yyDollar[14].list,
				Args:         yyDollar[16].list,
				Row:          yyDollar[10].bval,
				Timing:       int16(yyDollar[5].ival),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[11].node,
				Transitions:  yyDollar[9].list,
				Deferrable:   false,
				Initdeferred: false,
				Constrrel:    nil,
			}
			yyVAL.stmt = stmt
		}
	case 2151:
		yyDollar = yyS[yypt-21 : yypt+1]
//line postgres.y:8395
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[7].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: true,
				Trigname:     yyDollar[5].str,
				Relation:     yyDollar[9].rangevar,
				Funcname:     yyDollar[18].list,
				Args:         yyDollar[20].list,
				Row:          true,
				Timing:       int16(ast.TRIGGER_TIMING_AFTER),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[15].node,
				Transitions:  nil,
				Deferrable:   true, // Default for constraint triggers
				Initdeferred: false,
				Constrrel:    yyDollar[10].rangevar,
			}
			yyVAL.stmt = stmt
		}
	case 2152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8426
		{
			yyVAL.ival = ast.TRIGGER_TIMING_BEFORE
		}
	case 2153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8427
		{
			yyVAL.ival = ast.TRIGGER_TIMING_AFTER
		}
	case 2154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8428
		{
			yyVAL.ival = ast.TRIGGER_TIMING_INSTEAD
		}
	case 2155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8433
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8435
		{
			// Extract event types and column lists from both sides
			events1 := yyDollar[1].list.Items[0].(*ast.Integer).IVal
			events2 := yyDollar[3].list.Items[0].(*ast.Integer).IVal
			columns1 := yyDollar[1].list.Items[1]
			columns2 := yyDollar[3].list.Items[1]

			// Check for duplicate events
			if events1&events2 != 0 {
				// TODO: Generate parse error for duplicate trigger events
			}

			// Create combined result [events1|events2, combined_columns]
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(events1 | events2))

			// Concatenate column lists (if any)
			if columns1 != nil && columns2 != nil {
				// Both have columns - concatenate
				combinedCols := columns1.(*ast.NodeList)
				if columns2List, ok := columns2.(*ast.NodeList); ok {
					for _, item := range columns2List.Items {
						combinedCols.Append(item)
					}
				}
				list.Append(combinedCols)
			} else if columns1 != nil {
				list.Append(columns1)
			} else if columns2 != nil {
				list.Append(columns2)
			} else {
				list.Append(nil)
			}

			yyVAL.list = list
		}
	case 2157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8475
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_INSERT)))
			list.Append(nil) // No columns for INSERT
			yyVAL.list = list
		}
	case 2158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8482
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_DELETE)))
			list.Append(nil) // No columns for DELETE
			yyVAL.list = list
		}
	case 2159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8489
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(nil) // No columns for UPDATE
			yyVAL.list = list
		}
	case 2160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8496
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(yyDollar[3].list) // Column list for UPDATE OF
			yyVAL.list = list
		}
	case 2161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8503
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_TRUNCATE)))
			list.Append(nil) // No columns for TRUNCATE
			yyVAL.list = list
		}
	case 2162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8512
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8513
		{
			yyVAL.list = nil
		}
	case 2164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8517
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8522
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2166:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8530
		{
			trans := &ast.TriggerTransition{
				Name:    yyDollar[4].str,
				IsNew:   yyDollar[1].bval,
				IsTable: yyDollar[2].bval,
			}
			yyVAL.node = trans
		}
	case 2167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8541
		{
			yyVAL.bval = true
		}
	case 2168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8542
		{
			yyVAL.bval = false
		}
	case 2169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8546
		{
			yyVAL.bval = true
		}
	case 2170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8547
		{
			yyVAL.bval = false
		}
	case 2171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8551
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8556
		{
			yyVAL.bval = yyDollar[3].bval
		}
	case 2173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8560
		{
			// If ROW/STATEMENT not specified, default to STATEMENT
			yyVAL.bval = false
		}
	case 2176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8572
		{
			yyVAL.bval = true
		}
	case 2177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8573
		{
			yyVAL.bval = false
		}
	case 2178:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8577
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8578
		{
			yyVAL.node = nil
		}
	case 2182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8587
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8592
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2184:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8596
		{
			yyVAL.list = nil
		}
	case 2185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8601
		{
			yyVAL.node = ast.NewString(fmt.Sprintf("%d", yyDollar[1].ival))
		}
	case 2186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8604
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8605
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8606
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8610
		{
			yyVAL.rangevar = yyDollar[2].rangevar
		}
	case 2190:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8611
		{
			yyVAL.rangevar = nil
		}
	case 2191:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8624
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[4].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[5].list,
				Query:           yyDollar[8].stmt,
				Replace:         false,
				Options:         yyDollar[6].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[9].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2192:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:8640
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[6].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[10].stmt,
				Replace:         true,
				Options:         yyDollar[8].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[11].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2193:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:8656
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[5].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[11].stmt,
				Replace:         false,
				Options:         yyDollar[9].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[12].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2194:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:8672
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[7].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[9].list,
				Query:           yyDollar[13].stmt,
				Replace:         true,
				Options:         yyDollar[11].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[14].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8689
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2196:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8690
		{
			yyVAL.list = nil
		}
	case 2197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8694
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2198:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8695
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2199:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8696
		{
			yyVAL.ival = int(ast.LOCAL_CHECK_OPTION)
		}
	case 2200:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8697
		{
			yyVAL.ival = int(ast.NO_CHECK_OPTION)
		}
	case 2201:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8708
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = yyDollar[5].rolespec
			n.SchemaElts = yyDollar[6].list
			yyVAL.stmt = n
		}
	case 2202:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8715
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = nil
			n.SchemaElts = yyDollar[4].list
			yyVAL.stmt = n
		}
	case 2203:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8722
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = yyDollar[8].rolespec
			n.SchemaElts = yyDollar[9].list
			yyVAL.stmt = n
		}
	case 2204:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8729
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = nil
			n.SchemaElts = yyDollar[7].list
			yyVAL.stmt = n
		}
	case 2205:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8745
		{
			n := ast.NewCreateDomainStmt(yyDollar[3].list, yyDollar[5].typnam)
			// Use SplitColQualList to separate constraints and collate clause
			constraints, collClause := SplitColQualList(yyDollar[6].list)
			n.Constraints = constraints
			n.CollClause = collClause
			yyVAL.stmt = n
		}
	case 2206:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8763
		{
			n := ast.NewAlterDomainStmt('T', yyDollar[3].list)
			n.Def = yyDollar[4].node
			yyVAL.stmt = n
		}
	case 2207:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8769
		{
			n := ast.NewAlterDomainStmt('N', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2208:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8774
		{
			n := ast.NewAlterDomainStmt('O', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2209:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8779
		{
			n := ast.NewAlterDomainStmt('C', yyDollar[3].list)
			n.Def = yyDollar[5].node
			yyVAL.stmt = n
		}
	case 2210:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8785
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[6].str
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			yyVAL.stmt = n
		}
	case 2211:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8793
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[8].str
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			yyVAL.stmt = n
		}
	case 2212:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8801
		{
			n := ast.NewAlterDomainStmt('V', yyDollar[3].list)
			n.Name = yyDollar[6].str
			yyVAL.stmt = n
		}
	case 2213:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8816
		{
			// Extract actual arguments from aggr_args which returns [args, position_indicator]
			var args *ast.NodeList
			if yyDollar[5].list != nil && yyDollar[5].list.Len() > 0 {
				// First element contains the actual arguments (or nil for *)
				if firstElem, ok := yyDollar[5].list.Items[0].(*ast.NodeList); ok {
					args = firstElem
				} else if yyDollar[5].list.Items[0] == nil {
					// Special case for COUNT(*) - create a list with a single nil element
					args = ast.NewNodeList(nil)
				}
			}
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, false, yyDollar[4].list, args, yyDollar[6].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2214:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8832
		{
			// old-style (pre-8.2) syntax for CREATE AGGREGATE
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, true, yyDollar[4].list, nil, yyDollar[5].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2215:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8838
		{
			n := ast.NewDefineStmt(ast.OBJECT_OPERATOR, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2216:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8843
		{
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8848
		{
			// Shell type (identified by lack of definition)
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, nil, false, false)
			yyVAL.stmt = n
		}
	case 2218:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8854
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSPARSER, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2219:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8859
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSDICTIONARY, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2220:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8864
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSTEMPLATE, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2221:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8869
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSCONFIGURATION, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2222:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8874
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2223:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8879
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, yyDollar[7].list, true, false)
			yyVAL.stmt = n
		}
	case 2224:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8884
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, ast.NewNodeList(yyDollar[5].list), false, false)
			yyVAL.stmt = n
		}
	case 2225:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8889
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, ast.NewNodeList(yyDollar[8].list), true, false)
			yyVAL.stmt = n
		}
	case 2226:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8894
		{
			typevar, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(fmt.Sprintf("invalid type name: %v", err))
				return 1
			}

			n := ast.NewCompositeTypeStmt(typevar, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2227:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8905
		{
			n := ast.NewCreateEnumStmt(yyDollar[3].list, yyDollar[7].list)
			yyVAL.stmt = n
		}
	case 2228:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8910
		{
			n := ast.NewCreateRangeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2229:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8924
		{
			n := ast.NewCreateSeqStmt(yyDollar[4].rangevar, yyDollar[5].list, 0, false, false)
			yyVAL.stmt = n
		}
	case 2230:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8929
		{
			n := ast.NewCreateSeqStmt(yyDollar[7].rangevar, yyDollar[8].list, 0, false, true)
			yyVAL.stmt = n
		}
	case 2231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8936
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2232:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8937
		{
			yyVAL.list = nil
		}
	case 2233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8940
		{
		}
	case 2234:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8941
		{
		}
	case 2235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8952
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[3].rangevar, yyDollar[4].list, false, false)
		}
	case 2236:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8956
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[5].rangevar, yyDollar[6].list, false, true)
		}
	case 2237:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8969
		{
			n := ast.NewCreateExtensionStmt(yyDollar[3].str, false, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2238:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8974
		{
			n := ast.NewCreateExtensionStmt(yyDollar[6].str, true, yyDollar[8].list)
			yyVAL.stmt = n
		}
	case 2239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8982
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2240:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8991
		{
			yyVAL.list = nil
		}
	case 2241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8998
		{
			yyVAL.defelt = ast.NewDefElem("schema", ast.NewString(yyDollar[2].str))
		}
	case 2242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9002
		{
			yyVAL.defelt = ast.NewDefElem("version", ast.NewString(yyDollar[2].str))
		}
	case 2243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9006
		{
			yylex.Error("CREATE EXTENSION ... FROM is no longer supported")
			return 1
		}
	case 2244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9011
		{
			yyVAL.defelt = ast.NewDefElem("cascade", ast.NewBoolean(true))
		}
	case 2245:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9024
		{
			n := ast.NewAlterExtensionStmt(yyDollar[3].str, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9032
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2247:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9041
		{
			yyVAL.list = nil
		}
	case 2248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9048
		{
			yyVAL.defelt = ast.NewDefElem("to", ast.NewString(yyDollar[2].str))
		}
	case 2249:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9061
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), ast.NewString(yyDollar[6].str))
		}
	case 2250:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9065
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), yyDollar[6].list)
		}
	case 2251:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9069
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_AGGREGATE), yyDollar[6].objwithargs)
		}
	case 2252:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9073
		{
			// CAST takes two TypeNames as a NodeList
			list := ast.NewNodeList(yyDollar[7].typnam)
			list.Append(yyDollar[9].typnam)
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_CAST), list)
		}
	case 2253:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9080
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_DOMAIN), yyDollar[6].typnam)
		}
	case 2254:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9084
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_FUNCTION), yyDollar[6].objwithargs)
		}
	case 2255:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9088
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPERATOR), yyDollar[6].objwithargs)
		}
	case 2256:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9092
		{
			// OPERATOR CLASS takes method name + class name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then class name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPCLASS), list)
		}
	case 2257:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9101
		{
			// OPERATOR FAMILY takes method name + family name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then family name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPFAMILY), list)
		}
	case 2258:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9110
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_PROCEDURE), yyDollar[6].objwithargs)
		}
	case 2259:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9114
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_ROUTINE), yyDollar[6].objwithargs)
		}
	case 2260:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9118
		{
			list := ast.NewNodeList(yyDollar[7].typnam, ast.NewString(yyDollar[9].str))
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TRANSFORM), list)
		}
	case 2261:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9123
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TYPE), yyDollar[6].typnam)
		}
	case 2262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9128
		{
			yyVAL.ival = 1
		}
	case 2263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9129
		{
			yyVAL.ival = 0
		}
	case 2264:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9139
		{
			yyVAL.stmt = ast.NewCreateFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2265:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9145
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2266:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9149
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, nil)
		}
	case 2267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9155
		{
			yyVAL.defelt = ast.NewDefElem("handler", yyDollar[2].list)
		}
	case 2268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9156
		{
			yyVAL.defelt = ast.NewDefElem("handler", nil)
		}
	case 2269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9157
		{
			yyVAL.defelt = ast.NewDefElem("validator", yyDollar[2].list)
		}
	case 2270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9158
		{
			yyVAL.defelt = ast.NewDefElem("validator", nil)
		}
	case 2271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9162
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9163
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9167
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2274:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9168
		{
			yyVAL.list = nil
		}
	case 2275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9172
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9173
		{
			result := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				result.Append(item)
			}
			yyVAL.list = result
		}
	case 2277:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9190
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].str, yyDollar[9].str, yyDollar[10].list, false)
		}
	case 2278:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:9195
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[6].str, yyDollar[7].str, yyDollar[8].str, yyDollar[12].str, yyDollar[13].list, true)
		}
	case 2279:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9201
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].list, true)
		}
	case 2280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9205
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, nil, true)
		}
	case 2281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9209
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, "", yyDollar[4].list, false)
		}
	case 2282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9215
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2283:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9216
		{
			yyVAL.str = ""
		}
	case 2284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9220
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9221
		{
			yyVAL.str = ""
		}
	case 2286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9225
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2287:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9226
		{
			yyVAL.str = ""
		}
	case 2288:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9239
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[6].list, yyDollar[8].list, yyDollar[10].str, yyDollar[11].list, nil, false)
		}
	case 2289:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:9245
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[9].list, yyDollar[11].list, yyDollar[13].str, yyDollar[14].list, nil, true)
		}
	case 2290:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:9251
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[8].list, ast.NewNodeList(yyDollar[7].rangevar), yyDollar[11].str, yyDollar[12].list, yyDollar[9].partboundspec, false)
		}
	case 2291:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:9257
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[11].list, ast.NewNodeList(yyDollar[10].rangevar), yyDollar[14].str, yyDollar[15].list, yyDollar[12].partboundspec, true)
		}
	case 2292:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9269
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list, false)
		}
	case 2293:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9273
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[8].rolespec, yyDollar[10].str, yyDollar[11].list, true)
		}
	case 2294:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9279
		{
			yyVAL.stmt = ast.NewAlterUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list)
		}
	case 2295:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9285
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, false)
		}
	case 2296:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9289
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[7].rolespec, yyDollar[9].str, true)
		}
	case 2297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9295
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 2298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9296
		{
			yyVAL.rolespec = ast.NewRoleSpec(ast.ROLESPEC_CURRENT_USER, "")
		}
	case 2299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9301
		{
			// For aggregates like COUNT(*)
			// Return a list with [nil, -1] matching PostgreSQL's list_make2(NIL, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(nil, ast.NewInteger(-1))
		}
	case 2300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9307
		{
			// Regular aggregate arguments
			// Return a list with [args, -1] matching PostgreSQL's list_make2($2, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(yyDollar[2].list, ast.NewInteger(-1))
		}
	case 2301:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9313
		{
			// Ordered-set aggregate without direct arguments
			// Return a list with [args, 0] matching PostgreSQL's list_make2($4, makeInteger(0))
			yyVAL.list = ast.NewNodeList(yyDollar[4].list, ast.NewInteger(0))
		}
	case 2302:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9319
		{
			// Hypothetical-set aggregate
			// This is the only case requiring consistency checking in PostgreSQL
			result, err := makeOrderedSetArgs(yyDollar[2].list, yyDollar[5].list)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.list = result
		}
	case 2303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9333
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9337
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9345
		{
			yyVAL.node = yyDollar[1].funparam
		}
	case 2306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9352
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9359
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9363
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9371
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2310:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9378
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			n.NewValIsAfter = true
			yyVAL.stmt = n
		}
	case 2311:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9386
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = false
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2312:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9395
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = true
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2313:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9404
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.OldVal = yyDollar[6].str
			n.NewVal = yyDollar[8].str
			n.SkipIfNewValExists = false
			yyVAL.stmt = n
		}
	case 2314:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9412
		{
			// Following PostgreSQL's approach - DROP VALUE is parsed but not implemented
			// PostgreSQL throws an error saying "dropping an enum value is not implemented"
			yylex.Error("dropping an enum value is not implemented")
			return 1
		}
	case 2315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9428
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9430
		{
			yyVAL.list = nil
		}
	case 2317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9435
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9437
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9442
		{
			if constraint, ok := yyDollar[3].node.(*ast.Constraint); ok {
				constraint.Conname = yyDollar[2].str
				yyVAL.node = constraint
			} else {
				yyVAL.node = yyDollar[3].node
			}
		}
	case 2320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9451
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2321:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9456
		{
			n := ast.NewConstraint(ast.CONSTR_CHECK)
			n.RawExpr = yyDollar[3].node
			n.CookedExpr = "" // Empty string, not nil
			// Process constraint attributes from $5
			processConstraintAttributeSpec(yyDollar[5].ival, n)
			// PostgreSQL: n->initially_valid = !n->skip_validation
			n.InitiallyValid = !n.SkipValidation
			yyVAL.node = n
		}
	case 2322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9467
		{
			n := ast.NewConstraint(ast.CONSTR_NOTNULL)
			// In PostgreSQL, domain NOT NULL constraints have keys = list_make1(makeString("value"))
			n.Keys = ast.NewNodeList(ast.NewString("value"))
			// Process constraint attributes from $3
			processConstraintAttributeSpec(yyDollar[3].ival, n)
			// PostgreSQL sets initially_valid = true for NOT NULL (no NOT VALID support yet)
			n.InitiallyValid = true
			yyVAL.node = n
		}
	case 2323:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9487
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[7].stmt, yyDollar[5].into, ast.OBJECT_MATVIEW, false, false)
			/* cram additional flags into the IntoClause */
			yyDollar[5].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[5].into.SkipData = !yyDollar[8].bval
			yyVAL.stmt = ctas
		}
	case 2324:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9495
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[10].stmt, yyDollar[8].into, ast.OBJECT_MATVIEW, false, true)
			/* cram additional flags into the IntoClause */
			yyDollar[8].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[8].into.SkipData = !yyDollar[11].bval
			yyVAL.stmt = ctas
		}
	case 2325:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9506
		{
			n := ast.NewRefreshMatViewStmt(yyDollar[4].bval, !yyDollar[6].bval, yyDollar[5].rangevar)
			yyVAL.stmt = n
		}
	case 2326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9512
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 2327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9513
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 2328:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9518
		{
			yyVAL.into = &ast.IntoClause{
				Rel:            yyDollar[1].rangevar,
				ColNames:       yyDollar[2].list,
				AccessMethod:   yyDollar[3].str,
				Options:        yyDollar[4].list,
				TableSpaceName: yyDollar[5].str,
			}
		}
	case 2329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9530
		{
			yyVAL.bval = true
		}
	case 2330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9531
		{
			yyVAL.bval = false
		}
	case 2331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9532
		{
			yyVAL.bval = true
		}
	case 2332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9537
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].stmt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9546
		{
			yyVAL.list = nil
		}
	case 2338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9557
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9559
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_CURRENT, yyDollar[1].str, nil, false)
		}
	case 2340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9563
		{
			args := ast.NewNodeList(yyDollar[3].node)
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "timezone", args, false)
		}
	case 2341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9568
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "catalog", args, false)
		}
	case 2342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9573
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "search_path", args, false)
		}
	case 2343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9578
		{
			var args *ast.NodeList
			if yyDollar[2].str != "" {
				args = ast.NewNodeList(ast.NewString(yyDollar[2].str))
			}
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "client_encoding", args, false)
		}
	case 2344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9586
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "role", args, false)
		}
	case 2345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9591
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "session_authorization", args, false)
		}
	case 2346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9596
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, "session_authorization", nil, false)
		}
	case 2347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9600
		{
			var value string
			if yyDollar[3].ival == int(ast.XMLOPTION_DOCUMENT) {
				value = "document"
			} else {
				value = "content"
			}
			args := ast.NewNodeList(ast.NewString(value))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "xmloption", args, false)
		}
	case 2348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9611
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "transaction_snapshot", args, false)
		}
	case 2349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9619
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9623
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9627
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9631
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9638
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9642
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 2355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9649
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9655
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9662
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9663
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9667
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9668
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9669
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9670
		{
			yyVAL.node = ast.NewString("default")
		}
	case 2363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9671
		{
			yyVAL.node = ast.NewString("local")
		}
	case 2364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9672
		{
			yyVAL.node = ast.NewString("true")
		}
	case 2365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9673
		{
			yyVAL.node = ast.NewString("false")
		}
	case 2366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9674
		{
			yyVAL.node = ast.NewString("on")
		}
	case 2367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9675
		{
			yyVAL.node = ast.NewString("off")
		}
	case 2368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9679
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9680
		{
			yyVAL.str = "default"
		}
	case 2370:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9681
		{
			yyVAL.str = ""
		}
	case 2371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9685
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9686
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9690
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9691
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9692
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9693
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9697
		{
			yyVAL.ival = int(ast.XMLOPTION_DOCUMENT)
		}
	case 2378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9698
		{
			yyVAL.ival = int(ast.XMLOPTION_CONTENT)
		}
	case 2379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9703
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9709
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9714
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9722
		{
			yyVAL.node = ast.NewDefElem("transaction_isolation", ast.NewString(yyDollar[3].str))
		}
	case 2383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9726
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(true))
		}
	case 2384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9730
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(false))
		}
	case 2385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9734
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(true))
		}
	case 2386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9738
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(false))
		}
	case 2387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9744
		{
			yyVAL.str = "read uncommitted"
		}
	case 2388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9745
		{
			yyVAL.str = "read committed"
		}
	case 2389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9746
		{
			yyVAL.str = "repeatable read"
		}
	case 2390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9747
		{
			yyVAL.str = "serializable"
		}
	case 2391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9751
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 2392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9752
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9753
		{
			yyVAL.node = yyDollar[1].list
		}
	case 2394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9756
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9757
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9758
		{
			yyVAL.node = ast.NewString("none")
		}
	case 2397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9762
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9763
		{
			yyVAL.list = nil
		}
	case 2399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9767
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9768
		{
			yyVAL.node = nil
		}
	case 2401:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9772
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9777
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9782
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9790
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9794
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_SET
			yyVAL.defelt = elem
		}
	case 2406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9800
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_ADD
			yyVAL.defelt = elem
		}
	case 2407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9806
		{
			yyVAL.defelt = ast.NewDefElemExtended("", yyDollar[2].str, nil, ast.DEFELEM_DROP)
		}
	case 2408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9812
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9813
		{
			yyVAL.str = ""
		}
	case 2410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9817
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_NOTHING, "")
		}
	case 2411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9818
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_FULL, "")
		}
	case 2412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9819
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_DEFAULT, "")
		}
	case 2413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9820
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_INDEX, yyDollar[3].str)
		}
	case 2414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9824
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9829
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9834
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9841
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9842
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2419:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9853
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[9].list, nil)
		}
	case 2420:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:9857
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[11].list, yyDollar[8].list)
		}
	case 2421:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9863
		{
			yyVAL.stmt = ast.NewAlterEventTrigStmt(yyDollar[4].str, ast.TriggerFires(yyDollar[5].ival))
		}
	case 2422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9869
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_ORIGIN)
		}
	case 2423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9870
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_REPLICA)
		}
	case 2424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9871
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ALWAYS)
		}
	case 2425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9872
		{
			yyVAL.ival = int(ast.TRIGGER_DISABLED)
		}
	case 2426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9877
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9882
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2428:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9890
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[4].list)
		}
	case 2429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9897
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(ast.NewString(yyDollar[1].str))
		}
	case 2430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9902
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2431:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9916
		{
			yyVAL.stmt = ast.NewCreateTableSpaceStmt(yyDollar[3].str, yyDollar[4].rolespec, yyDollar[6].str, yyDollar[7].list)
		}
	case 2432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9922
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 2433:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9923
		{
			yyVAL.rolespec = nil
		}
	case 2434:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9928
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, false)
		}
	case 2435:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9932
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, true)
		}
	case 2436:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9947
		{
			yyVAL.stmt = ast.NewCreatePolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].bval, yyDollar[7].str, yyDollar[8].list, yyDollar[9].node, yyDollar[10].node)
		}
	case 2437:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9955
		{
			yyVAL.stmt = ast.NewAlterPolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].list, yyDollar[7].node, yyDollar[8].node)
		}
	case 2438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9962
		{
			// Check for "permissive" or "restrictive" (case-insensitive)
			if strings.EqualFold(yyDollar[2].str, "permissive") {
				yyVAL.bval = true
			} else if strings.EqualFold(yyDollar[2].str, "restrictive") {
				yyVAL.bval = false
			} else {
				// Parser will error on invalid value
				yylex.Error("unrecognized row security option")
				return 1
			}
		}
	case 2439:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9974
		{
			yyVAL.bval = true
		}
	case 2440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9978
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2441:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9979
		{
			yyVAL.str = "all"
		}
	case 2442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9983
		{
			yyVAL.str = "all"
		}
	case 2443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9984
		{
			yyVAL.str = "select"
		}
	case 2444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9985
		{
			yyVAL.str = "insert"
		}
	case 2445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9986
		{
			yyVAL.str = "update"
		}
	case 2446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9987
		{
			yyVAL.str = "delete"
		}
	case 2447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9991
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2448:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9992
		{
			// Default to PUBLIC when no TO clause is specified
			publicRole := ast.NewRoleSpec(ast.ROLESPEC_PUBLIC, "")
			yyVAL.list = ast.NewNodeList(publicRole)
		}
	case 2449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10000
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2450:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10001
		{
			yyVAL.list = nil
		}
	case 2451:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10005
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2452:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10006
		{
			yyVAL.node = nil
		}
	case 2453:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10010
		{
			yyVAL.node = yyDollar[4].node
		}
	case 2454:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10011
		{
			yyVAL.node = nil
		}
	case 2455:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10022
		{
			yyVAL.stmt = ast.NewCreateAmStmt(yyDollar[4].str, ast.AmType(yyDollar[6].ival), yyDollar[8].list)
		}
	case 2456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10028
		{
			yyVAL.ival = int(ast.AMTYPE_INDEX)
		}
	case 2457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10029
		{
			yyVAL.ival = int(ast.AMTYPE_TABLE)
		}
	case 2458:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10040
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[3].list, yyDollar[4].list, yyDollar[6].list, yyDollar[8].list, "", false, false)
		}
	case 2459:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10044
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[6].list, yyDollar[7].list, yyDollar[9].list, yyDollar[11].list, "", false, true)
		}
	case 2460:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10051
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[3].list, yyDollar[6].node, false)
		}
	case 2461:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10055
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[5].list, yyDollar[8].node, true)
		}
	case 2462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10061
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].statelem)
		}
	case 2463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10062
		{
			yyDollar[1].list.Append(yyDollar[3].statelem)
			yyVAL.list = yyDollar[1].list
		}
	case 2464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10066
		{
			yyVAL.statelem = ast.NewStatsElem(yyDollar[1].str)
		}
	case 2465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10067
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[1].node)
		}
	case 2466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10068
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[2].node)
		}
	case 2467:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10079
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, false, yyDollar[4].list)
		}
	case 2468:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10083
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, true, yyDollar[7].list)
		}
	case 2469:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10087
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, yyDollar[5].list, false, yyDollar[6].list)
		}
	case 2470:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10094
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, yyDollar[5].list, nil, ast.AP_SetOptions)
		}
	case 2471:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10098
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_AddObjects)
		}
	case 2472:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10102
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_SetObjects)
		}
	case 2473:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10106
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_DropObjects)
		}
	case 2474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10112
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10113
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10118
		{
			pubTable := ast.NewPublicationTable(yyDollar[2].rangevar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_TABLE, pubTable)
		}
	case 2477:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10123
		{
			yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_TABLES_IN_SCHEMA, yyDollar[4].str)
		}
	case 2478:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10127
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA)
		}
	case 2479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10131
		{
			// If either a row filter or column list is specified, create a PublicationTable object
			if yyDollar[2].list != nil || yyDollar[3].node != nil {
				// Create a simple RangeVar from the ColId
				rangeVar := ast.NewRangeVar(yyDollar[1].str, "", "")
				pubTable := ast.NewPublicationTable(rangeVar, yyDollar[3].node, yyDollar[2].list)
				yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
			} else {
				yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_CONTINUATION, yyDollar[1].str)
			}
		}
	case 2480:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10143
		{
			rangeVar := makeRangeVarFromQualifiedName(yyDollar[1].str, yyDollar[2].list, -1)
			pubTable := ast.NewPublicationTable(rangeVar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10149
		{
			pubTable := ast.NewPublicationTable(yyDollar[1].rangevar, yyDollar[3].node, yyDollar[2].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10154
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_CONTINUATION)
		}
	case 2483:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10160
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10161
		{
			yyVAL.node = nil
		}
	case 2485:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10172
		{
			yyVAL.stmt = ast.NewCreateSubscriptionStmt(yyDollar[3].str, yyDollar[5].str, yyDollar[7].list, yyDollar[8].list)
		}
	case 2486:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10179
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_OPTIONS, "", nil, yyDollar[5].list)
		}
	case 2487:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10183
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_CONNECTION, yyDollar[5].str, nil, nil)
		}
	case 2488:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10187
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_REFRESH, "", nil, yyDollar[6].list)
		}
	case 2489:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10191
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ADD_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2490:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10195
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_DROP_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2491:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10199
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SET_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2492:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10203
		{
			enableOpt := ast.NewNodeList()
			enableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(true)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, enableOpt)
		}
	case 2493:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10209
		{
			disableOpt := ast.NewNodeList()
			disableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(false)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, disableOpt)
		}
	case 2494:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10215
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SKIP, "", nil, yyDollar[5].list)
		}
	case 2495:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10228
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, yyDollar[10].objwithargs, ast.CoercionContext(yyDollar[11].ival), false)
		}
	case 2496:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10232
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), false)
		}
	case 2497:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10236
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), true)
		}
	case 2498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10242
		{
			yyVAL.ival = int(ast.COERCION_IMPLICIT)
		}
	case 2499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10243
		{
			yyVAL.ival = int(ast.COERCION_ASSIGNMENT)
		}
	case 2500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10244
		{
			yyVAL.ival = int(ast.COERCION_EXPLICIT)
		}
	case 2501:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:10256
		{
			yyVAL.stmt = ast.NewCreateOpClassStmt(yyDollar[4].list, yyDollar[11].list, yyDollar[10].str, yyDollar[8].typnam, yyDollar[13].list, yyDollar[5].bval)
		}
	case 2502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10262
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2503:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10263
		{
			yyVAL.list = nil
		}
	case 2504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10267
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10268
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2506:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10273
		{
			// Create ObjectWithArgs for simple operator
			owa := ast.NewObjectWithArgs(yyDollar[3].list, nil, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, yyDollar[4].list)
		}
	case 2507:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10279
		{
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, yyDollar[3].objwithargs, yyDollar[4].list)
		}
	case 2508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10283
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[3].objwithargs, nil)
		}
	case 2509:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10287
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[6].objwithargs, yyDollar[4].list)
		}
	case 2510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10291
		{
			yyVAL.node = ast.NewOpClassItemStorage(yyDollar[2].typnam)
		}
	case 2511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10297
		{
			yyVAL.bval = true
		}
	case 2512:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10298
		{
			yyVAL.bval = false
		}
	case 2513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10302
		{
			yyVAL.list = nil
		}
	case 2514:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10303
		{
			yyVAL.list = yyDollar[4].list
		}
	case 2515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10304
		{
			yyVAL.list = nil
		}
	case 2516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10308
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].typnam)
		}
	case 2517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10309
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2518:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10320
		{
			yyVAL.stmt = ast.NewCreateOpFamilyStmt(yyDollar[4].list, yyDollar[6].str)
		}
	case 2519:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10333
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, false, yyDollar[8].list)
		}
	case 2520:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10337
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, true, yyDollar[8].list)
		}
	case 2521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10343
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10344
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2523:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10349
		{
			// Create ObjectWithArgs for operator with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, nil)
		}
	case 2524:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10355
		{
			// Create ObjectWithArgs for function with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, owa, nil)
		}
	case 2525:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10370
		{
			yyVAL.stmt = ast.NewCreateConversionStmt(yyDollar[4].list, yyDollar[6].str, yyDollar[8].str, yyDollar[10].list, yyDollar[2].bval)
		}
	case 2526:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10383
		{
			yyVAL.stmt = ast.NewCreateTransformStmt(yyDollar[2].bval, yyDollar[5].typnam, yyDollar[7].str, linitial(yyDollar[9].list), lsecond(yyDollar[9].list))
		}
	case 2527:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10390
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs)  // fromsql
			yyVAL.list.Append(yyDollar[11].objwithargs) // tosql
		}
	case 2528:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10396
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[11].objwithargs) // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs)  // tosql
		}
	case 2529:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10402
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs) // fromsql
			yyVAL.list.Append(nil)                     // tosql
		}
	case 2530:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10408
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(nil)                     // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs) // tosql
		}
	case 2531:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10423
		{
			// Parameterless CREATE LANGUAGE is now treated as CREATE EXTENSION
			yyVAL.stmt = ast.NewCreateExtensionStmt(yyDollar[6].str, yyDollar[2].bval, nil)
		}
	case 2532:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10429
		{
			yyVAL.stmt = ast.NewCreatePLangStmt(yyDollar[2].bval, yyDollar[6].str, yyDollar[8].list, yyDollar[9].list, yyDollar[10].list, yyDollar[3].bval)
		}
	case 2533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10435
		{
			yyVAL.bval = true
		}
	case 2534:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10436
		{
			yyVAL.bval = false
		}
	case 2535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10441
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10442
		{
			yyVAL.list = nil
		}
	case 2537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10446
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10447
		{
			yyVAL.list = nil
		}
	case 2539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10451
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10452
		{
			yyVAL.list = nil
		}
	case 2541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10455
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_ALL
		}
	case 2542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10456
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DISTINCT
		}
	case 2543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10457
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DEFAULT
		}
	case 2544:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10462
		{
			yyVAL.groupClause = &ast.GroupClause{
				Distinct: yyDollar[3].setquant == ast.SET_QUANTIFIER_DISTINCT,
				List:     yyDollar[4].list,
			}
		}
	case 2545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10469
		{
			yyVAL.groupClause = nil
		}
	case 2546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10475
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10476
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10480
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10481
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10482
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10483
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10484
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10489
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_EMPTY, ast.NewNodeList(), 0)
		}
	case 2554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10496
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_ROLLUP, yyDollar[3].list, 0)
		}
	case 2555:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10503
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_CUBE, yyDollar[3].list, 0)
		}
	case 2556:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10510
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_SETS, yyDollar[4].list, 0)
		}
	case 2557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10519
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10520
		{
			yyVAL.node = nil
		}
	case 2559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10527
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10531
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10532
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2562:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10537
		{
			sortBy := ast.NewSortBy(yyDollar[1].node, ast.SORTBY_USING, ast.SortByNulls(yyDollar[4].ival), 0)
			// Use qual_all_Op (NodeList) directly for UseOp
			sortBy.UseOp = yyDollar[3].list
			yyVAL.node = sortBy
		}
	case 2563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10544
		{
			yyVAL.node = ast.NewSortBy(yyDollar[1].node, ast.SortByDir(yyDollar[2].ival), ast.SortByNulls(yyDollar[3].ival), 0)
		}
	}
	goto yystack /* stack new state and value */
}
