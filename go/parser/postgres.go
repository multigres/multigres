// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
	"strings"
)

// Parser state for handling complex grammar constructs
var parserState struct {
	// Future parser state variables can be added here
}

// SelectLimit - Private struct for the result of opt_select_limit production
// Mirrors PostgreSQL's SelectLimit from gram.y:126-132
type selectLimit struct {
	limitOffset ast.Node
	limitCount  ast.Node
	limitOption ast.LimitOption
}

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// PrivTarget - represents a privilege target for GRANT/REVOKE statements
// Internal struct for handling privilege_target grammar rule
type PrivTarget struct {
	targtype ast.GrantTargetType
	objtype  ast.ObjectType
	objs     *ast.NodeList
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:51
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string
	bval    bool
	byt     byte
	rune    rune

	// AST nodes
	node        ast.Node
	stmt        ast.Stmt
	stmtList    []ast.Stmt
	list        *ast.NodeList
	groupClause *ast.GroupClause
	selectLimit *selectLimit

	// Specific AST node types
	into          *ast.IntoClause
	onconflict    *ast.OnConflictClause
	windef        *ast.WindowDef
	createStmt    *ast.CreateStmt
	indexStmt     *ast.IndexStmt
	alterStmt     *ast.AlterTableStmt
	dropStmt      *ast.DropStmt
	columnDef     *ast.ColumnDef
	constraint    *ast.Constraint
	indexElem     *ast.IndexElem
	alterCmd      *ast.AlterTableCmd
	with          *ast.WithClause
	rangevar      *ast.RangeVar
	objType       ast.ObjectType
	dropBehav     ast.DropBehavior
	setquant      ast.SetQuantifier
	typnam        *ast.TypeName
	partspec      *ast.PartitionSpec
	partboundspec *ast.PartitionBoundSpec
	oncommit      ast.OnCommitAction
	defelt        *ast.DefElem
	target        *ast.ResTarget            // For select targets, insert columns
	alias         *ast.Alias                // For table and column aliases
	jtype         ast.JoinType              // For join type specifications
	jexpr         *ast.JoinExpr             // For joined table expressions
	keyaction     *ast.KeyAction            // For foreign key actions
	keyactions    *ast.KeyActions           // For foreign key action sets
	funparam      *ast.FunctionParameter    // For function parameters
	funparammode  ast.FunctionParameterMode // For parameter modes (IN/OUT/INOUT/VARIADIC)
	vsetstmt      *ast.VariableSetStmt      // For SET/RESET statements
	rolespec      *ast.RoleSpec
	objwithargs   *ast.ObjectWithArgs
	statelem      *ast.StatsElem
	accesspriv    *ast.AccessPriv     // For privilege specifications
	privtarget    *PrivTarget         // For privilege target specifications
	vacrel        *ast.VacuumRelation // For vacuum relation specifications

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const UNKNOWN = 57392
const WHEN = 57393
const IS = 57394
const ISNULL = 57395
const NOTNULL = 57396
const AT = 57397
const TIME = 57398
const ZONE = 57399
const LOCAL = 57400
const SYMMETRIC = 57401
const ASYMMETRIC = 57402
const TO = 57403
const OPERATOR = 57404
const SELECT = 57405
const FROM = 57406
const WHERE = 57407
const ONLY = 57408
const TABLE = 57409
const LIMIT = 57410
const OFFSET = 57411
const BY = 57412
const GROUP_P = 57413
const HAVING = 57414
const INTO = 57415
const ON = 57416
const JOIN = 57417
const INNER_P = 57418
const LEFT = 57419
const RIGHT = 57420
const FULL = 57421
const OUTER_P = 57422
const CROSS = 57423
const NATURAL = 57424
const USING = 57425
const RECURSIVE = 57426
const MATERIALIZED = 57427
const VALUES = 57428
const SEARCH = 57429
const BREADTH = 57430
const DEPTH = 57431
const CYCLE = 57432
const FIRST_P = 57433
const LAST_P = 57434
const SET = 57435
const ASC = 57436
const DESC = 57437
const INSERT = 57438
const UPDATE = 57439
const DELETE_P = 57440
const MERGE = 57441
const RETURNING = 57442
const CONFLICT = 57443
const OVERRIDING = 57444
const USER = 57445
const SYSTEM_P = 57446
const MATCHED = 57447
const THEN = 57448
const SOURCE = 57449
const TARGET = 57450
const DO = 57451
const NOTHING = 57452
const COPY = 57453
const PROGRAM = 57454
const STDIN = 57455
const STDOUT = 57456
const BINARY = 57457
const FREEZE = 57458
const CONSTRAINT = 57459
const VERBOSE = 57460
const ANALYZE = 57461
const CURRENT_P = 57462
const CURSOR = 57463
const OF = 57464
const COLUMNS = 57465
const ORDINALITY = 57466
const XMLTABLE = 57467
const JSON_TABLE = 57468
const ROWS = 57469
const PATH = 57470
const PASSING = 57471
const FOR = 57472
const NESTED = 57473
const REF_P = 57474
const XMLNAMESPACES = 57475
const ARRAY = 57476
const ERROR = 57477
const ERROR_P = 57478
const EMPTY = 57479
const EMPTY_P = 57480
const OBJECT_P = 57481
const WRAPPER = 57482
const CONDITIONAL = 57483
const UNCONDITIONAL = 57484
const QUOTES = 57485
const OMIT = 57486
const KEEP = 57487
const SCALAR = 57488
const STRING_P = 57489
const ENCODING = 57490
const DELIMITER = 57491
const DELIMITERS = 57492
const HEADER_P = 57493
const QUOTE = 57494
const FORCE = 57495
const CSV = 57496
const VALUE_P = 57497
const JSON_QUERY = 57498
const JSON_VALUE = 57499
const JSON_SERIALIZE = 57500
const JSON_OBJECT = 57501
const JSON_ARRAY = 57502
const JSON_OBJECTAGG = 57503
const JSON_ARRAYAGG = 57504
const JSON_EXISTS = 57505
const JSON_SCALAR = 57506
const FORMAT = 57507
const JSON = 57508
const UTF8 = 57509
const WITHOUT = 57510
const BIT = 57511
const NUMERIC = 57512
const INTEGER = 57513
const SMALLINT = 57514
const BIGINT = 57515
const REAL = 57516
const FLOAT_P = 57517
const DOUBLE_P = 57518
const PRECISION = 57519
const CHARACTER = 57520
const CHAR_P = 57521
const VARCHAR = 57522
const NATIONAL = 57523
const NCHAR = 57524
const VARYING = 57525
const TIMESTAMP = 57526
const INTERVAL = 57527
const INT_P = 57528
const DECIMAL_P = 57529
const DEC = 57530
const BOOLEAN_P = 57531
const VARIADIC = 57532
const ABORT_P = 57533
const ABSENT = 57534
const ABSOLUTE_P = 57535
const ACCESS = 57536
const ACTION = 57537
const ADD_P = 57538
const ADMIN = 57539
const AFTER = 57540
const AGGREGATE = 57541
const ALSO = 57542
const ALWAYS = 57543
const ANALYSE = 57544
const ASENSITIVE = 57545
const ASSERTION = 57546
const ASSIGNMENT = 57547
const ATOMIC = 57548
const ATTACH = 57549
const ATTRIBUTE = 57550
const AUTHORIZATION = 57551
const BACKWARD = 57552
const BEFORE = 57553
const BEGIN_P = 57554
const CACHE = 57555
const CALL = 57556
const CALLED = 57557
const CASCADED = 57558
const CATALOG_P = 57559
const CHAIN = 57560
const CHARACTERISTICS = 57561
const CHECKPOINT = 57562
const CLASS = 57563
const CLOSE = 57564
const CLUSTER = 57565
const COALESCE = 57566
const COLLATION = 57567
const COMMENT = 57568
const COMMENTS = 57569
const COMMIT = 57570
const COMMITTED = 57571
const COMPRESSION = 57572
const CONFIGURATION = 57573
const CONNECTION = 57574
const CONSTRAINTS = 57575
const CONTENT_P = 57576
const CONTINUE_P = 57577
const CONVERSION_P = 57578
const COST = 57579
const CUBE = 57580
const CURRENT_CATALOG = 57581
const CURRENT_DATE = 57582
const CURRENT_ROLE = 57583
const CURRENT_SCHEMA = 57584
const CURRENT_TIME = 57585
const CURRENT_TIMESTAMP = 57586
const CURRENT_USER = 57587
const DATA_P = 57588
const DATABASE = 57589
const DAY_P = 57590
const DEALLOCATE = 57591
const DECLARE = 57592
const DEFAULTS = 57593
const DEFERRABLE = 57594
const DEFERRED = 57595
const DEFINER = 57596
const DEPENDS = 57597
const DETACH = 57598
const DICTIONARY = 57599
const DISABLE_P = 57600
const DISCARD = 57601
const DOCUMENT_P = 57602
const DOMAIN_P = 57603
const EACH = 57604
const ELSE = 57605
const ENABLE_P = 57606
const ENCRYPTED = 57607
const END_P = 57608
const ENUM_P = 57609
const EVENT = 57610
const EXCEPT = 57611
const EXCLUDE = 57612
const EXCLUDING = 57613
const EXCLUSIVE = 57614
const EXECUTE = 57615
const EXPLAIN = 57616
const EXPRESSION = 57617
const EXTENSION = 57618
const EXTERNAL = 57619
const EXTRACT = 57620
const FAMILY = 57621
const FETCH = 57622
const FILTER = 57623
const FINALIZE = 57624
const FOLLOWING = 57625
const FOREIGN = 57626
const FORWARD = 57627
const FUNCTION = 57628
const FUNCTIONS = 57629
const GENERATED = 57630
const GLOBAL = 57631
const GRANT = 57632
const GRANTED = 57633
const GREATEST = 57634
const GROUPING = 57635
const GROUPS = 57636
const HANDLER = 57637
const HOLD = 57638
const HOUR_P = 57639
const IDENTITY_P = 57640
const IMMEDIATE = 57641
const IMMUTABLE = 57642
const IMPLICIT_P = 57643
const IMPORT_P = 57644
const INCLUDE = 57645
const INCLUDING = 57646
const INCREMENT = 57647
const INDENT = 57648
const INDEX = 57649
const INDEXES = 57650
const INHERIT = 57651
const INHERITS = 57652
const INITIALLY = 57653
const INLINE_P = 57654
const INPUT_P = 57655
const INSENSITIVE = 57656
const INSTEAD = 57657
const INTERSECT = 57658
const INVOKER = 57659
const ISOLATION = 57660
const KEYS = 57661
const LABEL = 57662
const LANGUAGE = 57663
const LARGE_P = 57664
const LATERAL_P = 57665
const LEAKPROOF = 57666
const LEAST = 57667
const LEADING = 57668
const LEVEL = 57669
const LISTEN = 57670
const LOAD = 57671
const LOCALTIME = 57672
const LOCALTIMESTAMP = 57673
const LOCATION = 57674
const LOCK_P = 57675
const LOCKED = 57676
const LOGGED = 57677
const MAPPING = 57678
const MATCH = 57679
const MAXVALUE = 57680
const MERGE_ACTION = 57681
const METHOD = 57682
const MINUTE_P = 57683
const MINVALUE = 57684
const MODE = 57685
const MONTH_P = 57686
const MOVE = 57687
const NAME_P = 57688
const NAMES = 57689
const NEW = 57690
const NEXT = 57691
const NFC = 57692
const NFD = 57693
const NFKC = 57694
const NFKD = 57695
const NO = 57696
const NONE = 57697
const NORMALIZE = 57698
const NORMALIZED = 57699
const NOTIFY = 57700
const NOWAIT = 57701
const NULLIF = 57702
const OUT_P = 57703
const OVERLAY = 57704
const OVERLAPS = 57705
const OWNED = 57706
const OWNER = 57707
const PARALLEL = 57708
const PARAMETER = 57709
const PARSER = 57710
const PARTIAL = 57711
const PARTITION = 57712
const PASSWORD = 57713
const PLACING = 57714
const PLAN = 57715
const PLANS = 57716
const POLICY = 57717
const POSITION = 57718
const PRECEDING = 57719
const PREPARE = 57720
const PREPARED = 57721
const PRESERVE = 57722
const PRIMARY = 57723
const PRIOR = 57724
const PRIVILEGES = 57725
const PROCEDURAL = 57726
const PROCEDURE = 57727
const PROCEDURES = 57728
const PUBLICATION = 57729
const RANGE = 57730
const READ = 57731
const REASSIGN = 57732
const RECHECK = 57733
const REFERENCES = 57734
const REFERENCING = 57735
const REFRESH = 57736
const REINDEX = 57737
const RELATIVE_P = 57738
const RELEASE = 57739
const RENAME = 57740
const REPEATABLE = 57741
const REPLICA = 57742
const RESET = 57743
const RESTART = 57744
const RETURN = 57745
const RETURNS = 57746
const REVOKE = 57747
const ROLE = 57748
const ROLLBACK = 57749
const ROLLUP = 57750
const ROUTINE = 57751
const ROUTINES = 57752
const ROW = 57753
const RULE = 57754
const SAVEPOINT = 57755
const SCHEMA = 57756
const SCHEMAS = 57757
const SCROLL = 57758
const SECOND_P = 57759
const SECURITY = 57760
const SEQUENCE = 57761
const SEQUENCES = 57762
const SERIALIZABLE = 57763
const SERVER = 57764
const SESSION = 57765
const SESSION_USER = 57766
const SETS = 57767
const SETOF = 57768
const SHARE = 57769
const SHOW = 57770
const SIMPLE = 57771
const SKIP = 57772
const SNAPSHOT = 57773
const SOME = 57774
const SQL_P = 57775
const STABLE = 57776
const STANDALONE_P = 57777
const START = 57778
const STATEMENT = 57779
const STATISTICS = 57780
const STORAGE = 57781
const STORED = 57782
const STRICT_P = 57783
const STRIP_P = 57784
const SUBSCRIPTION = 57785
const SUBSTRING = 57786
const SUPPORT = 57787
const SYSID = 57788
const SYSTEM_USER = 57789
const TABLES = 57790
const TABLESPACE = 57791
const TABLESAMPLE = 57792
const TEMP = 57793
const TEMPLATE = 57794
const TEMPORARY = 57795
const TEXT_P = 57796
const TIES = 57797
const TRAILING = 57798
const TRANSACTION = 57799
const TRANSFORM = 57800
const TREAT = 57801
const TRIGGER = 57802
const TRIM = 57803
const TRUNCATE = 57804
const TRUSTED = 57805
const TYPE_P = 57806
const TYPES_P = 57807
const UESCAPE = 57808
const UNBOUNDED = 57809
const UNCOMMITTED = 57810
const UNENCRYPTED = 57811
const UNION = 57812
const UNIQUE = 57813
const UNLISTEN = 57814
const UNLOGGED = 57815
const UNTIL = 57816
const VACUUM = 57817
const VALID = 57818
const VALIDATE = 57819
const VALIDATOR = 57820
const VERSION_P = 57821
const VIEW = 57822
const VIEWS = 57823
const VOLATILE = 57824
const WHITESPACE_P = 57825
const WINDOW = 57826
const WITHIN = 57827
const WORK = 57828
const WRITE = 57829
const XML_P = 57830
const XMLATTRIBUTES = 57831
const XMLCONCAT = 57832
const XMLELEMENT = 57833
const XMLEXISTS = 57834
const XMLFOREST = 57835
const XMLPARSE = 57836
const XMLPI = 57837
const XMLROOT = 57838
const XMLSERIALIZE = 57839
const YEAR_P = 57840
const YES_P = 57841
const INOUT = 57842
const OTHERS = 57843
const OLD = 57844
const KEY = 57845
const OFF = 57846
const OIDS = 57847
const OPTION = 57848
const OPTIONS = 57849
const OVER = 57850
const ORDER = 57851
const ANY = 57852
const BOTH = 57853
const CAST = 57854
const CHECK = 57855
const COLUMN = 57856
const FORMAT_LA = 57857
const NOT_LA = 57858
const NULLS_LA = 57859
const WITH_LA = 57860
const WITHOUT_LA = 57861
const MODE_TYPE_NAME = 57862
const MODE_PLPGSQL_EXPR = 57863
const MODE_PLPGSQL_ASSIGN1 = 57864
const MODE_PLPGSQL_ASSIGN2 = 57865
const MODE_PLPGSQL_ASSIGN3 = 57866
const UMINUS = 57867

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"UNKNOWN",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"JOIN",
	"INNER_P",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER_P",
	"CROSS",
	"NATURAL",
	"USING",
	"RECURSIVE",
	"MATERIALIZED",
	"VALUES",
	"SEARCH",
	"BREADTH",
	"DEPTH",
	"CYCLE",
	"FIRST_P",
	"LAST_P",
	"SET",
	"ASC",
	"DESC",
	"INSERT",
	"UPDATE",
	"DELETE_P",
	"MERGE",
	"RETURNING",
	"CONFLICT",
	"OVERRIDING",
	"USER",
	"SYSTEM_P",
	"MATCHED",
	"THEN",
	"SOURCE",
	"TARGET",
	"DO",
	"NOTHING",
	"COPY",
	"PROGRAM",
	"STDIN",
	"STDOUT",
	"BINARY",
	"FREEZE",
	"CONSTRAINT",
	"VERBOSE",
	"ANALYZE",
	"CURRENT_P",
	"CURSOR",
	"OF",
	"COLUMNS",
	"ORDINALITY",
	"XMLTABLE",
	"JSON_TABLE",
	"ROWS",
	"PATH",
	"PASSING",
	"FOR",
	"NESTED",
	"REF_P",
	"XMLNAMESPACES",
	"ARRAY",
	"ERROR",
	"ERROR_P",
	"EMPTY",
	"EMPTY_P",
	"OBJECT_P",
	"WRAPPER",
	"CONDITIONAL",
	"UNCONDITIONAL",
	"QUOTES",
	"OMIT",
	"KEEP",
	"SCALAR",
	"STRING_P",
	"ENCODING",
	"DELIMITER",
	"DELIMITERS",
	"HEADER_P",
	"QUOTE",
	"FORCE",
	"CSV",
	"VALUE_P",
	"JSON_QUERY",
	"JSON_VALUE",
	"JSON_SERIALIZE",
	"JSON_OBJECT",
	"JSON_ARRAY",
	"JSON_OBJECTAGG",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_SCALAR",
	"FORMAT",
	"JSON",
	"UTF8",
	"WITHOUT",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"ABORT_P",
	"ABSENT",
	"ABSOLUTE_P",
	"ACCESS",
	"ACTION",
	"ADD_P",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALSO",
	"ALWAYS",
	"ANALYSE",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"BACKWARD",
	"BEFORE",
	"BEGIN_P",
	"CACHE",
	"CALL",
	"CALLED",
	"CASCADED",
	"CATALOG_P",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATION",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPRESSION",
	"CONFIGURATION",
	"CONNECTION",
	"CONSTRAINTS",
	"CONTENT_P",
	"CONTINUE_P",
	"CONVERSION_P",
	"COST",
	"CUBE",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"DATA_P",
	"DATABASE",
	"DAY_P",
	"DEALLOCATE",
	"DECLARE",
	"DEFAULTS",
	"DEFERRABLE",
	"DEFERRED",
	"DEFINER",
	"DEPENDS",
	"DETACH",
	"DICTIONARY",
	"DISABLE_P",
	"DISCARD",
	"DOCUMENT_P",
	"DOMAIN_P",
	"EACH",
	"ELSE",
	"ENABLE_P",
	"ENCRYPTED",
	"END_P",
	"ENUM_P",
	"EVENT",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXCLUSIVE",
	"EXECUTE",
	"EXPLAIN",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"EXTRACT",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FINALIZE",
	"FOLLOWING",
	"FOREIGN",
	"FORWARD",
	"FUNCTION",
	"FUNCTIONS",
	"GENERATED",
	"GLOBAL",
	"GRANT",
	"GRANTED",
	"GREATEST",
	"GROUPING",
	"GROUPS",
	"HANDLER",
	"HOLD",
	"HOUR_P",
	"IDENTITY_P",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT_P",
	"IMPORT_P",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INDEX",
	"INDEXES",
	"INHERIT",
	"INHERITS",
	"INITIALLY",
	"INLINE_P",
	"INPUT_P",
	"INSENSITIVE",
	"INSTEAD",
	"INTERSECT",
	"INVOKER",
	"ISOLATION",
	"KEYS",
	"LABEL",
	"LANGUAGE",
	"LARGE_P",
	"LATERAL_P",
	"LEAKPROOF",
	"LEAST",
	"LEADING",
	"LEVEL",
	"LISTEN",
	"LOAD",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCATION",
	"LOCK_P",
	"LOCKED",
	"LOGGED",
	"MAPPING",
	"MATCH",
	"MAXVALUE",
	"MERGE_ACTION",
	"METHOD",
	"MINUTE_P",
	"MINVALUE",
	"MODE",
	"MONTH_P",
	"MOVE",
	"NAME_P",
	"NAMES",
	"NEW",
	"NEXT",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NO",
	"NONE",
	"NORMALIZE",
	"NORMALIZED",
	"NOTIFY",
	"NOWAIT",
	"NULLIF",
	"OUT_P",
	"OVERLAY",
	"OVERLAPS",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PARSER",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECEDING",
	"PREPARE",
	"PREPARED",
	"PRESERVE",
	"PRIMARY",
	"PRIOR",
	"PRIVILEGES",
	"PROCEDURAL",
	"PROCEDURE",
	"PROCEDURES",
	"PUBLICATION",
	"RANGE",
	"READ",
	"REASSIGN",
	"RECHECK",
	"REFERENCES",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE_P",
	"RELEASE",
	"RENAME",
	"REPEATABLE",
	"REPLICA",
	"RESET",
	"RESTART",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLE",
	"ROLLBACK",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"RULE",
	"SAVEPOINT",
	"SCHEMA",
	"SCHEMAS",
	"SCROLL",
	"SECOND_P",
	"SECURITY",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSION_USER",
	"SETS",
	"SETOF",
	"SHARE",
	"SHOW",
	"SIMPLE",
	"SKIP",
	"SNAPSHOT",
	"SOME",
	"SQL_P",
	"STABLE",
	"STANDALONE_P",
	"START",
	"STATEMENT",
	"STATISTICS",
	"STORAGE",
	"STORED",
	"STRICT_P",
	"STRIP_P",
	"SUBSCRIPTION",
	"SUBSTRING",
	"SUPPORT",
	"SYSID",
	"SYSTEM_USER",
	"TABLES",
	"TABLESPACE",
	"TABLESAMPLE",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TEXT_P",
	"TIES",
	"TRAILING",
	"TRANSACTION",
	"TRANSFORM",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUNCATE",
	"TRUSTED",
	"TYPE_P",
	"TYPES_P",
	"UESCAPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNENCRYPTED",
	"UNION",
	"UNIQUE",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VERSION_P",
	"VIEW",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE_P",
	"WINDOW",
	"WITHIN",
	"WORK",
	"WRITE",
	"XML_P",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"YEAR_P",
	"YES_P",
	"INOUT",
	"OTHERS",
	"OLD",
	"KEY",
	"OFF",
	"OIDS",
	"OPTION",
	"OPTIONS",
	"OVER",
	"ORDER",
	"ANY",
	"BOTH",
	"CAST",
	"CHECK",
	"COLUMN",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"'<'",
	"'>'",
	"'='",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"';'",
	"','",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:14898

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 112,
	540, 112,
	-2, 1618,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 115,
	1, 1532,
	26, 1532,
	36, 1532,
	74, 1532,
	100, 1532,
	532, 1532,
	540, 1532,
	-2, 1536,
	-1, 118,
	67, 1948,
	84, 1948,
	85, 2630,
	236, 2815,
	307, 2115,
	419, 1948,
	480, 1948,
	-2, 125,
	-1, 157,
	68, 1535,
	69, 1535,
	130, 1535,
	269, 1535,
	280, 1535,
	316, 1535,
	470, 1535,
	509, 1535,
	-2, 1537,
	-1, 169,
	1, 112,
	540, 112,
	-2, 1618,
	-1, 211,
	85, 2629,
	-2, 1947,
	-1, 289,
	61, 332,
	64, 332,
	527, 332,
	533, 332,
	-2, 2671,
	-1, 755,
	1, 335,
	540, 335,
	-2, 3142,
	-1, 756,
	1, 376,
	540, 376,
	-2, 3142,
	-1, 757,
	1, 267,
	540, 267,
	-2, 3142,
	-1, 758,
	1, 309,
	540, 309,
	-2, 3142,
	-1, 763,
	1, 271,
	540, 271,
	-2, 3142,
	-1, 764,
	1, 188,
	540, 188,
	-2, 3142,
	-1, 798,
	7, 1448,
	16, 1448,
	17, 1448,
	531, 1448,
	-2, 131,
	-1, 799,
	7, 1449,
	16, 1449,
	17, 1449,
	531, 1449,
	-2, 132,
	-1, 824,
	68, 1521,
	69, 1521,
	130, 1521,
	280, 1521,
	-2, 1538,
	-1, 830,
	68, 1522,
	69, 1522,
	130, 1522,
	280, 1522,
	-2, 1541,
	-1, 887,
	84, 1948,
	480, 1948,
	-2, 124,
	-1, 889,
	209, 113,
	-2, 2636,
	-1, 974,
	531, 1450,
	-2, 3094,
	-1, 995,
	93, 2951,
	398, 2151,
	401, 2951,
	-2, 2044,
	-1, 999,
	93, 2951,
	398, 2151,
	401, 2951,
	-2, 2044,
	-1, 1151,
	74, 141,
	-2, 146,
	-1, 1235,
	68, 1521,
	69, 1521,
	130, 1521,
	280, 1521,
	-2, 1542,
	-1, 1289,
	7, 1239,
	531, 1239,
	-2, 513,
	-1, 1304,
	7, 564,
	16, 564,
	17, 564,
	531, 564,
	-2, 1287,
	-1, 1326,
	7, 1493,
	-2, 514,
	-1, 1334,
	7, 1463,
	-2, 497,
	-1, 1335,
	7, 1498,
	531, 1498,
	-2, 498,
	-1, 1336,
	7, 1470,
	-2, 499,
	-1, 1337,
	7, 1498,
	531, 1498,
	-2, 500,
	-1, 1338,
	7, 1498,
	531, 1498,
	-2, 501,
	-1, 1339,
	7, 1457,
	-2, 503,
	-1, 1340,
	7, 1457,
	-2, 504,
	-1, 1341,
	7, 1500,
	-2, 507,
	-1, 1342,
	7, 1460,
	-2, 511,
	-1, 1343,
	7, 1461,
	-2, 512,
	-1, 1345,
	7, 1498,
	531, 1498,
	-2, 528,
	-1, 1346,
	7, 1457,
	-2, 532,
	-1, 1347,
	7, 1464,
	-2, 537,
	-1, 1348,
	7, 1462,
	-2, 540,
	-1, 1349,
	7, 1496,
	-2, 542,
	-1, 1350,
	7, 1496,
	-2, 543,
	-1, 1351,
	7, 1481,
	531, 1481,
	-2, 547,
	-1, 1505,
	6, 2044,
	12, 2044,
	534, 2044,
	535, 2044,
	-2, 2037,
	-1, 1581,
	531, 1374,
	-2, 3096,
	-1, 1871,
	16, 1452,
	17, 1452,
	-2, 1373,
	-1, 1983,
	127, 2913,
	411, 2913,
	-2, 1112,
	-1, 2017,
	21, 1411,
	432, 1411,
	510, 1411,
	-2, 874,
	-1, 2019,
	21, 1413,
	432, 1413,
	510, 1413,
	-2, 821,
	-1, 2024,
	1, 690,
	26, 690,
	36, 690,
	64, 690,
	65, 690,
	68, 690,
	69, 690,
	71, 690,
	72, 690,
	73, 690,
	74, 690,
	100, 690,
	130, 690,
	269, 690,
	280, 690,
	316, 690,
	470, 690,
	484, 690,
	509, 690,
	515, 690,
	532, 690,
	540, 690,
	541, 690,
	-2, 1527,
	-1, 2029,
	21, 1505,
	432, 1505,
	510, 1505,
	-2, 1501,
	-1, 2486,
	68, 1536,
	69, 1536,
	130, 1536,
	269, 1536,
	280, 1536,
	316, 1536,
	470, 1536,
	509, 1536,
	-2, 1208,
	-1, 2495,
	7, 1374,
	531, 1374,
	-2, 1257,
	-1, 2624,
	117, 125,
	307, 2115,
	460, 125,
	-2, 1948,
	-1, 2674,
	536, 146,
	-2, 2501,
	-1, 2710,
	531, 2117,
	-2, 256,
	-1, 2787,
	40, 1457,
	134, 1457,
	509, 1457,
	527, 1457,
	529, 1457,
	532, 1457,
	541, 1457,
	-2, 1452,
	-1, 3120,
	36, 2918,
	66, 2918,
	-2, 538,
	-1, 3121,
	36, 2919,
	66, 2919,
	-2, 411,
	-1, 3127,
	127, 2916,
	411, 2916,
	-2, 1221,
	-1, 3128,
	127, 2917,
	411, 2917,
	-2, 1222,
	-1, 3144,
	1, 456,
	26, 456,
	36, 456,
	64, 456,
	65, 456,
	68, 456,
	69, 456,
	71, 456,
	72, 456,
	74, 456,
	100, 456,
	130, 456,
	269, 456,
	280, 456,
	316, 456,
	470, 456,
	484, 456,
	509, 456,
	515, 456,
	529, 456,
	532, 456,
	533, 456,
	540, 456,
	-2, 155,
	-1, 3145,
	1, 454,
	26, 454,
	36, 454,
	64, 454,
	65, 454,
	68, 454,
	69, 454,
	71, 454,
	72, 454,
	74, 454,
	100, 454,
	130, 454,
	269, 454,
	280, 454,
	316, 454,
	470, 454,
	484, 454,
	509, 454,
	515, 454,
	529, 454,
	532, 454,
	533, 454,
	540, 454,
	-2, 155,
	-1, 3148,
	1, 473,
	26, 473,
	36, 473,
	64, 473,
	65, 473,
	68, 473,
	69, 473,
	71, 473,
	72, 473,
	74, 473,
	100, 473,
	130, 473,
	269, 473,
	280, 473,
	316, 473,
	470, 473,
	484, 473,
	509, 473,
	515, 473,
	529, 473,
	532, 473,
	533, 473,
	540, 473,
	-2, 155,
	-1, 3162,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1125,
	-1, 3163,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1126,
	-1, 3164,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1127,
	-1, 3165,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1128,
	-1, 3166,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1129,
	-1, 3167,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1130,
	-1, 3171,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1137,
	-1, 3177,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1141,
	-1, 3222,
	363, 1401,
	-2, 1404,
	-1, 3301,
	68, 1536,
	69, 1536,
	130, 1536,
	269, 1536,
	280, 1536,
	316, 1536,
	470, 1536,
	509, 1536,
	-2, 1208,
	-1, 3422,
	209, 113,
	-2, 2636,
	-1, 3495,
	536, 147,
	-2, 2501,
	-1, 3608,
	507, 2576,
	-2, 2569,
	-1, 3915,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1139,
	-1, 3916,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1143,
	-1, 3922,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1145,
	-1, 3957,
	363, 1400,
	-2, 1403,
	-1, 4095,
	75, 1640,
	76, 1640,
	77, 1640,
	78, 1640,
	79, 1640,
	81, 1640,
	82, 1640,
	-2, 1536,
	-1, 4109,
	531, 1374,
	-2, 147,
	-1, 4115,
	150, 1880,
	-2, 1815,
	-1, 4302,
	6, 2044,
	12, 2044,
	534, 2044,
	535, 2044,
	-2, 2018,
	-1, 4525,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1138,
	-1, 4528,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1147,
	-1, 4531,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1142,
	-1, 4536,
	52, 0,
	53, 0,
	54, 0,
	-2, 1160,
	-1, 4543,
	21, 1410,
	432, 1410,
	510, 1410,
	-2, 1502,
	-1, 4547,
	363, 1402,
	-2, 1405,
	-1, 4578,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1190,
	-1, 4579,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1191,
	-1, 4580,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1192,
	-1, 4581,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1193,
	-1, 4582,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1194,
	-1, 4583,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1195,
	-1, 5008,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1140,
	-1, 5009,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1144,
	-1, 5013,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1146,
	-1, 5014,
	52, 0,
	53, 0,
	54, 0,
	-2, 1161,
	-1, 5017,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1162,
	-1, 5018,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1164,
	-1, 5140,
	540, 112,
	-2, 1618,
	-1, 5303,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1148,
	-1, 5304,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1163,
	-1, 5305,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1165,
	-1, 5313,
	52, 0,
	-2, 1198,
	-1, 5570,
	52, 0,
	-2, 1199,
	-1, 5755,
	37, 0,
	44, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 496,
	-1, 6086,
	7, 1765,
	-2, 333,
	-1, 6112,
	7, 1493,
	-2, 514,
}

const yyPrivate = 57344

const yyLast = 112229

var yyAct = [...]int16{
	704, 6083, 6134, 5575, 6135, 5585, 5765, 3902, 5122, 4768,
	5946, 5586, 1254, 5332, 3978, 6150, 3259, 2481, 3377, 5656,
	3008, 5604, 6084, 4686, 825, 4122, 4286, 5075, 5676, 4211,
	5754, 3324, 938, 5832, 3063, 5130, 3327, 5820, 1742, 2575,
	5214, 5815, 5934, 4890, 5553, 4036, 5464, 5705, 1790, 1493,
	5554, 5979, 3373, 3900, 1281, 3806, 3966, 5536, 5902, 5551,
	5885, 5074, 3350, 5605, 5683, 3363, 1122, 4138, 5460, 5678,
	5677, 4272, 3136, 5371, 5394, 3431, 5330, 5066, 982, 4950,
	925, 2597, 4454, 5753, 3799, 1671, 4677, 1765, 5728, 5442,
	5213, 5487, 5137, 3562, 4119, 4214, 1870, 4673, 114, 3526,
	1446, 1407, 3384, 5096, 3340, 3423, 4104, 722, 6, 3284,
	4743, 4896, 4891, 1179, 3026, 2694, 5496, 4681, 4821, 4913,
	1579, 64, 4772, 292, 292, 981, 4139, 1010, 1768, 696,
	701, 4, 713, 717, 3369, 835, 159, 292, 5377, 5299,
	4062, 5400, 5106, 5082, 1880, 1134, 135, 1229, 778, 779,
	781, 728, 22, 3293, 3710, 4188, 3367, 797, 3342, 3484,
	3567, 727, 21, 4607, 2031, 843, 4192, 2623, 20, 726,
	10, 725, 9, 5102, 4736, 4389, 843, 2622, 19, 705,
	843, 1020, 1405, 724, 8, 4174, 889, 892, 897, 892,
	4087, 892, 5001, 2782, 1991, 3807, 3824, 1062, 3665, 3561,
	4191, 892, 723, 7, 2621, 13, 2620, 12, 3407, 4301,
	4280, 794, 1476, 1668, 3511, 843, 843, 843, 843, 4805,
	4257, 1694, 797, 892, 892, 2659, 892, 975, 2686, 3485,
	897, 2650, 975, 3341, 975, 3621, 2644, 2654, 3432, 3411,
	3410, 3366, 3398, 2596, 892, 4098, 892, 972, 4647, 3394,
	2577, 892, 985, 3328, 987, 3977, 3934, 867, 4079, 833,
	3412, 3285, 1240, 4514, 2818, 4045, 893, 3016, 1767, 159,
	3234, 3187, 1868, 4090, 2490, 857, 4299, 6, 3449, 719,
	1704, 292, 292, 3566, 1551, 3103, 868, 1747, 2705, 842,
	64, 3522, 2671, 1425, 1215, 1432, 1277, 1365, 3397, 2630,
	3386, 4111, 3345, 1388, 1393, 159, 3349, 3338, 3970, 2483,
	3348, 3347, 714, 2576, 159, 135, 3274, 3231, 3227, 3188,
	3194, 22, 3197, 840, 1992, 3116, 3277, 1980, 3126, 1960,
	856, 21, 1685, 966, 864, 1741, 1140, 20, 1808, 10,
	1214, 9, 1692, 3664, 3448, 1658, 923, 19, 872, 283,
	871, 753, 896, 8, 3461, 2780, 761, 761, 3447, 1455,
	1483, 1458, 870, 181, 183, 3360, 1758, 1873, 3141, 2505,
	888, 1095, 7, 951, 13, 3257, 12, 1241, 1250, 1981,
	250, 869, 1963, 1190, 1961, 1142, 3007, 1682, 5372, 1130,
	4984, 1017, 2897, 1539, 896, 2824, 1542, 718, 848, 1536,
	1222, 3035, 204, 2658, 2603, 157, 1964, 1962, 1996, 1223,
	1709, 733, 1224, 708, 1739, 2651, 1583, 678, 1558, 1524,
	284, 271, 285, 846, 252, 791, 158, 1999, 863, 1129,
	855, 861, 2670, 1632, 1185, 3994, 3903, 5537, 1411, 4047,
	5089, 1841, 853, 6080, 824, 3971, 5540, 1999, 5537, 6202,
	6079, 6200, 2552, 795, 5923, 1065, 1067, 1454, 6119, 3027,
	6159, 6198, 1672, 4159, 3110, 5726, 829, 3028, 1265, 6158,
	6119, 3994, 3028, 1673, 898, 4004, 4005, 4006, 6159, 5518,
	5609, 909, 910, 911, 5516, 5331, 4158, 3391, 1265, 1672,
	6146, 3994, 3028, 750, 1265, 4160, 772, 3994, 3880, 5787,
	1673, 4004, 4005, 4006, 3333, 6143, 1672, 6127, 5484, 4008,
	1672, 1162, 829, 5012, 2550, 6118, 2550, 1673, 967, 4010,
	6095, 1673, 1999, 973, 6119, 3899, 4456, 6088, 973, 6096,
	973, 6070, 785, 706, 716, 4008, 4067, 1997, 1839, 4010,
	5747, 228, 6052, 5256, 3102, 4010, 682, 2552, 6010, 742,
	3953, 5352, 945, 946, 1448, 6009, 4248, 2550, 5996, 736,
	5958, 3954, 5955, 2553, 2550, 831, 5931, 3030, 5892, 5959,
	2029, 5956, 5891, 1999, 976, 4200, 5890, 2999, 1094, 3832,
	5870, 2999, 1448, 5869, 4048, 2999, 830, 994, 997, 2550,
	3972, 850, 2550, 5866, 1113, 6057, 2560, 5864, 2552, 3142,
	5786, 5784, 5867, 2557, 2561, 2556, 5865, 2558, 1842, 5787,
	2550, 5783, 3952, 1082, 2553, 5763, 6056, 5762, 5650, 3030,
	1675, 2562, 5635, 2550, 4033, 2029, 2550, 5352, 1999, 5625,
	5608, 3002, 2011, 2012, 2013, 1125, 5600, 1675, 5626, 5607,
	5599, 5469, 1670, 4077, 2554, 4200, 1058, 2555, 5458, 1675,
	5470, 2560, 860, 2552, 5448, 5432, 5365, 3030, 2557, 2561,
	2556, 5364, 2558, 4160, 5431, 5366, 2559, 2022, 2023, 2553,
	4200, 5363, 5791, 5361, 5351, 2550, 2562, 5320, 5318, 5210,
	4200, 2029, 1675, 5352, 1999, 787, 2550, 5319, 5211, 5209,
	5208, 5202, 1013, 5148, 5117, 5747, 5745, 5578, 3030, 3030,
	3030, 1108, 4160, 5118, 3997, 3998, 3999, 4000, 1723, 2552,
	5020, 4998, 5010, 1753, 3028, 1665, 784, 4455, 858, 2550,
	2550, 770, 1723, 3134, 4696, 2553, 4609, 4598, 4541, 4447,
	4425, 4383, 2562, 3030, 843, 4610, 4599, 2550, 2550, 4382,
	4382, 4318, 4469, 1151, 4268, 4162, 4148, 1837, 4072, 1756,
	4319, 4066, 4059, 4269, 4163, 4149, 4040, 4073, 5260, 2029,
	4067, 2550, 1999, 4032, 4030, 3880, 4029, 1757, 5100, 1998,
	4028, 4027, 4033, 2550, 3957, 2550, 1117, 1119, 1120, 2550,
	2550, 5058, 3955, 2550, 2684, 4746, 843, 2552, 843, 859,
	4532, 2550, 2004, 2005, 2006, 2007, 3827, 3787, 3668, 3613,
	3425, 4705, 1133, 2553, 4704, 3030, 2550, 3669, 3614, 3426,
	2562, 4546, 1133, 2029, 3317, 1133, 1999, 3313, 3061, 3032,
	833, 3031, 1133, 1675, 3000, 1133, 2550, 2550, 3030, 4509,
	3030, 2551, 4460, 2999, 1814, 4200, 4117, 1268, 1268, 1807,
	2550, 2552, 1805, 1797, 4527, 843, 4056, 4055, 1797, 1802,
	1796, 1797, 1268, 4054, 3880, 1236, 159, 2553, 1797, 1797,
	3002, 1114, 3816, 843, 2562, 1380, 843, 843, 3813, 3492,
	3670, 3214, 3114, 2994, 1095, 843, 843, 2929, 843, 1363,
	797, 797, 1803, 1184, 797, 845, 5654, 169, 4000, 1358,
	1696, 3030, 2627, 2007, 1047, 892, 892, 4880, 3030, 1696,
	2627, 2627, 3030, 770, 5729, 770, 4361, 1085, 1665, 5215,
	1084, 1217, 3333, 1723, 770, 1216, 1696, 3817, 1410, 5538,
	843, 1410, 1217, 1085, 1118, 1217, 1216, 1723, 1238, 1216,
	5538, 3712, 1723, 4046, 1696, 4691, 2627, 4270, 1415, 4042,
	1385, 1371, 1675, 4271, 1186, 892, 1186, 2002, 2003, 2004,
	2005, 2006, 2007, 1675, 6191, 3995, 3996, 3997, 3998, 3999,
	4000, 2636, 843, 843, 1723, 292, 292, 2002, 2003, 2004,
	2005, 2006, 2007, 1167, 1168, 1232, 1233, 1172, 1175, 4455,
	892, 892, 4001, 4002, 4003, 4249, 1087, 6165, 906, 907,
	908, 3995, 3996, 3997, 3998, 3999, 4000, 900, 901, 902,
	903, 904, 905, 6017, 6000, 1998, 1670, 3719, 4001, 4002,
	4003, 3995, 3996, 3997, 3998, 3999, 4000, 3995, 3996, 3997,
	3998, 3999, 4000, 1679, 864, 864, 5991, 1675, 5777, 2029,
	5752, 4455, 1999, 4249, 1837, 5696, 2011, 2012, 2013, 1491,
	1705, 1706, 2002, 2003, 2004, 2005, 2006, 2007, 2554, 5751,
	1417, 2555, 2589, 1703, 4691, 2560, 1114, 2552, 784, 1675,
	5587, 892, 2557, 2561, 2556, 3523, 2558, 4632, 5580, 2589,
	2559, 2022, 2023, 2553, 1114, 2018, 3333, 5544, 732, 163,
	2562, 1212, 2637, 164, 5473, 5466, 5449, 3492, 1750, 5421,
	5327, 1541, 5324, 2002, 2003, 2004, 2005, 2006, 2007, 1676,
	1356, 5949, 168, 1680, 5310, 5309, 1161, 1763, 5298, 5296,
	1705, 1706, 1114, 843, 5072, 713, 1235, 1789, 1128, 1789,
	5065, 1515, 1102, 1707, 843, 5062, 5048, 5043, 1409, 5035,
	2018, 1127, 1372, 1101, 5034, 1103, 5024, 1105, 4983, 2008,
	2009, 2010, 4911, 4910, 1717, 4909, 6199, 5950, 2002, 2003,
	2004, 2005, 2006, 2007, 4745, 2492, 3974, 4659, 4754, 770,
	166, 1139, 1095, 5947, 1144, 1788, 1095, 1095, 1176, 1188,
	1799, 1148, 4622, 4621, 1159, 1664, 1395, 1396, 1367, 4605,
	1399, 1268, 4595, 4692, 1359, 1011, 4594, 163, 1719, 892,
	892, 164, 766, 4593, 797, 975, 897, 4549, 4543, 975,
	975, 2689, 1614, 1684, 2002, 2003, 2004, 2005, 2006, 2007,
	168, 765, 1095, 1197, 1268, 1849, 1211, 1437, 1268, 1855,
	1856, 4502, 1187, 4501, 4500, 2635, 1268, 2692, 1268, 4453,
	1864, 4444, 1218, 1219, 4261, 1268, 1444, 4219, 4206, 1452,
	1453, 831, 4199, 1666, 1667, 770, 1268, 1268, 1268, 1268,
	1268, 1402, 1743, 1743, 1173, 1755, 4157, 1268, 4116, 1700,
	1701, 1702, 830, 159, 4050, 1695, 4043, 4023, 1164, 1165,
	1166, 1364, 4015, 1169, 1170, 1171, 1174, 4014, 766, 3720,
	3207, 1268, 2002, 2003, 2004, 2005, 2006, 2007, 3993, 1631,
	3991, 1095, 3990, 1637, 1382, 1383, 3986, 765, 1800, 166,
	2590, 3984, 4692, 2573, 3983, 1592, 1265, 1401, 3982, 3994,
	3981, 1785, 3718, 4004, 4005, 4006, 1581, 2590, 5467, 4753,
	2648, 1850, 3959, 1793, 3956, 5011, 163, 1708, 3875, 3794,
	164, 3792, 3789, 1561, 2928, 2689, 2002, 2003, 2004, 2005,
	2006, 2007, 3788, 3778, 5846, 784, 1599, 4008, 1609, 168,
	3312, 1416, 3305, 1422, 3100, 833, 2882, 4010, 1372, 1384,
	896, 2692, 843, 1268, 2689, 2571, 2850, 1238, 2690, 1735,
	784, 784, 891, 1086, 912, 1237, 914, 1875, 1423, 1087,
	2579, 1732, 2580, 1520, 1115, 1518, 940, 1519, 682, 1086,
	2692, 843, 1791, 1580, 2602, 1087, 2491, 6187, 160, 1217,
	3208, 4960, 735, 1216, 1596, 1613, 1606, 1126, 968, 969,
	735, 971, 1480, 6183, 1118, 1489, 897, 1508, 6098, 892,
	892, 892, 892, 1661, 892, 768, 769, 768, 769, 1002,
	1634, 1005, 1118, 1638, 1639, 6064, 1666, 1667, 6039, 843,
	6034, 1804, 6027, 843, 180, 1412, 5968, 4876, 2674, 166,
	5901, 2927, 3968, 2591, 5684, 5863, 2594, 1811, 1812, 1813,
	1562, 5156, 2703, 4690, 1712, 1713, 5837, 5834, 1716, 843,
	5750, 892, 5749, 1562, 2696, 1562, 163, 5714, 2588, 843,
	164, 2647, 2693, 2851, 5710, 2570, 4120, 1180, 843, 5637,
	967, 973, 1359, 5603, 2634, 973, 973, 5532, 1861, 168,
	1412, 1748, 2690, 5531, 5530, 5510, 2691, 1835, 843, 1872,
	5494, 5493, 843, 4288, 1821, 4635, 1822, 1823, 1824, 5492,
	5482, 1827, 1828, 1829, 4631, 1795, 1832, 1848, 1786, 5479,
	731, 2690, 1116, 5108, 2018, 5359, 5356, 5321, 292, 5133,
	5112, 2743, 5099, 2008, 2009, 2010, 5091, 160, 5088, 1801,
	3988, 4915, 2002, 2003, 2004, 2005, 2006, 2007, 1412, 3989,
	292, 1701, 1700, 2029, 2696, 4791, 1999, 4749, 1702, 4511,
	4733, 1875, 4723, 2631, 729, 4720, 4701, 892, 4664, 2843,
	896, 4870, 6145, 2485, 166, 4662, 4654, 2493, 4291, 2731,
	4290, 2552, 5948, 4285, 843, 1366, 2702, 2535, 292, 4108,
	2487, 4107, 2674, 2674, 2674, 4060, 3893, 2553, 292, 2495,
	4340, 163, 3965, 1689, 2562, 164, 2693, 3947, 2699, 3945,
	3199, 3751, 2781, 770, 1973, 3645, 3520, 1412, 843, 843,
	1708, 1282, 1972, 1965, 168, 831, 3434, 2735, 831, 831,
	2691, 3379, 167, 1994, 1995, 2693, 3205, 2564, 892, 892,
	892, 892, 892, 3239, 1872, 160, 1988, 3233, 160, 1989,
	1990, 2979, 1690, 2749, 2971, 2734, 2613, 2752, 2753, 2691,
	892, 892, 2604, 2544, 1696, 1698, 2542, 2748, 892, 1825,
	1826, 768, 769, 2541, 1830, 1831, 2540, 1833, 1834, 2546,
	2539, 2711, 2713, 2538, 2537, 2536, 2534, 1268, 2696, 2533,
	2532, 2531, 2530, 2529, 2528, 1412, 1691, 2527, 2526, 1688,
	1265, 1269, 2525, 3994, 2689, 2524, 2523, 4004, 4005, 4006,
	2522, 2521, 2520, 2519, 2518, 2517, 2516, 2696, 2515, 4540,
	2514, 2513, 2512, 843, 2511, 2510, 1265, 2675, 2760, 3994,
	2692, 2840, 2841, 4004, 4005, 4006, 2508, 2507, 1713, 1712,
	2494, 4008, 1283, 1541, 2492, 1541, 1716, 2908, 2909, 1541,
	1541, 4010, 2547, 2997, 2600, 2543, 1859, 768, 769, 851,
	843, 843, 1787, 975, 975, 975, 3845, 892, 2628, 1711,
	3017, 167, 1693, 892, 1592, 1525, 2779, 4010, 1789, 1362,
	1213, 1111, 943, 713, 2572, 713, 744, 2954, 2756, 2757,
	4503, 2605, 4442, 843, 843, 2984, 843, 2549, 843, 4441,
	1265, 843, 843, 3994, 2602, 741, 2632, 4004, 4005, 4006,
	4001, 4002, 4003, 734, 5193, 2491, 2876, 3777, 2962, 3995,
	3996, 3997, 3998, 3999, 4000, 2963, 3029, 4164, 843, 1265,
	4638, 4150, 3994, 4384, 4009, 1412, 4004, 4005, 4006, 3427,
	3334, 4008, 892, 892, 767, 767, 2682, 2683, 4539, 2806,
	178, 4010, 4105, 1687, 1705, 1706, 1268, 1268, 1268, 2996,
	1426, 3901, 868, 2766, 2903, 6152, 1872, 5537, 1133, 1633,
	4008, 2690, 3979, 3105, 3106, 5427, 2689, 2678, 1426, 3101,
	4010, 2675, 2675, 2675, 2500, 2497, 1686, 4874, 3003, 3004,
	159, 2714, 2712, 5648, 3012, 4325, 2820, 2820, 3036, 2828,
	3020, 1265, 2692, 4283, 3994, 4868, 5647, 2972, 4004, 4005,
	4006, 5265, 2989, 2990, 2991, 2029, 3070, 2709, 1999, 5887,
	3203, 167, 159, 2685, 872, 2799, 871, 2804, 4338, 3602,
	2029, 3596, 121, 1999, 160, 2759, 829, 2828, 870, 3976,
	828, 3232, 4008, 2552, 4212, 5415, 4526, 2828, 1477, 2986,
	1495, 4327, 4010, 5830, 2689, 5829, 5646, 869, 2552, 2553,
	2763, 3921, 3034, 2769, 6153, 5287, 2562, 4435, 1268, 1124,
	1097, 4473, 4689, 3506, 2553, 1268, 1268, 4472, 843, 2687,
	2692, 2562, 2858, 2817, 5444, 2693, 3062, 827, 843, 1268,
	4732, 892, 2869, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
	1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 2691,
	1268, 3525, 2998, 2973, 2708, 3088, 2898, 1497, 2901, 1615,
	2904, 4294, 2905, 2906, 2864, 2865, 2866, 2689, 3524, 2689,
	2863, 2689, 2934, 5426, 3112, 2933, 2825, 5574, 6072, 1374,
	2504, 1968, 5189, 2690, 172, 1968, 5300, 2881, 5050, 5049,
	2617, 874, 1612, 2692, 2887, 2692, 167, 2692, 695, 973,
	973, 973, 2964, 2961, 693, 3450, 3417, 2696, 876, 160,
	1413, 1414, 1438, 171, 2825, 1390, 2002, 2003, 2004, 2005,
	2006, 2007, 4169, 3445, 2825, 1076, 2029, 4295, 3450, 1999,
	1069, 961, 1616, 4612, 3632, 4216, 5455, 2793, 5669, 876,
	2983, 4236, 5160, 1136, 2707, 2956, 3133, 5438, 4538, 4537,
	5249, 4182, 4945, 4879, 2552, 2981, 2982, 3914, 4178, 4842,
	1451, 2690, 4336, 3444, 3451, 729, 2689, 2689, 3104, 3042,
	2553, 3774, 3044, 1616, 4706, 166, 172, 2562, 5445, 1433,
	1496, 826, 172, 5203, 3320, 4198, 2706, 3451, 2666, 3543,
	3009, 3010, 2692, 2692, 1398, 1587, 1588, 2693, 3609, 1074,
	209, 1477, 163, 184, 993, 171, 164, 3055, 3056, 934,
	1689, 171, 3057, 3058, 3050, 3059, 3060, 3039, 3204, 3043,
	829, 2691, 5573, 2993, 3038, 168, 3037, 691, 209, 3541,
	4297, 3606, 5123, 4997, 2690, 4506, 2690, 3542, 2690, 4652,
	4328, 1552, 3399, 3401, 3400, 3490, 3011, 882, 3013, 2724,
	2723, 3018, 3019, 5884, 4001, 4002, 4003, 720, 161, 1690,
	5454, 5847, 5723, 3995, 3996, 3997, 3998, 3999, 4000, 5722,
	5243, 3090, 1498, 4858, 3092, 2693, 4854, 3540, 2718, 2696,
	4001, 4002, 4003, 3910, 3601, 3909, 2741, 5986, 3452, 3995,
	3996, 3997, 3998, 3999, 4000, 3505, 5190, 2736, 2722, 2691,
	1731, 4281, 1499, 1691, 5839, 1500, 1688, 1553, 4844, 1501,
	3908, 3452, 3907, 3604, 950, 3598, 949, 2761, 4217, 4892,
	948, 2598, 947, 2913, 4404, 5325, 1729, 6142, 2688, 2688,
	5840, 1502, 3247, 2690, 2690, 784, 745, 3123, 1969, 3005,
	5680, 162, 1969, 5989, 3129, 6141, 5451, 2912, 2693, 5450,
	2693, 1083, 2693, 3842, 4001, 4002, 4003, 2696, 4151, 3840,
	3113, 4847, 3131, 3995, 3996, 3997, 3998, 3999, 4000, 1505,
	5425, 3202, 2691, 1967, 2691, 5860, 2691, 3783, 6013, 1693,
	2688, 5888, 1427, 4001, 4002, 4003, 1503, 3115, 2688, 5538,
	4317, 3979, 3995, 3996, 3997, 3998, 3999, 4000, 2688, 4184,
	1427, 5472, 5178, 1504, 1843, 1844, 3151, 5204, 3140, 3139,
	1554, 1970, 2744, 2695, 5172, 1970, 2688, 4961, 2819, 2819,
	3470, 2688, 2688, 3319, 2688, 1651, 3797, 6012, 2688, 2566,
	2696, 210, 2696, 3132, 2696, 4296, 4302, 1728, 882, 2567,
	1506, 3706, 3458, 877, 4314, 4313, 2836, 2693, 2693, 3201,
	1693, 1649, 1544, 1693, 4177, 4001, 4002, 4003, 3054, 210,
	1687, 2568, 4176, 4182, 3995, 3996, 3997, 3998, 3999, 4000,
	4178, 2691, 2691, 4899, 4471, 4887, 4467, 2719, 2002, 2003,
	2004, 2005, 2006, 2007, 4466, 4465, 2616, 1971, 2721, 2720,
	4464, 1971, 4180, 2002, 2003, 2004, 2005, 2006, 2007, 5985,
	1375, 767, 767, 4183, 875, 767, 767, 2814, 3841, 4463,
	1177, 1178, 4413, 3442, 3839, 3006, 2813, 4411, 1244, 3473,
	883, 1730, 1268, 1268, 897, 1268, 4408, 4406, 1268, 2696,
	2696, 4255, 4952, 121, 3765, 875, 2944, 2717, 1268, 1268,
	4173, 1477, 1573, 4893, 3223, 1268, 2826, 1268, 1268, 1268,
	1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 2795, 1268,
	5662, 1268, 1648, 1268, 1268, 1268, 1268, 1268, 1268, 2791,
	1268, 1268, 1268, 861, 3780, 1268, 3250, 2775, 3443, 1556,
	3291, 1268, 4179, 892, 1421, 1268, 1268, 1268, 1268, 6071,
	881, 3125, 6055, 208, 3843, 207, 1546, 5907, 3552, 2733,
	2949, 3701, 3220, 3329, 2827, 3331, 3066, 879, 3402, 2579,
	1419, 3767, 1550, 3354, 3354, 1403, 3023, 5930, 3781, 3365,
	892, 208, 3723, 207, 4181, 3251, 4140, 2899, 4230, 3717,
	5681, 4841, 4916, 1641, 2638, 2639, 2640, 2641, 1575, 2642,
	964, 212, 3695, 1403, 1635, 4375, 1650, 843, 3471, 2002,
	2003, 2004, 2005, 2006, 2007, 4953, 3422, 167, 1563, 3728,
	4956, 6015, 3673, 3298, 3729, 4954, 3433, 3355, 3355, 3252,
	721, 1645, 3249, 1630, 892, 4185, 2895, 2743, 2703, 1531,
	1545, 3467, 2894, 2847, 3069, 2950, 2728, 1611, 896, 748,
	5682, 1555, 1522, 4951, 1693, 1527, 4894, 1582, 3486, 892,
	5499, 833, 3696, 843, 5145, 5886, 880, 1816, 3321, 1007,
	4955, 4184, 3498, 1815, 2886, 3024, 2846, 2885, 3299, 1156,
	1610, 1418, 1659, 2884, 5566, 3469, 1564, 1654, 843, 843,
	3725, 2781, 2703, 4769, 4186, 749, 249, 4234, 3396, 3025,
	2781, 4233, 3528, 3453, 3532, 3253, 5906, 4679, 1574, 3022,
	767, 5418, 3355, 4379, 5026, 3521, 1157, 843, 3476, 2739,
	3487, 2698, 6014, 2697, 1589, 861, 746, 4871, 747, 4333,
	843, 3496, 3497, 4329, 2951, 1622, 1441, 3021, 2480, 884,
	1547, 881, 3620, 2893, 886, 892, 892, 3466, 1570, 3064,
	4534, 3933, 2842, 1655, 860, 1818, 3218, 5675, 843, 3289,
	3700, 3491, 5344, 843, 4180, 1420, 1603, 3283, 3212, 3779,
	5982, 1567, 1872, 2800, 2755, 4183, 2891, 4141, 1875, 4380,
	1872, 5981, 5419, 3067, 1978, 3838, 3248, 767, 767, 3507,
	767, 3418, 4770, 3727, 3294, 1572, 5465, 4417, 1073, 3068,
	5905, 1618, 2745, 937, 1268, 2947, 1369, 3359, 3215, 3219,
	5345, 3221, 4416, 3477, 4415, 3895, 2663, 2487, 292, 3336,
	858, 3493, 3224, 2915, 2916, 2917, 2918, 2919, 4315, 4451,
	3588, 4812, 1601, 767, 3634, 3124, 3559, 1578, 3550, 5983,
	3279, 3280, 3281, 3282, 2839, 3468, 2955, 3512, 3516, 3206,
	2815, 5567, 3472, 2958, 4179, 3395, 1653, 1548, 3545, 1158,
	1549, 3311, 1806, 3229, 5663, 1643, 1817, 3615, 3844, 795,
	795, 1761, 123, 789, 3766, 1565, 1095, 4376, 1373, 3337,
	784, 4949, 4378, 5016, 3862, 3268, 3287, 3722, 3414, 1571,
	292, 859, 2615, 4812, 3716, 123, 4181, 3261, 1640, 3309,
	4302, 1642, 3310, 1646, 1621, 1568, 1820, 3581, 965, 5015,
	4374, 1532, 1566, 3584, 3585, 3433, 1576, 3738, 3655, 1155,
	2948, 3605, 3745, 4229, 1523, 892, 797, 1528, 1075, 975,
	897, 975, 975, 1083, 3332, 1602, 1644, 4452, 713, 713,
	1619, 3362, 1370, 978, 1530, 5565, 860, 1146, 1099, 3753,
	4885, 3757, 3758, 1569, 795, 2837, 1529, 1521, 827, 3671,
	1526, 1684, 3726, 4370, 3616, 3618, 1624, 5153, 1819, 4674,
	1268, 5848, 1623, 2727, 2608, 3691, 892, 5207, 3419, 3420,
	3483, 3656, 5673, 3597, 3237, 3424, 3421, 2607, 4316, 3603,
	4287, 5588, 5842, 843, 878, 3724, 1590, 5206, 4872, 5833,
	4334, 5497, 3666, 5719, 4330, 3495, 5114, 3072, 3071, 3633,
	3300, 3302, 858, 3304, 4826, 3306, 3307, 3308, 2838, 2732,
	3837, 3828, 3836, 2810, 4247, 1657, 1153, 3081, 3082, 4166,
	3769, 843, 3770, 3658, 3771, 5703, 3501, 3773, 3028, 5113,
	3405, 4966, 1979, 5205, 1462, 3189, 3190, 3191, 3192, 1463,
	2746, 4381, 4813, 1471, 2747, 3754, 4839, 6177, 1652, 3795,
	4897, 6176, 5177, 2745, 5420, 1095, 3435, 3436, 3437, 3438,
	3439, 5844, 5843, 1626, 892, 892, 5191, 4739, 3666, 3829,
	3456, 892, 892, 859, 4377, 3569, 797, 975, 1394, 975,
	975, 2609, 2506, 1268, 896, 1495, 5687, 1225, 1268, 1268,
	5980, 1268, 1620, 3796, 1604, 1268, 1617, 3871, 3608, 3873,
	3874, 4814, 3831, 1268, 4813, 1486, 3711, 3762, 3763, 3878,
	3879, 3881, 3607, 4740, 5268, 1268, 2727, 3617, 4867, 2726,
	2801, 5702, 4394, 3354, 4393, 4369, 4331, 1600, 1625, 6140,
	843, 5183, 1225, 1227, 1470, 1225, 1227, 5836, 5128, 3376,
	4480, 1743, 4479, 3735, 4815, 5903, 4242, 4551, 5974, 5659,
	5038, 3228, 1497, 1268, 1268, 1760, 4400, 2828, 1376, 1268,
	4586, 3815, 3599, 4814, 2872, 1475, 3153, 2861, 3825, 2833,
	4585, 3657, 2738, 3568, 2900, 1268, 1268, 3355, 3576, 4730,
	1268, 1759, 5476, 4962, 793, 4829, 897, 4222, 767, 1268,
	944, 1071, 767, 767, 1221, 1268, 3586, 1449, 4806, 5124,
	3593, 833, 2803, 962, 919, 2563, 4815, 4170, 1461, 1268,
	3482, 1081, 967, 3967, 1081, 973, 2925, 973, 973, 1484,
	1268, 1733, 1404, 3702, 4942, 1147, 1100, 3904, 3958, 3705,
	2923, 3697, 3703, 2926, 4738, 1465, 2924, 4941, 3470, 3703,
	2920, 2931, 4702, 279, 1268, 1268, 1268, 3404, 4827, 3750,
	6059, 3739, 1268, 1268, 1268, 3741, 1710, 1268, 1714, 1715,
	1659, 4047, 3971, 1699, 3946, 3743, 767, 767, 1268, 2926,
	1467, 4828, 2726, 1585, 4898, 1496, 1466, 1585, 833, 3465,
	3898, 3, 4565, 2924, 5110, 5577, 3793, 5914, 6172, 5054,
	1268, 3782, 3784, 3785, 6087, 5764, 5354, 5326, 4058, 1226,
	4065, 2746, 3973, 3690, 3801, 2747, 3692, 3693, 3803, 4123,
	3802, 4793, 5055, 3935, 2579, 1268, 3897, 5410, 5033, 6108,
	1268, 1468, 6107, 4089, 4089, 797, 3052, 3354, 4101, 4089,
	4089, 6075, 5622, 3938, 2922, 4276, 3721, 3473, 3939, 1662,
	5767, 5766, 1163, 1660, 1226, 3940, 6074, 1226, 5623, 5913,
	896, 843, 752, 843, 3937, 3877, 843, 3833, 1177, 1178,
	1789, 843, 843, 3962, 3834, 4737, 1485, 1498, 4241, 5039,
	1070, 6021, 967, 973, 5182, 973, 973, 1472, 2966, 3355,
	6020, 3355, 963, 918, 4729, 5771, 3872, 2921, 5919, 4587,
	2974, 5770, 5772, 5773, 5920, 2975, 5916, 1499, 843, 2978,
	1500, 1077, 1079, 2980, 1501, 5917, 4048, 3972, 4131, 3870,
	1482, 5918, 1474, 1473, 5915, 3014, 2598, 5576, 5693, 795,
	3884, 3888, 3887, 4755, 4031, 833, 1502, 3812, 3129, 3894,
	4038, 3463, 3930, 3811, 3742, 843, 843, 1727, 4053, 3896,
	1517, 4124, 1584, 4794, 4152, 3936, 1584, 5583, 3927, 1095,
	3925, 852, 5584, 5621, 3923, 5769, 3924, 3926, 3053, 4074,
	1429, 5768, 1858, 4167, 1505, 5922, 3471, 5921, 6109, 1268,
	1008, 5776, 2965, 2674, 4130, 1683, 3918, 4243, 5729, 3920,
	3931, 1503, 4936, 1448, 5334, 754, 754, 5339, 4266, 1464,
	4938, 5337, 5542, 5338, 5340, 1722, 771, 4274, 1504, 3467,
	5440, 1268, 5142, 3950, 1095, 1095, 3943, 1436, 4958, 4240,
	4934, 4245, 4225, 4147, 3835, 3948, 3798, 3759, 4099, 1477,
	4133, 3428, 5935, 5401, 1221, 3961, 5402, 3964, 4218, 5403,
	2681, 2509, 1966, 1857, 4049, 1506, 1794, 4304, 1792, 4051,
	4254, 1636, 4256, 3469, 1400, 1210, 4037, 5404, 5067, 5937,
	767, 6153, 4190, 6123, 5641, 5640, 6149, 4137, 5936, 170,
	4097, 5940, 4238, 3941, 3942, 5938, 4663, 2631, 4020, 4021,
	4022, 4252, 3898, 3193, 6195, 6082, 5942, 1447, 4935, 5369,
	5336, 4041, 5341, 4025, 5406, 4171, 5175, 4273, 6171, 3041,
	5127, 4640, 4937, 4155, 5405, 3454, 4086, 1721, 4306, 3403,
	4308, 4189, 4102, 4103, 5407, 3466, 3372, 2729, 1987, 1435,
	1204, 1738, 3212, 2808, 735, 1495, 2811, 5076, 2743, 4068,
	4069, 795, 2487, 795, 2821, 2810, 1268, 4070, 2715, 4096,
	1138, 4094, 4011, 4012, 4013, 4093, 4092, 4320, 4321, 3361,
	3464, 4227, 4228, 784, 4115, 5945, 5939, 5943, 5798, 5799,
	5349, 4237, 5802, 4368, 5073, 843, 4145, 3905, 3906, 4127,
	5797, 3911, 5616, 5350, 5615, 5801, 4142, 3928, 5613, 2809,
	3557, 5951, 5952, 173, 5390, 4109, 3127, 3127, 5381, 5386,
	3462, 1121, 1497, 4156, 690, 5950, 692, 694, 6170, 3325,
	3326, 2781, 2845, 3295, 5105, 4064, 1983, 4063, 4259, 5854,
	4777, 6126, 2812, 3468, 5853, 4364, 4187, 4213, 1279, 3556,
	3472, 4208, 4209, 3558, 174, 175, 176, 177, 3153, 3886,
	4210, 4300, 5853, 5854, 1544, 3137, 3138, 5944, 5593, 4512,
	4513, 251, 4427, 4223, 5408, 5409, 892, 892, 4303, 3715,
	3555, 1379, 4778, 4063, 5781, 5780, 5590, 5383, 5384, 4113,
	4114, 5348, 5380, 892, 1072, 3371, 1535, 3189, 3190, 3191,
	3192, 1004, 2675, 913, 3929, 4253, 4061, 4251, 5592, 5591,
	1872, 4395, 5950, 4396, 4397, 4779, 4780, 4781, 6038, 4326,
	5392, 5385, 4801, 5388, 5389, 5391, 5387, 3330, 4282, 4359,
	933, 4360, 3316, 4293, 975, 278, 4289, 3017, 4462, 4275,
	4356, 4422, 2482, 4339, 4424, 1496, 6077, 6178, 1095, 3440,
	3374, 843, 5461, 1537, 4459, 5721, 3527, 5084, 4080, 4085,
	4083, 4084, 4082, 2972, 4078, 4081, 5083, 4390, 6078, 4322,
	5167, 4948, 4947, 4672, 3489, 3856, 3855, 1809, 4362, 892,
	4110, 4080, 4085, 4083, 4084, 4082, 3315, 4078, 4081, 5085,
	2849, 4391, 2848, 3523, 2633, 4358, 2583, 1268, 2582, 4205,
	4648, 1268, 4448, 4643, 4642, 4687, 6076, 4213, 1546, 4080,
	4085, 4083, 4084, 4082, 1268, 4078, 4081, 5679, 6019, 6018,
	4831, 4154, 5852, 5850, 1268, 5778, 843, 843, 4154, 4366,
	5581, 5547, 843, 5134, 1268, 1268, 4921, 1498, 1268, 1268,
	1268, 4786, 1268, 4646, 4085, 4083, 4084, 4082, 4619, 4618,
	4560, 4559, 4434, 1268, 4433, 4344, 3830, 3772, 4468, 4260,
	3582, 3583, 4713, 4478, 4475, 3684, 1268, 1499, 1268, 4153,
	1500, 4510, 3678, 3674, 1501, 3654, 3652, 3574, 3381, 3323,
	3084, 3083, 2834, 1268, 4437, 4438, 2598, 2716, 2667, 4556,
	1268, 2662, 1545, 1860, 1268, 1268, 1502, 1810, 1677, 1628,
	1627, 1593, 1027, 1027, 1442, 1357, 1123, 1112, 1268, 788,
	1997, 866, 862, 1268, 5002, 4515, 1268, 1268, 1268, 1268,
	1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 3230,
	1268, 6005, 5925, 5924, 1505, 5803, 5052, 1268, 1268, 1268,
	5308, 5244, 4426, 5116, 5003, 1268, 4859, 1268, 4855, 4714,
	4477, 1503, 4564, 4161, 1268, 4428, 4450, 3826, 1268, 4496,
	2754, 2751, 1234, 1268, 833, 1227, 4235, 1268, 1504, 2807,
	786, 5194, 4505, 3890, 3111, 1268, 1268, 1268, 4345, 3903,
	5195, 4258, 5151, 4352, 1268, 5150, 6100, 3339, 3329, 3969,
	4445, 6101, 1547, 4446, 2579, 5895, 5447, 1372, 3354, 5196,
	5994, 3354, 4504, 3889, 4461, 1506, 5314, 2587, 766, 4653,
	2586, 5284, 4089, 4101, 4089, 4089, 4089, 5192, 5037, 4476,
	4975, 4660, 4533, 4106, 3987, 1534, 3932, 765, 1268, 1268,
	973, 1268, 3142, 3033, 865, 854, 5523, 5520, 2703, 5283,
	3749, 4684, 5267, 5237, 5232, 5231, 4900, 4889, 4888, 4886,
	4873, 4866, 3355, 4775, 1538, 3355, 4419, 4418, 1533, 4414,
	4412, 123, 1268, 4410, 4409, 4407, 1106, 4405, 4399, 4499,
	4398, 1268, 1268, 3877, 843, 4388, 1789, 4363, 4357, 4355,
	4337, 4335, 4332, 4264, 4263, 4262, 3919, 3196, 868, 3917,
	843, 3768, 3747, 4633, 4634, 3699, 3698, 892, 3660, 3659,
	3195, 3196, 3913, 1268, 843, 3178, 4722, 3001, 4535, 1548,
	2970, 2969, 1549, 2591, 2968, 4601, 159, 4731, 2967, 4616,
	2930, 3433, 2914, 4620, 4712, 2911, 4436, 892, 2910, 2907,
	4637, 2902, 3225, 2896, 3357, 3357, 4685, 2888, 2880, 2877,
	4507, 2875, 3240, 3241, 3242, 3243, 2874, 4558, 2873, 4548,
	872, 2871, 871, 4698, 2868, 2867, 2862, 4695, 4700, 4688,
	843, 4563, 4694, 4773, 870, 3212, 2781, 2860, 2857, 3354,
	3486, 4554, 4458, 2852, 4757, 4683, 4788, 2781, 2781, 4767,
	2844, 4569, 4721, 869, 2832, 2823, 2822, 2798, 2797, 3857,
	3859, 2796, 2794, 2792, 4544, 2790, 3865, 3866, 2703, 2776,
	2774, 2742, 4807, 4099, 2737, 2730, 1789, 2584, 3154, 1789,
	3155, 1789, 4823, 3791, 3790, 4600, 1145, 1098, 4613, 3357,
	4615, 1088, 2977, 3355, 3355, 2976, 4845, 4529, 4530, 4190,
	5294, 4641, 3487, 4614, 4644, 4752, 4818, 4751, 4628, 4822,
	4719, 4636, 4627, 4765, 4639, 4993, 4629, 4982, 4980, 3898,
	4978, 4977, 4649, 4650, 4810, 3356, 3356, 4817, 4656, 4819,
	4645, 4498, 4497, 4782, 4495, 4830, 3355, 4494, 4493, 4492,
	4491, 4596, 4490, 4783, 4824, 4489, 4485, 4483, 4189, 4675,
	3863, 4792, 3086, 3212, 3175, 4655, 3085, 4657, 4658, 3080,
	4716, 3173, 3176, 3172, 795, 3174, 4697, 795, 3079, 784,
	3078, 3077, 3076, 3075, 4572, 4573, 4574, 4575, 4576, 4577,
	4578, 4579, 4580, 4581, 4582, 4583, 4584, 4711, 4588, 4707,
	3074, 4715, 3073, 4717, 1872, 4669, 5657, 3228, 784, 6061,
	3395, 4835, 4838, 784, 784, 4190, 6060, 6031, 5810, 3847,
	3356, 4730, 5222, 3529, 4944, 5218, 4799, 4759, 4760, 5064,
	3512, 5063, 4800, 5030, 4802, 3898, 5029, 4371, 3653, 4742,
	4519, 4520, 4521, 4522, 3646, 3642, 3638, 4748, 4986, 4763,
	2835, 4750, 784, 4232, 2879, 4756, 5184, 3822, 3821, 4561,
	4562, 3820, 767, 4758, 4189, 4766, 3117, 3819, 767, 767,
	3818, 3494, 2768, 1633, 1488, 4787, 1479, 4790, 1230, 4784,
	3211, 838, 3949, 6144, 4798, 1093, 5166, 213, 887, 5215,
	3210, 4744, 6162, 1672, 6161, 3378, 5157, 5131, 1231, 3800,
	1448, 839, 5667, 5666, 1673, 4421, 4836, 4914, 4840, 5212,
	1268, 5120, 897, 2482, 4957, 4837, 4278, 767, 3515, 4849,
	843, 843, 843, 843, 4996, 3475, 4959, 1268, 1268, 4905,
	3382, 2657, 4617, 1268, 1268, 2649, 2599, 2592, 1445, 1434,
	1268, 1268, 1428, 3666, 1424, 795, 795, 1268, 1406, 3898,
	6016, 4907, 5378, 854, 1268, 5509, 5508, 5459, 5273, 4923,
	4943, 4974, 4803, 4423, 4365, 1268, 4307, 4305, 4277, 4964,
	4239, 4734, 4134, 3459, 3455, 4869, 3380, 3375, 4904, 2987,
	2985, 4901, 4875, 2772, 2972, 4906, 2767, 2668, 795, 2653,
	5000, 2645, 4976, 2643, 4667, 2625, 4843, 1726, 1725, 1724,
	1268, 1718, 1681, 1678, 1674, 1669, 1647, 1594, 1268, 1511,
	1507, 1268, 1487, 1268, 1478, 5220, 4922, 5219, 3711, 3734,
	2624, 1394, 1060, 5928, 767, 5857, 5845, 4967, 1408, 5746,
	3825, 5488, 4823, 5579, 5511, 5428, 5368, 5223, 5179, 1268,
	5165, 5154, 4946, 3354, 3354, 4693, 4129, 3354, 3864, 3480,
	3474, 4965, 1734, 797, 2680, 2593, 2574, 2548, 1764, 770,
	4089, 3180, 3433, 5094, 2953, 797, 4973, 5077, 3107, 3108,
	770, 3184, 1027, 3182, 3775, 3776, 896, 3179, 2952, 3181,
	3183, 3892, 2805, 3786, 770, 784, 3355, 770, 6169, 6154,
	5992, 3365, 892, 5699, 4824, 3478, 4718, 3355, 3355, 4246,
	5658, 3355, 5068, 5069, 2750, 4671, 767, 1286, 3804, 1285,
	1278, 5098, 5028, 2565, 843, 5132, 1091, 5031, 1751, 3355,
	5140, 5446, 5972, 5441, 1789, 5144, 767, 5097, 5661, 5443,
	5115, 5838, 5439, 2606, 1268, 5435, 4143, 5092, 5093, 4903,
	1543, 1540, 4146, 3385, 4135, 892, 3392, 1577, 677, 2816,
	1027, 3409, 2612, 2611, 2703, 5453, 5125, 5121, 5452, 5032,
	5111, 5152, 5686, 5149, 4895, 3481, 3672, 5061, 5135, 797,
	5051, 4774, 5155, 4776, 3357, 4244, 5180, 885, 3479, 5129,
	1440, 2892, 5698, 4771, 3746, 3441, 2932, 3486, 4203, 4202,
	5119, 111, 1268, 110, 109, 108, 3193, 107, 5138, 106,
	105, 104, 5164, 103, 2703, 42, 41, 5199, 5070, 40,
	39, 2781, 38, 37, 36, 35, 62, 1754, 61, 5174,
	5071, 60, 59, 58, 5173, 57, 1268, 56, 55, 54,
	3891, 3891, 5161, 5162, 5198, 53, 5201, 52, 51, 50,
	1027, 3355, 49, 5171, 48, 47, 46, 45, 44, 3487,
	5090, 3848, 3849, 3850, 3851, 3852, 3853, 3854, 43, 34,
	33, 32, 3860, 3861, 31, 30, 29, 28, 27, 26,
	25, 24, 23, 790, 1209, 2945, 5080, 5081, 4470, 3823,
	5086, 4987, 4988, 4989, 4990, 4991, 4992, 1663, 4994, 4995,
	3185, 4830, 743, 1154, 1152, 3356, 1798, 1131, 1141, 2946,
	3460, 102, 101, 100, 4968, 4969, 4970, 4971, 4972, 5158,
	5251, 99, 77, 5159, 76, 5216, 1268, 75, 74, 73,
	1027, 1027, 72, 5147, 71, 70, 5046, 69, 795, 68,
	67, 5229, 5230, 66, 5, 65, 80, 892, 82, 795,
	795, 4430, 4431, 795, 81, 79, 5187, 78, 63, 5087,
	5185, 18, 17, 1656, 2619, 195, 1377, 2629, 4440, 713,
	5197, 795, 3143, 4298, 5109, 5170, 4279, 4804, 5250, 1481,
	6050, 3510, 5819, 5186, 4678, 182, 3357, 5674, 3357, 4175,
	3189, 3190, 3191, 3192, 4172, 4811, 4676, 3186, 5704, 5224,
	4820, 4682, 5079, 3368, 4680, 3364, 3235, 6122, 5335, 5228,
	3975, 3292, 3297, 1268, 5329, 5611, 5221, 3262, 5370, 5933,
	5227, 1268, 1268, 1268, 5225, 5136, 5367, 5095, 3430, 3288,
	165, 5589, 3235, 294, 5347, 5274, 3314, 2581, 116, 837,
	5277, 5288, 836, 5927, 1239, 5627, 5814, 1268, 1268, 5393,
	5107, 1268, 1268, 1268, 4484, 5382, 4670, 179, 3711, 1110,
	5307, 3051, 1160, 5234, 730, 3040, 1137, 5236, 3711, 2585,
	5104, 5103, 5289, 5800, 5796, 5181, 5795, 4630, 1268, 3322,
	5101, 3335, 2569, 98, 97, 96, 95, 94, 93, 92,
	5333, 91, 90, 795, 89, 1268, 3354, 88, 87, 86,
	85, 84, 5094, 83, 16, 15, 14, 3356, 11, 3356,
	1268, 1268, 5559, 5557, 5558, 5556, 3200, 899, 2026, 3130,
	1228, 1986, 1220, 843, 5564, 4555, 5025, 5413, 5550, 4684,
	2503, 5929, 4651, 1024, 1025, 1697, 1022, 1052, 843, 1027,
	1591, 5057, 4611, 5343, 4823, 843, 1027, 4602, 5285, 767,
	3355, 5412, 3260, 3256, 3245, 3267, 5045, 3216, 1263, 1262,
	3226, 5302, 3960, 2501, 1257, 1258, 1253, 2703, 1977, 1974,
	3814, 3015, 2777, 3554, 5398, 4265, 4323, 5362, 3560, 5720,
	3733, 2033, 1840, 3065, 4226, 1838, 843, 782, 1183, 3246,
	799, 2028, 2, 1, 4773, 0, 0, 0, 3355, 0,
	975, 0, 5480, 892, 0, 5429, 4824, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5475, 0, 5416, 0,
	5486, 5346, 4823, 897, 0, 892, 892, 5322, 930, 0,
	5328, 5422, 0, 5342, 1027, 5355, 0, 0, 0, 930,
	930, 5462, 0, 0, 0, 0, 5414, 0, 0, 4822,
	0, 5399, 5375, 5379, 0, 799, 0, 5504, 6, 5456,
	799, 930, 5396, 4683, 1027, 799, 5411, 799, 897, 975,
	0, 64, 5457, 0, 930, 930, 3355, 5437, 5515, 5395,
	5517, 0, 5436, 0, 4824, 5376, 159, 1050, 1050, 5527,
	930, 930, 930, 5489, 0, 0, 135, 5478, 0, 0,
	0, 5502, 22, 5430, 0, 0, 0, 0, 0, 0,
	0, 5552, 21, 1268, 5495, 5483, 5481, 0, 20, 1268,
	10, 0, 9, 0, 930, 1268, 0, 0, 19, 5358,
	1268, 1027, 1268, 0, 8, 5498, 0, 5500, 5539, 5541,
	5501, 0, 5433, 0, 0, 1268, 5525, 5512, 4190, 5545,
	5546, 0, 0, 7, 0, 13, 0, 12, 0, 5491,
	0, 0, 0, 4823, 0, 0, 0, 0, 3898, 5594,
	1268, 0, 4728, 0, 0, 0, 0, 797, 0, 5524,
	5606, 0, 5529, 0, 1268, 5269, 5270, 896, 5272, 1268,
	5595, 0, 795, 5526, 5295, 0, 0, 4189, 0, 5543,
	0, 0, 4747, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5548, 5633, 0, 0, 3355, 1027, 0,
	1027, 0, 0, 0, 0, 4824, 0, 0, 0, 0,
	0, 3355, 896, 0, 5634, 0, 5313, 0, 0, 5097,
	795, 5572, 0, 0, 5628, 0, 5636, 0, 0, 0,
	0, 0, 5522, 0, 0, 0, 0, 1027, 843, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	843, 0, 5596, 0, 0, 0, 0, 0, 1268, 5639,
	5602, 0, 5601, 5664, 0, 0, 1095, 5671, 0, 0,
	0, 797, 0, 0, 0, 3354, 973, 5617, 5618, 4443,
	0, 5619, 5620, 5670, 1268, 1268, 0, 0, 0, 0,
	843, 5689, 0, 0, 0, 0, 0, 5694, 795, 5643,
	0, 1268, 0, 0, 0, 0, 0, 0, 5644, 5642,
	0, 5638, 0, 0, 5652, 0, 0, 0, 5138, 5360,
	5651, 5660, 5360, 1268, 0, 5653, 5649, 892, 5645, 3355,
	892, 892, 892, 0, 0, 0, 0, 0, 0, 0,
	5668, 0, 0, 0, 0, 973, 5725, 0, 0, 0,
	0, 1268, 5629, 5695, 5688, 0, 1268, 1268, 1268, 5692,
	1268, 5691, 0, 5706, 0, 0, 0, 5715, 5701, 1268,
	0, 0, 0, 0, 767, 0, 1027, 0, 1027, 5700,
	0, 1789, 0, 0, 2579, 0, 0, 5709, 5717, 5711,
	0, 5713, 0, 0, 3433, 0, 0, 0, 1268, 0,
	0, 0, 0, 5794, 0, 5730, 5731, 2788, 5732, 5733,
	0, 5716, 1789, 0, 1789, 0, 0, 5743, 5741, 5740,
	0, 0, 5742, 5782, 5744, 5568, 0, 0, 5821, 5779,
	4487, 0, 0, 0, 0, 5818, 5571, 0, 0, 795,
	5759, 5760, 0, 0, 0, 5774, 0, 0, 5817, 833,
	0, 0, 0, 795, 5735, 5824, 0, 5736, 0, 0,
	5808, 5816, 5811, 0, 0, 0, 0, 0, 0, 5785,
	0, 5790, 0, 3262, 3262, 5831, 5598, 0, 892, 5793,
	0, 0, 3355, 0, 0, 0, 5826, 0, 0, 0,
	5822, 5813, 0, 5570, 0, 0, 0, 0, 0, 3357,
	0, 1789, 3357, 1095, 0, 897, 5827, 0, 0, 0,
	5859, 5835, 1268, 0, 0, 0, 0, 0, 1027, 5825,
	5828, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	5775, 0, 0, 0, 0, 930, 5552, 5849, 1268, 5851,
	1268, 1268, 3262, 3262, 3262, 930, 1268, 0, 930, 5872,
	0, 0, 5610, 5841, 5861, 930, 5855, 0, 930, 5877,
	5792, 5912, 0, 0, 0, 0, 0, 5697, 5871, 5874,
	5873, 795, 5875, 0, 5880, 0, 5904, 5395, 5606, 5878,
	5926, 5889, 1268, 5876, 0, 5894, 0, 5597, 5898, 0,
	0, 0, 0, 5897, 0, 5896, 0, 0, 0, 0,
	0, 1789, 0, 0, 0, 0, 0, 930, 5910, 5911,
	5707, 5708, 0, 0, 1268, 0, 5957, 0, 0, 0,
	3356, 0, 0, 3356, 0, 4823, 0, 0, 1268, 0,
	0, 0, 5973, 0, 975, 975, 5970, 2703, 5963, 0,
	5967, 5932, 5965, 0, 0, 0, 0, 0, 0, 5953,
	799, 799, 5960, 5961, 5975, 5976, 0, 0, 0, 0,
	0, 1019, 1019, 0, 0, 799, 767, 5126, 5964, 896,
	3357, 3357, 0, 5999, 0, 0, 0, 2485, 0, 3355,
	0, 975, 5990, 0, 0, 892, 5969, 4824, 5995, 0,
	5997, 5987, 1268, 799, 799, 2743, 5984, 799, 1177, 1178,
	0, 6006, 5125, 0, 5966, 5993, 0, 6002, 6003, 0,
	0, 5998, 0, 3357, 6023, 1789, 1789, 0, 0, 6026,
	5168, 0, 6001, 6022, 795, 0, 1268, 1268, 0, 0,
	1268, 0, 0, 0, 0, 2579, 6011, 767, 5706, 3329,
	0, 6008, 0, 5977, 0, 0, 0, 0, 0, 0,
	5821, 892, 892, 0, 0, 0, 0, 1050, 0, 4823,
	0, 797, 6045, 6024, 6025, 0, 6028, 0, 0, 6036,
	0, 0, 767, 5739, 6035, 6037, 6049, 6033, 0, 6047,
	6046, 0, 0, 6042, 6043, 5816, 6051, 6041, 6040, 0,
	0, 3356, 3356, 0, 0, 0, 892, 0, 0, 0,
	0, 0, 0, 6058, 3355, 0, 0, 1268, 6062, 6048,
	0, 0, 5822, 3355, 0, 0, 6066, 6065, 1268, 0,
	0, 4824, 0, 0, 0, 6085, 0, 1095, 0, 6067,
	1268, 0, 0, 0, 3356, 1050, 0, 6073, 0, 0,
	0, 0, 0, 0, 0, 0, 6092, 0, 6094, 0,
	0, 0, 0, 0, 0, 1268, 0, 0, 0, 0,
	6091, 0, 0, 0, 6093, 6099, 5899, 5900, 797, 6113,
	6114, 6115, 0, 5606, 0, 6090, 6097, 0, 0, 0,
	6110, 892, 6106, 6104, 6069, 0, 767, 4823, 6124, 6125,
	6129, 0, 6131, 0, 6117, 930, 0, 0, 0, 930,
	930, 0, 0, 0, 0, 6133, 767, 6130, 0, 0,
	6085, 0, 5271, 6128, 6132, 0, 0, 6102, 6103, 0,
	5333, 795, 6147, 0, 0, 1050, 6151, 930, 0, 6156,
	973, 973, 6148, 0, 0, 797, 1268, 0, 0, 930,
	6160, 3355, 6157, 0, 6166, 930, 0, 6163, 6155, 4824,
	0, 797, 6164, 0, 6174, 0, 6173, 6167, 6168, 0,
	0, 6181, 767, 6180, 0, 0, 0, 975, 975, 6190,
	5333, 6186, 6182, 6185, 6085, 6194, 6192, 973, 6193, 6179,
	6196, 0, 0, 0, 0, 0, 0, 6188, 6189, 6197,
	6085, 6201, 0, 0, 799, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1050, 1050, 799, 799, 0,
	0, 0, 799, 799, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 930, 0, 0, 799, 0, 0,
	1877, 799, 0, 0, 0, 0, 0, 0, 0, 799,
	0, 799, 0, 0, 0, 0, 795, 0, 799, 6139,
	4979, 0, 4981, 3357, 0, 795, 0, 6053, 0, 799,
	799, 799, 799, 799, 3357, 3357, 0, 0, 3357, 0,
	799, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3357, 0, 0, 0,
	0, 0, 0, 2029, 799, 0, 1999, 0, 0, 0,
	2011, 2012, 2013, 0, 0, 0, 0, 0, 0, 0,
	6139, 0, 2554, 0, 6029, 6030, 0, 0, 6032, 2560,
	0, 2552, 0, 1027, 0, 0, 2557, 2561, 2556, 0,
	2558, 0, 1027, 0, 2559, 2022, 2023, 2553, 6139, 0,
	0, 0, 0, 0, 2562, 1495, 0, 0, 0, 0,
	0, 0, 0, 4832, 0, 0, 6089, 0, 0, 0,
	0, 0, 2813, 0, 6111, 0, 0, 0, 5490, 0,
	0, 0, 0, 0, 3356, 0, 799, 0, 0, 0,
	0, 6105, 0, 795, 0, 3356, 3356, 0, 0, 3356,
	5505, 5506, 0, 0, 0, 0, 0, 3262, 3262, 1027,
	0, 0, 0, 0, 0, 0, 0, 3356, 3357, 0,
	0, 0, 1497, 0, 1050, 0, 0, 0, 930, 0,
	0, 1050, 1027, 0, 1877, 0, 1877, 0, 0, 0,
	0, 6111, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 6175, 0, 930,
	0, 0, 0, 0, 0, 930, 0, 0, 0, 0,
	0, 0, 0, 973, 973, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3262, 3262, 3262, 3262, 3262, 3262,
	3262, 3262, 3262, 3262, 3262, 3262, 3262, 0, 3262, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1027,
	1027, 0, 0, 0, 0, 0, 0, 0, 1027, 1050,
	0, 0, 0, 0, 0, 0, 4606, 0, 0, 0,
	0, 3235, 0, 0, 0, 0, 0, 0, 0, 3356,
	0, 0, 0, 0, 0, 1496, 767, 0, 0, 1050,
	0, 2029, 0, 0, 1999, 767, 767, 0, 2011, 2012,
	2013, 1450, 4806, 0, 0, 0, 0, 0, 0, 0,
	2554, 0, 0, 2555, 0, 0, 0, 2560, 4829, 2552,
	0, 0, 0, 0, 2557, 2561, 2556, 0, 2558, 0,
	0, 0, 2559, 2022, 2023, 2553, 4665, 0, 0, 0,
	0, 0, 2562, 0, 5257, 5258, 0, 4833, 0, 5261,
	5262, 0, 0, 0, 0, 0, 1050, 0, 0, 0,
	4831, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1498, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	930, 0, 0, 0, 0, 0, 1027, 1499, 0, 1064,
	1500, 3262, 1027, 0, 1501, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2598, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1502, 0, 0, 0,
	0, 0, 0, 1050, 0, 1050, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3357, 0, 0,
	799, 0, 0, 0, 0, 0, 5737, 5738, 1027, 1766,
	0, 0, 0, 0, 1505, 0, 0, 0, 0, 0,
	0, 0, 1050, 0, 0, 930, 0, 930, 930, 930,
	930, 1503, 0, 0, 5290, 5291, 0, 5292, 0, 5293,
	0, 0, 0, 0, 0, 3357, 0, 0, 1504, 0,
	4834, 4281, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 799, 799, 799, 0,
	0, 0, 0, 0, 0, 1506, 0, 0, 2018, 1846,
	1847, 0, 0, 0, 0, 0, 0, 2008, 2009, 2010,
	0, 930, 1027, 1027, 0, 0, 2002, 2003, 2004, 2005,
	2006, 2007, 0, 0, 0, 0, 0, 0, 3356, 0,
	0, 0, 0, 3357, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2696, 924, 0, 0, 0, 0, 0,
	0, 0, 0, 5858, 0, 924, 924, 0, 0, 0,
	0, 1050, 0, 1050, 0, 0, 3356, 0, 0, 799,
	799, 799, 0, 0, 0, 0, 0, 977, 0, 0,
	0, 0, 0, 0, 0, 767, 0, 0, 0, 0,
	995, 999, 0, 0, 0, 0, 0, 119, 0, 0,
	0, 118, 120, 0, 0, 0, 2029, 0, 0, 1999,
	0, 166, 0, 2011, 2012, 2013, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2554, 0, 0, 2555, 0,
	0, 0, 2560, 0, 2552, 0, 0, 0, 163, 2557,
	2561, 2556, 164, 2558, 3356, 0, 0, 2559, 2022, 2023,
	2553, 0, 0, 0, 0, 0, 0, 2562, 0, 0,
	0, 168, 0, 0, 3357, 0, 0, 0, 122, 0,
	0, 0, 1573, 0, 0, 0, 0, 0, 3357, 0,
	0, 799, 0, 0, 155, 0, 117, 0, 799, 799,
	0, 0, 0, 0, 161, 0, 0, 0, 2614, 0,
	0, 0, 799, 1050, 1027, 2626, 799, 799, 799, 799,
	799, 799, 799, 799, 799, 799, 799, 799, 799, 799,
	799, 799, 0, 799, 0, 0, 0, 0, 0, 0,
	0, 1877, 0, 0, 1607, 0, 2018, 0, 0, 0,
	0, 0, 0, 0, 0, 2008, 2009, 2010, 0, 0,
	0, 5549, 0, 0, 2002, 2003, 2004, 2005, 2006, 2007,
	6007, 4039, 0, 0, 0, 0, 124, 0, 1575, 0,
	0, 0, 0, 0, 1027, 0, 5053, 162, 0, 0,
	0, 0, 0, 0, 0, 3356, 0, 767, 0, 156,
	0, 0, 1027, 0, 0, 139, 3357, 144, 137, 3356,
	0, 153, 0, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 141, 940, 940, 0, 0,
	1462, 0, 0, 0, 140, 1463, 1027, 0, 0, 1471,
	0, 5434, 1027, 0, 0, 0, 0, 0, 145, 133,
	0, 0, 0, 0, 2029, 142, 1564, 1999, 0, 0,
	0, 2011, 2012, 2013, 0, 131, 0, 0, 0, 0,
	0, 6068, 0, 2554, 0, 0, 2555, 0, 1574, 0,
	2560, 0, 2552, 0, 0, 0, 0, 2557, 2561, 2556,
	2853, 2558, 0, 0, 0, 2559, 2022, 2023, 2553, 0,
	0, 1486, 0, 147, 150, 2562, 0, 0, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 3356, 1570, 0,
	143, 0, 0, 0, 0, 0, 3135, 0, 0, 0,
	1470, 0, 0, 149, 0, 0, 0, 3137, 3138, 0,
	0, 1567, 0, 0, 0, 0, 0, 0, 0, 3357,
	0, 0, 0, 130, 0, 0, 940, 0, 0, 0,
	0, 1475, 0, 0, 0, 1572, 0, 0, 0, 121,
	138, 0, 129, 0, 0, 0, 123, 2960, 4141, 1019,
	132, 0, 127, 0, 0, 0, 0, 0, 128, 0,
	0, 0, 0, 154, 0, 1563, 0, 0, 0, 0,
	0, 0, 0, 136, 1461, 0, 1608, 1578, 0, 0,
	0, 125, 0, 0, 0, 0, 1019, 0, 0, 0,
	0, 0, 0, 1027, 1027, 0, 1027, 0, 0, 0,
	0, 1465, 0, 0, 0, 0, 0, 152, 0, 1605,
	0, 0, 123, 0, 0, 1565, 0, 148, 0, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 0, 1571,
	0, 0, 0, 0, 0, 0, 1467, 0, 0, 0,
	3356, 0, 1466, 0, 0, 1568, 0, 0, 1027, 1027,
	0, 0, 1566, 0, 0, 0, 1576, 0, 0, 0,
	0, 0, 0, 167, 0, 0, 0, 0, 5868, 0,
	0, 0, 0, 0, 0, 0, 160, 0, 0, 0,
	0, 2018, 0, 0, 0, 0, 0, 1468, 0, 0,
	2008, 2009, 2010, 1569, 0, 0, 0, 0, 0, 2002,
	2003, 2004, 2005, 2006, 2007, 0, 4026, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3357, 0, 0, 0,
	0, 0, 0, 0, 0, 3087, 0, 3089, 0, 0,
	1027, 0, 1469, 0, 0, 0, 0, 0, 1027, 0,
	0, 0, 0, 1472, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 799, 799, 0, 799, 0,
	0, 799, 0, 0, 0, 0, 3262, 0, 1474, 1473,
	0, 799, 799, 0, 0, 0, 0, 0, 799, 0,
	799, 799, 799, 799, 799, 799, 799, 799, 799, 799,
	799, 0, 799, 0, 799, 0, 799, 799, 799, 799,
	799, 799, 0, 799, 799, 799, 0, 0, 799, 0,
	0, 0, 0, 0, 799, 0, 0, 0, 799, 799,
	799, 799, 0, 0, 0, 0, 0, 3356, 3262, 0,
	0, 3357, 0, 1027, 0, 0, 0, 0, 0, 0,
	3357, 0, 0, 0, 0, 1464, 799, 799, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3152, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1050, 0,
	0, 0, 0, 0, 0, 1477, 2029, 1050, 0, 1999,
	0, 0, 0, 2011, 2012, 2013, 0, 0, 0, 0,
	0, 1877, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2560, 0, 2552, 0, 0, 0, 0, 2557,
	2561, 2556, 0, 2558, 0, 0, 0, 0, 0, 2018,
	2553, 0, 0, 0, 0, 0, 1877, 2562, 2008, 2009,
	2010, 799, 0, 0, 0, 0, 0, 2002, 2003, 2004,
	2005, 2006, 2007, 0, 1050, 0, 0, 0, 0, 0,
	0, 0, 3356, 0, 1027, 0, 0, 0, 0, 0,
	1877, 3356, 0, 1027, 0, 0, 0, 1050, 3357, 0,
	1462, 0, 0, 0, 2029, 1463, 0, 1999, 0, 1471,
	0, 2011, 2012, 2013, 0, 0, 0, 0, 1027, 0,
	0, 0, 0, 2554, 930, 0, 2555, 0, 1877, 0,
	2560, 0, 2552, 0, 0, 0, 0, 2557, 2561, 2556,
	0, 2558, 0, 0, 0, 2559, 2022, 2023, 2553, 0,
	0, 0, 0, 0, 0, 2562, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	930, 4354, 0, 3262, 1050, 1050, 0, 0, 0, 0,
	6136, 0, 0, 1050, 0, 0, 930, 0, 0, 0,
	930, 0, 930, 0, 0, 0, 0, 0, 0, 930,
	1470, 0, 0, 0, 0, 184, 0, 799, 0, 0,
	0, 0, 213, 0, 0, 0, 930, 0, 0, 3356,
	0, 0, 0, 0, 0, 0, 930, 0, 0, 0,
	209, 1475, 3262, 0, 187, 0, 0, 0, 930, 930,
	0, 6136, 0, 206, 0, 1877, 930, 0, 1027, 0,
	0, 0, 0, 0, 930, 0, 0, 0, 0, 1027,
	1027, 930, 0, 1027, 0, 930, 0, 0, 930, 6136,
	0, 930, 0, 0, 1461, 194, 0, 0, 0, 0,
	0, 0, 930, 0, 0, 0, 0, 0, 0, 0,
	930, 0, 0, 0, 0, 0, 930, 1027, 0, 0,
	0, 1465, 0, 0, 930, 0, 0, 0, 930, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2029,
	0, 1877, 1999, 0, 930, 0, 2011, 2012, 2013, 799,
	0, 1050, 799, 0, 799, 799, 1467, 1050, 2554, 0,
	0, 2555, 1466, 0, 0, 2560, 0, 2552, 0, 0,
	0, 0, 2557, 2561, 2556, 0, 2558, 0, 0, 0,
	2559, 2022, 2023, 2553, 0, 0, 199, 0, 0, 1027,
	2562, 0, 2029, 799, 0, 1999, 5909, 0, 0, 2011,
	2012, 2013, 0, 0, 0, 0, 0, 1468, 930, 0,
	0, 2554, 0, 1050, 2555, 930, 0, 190, 2560, 0,
	2552, 0, 0, 0, 0, 2557, 2561, 2556, 0, 4016,
	0, 0, 0, 2559, 2022, 2023, 2553, 0, 0, 0,
	0, 1877, 0, 2562, 0, 4017, 0, 930, 0, 0,
	0, 0, 1469, 186, 0, 0, 0, 0, 0, 0,
	196, 0, 0, 1472, 2618, 0, 0, 0, 191, 0,
	0, 0, 0, 0, 0, 0, 192, 0, 0, 0,
	0, 210, 0, 0, 0, 0, 3262, 0, 0, 0,
	5908, 0, 0, 0, 0, 2655, 4353, 0, 1474, 1473,
	0, 2664, 0, 1027, 0, 0, 0, 1050, 1050, 799,
	799, 4018, 799, 799, 0, 0, 799, 0, 0, 0,
	0, 799, 799, 0, 799, 0, 0, 0, 799, 0,
	0, 2018, 0, 0, 0, 0, 799, 0, 0, 0,
	2008, 2009, 2010, 0, 0, 0, 0, 0, 799, 2002,
	2003, 2004, 2005, 2006, 2007, 0, 799, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 198, 0, 0,
	0, 0, 0, 0, 0, 1464, 0, 0, 0, 201,
	0, 0, 0, 0, 0, 0, 799, 799, 0, 0,
	0, 0, 799, 0, 0, 1462, 0, 0, 205, 0,
	1463, 0, 0, 0, 1471, 1477, 185, 0, 799, 799,
	0, 0, 0, 799, 193, 0, 0, 0, 0, 0,
	0, 0, 799, 0, 0, 0, 0, 0, 799, 2018,
	200, 0, 0, 0, 0, 202, 0, 0, 2008, 2009,
	2010, 197, 799, 208, 0, 207, 189, 2002, 2003, 2004,
	2005, 2006, 2007, 799, 0, 0, 188, 0, 0, 0,
	0, 0, 0, 212, 0, 211, 3571, 0, 0, 0,
	5941, 0, 0, 0, 0, 0, 0, 799, 799, 799,
	0, 0, 0, 0, 0, 799, 799, 799, 3499, 0,
	799, 0, 0, 0, 0, 1470, 2655, 1877, 0, 0,
	0, 799, 0, 1877, 203, 0, 0, 0, 4603, 1050,
	0, 3518, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 799, 0, 0, 1475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1027, 0, 0, 799, 0,
	0, 0, 0, 799, 0, 0, 0, 0, 799, 0,
	799, 0, 0, 0, 0, 0, 0, 0, 0, 1461,
	4604, 0, 0, 0, 0, 0, 0, 0, 0, 1050,
	1459, 2655, 0, 2988, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1465, 1050, 1462, 0,
	0, 0, 930, 1463, 0, 0, 0, 1471, 0, 0,
	0, 0, 0, 0, 3262, 3262, 0, 0, 3262, 0,
	0, 0, 0, 0, 0, 1027, 0, 0, 0, 1460,
	0, 1467, 0, 1027, 0, 0, 0, 1466, 0, 0,
	1877, 1050, 0, 0, 2018, 0, 0, 1050, 0, 0,
	0, 0, 0, 2008, 2009, 2010, 0, 930, 930, 0,
	0, 0, 2002, 2003, 2004, 2005, 2006, 2007, 0, 1457,
	0, 0, 0, 0, 0, 0, 0, 930, 930, 0,
	0, 0, 1468, 0, 0, 0, 0, 930, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2018, 1470, 0,
	0, 0, 799, 0, 0, 0, 2008, 2009, 2010, 0,
	0, 0, 0, 0, 0, 2002, 2003, 2004, 2005, 2006,
	2007, 0, 0, 0, 0, 0, 0, 1469, 0, 1475,
	0, 0, 0, 0, 799, 0, 0, 0, 1472, 0,
	0, 0, 0, 0, 0, 3752, 0, 0, 0, 0,
	0, 3760, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1027, 0, 0, 1014, 0, 0, 0, 0, 0,
	0, 3570, 1461, 1474, 1473, 0, 0, 1877, 1877, 1877,
	0, 0, 2029, 1459, 0, 1999, 0, 0, 0, 2011,
	2012, 2013, 0, 0, 0, 0, 0, 0, 0, 1465,
	0, 2554, 0, 0, 2555, 0, 0, 3805, 2560, 0,
	2552, 0, 0, 1027, 0, 2557, 2561, 2556, 0, 2558,
	0, 0, 0, 2559, 2022, 2023, 2553, 0, 1050, 1050,
	0, 1050, 1460, 2562, 1467, 0, 0, 0, 0, 0,
	1466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1464, 0, 0, 0, 0, 0, 0, 0, 0, 799,
	0, 0, 0, 0, 1027, 1027, 0, 0, 0, 0,
	0, 0, 0, 0, 930, 0, 0, 0, 0, 0,
	1477, 0, 0, 1050, 1050, 1468, 0, 930, 0, 0,
	0, 0, 0, 0, 0, 703, 0, 0, 0, 0,
	0, 3868, 3869, 0, 0, 0, 751, 751, 751, 751,
	774, 775, 0, 930, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1469, 849, 849, 0, 0, 0, 0, 0, 0, 0,
	0, 1472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 916, 0, 920, 0,
	0, 930, 935, 936, 0, 1050, 941, 942, 0, 0,
	0, 0, 0, 1050, 1456, 0, 1474, 1473, 0, 0,
	930, 930, 930, 0, 0, 0, 0, 0, 0, 970,
	0, 0, 0, 0, 0, 983, 0, 986, 0, 988,
	989, 990, 991, 992, 0, 0, 0, 1001, 0, 0,
	0, 1006, 930, 1027, 0, 0, 0, 1015, 0, 0,
	0, 0, 0, 930, 0, 0, 0, 799, 0, 0,
	2029, 0, 0, 1999, 0, 0, 0, 2011, 2012, 2013,
	930, 0, 0, 0, 0, 0, 930, 0, 0, 2554,
	0, 0, 2555, 1464, 0, 0, 2560, 1027, 2552, 0,
	0, 0, 0, 2557, 2561, 2556, 0, 2558, 0, 0,
	0, 2559, 2022, 2023, 2553, 0, 0, 0, 1050, 0,
	0, 2562, 0, 1477, 0, 0, 0, 0, 0, 0,
	799, 0, 0, 0, 799, 0, 0, 0, 0, 0,
	0, 0, 0, 4044, 0, 0, 0, 799, 0, 0,
	0, 0, 1027, 0, 0, 0, 0, 799, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 799, 799, 0,
	0, 799, 799, 799, 0, 799, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 799, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1462, 799,
	0, 799, 0, 1463, 0, 0, 0, 1471, 0, 0,
	0, 0, 0, 3518, 0, 0, 799, 0, 0, 0,
	0, 0, 0, 799, 0, 0, 0, 799, 799, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1050,
	0, 799, 0, 0, 0, 0, 799, 0, 1050, 799,
	799, 799, 799, 799, 799, 799, 799, 799, 799, 799,
	799, 799, 0, 799, 0, 0, 0, 0, 0, 4347,
	799, 799, 799, 1050, 0, 0, 0, 0, 799, 0,
	799, 4201, 0, 0, 0, 0, 0, 799, 1877, 0,
	0, 799, 0, 0, 0, 0, 799, 0, 1470, 0,
	799, 0, 0, 0, 0, 0, 0, 0, 799, 799,
	799, 0, 0, 0, 0, 0, 0, 799, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2018, 0, 1475,
	0, 799, 2029, 0, 799, 1999, 2008, 2009, 2010, 2011,
	2012, 2013, 0, 6116, 5612, 2002, 2003, 2004, 2005, 2006,
	2007, 2554, 0, 0, 2555, 0, 0, 0, 2560, 0,
	2552, 799, 799, 0, 799, 2557, 2561, 2556, 0, 2558,
	0, 0, 1461, 2559, 2022, 2023, 2553, 0, 0, 0,
	0, 0, 0, 2562, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 799, 0, 1027, 0, 1465,
	0, 0, 0, 1050, 799, 799, 0, 0, 0, 0,
	0, 0, 0, 0, 1050, 1050, 0, 0, 1050, 0,
	2029, 0, 0, 1999, 930, 0, 0, 2011, 2012, 2013,
	0, 0, 0, 0, 1467, 0, 799, 0, 0, 2554,
	1466, 0, 2555, 0, 0, 0, 2560, 0, 2552, 0,
	0, 0, 1050, 2557, 2561, 2556, 0, 2558, 0, 0,
	0, 2559, 2022, 2023, 2553, 0, 0, 0, 0, 0,
	0, 2562, 0, 0, 0, 0, 0, 0, 0, 930,
	0, 0, 0, 930, 930, 1468, 0, 1027, 0, 1027,
	1027, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 799, 799, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4385, 4387, 0,
	0, 0, 0, 1877, 1050, 1877, 0, 0, 0, 0,
	1469, 0, 0, 1462, 0, 0, 0, 0, 1463, 0,
	0, 1472, 1471, 0, 0, 799, 0, 1150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 751,
	0, 0, 0, 0, 0, 1027, 0, 0, 0, 0,
	0, 0, 0, 1877, 4346, 2018, 1474, 1473, 0, 0,
	0, 1181, 0, 0, 2008, 2009, 2010, 0, 0, 0,
	0, 6054, 0, 2002, 2003, 2004, 2005, 2006, 2007, 4429,
	0, 0, 0, 0, 3595, 0, 2029, 4432, 0, 1999,
	0, 930, 0, 2011, 2012, 2013, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2554, 0, 0, 2555, 0,
	3553, 0, 2560, 1470, 2552, 0, 1877, 0, 1050, 2557,
	2561, 2556, 0, 2558, 0, 0, 0, 2559, 2022, 2023,
	2553, 0, 849, 1464, 0, 0, 0, 2562, 0, 0,
	0, 0, 0, 930, 1475, 0, 0, 0, 930, 0,
	0, 0, 0, 0, 0, 0, 3612, 0, 0, 0,
	0, 0, 0, 1477, 0, 0, 1397, 0, 0, 0,
	0, 0, 3625, 0, 0, 0, 3628, 0, 3630, 0,
	0, 0, 0, 0, 0, 0, 0, 1461, 0, 930,
	0, 0, 4488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3648, 1877, 0, 0, 0, 0, 0, 0,
	0, 0, 3651, 0, 1465, 0, 0, 0, 0, 1439,
	0, 0, 1443, 0, 924, 0, 0, 0, 0, 0,
	0, 0, 3667, 0, 0, 0, 0, 0, 0, 0,
	3677, 0, 0, 799, 0, 0, 0, 3680, 0, 1467,
	0, 3683, 0, 0, 3686, 1466, 0, 3688, 0, 0,
	799, 799, 0, 1586, 0, 0, 799, 799, 3694, 0,
	0, 0, 0, 799, 799, 0, 924, 0, 1629, 0,
	799, 0, 924, 0, 0, 0, 0, 799, 0, 0,
	3708, 0, 0, 0, 3714, 0, 0, 0, 799, 0,
	1468, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3744, 0, 0, 4567, 0, 800, 0, 2018, 0, 0,
	0, 0, 4571, 0, 0, 0, 2008, 2009, 2010, 0,
	0, 0, 0, 799, 0, 2002, 2003, 2004, 2005, 2006,
	2007, 799, 0, 0, 799, 1469, 799, 4592, 0, 0,
	0, 0, 0, 0, 0, 0, 1472, 0, 0, 0,
	1050, 0, 0, 0, 0, 799, 0, 0, 0, 0,
	0, 0, 799, 0, 0, 0, 799, 799, 0, 0,
	799, 3808, 0, 0, 1259, 115, 799, 0, 0, 3594,
	0, 1474, 1473, 0, 0, 0, 0, 0, 799, 0,
	0, 0, 0, 0, 0, 2018, 0, 0, 0, 0,
	0, 0, 0, 3808, 2008, 2009, 2010, 0, 0, 0,
	0, 6044, 0, 2002, 2003, 2004, 2005, 2006, 2007, 0,
	0, 0, 0, 0, 0, 1050, 0, 0, 0, 0,
	1050, 0, 0, 0, 0, 0, 0, 751, 1050, 751,
	751, 751, 0, 0, 751, 751, 751, 0, 0, 751,
	0, 0, 0, 0, 0, 0, 0, 799, 1464, 0,
	0, 0, 0, 0, 0, 1845, 0, 0, 0, 0,
	0, 1853, 1854, 1877, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1477, 0,
	0, 0, 799, 0, 0, 0, 0, 0, 0, 930,
	932, 0, 0, 0, 0, 0, 0, 0, 115, 0,
	799, 932, 932, 0, 1027, 799, 4741, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 974, 932, 832, 834, 0, 974, 0, 974,
	0, 0, 0, 0, 115, 0, 932, 932, 0, 799,
	0, 0, 0, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 932, 932, 932, 0, 1050, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 930,
	0, 2018, 0, 930, 0, 0, 0, 0, 0, 0,
	2008, 2009, 2010, 0, 0, 0, 932, 5893, 0, 2002,
	2003, 2004, 2005, 2006, 2007, 0, 0, 2029, 0, 0,
	1999, 0, 930, 0, 2011, 2012, 2013, 0, 1050, 0,
	0, 0, 0, 0, 930, 0, 2554, 0, 0, 2555,
	0, 0, 0, 2560, 0, 2552, 0, 0, 849, 799,
	2557, 2561, 2556, 0, 2558, 0, 0, 0, 2559, 2022,
	2023, 2553, 0, 0, 0, 0, 0, 0, 2562, 2029,
	0, 0, 1999, 0, 0, 0, 2011, 2012, 2013, 1050,
	1050, 0, 0, 2610, 0, 0, 0, 0, 2554, 0,
	0, 2555, 0, 0, 0, 2560, 0, 2552, 0, 0,
	0, 0, 2557, 2561, 2556, 0, 2558, 0, 0, 930,
	2559, 2022, 2023, 2553, 2646, 0, 0, 0, 0, 0,
	2562, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 799, 0, 0, 0,
	0, 0, 0, 0, 799, 799, 799, 0, 0, 0,
	0, 0, 0, 2029, 0, 0, 1999, 0, 0, 0,
	2011, 2012, 2013, 0, 0, 0, 0, 0, 0, 0,
	799, 799, 0, 0, 799, 799, 799, 0, 0, 2560,
	0, 2552, 0, 0, 0, 0, 2557, 2561, 2556, 0,
	2558, 0, 0, 0, 2559, 2022, 2023, 2553, 0, 0,
	0, 799, 2773, 2029, 2562, 0, 1999, 0, 0, 0,
	2011, 2012, 2013, 0, 0, 0, 0, 0, 799, 799,
	0, 0, 2554, 0, 0, 2555, 0, 0, 1050, 2560,
	0, 2552, 1573, 799, 799, 0, 2557, 2561, 2556, 0,
	2558, 0, 1877, 0, 2559, 2022, 2023, 2553, 0, 2029,
	0, 0, 1999, 0, 2562, 0, 2011, 2012, 2013, 0,
	0, 0, 0, 0, 0, 0, 0, 799, 2554, 0,
	0, 2555, 1050, 0, 0, 2560, 0, 2552, 0, 2856,
	0, 0, 2557, 2561, 2556, 0, 2558, 0, 0, 0,
	2559, 2022, 2023, 2553, 1597, 0, 0, 0, 0, 0,
	2562, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 5569, 799, 0, 0, 0, 1050, 1575, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 799, 2029, 0, 0, 1999,
	0, 0, 0, 2011, 2012, 2013, 0, 0, 0, 0,
	2957, 0, 0, 2959, 0, 2554, 0, 0, 2555, 0,
	0, 0, 2560, 0, 2552, 0, 0, 0, 930, 2557,
	2561, 2556, 0, 2558, 0, 0, 0, 2559, 2022, 2023,
	2553, 0, 799, 0, 0, 0, 0, 2562, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1564, 930, 930, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5143, 0, 799, 932, 1574, 0,
	4373, 0, 799, 0, 0, 0, 0, 932, 799, 1462,
	932, 0, 0, 799, 1463, 799, 0, 932, 1471, 0,
	932, 0, 0, 0, 0, 0, 0, 0, 799, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1570, 4402,
	0, 0, 0, 0, 0, 0, 799, 0, 0, 0,
	0, 0, 0, 799, 3046, 0, 0, 3049, 0, 0,
	799, 1567, 0, 0, 0, 115, 834, 799, 0, 932,
	751, 751, 799, 0, 0, 751, 751, 0, 751, 751,
	1486, 0, 2018, 0, 0, 1572, 0, 0, 0, 930,
	0, 2008, 2009, 2010, 0, 0, 0, 0, 5879, 0,
	2002, 2003, 2004, 2005, 2006, 2007, 0, 0, 4439, 1470,
	0, 0, 0, 0, 0, 1563, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1050, 1598, 1578, 0, 0,
	5226, 0, 1050, 0, 2018, 0, 0, 0, 2655, 0,
	1475, 0, 0, 2008, 2009, 2010, 0, 0, 0, 4457,
	5856, 0, 2002, 2003, 2004, 2005, 2006, 2007, 0, 1595,
	0, 799, 123, 0, 1877, 1565, 4474, 0, 0, 0,
	0, 0, 0, 0, 799, 0, 1462, 0, 799, 1571,
	832, 1463, 5259, 1461, 0, 1471, 930, 799, 799, 0,
	0, 0, 0, 0, 0, 1568, 0, 0, 0, 0,
	0, 0, 1566, 0, 799, 0, 1576, 0, 0, 0,
	1465, 0, 0, 0, 0, 0, 0, 0, 2018, 0,
	0, 0, 1050, 0, 1050, 1050, 799, 2008, 2009, 2010,
	0, 0, 0, 5278, 5279, 0, 2002, 2003, 2004, 2005,
	2006, 2007, 0, 1569, 0, 1467, 0, 2771, 0, 0,
	0, 1466, 0, 1573, 799, 0, 0, 0, 0, 799,
	799, 799, 0, 799, 0, 0, 0, 0, 2018, 0,
	0, 0, 799, 1877, 0, 0, 1470, 2008, 2009, 2010,
	0, 0, 0, 0, 0, 0, 2002, 2003, 2004, 2005,
	2006, 2007, 0, 0, 0, 0, 1468, 0, 0, 0,
	1050, 799, 0, 1877, 0, 0, 0, 1475, 0, 0,
	0, 0, 0, 0, 2018, 1559, 0, 0, 0, 0,
	1877, 0, 0, 2008, 2009, 2010, 930, 0, 0, 0,
	5533, 799, 2002, 2003, 2004, 2005, 2006, 2007, 0, 0,
	0, 1469, 0, 0, 0, 0, 0, 0, 0, 1575,
	1461, 0, 1472, 0, 0, 0, 0, 932, 0, 0,
	0, 932, 932, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1465, 0, 0,
	0, 0, 4201, 0, 0, 3577, 0, 1474, 1473, 932,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 932, 0, 0, 0, 0, 0, 932, 0, 0,
	0, 2018, 1467, 0, 0, 799, 0, 0, 1466, 0,
	2008, 2009, 2010, 0, 0, 0, 0, 5507, 0, 2002,
	2003, 2004, 2005, 2006, 2007, 0, 0, 1564, 0, 0,
	0, 799, 0, 799, 799, 0, 0, 0, 0, 799,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1574,
	0, 0, 0, 1468, 1464, 0, 0, 0, 0, 0,
	974, 0, 115, 0, 974, 974, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 799, 932, 0, 0, 0,
	0, 0, 1879, 0, 1477, 0, 0, 0, 0, 1570,
	0, 0, 0, 0, 0, 0, 0, 0, 1469, 0,
	4726, 0, 0, 0, 0, 0, 0, 799, 0, 1472,
	0, 0, 1567, 0, 0, 0, 0, 0, 799, 0,
	0, 799, 0, 0, 0, 0, 0, 799, 799, 0,
	0, 0, 0, 0, 0, 0, 1572, 0, 0, 0,
	0, 0, 2770, 0, 1474, 1473, 0, 0, 0, 0,
	0, 930, 0, 0, 0, 2655, 0, 0, 0, 0,
	0, 0, 0, 0, 832, 0, 1563, 832, 832, 0,
	0, 0, 0, 0, 799, 0, 0, 1560, 1578, 930,
	0, 0, 0, 0, 0, 799, 0, 0, 0, 0,
	0, 2486, 0, 0, 0, 2488, 2489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1557, 0, 0, 123, 0, 0, 1565, 0, 0, 799,
	799, 1464, 0, 799, 0, 0, 0, 0, 0, 0,
	1571, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	930, 0, 0, 799, 0, 0, 1568, 0, 0, 0,
	0, 1477, 799, 1566, 799, 0, 0, 1576, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	932, 0, 0, 0, 0, 0, 1879, 0, 1879, 0,
	0, 0, 0, 0, 0, 0, 0, 4878, 0, 0,
	0, 0, 0, 0, 1569, 0, 0, 0, 0, 0,
	799, 932, 0, 0, 0, 0, 0, 932, 0, 0,
	0, 799, 115, 0, 0, 0, 5655, 0, 0, 0,
	0, 2029, 0, 799, 1999, 0, 0, 0, 2011, 2012,
	2013, 0, 0, 0, 0, 0, 0, 0, 0, 4928,
	2554, 0, 0, 2555, 4933, 0, 0, 2560, 799, 2552,
	0, 0, 0, 0, 2557, 2561, 2556, 0, 2558, 0,
	0, 799, 2559, 2022, 2023, 2553, 0, 0, 0, 1050,
	0, 0, 2562, 0, 0, 0, 0, 0, 0, 0,
	799, 0, 1877, 0, 0, 3808, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1766, 0, 1766, 1766,
	0, 0, 0, 0, 2029, 0, 0, 1999, 0, 0,
	0, 2011, 2012, 2013, 0, 0, 0, 0, 799, 799,
	0, 0, 1462, 2554, 0, 0, 2555, 1463, 0, 0,
	2560, 1471, 2552, 1877, 799, 0, 0, 2557, 2561, 2556,
	3415, 2558, 0, 0, 0, 2559, 2022, 2023, 2553, 0,
	799, 799, 0, 0, 0, 2562, 0, 0, 3429, 0,
	0, 1877, 0, 0, 0, 0, 0, 0, 0, 0,
	3446, 0, 2029, 0, 5788, 1999, 0, 0, 3457, 2011,
	2012, 2013, 0, 0, 0, 295, 0, 0, 0, 0,
	0, 2554, 932, 2765, 2555, 0, 0, 0, 2560, 0,
	2552, 0, 0, 0, 0, 2557, 2561, 2556, 0, 2558,
	3502, 3503, 3504, 2559, 2022, 2023, 2553, 0, 3508, 0,
	3509, 0, 1470, 2562, 0, 0, 0, 0, 0, 3519,
	0, 0, 0, 0, 0, 0, 0, 3530, 0, 3534,
	3535, 3536, 3537, 0, 0, 3544, 0, 3546, 3549, 0,
	0, 0, 0, 1475, 0, 0, 0, 0, 0, 0,
	0, 3572, 3573, 0, 0, 0, 3578, 3579, 0, 3580,
	0, 0, 0, 0, 0, 0, 0, 932, 0, 932,
	932, 932, 932, 0, 3590, 3591, 3592, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1461, 0, 0, 3610,
	3611, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3623, 3624, 0, 0, 3626,
	3627, 0, 3629, 1465, 0, 0, 0, 3631, 974, 974,
	974, 0, 0, 3636, 3637, 0, 0, 3639, 0, 0,
	3643, 0, 3644, 0, 0, 0, 3647, 0, 3649, 0,
	0, 0, 0, 932, 3650, 0, 0, 0, 1467, 3387,
	0, 0, 0, 0, 1466, 0, 0, 1573, 0, 0,
	0, 0, 0, 3661, 3662, 3663, 0, 0, 0, 0,
	931, 0, 3675, 0, 3676, 0, 0, 3679, 0, 115,
	0, 931, 931, 3681, 0, 3682, 0, 0, 3685, 0,
	3687, 0, 0, 0, 0, 3689, 0, 0, 0, 1468,
	119, 0, 0, 931, 118, 120, 0, 0, 0, 0,
	0, 115, 0, 0, 166, 3704, 931, 931, 0, 2827,
	0, 0, 3707, 0, 0, 0, 3709, 0, 3713, 0,
	0, 0, 931, 931, 931, 3730, 3731, 0, 0, 0,
	0, 163, 0, 3740, 1485, 164, 0, 0, 3748, 0,
	0, 0, 0, 1575, 0, 1472, 0, 0, 0, 3761,
	1462, 0, 0, 0, 168, 1463, 931, 0, 0, 1471,
	0, 122, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 155, 2764, 117,
	1474, 1473, 0, 0, 0, 0, 0, 161, 5254, 0,
	0, 0, 0, 0, 0, 0, 2018, 0, 0, 0,
	5264, 2029, 0, 0, 1999, 2008, 2009, 2010, 2011, 2012,
	2013, 0, 5485, 0, 2002, 2003, 2004, 2005, 2006, 2007,
	2554, 1510, 0, 2555, 0, 0, 0, 2560, 0, 2552,
	0, 1564, 0, 0, 2557, 2561, 2556, 0, 2558, 0,
	0, 0, 2559, 2022, 2023, 2553, 0, 0, 0, 0,
	1470, 0, 2562, 1574, 0, 0, 0, 1464, 0, 124,
	0, 0, 0, 1879, 0, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 0, 3808, 0, 0, 0, 0,
	113, 1475, 156, 0, 0, 0, 0, 1477, 139, 2018,
	144, 137, 0, 1570, 153, 0, 126, 3867, 2008, 2009,
	2010, 0, 0, 0, 0, 5463, 0, 2002, 2003, 2004,
	2005, 2006, 2007, 0, 0, 0, 1567, 146, 141, 0,
	0, 0, 0, 0, 1461, 0, 0, 140, 0, 0,
	3198, 0, 0, 6121, 112, 0, 0, 3388, 0, 0,
	1572, 145, 133, 0, 0, 0, 0, 0, 142, 0,
	0, 1465, 0, 0, 0, 0, 0, 2018, 131, 0,
	0, 0, 0, 0, 0, 0, 2008, 2009, 2010, 0,
	0, 0, 0, 5323, 0, 2002, 2003, 2004, 2005, 2006,
	2007, 2029, 1578, 0, 1999, 0, 1467, 0, 2011, 2012,
	2013, 0, 1466, 0, 0, 0, 147, 150, 0, 0,
	2554, 151, 0, 2555, 0, 0, 0, 2560, 0, 2552,
	0, 0, 0, 143, 2557, 2561, 2556, 123, 2558, 0,
	1565, 0, 2559, 2022, 2023, 2553, 149, 0, 0, 0,
	0, 0, 2562, 0, 1571, 0, 0, 1468, 0, 0,
	0, 0, 0, 0, 0, 0, 130, 0, 0, 0,
	1568, 0, 0, 0, 0, 0, 0, 1566, 0, 0,
	0, 1576, 121, 138, 0, 129, 0, 0, 0, 123,
	0, 0, 0, 132, 3389, 127, 0, 0, 0, 0,
	2029, 128, 1469, 1999, 0, 0, 154, 2011, 2012, 2013,
	0, 0, 0, 1472, 0, 0, 136, 0, 1569, 2554,
	3390, 0, 2555, 0, 125, 0, 2560, 0, 2552, 0,
	0, 0, 0, 2557, 2561, 2556, 0, 2558, 0, 0,
	5105, 2559, 2022, 2023, 2553, 0, 1509, 0, 1474, 1473,
	152, 2562, 0, 0, 0, 0, 0, 0, 0, 0,
	148, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4125,
	0, 4128, 0, 3808, 3808, 0, 167, 931, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 931, 0, 160,
	931, 0, 0, 0, 0, 1464, 0, 931, 0, 0,
	931, 0, 0, 0, 0, 0, 0, 0, 0, 4165,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4207, 0, 0,
	0, 0, 0, 0, 0, 4215, 0, 4215, 0, 931,
	0, 0, 0, 4224, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2018, 0, 0, 0,
	0, 0, 0, 0, 0, 2008, 2009, 2010, 0, 0,
	0, 0, 5306, 0, 2002, 2003, 2004, 2005, 2006, 2007,
	2029, 0, 4292, 1999, 0, 0, 0, 2011, 2012, 2013,
	0, 0, 0, 0, 0, 4309, 4310, 4311, 4312, 2554,
	0, 0, 2555, 0, 0, 0, 2560, 0, 2552, 0,
	0, 0, 0, 2557, 2561, 2556, 0, 2558, 0, 0,
	0, 2559, 2022, 2023, 2553, 0, 0, 0, 0, 0,
	0, 2562, 0, 0, 0, 0, 3209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4341, 4342, 4343, 0, 0, 4348, 4349, 4350, 4351,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3301,
	0, 0, 0, 0, 0, 0, 0, 0, 5067, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1879, 4372, 0, 3198, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 834, 0, 0,
	0, 0, 0, 0, 0, 0, 2018, 3343, 3343, 0,
	0, 0, 0, 0, 0, 2008, 2009, 2010, 1879, 0,
	0, 0, 5297, 4401, 2002, 2003, 2004, 2005, 2006, 2007,
	0, 4403, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1879, 0, 1271, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 931, 0, 0,
	0, 931, 931, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 932, 0, 0, 0,
	1879, 0, 0, 0, 0, 0, 0, 0, 0, 931,
	0, 0, 0, 0, 0, 2018, 0, 0, 0, 0,
	0, 931, 0, 0, 2008, 2009, 2010, 931, 0, 0,
	0, 0, 4449, 2002, 2003, 2004, 2005, 2006, 2007, 0,
	0, 0, 932, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 932, 0,
	0, 0, 932, 0, 932, 0, 0, 0, 0, 0,
	0, 932, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 932, 0,
	4481, 4482, 0, 0, 1368, 0, 0, 4486, 932, 0,
	0, 0, 0, 0, 0, 0, 931, 0, 0, 0,
	932, 932, 1878, 0, 0, 783, 0, 1879, 932, 0,
	792, 0, 0, 0, 0, 0, 932, 0, 0, 0,
	0, 0, 0, 932, 0, 0, 0, 932, 0, 0,
	932, 0, 0, 932, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 932, 0, 0, 0, 0, 0,
	0, 0, 932, 0, 0, 0, 0, 0, 932, 0,
	0, 0, 0, 0, 0, 2029, 932, 0, 1999, 0,
	932, 0, 2011, 2012, 2013, 0, 0, 0, 0, 0,
	0, 0, 0, 1879, 2554, 0, 932, 2555, 0, 0,
	0, 2560, 0, 2552, 974, 0, 974, 974, 2557, 2561,
	2556, 0, 2558, 0, 0, 0, 2559, 2022, 2023, 2553,
	0, 0, 0, 0, 0, 3808, 2562, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1089, 1090, 1092, 1096, 0, 0, 0, 0,
	932, 0, 0, 0, 0, 2018, 0, 932, 0, 0,
	2029, 0, 0, 1999, 2008, 2009, 2010, 2011, 2012, 2013,
	0, 0, 0, 2002, 2003, 2004, 2005, 2006, 2007, 2554,
	0, 0, 2555, 1879, 0, 0, 2560, 0, 2552, 932,
	931, 0, 0, 2557, 2561, 2556, 1878, 2558, 1878, 0,
	0, 2559, 2022, 2023, 2553, 0, 0, 0, 0, 0,
	0, 2562, 0, 5042, 0, 0, 0, 0, 0, 0,
	0, 931, 0, 2029, 0, 0, 1999, 931, 0, 0,
	2011, 2012, 2013, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2554, 0, 0, 2555, 0, 0, 0, 2560,
	0, 2552, 974, 0, 974, 974, 2557, 2561, 2556, 4699,
	2558, 0, 0, 0, 2559, 2022, 2023, 2553, 2029, 0,
	0, 1999, 0, 0, 2562, 2011, 2012, 2013, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2554, 0, 0,
	2555, 4215, 0, 0, 2560, 0, 2552, 0, 4727, 5040,
	0, 2557, 2561, 2556, 0, 2558, 0, 0, 0, 2559,
	2022, 2023, 2553, 0, 0, 0, 0, 0, 2029, 2562,
	0, 1999, 0, 0, 0, 2011, 2012, 2013, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2554, 0, 0,
	2555, 0, 5041, 0, 2560, 0, 2552, 2486, 0, 0,
	0, 2557, 2561, 2556, 0, 2558, 0, 0, 0, 2559,
	2022, 2023, 2553, 0, 0, 0, 0, 3343, 0, 2562,
	0, 5036, 4215, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4796, 4797,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3198, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 4816, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 931, 0, 2486, 3944, 0, 0, 0, 0,
	0, 0, 4846, 0, 0, 0, 0, 0, 0, 1879,
	0, 4848, 0, 0, 0, 1879, 0, 0, 0, 0,
	4850, 4851, 4852, 4853, 0, 0, 4856, 4857, 0, 0,
	4860, 4861, 4862, 4863, 4864, 4865, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4877, 0, 0, 0, 0, 0, 0, 0, 4881, 0,
	4882, 0, 0, 0, 4884, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 931, 0, 931,
	931, 931, 931, 4912, 0, 0, 0, 0, 4917, 4918,
	0, 0, 0, 4919, 4920, 0, 0, 0, 0, 0,
	4924, 4925, 4926, 4927, 0, 4929, 4930, 4931, 4932, 0,
	0, 0, 0, 4939, 932, 0, 0, 0, 1104, 0,
	1107, 0, 0, 0, 0, 0, 0, 1109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4091,
	2018, 4095, 0, 0, 0, 0, 0, 0, 0, 2008,
	2009, 2010, 1879, 931, 0, 0, 5044, 0, 2002, 2003,
	2004, 2005, 2006, 2007, 0, 0, 0, 0, 0, 932,
	932, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 932,
	932, 0, 0, 0, 0, 0, 0, 0, 0, 932,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 792, 0, 0, 1096, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2018, 0, 0, 0, 0,
	0, 0, 0, 0, 2008, 2009, 2010, 0, 0, 0,
	0, 0, 0, 2002, 2003, 2004, 2005, 2006, 2007, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1879,
	1879, 1879, 0, 0, 0, 0, 0, 0, 2018, 0,
	0, 0, 0, 0, 0, 0, 0, 2008, 2009, 2010,
	0, 259, 0, 0, 0, 0, 2002, 2003, 2004, 2005,
	2006, 2007, 0, 0, 0, 0, 0, 0, 0, 262,
	0, 0, 0, 0, 0, 751, 0, 0, 0, 0,
	0, 0, 0, 2018, 0, 0, 0, 0, 0, 0,
	0, 0, 2008, 2009, 2010, 0, 0, 0, 0, 0,
	0, 2002, 2003, 2004, 2005, 2006, 2007, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1878, 0, 0, 932, 0, 0, 0,
	0, 1242, 1242, 2018, 0, 0, 0, 0, 0, 932,
	0, 0, 2008, 2009, 2010, 0, 0, 0, 0, 0,
	0, 2002, 2003, 2004, 2005, 2006, 2007, 0, 0, 0,
	2029, 0, 0, 1999, 0, 932, 0, 2011, 2012, 2013,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 2554,
	0, 0, 2555, 3095, 0, 0, 2560, 0, 2552, 0,
	5176, 0, 0, 2557, 2561, 2556, 0, 2558, 0, 0,
	0, 2559, 2022, 2023, 2553, 0, 0, 0, 0, 264,
	0, 2562, 0, 932, 0, 0, 0, 0, 0, 0,
	265, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1205, 932, 932, 932, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3094, 1096, 0, 1737, 0,
	1096, 1096, 269, 1752, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 0, 932, 0, 0, 0, 263, 0,
	3096, 0, 0, 0, 0, 932, 0, 0, 0, 974,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 5233,
	0, 1203, 932, 5235, 0, 0, 1096, 0, 932, 0,
	0, 5238, 5239, 5240, 5241, 5242, 3097, 0, 5245, 5246,
	5247, 5248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 5252, 5253, 0, 5255, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5263, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1836,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 249, 3098,
	115, 272, 0, 0, 0, 1096, 0, 0, 0, 0,
	0, 0, 5280, 5281, 5282, 0, 0, 0, 0, 0,
	1206, 0, 0, 3099, 0, 0, 5286, 0, 273, 0,
	0, 0, 0, 260, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 266, 0, 0, 0, 0, 1207, 0, 0,
	0, 0, 0, 1208, 0, 0, 0, 0, 267, 0,
	0, 0, 2496, 2498, 2499, 0, 0, 0, 3093, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 261, 0, 0, 0, 5311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2486, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3091, 0,
	1879, 0, 0, 0, 0, 0, 0, 0, 1869, 0,
	0, 5353, 1959, 0, 0, 0, 0, 0, 0, 0,
	1975, 0, 1982, 0, 0, 0, 0, 2029, 0, 1993,
	1999, 0, 0, 0, 2011, 2012, 2013, 0, 0, 0,
	2475, 2476, 2477, 2478, 2479, 0, 2554, 0, 0, 2555,
	0, 2484, 0, 2560, 0, 2552, 0, 0, 5417, 0,
	2557, 2561, 2556, 5424, 2558, 0, 0, 0, 2559, 2022,
	2023, 2553, 0, 0, 0, 2502, 0, 0, 2562, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4215, 0,
	0, 0, 0, 0, 0, 115, 0, 0, 2652, 0,
	115, 115, 5468, 0, 0, 0, 0, 5471, 0, 0,
	0, 0, 3343, 5477, 2679, 3343, 0, 0, 0, 2029,
	0, 0, 1999, 0, 0, 0, 2011, 2012, 2013, 0,
	0, 0, 0, 0, 0, 0, 932, 0, 2554, 0,
	0, 2555, 0, 0, 0, 2560, 0, 2552, 0, 0,
	0, 0, 2557, 2561, 2556, 0, 2558, 0, 0, 0,
	2559, 2022, 2023, 2553, 115, 2018, 5513, 5514, 0, 0,
	2562, 0, 5519, 0, 2008, 2009, 2010, 0, 5521, 0,
	0, 5027, 0, 2002, 2003, 2004, 2005, 2006, 2007, 0,
	0, 932, 0, 0, 0, 932, 932, 0, 0, 0,
	0, 0, 5534, 5535, 0, 2029, 0, 0, 1999, 0,
	0, 0, 2011, 2012, 2013, 0, 0, 1247, 0, 0,
	0, 0, 0, 1878, 2554, 0, 0, 2555, 0, 0,
	0, 2560, 0, 2552, 0, 1879, 0, 1879, 2557, 2561,
	2556, 0, 2558, 0, 0, 0, 2559, 2022, 2023, 2553,
	0, 0, 0, 0, 0, 0, 2562, 0, 1878, 0,
	2029, 0, 0, 1999, 0, 0, 0, 2011, 2012, 2013,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2554,
	0, 2878, 2555, 3343, 2883, 1879, 2560, 0, 2552, 0,
	0, 0, 1878, 2557, 2561, 2556, 0, 2558, 0, 0,
	0, 2559, 2022, 2023, 2553, 0, 0, 0, 0, 0,
	0, 2562, 0, 0, 0, 0, 0, 0, 0, 0,
	1288, 0, 0, 932, 0, 2029, 931, 0, 1999, 0,
	1878, 0, 2011, 2012, 2013, 0, 0, 4626, 0, 0,
	0, 0, 0, 0, 2554, 0, 0, 2555, 1879, 0,
	0, 2560, 0, 2552, 0, 0, 0, 0, 2557, 2561,
	2556, 0, 2558, 0, 0, 0, 2559, 2022, 2023, 2553,
	0, 0, 931, 0, 0, 932, 2562, 0, 0, 0,
	932, 0, 0, 0, 0, 0, 0, 0, 931, 4215,
	0, 0, 931, 0, 931, 0, 0, 0, 0, 0,
	0, 931, 0, 0, 0, 0, 0, 5690, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 931, 2995,
	0, 932, 0, 0, 0, 0, 0, 0, 931, 0,
	0, 0, 0, 0, 0, 1879, 0, 0, 0, 0,
	931, 931, 0, 0, 0, 0, 0, 1878, 931, 0,
	0, 0, 0, 0, 0, 5724, 931, 0, 5727, 0,
	0, 0, 0, 931, 0, 0, 0, 931, 0, 0,
	931, 0, 0, 931, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 931, 0, 0, 0, 0, 0,
	0, 0, 931, 0, 0, 0, 0, 0, 931, 0,
	0, 0, 0, 0, 0, 0, 931, 0, 0, 0,
	931, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1878, 0, 0, 931, 0, 0, 0,
	0, 0, 2018, 0, 0, 0, 0, 0, 0, 0,
	0, 2008, 2009, 2010, 0, 0, 0, 0, 5019, 0,
	2002, 2003, 2004, 2005, 2006, 2007, 0, 0, 0, 0,
	0, 2029, 0, 0, 1999, 0, 0, 0, 2011, 2012,
	2013, 0, 0, 0, 1028, 1028, 0, 0, 0, 0,
	2554, 0, 0, 2555, 0, 0, 0, 2560, 0, 2552,
	931, 0, 0, 0, 2557, 2561, 2556, 931, 2558, 0,
	0, 0, 2559, 2022, 2023, 2553, 0, 0, 0, 0,
	0, 0, 2562, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1878, 2018, 0, 0, 0, 5862, 931,
	0, 0, 0, 2008, 2009, 2010, 0, 0, 0, 0,
	4883, 0, 2002, 2003, 2004, 2005, 2006, 2007, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5882, 5883, 0,
	1869, 1869, 1869, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3343, 3343, 0,
	0, 3343, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2018, 0, 0, 0, 0, 1879, 0, 0, 0, 2008,
	2009, 2010, 0, 0, 0, 0, 4809, 0, 2002, 2003,
	2004, 2005, 2006, 2007, 0, 0, 0, 0, 0, 0,
	0, 932, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2018, 0, 0, 0, 0,
	0, 0, 0, 0, 2008, 2009, 2010, 0, 0, 2475,
	2476, 4785, 5978, 2002, 2003, 2004, 2005, 2006, 2007, 0,
	0, 0, 0, 1242, 0, 5988, 0, 3156, 3157, 3158,
	3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168,
	3169, 3170, 3171, 0, 3177, 0, 0, 0, 0, 6004,
	0, 932, 0, 0, 0, 932, 0, 0, 0, 0,
	2018, 0, 0, 0, 0, 0, 0, 0, 0, 2008,
	2009, 2010, 0, 0, 0, 0, 0, 0, 2002, 2003,
	2004, 2005, 2006, 2007, 932, 2029, 0, 0, 1999, 0,
	0, 0, 2011, 2012, 2013, 0, 932, 0, 0, 0,
	0, 0, 0, 0, 2554, 0, 0, 2555, 0, 1878,
	0, 2560, 0, 2552, 0, 1878, 0, 0, 2557, 2561,
	2556, 0, 2558, 0, 0, 0, 2559, 2022, 2023, 2553,
	0, 0, 0, 0, 0, 0, 2562, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 6063, 2029, 0, 0, 1999, 0,
	0, 0, 2011, 2012, 2013, 0, 0, 0, 0, 0,
	0, 932, 0, 0, 2554, 0, 0, 2555, 0, 0,
	4553, 2560, 0, 2552, 0, 0, 0, 0, 2557, 2561,
	2556, 0, 2558, 0, 0, 0, 2559, 2022, 2023, 2553,
	0, 0, 2029, 0, 0, 1999, 2562, 0, 0, 2011,
	2012, 2013, 0, 0, 931, 0, 0, 0, 0, 0,
	0, 2554, 0, 0, 2555, 0, 0, 0, 2560, 796,
	2552, 0, 0, 0, 0, 2557, 2561, 2556, 0, 2558,
	0, 0, 0, 2559, 2022, 2023, 2553, 0, 0, 0,
	0, 0, 1878, 2562, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 931,
	931, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 931,
	931, 0, 0, 0, 0, 0, 2018, 0, 0, 931,
	0, 0, 0, 0, 1879, 2008, 2009, 2010, 0, 0,
	0, 0, 4566, 0, 2002, 2003, 2004, 2005, 2006, 2007,
	0, 2029, 0, 0, 1999, 0, 0, 0, 2011, 2012,
	2013, 0, 0, 4034, 0, 0, 6184, 0, 0, 0,
	2554, 0, 0, 2555, 0, 0, 0, 2560, 0, 2552,
	3343, 0, 0, 0, 2557, 2561, 2556, 0, 2558, 0,
	0, 0, 2559, 2022, 2023, 2553, 0, 0, 0, 0,
	0, 0, 2562, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 974, 0, 0, 0, 1878,
	1878, 1878, 2029, 0, 0, 1999, 0, 0, 0, 2011,
	2012, 2013, 0, 0, 0, 115, 0, 0, 0, 0,
	3254, 2554, 0, 0, 2555, 0, 0, 0, 2560, 115,
	2552, 0, 0, 0, 0, 2557, 2561, 2556, 0, 2558,
	0, 0, 0, 2559, 2022, 2023, 2553, 0, 0, 0,
	932, 0, 0, 2562, 115, 4024, 0, 0, 0, 0,
	0, 0, 0, 0, 974, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 932,
	932, 0, 0, 1029, 1029, 0, 931, 0, 0, 0,
	0, 0, 0, 0, 1028, 0, 0, 0, 0, 931,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1869, 0, 0, 931, 0, 0, 0, 0,
	0, 0, 3236, 3238, 0, 0, 0, 0, 0, 3244,
	0, 3255, 3258, 0, 3269, 3270, 3275, 3278, 0, 0,
	0, 0, 0, 3286, 0, 0, 0, 3290, 3296, 3238,
	3238, 3303, 3238, 0, 3238, 3238, 3238, 0, 0, 0,
	0, 0, 1028, 931, 0, 3318, 3500, 0, 0, 3169,
	3170, 3171, 3177, 0, 0, 0, 0, 0, 0, 0,
	2018, 932, 931, 931, 931, 0, 0, 0, 0, 2008,
	2009, 2010, 0, 0, 0, 0, 0, 0, 2002, 2003,
	2004, 2005, 2006, 2007, 0, 0, 0, 0, 0, 115,
	0, 0, 0, 0, 931, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 931, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 931, 0, 0, 0, 0, 0, 931, 0,
	2018, 0, 1028, 0, 0, 0, 1879, 0, 0, 2008,
	2009, 2010, 0, 0, 0, 0, 4547, 0, 2002, 2003,
	2004, 2005, 2006, 2007, 0, 0, 0, 0, 932, 0,
	2014, 0, 0, 115, 0, 0, 0, 0, 0, 0,
	1096, 0, 0, 0, 0, 0, 0, 2018, 0, 0,
	0, 0, 0, 0, 0, 0, 2008, 2009, 2010, 0,
	0, 0, 0, 4052, 1090, 2002, 2003, 2004, 2005, 2006,
	2007, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1028, 1028, 0, 0, 0, 0, 0, 3343,
	0, 0, 0, 0, 1090, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1090, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1879, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1879, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2014, 3732, 0, 0,
	3736, 0, 1879, 0, 0, 2486, 2018, 0, 932, 0,
	0, 0, 0, 0, 0, 2008, 2009, 2010, 3641, 0,
	0, 0, 0, 0, 2002, 2003, 2004, 2005, 2006, 2007,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1878, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1096,
	0, 0, 0, 0, 0, 0, 0, 2018, 0, 0,
	0, 0, 0, 0, 0, 0, 2008, 2009, 2010, 0,
	0, 0, 0, 0, 0, 2002, 2003, 2004, 2005, 2006,
	2007, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1028, 0, 0, 0, 0, 0, 0, 1028, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3846, 3846,
	3846, 3846, 3846, 3846, 3846, 3846, 2029, 0, 0, 1999,
	3846, 3846, 0, 2011, 2012, 2013, 0, 0, 4019, 0,
	0, 0, 0, 0, 0, 2554, 931, 0, 2555, 0,
	0, 0, 2560, 0, 2552, 0, 0, 0, 0, 2557,
	2561, 2556, 0, 2558, 0, 0, 0, 2559, 2022, 2023,
	2553, 0, 0, 0, 0, 0, 0, 2562, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 974,
	974, 0, 0, 0, 0, 0, 1028, 0, 0, 0,
	0, 931, 0, 0, 0, 931, 931, 0, 0, 0,
	0, 0, 0, 932, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1028, 0, 0, 0,
	2029, 0, 0, 1999, 0, 0, 974, 2011, 2012, 2013,
	0, 932, 3985, 0, 0, 1878, 0, 1878, 0, 2554,
	0, 0, 2555, 0, 0, 0, 2560, 0, 2552, 0,
	115, 0, 0, 2557, 2561, 2556, 0, 2558, 0, 0,
	0, 2559, 2022, 2023, 2553, 0, 0, 1869, 0, 0,
	0, 2562, 3882, 3883, 0, 3885, 0, 0, 0, 1982,
	0, 0, 0, 1028, 0, 1878, 0, 2484, 0, 0,
	0, 0, 932, 0, 0, 0, 0, 0, 0, 1993,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1029, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 931, 0, 2029, 0, 0, 1999, 0,
	0, 0, 2011, 2012, 2013, 0, 0, 3915, 3916, 0,
	0, 0, 0, 3922, 2554, 0, 0, 2555, 1878, 0,
	0, 2560, 0, 2552, 0, 0, 0, 0, 2557, 2561,
	2556, 0, 2558, 0, 0, 0, 2559, 2022, 2023, 2553,
	1028, 0, 1028, 0, 0, 931, 2562, 0, 0, 3951,
	931, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1029, 0, 3963, 0, 4112, 0, 4112, 0, 0,
	0, 0, 0, 0, 3980, 0, 0, 0, 0, 1028,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 931, 4144, 1096, 0, 0, 0, 0, 1353, 0,
	0, 0, 0, 0, 1879, 1878, 3275, 3275, 3275, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 4035, 0, 0, 0, 0, 2014, 0, 0,
	0, 0, 4193, 0, 0, 0, 0, 0, 0, 4204,
	0, 0, 0, 0, 4057, 0, 0, 0, 1096, 1096,
	0, 1029, 0, 2029, 0, 0, 1999, 0, 0, 0,
	2011, 2012, 2013, 0, 0, 1879, 0, 0, 0, 4071,
	0, 4231, 2554, 0, 4075, 2555, 0, 0, 0, 2560,
	0, 2552, 974, 974, 0, 0, 2557, 2561, 2556, 0,
	2558, 0, 0, 1879, 2559, 2022, 2023, 2553, 0, 0,
	0, 0, 0, 0, 2562, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2014, 1028, 0,
	1028, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1029, 1029, 2014, 0, 0, 0, 0, 0, 0,
	2014, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2014, 0, 1871, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2018, 0, 0, 0, 0, 0, 0, 0, 0,
	2008, 2009, 2010, 0, 0, 0, 0, 0, 0, 2002,
	2003, 2004, 2005, 2006, 2007, 0, 0, 0, 0, 0,
	0, 0, 0, 4250, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1042, 1042, 0, 4284, 3992, 0, 0, 0,
	1028, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1878, 0, 0, 0, 1352,
	0, 0, 0, 0, 0, 2018, 0, 0, 0, 0,
	0, 0, 0, 0, 2008, 2009, 2010, 0, 0, 0,
	0, 931, 0, 2002, 2003, 2004, 2005, 2006, 2007, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4420, 0,
	1029, 0, 0, 0, 0, 0, 0, 1029, 0, 0,
	0, 0, 1096, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2029, 0, 0, 1999, 0, 0,
	0, 2011, 2012, 2013, 0, 0, 0, 0, 0, 0,
	4367, 0, 0, 2554, 0, 0, 2555, 0, 0, 0,
	2560, 931, 2552, 0, 0, 931, 0, 2557, 2561, 2556,
	2018, 2558, 0, 0, 0, 2559, 2022, 2023, 2553, 2008,
	2009, 2010, 0, 0, 0, 2562, 0, 0, 2002, 2003,
	2004, 2005, 2006, 2007, 931, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1029, 931, 0, 0, 0,
	0, 0, 0, 0, 2029, 0, 0, 1999, 0, 0,
	0, 2011, 2012, 2013, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2554, 0, 2787, 2555, 0, 3846, 0,
	2560, 0, 2552, 0, 0, 0, 0, 2557, 2561, 2556,
	0, 2558, 0, 0, 0, 2559, 2022, 2023, 2553, 0,
	0, 0, 0, 0, 0, 2562, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 931, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1029, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1041, 1041, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3979, 2018, 0,
	0, 0, 0, 0, 4550, 0, 0, 2008, 2009, 2010,
	0, 0, 0, 0, 0, 0, 2002, 2003, 2004, 2005,
	2006, 2007, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1869, 0, 0, 0, 1869, 0, 0, 0, 1029,
	0, 1029, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2014, 2014, 2014, 2014, 2014, 4516, 0,
	0, 0, 2014, 0, 1878, 3387, 0, 0, 4524, 4525,
	0, 0, 4528, 1573, 0, 0, 4531, 0, 1029, 0,
	2014, 0, 0, 0, 0, 0, 0, 4536, 0, 0,
	0, 0, 0, 0, 0, 0, 3265, 0, 0, 0,
	4542, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2029, 0, 0, 1999, 0, 0, 4552, 2011, 2012,
	2013, 0, 0, 0, 4557, 0, 0, 0, 3238, 3238,
	2554, 0, 0, 2555, 0, 2827, 0, 2560, 0, 2552,
	0, 0, 4568, 0, 2557, 2561, 2556, 4570, 2558, 0,
	0, 0, 2559, 2022, 2023, 2553, 0, 0, 0, 0,
	0, 0, 2562, 0, 0, 0, 0, 0, 0, 1575,
	0, 4589, 4590, 4591, 0, 0, 0, 0, 0, 0,
	0, 4597, 0, 0, 0, 0, 0, 0, 3286, 4193,
	0, 0, 0, 0, 0, 0, 0, 3236, 0, 0,
	931, 3238, 0, 0, 0, 0, 0, 0, 0, 4623,
	4624, 4625, 0, 0, 0, 0, 0, 1029, 1242, 1029,
	0, 0, 0, 0, 0, 1871, 1871, 1871, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 931,
	931, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1564, 4761, 4762,
	0, 4764, 0, 3238, 0, 4668, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1574,
	0, 0, 0, 0, 0, 1028, 0, 4795, 0, 2018,
	0, 0, 0, 0, 1028, 4193, 4703, 0, 2008, 2009,
	2010, 0, 0, 3109, 0, 4708, 4709, 2002, 2003, 2004,
	2005, 2006, 2007, 0, 0, 0, 0, 0, 0, 1570,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1567, 0, 0, 0, 0, 0, 0, 0,
	0, 931, 0, 0, 0, 0, 0, 0, 0, 1029,
	0, 1028, 1042, 3388, 0, 0, 1572, 0, 0, 2018,
	0, 0, 0, 0, 0, 0, 0, 0, 2008, 2009,
	2010, 0, 0, 0, 1028, 3213, 0, 2002, 2003, 2004,
	2005, 2006, 2007, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1578, 4908,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1878, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1042, 0, 0, 123, 4940, 0, 3383, 0, 931, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1571, 1028, 1028, 0, 0, 0, 0, 0, 0, 0,
	1028, 0, 0, 0, 0, 0, 1568, 0, 4963, 0,
	0, 0, 0, 1566, 0, 0, 0, 1576, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3389, 0, 0, 0, 0, 0, 0, 0, 3846, 0,
	3846, 0, 0, 0, 4985, 4985, 4985, 4985, 4985, 4985,
	4985, 0, 4985, 4985, 1569, 0, 3390, 0, 0, 0,
	1042, 0, 0, 0, 0, 1878, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1355, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1878, 0, 0, 0, 0,
	0, 0, 0, 0, 5022, 0, 0, 0, 0, 0,
	0, 0, 1878, 0, 0, 1026, 1026, 0, 931, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1042, 1042, 0, 0, 0, 0, 2018, 0, 1028, 0,
	0, 0, 0, 0, 1028, 2008, 2009, 2010, 0, 0,
	0, 0, 0, 0, 2002, 2003, 2004, 2005, 2006, 2007,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1041, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4999, 0, 0, 1354, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1028, 5008, 5009, 0, 0, 0, 0, 5013, 5014, 0,
	0, 0, 0, 0, 5017, 5018, 0, 0, 0, 0,
	0, 5021, 0, 0, 0, 0, 0, 0, 5023, 1462,
	1495, 0, 0, 0, 1463, 0, 0, 0, 1471, 1993,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 5141,
	0, 1041, 0, 0, 2014, 2014, 2014, 2014, 2014, 2014,
	2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014,
	0, 0, 0, 0, 0, 2014, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 5056, 0, 5059, 0, 0,
	0, 5169, 3265, 3265, 1028, 1028, 0, 1497, 0, 0,
	3589, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5078, 0, 0, 0, 0, 0, 0,
	0, 0, 1044, 1044, 0, 0, 0, 0, 0, 1470,
	0, 0, 0, 0, 2014, 0, 2014, 0, 0, 1042,
	0, 1041, 2014, 931, 0, 0, 1042, 0, 0, 0,
	0, 0, 0, 2014, 0, 0, 2014, 0, 0, 4007,
	1475, 3265, 3265, 3265, 0, 0, 0, 2014, 2014, 0,
	0, 931, 0, 2014, 0, 0, 2014, 1871, 0, 0,
	0, 0, 0, 0, 2014, 0, 0, 0, 2014, 0,
	0, 0, 0, 0, 2014, 0, 0, 1871, 0, 1871,
	0, 2014, 0, 1461, 0, 0, 0, 0, 5163, 0,
	0, 0, 0, 1871, 0, 0, 2014, 0, 0, 0,
	1496, 1041, 1041, 0, 0, 0, 0, 0, 0, 0,
	1465, 0, 931, 0, 1042, 0, 0, 0, 0, 0,
	0, 1043, 1043, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1042, 1467, 5188, 0, 0, 0,
	0, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2787, 0, 5275, 5276, 0, 0,
	0, 0, 0, 2787, 0, 0, 1028, 0, 0, 0,
	5217, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1498, 0, 0, 0, 1468, 0, 0, 0,
	0, 0, 3846, 3846, 0, 3846, 0, 3846, 0, 0,
	0, 1042, 0, 0, 0, 0, 0, 0, 4985, 0,
	0, 0, 1499, 0, 0, 1500, 0, 0, 0, 1501,
	0, 0, 259, 0, 0, 0, 258, 0, 0, 0,
	1029, 1494, 0, 0, 0, 0, 1028, 0, 0, 0,
	262, 1502, 1472, 0, 1878, 0, 0, 0, 0, 0,
	0, 0, 0, 1029, 1028, 0, 0, 0, 256, 0,
	5266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3587, 0, 1474, 1473, 1505,
	0, 0, 0, 0, 0, 0, 0, 0, 1042, 0,
	1042, 0, 0, 0, 0, 0, 1503, 0, 1028, 0,
	1041, 0, 0, 0, 1028, 1878, 0, 1041, 0, 0,
	0, 0, 0, 1504, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 5397, 0, 1042, 0, 0,
	2787, 3619, 0, 1878, 0, 0, 0, 0, 0, 3622,
	0, 0, 0, 0, 0, 0, 0, 5301, 0, 268,
	1506, 0, 0, 0, 1464, 5303, 5304, 5305, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	264, 5312, 0, 0, 1477, 5315, 5316, 5317, 0, 0,
	0, 265, 0, 0, 0, 1041, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4193, 2014,
	0, 0, 3238, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 0, 269, 0, 1041, 0, 0, 0, 5357,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 263,
	0, 0, 0, 0, 0, 5374, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 0, 0, 1026, 1042, 0, 1042, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1028, 1028, 1029, 1028, 0,
	0, 0, 1041, 1029, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3846,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 1284, 0, 0, 249,
	1028, 1028, 272, 1026, 0, 0, 0, 0, 0, 1029,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 0, 276, 0, 273,
	0, 0, 0, 0, 260, 0, 0, 274, 0, 1041,
	0, 1041, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 266, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5624, 1042, 267,
	1096, 0, 0, 0, 0, 277, 0, 0, 1041, 253,
	0, 0, 1028, 0, 0, 0, 0, 0, 0, 0,
	1028, 0, 0, 1026, 0, 261, 0, 0, 0, 0,
	0, 0, 0, 1029, 1029, 0, 0, 5555, 0, 0,
	2014, 2014, 1871, 2014, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 5582,
	0, 0, 1044, 2014, 2014, 0, 3265, 3265, 0, 0,
	2014, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4007,
	4007, 0, 0, 1026, 1026, 0, 0, 0, 0, 2014,
	0, 0, 0, 5614, 0, 0, 0, 0, 0, 0,
	0, 2014, 0, 0, 0, 1028, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2014, 0,
	0, 0, 0, 0, 0, 0, 0, 1041, 0, 1041,
	1044, 0, 0, 3265, 3265, 3265, 3265, 3265, 3265, 3265,
	3265, 3265, 3265, 3265, 3265, 3265, 0, 3265, 0, 4007,
	4007, 4007, 0, 0, 0, 0, 0, 0, 0, 0,
	1023, 1023, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1043, 0, 2014, 0, 0, 0, 0, 0, 0,
	0, 0, 5685, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2014, 0, 0, 0, 0,
	0, 1195, 5804, 5805, 5806, 5807, 259, 0, 0, 2014,
	0, 0, 0, 2014, 0, 1029, 0, 1096, 0, 0,
	1044, 0, 0, 0, 262, 5718, 1028, 0, 0, 0,
	0, 0, 0, 0, 0, 1028, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5734, 0, 1043,
	0, 0, 0, 0, 0, 0, 1196, 0, 0, 0,
	1028, 0, 0, 0, 0, 0, 0, 0, 0, 1041,
	0, 0, 0, 0, 0, 2484, 0, 0, 0, 0,
	5758, 5758, 5758, 0, 5761, 1029, 0, 0, 0, 0,
	0, 0, 1026, 3238, 0, 0, 0, 0, 0, 1026,
	1044, 1044, 0, 3619, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3265, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 268, 0, 0, 0, 0, 1193, 1043,
	0, 0, 0, 0, 0, 0, 0, 3619, 0, 0,
	0, 0, 0, 1029, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 265, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1205, 1026, 2014, 0,
	1028, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1192, 1028, 1028, 0, 0, 1028, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 1026, 0, 1043,
	1043, 0, 2014, 263, 0, 1194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5881, 0, 0, 1028,
	0, 0, 0, 0, 0, 0, 1203, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1201, 5555, 0, 0, 0, 0, 0, 0, 0,
	5758, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1026, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2014, 0, 0, 0, 1044,
	0, 1028, 0, 0, 275, 0, 1044, 0, 0, 0,
	0, 0, 0, 249, 1198, 0, 272, 0, 0, 0,
	0, 0, 0, 0, 2787, 3619, 0, 3619, 5962, 0,
	0, 1096, 0, 0, 0, 1206, 0, 0, 1199, 0,
	0, 276, 5971, 273, 0, 0, 0, 0, 260, 0,
	0, 274, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1026, 0, 1026, 0, 0, 0, 266, 0, 0,
	0, 0, 1207, 1042, 0, 0, 0, 0, 1208, 1029,
	1029, 0, 1042, 267, 0, 0, 0, 1200, 0, 277,
	0, 0, 0, 1191, 1044, 0, 0, 0, 0, 0,
	1026, 0, 0, 0, 0, 0, 5555, 0, 0, 261,
	0, 0, 0, 0, 0, 1028, 0, 0, 1043, 0,
	0, 0, 0, 0, 1044, 1043, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1202, 0, 1189, 2014, 0, 0, 0, 0, 1042,
	0, 0, 2014, 2014, 0, 0, 2014, 4007, 4007, 2014,
	0, 1029, 0, 0, 2014, 0, 0, 0, 0, 1029,
	2014, 0, 1042, 6138, 0, 0, 0, 0, 0, 0,
	2014, 0, 0, 0, 0, 2014, 2496, 0, 0, 0,
	0, 1044, 0, 0, 0, 0, 2014, 0, 2014, 0,
	4007, 4007, 4007, 4007, 4007, 4007, 4007, 4007, 4007, 4007,
	4007, 4007, 4007, 1043, 0, 0, 4007, 2014, 2014, 2014,
	0, 5758, 0, 0, 0, 2014, 0, 0, 0, 0,
	0, 0, 6081, 0, 6138, 0, 0, 0, 0, 1026,
	0, 1026, 0, 1043, 0, 0, 0, 0, 0, 1042,
	1042, 2014, 2014, 2014, 0, 0, 0, 0, 1042, 0,
	0, 0, 6138, 0, 0, 0, 5022, 0, 0, 0,
	0, 0, 0, 0, 1029, 0, 0, 0, 1044, 0,
	1044, 0, 0, 0, 0, 0, 1871, 0, 0, 0,
	1871, 0, 0, 0, 0, 0, 2014, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1043, 0, 0, 0, 0, 0, 0, 1044, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2014, 0, 0, 0, 0, 2014, 2014, 0, 0,
	1023, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1869, 0, 0, 0, 0, 0, 0, 1028, 0, 0,
	0, 0, 4007, 0, 1041, 0, 0, 0, 0, 0,
	0, 0, 0, 1041, 0, 0, 0, 0, 0, 0,
	0, 1026, 0, 0, 0, 0, 0, 2939, 0, 0,
	0, 0, 259, 0, 0, 1029, 0, 1043, 0, 1043,
	0, 0, 0, 0, 1029, 0, 1042, 0, 0, 0,
	262, 0, 1042, 0, 0, 0, 0, 0, 1023, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1029,
	0, 0, 0, 1462, 1495, 0, 1043, 1028, 1463, 0,
	1041, 0, 1471, 0, 0, 1028, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1044, 0, 1044, 0,
	0, 0, 0, 1041, 0, 0, 0, 0, 1042, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1497, 0, 0, 1492, 0, 0, 0, 1023, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 268,
	0, 0, 0, 0, 2935, 0, 0, 0, 0, 0,
	0, 0, 0, 1470, 0, 0, 0, 0, 0, 0,
	1041, 1041, 0, 0, 0, 0, 0, 0, 0, 1041,
	264, 0, 0, 0, 0, 0, 0, 0, 0, 2787,
	0, 265, 1042, 1042, 1475, 0, 0, 0, 0, 0,
	2787, 2787, 1205, 1028, 3619, 1043, 0, 1043, 0, 0,
	0, 0, 0, 0, 0, 0, 2937, 0, 1023, 1023,
	0, 0, 0, 269, 0, 0, 0, 0, 1044, 0,
	0, 270, 0, 0, 0, 0, 0, 1461, 1029, 263,
	0, 2938, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1496, 1028, 0, 2014, 0, 0,
	0, 0, 1203, 0, 1465, 0, 2014, 2014, 0, 0,
	0, 2014, 2014, 0, 0, 2014, 2014, 0, 0, 2014,
	0, 2014, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3265, 0, 0, 0, 1467,
	0, 0, 0, 0, 0, 1466, 1028, 1028, 0, 0,
	3619, 0, 0, 0, 2014, 0, 0, 2014, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1041, 0, 0,
	0, 0, 0, 1041, 0, 0, 2014, 0, 0, 249,
	2940, 0, 272, 0, 0, 0, 1498, 1043, 0, 0,
	1468, 0, 0, 0, 0, 0, 0, 3265, 0, 0,
	0, 1206, 0, 0, 2941, 0, 0, 0, 0, 273,
	0, 0, 0, 0, 260, 0, 1499, 274, 0, 1500,
	0, 0, 0, 1501, 0, 0, 0, 0, 0, 1041,
	0, 0, 0, 266, 1042, 1494, 0, 0, 1207, 0,
	0, 0, 0, 0, 1208, 1502, 1472, 0, 0, 267,
	0, 0, 0, 2942, 0, 0, 0, 0, 0, 2943,
	0, 2014, 0, 0, 3619, 0, 0, 1023, 0, 0,
	0, 0, 0, 0, 1023, 261, 0, 0, 0, 1490,
	0, 1474, 1473, 1505, 0, 0, 2014, 0, 0, 0,
	0, 0, 0, 0, 0, 1028, 0, 0, 0, 0,
	1503, 0, 0, 0, 1042, 0, 0, 2936, 0, 0,
	0, 0, 0, 0, 0, 2014, 0, 1504, 0, 0,
	0, 0, 1042, 1041, 1041, 0, 0, 841, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1028,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1506, 0, 0, 0, 1464, 0,
	0, 0, 1023, 0, 2014, 0, 1042, 0, 0, 0,
	0, 0, 1042, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1477, 0,
	0, 0, 1023, 0, 1028, 0, 0, 0, 0, 2014,
	0, 2014, 2014, 2014, 0, 0, 0, 0, 0, 0,
	2014, 4007, 3265, 2014, 2014, 2014, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2014, 1026, 0, 0, 1023,
	0, 0, 0, 0, 0, 1026, 0, 0, 0, 0,
	4007, 3265, 2014, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1029, 873, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1041, 0, 0, 0, 0,
	0, 0, 1026, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 954, 957, 959, 1023, 0, 1023, 0,
	0, 0, 0, 1042, 1042, 1026, 1042, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 5139, 0, 0, 0, 1023, 1029, 0, 0, 0,
	0, 0, 0, 0, 2787, 1041, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1042, 1042,
	0, 0, 0, 1041, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1026, 1026, 0, 0, 0, 0, 0, 1028,
	0, 1026, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2014, 0, 0, 0, 1041, 0, 0,
	0, 0, 0, 1041, 0, 0, 0, 0, 4007, 0,
	0, 0, 0, 1044, 0, 0, 0, 0, 0, 0,
	2014, 0, 1044, 0, 0, 0, 0, 0, 0, 0,
	1042, 0, 0, 0, 0, 0, 0, 0, 1042, 0,
	0, 0, 0, 0, 0, 3265, 0, 0, 4007, 0,
	0, 0, 2014, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1029, 0, 1023, 0, 1023, 0, 0, 1028,
	0, 1028, 1028, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1044,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1044, 0, 1029, 0, 0, 0, 0, 0,
	0, 0, 0, 2014, 0, 0, 0, 0, 0, 1026,
	0, 0, 1043, 0, 0, 1026, 0, 0, 0, 0,
	0, 1043, 0, 1042, 0, 0, 0, 1028, 0, 0,
	0, 0, 0, 0, 0, 0, 2014, 0, 0, 0,
	0, 0, 0, 0, 0, 1029, 1029, 0, 0, 0,
	0, 0, 2014, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1041, 1041, 0, 1041, 0, 1044,
	1044, 1026, 0, 0, 0, 0, 2014, 0, 1044, 2014,
	0, 0, 0, 0, 0, 0, 1023, 0, 1043, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1043, 0, 0, 0, 0, 0, 0, 0, 1041,
	1041, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 247, 0, 1042, 0, 0, 0, 0, 0,
	0, 0, 0, 1042, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 229, 1026, 1026, 0, 0, 214,
	0, 0, 0, 227, 0, 0, 0, 0, 1042, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 1043, 1043,
	0, 0, 0, 0, 1029, 0, 0, 1043, 0, 2014,
	0, 1041, 0, 0, 0, 241, 220, 0, 0, 1041,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1044, 0, 0, 0,
	0, 0, 1044, 0, 0, 0, 0, 0, 3619, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3265, 3265, 0, 0, 3265, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2014, 1143, 0, 0, 0, 0, 0, 0, 1044, 2014,
	1149, 0, 0, 3619, 0, 0, 0, 0, 0, 0,
	0, 221, 0, 0, 0, 0, 0, 0, 1042, 0,
	0, 0, 0, 0, 1041, 0, 0, 0, 0, 1042,
	1042, 0, 0, 1042, 0, 0, 0, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 223, 0,
	0, 0, 0, 0, 0, 1043, 0, 4007, 4007, 224,
	4007, 1043, 0, 0, 0, 0, 0, 1042, 0, 0,
	0, 0, 0, 225, 0, 0, 0, 1026, 0, 0,
	239, 0, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 0, 1044, 1044, 0, 0, 219, 0, 226, 0,
	0, 0, 1360, 0, 0, 0, 0, 0, 0, 2014,
	0, 0, 0, 0, 0, 0, 0, 1043, 0, 215,
	1378, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1386, 1389, 248, 1391, 0, 0, 0, 1042,
	0, 0, 0, 0, 0, 1041, 0, 1026, 0, 0,
	0, 0, 0, 0, 1041, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1026, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1430, 0, 1041,
	0, 0, 0, 0, 0, 0, 0, 230, 0, 0,
	0, 0, 0, 0, 0, 0, 249, 231, 0, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1026,
	0, 1043, 1043, 0, 0, 1026, 1028, 0, 240, 1512,
	0, 233, 0, 0, 237, 0, 234, 0, 0, 0,
	0, 216, 0, 0, 235, 0, 0, 0, 0, 0,
	0, 5139, 0, 0, 0, 0, 0, 0, 1029, 0,
	243, 0, 0, 1042, 0, 236, 0, 0, 0, 0,
	0, 242, 0, 0, 0, 0, 244, 0, 0, 0,
	0, 0, 238, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 217, 0, 1044, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1041,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1041, 1041, 0, 0, 1041, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1029, 0,
	1029, 1029, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1041, 0,
	0, 0, 0, 0, 1044, 0, 0, 0, 0, 0,
	1784, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1784, 1044, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1026, 1026, 0, 1026,
	0, 1023, 0, 0, 0, 0, 0, 0, 0, 0,
	1023, 0, 0, 1043, 0, 0, 1029, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1044, 0, 0, 0,
	1041, 0, 1044, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1026, 1026, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1023, 0, 0,
	0, 0, 0, 1043, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1042, 0, 0, 0, 0,
	1023, 1043, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1026, 0, 0, 0, 0, 0, 0,
	0, 1026, 0, 0, 1041, 1043, 0, 0, 0, 0,
	0, 1043, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1042, 0, 1023, 1023, 0,
	0, 0, 0, 1042, 0, 0, 1023, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1044, 1044, 0, 1044, 0, 0, 2545,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1026, 0, 2595, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1044, 1044,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2661, 0, 0, 0,
	2665, 0, 0, 0, 0, 2677, 0, 0, 0, 0,
	0, 1042, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2725, 0, 0, 0,
	0, 0, 1043, 1043, 1023, 1043, 0, 0, 0, 0,
	1023, 0, 0, 0, 0, 2740, 0, 0, 0, 0,
	1044, 0, 0, 0, 0, 0, 0, 0, 1044, 0,
	0, 0, 0, 1042, 0, 2758, 0, 1026, 0, 2762,
	0, 0, 0, 0, 0, 0, 1026, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1041, 1043, 1043, 0,
	0, 0, 0, 0, 0, 0, 1023, 0, 0, 0,
	0, 1026, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1042, 1042, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2855, 0, 0, 0, 0, 0, 0, 0, 2677,
	2677, 2677, 0, 1044, 0, 0, 1041, 0, 0, 1043,
	0, 0, 0, 0, 1041, 0, 0, 1043, 0, 0,
	0, 0, 0, 0, 0, 2889, 2890, 0, 0, 0,
	1023, 1023, 0, 0, 0, 1029, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1026, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1026, 1026, 0, 0, 1026, 0, 0, 0,
	0, 0, 0, 0, 0, 1871, 0, 0, 0, 0,
	0, 0, 0, 1042, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1026, 0, 1043, 0, 1044, 0, 0, 0, 0, 0,
	2992, 0, 0, 1044, 0, 0, 0, 0, 0, 0,
	0, 0, 1041, 0, 0, 0, 0, 1042, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1044, 0,
	0, 0, 0, 0, 0, 0, 0, 1784, 1784, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1026, 0, 1041, 0, 0, 0, 0, 0,
	1143, 1143, 1042, 1143, 0, 3045, 0, 0, 3047, 3048,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1023, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1043, 0, 1041, 1041, 0, 0, 0,
	0, 0, 1043, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1043, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1044, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1044,
	1044, 0, 1023, 1044, 0, 0, 1026, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1023, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1044, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1023, 0, 0, 0, 0, 0,
	1023, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1784, 0, 0, 0, 0,
	0, 0, 0, 0, 1041, 3150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1043, 0, 1044,
	0, 0, 0, 0, 0, 0, 0, 0, 1043, 1043,
	0, 0, 1043, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1041, 0,
	0, 0, 0, 0, 0, 0, 0, 1042, 0, 0,
	0, 0, 0, 0, 0, 0, 1043, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1041, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1044, 0, 0, 0, 0, 1043, 0,
	0, 0, 0, 0, 0, 0, 0, 1042, 0, 1042,
	1042, 0, 0, 0, 0, 0, 0, 0, 1026, 0,
	0, 1023, 1023, 0, 1023, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1023, 1023, 0, 0,
	0, 0, 0, 0, 0, 1042, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1026, 0,
	0, 0, 0, 0, 0, 0, 1026, 0, 0, 0,
	0, 0, 1043, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1023, 0,
	0, 0, 0, 0, 0, 0, 1023, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1041, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1026, 1044, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1023, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1026, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1041, 0,
	1041, 1041, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1044, 0, 0, 0, 0,
	0, 0, 0, 1044, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1026, 1026, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1043, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1041, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1023, 0, 0, 0, 0, 0, 0, 0,
	0, 1023, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1023, 0, 0, 0,
	0, 0, 0, 0, 1043, 0, 0, 0, 0, 0,
	0, 0, 1043, 0, 0, 0, 0, 0, 0, 0,
	0, 1044, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3416, 0, 1026, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1044, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1026, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1044, 1044, 1023, 0, 0, 0,
	0, 0, 0, 0, 1042, 3513, 3514, 1023, 1023, 0,
	1043, 1023, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1026, 0, 0, 0, 0,
	0, 0, 0, 0, 3551, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1023, 0, 3575, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1043, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3600, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1043, 1043, 0, 0, 1023, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1044, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1044, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1023, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1044, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1043, 0, 0, 0, 0, 0, 0, 0,
	1026, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1041, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1043, 0, 0, 0,
	3810, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1026, 1043, 1026, 1026, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1026, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3912, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1023, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1044, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1023, 0, 0, 0, 0, 0, 0,
	0, 1023, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1044, 0, 1044,
	1044, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1043, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1044, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4118, 0,
	4121, 0, 0, 4126, 0, 0, 0, 0, 4132, 1023,
	0, 0, 0, 0, 0, 0, 1043, 0, 1043, 1043,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4168, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1023, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 4220, 4221, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1043, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1023, 1023, 0, 0, 0, 0, 0, 0,
	2677, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1026, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1023, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 4392, 0, 0, 1023, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1023, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1044, 0, 0, 0, 1784, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 4517, 4518, 0, 0, 0, 0, 4523,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1043, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1023, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1023, 0, 1023, 1023, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1023, 0, 0, 0, 0, 0, 0,
	0, 4710, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4724, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4735, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2661, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5004, 5005, 5006,
	5007, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1023, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2032, 0, 0, 0, 0, 0,
	0, 2029, 0, 0, 1999, 0, 0, 0, 2011, 2012,
	2013, 2043, 2045, 2027, 2072, 2093, 0, 2144, 2190, 2160,
	2015, 2277, 2283, 2016, 2344, 2348, 0, 2024, 2074, 2000,
	2124, 2139, 2154, 2166, 2019, 2025, 2017, 2281, 2020, 2425,
	2436, 2456, 2021, 2022, 2023, 2001, 2417, 2474, 2243, 2402,
	2054, 0, 2030, 2368, 0, 0, 2291, 2406, 0, 0,
	2068, 5146, 0, 0, 0, 2216, 2205, 2239, 2352, 2177,
	2297, 2105, 2264, 2442, 2334, 2253, 2448, 2366, 2067, 2133,
	2117, 2169, 2234, 2375, 2050, 2134, 2209, 2440, 2129, 2255,
	0, 2096, 2299, 2441, 2404, 2252, 2415, 2385, 2410, 2140,
	2278, 2103, 2325, 2392, 2393, 2063, 2176, 2098, 2451, 2048,
	2108, 2116, 2286, 2087, 2294, 2472, 2226, 2359, 2309, 2307,
	0, 2266, 2335, 2467, 0, 0, 2153, 0, 2147, 2285,
	2459, 2094, 2433, 2328, 2290, 2228, 2362, 2397, 2149, 2130,
	2131, 2187, 2327, 2172, 2106, 2447, 2223, 2227, 2225, 2221,
	2218, 2222, 2219, 2220, 2224, 2174, 2217, 0, 0, 2064,
	2284, 2212, 2382, 2062, 2331, 2170, 2143, 0, 0, 0,
	2449, 2263, 2265, 0, 2418, 2213, 2211, 2122, 2121, 2065,
	2450, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042,
	2044, 2046, 2047, 2051, 2052, 2053, 2055, 2056, 2057, 2058,
	2059, 2060, 2061, 2069, 2070, 2071, 2073, 2076, 2077, 2078,
	2080, 2081, 2082, 2083, 2084, 2085, 2088, 2089, 2090, 2091,
	2092, 2095, 2097, 2099, 2100, 2101, 2102, 2104, 2107, 2109,
	2110, 2111, 2112, 2113, 2114, 2115, 2118, 2119, 0, 2120,
	2123, 2125, 2126, 2127, 2128, 2132, 2135, 2136, 2137, 2138,
	2141, 2142, 2145, 2146, 2148, 2150, 2151, 2152, 2155, 0,
	2156, 2157, 2158, 2159, 2161, 2162, 2163, 2164, 2165, 2167,
	0, 0, 2168, 2171, 2173, 2175, 2178, 2179, 2180, 2181,
	0, 2182, 2183, 2184, 2185, 2186, 2188, 0, 2189, 2191,
	2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201,
	2202, 2203, 2204, 2207, 2208, 2210, 0, 2214, 2215, 2230,
	2231, 2232, 2233, 2235, 2237, 2238, 2236, 2240, 2241, 2242,
	2244, 2245, 2246, 2247, 2248, 2249, 2250, 2251, 2254, 2256,
	2257, 0, 2258, 2259, 0, 2260, 2261, 2262, 2267, 2268,
	2269, 2270, 2271, 2272, 2273, 2274, 2275, 2276, 2279, 2280,
	2282, 2296, 2298, 0, 2300, 2301, 2302, 2303, 2304, 2305,
	2306, 2308, 2310, 2311, 2312, 2313, 2314, 2315, 2316, 2317,
	2318, 2319, 2320, 2321, 2322, 2323, 2324, 2326, 2329, 2330,
	2332, 2333, 2336, 2337, 2338, 2339, 2340, 2341, 2342, 2343,
	2345, 2346, 2347, 2349, 2350, 2351, 2353, 2354, 2355, 2356,
	2357, 2358, 2360, 2361, 2363, 2364, 2365, 0, 2367, 2369,
	2370, 2371, 2372, 2373, 2374, 2377, 2376, 2378, 2379, 2380,
	2381, 2383, 2384, 2386, 2387, 2388, 2389, 2390, 2391, 2394,
	2395, 2396, 2398, 2399, 2400, 2401, 2403, 2405, 2407, 2409,
	2408, 2411, 2412, 2413, 2414, 2416, 2419, 2420, 2421, 2422,
	2423, 2424, 2426, 2427, 2428, 2429, 2430, 2431, 2432, 2434,
	1784, 2435, 2437, 2438, 2439, 2443, 2444, 2445, 2446, 2452,
	2453, 2454, 2455, 2457, 0, 5423, 2458, 2460, 2461, 2462,
	2463, 2464, 2465, 2466, 2468, 2469, 2470, 2471, 0, 2473,
	2206, 2295, 2289, 2229, 2287, 2288, 2292, 2293, 0, 0,
	2049, 2066, 2075, 2079, 2086, 0, 2018, 0, 0, 0,
	0, 0, 0, 0, 0, 2008, 2009, 2010, 0, 0,
	0, 0, 0, 5474, 2002, 2003, 2004, 2005, 2006, 2007,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 5665, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5672, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1876, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5712, 1881, 306,
	1887, 323, 804, 1897, 372, 409, 624, 1884, 1929, 469,
	1934, 522, 526, 1958, 615, 1891, 1894, 1904, 1907, 380,
	1912, 809, 1920, 815, 1930, 821, 1949, 591, 1955, 811,
	812, 817, 311, 699, 614, 685, 1943, 1889, 1947, 476,
	1940, 1916, 1956, 1933, 1945, 1926, 1931, 319, 1918, 1919,
	1923, 1932, 813, 810, 814, 820, 808, 818, 805, 816,
	1953, 513, 447, 664, 540, 318, 364, 351, 393, 435,
	547, 1888, 1906, 425, 595, 360, 449, 1939, 339, 482,
	1952, 571, 446, 1946, 554, 574, 1908, 466, 345, 505,
	561, 562, 802, 807, 1896, 823, 1883, 349, 350, 471,
	331, 479, 676, 642, 534, 492, 490, 1914, 457, 514,
	671, 1886, 0, 379, 0, 374, 470, 610, 337, 589,
	508, 475, 429, 537, 566, 376, 361, 362, 405, 507,
	395, 347, 600, 639, 643, 641, 637, 634, 638, 635,
	636, 640, 396, 633, 0, 608, 617, 651, 631, 659,
	616, 656, 626, 371, 655, 620, 619, 665, 646, 647,
	601, 661, 632, 630, 623, 622, 618, 1954, 296, 297,
	298, 299, 300, 301, 302, 303, 304, 305, 307, 1882,
	308, 309, 310, 312, 313, 314, 801, 315, 316, 317,
	320, 321, 322, 324, 684, 325, 326, 327, 328, 329,
	330, 621, 803, 332, 333, 334, 335, 336, 338, 340,
	341, 342, 343, 344, 346, 348, 1898, 1899, 1900, 806,
	1901, 1902, 1903, 352, 353, 354, 355, 356, 357, 1905,
	358, 359, 363, 365, 366, 367, 368, 369, 370, 373,
	1909, 375, 377, 1910, 378, 381, 1911, 382, 383, 384,
	385, 386, 387, 388, 389, 625, 390, 1913, 391, 392,
	394, 1915, 397, 398, 399, 400, 401, 1917, 402, 627,
	628, 403, 404, 406, 407, 408, 410, 411, 412, 413,
	414, 415, 416, 417, 418, 419, 420, 421, 1921, 422,
	423, 424, 426, 1922, 427, 428, 431, 432, 433, 434,
	1924, 436, 644, 1925, 437, 438, 439, 1927, 1928, 440,
	441, 442, 443, 444, 445, 448, 645, 450, 451, 452,
	453, 454, 455, 456, 686, 458, 459, 460, 461, 462,
	463, 464, 648, 649, 465, 467, 468, 650, 652, 653,
	819, 483, 484, 485, 486, 487, 488, 489, 491, 1936,
	493, 494, 495, 654, 496, 497, 498, 499, 1937, 500,
	501, 502, 503, 504, 506, 509, 510, 511, 512, 1938,
	515, 516, 517, 518, 519, 520, 521, 523, 524, 525,
	527, 528, 529, 687, 530, 531, 532, 533, 657, 535,
	536, 688, 538, 539, 541, 542, 543, 544, 545, 546,
	697, 1941, 548, 658, 549, 550, 551, 552, 553, 1942,
	555, 556, 557, 558, 559, 560, 563, 564, 565, 567,
	568, 660, 569, 570, 1944, 572, 573, 822, 575, 576,
	577, 578, 579, 1948, 698, 580, 662, 581, 663, 582,
	583, 584, 585, 586, 587, 588, 590, 1950, 1951, 592,
	593, 594, 596, 597, 598, 599, 602, 603, 604, 605,
	606, 1957, 607, 609, 611, 689, 666, 667, 668, 669,
	670, 672, 673, 674, 675, 612, 613, 629, 480, 474,
	430, 472, 473, 477, 478, 481, 1935, 1885, 1890, 1892,
	1893, 1895, 0, 0, 0, 0, 0, 1876, 0, 6137,
	784, 0, 0, 0, 0, 770, 0, 0, 0, 0,
	0, 0, 0, 1874, 1881, 306, 1887, 323, 804, 1897,
	372, 409, 624, 1884, 1929, 469, 1934, 522, 526, 1958,
	615, 1891, 1894, 1904, 1907, 380, 1912, 809, 1920, 815,
	1930, 821, 1949, 591, 1955, 811, 812, 817, 311, 699,
	614, 685, 1943, 1889, 1947, 476, 1940, 1916, 1956, 1933,
	1945, 1926, 1931, 319, 1918, 1919, 1923, 1932, 813, 810,
	814, 820, 808, 818, 805, 816, 1953, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 1888, 1906, 425,
	595, 360, 449, 1939, 339, 482, 1952, 571, 446, 1946,
	554, 574, 1908, 466, 345, 505, 561, 562, 802, 807,
	1896, 823, 1883, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 1914, 457, 514, 671, 1886, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 1954, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 1882, 308, 309, 310, 312,
	313, 314, 801, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 803, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 1898, 1899, 1900, 806, 1901, 1902, 1903, 352,
	353, 354, 355, 356, 357, 1905, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 1909, 375, 377, 1910,
	378, 381, 1911, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 1913, 391, 392, 394, 1915, 397, 398,
	399, 400, 401, 1917, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 1921, 422, 423, 424, 426, 1922,
	427, 428, 431, 432, 433, 434, 1924, 436, 644, 1925,
	437, 438, 439, 1927, 1928, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 819, 483, 484, 485,
	486, 487, 488, 489, 491, 1936, 493, 494, 495, 654,
	496, 497, 498, 499, 1937, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 1938, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 1941, 548, 658,
	549, 550, 551, 552, 553, 1942, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	1944, 572, 573, 822, 575, 576, 577, 578, 579, 1948,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 1950, 1951, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 1957, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 1935, 1885, 1890, 1892, 1893, 1895, 1876, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1881, 306, 1887, 323, 804,
	1897, 372, 409, 624, 1884, 1929, 469, 1934, 522, 526,
	1958, 615, 1891, 1894, 1904, 1907, 380, 1912, 809, 1920,
	815, 1930, 821, 1949, 591, 1955, 811, 812, 817, 311,
	699, 614, 685, 1943, 1889, 1947, 476, 1940, 1916, 1956,
	1933, 1945, 1926, 1931, 319, 1918, 1919, 1923, 1932, 813,
	810, 814, 820, 808, 818, 805, 816, 1953, 513, 447,
	664, 540, 318, 364, 351, 393, 435, 547, 1888, 1906,
	425, 595, 360, 449, 1939, 339, 482, 1952, 571, 446,
	1946, 554, 574, 1908, 466, 345, 505, 561, 562, 802,
	807, 1896, 823, 1883, 349, 350, 471, 331, 479, 676,
	642, 534, 492, 490, 1914, 457, 514, 671, 1886, 0,
	379, 0, 374, 470, 610, 337, 589, 508, 475, 429,
	537, 566, 376, 361, 362, 405, 507, 395, 347, 600,
	639, 643, 641, 637, 634, 638, 635, 636, 640, 396,
	633, 0, 608, 617, 651, 631, 659, 616, 656, 626,
	371, 655, 620, 619, 665, 646, 647, 601, 661, 632,
	630, 623, 622, 618, 1954, 296, 297, 298, 299, 300,
	301, 302, 303, 304, 305, 307, 1882, 308, 309, 310,
	312, 313, 314, 801, 315, 316, 317, 320, 321, 322,
	324, 684, 325, 326, 327, 328, 329, 330, 621, 803,
	332, 333, 334, 335, 336, 338, 340, 341, 342, 343,
	344, 346, 348, 1898, 1899, 1900, 806, 1901, 1902, 1903,
	352, 353, 354, 355, 356, 357, 1905, 358, 359, 363,
	365, 366, 367, 368, 369, 370, 373, 1909, 375, 377,
	1910, 378, 381, 1911, 382, 383, 384, 385, 386, 387,
	388, 389, 625, 390, 1913, 391, 392, 394, 1915, 397,
	398, 399, 400, 401, 1917, 402, 627, 628, 403, 404,
	406, 407, 408, 410, 411, 412, 413, 414, 415, 416,
	417, 418, 419, 420, 421, 1921, 422, 423, 424, 426,
	1922, 427, 428, 431, 432, 433, 434, 1924, 436, 644,
	1925, 437, 438, 439, 1927, 1928, 440, 441, 442, 443,
	444, 445, 448, 645, 450, 451, 452, 453, 454, 455,
	456, 686, 458, 459, 460, 461, 462, 463, 464, 648,
	649, 465, 467, 468, 650, 652, 653, 819, 483, 484,
	485, 486, 487, 488, 489, 491, 1936, 493, 494, 495,
	654, 496, 497, 498, 499, 1937, 500, 501, 502, 503,
	504, 506, 509, 510, 511, 512, 1938, 515, 516, 517,
	518, 519, 520, 521, 523, 524, 525, 527, 528, 529,
	687, 530, 531, 532, 533, 657, 535, 536, 688, 538,
	539, 541, 542, 543, 544, 545, 546, 697, 1941, 548,
	658, 549, 550, 551, 552, 553, 1942, 555, 556, 557,
	558, 559, 560, 563, 564, 565, 567, 568, 660, 569,
	570, 1944, 572, 573, 822, 575, 576, 577, 578, 579,
	1948, 698, 580, 662, 581, 663, 582, 583, 584, 585,
	586, 587, 588, 590, 1950, 1951, 592, 593, 594, 596,
	597, 598, 599, 602, 603, 604, 605, 606, 1957, 607,
	609, 611, 689, 666, 667, 668, 669, 670, 672, 673,
	674, 675, 612, 613, 629, 480, 474, 430, 472, 473,
	477, 478, 481, 1935, 1885, 1890, 1892, 1893, 1895, 1049,
	0, 1665, 784, 0, 0, 0, 898, 770, 0, 0,
	0, 0, 0, 909, 910, 911, 1881, 306, 1887, 323,
	804, 1897, 372, 409, 0, 1884, 1929, 469, 1934, 522,
	526, 1958, 0, 1891, 1894, 1904, 1907, 380, 1912, 809,
	1920, 815, 1930, 821, 1949, 591, 1955, 811, 812, 817,
	311, 1046, 614, 685, 1943, 1889, 1947, 4195, 1940, 1916,
	1956, 1933, 1945, 1926, 1931, 319, 1918, 1919, 1923, 1932,
	813, 810, 814, 820, 808, 818, 805, 816, 1953, 513,
	447, 0, 540, 318, 364, 351, 393, 435, 547, 1888,
	1906, 425, 595, 360, 449, 1939, 339, 482, 1952, 571,
	446, 1946, 554, 574, 1908, 466, 345, 505, 561, 562,
	802, 807, 1896, 823, 1883, 349, 350, 471, 331, 479,
	0, 0, 534, 492, 490, 1914, 457, 514, 0, 1886,
	0, 379, 0, 374, 470, 610, 337, 589, 508, 475,
	429, 537, 566, 376, 361, 362, 405, 507, 395, 347,
	600, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	396, 1048, 0, 608, 1051, 1039, 1031, 1032, 1033, 1034,
	1035, 1036, 0, 1053, 1054, 1055, 1056, 1057, 601, 1045,
	1047, 1030, 1037, 1038, 1040, 1954, 296, 297, 298, 299,
	300, 301, 302, 303, 304, 305, 307, 1882, 308, 309,
	310, 312, 313, 314, 801, 315, 316, 317, 320, 321,
	322, 324, 684, 325, 326, 327, 328, 329, 330, 0,
	803, 332, 333, 334, 335, 336, 338, 340, 341, 342,
	343, 344, 346, 348, 1898, 1899, 1900, 806, 1901, 1902,
	1903, 352, 353, 354, 355, 356, 357, 1905, 358, 359,
	363, 365, 366, 367, 368, 369, 370, 373, 1909, 375,
	377, 1910, 378, 381, 1911, 382, 383, 384, 385, 386,
	387, 388, 389, 0, 390, 1913, 391, 392, 394, 1915,
	397, 398, 399, 400, 401, 1917, 402, 0, 0, 403,
	404, 406, 407, 408, 410, 411, 412, 413, 414, 415,
	416, 417, 418, 419, 420, 421, 1921, 422, 423, 424,
	426, 1922, 427, 428, 431, 432, 433, 434, 1924, 436,
	0, 1925, 437, 438, 439, 1927, 1928, 440, 441, 442,
	443, 444, 445, 448, 0, 450, 451, 452, 453, 454,
	455, 456, 686, 458, 459, 460, 461, 462, 463, 464,
	4194, 0, 465, 467, 468, 0, 0, 0, 819, 483,
	484, 485, 486, 487, 488, 489, 491, 1936, 493, 494,
	495, 0, 496, 497, 498, 499, 1937, 500, 501, 502,
	503, 504, 506, 509, 510, 511, 512, 1938, 515, 516,
	517, 518, 519, 520, 521, 523, 524, 525, 527, 528,
	529, 687, 530, 531, 532, 533, 0, 535, 536, 688,
	538, 539, 541, 542, 543, 544, 545, 546, 697, 1941,
	548, 2789, 549, 550, 551, 552, 553, 1942, 555, 556,
	557, 558, 559, 560, 563, 564, 565, 567, 568, 0,
	569, 570, 1944, 572, 573, 822, 575, 576, 577, 578,
	579, 1948, 698, 580, 0, 581, 0, 582, 583, 584,
	585, 586, 587, 588, 590, 1950, 1951, 592, 593, 594,
	596, 597, 598, 599, 602, 603, 604, 605, 606, 1957,
	607, 609, 611, 689, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 612, 613, 0, 480, 474, 430, 472,
	473, 477, 478, 481, 1935, 1885, 1890, 1892, 1893, 1895,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	906, 907, 908, 0, 0, 0, 0, 0, 0, 4196,
	4197, 902, 903, 904, 905, 1049, 0, 1665, 784, 0,
	0, 0, 898, 770, 0, 0, 0, 0, 0, 909,
	910, 911, 1881, 306, 1887, 323, 804, 1897, 372, 409,
	0, 1884, 1929, 469, 1934, 522, 526, 1958, 0, 1891,
	1894, 1904, 1907, 380, 1912, 809, 1920, 815, 1930, 821,
	1949, 591, 1955, 811, 812, 817, 311, 1046, 614, 685,
	1943, 1889, 1947, 4195, 1940, 1916, 1956, 1933, 1945, 1926,
	1931, 319, 1918, 1919, 1923, 1932, 813, 810, 814, 820,
	808, 818, 805, 816, 1953, 513, 447, 0, 540, 318,
	364, 351, 393, 435, 547, 1888, 1906, 425, 595, 360,
	449, 1939, 339, 482, 1952, 571, 446, 1946, 554, 574,
	1908, 466, 345, 505, 561, 562, 802, 807, 1896, 823,
	1883, 349, 350, 471, 331, 479, 0, 0, 534, 492,
	490, 1914, 457, 514, 0, 1886, 0, 379, 0, 374,
	470, 610, 337, 589, 508, 475, 429, 537, 566, 376,
	361, 362, 405, 507, 395, 347, 600, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 396, 1048, 0, 608,
	1051, 1039, 1031, 1032, 1033, 1034, 1035, 1036, 0, 1053,
	1054, 1055, 1056, 1057, 601, 1045, 1047, 1030, 1037, 1038,
	1040, 1954, 296, 297, 298, 299, 300, 301, 302, 303,
	304, 305, 307, 1882, 308, 309, 310, 312, 313, 314,
	801, 315, 316, 317, 320, 321, 322, 324, 684, 325,
	326, 327, 328, 329, 330, 0, 803, 332, 333, 334,
	335, 336, 338, 340, 341, 342, 343, 344, 346, 348,
	1898, 1899, 1900, 806, 1901, 1902, 1903, 352, 353, 354,
	355, 356, 357, 1905, 358, 359, 363, 365, 366, 367,
	368, 369, 370, 373, 1909, 375, 377, 1910, 378, 381,
	1911, 382, 383, 384, 385, 386, 387, 388, 389, 0,
	390, 1913, 391, 392, 394, 1915, 397, 398, 399, 400,
	401, 1917, 402, 0, 0, 403, 404, 406, 407, 408,
	410, 411, 412, 413, 414, 415, 416, 417, 418, 419,
	420, 421, 1921, 422, 423, 424, 426, 1922, 427, 428,
	431, 432, 433, 434, 1924, 436, 0, 1925, 437, 438,
	439, 1927, 1928, 440, 441, 442, 443, 444, 445, 448,
	0, 450, 451, 452, 453, 454, 455, 456, 686, 458,
	459, 460, 461, 462, 463, 464, 4902, 0, 465, 467,
	468, 0, 0, 0, 819, 483, 484, 485, 486, 487,
	488, 489, 491, 1936, 493, 494, 495, 0, 496, 497,
	498, 499, 1937, 500, 501, 502, 503, 504, 506, 509,
	510, 511, 512, 1938, 515, 516, 517, 518, 519, 520,
	521, 523, 524, 525, 527, 528, 529, 687, 530, 531,
	532, 533, 0, 535, 536, 688, 538, 539, 541, 542,
	543, 544, 545, 546, 697, 1941, 548, 2789, 549, 550,
	551, 552, 553, 1942, 555, 556, 557, 558, 559, 560,
	563, 564, 565, 567, 568, 0, 569, 570, 1944, 572,
	573, 822, 575, 576, 577, 578, 579, 1948, 698, 580,
	0, 581, 0, 582, 583, 584, 585, 586, 587, 588,
	590, 1950, 1951, 592, 593, 594, 596, 597, 598, 599,
	602, 603, 604, 605, 606, 1957, 607, 609, 611, 689,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 612,
	613, 0, 480, 474, 430, 472, 473, 477, 478, 481,
	1935, 1885, 1890, 1892, 1893, 1895, 0, 0, 0, 0,
	0, 0, 0, 0, 1876, 0, 906, 907, 908, 0,
	0, 0, 0, 0, 0, 4196, 4197, 902, 903, 904,
	905, 1881, 306, 1887, 323, 804, 1897, 3565, 409, 624,
	1884, 1929, 469, 1934, 522, 526, 1958, 615, 1891, 1894,
	1904, 1907, 380, 1912, 809, 1920, 815, 1930, 821, 1949,
	591, 1955, 811, 812, 817, 311, 699, 614, 685, 1943,
	1889, 1947, 476, 1940, 1916, 1956, 1933, 1945, 1926, 1931,
	319, 1918, 1919, 1923, 1932, 813, 810, 814, 820, 808,
	818, 805, 816, 1953, 513, 447, 664, 540, 318, 364,
	351, 393, 435, 3563, 1888, 1906, 425, 595, 360, 449,
	1939, 339, 482, 1952, 571, 446, 1946, 554, 574, 1908,
	466, 345, 505, 561, 562, 802, 807, 1896, 823, 1883,
	349, 350, 471, 331, 479, 676, 642, 534, 492, 490,
	1914, 457, 514, 671, 1886, 0, 379, 0, 374, 470,
	610, 337, 589, 508, 475, 429, 537, 566, 376, 361,
	362, 405, 507, 395, 347, 600, 639, 643, 641, 637,
	634, 638, 635, 636, 640, 396, 633, 0, 608, 617,
	651, 631, 659, 616, 656, 626, 371, 655, 620, 619,
	665, 646, 647, 601, 661, 632, 630, 623, 622, 618,
	1954, 296, 297, 298, 299, 300, 3564, 302, 303, 304,
	305, 307, 1882, 308, 309, 310, 312, 313, 314, 801,
	315, 316, 317, 320, 321, 322, 324, 684, 325, 326,
	327, 328, 329, 330, 621, 803, 332, 333, 334, 335,
	336, 338, 340, 341, 342, 343, 344, 346, 348, 1898,
	1899, 1900, 806, 1901, 1902, 1903, 352, 353, 354, 355,
	356, 357, 1905, 358, 359, 363, 365, 366, 367, 368,
	369, 370, 373, 1909, 375, 377, 1910, 378, 381, 1911,
	382, 383, 384, 385, 386, 387, 388, 389, 625, 390,
	1913, 391, 392, 394, 1915, 397, 398, 399, 400, 401,
	1917, 402, 627, 628, 403, 404, 406, 407, 408, 410,
	411, 412, 413, 414, 415, 416, 417, 418, 419, 420,
	421, 1921, 422, 423, 424, 426, 1922, 427, 428, 431,
	432, 433, 434, 1924, 436, 644, 1925, 437, 438, 439,
	1927, 1928, 440, 441, 442, 443, 444, 445, 448, 645,
	450, 451, 452, 453, 454, 455, 456, 686, 458, 459,
	460, 461, 462, 463, 464, 648, 649, 465, 467, 468,
	650, 652, 653, 819, 483, 484, 485, 486, 487, 488,
	489, 491, 1936, 493, 494, 495, 654, 496, 497, 498,
	499, 1937, 500, 501, 502, 503, 504, 506, 509, 510,
	511, 512, 1938, 515, 516, 517, 518, 519, 520, 521,
	523, 524, 525, 527, 528, 529, 687, 530, 531, 532,
	533, 657, 535, 536, 688, 538, 539, 541, 542, 543,
	544, 545, 546, 697, 1941, 548, 658, 549, 550, 551,
	552, 553, 1942, 555, 556, 557, 558, 559, 560, 563,
	564, 565, 567, 568, 660, 569, 570, 1944, 572, 573,
	822, 575, 576, 577, 578, 579, 1948, 698, 580, 662,
	581, 663, 582, 583, 584, 585, 586, 587, 588, 590,
	1950, 1951, 592, 593, 594, 596, 597, 598, 599, 602,
	603, 604, 605, 606, 1957, 607, 609, 611, 689, 666,
	667, 668, 669, 670, 672, 673, 674, 675, 612, 613,
	629, 480, 474, 430, 472, 473, 477, 478, 481, 1935,
	1885, 1890, 1892, 1893, 1895, 798, 0, 1270, 784, 0,
	1275, 1276, 1265, 770, 1255, 0, 0, 0, 0, 0,
	0, 0, 1866, 306, 0, 323, 804, 0, 372, 409,
	1260, 0, 1248, 469, 0, 522, 526, 0, 615, 1280,
	0, 1252, 1867, 380, 1273, 809, 0, 815, 1274, 821,
	1272, 591, 0, 811, 812, 817, 311, 1349, 614, 685,
	0, 0, 0, 1266, 0, 0, 0, 0, 0, 0,
	0, 319, 0, 0, 0, 0, 813, 810, 814, 820,
	808, 818, 805, 816, 0, 513, 447, 664, 540, 318,
	364, 351, 393, 435, 547, 0, 0, 425, 595, 360,
	449, 0, 339, 482, 1302, 571, 446, 0, 554, 574,
	0, 466, 345, 505, 561, 562, 802, 807, 0, 823,
	0, 349, 350, 471, 331, 479, 676, 642, 534, 492,
	490, 0, 457, 514, 671, 1261, 0, 379, 0, 374,
	470, 610, 337, 589, 508, 475, 429, 537, 566, 376,
	361, 362, 405, 507, 395, 347, 600, 1330, 1332, 1328,
	1324, 1325, 1290, 1291, 1331, 1327, 396, 1326, 0, 608,
	1335, 1346, 1343, 1348, 1334, 1347, 1341, 1036, 655, 1338,
	1337, 1351, 1344, 1345, 601, 1350, 1289, 1342, 1340, 1339,
	1336, 1865, 296, 297, 298, 299, 300, 301, 302, 303,
	304, 305, 307, 0, 308, 309, 310, 312, 313, 314,
	801, 315, 316, 317, 320, 321, 322, 324, 684, 325,
	326, 327, 328, 329, 330, 1314, 1292, 332, 333, 334,
	335, 336, 338, 340, 341, 342, 343, 344, 346, 348,
	1303, 1293, 1298, 1304, 1294, 1295, 1299, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 363, 365, 366, 367,
	368, 369, 370, 373, 0, 375, 377, 0, 378, 381,
	0, 382, 383, 384, 385, 386, 387, 388, 389, 1306,
	390, 0, 391, 392, 394, 0, 397, 398, 399, 400,
	401, 0, 402, 1315, 1264, 403, 404, 406, 407, 408,
	410, 411, 412, 413, 414, 415, 416, 417, 418, 419,
	420, 421, 0, 422, 423, 424, 426, 0, 427, 428,
	431, 432, 433, 434, 0, 436, 1316, 0, 437, 438,
	439, 1296, 1297, 440, 441, 442, 443, 444, 445, 448,
	1329, 450, 451, 452, 453, 454, 455, 456, 686, 458,
	459, 460, 461, 462, 463, 464, 648, 1307, 465, 467,
	468, 1313, 652, 1308, 819, 483, 484, 485, 486, 487,
	488, 489, 491, 0, 493, 494, 495, 1309, 496, 497,
	498, 499, 0, 500, 501, 502, 503, 504, 506, 509,
	510, 511, 512, 0, 515, 516, 517, 518, 519, 520,
	521, 523, 524, 525, 527, 528, 529, 687, 530, 531,
	532, 533, 1267, 535, 536, 688, 538, 539, 541, 542,
	543, 544, 545, 546, 697, 1300, 548, 658, 549, 550,
	551, 552, 553, 0, 555, 556, 557, 558, 559, 560,
	563, 564, 565, 567, 568, 1310, 569, 570, 1301, 572,
	573, 822, 575, 576, 577, 578, 579, 0, 698, 580,
	1311, 581, 1312, 582, 583, 584, 585, 586, 587, 588,
	590, 0, 1251, 592, 593, 594, 596, 597, 598, 599,
	602, 603, 604, 605, 606, 0, 607, 609, 611, 689,
	666, 1317, 1318, 1321, 1319, 1320, 1322, 1323, 1333, 612,
	613, 629, 480, 474, 430, 472, 473, 477, 478, 481,
	0, 0, 0, 1305, 0, 0, 0, 1249, 0, 0,
	798, 0, 1270, 784, 0, 1275, 1276, 1265, 770, 1255,
	0, 0, 1256, 1862, 0, 1245, 1246, 1863, 306, 0,
	323, 804, 0, 372, 409, 1260, 0, 1248, 469, 0,
	522, 526, 166, 615, 1280, 0, 1252, 0, 380, 1273,
	809, 0, 815, 1274, 821, 1272, 591, 0, 811, 812,
	817, 311, 1349, 614, 685, 0, 0, 0, 1266, 163,
	0, 0, 0, 164, 0, 0, 319, 0, 0, 0,
	0, 813, 810, 814, 820, 808, 818, 805, 816, 0,
	513, 447, 1132, 540, 318, 364, 351, 393, 435, 547,
	0, 0, 425, 595, 360, 449, 0, 339, 482, 1302,
	571, 446, 0, 554, 574, 0, 466, 345, 505, 561,
	562, 802, 807, 0, 823, 0, 349, 350, 471, 331,
	479, 676, 642, 534, 492, 490, 0, 457, 514, 671,
	1261, 0, 379, 0, 374, 470, 610, 337, 589, 508,
	475, 429, 537, 566, 376, 361, 362, 405, 507, 395,
	347, 600, 1330, 1332, 1328, 1324, 1325, 1290, 1291, 1331,
	1327, 396, 1326, 0, 608, 1335, 1346, 1343, 1348, 1334,
	1347, 1341, 1036, 655, 1338, 1337, 1351, 1344, 1345, 601,
	1350, 1289, 1342, 1340, 1339, 1336, 0, 296, 297, 298,
	299, 300, 301, 302, 303, 304, 305, 307, 0, 308,
	309, 310, 312, 313, 314, 801, 315, 316, 317, 320,
	321, 322, 324, 684, 325, 326, 327, 328, 329, 330,
	1314, 1292, 332, 333, 334, 335, 336, 338, 340, 341,
	342, 343, 344, 346, 348, 1303, 1293, 1298, 1304, 1294,
	1295, 1299, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 363, 365, 366, 367, 368, 369, 370, 373, 0,
	375, 377, 0, 378, 381, 0, 382, 383, 384, 385,
	386, 387, 388, 389, 1306, 390, 0, 391, 392, 394,
	0, 397, 398, 399, 400, 401, 0, 402, 1315, 1264,
	403, 404, 406, 407, 408, 410, 411, 412, 413, 414,
	415, 416, 417, 418, 419, 420, 421, 0, 422, 423,
	424, 426, 0, 427, 428, 431, 432, 433, 434, 0,
	436, 1316, 0, 437, 438, 439, 1296, 1297, 440, 441,
	442, 443, 444, 445, 448, 1329, 450, 451, 452, 453,
	454, 455, 456, 686, 458, 459, 460, 461, 462, 463,
	464, 648, 1307, 465, 467, 468, 1313, 652, 1308, 819,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 493,
	494, 495, 1309, 496, 497, 498, 499, 0, 500, 501,
	502, 503, 504, 506, 509, 510, 511, 512, 0, 515,
	516, 517, 518, 519, 520, 521, 523, 524, 525, 527,
	528, 529, 687, 530, 531, 532, 533, 1267, 535, 536,
	688, 538, 539, 541, 542, 543, 544, 545, 546, 697,
	1300, 548, 658, 549, 550, 551, 552, 553, 0, 555,
	556, 557, 558, 559, 560, 563, 564, 565, 567, 568,
	1310, 569, 570, 1301, 572, 573, 822, 575, 576, 577,
	578, 579, 0, 698, 580, 1311, 581, 1312, 582, 583,
	584, 585, 586, 587, 588, 590, 0, 1251, 592, 593,
	594, 596, 597, 598, 599, 602, 603, 604, 605, 606,
	0, 607, 609, 611, 689, 666, 1317, 1318, 1321, 1319,
	1320, 1322, 1323, 1333, 612, 613, 629, 480, 474, 430,
	472, 473, 477, 478, 481, 0, 0, 0, 1305, 0,
	0, 0, 1249, 0, 167, 798, 0, 1270, 784, 0,
	1275, 1276, 1265, 770, 1255, 0, 0, 1256, 5748, 0,
	1245, 1246, 0, 306, 0, 323, 804, 0, 372, 409,
	1260, 0, 1248, 469, 0, 522, 526, 166, 615, 1280,
	0, 1252, 0, 380, 1273, 809, 0, 815, 1274, 821,
	1272, 591, 0, 811, 812, 817, 311, 1349, 614, 685,
	0, 0, 0, 1266, 163, 0, 0, 0, 164, 0,
	0, 319, 0, 0, 0, 0, 813, 810, 814, 820,
	808, 818, 805, 816, 0, 513, 447, 1132, 540, 318,
	364, 351, 393, 435, 547, 0, 0, 425, 595, 360,
	449, 3295, 339, 482, 1302, 571, 446, 0, 554, 574,
	0, 466, 345, 505, 561, 562, 802, 807, 0, 823,
	0, 349, 350, 471, 331, 479, 676, 642, 534, 492,
	490, 0, 457, 514, 671, 1261, 0, 379, 0, 374,
	470, 610, 337, 589, 508, 475, 429, 537, 566, 376,
	361, 362, 405, 507, 395, 347, 600, 1330, 1332, 1328,
	1324, 1325, 1290, 1291, 1331, 1327, 396, 1326, 0, 608,
	1335, 1346, 1343, 1348, 1334, 1347, 1341, 1036, 655, 1338,
	1337, 1351, 1344, 1345, 601, 1350, 1289, 1342, 1340, 1339,
	1336, 0, 296, 297, 298, 299, 300, 301, 302, 303,
	304, 305, 307, 0, 308, 309, 310, 312, 313, 314,
	801, 315, 316, 317, 320, 321, 322, 324, 684, 325,
	326, 327, 328, 329, 330, 1314, 1292, 332, 333, 334,
	335, 336, 338, 340, 341, 342, 343, 344, 346, 348,
	1303, 1293, 1298, 1304, 1294, 1295, 1299, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 363, 365, 366, 367,
	368, 369, 370, 373, 0, 375, 377, 0, 378, 381,
	0, 382, 383, 384, 385, 386, 387, 388, 389, 1306,
	390, 0, 391, 392, 394, 0, 397, 398, 399, 400,
	401, 0, 402, 1315, 1264, 403, 404, 406, 407, 408,
	410, 411, 412, 413, 414, 415, 416, 417, 418, 419,
	420, 421, 0, 422, 423, 424, 426, 0, 427, 428,
	431, 432, 433, 434, 0, 436, 1316, 0, 437, 438,
	439, 1296, 1297, 440, 441, 442, 443, 444, 445, 448,
	1329, 450, 451, 452, 453, 454, 455, 456, 686, 458,
	459, 460, 461, 462, 463, 464, 648, 1307, 465, 467,
	468, 1313, 652, 1308, 819, 483, 484, 485, 486, 487,
	488, 489, 491, 0, 493, 494, 495, 1309, 496, 497,
	498, 499, 0, 500, 501, 502, 503, 504, 506, 509,
	510, 511, 512, 0, 515, 516, 517, 518, 519, 520,
	521, 523, 524, 525, 527, 528, 529, 687, 530, 531,
	532, 533, 1267, 535, 536, 688, 538, 539, 541, 542,
	543, 544, 545, 546, 697, 1300, 548, 658, 549, 550,
	551, 552, 553, 0, 555, 556, 557, 558, 559, 560,
	563, 564, 565, 567, 568, 1310, 569, 570, 1301, 572,
	573, 822, 575, 576, 577, 578, 579, 0, 698, 580,
	1311, 581, 1312, 582, 583, 584, 585, 586, 587, 588,
	590, 0, 1251, 592, 593, 594, 596, 597, 598, 599,
	602, 603, 604, 605, 606, 0, 607, 609, 611, 689,
	666, 1317, 1318, 1321, 1319, 1320, 1322, 1323, 1333, 612,
	613, 629, 480, 474, 430, 472, 473, 477, 478, 481,
	0, 0, 0, 1305, 0, 0, 0, 1249, 0, 167,
	798, 0, 1270, 784, 0, 1275, 1276, 1265, 770, 1255,
	0, 0, 1256, 0, 0, 1245, 1246, 0, 306, 0,
	323, 804, 0, 372, 409, 1260, 0, 1248, 469, 0,
	522, 526, 166, 615, 1280, 0, 1252, 0, 380, 1273,
	809, 0, 815, 1274, 821, 1272, 591, 0, 811, 812,
	817, 311, 1349, 614, 685, 0, 0, 0, 1266, 163,
	0, 0, 0, 164, 0, 0, 319, 0, 0, 0,
	0, 813, 810, 814, 820, 808, 818, 805, 816, 0,
	513, 447, 1132, 540, 318, 364, 351, 393, 435, 547,
	0, 0, 425, 595, 360, 449, 0, 339, 482, 1302,
	571, 446, 0, 554, 574, 0, 466, 345, 505, 561,
	562, 802, 807, 0, 823, 0, 349, 350, 471, 331,
	479, 676, 642, 534, 492, 490, 0, 457, 514, 671,
	1261, 0, 379, 0, 374, 470, 610, 337, 589, 508,
	475, 429, 537, 566, 376, 361, 362, 405, 507, 395,
	347, 600, 1330, 1332, 1328, 1324, 1325, 1290, 1291, 1331,
	1327, 396, 1326, 0, 608, 1335, 1346, 1343, 1348, 1334,
	1347, 1341, 1036, 655, 1338, 1337, 1351, 1344, 1345, 601,
	1350, 1289, 1342, 1340, 1339, 1336, 0, 296, 297, 298,
	299, 300, 301, 302, 303, 304, 305, 307, 0, 308,
	309, 310, 312, 313, 314, 801, 315, 316, 317, 320,
	321, 322, 324, 684, 325, 326, 327, 328, 329, 330,
	1314, 1292, 332, 333, 334, 335, 336, 338, 340, 341,
	342, 343, 344, 346, 348, 1303, 1293, 1298, 1304, 1294,
	1295, 1299, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 363, 365, 366, 367, 368, 369, 370, 373, 0,
	375, 377, 0, 378, 381, 0, 382, 383, 384, 385,
	386, 387, 388, 389, 1306, 390, 0, 391, 392, 394,
	0, 397, 398, 399, 400, 401, 0, 402, 1315, 1264,
	403, 404, 406, 407, 408, 410, 411, 412, 413, 414,
	415, 416, 417, 418, 419, 420, 421, 0, 422, 423,
	424, 426, 0, 427, 428, 431, 432, 433, 434, 0,
	436, 1316, 0, 437, 438, 439, 1296, 1297, 440, 441,
	442, 443, 444, 445, 448, 1329, 450, 451, 452, 453,
	454, 455, 456, 686, 458, 459, 460, 461, 462, 463,
	464, 648, 1307, 465, 467, 468, 1313, 652, 1308, 819,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 493,
	494, 495, 1309, 496, 497, 498, 499, 0, 500, 501,
	502, 503, 504, 506, 509, 510, 511, 512, 0, 515,
	516, 517, 518, 519, 520, 521, 523, 524, 525, 527,
	528, 529, 687, 530, 531, 532, 533, 1267, 535, 536,
	688, 538, 539, 541, 542, 543, 544, 545, 546, 697,
	1300, 548, 658, 549, 550, 551, 552, 553, 0, 555,
	556, 557, 558, 559, 560, 563, 564, 565, 567, 568,
	1310, 569, 570, 1301, 572, 573, 822, 575, 576, 577,
	578, 579, 0, 698, 580, 1311, 581, 1312, 582, 583,
	584, 585, 586, 587, 588, 590, 0, 1251, 592, 593,
	594, 596, 597, 598, 599, 602, 603, 604, 605, 606,
	0, 607, 609, 611, 689, 666, 1317, 1318, 1321, 1319,
	1320, 1322, 1323, 1333, 612, 613, 629, 480, 474, 430,
	472, 473, 477, 478, 481, 0, 0, 0, 1305, 0,
	0, 0, 1249, 0, 167, 798, 0, 1270, 784, 0,
	1275, 1276, 1265, 770, 1255, 0, 0, 1256, 0, 0,
	1245, 1246, 0, 306, 0, 323, 804, 0, 372, 409,
	1260, 0, 1248, 469, 0, 522, 526, 0, 615, 1280,
	0, 1252, 0, 380, 1273, 809, 0, 815, 1274, 821,
	1272, 591, 0, 811, 812, 817, 311, 1349, 614, 685,
	0, 0, 0, 1266, 0, 3276, 0, 0, 0, 0,
	0, 319, 0, 0, 0, 0, 813, 810, 814, 820,
	808, 818, 805, 816, 0, 513, 447, 664, 540, 318,
	364, 351, 393, 435, 547, 0, 0, 425, 595, 360,
	449, 0, 339, 482, 1302, 571, 446, 0, 554, 574,
	0, 466, 345, 505, 561, 562, 802, 807, 0, 823,
	0, 349, 350, 471, 331, 479, 676, 642, 534, 492,
	490, 0, 457, 514, 671, 1261, 0, 379, 0, 374,
	470, 610, 337, 589, 508, 475, 429, 537, 566, 376,
	361, 362, 405, 507, 395, 347, 600, 1330, 1332, 1328,
	1324, 1325, 1290, 1291, 1331, 1327, 396, 1326, 0, 608,
	1335, 1346, 1343, 1348, 1334, 1347, 1341, 1036, 655, 1338,
	1337, 1351, 1344, 1345, 601, 1350, 1289, 1342, 1340, 1339,
	1336, 0, 296, 297, 298, 299, 300, 301, 302, 303,
	304, 305, 307, 0, 308, 309, 310, 312, 313, 314,
	801, 315, 316, 317, 320, 321, 322, 324, 684, 325,
	326, 327, 328, 329, 330, 1314, 1292, 332, 333, 334,
	335, 336, 338, 340, 341, 342, 343, 344, 346, 348,
	1303, 1293, 1298, 1304, 1294, 1295, 1299, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 363, 365, 366, 367,
	368, 369, 370, 373, 0, 375, 377, 0, 378, 381,
	0, 382, 383, 384, 385, 386, 387, 388, 389, 1306,
	390, 0, 391, 392, 394, 0, 397, 398, 399, 400,
	401, 0, 402, 1315, 1264, 403, 404, 406, 407, 408,
	410, 411, 412, 413, 414, 415, 416, 417, 418, 419,
	420, 421, 0, 422, 423, 424, 426, 0, 427, 428,
	431, 432, 433, 434, 0, 436, 1316, 3272, 437, 438,
	439, 1296, 1297, 440, 441, 442, 443, 444, 445, 448,
	1329, 450, 451, 452, 453, 454, 455, 456, 686, 458,
	459, 460, 461, 462, 463, 464, 648, 1307, 465, 467,
	468, 1313, 652, 1308, 819, 483, 484, 485, 486, 487,
	488, 489, 491, 0, 493, 494, 495, 1309, 496, 497,
	498, 499, 0, 500, 501, 502, 503, 504, 506, 509,
	510, 511, 512, 0, 515, 516, 517, 518, 519, 520,
	521, 523, 524, 525, 527, 528, 529, 687, 530, 531,
	532, 533, 1267, 535, 536, 688, 538, 539, 541, 542,
	543, 544, 545, 546, 697, 1300, 548, 658, 549, 550,
	551, 552, 553, 0, 555, 556, 557, 558, 559, 560,
	563, 564, 565, 567, 568, 1310, 569, 570, 1301, 572,
	573, 822, 575, 576, 577, 578, 579, 3273, 698, 580,
	1311, 581, 1312, 582, 583, 584, 585, 586, 587, 588,
	590, 0, 1251, 592, 593, 594, 596, 597, 598, 599,
	602, 603, 604, 605, 606, 0, 607, 609, 611, 689,
	666, 1317, 1318, 1321, 1319, 1320, 1322, 1323, 1333, 612,
	613, 629, 480, 474, 430, 472, 473, 477, 478, 481,
	0, 0, 3271, 1305, 0, 0, 0, 1249, 0, 798,
	0, 1270, 784, 0, 1275, 1276, 1265, 770, 1255, 0,
	0, 0, 1256, 0, 0, 1245, 1246, 306, 0, 323,
	804, 0, 372, 409, 1260, 0, 1248, 469, 0, 522,
	526, 0, 615, 1280, 0, 1252, 0, 380, 1273, 809,
	0, 815, 1274, 821, 1272, 591, 0, 811, 812, 817,
	311, 1349, 614, 685, 0, 0, 0, 1266, 0, 0,
	0, 0, 0, 0, 0, 319, 0, 0, 0, 0,
	813, 810, 814, 820, 808, 818, 805, 816, 0, 513,
	447, 664, 540, 318, 364, 351, 393, 435, 547, 0,
	0, 425, 595, 360, 449, 0, 339, 482, 1302, 571,
	446, 0, 554, 574, 0, 466, 345, 505, 561, 562,
	802, 807, 0, 823, 0, 349, 350, 471, 331, 479,
	676, 642, 534, 492, 490, 0, 457, 514, 671, 1261,
	0, 379, 0, 374, 470, 610, 337, 589, 508, 475,
	429, 537, 566, 376, 361, 362, 405, 507, 395, 347,
	600, 1330, 1332, 1328, 1324, 1325, 1290, 1291, 1331, 1327,
	396, 1326, 0, 608, 1335, 1346, 1343, 1348, 1334, 1347,
	1341, 1036, 655, 1338, 1337, 1351, 1344, 1345, 601, 1350,
	1289, 1342, 1340, 1339, 1336, 0, 296, 297, 298, 299,
	300, 301, 302, 303, 304, 305, 307, 0, 308, 309,
	310, 312, 313, 314, 801, 315, 316, 317, 320, 321,
	322, 324, 684, 325, 326, 327, 328, 329, 330, 1314,
	1292, 332, 333, 334, 335, 336, 338, 340, 341, 342,
	343, 344, 346, 348, 1303, 1293, 1298, 1304, 1294, 1295,
	1299, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	363, 365, 366, 367, 368, 369, 370, 373, 0, 375,
	377, 0, 378, 381, 0, 382, 383, 384, 385, 386,
	387, 388, 389, 1306, 390, 0, 391, 392, 394, 0,
	397, 398, 399, 400, 401, 0, 402, 1315, 1264, 403,
	404, 406, 407, 408, 410, 411, 412, 413, 414, 415,
	416, 417, 418, 419, 420, 421, 0, 422, 423, 424,
	426, 0, 427, 428, 431, 432, 433, 434, 0, 436,
	1316, 0, 437, 438, 439, 1296, 1297, 440, 441, 442,
	443, 444, 445, 448, 1329, 450, 451, 452, 453, 454,
	455, 456, 686, 458, 459, 460, 461, 462, 463, 464,
	648, 1307, 465, 467, 468, 1313, 652, 1308, 819, 483,
	484, 485, 486, 487, 488, 489, 491, 0, 493, 494,
	495, 1309, 496, 497, 498, 499, 0, 500, 501, 502,
	503, 504, 506, 509, 510, 511, 512, 0, 515, 516,
	517, 518, 519, 520, 521, 523, 524, 525, 527, 528,
	529, 687, 530, 531, 532, 533, 1267, 535, 536, 688,
	538, 539, 541, 542, 543, 544, 545, 546, 697, 1300,
	548, 658, 549, 550, 551, 552, 553, 0, 555, 556,
	557, 558, 559, 560, 563, 564, 565, 567, 568, 1310,
	569, 570, 1301, 572, 573, 822, 575, 576, 577, 578,
	579, 0, 698, 580, 1311, 581, 1312, 582, 583, 584,
	585, 586, 587, 588, 590, 0, 1251, 592, 593, 594,
	596, 597, 598, 599, 602, 603, 604, 605, 606, 0,
	607, 609, 611, 689, 666, 1317, 1318, 1321, 1319, 1320,
	1322, 1323, 1333, 612, 613, 629, 480, 474, 430, 472,
	473, 477, 478, 481, 0, 0, 0, 1305, 0, 0,
	0, 1249, 0, 0, 798, 0, 1270, 784, 0, 1275,
	1276, 1265, 770, 1255, 0, 0, 1256, 0, 0, 1245,
	1246, 1243, 306, 0, 323, 804, 0, 372, 409, 1260,
	0, 1248, 469, 0, 522, 526, 0, 615, 1280, 0,
	1252, 0, 380, 1273, 809, 0, 815, 1274, 821, 1272,
	591, 0, 811, 812, 817, 311, 1349, 614, 685, 0,
	0, 0, 1266, 0, 0, 0, 0, 0, 0, 0,
	319, 0, 0, 0, 0, 813, 810, 814, 820, 808,
	818, 805, 816, 0, 513, 447, 664, 540, 318, 364,
	351, 393, 435, 547, 0, 0, 425, 595, 360, 449,
	0, 339, 482, 1302, 571, 446, 0, 554, 574, 0,
	466, 345, 505, 561, 562, 802, 807, 0, 823, 0,
	349, 350, 471, 331, 479, 676, 642, 534, 492, 490,
	0, 457, 514, 671, 1261, 0, 379, 0, 374, 470,
	610, 337, 589, 508, 475, 429, 537, 566, 376, 361,
	362, 405, 507, 395, 347, 600, 1330, 1332, 1328, 1324,
	1325, 1290, 1291, 1331, 1327, 396, 1326, 0, 608, 1335,
	1346, 1343, 1348, 1334, 1347, 1341, 1036, 655, 1338, 1337,
	1351, 1344, 1345, 601, 1350, 1289, 1342, 1340, 1339, 1336,
	0, 296, 297, 298, 299, 300, 301, 302, 303, 304,
	305, 307, 0, 308, 309, 310, 312, 313, 314, 801,
	315, 316, 317, 320, 321, 322, 324, 684, 325, 326,
	327, 328, 329, 330, 1314, 1292, 332, 333, 334, 335,
	336, 338, 340, 341, 342, 343, 344, 346, 348, 1303,
	1293, 1298, 1304, 1294, 1295, 1299, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 363, 365, 366, 367, 368,
	369, 370, 373, 0, 375, 377, 0, 378, 381, 0,
	382, 383, 384, 385, 386, 387, 388, 389, 1306, 390,
	0, 391, 392, 394, 0, 397, 398, 399, 400, 401,
	0, 402, 1315, 1264, 403, 404, 406, 407, 408, 410,
	411, 412, 413, 414, 415, 416, 417, 418, 419, 420,
	421, 0, 422, 423, 424, 426, 0, 427, 428, 431,
	432, 433, 434, 0, 436, 1316, 0, 437, 438, 439,
	1296, 1297, 440, 441, 442, 443, 444, 445, 448, 1329,
	450, 451, 452, 453, 454, 455, 456, 686, 458, 459,
	460, 461, 462, 463, 464, 648, 1307, 465, 467, 468,
	1313, 652, 1308, 819, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 493, 494, 495, 1309, 496, 497, 498,
	499, 0, 500, 501, 502, 503, 504, 506, 509, 510,
	511, 512, 0, 515, 516, 517, 518, 519, 520, 521,
	523, 524, 525, 527, 528, 529, 687, 530, 531, 532,
	533, 1267, 535, 536, 688, 538, 539, 541, 542, 543,
	544, 545, 546, 697, 1300, 548, 658, 549, 550, 551,
	552, 553, 0, 555, 556, 557, 558, 559, 560, 563,
	564, 565, 567, 568, 1310, 569, 570, 1301, 572, 573,
	822, 575, 576, 577, 578, 579, 0, 698, 580, 1311,
	581, 1312, 582, 583, 584, 585, 586, 587, 588, 590,
	0, 1251, 592, 593, 594, 596, 597, 598, 599, 602,
	603, 604, 605, 606, 0, 607, 609, 611, 689, 666,
	1317, 1318, 1321, 1319, 1320, 1322, 1323, 1333, 612, 613,
	629, 480, 474, 430, 472, 473, 477, 478, 481, 0,
	0, 0, 1305, 0, 0, 0, 1249, 0, 798, 0,
	1270, 784, 0, 1275, 1276, 1265, 770, 1255, 0, 2491,
	3217, 1256, 0, 0, 1245, 1246, 306, 0, 323, 804,
	0, 372, 409, 1260, 0, 1248, 469, 0, 522, 526,
	0, 615, 1280, 0, 1252, 0, 380, 1273, 809, 0,
	815, 1274, 821, 1272, 591, 0, 811, 812, 817, 311,
	1349, 614, 685, 0, 0, 3178, 1266, 0, 0, 0,
	0, 0, 0, 0, 319, 0, 0, 0, 0, 813,
	810, 814, 820, 808, 818, 805, 816, 0, 513, 447,
	664, 540, 318, 364, 351, 393, 435, 547, 0, 0,
	425, 595, 360, 449, 0, 339, 482, 1302, 571, 446,
	0, 554, 574, 0, 466, 345, 505, 561, 562, 802,
	807, 0, 823, 0, 349, 350, 471, 331, 479, 676,
	642, 534, 492, 490, 0, 457, 514, 671, 1261, 0,
	379, 0, 374, 470, 610, 337, 589, 508, 475, 429,
	537, 566, 376, 361, 362, 405, 507, 395, 347, 600,
	1330, 1332, 1328, 1324, 1325, 1290, 1291, 1331, 1327, 396,
	1326, 0, 608, 1335, 1346, 1343, 1348, 1334, 1347, 1341,
	1036, 655, 1338, 1337, 1351, 1344, 1345, 601, 1350, 1289,
	1342, 1340, 1339, 1336, 0, 296, 297, 298, 299, 300,
	301, 302, 303, 304, 305, 307, 0, 308, 309, 310,
	312, 313, 314, 801, 315, 316, 317, 320, 321, 322,
	324, 684, 325, 326, 327, 328, 329, 330, 1314, 1292,
	332, 333, 334, 335, 336, 338, 340, 341, 342, 343,
	344, 346, 348, 1303, 1293, 1298, 1304, 1294, 1295, 1299,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 363,
	365, 366, 367, 368, 369, 370, 373, 0, 375, 377,
	0, 378, 381, 0, 382, 383, 384, 385, 386, 387,
	388, 389, 1306, 390, 0, 391, 392, 394, 0, 397,
	398, 399, 400, 401, 0, 402, 1315, 1264, 403, 404,
	406, 407, 408, 410, 411, 412, 413, 414, 415, 416,
	417, 418, 419, 420, 421, 0, 422, 423, 424, 426,
	0, 427, 428, 431, 432, 433, 434, 0, 436, 1316,
	0, 437, 438, 439, 1296, 1297, 440, 441, 442, 443,
	444, 445, 448, 1329, 450, 451, 452, 453, 454, 455,
	456, 686, 458, 459, 460, 461, 462, 463, 464, 648,
	1307, 465, 467, 468, 1313, 652, 1308, 819, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 493, 494, 495,
	1309, 496, 497, 498, 499, 0, 500, 501, 502, 503,
	504, 506, 509, 510, 511, 512, 0, 515, 516, 517,
	518, 519, 520, 521, 523, 524, 525, 527, 528, 529,
	687, 530, 531, 532, 533, 1267, 535, 536, 688, 538,
	539, 541, 542, 543, 544, 545, 546, 697, 1300, 548,
	658, 549, 550, 551, 552, 553, 0, 555, 556, 557,
	558, 559, 560, 563, 564, 565, 567, 568, 1310, 569,
	570, 1301, 572, 573, 822, 575, 576, 577, 578, 579,
	0, 698, 580, 1311, 581, 1312, 582, 583, 584, 585,
	586, 587, 588, 590, 0, 1251, 592, 593, 594, 596,
	597, 598, 599, 602, 603, 604, 605, 606, 0, 607,
	609, 611, 689, 666, 1317, 1318, 1321, 1319, 1320, 1322,
	1323, 1333, 612, 613, 629, 480, 474, 430, 472, 473,
	477, 478, 481, 0, 0, 0, 1305, 0, 0, 0,
	1249, 0, 798, 0, 1270, 784, 0, 1275, 1276, 1265,
	770, 1255, 0, 0, 0, 1256, 0, 0, 1245, 1246,
	306, 0, 323, 804, 0, 372, 409, 1260, 0, 1248,
	469, 0, 522, 526, 0, 615, 1280, 0, 1252, 0,
	380, 1273, 809, 0, 815, 1274, 821, 1272, 591, 0,
	811, 812, 817, 311, 1349, 614, 685, 0, 0, 0,
	1266, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 813, 810, 814, 820, 808, 818, 805,
	816, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 1302, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 802, 807, 0, 823, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 1261, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 1330, 1332, 1328, 1324, 1325, 1290,
	1291, 1331, 1327, 396, 1326, 0, 608, 1335, 1346, 1343,
	1348, 1334, 1347, 1341, 1036, 655, 1338, 1337, 1351, 1344,
	1345, 601, 1350, 1289, 1342, 1340, 1339, 1336, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 801, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 1314, 1292, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 1303, 1293, 1298,
	1304, 1294, 1295, 1299, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 1306, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	1315, 1264, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 1316, 0, 437, 438, 439, 1296, 1297,
	440, 441, 442, 443, 444, 445, 448, 1329, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 1307, 465, 467, 468, 1313, 652,
	1308, 819, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 1309, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 1267,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 1300, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 1310, 569, 570, 1301, 572, 573, 822, 575,
	576, 577, 578, 579, 0, 698, 580, 1311, 581, 1312,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 1251,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 1317, 1318,
	1321, 1319, 1320, 1322, 1323, 1333, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 0, 0, 0,
	1305, 0, 0, 0, 1249, 0, 798, 0, 1270, 784,
	0, 1275, 1276, 1265, 770, 1255, 0, 0, 0, 1256,
	4545, 0, 1245, 1246, 306, 0, 323, 804, 0, 372,
	409, 1260, 0, 1248, 469, 0, 522, 526, 0, 615,
	1280, 0, 1252, 0, 380, 1273, 809, 0, 815, 1274,
	821, 1272, 591, 0, 811, 812, 817, 311, 1349, 614,
	685, 0, 0, 0, 1266, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 0, 0, 813, 810, 814,
	820, 808, 818, 805, 816, 0, 513, 447, 664, 540,
	318, 364, 351, 393, 435, 547, 0, 0, 425, 595,
	360, 449, 0, 339, 482, 1302, 571, 446, 0, 554,
	574, 0, 466, 345, 505, 561, 562, 802, 807, 0,
	823, 0, 349, 350, 471, 331, 479, 676, 642, 534,
	492, 490, 0, 457, 514, 671, 1261, 0, 379, 0,
	374, 470, 610, 337, 589, 508, 475, 429, 537, 566,
	376, 361, 362, 405, 507, 395, 347, 600, 1330, 1332,
	1328, 1324, 1325, 1290, 1291, 1331, 1327, 396, 1326, 0,
	608, 1335, 1346, 1343, 1348, 1334, 1347, 1341, 1036, 655,
	1338, 1337, 1351, 1344, 1345, 601, 1350, 1289, 1342, 1340,
	1339, 1336, 0, 296, 297, 298, 299, 300, 301, 302,
	303, 304, 305, 307, 0, 308, 309, 310, 312, 313,
	314, 801, 315, 316, 317, 320, 321, 322, 324, 684,
	325, 326, 327, 328, 329, 330, 1314, 1292, 332, 333,
	334, 335, 336, 338, 340, 341, 342, 343, 344, 346,
	348, 1303, 1293, 1298, 1304, 1294, 1295, 1299, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 363, 365, 366,
	367, 368, 369, 370, 373, 0, 375, 377, 0, 378,
	381, 0, 382, 383, 384, 385, 386, 387, 388, 389,
	1306, 390, 0, 391, 392, 394, 0, 397, 398, 399,
	400, 401, 0, 402, 1315, 1264, 403, 404, 406, 407,
	408, 410, 411, 412, 413, 414, 415, 416, 417, 418,
	419, 420, 421, 0, 422, 423, 424, 426, 0, 427,
	428, 431, 432, 433, 434, 0, 436, 1316, 0, 437,
	438, 439, 1296, 1297, 440, 441, 442, 443, 444, 445,
	448, 1329, 450, 451, 452, 453, 454, 455, 456, 686,
	458, 459, 460, 461, 462, 463, 464, 648, 1307, 465,
	467, 468, 1313, 652, 1308, 819, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 493, 494, 495, 1309, 496,
	497, 498, 499, 0, 500, 501, 502, 503, 504, 506,
	509, 510, 511, 512, 0, 515, 516, 517, 518, 519,
	520, 521, 523, 524, 525, 527, 528, 529, 687, 530,
	531, 532, 533, 1267, 535, 536, 688, 538, 539, 541,
	542, 543, 544, 545, 546, 697, 1300, 548, 658, 549,
	550, 551, 552, 553, 0, 555, 556, 557, 558, 559,
	560, 563, 564, 565, 567, 568, 1310, 569, 570, 1301,
	572, 573, 822, 575, 576, 577, 578, 579, 0, 698,
	580, 1311, 581, 1312, 582, 583, 584, 585, 586, 587,
	588, 590, 0, 1251, 592, 593, 594, 596, 597, 598,
	599, 602, 603, 604, 605, 606, 0, 607, 609, 611,
	689, 666, 1317, 1318, 1321, 1319, 1320, 1322, 1323, 1333,
	612, 613, 629, 480, 474, 430, 472, 473, 477, 478,
	481, 0, 0, 0, 1305, 0, 0, 0, 1249, 0,
	798, 0, 1270, 784, 0, 1275, 1276, 1265, 770, 1255,
	0, 0, 0, 1256, 4508, 0, 1245, 1246, 306, 0,
	323, 804, 0, 372, 409, 1260, 0, 1248, 469, 0,
	522, 526, 0, 615, 1280, 0, 1252, 0, 380, 1273,
	809, 0, 815, 1274, 821, 1272, 591, 0, 811, 812,
	817, 311, 1349, 614, 685, 0, 0, 0, 1266, 0,
	3276, 0, 0, 0, 0, 0, 319, 0, 0, 0,
	0, 813, 810, 814, 820, 808, 818, 805, 816, 0,
	513, 447, 664, 540, 318, 364, 351, 393, 435, 547,
	0, 0, 425, 595, 360, 449, 0, 339, 482, 1302,
	571, 446, 0, 554, 574, 0, 466, 345, 505, 561,
	562, 802, 807, 0, 823, 0, 349, 350, 471, 331,
	479, 676, 642, 534, 492, 490, 0, 457, 514, 671,
	1261, 0, 379, 0, 374, 470, 610, 337, 589, 508,
	475, 429, 537, 566, 376, 361, 362, 405, 507, 395,
	347, 600, 1330, 1332, 1328, 1324, 1325, 1290, 1291, 1331,
	1327, 396, 1326, 0, 608, 1335, 1346, 1343, 1348, 1334,
	1347, 1341, 1036, 655, 1338, 1337, 1351, 1344, 1345, 601,
	1350, 1289, 1342, 1340, 1339, 1336, 0, 296, 297, 298,
	299, 300, 301, 302, 303, 304, 305, 307, 0, 308,
	309, 310, 312, 313, 314, 801, 315, 316, 317, 320,
	321, 322, 324, 684, 325, 326, 327, 328, 329, 330,
	1314, 1292, 332, 333, 334, 335, 336, 338, 340, 341,
	342, 343, 344, 346, 348, 1303, 1293, 1298, 1304, 1294,
	1295, 1299, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 363, 365, 366, 367, 368, 369, 370, 373, 0,
	375, 377, 0, 378, 381, 0, 382, 383, 384, 385,
	386, 387, 388, 389, 1306, 390, 0, 391, 392, 394,
	0, 397, 398, 399, 400, 401, 0, 402, 1315, 1264,
	403, 404, 406, 407, 408, 410, 411, 412, 413, 414,
	415, 416, 417, 418, 419, 420, 421, 0, 422, 423,
	424, 426, 0, 427, 428, 431, 432, 433, 434, 0,
	436, 1316, 0, 437, 438, 439, 1296, 1297, 440, 441,
	442, 443, 444, 445, 448, 1329, 450, 451, 452, 453,
	454, 455, 456, 686, 458, 459, 460, 461, 462, 463,
	464, 648, 1307, 465, 467, 468, 1313, 652, 1308, 819,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 493,
	494, 495, 1309, 496, 497, 498, 499, 0, 500, 501,
	502, 503, 504, 506, 509, 510, 511, 512, 0, 515,
	516, 517, 518, 519, 520, 521, 523, 524, 525, 527,
	528, 529, 687, 530, 531, 532, 533, 1267, 535, 536,
	688, 538, 539, 541, 542, 543, 544, 545, 546, 697,
	1300, 548, 658, 549, 550, 551, 552, 553, 0, 555,
	556, 557, 558, 559, 560, 563, 564, 565, 567, 568,
	1310, 569, 570, 1301, 572, 573, 822, 575, 576, 577,
	578, 579, 0, 698, 580, 1311, 581, 1312, 582, 583,
	584, 585, 586, 587, 588, 590, 0, 1251, 592, 593,
	594, 596, 597, 598, 599, 602, 603, 604, 605, 606,
	0, 607, 609, 611, 689, 666, 1317, 1318, 1321, 1319,
	1320, 1322, 1323, 1333, 612, 613, 629, 480, 474, 430,
	472, 473, 477, 478, 481, 0, 0, 0, 1305, 0,
	0, 0, 1249, 0, 798, 0, 1270, 784, 0, 1275,
	1276, 1265, 770, 1255, 0, 0, 0, 1256, 0, 0,
	1245, 1246, 306, 0, 323, 804, 0, 372, 409, 1260,
	0, 1248, 469, 0, 522, 526, 0, 615, 1280, 0,
	1252, 0, 380, 1273, 809, 0, 815, 1274, 821, 1272,
	591, 0, 811, 812, 817, 311, 1349, 614, 685, 0,
	0, 0, 1266, 0, 0, 0, 0, 0, 0, 0,
	319, 0, 0, 0, 0, 813, 810, 814, 820, 808,
	818, 805, 816, 0, 513, 447, 664, 540, 318, 364,
	351, 393, 435, 547, 0, 0, 425, 595, 360, 449,
	0, 339, 482, 1302, 571, 446, 0, 554, 574, 0,
	466, 345, 505, 561, 562, 802, 807, 0, 823, 0,
	349, 350, 471, 331, 479, 676, 642, 534, 492, 490,
	0, 457, 514, 671, 1261, 0, 379, 0, 374, 470,
	610, 337, 589, 508, 475, 429, 537, 566, 376, 361,
	362, 405, 507, 395, 347, 600, 1330, 1332, 1328, 1324,
	1325, 1290, 1291, 1331, 1327, 396, 1326, 0, 608, 1335,
	1346, 1343, 1348, 1334, 1347, 1341, 1036, 655, 1338, 1337,
	1351, 1344, 1345, 601, 1350, 1289, 1342, 1340, 1339, 1336,
	3876, 296, 297, 298, 299, 300, 301, 302, 303, 304,
	305, 307, 0, 308, 309, 310, 312, 313, 314, 801,
	315, 316, 317, 320, 321, 322, 324, 684, 325, 326,
	327, 328, 329, 330, 1314, 1292, 332, 333, 334, 335,
	336, 338, 340, 341, 342, 343, 344, 346, 348, 1303,
	1293, 1298, 1304, 1294, 1295, 1299, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 363, 365, 366, 367, 368,
	369, 370, 373, 0, 375, 377, 0, 378, 381, 0,
	382, 383, 384, 385, 386, 387, 388, 389, 1306, 390,
	0, 391, 392, 394, 0, 397, 398, 399, 400, 401,
	0, 402, 1315, 1264, 403, 404, 406, 407, 408, 410,
	411, 412, 413, 414, 415, 416, 417, 418, 419, 420,
	421, 0, 422, 423, 424, 426, 0, 427, 428, 431,
	432, 433, 434, 0, 436, 1316, 0, 437, 438, 439,
	1296, 1297, 440, 441, 442, 443, 444, 445, 448, 1329,
	450, 451, 452, 453, 454, 455, 456, 686, 458, 459,
	460, 461, 462, 463, 464, 648, 1307, 465, 467, 468,
	1313, 652, 1308, 819, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 493, 494, 495, 1309, 496, 497, 498,
	499, 0, 500, 501, 502, 503, 504, 506, 509, 510,
	511, 512, 0, 515, 516, 517, 518, 519, 520, 521,
	523, 524, 525, 527, 528, 529, 687, 530, 531, 532,
	533, 1267, 535, 536, 688, 538, 539, 541, 542, 543,
	544, 545, 546, 697, 1300, 548, 658, 549, 550, 551,
	552, 553, 0, 555, 556, 557, 558, 559, 560, 563,
	564, 565, 567, 568, 1310, 569, 570, 1301, 572, 573,
	822, 575, 576, 577, 578, 579, 0, 698, 580, 1311,
	581, 1312, 582, 583, 584, 585, 586, 587, 588, 590,
	0, 1251, 592, 593, 594, 596, 597, 598, 599, 602,
	603, 604, 605, 606, 0, 607, 609, 611, 689, 666,
	1317, 1318, 1321, 1319, 1320, 1322, 1323, 1333, 612, 613,
	629, 480, 474, 430, 472, 473, 477, 478, 481, 0,
	0, 0, 1305, 0, 0, 0, 1249, 0, 798, 0,
	1270, 784, 0, 1275, 1276, 1265, 770, 1255, 0, 0,
	0, 1256, 0, 0, 1245, 1246, 306, 0, 323, 804,
	0, 372, 409, 1260, 0, 1248, 469, 0, 522, 526,
	0, 615, 1280, 0, 1252, 0, 380, 1273, 809, 0,
	815, 1274, 821, 1272, 591, 0, 811, 812, 817, 311,
	1349, 614, 685, 0, 0, 0, 1266, 0, 0, 0,
	0, 0, 0, 0, 319, 0, 0, 0, 0, 813,
	810, 814, 820, 808, 818, 805, 816, 0, 513, 447,
	664, 540, 318, 364, 351, 393, 435, 547, 0, 0,
	425, 595, 360, 449, 3295, 339, 482, 1302, 571, 446,
	0, 554, 574, 0, 466, 345, 505, 561, 562, 802,
	807, 0, 823, 0, 349, 350, 471, 331, 479, 676,
	642, 534, 492, 490, 0, 457, 514, 671, 1261, 0,
	379, 0, 374, 470, 610, 337, 589, 508, 475, 429,
	537, 566, 376, 361, 362, 405, 507, 395, 347, 600,
	1330, 1332, 1328, 1324, 1325, 1290, 1291, 1331, 1327, 396,
	1326, 0, 608, 1335, 1346, 1343, 1348, 1334, 1347, 1341,
	1036, 655, 1338, 1337, 1351, 1344, 1345, 601, 1350, 1289,
	1342, 1340, 1339, 1336, 0, 296, 297, 298, 299, 300,
	301, 302, 303, 304, 305, 307, 0, 308, 309, 310,
	312, 313, 314, 801, 315, 316, 317, 320, 321, 322,
	324, 684, 325, 326, 327, 328, 329, 330, 1314, 1292,
	332, 333, 334, 335, 336, 338, 340, 341, 342, 343,
	344, 346, 348, 1303, 1293, 1298, 1304, 1294, 1295, 1299,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 363,
	365, 366, 367, 368, 369, 370, 373, 0, 375, 377,
	0, 378, 381, 0, 382, 383, 384, 385, 386, 387,
	388, 389, 1306, 390, 0, 391, 392, 394, 0, 397,
	398, 399, 400, 401, 0, 402, 1315, 1264, 403, 404,
	406, 407, 408, 410, 411, 412, 413, 414, 415, 416,
	417, 418, 419, 420, 421, 0, 422, 423, 424, 426,
	0, 427, 428, 431, 432, 433, 434, 0, 436, 1316,
	0, 437, 438, 439, 1296, 1297, 440, 441, 442, 443,
	444, 445, 448, 1329, 450, 451, 452, 453, 454, 455,
	456, 686, 458, 459, 460, 461, 462, 463, 464, 648,
	1307, 465, 467, 468, 1313, 652, 1308, 819, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 493, 494, 495,
	1309, 496, 497, 498, 499, 0, 500, 501, 502, 503,
	504, 506, 509, 510, 511, 512, 0, 515, 516, 517,
	518, 519, 520, 521, 523, 524, 525, 527, 528, 529,
	687, 530, 531, 532, 533, 1267, 535, 536, 688, 538,
	539, 541, 542, 543, 544, 545, 546, 697, 1300, 548,
	658, 549, 550, 551, 552, 553, 0, 555, 556, 557,
	558, 559, 560, 563, 564, 565, 567, 568, 1310, 569,
	570, 1301, 572, 573, 822, 575, 576, 577, 578, 579,
	0, 698, 580, 1311, 581, 1312, 582, 583, 584, 585,
	586, 587, 588, 590, 0, 1251, 592, 593, 594, 596,
	597, 598, 599, 602, 603, 604, 605, 606, 0, 607,
	609, 611, 689, 666, 1317, 1318, 1321, 1319, 1320, 1322,
	1323, 1333, 612, 613, 629, 480, 474, 430, 472, 473,
	477, 478, 481, 0, 0, 0, 1305, 0, 0, 0,
	1249, 0, 798, 0, 1270, 784, 0, 1275, 1276, 1265,
	770, 1255, 0, 0, 0, 1256, 0, 0, 1245, 1246,
	306, 0, 323, 804, 0, 372, 409, 1260, 0, 1248,
	469, 0, 522, 526, 0, 615, 1280, 0, 1252, 0,
	380, 1273, 809, 0, 815, 1274, 821, 1272, 591, 0,
	811, 812, 817, 311, 1349, 614, 685, 0, 0, 0,
	1266, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 813, 810, 814, 820, 808, 818, 805,
	816, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 1302, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 802, 807, 0, 823, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 1261, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 1330, 1332, 1328, 1324, 1325, 1290,
	1291, 1331, 1327, 396, 1326, 0, 608, 1335, 1346, 1343,
	1348, 1334, 1347, 1341, 1036, 655, 1338, 1337, 1351, 1344,
	1345, 601, 1350, 1289, 1342, 1340, 1339, 1336, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 801, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 1314, 1292, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 1303, 1293, 1298,
	1304, 1294, 1295, 1299, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 1306, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	1315, 1264, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 1316, 0, 437, 438, 439, 1296, 1297,
	440, 441, 442, 443, 444, 445, 448, 1329, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 1307, 465, 467, 468, 1313, 652,
	1308, 819, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 1309, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 1267,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 1300, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 1310, 569, 570, 1301, 572, 573, 822, 575,
	576, 577, 578, 579, 0, 698, 580, 1311, 581, 1312,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 1251,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 1317, 1318,
	1321, 1319, 1320, 1322, 1323, 1333, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 0, 0, 0,
	1305, 0, 0, 0, 1249, 0, 0, 798, 0, 1270,
	784, 0, 1275, 1276, 1265, 770, 1255, 0, 0, 1256,
	3222, 0, 1245, 1246, 1976, 306, 0, 323, 804, 0,
	372, 409, 1260, 0, 1248, 469, 0, 522, 526, 0,
	615, 1280, 0, 1252, 0, 380, 1273, 809, 0, 815,
	1274, 821, 1272, 591, 0, 811, 812, 817, 311, 1349,
	614, 685, 0, 0, 0, 1266, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 813, 810,
	814, 820, 808, 818, 805, 816, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 1302, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 802, 807,
	0, 823, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 1261, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 1330,
	1332, 1328, 1324, 1325, 1290, 1291, 1331, 1327, 396, 1326,
	0, 608, 1335, 1346, 1343, 1348, 1334, 1347, 1341, 1036,
	655, 1338, 1337, 1351, 1344, 1345, 601, 1350, 1289, 1342,
	1340, 1339, 1336, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 801, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 1314, 1292, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 1303, 1293, 1298, 1304, 1294, 1295, 1299, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 1306, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 1315, 1264, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 1316, 0,
	437, 438, 439, 1296, 1297, 440, 441, 442, 443, 444,
	445, 448, 1329, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 1307,
	465, 467, 468, 1313, 652, 1308, 819, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 1309,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 1267, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 1300, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 1310, 569, 570,
	1301, 572, 573, 822, 575, 576, 577, 578, 579, 0,
	698, 580, 1311, 581, 1312, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 1251, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 1317, 1318, 1321, 1319, 1320, 1322, 1323,
	1333, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 0, 0, 0, 1305, 0, 0, 0, 1249,
	0, 798, 0, 1270, 784, 0, 1275, 1276, 1265, 770,
	1255, 0, 0, 0, 1256, 0, 0, 1245, 1246, 306,
	0, 323, 804, 0, 372, 409, 1260, 0, 1248, 469,
	0, 522, 526, 0, 615, 1280, 0, 1252, 0, 380,
	1273, 809, 0, 815, 1274, 821, 1272, 591, 0, 811,
	812, 817, 311, 1349, 614, 685, 0, 0, 0, 1266,
	0, 0, 0, 0, 0, 0, 0, 319, 0, 0,
	0, 0, 813, 810, 814, 820, 808, 818, 805, 816,
	0, 513, 447, 664, 540, 318, 364, 351, 393, 435,
	547, 0, 0, 425, 595, 360, 449, 0, 339, 482,
	1302, 571, 446, 0, 554, 574, 0, 466, 345, 505,
	561, 562, 802, 807, 0, 823, 0, 349, 350, 471,
	331, 479, 676, 642, 534, 492, 490, 0, 457, 514,
	671, 1261, 0, 379, 0, 374, 470, 610, 337, 589,
	508, 475, 429, 537, 566, 376, 361, 362, 405, 507,
	395, 347, 600, 1330, 1332, 1328, 1324, 1325, 1290, 1291,
	1331, 1327, 396, 1326, 0, 608, 1335, 1346, 1343, 1348,
	1334, 1347, 1341, 1036, 655, 1338, 1337, 1351, 1344, 1345,
	601, 1350, 1289, 1342, 1340, 1339, 1336, 0, 296, 297,
	298, 299, 300, 301, 302, 303, 304, 305, 307, 0,
	308, 309, 310, 312, 313, 314, 801, 315, 316, 317,
	320, 321, 322, 324, 684, 325, 326, 327, 328, 329,
	330, 1314, 1292, 332, 333, 334, 335, 336, 338, 340,
	341, 342, 343, 344, 346, 348, 1303, 1293, 1298, 1304,
	1294, 1295, 1299, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 363, 365, 366, 367, 368, 369, 370, 373,
	0, 375, 377, 0, 378, 381, 0, 382, 383, 384,
	385, 386, 387, 388, 389, 1306, 390, 0, 391, 392,
	394, 0, 397, 398, 399, 400, 401, 0, 402, 1315,
	1264, 403, 404, 406, 407, 408, 410, 411, 412, 413,
	414, 415, 416, 417, 418, 419, 420, 421, 0, 422,
	423, 424, 426, 0, 427, 428, 431, 432, 433, 434,
	0, 436, 1316, 0, 437, 438, 439, 1296, 1297, 440,
	441, 442, 443, 444, 445, 448, 1329, 450, 451, 452,
	453, 454, 455, 456, 686, 458, 459, 460, 461, 462,
	463, 464, 648, 1307, 465, 467, 468, 1313, 652, 1308,
	819, 483, 484, 485, 486, 487, 488, 489, 491, 0,
	493, 494, 495, 1309, 496, 497, 498, 499, 0, 500,
	501, 502, 503, 504, 506, 509, 510, 511, 512, 0,
	515, 516, 517, 518, 519, 520, 521, 523, 524, 525,
	527, 528, 529, 687, 530, 531, 532, 533, 1267, 535,
	536, 688, 538, 539, 541, 542, 543, 544, 545, 546,
	697, 1300, 548, 658, 549, 550, 551, 552, 553, 0,
	555, 556, 557, 558, 559, 560, 563, 564, 565, 567,
	568, 1310, 569, 570, 1301, 572, 573, 822, 575, 576,
	577, 578, 579, 0, 698, 580, 1311, 581, 1312, 582,
	583, 584, 585, 586, 587, 588, 590, 0, 1251, 592,
	593, 594, 596, 597, 598, 599, 602, 603, 604, 605,
	606, 0, 607, 609, 611, 689, 666, 1317, 1318, 1321,
	1319, 1320, 1322, 1323, 1333, 612, 613, 629, 480, 474,
	430, 472, 473, 477, 478, 481, 0, 0, 0, 1305,
	0, 0, 0, 1249, 0, 798, 0, 1270, 784, 0,
	1275, 1276, 1265, 770, 1255, 0, 0, 0, 1256, 0,
	0, 1245, 1246, 306, 0, 323, 804, 0, 372, 409,
	1260, 0, 1248, 469, 0, 522, 526, 0, 615, 1280,
	0, 1252, 0, 380, 1273, 809, 0, 815, 1274, 821,
	1272, 591, 0, 811, 812, 817, 311, 1349, 614, 685,
	0, 0, 0, 1266, 0, 0, 0, 0, 0, 0,
	0, 319, 0, 0, 0, 0, 813, 810, 814, 820,
	808, 818, 805, 816, 0, 513, 447, 664, 540, 318,
	364, 351, 393, 435, 547, 0, 0, 425, 595, 360,
	449, 0, 339, 482, 1302, 571, 446, 0, 554, 574,
	0, 466, 345, 505, 561, 562, 802, 807, 0, 823,
	0, 5757, 350, 471, 331, 479, 676, 642, 534, 492,
	490, 0, 457, 514, 671, 1261, 0, 379, 0, 374,
	470, 610, 337, 589, 508, 475, 429, 537, 566, 376,
	361, 362, 405, 507, 395, 347, 600, 1330, 1332, 1328,
	1324, 1325, 1290, 1291, 1331, 1327, 396, 1326, 0, 608,
	1335, 1346, 1343, 1348, 1334, 1347, 1341, 1036, 655, 1338,
	1337, 1351, 1344, 1345, 601, 1350, 1289, 1342, 1340, 1339,
	1336, 0, 296, 297, 298, 299, 300, 301, 302, 303,
	304, 305, 307, 0, 308, 309, 310, 312, 313, 314,
	801, 315, 316, 317, 320, 321, 322, 324, 684, 325,
	326, 327, 328, 329, 330, 1314, 1292, 332, 333, 334,
	335, 336, 338, 340, 341, 342, 343, 344, 346, 348,
	1303, 1293, 1298, 1304, 1294, 1295, 1299, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 363, 365, 366, 367,
	368, 369, 370, 373, 0, 375, 377, 0, 378, 381,
	0, 382, 383, 384, 385, 386, 387, 388, 389, 1306,
	390, 0, 391, 392, 394, 0, 397, 398, 399, 400,
	401, 0, 402, 1315, 1264, 403, 404, 406, 407, 408,
	410, 411, 412, 413, 414, 415, 416, 417, 418, 419,
	420, 421, 0, 422, 423, 424, 426, 0, 427, 428,
	431, 432, 433, 434, 0, 436, 1316, 0, 437, 438,
	439, 1296, 1297, 440, 441, 442, 443, 444, 445, 448,
	1329, 450, 451, 452, 453, 454, 455, 456, 686, 458,
	459, 460, 461, 462, 463, 464, 648, 1307, 465, 467,
	468, 1313, 652, 1308, 819, 483, 484, 485, 486, 487,
	488, 489, 491, 0, 493, 494, 495, 1309, 496, 497,
	498, 499, 0, 500, 501, 502, 503, 504, 506, 509,
	510, 511, 512, 0, 515, 516, 517, 518, 519, 520,
	521, 523, 524, 525, 527, 528, 529, 687, 530, 531,
	532, 533, 1267, 535, 536, 688, 538, 539, 541, 542,
	543, 544, 545, 546, 697, 1300, 548, 658, 549, 550,
	551, 552, 553, 0, 555, 556, 557, 558, 559, 560,
	563, 564, 565, 567, 568, 1310, 569, 570, 1301, 572,
	573, 822, 575, 576, 577, 578, 579, 0, 698, 580,
	1311, 581, 1312, 582, 583, 584, 585, 586, 5756, 588,
	590, 0, 1251, 592, 593, 594, 596, 597, 598, 599,
	602, 603, 604, 605, 606, 0, 607, 609, 611, 689,
	666, 1317, 1318, 1321, 1319, 1320, 1322, 1323, 1333, 612,
	613, 629, 480, 474, 430, 472, 473, 477, 478, 481,
	0, 0, 0, 1305, 0, 0, 0, 1249, 0, 798,
	0, 1270, 784, 0, 1275, 1276, 1265, 770, 1255, 0,
	0, 0, 1256, 0, 0, 1245, 1246, 306, 0, 323,
	804, 0, 372, 409, 1260, 0, 1248, 469, 0, 522,
	526, 0, 615, 1280, 0, 1252, 0, 380, 1273, 809,
	0, 815, 1274, 821, 1272, 591, 0, 811, 812, 817,
	311, 1349, 614, 685, 0, 0, 0, 1266, 0, 0,
	0, 0, 0, 0, 0, 319, 0, 0, 0, 0,
	813, 810, 814, 820, 808, 818, 805, 816, 0, 513,
	447, 664, 540, 318, 364, 351, 393, 435, 547, 0,
	0, 425, 595, 360, 449, 0, 339, 482, 1302, 571,
	446, 0, 554, 574, 0, 466, 345, 505, 561, 562,
	802, 807, 0, 823, 0, 349, 350, 471, 331, 479,
	676, 642, 534, 492, 490, 0, 457, 514, 671, 1261,
	0, 379, 0, 374, 470, 610, 337, 589, 508, 475,
	429, 537, 566, 376, 361, 362, 405, 507, 395, 347,
	600, 1330, 1332, 1328, 1324, 1325, 1290, 1291, 1331, 1327,
	396, 1326, 0, 608, 1335, 1346, 1343, 1348, 1334, 1347,
	1341, 1036, 655, 1338, 1337, 1351, 1344, 1345, 601, 1350,
	1289, 1342, 1340, 1339, 1336, 0, 296, 297, 298, 299,
	300, 301, 302, 303, 304, 305, 307, 0, 308, 309,
	310, 312, 313, 314, 801, 315, 316, 317, 320, 321,
	322, 324, 684, 325, 326, 327, 328, 329, 330, 1314,
	1292, 332, 333, 334, 335, 336, 338, 340, 341, 342,
	343, 344, 346, 5561, 1303, 1293, 1298, 1304, 1294, 1295,
	1299, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	363, 365, 366, 367, 368, 369, 370, 373, 0, 375,
	377, 0, 378, 381, 0, 382, 383, 384, 385, 386,
	387, 388, 389, 1306, 390, 0, 391, 392, 394, 0,
	397, 398, 399, 400, 401, 0, 402, 1315, 5563, 403,
	404, 406, 407, 408, 410, 411, 412, 413, 414, 415,
	416, 417, 418, 419, 420, 421, 0, 422, 423, 424,
	426, 0, 427, 428, 431, 432, 433, 434, 0, 436,
	1316, 0, 437, 438, 439, 1296, 1297, 440, 441, 442,
	443, 444, 445, 448, 1329, 450, 451, 452, 453, 454,
	455, 456, 686, 458, 459, 460, 461, 462, 463, 464,
	648, 1307, 465, 467, 468, 1313, 652, 1308, 819, 483,
	484, 485, 486, 487, 488, 489, 491, 0, 493, 494,
	495, 1309, 496, 497, 498, 499, 0, 500, 501, 502,
	503, 504, 506, 509, 510, 511, 512, 0, 515, 516,
	517, 518, 519, 520, 521, 523, 524, 525, 527, 528,
	529, 687, 530, 5562, 532, 533, 1267, 535, 536, 688,
	538, 539, 541, 542, 543, 544, 545, 546, 697, 1300,
	548, 658, 549, 550, 551, 552, 553, 0, 555, 556,
	557, 558, 559, 560, 563, 564, 565, 567, 568, 1310,
	569, 570, 1301, 572, 573, 822, 575, 576, 577, 578,
	579, 0, 698, 580, 1311, 581, 1312, 582, 583, 584,
	585, 586, 587, 588, 590, 0, 1251, 592, 593, 594,
	596, 597, 598, 599, 602, 603, 604, 605, 606, 0,
	607, 609, 611, 689, 666, 1317, 1318, 1321, 1319, 1320,
	1322, 1323, 1333, 612, 613, 629, 480, 474, 430, 472,
	473, 477, 478, 481, 0, 0, 0, 1305, 0, 0,
	0, 1249, 0, 798, 0, 1270, 784, 0, 1275, 1276,
	1265, 770, 1255, 0, 0, 0, 5560, 0, 0, 1245,
	1246, 306, 0, 323, 804, 0, 372, 409, 1260, 0,
	1248, 469, 0, 522, 526, 0, 5755, 1280, 0, 1252,
	0, 380, 1273, 809, 0, 815, 1274, 821, 1272, 591,
	0, 811, 812, 817, 311, 1349, 614, 685, 0, 0,
	0, 1266, 0, 0, 0, 0, 0, 0, 0, 319,
	0, 0, 0, 0, 813, 810, 814, 820, 808, 818,
	805, 816, 0, 513, 447, 664, 540, 318, 364, 351,
	393, 435, 547, 0, 0, 425, 595, 360, 449, 0,
	339, 482, 1302, 571, 446, 0, 554, 574, 0, 466,
	345, 505, 561, 562, 802, 807, 0, 823, 0, 5757,
	350, 471, 331, 479, 676, 642, 534, 492, 490, 0,
	457, 514, 671, 1261, 0, 379, 0, 374, 470, 610,
	337, 589, 508, 475, 429, 537, 566, 376, 361, 362,
	405, 507, 395, 347, 600, 1330, 1332, 1328, 1324, 1325,
	1290, 1291, 1331, 1327, 396, 1326, 0, 608, 1335, 1346,
	1343, 1348, 1334, 1347, 1341, 1036, 655, 1338, 1337, 1351,
	1344, 1345, 601, 1350, 1289, 1342, 1340, 1339, 1336, 0,
	296, 297, 298, 299, 300, 301, 302, 303, 304, 305,
	307, 0, 308, 309, 310, 312, 313, 314, 801, 315,
	316, 317, 320, 321, 322, 324, 684, 325, 326, 327,
	328, 329, 330, 1314, 1292, 332, 333, 334, 335, 336,
	338, 340, 341, 342, 343, 344, 346, 348, 1303, 1293,
	1298, 1304, 1294, 1295, 1299, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 363, 365, 366, 367, 368, 369,
	370, 373, 0, 375, 377, 0, 378, 381, 0, 382,
	383, 384, 385, 386, 387, 388, 389, 1306, 390, 0,
	391, 392, 394, 0, 397, 398, 399, 400, 401, 0,
	402, 1315, 1264, 403, 404, 406, 407, 408, 410, 411,
	412, 413, 414, 415, 416, 417, 418, 419, 420, 421,
	0, 422, 423, 424, 426, 0, 427, 428, 431, 432,
	433, 434, 0, 436, 1316, 0, 437, 438, 439, 1296,
	1297, 440, 441, 442, 443, 444, 445, 448, 1329, 450,
	451, 452, 453, 454, 455, 456, 686, 458, 459, 460,
	461, 462, 463, 464, 648, 1307, 465, 467, 468, 1313,
	652, 1308, 819, 483, 484, 485, 486, 487, 488, 489,
	491, 0, 493, 494, 495, 1309, 496, 497, 498, 499,
	0, 500, 501, 502, 503, 504, 506, 509, 510, 511,
	512, 0, 515, 516, 517, 518, 519, 520, 521, 523,
	524, 525, 527, 528, 529, 687, 530, 531, 532, 533,
	1267, 535, 536, 688, 538, 539, 541, 542, 543, 544,
	545, 546, 697, 1300, 548, 658, 549, 550, 551, 552,
	553, 0, 555, 556, 557, 558, 559, 560, 563, 564,
	565, 567, 568, 1310, 569, 570, 1301, 572, 573, 822,
	575, 576, 577, 578, 579, 0, 698, 580, 1311, 581,
	1312, 582, 583, 584, 585, 586, 5756, 588, 590, 0,
	1251, 592, 593, 594, 596, 597, 598, 599, 602, 603,
	604, 605, 606, 0, 607, 609, 611, 689, 666, 1317,
	1318, 1321, 1319, 1320, 1322, 1323, 1333, 612, 613, 629,
	480, 474, 430, 472, 473, 477, 478, 481, 0, 0,
	0, 1305, 0, 0, 0, 1249, 0, 798, 0, 1270,
	784, 0, 1275, 1276, 1265, 770, 1255, 0, 0, 0,
	1256, 0, 0, 1245, 1246, 306, 0, 323, 804, 0,
	372, 409, 1260, 0, 1248, 469, 0, 522, 526, 0,
	615, 1280, 0, 1252, 0, 380, 1273, 809, 0, 815,
	1274, 821, 1272, 591, 0, 811, 812, 817, 311, 1349,
	614, 685, 0, 0, 0, 1266, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 813, 810,
	814, 820, 808, 818, 805, 816, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 1302, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 802, 807,
	0, 823, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 1261, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 1330,
	1332, 1328, 1324, 1325, 1290, 1291, 1331, 1327, 396, 1326,
	0, 608, 1335, 1346, 1343, 1348, 1334, 1347, 1341, 1036,
	655, 1338, 1337, 1351, 1344, 1345, 601, 1350, 1289, 1342,
	1340, 1339, 1336, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 801, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 1314, 1292, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 1303, 1293, 1298, 1304, 1294, 1295, 1299, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 1306, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 1315, 1264, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 1316, 0,
	437, 438, 439, 1296, 1297, 440, 441, 442, 443, 444,
	445, 448, 1329, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 5060, 648, 1307,
	465, 467, 468, 1313, 652, 1308, 819, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 1309,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 1267, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 1300, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 1310, 569, 570,
	1301, 572, 573, 822, 575, 576, 577, 578, 579, 0,
	698, 580, 1311, 581, 1312, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 1251, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 1317, 1318, 1321, 1319, 1320, 1322, 1323,
	1333, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 0, 0, 0, 1305, 0, 0, 0, 1249,
	0, 798, 0, 1270, 784, 0, 1275, 1276, 1265, 770,
	1255, 0, 0, 0, 1256, 0, 0, 1245, 1246, 306,
	0, 323, 804, 0, 372, 409, 1260, 0, 1248, 469,
	0, 522, 526, 0, 615, 1280, 0, 1252, 0, 380,
	1273, 809, 0, 815, 1274, 821, 1272, 591, 0, 811,
	812, 817, 311, 1349, 614, 685, 0, 0, 0, 1266,
	0, 0, 0, 0, 0, 0, 0, 319, 0, 0,
	0, 0, 813, 810, 814, 820, 808, 818, 805, 816,
	0, 513, 447, 664, 540, 318, 364, 351, 393, 435,
	547, 0, 0, 425, 595, 360, 449, 0, 339, 482,
	1302, 571, 446, 0, 554, 574, 0, 466, 345, 505,
	561, 562, 802, 807, 0, 823, 0, 349, 350, 471,
	331, 479, 676, 642, 534, 492, 490, 0, 457, 514,
	671, 1261, 0, 379, 0, 374, 470, 610, 337, 589,
	508, 475, 429, 537, 566, 376, 361, 362, 405, 507,
	395, 347, 600, 1330, 1332, 1328, 1324, 1325, 1290, 1291,
	1331, 1327, 396, 1326, 0, 608, 1335, 1346, 1343, 1348,
	1334, 1347, 1341, 1036, 655, 1338, 1337, 1351, 1344, 1345,
	601, 1350, 1289, 1342, 1340, 1339, 1336, 0, 296, 297,
	298, 299, 300, 301, 302, 303, 304, 305, 307, 0,
	308, 309, 310, 312, 313, 314, 801, 315, 316, 317,
	320, 321, 322, 324, 684, 325, 326, 327, 328, 329,
	330, 1314, 1292, 332, 333, 334, 335, 336, 338, 340,
	341, 342, 343, 344, 346, 348, 1303, 1293, 1298, 1304,
	1294, 1295, 1299, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 363, 365, 366, 367, 368, 369, 370, 373,
	0, 375, 377, 0, 378, 381, 0, 382, 383, 384,
	385, 386, 387, 388, 389, 1306, 390, 0, 391, 392,
	394, 0, 397, 398, 399, 400, 401, 0, 402, 1315,
	1264, 403, 404, 406, 407, 408, 410, 411, 412, 413,
	414, 415, 416, 417, 418, 419, 420, 421, 0, 422,
	423, 424, 426, 0, 427, 428, 431, 432, 433, 434,
	0, 436, 1316, 0, 437, 438, 439, 1296, 1297, 440,
	441, 442, 443, 444, 445, 448, 1329, 450, 451, 452,
	453, 454, 455, 456, 686, 458, 459, 460, 461, 462,
	463, 464, 648, 1307, 465, 467, 468, 1313, 652, 1308,
	819, 483, 484, 485, 486, 487, 488, 489, 491, 0,
	493, 494, 495, 1309, 496, 497, 498, 499, 0, 500,
	501, 502, 503, 504, 506, 509, 510, 511, 512, 0,
	515, 516, 517, 518, 519, 520, 521, 523, 524, 525,
	527, 528, 529, 687, 530, 531, 532, 533, 1267, 535,
	536, 688, 538, 539, 541, 542, 543, 544, 545, 546,
	697, 1300, 548, 658, 549, 550, 551, 552, 553, 0,
	555, 556, 557, 558, 559, 560, 563, 564, 565, 567,
	568, 1310, 569, 570, 1301, 572, 573, 822, 575, 576,
	577, 578, 579, 0, 698, 580, 1311, 581, 1312, 582,
	583, 584, 585, 586, 587, 588, 590, 0, 1251, 592,
	593, 594, 596, 597, 598, 599, 602, 603, 604, 605,
	606, 0, 607, 609, 611, 689, 5047, 1317, 1318, 1321,
	1319, 1320, 1322, 1323, 1333, 612, 613, 629, 480, 474,
	430, 472, 473, 477, 478, 481, 0, 0, 0, 1305,
	0, 0, 0, 1249, 0, 798, 0, 1270, 784, 0,
	1275, 1276, 1265, 770, 1255, 0, 0, 0, 1256, 0,
	0, 1245, 1246, 306, 0, 323, 804, 0, 372, 409,
	1260, 0, 1248, 469, 0, 522, 526, 0, 615, 1280,
	0, 1252, 0, 380, 1273, 809, 0, 815, 1274, 821,
	1272, 591, 0, 811, 812, 817, 311, 1349, 614, 685,
	0, 0, 0, 1266, 0, 0, 0, 0, 0, 0,
	0, 319, 0, 0, 0, 0, 813, 810, 814, 820,
	808, 818, 805, 816, 0, 513, 447, 664, 540, 318,
	364, 351, 393, 435, 547, 0, 0, 425, 595, 360,
	449, 0, 339, 482, 1302, 571, 446, 0, 554, 574,
	0, 466, 345, 505, 561, 562, 802, 807, 0, 823,
	0, 4076, 350, 471, 331, 479, 676, 642, 534, 492,
	490, 0, 457, 514, 671, 1261, 0, 379, 0, 374,
	470, 610, 337, 589, 508, 475, 429, 537, 566, 376,
	361, 362, 405, 507, 395, 347, 600, 1330, 1332, 1328,
	1324, 1325, 1290, 1291, 1331, 1327, 396, 1326, 0, 608,
	1335, 1346, 1343, 1348, 1334, 1347, 1341, 1036, 655, 1338,
	1337, 1351, 1344, 1345, 601, 1350, 1289, 1342, 1340, 1339,
	1336, 0, 296, 297, 298, 299, 300, 301, 302, 303,
	304, 305, 307, 0, 308, 309, 310, 312, 313, 314,
	801, 315, 316, 317, 320, 321, 322, 324, 684, 325,
	326, 327, 328, 329, 330, 1314, 1292, 332, 333, 334,
	335, 336, 338, 340, 341, 342, 343, 344, 346, 348,
	1303, 1293, 1298, 1304, 1294, 1295, 1299, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 363, 365, 366, 367,
	368, 369, 370, 373, 0, 375, 377, 0, 378, 381,
	0, 382, 383, 384, 385, 386, 387, 388, 389, 1306,
	390, 0, 391, 392, 394, 0, 397, 398, 399, 400,
	401, 0, 402, 1315, 1264, 403, 404, 406, 407, 408,
	410, 411, 412, 413, 414, 415, 416, 417, 418, 419,
	420, 421, 0, 422, 423, 424, 426, 0, 427, 428,
	431, 432, 433, 434, 0, 436, 1316, 0, 437, 438,
	439, 1296, 1297, 440, 441, 442, 443, 444, 445, 448,
	1329, 450, 451, 452, 453, 454, 455, 456, 686, 458,
	459, 460, 461, 462, 463, 464, 648, 1307, 465, 467,
	468, 1313, 652, 1308, 819, 483, 484, 485, 486, 487,
	488, 489, 491, 0, 493, 494, 495, 1309, 496, 497,
	498, 499, 0, 500, 501, 502, 503, 504, 506, 509,
	510, 511, 512, 0, 515, 516, 517, 518, 519, 520,
	521, 523, 524, 525, 527, 528, 529, 687, 530, 531,
	532, 533, 1267, 535, 536, 688, 538, 539, 541, 542,
	543, 544, 545, 546, 697, 1300, 548, 658, 549, 550,
	551, 552, 553, 0, 555, 556, 557, 558, 559, 560,
	563, 564, 565, 567, 568, 1310, 569, 570, 1301, 572,
	573, 822, 575, 576, 577, 578, 579, 0, 698, 580,
	1311, 581, 1312, 582, 583, 584, 585, 586, 587, 588,
	590, 0, 1251, 592, 593, 594, 596, 597, 598, 599,
	602, 603, 604, 605, 606, 0, 607, 609, 611, 689,
	666, 1317, 1318, 1321, 1319, 1320, 1322, 1323, 1333, 612,
	613, 629, 480, 474, 430, 472, 473, 477, 478, 481,
	0, 0, 0, 1305, 0, 0, 0, 1249, 0, 798,
	0, 3128, 784, 0, 1275, 1276, 1265, 770, 1255, 0,
	0, 0, 1256, 0, 0, 1245, 1246, 306, 0, 323,
	804, 0, 372, 409, 1260, 0, 1248, 469, 0, 522,
	526, 0, 615, 1280, 0, 1252, 0, 380, 1273, 809,
	0, 815, 1274, 821, 1272, 591, 0, 811, 812, 817,
	311, 1349, 614, 685, 0, 0, 0, 1266, 0, 0,
	0, 0, 0, 0, 0, 319, 0, 0, 0, 0,
	813, 810, 814, 820, 808, 818, 805, 816, 0, 513,
	447, 664, 540, 318, 364, 351, 393, 435, 547, 0,
	0, 425, 595, 360, 449, 0, 339, 482, 1302, 571,
	446, 0, 554, 574, 0, 466, 345, 505, 561, 562,
	802, 807, 0, 823, 0, 349, 350, 471, 331, 479,
	676, 642, 534, 492, 490, 0, 457, 514, 671, 1261,
	0, 379, 0, 374, 470, 610, 337, 589, 508, 475,
	429, 537, 566, 376, 361, 362, 405, 507, 395, 347,
	600, 1330, 1332, 1328, 1324, 1325, 1290, 1291, 1331, 1327,
	396, 1326, 0, 608, 1335, 1346, 1343, 1348, 1334, 1347,
	1341, 1036, 655, 1338, 1337, 1351, 1344, 1345, 601, 1350,
	1289, 1342, 1340, 1339, 1336, 0, 296, 297, 298, 299,
	300, 301, 302, 303, 304, 305, 307, 0, 308, 309,
	310, 312, 313, 314, 801, 315, 316, 317, 320, 321,
	322, 324, 684, 325, 326, 327, 328, 329, 330, 1314,
	1292, 332, 333, 334, 335, 336, 338, 340, 341, 342,
	343, 344, 346, 348, 1303, 1293, 1298, 1304, 1294, 1295,
	1299, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	363, 365, 366, 367, 368, 369, 370, 373, 0, 375,
	377, 0, 378, 381, 0, 382, 383, 384, 385, 386,
	387, 388, 389, 1306, 390, 0, 391, 392, 394, 0,
	397, 398, 399, 400, 401, 0, 402, 1315, 1264, 403,
	404, 406, 407, 408, 410, 411, 412, 413, 414, 415,
	416, 417, 418, 419, 420, 421, 0, 422, 423, 424,
	426, 0, 427, 428, 431, 432, 433, 434, 0, 436,
	1316, 0, 437, 438, 439, 1296, 1297, 440, 441, 442,
	443, 444, 445, 448, 1329, 450, 451, 452, 453, 454,
	455, 456, 686, 458, 459, 460, 461, 462, 463, 464,
	648, 1307, 465, 467, 468, 1313, 652, 1308, 819, 483,
	484, 485, 486, 487, 488, 489, 491, 0, 493, 494,
	495, 1309, 496, 497, 498, 499, 0, 500, 501, 502,
	503, 504, 506, 509, 510, 511, 512, 0, 515, 516,
	517, 518, 519, 520, 521, 523, 524, 525, 527, 528,
	529, 687, 530, 531, 532, 533, 1267, 535, 536, 688,
	538, 539, 541, 542, 543, 544, 545, 546, 697, 1300,
	548, 658, 549, 550, 551, 552, 553, 0, 555, 556,
	557, 558, 559, 560, 563, 564, 565, 567, 568, 1310,
	569, 570, 1301, 572, 573, 822, 575, 576, 577, 578,
	579, 0, 698, 580, 1311, 581, 1312, 582, 583, 584,
	585, 586, 587, 588, 590, 0, 1251, 592, 593, 594,
	596, 597, 598, 599, 602, 603, 604, 605, 606, 0,
	607, 609, 611, 689, 666, 1317, 1318, 1321, 1319, 1320,
	1322, 1323, 1333, 612, 613, 629, 480, 474, 430, 472,
	473, 477, 478, 481, 0, 0, 0, 1305, 0, 0,
	0, 1249, 0, 798, 0, 1270, 784, 0, 1275, 1276,
	1265, 770, 1255, 0, 0, 0, 1256, 0, 0, 1245,
	1246, 306, 0, 323, 804, 0, 372, 409, 1260, 0,
	1248, 469, 0, 522, 526, 0, 615, 1280, 0, 1252,
	0, 380, 1273, 809, 0, 815, 1274, 821, 1272, 591,
	0, 811, 812, 817, 311, 1349, 614, 685, 0, 0,
	0, 1266, 0, 0, 0, 0, 0, 0, 0, 319,
	0, 0, 0, 0, 813, 810, 814, 820, 808, 818,
	805, 816, 0, 513, 447, 664, 540, 318, 364, 351,
	393, 435, 547, 0, 0, 425, 595, 360, 449, 0,
	339, 482, 1302, 571, 446, 0, 554, 574, 0, 466,
	345, 505, 561, 562, 802, 807, 0, 823, 0, 349,
	350, 471, 331, 479, 676, 642, 534, 492, 490, 0,
	457, 514, 671, 1261, 0, 379, 0, 374, 470, 610,
	337, 589, 508, 475, 429, 537, 566, 376, 361, 362,
	405, 507, 395, 347, 600, 1330, 1332, 1328, 1324, 1325,
	1290, 1291, 1331, 1327, 396, 1326, 0, 608, 1335, 1346,
	1343, 1348, 1334, 1347, 1341, 1036, 655, 1338, 1337, 1351,
	1344, 1345, 601, 1350, 1289, 1342, 1340, 1339, 1336, 0,
	296, 297, 298, 299, 300, 301, 302, 303, 304, 305,
	307, 0, 308, 309, 310, 312, 313, 314, 801, 315,
	316, 317, 320, 321, 322, 324, 684, 325, 326, 327,
	328, 329, 330, 1314, 1292, 332, 333, 334, 335, 336,
	338, 340, 341, 342, 343, 344, 346, 348, 1303, 1293,
	1298, 1304, 1294, 1295, 1299, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 363, 365, 366, 367, 368, 369,
	370, 373, 0, 375, 377, 0, 378, 381, 0, 382,
	383, 384, 385, 386, 387, 388, 389, 1306, 390, 0,
	391, 392, 394, 0, 397, 398, 399, 400, 401, 0,
	402, 1315, 1264, 403, 404, 406, 407, 408, 410, 411,
	412, 413, 414, 415, 416, 417, 418, 419, 420, 421,
	0, 422, 423, 424, 426, 0, 427, 428, 431, 432,
	433, 434, 0, 436, 1316, 0, 437, 438, 439, 1296,
	1297, 440, 441, 442, 443, 444, 445, 448, 1329, 450,
	451, 452, 453, 454, 455, 456, 686, 458, 459, 460,
	461, 462, 463, 464, 648, 1307, 465, 467, 468, 1313,
	652, 1308, 819, 483, 484, 485, 486, 487, 488, 489,
	491, 0, 493, 494, 495, 1309, 496, 497, 498, 499,
	0, 500, 501, 502, 503, 504, 506, 509, 510, 511,
	512, 0, 515, 516, 517, 518, 519, 520, 521, 523,
	524, 525, 527, 528, 529, 687, 530, 531, 532, 533,
	1267, 535, 536, 688, 538, 539, 541, 542, 543, 544,
	545, 546, 697, 1300, 548, 658, 549, 550, 551, 552,
	553, 0, 555, 556, 557, 558, 559, 560, 563, 564,
	565, 567, 568, 1310, 569, 570, 1301, 572, 573, 822,
	575, 576, 577, 578, 579, 0, 698, 580, 1311, 581,
	1312, 582, 583, 584, 585, 586, 587, 588, 590, 0,
	1251, 592, 593, 594, 596, 597, 598, 599, 602, 603,
	604, 605, 606, 0, 607, 609, 611, 689, 666, 1317,
	1318, 1321, 1319, 1320, 1322, 1323, 1333, 612, 613, 629,
	480, 474, 430, 472, 473, 477, 478, 481, 0, 0,
	0, 1305, 0, 0, 0, 1249, 0, 798, 0, 1270,
	784, 0, 1275, 1276, 1265, 770, 1255, 0, 0, 0,
	1256, 0, 0, 1984, 1985, 306, 0, 323, 804, 0,
	372, 409, 1260, 0, 0, 469, 0, 522, 526, 0,
	615, 1280, 0, 5373, 0, 380, 1273, 809, 0, 815,
	1274, 821, 1272, 591, 0, 811, 812, 817, 311, 1349,
	614, 685, 0, 0, 0, 1266, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 813, 810,
	814, 820, 808, 818, 805, 816, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 1302, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 802, 807,
	0, 823, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 1261, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 1330,
	1332, 1328, 1324, 1325, 1290, 1291, 1331, 1327, 396, 1326,
	0, 608, 1335, 1346, 1343, 1348, 1334, 1347, 1341, 1036,
	655, 1338, 1337, 1351, 1344, 1345, 601, 1350, 1289, 1342,
	1340, 1339, 1336, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 801, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 1314, 1292, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 1303, 1293, 1298, 1304, 1294, 1295, 1299, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 1306, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 1315, 1264, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 1316, 0,
	437, 438, 439, 1296, 1297, 440, 441, 442, 443, 444,
	445, 448, 1329, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 1307,
	465, 467, 468, 1313, 652, 1308, 819, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 1309,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 3266, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 1300, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 1310, 569, 570,
	1301, 572, 573, 822, 575, 576, 577, 578, 579, 0,
	698, 580, 1311, 581, 1312, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 1317, 1318, 1321, 1319, 1320, 1322, 1323,
	1333, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 0, 0, 0, 1305, 0, 0, 0, 0,
	0, 798, 0, 1270, 784, 0, 1275, 1276, 1265, 770,
	1255, 0, 0, 0, 3122, 0, 0, 3263, 3264, 306,
	0, 323, 804, 0, 372, 409, 1260, 0, 0, 469,
	0, 522, 526, 0, 615, 1280, 0, 0, 0, 380,
	1273, 809, 0, 815, 1274, 821, 1272, 591, 0, 811,
	812, 817, 311, 1349, 614, 685, 0, 0, 0, 1266,
	0, 0, 0, 0, 0, 0, 0, 319, 0, 0,
	0, 0, 813, 810, 814, 820, 808, 818, 805, 816,
	0, 513, 447, 664, 540, 318, 364, 351, 393, 435,
	547, 0, 0, 425, 595, 360, 449, 0, 339, 482,
	1302, 571, 446, 0, 554, 574, 0, 466, 345, 505,
	561, 562, 802, 807, 0, 823, 0, 349, 350, 471,
	331, 479, 676, 642, 534, 492, 490, 0, 457, 514,
	671, 1261, 0, 379, 0, 374, 470, 610, 337, 589,
	508, 475, 429, 537, 566, 376, 361, 362, 405, 507,
	395, 347, 600, 1330, 1332, 1328, 1324, 1325, 1290, 1291,
	1331, 1327, 396, 1326, 0, 608, 1335, 1346, 1343, 1348,
	1334, 1347, 1341, 1036, 655, 1338, 1337, 1351, 1344, 1345,
	601, 1350, 1289, 1342, 1340, 1339, 1336, 0, 296, 297,
	298, 299, 300, 301, 302, 303, 304, 305, 307, 0,
	308, 309, 310, 312, 313, 314, 801, 315, 316, 317,
	320, 321, 322, 324, 684, 325, 326, 327, 328, 329,
	330, 1314, 1292, 332, 333, 334, 335, 336, 338, 340,
	341, 342, 343, 344, 346, 348, 1303, 1293, 1298, 1304,
	1294, 1295, 1299, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 363, 365, 366, 367, 368, 369, 370, 373,
	0, 375, 377, 0, 378, 381, 0, 382, 383, 384,
	385, 386, 387, 388, 389, 1306, 390, 0, 391, 392,
	394, 0, 397, 398, 399, 400, 401, 0, 402, 1315,
	1264, 403, 404, 406, 407, 408, 410, 411, 412, 413,
	414, 415, 416, 417, 418, 419, 420, 421, 0, 422,
	423, 424, 426, 0, 427, 428, 431, 432, 433, 434,
	0, 436, 1316, 0, 437, 438, 439, 1296, 1297, 440,
	441, 442, 443, 444, 445, 448, 1329, 450, 451, 452,
	453, 454, 455, 456, 686, 458, 459, 460, 461, 462,
	463, 464, 648, 1307, 465, 467, 468, 1313, 652, 1308,
	819, 483, 484, 485, 486, 487, 488, 489, 491, 0,
	493, 494, 495, 1309, 496, 497, 498, 499, 0, 500,
	501, 502, 503, 504, 506, 509, 510, 511, 512, 0,
	515, 516, 517, 518, 519, 520, 521, 523, 524, 525,
	527, 528, 529, 687, 530, 531, 532, 533, 3266, 535,
	536, 688, 538, 539, 541, 542, 543, 544, 545, 546,
	697, 1300, 548, 658, 549, 550, 551, 552, 553, 0,
	555, 556, 557, 558, 559, 560, 563, 564, 565, 567,
	568, 1310, 569, 570, 1301, 572, 573, 822, 575, 576,
	577, 578, 579, 0, 698, 580, 1311, 581, 1312, 582,
	583, 584, 585, 586, 587, 588, 590, 0, 0, 592,
	593, 594, 596, 597, 598, 599, 602, 603, 604, 605,
	606, 0, 607, 609, 611, 689, 666, 1317, 1318, 1321,
	1319, 1320, 1322, 1323, 1333, 612, 613, 629, 480, 474,
	430, 472, 473, 477, 478, 481, 0, 0, 0, 1305,
	0, 0, 0, 0, 0, 798, 0, 1270, 784, 0,
	1275, 1276, 0, 770, 1255, 0, 0, 0, 3122, 0,
	0, 3263, 3264, 306, 0, 323, 804, 0, 372, 409,
	1260, 0, 0, 469, 0, 522, 526, 0, 615, 1280,
	0, 0, 0, 380, 1273, 809, 0, 815, 1274, 821,
	1272, 591, 0, 811, 812, 817, 311, 1349, 614, 685,
	0, 0, 0, 476, 0, 0, 0, 0, 0, 0,
	0, 319, 0, 0, 0, 0, 813, 810, 814, 820,
	808, 818, 805, 816, 0, 513, 447, 664, 540, 318,
	364, 351, 393, 435, 547, 0, 0, 425, 595, 360,
	449, 0, 339, 482, 1302, 571, 446, 0, 554, 574,
	0, 466, 345, 505, 561, 562, 802, 807, 0, 823,
	0, 349, 350, 471, 331, 479, 676, 642, 3121, 492,
	490, 0, 457, 514, 671, 1261, 0, 379, 0, 374,
	470, 610, 337, 589, 508, 475, 429, 537, 566, 376,
	361, 362, 405, 507, 395, 347, 600, 1330, 1332, 1328,
	1324, 1325, 1290, 1291, 1331, 1327, 396, 1326, 0, 608,
	1335, 1346, 1343, 1348, 1334, 1347, 1341, 1036, 655, 1338,
	1337, 1351, 1344, 1345, 601, 1350, 1289, 1342, 1340, 1339,
	1336, 0, 296, 297, 298, 299, 300, 301, 302, 303,
	304, 305, 307, 0, 308, 309, 310, 312, 313, 314,
	801, 315, 316, 317, 320, 321, 322, 324, 684, 325,
	326, 327, 328, 329, 330, 1314, 1292, 332, 333, 334,
	335, 336, 338, 340, 341, 342, 343, 344, 346, 348,
	1303, 1293, 1298, 1304, 1294, 1295, 1299, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 363, 365, 366, 367,
	368, 369, 370, 373, 0, 375, 377, 0, 378, 381,
	0, 382, 383, 384, 385, 386, 387, 388, 389, 1306,
	390, 0, 391, 392, 394, 0, 397, 398, 399, 400,
	401, 0, 402, 1315, 1264, 403, 404, 406, 407, 408,
	410, 411, 412, 413, 414, 415, 416, 417, 418, 419,
	420, 421, 0, 422, 423, 424, 426, 0, 427, 428,
	431, 432, 433, 434, 0, 436, 1316, 0, 437, 438,
	439, 1296, 1297, 440, 441, 442, 443, 444, 445, 448,
	1329, 450, 451, 452, 453, 454, 455, 456, 686, 458,
	459, 460, 461, 462, 463, 464, 648, 1307, 465, 467,
	468, 1313, 652, 1308, 819, 483, 484, 485, 486, 487,
	488, 489, 491, 0, 493, 494, 495, 1309, 496, 497,
	498, 499, 0, 500, 501, 502, 503, 504, 506, 509,
	510, 511, 512, 0, 515, 516, 517, 518, 519, 520,
	521, 523, 524, 525, 527, 528, 529, 687, 530, 531,
	532, 533, 3120, 535, 536, 688, 538, 539, 541, 542,
	543, 544, 545, 546, 697, 1300, 548, 658, 549, 550,
	551, 552, 553, 0, 555, 556, 557, 558, 559, 560,
	563, 564, 565, 567, 568, 1310, 569, 570, 1301, 572,
	573, 822, 575, 576, 577, 578, 579, 0, 698, 580,
	1311, 581, 1312, 582, 583, 584, 585, 586, 587, 588,
	590, 0, 0, 592, 593, 594, 596, 597, 598, 599,
	602, 603, 604, 605, 606, 0, 607, 609, 611, 689,
	666, 1317, 1318, 1321, 1319, 1320, 1322, 1323, 1333, 612,
	613, 629, 480, 474, 430, 472, 473, 477, 478, 481,
	0, 0, 0, 1305, 0, 0, 0, 0, 0, 798,
	0, 1270, 784, 0, 1275, 1276, 1265, 770, 1255, 0,
	0, 0, 3122, 0, 0, 3118, 3119, 306, 0, 323,
	804, 0, 372, 409, 1260, 0, 1248, 469, 0, 522,
	526, 0, 0, 1280, 0, 1252, 0, 380, 1273, 0,
	0, 0, 1274, 0, 1272, 591, 0, 0, 0, 0,
	311, 1349, 614, 685, 0, 0, 0, 1266, 0, 0,
	0, 0, 0, 0, 0, 319, 0, 0, 0, 0,
	813, 810, 814, 820, 808, 818, 805, 816, 0, 513,
	447, 664, 540, 318, 364, 351, 393, 435, 547, 0,
	0, 425, 595, 360, 449, 0, 339, 482, 1302, 571,
	446, 0, 554, 574, 0, 466, 345, 505, 561, 562,
	802, 807, 0, 823, 0, 5757, 350, 471, 331, 479,
	676, 642, 534, 492, 490, 0, 457, 514, 671, 1261,
	0, 379, 0, 374, 470, 610, 337, 589, 508, 475,
	429, 537, 566, 376, 361, 362, 405, 507, 395, 347,
	600, 1330, 1332, 1328, 1324, 1325, 1290, 1291, 1331, 1327,
	396, 1326, 0, 608, 1335, 1346, 1343, 1348, 1334, 1347,
	1341, 1036, 655, 1338, 1337, 1351, 1344, 1345, 601, 1350,
	1289, 1342, 1340, 1339, 1336, 0, 296, 297, 298, 299,
	300, 301, 302, 303, 304, 305, 307, 0, 308, 309,
	310, 312, 313, 314, 801, 315, 316, 317, 320, 321,
	322, 324, 684, 325, 326, 327, 328, 329, 330, 1314,
	1292, 332, 333, 334, 335, 336, 338, 340, 341, 342,
	343, 344, 346, 348, 1303, 1293, 1298, 1304, 1294, 1295,
	1299, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	363, 365, 366, 367, 368, 369, 370, 373, 0, 375,
	377, 0, 378, 381, 0, 382, 383, 384, 385, 386,
	387, 388, 389, 1306, 390, 0, 391, 392, 394, 0,
	397, 398, 399, 400, 401, 0, 402, 1315, 1264, 403,
	404, 406, 407, 408, 410, 411, 412, 413, 414, 415,
	416, 417, 418, 419, 420, 421, 0, 422, 423, 424,
	426, 0, 427, 428, 431, 432, 433, 434, 0, 436,
	1316, 0, 437, 438, 439, 1296, 1297, 440, 441, 442,
	443, 444, 445, 448, 1329, 450, 451, 452, 453, 454,
	455, 456, 686, 458, 459, 460, 461, 462, 463, 464,
	648, 1307, 465, 467, 468, 1313, 652, 1308, 819, 483,
	484, 485, 486, 487, 488, 489, 491, 0, 493, 494,
	495, 1309, 496, 497, 498, 499, 0, 500, 501, 502,
	503, 504, 506, 509, 510, 511, 512, 0, 515, 516,
	517, 518, 519, 520, 521, 523, 524, 525, 527, 528,
	529, 687, 530, 531, 532, 533, 1267, 535, 536, 688,
	538, 539, 541, 542, 543, 544, 545, 546, 697, 1300,
	548, 658, 549, 550, 551, 552, 553, 0, 555, 556,
	557, 558, 559, 560, 563, 564, 565, 567, 568, 1310,
	569, 570, 1301, 572, 573, 822, 575, 576, 577, 578,
	579, 0, 698, 580, 1311, 581, 1312, 582, 583, 584,
	585, 586, 5756, 588, 590, 0, 1251, 592, 593, 594,
	596, 597, 598, 599, 602, 603, 604, 605, 606, 0,
	607, 609, 611, 689, 666, 1317, 1318, 1321, 1319, 1320,
	1322, 1323, 1333, 612, 613, 629, 480, 474, 430, 472,
	473, 477, 478, 481, 0, 0, 0, 1305, 0, 0,
	0, 0, 0, 798, 0, 1270, 784, 0, 1275, 1276,
	0, 770, 1255, 0, 0, 0, 1256, 0, 0, 1245,
	1246, 306, 0, 323, 804, 0, 372, 409, 1260, 0,
	0, 469, 0, 522, 526, 0, 615, 1280, 0, 0,
	0, 380, 1273, 809, 0, 815, 1274, 821, 1272, 591,
	0, 811, 812, 817, 311, 1349, 614, 685, 0, 0,
	0, 476, 0, 0, 0, 0, 0, 0, 0, 319,
	0, 0, 0, 0, 813, 810, 814, 820, 808, 818,
	805, 816, 0, 513, 447, 664, 540, 318, 364, 351,
	393, 435, 547, 0, 0, 425, 595, 360, 449, 0,
	339, 482, 1302, 571, 446, 0, 554, 574, 0, 466,
	345, 505, 561, 562, 802, 807, 0, 823, 0, 349,
	350, 471, 331, 479, 676, 642, 534, 492, 490, 0,
	457, 514, 671, 1261, 0, 379, 0, 374, 470, 610,
	337, 589, 508, 475, 429, 537, 566, 376, 361, 362,
	405, 507, 395, 347, 600, 1330, 1332, 1328, 1324, 1325,
	1290, 1291, 1331, 1327, 396, 1326, 0, 608, 1335, 1346,
	1343, 1348, 1334, 1347, 1341, 1036, 655, 1338, 1337, 1351,
	1344, 1345, 601, 1350, 1289, 1342, 1340, 1339, 1336, 0,
	296, 297, 298, 299, 300, 301, 302, 303, 304, 305,
	307, 0, 308, 309, 310, 312, 313, 314, 801, 315,
	316, 317, 320, 321, 322, 324, 684, 325, 326, 327,
	328, 329, 330, 1314, 1292, 332, 333, 334, 335, 336,
	338, 340, 341, 342, 343, 344, 346, 348, 1303, 1293,
	1298, 1304, 1294, 1295, 1299, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 363, 365, 366, 367, 368, 369,
	370, 373, 0, 375, 377, 0, 378, 381, 0, 382,
	383, 384, 385, 386, 387, 388, 389, 1306, 390, 0,
	391, 392, 394, 0, 397, 398, 399, 400, 401, 0,
	402, 1315, 1264, 403, 404, 406, 407, 408, 410, 411,
	412, 413, 414, 415, 416, 417, 418, 419, 420, 421,
	0, 422, 423, 424, 426, 0, 427, 428, 431, 432,
	433, 434, 0, 436, 1316, 0, 437, 438, 439, 1296,
	1297, 440, 441, 442, 443, 444, 445, 448, 1329, 450,
	451, 452, 453, 454, 455, 456, 686, 458, 459, 460,
	461, 462, 463, 464, 648, 1307, 465, 467, 468, 1313,
	652, 1308, 819, 483, 484, 485, 486, 487, 488, 489,
	491, 0, 493, 494, 495, 1309, 496, 497, 498, 499,
	0, 500, 501, 502, 503, 504, 506, 509, 510, 511,
	512, 0, 515, 516, 517, 518, 519, 520, 521, 523,
	524, 525, 527, 528, 529, 687, 530, 531, 532, 533,
	3266, 535, 536, 688, 538, 539, 541, 542, 543, 544,
	545, 546, 697, 1300, 548, 658, 549, 550, 551, 552,
	553, 0, 555, 556, 557, 558, 559, 560, 563, 564,
	565, 567, 568, 1310, 569, 570, 1301, 572, 573, 822,
	575, 576, 577, 578, 579, 0, 698, 580, 1311, 581,
	1312, 582, 583, 584, 585, 586, 587, 588, 590, 0,
	0, 592, 593, 594, 596, 597, 598, 599, 602, 603,
	604, 605, 606, 0, 607, 609, 611, 689, 666, 1317,
	1318, 1321, 1319, 1320, 1322, 1323, 1333, 612, 613, 629,
	480, 474, 430, 472, 473, 477, 478, 481, 0, 0,
	0, 1305, 0, 798, 0, 1270, 784, 0, 1275, 1276,
	0, 770, 1255, 0, 0, 0, 0, 0, 0, 0,
	3122, 306, 0, 323, 804, 0, 372, 409, 1260, 0,
	0, 469, 0, 522, 526, 0, 615, 1280, 0, 0,
	0, 380, 1273, 809, 0, 815, 1274, 821, 1272, 591,
	0, 811, 812, 817, 311, 1349, 614, 685, 0, 0,
	0, 476, 0, 0, 0, 0, 0, 0, 0, 319,
	0, 0, 0, 0, 813, 810, 814, 820, 808, 818,
	805, 816, 0, 513, 447, 664, 540, 318, 364, 351,
	393, 435, 547, 0, 0, 425, 595, 360, 449, 0,
	339, 482, 1302, 571, 446, 0, 554, 574, 0, 466,
	345, 505, 561, 562, 802, 807, 0, 823, 0, 349,
	350, 471, 331, 479, 676, 642, 534, 492, 490, 0,
	457, 514, 4666, 1261, 0, 379, 0, 374, 470, 610,
	337, 589, 508, 475, 429, 537, 566, 376, 361, 362,
	405, 507, 395, 347, 600, 1330, 1332, 1328, 1324, 1325,
	1290, 1291, 1331, 1327, 396, 1326, 0, 608, 1335, 1346,
	1343, 1348, 1334, 1347, 1341, 1036, 655, 1338, 1337, 1351,
	1344, 1345, 601, 1350, 1289, 1342, 1340, 1339, 1336, 0,
	296, 297, 298, 299, 300, 301, 302, 303, 304, 305,
	307, 0, 308, 309, 310, 312, 313, 314, 801, 315,
	316, 317, 320, 321, 322, 324, 684, 325, 326, 327,
	328, 329, 330, 1314, 1292, 332, 333, 334, 335, 336,
	338, 340, 341, 342, 343, 344, 346, 348, 1303, 1293,
	1298, 1304, 1294, 1295, 1299, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 363, 365, 366, 367, 368, 369,
	370, 373, 0, 375, 377, 0, 378, 381, 0, 382,
	383, 384, 385, 386, 387, 388, 389, 1306, 390, 0,
	391, 392, 394, 0, 397, 398, 399, 400, 401, 0,
	402, 1315, 1264, 403, 404, 406, 407, 408, 410, 411,
	412, 413, 414, 415, 416, 417, 418, 419, 420, 421,
	0, 422, 423, 424, 426, 0, 427, 428, 431, 432,
	433, 434, 0, 436, 1316, 0, 437, 438, 439, 1296,
	1297, 440, 441, 442, 443, 444, 445, 448, 1329, 450,
	451, 452, 453, 454, 455, 456, 686, 458, 459, 460,
	461, 462, 463, 464, 648, 1307, 465, 467, 468, 1313,
	652, 1308, 819, 483, 484, 485, 486, 487, 488, 489,
	491, 0, 493, 494, 495, 1309, 496, 497, 498, 499,
	0, 500, 501, 502, 503, 504, 506, 509, 510, 511,
	512, 0, 515, 516, 517, 518, 519, 520, 521, 523,
	524, 525, 527, 528, 529, 687, 530, 531, 532, 533,
	3266, 535, 536, 688, 538, 539, 541, 542, 543, 544,
	545, 546, 697, 1300, 548, 658, 549, 550, 551, 552,
	553, 0, 555, 556, 557, 558, 559, 560, 563, 564,
	565, 567, 568, 1310, 569, 570, 1301, 572, 573, 822,
	575, 576, 577, 578, 579, 0, 698, 580, 1311, 581,
	1312, 582, 583, 584, 585, 586, 587, 588, 590, 0,
	0, 592, 593, 594, 596, 597, 598, 599, 602, 603,
	604, 605, 606, 0, 607, 609, 611, 689, 666, 1317,
	1318, 1321, 1319, 1320, 1322, 1323, 1333, 612, 613, 629,
	480, 474, 430, 472, 473, 477, 478, 481, 0, 0,
	0, 1305, 0, 798, 0, 1270, 784, 0, 1275, 1276,
	0, 770, 1255, 0, 0, 0, 0, 0, 0, 0,
	3122, 306, 0, 323, 804, 0, 372, 409, 1260, 0,
	0, 469, 0, 522, 526, 0, 615, 1280, 0, 0,
	0, 380, 1273, 809, 0, 815, 1274, 821, 1272, 591,
	0, 811, 812, 817, 311, 1349, 614, 685, 0, 0,
	0, 476, 0, 0, 0, 0, 0, 0, 0, 4608,
	0, 0, 0, 0, 813, 810, 814, 820, 808, 818,
	805, 816, 0, 513, 447, 664, 540, 318, 364, 351,
	393, 435, 547, 0, 0, 425, 595, 360, 449, 0,
	339, 482, 1302, 571, 446, 0, 554, 574, 0, 466,
	345, 505, 561, 562, 802, 807, 0, 823, 0, 349,
	350, 471, 331, 479, 676, 642, 534, 492, 490, 0,
	457, 514, 671, 1261, 0, 379, 0, 374, 470, 610,
	337, 589, 508, 475, 429, 537, 566, 376, 361, 362,
	405, 507, 395, 347, 600, 1330, 1332, 1328, 1324, 1325,
	1290, 1291, 1331, 1327, 396, 1326, 0, 608, 1335, 1346,
	1343, 1348, 1334, 1347, 1341, 1036, 655, 1338, 1337, 1351,
	1344, 1345, 601, 1350, 1289, 1342, 1340, 1339, 1336, 0,
	296, 297, 298, 299, 300, 301, 302, 303, 304, 305,
	307, 0, 308, 309, 310, 312, 313, 314, 801, 315,
	316, 317, 320, 321, 322, 324, 684, 325, 326, 327,
	328, 329, 330, 1314, 1292, 332, 333, 334, 335, 336,
	338, 340, 341, 342, 343, 344, 346, 348, 1303, 1293,
	1298, 1304, 1294, 1295, 1299, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 363, 365, 366, 367, 368, 369,
	370, 373, 0, 375, 377, 0, 378, 381, 0, 382,
	383, 384, 385, 386, 387, 388, 389, 1306, 390, 0,
	391, 392, 394, 0, 397, 398, 399, 400, 401, 0,
	402, 1315, 1264, 403, 404, 406, 407, 408, 410, 411,
	412, 413, 414, 415, 416, 417, 418, 419, 420, 421,
	0, 422, 423, 424, 426, 0, 427, 428, 431, 432,
	433, 434, 0, 436, 1316, 0, 437, 438, 439, 1296,
	1297, 440, 441, 442, 443, 444, 445, 448, 1329, 450,
	451, 452, 453, 454, 455, 456, 686, 458, 459, 460,
	461, 462, 463, 464, 648, 1307, 465, 467, 468, 1313,
	652, 1308, 819, 483, 484, 485, 486, 487, 488, 489,
	491, 0, 493, 494, 495, 1309, 496, 497, 498, 499,
	0, 500, 501, 502, 503, 504, 506, 509, 510, 511,
	512, 0, 515, 516, 517, 518, 519, 520, 521, 523,
	524, 525, 527, 528, 529, 687, 530, 531, 532, 533,
	3266, 535, 536, 688, 538, 539, 541, 542, 543, 544,
	545, 546, 697, 1300, 548, 658, 549, 550, 551, 552,
	553, 0, 555, 556, 557, 558, 559, 560, 563, 564,
	565, 567, 568, 1310, 569, 570, 1301, 572, 573, 822,
	575, 576, 577, 578, 579, 0, 698, 580, 1311, 581,
	1312, 582, 583, 584, 585, 586, 587, 588, 590, 0,
	0, 592, 593, 594, 596, 597, 598, 599, 602, 603,
	604, 605, 606, 0, 607, 609, 611, 689, 666, 1317,
	1318, 1321, 1319, 1320, 1322, 1323, 1333, 612, 613, 629,
	480, 474, 430, 472, 473, 477, 478, 481, 798, 0,
	0, 1305, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 306, 0, 323, 804,
	3122, 372, 409, 624, 0, 0, 469, 0, 522, 526,
	166, 615, 0, 0, 0, 0, 380, 0, 809, 0,
	815, 0, 821, 0, 591, 0, 811, 812, 817, 311,
	699, 614, 685, 0, 0, 0, 476, 163, 0, 0,
	844, 164, 0, 0, 319, 0, 0, 0, 0, 813,
	810, 814, 820, 808, 818, 805, 816, 0, 513, 447,
	1132, 540, 318, 364, 351, 393, 435, 547, 0, 0,
	425, 595, 360, 449, 0, 339, 482, 1302, 571, 446,
	0, 554, 574, 0, 466, 345, 505, 561, 562, 802,
	807, 0, 823, 0, 349, 350, 471, 331, 479, 3352,
	3353, 3351, 492, 490, 0, 457, 514, 671, 0, 0,
	379, 0, 374, 470, 610, 337, 589, 508, 475, 429,
	537, 566, 376, 361, 362, 405, 507, 395, 347, 600,
	1330, 1332, 1328, 1324, 1325, 1290, 1291, 1331, 1327, 396,
	3358, 0, 608, 617, 651, 631, 659, 616, 656, 626,
	371, 655, 620, 619, 665, 646, 647, 601, 661, 632,
	630, 623, 622, 618, 0, 296, 297, 298, 299, 300,
	301, 302, 303, 304, 305, 307, 0, 308, 309, 310,
	312, 313, 314, 801, 315, 316, 317, 320, 321, 322,
	324, 684, 325, 326, 327, 328, 329, 330, 1314, 1292,
	332, 333, 334, 335, 336, 338, 340, 341, 342, 343,
	344, 346, 348, 1303, 1293, 1298, 1304, 1294, 1295, 1299,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 363,
	365, 366, 367, 368, 369, 370, 373, 0, 375, 377,
	0, 378, 381, 0, 382, 383, 384, 385, 386, 387,
	388, 389, 1306, 390, 0, 391, 392, 394, 0, 397,
	398, 399, 400, 401, 0, 402, 1315, 628, 403, 404,
	406, 407, 408, 410, 411, 412, 413, 414, 415, 416,
	417, 418, 419, 420, 421, 0, 422, 423, 424, 426,
	0, 427, 428, 431, 432, 433, 434, 3344, 436, 1316,
	0, 437, 438, 439, 1296, 1297, 440, 441, 442, 443,
	444, 445, 448, 1329, 450, 451, 452, 453, 454, 455,
	456, 686, 458, 459, 460, 461, 462, 463, 464, 648,
	1307, 465, 467, 468, 1313, 652, 1308, 819, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 493, 494, 495,
	1309, 496, 497, 498, 499, 0, 500, 501, 502, 503,
	504, 506, 509, 510, 511, 512, 0, 515, 516, 517,
	518, 519, 520, 521, 523, 524, 525, 527, 528, 529,
	687, 530, 531, 532, 533, 657, 535, 536, 688, 538,
	539, 541, 542, 543, 544, 545, 546, 697, 1300, 548,
	658, 549, 550, 551, 552, 553, 0, 555, 556, 557,
	558, 559, 560, 563, 564, 565, 567, 568, 1310, 569,
	570, 1301, 572, 573, 822, 575, 576, 577, 578, 579,
	0, 698, 580, 1311, 581, 1312, 582, 583, 584, 585,
	586, 587, 588, 590, 0, 0, 592, 593, 594, 596,
	597, 598, 599, 602, 603, 604, 605, 606, 0, 607,
	609, 611, 689, 666, 1317, 1318, 1321, 1319, 1320, 1322,
	1323, 1333, 612, 613, 629, 480, 474, 430, 472, 473,
	477, 478, 481, 0, 0, 0, 1305, 0, 929, 0,
	1665, 784, 167, 0, 0, 0, 770, 0, 0, 0,
	0, 0, 0, 0, 0, 3346, 306, 0, 323, 804,
	0, 372, 409, 624, 0, 0, 469, 0, 522, 526,
	0, 615, 0, 0, 5631, 0, 380, 1745, 809, 0,
	815, 0, 821, 1744, 591, 0, 811, 812, 817, 311,
	699, 614, 685, 0, 0, 0, 476, 0, 0, 0,
	0, 0, 0, 0, 319, 0, 0, 0, 1746, 813,
	810, 814, 820, 808, 818, 805, 816, 0, 513, 447,
	664, 540, 318, 364, 351, 393, 435, 547, 0, 0,
	425, 595, 360, 449, 0, 339, 482, 0, 571, 446,
	0, 554, 574, 0, 466, 345, 505, 561, 562, 802,
	807, 0, 823, 0, 349, 350, 471, 331, 479, 676,
	642, 534, 492, 490, 0, 457, 514, 671, 0, 0,
	379, 0, 374, 470, 610, 337, 589, 508, 475, 429,
	537, 566, 376, 361, 362, 405, 507, 395, 347, 600,
	639, 643, 641, 637, 634, 638, 635, 636, 640, 396,
	633, 0, 608, 617, 651, 631, 659, 616, 656, 626,
	371, 655, 620, 619, 665, 646, 647, 601, 661, 632,
	630, 623, 622, 618, 0, 296, 297, 298, 299, 300,
	301, 302, 303, 304, 305, 307, 0, 308, 309, 310,
	312, 313, 314, 801, 315, 316, 317, 320, 321, 322,
	324, 684, 325, 326, 327, 328, 329, 330, 621, 803,
	332, 333, 334, 335, 336, 338, 340, 341, 342, 343,
	344, 346, 348, 0, 0, 0, 806, 0, 0, 0,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 363,
	365, 366, 367, 368, 369, 370, 373, 0, 375, 377,
	0, 378, 381, 0, 382, 383, 384, 385, 386, 387,
	388, 389, 625, 390, 0, 391, 392, 394, 0, 397,
	398, 399, 400, 401, 0, 402, 627, 628, 403, 404,
	406, 407, 408, 410, 411, 412, 413, 414, 415, 416,
	417, 418, 419, 420, 421, 0, 422, 423, 424, 426,
	0, 427, 428, 431, 432, 433, 434, 0, 436, 644,
	0, 437, 438, 439, 0, 0, 440, 441, 442, 443,
	444, 445, 448, 645, 450, 451, 452, 453, 454, 455,
	456, 686, 458, 459, 460, 461, 462, 463, 464, 648,
	649, 465, 467, 468, 650, 652, 653, 819, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 493, 494, 495,
	654, 496, 497, 498, 499, 0, 500, 501, 502, 503,
	504, 506, 509, 510, 511, 512, 0, 515, 516, 517,
	518, 519, 520, 521, 523, 524, 525, 527, 528, 529,
	687, 530, 531, 532, 533, 657, 535, 536, 688, 538,
	539, 541, 542, 543, 544, 545, 546, 697, 0, 548,
	658, 549, 550, 551, 552, 553, 0, 555, 556, 557,
	558, 559, 560, 563, 564, 565, 567, 568, 660, 569,
	570, 0, 572, 573, 822, 575, 576, 577, 578, 579,
	0, 698, 580, 662, 581, 663, 582, 583, 584, 585,
	586, 587, 588, 590, 0, 0, 592, 593, 594, 596,
	597, 598, 599, 602, 603, 604, 605, 606, 0, 607,
	609, 611, 689, 666, 667, 668, 669, 670, 672, 673,
	674, 675, 612, 613, 629, 480, 474, 430, 472, 473,
	477, 478, 481, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 798, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 5632, 0, 0, 1666, 1667,
	5630, 306, 0, 323, 804, 0, 372, 409, 624, 0,
	0, 469, 0, 522, 526, 0, 615, 0, 0, 0,
	0, 380, 0, 809, 0, 815, 0, 821, 0, 591,
	0, 811, 812, 817, 311, 699, 614, 685, 0, 0,
	0, 476, 0, 0, 0, 844, 0, 0, 0, 319,
	0, 0, 0, 0, 813, 810, 814, 820, 808, 818,
	805, 816, 0, 513, 447, 664, 540, 318, 364, 351,
	393, 435, 547, 0, 0, 425, 595, 360, 449, 0,
	339, 482, 1302, 571, 446, 0, 554, 574, 0, 466,
	345, 505, 561, 562, 802, 807, 0, 823, 0, 349,
	350, 471, 331, 479, 3352, 3353, 3351, 492, 490, 0,
	457, 514, 671, 0, 0, 379, 0, 374, 470, 610,
	337, 589, 508, 475, 429, 537, 566, 376, 361, 362,
	405, 507, 395, 347, 600, 1330, 1332, 1328, 1324, 1325,
	1290, 1291, 1331, 1327, 396, 3358, 0, 608, 617, 651,
	631, 659, 616, 656, 626, 371, 655, 620, 619, 665,
	646, 647, 601, 661, 632, 630, 623, 622, 618, 0,
	296, 297, 298, 299, 300, 301, 302, 303, 304, 305,
	307, 0, 308, 309, 310, 312, 313, 314, 801, 315,
	316, 317, 320, 321, 322, 324, 684, 325, 326, 327,
	328, 329, 330, 1314, 1292, 332, 333, 334, 335, 336,
	338, 340, 341, 342, 343, 344, 346, 348, 1303, 1293,
	1298, 1304, 1294, 1295, 1299, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 363, 365, 366, 367, 368, 369,
	370, 373, 0, 375, 377, 0, 378, 381, 0, 382,
	383, 384, 385, 386, 387, 388, 389, 1306, 390, 0,
	391, 392, 394, 0, 397, 398, 399, 400, 401, 0,
	402, 1315, 628, 403, 404, 406, 407, 408, 410, 411,
	412, 413, 414, 415, 416, 417, 418, 419, 420, 421,
	0, 422, 423, 424, 426, 0, 427, 428, 431, 432,
	433, 434, 3344, 436, 1316, 0, 437, 438, 439, 1296,
	1297, 440, 441, 442, 443, 444, 445, 448, 1329, 450,
	451, 452, 453, 454, 455, 456, 686, 458, 459, 460,
	461, 462, 463, 464, 648, 1307, 465, 467, 468, 1313,
	652, 1308, 819, 483, 484, 485, 486, 487, 488, 489,
	491, 0, 493, 494, 495, 1309, 496, 497, 498, 499,
	0, 500, 501, 502, 503, 504, 506, 509, 510, 511,
	512, 0, 515, 516, 517, 518, 519, 520, 521, 523,
	524, 525, 527, 528, 529, 687, 530, 531, 532, 533,
	657, 535, 536, 688, 538, 539, 541, 542, 543, 544,
	545, 546, 697, 1300, 548, 658, 549, 550, 551, 552,
	553, 0, 555, 556, 557, 558, 559, 560, 563, 564,
	565, 567, 568, 1310, 569, 570, 1301, 572, 573, 822,
	575, 576, 577, 578, 579, 0, 698, 580, 1311, 581,
	1312, 582, 583, 584, 585, 586, 587, 588, 590, 0,
	0, 592, 593, 594, 596, 597, 598, 599, 602, 603,
	604, 605, 606, 0, 607, 609, 611, 689, 666, 1317,
	1318, 1321, 1319, 1320, 1322, 1323, 1333, 612, 613, 629,
	480, 474, 430, 472, 473, 477, 478, 481, 798, 0,
	0, 1305, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 306, 0, 323, 804,
	3346, 372, 409, 624, 0, 0, 469, 0, 522, 526,
	0, 615, 0, 0, 0, 0, 380, 0, 809, 0,
	815, 0, 821, 0, 591, 0, 811, 812, 817, 311,
	699, 614, 685, 0, 0, 0, 476, 0, 0, 0,
	0, 0, 0, 0, 319, 0, 0, 0, 0, 813,
	810, 814, 820, 808, 818, 805, 816, 0, 513, 447,
	664, 540, 318, 364, 351, 393, 435, 547, 0, 0,
	425, 595, 360, 449, 0, 339, 482, 1302, 571, 446,
	0, 554, 574, 0, 466, 345, 505, 561, 562, 802,
	807, 0, 823, 0, 349, 350, 471, 331, 479, 676,
	642, 534, 492, 490, 0, 457, 514, 671, 0, 0,
	379, 0, 374, 470, 610, 337, 589, 508, 475, 429,
	537, 566, 376, 361, 362, 405, 507, 395, 347, 600,
	1330, 1332, 1328, 1324, 1325, 1290, 1291, 1331, 1327, 396,
	3358, 0, 608, 617, 651, 631, 659, 616, 656, 626,
	371, 655, 620, 619, 665, 646, 647, 601, 661, 632,
	630, 623, 622, 618, 0, 296, 297, 298, 299, 300,
	301, 302, 303, 304, 305, 307, 0, 308, 309, 310,
	312, 313, 314, 801, 315, 316, 317, 320, 321, 322,
	324, 684, 325, 326, 327, 328, 329, 330, 1314, 1292,
	332, 333, 334, 335, 336, 338, 340, 341, 342, 343,
	344, 346, 348, 1303, 1293, 1298, 1304, 1294, 1295, 1299,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 363,
	365, 366, 367, 368, 369, 370, 373, 0, 375, 377,
	0, 378, 381, 0, 382, 383, 384, 385, 386, 387,
	388, 389, 1306, 390, 0, 391, 392, 394, 0, 397,
	398, 399, 400, 401, 0, 402, 1315, 628, 403, 404,
	406, 407, 408, 410, 411, 412, 413, 414, 415, 416,
	417, 418, 419, 420, 421, 0, 422, 423, 424, 426,
	0, 427, 428, 431, 432, 433, 434, 0, 436, 1316,
	0, 437, 438, 439, 1296, 1297, 440, 441, 442, 443,
	444, 445, 448, 1329, 450, 451, 452, 453, 454, 455,
	456, 686, 458, 459, 460, 461, 462, 463, 464, 648,
	1307, 465, 467, 468, 1313, 652, 1308, 819, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 493, 494, 495,
	1309, 496, 497, 498, 499, 0, 500, 501, 502, 503,
	504, 506, 509, 510, 511, 512, 0, 515, 516, 517,
	518, 519, 520, 521, 523, 524, 525, 527, 528, 529,
	687, 530, 531, 532, 533, 657, 535, 536, 688, 538,
	539, 541, 542, 543, 544, 545, 546, 697, 1300, 548,
	658, 549, 550, 551, 552, 553, 0, 555, 556, 557,
	558, 559, 560, 563, 564, 565, 567, 568, 1310, 569,
	570, 1301, 572, 573, 822, 575, 576, 577, 578, 579,
	0, 698, 580, 1311, 581, 1312, 582, 583, 584, 585,
	586, 587, 588, 590, 0, 0, 592, 593, 594, 596,
	597, 598, 599, 602, 603, 604, 605, 606, 0, 607,
	609, 611, 689, 666, 1317, 1318, 1321, 1319, 1320, 1322,
	1323, 1333, 612, 613, 629, 480, 474, 430, 472, 473,
	477, 478, 481, 798, 0, 0, 1305, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 306, 0, 323, 804, 4825, 372, 409, 624, 0,
	0, 469, 0, 522, 526, 0, 615, 0, 0, 0,
	0, 380, 0, 809, 0, 815, 0, 821, 0, 591,
	0, 811, 812, 817, 311, 699, 614, 685, 0, 0,
	0, 476, 0, 0, 0, 0, 0, 0, 0, 319,
	0, 0, 0, 0, 813, 810, 814, 820, 808, 818,
	805, 816, 0, 513, 447, 664, 540, 318, 364, 351,
	393, 435, 547, 0, 0, 425, 595, 360, 449, 0,
	339, 482, 1302, 571, 446, 0, 554, 574, 0, 466,
	345, 505, 561, 562, 802, 807, 0, 823, 0, 349,
	350, 471, 331, 479, 676, 642, 534, 492, 490, 0,
	457, 514, 671, 0, 0, 379, 0, 374, 470, 610,
	337, 589, 508, 475, 429, 537, 566, 376, 361, 362,
	405, 507, 395, 347, 600, 1330, 1332, 1328, 1324, 1325,
	1290, 1291, 1331, 1327, 396, 3358, 0, 608, 617, 651,
	631, 659, 616, 656, 626, 371, 655, 620, 619, 665,
	646, 647, 601, 661, 632, 630, 623, 622, 618, 0,
	296, 297, 298, 299, 300, 301, 302, 303, 304, 305,
	307, 0, 308, 309, 310, 312, 313, 314, 801, 315,
	316, 317, 320, 321, 322, 324, 684, 325, 326, 327,
	328, 329, 330, 1314, 1292, 332, 333, 334, 335, 336,
	338, 340, 341, 342, 343, 344, 346, 348, 1303, 1293,
	1298, 1304, 1294, 1295, 1299, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 363, 365, 366, 367, 368, 369,
	370, 373, 0, 375, 377, 0, 378, 381, 0, 382,
	383, 384, 385, 386, 387, 388, 389, 1306, 390, 0,
	391, 392, 394, 0, 397, 398, 399, 400, 401, 0,
	402, 1315, 628, 403, 404, 406, 407, 408, 410, 411,
	412, 413, 414, 415, 416, 417, 418, 419, 420, 421,
	0, 422, 423, 424, 426, 0, 427, 428, 431, 432,
	433, 434, 0, 436, 1316, 0, 437, 438, 439, 1296,
	1297, 440, 441, 442, 443, 444, 445, 448, 1329, 450,
	451, 452, 453, 454, 455, 456, 686, 458, 459, 460,
	461, 462, 463, 464, 648, 1307, 465, 467, 468, 1313,
	652, 1308, 819, 483, 484, 485, 486, 487, 488, 489,
	491, 0, 493, 494, 495, 1309, 496, 497, 498, 499,
	0, 500, 501, 502, 503, 504, 506, 509, 510, 511,
	512, 0, 515, 516, 517, 518, 519, 520, 521, 523,
	524, 525, 527, 528, 529, 687, 530, 531, 532, 533,
	657, 535, 536, 688, 538, 539, 541, 542, 543, 544,
	545, 546, 697, 1300, 548, 658, 549, 550, 551, 552,
	553, 0, 555, 556, 557, 558, 559, 560, 563, 564,
	565, 567, 568, 1310, 569, 570, 1301, 572, 573, 822,
	575, 576, 577, 578, 579, 0, 698, 580, 1311, 581,
	1312, 582, 583, 584, 585, 586, 587, 588, 590, 0,
	0, 592, 593, 594, 596, 597, 598, 599, 602, 603,
	604, 605, 606, 0, 607, 609, 611, 689, 666, 1317,
	1318, 1321, 1319, 1320, 1322, 1323, 1333, 612, 613, 629,
	480, 474, 430, 472, 473, 477, 478, 481, 798, 0,
	0, 1305, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 306, 0, 323, 804,
	5823, 372, 409, 624, 0, 0, 469, 0, 522, 526,
	0, 615, 0, 0, 0, 0, 380, 0, 809, 0,
	815, 0, 821, 0, 591, 0, 811, 812, 817, 311,
	699, 614, 685, 0, 0, 0, 476, 0, 0, 0,
	0, 0, 0, 0, 319, 0, 0, 0, 0, 813,
	810, 814, 820, 808, 818, 805, 816, 0, 513, 447,
	664, 540, 318, 364, 351, 393, 435, 547, 0, 0,
	425, 595, 360, 449, 0, 339, 482, 1302, 571, 446,
	0, 554, 574, 0, 466, 345, 505, 561, 562, 802,
	807, 0, 823, 0, 349, 350, 471, 331, 479, 676,
	642, 534, 492, 490, 0, 457, 514, 671, 0, 0,
	379, 0, 374, 470, 610, 337, 589, 508, 475, 429,
	537, 566, 376, 361, 362, 405, 507, 395, 347, 600,
	1330, 1332, 1328, 1324, 1325, 1290, 1291, 1331, 1327, 396,
	3358, 0, 608, 617, 651, 631, 659, 616, 656, 626,
	371, 655, 620, 619, 665, 646, 647, 601, 661, 632,
	630, 623, 622, 618, 0, 296, 297, 298, 299, 300,
	301, 302, 303, 304, 305, 307, 0, 308, 309, 310,
	312, 313, 314, 801, 315, 316, 317, 320, 321, 322,
	324, 684, 325, 326, 327, 328, 329, 330, 1314, 1292,
	332, 333, 334, 335, 336, 338, 340, 341, 342, 343,
	344, 346, 348, 1303, 1293, 1298, 1304, 1294, 1295, 1299,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 363,
	365, 366, 367, 368, 369, 370, 373, 0, 375, 377,
	0, 378, 381, 0, 382, 383, 384, 385, 386, 387,
	388, 389, 1306, 390, 0, 391, 392, 394, 0, 397,
	398, 399, 400, 401, 0, 402, 1315, 628, 403, 404,
	406, 407, 408, 410, 411, 412, 413, 414, 415, 416,
	417, 418, 419, 420, 421, 0, 422, 423, 424, 426,
	0, 427, 428, 431, 432, 433, 434, 0, 436, 1316,
	0, 437, 438, 439, 1296, 1297, 440, 441, 442, 443,
	444, 445, 448, 1329, 450, 451, 452, 453, 454, 455,
	456, 686, 458, 459, 460, 461, 462, 463, 464, 648,
	1307, 465, 467, 468, 1313, 652, 1308, 819, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 493, 494, 495,
	1309, 496, 497, 498, 499, 0, 500, 501, 502, 503,
	504, 506, 509, 510, 511, 512, 0, 515, 516, 517,
	518, 519, 520, 521, 523, 524, 525, 527, 528, 529,
	687, 530, 531, 532, 533, 657, 535, 536, 688, 538,
	539, 541, 542, 543, 544, 545, 546, 697, 1300, 548,
	658, 549, 550, 551, 552, 553, 0, 555, 556, 557,
	558, 559, 560, 563, 564, 565, 567, 568, 1310, 569,
	570, 1301, 572, 573, 822, 575, 576, 577, 578, 579,
	0, 698, 580, 1311, 581, 1312, 582, 583, 584, 585,
	586, 587, 588, 590, 0, 0, 592, 593, 594, 596,
	597, 598, 599, 602, 603, 604, 605, 606, 0, 607,
	609, 611, 689, 666, 1317, 1318, 1321, 1319, 1320, 1322,
	1323, 1333, 612, 613, 629, 480, 474, 430, 472, 473,
	477, 478, 481, 798, 0, 0, 1305, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 306, 0, 323, 804, 3488, 372, 409, 624, 0,
	0, 469, 0, 522, 526, 0, 615, 0, 0, 0,
	0, 380, 0, 809, 0, 815, 0, 821, 0, 591,
	0, 811, 812, 817, 311, 699, 614, 685, 0, 0,
	0, 476, 0, 0, 0, 0, 0, 0, 0, 319,
	0, 0, 0, 0, 813, 810, 814, 820, 808, 818,
	805, 816, 0, 513, 447, 664, 540, 318, 364, 351,
	393, 435, 547, 0, 0, 425, 595, 360, 449, 0,
	339, 482, 1302, 571, 446, 0, 554, 574, 0, 466,
	345, 505, 561, 562, 802, 807, 0, 823, 0, 349,
	350, 471, 331, 479, 3352, 3353, 3351, 492, 490, 0,
	457, 514, 671, 0, 0, 379, 0, 374, 470, 610,
	337, 589, 508, 475, 429, 537, 566, 376, 361, 362,
	405, 507, 395, 347, 600, 1330, 1332, 1328, 1324, 1325,
	1290, 1291, 1331, 1327, 396, 3358, 0, 608, 617, 651,
	631, 659, 616, 656, 626, 371, 655, 620, 619, 665,
	646, 647, 601, 661, 632, 630, 623, 622, 618, 0,
	296, 297, 298, 299, 300, 301, 302, 303, 304, 305,
	307, 0, 308, 309, 310, 312, 313, 314, 801, 315,
	316, 317, 320, 321, 322, 324, 684, 325, 326, 327,
	328, 329, 330, 1314, 1292, 332, 333, 334, 335, 336,
	338, 340, 341, 342, 343, 344, 346, 348, 1303, 1293,
	1298, 1304, 1294, 1295, 1299, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 363, 365, 366, 367, 368, 369,
	370, 373, 0, 375, 377, 0, 378, 381, 0, 382,
	383, 384, 385, 386, 387, 388, 389, 1306, 390, 0,
	391, 392, 394, 0, 397, 398, 399, 400, 401, 0,
	402, 1315, 628, 403, 404, 406, 407, 408, 410, 411,
	412, 413, 414, 415, 416, 417, 418, 419, 420, 421,
	0, 422, 423, 424, 426, 0, 427, 428, 431, 432,
	433, 434, 0, 436, 1316, 0, 437, 438, 439, 1296,
	1297, 440, 441, 442, 443, 444, 445, 448, 1329, 450,
	451, 452, 453, 454, 455, 456, 686, 458, 459, 460,
	461, 462, 463, 464, 648, 1307, 465, 467, 468, 1313,
	652, 1308, 819, 483, 484, 485, 486, 487, 488, 489,
	491, 0, 493, 494, 495, 1309, 496, 497, 498, 499,
	0, 500, 501, 502, 503, 504, 506, 509, 510, 511,
	512, 0, 515, 516, 517, 518, 519, 520, 521, 523,
	524, 525, 527, 528, 529, 687, 530, 531, 532, 533,
	657, 535, 536, 688, 538, 539, 541, 542, 543, 544,
	545, 546, 697, 1300, 548, 658, 549, 550, 551, 552,
	553, 0, 555, 556, 557, 558, 559, 560, 563, 564,
	565, 567, 568, 1310, 569, 570, 1301, 572, 573, 822,
	575, 576, 577, 578, 579, 0, 698, 580, 1311, 581,
	1312, 582, 583, 584, 585, 586, 587, 588, 590, 0,
	0, 592, 593, 594, 596, 597, 598, 599, 602, 603,
	604, 605, 606, 0, 607, 609, 611, 689, 666, 1317,
	1318, 1321, 1319, 1320, 1322, 1323, 1333, 612, 613, 629,
	480, 474, 430, 472, 473, 477, 478, 481, 0, 0,
	0, 1305, 0, 929, 0, 1665, 784, 0, 0, 0,
	0, 770, 0, 0, 0, 0, 0, 0, 0, 0,
	160, 306, 0, 323, 804, 0, 372, 409, 624, 0,
	0, 469, 0, 522, 526, 0, 615, 0, 0, 1749,
	0, 380, 1745, 809, 0, 815, 0, 821, 1744, 591,
	0, 811, 812, 817, 311, 699, 614, 685, 0, 0,
	0, 476, 0, 0, 0, 0, 0, 0, 0, 319,
	0, 0, 0, 1746, 813, 810, 814, 820, 808, 818,
	805, 816, 0, 513, 447, 664, 540, 318, 364, 351,
	393, 435, 547, 0, 0, 425, 595, 360, 449, 0,
	339, 482, 0, 571, 446, 0, 554, 574, 0, 466,
	345, 505, 561, 562, 802, 807, 0, 823, 0, 349,
	350, 471, 331, 479, 676, 642, 534, 492, 490, 0,
	457, 514, 671, 0, 0, 379, 0, 374, 470, 610,
	337, 589, 508, 475, 429, 537, 566, 376, 361, 362,
	405, 507, 395, 347, 600, 639, 643, 641, 637, 634,
	638, 635, 636, 640, 396, 633, 0, 608, 617, 651,
	631, 659, 616, 656, 626, 371, 655, 620, 619, 665,
	646, 647, 601, 661, 632, 630, 623, 622, 618, 0,
	296, 297, 298, 299, 300, 301, 302, 303, 304, 305,
	307, 0, 308, 309, 310, 312, 313, 314, 801, 315,
	316, 317, 320, 321, 322, 324, 684, 325, 326, 327,
	328, 329, 330, 621, 803, 332, 333, 334, 335, 336,
	338, 340, 341, 342, 343, 344, 346, 348, 0, 0,
	0, 806, 0, 0, 0, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 363, 365, 366, 367, 368, 369,
	370, 373, 0, 375, 377, 0, 378, 381, 0, 382,
	383, 384, 385, 386, 387, 388, 389, 625, 390, 0,
	391, 392, 394, 0, 397, 398, 399, 400, 401, 0,
	402, 627, 628, 403, 404, 406, 407, 408, 410, 411,
	412, 413, 414, 415, 416, 417, 418, 419, 420, 421,
	0, 422, 423, 424, 426, 0, 427, 428, 431, 432,
	433, 434, 0, 436, 644, 0, 437, 438, 439, 0,
	0, 440, 441, 442, 443, 444, 445, 448, 645, 450,
	451, 452, 453, 454, 455, 456, 686, 458, 459, 460,
	461, 462, 463, 464, 648, 649, 465, 467, 468, 650,
	652, 653, 819, 483, 484, 485, 486, 487, 488, 489,
	491, 0, 493, 494, 495, 654, 496, 497, 498, 499,
	0, 500, 501, 502, 503, 504, 506, 509, 510, 511,
	512, 0, 515, 516, 517, 518, 519, 520, 521, 523,
	524, 525, 527, 528, 529, 687, 530, 531, 532, 533,
	657, 535, 536, 688, 538, 539, 541, 542, 543, 544,
	545, 546, 697, 0, 548, 658, 549, 550, 551, 552,
	553, 0, 555, 556, 557, 558, 559, 560, 563, 564,
	565, 567, 568, 660, 569, 570, 0, 572, 573, 822,
	575, 576, 577, 578, 579, 0, 698, 580, 662, 581,
	663, 582, 583, 584, 585, 586, 587, 588, 590, 0,
	0, 592, 593, 594, 596, 597, 598, 599, 602, 603,
	604, 605, 606, 0, 607, 609, 611, 689, 666, 667,
	668, 669, 670, 672, 673, 674, 675, 612, 613, 629,
	480, 474, 430, 472, 473, 477, 478, 481, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 929, 0, 1665,
	784, 0, 0, 0, 0, 770, 0, 0, 0, 0,
	0, 0, 0, 1666, 1667, 306, 0, 323, 804, 0,
	372, 409, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 1740, 0, 380, 1745, 809, 0, 815,
	0, 821, 1744, 591, 0, 811, 812, 817, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 1746, 813, 810,
	814, 820, 808, 818, 805, 816, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 802, 807,
	0, 823, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 801, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 803, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 806, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 819, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 822, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 929, 0, 1665, 784, 0, 0, 0, 0, 770,
	0, 0, 0, 0, 0, 0, 0, 1666, 1667, 306,
	0, 323, 804, 0, 372, 409, 624, 0, 0, 469,
	0, 522, 526, 0, 615, 0, 0, 0, 0, 380,
	1745, 809, 0, 815, 0, 821, 1744, 591, 0, 811,
	812, 817, 311, 699, 614, 685, 0, 0, 0, 476,
	0, 0, 0, 0, 0, 0, 0, 319, 0, 0,
	0, 1746, 813, 810, 814, 820, 808, 818, 805, 816,
	0, 513, 447, 664, 540, 318, 364, 351, 393, 435,
	547, 0, 0, 425, 595, 360, 449, 0, 339, 482,
	0, 571, 446, 0, 554, 574, 0, 466, 345, 505,
	561, 562, 802, 807, 0, 823, 0, 349, 350, 471,
	331, 479, 676, 642, 534, 492, 490, 0, 457, 514,
	671, 0, 0, 379, 0, 374, 470, 610, 337, 589,
	508, 475, 429, 537, 566, 376, 361, 362, 405, 507,
	395, 347, 600, 639, 643, 641, 637, 634, 638, 635,
	636, 640, 396, 633, 0, 608, 617, 651, 631, 659,
	616, 656, 626, 371, 655, 620, 619, 665, 646, 647,
	601, 661, 632, 630, 623, 622, 618, 0, 296, 297,
	298, 299, 300, 301, 302, 303, 304, 305, 307, 0,
	308, 309, 310, 312, 313, 314, 801, 315, 316, 317,
	320, 321, 322, 324, 684, 325, 326, 327, 328, 329,
	330, 621, 803, 332, 333, 334, 335, 336, 338, 340,
	341, 342, 343, 344, 346, 348, 0, 0, 0, 806,
	0, 0, 0, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 363, 365, 366, 367, 368, 369, 370, 373,
	0, 375, 377, 0, 378, 381, 0, 382, 383, 384,
	385, 386, 387, 388, 389, 625, 390, 0, 391, 392,
	394, 0, 397, 398, 399, 400, 401, 0, 402, 627,
	628, 403, 404, 406, 407, 408, 410, 411, 412, 413,
	414, 415, 416, 417, 418, 419, 420, 421, 0, 422,
	423, 424, 426, 0, 427, 428, 431, 432, 433, 434,
	0, 436, 644, 0, 437, 438, 439, 0, 0, 440,
	441, 442, 443, 444, 445, 448, 645, 450, 451, 452,
	453, 454, 455, 456, 686, 458, 459, 460, 461, 462,
	463, 464, 648, 649, 465, 467, 468, 650, 652, 653,
	819, 483, 484, 485, 486, 487, 488, 489, 491, 0,
	493, 494, 495, 654, 496, 497, 498, 499, 0, 500,
	501, 502, 503, 504, 506, 509, 510, 511, 512, 0,
	515, 516, 517, 518, 519, 520, 521, 523, 524, 525,
	527, 528, 529, 687, 530, 531, 532, 533, 657, 535,
	536, 688, 538, 539, 541, 542, 543, 544, 545, 546,
	697, 0, 548, 658, 549, 550, 551, 552, 553, 0,
	555, 556, 557, 558, 559, 560, 563, 564, 565, 567,
	568, 660, 569, 570, 0, 572, 573, 822, 575, 576,
	577, 578, 579, 0, 698, 580, 662, 581, 663, 582,
	583, 584, 585, 586, 587, 588, 590, 0, 0, 592,
	593, 594, 596, 597, 598, 599, 602, 603, 604, 605,
	606, 0, 607, 609, 611, 689, 666, 667, 668, 669,
	670, 672, 673, 674, 675, 612, 613, 629, 480, 474,
	430, 472, 473, 477, 478, 481, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 929, 0, 0, 784, 0,
	0, 0, 0, 770, 0, 0, 0, 0, 0, 0,
	0, 1666, 1667, 306, 0, 323, 804, 0, 372, 409,
	624, 0, 0, 469, 0, 522, 526, 0, 615, 0,
	0, 3635, 0, 380, 1745, 809, 0, 815, 0, 821,
	1744, 591, 0, 811, 812, 817, 311, 699, 614, 685,
	0, 0, 0, 476, 0, 0, 0, 0, 0, 0,
	0, 319, 0, 0, 0, 1746, 813, 810, 814, 820,
	808, 818, 805, 816, 0, 513, 447, 664, 540, 318,
	364, 351, 393, 435, 547, 0, 0, 425, 595, 360,
	449, 0, 339, 482, 0, 571, 446, 0, 554, 574,
	0, 466, 345, 505, 561, 562, 802, 807, 0, 823,
	0, 349, 350, 471, 331, 479, 676, 642, 534, 492,
	490, 0, 457, 514, 671, 0, 0, 379, 0, 374,
	470, 610, 337, 589, 508, 475, 429, 537, 566, 376,
	361, 362, 405, 507, 395, 347, 600, 639, 643, 641,
	637, 634, 638, 635, 636, 640, 396, 633, 0, 608,
	617, 651, 631, 659, 616, 656, 626, 371, 655, 620,
	619, 665, 646, 647, 601, 661, 632, 630, 623, 622,
	618, 0, 296, 297, 298, 299, 300, 301, 302, 303,
	304, 305, 307, 0, 308, 309, 310, 312, 313, 314,
	801, 315, 316, 317, 320, 321, 322, 324, 684, 325,
	326, 327, 328, 329, 330, 621, 803, 332, 333, 334,
	335, 336, 338, 340, 341, 342, 343, 344, 346, 348,
	0, 0, 0, 806, 0, 0, 0, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 363, 365, 366, 367,
	368, 369, 370, 373, 0, 375, 377, 0, 378, 381,
	0, 382, 383, 384, 385, 386, 387, 388, 389, 625,
	390, 0, 391, 392, 394, 0, 397, 398, 399, 400,
	401, 0, 402, 627, 628, 403, 404, 406, 407, 408,
	410, 411, 412, 413, 414, 415, 416, 417, 418, 419,
	420, 421, 0, 422, 423, 424, 426, 0, 427, 428,
	431, 432, 433, 434, 0, 436, 644, 0, 437, 438,
	439, 0, 0, 440, 441, 442, 443, 444, 445, 448,
	645, 450, 451, 452, 453, 454, 455, 456, 686, 458,
	459, 460, 461, 462, 463, 464, 648, 649, 465, 467,
	468, 650, 652, 653, 819, 483, 484, 485, 486, 487,
	488, 489, 491, 0, 493, 494, 495, 654, 496, 497,
	498, 499, 0, 500, 501, 502, 503, 504, 506, 509,
	510, 511, 512, 0, 515, 516, 517, 518, 519, 520,
	521, 523, 524, 525, 527, 528, 529, 687, 530, 531,
	532, 533, 657, 535, 536, 688, 538, 539, 541, 542,
	543, 544, 545, 546, 697, 0, 548, 658, 549, 550,
	551, 552, 553, 0, 555, 556, 557, 558, 559, 560,
	563, 564, 565, 567, 568, 660, 569, 570, 0, 572,
	573, 822, 575, 576, 577, 578, 579, 0, 698, 580,
	662, 581, 663, 582, 583, 584, 585, 586, 587, 588,
	590, 0, 0, 592, 593, 594, 596, 597, 598, 599,
	602, 603, 604, 605, 606, 0, 607, 609, 611, 689,
	666, 667, 668, 669, 670, 672, 673, 674, 675, 612,
	613, 629, 480, 474, 430, 472, 473, 477, 478, 481,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 929,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 768, 769, 306, 0, 323,
	804, 0, 372, 409, 624, 0, 0, 469, 0, 522,
	526, 166, 615, 0, 0, 0, 0, 380, 0, 809,
	0, 815, 0, 821, 0, 591, 0, 811, 812, 817,
	311, 699, 614, 685, 0, 0, 0, 476, 163, 0,
	0, 0, 164, 0, 0, 319, 0, 0, 0, 0,
	813, 810, 814, 820, 808, 818, 805, 816, 0, 513,
	447, 1132, 540, 318, 364, 351, 393, 435, 547, 0,
	0, 425, 595, 360, 449, 0, 339, 482, 0, 571,
	446, 0, 554, 574, 0, 466, 345, 505, 561, 562,
	802, 807, 0, 823, 161, 349, 350, 471, 331, 479,
	676, 642, 534, 492, 490, 0, 457, 514, 671, 0,
	0, 379, 0, 374, 470, 610, 337, 589, 508, 475,
	429, 537, 566, 376, 361, 362, 405, 507, 395, 347,
	600, 639, 643, 641, 637, 634, 638, 635, 636, 640,
	396, 633, 0, 608, 617, 651, 631, 659, 616, 656,
	626, 371, 655, 620, 619, 665, 646, 647, 601, 661,
	632, 630, 623, 622, 618, 0, 296, 297, 298, 299,
	300, 301, 302, 303, 304, 305, 307, 162, 308, 309,
	310, 312, 313, 314, 801, 315, 316, 317, 320, 321,
	322, 324, 684, 325, 326, 327, 328, 329, 330, 621,
	803, 332, 333, 334, 335, 336, 338, 340, 341, 342,
	343, 344, 346, 348, 0, 0, 0, 806, 0, 0,
	0, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	363, 365, 366, 367, 368, 369, 370, 373, 0, 375,
	377, 0, 378, 381, 0, 382, 383, 384, 385, 386,
	387, 388, 389, 625, 390, 0, 391, 392, 394, 0,
	397, 398, 399, 400, 401, 0, 402, 627, 628, 403,
	404, 406, 407, 408, 410, 411, 412, 413, 414, 415,
	416, 417, 418, 419, 420, 421, 0, 422, 423, 424,
	426, 0, 427, 428, 431, 432, 433, 434, 0, 436,
	644, 0, 437, 438, 439, 0, 0, 440, 441, 442,
	443, 444, 445, 448, 645, 450, 451, 452, 453, 454,
	455, 456, 686, 458, 459, 460, 461, 462, 463, 464,
	648, 649, 465, 467, 468, 650, 652, 653, 819, 483,
	484, 485, 486, 487, 488, 489, 491, 0, 493, 494,
	495, 654, 496, 497, 498, 499, 0, 500, 501, 502,
	503, 504, 506, 509, 510, 511, 512, 0, 515, 516,
	517, 518, 519, 520, 521, 523, 524, 525, 527, 528,
	529, 687, 530, 531, 532, 533, 657, 535, 536, 688,
	538, 539, 541, 542, 543, 544, 545, 546, 697, 0,
	548, 658, 549, 550, 551, 552, 553, 0, 555, 556,
	557, 558, 559, 560, 563, 564, 565, 567, 568, 660,
	569, 570, 0, 572, 573, 822, 575, 576, 577, 578,
	579, 0, 698, 580, 662, 581, 663, 582, 583, 584,
	585, 586, 587, 588, 590, 0, 0, 592, 593, 594,
	596, 597, 598, 599, 602, 603, 604, 605, 606, 0,
	607, 609, 611, 689, 666, 667, 668, 669, 670, 672,
	673, 674, 675, 612, 613, 629, 480, 474, 430, 472,
	473, 477, 478, 481, 798, 0, 0, 0, 0, 0,
	1135, 0, 0, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 323, 804, 160, 372, 409, 624,
	0, 0, 469, 0, 522, 526, 0, 615, 0, 0,
	0, 0, 380, 0, 809, 0, 815, 0, 821, 0,
	591, 0, 811, 812, 817, 311, 699, 614, 685, 0,
	0, 0, 476, 0, 0, 0, 0, 0, 0, 0,
	319, 0, 0, 0, 0, 813, 810, 814, 820, 808,
	818, 805, 816, 0, 513, 447, 664, 540, 318, 364,
	351, 393, 435, 547, 0, 0, 425, 595, 360, 449,
	0, 339, 482, 0, 571, 446, 0, 554, 574, 0,
	466, 345, 505, 561, 562, 802, 807, 0, 823, 0,
	349, 350, 471, 331, 479, 676, 642, 534, 492, 490,
	0, 457, 514, 671, 0, 0, 379, 0, 374, 470,
	610, 337, 589, 508, 475, 429, 537, 566, 376, 361,
	362, 405, 507, 395, 347, 600, 639, 643, 641, 637,
	634, 638, 635, 636, 640, 396, 633, 0, 608, 617,
	651, 631, 659, 616, 656, 626, 371, 655, 620, 619,
	665, 646, 647, 601, 661, 632, 630, 623, 622, 618,
	0, 296, 297, 298, 299, 300, 301, 302, 303, 304,
	305, 307, 0, 308, 309, 310, 312, 313, 314, 801,
	315, 316, 317, 320, 321, 322, 324, 684, 325, 326,
	327, 328, 329, 330, 621, 803, 332, 333, 334, 335,
	336, 338, 340, 341, 342, 343, 344, 346, 348, 0,
	0, 0, 806, 0, 0, 0, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 363, 365, 366, 367, 368,
	369, 370, 373, 0, 375, 377, 0, 378, 381, 0,
	382, 383, 384, 385, 386, 387, 388, 389, 625, 390,
	0, 391, 392, 394, 0, 397, 398, 399, 400, 401,
	0, 402, 627, 628, 403, 404, 406, 407, 408, 410,
	411, 412, 413, 414, 415, 416, 417, 418, 419, 420,
	421, 0, 422, 423, 424, 426, 0, 427, 428, 431,
	432, 433, 434, 0, 436, 644, 0, 437, 438, 439,
	0, 0, 440, 441, 442, 443, 444, 445, 448, 645,
	450, 451, 452, 453, 454, 455, 456, 686, 458, 459,
	460, 461, 462, 463, 464, 648, 649, 465, 467, 468,
	650, 652, 653, 819, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 493, 494, 495, 654, 496, 497, 498,
	499, 0, 500, 501, 502, 503, 504, 506, 509, 510,
	511, 512, 0, 515, 516, 517, 518, 519, 520, 521,
	523, 524, 525, 527, 528, 529, 687, 530, 531, 532,
	533, 657, 535, 536, 688, 538, 539, 541, 542, 543,
	544, 545, 546, 697, 0, 548, 658, 549, 550, 551,
	552, 553, 0, 555, 556, 557, 558, 559, 560, 563,
	564, 565, 567, 568, 660, 569, 570, 0, 572, 573,
	822, 575, 576, 577, 578, 579, 0, 698, 580, 662,
	581, 663, 582, 583, 584, 585, 586, 587, 588, 590,
	0, 0, 592, 593, 594, 596, 597, 598, 599, 602,
	603, 604, 605, 606, 0, 607, 609, 611, 689, 666,
	667, 668, 669, 670, 672, 673, 674, 675, 612, 613,
	629, 480, 474, 430, 472, 473, 477, 478, 481, 293,
	0, 0, 0, 0, 0, 0, 898, 0, 0, 0,
	0, 0, 0, 909, 910, 911, 0, 306, 0, 323,
	0, 5528, 372, 409, 624, 0, 0, 469, 0, 522,
	526, 0, 615, 0, 0, 0, 0, 380, 0, 0,
	0, 0, 0, 0, 0, 591, 0, 0, 0, 0,
	311, 699, 614, 685, 0, 0, 0, 476, 0, 0,
	0, 0, 0, 0, 0, 319, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 513,
	447, 664, 540, 318, 364, 351, 393, 435, 547, 0,
	0, 425, 595, 360, 449, 0, 339, 482, 0, 571,
	446, 0, 554, 574, 0, 466, 345, 505, 561, 562,
	0, 0, 0, 0, 0, 349, 350, 471, 331, 479,
	676, 642, 534, 492, 490, 0, 457, 514, 671, 0,
	0, 379, 0, 374, 470, 610, 337, 589, 508, 475,
	429, 537, 566, 376, 361, 362, 405, 507, 395, 347,
	600, 639, 643, 641, 637, 634, 638, 635, 636, 640,
	396, 633, 0, 608, 617, 651, 631, 659, 616, 656,
	626, 371, 655, 620, 619, 665, 646, 647, 601, 661,
	632, 630, 623, 622, 618, 0, 296, 297, 298, 299,
	300, 301, 302, 303, 304, 305, 307, 0, 308, 309,
	310, 312, 313, 314, 0, 315, 316, 317, 320, 321,
	322, 324, 684, 325, 326, 327, 328, 329, 330, 621,
	0, 332, 333, 334, 335, 336, 338, 340, 341, 342,
	343, 344, 346, 348, 0, 0, 0, 0, 0, 0,
	0, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	363, 365, 366, 367, 368, 369, 370, 373, 0, 375,
	377, 0, 378, 381, 0, 382, 383, 384, 385, 386,
	387, 388, 389, 625, 390, 0, 391, 392, 394, 0,
	397, 398, 399, 400, 401, 0, 402, 627, 628, 403,
	404, 406, 407, 408, 410, 411, 412, 413, 414, 415,
	416, 417, 418, 419, 420, 421, 0, 422, 423, 424,
	426, 0, 427, 428, 431, 432, 433, 434, 0, 436,
	644, 0, 437, 438, 439, 0, 0, 440, 441, 442,
	443, 444, 445, 448, 645, 450, 451, 452, 453, 454,
	455, 456, 686, 458, 459, 460, 461, 462, 463, 464,
	648, 649, 465, 467, 468, 650, 652, 653, 0, 483,
	484, 485, 486, 487, 488, 489, 491, 0, 493, 494,
	495, 654, 496, 497, 498, 499, 0, 500, 501, 502,
	503, 504, 506, 509, 510, 511, 512, 0, 515, 516,
	517, 518, 519, 520, 521, 523, 524, 525, 527, 528,
	529, 687, 530, 531, 532, 533, 657, 535, 536, 688,
	538, 539, 541, 542, 543, 544, 545, 546, 697, 0,
	548, 658, 549, 550, 551, 552, 553, 0, 555, 556,
	557, 558, 559, 560, 563, 564, 565, 567, 568, 660,
	569, 570, 0, 572, 573, 0, 575, 576, 577, 578,
	579, 0, 698, 580, 662, 581, 663, 582, 583, 584,
	585, 586, 587, 588, 590, 0, 0, 592, 593, 594,
	596, 597, 598, 599, 602, 603, 604, 605, 606, 0,
	607, 609, 611, 689, 666, 667, 668, 669, 670, 672,
	673, 674, 675, 612, 613, 629, 480, 474, 430, 472,
	473, 477, 478, 481, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	906, 907, 908, 0, 0, 0, 0, 0, 293, 900,
	901, 902, 903, 904, 905, 898, 0, 0, 0, 0,
	0, 0, 909, 910, 911, 0, 306, 0, 323, 0,
	0, 372, 409, 624, 0, 0, 469, 0, 522, 526,
	0, 615, 0, 0, 0, 0, 380, 0, 0, 0,
	0, 0, 0, 0, 591, 0, 0, 0, 0, 311,
	699, 614, 685, 0, 0, 0, 5503, 0, 0, 0,
	0, 0, 0, 0, 319, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 513, 447,
	664, 540, 318, 364, 351, 393, 435, 547, 0, 0,
	425, 595, 360, 449, 0, 339, 482, 0, 571, 446,
	0, 554, 574, 0, 466, 345, 505, 561, 562, 0,
	0, 0, 0, 0, 349, 350, 471, 331, 479, 676,
	642, 534, 492, 490, 0, 457, 514, 671, 0, 0,
	379, 0, 374, 470, 610, 337, 589, 508, 475, 429,
	537, 566, 376, 361, 362, 405, 507, 395, 347, 600,
	639, 643, 641, 637, 634, 638, 635, 636, 640, 396,
	633, 0, 608, 617, 651, 631, 659, 616, 656, 626,
	371, 655, 620, 619, 665, 646, 647, 601, 661, 632,
	630, 623, 622, 618, 0, 296, 297, 298, 299, 300,
	301, 302, 303, 304, 305, 307, 0, 308, 309, 310,
	312, 313, 314, 0, 315, 316, 317, 320, 321, 322,
	324, 684, 325, 326, 327, 328, 329, 330, 621, 0,
	332, 333, 334, 335, 336, 338, 340, 341, 342, 343,
	344, 346, 348, 0, 0, 0, 0, 0, 0, 0,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 363,
	365, 366, 367, 368, 369, 370, 373, 0, 375, 377,
	0, 378, 381, 0, 382, 383, 384, 385, 386, 387,
	388, 389, 625, 390, 0, 391, 392, 394, 0, 397,
	398, 399, 400, 401, 0, 402, 627, 628, 403, 404,
	406, 407, 408, 410, 411, 412, 413, 414, 415, 416,
	417, 418, 419, 420, 421, 0, 422, 423, 424, 426,
	0, 427, 428, 431, 432, 433, 434, 0, 436, 644,
	0, 437, 438, 439, 0, 0, 440, 441, 442, 443,
	444, 445, 448, 645, 450, 451, 452, 453, 454, 455,
	456, 686, 458, 459, 460, 461, 462, 463, 464, 648,
	649, 465, 467, 468, 650, 652, 653, 0, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 493, 494, 495,
	654, 496, 497, 498, 499, 0, 500, 501, 502, 503,
	504, 506, 509, 510, 511, 512, 0, 515, 516, 517,
	518, 519, 520, 521, 523, 524, 525, 527, 528, 529,
	687, 530, 531, 532, 533, 657, 535, 536, 688, 538,
	539, 541, 542, 543, 544, 545, 546, 697, 0, 548,
	658, 549, 550, 551, 552, 553, 0, 555, 556, 557,
	558, 559, 560, 563, 564, 565, 567, 568, 660, 569,
	570, 0, 572, 573, 0, 575, 576, 577, 578, 579,
	0, 698, 580, 662, 581, 663, 582, 583, 584, 585,
	586, 587, 588, 590, 0, 0, 592, 593, 594, 596,
	597, 598, 599, 602, 603, 604, 605, 606, 0, 607,
	609, 611, 689, 666, 667, 668, 669, 670, 672, 673,
	674, 675, 612, 613, 629, 480, 474, 430, 472, 473,
	477, 478, 481, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 906,
	907, 908, 0, 0, 0, 0, 0, 293, 900, 901,
	902, 903, 904, 905, 898, 0, 0, 0, 0, 0,
	0, 909, 910, 911, 0, 306, 0, 323, 0, 0,
	372, 409, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 3755, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 3756, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 906, 907,
	908, 0, 0, 0, 0, 0, 293, 900, 901, 902,
	903, 904, 905, 898, 0, 0, 0, 0, 0, 0,
	909, 910, 911, 0, 306, 0, 323, 0, 0, 372,
	409, 624, 0, 0, 469, 0, 522, 526, 0, 615,
	0, 0, 0, 0, 380, 0, 0, 0, 0, 0,
	0, 0, 591, 0, 0, 0, 0, 311, 699, 614,
	685, 0, 0, 0, 476, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 513, 447, 664, 540,
	318, 364, 351, 393, 435, 547, 0, 0, 425, 595,
	360, 449, 0, 339, 482, 0, 571, 446, 0, 554,
	574, 0, 466, 345, 505, 561, 562, 0, 0, 0,
	0, 0, 349, 350, 471, 331, 479, 676, 642, 534,
	492, 490, 0, 457, 514, 671, 0, 0, 379, 0,
	374, 470, 610, 337, 589, 508, 475, 429, 537, 566,
	376, 361, 362, 405, 507, 395, 347, 600, 639, 643,
	641, 637, 634, 638, 635, 636, 640, 396, 633, 0,
	608, 617, 651, 631, 659, 616, 656, 626, 371, 655,
	620, 619, 665, 646, 647, 601, 661, 632, 630, 623,
	622, 618, 0, 296, 297, 298, 299, 300, 301, 302,
	303, 304, 305, 307, 0, 308, 309, 310, 312, 313,
	314, 0, 315, 316, 317, 320, 321, 322, 324, 684,
	325, 326, 327, 1851, 329, 330, 621, 0, 332, 333,
	334, 335, 336, 338, 340, 341, 342, 343, 344, 346,
	348, 0, 0, 0, 0, 0, 0, 0, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 363, 365, 366,
	367, 368, 369, 370, 373, 0, 375, 377, 0, 378,
	381, 0, 382, 383, 384, 385, 386, 387, 388, 389,
	625, 1852, 0, 391, 392, 394, 0, 397, 398, 399,
	400, 401, 0, 402, 627, 628, 403, 404, 406, 407,
	408, 410, 411, 412, 413, 414, 415, 416, 417, 418,
	419, 420, 421, 0, 422, 423, 424, 426, 0, 427,
	428, 431, 432, 433, 434, 0, 436, 644, 0, 437,
	438, 439, 0, 0, 440, 441, 442, 443, 444, 445,
	448, 645, 450, 451, 452, 453, 454, 455, 456, 686,
	458, 459, 460, 461, 462, 463, 464, 648, 649, 465,
	467, 468, 650, 652, 653, 0, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 493, 494, 495, 654, 496,
	497, 498, 499, 0, 500, 501, 502, 503, 504, 506,
	509, 510, 511, 512, 0, 515, 516, 517, 518, 519,
	520, 521, 523, 524, 525, 527, 528, 529, 687, 530,
	531, 532, 533, 657, 535, 536, 688, 538, 539, 541,
	542, 543, 544, 545, 546, 697, 0, 548, 658, 549,
	550, 551, 552, 553, 0, 555, 556, 557, 558, 559,
	560, 563, 564, 565, 567, 568, 660, 569, 570, 0,
	572, 573, 0, 575, 576, 577, 578, 579, 0, 698,
	580, 662, 581, 663, 582, 583, 584, 585, 586, 587,
	588, 590, 0, 0, 592, 593, 594, 596, 597, 598,
	599, 602, 603, 604, 605, 606, 0, 607, 609, 611,
	689, 666, 667, 668, 669, 670, 672, 673, 674, 675,
	612, 613, 629, 480, 474, 430, 472, 473, 477, 478,
	481, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 906, 907, 908,
	0, 0, 0, 0, 0, 293, 900, 901, 902, 903,
	904, 905, 898, 0, 0, 0, 0, 0, 0, 909,
	910, 911, 0, 306, 0, 323, 0, 0, 372, 409,
	624, 0, 0, 469, 0, 522, 526, 0, 615, 0,
	0, 0, 0, 380, 0, 0, 0, 0, 0, 0,
	0, 591, 0, 0, 0, 0, 311, 699, 614, 685,
	0, 0, 0, 476, 0, 0, 0, 0, 0, 0,
	0, 319, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 513, 447, 664, 540, 318,
	364, 351, 393, 435, 547, 0, 0, 425, 595, 360,
	449, 0, 339, 482, 0, 571, 446, 0, 554, 574,
	0, 466, 345, 505, 561, 562, 0, 0, 0, 0,
	0, 349, 350, 471, 331, 479, 676, 642, 534, 492,
	490, 0, 457, 514, 671, 0, 0, 379, 0, 374,
	470, 610, 337, 589, 508, 475, 429, 537, 566, 376,
	361, 362, 405, 507, 395, 347, 600, 639, 643, 641,
	637, 634, 638, 635, 636, 640, 396, 633, 0, 608,
	617, 651, 631, 659, 616, 656, 626, 371, 655, 620,
	619, 665, 646, 647, 601, 661, 632, 630, 623, 622,
	618, 0, 296, 297, 298, 299, 300, 301, 302, 303,
	304, 305, 307, 0, 308, 309, 310, 312, 313, 314,
	0, 315, 316, 317, 320, 321, 322, 324, 684, 325,
	326, 327, 979, 329, 330, 621, 0, 332, 333, 334,
	335, 336, 338, 340, 341, 342, 343, 344, 346, 348,
	0, 0, 0, 0, 0, 0, 0, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 363, 365, 366, 367,
	368, 369, 370, 373, 0, 375, 377, 0, 378, 381,
	0, 382, 383, 384, 385, 386, 387, 388, 389, 625,
	980, 0, 391, 392, 394, 0, 397, 398, 399, 400,
	401, 0, 402, 627, 628, 403, 404, 406, 407, 408,
	410, 411, 412, 413, 414, 415, 416, 417, 418, 419,
	420, 421, 0, 422, 423, 424, 426, 0, 427, 428,
	431, 432, 433, 434, 0, 436, 644, 0, 437, 438,
	439, 0, 0, 440, 441, 442, 443, 444, 445, 448,
	645, 450, 451, 452, 453, 454, 455, 456, 686, 458,
	459, 460, 461, 462, 463, 464, 648, 649, 465, 467,
	468, 650, 652, 653, 0, 483, 484, 485, 486, 487,
	488, 489, 491, 0, 493, 494, 495, 654, 496, 497,
	498, 499, 0, 500, 501, 502, 503, 504, 506, 509,
	510, 511, 512, 0, 515, 516, 517, 518, 519, 520,
	521, 523, 524, 525, 527, 528, 529, 687, 530, 531,
	532, 533, 657, 535, 536, 688, 538, 539, 541, 542,
	543, 544, 545, 546, 697, 0, 548, 658, 549, 550,
	551, 552, 553, 0, 555, 556, 557, 558, 559, 560,
	563, 564, 565, 567, 568, 660, 569, 570, 0, 572,
	573, 0, 575, 576, 577, 578, 579, 0, 698, 580,
	662, 581, 663, 582, 583, 584, 585, 586, 587, 588,
	590, 0, 0, 592, 593, 594, 596, 597, 598, 599,
	602, 603, 604, 605, 606, 0, 607, 609, 611, 689,
	666, 667, 668, 669, 670, 672, 673, 674, 675, 612,
	613, 629, 480, 474, 430, 472, 473, 477, 478, 481,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 906, 907, 908, 0,
	0, 0, 0, 0, 293, 900, 901, 902, 903, 904,
	905, 898, 0, 0, 0, 0, 0, 0, 909, 910,
	911, 0, 306, 0, 323, 0, 0, 372, 409, 624,
	0, 0, 469, 0, 522, 526, 0, 615, 0, 0,
	0, 0, 380, 0, 0, 0, 0, 0, 0, 0,
	591, 0, 0, 0, 0, 311, 699, 614, 685, 0,
	0, 0, 476, 0, 0, 0, 0, 0, 0, 0,
	319, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 513, 447, 664, 540, 318, 364,
	351, 393, 435, 547, 0, 0, 425, 595, 360, 449,
	0, 339, 482, 0, 571, 446, 0, 554, 574, 0,
	466, 345, 505, 561, 562, 0, 0, 0, 0, 0,
	349, 350, 471, 331, 479, 676, 642, 534, 492, 490,
	0, 457, 514, 671, 0, 0, 379, 0, 374, 470,
	610, 337, 589, 508, 475, 429, 537, 566, 376, 361,
	362, 405, 507, 395, 347, 600, 639, 643, 641, 637,
	634, 638, 635, 636, 640, 396, 633, 0, 608, 617,
	651, 631, 659, 616, 656, 626, 371, 655, 620, 619,
	665, 646, 647, 601, 661, 632, 630, 623, 622, 618,
	0, 296, 297, 298, 299, 300, 301, 302, 303, 304,
	305, 307, 0, 308, 309, 310, 312, 313, 314, 0,
	315, 316, 317, 320, 321, 322, 324, 684, 325, 326,
	327, 894, 329, 330, 621, 0, 332, 333, 334, 335,
	336, 338, 340, 341, 342, 343, 344, 346, 348, 0,
	0, 0, 0, 0, 0, 0, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 363, 365, 366, 367, 368,
	369, 370, 373, 0, 375, 377, 0, 378, 381, 0,
	382, 383, 384, 385, 386, 387, 388, 389, 625, 895,
	0, 391, 392, 394, 0, 397, 398, 399, 400, 401,
	0, 402, 627, 628, 403, 404, 406, 407, 408, 410,
	411, 412, 413, 414, 415, 416, 417, 418, 419, 420,
	421, 0, 422, 423, 424, 426, 0, 427, 428, 431,
	432, 433, 434, 0, 436, 644, 0, 437, 438, 439,
	0, 0, 440, 441, 442, 443, 444, 445, 448, 645,
	450, 451, 452, 453, 454, 455, 456, 686, 458, 459,
	460, 461, 462, 463, 464, 648, 649, 465, 467, 468,
	650, 652, 653, 0, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 493, 494, 495, 654, 496, 497, 498,
	499, 0, 500, 501, 502, 503, 504, 506, 509, 510,
	511, 512, 0, 515, 516, 517, 518, 519, 520, 521,
	523, 524, 525, 527, 528, 529, 687, 530, 531, 532,
	533, 657, 535, 536, 688, 538, 539, 541, 542, 543,
	544, 545, 546, 697, 0, 548, 658, 549, 550, 551,
	552, 553, 0, 555, 556, 557, 558, 559, 560, 563,
	564, 565, 567, 568, 660, 569, 570, 0, 572, 573,
	0, 575, 576, 577, 578, 579, 0, 698, 580, 662,
	581, 663, 582, 583, 584, 585, 586, 587, 588, 590,
	0, 0, 592, 593, 594, 596, 597, 598, 599, 602,
	603, 604, 605, 606, 0, 607, 609, 611, 689, 666,
	667, 668, 669, 670, 672, 673, 674, 675, 612, 613,
	629, 480, 474, 430, 472, 473, 477, 478, 481, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 798, 0, 0, 906, 907, 908, 0, 0,
	0, 0, 0, 0, 900, 901, 902, 903, 904, 905,
	306, 0, 323, 804, 0, 372, 409, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 809, 0, 815, 0, 821, 0, 591, 0,
	811, 812, 817, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 813, 810, 814, 820, 808, 818, 805,
	816, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 1302, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 802, 807, 0, 823, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 1330, 1332, 1328, 1324, 1325, 1290,
	1291, 1331, 1327, 396, 3358, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 801, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 1314, 1292, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 1303, 1293, 1298,
	1304, 1294, 1295, 1299, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 1306, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	1315, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 1316, 0, 437, 438, 439, 1296, 1297,
	440, 441, 442, 443, 444, 445, 448, 1329, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 1307, 465, 467, 468, 1313, 652,
	1308, 819, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 1309, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 1300, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 1310, 569, 570, 1301, 572, 573, 822, 575,
	576, 577, 578, 579, 0, 698, 580, 1311, 581, 1312,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 1317, 1318,
	1321, 1319, 1320, 1322, 1323, 1333, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 929, 0, 0,
	1305, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 323, 804, 0,
	372, 409, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 809, 0, 815,
	0, 821, 0, 591, 0, 811, 812, 817, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 813, 810,
	814, 820, 808, 818, 805, 816, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 802, 807,
	0, 823, 161, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 162, 308, 309, 310, 312,
	313, 314, 801, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 803, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 806, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 819, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 822, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 1135, 0,
	770, 0, 0, 0, 0, 0, 0, 0, 0, 762,
	306, 0, 323, 0, 0, 372, 409, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 766, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 765, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 757,
	758, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 759, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 764, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 763, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 755, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	756, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 760, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 798, 0, 1270, 784,
	0, 1275, 1276, 0, 770, 0, 0, 0, 0, 0,
	0, 0, 768, 769, 306, 0, 323, 804, 0, 372,
	409, 624, 0, 0, 469, 0, 522, 526, 0, 615,
	0, 0, 0, 0, 380, 1273, 809, 0, 815, 1274,
	821, 1272, 591, 0, 811, 812, 817, 311, 1349, 614,
	685, 0, 0, 0, 476, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 0, 0, 813, 810, 814,
	820, 808, 818, 805, 816, 0, 513, 447, 664, 540,
	318, 364, 351, 393, 435, 547, 0, 0, 425, 595,
	360, 449, 0, 339, 482, 0, 571, 446, 0, 554,
	574, 0, 466, 345, 505, 561, 562, 802, 807, 0,
	823, 0, 349, 350, 471, 331, 479, 676, 642, 534,
	492, 490, 0, 457, 514, 671, 0, 0, 379, 0,
	374, 470, 610, 337, 589, 508, 475, 429, 537, 566,
	376, 361, 362, 405, 507, 395, 347, 600, 639, 643,
	641, 637, 634, 638, 635, 636, 640, 396, 6112, 0,
	608, 1335, 1346, 1343, 1348, 1334, 1347, 1341, 1036, 655,
	1338, 1337, 1351, 1344, 1345, 601, 1350, 1289, 1342, 1340,
	1339, 1336, 0, 296, 297, 298, 299, 300, 301, 302,
	303, 304, 305, 307, 0, 308, 309, 310, 312, 313,
	314, 801, 315, 316, 317, 320, 321, 322, 324, 684,
	325, 326, 327, 328, 329, 330, 621, 803, 332, 333,
	334, 335, 336, 338, 340, 341, 342, 343, 344, 346,
	348, 0, 0, 0, 806, 0, 0, 0, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 363, 365, 366,
	367, 368, 369, 370, 373, 0, 375, 377, 0, 378,
	381, 0, 382, 383, 384, 385, 386, 387, 388, 389,
	625, 390, 0, 391, 392, 394, 0, 397, 398, 399,
	400, 401, 0, 402, 627, 628, 403, 404, 406, 407,
	408, 410, 411, 412, 413, 414, 415, 416, 417, 418,
	419, 420, 421, 0, 422, 423, 424, 426, 0, 427,
	428, 431, 432, 433, 434, 0, 436, 644, 0, 437,
	438, 439, 0, 0, 440, 441, 442, 443, 444, 445,
	448, 645, 450, 451, 452, 453, 454, 455, 456, 686,
	458, 459, 460, 461, 462, 463, 464, 648, 649, 465,
	467, 468, 650, 652, 653, 819, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 493, 494, 495, 654, 496,
	497, 498, 499, 0, 500, 501, 502, 503, 504, 506,
	509, 510, 511, 512, 0, 515, 516, 517, 518, 519,
	520, 521, 523, 524, 525, 527, 528, 529, 687, 530,
	531, 532, 533, 657, 535, 536, 688, 538, 539, 541,
	542, 543, 544, 545, 546, 697, 0, 548, 658, 549,
	550, 551, 552, 553, 0, 555, 556, 557, 558, 559,
	560, 563, 564, 565, 567, 568, 660, 569, 570, 0,
	572, 573, 822, 575, 576, 577, 578, 579, 0, 698,
	580, 662, 581, 663, 582, 583, 584, 585, 586, 587,
	588, 590, 0, 0, 592, 593, 594, 596, 597, 598,
	599, 602, 603, 604, 605, 606, 0, 607, 609, 611,
	689, 666, 667, 668, 669, 670, 672, 673, 674, 675,
	612, 613, 629, 480, 474, 430, 472, 473, 477, 478,
	481, 293, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 323, 0, 0, 372, 409, 624, 0, 0, 469,
	0, 522, 526, 0, 615, 0, 0, 0, 0, 380,
	0, 0, 0, 0, 0, 0, 0, 591, 0, 0,
	0, 0, 311, 699, 614, 685, 0, 0, 0, 476,
	0, 0, 0, 0, 0, 0, 0, 319, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 513, 447, 664, 540, 318, 364, 351, 393, 435,
	547, 0, 0, 425, 595, 360, 449, 0, 339, 482,
	0, 571, 446, 0, 554, 574, 0, 466, 345, 505,
	561, 562, 0, 0, 0, 0, 0, 349, 350, 471,
	331, 479, 676, 642, 534, 492, 490, 0, 457, 514,
	671, 0, 0, 379, 0, 374, 470, 610, 337, 589,
	508, 475, 429, 537, 566, 376, 361, 362, 405, 507,
	395, 347, 600, 639, 643, 641, 637, 634, 638, 635,
	636, 640, 396, 633, 0, 608, 617, 651, 631, 659,
	616, 656, 626, 371, 655, 620, 619, 665, 646, 647,
	601, 661, 632, 630, 623, 622, 618, 0, 296, 297,
	298, 299, 300, 301, 302, 303, 304, 305, 307, 0,
	308, 309, 310, 312, 313, 314, 0, 315, 316, 317,
	320, 321, 322, 324, 684, 325, 326, 327, 328, 329,
	330, 621, 0, 332, 333, 334, 335, 336, 338, 340,
	341, 342, 343, 344, 346, 348, 0, 0, 0, 0,
	0, 0, 0, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 363, 365, 366, 367, 368, 369, 370, 373,
	0, 375, 377, 0, 378, 381, 0, 382, 383, 384,
	385, 386, 387, 388, 389, 625, 390, 0, 391, 392,
	394, 0, 397, 398, 399, 400, 401, 0, 402, 627,
	628, 403, 404, 406, 407, 408, 410, 411, 412, 413,
	414, 415, 416, 417, 418, 419, 420, 421, 0, 422,
	423, 424, 426, 0, 427, 428, 431, 432, 433, 434,
	0, 436, 644, 0, 437, 438, 439, 0, 0, 440,
	441, 442, 443, 444, 445, 448, 645, 450, 451, 452,
	453, 454, 455, 456, 686, 458, 459, 460, 461, 462,
	463, 464, 648, 649, 465, 467, 468, 650, 652, 653,
	0, 483, 484, 485, 486, 487, 488, 489, 491, 0,
	493, 494, 495, 654, 496, 497, 498, 499, 0, 500,
	501, 502, 503, 504, 506, 509, 510, 511, 512, 0,
	515, 516, 517, 518, 519, 520, 521, 523, 524, 525,
	527, 528, 529, 687, 530, 531, 532, 533, 657, 535,
	536, 688, 538, 539, 541, 542, 543, 544, 545, 546,
	697, 0, 548, 658, 549, 550, 551, 552, 553, 0,
	555, 556, 557, 558, 559, 560, 563, 564, 565, 567,
	568, 660, 569, 570, 0, 572, 573, 0, 575, 576,
	577, 578, 579, 0, 698, 580, 662, 581, 663, 582,
	583, 584, 585, 586, 587, 588, 590, 0, 0, 592,
	593, 594, 596, 597, 598, 599, 602, 603, 604, 605,
	606, 0, 607, 609, 611, 689, 666, 667, 668, 669,
	670, 672, 673, 674, 675, 612, 613, 629, 480, 474,
	430, 472, 473, 477, 478, 481, 293, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 306, 0, 323, 0, 0, 372,
	409, 624, 0, 5954, 469, 0, 522, 526, 0, 615,
	0, 0, 0, 0, 380, 0, 0, 0, 0, 0,
	0, 0, 591, 0, 0, 0, 0, 311, 699, 614,
	685, 0, 0, 0, 476, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 513, 447, 664, 540,
	318, 364, 351, 393, 435, 547, 0, 0, 425, 595,
	360, 449, 0, 339, 482, 0, 571, 446, 0, 554,
	574, 0, 466, 345, 505, 561, 562, 0, 0, 0,
	0, 0, 349, 350, 471, 331, 479, 676, 642, 534,
	492, 490, 0, 457, 514, 671, 0, 0, 379, 0,
	374, 470, 610, 337, 589, 508, 475, 429, 537, 566,
	376, 361, 362, 405, 507, 395, 347, 600, 639, 643,
	641, 637, 634, 638, 635, 636, 640, 396, 633, 0,
	608, 617, 651, 631, 659, 616, 656, 626, 371, 655,
	620, 619, 665, 646, 647, 601, 661, 632, 630, 623,
	622, 618, 0, 296, 297, 298, 299, 300, 301, 302,
	303, 304, 305, 307, 0, 308, 309, 310, 312, 313,
	314, 0, 315, 316, 317, 320, 321, 322, 324, 684,
	325, 326, 327, 328, 329, 330, 621, 0, 332, 333,
	334, 335, 336, 338, 340, 341, 342, 343, 344, 346,
	348, 0, 0, 0, 0, 0, 0, 0, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 363, 365, 366,
	367, 368, 369, 370, 373, 0, 375, 377, 0, 378,
	381, 0, 382, 383, 384, 385, 386, 387, 388, 389,
	625, 390, 0, 391, 392, 394, 0, 397, 398, 399,
	400, 401, 0, 402, 627, 628, 403, 404, 406, 407,
	408, 410, 411, 412, 413, 414, 415, 416, 417, 418,
	419, 420, 421, 0, 422, 423, 424, 426, 0, 427,
	428, 431, 432, 433, 434, 0, 436, 644, 0, 437,
	438, 439, 0, 0, 440, 441, 442, 443, 444, 445,
	448, 645, 450, 451, 452, 453, 454, 455, 456, 686,
	458, 459, 460, 461, 462, 463, 464, 648, 649, 465,
	467, 468, 650, 652, 653, 0, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 493, 494, 495, 654, 496,
	497, 498, 499, 0, 500, 501, 502, 503, 504, 506,
	509, 510, 511, 512, 0, 515, 516, 517, 518, 519,
	520, 521, 523, 524, 525, 527, 528, 529, 687, 530,
	531, 532, 533, 657, 535, 536, 688, 538, 539, 541,
	542, 543, 544, 545, 546, 697, 0, 548, 658, 549,
	550, 551, 552, 553, 0, 555, 556, 557, 558, 559,
	560, 563, 564, 565, 567, 568, 660, 569, 570, 0,
	572, 573, 0, 575, 576, 577, 578, 579, 0, 698,
	580, 662, 581, 663, 582, 583, 584, 585, 586, 587,
	588, 590, 0, 0, 592, 593, 594, 596, 597, 598,
	599, 602, 603, 604, 605, 606, 0, 607, 609, 611,
	689, 666, 667, 668, 669, 670, 672, 673, 674, 675,
	612, 613, 629, 480, 474, 430, 472, 473, 477, 478,
	481, 293, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 323, 0, 0, 372, 409, 624, 0, 5812, 469,
	0, 522, 526, 0, 615, 0, 0, 0, 0, 380,
	0, 0, 0, 0, 0, 0, 0, 591, 0, 0,
	0, 0, 311, 699, 614, 685, 0, 0, 0, 476,
	0, 0, 0, 0, 0, 0, 0, 319, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 513, 447, 664, 540, 318, 364, 351, 393, 435,
	547, 0, 0, 425, 595, 360, 449, 0, 339, 482,
	0, 571, 446, 0, 554, 574, 0, 466, 345, 505,
	561, 562, 0, 0, 0, 0, 0, 349, 350, 471,
	331, 479, 676, 642, 534, 492, 490, 0, 457, 514,
	671, 0, 0, 379, 0, 374, 470, 610, 337, 589,
	508, 475, 429, 537, 566, 376, 361, 362, 405, 507,
	395, 347, 600, 639, 643, 641, 637, 634, 638, 635,
	636, 640, 396, 633, 0, 608, 617, 651, 631, 659,
	616, 656, 626, 371, 655, 620, 619, 665, 646, 647,
	601, 661, 632, 630, 623, 622, 618, 0, 296, 297,
	298, 299, 300, 301, 302, 303, 304, 305, 307, 0,
	308, 309, 310, 312, 313, 314, 0, 315, 316, 317,
	320, 321, 322, 324, 684, 325, 326, 327, 328, 329,
	330, 621, 0, 332, 333, 334, 335, 336, 338, 340,
	341, 342, 343, 344, 346, 348, 0, 0, 0, 0,
	0, 0, 0, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 363, 365, 366, 367, 368, 369, 370, 373,
	0, 375, 377, 0, 378, 381, 0, 382, 383, 384,
	385, 386, 387, 388, 389, 625, 390, 0, 391, 392,
	394, 0, 397, 398, 399, 400, 401, 0, 402, 627,
	628, 403, 404, 406, 407, 408, 410, 411, 412, 413,
	414, 415, 416, 417, 418, 419, 420, 421, 0, 422,
	423, 424, 426, 0, 427, 428, 431, 432, 433, 434,
	0, 436, 644, 0, 437, 438, 439, 0, 0, 440,
	441, 442, 443, 444, 445, 448, 645, 450, 451, 452,
	453, 454, 455, 456, 686, 458, 459, 460, 461, 462,
	463, 464, 648, 649, 465, 467, 468, 650, 652, 653,
	0, 483, 484, 485, 486, 487, 488, 489, 491, 0,
	493, 494, 495, 654, 496, 497, 498, 499, 0, 500,
	501, 502, 503, 504, 506, 509, 510, 511, 512, 0,
	515, 516, 517, 518, 519, 520, 521, 523, 524, 525,
	527, 528, 529, 687, 530, 531, 532, 533, 657, 535,
	536, 688, 538, 539, 541, 542, 543, 544, 545, 546,
	697, 0, 548, 658, 549, 550, 551, 552, 553, 0,
	555, 556, 557, 558, 559, 560, 563, 564, 565, 567,
	568, 660, 569, 570, 0, 572, 573, 0, 575, 576,
	577, 578, 579, 0, 698, 580, 662, 581, 663, 582,
	583, 584, 585, 586, 587, 588, 590, 0, 0, 592,
	593, 594, 596, 597, 598, 599, 602, 603, 604, 605,
	606, 0, 607, 609, 611, 689, 666, 667, 668, 669,
	670, 672, 673, 674, 675, 612, 613, 629, 480, 474,
	430, 472, 473, 477, 478, 481, 293, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 306, 0, 323, 0, 0, 372,
	409, 624, 0, 5809, 469, 0, 522, 526, 0, 615,
	0, 0, 0, 0, 380, 0, 0, 0, 0, 0,
	0, 0, 591, 0, 0, 0, 0, 311, 699, 614,
	685, 0, 0, 0, 476, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 513, 447, 664, 540,
	318, 364, 351, 393, 435, 547, 0, 0, 425, 595,
	360, 449, 0, 339, 482, 0, 571, 446, 0, 554,
	574, 0, 466, 345, 505, 561, 562, 0, 0, 0,
	0, 0, 349, 350, 471, 331, 479, 676, 642, 534,
	492, 490, 0, 457, 514, 671, 0, 0, 379, 0,
	374, 470, 610, 337, 589, 508, 475, 429, 537, 566,
	376, 361, 362, 405, 507, 395, 347, 600, 639, 643,
	641, 637, 634, 638, 635, 636, 640, 396, 633, 0,
	608, 617, 651, 631, 659, 616, 656, 626, 371, 655,
	620, 619, 665, 646, 647, 601, 661, 632, 630, 623,
	622, 618, 0, 296, 297, 298, 299, 300, 301, 302,
	303, 304, 305, 307, 0, 308, 309, 310, 312, 313,
	314, 0, 315, 316, 317, 320, 321, 322, 324, 684,
	325, 326, 327, 328, 329, 330, 621, 0, 332, 333,
	334, 335, 336, 338, 340, 341, 342, 343, 344, 346,
	348, 0, 0, 0, 0, 0, 0, 0, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 363, 365, 366,
	367, 368, 369, 370, 373, 0, 375, 377, 0, 378,
	381, 0, 382, 383, 384, 385, 386, 387, 388, 389,
	625, 390, 0, 391, 392, 394, 0, 397, 398, 399,
	400, 401, 0, 402, 627, 628, 403, 404, 406, 407,
	408, 410, 411, 412, 413, 414, 415, 416, 417, 418,
	419, 420, 421, 0, 422, 423, 424, 426, 0, 427,
	428, 431, 432, 433, 434, 0, 436, 644, 0, 437,
	438, 439, 0, 0, 440, 441, 442, 443, 444, 445,
	448, 645, 450, 451, 452, 453, 454, 455, 456, 686,
	458, 459, 460, 461, 462, 463, 464, 648, 649, 465,
	467, 468, 650, 652, 653, 0, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 493, 494, 495, 654, 496,
	497, 498, 499, 0, 500, 501, 502, 503, 504, 506,
	509, 510, 511, 512, 0, 515, 516, 517, 518, 519,
	520, 521, 523, 524, 525, 527, 528, 529, 687, 530,
	531, 532, 533, 657, 535, 536, 688, 538, 539, 541,
	542, 543, 544, 545, 546, 697, 0, 548, 658, 549,
	550, 551, 552, 553, 0, 555, 556, 557, 558, 559,
	560, 563, 564, 565, 567, 568, 660, 569, 570, 0,
	572, 573, 0, 575, 576, 577, 578, 579, 0, 698,
	580, 662, 581, 663, 582, 583, 584, 585, 586, 587,
	588, 590, 0, 0, 592, 593, 594, 596, 597, 598,
	599, 602, 603, 604, 605, 606, 0, 607, 609, 611,
	689, 666, 667, 668, 669, 670, 672, 673, 674, 675,
	612, 613, 629, 480, 474, 430, 472, 473, 477, 478,
	481, 293, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 323, 0, 0, 372, 409, 624, 0, 780, 469,
	0, 522, 526, 166, 615, 0, 0, 0, 0, 380,
	0, 0, 0, 0, 0, 0, 0, 591, 0, 0,
	0, 0, 311, 699, 614, 685, 0, 0, 0, 476,
	163, 0, 0, 0, 164, 0, 0, 319, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 513, 447, 1132, 540, 318, 364, 351, 393, 435,
	547, 0, 0, 425, 595, 360, 449, 0, 339, 482,
	0, 571, 446, 0, 554, 574, 0, 466, 345, 505,
	561, 562, 0, 0, 0, 0, 0, 349, 350, 471,
	331, 479, 676, 642, 534, 492, 490, 0, 457, 514,
	671, 0, 0, 379, 0, 374, 470, 610, 337, 589,
	508, 475, 429, 537, 566, 376, 361, 362, 405, 507,
	395, 347, 600, 639, 643, 641, 637, 634, 638, 635,
	636, 640, 396, 633, 0, 608, 617, 651, 631, 659,
	616, 656, 626, 371, 655, 620, 619, 665, 646, 647,
	601, 661, 632, 630, 623, 622, 618, 0, 296, 297,
	298, 299, 300, 301, 302, 303, 304, 305, 307, 0,
	308, 309, 310, 312, 313, 314, 0, 315, 316, 317,
	320, 321, 322, 324, 684, 325, 326, 327, 328, 329,
	330, 621, 0, 332, 333, 334, 335, 336, 338, 340,
	341, 342, 343, 344, 346, 348, 0, 0, 0, 0,
	0, 0, 0, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 363, 365, 366, 367, 368, 369, 370, 373,
	0, 375, 377, 0, 378, 381, 0, 382, 383, 384,
	385, 386, 387, 388, 389, 625, 390, 0, 391, 392,
	394, 0, 397, 398, 399, 400, 401, 0, 402, 627,
	628, 403, 404, 406, 407, 408, 410, 411, 412, 413,
	414, 415, 416, 417, 418, 419, 420, 421, 0, 422,
	423, 424, 426, 0, 427, 428, 431, 432, 433, 434,
	0, 436, 644, 0, 437, 438, 439, 0, 0, 440,
	441, 442, 443, 444, 445, 448, 645, 450, 451, 452,
	453, 454, 455, 456, 686, 458, 459, 460, 461, 462,
	463, 464, 648, 649, 465, 467, 468, 650, 652, 653,
	0, 483, 484, 485, 486, 487, 488, 489, 491, 0,
	493, 494, 495, 654, 496, 497, 498, 499, 0, 500,
	501, 502, 503, 504, 506, 509, 510, 511, 512, 0,
	515, 516, 517, 518, 519, 520, 521, 523, 524, 525,
	527, 528, 529, 687, 530, 531, 532, 533, 657, 535,
	536, 688, 538, 539, 541, 542, 543, 544, 545, 546,
	697, 0, 548, 658, 549, 550, 551, 552, 553, 0,
	555, 556, 557, 558, 559, 560, 563, 564, 565, 567,
	568, 660, 569, 570, 0, 572, 573, 0, 575, 576,
	577, 578, 579, 0, 698, 580, 662, 581, 663, 582,
	583, 584, 585, 586, 587, 588, 590, 0, 0, 592,
	593, 594, 596, 597, 598, 599, 602, 603, 604, 605,
	606, 0, 607, 609, 611, 689, 666, 667, 668, 669,
	670, 672, 673, 674, 675, 612, 613, 629, 480, 474,
	430, 472, 473, 477, 478, 481, 929, 0, 0, 784,
	0, 0, 0, 0, 0, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 306, 0, 323, 804, 160, 372,
	409, 624, 0, 0, 469, 0, 522, 526, 0, 615,
	0, 0, 0, 0, 380, 1745, 809, 0, 815, 0,
	821, 1744, 591, 0, 811, 812, 817, 311, 699, 614,
	685, 0, 0, 0, 476, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 0, 1746, 813, 810, 814,
	820, 808, 818, 805, 816, 0, 513, 447, 664, 540,
	318, 364, 351, 393, 435, 547, 0, 0, 425, 595,
	360, 449, 0, 339, 482, 0, 571, 446, 0, 554,
	574, 0, 466, 345, 505, 561, 562, 802, 807, 0,
	823, 0, 349, 350, 471, 331, 479, 676, 642, 534,
	492, 490, 0, 457, 514, 671, 0, 0, 379, 0,
	374, 470, 610, 337, 589, 508, 475, 429, 537, 566,
	376, 361, 362, 405, 507, 395, 347, 600, 639, 643,
	641, 637, 634, 638, 635, 636, 640, 396, 633, 0,
	608, 617, 651, 631, 659, 616, 656, 626, 371, 655,
	620, 619, 665, 646, 647, 601, 661, 632, 630, 623,
	622, 618, 0, 296, 297, 298, 299, 300, 301, 302,
	303, 304, 305, 307, 0, 308, 309, 310, 312, 313,
	314, 801, 315, 316, 317, 320, 321, 322, 324, 684,
	325, 326, 327, 328, 329, 330, 621, 803, 332, 333,
	334, 335, 336, 338, 340, 341, 342, 343, 344, 346,
	348, 0, 0, 0, 806, 0, 0, 0, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 363, 365, 366,
	367, 368, 369, 370, 373, 0, 375, 377, 0, 378,
	381, 0, 382, 383, 384, 385, 386, 387, 388, 389,
	625, 390, 0, 391, 392, 394, 0, 397, 398, 399,
	400, 401, 0, 402, 627, 628, 403, 404, 406, 407,
	408, 410, 411, 412, 413, 414, 415, 416, 417, 418,
	419, 420, 421, 0, 422, 423, 424, 426, 0, 427,
	428, 431, 432, 433, 434, 0, 436, 644, 0, 437,
	438, 439, 0, 0, 440, 441, 442, 443, 444, 445,
	448, 645, 450, 451, 452, 453, 454, 455, 456, 686,
	458, 459, 460, 461, 462, 463, 464, 648, 649, 465,
	467, 468, 650, 652, 653, 819, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 493, 494, 495, 654, 496,
	497, 498, 499, 0, 500, 501, 502, 503, 504, 506,
	509, 510, 511, 512, 0, 515, 516, 517, 518, 519,
	520, 521, 523, 524, 525, 527, 528, 529, 687, 530,
	531, 532, 533, 657, 535, 536, 688, 538, 539, 541,
	542, 543, 544, 545, 546, 697, 0, 548, 658, 549,
	550, 551, 552, 553, 0, 555, 556, 557, 558, 559,
	560, 563, 564, 565, 567, 568, 660, 569, 570, 0,
	572, 573, 822, 575, 576, 577, 578, 579, 0, 698,
	580, 662, 581, 663, 582, 583, 584, 585, 586, 587,
	588, 590, 0, 0, 592, 593, 594, 596, 597, 598,
	599, 602, 603, 604, 605, 606, 0, 607, 609, 611,
	689, 666, 667, 668, 669, 670, 672, 673, 674, 675,
	612, 613, 629, 480, 474, 430, 472, 473, 477, 478,
	481, 929, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 323, 804, 0, 372, 409, 624, 0, 0, 469,
	0, 522, 526, 0, 615, 0, 0, 0, 0, 380,
	0, 809, 0, 815, 0, 821, 0, 591, 0, 811,
	812, 817, 311, 699, 614, 685, 0, 0, 0, 476,
	0, 0, 0, 0, 0, 0, 0, 319, 3809, 0,
	0, 0, 813, 810, 814, 820, 808, 818, 805, 816,
	0, 513, 447, 664, 540, 318, 364, 351, 393, 435,
	547, 0, 0, 425, 595, 360, 449, 0, 339, 482,
	0, 571, 446, 0, 554, 574, 0, 466, 345, 505,
	561, 562, 802, 807, 0, 823, 0, 349, 350, 471,
	331, 479, 676, 642, 534, 492, 490, 0, 457, 514,
	671, 0, 0, 379, 0, 374, 470, 610, 337, 589,
	508, 475, 429, 537, 566, 376, 361, 362, 405, 507,
	395, 347, 600, 639, 643, 641, 637, 634, 638, 635,
	636, 640, 396, 633, 0, 608, 617, 651, 631, 659,
	616, 656, 626, 371, 655, 620, 619, 665, 646, 647,
	601, 661, 632, 630, 623, 622, 618, 0, 296, 297,
	298, 299, 300, 301, 302, 303, 304, 305, 307, 0,
	308, 309, 310, 312, 313, 314, 801, 315, 316, 317,
	320, 321, 322, 324, 684, 325, 326, 327, 328, 329,
	330, 621, 803, 332, 333, 334, 335, 336, 338, 340,
	341, 342, 343, 344, 346, 348, 0, 0, 926, 806,
	0, 0, 927, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 363, 365, 366, 367, 368, 369, 370, 373,
	0, 375, 377, 0, 378, 381, 0, 382, 383, 384,
	385, 386, 387, 388, 389, 625, 390, 0, 391, 392,
	394, 0, 397, 398, 399, 400, 401, 0, 402, 627,
	628, 403, 404, 406, 407, 408, 410, 411, 412, 413,
	414, 415, 416, 417, 418, 419, 420, 421, 0, 422,
	423, 424, 426, 0, 427, 428, 431, 432, 433, 434,
	0, 436, 644, 0, 437, 438, 439, 0, 0, 440,
	441, 442, 443, 444, 445, 448, 645, 450, 451, 452,
	453, 454, 455, 456, 686, 458, 459, 460, 461, 462,
	463, 464, 648, 649, 465, 467, 468, 650, 652, 653,
	819, 483, 484, 485, 486, 487, 488, 489, 491, 0,
	493, 494, 495, 654, 496, 497, 498, 499, 0, 500,
	501, 502, 503, 504, 506, 509, 510, 511, 512, 0,
	515, 516, 517, 518, 519, 520, 521, 523, 524, 525,
	527, 528, 529, 687, 530, 531, 532, 533, 657, 535,
	536, 688, 538, 539, 541, 542, 543, 544, 545, 546,
	697, 928, 548, 658, 549, 550, 551, 552, 553, 0,
	555, 556, 557, 558, 559, 560, 563, 564, 565, 567,
	568, 660, 569, 570, 0, 572, 573, 822, 575, 576,
	577, 578, 579, 0, 698, 580, 662, 581, 663, 582,
	583, 584, 585, 586, 587, 588, 590, 0, 0, 592,
	593, 594, 596, 597, 598, 599, 602, 603, 604, 605,
	606, 0, 607, 609, 611, 689, 666, 667, 668, 669,
	670, 672, 673, 674, 675, 612, 613, 629, 480, 474,
	430, 472, 473, 477, 478, 481, 929, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 306, 0, 323, 804, 0, 372,
	409, 624, 0, 0, 469, 0, 522, 526, 0, 615,
	0, 0, 0, 0, 380, 0, 809, 0, 815, 0,
	821, 0, 591, 0, 811, 812, 817, 311, 699, 614,
	685, 0, 0, 0, 476, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 0, 0, 813, 810, 814,
	820, 808, 818, 805, 816, 0, 513, 447, 664, 540,
	318, 364, 351, 393, 435, 547, 0, 0, 425, 595,
	360, 449, 0, 339, 482, 2656, 571, 446, 0, 554,
	574, 0, 466, 345, 505, 561, 562, 802, 807, 0,
	823, 0, 349, 350, 471, 331, 479, 676, 642, 534,
	492, 490, 0, 457, 514, 671, 0, 0, 379, 0,
	374, 470, 610, 337, 589, 508, 475, 429, 537, 566,
	376, 361, 362, 405, 507, 395, 347, 600, 639, 643,
	641, 637, 634, 638, 635, 636, 640, 396, 633, 0,
	608, 617, 651, 631, 659, 616, 656, 626, 371, 655,
	620, 619, 665, 646, 647, 601, 661, 632, 630, 623,
	622, 618, 0, 296, 297, 298, 299, 300, 301, 302,
	303, 304, 305, 307, 0, 308, 309, 310, 312, 313,
	314, 801, 315, 316, 317, 320, 321, 322, 324, 684,
	325, 326, 327, 328, 329, 330, 621, 803, 332, 333,
	334, 335, 336, 338, 340, 341, 342, 343, 344, 346,
	348, 0, 0, 926, 806, 0, 0, 927, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 363, 365, 366,
	367, 368, 369, 370, 373, 0, 375, 377, 0, 378,
	381, 0, 382, 383, 384, 385, 386, 387, 388, 389,
	625, 390, 0, 391, 392, 394, 0, 397, 398, 399,
	400, 401, 0, 402, 627, 628, 403, 404, 406, 407,
	408, 410, 411, 412, 413, 414, 415, 416, 417, 418,
	419, 420, 421, 0, 422, 423, 424, 426, 0, 427,
	428, 431, 432, 433, 434, 0, 436, 644, 0, 437,
	438, 439, 0, 0, 440, 441, 442, 443, 444, 445,
	448, 645, 450, 451, 452, 453, 454, 455, 456, 686,
	458, 459, 460, 461, 462, 463, 464, 648, 649, 465,
	467, 468, 650, 652, 653, 819, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 493, 494, 495, 654, 496,
	497, 498, 499, 0, 500, 501, 502, 503, 504, 506,
	509, 510, 511, 512, 0, 515, 516, 517, 518, 519,
	520, 521, 523, 524, 525, 527, 528, 529, 687, 530,
	531, 532, 533, 657, 535, 536, 688, 538, 539, 541,
	542, 543, 544, 545, 546, 697, 928, 548, 658, 549,
	550, 551, 552, 553, 0, 555, 556, 557, 558, 559,
	560, 563, 564, 565, 567, 568, 660, 569, 570, 0,
	572, 573, 822, 575, 576, 577, 578, 579, 0, 698,
	580, 662, 581, 663, 582, 583, 584, 585, 586, 587,
	588, 590, 0, 0, 592, 593, 594, 596, 597, 598,
	599, 602, 603, 604, 605, 606, 0, 607, 609, 611,
	689, 666, 667, 668, 669, 670, 672, 673, 674, 675,
	612, 613, 629, 480, 474, 430, 472, 473, 477, 478,
	481, 293, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 323, 0, 0, 372, 409, 624, 0, 0, 469,
	0, 522, 526, 0, 615, 0, 0, 0, 0, 380,
	0, 0, 0, 0, 0, 0, 0, 591, 0, 0,
	0, 0, 311, 699, 614, 685, 0, 0, 0, 476,
	0, 0, 0, 844, 2672, 0, 0, 319, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 513, 447, 664, 540, 318, 364, 351, 393, 435,
	547, 0, 0, 425, 595, 360, 449, 0, 339, 482,
	0, 571, 446, 0, 554, 574, 0, 466, 345, 505,
	561, 562, 0, 0, 0, 0, 0, 349, 350, 471,
	331, 479, 676, 642, 534, 492, 490, 0, 457, 514,
	671, 0, 0, 379, 0, 374, 470, 610, 337, 589,
	508, 475, 429, 537, 566, 376, 361, 362, 405, 507,
	395, 347, 600, 639, 643, 641, 637, 634, 638, 635,
	636, 640, 396, 633, 0, 608, 617, 651, 631, 659,
	616, 656, 626, 371, 655, 620, 619, 665, 646, 647,
	601, 661, 632, 630, 623, 622, 618, 0, 296, 297,
	298, 299, 300, 301, 302, 303, 304, 305, 307, 0,
	308, 309, 310, 312, 313, 314, 0, 315, 316, 317,
	320, 321, 322, 324, 684, 325, 326, 327, 328, 329,
	330, 621, 0, 332, 333, 334, 335, 336, 338, 340,
	341, 342, 343, 344, 346, 348, 0, 0, 0, 2676,
	0, 0, 0, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 363, 365, 366, 367, 368, 369, 370, 373,
	0, 375, 377, 0, 378, 381, 0, 382, 383, 384,
	385, 386, 387, 388, 389, 625, 390, 0, 391, 392,
	394, 0, 397, 398, 399, 400, 401, 0, 402, 627,
	628, 403, 404, 406, 407, 408, 410, 411, 412, 413,
	414, 415, 416, 417, 418, 419, 420, 421, 0, 422,
	423, 424, 426, 0, 427, 428, 431, 432, 433, 434,
	0, 436, 644, 0, 437, 438, 439, 0, 0, 440,
	441, 442, 443, 444, 445, 448, 645, 450, 451, 452,
	453, 454, 455, 456, 686, 458, 459, 460, 461, 462,
	463, 464, 648, 649, 465, 467, 468, 650, 652, 653,
	0, 483, 484, 485, 486, 487, 488, 489, 491, 0,
	493, 494, 495, 654, 496, 497, 498, 499, 0, 500,
	501, 502, 503, 504, 506, 509, 510, 511, 512, 0,
	515, 516, 517, 518, 519, 520, 521, 523, 524, 525,
	527, 528, 529, 687, 530, 531, 532, 533, 657, 535,
	536, 688, 538, 539, 541, 542, 543, 544, 545, 546,
	697, 0, 548, 658, 549, 550, 551, 552, 553, 0,
	555, 556, 557, 558, 559, 560, 563, 564, 565, 567,
	568, 660, 569, 570, 0, 2673, 573, 0, 575, 576,
	577, 578, 579, 0, 698, 580, 662, 581, 663, 582,
	583, 584, 585, 586, 587, 588, 590, 0, 0, 592,
	593, 594, 596, 597, 598, 599, 602, 603, 604, 605,
	606, 0, 607, 609, 611, 689, 666, 667, 668, 669,
	670, 672, 673, 674, 675, 612, 613, 629, 480, 474,
	430, 472, 473, 477, 478, 481, 929, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1000, 306, 0, 323, 804, 1412, 372,
	409, 624, 0, 0, 469, 0, 522, 526, 0, 615,
	0, 0, 0, 0, 380, 0, 809, 0, 815, 0,
	821, 0, 591, 0, 811, 812, 817, 311, 699, 614,
	685, 0, 0, 0, 476, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 0, 0, 813, 810, 814,
	820, 808, 818, 805, 816, 0, 513, 447, 664, 540,
	318, 364, 351, 393, 435, 547, 0, 0, 425, 595,
	360, 449, 0, 339, 482, 0, 571, 446, 0, 554,
	574, 0, 466, 345, 505, 561, 562, 802, 807, 0,
	823, 0, 349, 350, 471, 331, 479, 676, 642, 534,
	492, 490, 0, 457, 514, 671, 0, 0, 379, 0,
	374, 470, 610, 337, 589, 508, 475, 429, 537, 566,
	376, 361, 362, 405, 507, 395, 347, 600, 639, 643,
	641, 637, 634, 638, 635, 636, 640, 396, 633, 0,
	608, 617, 651, 631, 659, 616, 656, 626, 371, 655,
	620, 619, 665, 646, 647, 601, 661, 632, 630, 623,
	622, 618, 0, 296, 297, 298, 299, 300, 301, 302,
	303, 304, 305, 307, 0, 308, 309, 310, 312, 313,
	314, 801, 315, 316, 317, 320, 321, 322, 324, 684,
	325, 326, 327, 328, 329, 330, 621, 803, 332, 333,
	334, 335, 336, 338, 340, 341, 342, 343, 344, 346,
	348, 0, 0, 926, 806, 0, 0, 927, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 363, 365, 366,
	367, 368, 369, 370, 373, 0, 375, 377, 0, 378,
	381, 0, 382, 383, 384, 385, 386, 387, 388, 389,
	625, 390, 0, 391, 392, 394, 0, 397, 398, 399,
	400, 401, 0, 402, 627, 628, 403, 404, 406, 407,
	408, 410, 411, 412, 413, 414, 415, 416, 417, 418,
	419, 420, 421, 0, 422, 423, 424, 426, 0, 427,
	428, 431, 432, 433, 434, 0, 436, 644, 0, 437,
	438, 439, 0, 0, 440, 441, 442, 443, 998, 445,
	448, 645, 450, 451, 452, 453, 454, 455, 456, 686,
	458, 459, 460, 461, 462, 463, 464, 648, 649, 465,
	467, 468, 650, 652, 653, 819, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 493, 494, 495, 654, 496,
	497, 498, 499, 0, 500, 501, 502, 503, 504, 506,
	509, 510, 511, 512, 0, 515, 516, 517, 518, 519,
	520, 521, 523, 524, 525, 527, 528, 529, 687, 530,
	531, 532, 533, 657, 535, 536, 688, 538, 539, 541,
	542, 543, 544, 545, 546, 697, 928, 548, 658, 549,
	550, 551, 552, 553, 0, 555, 556, 557, 558, 559,
	560, 563, 564, 565, 567, 568, 660, 569, 570, 0,
	572, 573, 822, 575, 576, 577, 578, 579, 0, 698,
	580, 662, 581, 663, 582, 583, 584, 585, 586, 587,
	588, 590, 0, 0, 592, 593, 594, 596, 597, 598,
	599, 602, 603, 604, 605, 606, 0, 607, 609, 611,
	689, 666, 667, 668, 669, 670, 672, 673, 674, 675,
	612, 613, 629, 480, 474, 430, 472, 473, 477, 478,
	481, 929, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 996, 306,
	0, 323, 804, 0, 372, 409, 624, 0, 0, 469,
	0, 522, 526, 0, 615, 0, 0, 0, 0, 380,
	0, 809, 0, 815, 0, 821, 0, 591, 0, 811,
	812, 817, 311, 699, 614, 685, 0, 0, 0, 476,
	0, 0, 0, 0, 0, 0, 0, 319, 0, 0,
	0, 0, 813, 810, 814, 820, 808, 818, 805, 816,
	0, 513, 447, 664, 540, 318, 364, 351, 393, 435,
	547, 0, 0, 425, 595, 360, 449, 0, 339, 482,
	0, 571, 446, 0, 554, 574, 0, 466, 345, 505,
	561, 562, 802, 807, 0, 823, 0, 349, 350, 471,
	331, 479, 676, 642, 534, 492, 490, 0, 457, 514,
	671, 0, 0, 379, 0, 374, 470, 610, 337, 589,
	508, 475, 429, 537, 566, 376, 361, 362, 405, 507,
	395, 347, 600, 639, 643, 641, 637, 634, 638, 635,
	636, 640, 396, 633, 0, 608, 617, 651, 631, 659,
	616, 656, 626, 371, 655, 620, 619, 665, 646, 647,
	601, 661, 632, 630, 623, 622, 618, 0, 296, 297,
	298, 299, 300, 301, 302, 303, 304, 305, 307, 0,
	308, 309, 310, 312, 313, 314, 801, 315, 316, 317,
	320, 321, 322, 324, 684, 325, 326, 327, 328, 329,
	330, 621, 803, 332, 333, 334, 335, 336, 338, 340,
	341, 342, 343, 344, 346, 348, 0, 0, 926, 806,
	0, 0, 927, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 363, 365, 366, 367, 368, 369, 370, 373,
	0, 375, 377, 0, 378, 381, 0, 382, 383, 384,
	385, 386, 387, 388, 389, 625, 390, 0, 391, 392,
	394, 0, 397, 398, 399, 400, 401, 0, 402, 627,
	628, 403, 404, 406, 407, 408, 410, 411, 412, 413,
	414, 415, 416, 417, 418, 419, 420, 421, 0, 422,
	423, 424, 426, 0, 427, 428, 431, 432, 433, 434,
	0, 436, 644, 0, 437, 438, 439, 0, 0, 440,
	441, 442, 443, 444, 445, 448, 645, 450, 451, 452,
	453, 454, 455, 456, 686, 458, 459, 460, 461, 462,
	463, 464, 648, 649, 465, 467, 468, 650, 652, 653,
	819, 483, 484, 485, 486, 487, 488, 489, 491, 0,
	493, 494, 495, 654, 496, 497, 498, 499, 0, 500,
	501, 502, 503, 504, 506, 509, 510, 511, 512, 0,
	515, 516, 517, 518, 519, 520, 521, 523, 524, 525,
	527, 528, 529, 687, 530, 531, 532, 533, 657, 535,
	536, 688, 538, 539, 541, 542, 543, 544, 545, 546,
	697, 928, 548, 658, 549, 550, 551, 552, 553, 0,
	555, 556, 557, 558, 559, 560, 563, 564, 565, 567,
	568, 660, 569, 570, 0, 572, 573, 822, 575, 576,
	577, 578, 579, 0, 698, 580, 662, 581, 663, 582,
	583, 584, 585, 586, 587, 588, 590, 0, 0, 592,
	593, 594, 596, 597, 598, 599, 602, 603, 604, 605,
	606, 0, 607, 609, 611, 689, 666, 667, 668, 669,
	670, 672, 673, 674, 675, 612, 613, 629, 480, 474,
	430, 472, 473, 477, 478, 481, 929, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 306, 0, 323, 804, 0, 372,
	409, 624, 0, 0, 469, 0, 522, 526, 0, 615,
	0, 0, 0, 0, 380, 0, 809, 0, 815, 0,
	821, 0, 591, 0, 811, 812, 817, 311, 699, 614,
	685, 0, 0, 0, 476, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 0, 0, 813, 810, 814,
	820, 808, 818, 805, 816, 0, 513, 447, 664, 540,
	318, 364, 351, 393, 435, 547, 0, 0, 425, 595,
	360, 449, 0, 339, 482, 0, 571, 446, 0, 554,
	574, 0, 466, 345, 505, 561, 562, 802, 807, 0,
	823, 0, 349, 350, 471, 331, 479, 676, 642, 534,
	492, 490, 0, 457, 514, 671, 0, 0, 379, 0,
	374, 470, 610, 337, 589, 508, 475, 429, 537, 566,
	376, 361, 362, 405, 507, 395, 347, 600, 639, 643,
	641, 637, 634, 638, 635, 636, 640, 396, 633, 0,
	608, 617, 651, 631, 659, 616, 656, 626, 371, 655,
	620, 619, 665, 646, 647, 601, 661, 632, 630, 623,
	622, 618, 0, 296, 297, 298, 299, 300, 301, 302,
	303, 304, 305, 307, 0, 308, 309, 310, 312, 313,
	314, 801, 315, 316, 317, 320, 321, 322, 324, 684,
	325, 326, 327, 328, 329, 330, 621, 803, 332, 333,
	334, 335, 336, 338, 340, 341, 342, 343, 344, 346,
	348, 0, 0, 926, 806, 0, 0, 927, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 363, 365, 366,
	367, 368, 369, 370, 373, 0, 375, 377, 0, 378,
	381, 0, 382, 383, 384, 385, 386, 387, 388, 389,
	625, 390, 0, 391, 392, 394, 0, 397, 398, 399,
	400, 401, 0, 402, 627, 628, 403, 404, 406, 407,
	408, 410, 411, 412, 413, 414, 415, 416, 417, 418,
	419, 420, 421, 0, 422, 423, 424, 426, 0, 427,
	428, 431, 432, 433, 434, 0, 436, 644, 0, 437,
	438, 439, 0, 0, 440, 441, 442, 443, 444, 445,
	448, 645, 450, 451, 452, 453, 454, 455, 456, 686,
	458, 459, 460, 461, 462, 463, 464, 648, 649, 465,
	467, 468, 650, 652, 653, 819, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 493, 494, 495, 654, 496,
	497, 498, 499, 0, 500, 501, 502, 503, 504, 506,
	509, 510, 511, 512, 0, 515, 516, 517, 518, 519,
	520, 521, 523, 524, 525, 527, 528, 529, 687, 530,
	531, 532, 533, 657, 535, 536, 688, 538, 539, 541,
	542, 543, 544, 545, 546, 697, 928, 548, 658, 549,
	550, 551, 552, 553, 0, 555, 556, 557, 558, 559,
	560, 563, 564, 565, 567, 568, 660, 569, 570, 0,
	572, 573, 822, 575, 576, 577, 578, 579, 0, 698,
	580, 662, 581, 663, 582, 583, 584, 585, 586, 587,
	588, 590, 0, 0, 592, 593, 594, 596, 597, 598,
	599, 602, 603, 604, 605, 606, 0, 607, 609, 611,
	689, 666, 667, 668, 669, 670, 672, 673, 674, 675,
	612, 613, 629, 480, 474, 430, 472, 473, 477, 478,
	481, 293, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	4088, 323, 0, 0, 372, 409, 624, 0, 0, 469,
	0, 522, 526, 0, 615, 0, 0, 0, 0, 380,
	0, 0, 0, 0, 0, 0, 0, 591, 0, 0,
	0, 0, 311, 699, 614, 685, 0, 0, 0, 476,
	0, 0, 0, 0, 0, 0, 0, 319, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 513, 447, 664, 540, 318, 364, 351, 393, 435,
	547, 0, 0, 425, 595, 360, 449, 0, 339, 482,
	0, 571, 446, 0, 554, 574, 0, 466, 345, 505,
	561, 562, 0, 0, 0, 0, 0, 349, 350, 471,
	331, 479, 676, 642, 534, 492, 490, 0, 457, 514,
	671, 0, 0, 379, 0, 374, 470, 610, 337, 589,
	508, 475, 429, 537, 566, 376, 361, 362, 405, 507,
	395, 347, 600, 639, 643, 641, 637, 634, 638, 635,
	636, 640, 396, 633, 0, 608, 617, 651, 631, 659,
	616, 656, 626, 371, 655, 620, 619, 665, 646, 647,
	601, 661, 632, 630, 623, 622, 618, 0, 296, 297,
	298, 299, 300, 301, 302, 303, 304, 305, 307, 0,
	308, 309, 310, 312, 313, 314, 0, 315, 316, 317,
	320, 321, 322, 324, 684, 325, 326, 327, 328, 329,
	330, 621, 0, 332, 333, 334, 335, 336, 338, 340,
	341, 342, 343, 344, 346, 348, 0, 0, 0, 0,
	0, 0, 0, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 363, 365, 366, 367, 368, 369, 370, 373,
	0, 375, 377, 0, 378, 381, 0, 382, 383, 384,
	385, 386, 387, 388, 389, 625, 390, 0, 391, 392,
	394, 0, 397, 398, 399, 400, 401, 0, 402, 627,
	628, 403, 404, 406, 407, 408, 410, 411, 412, 413,
	414, 415, 416, 417, 418, 419, 420, 421, 0, 422,
	423, 424, 426, 0, 427, 428, 431, 432, 433, 434,
	0, 436, 644, 0, 437, 438, 439, 0, 0, 440,
	441, 442, 443, 444, 445, 448, 645, 450, 451, 452,
	453, 454, 455, 456, 686, 458, 459, 460, 461, 462,
	463, 464, 648, 649, 465, 467, 468, 650, 652, 653,
	0, 483, 484, 485, 486, 487, 488, 489, 491, 0,
	493, 494, 495, 654, 496, 497, 498, 499, 0, 500,
	501, 502, 503, 504, 506, 509, 510, 511, 512, 0,
	515, 516, 517, 518, 519, 520, 521, 523, 524, 525,
	527, 528, 529, 687, 530, 531, 532, 533, 657, 535,
	536, 688, 538, 539, 541, 542, 543, 544, 545, 546,
	697, 0, 548, 658, 549, 550, 551, 552, 553, 0,
	555, 556, 557, 558, 559, 560, 563, 564, 565, 567,
	568, 660, 569, 570, 0, 572, 573, 0, 575, 576,
	577, 578, 579, 0, 698, 580, 662, 581, 663, 582,
	583, 584, 585, 586, 587, 588, 590, 0, 0, 592,
	593, 594, 596, 597, 598, 599, 602, 603, 604, 605,
	606, 0, 607, 609, 611, 689, 666, 667, 668, 669,
	670, 672, 673, 674, 675, 612, 613, 629, 480, 474,
	430, 472, 473, 477, 478, 481, 0, 929, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 323, 804, 1238,
	372, 1068, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 809, 0, 815,
	0, 821, 0, 591, 0, 811, 812, 817, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 813, 810,
	814, 820, 808, 818, 805, 816, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 802, 807,
	0, 823, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 801, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 803, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 926, 806, 0, 0, 927, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 819, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 928, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 822, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 929, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 323, 804, 0, 372, 1066, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 809, 0, 815, 0, 821, 0, 591, 0,
	811, 812, 817, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 813, 810, 814, 820, 808, 818, 805,
	816, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 802, 807, 0, 823, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 801, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 803, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 926,
	806, 0, 0, 927, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 819, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 928, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 822, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 929, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 323, 804, 0,
	372, 1063, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 809, 0, 815,
	0, 821, 0, 591, 0, 811, 812, 817, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 813, 810,
	814, 820, 808, 818, 805, 816, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 802, 807,
	0, 823, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 801, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 803, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 926, 806, 0, 0, 927, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 1061,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 819, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 928, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 822, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 929, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 323, 804, 0, 372, 409, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 809, 0, 815, 0, 821, 0, 591, 0,
	811, 812, 817, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 813, 810, 814, 820, 808, 818, 805,
	816, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 802, 807, 0, 823, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 801, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 803, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 926,
	806, 0, 0, 927, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 922, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 819, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 928, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 822, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 929, 0, 0,
	784, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 323, 804, 0,
	372, 409, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 1736, 0, 380, 0, 809, 0, 815,
	0, 821, 0, 591, 0, 811, 812, 817, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 813, 810,
	814, 820, 808, 818, 805, 816, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 802, 807,
	0, 823, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 801, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 803, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 806, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 819, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 822, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 323, 0, 0, 372, 409, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 323, 0, 2578,
	372, 409, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 929, 0, 0, 784, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 323, 804, 4661, 372, 409, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 809, 0, 815, 0, 821, 0, 591, 0,
	811, 812, 817, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 813, 810, 814, 820, 808, 818, 805,
	816, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 802, 807, 0, 823, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 801, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 803, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	806, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 819, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 822, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 323, 0, 0,
	372, 409, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 323, 0, 3968, 372, 409, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 798, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 323, 804, 1361,
	372, 409, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 809, 0, 815,
	0, 821, 0, 591, 0, 811, 812, 817, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 813, 810,
	814, 820, 808, 818, 805, 816, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 802, 807,
	0, 823, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 801, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 803, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 806, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 819, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 822, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 929, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 323, 804, 0, 372, 409, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 809, 0, 815, 0, 821, 0, 591, 0,
	811, 812, 817, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 813, 810, 814, 820, 808, 818, 805,
	816, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 802, 807, 0, 823, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 801, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 803, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	806, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 819, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 822, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 3413, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 323, 804, 0,
	372, 409, 0, 0, 0, 469, 0, 522, 526, 0,
	0, 0, 0, 0, 0, 380, 0, 809, 2783, 815,
	0, 821, 0, 591, 0, 811, 812, 817, 311, 1046,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 813, 810,
	814, 820, 808, 818, 805, 816, 0, 513, 447, 0,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 802, 807,
	0, 823, 0, 349, 350, 471, 331, 479, 0, 0,
	534, 492, 490, 0, 457, 514, 0, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 396, 1048,
	0, 608, 1051, 1039, 1031, 1032, 1033, 1034, 1035, 1036,
	0, 1053, 1054, 1055, 1056, 1057, 601, 1045, 1047, 1030,
	1037, 1038, 1040, 2786, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 801, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 0, 803, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 806, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 0, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 0, 0, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 0, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 0, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 0, 0,
	465, 467, 468, 0, 2784, 0, 819, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 0,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 0, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 2789,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 0, 569, 570,
	0, 572, 573, 822, 575, 576, 577, 578, 579, 0,
	698, 580, 0, 581, 0, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 0, 0, 0, 293, 0, 0, 0, 0,
	0, 612, 613, 2785, 480, 474, 430, 472, 473, 477,
	478, 481, 3408, 306, 0, 323, 0, 0, 372, 2700,
	624, 0, 0, 469, 0, 522, 526, 0, 615, 0,
	0, 0, 0, 380, 0, 0, 0, 0, 0, 3406,
	0, 591, 0, 0, 0, 0, 311, 699, 614, 685,
	0, 0, 0, 476, 0, 0, 0, 0, 0, 0,
	0, 319, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 513, 447, 664, 540, 318,
	364, 351, 393, 435, 547, 0, 0, 425, 595, 360,
	449, 0, 339, 482, 0, 571, 446, 0, 554, 574,
	0, 466, 345, 505, 561, 562, 0, 0, 2704, 0,
	0, 349, 350, 471, 331, 479, 676, 642, 534, 492,
	490, 0, 457, 514, 671, 0, 0, 379, 0, 374,
	470, 610, 337, 589, 508, 475, 429, 537, 566, 376,
	361, 362, 405, 507, 395, 347, 600, 639, 643, 641,
	637, 634, 638, 635, 636, 640, 396, 633, 0, 608,
	617, 651, 631, 659, 616, 656, 626, 371, 655, 620,
	619, 665, 646, 647, 601, 661, 632, 630, 623, 622,
	618, 0, 296, 297, 298, 299, 300, 301, 302, 303,
	304, 305, 307, 0, 308, 309, 310, 312, 313, 314,
	0, 315, 316, 317, 320, 321, 322, 324, 684, 325,
	326, 327, 328, 329, 330, 621, 0, 332, 333, 334,
	335, 336, 338, 340, 341, 342, 343, 344, 346, 348,
	0, 0, 0, 0, 0, 0, 0, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 363, 365, 366, 367,
	368, 369, 370, 373, 0, 375, 377, 0, 378, 381,
	0, 2710, 383, 384, 385, 386, 387, 388, 389, 625,
	390, 0, 391, 392, 394, 2709, 397, 398, 399, 400,
	401, 0, 402, 627, 628, 403, 404, 406, 407, 408,
	410, 411, 412, 413, 414, 415, 416, 417, 418, 419,
	420, 421, 0, 422, 423, 424, 426, 0, 427, 428,
	431, 432, 433, 434, 0, 436, 644, 0, 437, 438,
	439, 0, 0, 440, 441, 442, 443, 444, 445, 448,
	645, 450, 451, 452, 453, 454, 455, 456, 686, 458,
	459, 460, 461, 462, 463, 464, 648, 649, 465, 467,
	468, 650, 652, 653, 0, 483, 484, 485, 486, 487,
	488, 489, 491, 0, 493, 494, 495, 654, 496, 497,
	498, 499, 2708, 500, 501, 502, 503, 504, 506, 509,
	510, 511, 512, 0, 515, 516, 517, 518, 519, 520,
	521, 523, 524, 525, 527, 528, 529, 687, 530, 531,
	532, 533, 657, 535, 536, 688, 538, 539, 541, 542,
	543, 544, 545, 546, 697, 0, 548, 658, 549, 550,
	551, 552, 553, 0, 555, 556, 557, 558, 559, 560,
	563, 564, 565, 567, 568, 660, 569, 570, 0, 572,
	573, 0, 575, 576, 577, 578, 579, 0, 698, 580,
	662, 581, 663, 582, 583, 584, 585, 586, 587, 588,
	590, 0, 2707, 592, 593, 594, 596, 597, 598, 599,
	602, 603, 604, 605, 606, 0, 607, 609, 611, 689,
	666, 667, 668, 669, 670, 672, 673, 674, 675, 612,
	613, 629, 480, 474, 430, 472, 473, 477, 478, 481,
	293, 0, 0, 0, 2706, 2701, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 306, 0,
	323, 0, 0, 372, 409, 624, 0, 0, 469, 0,
	522, 526, 0, 615, 0, 0, 0, 0, 380, 0,
	0, 0, 3370, 0, 0, 0, 591, 0, 0, 0,
	0, 311, 699, 614, 685, 0, 0, 0, 476, 0,
	0, 0, 0, 0, 0, 0, 319, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	513, 447, 664, 540, 318, 364, 351, 393, 435, 547,
	0, 0, 425, 595, 360, 449, 0, 339, 482, 0,
	571, 446, 0, 554, 574, 0, 466, 345, 505, 561,
	562, 0, 0, 2704, 0, 0, 349, 350, 471, 331,
	479, 676, 642, 534, 492, 490, 0, 457, 514, 671,
	0, 0, 379, 0, 374, 470, 610, 337, 589, 508,
	475, 429, 537, 566, 376, 361, 362, 405, 507, 395,
	347, 600, 639, 643, 641, 637, 634, 638, 635, 636,
	640, 396, 633, 0, 608, 617, 651, 631, 659, 616,
	656, 626, 371, 655, 620, 619, 665, 646, 647, 601,
	661, 632, 630, 623, 622, 618, 0, 296, 297, 298,
	299, 300, 301, 302, 303, 304, 305, 307, 0, 308,
	309, 310, 312, 313, 314, 0, 315, 316, 317, 320,
	321, 322, 324, 684, 325, 326, 327, 328, 329, 330,
	621, 0, 332, 333, 334, 335, 336, 338, 340, 341,
	342, 343, 344, 346, 348, 0, 0, 0, 0, 0,
	0, 0, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 363, 365, 366, 367, 368, 369, 370, 373, 0,
	375, 377, 0, 378, 381, 0, 2710, 383, 384, 385,
	386, 387, 388, 389, 625, 390, 0, 391, 392, 394,
	2709, 397, 398, 399, 400, 401, 0, 402, 627, 628,
	403, 404, 406, 407, 408, 410, 411, 412, 413, 414,
	415, 416, 417, 418, 419, 420, 421, 0, 422, 423,
	424, 426, 0, 427, 428, 431, 432, 433, 434, 0,
	436, 644, 0, 437, 438, 439, 0, 0, 440, 441,
	442, 443, 444, 445, 448, 645, 450, 451, 452, 453,
	454, 455, 456, 686, 458, 459, 460, 461, 462, 463,
	464, 648, 649, 465, 467, 468, 650, 652, 653, 0,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 493,
	494, 495, 654, 496, 497, 498, 499, 2708, 500, 501,
	502, 503, 504, 506, 509, 510, 511, 512, 0, 515,
	516, 517, 518, 519, 520, 521, 523, 524, 525, 527,
	528, 529, 687, 530, 531, 532, 533, 657, 535, 536,
	688, 538, 539, 541, 542, 543, 544, 545, 546, 697,
	0, 548, 658, 549, 550, 551, 552, 553, 0, 555,
	556, 557, 558, 559, 560, 563, 564, 565, 567, 568,
	660, 569, 570, 0, 572, 573, 0, 575, 576, 577,
	578, 579, 0, 698, 580, 662, 581, 663, 582, 583,
	584, 585, 586, 587, 588, 590, 0, 2707, 592, 593,
	594, 596, 597, 598, 599, 602, 603, 604, 605, 606,
	0, 607, 609, 611, 689, 666, 667, 668, 669, 670,
	672, 673, 674, 675, 612, 613, 629, 480, 474, 430,
	472, 473, 477, 478, 481, 293, 0, 0, 0, 2706,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 0, 323, 0, 0, 372, 409,
	624, 0, 0, 469, 0, 522, 526, 0, 615, 0,
	0, 0, 0, 380, 0, 0, 0, 0, 0, 0,
	0, 591, 0, 0, 0, 0, 311, 699, 614, 685,
	0, 0, 0, 476, 0, 0, 0, 0, 0, 0,
	0, 319, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 513, 447, 664, 540, 318,
	364, 351, 393, 435, 547, 0, 0, 425, 595, 360,
	449, 0, 339, 482, 0, 571, 446, 0, 554, 574,
	0, 466, 345, 505, 561, 562, 0, 0, 2704, 0,
	0, 349, 350, 471, 331, 479, 676, 642, 534, 492,
	490, 0, 457, 514, 671, 0, 0, 379, 0, 374,
	470, 610, 337, 589, 508, 475, 429, 537, 566, 376,
	361, 362, 405, 507, 395, 347, 600, 639, 643, 641,
	637, 634, 638, 635, 636, 640, 396, 633, 0, 608,
	617, 651, 631, 659, 616, 656, 626, 371, 655, 620,
	619, 665, 646, 647, 601, 661, 632, 630, 623, 622,
	618, 0, 296, 297, 298, 299, 300, 301, 302, 303,
	304, 305, 307, 0, 308, 309, 310, 312, 313, 314,
	0, 315, 316, 317, 320, 321, 322, 324, 684, 325,
	326, 327, 328, 329, 330, 621, 0, 332, 333, 334,
	335, 336, 338, 340, 341, 342, 343, 344, 346, 348,
	0, 0, 0, 0, 0, 0, 0, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 363, 365, 366, 367,
	368, 369, 370, 373, 0, 375, 377, 0, 378, 381,
	0, 2710, 383, 384, 385, 386, 387, 388, 389, 625,
	390, 0, 391, 392, 394, 2709, 397, 398, 399, 400,
	401, 0, 402, 627, 628, 403, 404, 406, 407, 408,
	410, 411, 412, 413, 414, 415, 416, 417, 418, 419,
	420, 421, 0, 422, 423, 424, 426, 0, 427, 428,
	431, 432, 433, 434, 0, 436, 644, 0, 437, 438,
	439, 0, 0, 440, 441, 442, 443, 444, 445, 448,
	645, 450, 451, 452, 453, 454, 455, 456, 686, 458,
	459, 460, 461, 462, 463, 464, 648, 649, 465, 467,
	468, 650, 652, 653, 0, 483, 484, 485, 486, 487,
	488, 489, 491, 0, 493, 494, 495, 654, 496, 497,
	498, 499, 2708, 500, 501, 502, 503, 504, 506, 509,
	510, 511, 512, 0, 515, 516, 517, 518, 519, 520,
	521, 523, 524, 525, 527, 528, 529, 687, 530, 531,
	532, 533, 657, 535, 536, 688, 538, 539, 541, 542,
	543, 544, 545, 546, 697, 0, 548, 658, 549, 550,
	551, 552, 553, 0, 555, 556, 557, 558, 559, 560,
	563, 564, 565, 567, 568, 660, 569, 570, 0, 572,
	573, 0, 575, 576, 577, 578, 579, 0, 698, 580,
	662, 581, 663, 582, 583, 584, 585, 586, 587, 588,
	590, 0, 2707, 592, 593, 594, 596, 597, 598, 599,
	602, 603, 604, 605, 606, 0, 607, 609, 611, 689,
	666, 667, 668, 669, 670, 672, 673, 674, 675, 612,
	613, 629, 480, 474, 430, 472, 473, 477, 478, 481,
	1049, 0, 0, 0, 2706, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 306, 0,
	323, 804, 0, 372, 409, 0, 0, 0, 469, 0,
	522, 526, 0, 0, 0, 0, 0, 0, 380, 0,
	809, 2783, 815, 0, 821, 0, 591, 0, 811, 812,
	817, 311, 1046, 614, 685, 0, 0, 0, 476, 0,
	0, 0, 0, 0, 0, 0, 319, 0, 0, 0,
	0, 813, 810, 814, 820, 808, 818, 805, 816, 0,
	513, 447, 0, 540, 318, 364, 351, 393, 435, 547,
	0, 0, 425, 595, 360, 449, 0, 339, 482, 0,
	571, 446, 0, 554, 574, 0, 466, 345, 505, 561,
	562, 802, 807, 0, 823, 0, 349, 350, 471, 331,
	479, 0, 0, 534, 492, 490, 0, 457, 514, 0,
	0, 0, 379, 0, 374, 470, 610, 337, 589, 508,
	475, 429, 537, 566, 376, 361, 362, 405, 507, 395,
	347, 600, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 396, 1048, 0, 608, 1051, 1039, 1031, 1032, 1033,
	1034, 1035, 1036, 0, 1053, 1054, 1055, 1056, 1057, 601,
	1045, 1047, 1030, 1037, 1038, 1040, 2786, 296, 297, 298,
	299, 300, 301, 302, 303, 304, 305, 307, 0, 308,
	309, 310, 312, 313, 314, 801, 315, 316, 317, 320,
	321, 322, 324, 684, 325, 326, 327, 328, 329, 330,
	0, 803, 332, 333, 334, 335, 336, 338, 340, 341,
	342, 343, 344, 346, 348, 0, 0, 0, 806, 0,
	0, 0, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 363, 365, 366, 367, 368, 369, 370, 373, 0,
	375, 377, 0, 378, 381, 0, 382, 383, 384, 385,
	386, 387, 388, 389, 0, 390, 0, 391, 392, 394,
	0, 397, 398, 399, 400, 401, 0, 402, 0, 0,
	403, 404, 406, 407, 408, 410, 411, 412, 413, 414,
	415, 416, 417, 418, 419, 420, 421, 0, 422, 423,
	424, 426, 0, 427, 428, 431, 432, 433, 434, 0,
	436, 0, 0, 437, 438, 439, 0, 0, 440, 441,
	442, 443, 444, 445, 448, 0, 450, 451, 452, 453,
	454, 455, 456, 686, 458, 459, 460, 461, 462, 463,
	464, 0, 0, 465, 467, 468, 0, 2784, 0, 819,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 493,
	494, 495, 0, 496, 497, 498, 499, 0, 500, 501,
	502, 503, 504, 506, 509, 510, 511, 512, 0, 515,
	516, 517, 518, 519, 520, 521, 523, 524, 525, 527,
	528, 529, 687, 530, 531, 532, 533, 0, 535, 536,
	688, 538, 539, 541, 542, 543, 544, 545, 546, 697,
	0, 548, 2789, 549, 550, 551, 552, 553, 0, 555,
	556, 557, 558, 559, 560, 563, 564, 565, 567, 568,
	0, 569, 570, 0, 572, 573, 822, 575, 576, 577,
	578, 579, 0, 698, 580, 0, 581, 0, 582, 583,
	584, 585, 586, 587, 588, 590, 0, 0, 592, 593,
	594, 596, 597, 598, 599, 602, 603, 604, 605, 606,
	0, 607, 609, 611, 689, 0, 0, 0, 0, 1049,
	0, 0, 0, 0, 612, 613, 2785, 480, 474, 430,
	472, 473, 477, 478, 481, 0, 0, 306, 0, 323,
	804, 0, 372, 409, 0, 0, 0, 469, 0, 522,
	526, 0, 0, 0, 0, 0, 0, 380, 3393, 809,
	2783, 815, 0, 821, 0, 591, 0, 811, 812, 817,
	311, 1046, 614, 685, 0, 0, 0, 476, 0, 0,
	0, 0, 0, 0, 0, 319, 0, 0, 0, 0,
	813, 810, 814, 820, 808, 818, 805, 816, 0, 513,
	447, 0, 540, 318, 364, 351, 393, 435, 547, 0,
	0, 425, 595, 360, 449, 0, 339, 482, 0, 571,
	446, 0, 554, 574, 0, 466, 345, 505, 561, 562,
	802, 807, 0, 823, 0, 349, 350, 471, 331, 479,
	0, 0, 534, 492, 490, 0, 457, 514, 0, 0,
	0, 379, 0, 374, 470, 610, 337, 589, 508, 475,
	429, 537, 566, 376, 361, 362, 405, 507, 395, 347,
	600, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	396, 1048, 0, 608, 1051, 1039, 1031, 1032, 1033, 1034,
	1035, 1036, 0, 1053, 1054, 1055, 1056, 1057, 601, 1045,
	1047, 1030, 1037, 1038, 1040, 2786, 296, 297, 298, 299,
	300, 301, 302, 303, 304, 305, 307, 0, 308, 309,
	310, 312, 313, 314, 801, 315, 316, 317, 320, 321,
	322, 324, 684, 325, 326, 327, 328, 329, 330, 0,
	803, 332, 333, 334, 335, 336, 338, 340, 341, 342,
	343, 344, 346, 348, 0, 0, 0, 806, 0, 0,
	0, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	363, 365, 366, 367, 368, 369, 370, 373, 0, 375,
	377, 0, 378, 381, 0, 382, 383, 384, 385, 386,
	387, 388, 389, 0, 390, 0, 391, 392, 394, 0,
	397, 398, 399, 400, 401, 0, 402, 0, 0, 403,
	404, 406, 407, 408, 410, 411, 412, 413, 414, 415,
	416, 417, 418, 419, 420, 421, 0, 422, 423, 424,
	426, 0, 427, 428, 431, 432, 433, 434, 0, 436,
	0, 0, 437, 438, 439, 0, 0, 440, 441, 442,
	443, 444, 445, 448, 0, 450, 451, 452, 453, 454,
	455, 456, 686, 458, 459, 460, 461, 462, 463, 464,
	0, 0, 465, 467, 468, 0, 2784, 0, 819, 483,
	484, 485, 486, 487, 488, 489, 491, 0, 493, 494,
	495, 0, 496, 497, 498, 499, 0, 500, 501, 502,
	503, 504, 506, 509, 510, 511, 512, 0, 515, 516,
	517, 518, 519, 520, 521, 523, 524, 525, 527, 528,
	529, 687, 530, 531, 532, 533, 0, 535, 536, 688,
	538, 539, 541, 542, 543, 544, 545, 546, 697, 0,
	548, 2789, 549, 550, 551, 552, 553, 0, 555, 556,
	557, 558, 559, 560, 563, 564, 565, 567, 568, 0,
	569, 570, 0, 572, 573, 822, 575, 576, 577, 578,
	579, 0, 698, 580, 0, 581, 0, 582, 583, 584,
	585, 586, 587, 588, 590, 0, 0, 592, 593, 594,
	596, 597, 598, 599, 602, 603, 604, 605, 606, 0,
	607, 609, 611, 689, 0, 0, 0, 293, 0, 0,
	0, 0, 0, 612, 613, 2785, 480, 474, 430, 472,
	473, 477, 478, 481, 707, 712, 0, 323, 0, 711,
	372, 409, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 2778, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 699,
	614, 685, 0, 0, 0, 476, 709, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 3764, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 710, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 707,
	712, 0, 323, 0, 711, 372, 409, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 699, 614, 685, 0, 0, 0,
	476, 709, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 715, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	710, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 707, 712, 0, 323, 0, 711,
	372, 409, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 699,
	614, 685, 0, 0, 0, 476, 709, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 710, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2669,
	306, 0, 323, 0, 0, 372, 409, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 844, 2672, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	2676, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 2673, 573, 0, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1783, 306, 0, 323, 0, 0,
	372, 409, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	1769, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	1775, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 1776, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 1771, 397, 1772,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 1777, 1778, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	1779, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 1773, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 1774, 533, 657, 535, 536, 1780, 538, 539,
	541, 542, 1770, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 1781, 0, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 1782, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 323, 0, 0, 372, 409, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 844, 2672, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	2676, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 2673, 573, 0, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 712, 0, 323, 0, 711,
	372, 409, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 699,
	614, 685, 0, 0, 0, 476, 709, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 710, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3547,
	306, 0, 323, 0, 0, 372, 409, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 3548, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3538, 306, 0, 323, 0, 0,
	372, 409, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 3539, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 953,
	306, 0, 323, 0, 0, 372, 952, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 844, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 323, 0, 0,
	372, 409, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 844,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 323, 0, 0, 372, 409, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 5200, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 4088, 323, 0, 0,
	372, 409, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 323, 0, 0, 372, 409, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 4808, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 323, 0, 0,
	372, 409, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 4789, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 4100, 323, 0, 0, 372, 409, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 323, 0, 0,
	372, 409, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 4267, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 784, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 323, 0, 0, 372, 409, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 770, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 323, 0, 0,
	372, 409, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 323, 0, 0, 372, 409, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 699, 614, 3146, 0, 0, 0,
	476, 0, 0, 0, 0, 3149, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 3147, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 3145,
	576, 3144, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 3148, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 683, 306, 0, 323, 0, 0,
	372, 409, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 323, 0, 0, 372, 1516, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 844, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1514, 306, 0, 323, 0, 0,
	372, 1513, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1182,
	306, 0, 323, 0, 0, 372, 409, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 323, 0, 0,
	372, 409, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 286,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 1081, 315, 316, 317, 320, 321, 322, 324,
	287, 325, 1080, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	289, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 290,
	530, 531, 532, 533, 657, 535, 536, 288, 538, 539,
	541, 542, 543, 544, 545, 546, 1078, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	282, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 291, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 956,
	306, 0, 323, 0, 0, 372, 955, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 777, 306, 0, 323, 0, 0,
	372, 409, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 776, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 773,
	306, 0, 323, 0, 0, 372, 409, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 740, 306, 0, 323, 0, 0,
	372, 409, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 737,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 739, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	738, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 683,
	306, 0, 323, 0, 0, 372, 409, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 679, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 681, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 680, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 323, 0, 0,
	372, 409, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 6086, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 323, 0, 0, 372, 409, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 323, 0, 0,
	372, 4725, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 323, 0, 0, 372, 409, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 3858,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 323, 0, 0,
	372, 3737, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 323, 0, 0, 372, 409, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 286, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 287, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 289, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 290, 530, 531, 532, 533, 657,
	535, 536, 288, 538, 539, 541, 542, 543, 544, 545,
	546, 1078, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 282, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 291, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 323, 0, 0,
	372, 409, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 286,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	287, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	289, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 290,
	530, 531, 532, 533, 657, 535, 536, 288, 538, 539,
	541, 542, 543, 544, 545, 546, 2830, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	2831, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 291, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 323, 0, 0, 372, 3640, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 323, 0, 0,
	372, 3533, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 323, 0, 0, 372, 3531, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 323, 0, 0,
	372, 3517, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 323, 0, 0, 372, 409, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 286, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 287, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 289, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 290, 530, 531, 532, 533, 657,
	535, 536, 2870, 538, 539, 541, 542, 543, 544, 545,
	546, 2830, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 2831, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 291, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 323, 0, 0,
	372, 409, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 286,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	287, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	289, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 290,
	530, 531, 532, 533, 657, 535, 536, 2859, 538, 539,
	541, 542, 543, 544, 545, 546, 2830, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	2831, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 291, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 323, 0, 0, 372, 409, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 286, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 287, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 289, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 290, 530, 531, 532, 533, 657,
	535, 536, 2829, 538, 539, 541, 542, 543, 544, 545,
	546, 2830, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 2831, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 291, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 323, 0, 0,
	372, 409, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 286,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	287, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	289, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 290,
	530, 531, 532, 533, 657, 535, 536, 288, 538, 539,
	541, 542, 543, 544, 545, 546, 1078, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 2802, 0, 575, 576, 577, 578, 579, 0,
	282, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 291, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 323, 0, 0, 372, 2660, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 323, 0, 0,
	372, 2601, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 323, 0, 0, 372, 409, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 1762, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 323, 0, 0,
	372, 1720, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 323, 0, 0, 372, 1431, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 323, 0, 0,
	372, 1392, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 323, 0, 0, 372, 1387, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 1381, 323, 0, 0,
	372, 409, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 0, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 323, 0, 0, 372, 1016, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 323, 0, 0,
	372, 1012, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 323, 0, 0, 372, 1009, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 323, 0, 0,
	372, 1003, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 323, 0, 0, 372, 984, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 323, 0, 0,
	372, 960, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 323, 0, 0, 372, 958, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 323, 0, 0,
	372, 939, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 323, 0, 0, 372, 921, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 323, 0, 0,
	372, 917, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 323, 0, 0, 372, 915, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 323, 0, 0,
	372, 890, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	698, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 323, 0, 0, 372, 409, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 847, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 323, 0, 0,
	372, 409, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 699,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 657, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	702, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 323, 0, 0, 372, 409, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 534, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 700, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 323, 0, 0,
	372, 409, 624, 0, 0, 469, 0, 522, 526, 0,
	615, 0, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 311, 286,
	614, 280, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 447, 664,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 0, 0,
	0, 0, 0, 349, 350, 471, 331, 479, 676, 642,
	534, 492, 490, 0, 457, 514, 671, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 639,
	643, 641, 637, 634, 638, 635, 636, 640, 396, 633,
	0, 608, 617, 651, 631, 659, 616, 656, 626, 371,
	655, 620, 619, 665, 646, 647, 601, 661, 632, 630,
	623, 622, 618, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 0, 315, 316, 317, 320, 321, 322, 324,
	287, 325, 326, 327, 328, 329, 330, 621, 0, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 625, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 627, 628, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 644, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 645, 450, 451, 452, 453, 454, 455, 456,
	289, 458, 459, 460, 461, 462, 463, 464, 648, 649,
	465, 467, 468, 650, 652, 653, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 654,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 290,
	530, 531, 532, 533, 657, 535, 536, 288, 538, 539,
	541, 542, 543, 544, 545, 546, 281, 0, 548, 658,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 660, 569, 570,
	0, 572, 573, 0, 575, 576, 577, 578, 579, 0,
	282, 580, 662, 581, 663, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 291, 666, 667, 668, 669, 670, 672, 673, 674,
	675, 612, 613, 629, 480, 474, 430, 472, 473, 477,
	478, 481, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 323, 0, 0, 372, 409, 624, 0, 0,
	469, 0, 522, 526, 0, 615, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 311, 699, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 447, 664, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 0, 0, 0, 0, 0, 349, 350,
	471, 331, 479, 676, 642, 0, 492, 490, 0, 457,
	514, 671, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 639, 643, 641, 637, 634, 638,
	635, 636, 640, 396, 633, 0, 608, 617, 651, 631,
	659, 616, 656, 626, 371, 655, 620, 619, 665, 646,
	647, 601, 661, 632, 630, 623, 622, 618, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 0, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 621, 0, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 625, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	627, 628, 0, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 644, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 645, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 648, 649, 465, 467, 468, 650, 652,
	653, 0, 483, 484, 485, 486, 487, 488, 0, 491,
	0, 493, 494, 495, 654, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 0, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 657,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 658, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 660, 569, 570, 0, 572, 573, 0, 575,
	576, 577, 578, 579, 0, 698, 580, 662, 581, 663,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 666, 667, 668,
	669, 670, 672, 673, 674, 675, 612, 613, 629, 480,
	474, 430, 472, 473, 477, 478, 481, 1049, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 323, 804, 0,
	372, 409, 0, 0, 0, 469, 0, 522, 526, 0,
	0, 0, 0, 0, 0, 380, 0, 809, 2783, 815,
	0, 821, 0, 591, 0, 811, 812, 817, 311, 1046,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 813, 810,
	814, 820, 808, 818, 805, 816, 0, 513, 447, 0,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 802, 807,
	0, 823, 0, 349, 350, 471, 331, 479, 0, 0,
	534, 492, 490, 0, 457, 514, 0, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 396, 1048,
	0, 608, 1051, 1039, 1031, 1032, 1033, 1034, 1035, 1036,
	0, 1053, 1054, 1055, 1056, 1057, 601, 1045, 1047, 1030,
	1037, 1038, 1040, 2786, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 801, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 0, 803, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 806, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 0, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 0, 0, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 0, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 0, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 0, 0,
	465, 467, 468, 0, 2784, 0, 819, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 0,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 0, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 2789,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 0, 569, 570,
	0, 572, 573, 822, 575, 576, 577, 578, 579, 0,
	698, 580, 0, 581, 0, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 0, 0, 1049, 0, 0, 0, 0, 0,
	0, 612, 613, 2785, 480, 474, 430, 472, 473, 477,
	478, 481, 306, 0, 323, 804, 0, 372, 409, 0,
	0, 0, 469, 0, 522, 526, 0, 0, 0, 0,
	0, 0, 380, 0, 809, 0, 815, 2835, 821, 0,
	591, 0, 811, 812, 817, 311, 1046, 614, 685, 0,
	0, 0, 476, 0, 0, 0, 0, 4136, 0, 0,
	319, 0, 0, 0, 0, 813, 810, 814, 820, 808,
	818, 805, 816, 0, 513, 447, 0, 540, 318, 364,
	351, 393, 435, 547, 0, 0, 425, 595, 360, 449,
	0, 339, 482, 0, 571, 446, 0, 554, 574, 0,
	466, 345, 505, 561, 562, 802, 807, 0, 823, 0,
	349, 350, 471, 331, 479, 0, 0, 534, 492, 490,
	0, 457, 514, 0, 0, 0, 379, 0, 374, 470,
	610, 337, 589, 508, 475, 429, 537, 566, 376, 361,
	362, 405, 507, 395, 347, 600, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 396, 1048, 0, 608, 1051,
	1039, 1031, 1032, 1033, 1034, 1035, 1036, 0, 1053, 1054,
	1055, 1056, 1057, 601, 1045, 1047, 1030, 1037, 1038, 1040,
	0, 296, 297, 298, 299, 300, 301, 302, 303, 304,
	305, 307, 0, 308, 309, 310, 312, 313, 314, 801,
	315, 316, 317, 320, 321, 322, 324, 684, 325, 326,
	327, 328, 329, 330, 0, 803, 332, 333, 334, 335,
	336, 338, 340, 341, 342, 343, 344, 346, 348, 0,
	0, 0, 806, 0, 0, 0, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 363, 365, 366, 367, 368,
	369, 370, 373, 0, 375, 377, 0, 378, 381, 0,
	382, 383, 384, 385, 386, 387, 388, 389, 0, 390,
	0, 391, 392, 394, 0, 397, 398, 399, 400, 401,
	0, 402, 0, 0, 403, 404, 406, 407, 408, 410,
	411, 412, 413, 414, 415, 416, 417, 418, 419, 420,
	421, 0, 422, 423, 424, 426, 0, 427, 428, 431,
	432, 433, 434, 0, 436, 0, 0, 437, 438, 439,
	0, 0, 440, 441, 442, 443, 444, 445, 448, 0,
	450, 451, 452, 453, 454, 455, 456, 686, 458, 459,
	460, 461, 462, 463, 464, 0, 0, 465, 467, 468,
	0, 0, 0, 819, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 493, 494, 495, 0, 496, 497, 498,
	499, 0, 500, 501, 502, 503, 504, 506, 509, 510,
	511, 512, 0, 515, 516, 517, 518, 519, 520, 521,
	523, 524, 525, 527, 528, 529, 687, 530, 531, 532,
	533, 0, 535, 536, 688, 538, 539, 541, 542, 543,
	544, 545, 546, 697, 0, 548, 2789, 549, 550, 551,
	552, 553, 0, 555, 556, 557, 558, 559, 560, 563,
	564, 565, 567, 568, 0, 569, 570, 0, 572, 573,
	822, 575, 576, 577, 578, 579, 0, 698, 580, 0,
	581, 0, 582, 583, 584, 585, 586, 587, 588, 590,
	0, 0, 592, 593, 594, 596, 597, 598, 599, 602,
	603, 604, 605, 606, 0, 607, 609, 611, 689, 0,
	0, 1049, 0, 0, 0, 0, 0, 0, 612, 613,
	0, 480, 474, 430, 472, 473, 477, 478, 481, 306,
	0, 323, 804, 0, 372, 409, 0, 0, 0, 469,
	0, 522, 526, 0, 0, 0, 0, 0, 0, 380,
	0, 809, 0, 815, 0, 821, 0, 591, 0, 811,
	812, 817, 311, 1046, 614, 685, 0, 0, 0, 476,
	0, 0, 0, 0, 0, 0, 0, 319, 0, 0,
	0, 0, 813, 810, 814, 820, 808, 818, 805, 816,
	0, 513, 447, 0, 540, 318, 364, 351, 393, 435,
	547, 0, 0, 425, 595, 360, 449, 0, 339, 482,
	0, 571, 446, 0, 554, 574, 0, 466, 345, 505,
	561, 562, 802, 807, 0, 823, 0, 349, 350, 471,
	331, 479, 0, 0, 534, 492, 490, 6120, 457, 514,
	0, 0, 0, 379, 0, 374, 470, 610, 337, 589,
	508, 475, 429, 537, 566, 376, 361, 362, 405, 507,
	395, 347, 600, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 396, 1048, 0, 608, 1051, 1039, 1031, 1032,
	1033, 1034, 1035, 1036, 0, 1053, 1054, 1055, 1056, 1057,
	601, 1045, 1047, 1030, 1037, 1038, 1040, 0, 296, 297,
	298, 299, 300, 301, 302, 303, 304, 305, 307, 0,
	308, 309, 310, 312, 313, 314, 801, 315, 316, 317,
	320, 321, 322, 324, 684, 325, 326, 327, 328, 329,
	330, 0, 803, 332, 333, 334, 335, 336, 338, 340,
	341, 342, 343, 344, 346, 348, 0, 0, 0, 806,
	0, 0, 0, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 363, 365, 366, 367, 368, 369, 370, 373,
	0, 375, 377, 0, 378, 381, 0, 382, 383, 384,
	385, 386, 387, 388, 389, 0, 390, 0, 391, 392,
	394, 0, 397, 398, 399, 400, 401, 0, 402, 0,
	0, 403, 404, 406, 407, 408, 410, 411, 412, 413,
	414, 415, 416, 417, 418, 419, 420, 421, 0, 422,
	423, 424, 426, 0, 427, 428, 431, 432, 433, 434,
	0, 436, 0, 0, 437, 438, 439, 0, 0, 440,
	441, 442, 443, 444, 445, 448, 0, 450, 451, 452,
	453, 454, 455, 456, 686, 458, 459, 460, 461, 462,
	463, 464, 0, 0, 465, 467, 468, 0, 0, 0,
	819, 483, 484, 485, 486, 487, 488, 489, 491, 0,
	493, 494, 495, 0, 496, 497, 498, 499, 0, 500,
	501, 502, 503, 504, 506, 509, 510, 511, 512, 0,
	515, 516, 517, 518, 519, 520, 521, 523, 524, 525,
	527, 528, 529, 687, 530, 531, 532, 533, 0, 535,
	536, 688, 538, 539, 541, 542, 543, 544, 545, 546,
	697, 0, 548, 1021, 549, 550, 551, 552, 553, 0,
	555, 556, 557, 558, 559, 560, 563, 564, 565, 567,
	568, 0, 569, 570, 0, 572, 573, 822, 575, 576,
	577, 578, 579, 0, 698, 580, 0, 581, 0, 582,
	583, 584, 585, 586, 587, 588, 590, 0, 0, 592,
	593, 594, 596, 597, 598, 599, 602, 603, 604, 605,
	606, 0, 607, 609, 611, 689, 0, 0, 1049, 0,
	0, 0, 0, 0, 0, 612, 613, 0, 480, 474,
	430, 472, 473, 477, 478, 481, 306, 0, 323, 804,
	0, 372, 409, 0, 0, 0, 469, 0, 522, 526,
	0, 0, 0, 0, 0, 0, 380, 0, 809, 0,
	815, 0, 821, 0, 591, 0, 811, 812, 817, 311,
	1046, 614, 685, 0, 0, 0, 476, 0, 0, 0,
	0, 0, 0, 0, 319, 0, 0, 0, 0, 813,
	810, 814, 820, 808, 818, 805, 816, 0, 513, 447,
	0, 540, 318, 364, 351, 393, 435, 547, 0, 0,
	425, 595, 360, 449, 0, 339, 482, 0, 571, 446,
	0, 554, 574, 0, 466, 345, 505, 561, 562, 802,
	807, 0, 823, 0, 349, 350, 471, 331, 479, 0,
	0, 534, 492, 490, 5789, 457, 514, 0, 0, 0,
	379, 0, 374, 470, 610, 337, 589, 508, 475, 429,
	537, 566, 376, 361, 362, 405, 507, 395, 347, 600,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 396,
	1048, 0, 608, 1051, 1039, 1031, 1032, 1033, 1034, 1035,
	1036, 0, 1053, 1054, 1055, 1056, 1057, 601, 1045, 1047,
	1030, 1037, 1038, 1040, 0, 296, 297, 298, 299, 300,
	301, 302, 303, 304, 305, 307, 0, 308, 309, 310,
	312, 313, 314, 801, 315, 316, 317, 320, 321, 322,
	324, 684, 325, 326, 327, 328, 329, 330, 0, 803,
	332, 333, 334, 335, 336, 338, 340, 341, 342, 343,
	344, 346, 348, 0, 0, 0, 806, 0, 0, 0,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 363,
	365, 366, 367, 368, 369, 370, 373, 0, 375, 377,
	0, 378, 381, 0, 382, 383, 384, 385, 386, 387,
	388, 389, 0, 390, 0, 391, 392, 394, 0, 397,
	398, 399, 400, 401, 0, 402, 0, 0, 403, 404,
	406, 407, 408, 410, 411, 412, 413, 414, 415, 416,
	417, 418, 419, 420, 421, 0, 422, 423, 424, 426,
	0, 427, 428, 431, 432, 433, 434, 0, 436, 0,
	0, 437, 438, 439, 0, 0, 440, 441, 442, 443,
	444, 445, 448, 0, 450, 451, 452, 453, 454, 455,
	456, 686, 458, 459, 460, 461, 462, 463, 464, 0,
	0, 465, 467, 468, 0, 0, 0, 819, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 493, 494, 495,
	0, 496, 497, 498, 499, 0, 500, 501, 502, 503,
	504, 506, 509, 510, 511, 512, 0, 515, 516, 517,
	518, 519, 520, 521, 523, 524, 525, 527, 528, 529,
	687, 530, 531, 532, 533, 0, 535, 536, 688, 538,
	539, 541, 542, 543, 544, 545, 546, 697, 0, 548,
	1021, 549, 550, 551, 552, 553, 0, 555, 556, 557,
	558, 559, 560, 563, 564, 565, 567, 568, 0, 569,
	570, 0, 572, 573, 822, 575, 576, 577, 578, 579,
	0, 698, 580, 0, 581, 0, 582, 583, 584, 585,
	586, 587, 588, 590, 0, 0, 592, 593, 594, 596,
	597, 598, 599, 602, 603, 604, 605, 606, 0, 607,
	609, 611, 689, 0, 0, 1049, 0, 0, 0, 0,
	0, 0, 612, 613, 0, 480, 474, 430, 472, 473,
	477, 478, 481, 306, 0, 323, 804, 0, 372, 409,
	0, 0, 0, 469, 0, 522, 526, 0, 0, 0,
	0, 0, 0, 380, 0, 809, 0, 815, 0, 821,
	0, 591, 0, 811, 812, 817, 311, 1046, 614, 685,
	0, 0, 0, 476, 0, 0, 0, 0, 0, 0,
	0, 319, 0, 0, 0, 0, 813, 810, 814, 820,
	808, 818, 805, 816, 0, 513, 447, 0, 540, 318,
	364, 351, 393, 435, 547, 0, 0, 425, 595, 360,
	449, 0, 339, 482, 0, 571, 446, 0, 554, 574,
	0, 466, 345, 505, 561, 562, 802, 807, 0, 823,
	0, 349, 350, 471, 331, 479, 0, 0, 534, 492,
	490, 0, 457, 514, 0, 0, 0, 379, 0, 374,
	470, 610, 337, 589, 508, 475, 429, 537, 566, 376,
	361, 362, 405, 507, 395, 347, 600, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 396, 1048, 0, 608,
	1051, 1039, 1031, 1032, 1033, 1034, 1035, 1036, 0, 1053,
	1054, 1055, 1056, 1057, 601, 1045, 1047, 1030, 1037, 1038,
	1040, 0, 296, 297, 298, 299, 300, 301, 302, 303,
	304, 305, 307, 0, 308, 309, 310, 312, 313, 314,
	801, 315, 316, 317, 320, 321, 322, 324, 684, 325,
	326, 327, 328, 329, 330, 0, 803, 332, 333, 334,
	335, 336, 338, 340, 341, 342, 343, 344, 346, 348,
	0, 0, 0, 806, 0, 0, 0, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 363, 365, 366, 367,
	368, 369, 370, 373, 0, 375, 377, 0, 378, 381,
	0, 382, 383, 384, 385, 386, 387, 388, 389, 0,
	390, 0, 391, 392, 394, 0, 397, 398, 399, 400,
	401, 0, 402, 0, 0, 403, 404, 406, 407, 408,
	410, 411, 412, 413, 414, 415, 416, 417, 418, 419,
	420, 421, 0, 422, 423, 424, 426, 0, 427, 428,
	431, 432, 433, 434, 0, 436, 0, 0, 437, 438,
	439, 0, 0, 440, 441, 442, 443, 444, 445, 448,
	0, 450, 451, 452, 453, 454, 455, 456, 686, 458,
	459, 460, 461, 462, 463, 464, 4386, 0, 465, 467,
	468, 0, 0, 0, 819, 483, 484, 485, 486, 487,
	488, 489, 491, 0, 493, 494, 495, 0, 496, 497,
	498, 499, 0, 500, 501, 502, 503, 504, 506, 509,
	510, 511, 512, 0, 515, 516, 517, 518, 519, 520,
	521, 523, 524, 525, 527, 528, 529, 687, 530, 531,
	532, 533, 0, 535, 536, 688, 538, 539, 541, 542,
	543, 544, 545, 546, 697, 0, 548, 1021, 549, 550,
	551, 552, 553, 0, 555, 556, 557, 558, 559, 560,
	563, 564, 565, 567, 568, 0, 569, 570, 0, 572,
	573, 822, 575, 576, 577, 578, 579, 0, 698, 580,
	0, 581, 0, 582, 583, 584, 585, 586, 587, 588,
	590, 0, 0, 592, 593, 594, 596, 597, 598, 599,
	602, 603, 604, 605, 606, 0, 607, 609, 611, 689,
	0, 0, 1049, 0, 0, 0, 0, 0, 0, 612,
	613, 0, 480, 474, 430, 472, 473, 477, 478, 481,
	306, 0, 323, 804, 0, 372, 409, 0, 0, 0,
	469, 0, 522, 526, 0, 0, 0, 0, 0, 0,
	380, 0, 809, 0, 815, 0, 821, 0, 591, 0,
	811, 812, 817, 311, 1046, 614, 685, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 813, 810, 814, 820, 808, 818, 805,
	816, 0, 513, 447, 0, 540, 318, 364, 351, 393,
	435, 547, 0, 0, 425, 595, 360, 449, 0, 339,
	482, 0, 571, 446, 0, 554, 574, 0, 466, 345,
	505, 561, 562, 802, 807, 0, 823, 0, 349, 350,
	471, 331, 479, 0, 0, 534, 492, 490, 0, 457,
	514, 0, 0, 0, 379, 0, 374, 470, 610, 337,
	589, 508, 475, 429, 537, 566, 376, 361, 362, 405,
	507, 395, 347, 600, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 396, 1048, 0, 608, 1051, 1039, 1031,
	1032, 1033, 1034, 1035, 1036, 0, 1053, 1054, 1055, 1056,
	1057, 601, 1045, 1047, 1030, 1037, 1038, 1040, 0, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 307,
	0, 308, 309, 310, 312, 313, 314, 801, 315, 316,
	317, 320, 321, 322, 324, 684, 325, 326, 327, 328,
	329, 330, 0, 803, 332, 333, 334, 335, 336, 338,
	340, 341, 342, 343, 344, 346, 348, 0, 0, 0,
	806, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 363, 365, 366, 367, 368, 369, 370,
	373, 0, 375, 377, 0, 378, 381, 0, 382, 383,
	384, 385, 386, 387, 388, 389, 0, 390, 0, 391,
	392, 394, 0, 397, 398, 399, 400, 401, 0, 402,
	0, 0, 403, 404, 406, 407, 408, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 0,
	422, 423, 424, 426, 0, 427, 428, 431, 432, 433,
	434, 0, 436, 0, 0, 437, 438, 439, 0, 0,
	440, 441, 442, 443, 444, 445, 448, 0, 450, 451,
	452, 453, 454, 455, 456, 686, 458, 459, 460, 461,
	462, 463, 464, 2854, 0, 465, 467, 468, 0, 0,
	0, 819, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 493, 494, 495, 0, 496, 497, 498, 499, 0,
	500, 501, 502, 503, 504, 506, 509, 510, 511, 512,
	0, 515, 516, 517, 518, 519, 520, 521, 523, 524,
	525, 527, 528, 529, 687, 530, 531, 532, 533, 0,
	535, 536, 688, 538, 539, 541, 542, 543, 544, 545,
	546, 697, 0, 548, 1021, 549, 550, 551, 552, 553,
	0, 555, 556, 557, 558, 559, 560, 563, 564, 565,
	567, 568, 0, 569, 570, 0, 572, 573, 822, 575,
	576, 577, 578, 579, 0, 698, 580, 0, 581, 0,
	582, 583, 584, 585, 586, 587, 588, 590, 0, 0,
	592, 593, 594, 596, 597, 598, 599, 602, 603, 604,
	605, 606, 0, 607, 609, 611, 689, 0, 0, 1049,
	0, 0, 0, 0, 0, 0, 612, 613, 0, 480,
	474, 430, 472, 473, 477, 478, 481, 306, 0, 323,
	804, 0, 372, 409, 0, 0, 0, 469, 0, 522,
	526, 0, 0, 0, 0, 0, 0, 380, 0, 809,
	0, 815, 0, 821, 0, 591, 0, 811, 812, 817,
	311, 1046, 614, 685, 0, 0, 0, 476, 0, 0,
	0, 0, 0, 0, 0, 319, 0, 0, 0, 0,
	813, 810, 814, 820, 808, 818, 805, 816, 0, 513,
	447, 0, 540, 318, 364, 351, 393, 435, 547, 0,
	0, 425, 595, 360, 449, 0, 339, 482, 0, 571,
	446, 0, 554, 574, 0, 466, 345, 505, 561, 562,
	802, 807, 0, 823, 0, 349, 350, 471, 331, 479,
	0, 0, 534, 492, 490, 0, 457, 514, 0, 0,
	0, 379, 0, 374, 470, 610, 337, 589, 508, 475,
	429, 537, 566, 376, 361, 362, 405, 507, 395, 347,
	600, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	396, 1048, 0, 608, 1051, 1039, 1031, 1032, 1033, 1034,
	1035, 1036, 0, 1053, 1054, 1055, 1056, 1057, 601, 1045,
	1047, 1030, 1037, 1038, 1040, 0, 296, 297, 298, 299,
	300, 301, 302, 303, 304, 305, 307, 0, 308, 309,
	310, 312, 313, 314, 801, 315, 316, 317, 320, 321,
	322, 324, 684, 325, 326, 327, 328, 329, 330, 0,
	803, 332, 333, 334, 335, 336, 338, 340, 341, 342,
	343, 344, 346, 348, 0, 0, 0, 806, 0, 0,
	0, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	363, 365, 366, 367, 368, 369, 370, 373, 0, 375,
	377, 0, 378, 381, 0, 382, 383, 384, 385, 386,
	387, 388, 389, 0, 390, 0, 391, 392, 394, 0,
	397, 398, 399, 400, 401, 0, 402, 0, 0, 403,
	404, 406, 407, 408, 410, 411, 412, 413, 414, 415,
	416, 417, 418, 419, 420, 421, 0, 422, 423, 424,
	426, 0, 427, 428, 431, 432, 433, 434, 0, 436,
	0, 0, 437, 438, 439, 0, 0, 440, 441, 442,
	443, 444, 445, 448, 0, 450, 451, 452, 453, 454,
	455, 456, 686, 458, 459, 460, 461, 462, 463, 464,
	0, 0, 465, 467, 468, 0, 0, 0, 819, 483,
	484, 485, 486, 487, 488, 489, 491, 0, 493, 494,
	495, 0, 496, 497, 498, 499, 0, 500, 501, 502,
	503, 504, 506, 509, 510, 511, 512, 0, 515, 516,
	517, 518, 519, 520, 521, 523, 524, 525, 527, 528,
	529, 687, 530, 531, 532, 533, 0, 535, 536, 688,
	538, 539, 541, 542, 543, 544, 545, 546, 697, 0,
	548, 1021, 549, 550, 551, 552, 553, 0, 555, 556,
	557, 558, 559, 560, 563, 564, 565, 567, 568, 0,
	569, 570, 0, 572, 573, 822, 575, 576, 577, 578,
	579, 0, 698, 580, 0, 581, 0, 582, 583, 584,
	585, 586, 587, 588, 590, 0, 0, 592, 593, 594,
	596, 597, 598, 599, 602, 603, 604, 605, 606, 0,
	607, 609, 611, 689, 0, 0, 1049, 0, 0, 0,
	0, 0, 0, 612, 613, 0, 480, 474, 430, 472,
	473, 477, 478, 481, 306, 0, 323, 804, 0, 372,
	409, 0, 0, 0, 469, 0, 522, 526, 0, 0,
	0, 0, 0, 0, 380, 0, 809, 0, 815, 0,
	821, 0, 591, 0, 811, 812, 817, 311, 1046, 614,
	685, 0, 0, 0, 476, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 0, 0, 813, 810, 814,
	820, 808, 818, 805, 816, 0, 513, 447, 0, 540,
	318, 364, 351, 393, 435, 547, 0, 0, 425, 595,
	360, 449, 0, 339, 482, 0, 571, 446, 0, 554,
	574, 0, 466, 345, 505, 561, 562, 802, 807, 0,
	823, 0, 349, 350, 471, 331, 479, 0, 0, 534,
	492, 490, 0, 457, 514, 0, 0, 0, 379, 0,
	374, 470, 610, 337, 589, 508, 475, 429, 537, 566,
	376, 361, 362, 405, 507, 395, 347, 600, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 396, 1048, 0,
	608, 1051, 1039, 1031, 1032, 1033, 1034, 1035, 1036, 0,
	1053, 1054, 1055, 1056, 1057, 601, 1045, 1047, 1030, 1037,
	1038, 1040, 0, 296, 297, 298, 299, 300, 301, 302,
	303, 304, 305, 307, 0, 308, 309, 310, 312, 313,
	314, 801, 315, 316, 317, 320, 321, 322, 324, 684,
	325, 326, 327, 328, 329, 330, 0, 803, 332, 333,
	334, 335, 336, 338, 340, 341, 342, 343, 344, 346,
	348, 0, 0, 0, 806, 0, 0, 0, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 363, 365, 366,
	367, 368, 369, 370, 373, 0, 375, 377, 0, 378,
	381, 0, 382, 383, 384, 385, 386, 387, 388, 389,
	0, 390, 0, 391, 392, 394, 0, 397, 398, 399,
	400, 401, 0, 402, 0, 0, 403, 404, 406, 407,
	408, 410, 411, 412, 413, 414, 415, 416, 417, 418,
	419, 420, 421, 0, 422, 423, 424, 426, 0, 427,
	428, 431, 432, 433, 434, 0, 436, 0, 0, 437,
	438, 439, 0, 0, 440, 441, 442, 443, 444, 445,
	448, 0, 450, 451, 452, 453, 454, 455, 456, 686,
	458, 459, 460, 461, 462, 463, 464, 0, 0, 465,
	467, 468, 0, 0, 0, 819, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 493, 494, 495, 0, 496,
	497, 498, 499, 0, 500, 501, 502, 503, 504, 506,
	509, 510, 511, 512, 0, 515, 516, 517, 518, 519,
	520, 521, 523, 524, 525, 527, 528, 529, 687, 530,
	531, 532, 533, 0, 535, 536, 688, 538, 539, 541,
	542, 543, 544, 545, 546, 697, 0, 548, 2789, 549,
	550, 551, 552, 553, 0, 555, 556, 557, 558, 559,
	560, 563, 564, 565, 567, 568, 0, 569, 570, 0,
	572, 573, 822, 575, 576, 577, 578, 579, 0, 698,
	580, 0, 581, 0, 582, 583, 584, 585, 586, 587,
	588, 590, 0, 0, 592, 593, 594, 596, 597, 598,
	599, 602, 603, 604, 605, 606, 0, 607, 609, 611,
	689, 0, 0, 1049, 0, 0, 0, 0, 0, 0,
	612, 613, 0, 480, 474, 430, 472, 473, 477, 478,
	481, 306, 0, 323, 804, 0, 372, 1059, 0, 0,
	0, 469, 0, 522, 526, 0, 0, 0, 0, 0,
	0, 380, 0, 809, 0, 815, 0, 821, 0, 591,
	0, 811, 812, 817, 311, 1046, 614, 685, 0, 0,
	0, 476, 0, 0, 0, 0, 0, 0, 0, 319,
	0, 0, 0, 0, 813, 810, 814, 820, 808, 818,
	805, 816, 0, 513, 447, 0, 540, 318, 364, 351,
	393, 435, 547, 0, 0, 425, 595, 360, 449, 0,
	339, 482, 0, 571, 446, 0, 554, 574, 0, 466,
	345, 505, 561, 562, 802, 807, 0, 823, 0, 349,
	350, 471, 331, 479, 0, 0, 534, 492, 490, 0,
	457, 514, 0, 0, 0, 379, 0, 374, 470, 610,
	337, 589, 508, 475, 429, 537, 566, 376, 361, 362,
	405, 507, 395, 347, 600, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 396, 1048, 0, 608, 1051, 1039,
	1031, 1032, 1033, 1034, 1035, 1036, 0, 1053, 1054, 1055,
	1056, 1057, 601, 1045, 1047, 1030, 1037, 1038, 1040, 0,
	296, 297, 298, 299, 300, 301, 302, 303, 304, 305,
	307, 0, 308, 309, 310, 312, 313, 314, 801, 315,
	316, 317, 320, 321, 322, 324, 684, 325, 326, 327,
	328, 329, 330, 0, 803, 332, 333, 334, 335, 336,
	338, 340, 341, 342, 343, 344, 346, 348, 0, 0,
	0, 806, 0, 0, 0, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 363, 365, 366, 367, 368, 369,
	370, 373, 0, 375, 377, 0, 378, 381, 0, 382,
	383, 384, 385, 386, 387, 388, 389, 0, 390, 0,
	391, 392, 394, 0, 397, 398, 399, 400, 401, 0,
	402, 0, 0, 403, 404, 406, 407, 408, 410, 411,
	412, 413, 414, 415, 416, 417, 418, 419, 420, 421,
	0, 422, 423, 424, 426, 0, 427, 428, 431, 432,
	433, 434, 0, 436, 0, 0, 437, 438, 439, 0,
	0, 440, 441, 442, 443, 444, 445, 448, 0, 450,
	451, 452, 453, 454, 455, 456, 686, 458, 459, 460,
	461, 462, 463, 464, 0, 0, 465, 467, 468, 0,
	0, 0, 819, 483, 484, 485, 486, 487, 488, 489,
	491, 0, 493, 494, 495, 0, 496, 497, 498, 499,
	0, 500, 501, 502, 503, 504, 506, 509, 510, 511,
	512, 0, 515, 516, 517, 518, 519, 520, 521, 523,
	524, 525, 527, 528, 529, 687, 530, 531, 532, 533,
	0, 535, 536, 688, 538, 539, 541, 542, 543, 544,
	545, 546, 697, 0, 548, 1021, 549, 550, 551, 552,
	553, 0, 555, 556, 557, 558, 559, 560, 563, 564,
	565, 567, 568, 0, 569, 570, 0, 572, 573, 822,
	575, 576, 577, 578, 579, 0, 698, 580, 0, 581,
	0, 582, 583, 584, 585, 586, 587, 588, 590, 0,
	0, 592, 593, 594, 596, 597, 598, 599, 602, 603,
	604, 605, 606, 0, 607, 609, 611, 689, 0, 0,
	1049, 0, 0, 0, 0, 0, 0, 612, 613, 0,
	480, 474, 430, 472, 473, 477, 478, 481, 306, 0,
	323, 804, 0, 372, 1018, 0, 0, 0, 469, 0,
	522, 526, 0, 0, 0, 0, 0, 0, 380, 0,
	809, 0, 815, 0, 821, 0, 591, 0, 811, 812,
	817, 311, 1046, 614, 685, 0, 0, 0, 476, 0,
	0, 0, 0, 0, 0, 0, 319, 0, 0, 0,
	0, 813, 810, 814, 820, 808, 818, 805, 816, 0,
	513, 447, 0, 540, 318, 364, 351, 393, 435, 547,
	0, 0, 425, 595, 360, 449, 0, 339, 482, 0,
	571, 446, 0, 554, 574, 0, 466, 345, 505, 561,
	562, 802, 807, 0, 823, 0, 349, 350, 471, 331,
	479, 0, 0, 534, 492, 490, 0, 457, 514, 0,
	0, 0, 379, 0, 374, 470, 610, 337, 589, 508,
	475, 429, 537, 566, 376, 361, 362, 405, 507, 395,
	347, 600, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 396, 1048, 0, 608, 1051, 1039, 1031, 1032, 1033,
	1034, 1035, 1036, 0, 1053, 1054, 1055, 1056, 1057, 601,
	1045, 1047, 1030, 1037, 1038, 1040, 0, 296, 297, 298,
	299, 300, 301, 302, 303, 304, 305, 307, 0, 308,
	309, 310, 312, 313, 314, 801, 315, 316, 317, 320,
	321, 322, 324, 684, 325, 326, 327, 328, 329, 330,
	0, 803, 332, 333, 334, 335, 336, 338, 340, 341,
	342, 343, 344, 346, 348, 0, 0, 0, 806, 0,
	0, 0, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 363, 365, 366, 367, 368, 369, 370, 373, 0,
	375, 377, 0, 378, 381, 0, 382, 383, 384, 385,
	386, 387, 388, 389, 0, 390, 0, 391, 392, 394,
	0, 397, 398, 399, 400, 401, 0, 402, 0, 0,
	403, 404, 406, 407, 408, 410, 411, 412, 413, 414,
	415, 416, 417, 418, 419, 420, 421, 0, 422, 423,
	424, 426, 0, 427, 428, 431, 432, 433, 434, 0,
	436, 0, 0, 437, 438, 439, 0, 0, 440, 441,
	442, 443, 444, 445, 448, 0, 450, 451, 452, 453,
	454, 455, 456, 686, 458, 459, 460, 461, 462, 463,
	464, 0, 0, 465, 467, 468, 0, 0, 0, 819,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 493,
	494, 495, 0, 496, 497, 498, 499, 0, 500, 501,
	502, 503, 504, 506, 509, 510, 511, 512, 0, 515,
	516, 517, 518, 519, 520, 521, 523, 524, 525, 527,
	528, 529, 687, 530, 531, 532, 533, 0, 535, 536,
	688, 538, 539, 541, 542, 543, 544, 545, 546, 697,
	0, 548, 1021, 549, 550, 551, 552, 553, 0, 555,
	556, 557, 558, 559, 560, 563, 564, 565, 567, 568,
	0, 569, 570, 0, 572, 573, 822, 575, 576, 577,
	578, 579, 0, 698, 580, 0, 581, 0, 582, 583,
	584, 585, 586, 587, 588, 590, 0, 0, 592, 593,
	594, 596, 597, 598, 599, 602, 603, 604, 605, 606,
	0, 607, 609, 611, 689, 0, 0, 1049, 0, 0,
	0, 0, 0, 0, 612, 613, 0, 480, 474, 430,
	472, 473, 477, 478, 481, 306, 0, 323, 804, 0,
	372, 409, 0, 0, 0, 469, 0, 522, 526, 0,
	0, 0, 0, 0, 0, 380, 0, 809, 0, 815,
	0, 821, 0, 591, 0, 811, 812, 817, 311, 1046,
	614, 685, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 813, 810,
	814, 820, 808, 818, 805, 816, 0, 513, 447, 0,
	540, 318, 364, 351, 393, 435, 547, 0, 0, 425,
	595, 360, 449, 0, 339, 482, 0, 571, 446, 0,
	554, 574, 0, 466, 345, 505, 561, 562, 802, 807,
	0, 823, 0, 349, 350, 471, 331, 479, 0, 0,
	534, 492, 490, 0, 457, 514, 0, 0, 0, 379,
	0, 374, 470, 610, 337, 589, 508, 475, 429, 537,
	566, 376, 361, 362, 405, 507, 395, 347, 600, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 396, 1048,
	0, 608, 1051, 1039, 1031, 1032, 1033, 1034, 1035, 1036,
	0, 1053, 1054, 1055, 1056, 1057, 601, 1045, 1047, 1030,
	1037, 1038, 1040, 0, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 307, 0, 308, 309, 310, 312,
	313, 314, 801, 315, 316, 317, 320, 321, 322, 324,
	684, 325, 326, 327, 328, 329, 330, 0, 803, 332,
	333, 334, 335, 336, 338, 340, 341, 342, 343, 344,
	346, 348, 0, 0, 0, 806, 0, 0, 0, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 363, 365,
	366, 367, 368, 369, 370, 373, 0, 375, 377, 0,
	378, 381, 0, 382, 383, 384, 385, 386, 387, 388,
	389, 0, 390, 0, 391, 392, 394, 0, 397, 398,
	399, 400, 401, 0, 402, 0, 0, 403, 404, 406,
	407, 408, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 0, 422, 423, 424, 426, 0,
	427, 428, 431, 432, 433, 434, 0, 436, 0, 0,
	437, 438, 439, 0, 0, 440, 441, 442, 443, 444,
	445, 448, 0, 450, 451, 452, 453, 454, 455, 456,
	686, 458, 459, 460, 461, 462, 463, 464, 0, 0,
	465, 467, 468, 0, 0, 0, 819, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 493, 494, 495, 0,
	496, 497, 498, 499, 0, 500, 501, 502, 503, 504,
	506, 509, 510, 511, 512, 0, 515, 516, 517, 518,
	519, 520, 521, 523, 524, 525, 527, 528, 529, 687,
	530, 531, 532, 533, 0, 535, 536, 688, 538, 539,
	541, 542, 543, 544, 545, 546, 697, 0, 548, 0,
	549, 550, 551, 552, 553, 0, 555, 556, 557, 558,
	559, 560, 563, 564, 565, 567, 568, 0, 569, 570,
	0, 572, 573, 822, 575, 576, 577, 578, 579, 0,
	698, 580, 0, 581, 0, 582, 583, 584, 585, 586,
	587, 588, 590, 0, 0, 592, 593, 594, 596, 597,
	598, 599, 602, 603, 604, 605, 606, 0, 607, 609,
	611, 689, 0, 0, 1049, 0, 0, 0, 0, 0,
	0, 612, 613, 0, 480, 474, 430, 472, 473, 477,
	478, 481, 306, 0, 323, 804, 0, 372, 409, 0,
	0, 0, 469, 0, 522, 526, 0, 0, 0, 0,
	0, 0, 380, 0, 809, 0, 815, 0, 821, 0,
	591, 0, 811, 812, 817, 311, 0, 614, 685, 0,
	0, 0, 476, 0, 0, 0, 0, 0, 0, 0,
	319, 0, 0, 0, 0, 813, 810, 814, 820, 808,
	818, 805, 816, 0, 513, 447, 0, 540, 318, 364,
	351, 393, 435, 547, 0, 0, 425, 595, 360, 449,
	0, 339, 482, 0, 571, 446, 0, 554, 574, 0,
	466, 345, 505, 561, 562, 802, 807, 0, 823, 0,
	349, 350, 471, 331, 479, 0, 0, 534, 492, 490,
	0, 457, 514, 0, 0, 0, 379, 0, 374, 470,
	610, 337, 589, 508, 475, 429, 537, 566, 376, 361,
	362, 405, 507, 395, 347, 600, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 396, 0, 0, 608, 0,
	0, 0, 0, 0, 0, 0, 371, 0, 0, 0,
	0, 0, 0, 601, 0, 0, 0, 0, 0, 0,
	0, 296, 297, 298, 299, 300, 301, 302, 303, 304,
	305, 307, 0, 308, 309, 310, 312, 313, 314, 801,
	315, 316, 317, 320, 321, 322, 324, 684, 325, 326,
	327, 328, 329, 330, 0, 803, 332, 333, 334, 335,
	336, 338, 340, 341, 342, 343, 344, 346, 348, 0,
	0, 0, 806, 0, 0, 0, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 363, 365, 366, 367, 368,
	369, 370, 373, 0, 375, 377, 0, 378, 381, 0,
	382, 383, 384, 385, 386, 387, 388, 389, 0, 390,
	0, 391, 392, 394, 0, 397, 398, 399, 400, 401,
	0, 402, 0, 0, 403, 404, 406, 407, 408, 410,
	411, 412, 413, 414, 415, 416, 417, 418, 419, 420,
	421, 0, 422, 423, 424, 426, 0, 427, 428, 431,
	432, 433, 434, 0, 436, 0, 0, 437, 438, 439,
	0, 0, 440, 441, 442, 443, 444, 445, 448, 0,
	450, 451, 452, 453, 454, 455, 456, 686, 458, 459,
	460, 461, 462, 463, 464, 0, 0, 465, 467, 468,
	0, 0, 0, 819, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 493, 494, 495, 0, 496, 497, 498,
	499, 0, 500, 501, 502, 503, 504, 506, 509, 510,
	511, 512, 0, 515, 516, 517, 518, 519, 520, 521,
	523, 524, 525, 527, 528, 529, 687, 530, 531, 532,
	533, 0, 535, 536, 688, 538, 539, 541, 542, 543,
	544, 545, 546, 697, 0, 548, 0, 549, 550, 551,
	552, 553, 0, 555, 556, 557, 558, 559, 560, 563,
	564, 565, 567, 568, 0, 569, 570, 0, 572, 573,
	822, 575, 576, 577, 578, 579, 0, 698, 580, 0,
	581, 0, 582, 583, 584, 585, 586, 587, 588, 590,
	0, 0, 592, 593, 594, 596, 597, 598, 599, 602,
	603, 604, 605, 606, 0, 607, 609, 611, 689, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 612, 613,
	0, 480, 474, 430, 472, 473, 477, 478, 481,
}

var yyPact = [...]int32{
	11438, -1000, 347, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1597, 1597, -1000, -1000, 3638, 1329, 7802, 19642,
	17245, 3730, 105353, 85658, 1597, 1740, 1695, 1689, 86668, 104848,
	104343, 72023, 71518, 2109, 999, 1292, 85153, 1284, 1265, -1000,
	2285, 86668, 54388, 54388, 84648, 86668, 84143, 86668, 56922, 86668,
	4678, 3983, 3983, 3915, 2563, 2883, 67023, -1000, 1681, 1016,
	1124, -1000, -1000, 4460, 76063, 344, 103838, 86668, 1238, 11438,
	4523, -1000, -1000, 2704, 3919, 76063, 4050, 3918, 1124, 86668,
	-1000, 1994, 2697, 2291, 4454, 103333, 86668, 52860, 86668, 3696,
	102828, 102323, 3157, 101818, 63488, 3725, 1719, 86668, 86668, 2473,
	101313, 86668, 86668, 1261, 2974, 60962, 60962, -1000, -1000, 1839,
	1833, -1000, -1000, -1000, 75558, 83638, 100808, 100303, 1621, 3156,
	2517, 67023, 86668, 86668, 86668, 86668, 67023, 60962, 2632, 52331,
	99798, 67023, 86668, 67023, 86668, 86668, 86668, 86668, 86668, 1714,
	60457, 59952, 86668, 99293, 3694, 86668, 86668, 2296, 3351, -1000,
	98788, 98283, 97778, 110746, 110259, 4597, 62983, 62478, 61973, -1000,
	-1000, -1000, 1620, 3144, -1000, -1000, -1000, 3687, 2468, 1709,
	-1000, 2617, -1000, -1000, -1000, -1000, -1000, -1000, 1615, -1000,
	88688, 83133, 2512, -1000, -1000, 846, 4244, 4678, 4678, 4445,
	65508, 1474, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4240,
	2640, 3037, 453, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	4523, 2704, 4523, 4678, 4085, 4678, -1000, -1000, -1000, -1000,
	86668, -1000, 4678, 1260, -1000, 3913, 533, 1001, -1000, 883,
	883, 883, 3597, 883, 3912, 1473, 571, 901, -1000, 3516,
	1548, 49205, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1640,
	3534, 53883, -1000, 86668, 53883, -1000, 453, 4239, 2639, 3036,
	-1000, 53883, 86668, 2622, 53883, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 86668, 4043, 4043, 4043, 4043, 893,
	893, 4043, 4043, 1233, 1147, -1000, -1000, -1000, 4647, 4647,
	-1000, -1000, -1000, -1000, 956, -1000, 82628, -1000, -1000, -1000,
	-1000, 342, -1000, -1000, -1000, 76063, -1000, 76063, 17859, 3435,
	2883, -1000, -1000, 65508, -1000, 1259, -1000, 382, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3084, 4457, 4457, 4457, 3972,
	1681, -1000, -1000, 843, 835, 1016, 30245, 30245, -1000, 3911,
	-1000, 353, -1000, 382, 66518, 1258, 338, 86668, -1000, 1064,
	338, 35387, -1000, -1000, 2598, -1000, 400, -1000, 2561, 1983,
	-1000, 2926, 86668, 3668, 97273, 76063, 76063, 827, -1000, -1000,
	-1000, -1000, -1000, 883, 96768, 86668, 1605, 96263, 4596, 67023,
	67023, 86668, 1704, 67023, 3434, 2322, -1000, 2112, 3033, -1000,
	4517, 4605, 388, 1096, 86668, 86668, -1000, 405, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1027, 2323, 1314, 4513, 1852, 4511, 3340, 95758,
	1685, 4508, 3499, 1852, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1602, 86668, 2381, 3910, 86668, 1064, 4507,
	-1000, 3467, 2985, 109285, 86668, 1852, 1852, -1000, -1000, -1000,
	-1000, 8386, 4585, 4431, 3032, 4583, 4429, 18641, 4581, 11498,
	4580, 82123, 81618, 3320, 86668, 81113, 2569, 1254, 2572, 2556,
	3740, 2184, 10552, 1254, -1000, 382, 2269, 3270, 86668, 86668,
	86668, 2641, 1253, 3907, 4578, 10091, 2749, 6961, 2292, 1664,
	2718, 3906, 3905, 86668, 2245, 1834, 4428, 2216, 3431, 1834,
	4428, 2510, 2548, 4577, 2164, 2670, 3266, -1000, 902, 4576,
	465, -1000, 4575, 486, -1000, 3904, 4574, 482, 4573, -1000,
	3361, 111233, -1000, -1000, -1000, -1000, -1000, 1365, -1000, 385,
	-1000, -1000, -1000, -1000, -1000, 1144, 3106, 1143, 1143, 1143,
	-1000, -1000, -1000, -1000, -1000, 522, 592, -1000, -1000, -1000,
	-1000, 3093, 1248, 3093, 3093, -1000, 3100, 3093, 482, 4572,
	95253, 3487, 167, 4570, -1000, 167, 4569, 167, 4568, -1000,
	3317, -1000, 2039, -1000, -1000, -1000, 4596, -1000, 3022, -1000,
	4629, 63993, 400, 4678, 3511, 47663, 47149, 86668, 709, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2941, -1000, 2554,
	-1000, -1000, -1000, -1000, -1000, -1000, 94748, -1000, -1000, -1000,
	4635, 109285, 73033, 60962, 74043, 1241, 86668, -1000, 86668, -1000,
	-1000, -1000, -1000, 73033, 3428, 60962, 3426, 1548, -1000, 318,
	-1000, 48177, 1238, -1000, -1000, -1000, -1000, 3516, -1000, 317,
	-1000, 341, -1000, 1064, 310, -1000, 2545, -1000, 307, 3774,
	3903, 382, 4596, 4596, 4596, -1000, -1000, -1000, -1000, 302,
	2562, -1000, 86668, -1000, 86668, 86668, 86668, 4043, 4043, 86668,
	86668, 86668, 4043, 4043, 86668, 4043, 4043, -1000, -1000, -1000,
	35387, -1000, -1000, -1000, 4678, 493, -1000, 206, 86668, 86668,
	86668, 109285, 109285, 67023, 67023, 51802, 86668, 86668, 67023, 67023,
	3423, 3343, 1235, -1000, -1000, -1000, -1000, -1000, -1000, 3899,
	65508, -1000, -1000, 27671, 382, -1000, 24567, 35387, 3087, 3414,
	3422, 1954, 3976, 3039, -1000, 34873, 2703, 39499, 3506, 1016,
	-1000, -1000, 1016, 1016, 35387, -1000, 3084, -1000, -1000, 3917,
	228, -1000, 23730, -1000, -1000, 35387, 35387, 35387, 35387, 35387,
	2385, 4481, -1000, -1000, -1000, -1000, 29216, -1000, -1000, 382,
	1127, 867, -1000, -1000, 1223, -1000, 1056, 1219, 382, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1364, 4678, 1363,
	35387, 1565, 2821, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1216, 1215, 3421, -1000, 1204, 1203, 1201, 1200, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1199, 1197, 1195, 1194, 1193,
	1192, 1191, 1190, 1189, 1185, 1184, 1181, 1177, 1176, 1173,
	1172, 1171, 1170, 1169, 1168, 1165, 1066, 1164, 1163, 1162,
	1159, 1155, 1152, 1145, -1000, 3093, -1000, 3093, 3093, 1143,
	1143, 1144, -1000, -1000, 3100, 3093, 1143, -1000, -1000, 592,
	522, -1000, -1000, -1000, -1000, -1000, 464, 1142, -1000, 382,
	-1000, 86668, 35387, 86668, 338, 4634, 86668, 299, 16380, -1000,
	3007, 2704, -1000, 2010, -1000, -1000, -1000, 1263, 4633, 64498,
	-1000, 86668, 3795, 3793, 4226, 4026, 947, 4506, 4632, 883,
	86668, 3082, 4505, 94243, -1000, 1141, 1141, 2786, 86668, 1135,
	109285, 2581, 1976, -1000, 60962, 4594, 4566, 109285, -1000, 367,
	25594, -1000, 25594, 4447, 3791, 50215, -1000, 694, 86668, 86668,
	86668, 86668, -1000, 86668, 4564, -1000, -1000, -1000, 4562, 86668,
	950, 4504, 1623, 4678, 4560, 58942, 4500, -1000, 93738, 3897,
	2494, 60962, 86668, 1694, 3894, 4558, -1000, 72528, 1096, 4678,
	4631, 3420, -1000, -1000, 243, -1000, 1872, 1969, -1000, 2363,
	2361, 68521, 1785, 1784, 3531, 3893, 2047, 1808, 86668, 2830,
	86668, 3505, 4224, 943, 2731, 2158, -1000, 1134, 76063, 1818,
	243, -1000, 4223, 2937, 2359, 2830, 1546, 86668, 1807, 243,
	4220, 3082, 1968, -1000, 2983, 111233, 902, -1000, 3971, -1000,
	902, 902, 3970, 2438, 1852, 1852, -1000, 86668, 243, 1884,
	1873, 86668, 11150, 4557, 4427, 10484, 4554, 86668, -1000, 862,
	-1000, 4219, 2133, 4218, -1000, 70525, 4214, 2125, 4212, 1628,
	4211, 2114, 4210, 4207, 4206, 2418, -1000, 93233, 2997, -1000,
	2418, -1000, -1000, 1332, -1000, 3981, -1000, -1000, -1000, -1000,
	3572, -1000, 3605, 2446, 1876, 3527, 4205, 4204, 2481, 92728,
	4203, 2934, -1000, -1000, 3888, 4403, -1000, -1000, -1000, -1000,
	1998, 2711, -1000, 2530, 902, 902, 86668, -1000, 86668, -1000,
	-1000, 382, 4199, 3609, -1000, -1000, 2288, 3789, 3787, 952,
	4192, -1000, 108798, 86668, 86668, 4187, 2481, 92223, 4186, 2932,
	4175, 59447, 73538, 73538, 4174, 4173, 2481, 91718, 4170, 2929,
	4167, 4165, 4160, 1451, -1000, 4158, 4407, 4157, 969, 4678,
	2306, 2300, 2297, -1000, -1000, 1096, 4156, 86668, 86668, 2388,
	4152, -1000, 2504, 2947, 2504, 4150, 58942, -1000, 2504, 2504,
	4148, 943, 943, 4147, 4144, 1879, 4141, 86668, 86668, 86668,
	86668, 86668, 3199, 3095, 3081, 920, 336, 4139, -1000, 3053,
	-1000, 18555, 2092, 2525, 2379, -1000, 4672, 4658, -1000, 86668,
	86668, -1000, -1000, -1000, 86668, 86668, -1000, 86668, 86668, 109285,
	-1000, 109285, 1299, 1306, 3358, -1000, 4647, 4137, -1000, 4133,
	4130, 4129, -1000, 1133, -1000, 403, 35387, -1000, 4647, -1000,
	-1000, -1000, -1000, 4647, -1000, 4249, 4246, 4647, -1000, 1130,
	-1000, 4647, -1000, -1000, 3093, 3093, -1000, -1000, 109285, 465,
	4551, 58942, 4550, 60962, 60962, 60962, 60962, -1000, -1000, -1000,
	-1000, -1000, 86668, 4629, 1736, -1000, -1000, -1000, -1000, 332,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 332, -1000,
	-1000, -1000, -1000, -1000, 1338, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 86668, -1000, 1124, 292, -1000, 4126, 319, 86668,
	86668, 2063, 67023, 67023, 67023, 86668, 86668, 86668, 3296, 86668,
	86668, 86668, 86668, 2299, -1000, 423, -1000, 86668, 289, -1000,
	287, 4049, 72023, 181, 74043, -1000, 1548, 53883, -1000, -1000,
	-1000, 3490, 86668, 86668, -1000, 86668, -1000, 86668, -1000, 86668,
	86668, 86668, 86668, 86668, -1000, 3310, -1000, -1000, -1000, -1000,
	2012, -1000, -1000, -1000, -1000, 86668, 86668, -1000, -1000, -1000,
	86668, 86668, -1000, 86668, 86668, 286, -1000, 76063, 2400, 2382,
	4469, 2720, 2719, 4350, 4348, 4331, 4330, 4329, 4328, 4326,
	4317, 86668, 86668, 3887, 3886, 4314, 4310, 109285, 902, 109285,
	13124, -1000, -1000, 822, 3, 35387, 35387, 35387, -1000, 16380,
	4652, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 16053,
	-78, -1000, -1000, -1000, -1000, -1000, 1958, 3988, -1000, 1541,
	-1000, 1903, -1000, -1000, 331, 16380, -1000, 41041, -1000, -1000,
	-1000, 2434, 16380, -1000, 38985, 38985, 1973, 86668, 2652, -1000,
	2652, 182, -1000, 7163, 3087, 3414, 4048, 80608, 30245, 109285,
	86668, 4232, 35387, 35387, 35387, 35387, 35387, 35387, 35387, 35387,
	35387, 35387, 35387, 35387, 35387, 35387, 35387, 35387, 4327, 35387,
	4124, 4630, -1000, -1000, 4121, 1089, 1909, 25594, -1000, -1000,
	1115, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 433, 433, 508, 10032, 10032,
	869, 1127, 4449, 382, 16133, 330, 396, 382, -1000, -1000,
	-1000, 30760, 35387, 50215, 34358, 382, -1000, 27671, -1000, 1932,
	4647, 4356, 16380, 2821, 3938, 1443, 1126, 35387, 35387, 1122,
	4647, 4647, 4647, 4647, 35387, 2298, 35387, 35387, 40527, 35387,
	35387, 29731, 35387, 35387, 35387, 35387, 35387, 2431, 35387, 2941,
	42069, 2423, 35387, 33844, 28701, 35387, 35387, 35387, 820, 35387,
	35387, 35387, 2941, 4048, 35387, 818, 285, -1000, 3781, 282,
	35387, -1000, 86668, 4232, 35387, 35387, 35387, 35387, 4124, 4630,
	4121, 1089, 1115, -1000, -1000, -1000, 1925, 2289, -1000, 3885,
	-1000, 3606, 57427, 3721, 86668, 535, -1000, 1323, 86668, -1000,
	-1000, 4002, 44619, 44619, 3547, 3547, -1000, -1000, 69026, 86668,
	3504, 3747, 4548, 2886, 4459, 1110, -1000, 3082, 2722, 4547,
	3884, 4499, -1000, 16322, 70036, 11386, 2116, -1000, -1000, 3497,
	3069, 1096, -1000, 68033, 2577, 86668, 86668, 1596, -1000, -1000,
	-1000, -1000, -1000, -1000, 2140, 86668, -1000, 25594, -1000, 268,
	-1000, 1322, 3411, 86668, -1000, 86668, 1105, 1096, 1096, 1096,
	1096, 1096, -1000, 86668, 2069, 86668, 1780, 69026, 3493, 4545,
	2806, -1000, -1000, 86668, 1990, -1000, -1000, 4544, 3254, 4627,
	4494, 883, 25594, 4688, -1000, 4626, 2923, 46134, 86668, 1767,
	546, -1000, 76063, 4426, 393, 883, -1000, 353, -1000, 2295,
	109285, 4678, 3254, 3254, 7128, 86668, 86668, 86668, -1000, 1760,
	-1000, -1000, 2459, 86668, -1000, 86668, 25594, 86668, 86668, -1000,
	4487, 91213, -1000, 109285, 86668, -1000, 1095, 3790, 1535, 1518,
	3753, 80103, 86668, 90708, 90203, 86668, 86668, 75053, 1787, 1747,
	86668, 2541, 74548, 86668, 2521, -1000, 86668, 2157, -1000, -1000,
	60962, -1000, 3650, 2519, 27160, 8183, 86668, 86668, 3883, 86668,
	10317, 86668, 86668, -1000, 86668, -1000, -1000, -1000, -1000, -1000,
	902, -1000, -1000, -1000, 86668, 86668, 902, 902, 16967, 86668,
	86668, 86668, 9281, 243, 1880, 1871, 2927, 86668, 1805, 243,
	1878, 1869, 76063, 1803, 86668, 86668, 60962, 267, -1000, -1000,
	109772, 106363, -1000, 2391, -1000, -1000, -1000, 385, -1000, 111233,
	86668, 86668, 60962, -1000, 86668, 86668, 60962, 86668, 60962, -1000,
	-1000, -1000, 86668, 1625, -1000, 48691, -1000, -1000, 86668, 86668,
	-1000, 4399, 89698, 35387, 4398, 86668, -1000, 86668, -1000, 1094,
	4397, 86668, 60962, 86668, -1000, -1000, -1000, 89193, -1000, 79598,
	3025, 1890, 60962, 3882, 4391, 3881, 2674, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 60962, 60962, 4118, 4117, 86668, 86668,
	86668, 25594, 60962, 266, 329, 2571, 3879, 86668, -1000, 79598,
	60962, 3878, 86668, -1000, 328, 328, 328, 60962, 86668, -1000,
	79598, 60962, 3871, 86668, 60962, 86668, -1000, 60962, -1000, -1000,
	86668, -1000, 86668, -1000, 4464, 86668, 86668, -1000, 60962, 2214,
	2274, 4115, -1000, 4114, 2370, -1000, 60962, 2386, -1000, 88688,
	86668, -1000, 60962, 1989, 2386, -1000, -1000, 86668, -1000, -1000,
	60962, 86668, 891, 86668, 60962, 3666, 2506, 914, 2499, 2607,
	86668, 86668, 4678, 4591, 86668, 4678, 88183, 25594, 86668, 3258,
	60962, 86668, 4111, 86668, 86668, 67023, 1090, 109285, 67023, 51273,
	67023, 67023, 3407, 109285, 86668, -1000, -1000, 72023, 71013, 2090,
	2478, 4110, -1000, -1000, 465, -1000, 486, -1000, 4469, 3863,
	-1000, 482, 1611, 4647, 1299, 1298, 811, 2435, 2247, 2006,
	2003, 4647, -1000, 265, 810, 800, 4237, 4236, 799, 35387,
	797, -1000, -1000, 482, -1000, 86668, 1974, 3406, -1000, 167,
	167, 167, 4463, 2704, 48177, 1932, 4647, -1000, -1000, 109285,
	-1000, 58437, 86668, 319, 319, 3313, 86668, 327, -1000, 327,
	327, 96, 101, 96, 902, 321, 384, -1000, 96, 96,
	101, 4425, 4422, 4416, 4413, 4412, -1000, 25594, 3967, 264,
	86668, -1000, -1000, 58437, 3862, 320, 4469, 515, -1000, -1000,
	86668, -1000, -1000, -1000, -1000, 3774, -1000, -1000, -1000, -1000,
	-1000, 3404, 2736, 2734, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2452, 2057, 2051, 2467, -1000,
	-1000, -1000, -1000, 4372, 4372, 4372, 4372, 4372, 4372, 4372,
	4372, 3773, 3772, 87678, 86668, 4372, 4372, 2573, 4308, 4625,
	86668, 86668, 86668, 109285, 109285, 67023, 67023, 3267, 67023, 67023,
	-1000, 796, 33330, -1000, 1437, -43, -43, 35387, 35387, -1000,
	35387, -1000, 3642, -1000, 35387, 2434, 4017, -1000, 4675, 4675,
	1075, -1000, 29216, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2491, 319, 35387, 463, 1354, -1000, -1000, -1000,
	-1000, 3994, 44619, -1000, 3983, 3983, 1829, 1802, 3983, 86668,
	-1000, -1000, -1000, -1000, 4125, -1000, 256, 256, 354, 354,
	354, -1000, 559, 559, 559, 559, 559, 559, 508, 10032,
	6292, 2085, 35387, 35387, 4108, 4107, 1089, 1929, 35387, -1000,
	3427, -1000, -1000, -1000, 4042, -1000, -1000, 2404, 3297, -1000,
	-1000, -1000, -1000, 3219, 40527, 40527, -1000, -1000, -1000, 29216,
	1088, -1000, -1000, -1000, -1000, 50215, -1000, 1086, 35387, -1000,
	-1000, 4441, -1000, -1000, 35387, 82, 20, -1000, -1000, 250,
	792, 242, -1000, 3, -1000, 790, 3120, -1000, 35387, 1443,
	1081, -1000, 66013, 4004, 3235, 3167, 614, 1440, 15742, 35387,
	778, 776, 772, 769, 15479, 764, 4040, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1018, 760, 758, 15584, 313,
	756, 1799, -1000, 40527, 40527, 40527, 1075, 745, 740, 7991,
	15375, 32816, 32816, 32816, 735, 14791, 35387, 134, 6915, 239,
	238, 234, 232, 25594, 231, -1000, 14720, 35387, 3437, 25594,
	6540, 224, 398, 734, -1000, 109285, 614, 392, 1367, 732,
	-1000, 382, 3297, 14601, 3613, -1000, 312, 306, 305, 35387,
	3994, 220, -1000, -1000, 1074, -1000, 3701, -1000, 16380, -1000,
	-1000, -1000, 3617, 3614, 3165, -1000, -1000, 219, -1000, -1000,
	-1000, -1000, 4002, 64498, 35387, 216, -1000, 382, 3617, 38471,
	102, 3814, 77073, 77073, 46639, -1000, 43594, 78588, 77073, 77073,
	1344, 4039, 1070, 1068, 382, -1000, -1000, -1000, 1066, 3786,
	3656, -1000, 3656, 726, 295, 109285, -1000, -1000, -1000, -1000,
	86668, 955, 86668, 3293, 86668, 86668, 86668, 4623, 943, 86668,
	86668, 76063, 4543, 106850, 2384, 11386, -1000, 4678, 65508, 3403,
	-1000, -1000, 214, -1000, -1000, 1801, 2384, 3875, -1000, -1000,
	-1000, 3491, -1000, -1000, 2116, -1000, 724, -46, 3963, 213,
	-1000, -1000, -1000, 1310, 86668, 2744, 883, 86668, 4594, 2025,
	2100, 3018, -1000, 2393, -1000, -1000, 25594, 26105, 1691, -1000,
	710, 294, -1000, 109285, 4678, -1000, -1000, -1000, -1000, -1000,
	1174, -1000, 86668, 65508, 65508, -1000, 1852, 1447, 1780, -1000,
	86668, 1810, 86668, 705, 86668, 86668, 2961, 1685, 86668, 3402,
	-1000, -1000, 4647, 60962, 60962, 2527, 4406, 2340, 2336, -1000,
	-1000, 3978, 1637, 60962, 1124, 4541, 3747, 3115, 4459, 3401,
	4695, 2739, -1000, -1000, 492, -1000, 382, -1000, 35387, 1064,
	4464, -1000, 73538, 883, 2087, 393, 3996, 3996, 86668, 702,
	4104, -1000, -1000, 4103, 4102, -1000, -1000, 79093, -1000, -1000,
	212, -1000, 410, 3477, 3073, 4539, -1000, 4485, 1832, 1643,
	35387, 1062, -1000, 2693, 982, 1059, 1057, 86668, 2004, 3665,
	-1000, 4538, 4469, 4537, 4469, -1000, -1000, -1000, -1000, -1000,
	86668, 86668, 86668, 86668, -1000, 1997, -1000, -1000, -1000, -1000,
	1996, -1000, 2511, -1000, -1000, -1000, -1000, -1000, 2691, 1942,
	209, -1000, -1000, 25594, 25594, 25594, 4678, -1000, 243, -1000,
	1844, 1796, 2650, -1000, 2870, -1000, 243, 4101, 2646, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 243, 4100, 3082, 1718,
	-1000, 4099, -1000, 243, 1877, 1196, 86668, 86668, 86668, 3861,
	8946, 86668, 86668, 86668, 86668, 7708, 4098, 1451, 1780, 4097,
	-1000, -1000, -1000, -1000, 106363, 109772, -1000, 109772, -1000, 385,
	-1000, 368, 385, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 4096, -1000, 4469,
	4535, 16380, -1000, -1000, 1875, 35387, -1000, -1000, -1000, -1000,
	-1000, -1000, 2869, 2660, 4390, -1000, -1000, -1000, 167, 86668,
	60962, 2522, 2696, -1000, 199, -1000, 1316, -1000, -1000, 108311,
	109285, 4094, 3764, 60962, 86668, -1000, -1000, -1000, 2868, -1000,
	-1000, -1000, -1000, -1000, 2866, -1000, -1000, -1000, -1000, -1000,
	518, -1000, 518, 518, -1000, 4089, 4087, 2921, 86668, 60962,
	-1000, -1000, -1000, -1000, -1000, -1000, 86668, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1856, 4086, 2083, 4084, 2082,
	4083, -1000, 4082, 2073, 4079, 2068, 4078, 2488, 2486, 2471,
	-1000, 4076, 4075, 4678, 4474, 4469, -1000, 4534, 4469, 198,
	-1000, -1000, 3048, 3045, -1000, 3659, -1000, 65508, -1000, -1000,
	-1000, 109285, -1000, -1000, -1000, 86668, 86668, -1000, -1000, 109285,
	-1000, -1000, 3860, 3858, 1471, 86668, 60962, 60962, 60962, -1000,
	-1000, -1000, 86668, -1000, -1000, 1279, 1272, 4647, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 699, -1000, -1000, 1346,
	-1000, -1000, 1346, 197, -1000, -1000, 465, 86668, 58942, -1000,
	2593, 400, -1000, -1000, 697, -1000, 490, -1000, -1000, 60962,
	-1000, 86668, 96, 67023, 291, -1000, 86668, 86668, 2065, 2046,
	2041, 2040, 2032, 201, -1000, 1938, 60962, -1000, -1000, 176,
	73033, -1000, 60962, -1000, -1000, 1124, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2890, 2888, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 86668, 86668, 4305, 86668, 4304,
	-1000, -1000, 86668, 4372, 109285, 4303, 4300, 4298, 4297, 4296,
	4295, 4292, 902, 4290, 4289, -1000, 35387, -1000, 692, 691,
	35387, 689, 16380, 16380, 1270, 16380, -1000, -1000, 4016, -1000,
	1750, -1000, -1000, 32302, 288, -1000, -1000, 1354, -1000, 1038,
	-1000, 3658, 3924, 35387, 102, 86668, 86668, 3983, 3983, 3983,
	3983, 86668, -1000, 35387, 35387, 1914, 802, 35387, 40527, 40527,
	-1000, 35387, 748, -1000, -1000, -1000, -1000, 4038, -1000, -1000,
	2403, 3297, 35387, -1000, -1000, 1648, 1647, -1000, -1000, -1000,
	-1000, 1828, 1699, 196, -1000, 29216, 666, 31788, 270, -1000,
	382, 14554, -1000, -1000, 1296, -1000, -1000, -1000, 665, 4678,
	2901, -1000, 35387, 14484, -1000, 1437, -1000, -1000, 105858, 35387,
	3297, 3857, 3856, 35387, 35387, 3234, 3962, -1000, -1000, 3136,
	14190, -1000, -1000, -1000, -1000, 109285, -1000, 35387, -1000, 2705,
	-1000, -1000, 35387, -1000, 109285, 40527, 40527, 40527, 40527, 40527,
	40527, 40527, 40527, 40527, 40527, 40527, 40527, 40527, 3149, 40527,
	1056, 421, 421, 421, -1000, -1000, 31274, 35387, 35387, 109285,
	661, 654, 650, -1000, 35387, 134, 35387, -1000, -1000, -1000,
	-1000, 195, -1000, 35387, 25594, 7938, 647, 43089, 194, 1624,
	-1000, 3297, 35387, -1000, 1367, 3613, 35387, 3855, 3854, 3613,
	-1000, 641, -1000, 640, 35387, 35387, 35387, 13954, 3924, -1000,
	1124, -1000, -1000, 30245, 993, 1124, 1413, 86668, 382, 3617,
	-1000, 16380, 1313, 86668, -1000, 16380, 3489, 44619, 3809, 3808,
	44619, 3848, 3800, 3800, 3800, -1000, 1759, -1000, 86668, 1055,
	-1000, 77073, 78588, 77073, 77073, 61467, 625, 3814, -1000, -1000,
	65003, 1054, -1000, -1000, -1000, 3462, 1047, 42579, 35387, 382,
	35387, 1852, -1000, -1000, -1000, 3770, 2669, 69026, -1000, 2347,
	69531, 955, 3811, 943, 1477, -1000, 932, 4622, 956, 1124,
	-1000, 192, 3082, 3753, 86668, 11386, 1045, -1000, -1000, -1000,
	3056, 35387, -1000, -1000, 263, -1000, 260, 1680, -1000, 106363,
	35387, 35387, -1000, 86668, 2116, 86668, 3868, -1000, -1000, 3959,
	106363, 106363, -1000, 4692, 26105, 1044, 86668, 4459, 1041, 87173,
	60962, 4594, -1000, 86668, -1000, -1000, 86668, 3152, -1000, 4481,
	1497, 1039, 40527, 86668, 3184, -1000, 2834, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1038, 4672, 4658, 109285, -1000,
	86668, 4452, 622, 244, -1000, -1000, 86668, -1000, -1000, -1000,
	-1000, -1000, 1036, -1000, -1000, 388, -1000, -1000, -1000, 2669,
	955, 788, 3303, 1623, 1447, 58942, -1000, 167, 167, 60962,
	60962, -1000, -1000, 4678, 4678, 893, 4678, 167, 4463, 86668,
	4459, 2417, 86668, -1000, 4072, 3699, -1000, 86668, 44619, 46134,
	13889, 3847, -1000, -1000, 3996, 78083, 3996, -1000, 1034, -1000,
	518, 3295, 4678, 86668, 86668, -1000, -1000, -1000, -1000, 25594,
	26105, 25594, -1000, 3716, -1000, -1000, -1000, 86668, 4533, 2988,
	-1000, 77578, -1000, 3753, 13834, 86668, 2810, 86668, 86668, -1000,
	86668, 45124, -1000, -1000, 2993, 6332, 943, 2778, 2508, 1665,
	-1000, -1000, 1852, 1840, 2810, 86668, -1000, 86668, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1913, 86668, -1000, -1000, 27160,
	-1000, -1000, -1000, -1000, -1000, 86668, 86668, 86668, 86668, 1797,
	3958, 86668, 86668, 1794, 3956, 86668, 86668, 86668, 86668, 86668,
	86668, -1000, 4070, -1000, 2862, 243, 1854, 1167, 2644, -1000,
	4069, -1000, 243, 1836, 1033, 86668, -1000, 60962, -1000, -1000,
	-1000, 1659, 359, 86668, -1000, 86668, -1000, 13748, 2810, 86668,
	-1000, 2647, -1000, -1000, 4068, 2031, 4067, 4066, 2227, 3008,
	2029, 4065, 25594, -1000, 26641, 613, 611, 610, 86668, 4471,
	1020, 167, 2204, 86668, 86668, -1000, -1000, -1000, 86668, 86668,
	3842, -1000, -1000, 1451, 891, 86668, 86668, 86668, 86668, 60962,
	86668, 86668, 86668, 86668, 60962, 3400, 3468, 3482, 86668, 4678,
	3046, 4531, -1000, 86668, -1000, -1000, 1658, 2959, -1000, 4619,
	3769, 3768, 2570, 2215, 2215, 3398, 96, 167, 167, -1000,
	4469, -1000, -1000, 871, -1000, -1000, -1000, -1000, -1000, -1000,
	1965, -1000, 2957, 4678, 2757, 58437, 2761, -1000, 96, -1000,
	902, 384, -1000, 86668, 86668, 86668, 86668, 86668, -1000, 25594,
	-1000, -1000, -1000, -1000, -1000, 4469, 4036, 181, -1000, -1000,
	-1000, 4279, 4278, 4372, 4276, 4372, 4275, -1000, 606, 4401,
	4401, 4401, 4401, 4401, 4401, 4401, 4273, 4401, 4401, 1437,
	-1000, -1000, -1000, -1000, -1000, 1748, -1000, 179, -1000, 35387,
	-1000, 50215, -1000, -1000, 3922, 3954, 16380, -1000, -1000, 86668,
	86668, 86668, 86668, -1000, 413, 1552, 35387, 35387, 670, 1295,
	483, 1552, 35387, 35387, -1000, -1000, 7625, 2600, 2574, 35387,
	35387, -1000, 13656, -1000, 178, -1000, 35387, -1000, -1000, 4678,
	-1000, -1000, 16380, 35387, 604, 2354, -1000, 13289, 3613, 4389,
	4386, -1000, -1000, 3613, 35387, 3190, -1000, 602, 16380, 597,
	12757, -1000, 168, 168, 349, 349, 349, -1000, 477, 477,
	477, 477, 477, 477, 421, 4034, 3129, -1000, 1900, 12707,
	12662, 12599, 595, -1000, -1000, -1000, 134, 12504, -1000, 37957,
	-1000, -1000, 594, 1576, 1575, -1000, 3946, 42069, 3177, -1000,
	35387, 240, 37443, 3613, -1000, -1000, 593, -1000, 4384, 4382,
	588, -1000, -1000, 12089, 12089, 12089, 111233, 3922, 582, 228,
	3565, 45124, 3520, -1000, -1000, 3606, -1000, -1000, 35387, -1000,
	86668, 3814, 44619, 44619, 3763, 3794, 44619, -1000, -1000, -1000,
	-1000, -1000, 67023, 1017, 86668, -1000, -1000, -1000, -1000, 77073,
	1015, 86668, 86668, -1000, 53378, 3437, 1011, 227, 11839, 1002,
	1852, 3154, -1000, 2347, 1009, -1000, 2745, 3747, -1000, 3953,
	162, -1000, -1000, -1000, 4475, 3477, 1753, 2991, -1000, -1000,
	69026, 86668, 3488, 2885, 4463, 4461, 4459, -1000, 1008, 3839,
	2384, 111720, -1000, 16380, 4678, 3392, 109285, -1000, 16380, 16380,
	2281, -1000, 78, 86668, 106363, -1000, 161, -1000, 1310, -1000,
	4001, 2665, 4618, 86668, 930, 4465, -1000, 2081, -1000, -1000,
	-1000, 4464, 4464, 35387, 1900, 883, 4617, -1000, 4446, -1000,
	-1000, 3767, -1000, -1000, 86668, -1000, 4678, -1000, 2069, 25594,
	367, 1962, 3477, 69026, 3484, 86668, 2788, -1000, 1950, 167,
	167, -1000, -1000, -1000, -1000, -1000, 4615, 1753, 67023, -1000,
	-1000, 3121, -1000, 4411, 3764, 60962, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 102, -1000, -1000, 46134, -1000, -1000, -1000,
	-1000, 35387, -1000, 1766, 2800, 4033, -1000, -1000, -1000, -1000,
	1297, 4015, -1000, 86668, 1447, -1000, 76568, -1000, -1000, -1000,
	159, -1000, 1901, -1000, 2754, 2678, -1000, 158, 2810, 157,
	147, -1000, 4473, 870, 4450, 35387, 4378, 4589, 4587, -1000,
	-1000, 3184, 4375, 4614, 891, -1000, -1000, -1000, -1000, 3184,
	-1000, 3612, 109285, 902, 891, 4469, 4469, -1000, -1000, -1000,
	-1000, 4064, 4063, -1000, 86668, 60962, -1000, -1000, 86668, 60962,
	-1000, -1000, -1000, -1000, 4062, -1000, 86668, 86668, 86668, 86668,
	86668, 1791, 3951, 86668, 86668, 86668, 86668, -1000, -1000, -1000,
	1656, -1000, 4469, -1000, -1000, -1000, 86668, 86668, 60962, 86668,
	2, -1000, 4647, 4647, 109285, 217, -1000, 4647, 4647, 86668,
	60962, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1408, 35387, 4061, -1000, -1000, -1000,
	-1000, 2858, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 86668, 86668, 86668, 86668, 4529, 4469,
	-1000, 4678, 4678, -1000, 4469, 109285, 109285, 86668, 86668, 86668,
	4058, -1000, -1000, -1000, -1000, -1000, -1000, 4027, 72023, -1000,
	-1000, 86668, -1000, -1000, -1000, -1000, 1469, -1000, 96, 96,
	96, 96, 96, -1000, -1000, 58437, 4469, 4372, 4372, -1000,
	4372, -1000, 4372, 4258, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 4401, -1000, -1000, 577, -1000, -1000, 11740,
	576, 1572, 35387, 4457, -1000, -1000, -1000, -1000, 1552, 1552,
	35387, 35387, 35387, 1552, 7625, -1000, -1000, 1552, 1552, -1000,
	-1000, 11560, -1000, 16380, -1000, 1437, 3950, -1000, 573, -1000,
	-1000, 572, 182, 86668, -1000, -1000, 35387, 40527, 4022, -1000,
	35387, 35387, 35387, -1000, -1000, 146, 145, 1006, -1000, -1000,
	-1000, -1000, 3177, 3946, -1000, -1000, 11211, 560, 1860, 16380,
	3162, 558, -1000, -1000, -1000, -1000, 3613, 35387, 3464, 3613,
	2466, 1572, 3684, 3573, 142, -1000, 86668, 3161, 16380, -1000,
	-1000, 3763, -1000, 1005, 35387, 44619, -1000, 1004, 86668, 141,
	-1000, 86668, 139, 129, 109285, 124, -1000, 4613, 3476, 40013,
	35387, 3663, -1000, 4522, 4522, 3667, -1000, 3652, 25594, 1002,
	4678, 3747, 86668, 3316, 3316, 3293, 86668, -1000, 69531, 2393,
	1448, 2347, -1000, 86668, 2694, 557, 955, 86668, 86668, -1000,
	-1000, 1827, 4612, 45124, 76063, -1000, 123, -1000, 109772, -1000,
	6895, -1000, 1653, -1000, 3390, 1646, 4012, 122, -1000, 554,
	1886, 1883, 1752, 86668, 1124, 116, 69026, 4528, 4594, -1000,
	4374, 3749, 3749, 11143, 2469, 787, -1000, 86668, -1000, -1000,
	109, -1000, 86668, 1949, 552, 86668, 1447, 2956, 86668, 1124,
	-1000, 998, 2417, 86668, 989, 4471, 167, 444, 11050, 67023,
	4608, 4608, 86668, 26105, 988, 980, 979, -1000, -1000, -1000,
	-1000, 2810, 2708, -1000, -1000, -1000, -1000, -1000, 2708, 2278,
	2708, 45124, 50744, -1000, 86668, 86668, -1000, 10225, -1000, 4527,
	4526, -1000, -1000, 974, -1000, 4611, 4452, -1000, -1000, -1000,
	-1000, 86668, 86668, 2400, 391, 2400, 386, 86668, -1000, -1000,
	-1000, 4056, -1000, 86668, 60962, -1000, -1000, 4055, -1000, -1000,
	-1000, 2810, -1000, -1000, -1000, -1000, 2227, 50215, 49710, -1000,
	3008, 973, 972, -1000, -1000, 966, 10128, 86668, 86668, 401,
	412, 1841, 96, 3382, -1000, -1000, -1000, -1000, 4452, 545,
	-1000, -1000, -1000, 58437, 58437, 3837, -1000, -1000, 176, -1000,
	-1000, -1000, -1000, -1000, 4372, -1000, -1000, -1000, -1000, -1000,
	86668, 16380, 36415, 1552, 1552, 1552, -1000, 2567, 35387, -1000,
	-1000, -1000, 10082, 1725, 40527, 16380, 16380, 16380, -1000, 35387,
	-1000, 35387, -1000, -1000, -1000, 1693, -1000, -1000, 3269, 156,
	-1000, 4610, 536, 3836, 35387, -1000, -1000, -1000, -1000, -1000,
	-1000, 3333, 3464, 528, -1000, 2695, -1000, 3676, 3700, 3655,
	-1000, 3994, 45124, -1000, 1124, -1000, 86668, 16380, -1000, 35387,
	108, -1000, 104, -1000, -1000, 1344, 53378, -1000, 962, 86668,
	98, -1000, 457, 40527, 9091, -1000, -1000, 3582, 35387, 3578,
	-1000, 3577, -1000, -1000, -1000, 4605, 4605, -1000, -1000, 4605,
	4605, 3321, 4678, 97, -1000, 44104, 3994, -1000, 3293, 90,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3811, 958, -1000, -1000, 3747, -1000, -1000, 3448,
	3447, 2669, 2347, 955, 956, 1460, 1403, 1390, 1124, 86,
	3753, 111720, 11386, -1000, -1000, 346, -1000, -1000, 109285, 4355,
	2907, 1646, -1000, 2463, -1000, -1000, -1000, 86668, -1000, -1000,
	4467, 4466, -1000, -1000, 86668, 1630, -1000, 4461, 4459, 86668,
	-1000, 2685, -1000, 2413, 3823, 2231, 923, 35387, 2827, -1000,
	25594, 1447, 86668, 2669, 955, -1000, 3298, 1447, 4463, 503,
	67023, -1000, 4686, -1000, 44619, -1000, 4608, -1000, 2840, -1000,
	-1000, -1000, 67528, 35387, 35387, 2393, 4464, 953, 4464, 86668,
	4464, -1000, -1000, 946, 3651, 943, -1000, 4450, -1000, -1000,
	35387, 2715, 3752, -1000, -1000, -1000, 1790, -1000, 1783, -1000,
	86668, 2400, 372, 86668, -1000, 774, 3368, -1000, 109285, -1000,
	109285, 109285, 35387, -1000, -1000, -1000, 86668, -1000, -1000, 86668,
	86668, 86668, 86668, 4469, -1000, 490, 438, 2215, 4469, -1000,
	155, -1000, 4606, 154, -1000, 16380, -1000, -1000, -1000, -1000,
	28186, 941, 939, 624, 498, 36929, 36929, 36929, 134, 35387,
	1725, 85, 83, -1000, 3160, 3216, 3341, 3271, 35387, 25594,
	-1000, 3355, 16380, -1000, -1000, 496, 3831, -1000, -1000, -1000,
	86668, 3674, 3673, 64498, -1000, -1000, -1000, 79, 69, -1000,
	-1000, -1000, -1000, 86668, 68, -1000, 107824, 40013, 131, 25594,
	1900, 3439, 86668, 3571, 16380, 3576, 3945, 4678, 4678, 4678,
	4678, 56417, 4371, 55912, -1000, -1000, 25594, -1000, -1000, -1000,
	-1000, -1000, 57932, -1000, 3811, -1000, 1753, 45629, 2393, 3293,
	-1000, -1000, 2347, 3747, 3477, 4463, -1000, 1459, 1457, 4461,
	2706, 936, -1000, 2384, -1000, -1000, 2884, 935, 1863, -1000,
	-1000, 4605, -1000, -1000, 2872, -1000, 2796, 2795, -1000, -1000,
	-1000, 4603, 813, 1782, -1000, 2672, -1000, 3829, 3828, 3645,
	-1000, -1000, -1000, -1000, 3082, 9948, 4602, 86668, -1000, -1000,
	1447, 1923, 3477, 86668, -1000, -1000, -1000, 924, 65, -1000,
	102, -1000, -1000, -1000, 61, -1000, 4647, 51, 48, 3749,
	86668, 3749, 883, 3749, 50215, 1354, 3651, -1000, 9896, 923,
	-1000, 35387, 86668, 86668, -1000, -1000, 1774, -1000, 2284, 1842,
	2284, 44, 40, 36, 9365, 101, 101, 1841, -1000, 96,
	-1000, -1000, -1000, 4011, -1000, 86668, 921, 36415, -1000, 35387,
	35387, 919, -1000, 2895, -1000, 41555, 2433, 2156, 7723, 2895,
	2895, 16380, -1000, -1000, -1000, 3464, 3226, 3164, -1000, 3294,
	-1000, 3276, 3291, 3274, -1000, -1000, -1000, -1000, 3349, 361,
	3943, 3942, 371, 4600, 2188, 34, -1000, 86668, 3538, 3457,
	-1000, 42069, -1000, 3473, -1000, -1000, -1000, 3557, 3654, -1000,
	-1000, 3555, 1061, 3584, -1000, -1000, -1000, -1000, 78, -1000,
	55407, 78, -1000, -1000, 30, -1000, -1000, 1753, -1000, 28,
	-1000, 870, 4450, 35387, 3811, 3747, 3293, 2347, -1000, -1000,
	-1000, -1000, 4481, 915, 45124, -1000, 2417, 35387, -1000, -1000,
	-1000, 86668, 2906, 67023, 67023, 1124, 69026, 86668, -1000, -1000,
	3621, -1000, 3627, 2756, 2756, 1937, 1817, 2227, -1000, -1000,
	86668, 1891, 1447, 494, -1000, 4683, -1000, 67528, -1000, -1000,
	4019, -1000, 26, -1000, 2469, 3994, 472, -1000, 1354, -1000,
	-1000, 16380, 2400, 2400, 86668, -1000, -1000, -1000, 3941, -1000,
	67023, -1000, -1000, -1000, 86668, 58437, -1000, -1000, -1000, 23,
	16, 36415, -1000, 2277, 4520, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 471, 3825, 3824, -1000, -1000, 3260, -1000, 3251,
	-1000, 3464, -1000, 86668, 86668, 86668, -1000, -1000, 86668, -1000,
	911, -1000, -1000, 3538, -1000, 40527, 40527, 4370, -1000, 40527,
	-1000, 3437, 909, -1000, 64498, -1000, -1000, 3606, 86668, 3712,
	907, -1000, -1000, 78, -1000, -1000, 57932, -1000, -1000, 45629,
	86668, 86668, 9179, 1753, 3293, 3811, 3747, 4459, 45124, 10,
	67023, 8829, -1000, -1000, 2151, 75, 54, 4461, -1000, -1000,
	3075, -1000, -1000, 4369, -1000, -1000, -1000, 2, 1447, 86668,
	-1000, -1000, -1000, -1000, 904, 2810, -1000, 2810, 3823, -1000,
	-1000, -1000, -1000, -1000, 2400, 86668, -1000, -1000, 438, -1000,
	-1000, -1, 2148, -1000, -1000, 1547, 35901, -1000, 3220, 3205,
	-1000, -1000, 3812, 3765, 357, 350, -1000, 35387, -1000, 1900,
	1900, -1000, 1900, 3472, 86163, -37, 3159, -5, -1000, 35387,
	-1000, -1000, -1000, -1000, 4450, -1000, 3811, 1753, 3293, 1753,
	-12, -1000, 2706, 887, -1000, 4355, 4005, 4007, -1000, -1000,
	883, 883, -1000, 1447, 35387, -1000, 2810, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3195, 3192, 3352, 54902, 86668, 86668,
	86668, 8581, 86668, -17, -1000, 107337, 3445, 3706, 3619, -25,
	86668, 1753, -1000, 3811, 3994, -1000, 45124, 4481, 25083, 2876,
	1882, 1864, -1000, -1000, -1000, -27, 2810, -1000, -1000, -1000,
	4443, 1051, -1000, -1000, -1000, -1000, -1000, -42, 3464, 86163,
	3452, 1846, 4682, -1000, -1000, -1000, 3606, -1000, -1000, -1000,
	1753, -1000, -1000, 4459, -63, -1000, -1000, -1000, -1000, -1000,
	2417, 4458, 4456, -1000, 54902, 35387, -1000, 455, -1000, -1000,
	3269, 3443, 3443, 4681, 3585, 3153, -1000, 1753, -1000, 25083,
	67023, 2785, 2781, 3744, -43, -1000, 3216, 3269, 3464, -1000,
	882, 86668, 3706, 3994, -1000, 866, 67023, 67023, 86668, 422,
	3464, 3216, -1000, 86163, 3471, -1000, -1000, 25083, -1000, -1000,
	-1000, 4678, -1000, 3464, -71, 615, -81, -1000, -1000, 86163,
	-1000, -83, -1000,
}

var yyPgo = [...]int16{
	0, 5183, 5182, 3301, 131, 0, 160, 8574, 5181, 80,
	283, 346, 5179, 440, 48, 1185, 128, 127, 434, 370,
	5178, 5177, 5175, 5173, 34, 5172, 360, 5023, 11235, 9605,
	144, 5171, 297, 5171, 5170, 364, 304, 293, 5169, 212,
	5168, 5166, 154, 199, 5165, 267, 5163, 419, 5162, 25,
	5161, 5160, 263, 147, 384, 407, 400, 409, 5159, 327,
	379, 328, 325, 5158, 12434, 388, 2488, 12, 5156, 5155,
	1752, 5154, 5153, 5152, 318, 5150, 274, 5149, 5148, 5147,
	5146, 16, 375, 5146, 5145, 316, 5144, 5143, 5142, 109,
	5137, 5133, 5132, 5131, 272, 340, 309, 5130, 294, 329,
	1711, 213, 12304, 14639, 5127, 367, 96, 5617, 181, 3728,
	5126, 17626, 5125, 5124, 16947, 16828, 16611, 5123, 15989, 15698,
	193, 235, 221, 332, 342, 387, 280, 410, 326, 378,
	24, 54, 369, 5122, 5121, 5120, 139, 5118, 5116, 59,
	56, 317, 5115, 5114, 83, 30, 58, 406, 382, 5112,
	5111, 412, 5110, 5109, 13857, 78, 200, 5108, 164, 5107,
	322, 320, 72, 53, 5106, 319, 271, 256, 44, 285,
	194, 50, 192, 324, 5105, 5104, 5103, 5102, 107, 257,
	98, 9674, 426, 405, 202, 183, 171, 169, 5098, 206,
	204, 5096, 5095, 5094, 5093, 5091, 5090, 5089, 5088, 5087,
	5084, 5082, 5081, 5079, 5078, 5077, 5076, 5075, 5074, 5073,
	5072, 36, 39, 5071, 5070, 253, 250, 261, 313, 5069,
	307, 140, 10, 40, 173, 138, 5067, 5066, 5064, 5063,
	27, 90, 31, 5061, 5060, 5059, 365, 5056, 411, 5055,
	5054, 351, 301, 5052, 5051, 3362, 511, 3372, 5049, 113,
	303, 5047, 5046, 5045, 142, 5040, 5039, 5036, 66, 5036,
	61, 74, 5035, 41, 166, 335, 276, 391, 38, 287,
	422, 262, 5034, 414, 377, 368, 104, 233, 7, 220,
	190, 273, 5033, 245, 5032, 5029, 5029, 408, 302, 258,
	248, 143, 135, 5028, 423, 5027, 398, 5026, 5024, 5021,
	5020, 311, 62, 75, 5018, 238, 5017, 103, 5016, 5015,
	106, 310, 21, 63, 5009, 42, 110, 45, 163, 5008,
	73, 306, 1, 22, 15, 5005, 485, 5004, 76, 5002,
	1631, 270, 5001, 308, 265, 5000, 153, 77, 13, 11,
	4998, 5, 3, 6, 14, 255, 4997, 65, 4995, 94,
	4994, 241, 156, 134, 4993, 117, 4991, 71, 47, 118,
	4990, 4988, 4986, 141, 26, 4985, 105, 4984, 185, 288,
	4979, 4977, 4975, 17, 46, 116, 70, 69, 51, 28,
	97, 86, 4974, 4972, 37, 115, 4971, 214, 23, 8,
	68, 291, 99, 4970, 33, 32, 18, 457, 197, 361,
	359, 4969, 284, 380, 383, 424, 3630, 155, 363, 52,
	219, 4967, 210, 4966, 29, 4965, 93, 60, 174, 81,
	64, 4963, 49, 209, 4962, 100, 438, 4957, 299, 85,
	19087, 4956, 158, 289, 428, 84, 4955, 225, 182, 4954,
	20, 333, 125, 418, 386, 4953, 345, 4953, 4952, 4951,
	177, 167, 126, 4948, 120, 4947, 4945, 4944, 4938, 397,
	4936, 4935, 4934, 4933, 4930, 4929, 4927, 4925, 4924, 4922,
	4919, 4918, 4917, 4914, 4912, 4911, 4903, 4902, 4901, 433,
	442, 4900, 354, 4899, 429, 336, 4898, 389, 4897, 145,
	4896, 385, 338, 4894, 4893, 4892, 330, 430, 403, 392,
	4887, 179, 401, 55, 4879, 79, 413, 6669, 195, 114,
	82, 4878, 4875, 196, 1776, 4874, 390, 4873, 425, 268,
	416, 161, 151, 4872, 4871, 4870, 4869, 4868, 4867, 4866,
	4865, 4864, 4861, 4860, 4859, 4858, 4848, 4847, 4846, 4845,
	4844, 4842, 4839, 4838, 4837, 4835, 4829, 4828, 4827, 4825,
	4823, 4822, 4821, 4818, 4816, 4815, 4814, 4813, 4812, 4810,
	4809, 4806, 4805, 4803, 4801, 4800, 4799, 4797, 4795, 4794,
	4793, 4791, 4789, 4788, 243, 236, 4786, 4785, 4784, 358,
	344, 278, 295, 415, 231, 237, 95, 4783, 4782, 122,
	4781, 4780, 4778, 402, 4777, 421, 4775, 4773, 4771, 4766,
	175, 119, 4765, 91, 159, 432, 43, 4764, 4763, 229,
	292, 112, 111, 4762, 4761, 4758, 4755, 4753, 208, 4752,
	4751, 239, 101, 4749, 264, 240, 420, 3140, 349, 417,
	4748, 393, 4747, 296, 404, 4746, 249, 260, 92, 355,
	4744, 102, 4743, 4742, 300, 487, 198, 343, 399, 4741,
	396, 4740, 4739, 4736, 67, 4735, 4733, 242, 298, 4732,
	4731, 4729, 4728, 4725, 4723, 2, 89, 19, 4, 4722,
	4721, 35, 4720, 4718, 275, 4716, 4713, 366, 88, 87,
	4710, 4709, 4707, 13960, 532, 4705, 4704, 228, 9, 4700,
	4700, 3579, 395, 4682, 57,
}

var yyR1 = [...]int16{
	0, 1, 2, 2, 3, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 19, 19, 395, 395, 429, 429, 429,
	33, 33, 34, 34, 35, 35, 36, 36, 49, 49,
	49, 5, 5, 5, 6, 6, 6, 6, 6, 8,
	8, 7, 13, 13, 14, 14, 430, 430, 32, 32,
	16, 16, 18, 18, 684, 684, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 15, 15, 17, 17, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 680, 680, 680, 680,
	680, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 100, 102, 101, 101, 101, 109,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 124, 124, 68, 68, 95, 95,
	99, 99, 98, 98, 98, 98, 96, 96, 69, 69,
	69, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 82, 82, 84, 84, 84, 84, 84, 85, 85,
	85, 86, 12, 12, 12, 12, 12, 12, 12, 12,
	87, 87, 88, 80, 89, 89, 217, 217, 90, 90,
	90, 91, 91, 91, 92, 92, 93, 93, 93, 93,
	302, 302, 302, 633, 633, 131, 131, 131, 131, 131,
	131, 131, 81, 81, 94, 94, 94, 71, 72, 72,
	75, 75, 74, 73, 73, 76, 76, 76, 79, 79,
	129, 129, 129, 77, 77, 78, 164, 164, 164, 157,
	157, 157, 157, 157, 157, 166, 166, 166, 166, 165,
	165, 165, 165, 165, 167, 167, 167, 167, 167, 128,
	128, 107, 107, 107, 107, 107, 107, 125, 125, 125,
	108, 108, 108, 108, 108, 108, 108, 108, 103, 103,
	103, 105, 106, 21, 121, 121, 122, 122, 110, 110,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 117, 117, 113, 113, 681, 681, 682, 682, 104,
	104, 104, 104, 104, 104, 114, 115, 118, 119, 116,
	116, 116, 116, 683, 126, 126, 126, 127, 127, 112,
	112, 154, 154, 156, 156, 158, 158, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 155,
	155, 130, 130, 135, 135, 132, 132, 161, 161, 160,
	160, 178, 178, 181, 181, 182, 182, 180, 180, 180,
	180, 180, 180, 180, 180, 147, 147, 148, 148, 149,
	149, 151, 152, 152, 152, 152, 150, 150, 153, 153,
	153, 183, 183, 183, 183, 183, 183, 183, 272, 272,
	271, 271, 274, 274, 274, 274, 275, 275, 276, 276,
	277, 277, 277, 277, 277, 277, 277, 277, 277, 277,
	277, 277, 432, 432, 433, 433, 433, 434, 434, 434,
	288, 288, 288, 288, 288, 288, 289, 289, 289, 289,
	290, 290, 291, 291, 292, 292, 292, 293, 293, 294,
	294, 296, 297, 297, 297, 298, 298, 298, 299, 299,
	299, 300, 300, 278, 278, 220, 220, 220, 241, 281,
	281, 280, 280, 280, 280, 283, 283, 283, 283, 283,
	282, 282, 284, 284, 285, 285, 286, 286, 287, 287,
	301, 301, 310, 310, 306, 306, 307, 308, 308, 309,
	309, 638, 304, 304, 303, 303, 305, 316, 316, 318,
	318, 317, 317, 317, 317, 319, 319, 320, 320, 311,
	311, 312, 312, 313, 313, 313, 314, 314, 315, 315,
	315, 315, 315, 321, 326, 325, 325, 337, 337, 327,
	327, 328, 329, 329, 332, 332, 331, 331, 333, 333,
	333, 334, 334, 334, 335, 335, 330, 330, 336, 336,
	339, 339, 340, 340, 340, 340, 340, 340, 340, 340,
	341, 341, 341, 341, 338, 338, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 343, 343, 343, 343, 343,
	344, 344, 345, 345, 346, 346, 322, 322, 323, 323,
	323, 323, 323, 323, 324, 324, 184, 431, 431, 210,
	210, 210, 210, 210, 232, 232, 211, 211, 215, 185,
	212, 212, 218, 218, 216, 213, 213, 186, 295, 295,
	187, 214, 214, 188, 188, 235, 235, 236, 236, 242,
	242, 242, 251, 251, 252, 252, 254, 254, 255, 255,
	253, 253, 253, 253, 253, 253, 253, 253, 253, 253,
	253, 253, 253, 253, 253, 256, 256, 261, 262, 262,
	262, 262, 262, 262, 257, 257, 263, 268, 268, 268,
	268, 264, 264, 264, 264, 42, 42, 406, 406, 406,
	406, 406, 406, 406, 406, 405, 405, 405, 404, 404,
	404, 404, 404, 267, 267, 595, 595, 266, 266, 685,
	685, 622, 622, 237, 237, 238, 238, 239, 239, 240,
	240, 224, 224, 224, 224, 224, 233, 233, 234, 234,
	225, 225, 227, 228, 229, 229, 229, 229, 229, 222,
	219, 219, 219, 226, 226, 226, 259, 259, 260, 260,
	230, 230, 230, 231, 231, 223, 223, 162, 162, 162,
	163, 163, 163, 221, 221, 189, 189, 189, 189, 189,
	189, 408, 408, 408, 408, 408, 408, 408, 408, 347,
	347, 348, 348, 351, 351, 351, 354, 362, 362, 362,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	410, 410, 411, 411, 412, 412, 413, 413, 349, 349,
	350, 350, 355, 355, 356, 356, 357, 357, 357, 357,
	358, 361, 361, 414, 414, 415, 415, 416, 10, 41,
	352, 366, 366, 367, 367, 367, 367, 370, 370, 370,
	370, 373, 373, 373, 418, 418, 421, 421, 423, 423,
	423, 423, 419, 419, 422, 422, 422, 422, 422, 422,
	422, 422, 422, 422, 422, 422, 422, 422, 422, 422,
	686, 686, 37, 37, 37, 417, 417, 420, 420, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 353, 353,
	369, 369, 369, 369, 369, 369, 369, 371, 371, 360,
	360, 359, 359, 375, 375, 374, 374, 374, 374, 379,
	379, 379, 379, 379, 376, 377, 378, 378, 378, 378,
	378, 380, 380, 381, 381, 382, 383, 383, 384, 384,
	384, 409, 409, 388, 388, 388, 388, 389, 389, 390,
	390, 391, 190, 190, 372, 372, 392, 392, 394, 394,
	393, 393, 396, 396, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 397, 397, 24, 24, 398,
	398, 11, 507, 507, 507, 507, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 400, 400, 400,
	401, 402, 402, 687, 687, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 453, 453, 453,
	627, 627, 627, 630, 630, 630, 630, 629, 629, 631,
	631, 454, 455, 455, 455, 455, 484, 484, 487, 488,
	488, 488, 490, 490, 490, 459, 459, 459, 459, 459,
	459, 459, 456, 456, 460, 460, 485, 485, 486, 486,
	491, 489, 489, 457, 457, 457, 457, 457, 458, 458,
	194, 194, 194, 194, 194, 492, 492, 195, 195, 195,
	493, 493, 494, 494, 495, 495, 196, 197, 197, 197,
	197, 197, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 47, 47, 48, 48, 442,
	97, 97, 97, 97, 441, 83, 83, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 364, 364, 365, 365, 365, 365, 365, 365,
	385, 386, 386, 387, 387, 387, 387, 448, 448, 448,
	448, 634, 634, 635, 635, 636, 636, 636, 637, 637,
	637, 637, 637, 639, 639, 639, 639, 639, 640, 120,
	120, 120, 641, 641, 642, 642, 644, 644, 644, 644,
	644, 653, 653, 643, 643, 654, 654, 654, 452, 672,
	672, 655, 655, 632, 632, 450, 450, 656, 656, 656,
	658, 658, 657, 657, 657, 657, 657, 663, 663, 664,
	664, 666, 661, 661, 662, 662, 669, 659, 659, 689,
	689, 660, 660, 667, 667, 688, 688, 665, 665, 665,
	668, 668, 668, 668, 670, 670, 451, 451, 451, 451,
	258, 258, 671, 671, 671, 671, 523, 523, 523, 523,
	524, 525, 525, 525, 525, 525, 525, 525, 526, 526,
	526, 526, 526, 526, 526, 526, 526, 526, 526, 526,
	526, 526, 526, 526, 530, 530, 574, 574, 690, 690,
	531, 531, 532, 532, 575, 575, 577, 577, 577, 577,
	533, 576, 576, 578, 534, 534, 534, 534, 534, 534,
	534, 534, 534, 534, 534, 534, 534, 555, 556, 556,
	581, 581, 581, 581, 580, 580, 579, 579, 586, 586,
	557, 557, 558, 558, 558, 582, 582, 583, 583, 584,
	584, 559, 559, 559, 559, 560, 560, 561, 562, 562,
	585, 585, 617, 617, 617, 617, 618, 618, 625, 619,
	620, 620, 621, 529, 529, 529, 529, 529, 572, 572,
	573, 573, 623, 623, 624, 624, 521, 521, 522, 436,
	436, 437, 435, 435, 435, 438, 438, 439, 439, 439,
	439, 628, 628, 628, 628, 628, 628, 628, 628, 628,
	628, 628, 626, 626, 626, 626, 270, 270, 273, 273,
	265, 265, 673, 673, 673, 673, 673, 673, 673, 675,
	675, 675, 269, 269, 9, 9, 9, 9, 677, 677,
	496, 496, 496, 674, 674, 674, 674, 674, 676, 676,
	676, 676, 497, 497, 407, 407, 407, 407, 407, 407,
	425, 425, 38, 38, 39, 40, 40, 43, 43, 43,
	43, 44, 44, 46, 46, 46, 46, 426, 427, 427,
	428, 428, 535, 535, 536, 590, 590, 590, 590, 587,
	587, 589, 588, 588, 537, 591, 591, 538, 538, 539,
	540, 592, 592, 596, 596, 597, 597, 597, 597, 597,
	598, 598, 599, 599, 600, 600, 601, 601, 541, 602,
	602, 542, 542, 543, 543, 604, 604, 609, 609, 609,
	544, 544, 544, 545, 545, 545, 545, 605, 605, 610,
	610, 610, 610, 610, 610, 610, 279, 279, 546, 547,
	547, 547, 547, 547, 547, 547, 547, 547, 548, 548,
	548, 603, 603, 603, 549, 613, 613, 606, 606, 611,
	611, 611, 611, 611, 593, 593, 678, 678, 678, 679,
	679, 550, 551, 551, 607, 607, 612, 612, 552, 553,
	608, 608, 608, 608, 554, 554, 594, 594, 614, 614,
	615, 615, 616, 616, 53, 53, 53, 52, 52, 168,
	168, 171, 171, 171, 171, 171, 174, 175, 176, 177,
	172, 172, 169, 170, 170, 173, 173, 136, 136, 137,
	137, 139, 141, 141, 141, 140, 142, 142, 138, 138,
	143, 143, 143, 143, 144, 144, 145, 145, 145, 145,
	145, 146, 146, 146, 146, 146, 55, 55, 55, 55,
	54, 54, 56, 56, 56, 56, 56, 56, 57, 57,
	58, 58, 59, 60, 60, 60, 61, 61, 62, 62,
	63, 63, 461, 461, 461, 461, 461, 461, 461, 461,
	461, 461, 461, 461, 462, 462, 691, 691, 691, 480,
	480, 480, 463, 469, 467, 464, 464, 465, 465, 465,
	465, 479, 479, 468, 466, 466, 466, 466, 466, 466,
	498, 498, 499, 499, 481, 481, 481, 481, 481, 481,
	482, 482, 482, 482, 482, 482, 482, 482, 482, 520,
	520, 470, 471, 471, 472, 472, 473, 473, 474, 500,
	500, 483, 483, 483, 512, 512, 512, 505, 505, 505,
	505, 505, 505, 501, 501, 501, 501, 501, 502, 502,
	506, 506, 506, 506, 506, 519, 519, 519, 519, 519,
	519, 519, 519, 519, 519, 519, 519, 519, 519, 519,
	519, 519, 519, 519, 519, 519, 503, 503, 508, 508,
	510, 510, 504, 504, 513, 511, 511, 511, 509, 509,
	50, 50, 45, 45, 51, 51, 133, 134, 134, 449,
	449, 449, 443, 443, 645, 645, 645, 645, 645, 645,
	645, 645, 645, 645, 645, 645, 645, 645, 645, 645,
	645, 647, 647, 646, 646, 646, 652, 652, 652, 652,
	652, 692, 692, 440, 440, 440, 440, 444, 444, 527,
	528, 445, 445, 446, 446, 446, 446, 447, 447, 447,
	447, 198, 243, 243, 243, 243, 243, 243, 244, 244,
	244, 199, 199, 247, 247, 247, 247, 247, 247, 247,
	247, 247, 247, 247, 247, 247, 247, 247, 247, 245,
	245, 246, 246, 200, 200, 201, 248, 248, 179, 179,
	179, 179, 179, 202, 202, 202, 249, 249, 250, 203,
	203, 203, 203, 204, 205, 205, 206, 20, 20, 207,
	208, 22, 22, 23, 23, 23, 23, 23, 23, 23,
	23, 209, 475, 475, 475, 475, 475, 475, 475, 475,
	475, 475, 475, 475, 475, 475, 475, 475, 475, 475,
	514, 514, 476, 476, 476, 476, 476, 476, 476, 476,
	476, 476, 515, 515, 516, 516, 477, 517, 517, 518,
	518, 478, 563, 563, 563, 563, 563, 563, 563, 563,
	563, 563, 563, 563, 563, 563, 563, 563, 563, 563,
	563, 563, 563, 563, 563, 563, 563, 563, 563, 564,
	564, 564, 564, 564, 564, 564, 564, 564, 564, 564,
	564, 564, 564, 564, 564, 564, 564, 564, 564, 564,
	564, 564, 564, 565, 566, 566, 566, 566, 566, 566,
	26, 26, 567, 568, 568, 568, 568, 648, 648, 649,
	649, 650, 650, 650, 651, 651, 651, 651, 651, 651,
	651, 693, 693, 569, 570, 570, 570, 570, 570, 570,
	694, 694, 571, 25, 25, 25,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 0,
	2, 0, 3, 0, 2, 0, 1, 0, 2, 2,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 1, 2, 3, 0,
	1, 3, 1, 3, 1, 0, 3, 3, 4, 4,
	4, 4, 3, 2, 1, 1, 2, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 5, 3, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 3, 3, 2, 2, 3, 5, 4,
	6, 3, 5, 4, 6, 4, 6, 5, 7, 3,
	2, 4, 2, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 3, 4, 4, 6,
	3, 3, 4, 3, 4, 4, 5, 4, 5, 1,
	1, 3, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 5, 6,
	3, 4, 1, 1, 2, 4, 1, 1, 1, 2,
	2, 2, 2, 1, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	6, 2, 3, 5, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 4, 1, 2, 1, 2,
	1, 0, 2, 2, 3, 5, 0, 2, 4, 3,
	1, 5, 1, 1, 4, 1, 4, 1, 4, 1,
	4, 1, 1, 1, 1, 1, 1, 1, 6, 4,
	4, 6, 4, 4, 4, 4, 4, 6, 5, 5,
	5, 4, 6, 4, 4, 4, 4, 5, 7, 7,
	9, 4, 6, 5, 5, 7, 7, 4, 7, 4,
	6, 6, 4, 5, 4, 5, 3, 11, 8, 9,
	8, 1, 0, 5, 5, 3, 3, 5, 3, 2,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	7, 5, 3, 4, 1, 3, 3, 1, 2, 2,
	0, 1, 2, 0, 2, 3, 3, 3, 4, 0,
	1, 1, 1, 1, 2, 3, 4, 5, 6, 8,
	6, 6, 1, 3, 1, 3, 3, 5, 1, 0,
	1, 2, 4, 2, 0, 3, 3, 2, 1, 3,
	4, 3, 5, 4, 3, 5, 1, 1, 1, 1,
	4, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 3, 2, 3, 2, 0, 1,
	3, 2, 3, 5, 6, 2, 3, 3, 4, 0,
	1, 1, 1, 1, 1, 2, 4, 1, 1, 1,
	1, 1, 1, 1, 2, 3, 3, 0, 2, 3,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 1, 3, 3, 2, 4, 1, 5, 2, 5,
	2, 5, 2, 1, 3, 3, 0, 1, 0, 3,
	0, 1, 4, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 0, 5, 0, 5, 0, 0, 1, 1,
	3, 1, 1, 3, 3, 1, 1, 1, 2, 4,
	4, 2, 3, 5, 5, 1, 3, 1, 0, 1,
	2, 3, 2, 4, 2, 3, 2, 0, 1, 2,
	0, 9, 9, 2, 1, 4, 4, 4, 1, 0,
	1, 3, 3, 2, 1, 1, 2, 0, 1, 3,
	2, 3, 2, 3, 1, 4, 2, 3, 2, 3,
	2, 3, 1, 1, 2, 2, 4, 1, 2, 3,
	3, 4, 5, 4, 5, 4, 2, 2, 2, 1,
	1, 0, 5, 2, 2, 2, 3, 1, 0, 1,
	3, 9, 1, 2, 0, 7, 7, 0, 10, 6,
	0, 4, 5, 2, 0, 2, 4, 0, 1, 1,
	0, 5, 2, 4, 1, 1, 4, 5, 4, 0,
	2, 0, 1, 0, 1, 5, 1, 0, 2, 0,
	2, 6, 2, 0, 1, 3, 2, 4, 0, 1,
	3, 2, 1, 0, 1, 3, 3, 2, 0, 2,
	2, 2, 3, 3, 4, 1, 3, 3, 2, 7,
	12, 1, 3, 2, 3, 3, 1, 2, 2, 2,
	2, 1, 2, 13, 2, 2, 0, 2, 0, 1,
	3, 3, 1, 3, 1, 3, 3, 3, 3, 3,
	0, 3, 3, 0, 3, 0, 7, 7, 3, 0,
	2, 1, 1, 1, 1, 1, 1, 2, 2, 1,
	3, 3, 6, 0, 3, 0, 2, 3, 2, 3,
	4, 4, 3, 3, 0, 5, 2, 5, 2, 0,
	4, 2, 1, 0, 1, 0, 1, 3, 3, 6,
	7, 5, 7, 9, 2, 0, 7, 1, 3, 1,
	4, 4, 7, 2, 1, 1, 1, 3, 2, 8,
	1, 3, 3, 5, 2, 1, 3, 7, 2, 0,
	10, 1, 2, 9, 11, 1, 1, 1, 0, 1,
	1, 1, 1, 0, 3, 0, 1, 3, 2, 0,
	1, 1, 3, 3, 1, 1, 3, 3, 3, 3,
	4, 4, 3, 3, 2, 1, 3, 2, 1, 1,
	1, 1, 3, 0, 1, 3, 1, 1, 1, 1,
	1, 1, 2, 2, 1, 1, 1, 2, 2, 1,
	3, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 0, 2, 0, 1,
	0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
	0, 4, 4, 4, 5, 5, 2, 5, 3, 5,
	2, 0, 3, 1, 2, 5, 5, 8, 3, 4,
	8, 5, 0, 4, 3, 0, 1, 3, 1, 3,
	2, 2, 4, 4, 5, 2, 0, 1, 1, 0,
	2, 2, 0, 2, 0, 13, 16, 12, 15, 14,
	17, 1, 1, 2, 2, 2, 2, 1, 0, 1,
	0, 1, 3, 1, 1, 1, 3, 3, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 1, 0, 2, 2, 1, 0, 3, 0,
	1, 3, 1, 1, 2, 4, 6, 6, 10, 1,
	2, 1, 3, 4, 0, 1, 3, 2, 1, 1,
	6, 2, 0, 3, 1, 1, 2, 1, 2, 2,
	2, 2, 3, 0, 1, 2, 1, 2, 1, 3,
	2, 3, 1, 2, 2, 2, 1, 2, 3, 1,
	2, 2, 2, 2, 3, 3, 3, 1, 3, 1,
	1, 0, 1, 1, 0, 1, 0, 3, 0, 2,
	1, 4, 4, 5, 2, 5, 5, 7, 3, 1,
	5, 9, 3, 9, 4, 11, 10, 2, 0, 1,
	3, 3, 6, 4, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 3,
	3, 4, 0, 1, 0, 6, 1, 3, 3, 3,
	5, 2, 0, 3, 4, 4, 0, 2, 0, 4,
	0, 3, 16, 19, 1, 0, 2, 0, 4, 0,
	1, 3, 2, 0, 4, 6, 4, 6, 4, 4,
	6, 4, 6, 5, 7, 5, 7, 4, 6, 10,
	13, 10, 13, 11, 14, 1, 3, 1, 0, 1,
	3, 1, 1, 1, 1, 1, 2, 5, 3, 6,
	4, 6, 6, 9, 5, 7, 6, 6, 5, 5,
	5, 5, 9, 4, 5, 7, 6, 4, 8, 4,
	2, 4, 3, 6, 4, 3, 3, 3, 2, 2,
	3, 4, 4, 3, 3, 3, 3, 3, 3, 4,
	4, 3, 2, 3, 2, 2, 3, 4, 3, 2,
	2, 3, 4, 4, 4, 5, 1, 4, 4, 4,
	3, 3, 2, 1, 0, 6, 4, 6, 4, 6,
	8, 4, 6, 4, 6, 5, 7, 2, 3, 3,
	2, 5, 1, 1, 2, 3, 2, 1, 1, 2,
	1, 2, 2, 4, 3, 5, 1, 3, 2, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 6, 5, 3, 5, 1, 0, 1, 3,
	2, 1, 1, 2, 3, 4, 3, 2, 4, 4,
	6, 4, 4, 2, 5, 2, 0, 5, 5, 5,
	1, 1, 1, 1, 3, 0, 1, 2, 2, 2,
	2, 2, 1, 1, 1, 2, 1, 2, 1, 1,
	1, 3, 3, 3, 3, 3, 2, 1, 3, 2,
	3, 5, 5, 5, 2, 1, 3, 6, 6, 6,
	6, 6, 8, 8, 6, 6, 7, 9, 9, 8,
	10, 6, 6, 6, 6, 6, 6, 6, 8, 6,
	8, 6, 8, 7, 9, 6, 8, 7, 9, 8,
	10, 8, 10, 9, 11, 8, 10, 9, 11, 8,
	8, 7, 6, 6, 6, 6, 8, 8, 8, 8,
	6, 9, 0, 2, 2, 1, 2, 2, 2, 2,
	3, 1, 3, 3, 1, 5, 3, 9, 12, 7,
	7, 3, 2, 1, 3, 1, 3, 3, 3, 3,
	2, 2, 1, 1, 1, 1, 2, 1, 1, 1,
	4, 5, 1, 0, 1, 2, 2, 2, 2, 1,
	1, 1, 3, 3, 5, 1, 4, 0, 2, 3,
	0, 1, 1, 2, 1, 17, 21, 1, 1, 2,
	1, 3, 1, 1, 1, 3, 1, 2, 0, 1,
	2, 4, 1, 1, 1, 1, 1, 3, 0, 1,
	0, 1, 1, 4, 0, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 2, 0, 9, 11, 12, 14,
	3, 0, 3, 4, 4, 0, 6, 4, 9, 7,
	6, 4, 6, 6, 5, 7, 9, 6, 6, 5,
	4, 4, 3, 6, 6, 6, 6, 4, 7, 5,
	8, 7, 8, 6, 5, 8, 1, 0, 1, 0,
	4, 6, 5, 8, 2, 0, 2, 2, 2, 1,
	5, 2, 0, 2, 6, 6, 6, 10, 6, 6,
	6, 9, 9, 6, 6, 9, 6, 7, 7, 6,
	2, 2, 2, 2, 1, 2, 1, 0, 1, 2,
	10, 13, 5, 4, 4, 2, 0, 2, 2, 1,
	0, 11, 14, 12, 15, 8, 11, 8, 7, 9,
	1, 1, 3, 3, 5, 6, 1, 3, 1, 3,
	1, 3, 3, 7, 9, 9, 8, 6, 1, 0,
	1, 3, 3, 1, 5, 3, 8, 11, 6, 1,
	0, 5, 2, 3, 0, 2, 0, 1, 1, 1,
	1, 1, 3, 3, 2, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 3, 1, 3,
	1, 1, 1, 1, 3, 5, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 3, 2, 2, 1, 2, 2, 2,
	2, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	2, 0, 2, 0, 4, 1, 3, 1, 2, 2,
	2, 1, 1, 1, 1, 1, 3, 3, 1, 3,
	1, 3, 11, 13, 5, 1, 2, 2, 1, 1,
	3, 5, 1, 3, 7, 2, 0, 5, 5, 10,
	8, 2, 0, 2, 0, 1, 1, 1, 1, 1,
	2, 0, 2, 0, 4, 0, 5, 0, 8, 1,
	1, 8, 11, 6, 8, 1, 3, 1, 1, 3,
	4, 7, 6, 5, 5, 5, 5, 1, 3, 4,
	4, 4, 3, 4, 3, 1, 4, 0, 8, 5,
	5, 6, 7, 7, 7, 4, 4, 5, 11, 10,
	10, 2, 2, 0, 13, 2, 0, 1, 3, 5,
	5, 3, 6, 2, 1, 0, 2, 4, 0, 1,
	3, 6, 8, 8, 1, 3, 5, 5, 10, 10,
	11, 11, 5, 5, 6, 10, 1, 0, 2, 0,
	1, 0, 2, 2, 1, 1, 0, 4, 0, 1,
	3, 1, 1, 1, 1, 1, 2, 4, 4, 5,
	2, 0, 3, 1, 3, 4, 3, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	3, 3, 3, 0, 1, 4, 2, 2, 2, 2,
	2, 3, 2, 2, 3, 0, 2, 2, 1, 1,
	1, 0, 2, 4, 5, 6, 4, 5, 2, 3,
	1, 1, 1, 1, 2, 2, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 2, 3, 2, 5,
	4, 3, 3, 3, 3, 3, 1, 1, 0, 2,
	3, 0, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 0, 3, 6, 3, 5, 3, 5, 3, 5,
	2, 0, 2, 0, 1, 2, 2, 2, 3, 3,
	2, 2, 3, 3, 1, 1, 3, 3, 2, 1,
	1, 8, 8, 11, 5, 7, 6, 9, 5, 2,
	0, 3, 3, 3, 7, 7, 10, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 4, 5, 1, 3,
	2, 2, 2, 2, 2, 1, 2, 2, 4, 3,
	2, 2, 2, 2, 2, 2, 3, 2, 2, 2,
	2, 5, 5, 5, 5, 5, 1, 3, 1, 2,
	3, 0, 3, 1, 2, 1, 1, 1, 3, 0,
	1, 3, 1, 3, 1, 3, 6, 4, 0, 5,
	5, 5, 1, 2, 4, 5, 1, 1, 1, 1,
	3, 3, 2, 2, 1, 2, 2, 2, 2, 1,
	2, 1, 3, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 2, 1, 3, 7,
	4, 1, 3, 4, 6, 4, 8, 1, 1, 1,
	1, 7, 2, 2, 2, 2, 3, 0, 2, 2,
	0, 2, 2, 1, 2, 3, 3, 3, 3, 4,
	4, 3, 3, 3, 4, 4, 3, 4, 4, 1,
	1, 1, 0, 2, 2, 5, 3, 0, 1, 1,
	1, 1, 1, 3, 9, 12, 3, 0, 6, 2,
	3, 2, 3, 2, 2, 2, 3, 2, 0, 2,
	5, 3, 0, 2, 2, 2, 3, 1, 3, 1,
	2, 5, 6, 6, 6, 6, 6, 6, 6, 6,
	8, 9, 8, 6, 6, 9, 9, 9, 7, 10,
	1, 1, 8, 8, 8, 8, 8, 8, 8, 9,
	8, 8, 2, 0, 1, 1, 2, 1, 2, 1,
	2, 2, 6, 6, 6, 6, 6, 6, 6, 9,
	9, 6, 6, 6, 8, 6, 8, 8, 8, 8,
	6, 8, 6, 8, 7, 9, 7, 9, 6, 6,
	6, 6, 6, 6, 6, 7, 7, 6, 9, 9,
	6, 6, 6, 6, 6, 6, 8, 8, 8, 6,
	7, 6, 6, 7, 8, 8, 8, 10, 9, 8,
	1, 0, 5, 5, 4, 6, 6, 1, 0, 1,
	2, 3, 3, 3, 1, 2, 1, 1, 1, 1,
	1, 1, 0, 4, 11, 11, 11, 13, 9, 11,
	1, 1, 6, 2, 2, 0,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -462, -178, -184, -185, -186,
	-187, -188, -189, -190, -191, -192, -193, -448, -449, -450,
	-451, -521, -522, -523, -524, -525, -526, -527, -528, -529,
	-530, -531, -532, -533, -534, -555, -556, -557, -558, -559,
	-560, -561, -562, -535, -536, -537, -538, -539, -540, -541,
	-542, -543, -544, -545, -546, -547, -548, -549, -550, -551,
	-552, -553, -554, -453, -454, -461, -463, -464, -465, -466,
	-467, -468, -469, -470, -471, -472, -473, -474, -455, -456,
	-460, -457, -458, -194, -195, -196, -197, -198, -199, -200,
	-201, -202, -203, -204, -205, -206, -207, -208, -209, -475,
	-476, -477, -478, -563, -564, -565, -566, -567, -568, -569,
	-570, -571, 266, 212, -180, -181, -293, 111, 26, 22,
	27, 394, 93, 401, 191, 436, 228, 407, 413, 397,
	378, 290, 405, 274, 475, -489, 428, 223, 395, 220,
	259, 250, 280, 345, 222, 273, 249, 328, 472, 358,
	329, 333, 462, 226, 418, 109, 214, -183, -182, -292,
	531, 119, 202, 63, 67, -300, 36, 518, 86, 540,
	-691, 486, 457, -691, 96, 97, 98, 99, 531, -251,
	115, -408, -372, -35, 33, 414, 261, 62, 464, 454,
	225, 276, 284, 422, 103, -436, 268, 449, 375, 194,
	438, 387, 443, 512, -593, 406, 71, 453, 451, 58,
	289, 473, 471, 40, 67, 307, 419, 480, 85, 284,
	104, 199, 225, 236, 247, 261, 286, 71, -595, 62,
	375, 385, 387, 409, 414, 422, 443, 412, 460, 268,
	406, 103, 449, 438, 454, 464, 276, 40, 322, 384,
	-403, -406, -405, 464, 261, 307, 103, 406, 71, 67,
	419, 480, 85, 284, 225, 236, 438, 454, 194, 268,
	276, -595, 387, 414, 422, 375, 412, 460, 85, -627,
	58, 423, 457, -628, -626, -270, 56, 217, 414, 347,
	406, 488, -5, 4, -27, -28, 191, 192, 193, 194,
	195, 196, 197, 198, 199, 200, 22, 201, 203, 204,
	205, 55, 206, 207, 208, 210, 211, 212, 88, 70,
	213, 214, 215, 24, 216, 218, 219, 220, 221, 222,
	223, 123, 226, 227, 228, 229, 230, 141, 231, 101,
	232, 233, 234, 235, 236, 111, 237, 154, 238, 120,
	121, 90, 246, 247, 248, 249, 250, 251, 253, 254,
	98, 149, 150, 255, 89, 256, 257, 258, 259, 260,
	261, 176, 27, 262, 138, 264, 148, 265, 267, 136,
	42, 268, 270, 271, 272, 273, 274, 275, 276, 277,
	279, 281, 282, 91, 283, 153, 165, 285, 286, 287,
	288, 289, 291, 294, 295, 151, 296, 297, 298, 28,
	299, 300, 301, 302, 303, 304, 305, 306, 307, 308,
	309, 310, 312, 313, 314, 96, 315, 317, 318, 145,
	503, 319, 320, 321, 322, 92, 324, 327, 328, 329,
	332, 333, 334, 335, 336, 337, 105, 85, 338, 99,
	340, 341, 342, 343, 344, 345, 346, 131, 348, 349,
	350, 351, 352, 353, 354, 357, 110, 358, 359, 32,
	139, 122, 504, 505, 502, 144, 62, 506, 507, 124,
	501, 508, 102, 364, 365, 366, 367, 368, 369, 370,
	129, 371, 128, 373, 374, 375, 377, 378, 379, 380,
	382, 383, 384, 385, 386, 112, 387, 152, 143, 388,
	389, 390, 391, 84, 132, 393, 394, 395, 396, 397,
	398, 399, 34, 400, 401, 402, 35, 403, 404, 405,
	407, 408, 409, 410, 127, 412, 413, 146, 415, 416,
	87, 417, 418, 419, 420, 421, 422, 93, 425, 427,
	428, 429, 430, 431, 107, 433, 434, 435, 436, 437,
	438, 113, 114, 439, 440, 441, 147, 442, 443, 445,
	446, 104, 448, 449, 108, 451, 452, 453, 454, 455,
	458, 460, 462, 463, 464, 465, 466, 467, 468, 142,
	469, 50, 472, 473, 474, 97, 475, 476, 477, 478,
	155, 183, 479, 480, 481, 482, 483, 485, 168, 486,
	140, 487, 498, 499, 57, 37, 173, 169, 189, 179,
	178, 224, 188, 187, 29, 278, 175, 292, 293, 500,
	186, 171, 185, 166, 160, 162, 163, 159, 161, 156,
	164, 158, 126, 157, 325, 339, 181, 182, 355, 356,
	360, 170, 361, 362, 376, 177, 174, 411, 426, 172,
	444, 184, 459, 461, 86, 180, 489, 490, 491, 492,
	493, 133, 494, 495, 496, 497, 125, -630, -629, 56,
	457, 423, -270, 21, 217, 58, 347, 406, 414, 488,
	-691, 457, -691, 379, -691, 379, -5, 423, 457, 56,
	413, -5, 457, -7, -5, -501, -502, 21, -506, 63,
	392, 26, 22, -5, -501, 290, -502, -5, -459, -489,
	118, 531, -178, -184, -185, -186, -187, -521, -522, 26,
	-240, 531, 79, -238, 531, 118, -270, 56, 457, 423,
	21, 531, -238, -495, 531, 21, 451, 453, 374, 420,
	-241, -7, -247, -241, -245, 349, 382, 91, 92, 193,
	396, -101, 21, 285, 210, 64, 45, -100, 534, 535,
	12, -247, -241, 21, -7, -7, 378, 21, -5, -5,
	536, -5, -21, -102, 7, -684, 67, -684, 74, 320,
	-517, -518, -102, 321, -131, -633, -103, -5, 4, -27,
	-29, 209, 115, 225, 25, 81, 242, 116, 79, 44,
	76, 52, 53, 75, 77, 46, 82, 54, 80, 363,
	78, 48, 450, 118, -169, -130, 470, 316, 269, 509,
	-182, -183, -181, -180, -181, -292, -284, -285, 21, 41,
	-432, -430, -433, -5, 66, 541, -294, 84, -296, -7,
	-294, 531, -3, -480, 30, -497, -496, -674, 318, 389,
	252, 31, 73, -434, -432, 64, 73, -179, -178, -184,
	-185, -186, -187, -430, 67, 480, 84, 419, 307, 286,
	385, 460, 117, 199, 458, -594, 463, 34, -19, -5,
	28, -15, -5, -155, 221, 279, -158, -5, 11, -159,
	534, 535, 536, 537, 538, 539, 525, 526, 527, 18,
	19, 20, -15, 87, -15, 28, -7, 28, 246, 67,
	-7, 28, 336, -11, -507, -9, 241, 245, 424, 4,
	-27, -28, -29, 85, 460, -7, -7, 340, -395, 28,
	-15, -7, -7, 531, 236, -11, -11, 453, 451, 453,
	451, -432, 28, 21, -430, 28, 21, -430, 28, -430,
	28, 480, 67, 246, 93, 401, -441, -633, -15, -15,
	-7, -15, -440, -633, -29, -5, -11, -507, 321, 221,
	279, -442, -155, -7, 28, -440, -7, -440, -7, -7,
	-7, -7, -7, 460, -11, -507, 21, -11, 336, -507,
	21, -7, -15, 28, 87, -15, -7, 383, 139, 28,
	-17, -15, 28, -13, -7, -7, 28, -267, 28, -107,
	-108, 426, -110, -111, -117, -113, -116, -109, -683, -103,
	186, 171, 172, 173, 174, 175, 176, 187, 188, 170,
	189, -118, -119, -114, -115, 184, 56, 185, 166, 4,
	-27, 169, -104, 178, 179, 180, 181, 182, -267, 28,
	25, 336, -398, 28, -507, -398, 28, -398, 28, 480,
	246, 67, 87, 340, 460, 321, 480, -627, 423, -627,
	219, 209, -496, 431, 64, 61, 527, 533, 57, -102,
	-102, -675, -102, 40, -269, -9, -102, 506, 57, 318,
	209, -480, -497, -480, -102, -480, 61, -102, -5, -102,
	-248, 531, 74, 61, 541, 383, 531, -258, 531, -258,
	-258, 104, -258, 74, 506, 64, 506, -238, -459, -484,
	-487, -488, 86, -9, -489, 515, 473, -237, 116, -484,
	-485, -486, -491, -430, -484, 57, 318, 209, -484, -430,
	-7, -5, -493, 414, -494, 307, 67, 104, 247, -484,
	-243, -241, -246, -245, -246, -246, -246, -101, -101, -246,
	-246, -246, -101, 21, -246, -101, 21, -100, -100, -249,
	531, -7, 21, -20, 541, -18, -432, -18, -403, 514,
	-404, 464, 261, 199, 286, 62, 117, -405, 385, 409,
	458, 322, 512, 307, -406, 247, 406, 443, 449, -515,
	130, -518, -269, 531, -95, -98, 533, 529, -147, -55,
	-149, 130, -56, -57, -151, 68, 280, 69, -152, -53,
	21, 41, -53, -53, 70, -169, -130, 532, 532, -272,
	-271, -274, -64, 536, -66, 534, 535, -154, 31, 516,
	-129, 471, 40, -68, -67, 13, 531, -71, -69, -181,
	29, 134, -77, -78, 293, 11, 62, 411, -5, -100,
	6, -102, 49, 43, 47, 9, 10, -633, -680, -109,
	38, -131, -330, -70, -111, -681, -682, -116, -683, 185,
	161, 162, 225, 240, 243, 244, 330, 331, 241, 245,
	424, 447, 103, 239, 242, 512, 278, 356, 362, 376,
	444, 459, 461, 360, 224, 292, 325, 490, 491, 493,
	494, 492, 495, 496, 159, 160, 166, 164, 158, 339,
	156, 163, 157, 497, 173, 169, 189, 179, 178, 188,
	187, 175, 186, 171, 181, 182, 170, 174, 172, 56,
	184, 180, -118, -119, -114, -115, -271, 74, 536, -95,
	-430, 531, 531, 541, -294, -32, 531, -128, -64, 218,
	354, 541, -674, 327, 66, 487, 252, -431, -430, 93,
	-5, 23, -434, -434, 532, -258, -430, 28, -250, -430,
	480, -430, 28, -36, 25, -633, -633, -7, 460, -633,
	130, -595, -408, 473, 209, -438, 31, -622, 23, -121,
	533, -426, 531, -15, -15, 533, -426, 23, 368, 257,
	452, 231, -426, 64, 31, -37, 36, 518, 31, 140,
	-430, 28, -582, 464, 31, 130, 28, -37, 480, -7,
	-591, 365, 74, -7, -32, 31, -425, 130, 36, 232,
	-107, -15, -37, -37, -397, -400, 398, 93, -399, 207,
	256, 196, 22, 27, 477, 223, 264, 258, 309, 354,
	122, 31, 365, 401, 400, 153, -39, 507, 29, 45,
	-397, -401, 398, -26, 207, 354, 93, 29, 45, -397,
	398, -419, 93, -422, 354, 23, 213, 90, 305, 335,
	338, 342, 364, 419, 436, 402, 473, 29, -397, 398,
	93, 29, -430, 28, 21, -432, 28, 140, -626, -270,
	-629, 398, 93, 365, -47, 531, 398, 93, 365, 394,
	398, 93, 365, 398, 365, 36, -648, 93, 394, -631,
	-649, -454, -650, -651, 4, 232, 148, 332, 449, 452,
	398, -402, 27, 93, 196, 477, 365, 398, -443, 93,
	365, -26, -645, 354, 215, 404, 441, 300, 434, 482,
	277, 418, 324, 31, 237, 127, 445, -632, 366, -454,
	-47, -95, 398, -520, 196, 27, -7, -15, -15, 93,
	365, -97, 531, 74, 29, 398, -443, 93, 365, -26,
	398, 93, 196, 27, 365, 398, -443, 93, 365, -26,
	398, 365, 398, -583, -39, 365, 479, 398, 93, 232,
	394, 196, 27, 264, 258, 430, 365, 74, 74, -7,
	398, -37, -479, 45, -479, 398, 130, -37, -479, -479,
	398, 93, 401, 365, 398, 93, 365, 29, 368, 257,
	452, 231, 398, 196, 27, 93, -445, 365, -446, 22,
	97, -520, 93, -500, -264, 6, 534, 535, -101, 29,
	541, -429, 24, 35, 29, 541, -429, 74, 29, 541,
	-429, 29, -125, 134, -108, -123, 531, 498, 344, 248,
	297, 341, -124, 417, -122, -121, 531, -112, 531, 177,
	-122, -122, -122, 531, -126, 518, 519, 531, -126, -127,
	183, 531, -127, -127, 178, 179, -127, -429, 29, -17,
	28, 130, 28, 541, 29, 29, 29, 140, 368, 257,
	452, 231, -36, 219, 23, -269, 40, -102, 120, -273,
	40, -265, -268, -264, 49, 43, 74, -269, -273, 40,
	-5, -673, -102, 4, -109, -264, 40, 58, -677, 260,
	234, 327, 413, -5, 23, -679, -107, -519, -16, 67,
	419, 284, 286, 385, 409, 247, 261, 321, 322, 367,
	414, 449, 464, 21, -430, -398, -506, 531, -14, -5,
	-14, -519, 130, -398, 130, -459, 532, 541, -490, -268,
	-264, -238, 532, 541, -32, 532, 327, 532, -492, 83,
	74, -36, -36, -36, 532, 121, 115, 314, 203, 416,
	354, -241, -241, -241, -241, -246, -246, -241, -241, -241,
	-246, -246, -241, -246, -246, -128, -102, 541, -22, 45,
	-25, 235, 402, -15, -15, -7, -107, -107, -441, -440,
	-442, 221, 279, -7, -7, -440, -440, 130, 139, 531,
	74, -269, 532, 536, -81, 190, 21, 41, -94, -64,
	-106, -103, -98, -105, 536, -6, 4, -27, -28, -29,
	-30, 21, 202, 119, 30, 510, 134, 23, 94, 60,
	511, 38, 512, 513, 39, 514, 117, 26, 239, 240,
	241, 243, 244, 245, 40, 252, 95, 41, 109, 263,
	266, 269, 43, 280, 130, 284, 64, 290, 71, 72,
	45, 311, 316, 73, 323, 326, 68, 330, 331, 31,
	47, 69, 74, 66, 33, 509, 372, 381, 392, 100,
	63, 424, 432, 59, 447, 67, 106, 61, 456, 49,
	470, 471, 103, 83, 190, 51, 65, 484, 36, -64,
	-99, -54, -55, -148, -147, -151, 130, 389, 97, 354,
	427, 503, -57, -56, -58, -64, 21, -63, 91, 349,
	-59, -60, -64, -66, 534, 535, -150, 122, -182, -182,
	-182, -170, -173, -64, -147, -55, -287, 73, 541, 14,
	39, 55, 534, 535, 536, 537, 538, 539, 525, 526,
	527, 18, 19, 20, -154, 30, 33, 46, 516, 44,
	48, 52, 53, 54, 37, 45, -157, 23, -8, 11,
	62, -158, 4, -31, 191, 192, 193, 194, 195, 196,
	197, 198, 199, 21, 200, 22, 201, 202, 119, 510,
	94, 203, 204, 205, 60, 206, 207, 208, 209, 210,
	211, 212, 173, 115, 169, 189, 511, 88, 70, 213,
	214, 215, 24, 216, 38, 512, 217, 218, 219, 513,
	220, 221, 222, 223, 224, 225, 514, 123, 226, 227,
	228, 229, 230, 25, 141, 231, 101, 232, 117, 233,
	234, 235, 236, 111, 237, 81, 154, 238, 120, 239,
	240, 241, 242, 243, 244, 245, 121, 90, 246, 247,
	249, 188, 187, 250, 40, 251, 252, 253, 254, 98,
	149, 150, 255, 89, 95, 256, 257, 258, 259, 41,
	109, 260, 261, 176, 27, 262, 263, 138, 264, 148,
	265, 266, 267, 136, 42, 268, 270, 271, 272, 273,
	29, 274, 275, 276, 277, 278, 43, 279, 282, 91,
	175, 283, 153, 284, 165, 285, 116, 79, 286, 287,
	288, 289, 291, 292, 293, 294, 295, 151, 296, 298,
	28, 299, 300, 301, 302, 303, 304, 305, 306, 307,
	308, 309, 310, 311, 312, 76, 500, 313, 314, 96,
	315, 186, 171, 185, 317, 318, 75, 166, 160, 162,
	163, 159, 161, 156, 164, 158, 126, 157, 145, 503,
	319, 320, 321, 322, 92, 323, 326, 324, 325, 77,
	327, 328, 329, 58, 330, 331, 332, 333, 334, 335,
	336, 337, 105, 85, 338, 99, 339, 340, 342, 343,
	345, 346, 347, 181, 82, 182, 131, 348, 349, 350,
	351, 352, 353, 354, 355, 356, 357, 31, 110, 358,
	359, 47, 360, 32, 170, 139, 122, 504, 505, 502,
	144, 66, 506, 507, 124, 501, 361, 80, 362, 102,
	364, 365, 366, 367, 368, 369, 370, 129, 371, 128,
	372, 373, 374, 375, 376, 377, 378, 379, 380, 381,
	382, 383, 384, 385, 386, 112, 387, 152, 143, 388,
	389, 174, 390, 391, 84, 132, 392, 393, 394, 395,
	396, 397, 398, 399, 34, 400, 401, 402, 35, 403,
	404, 405, 78, 406, 407, 408, 409, 410, 411, 127,
	412, 413, 146, 414, 415, 416, 87, 418, 63, 419,
	420, 421, 422, 423, 424, 93, 426, 425, 427, 428,
	429, 430, 172, 431, 432, 107, 433, 434, 435, 436,
	437, 438, 113, 114, 439, 440, 441, 147, 442, 443,
	444, 445, 59, 446, 104, 447, 67, 448, 450, 449,
	108, 451, 452, 453, 454, 106, 455, 56, 184, 456,
	457, 458, 459, 460, 461, 49, 462, 463, 464, 465,
	466, 467, 468, 142, 469, 471, 50, 472, 473, 474,
	97, 103, 83, 475, 476, 477, 478, 155, 86, 180,
	190, 118, 479, 480, 481, 482, 51, 483, 486, 140,
	487, 488, 489, 490, 491, 492, 493, 133, 494, 495,
	496, 497, 125, 499, 57, -64, -64, -64, -64, -64,
	363, -373, 32, -96, -64, -128, -181, -95, -181, -181,
	-76, 529, 531, 531, 531, -95, -102, 531, -102, -102,
	531, -72, -64, -135, 485, -132, 281, 531, 531, 130,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, -287, 531, -430, -128, -296, 23, -13,
	541, 532, 39, 55, 30, 33, 46, 44, 48, 52,
	37, 45, 62, 218, -674, -676, 389, 399, 421, -210,
	-178, 102, 531, 40, 23, -212, -218, -216, 531, -5,
	-5, -295, 83, 83, 61, -235, 64, 61, 531, 122,
	370, -258, 31, 23, -258, -430, -574, -419, 354, 31,
	-19, 28, -5, -634, 531, -634, -656, 211, 198, 315,
	-7, -617, -619, 531, -107, 321, 480, 84, -507, -439,
	-189, -190, -450, -451, 26, 29, -107, 533, -105, -427,
	-428, -6, -593, 83, -155, 531, 267, 388, -15, -15,
	-15, -15, -15, 29, -575, 29, -7, 531, 370, 31,
	-584, -583, -102, 29, -585, -507, 103, 31, -498, -437,
	28, -430, 74, 332, -507, -430, 464, 74, 29, 21,
	-605, -610, 67, 448, -5, -433, 242, -430, -426, -102,
	23, 130, -498, -498, 541, 61, -687, 117, 514, 168,
	335, 473, 194, 449, -385, 414, 531, 370, 370, -352,
	28, 514, -353, -5, 117, -369, 513, 471, 381, 284,
	270, -687, 117, -687, 117, 117, 74, 460, 201, 400,
	412, 411, 460, 412, 411, -430, 309, 153, -15, 122,
	61, -385, 298, 411, 531, -432, 449, 61, 255, 370,
	-430, 449, 61, -422, 414, 90, 338, 342, -108, -264,
	-686, 70, -264, -264, 70, 346, -37, -37, -430, 61,
	-687, 414, -430, -397, 398, 93, -26, 29, 45, -397,
	398, 93, 29, -7, 61, 414, 61, -48, 532, -637,
	-639, -106, -120, 45, 361, 500, 190, -103, -107, 426,
	61, 414, 61, 479, 61, 414, 61, 61, 61, -648,
	365, -627, 449, 225, -650, -693, 527, 68, 61, 117,
	40, 31, 117, 40, 31, 414, -623, 117, -624, 513,
	31, 117, 61, 61, -692, -645, 35, 93, -628, 414,
	423, 457, 61, 255, 74, 47, 418, 254, 317, 324,
	-264, -264, -15, -5, 61, 103, 398, 365, 83, 83,
	414, 531, 61, -107, 355, -430, -7, 61, -692, 414,
	61, 255, 61, -426, -605, -605, -605, 61, 61, -692,
	414, 61, 255, 61, 61, 61, -39, 61, -102, 47,
	61, -426, 387, -102, 387, 387, 387, -426, 61, -430,
	-430, 398, -590, 365, 264, 258, 61, -499, -631, 93,
	247, -631, 61, -585, -499, -631, -631, 61, -385, -385,
	61, 61, 438, 414, 61, -15, -15, -15, -15, -15,
	61, 208, 155, 155, 208, 155, 208, 531, 414, 541,
	61, 208, -576, -404, -403, 199, 512, 261, 286, 62,
	385, 409, 458, 464, 414, -512, -483, 290, 405, 45,
	130, 365, 6, 6, -17, -15, -13, -7, -15, -7,
	-107, -267, 529, 529, -125, 134, -100, 61, 61, 61,
	61, 531, -122, -128, -100, -100, 56, 56, -100, 531,
	-100, -127, -127, -267, -429, 29, -585, 29, -507, -398,
	-398, -398, -430, 457, 541, -102, 531, -5, -179, 541,
	532, 61, 541, -16, -16, 246, 422, -444, -440, -444,
	-444, -13, -17, -13, 139, -50, -45, -5, -13, -13,
	-17, 448, 420, 287, 386, 410, -509, 36, 291, -14,
	541, 532, 532, 64, -501, -502, -509, -502, -459, -487,
	-239, 119, -485, -491, -485, -430, -7, -430, -430, -7,
	-19, -244, 36, 168, 416, -241, -241, -241, -241, -241,
	-241, 532, -432, -24, 359, -23, 194, 411, 427, 272,
	-429, 298, 298, 52, 52, 52, 52, 52, 52, 52,
	52, -15, -15, 74, 74, 52, 52, -107, -264, -107,
	-403, 514, -404, 464, 261, 199, 286, 322, 385, 409,
	532, -130, 541, -169, -94, -81, -81, 16, 17, 530,
	542, 66, 503, 427, 541, -60, -62, -66, 534, 535,
	411, 127, 531, -62, 411, 127, -61, -100, 6, -61,
	-153, 359, 430, -16, 541, 83, -162, 94, 95, -54,
	-148, -275, 64, -424, 453, 451, 58, 289, 473, 67,
	-430, -274, -107, -15, 56, 58, -64, -64, -64, -64,
	-64, -64, -64, -64, -64, -64, -64, -64, -64, -64,
	-64, -64, 46, 44, 48, 37, 45, -64, 61, 47,
	31, 49, 43, 50, 41, 260, 357, -166, -165, 350,
	351, 352, 353, 166, -161, 59, 60, -160, -181, 531,
	-164, 510, 432, 21, -6, 531, -129, 411, 531, -181,
	41, 31, -98, 532, 541, -128, -79, 530, -76, -128,
	-155, -128, 532, -81, -123, -100, -75, -74, 51, -132,
	71, -141, 508, 531, -331, -66, -64, -326, -64, 531,
	-100, -100, -100, -100, -64, -86, -12, 4, 498, 344,
	248, 297, 341, 417, -102, -64, -87, -82, -64, -81,
	-88, -65, -66, 534, 535, -154, 411, -84, -82, -64,
	-64, 511, 326, 456, -85, -64, 64, -128, -64, -128,
	-128, -128, -128, 346, -89, -217, -64, -677, -66, 346,
	-64, -81, -332, -336, -331, 100, -64, -329, -180, -336,
	-326, -181, -326, -64, -326, 532, -326, -326, -326, -677,
	-275, -128, 532, 532, -297, 85, 31, 532, -64, 468,
	229, 389, -219, 74, -232, 103, 104, -211, -215, -5,
	86, -5, -275, 541, 527, -213, -216, -96, -220, 65,
	-276, -277, -432, -181, 323, -288, 531, -301, -311, -321,
	-302, 127, 125, 126, -5, -131, -70, -330, 166, -277,
	-236, 112, -236, -347, -348, -5, -351, -352, -354, -353,
	46, -15, 122, -409, 83, 29, 273, -396, 36, 531,
	29, 74, 31, 404, -641, -642, -644, 23, 321, 458,
	484, -645, -635, 532, -636, -637, -641, -658, -657, 96,
	98, 97, 462, 122, 198, -426, 536, -618, 509, -620,
	-625, -621, -637, 4, 321, -7, -430, 480, -438, -408,
	-35, -19, -5, -366, -105, 532, 541, 527, 130, -7,
	-304, -303, -305, -5, 531, -426, -426, -426, -426, -426,
	-15, -577, 414, 479, 64, 24, -7, -579, -580, -581,
	295, 354, 478, -347, 122, 29, 284, -7, 422, 29,
	-481, -482, 446, 197, 406, 45, 371, 265, 469, 309,
	4, 232, 476, 103, 23, 31, -258, -6, 7, -592,
	23, -602, 307, 67, -604, -609, -5, -302, 531, -15,
	448, -425, 541, -432, 45, -95, -258, -258, 387, -107,
	-102, -399, -7, -7, -7, 505, 223, 340, -7, -7,
	-386, -387, -6, -430, -430, 31, -352, 28, -107, -7,
	531, -373, -391, 83, 503, 503, -392, 83, -5, -100,
	-7, 28, -5, 28, -7, -7, -7, -7, 21, 103,
	460, 412, 460, 412, -7, 327, -7, 21, 103, -7,
	327, -430, 411, -507, -46, 110, 79, 40, 83, 327,
	-40, -43, -416, 93, 196, 27, -10, -6, -397, -400,
	398, 93, -7, -7, 74, -430, -397, 398, -7, -7,
	-7, -264, -15, -15, -264, -264, -397, 398, -419, 93,
	-7, -7, -7, -397, 398, 93, 61, -687, 414, 255,
	-430, 449, 61, -687, 414, -432, 398, -579, -580, 365,
	-7, -7, -507, 532, 541, -106, -120, -639, -120, -103,
	361, -121, -103, -7, -7, -507, -7, -7, -507, -7,
	-507, -7, 479, -101, -268, 40, -7, -7, 47, -7,
	28, -64, 47, -7, -7, 531, 47, -7, -507, -7,
	-7, -507, 74, 47, 74, 254, 317, -11, -398, 61,
	61, -7, -7, -7, -647, -646, -6, -507, 532, 541,
	541, 398, -599, 61, 74, -7, -7, -507, 74, -7,
	-507, -7, -7, -507, 74, -7, -507, -7, -507, -7,
	-13, -425, -13, -13, -507, 398, 398, -26, 61, 61,
	400, 201, -11, -482, -7, -11, 422, -7, -507, -7,
	-42, -101, 40, -7, -507, 93, 398, 93, 398, 93,
	365, -426, 398, 93, 398, 93, 365, 196, 22, 27,
	-7, -7, -102, -34, 28, -305, -102, 28, -5, -647,
	-7, -446, 196, 27, -507, -5, -578, 61, -7, -15,
	-441, 531, -107, -440, -442, 221, 279, -440, -440, 130,
	-107, -7, -501, -501, 290, 414, 406, 103, 61, -429,
	-429, -429, 74, -429, 530, -100, -100, 529, 532, 344,
	297, 341, -124, 341, -124, -124, -100, 532, 532, 532,
	57, 57, 532, -128, 532, -429, -17, 422, 130, -435,
	36, -496, -265, -123, -100, -107, -503, -508, -507, 71,
	-430, 140, -13, 541, -51, -264, 541, 533, 45, 45,
	45, 45, 45, -504, -513, -6, 70, 532, -5, -503,
	74, -429, 64, -485, -492, 130, 296, 296, 343, 427,
	272, 427, 272, 97, 411, -514, -102, 47, -514, -514,
	-514, -514, -514, -514, -514, 83, 83, -15, 261, -15,
	-514, -514, 321, 52, 23, -15, -15, -7, -107, -107,
	-441, -440, 139, -440, -440, 532, 190, -94, -130, -130,
	541, -130, -64, -64, -99, -64, 97, -59, -62, 66,
	36, -100, 6, 531, -128, 334, -173, -156, -158, 62,
	-163, 517, -278, 65, -276, -684, -684, 453, 451, 453,
	451, -684, -430, 57, 42, -64, -64, 61, -161, 59,
	-160, 42, -64, 47, 49, 43, 50, 41, 260, 357,
	-166, -165, 64, 357, -167, 36, 168, 155, 134, 139,
	146, -65, -65, -128, -181, 531, -155, 531, -128, 41,
	-96, -64, 530, 530, 541, 532, 532, 532, -130, 532,
	-73, -74, 263, -64, -141, 531, -140, -5, 531, 65,
	-333, 47, 192, 155, 542, -335, 509, -345, -344, 515,
	-64, 532, 532, 532, 532, 23, 532, 64, 532, 541,
	532, 532, 372, 532, 14, 534, 535, 536, 537, 538,
	539, 525, 526, 527, 18, 19, 20, -154, 52, 45,
	62, -65, -65, -65, 532, 532, 48, 64, 130, 23,
	-85, -85, -85, 532, 64, -128, 541, 532, 532, 532,
	532, -6, 532, 541, 23, -64, -317, 129, -6, 541,
	532, -333, 541, 532, -107, -334, 541, 47, 192, -345,
	532, -167, 532, -336, 541, 541, 541, -64, -278, 532,
	531, 85, -221, 100, 101, 155, 532, 541, -96, -220,
	-218, -64, 532, 541, -221, -64, 120, 541, 81, -289,
	75, 82, 79, 77, 78, 76, -281, -280, 23, -5,
	-281, -181, -301, -311, -321, -181, -288, -277, -283, -280,
	23, -5, -281, -281, -310, 518, 64, 531, 531, -95,
	74, -242, -102, 113, 114, -242, 532, 541, -430, -349,
	531, -430, -49, 36, 168, -7, -430, -250, -7, 23,
	-385, -14, -430, -432, 29, -640, 67, -120, -654, -452,
	212, 403, -644, -653, -102, -269, -643, 130, 532, 541,
	40, 527, -654, 74, 33, 122, -658, 532, 532, 509,
	541, 70, 532, 541, 527, -7, 295, -258, -430, 67,
	209, -438, -367, 117, -368, -370, 39, 31, 47, 471,
	381, 513, 40, 392, 288, 252, 311, -428, -407, -120,
	-30, -156, -264, -102, 355, 62, 534, 535, 464, 532,
	541, -107, -572, -573, -102, -426, 64, -7, -269, -269,
	-37, -414, 507, -581, -586, -7, 295, 478, -586, 532,
	-430, -430, 246, -582, -7, 130, -100, -398, -398, 406,
	71, -102, 47, 371, 371, 68, 474, -398, -178, 29,
	-409, 273, 51, -396, -596, 130, 4, 295, 64, 541,
	-64, -32, -425, -610, -258, 414, -258, -279, 65, -279,
	-13, 532, 61, 61, 61, -44, -5, 40, 532, 541,
	527, 533, -357, 130, 40, -36, 282, 29, 31, -413,
	-412, 439, -369, 270, -64, 531, -364, 307, 531, -391,
	531, 531, -7, -402, 27, 93, 401, 196, -421, -266,
	-39, -423, 402, 93, -364, 29, -429, 29, -429, -7,
	-7, -7, -7, 418, 418, 327, 307, 418, 532, 541,
	-416, -416, -10, -41, -102, 61, -687, 117, 414, 93,
	364, 276, 61, 93, 364, 61, 414, 61, 61, -687,
	414, -7, -7, -7, 74, -397, 398, 93, -7, -7,
	-7, -7, -397, 398, 93, 61, -39, 61, -637, -120,
	-120, 538, -121, 61, -429, 29, -624, -64, -364, 276,
	313, 47, -7, -507, 398, 93, 365, 398, 196, 27,
	93, 365, 541, 532, 527, -107, 355, -107, 61, -600,
	83, -398, -430, 276, 276, -425, -425, -425, 61, 61,
	255, -7, -507, -7, 438, 61, 414, 61, 414, 61,
	61, 414, 61, 414, 61, 336, 336, 336, 61, 61,
	-102, 31, -429, 29, -429, 532, -266, 93, -269, -107,
	-15, -15, -107, 74, 74, 506, -13, -398, -398, -507,
	-15, 530, 530, -100, 532, -126, -126, 532, -429, -7,
	-585, 246, 354, 532, -510, 541, 36, -507, -13, -440,
	541, -45, -5, 414, 414, 414, 414, 414, -509, 541,
	-511, 506, 49, 43, -507, -509, -519, -398, -178, 272,
	272, -7, -7, 52, -15, 52, -7, -514, -107, 52,
	52, 52, 52, 52, 52, 52, -264, 52, 52, -94,
	532, 532, 532, 530, 66, 36, 455, -128, 532, 541,
	-163, 531, 91, 92, -52, 71, -64, -430, -430, -684,
	-684, -684, -684, -430, -64, -64, 42, 42, -64, -65,
	-65, -64, 42, 64, 357, -167, -64, 471, 471, 30,
	30, 532, -64, 532, -128, 532, 541, 532, -76, 532,
	-102, 266, -64, 106, -169, -142, -5, -64, -167, 74,
	74, -326, -326, -334, 70, 166, 532, -107, -64, -166,
	-64, -107, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, 41, 31, 260, -65, -64,
	-64, -64, -107, 532, 532, 532, -128, -64, 532, 541,
	-217, -6, -90, 380, 442, 532, -66, -318, 70, 532,
	541, -92, 479, -167, -331, -345, -336, -326, 74, 74,
	-336, 532, 532, -64, -64, -64, 23, -52, -179, -271,
	-226, 531, 74, -178, -178, 102, -215, -221, 527, -216,
	122, -277, 75, 75, -277, -289, 75, -290, 80, -290,
	-290, -133, 450, -5, 531, -281, -283, -281, -281, 532,
	-5, 531, 531, 124, 531, -66, 133, -326, -64, -37,
	-252, -685, 83, -380, 310, -351, -362, -381, -382, 370,
	-350, -355, -356, -353, -5, -349, -388, 74, -385, 505,
	531, 122, 370, 23, -249, -178, 532, -574, -392, -7,
	-641, 531, 206, -64, 541, 541, 464, -636, -64, -64,
	-430, -657, -14, 74, 70, -625, -618, -621, 4, -407,
	531, -586, -396, 531, -430, 28, -507, -7, -15, 252,
	47, -373, 503, 531, -65, -430, -418, 201, 70, 253,
	299, -107, -305, -316, 39, 532, 541, -15, -575, 531,
	-121, -380, -349, 531, 370, 140, -584, -414, -585, -398,
	-398, -102, -102, -101, -102, -435, -437, -396, -688, 286,
	385, -587, -589, -5, -598, 61, -597, 21, 63, 96,
	97, 98, -586, -276, -609, 532, 74, -279, -5, 242,
	-279, 531, -425, 36, 168, -102, -7, -7, -387, -407,
	-6, 86, -352, 29, -411, -410, 230, -5, 40, 532,
	-14, -365, 31, 252, 311, 354, -7, -14, -364, -14,
	-360, -359, -230, -5, -302, 531, 31, 275, 298, 246,
	-422, 288, 31, 275, 438, -385, -412, -410, -385, 288,
	-423, 93, 464, -37, 438, -5, -7, 418, -7, -43,
	-7, -7, -7, -7, 449, 70, -7, -7, 449, 70,
	-7, -7, -7, -7, -7, -7, 61, 276, 61, -687,
	414, 93, 364, 61, 61, -687, 414, -7, -507, 464,
	538, -7, -7, 532, -7, 313, 61, 414, 61, 61,
	-606, -611, 62, 286, 439, -607, -612, 62, 286, 414,
	61, -646, 355, -652, -120, -30, -156, -264, -102, 532,
	532, 532, -7, -601, 36, 531, 398, -7, -7, -7,
	-7, 74, -39, -42, -7, -7, -7, -7, -507, -7,
	-7, -7, -7, -507, 130, 130, 34, 130, 28, -7,
	-102, 211, 198, 29, -5, 464, 23, 83, 83, 321,
	-505, 448, 287, 410, 420, 465, 415, -505, 130, -429,
	530, 422, 246, -102, -509, -508, 290, -264, -13, -13,
	-13, -13, -13, -513, -429, 64, -509, 52, 52, -514,
	52, -514, 52, 532, -516, -102, 47, -516, -516, -516,
	-516, -516, -516, 52, -516, -516, -130, 455, 532, -64,
	-155, -172, 72, 70, -430, -430, -430, -430, -64, -64,
	42, 30, 30, -64, -64, 319, 319, -64, -64, 532,
	532, -64, -102, -64, 532, -138, 370, 532, -336, 47,
	47, -336, -170, 148, 532, 532, 64, 64, 41, 260,
	42, 130, 64, 532, 532, -80, -128, 489, 532, 483,
	483, -318, 70, -66, 132, 155, -64, -93, 541, -64,
	354, -336, 532, 47, 47, 532, -337, 129, -337, -337,
	-108, -172, 532, 109, -260, -230, 117, -232, -64, -241,
	-277, -277, -291, 83, 74, 75, -277, -633, 531, -13,
	-280, 531, -303, -303, -5, -306, -307, -302, -317, 531,
	541, -214, -224, -233, -234, 51, -254, -255, 531, -37,
	150, -381, 531, 304, 271, -409, 70, 532, 541, -366,
	36, -357, -389, 449, 228, -347, -15, 122, 273, -435,
	-671, 36, -396, 531, 74, -654, -309, -638, -106, -103,
	-672, -102, 130, -107, -663, 393, -430, -618, 532, -608,
	64, 61, -614, 312, 23, -14, 531, 31, -438, -368,
	31, -425, -425, -64, -258, 23, 40, 83, -15, -102,
	-415, -416, 422, -357, -347, 122, -7, 284, 422, 23,
	-389, -633, 273, 30, 45, -600, -398, -604, -64, 286,
	500, 286, 64, 527, 36, 45, 64, -352, -414, -5,
	40, -364, 532, 252, 476, 299, 253, 309, 532, 532,
	532, 541, 36, -231, -223, 39, -231, -64, 47, 28,
	28, -418, 47, 23, -42, -418, -107, -264, -42, -429,
	-429, 61, 61, -7, -398, -7, -398, 61, -7, -7,
	-7, -7, -7, 449, 70, -7, -7, -7, -7, 464,
	-429, -364, -7, -7, -507, -7, 541, -100, -100, -107,
	541, -100, -100, -7, -507, 513, -64, 61, 276, -13,
	-13, -15, -13, 29, -429, -102, -102, -429, -107, -107,
	-7, -7, -7, 61, 64, -501, -7, 506, -503, -429,
	-514, -514, -514, -514, 52, -516, 532, 532, 532, -136,
	484, -64, -53, -64, -64, -64, 532, -130, 70, 532,
	532, -7, -64, -65, 64, -64, -64, -64, 532, 541,
	532, 531, -318, 532, 532, 435, 155, 532, -336, -327,
	-328, -326, -338, -339, 40, -340, 136, 47, 49, 43,
	50, 138, -336, -91, 306, 354, -136, -298, 87, 97,
	110, 532, 541, -7, 155, -291, 531, -64, -277, 531,
	-13, 532, -303, 532, 532, 532, 541, -308, 23, 123,
	-319, -320, -65, 40, -64, -221, -224, -225, 30, -225,
	105, 31, -253, 115, 116, 149, 47, 154, 151, 152,
	42, 153, 148, -256, -261, -6, -254, -102, -409, -16,
	-363, 227, 230, 233, 251, 298, 288, 308, 438, 439,
	21, -363, -49, -5, -355, 507, -381, -7, 27, 98,
	380, 532, -349, -430, -7, 513, 216, 58, 23, -260,
	-432, 541, 532, -120, 266, -655, -4, -452, 464, -659,
	130, -664, -666, -661, 348, 502, -670, 64, 532, 532,
	433, 433, -615, -616, 478, 354, -586, -178, 532, 29,
	-390, 83, -390, 532, -374, 337, 298, 531, -7, 532,
	541, -7, 422, 532, -430, -414, 246, -7, -178, 531,
	-688, -589, 531, -601, 64, 532, -440, -603, 23, -603,
	-15, -407, 531, 531, 531, -366, -375, 303, -375, 392,
	-375, -359, -155, 62, -395, -15, -15, 532, 29, 29,
	531, 23, -316, -7, -7, -24, 93, -24, 93, -7,
	61, -7, -398, 61, -611, -155, -442, -440, 531, -612,
	531, 531, 531, 532, -7, -7, -694, 36, 518, -694,
	34, -694, 130, -316, 532, -503, -503, 74, -509, -514,
	-137, -139, -5, -168, -171, -64, -174, -176, -175, -177,
	531, 238, 408, 293, -143, 388, 127, 294, -128, 130,
	-65, -128, -89, 499, 354, -342, 168, 36, 541, 23,
	532, 74, -64, 134, 139, -341, -339, 532, 306, -299,
	90, 89, 88, 93, -278, -230, -178, -13, -128, 532,
	532, -310, -307, 531, -312, -313, -5, 541, 532, 23,
	-65, -325, 23, 106, -64, 106, 105, -622, -622, -622,
	-622, 152, 31, 47, -102, 532, 541, -262, -268, -264,
	536, 40, 531, -278, -49, 532, -388, 531, -366, -409,
	127, 127, -380, -381, -349, -249, 506, 513, 513, -178,
	532, -392, -638, -641, 540, -107, -667, 51, -689, 262,
	-666, -662, 67, 411, -364, -430, 36, 36, -586, 478,
	-671, -396, -430, 307, -371, 354, -379, -376, -377, 74,
	79, 369, 429, -420, 531, -64, -613, 279, -416, -414,
	-7, -380, -349, 140, -414, -435, 532, -633, -588, 7,
	-276, -603, 301, 205, -361, -358, -9, -128, -128, -425,
	531, -425, -430, -425, 531, -162, -385, -231, -64, 298,
	-38, 83, 449, 449, -7, -24, 93, -7, -678, 130,
	-678, -679, -679, -679, -64, -17, -17, -15, -15, -13,
	-429, -510, -429, -505, -429, 541, 23, 541, 532, 531,
	531, 425, 532, -144, -145, 37, 467, 120, -64, -144,
	-144, -64, 532, 532, 155, -343, 145, 144, 140, 134,
	140, 134, 141, 142, -328, -6, 136, 532, 74, -14,
	91, 91, -212, 532, 532, -303, 532, 541, -107, 130,
	-320, 541, -6, -337, -5, -227, -228, 109, 97, 98,
	-229, 109, 96, 70, -102, -102, -102, -102, -14, 536,
	47, -14, 536, -261, -257, -263, -268, -388, -389, -383,
	-384, -5, -302, 531, -49, -381, -409, -357, -435, 506,
	506, -671, -394, 303, 531, -654, 273, 531, -660, 411,
	437, -622, 130, 286, 286, 23, 531, 449, 309, -377,
	74, -376, 74, 97, 98, -419, 532, 23, -15, -414,
	422, -357, -7, 531, 532, 541, 532, 541, -100, 532,
	532, -390, -14, -390, -258, -390, -155, -163, -162, 532,
	-420, -64, -7, -7, 449, -417, 391, 87, 509, -417,
	532, 532, 532, 532, -694, 64, -139, -140, -171, -128,
	-128, 531, -146, 270, -145, 377, 283, 411, 377, 283,
	-146, -146, -341, 143, 143, 140, 140, 134, 140, 134,
	140, 138, 136, 93, 70, 70, -278, -282, 23, -134,
	399, 532, -313, -314, -315, 4, 40, 31, 47, 128,
	124, -66, 123, 110, 93, 110, -222, 102, 531, 40,
	86, 107, 108, -14, 536, 532, 541, -389, 532, 541,
	-223, -223, -64, -388, -409, -49, -381, -373, 531, -260,
	-688, -64, -669, -5, 262, -440, -440, -178, -7, -378,
	354, 35, 24, 93, -378, 532, 440, -606, -7, 422,
	-414, 532, 7, -358, 61, -364, 532, -364, -374, -278,
	532, -163, -24, -24, -7, 70, -440, -15, -503, 532,
	532, -168, 120, 71, 455, 354, 30, 532, 74, 74,
	140, 140, -339, -5, -14, -14, -5, 531, -315, -65,
	-65, 47, -65, -317, 531, -212, -232, -211, 86, 531,
	-263, -384, -395, -395, 532, -389, -49, -388, -409, -396,
	-393, -230, 532, -633, 532, 411, 541, 541, -671, 195,
	47, 40, -414, -7, 531, -379, -364, -24, -15, -429,
	532, 411, 501, -145, 146, 146, 74, 61, 83, 93,
	93, -64, 123, -322, -323, -5, 131, 155, 532, -128,
	-223, -388, -389, -49, -389, 532, 541, -394, 531, -667,
	61, 64, -258, -258, -414, -128, -364, 147, 147, 136,
	-67, -633, 166, -5, -5, -5, 532, -312, 532, 541,
	130, -107, -346, 128, -222, -222, 102, 532, -395, -389,
	-388, -278, -230, -373, -665, -668, -100, 6, -102, -6,
	273, 433, 433, 532, 40, 531, 532, -338, -323, 124,
	-324, -344, 29, 128, 7, -232, -389, -396, 532, 541,
	-688, 36, 36, -67, -81, 532, -342, -324, -324, 7,
	123, 23, 155, -389, -668, -633, 286, 286, 83, -130,
	-343, -342, -338, 531, -7, -222, -278, 531, -440, -440,
	-5, 532, -341, -343, -322, 123, -665, -341, 532, 531,
	532, -322, 532,
}

var yyDef = [...]int16{
	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
	90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 2938, 2938, 1531, -2, 0, 1813, -2, 1876,
	1876, 0, 0, 0, 2938, 0, 2938, 2938, 0, 0,
	0, 0, 0, 1618, 1890, 1886, 0, 1886, 2305, 2306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 155, 155, 0, 0, 0, 0, -2, 1522, 1617,
	0, 2281, 2282, 1653, 0, 1564, 0, 0, 0, -2,
	2941, 2936, 2937, 2693, 0, 0, 0, 0, 1618, 0,
	1812, 0, 0, 2837, 0, 114, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 0, 0, 0, 0, 0, 1941, 1942, 0,
	0, -2, 2114, 2814, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1875,
	0, 0, 0, 0, 0, 2316, 0, 0, 0, 2312,
	2313, 2314, 0, 0, 2318, 2319, 2320, 0, 0, 0,
	1859, 0, 1862, 1863, 1864, 1865, 1866, 1867, 0, 2237,
	314, 425, 459, 2242, 2641, 0, 542, 198, 415, -2,
	406, 492, 2656, 131, 132, 133, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 178, 179, 180, 181, 182,
	183, 184, 185, 186, 187, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 197, 199, 200, 201, 202, 203,
	204, 205, 206, 207, 208, 209, 210, 211, 212, 213,
	214, 215, 216, 217, 218, 219, 220, 221, 222, 223,
	224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 280, 281, 282, 283,
	284, 285, 286, 287, 288, 289, 290, 291, 292, 293,
	294, 295, 296, 297, 298, 299, 300, 301, 302, 303,
	304, 305, 306, 307, 308, 309, 310, 311, 312, 313,
	315, 316, 317, 318, 319, 320, 321, 322, 323, 324,
	325, 326, 327, 328, 329, 330, 331, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 349, 350, 351, 352, 353, 354, 355,
	356, 357, 358, 359, 360, 361, 362, 363, 364, 365,
	366, 367, 368, 369, 370, 371, 372, 373, 374, 375,
	376, 377, 378, 379, 380, 381, 382, 383, 384, 385,
	386, 387, 388, 389, 390, 391, 392, 393, 394, 395,
	396, 397, 398, 399, 400, 401, 402, 403, 404, 405,
	407, 408, 409, 410, 411, 412, 413, 414, 416, 417,
	418, 419, 420, 421, 422, 423, 424, 426, 427, 428,
	429, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 457, 458,
	460, 461, 462, 463, 464, 465, 466, 467, 468, 469,
	470, 471, 472, 473, 474, 475, 476, 477, 478, 479,
	480, 481, 482, 483, 484, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 496, 497, 498, 499, 500,
	501, 502, 503, 504, 505, 506, 507, 508, 509, 510,
	511, 512, 513, 514, 515, 516, 517, 518, 519, 520,
	521, 522, 523, 524, 525, 526, 527, 528, 529, 530,
	531, 532, 533, 534, 535, 536, 537, 538, 539, 540,
	541, 543, 544, 545, 546, 547, 548, 549, 550, 551,
	552, 553, 554, 555, 556, 557, 558, 2251, 2243, 542,
	459, 425, 2247, 2248, 198, 314, 332, 406, 415, 492,
	2941, 2693, 2941, 0, 2941, 0, 2926, 425, 459, 542,
	413, 2928, 459, 3147, 141, 0, 3003, 3004, 3008, 2501,
	2501, 2501, 179, 2501, 0, 0, 3003, 2501, 2252, 1886,
	1618, 0, 2265, 2266, 2267, 2268, 2269, 2270, 2271, 2630,
	1884, 0, 1889, 2277, 0, 1885, 2283, 542, 459, 425,
	2287, 0, 2293, 0, 0, 2307, 2308, 2309, 2310, 2311,
	3117, 1638, 3121, 3123, 0, -2, -2, -2, -2, 171,
	394, 3142, 3142, -2, -2, 3139, 3140, 1236, 0, 0,
	1234, 3122, 3143, 3144, 3157, 3159, 373, 3161, 3163, 3164,
	3165, 3168, 3169, 1453, 1235, 0, 154, 0, 1876, 3213,
	3216, 3217, 3219, 0, 3221, 0, 1373, 0, -2, -2,
	1450, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 580, 581, -2, 0, 2846, 2846, 2846, 0,
	-2, 1535, 1536, 0, 1536, 0, 1569, 0, 1652, 1654,
	1563, 1592, 1593, 146, 0, 0, 1614, 389, 1619, 149,
	1615, 0, 2, 2934, 0, 2935, 2692, 2680, 0, 0,
	2686, 0, 0, 0, 1597, 0, 0, 0, 3148, 3149,
	3150, 3151, 3152, 2501, 0, 0, 0, 0, 127, 0,
	0, 0, 0, 0, 0, 1876, 2836, -2, 0, -2,
	283, 1882, 165, 0, 202, 264, 1519, 0, 1505, 1506,
	1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516,
	1517, 1518, 2522, 0, 0, 283, 2044, 283, 0, 0,
	2586, 283, 319, 2044, 2151, 2152, 2153, 2154, 2155, 2674,
	2675, 2676, 2677, 0, 0, 2736, 0, 0, 149, 283,
	115, 2701, 0, 0, 0, 2044, 2044, 1943, 1944, 1945,
	1946, 0, 283, 0, 3281, 283, 0, 0, 283, 0,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3288, 0, 3281, 0, -2, 3095, 0, 2151, 0, 202,
	264, 0, 0, 0, 283, 3281, 0, 3281, 0, 0,
	0, 0, 0, 0, 0, -2, 2951, 0, 319, -2,
	2951, 0, 0, 283, 0, 0, 0, 2990, 0, 283,
	119, 167, 283, 119, 142, 0, 283, 119, 283, 1873,
	1439, 0, 1440, 1441, 1442, 1443, 1444, 1253, 1447, 1457,
	1460, 1461, 1462, 1463, 1464, 1500, 245, 1457, 1457, 1457,
	1470, 1471, 1472, 1473, 1474, 1496, 1496, 1239, 1493, 1448,
	1449, 1498, 1486, 1498, 1498, 1481, 0, 1498, 119, 283,
	0, 319, 2956, 283, 2149, 2954, 283, 2958, 283, 2315,
	0, 2317, 0, 1857, 1858, 1861, 127, 2238, 425, 2239,
	200, 0, 2240, 0, 0, 0, 0, 0, 0, 2644,
	2645, 2646, 2669, 2670, 2647, 2672, 2673, 0, 2244, 0,
	2246, 2922, 2923, 2924, 2932, 2925, 0, 2933, 2927, 2931,
	0, 0, 0, 0, 0, 3005, 0, 3010, 0, 3011,
	3012, 3013, 3014, 0, 0, 0, 0, 1618, 2254, 0,
	2256, 2264, 546, 2259, 2260, 2261, 2629, 1886, 1883, 0,
	2274, 2276, 2278, 149, 0, 2284, 0, 2286, 0, 2296,
	0, -2, 127, 127, 127, 2300, 2301, 2302, 2303, 0,
	0, 3124, 0, 3141, 0, 0, 0, 3142, 3142, 0,
	0, 0, 3142, 3142, 0, 3142, 3142, 1237, 1238, 3153,
	0, 3160, 3162, 3166, 0, 3172, 152, 3315, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2316, 1868, 1869, 1870, 1871, 1872, 0,
	0, 3218, 3220, 0, 1374, 1258, 0, 1261, 2901, 1548,
	1545, 0, 2898, 2899, 1549, 0, 0, 0, 1557, 0,
	2844, 2845, 0, 0, 0, -2, 0, 1533, 1534, 1659,
	1568, 1570, 1574, 1575, 1112, 0, 0, 0, 0, 0,
	0, 2013, 1179, 1202, 1203, 1266, 0, 1206, 1207, 1208,
	505, 0, 1213, 1214, 509, 1501, 352, 538, 1256, 1221,
	1222, 1223, 1224, 1225, 1226, 1227, 1228, 0, 0, 0,
	1389, 1524, 1526, 1270, 1216, 1217, 1218, 1219, 1220, -2,
	519, 516, 561, 1272, 1273, 1275, 1277, 1279, 1281, 1282,
	1283, 1284, 1285, 1286, -2, 0, 506, 530, 534, 535,
	541, 544, 545, 531, 502, 508, 525, 549, 550, 552,
	554, 551, 555, 556, 518, 515, -2, 521, 522, 526,
	520, 517, 524, 557, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 527, -2, -2, -2, -2, -2,
	-2, -2, 1475, 1476, 1477, 1478, 1659, 0, 1594, 147,
	1595, 0, 0, 0, 1616, 0, 0, 0, 1429, 2939,
	0, 0, 2682, 0, 2684, 2685, 2687, 0, 1777, 0,
	1598, 0, 1799, 0, 0, 0, 2501, 283, 0, 2501,
	0, 2537, 283, 114, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 1947, 0, 2507, 0, 0, 1881, 166,
	0, 2520, 0, 2815, 0, 0, 2521, 0, 0, 0,
	0, 0, 2527, 0, 0, 2545, 2042, 2043, 0, 0,
	0, 283, 2590, 0, 0, 0, 0, 2961, 0, 0,
	0, 0, 0, 0, 0, 0, 2770, 0, 0, 0,
	0, 0, 2961, 2961, 2124, 2137, 2224, 0, 2145, 0,
	0, 0, 2224, 2224, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2216, 0, 0, 0,
	2126, 2128, 0, 0, 0, 3280, 0, 0, 0, 2129,
	0, 2540, 0, 2022, 0, 0, 0, 2026, 2041, 2029,
	0, 0, 0, 0, 2044, -2, 2039, 0, 2131, 2224,
	0, 0, 3281, 283, 0, 0, 283, 0, 2288, 0,
	2289, 0, 0, 0, 2334, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3298, 3288, 3284, 0, 0, 3303,
	3287, 2250, 3289, 3302, 3294, 0, 3296, 3297, 3299, 3300,
	0, 2511, 0, 0, 0, 0, 0, 0, 3092, 0,
	0, 0, 3062, 3280, 0, 0, 3066, 3067, 3068, 3069,
	0, 0, 3074, 0, 0, 0, 0, 3079, 0, 2454,
	3093, -2, 0, 0, 2979, 2980, 0, 0, 0, 0,
	0, 2329, 0, 0, 0, 0, 3092, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3092, 0, 0, 0,
	0, 0, 0, 2583, 2584, 0, 0, 0, 0, 0,
	0, 0, 0, 2795, 2796, 0, 0, 0, 0, 0,
	0, 2963, 0, 0, 0, 0, 0, 2963, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3100, 0, 3101, 0,
	2552, 1876, 0, 0, 0, 1851, 0, 0, 1854, 0,
	0, 2226, 117, 118, 0, 0, 2228, 0, 0, 0,
	2231, 0, 1431, 1435, 1439, 1445, 0, 1240, 1241, 1242,
	1243, 1244, 1245, 1254, 1458, 1457, 0, 1465, 0, 1466,
	1467, 1468, 1469, 0, 1490, 0, 0, 0, 1492, 1488,
	1497, 0, 1479, 1480, 1498, 1498, 1484, 2233, 0, 119,
	283, 0, 0, 0, 0, 0, 0, 1860, 2321, 2322,
	2323, 2324, 0, 0, 0, 2648, 2649, 2651, 2642, 2652,
	2654, 2658, 2660, 2661, 1847, 1848, 1849, 1850, 2653, 2655,
	2657, 2643, 2662, 2663, 0, 2666, 2667, 2668, 2650, 2678,
	2679, 2245, 413, 2930, 1618, 0, 2819, 0, 3015, 0,
	421, 0, 272, 379, 409, 227, 244, 307, 308, 362,
	415, 452, 464, 0, 150, 3049, 3009, 0, 0, 144,
	0, 0, 0, 3049, 0, 2253, 1618, 0, 2258, 2262,
	2263, 1888, 2277, 0, 2280, 2277, 2285, 2291, 2292, 0,
	0, 0, 0, 114, 2304, 3120, 3112, 3113, 3114, 3115,
	0, 3125, 3126, 3127, 3128, 0, 0, 3131, 3132, 3133,
	0, 0, 3136, 0, 0, 0, 3167, 0, 2148, 0,
	119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 264, 0, 0, 0, 0, 0, 0, 0,
	1876, 3212, 1375, 0, 1522, 0, 0, 0, 1382, 1384,
	0, -2, 1259, 1262, 1263, 1451, 134, 135, 136, 137,
	138, 582, 583, 584, 585, 586, 587, 588, 589, 590,
	591, 592, 593, 594, 595, 596, 597, 598, 599, 600,
	601, 602, 603, 604, 605, 606, 607, 608, 609, 610,
	611, 612, 613, 614, 615, 616, 617, 618, 619, 620,
	621, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 636, 637, 638, 639, 640,
	641, 642, 643, 644, 645, 646, 647, 648, 649, 650,
	651, 652, 653, 654, 655, 656, 657, 658, 659, 1260,
	0, 1539, 2900, 1540, 1547, 1550, 0, 0, 1552, 0,
	1554, 0, 2896, 2897, 2902, 2910, 2911, 0, 2920, 2921,
	2908, 0, 2912, -2, 0, 0, 1560, 0, 1565, 1566,
	1567, 2862, 2863, 1929, 2901, 1548, 1577, 0, 0, 0,
	714, 682, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514,
	1515, 1516, 1517, 1518, 0, 675, 929, -2, 0, -2,
	1016, 847, 1150, 1152, -2, 826, 0, 0, 1573, -2,
	926, 1409, 139, 140, 660, 661, 662, 663, 664, 665,
	666, 667, 668, 669, 670, 671, 672, 673, 674, 676,
	677, 678, 679, 680, 681, 683, 684, 685, 686, 687,
	688, 689, 691, 692, 693, 694, 695, 696, 697, 698,
	699, 700, 701, 702, 703, 704, 705, 706, 707, 708,
	709, 710, 711, 712, 713, 715, 716, 717, 718, 719,
	720, 721, 722, 723, 724, 725, 726, 727, 728, 729,
	730, 731, 732, 733, 734, 735, 736, 737, 738, 739,
	740, 741, 742, 743, 744, 745, 746, 747, 748, 749,
	750, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 765, 766, 767, 768, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 822, 823, 824, 825, 827, 828, 829, 830, 831,
	832, 833, 834, 835, 836, 837, 838, 839, 840, 841,
	842, 843, 844, 845, 846, 848, 849, 850, 851, 852,
	853, 854, 855, 856, 857, 858, 859, 860, 861, 862,
	863, 864, 865, 866, 867, 868, 869, 870, 871, 872,
	873, 875, 876, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 897, 898, 899, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
	924, 925, 927, 928, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 969, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 979, 980, 981, 982, 983, 984, 985,
	986, 987, 988, 989, 990, 991, 992, 993, 994, 995,
	996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005,
	1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
	1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
	1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
	1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
	1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
	1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,
	1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076,
	1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086,
	1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096,
	1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106,
	1107, 1108, 1109, 1110, 1111, 1117, 1118, 1132, 1135, 1136,
	0, 0, 0, 1204, 1429, 0, -2, 1209, 1210, 1211,
	1212, 0, 0, 0, 0, -2, 1229, 0, 1231, 1253,
	0, 0, 1388, 1526, 0, 2874, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1332, 0, 1332,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1729, 1729, 0, 0, 0, 0, 0,
	0, 0, 0, 1577, 0, 0, 0, 1620, 1624, 0,
	0, 1631, 0, 0, 0, 0, 1411, 1413, 0, 0,
	1527, 0, 0, 2940, 2681, 2683, 0, 0, 2691, 1912,
	1779, 0, 0, 0, 0, 1577, 1790, 0, 0, 1266,
	1599, 1637, 0, 0, 1808, 1808, 1805, 1806, 1950, 0,
	0, 2102, 0, 0, 2123, 0, 2534, 2536, 0, 0,
	0, 283, 113, 2433, 0, 2433, 0, 2457, 2458, 0,
	0, 0, 2519, 0, 0, 0, 0, 0, 2636, 2635,
	2637, 2638, 2639, 2640, -2, 114, 2002, 0, 1454, 0,
	2718, 2720, 0, 0, 1520, 1673, 0, 0, 0, 0,
	0, 0, 2529, 0, 2542, 0, 2577, 1950, 0, 0,
	0, 2589, 2585, 0, 0, 2600, 2601, 0, 2943, 0,
	283, 2501, 0, 0, 2735, 2742, 0, 0, 0, 0,
	2701, 2777, 0, 451, -2, 2501, 2785, 0, 2700, 0,
	0, 0, 2942, 2944, 0, 0, 0, 0, 2223, 0,
	2188, 2189, 0, 0, 2209, 0, 0, 0, 0, 2156,
	283, 0, 2180, 0, 0, 2059, 0, 2013, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2202, 0, 0, 2204, 2205,
	0, 2210, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2023, 0, 2027, 2032, 2033, 2024, 2025,
	0, 2040, 2030, 2031, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2133, 2224, 0, 0, 0, 0, 2135,
	2224, 0, 0, 2577, 0, 0, 0, 0, 2326, 2327,
	0, 0, 2422, 2423, 2424, 2425, 2427, -2, 2429, 0,
	0, 0, 0, 3282, 0, 0, 0, 0, 0, 3283,
	3298, 2249, 452, 0, 3290, 0, 3301, 3295, 0, 0,
	2222, 0, 0, 0, 0, 0, 2514, 0, 2623, 0,
	0, 0, 0, 0, 3059, 3063, 3091, 0, 2453, 415,
	425, 459, 0, 0, 0, 0, 0, 3072, 3073, 3075,
	3076, 3077, 3078, 3080, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2753, 0, 0, 3060, 415,
	0, 0, 0, 2773, 2775, 2774, 2776, 0, 0, 3061,
	415, 0, 0, 0, 0, 0, 2582, 0, 2587, 2588,
	0, 2789, 0, 2790, 2701, 0, 0, 2797, 0, 0,
	3281, 0, 2724, 0, 2725, 2728, 0, 2945, 2947, 0,
	0, 2948, 0, 0, 2946, 2949, 2950, 0, 2737, 2738,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 0, 0,
	0, 0, 2550, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2988, 2989, 0, 0, 0,
	0, 0, 1852, 1853, 119, 168, 119, 143, 119, 0,
	1874, 119, 0, 0, 1432, 1436, 0, 0, 0, 0,
	0, 0, 1459, 0, 0, 0, 0, 0, 0, 0,
	0, 1482, 1483, 119, 2235, 0, 0, 0, 2150, 2957,
	2955, 2959, 2634, 0, 0, 1253, 0, 2929, 3145, 0,
	3146, 0, 0, 3016, 3017, 0, 0, 3020, 3097, 3021,
	3022, 3023, 3024, 3025, 0, 3027, 3050, 3052, 3028, 3029,
	3030, 0, 0, 0, 0, 0, 2984, 0, 0, 0,
	0, 3006, 2500, 0, 0, 3003, 119, 0, 2255, 2257,
	2277, 1887, 2273, 2279, 2275, 2296, 2295, 2294, 2297, 2298,
	2299, 0, 0, 0, 3116, 3129, 3130, 3134, 3135, 3137,
	3138, 3156, 153, 3170, 2147, 0, 0, 0, 3177, 3179,
	3181, 3313, 3314, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1376, 0, 0, 1521, 1522, 1522, 1522, 0, 0, 1264,
	1261, 1546, 0, 1555, 0, 0, 0, 2913, 0, 0,
	-2, -2, 0, 2909, 2918, 2919, 2914, -2, -2, 2915,
	1551, 1558, 0, 1556, 0, 0, 1932, 1927, 1928, 1543,
	1544, 1634, 0, 1658, -2, -2, 314, 275, -2, 0,
	164, 1571, 1113, 1114, 0, 1116, 1119, 1120, 1121, 1122,
	1123, 1124, -2, -2, -2, -2, -2, -2, 1131, 1133,
	1134, -2, 1412, 1414, 0, 1527, 0, -2, 0, 1149,
	0, 1154, 1156, 1158, 0, 1171, 1173, 0, 1428, 1415,
	1416, 1417, 1418, 1419, 0, 0, 1528, 1166, 1529, 0,
	0, 1406, 1407, 1408, 1572, 0, 1153, 0, 0, 1170,
	2011, 0, 1267, 1266, 0, 0, 0, 1397, 1398, 0,
	0, 0, -2, 1522, 1232, 0, 1394, 1390, 0, 2874,
	0, 1269, 0, 0, 1720, 1112, 0, 1725, 1763, 0,
	0, 0, 0, 0, 0, 0, 0, 1342, 1343, 1344,
	1345, 1346, 1347, 1348, 1349, 0, 0, 0, 1384, 1331,
	0, 0, 1180, 0, 0, 0, 538, 0, 0, 1384,
	0, 0, 0, 0, 0, 1429, 0, 1340, 0, 0,
	0, 0, 0, 0, 0, 1354, 1357, 0, 0, 0,
	0, 0, 1720, 0, 1714, 0, 1384, 1723, 1763, 0,
	1712, -2, 1428, 0, 1729, 1326, 0, 0, 0, 0,
	1634, 0, 1596, 1632, 0, 1622, 0, 148, 1430, 2688,
	2689, 2690, 1934, 0, 0, 1784, 1785, 0, 1786, 1266,
	1783, 1778, 1637, 0, 0, 0, 1795, 1794, 1934, 0,
	1798, 1578, 1640, 1640, 0, 1584, 0, 1649, 1640, 1640,
	1663, 411, 558, 523, 146, 1370, 1371, 1372, 514, 0,
	0, 1807, 0, 0, 1949, 144, 1951, 1953, 1954, 1955,
	0, 1979, 0, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2447, 2432, 2434, 0, 0, 0,
	2439, 2440, 0, 2412, 2413, 2415, 2447, 0, 2460, 2462,
	2463, 2464, 2466, 2459, 0, 2518, 0, 0, 0, 0,
	2606, 2610, 2608, 1448, 0, 2834, 2501, 0, 2506, 0,
	0, 0, -2, 2510, 1455, 2717, 0, 0, 0, 2821,
	0, 1672, 1674, 0, 2619, 2533, 2523, 2524, 2525, 2526,
	0, 2544, 0, 0, 0, 2549, 2044, 1994, 2576, 2574,
	0, 0, 0, 0, 0, 0, 0, 2586, 0, 0,
	2960, 2964, 0, 0, 0, 0, 0, 0, 0, 2974,
	2975, 0, 0, 0, 0, 0, 2102, 0, 2123, 2744,
	0, 0, 2759, 2760, 0, 2765, 2767, 2768, 0, 149,
	2701, 2772, 0, 2501, 0, -2, 2787, 2787, 0, 0,
	0, 2146, 2357, 0, 0, 2185, 2187, 0, 2208, 3233,
	0, 2401, 2404, 0, 127, 0, 2158, 283, 1977, 0,
	0, 0, 2392, 0, 0, 0, 0, 0, 1878, 0,
	2392, 283, 119, 283, 119, 2182, 2186, 2190, 2193, 2194,
	0, 0, 0, 0, 2198, 0, 2195, 2196, 2197, 2201,
	0, 2203, 0, 2206, 2211, 2713, 2714, 2715, 0, 0,
	0, 2705, 2707, 426, 174, 246, 0, 1998, 2125, 2138,
	2224, 0, 0, 2365, 0, 2220, 2127, 0, 0, 2359,
	3240, 2028, 2034, 2035, 2036, 2038, 2130, 0, 2541, 0,
	2361, 0, 3242, 2132, 2224, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, -2, 0,
	2337, 3222, 3249, 2325, 0, 0, 2421, 0, 2420, 1457,
	2426, 1457, 1457, 2338, 3223, 3250, 2339, 3224, 3251, 2340,
	3252, 3285, 3286, 3291, 3292, 3293, 2341, 0, 2512, 119,
	283, 2221, 2513, 3225, 0, 0, 2392, 2517, 3253, 2344,
	3227, 3254, 0, 0, 0, 3070, 3071, 2345, 2953, 0,
	0, 0, 0, 3228, 0, 3081, 3085, 3257, 2330, 0,
	0, 0, 2755, 0, 0, 2351, 3231, 3260, 0, 2352,
	3271, 2353, 3232, 3261, 0, 2354, 3262, 2355, 3269, 2356,
	2701, 2791, 2701, 2701, 3272, 0, 0, 0, 0, 0,
	2726, 2727, 2382, 2962, 2952, 2383, 0, 2384, 3264, 2385,
	2763, 1855, 1856, 3235, 3265, 0, 0, 0, 0, 0,
	0, 3312, 0, 0, 0, 0, 0, 0, 0, 0,
	2390, 0, 0, 0, 0, 119, 2617, 283, 119, 0,
	3248, 3102, 0, 0, 3263, 1878, 2551, 0, 2554, 2555,
	2556, 0, 2558, 2559, 2560, 202, 264, 2563, 2564, 0,
	2566, 3226, 0, 0, 0, 0, 0, 0, 0, 2225,
	2227, 2229, 0, 2232, 1437, 0, 0, 0, 1446, 1246,
	1247, 1248, 1249, 1250, 1251, 1252, 0, 1456, 1499, 1496,
	1494, 1495, 1496, 0, 1485, 2234, 119, 0, 0, 2628,
	0, 2241, 2659, 2664, 0, 2820, 3041, 3036, 3038, 0,
	151, 0, 3019, 0, 3026, 3054, 0, 0, 0, 0,
	0, 0, 0, 3049, 3043, 0, 0, 3007, 145, 3049,
	0, 2986, 0, 2272, 2290, 0, 3118, 3119, 3171, 3173,
	3180, 3174, 3175, 0, 0, 3182, 3200, 3201, 3183, 3184,
	3185, 3186, 3187, 3188, 3189, 0, 0, 0, 244, 0,
	3193, 3194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1377, 0, 1383, 0, 0,
	0, 0, 1385, 1386, 0, 1260, 1553, 2903, 0, 2906,
	0, 2916, 2917, 0, 0, 1559, 2864, 1932, 1503, 0,
	2866, 0, 2848, 0, 1576, 0, 0, 155, 155, 155,
	155, 0, 163, 0, 0, -2, -2, 0, 0, 0,
	1167, 0, -2, 1151, 1155, 1157, 1159, 0, 1172, 1175,
	0, 1428, 0, 1174, 1177, 0, 0, 1420, 1421, 1422,
	1423, 0, 0, 0, 1168, 0, 0, 0, 0, 2012,
	1205, 1430, 1395, 1396, 0, 1215, 1502, -2, 0, 0,
	0, 1391, 0, 0, 1268, 0, 2872, 2873, 2877, 0,
	1428, 0, 0, 0, 0, 1723, 0, 1704, 1762, 0,
	0, 1274, 1276, 1278, 1280, 0, 1289, 0, 1290, 0,
	1292, 1293, 0, 1294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1182, 1183, 1197, 1295, 1296, 0, 0, 0, 0,
	0, 0, 0, 1301, 0, 1339, 0, 1303, 1304, 1305,
	1306, 0, 1311, 0, 0, 1360, 0, 0, 0, 0,
	1317, 1428, 0, 1319, 1763, 1729, 0, 0, 0, 1729,
	1322, 0, 1324, 0, 0, 0, 0, 0, 2848, 1655,
	1618, 1623, 1776, 0, 1915, 0, 0, 0, 1788, 1934,
	1791, 1792, 0, 0, 1797, 1635, 223, 0, 0, 0,
	0, 0, 1611, 1611, 1611, 1609, 1580, 1639, 0, 1644,
	1582, 1640, 1649, 1640, 1640, -2, 1584, 0, 1586, 1645,
	0, 1644, 1588, 1590, 1660, 0, 0, 0, 0, -2,
	0, 2044, 1809, 1810, 1811, -2, 2092, 0, 1959, 2094,
	0, 1979, 2106, 0, 0, 2101, 2501, 0, 3157, 0,
	2122, 0, 2537, 2117, 0, 2433, 0, 2428, 2409, 2445,
	0, 0, 2435, 2436, 2441, 2437, 2438, 0, 2411, 0,
	0, 0, 2410, 0, 0, 0, 0, 2602, 2603, 0,
	0, 0, 2609, 0, 0, 0, 0, 2123, 0, 0,
	0, 2509, 2001, 0, 2004, 2005, 0, 0, 2050, 2013,
	0, 0, 0, 0, 0, 2007, 0, 2719, 2721, 2694,
	2695, 2696, 2697, 2698, 2699, 352, 1507, 1508, 0, 2531,
	0, 1678, 0, 2618, 2620, 2528, 0, 2546, 2547, 2548,
	2545, 2567, 0, 2575, 2570, 2578, 2571, 2573, 2572, 2092,
	1979, 0, 0, 2590, 1994, 0, 2965, 2966, 2967, 0,
	0, 2970, 2971, 0, 0, 0, 0, 2978, 2634, 0,
	2123, 0, 0, 2734, 2751, 0, 2741, 0, 0, 0,
	0, 0, 2771, 2778, 2787, 0, 2787, 2782, 0, 2784,
	2701, 0, 0, 0, 0, 2207, 2711, 2712, 2400, 0,
	0, 0, 2217, 0, 1989, 2218, 2219, 0, 0, 1973,
	1976, 0, 2058, 2117, 0, 0, 2062, 0, 0, 2392,
	0, 0, 2116, 2160, 0, 0, 0, 0, 2173, 0,
	2179, 2016, -2, 0, 2181, 0, 2177, 0, 2184, 2191,
	2199, 2192, 2200, 2212, 2213, 0, 0, 2214, 2704, 0,
	2708, 2709, 2710, 1997, 1999, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2363, 0, 3244, 0, 2134, 2224, 0, 0, 2367,
	0, 3246, 2136, 2224, 0, 0, 2568, 0, 2328, 2418,
	2419, 0, 1457, 0, 2515, 0, 2622, 0, 2625, 0,
	3064, 0, 2346, 3255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3273, 0, 0, 0, 0, 0, 2757,
	0, 2752, 0, 0, 0, 2794, 2792, 2793, 0, 0,
	0, 2381, 3270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2613, 0, 3103, 0, 3105, 3099, 0, 0, 2553, 0,
	0, 0, 0, 0, 0, 0, 2991, 2992, 2993, 3256,
	119, 1438, 1433, 0, 1255, 1489, 1491, 1487, 2236, 2598,
	0, 2632, 0, 0, 3049, 0, 0, 3039, 3018, 3098,
	0, 3051, 3053, 0, 0, 0, 0, 0, 2985, 0,
	3044, 3045, 3046, 3047, 3048, 119, 0, 3049, 3111, 3176,
	3178, 0, 0, 0, 0, 0, 0, 3198, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1522,
	1378, 1380, 1381, 1265, 2904, 0, 2907, 0, 1404, 0,
	2865, 0, 1930, 1931, 2861, 0, 1633, 156, 157, 0,
	0, 0, 0, 162, 1115, -2, 0, 0, -2, 0,
	0, -2, 0, 0, 1176, 1178, -2, 1425, 1427, 0,
	0, 1530, 0, -2, 0, 1401, 0, -2, 1399, 1377,
	1233, 1387, 1393, 0, 0, 2879, 2876, 0, 1729, 0,
	0, 1716, 1717, 1729, 0, 1761, 1271, 0, 1341, 0,
	0, 1181, 1184, 1185, 1186, 1187, 1188, 1189, -2, -2,
	-2, -2, -2, -2, 1196, 0, 0, 1200, 1352, 0,
	1335, 1336, 0, 1298, 1299, 1300, 1338, 0, 1307, 0,
	1355, 1356, 0, 0, 0, 1313, 1681, 0, 192, 1314,
	0, 1369, 0, 1729, 1715, 1728, 0, 1713, 0, 0,
	0, 1323, 1325, 1708, 1708, 1708, 0, 2861, 0, 1933,
	0, 0, 0, 1780, 1781, 0, 1787, 1789, 0, 1796,
	0, 1579, 0, 0, 0, 0, 0, 1606, 1610, 1607,
	1608, 1581, 0, 1642, 0, 1583, 1587, 1589, 1591, 1600,
	1642, 0, 0, 1662, 0, 0, 553, 0, 0, 1819,
	2044, 0, 1879, 2094, 0, 1952, 1956, 2102, 2093, 0,
	0, 1980, 1982, 1983, 2002, 0, 2108, 0, 128, 129,
	1950, 0, 0, 0, 2634, 2505, 2123, 2535, 0, 0,
	2447, 0, 2450, 2448, 0, 0, 0, 2414, 2416, 2417,
	2468, 2461, 2465, 0, 0, 2607, 0, 2611, 0, 2612,
	0, 2839, 0, 0, 0, 283, 2636, 0, 2006, 2008,
	2049, 2701, 2701, 0, 2054, 2501, 0, 2014, 0, 2009,
	2010, 0, 1675, 1676, 0, 2532, 0, 2530, 2543, 0,
	2579, 0, 0, 1950, 0, 0, 0, 2595, 0, 2968,
	2969, 2972, 2973, 2976, 2977, 2626, 0, 2108, 0, 2485,
	2486, 0, 2729, 0, 2755, 0, 2743, 2745, 2746, 2747,
	2748, 2749, 2758, 2761, 2766, 2769, 0, 2779, 2780, 2781,
	2783, 0, 2788, 0, 0, 0, 2369, 2375, 2402, 2403,
	2406, 0, 2157, 0, 1994, 1972, 0, 1974, 1975, 2392,
	0, 2393, 0, 2395, 0, 0, 2111, 0, 2064, 0,
	0, 2069, 0, 1926, 1926, 0, 0, 2164, 2174, 1877,
	2020, 0, 0, 0, 0, 2168, 2170, 2171, 2169, 0,
	2017, 0, 0, 0, 0, 119, 119, 2215, 2716, 2706,
	2358, 0, 0, 3234, 0, 0, 3279, 2366, 0, 0,
	2360, 3241, 2371, 2362, 0, 3243, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2343, 3268, 2430,
	0, 2342, 119, 2392, 3274, 3065, 0, 0, 0, 0,
	2822, 2807, 0, 0, 0, 2823, 2824, 0, 0, 0,
	0, 3082, 3083, 3084, 3086, 3087, 3088, 3089, 3090, 2331,
	2333, 2332, 2349, 2740, 0, 0, 0, 3275, 3276, 2379,
	2380, 0, 2597, 2764, 2386, 3236, 2387, 3237, 3266, 2388,
	3238, 2389, 3239, 3267, 0, 0, 0, 0, 0, 119,
	2616, 0, 0, 122, 119, 0, 0, 0, 0, 0,
	0, 2997, 2998, 2999, 3000, 3001, 3002, 0, 0, 2230,
	1434, 0, 2633, 2665, 2981, 3037, 0, 3055, 3031, 3032,
	3033, 3034, 3035, 3042, 2982, 0, 119, 0, 0, 3190,
	0, 3192, 0, 0, 3202, 3214, 3215, 3203, 3204, 3205,
	3206, 3207, 3208, 0, 3210, 3211, 0, 2905, 1403, 1430,
	0, 2868, 0, 2846, 158, 159, 160, 161, -2, -2,
	0, 0, 0, -2, -2, 1424, 1426, -2, -2, 1169,
	1400, 1430, 1230, 1392, 1523, 1522, 0, 1525, 0, 1718,
	1719, 0, 1724, 0, 1288, 1291, 0, 0, 0, 1201,
	0, 0, 0, 1297, 1302, 0, 0, 548, 1312, 1358,
	1359, 1682, 0, 1683, 1679, 1680, 0, 0, 0, 1364,
	340, 0, 1320, 1721, 1722, 1321, 1729, 0, 1745, 1729,
	1363, 2868, 1627, 0, 0, 1918, 0, 0, 1793, 1636,
	1601, 0, 1603, 0, 0, 0, 1605, 0, 0, 0,
	1585, 0, 0, 0, 141, 0, 1664, 1668, 0, 0,
	0, 1934, 1801, 1901, 1901, 0, 1803, 1816, 0, 1819,
	0, 2102, 0, 0, 0, 130, 0, 1978, 0, 1984,
	0, 2094, 3158, 0, 0, 0, 1979, 0, 0, 3154,
	2496, 0, 0, 0, 0, 2407, 0, 1669, 0, 1452,
	-2, 2442, 0, 2443, 2478, 0, 2495, 0, 2604, 0,
	0, 0, 2841, 0, 0, 0, 1950, 0, 2508, 2003,
	0, 2110, 2110, 0, 2078, 0, 2015, 0, 1677, 2621,
	0, 1995, 0, 0, 0, 0, 1994, 0, 0, 0,
	2631, 0, 0, 0, 0, 2757, 2750, 0, 0, 0,
	2803, 2803, 0, 0, 0, 0, 0, 2159, 2002, 1970,
	1971, 2060, 2074, 2394, 2398, 2396, 2397, 2399, 2074, 0,
	2074, 0, 0, 1920, 116, 0, 1921, 0, 2161, 0,
	0, 2021, 2162, 0, 2166, 0, 1678, 2019, 2167, 2176,
	2183, 0, 0, 2148, 0, 2148, 0, 0, 2373, 3278,
	2364, 0, 3245, 0, 0, 2377, 2368, 0, 3247, 2431,
	2516, 2624, 2347, 3229, 3258, 2348, 0, 0, 0, 2813,
	0, 0, 0, 3230, 3259, 0, 0, 0, 0, 0,
	0, 0, 3308, 0, 2391, 2614, 2615, 3104, 1678, 0,
	2561, 2562, 2565, 0, 0, 0, 2599, 3040, 3049, 2987,
	3196, 3197, 3191, 3195, 0, 3209, 1379, 1405, 1504, 1561,
	0, 2860, 0, -2, -2, -2, 1402, 2883, 0, 1726,
	1727, 1760, 1351, -2, 0, 1337, 1333, 1334, 1308, 0,
	1309, 0, 1684, 1315, 1316, 0, 1365, 1318, 1754, 1707,
	1709, 0, 0, 0, 0, 1731, 1732, 1733, 1734, 1735,
	1736, 1739, 1743, 0, 1361, 0, 1562, 1630, 0, 0,
	1911, 1634, 0, 1914, 0, 1602, 0, 1613, 1604, 0,
	0, 1643, 0, 1646, 1648, 1663, 0, 1666, 0, 0,
	0, 1685, 0, 0, 1706, 1800, 1802, 0, 0, 0,
	1896, 0, 1818, 1820, 1821, 1882, 1882, 1824, 1825, 1882,
	1882, 0, 0, 0, 1835, 1843, 1634, 1814, 130, 0,
	1957, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968,
	1969, 1958, 2106, 0, 1981, 2002, 2102, 2107, 2103, 0,
	0, 2092, 2094, 1979, 3157, 0, 0, 0, 0, 0,
	2117, 0, 2433, 1671, 2446, 0, 2451, 2452, 0, 2484,
	2480, 2467, 2469, 0, 2472, 2473, 2392, 0, 2605, 2829,
	0, 0, 2835, 2840, 0, 0, 2838, 2505, 2123, 0,
	2051, 0, 2052, 2068, 2083, 0, 2048, 0, 2806, 1993,
	0, 1994, 0, 2092, 1979, 2580, 0, 1994, 2634, 0,
	0, 2730, 0, 2739, 0, 2786, 2803, 2800, 0, 2799,
	2828, 2405, 0, 0, 0, 2000, 2701, 0, 2701, 0,
	2701, 2070, 2071, 352, 1929, 115, 1925, 1926, 2165, 2175,
	0, 0, 2703, 2370, 2376, 2139, 0, 2141, 0, 2372,
	0, 2148, 0, 0, 2808, 2818, 2818, 2811, 0, 2825,
	0, 0, 0, 2754, 2350, 3277, 0, 3310, 3311, 0,
	0, 0, 0, 119, 2557, 3041, 119, 0, 119, 3199,
	2867, 2869, 0, 2847, 2849, 2851, 2852, 2853, 2854, 2855,
	0, 222, 408, 509, 0, 0, 0, 0, 2878, 0,
	-2, 0, 0, 1366, 1367, 1759, 0, 0, 0, 0,
	1328, 0, 1730, 1737, 1738, 0, 0, 1330, 1362, 1621,
	0, 0, 0, 0, 1913, 1919, 1782, 0, 0, 1641,
	1647, 1661, 1665, 0, 0, 1691, 0, 0, 0, 0,
	1688, 1708, 0, 0, 1900, 0, 1898, 0, 0, 0,
	0, 0, 0, 0, 1834, 1817, 0, 1837, 1838, 1839,
	1840, 1841, 0, 1804, 2106, 2091, 2108, 0, 1985, 130,
	2104, 2105, 2094, 2102, 0, 2634, 2502, 0, 0, 2505,
	2119, 0, 1670, 2447, 2449, 2444, 0, 0, 0, 2479,
	2470, 1882, 2474, 2475, 0, 2494, 0, 0, 2842, 2843,
	2497, 0, 0, 0, 2053, 0, 2055, 2079, 2080, 0,
	2075, 2076, 2077, 2056, 0, 0, 0, 0, 1996, 2591,
	1994, 0, 0, 0, 2596, 2627, 2722, 0, 0, 2732,
	2762, 2798, 2801, 2802, 0, 1991, 0, 0, 0, 2110,
	0, 2110, 2501, 2110, 0, 1932, 1929, 1922, 0, 2048,
	2178, 0, 0, 0, 2374, 2143, 0, 2378, 2046, 0,
	2046, 0, 0, 0, 0, 3304, 3305, 0, 3306, 3309,
	3106, 2994, 2995, 0, 2983, 0, 0, 0, 2856, 0,
	0, 0, 2875, 2895, 2884, -2, 467, 223, 0, 2895,
	2895, 1350, 1310, 1353, 1368, 1743, 0, 0, 1746, 0,
	1748, 0, 0, 0, 1710, 1711, 1744, 1329, 0, 0,
	0, 0, 1634, 1651, 3058, 0, 1689, 0, 1693, 0,
	1686, 0, 1687, 0, 1705, 1891, 1892, 0, 0, 1903,
	1893, 0, 0, 0, 1822, 1823, 1826, 1827, 1828, 1829,
	0, 1832, 1833, 1836, 0, 1844, 1846, 2108, 1937, 0,
	2096, 1926, 1926, 0, 2106, 2102, 130, 2094, 3155, 2503,
	2504, 2498, 2013, 0, 0, 2408, 0, 0, 2477, 2481,
	2482, 0, 0, 0, 0, 0, 1950, 0, 2067, 2081,
	0, 2082, 0, 0, 0, 0, 0, 0, 2805, 2593,
	0, 0, 1994, 0, 2731, 0, 1986, 0, 1990, 1987,
	0, 2392, 0, 2392, 2078, 1634, 0, 1923, 1932, 2163,
	2172, 2702, 2148, 2148, 0, 2809, 2045, 2816, 0, 2810,
	0, 2826, 2827, 2756, 0, 0, 2870, 2871, 2850, 0,
	0, 0, 2880, 0, 0, 2886, 2887, 2888, 2889, 2890,
	2881, 2882, 0, 1756, 1758, 1747, 1749, 0, 1752, 0,
	1753, 1740, 1741, 0, 0, 0, 1910, 1612, 0, 3056,
	0, 1667, 1692, 1695, 1696, 0, 0, 0, 1701, 0,
	1694, 0, 0, 1894, 0, 1895, 1904, 0, 0, 0,
	0, 1897, 1899, 1830, 1831, 1842, 0, 1935, 2095, 0,
	116, 116, 0, 2108, 130, 2106, 2102, 2123, 0, 0,
	0, 0, 2471, 2476, 0, 2832, 2833, 2505, 2109, 2084,
	0, 2087, 2088, 0, 2085, 2047, 2057, 2804, 1994, 0,
	2581, 2723, 2733, 1992, 0, 2061, 2073, 2063, 2083, 2392,
	2072, 1924, 2140, 2142, 2148, 0, 2812, 3307, 119, 2858,
	2857, 0, 0, 2892, 2893, 0, 0, 1327, 0, 0,
	1750, 1751, 0, 0, 0, 0, 1650, 0, 1697, 1698,
	1699, 1700, 1702, 0, 0, 1902, 0, 0, 1908, 0,
	1845, 2097, 2098, 2099, 1926, 1939, 2106, 2108, 130, 2108,
	0, 2120, 2119, 0, 2483, 2484, 0, 0, 2499, 2086,
	2501, 2501, 2592, 1994, 0, 2392, 2066, 2144, 2817, 2996,
	2859, 2891, 2894, 2885, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1766, 0, -2, 0, 0, 0,
	116, 2108, 1938, 2106, 1634, 2118, 0, 2013, 2489, 0,
	0, 0, 2089, 2090, 2594, 0, 2065, 1755, 1757, 1742,
	0, 0, -2, 1629, 1625, 1626, 3057, 0, 1745, 0,
	0, 1775, 0, 1764, 1905, 1906, 0, 1909, 2100, 1936,
	2108, 2112, 2121, 2123, 0, 2487, 2490, 2491, 2492, 2493,
	0, 0, 0, 1988, 0, 0, 1690, 0, 1767, 1768,
	1754, 1775, 1775, 0, 0, 0, 1940, 2108, 2455, 0,
	0, 0, 0, 0, 1522, 1703, 1759, 1754, 1745, 1774,
	0, 0, 0, 1634, 2488, 0, 0, 0, 0, 0,
	1743, 1759, 1771, 0, 0, 1907, 2113, 2489, 2830, 2831,
	1628, 0, 1769, 1743, 0, 0, 0, 1770, 1772, 0,
	2456, 0, 1773,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 538, 3, 3,
	531, 532, 536, 534, 541, 535, 533, 537, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 542, 540,
	525, 527, 526, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 529, 3, 530, 539,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var yyTok3 = [...]uint16{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 464, 57807, 465, 57808, 466, 57809, 467,
	57810, 468, 57811, 469, 57812, 470, 57813, 471, 57814, 472,
	57815, 473, 57816, 474, 57817, 475, 57818, 476, 57819, 477,
	57820, 478, 57821, 479, 57822, 480, 57823, 481, 57824, 482,
	57825, 483, 57826, 484, 57827, 485, 57828, 486, 57829, 487,
	57830, 488, 57831, 489, 57832, 490, 57833, 491, 57834, 492,
	57835, 493, 57836, 494, 57837, 495, 57838, 496, 57839, 497,
	57840, 498, 57841, 499, 57842, 500, 57843, 501, 57844, 502,
	57845, 503, 57846, 504, 57847, 505, 57848, 506, 57849, 507,
	57850, 508, 57851, 509, 57852, 510, 57853, 511, 57854, 512,
	57855, 513, 57856, 514, 57857, 515, 57858, 516, 57859, 517,
	57860, 518, 57861, 519, 57862, 520, 57863, 521, 57864, 522,
	57865, 523, 57866, 524, 57867, 528, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:593
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:608
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:616
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:631
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:634
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:643
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:644
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:645
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:646
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:647
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:648
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:649
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:650
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:651
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:652
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:653
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:654
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:655
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:656
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:657
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:658
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:659
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:660
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:661
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:662
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:663
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:664
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:665
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:666
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:667
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:668
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:669
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:670
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:671
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:672
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:673
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:674
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:675
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:676
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:677
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:678
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:679
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:680
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:681
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:682
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:683
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:684
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:685
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:686
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:687
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:688
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:689
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:690
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:691
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:692
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:693
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:694
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:695
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:696
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:697
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:698
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:699
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:700
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:701
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:702
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:703
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:704
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:705
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:706
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:707
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:708
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:709
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:710
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:711
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:712
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:713
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:714
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:715
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:716
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:717
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:718
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:719
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:720
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:721
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:722
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:723
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:724
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:725
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:726
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:727
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:728
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:729
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:730
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:731
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:732
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:733
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:734
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:735
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:736
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:737
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:738
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:739
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:740
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:741
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:742
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:743
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:744
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:745
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:746
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:747
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:748
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:750
		{
			yyVAL.stmt = nil
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:761
		{
			yyVAL.str = yyDollar[1].str
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:762
		{
			yyVAL.str = ""
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:766
		{
			yyVAL.list = yyDollar[1].list
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:767
		{
			yyVAL.list = nil
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:771
		{
			yyVAL.dropBehav = ast.DropCascade
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:772
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:773
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:777
		{
			yyVAL.ival = 1
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:778
		{
			yyVAL.ival = 0
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:782
		{
			yyVAL.ival = 1
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:783
		{
			yyVAL.ival = 0
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:787
		{
			yyVAL.bval = true
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:788
		{
			yyVAL.bval = false
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:792
		{
			yyVAL.bval = true
		}
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:793
		{
			yyVAL.bval = false
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:797
		{
			yyVAL.list = yyDollar[2].list
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:798
		{
			yyVAL.list = nil
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:799
		{
			yyVAL.list = nil
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:808
		{
			yyVAL.str = yyDollar[1].str
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:809
		{
			yyVAL.str = yyDollar[1].str
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:810
		{
			yyVAL.str = yyDollar[1].str
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:814
		{
			yyVAL.str = yyDollar[1].str
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:815
		{
			yyVAL.str = yyDollar[1].str
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:816
		{
			yyVAL.str = yyDollar[1].str
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:817
		{
			yyVAL.str = yyDollar[1].str
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:818
		{
			yyVAL.str = yyDollar[1].str
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:821
		{
			yyVAL.str = yyDollar[1].str
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:822
		{
			yyVAL.str = yyDollar[1].str
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:825
		{
			yyVAL.str = yyDollar[1].str
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:830
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:834
		{
			list := yyDollar[1].list
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = list
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:843
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:847
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:855
		{
			yyVAL.rangevar = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:862
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list.Items) == 1 {
				if str, ok := yyDollar[2].list.Items[0].(*ast.String); ok {
					yyVAL.rangevar = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.rangevar = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.rangevar = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:891
		{
			yyVAL.list = yyDollar[2].list
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:892
		{
			yyVAL.list = nil
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:897
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:901
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:910
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:914
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:927
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:933
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:939
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:945
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:951
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:958
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:965
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_UNLOGGED
			yyVAL.node = rangeVar
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:971
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:977
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:986
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:990
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				nodes.Append(item)
			}
			yyVAL.list = nodes
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1002
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1006
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].list)
			yyVAL.list = list
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1016
		{
			yyVAL.str = "abort"
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1017
		{
			yyVAL.str = "absent"
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1018
		{
			yyVAL.str = "absolute"
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1019
		{
			yyVAL.str = "access"
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1020
		{
			yyVAL.str = "action"
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1021
		{
			yyVAL.str = "add"
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1022
		{
			yyVAL.str = "admin"
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1023
		{
			yyVAL.str = "after"
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1024
		{
			yyVAL.str = "aggregate"
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1025
		{
			yyVAL.str = "also"
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1026
		{
			yyVAL.str = "alter"
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1027
		{
			yyVAL.str = "always"
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1028
		{
			yyVAL.str = "asensitive"
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1029
		{
			yyVAL.str = "assertion"
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1030
		{
			yyVAL.str = "assignment"
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1031
		{
			yyVAL.str = "at"
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1032
		{
			yyVAL.str = "atomic"
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1033
		{
			yyVAL.str = "attach"
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1034
		{
			yyVAL.str = "attribute"
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1035
		{
			yyVAL.str = "backward"
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1036
		{
			yyVAL.str = "before"
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1037
		{
			yyVAL.str = "begin"
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1038
		{
			yyVAL.str = "breadth"
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1039
		{
			yyVAL.str = "by"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1040
		{
			yyVAL.str = "cache"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1041
		{
			yyVAL.str = "call"
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1042
		{
			yyVAL.str = "called"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1043
		{
			yyVAL.str = "cascade"
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1044
		{
			yyVAL.str = "cascaded"
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1045
		{
			yyVAL.str = "catalog"
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1046
		{
			yyVAL.str = "chain"
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1047
		{
			yyVAL.str = "characteristics"
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1048
		{
			yyVAL.str = "checkpoint"
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1049
		{
			yyVAL.str = "class"
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1050
		{
			yyVAL.str = "close"
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1051
		{
			yyVAL.str = "cluster"
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1052
		{
			yyVAL.str = "columns"
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1053
		{
			yyVAL.str = "comment"
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1054
		{
			yyVAL.str = "comments"
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1055
		{
			yyVAL.str = "commit"
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1056
		{
			yyVAL.str = "committed"
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1057
		{
			yyVAL.str = "compression"
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1058
		{
			yyVAL.str = "conditional"
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1059
		{
			yyVAL.str = "configuration"
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1060
		{
			yyVAL.str = "conflict"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1061
		{
			yyVAL.str = "connection"
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1062
		{
			yyVAL.str = "constraints"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1063
		{
			yyVAL.str = "content"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1064
		{
			yyVAL.str = "continue"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1065
		{
			yyVAL.str = "conversion"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1066
		{
			yyVAL.str = "copy"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1067
		{
			yyVAL.str = "cost"
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1068
		{
			yyVAL.str = "csv"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1069
		{
			yyVAL.str = "cube"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1070
		{
			yyVAL.str = "current"
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1071
		{
			yyVAL.str = "cursor"
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1072
		{
			yyVAL.str = "cycle"
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1073
		{
			yyVAL.str = "data"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1074
		{
			yyVAL.str = "database"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1075
		{
			yyVAL.str = "day"
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1076
		{
			yyVAL.str = "deallocate"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1077
		{
			yyVAL.str = "declare"
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1078
		{
			yyVAL.str = "defaults"
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1079
		{
			yyVAL.str = "deferred"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1080
		{
			yyVAL.str = "definer"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1081
		{
			yyVAL.str = "delete"
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1082
		{
			yyVAL.str = "delimiter"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1083
		{
			yyVAL.str = "delimiters"
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1084
		{
			yyVAL.str = "depends"
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1085
		{
			yyVAL.str = "depth"
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1086
		{
			yyVAL.str = "detach"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1087
		{
			yyVAL.str = "dictionary"
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1088
		{
			yyVAL.str = "disable"
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1089
		{
			yyVAL.str = "discard"
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1090
		{
			yyVAL.str = "document"
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1091
		{
			yyVAL.str = "domain"
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1092
		{
			yyVAL.str = "double"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1093
		{
			yyVAL.str = "drop"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1094
		{
			yyVAL.str = "each"
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1095
		{
			yyVAL.str = "empty"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1096
		{
			yyVAL.str = "enable"
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1097
		{
			yyVAL.str = "encoding"
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1098
		{
			yyVAL.str = "encrypted"
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1099
		{
			yyVAL.str = "enum"
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1100
		{
			yyVAL.str = "error"
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1101
		{
			yyVAL.str = "escape"
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1102
		{
			yyVAL.str = "event"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1103
		{
			yyVAL.str = "exclude"
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1104
		{
			yyVAL.str = "excluding"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1105
		{
			yyVAL.str = "exclusive"
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1106
		{
			yyVAL.str = "execute"
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1107
		{
			yyVAL.str = "explain"
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1108
		{
			yyVAL.str = "expression"
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1109
		{
			yyVAL.str = "extension"
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1110
		{
			yyVAL.str = "external"
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1111
		{
			yyVAL.str = "family"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1112
		{
			yyVAL.str = "filter"
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1113
		{
			yyVAL.str = "finalize"
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1114
		{
			yyVAL.str = "first"
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1115
		{
			yyVAL.str = "following"
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1116
		{
			yyVAL.str = "force"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1117
		{
			yyVAL.str = "format"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1118
		{
			yyVAL.str = "forward"
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1119
		{
			yyVAL.str = "function"
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1120
		{
			yyVAL.str = "functions"
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1121
		{
			yyVAL.str = "generated"
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1122
		{
			yyVAL.str = "global"
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1123
		{
			yyVAL.str = "granted"
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1124
		{
			yyVAL.str = "groups"
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1125
		{
			yyVAL.str = "handler"
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1126
		{
			yyVAL.str = "header"
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1127
		{
			yyVAL.str = "hold"
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1128
		{
			yyVAL.str = "hour"
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1129
		{
			yyVAL.str = "identity"
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1130
		{
			yyVAL.str = "if"
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1131
		{
			yyVAL.str = "immediate"
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1132
		{
			yyVAL.str = "immutable"
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1133
		{
			yyVAL.str = "implicit"
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1134
		{
			yyVAL.str = "import"
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1135
		{
			yyVAL.str = "include"
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1136
		{
			yyVAL.str = "including"
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1137
		{
			yyVAL.str = "increment"
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1138
		{
			yyVAL.str = "indent"
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1139
		{
			yyVAL.str = "index"
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1140
		{
			yyVAL.str = "indexes"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1141
		{
			yyVAL.str = "inherit"
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1142
		{
			yyVAL.str = "inherits"
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1143
		{
			yyVAL.str = "inline"
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1144
		{
			yyVAL.str = "input"
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1145
		{
			yyVAL.str = "insensitive"
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1146
		{
			yyVAL.str = "insert"
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1147
		{
			yyVAL.str = "instead"
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1148
		{
			yyVAL.str = "invoker"
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1149
		{
			yyVAL.str = "isolation"
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1150
		{
			yyVAL.str = "keep"
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1151
		{
			yyVAL.str = "key"
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1152
		{
			yyVAL.str = "keys"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1153
		{
			yyVAL.str = "label"
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1154
		{
			yyVAL.str = "language"
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1155
		{
			yyVAL.str = "large"
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1156
		{
			yyVAL.str = "last"
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1157
		{
			yyVAL.str = "leakproof"
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1158
		{
			yyVAL.str = "level"
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1159
		{
			yyVAL.str = "listen"
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1160
		{
			yyVAL.str = "load"
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1161
		{
			yyVAL.str = "local"
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1162
		{
			yyVAL.str = "location"
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1163
		{
			yyVAL.str = "lock"
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1164
		{
			yyVAL.str = "locked"
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1165
		{
			yyVAL.str = "logged"
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1166
		{
			yyVAL.str = "mapping"
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1167
		{
			yyVAL.str = "match"
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1168
		{
			yyVAL.str = "matched"
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1169
		{
			yyVAL.str = "materialized"
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1170
		{
			yyVAL.str = "maxvalue"
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1171
		{
			yyVAL.str = "merge"
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1172
		{
			yyVAL.str = "method"
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1173
		{
			yyVAL.str = "minute"
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1174
		{
			yyVAL.str = "minvalue"
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1175
		{
			yyVAL.str = "mode"
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1176
		{
			yyVAL.str = "month"
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1177
		{
			yyVAL.str = "move"
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1178
		{
			yyVAL.str = "name"
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1179
		{
			yyVAL.str = "names"
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1180
		{
			yyVAL.str = "nested"
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1181
		{
			yyVAL.str = "new"
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1182
		{
			yyVAL.str = "next"
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1183
		{
			yyVAL.str = "nfc"
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1184
		{
			yyVAL.str = "nfd"
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1185
		{
			yyVAL.str = "nfkc"
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1186
		{
			yyVAL.str = "nfkd"
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1187
		{
			yyVAL.str = "no"
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1188
		{
			yyVAL.str = "normalized"
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1189
		{
			yyVAL.str = "nothing"
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1190
		{
			yyVAL.str = "notify"
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1191
		{
			yyVAL.str = "nowait"
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1192
		{
			yyVAL.str = "nulls"
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1193
		{
			yyVAL.str = "object"
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1194
		{
			yyVAL.str = "of"
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1195
		{
			yyVAL.str = "off"
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1196
		{
			yyVAL.str = "oids"
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1197
		{
			yyVAL.str = "old"
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1198
		{
			yyVAL.str = "omit"
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1199
		{
			yyVAL.str = "operator"
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1200
		{
			yyVAL.str = "option"
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1201
		{
			yyVAL.str = "options"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1202
		{
			yyVAL.str = "ordinality"
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1203
		{
			yyVAL.str = "others"
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1204
		{
			yyVAL.str = "over"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1205
		{
			yyVAL.str = "overriding"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1206
		{
			yyVAL.str = "owned"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1207
		{
			yyVAL.str = "owner"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1208
		{
			yyVAL.str = "parallel"
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1209
		{
			yyVAL.str = "parameter"
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1210
		{
			yyVAL.str = "parser"
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1211
		{
			yyVAL.str = "partial"
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1212
		{
			yyVAL.str = "partition"
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1213
		{
			yyVAL.str = "passing"
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1214
		{
			yyVAL.str = "password"
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1215
		{
			yyVAL.str = "path"
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1216
		{
			yyVAL.str = "plan"
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1217
		{
			yyVAL.str = "plans"
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1218
		{
			yyVAL.str = "policy"
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1219
		{
			yyVAL.str = "preceding"
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1220
		{
			yyVAL.str = "prepare"
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1221
		{
			yyVAL.str = "prepared"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1222
		{
			yyVAL.str = "preserve"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1223
		{
			yyVAL.str = "prior"
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1224
		{
			yyVAL.str = "privileges"
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1225
		{
			yyVAL.str = "procedural"
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1226
		{
			yyVAL.str = "procedure"
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1227
		{
			yyVAL.str = "procedures"
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1228
		{
			yyVAL.str = "program"
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1229
		{
			yyVAL.str = "publication"
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1230
		{
			yyVAL.str = "quote"
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1231
		{
			yyVAL.str = "quotes"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1232
		{
			yyVAL.str = "range"
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1233
		{
			yyVAL.str = "read"
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1234
		{
			yyVAL.str = "reassign"
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1235
		{
			yyVAL.str = "recheck"
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1236
		{
			yyVAL.str = "recursive"
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1237
		{
			yyVAL.str = "ref"
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1238
		{
			yyVAL.str = "referencing"
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1239
		{
			yyVAL.str = "refresh"
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1240
		{
			yyVAL.str = "reindex"
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1241
		{
			yyVAL.str = "relative"
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1242
		{
			yyVAL.str = "release"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1243
		{
			yyVAL.str = "rename"
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1244
		{
			yyVAL.str = "repeatable"
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1245
		{
			yyVAL.str = "replace"
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1246
		{
			yyVAL.str = "replica"
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1247
		{
			yyVAL.str = "reset"
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1248
		{
			yyVAL.str = "restart"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1249
		{
			yyVAL.str = "restrict"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1250
		{
			yyVAL.str = "return"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1251
		{
			yyVAL.str = "returns"
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1252
		{
			yyVAL.str = "revoke"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1253
		{
			yyVAL.str = "role"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1254
		{
			yyVAL.str = "rollback"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1255
		{
			yyVAL.str = "rollup"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1256
		{
			yyVAL.str = "routine"
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1257
		{
			yyVAL.str = "routines"
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1258
		{
			yyVAL.str = "rows"
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1259
		{
			yyVAL.str = "rule"
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1260
		{
			yyVAL.str = "savepoint"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1261
		{
			yyVAL.str = "scalar"
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1262
		{
			yyVAL.str = "schema"
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1263
		{
			yyVAL.str = "schemas"
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1264
		{
			yyVAL.str = "scroll"
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1265
		{
			yyVAL.str = "search"
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1266
		{
			yyVAL.str = "second"
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1267
		{
			yyVAL.str = "security"
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1268
		{
			yyVAL.str = "sequence"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1269
		{
			yyVAL.str = "sequences"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1270
		{
			yyVAL.str = "serializable"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1271
		{
			yyVAL.str = "server"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1272
		{
			yyVAL.str = "session"
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1273
		{
			yyVAL.str = "set"
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1274
		{
			yyVAL.str = "sets"
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1275
		{
			yyVAL.str = "share"
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1276
		{
			yyVAL.str = "show"
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1277
		{
			yyVAL.str = "simple"
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1278
		{
			yyVAL.str = "skip"
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1279
		{
			yyVAL.str = "snapshot"
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1280
		{
			yyVAL.str = "source"
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1281
		{
			yyVAL.str = "sql"
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1282
		{
			yyVAL.str = "stable"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1283
		{
			yyVAL.str = "standalone"
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1284
		{
			yyVAL.str = "start"
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1285
		{
			yyVAL.str = "statement"
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1286
		{
			yyVAL.str = "statistics"
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1287
		{
			yyVAL.str = "stdin"
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1288
		{
			yyVAL.str = "stdout"
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1289
		{
			yyVAL.str = "storage"
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1290
		{
			yyVAL.str = "stored"
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1291
		{
			yyVAL.str = "strict"
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1292
		{
			yyVAL.str = "string"
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1293
		{
			yyVAL.str = "strip"
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1294
		{
			yyVAL.str = "subscription"
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1295
		{
			yyVAL.str = "support"
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1296
		{
			yyVAL.str = "sysid"
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1297
		{
			yyVAL.str = "system"
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1298
		{
			yyVAL.str = "tables"
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1299
		{
			yyVAL.str = "tablespace"
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1300
		{
			yyVAL.str = "target"
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1301
		{
			yyVAL.str = "temp"
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1302
		{
			yyVAL.str = "template"
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1303
		{
			yyVAL.str = "temporary"
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1304
		{
			yyVAL.str = "text"
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1305
		{
			yyVAL.str = "ties"
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1306
		{
			yyVAL.str = "transaction"
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1307
		{
			yyVAL.str = "transform"
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1308
		{
			yyVAL.str = "trigger"
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1309
		{
			yyVAL.str = "truncate"
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1310
		{
			yyVAL.str = "trusted"
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1311
		{
			yyVAL.str = "type"
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1312
		{
			yyVAL.str = "types"
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1313
		{
			yyVAL.str = "uescape"
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1314
		{
			yyVAL.str = "unbounded"
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1315
		{
			yyVAL.str = "uncommitted"
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1316
		{
			yyVAL.str = "unconditional"
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1317
		{
			yyVAL.str = "unencrypted"
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1318
		{
			yyVAL.str = "unknown"
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1319
		{
			yyVAL.str = "unlisten"
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1320
		{
			yyVAL.str = "unlogged"
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1321
		{
			yyVAL.str = "until"
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1322
		{
			yyVAL.str = "update"
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1323
		{
			yyVAL.str = "vacuum"
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1324
		{
			yyVAL.str = "valid"
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1325
		{
			yyVAL.str = "validate"
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1326
		{
			yyVAL.str = "validator"
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1327
		{
			yyVAL.str = "value"
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1328
		{
			yyVAL.str = "varying"
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1329
		{
			yyVAL.str = "version"
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1330
		{
			yyVAL.str = "view"
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1331
		{
			yyVAL.str = "views"
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1332
		{
			yyVAL.str = "volatile"
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1333
		{
			yyVAL.str = "whitespace"
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1334
		{
			yyVAL.str = "within"
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1335
		{
			yyVAL.str = "without"
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1336
		{
			yyVAL.str = "work"
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1337
		{
			yyVAL.str = "wrapper"
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1338
		{
			yyVAL.str = "write"
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1339
		{
			yyVAL.str = "xml"
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1340
		{
			yyVAL.str = "year"
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1341
		{
			yyVAL.str = "yes"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1342
		{
			yyVAL.str = "zone"
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1356
		{
			yyVAL.str = "between"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1357
		{
			yyVAL.str = "bigint"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1358
		{
			yyVAL.str = "bit"
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1359
		{
			yyVAL.str = "boolean"
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1360
		{
			yyVAL.str = "char"
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1361
		{
			yyVAL.str = "character"
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1362
		{
			yyVAL.str = "coalesce"
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1363
		{
			yyVAL.str = "dec"
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1364
		{
			yyVAL.str = "decimal"
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1365
		{
			yyVAL.str = "exists"
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1366
		{
			yyVAL.str = "extract"
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1367
		{
			yyVAL.str = "float"
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1368
		{
			yyVAL.str = "greatest"
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1369
		{
			yyVAL.str = "grouping"
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1370
		{
			yyVAL.str = "inout"
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1371
		{
			yyVAL.str = "int"
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1372
		{
			yyVAL.str = "integer"
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1373
		{
			yyVAL.str = "interval"
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1374
		{
			yyVAL.str = "json"
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1375
		{
			yyVAL.str = "json_array"
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1376
		{
			yyVAL.str = "json_arrayagg"
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1377
		{
			yyVAL.str = "json_exists"
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1378
		{
			yyVAL.str = "json_object"
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1379
		{
			yyVAL.str = "json_objectagg"
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1380
		{
			yyVAL.str = "json_query"
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1381
		{
			yyVAL.str = "json_scalar"
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1382
		{
			yyVAL.str = "json_serialize"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1383
		{
			yyVAL.str = "json_table"
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1384
		{
			yyVAL.str = "json_value"
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1385
		{
			yyVAL.str = "least"
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1386
		{
			yyVAL.str = "merge_action"
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1387
		{
			yyVAL.str = "national"
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1388
		{
			yyVAL.str = "nchar"
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1389
		{
			yyVAL.str = "none"
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1390
		{
			yyVAL.str = "normalize"
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1391
		{
			yyVAL.str = "nullif"
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1392
		{
			yyVAL.str = "numeric"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1393
		{
			yyVAL.str = "out"
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1394
		{
			yyVAL.str = "overlay"
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1395
		{
			yyVAL.str = "position"
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1396
		{
			yyVAL.str = "precision"
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1397
		{
			yyVAL.str = "real"
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1398
		{
			yyVAL.str = "row"
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1399
		{
			yyVAL.str = "setof"
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1400
		{
			yyVAL.str = "smallint"
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1401
		{
			yyVAL.str = "substring"
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1402
		{
			yyVAL.str = "time"
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1403
		{
			yyVAL.str = "timestamp"
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1404
		{
			yyVAL.str = "treat"
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1405
		{
			yyVAL.str = "trim"
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1406
		{
			yyVAL.str = "values"
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1407
		{
			yyVAL.str = "varchar"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1408
		{
			yyVAL.str = "xmlattributes"
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1409
		{
			yyVAL.str = "xmlconcat"
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1410
		{
			yyVAL.str = "xmlelement"
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1411
		{
			yyVAL.str = "xmlexists"
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1412
		{
			yyVAL.str = "xmlforest"
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1413
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1414
		{
			yyVAL.str = "xmlparse"
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1415
		{
			yyVAL.str = "xmlpi"
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1416
		{
			yyVAL.str = "xmlroot"
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1417
		{
			yyVAL.str = "xmlserialize"
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1418
		{
			yyVAL.str = "xmltable"
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1432
		{
			yyVAL.str = "authorization"
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1433
		{
			yyVAL.str = "binary"
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1434
		{
			yyVAL.str = "collation"
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1435
		{
			yyVAL.str = "concurrently"
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1436
		{
			yyVAL.str = "cross"
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1437
		{
			yyVAL.str = "current_schema"
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1438
		{
			yyVAL.str = "freeze"
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1439
		{
			yyVAL.str = "full"
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1440
		{
			yyVAL.str = "ilike"
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1441
		{
			yyVAL.str = "inner"
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1442
		{
			yyVAL.str = "is"
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1443
		{
			yyVAL.str = "isnull"
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1444
		{
			yyVAL.str = "join"
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1445
		{
			yyVAL.str = "left"
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1446
		{
			yyVAL.str = "like"
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1447
		{
			yyVAL.str = "natural"
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1448
		{
			yyVAL.str = "notnull"
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1449
		{
			yyVAL.str = "outer"
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1450
		{
			yyVAL.str = "overlaps"
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1451
		{
			yyVAL.str = "right"
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1452
		{
			yyVAL.str = "similar"
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1453
		{
			yyVAL.str = "tablesample"
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1454
		{
			yyVAL.str = "verbose"
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1464
		{
			yyVAL.str = "all"
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1465
		{
			yyVAL.str = "analyse"
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1466
		{
			yyVAL.str = "analyze"
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1467
		{
			yyVAL.str = "and"
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1468
		{
			yyVAL.str = "any"
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1469
		{
			yyVAL.str = "array"
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1470
		{
			yyVAL.str = "as"
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1471
		{
			yyVAL.str = "asc"
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1472
		{
			yyVAL.str = "asymmetric"
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1473
		{
			yyVAL.str = "both"
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1474
		{
			yyVAL.str = "case"
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1475
		{
			yyVAL.str = "cast"
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1476
		{
			yyVAL.str = "check"
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1477
		{
			yyVAL.str = "collate"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1478
		{
			yyVAL.str = "column"
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1479
		{
			yyVAL.str = "constraint"
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1480
		{
			yyVAL.str = "create"
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1481
		{
			yyVAL.str = "current_catalog"
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1482
		{
			yyVAL.str = "current_date"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1483
		{
			yyVAL.str = "current_role"
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1484
		{
			yyVAL.str = "current_time"
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1485
		{
			yyVAL.str = "current_timestamp"
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1486
		{
			yyVAL.str = "current_user"
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1487
		{
			yyVAL.str = "default"
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1488
		{
			yyVAL.str = "deferrable"
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1489
		{
			yyVAL.str = "desc"
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1490
		{
			yyVAL.str = "distinct"
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1491
		{
			yyVAL.str = "do"
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1492
		{
			yyVAL.str = "else"
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1493
		{
			yyVAL.str = "end"
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1494
		{
			yyVAL.str = "except"
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1495
		{
			yyVAL.str = "false"
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1496
		{
			yyVAL.str = "fetch"
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1497
		{
			yyVAL.str = "for"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1498
		{
			yyVAL.str = "foreign"
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1499
		{
			yyVAL.str = "from"
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1500
		{
			yyVAL.str = "grant"
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1501
		{
			yyVAL.str = "group"
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1502
		{
			yyVAL.str = "having"
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1503
		{
			yyVAL.str = "in"
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1504
		{
			yyVAL.str = "initially"
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1505
		{
			yyVAL.str = "intersect"
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1506
		{
			yyVAL.str = "into"
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1507
		{
			yyVAL.str = "lateral"
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1508
		{
			yyVAL.str = "leading"
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1509
		{
			yyVAL.str = "limit"
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1510
		{
			yyVAL.str = "localtime"
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1511
		{
			yyVAL.str = "localtimestamp"
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1512
		{
			yyVAL.str = "not"
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1513
		{
			yyVAL.str = "null"
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1514
		{
			yyVAL.str = "offset"
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1515
		{
			yyVAL.str = "on"
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1516
		{
			yyVAL.str = "only"
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1517
		{
			yyVAL.str = "or"
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1518
		{
			yyVAL.str = "order"
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1519
		{
			yyVAL.str = "placing"
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1520
		{
			yyVAL.str = "primary"
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1521
		{
			yyVAL.str = "references"
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1522
		{
			yyVAL.str = "returning"
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1523
		{
			yyVAL.str = "select"
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1524
		{
			yyVAL.str = "session_user"
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1525
		{
			yyVAL.str = "some"
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1526
		{
			yyVAL.str = "symmetric"
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1527
		{
			yyVAL.str = "system_user"
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1528
		{
			yyVAL.str = "table"
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1529
		{
			yyVAL.str = "then"
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1530
		{
			yyVAL.str = "to"
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1531
		{
			yyVAL.str = "trailing"
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1532
		{
			yyVAL.str = "true"
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1533
		{
			yyVAL.str = "union"
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1534
		{
			yyVAL.str = "unique"
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1535
		{
			yyVAL.str = "user"
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1536
		{
			yyVAL.str = "using"
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1537
		{
			yyVAL.str = "variadic"
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1538
		{
			yyVAL.str = "when"
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1539
		{
			yyVAL.str = "where"
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1540
		{
			yyVAL.str = "window"
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1541
		{
			yyVAL.str = "with"
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1554
		{
			yyVAL.str = "abort"
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1555
		{
			yyVAL.str = "absent"
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1556
		{
			yyVAL.str = "absolute"
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1557
		{
			yyVAL.str = "access"
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1558
		{
			yyVAL.str = "action"
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1559
		{
			yyVAL.str = "add"
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1560
		{
			yyVAL.str = "admin"
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1561
		{
			yyVAL.str = "after"
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1562
		{
			yyVAL.str = "aggregate"
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1563
		{
			yyVAL.str = "all"
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1564
		{
			yyVAL.str = "also"
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1565
		{
			yyVAL.str = "alter"
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1566
		{
			yyVAL.str = "always"
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1567
		{
			yyVAL.str = "analyse"
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1568
		{
			yyVAL.str = "analyze"
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1569
		{
			yyVAL.str = "and"
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1570
		{
			yyVAL.str = "any"
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1571
		{
			yyVAL.str = "asc"
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1572
		{
			yyVAL.str = "asensitive"
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1573
		{
			yyVAL.str = "assertion"
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1574
		{
			yyVAL.str = "assignment"
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1575
		{
			yyVAL.str = "asymmetric"
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1576
		{
			yyVAL.str = "at"
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1577
		{
			yyVAL.str = "atomic"
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1578
		{
			yyVAL.str = "attach"
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1579
		{
			yyVAL.str = "attribute"
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1580
		{
			yyVAL.str = "authorization"
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1581
		{
			yyVAL.str = "backward"
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1582
		{
			yyVAL.str = "before"
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1583
		{
			yyVAL.str = "begin"
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1584
		{
			yyVAL.str = "between"
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1585
		{
			yyVAL.str = "bigint"
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1586
		{
			yyVAL.str = "binary"
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1587
		{
			yyVAL.str = "bit"
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1588
		{
			yyVAL.str = "boolean"
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1589
		{
			yyVAL.str = "both"
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1590
		{
			yyVAL.str = "breadth"
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1591
		{
			yyVAL.str = "by"
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1592
		{
			yyVAL.str = "cache"
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1593
		{
			yyVAL.str = "call"
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1594
		{
			yyVAL.str = "called"
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1595
		{
			yyVAL.str = "cascade"
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1596
		{
			yyVAL.str = "cascaded"
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1597
		{
			yyVAL.str = "case"
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1598
		{
			yyVAL.str = "cast"
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1599
		{
			yyVAL.str = "catalog"
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1600
		{
			yyVAL.str = "chain"
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1601
		{
			yyVAL.str = "characteristics"
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1602
		{
			yyVAL.str = "check"
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1603
		{
			yyVAL.str = "checkpoint"
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1604
		{
			yyVAL.str = "class"
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1605
		{
			yyVAL.str = "close"
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1606
		{
			yyVAL.str = "cluster"
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1607
		{
			yyVAL.str = "coalesce"
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1608
		{
			yyVAL.str = "collate"
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1609
		{
			yyVAL.str = "collation"
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1610
		{
			yyVAL.str = "column"
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1611
		{
			yyVAL.str = "columns"
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1612
		{
			yyVAL.str = "comment"
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1613
		{
			yyVAL.str = "comments"
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1614
		{
			yyVAL.str = "commit"
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1615
		{
			yyVAL.str = "committed"
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1616
		{
			yyVAL.str = "compression"
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1617
		{
			yyVAL.str = "concurrently"
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1618
		{
			yyVAL.str = "conditional"
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1619
		{
			yyVAL.str = "configuration"
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1620
		{
			yyVAL.str = "conflict"
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1621
		{
			yyVAL.str = "connection"
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1622
		{
			yyVAL.str = "constraint"
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1623
		{
			yyVAL.str = "constraints"
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1624
		{
			yyVAL.str = "content"
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1625
		{
			yyVAL.str = "continue"
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1626
		{
			yyVAL.str = "conversion"
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1627
		{
			yyVAL.str = "copy"
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1628
		{
			yyVAL.str = "cost"
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1629
		{
			yyVAL.str = "cross"
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1630
		{
			yyVAL.str = "csv"
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1631
		{
			yyVAL.str = "cube"
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1632
		{
			yyVAL.str = "current"
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1633
		{
			yyVAL.str = "current_catalog"
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1634
		{
			yyVAL.str = "current_date"
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1635
		{
			yyVAL.str = "current_role"
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1636
		{
			yyVAL.str = "current_schema"
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1637
		{
			yyVAL.str = "current_time"
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1638
		{
			yyVAL.str = "current_timestamp"
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1639
		{
			yyVAL.str = "current_user"
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1640
		{
			yyVAL.str = "cursor"
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1641
		{
			yyVAL.str = "cycle"
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1642
		{
			yyVAL.str = "data"
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1643
		{
			yyVAL.str = "database"
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1644
		{
			yyVAL.str = "deallocate"
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1645
		{
			yyVAL.str = "dec"
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1646
		{
			yyVAL.str = "decimal"
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1647
		{
			yyVAL.str = "declare"
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1648
		{
			yyVAL.str = "default"
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1649
		{
			yyVAL.str = "defaults"
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1650
		{
			yyVAL.str = "deferrable"
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1651
		{
			yyVAL.str = "deferred"
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1652
		{
			yyVAL.str = "definer"
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1653
		{
			yyVAL.str = "delete"
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1654
		{
			yyVAL.str = "delimiter"
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1655
		{
			yyVAL.str = "delimiters"
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1656
		{
			yyVAL.str = "depends"
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1657
		{
			yyVAL.str = "depth"
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1658
		{
			yyVAL.str = "desc"
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1659
		{
			yyVAL.str = "detach"
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1660
		{
			yyVAL.str = "dictionary"
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1661
		{
			yyVAL.str = "disable"
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1662
		{
			yyVAL.str = "discard"
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1663
		{
			yyVAL.str = "distinct"
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1664
		{
			yyVAL.str = "do"
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1665
		{
			yyVAL.str = "document"
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1666
		{
			yyVAL.str = "domain"
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1667
		{
			yyVAL.str = "double"
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1668
		{
			yyVAL.str = "drop"
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1669
		{
			yyVAL.str = "each"
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1670
		{
			yyVAL.str = "else"
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1671
		{
			yyVAL.str = "empty"
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1672
		{
			yyVAL.str = "enable"
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1673
		{
			yyVAL.str = "encoding"
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1674
		{
			yyVAL.str = "encrypted"
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1675
		{
			yyVAL.str = "end"
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1676
		{
			yyVAL.str = "enum"
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1677
		{
			yyVAL.str = "error"
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1678
		{
			yyVAL.str = "escape"
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1679
		{
			yyVAL.str = "event"
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1680
		{
			yyVAL.str = "exclude"
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1681
		{
			yyVAL.str = "excluding"
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1682
		{
			yyVAL.str = "exclusive"
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1683
		{
			yyVAL.str = "execute"
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1684
		{
			yyVAL.str = "exists"
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1685
		{
			yyVAL.str = "explain"
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1686
		{
			yyVAL.str = "expression"
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1687
		{
			yyVAL.str = "extension"
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1688
		{
			yyVAL.str = "external"
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1689
		{
			yyVAL.str = "extract"
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1690
		{
			yyVAL.str = "false"
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1691
		{
			yyVAL.str = "family"
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1692
		{
			yyVAL.str = "finalize"
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1693
		{
			yyVAL.str = "first"
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1694
		{
			yyVAL.str = "float"
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1695
		{
			yyVAL.str = "following"
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1696
		{
			yyVAL.str = "force"
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1697
		{
			yyVAL.str = "foreign"
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1698
		{
			yyVAL.str = "format"
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1699
		{
			yyVAL.str = "forward"
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1700
		{
			yyVAL.str = "freeze"
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1701
		{
			yyVAL.str = "full"
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1702
		{
			yyVAL.str = "function"
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1703
		{
			yyVAL.str = "functions"
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1704
		{
			yyVAL.str = "generated"
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1705
		{
			yyVAL.str = "global"
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1706
		{
			yyVAL.str = "granted"
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1707
		{
			yyVAL.str = "greatest"
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1708
		{
			yyVAL.str = "grouping"
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1709
		{
			yyVAL.str = "groups"
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1710
		{
			yyVAL.str = "handler"
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1711
		{
			yyVAL.str = "header"
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1712
		{
			yyVAL.str = "hold"
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1713
		{
			yyVAL.str = "identity"
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1714
		{
			yyVAL.str = "if"
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1715
		{
			yyVAL.str = "ilike"
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1716
		{
			yyVAL.str = "immediate"
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1717
		{
			yyVAL.str = "immutable"
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1718
		{
			yyVAL.str = "implicit"
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1719
		{
			yyVAL.str = "import"
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1720
		{
			yyVAL.str = "in"
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1721
		{
			yyVAL.str = "include"
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1722
		{
			yyVAL.str = "including"
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1723
		{
			yyVAL.str = "increment"
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1724
		{
			yyVAL.str = "indent"
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1725
		{
			yyVAL.str = "index"
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1726
		{
			yyVAL.str = "indexes"
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1727
		{
			yyVAL.str = "inherit"
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1728
		{
			yyVAL.str = "inherits"
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1729
		{
			yyVAL.str = "initially"
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1730
		{
			yyVAL.str = "inline"
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1731
		{
			yyVAL.str = "inner"
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1732
		{
			yyVAL.str = "inout"
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1733
		{
			yyVAL.str = "input"
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1734
		{
			yyVAL.str = "insensitive"
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1735
		{
			yyVAL.str = "insert"
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1736
		{
			yyVAL.str = "instead"
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1737
		{
			yyVAL.str = "int"
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1738
		{
			yyVAL.str = "integer"
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1739
		{
			yyVAL.str = "interval"
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1740
		{
			yyVAL.str = "invoker"
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1741
		{
			yyVAL.str = "is"
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1742
		{
			yyVAL.str = "isolation"
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1743
		{
			yyVAL.str = "join"
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1744
		{
			yyVAL.str = "json"
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1745
		{
			yyVAL.str = "json_array"
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1746
		{
			yyVAL.str = "json_arrayagg"
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1747
		{
			yyVAL.str = "json_exists"
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1748
		{
			yyVAL.str = "json_object"
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1749
		{
			yyVAL.str = "json_objectagg"
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1750
		{
			yyVAL.str = "json_query"
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1751
		{
			yyVAL.str = "json_scalar"
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1752
		{
			yyVAL.str = "json_serialize"
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1753
		{
			yyVAL.str = "json_table"
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1754
		{
			yyVAL.str = "json_value"
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1755
		{
			yyVAL.str = "keep"
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1756
		{
			yyVAL.str = "key"
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1757
		{
			yyVAL.str = "keys"
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1758
		{
			yyVAL.str = "label"
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1759
		{
			yyVAL.str = "language"
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1760
		{
			yyVAL.str = "large"
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1761
		{
			yyVAL.str = "last"
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1762
		{
			yyVAL.str = "lateral"
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1763
		{
			yyVAL.str = "leading"
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1764
		{
			yyVAL.str = "leakproof"
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1765
		{
			yyVAL.str = "least"
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1766
		{
			yyVAL.str = "left"
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1767
		{
			yyVAL.str = "level"
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1768
		{
			yyVAL.str = "like"
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1769
		{
			yyVAL.str = "listen"
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1770
		{
			yyVAL.str = "load"
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1771
		{
			yyVAL.str = "local"
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1772
		{
			yyVAL.str = "localtime"
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1773
		{
			yyVAL.str = "localtimestamp"
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1774
		{
			yyVAL.str = "location"
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1775
		{
			yyVAL.str = "lock"
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1776
		{
			yyVAL.str = "locked"
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1777
		{
			yyVAL.str = "logged"
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1778
		{
			yyVAL.str = "mapping"
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1779
		{
			yyVAL.str = "match"
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1780
		{
			yyVAL.str = "matched"
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1781
		{
			yyVAL.str = "materialized"
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1782
		{
			yyVAL.str = "maxvalue"
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1783
		{
			yyVAL.str = "merge"
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1784
		{
			yyVAL.str = "merge_action"
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1785
		{
			yyVAL.str = "method"
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1786
		{
			yyVAL.str = "minvalue"
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1787
		{
			yyVAL.str = "mode"
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1788
		{
			yyVAL.str = "move"
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1789
		{
			yyVAL.str = "name"
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1790
		{
			yyVAL.str = "names"
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1791
		{
			yyVAL.str = "national"
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1792
		{
			yyVAL.str = "natural"
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1793
		{
			yyVAL.str = "nchar"
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1794
		{
			yyVAL.str = "nested"
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1795
		{
			yyVAL.str = "new"
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1796
		{
			yyVAL.str = "next"
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1797
		{
			yyVAL.str = "nfc"
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1798
		{
			yyVAL.str = "nfd"
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1799
		{
			yyVAL.str = "nfkc"
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1800
		{
			yyVAL.str = "nfkd"
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1801
		{
			yyVAL.str = "no"
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1802
		{
			yyVAL.str = "none"
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1803
		{
			yyVAL.str = "normalize"
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1804
		{
			yyVAL.str = "normalized"
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1805
		{
			yyVAL.str = "not"
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1806
		{
			yyVAL.str = "nothing"
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1807
		{
			yyVAL.str = "notify"
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1808
		{
			yyVAL.str = "nowait"
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1809
		{
			yyVAL.str = "null"
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1810
		{
			yyVAL.str = "nullif"
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1811
		{
			yyVAL.str = "nulls"
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1812
		{
			yyVAL.str = "numeric"
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1813
		{
			yyVAL.str = "object"
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1814
		{
			yyVAL.str = "of"
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1815
		{
			yyVAL.str = "off"
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1816
		{
			yyVAL.str = "oids"
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1817
		{
			yyVAL.str = "old"
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1818
		{
			yyVAL.str = "omit"
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1819
		{
			yyVAL.str = "only"
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1820
		{
			yyVAL.str = "operator"
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1821
		{
			yyVAL.str = "option"
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1822
		{
			yyVAL.str = "options"
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1823
		{
			yyVAL.str = "or"
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1824
		{
			yyVAL.str = "ordinality"
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1825
		{
			yyVAL.str = "others"
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1826
		{
			yyVAL.str = "out"
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1827
		{
			yyVAL.str = "outer"
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1828
		{
			yyVAL.str = "overlay"
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1829
		{
			yyVAL.str = "overriding"
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1830
		{
			yyVAL.str = "owned"
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1831
		{
			yyVAL.str = "owner"
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1832
		{
			yyVAL.str = "parallel"
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1833
		{
			yyVAL.str = "parameter"
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1834
		{
			yyVAL.str = "parser"
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1835
		{
			yyVAL.str = "partial"
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1836
		{
			yyVAL.str = "partition"
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1837
		{
			yyVAL.str = "passing"
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1838
		{
			yyVAL.str = "password"
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1839
		{
			yyVAL.str = "path"
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1840
		{
			yyVAL.str = "placing"
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1841
		{
			yyVAL.str = "plan"
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1842
		{
			yyVAL.str = "plans"
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1843
		{
			yyVAL.str = "policy"
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1844
		{
			yyVAL.str = "position"
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1845
		{
			yyVAL.str = "preceding"
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1846
		{
			yyVAL.str = "prepare"
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1847
		{
			yyVAL.str = "prepared"
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1848
		{
			yyVAL.str = "preserve"
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1849
		{
			yyVAL.str = "primary"
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1850
		{
			yyVAL.str = "prior"
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1851
		{
			yyVAL.str = "privileges"
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1852
		{
			yyVAL.str = "procedural"
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1853
		{
			yyVAL.str = "procedure"
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1854
		{
			yyVAL.str = "procedures"
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1855
		{
			yyVAL.str = "program"
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1856
		{
			yyVAL.str = "publication"
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1857
		{
			yyVAL.str = "quote"
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1858
		{
			yyVAL.str = "quotes"
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1859
		{
			yyVAL.str = "range"
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1860
		{
			yyVAL.str = "read"
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1861
		{
			yyVAL.str = "real"
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1862
		{
			yyVAL.str = "reassign"
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1863
		{
			yyVAL.str = "recheck"
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1864
		{
			yyVAL.str = "recursive"
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1865
		{
			yyVAL.str = "ref"
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1866
		{
			yyVAL.str = "references"
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1867
		{
			yyVAL.str = "referencing"
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1868
		{
			yyVAL.str = "refresh"
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1869
		{
			yyVAL.str = "reindex"
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1870
		{
			yyVAL.str = "relative"
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1871
		{
			yyVAL.str = "release"
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1872
		{
			yyVAL.str = "rename"
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1873
		{
			yyVAL.str = "repeatable"
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1874
		{
			yyVAL.str = "replace"
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1875
		{
			yyVAL.str = "replica"
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1876
		{
			yyVAL.str = "reset"
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1877
		{
			yyVAL.str = "restart"
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1878
		{
			yyVAL.str = "restrict"
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1879
		{
			yyVAL.str = "return"
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1880
		{
			yyVAL.str = "returns"
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1881
		{
			yyVAL.str = "revoke"
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1882
		{
			yyVAL.str = "right"
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1883
		{
			yyVAL.str = "role"
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1884
		{
			yyVAL.str = "rollback"
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1885
		{
			yyVAL.str = "rollup"
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1886
		{
			yyVAL.str = "routine"
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1887
		{
			yyVAL.str = "routines"
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1888
		{
			yyVAL.str = "row"
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1889
		{
			yyVAL.str = "rows"
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1890
		{
			yyVAL.str = "rule"
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1891
		{
			yyVAL.str = "savepoint"
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1892
		{
			yyVAL.str = "scalar"
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1893
		{
			yyVAL.str = "schema"
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1894
		{
			yyVAL.str = "schemas"
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1895
		{
			yyVAL.str = "scroll"
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1896
		{
			yyVAL.str = "search"
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1897
		{
			yyVAL.str = "security"
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1898
		{
			yyVAL.str = "select"
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1899
		{
			yyVAL.str = "sequence"
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1900
		{
			yyVAL.str = "sequences"
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1901
		{
			yyVAL.str = "serializable"
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1902
		{
			yyVAL.str = "server"
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1903
		{
			yyVAL.str = "session"
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1904
		{
			yyVAL.str = "session_user"
		}
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1905
		{
			yyVAL.str = "set"
		}
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1906
		{
			yyVAL.str = "setof"
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1907
		{
			yyVAL.str = "sets"
		}
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1908
		{
			yyVAL.str = "share"
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1909
		{
			yyVAL.str = "show"
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1910
		{
			yyVAL.str = "similar"
		}
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1911
		{
			yyVAL.str = "simple"
		}
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1912
		{
			yyVAL.str = "skip"
		}
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1913
		{
			yyVAL.str = "smallint"
		}
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1914
		{
			yyVAL.str = "snapshot"
		}
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1915
		{
			yyVAL.str = "some"
		}
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1916
		{
			yyVAL.str = "source"
		}
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1917
		{
			yyVAL.str = "sql"
		}
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1918
		{
			yyVAL.str = "stable"
		}
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1919
		{
			yyVAL.str = "standalone"
		}
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1920
		{
			yyVAL.str = "start"
		}
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1921
		{
			yyVAL.str = "statement"
		}
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1922
		{
			yyVAL.str = "statistics"
		}
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1923
		{
			yyVAL.str = "stdin"
		}
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1924
		{
			yyVAL.str = "stdout"
		}
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1925
		{
			yyVAL.str = "storage"
		}
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1926
		{
			yyVAL.str = "stored"
		}
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1927
		{
			yyVAL.str = "strict"
		}
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1928
		{
			yyVAL.str = "string"
		}
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1929
		{
			yyVAL.str = "strip"
		}
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1930
		{
			yyVAL.str = "subscription"
		}
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1931
		{
			yyVAL.str = "substring"
		}
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1932
		{
			yyVAL.str = "support"
		}
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1933
		{
			yyVAL.str = "symmetric"
		}
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1934
		{
			yyVAL.str = "sysid"
		}
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1935
		{
			yyVAL.str = "system"
		}
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1936
		{
			yyVAL.str = "system_user"
		}
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1937
		{
			yyVAL.str = "table"
		}
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1938
		{
			yyVAL.str = "tables"
		}
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1939
		{
			yyVAL.str = "tablesample"
		}
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1940
		{
			yyVAL.str = "tablespace"
		}
	case 1047:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1941
		{
			yyVAL.str = "target"
		}
	case 1048:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1942
		{
			yyVAL.str = "temp"
		}
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1943
		{
			yyVAL.str = "template"
		}
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1944
		{
			yyVAL.str = "temporary"
		}
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1945
		{
			yyVAL.str = "text"
		}
	case 1052:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1946
		{
			yyVAL.str = "then"
		}
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1947
		{
			yyVAL.str = "ties"
		}
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1948
		{
			yyVAL.str = "time"
		}
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1949
		{
			yyVAL.str = "timestamp"
		}
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1950
		{
			yyVAL.str = "trailing"
		}
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1951
		{
			yyVAL.str = "transaction"
		}
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1952
		{
			yyVAL.str = "transform"
		}
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1953
		{
			yyVAL.str = "treat"
		}
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1954
		{
			yyVAL.str = "trigger"
		}
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1955
		{
			yyVAL.str = "trim"
		}
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1956
		{
			yyVAL.str = "true"
		}
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1957
		{
			yyVAL.str = "truncate"
		}
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1958
		{
			yyVAL.str = "trusted"
		}
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1959
		{
			yyVAL.str = "type"
		}
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1960
		{
			yyVAL.str = "types"
		}
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1961
		{
			yyVAL.str = "uescape"
		}
	case 1068:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1962
		{
			yyVAL.str = "unbounded"
		}
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1963
		{
			yyVAL.str = "uncommitted"
		}
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1964
		{
			yyVAL.str = "unconditional"
		}
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1965
		{
			yyVAL.str = "unencrypted"
		}
	case 1072:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1966
		{
			yyVAL.str = "unique"
		}
	case 1073:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1967
		{
			yyVAL.str = "unknown"
		}
	case 1074:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1968
		{
			yyVAL.str = "unlisten"
		}
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1969
		{
			yyVAL.str = "unlogged"
		}
	case 1076:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1970
		{
			yyVAL.str = "until"
		}
	case 1077:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1971
		{
			yyVAL.str = "update"
		}
	case 1078:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1972
		{
			yyVAL.str = "user"
		}
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1973
		{
			yyVAL.str = "using"
		}
	case 1080:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1974
		{
			yyVAL.str = "vacuum"
		}
	case 1081:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1975
		{
			yyVAL.str = "valid"
		}
	case 1082:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1976
		{
			yyVAL.str = "validate"
		}
	case 1083:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1977
		{
			yyVAL.str = "validator"
		}
	case 1084:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1978
		{
			yyVAL.str = "value"
		}
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1979
		{
			yyVAL.str = "values"
		}
	case 1086:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1980
		{
			yyVAL.str = "varchar"
		}
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1981
		{
			yyVAL.str = "variadic"
		}
	case 1088:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1982
		{
			yyVAL.str = "verbose"
		}
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1983
		{
			yyVAL.str = "version"
		}
	case 1090:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1984
		{
			yyVAL.str = "view"
		}
	case 1091:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1985
		{
			yyVAL.str = "views"
		}
	case 1092:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1986
		{
			yyVAL.str = "volatile"
		}
	case 1093:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1987
		{
			yyVAL.str = "when"
		}
	case 1094:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1988
		{
			yyVAL.str = "whitespace"
		}
	case 1095:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1989
		{
			yyVAL.str = "work"
		}
	case 1096:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1990
		{
			yyVAL.str = "wrapper"
		}
	case 1097:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1991
		{
			yyVAL.str = "write"
		}
	case 1098:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1992
		{
			yyVAL.str = "xml"
		}
	case 1099:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1993
		{
			yyVAL.str = "xmlattributes"
		}
	case 1100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1994
		{
			yyVAL.str = "xmlconcat"
		}
	case 1101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1995
		{
			yyVAL.str = "xmlelement"
		}
	case 1102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1996
		{
			yyVAL.str = "xmlexists"
		}
	case 1103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1997
		{
			yyVAL.str = "xmlforest"
		}
	case 1104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1998
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 1105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1999
		{
			yyVAL.str = "xmlparse"
		}
	case 1106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2000
		{
			yyVAL.str = "xmlpi"
		}
	case 1107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2001
		{
			yyVAL.str = "xmlroot"
		}
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2002
		{
			yyVAL.str = "xmlserialize"
		}
	case 1109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2003
		{
			yyVAL.str = "xmltable"
		}
	case 1110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2004
		{
			yyVAL.str = "yes"
		}
	case 1111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2005
		{
			yyVAL.str = "zone"
		}
	case 1112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2020
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2022
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2026
		{
			collateClause := ast.NewCollateClause(yyDollar[3].list)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 1115:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2032
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[1].node), 0)
		}
	case 1116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2037
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[1].node), 0)
		}
	case 1117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2042
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2047
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2052
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2057
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2062
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2067
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2072
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2077
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2082
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2087
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2092
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2097
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2102
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2107
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2112
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2116
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2120
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2124
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2128
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2132
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2136
		{
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1138:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2141
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1139:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2148
		{
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1140:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2153
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2160
		{
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1142:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2165
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1143:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2172
		{
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1144:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2177
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2184
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1146:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2191
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2198
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1148:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2205
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2212
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2216
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2220
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2224
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2228
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlaps"))
			leftList := yyDollar[1].list
			rightList := yyDollar[3].list
			combinedList := ast.NewNodeList()
			combinedList.Items = append(leftList.Items, rightList.Items...)
			yyVAL.node = ast.NewFuncCall(funcName, combinedList, 0)
		}
	case 1154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2237
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_TRUE)
		}
	case 1155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2241
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_TRUE)
		}
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2245
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_FALSE)
		}
	case 1157:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2249
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_FALSE)
		}
	case 1158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2253
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_UNKNOWN)
		}
	case 1159:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2257
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_UNKNOWN)
		}
	case 1160:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2261
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1161:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2266
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1162:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2271
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1163:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2276
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1164:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2281
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1165:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2286
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2291
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2296
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1168:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2301
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			sublink := ast.NewSubLink(subLinkType, yyDollar[4].stmt)
			sublink.Testexpr = yyDollar[1].node
			sublink.OperName = operName
			yyVAL.node = sublink
		}
	case 1169:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2310
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			if subLinkType == ast.ANY_SUBLINK {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ANY, operName, yyDollar[1].node, yyDollar[5].node, 0)
			} else {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ALL, operName, yyDollar[1].node, yyDollar[5].node, 0)
			}
		}
	case 1170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2320
		{
			yylex.Error("UNIQUE predicate is not yet implemented")
		}
	case 1171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2324
		{
			args := ast.NewNodeList(yyDollar[1].node.(ast.Expression))
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
		}
	case 1172:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2329
		{
			args := ast.NewNodeList(yyDollar[1].node.(ast.Expression))
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2335
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2341
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[3].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1175:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2348
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1176:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2355
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[4].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1177:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2363
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[3].ival)
			uniqueKeys := yyDollar[4].bval
			yyVAL.node = ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
		}
	case 1178:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2380
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[4].ival)
			uniqueKeys := yyDollar[5].bval
			jsonPredicate := ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(jsonPredicate))
		}
	case 1179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2399
		{
			yyVAL.node = ast.NewSetToDefault(0, 0, 0)
		}
	case 1180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2404
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2406
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2410
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2415
		{
			yyVAL.node = doNegate(yyDollar[2].node, 0)
		}
	case 1184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2419
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2424
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2429
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2434
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2439
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2444
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2449
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2454
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2459
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2464
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2469
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2474
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2479
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2483
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1198:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2487
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1199:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2492
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2497
		{
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1201:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2502
		{
			args := ast.NewNodeList(yyDollar[1].node)
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2509
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2510
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2512
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 1205:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2521
		{
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewParenExpr(ast.NewA_Indirection(yyDollar[2].node, yyDollar[4].list, 0), 0)
			} else {
				yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
			}
		}
	case 1206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2528
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2529
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2531
		{
			yyVAL.node = ast.NewExprSublink(yyDollar[1].stmt)
		}
	case 1209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2535
		{
			sublink := ast.NewExprSublink(yyDollar[1].stmt)
			yyVAL.node = ast.NewA_Indirection(sublink, yyDollar[2].list, 0)
		}
	case 1210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2540
		{
			yyVAL.node = ast.NewExistsSublink(yyDollar[2].stmt)
		}
	case 1211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2544
		{
			yyVAL.node = ast.NewArraySublink(yyDollar[2].stmt)
		}
	case 1212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2548
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2552
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = rowExpr
		}
	case 1214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2558
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_IMPLICIT_CAST
			yyVAL.node = rowExpr
		}
	case 1215:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2564
		{
			exprList := yyDollar[3].list
			grouping := &ast.GroupingFunc{
				BaseExpr: ast.BaseExpr{BaseNode: ast.BaseNode{Tag: ast.T_GroupingFunc}},
				Args:     exprList,
			}
			yyVAL.node = grouping
		}
	case 1216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2581
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2582
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2583
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2584
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2585
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2589
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 1222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2593
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 1223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2597
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 1224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2601
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 1225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2605
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2609
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 1227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2613
		{
			yyVAL.node = ast.NewA_Const(ast.NewBitString(yyDollar[1].str), 0)
		}
	case 1228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2617
		{
			// This is a bit constant per SQL99
			yyVAL.node = ast.NewA_Const(ast.NewBitString(yyDollar[1].str), 0)
		}
	case 1229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2622
		{
			// generic type 'literal' syntax
			typeName := makeTypeNameFromNodeList(yyDollar[1].list)
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, typeName, 0)
		}
	case 1230:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2629
		{
			// generic syntax with a type modifier
			typeName := makeTypeNameFromNodeList(yyDollar[1].list)
			// For now, we'll skip the error checking for NamedArgExpr and ORDER BY
			// TODO: Add proper validation when needed
			typeName.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[6].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, typeName, 0)
		}
	case 1231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2639
		{
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, yyDollar[1].typnam, 0)
		}
	case 1232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2644
		{
			t := yyDollar[1].typnam
			t.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 1233:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2651
		{
			t := yyDollar[1].typnam
			// INTERVAL_FULL_RANGE equivalent and precision
			fullRange := ast.NewInteger(ast.INTERVAL_FULL_RANGE)
			precision := ast.NewInteger(yyDollar[3].ival)
			t.Typmods = ast.NewNodeList(fullRange, precision)
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[5].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 1234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2662
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2665
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2668
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2669
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 1238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2670
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 1239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2674
		{
			yyVAL.typnam = makeTypeNameFromNodeList(ast.NewNodeList(ast.NewString("interval")))
		}
	case 1240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2681
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_YEAR))
		}
	case 1241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2683
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_MONTH))
		}
	case 1242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2685
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY))
		}
	case 1243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2687
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_HOUR))
		}
	case 1244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2689
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_MINUTE))
		}
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2691
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2693
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_YEAR | ast.INTERVAL_MASK_MONTH))
		}
	case 1247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2697
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR))
		}
	case 1248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2701
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE))
		}
	case 1249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2705
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2716
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE))
		}
	case 1251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2720
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2731
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1253:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2742
		{
			yyVAL.list = nil
		}
	case 1254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2747
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_SECOND))
		}
	case 1255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2751
		{
			yyVAL.list = ast.NewNodeList(
				ast.NewInteger(ast.INTERVAL_MASK_SECOND),
				ast.NewInteger(yyDollar[3].ival), // precision
			)
		}
	case 1256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2761
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 1257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2765
		{
			// Create all fields: first ColId followed by indirection items
			allFields := []ast.Node{ast.NewString(yyDollar[1].str)}
			allFields = append(allFields, yyDollar[2].list.Items...)
			yyVAL.node = ast.NewColumnRef(allFields...)
		}
	case 1258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2775
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2779
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2785
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1261:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2786
		{
			yyVAL.node = nil
		}
	case 1262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2790
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2794
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 1264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2798
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 1265:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2802
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 1266:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2807
		{
			yyVAL.list = nil
		}
	case 1267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2809
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2821
		{
			funcCall := yyDollar[1].node.(*ast.FuncCall)

			// Apply within_group_clause if present
			if yyDollar[2].list != nil {
				// WITHIN GROUP (ORDER BY ...) - store the sort list
				funcCall.AggOrder = yyDollar[2].list
				funcCall.AggWithinGroup = true
			}

			// Apply filter_clause if present
			if yyDollar[3].node != nil {
				// FILTER (WHERE condition) - store the filter expression
				funcCall.AggFilter = yyDollar[3].node
			}

			// Apply over_clause if present (window functions)
			if yyDollar[4].windef != nil {
				funcCall.Over = yyDollar[4].windef
			}

			yyVAL.node = funcCall
		}
	case 1269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2845
		{
			jsonAgg := yyDollar[1].node

			// Create or get the Constructor
			var constructor *ast.JsonAggConstructor

			// Handle the filter_clause and over_clause by setting them in the Constructor
			switch jsonFunc := jsonAgg.(type) {
			case *ast.JsonObjectAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			case *ast.JsonArrayAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			}

			// Set filter and over clauses outside the switch (DRY)
			if constructor != nil {
				if yyDollar[2].node != nil {
					constructor.AggFilter = yyDollar[2].node.(ast.Node)
				}
				if yyDollar[3].windef != nil {
					constructor.Over = yyDollar[3].windef
				}
			}

			yyVAL.node = jsonAgg
		}
	case 1270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2878
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1271:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2884
		{
			// SystemFuncName("pg_collation_for")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("pg_collation_for"))
			funcCall := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2892
		{
			// makeSQLValueFunction(SVFOP_CURRENT_DATE, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_DATE, 0, -1, 0)
		}
	case 1273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2897
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIME, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIME, 0, -1, 0)
		}
	case 1274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2902
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIME_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIME_N, 0, yyDollar[3].ival, 0)
		}
	case 1275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2907
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIMESTAMP, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIMESTAMP, 0, -1, 0)
		}
	case 1276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2912
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIMESTAMP_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIMESTAMP_N, 0, yyDollar[3].ival, 0)
		}
	case 1277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2917
		{
			// makeSQLValueFunction(SVFOP_LOCALTIME, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIME, 0, -1, 0)
		}
	case 1278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2922
		{
			// makeSQLValueFunction(SVFOP_LOCALTIME_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIME_N, 0, yyDollar[3].ival, 0)
		}
	case 1279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2927
		{
			// makeSQLValueFunction(SVFOP_LOCALTIMESTAMP, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIMESTAMP, 0, -1, 0)
		}
	case 1280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2932
		{
			// makeSQLValueFunction(SVFOP_LOCALTIMESTAMP_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIMESTAMP_N, 0, yyDollar[3].ival, 0)
		}
	case 1281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2937
		{
			// makeSQLValueFunction(SVFOP_CURRENT_ROLE, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_ROLE, 0, -1, 0)
		}
	case 1282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2942
		{
			// makeSQLValueFunction(SVFOP_CURRENT_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_USER, 0, -1, 0)
		}
	case 1283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2947
		{
			// makeSQLValueFunction(SVFOP_SESSION_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_SESSION_USER, 0, -1, 0)
		}
	case 1284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2952
		{
			// SystemFuncName("system_user")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("system_user"))
			funcCall := ast.NewFuncCall(funcName, nil, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2960
		{
			// makeSQLValueFunction(SVFOP_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_USER, 0, -1, 0)
		}
	case 1286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2965
		{
			// makeSQLValueFunction(SVFOP_CURRENT_CATALOG, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_CATALOG, 0, -1, 0)
		}
	case 1287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2970
		{
			// makeSQLValueFunction(SVFOP_CURRENT_SCHEMA, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_SCHEMA, 0, -1, 0)
		}
	case 1288:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2975
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[3].node, yyDollar[5].typnam, 0)
		}
	case 1289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2979
		{
			// SystemFuncName("extract")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("extract"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2987
		{
			// SystemFuncName("normalize")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("normalize"))
			funcCall := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node), 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1291:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2995
		{
			// SystemFuncName("normalize")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("normalize"))
			args := ast.NewNodeList(yyDollar[3].node)
			args.Items = append(args.Items, ast.NewA_Const(ast.NewString(yyDollar[5].str), -1))
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3005
		{
			// SystemFuncName("overlay")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlay"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3013
		{
			// SystemFuncName("overlay")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlay"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3021
		{
			// SystemFuncName("position")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("position"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3029
		{
			// SystemFuncName("substring")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("substring"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3037
		{
			// SystemFuncName("substring")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("substring"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1297:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3045
		{
			// SystemFuncName("treat")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), llast(yyDollar[5].typnam.Names))
			args := ast.NewNodeList(yyDollar[3].node)
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1298:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3054
		{
			// SystemFuncName("btrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("btrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1299:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3062
		{
			// SystemFuncName("ltrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("ltrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1300:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3070
		{
			// SystemFuncName("rtrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("rtrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3078
		{
			// SystemFuncName("btrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("btrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1302:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3086
		{
			// makeSimpleA_Expr(AEXPR_NULLIF, "=", $3, $5, @1)
			operName := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NULLIF, operName, yyDollar[3].node, yyDollar[5].node, 0)
		}
	case 1303:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3092
		{
			// CoalesceExpr *c = makeNode(CoalesceExpr); c->args = $3; c->location = @1
			yyVAL.node = ast.NewCoalesceExpr(0, yyDollar[3].list)
		}
	case 1304:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3097
		{
			// MinMaxExpr *v = makeNode(MinMaxExpr); v->args = $3; v->op = IS_GREATEST; v->location = @1
			yyVAL.node = ast.NewMinMaxExpr(0, 0, 0, ast.IS_GREATEST, yyDollar[3].list, 0)
		}
	case 1305:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3102
		{
			// MinMaxExpr *v = makeNode(MinMaxExpr); v->args = $3; v->op = IS_LEAST; v->location = @1
			yyVAL.node = ast.NewMinMaxExpr(0, 0, 0, ast.IS_LEAST, yyDollar[3].list, 0)
		}
	case 1306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3107
		{
			// makeXmlExpr(IS_XMLCONCAT, NULL, NIL, $3, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLCONCAT, "", nil, nil, yyDollar[3].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1307:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3112
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, NIL, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, nil, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1308:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3117
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, $6, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, yyDollar[6].list, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1309:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3122
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, NIL, $6, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, nil, nil, yyDollar[6].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1310:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3127
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, $6, $8, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, yyDollar[6].list, nil, yyDollar[8].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1311:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3132
		{
			// makeXmlExpr(IS_XMLFOREST, NULL, $3, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLFOREST, "", yyDollar[3].list, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1312:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3137
		{
			// makeXmlExpr(IS_XMLPARSE, NULL, NIL, list_make2($4, makeBoolAConst($5, -1)), @1)
			// x->xmloption = $3
			wsOption := ast.NewA_Const(ast.NewBoolean(yyDollar[5].bval), -1)
			args := ast.NewNodeList(yyDollar[4].node, wsOption)
			xmlOption := ast.XmlOptionType(yyDollar[3].ival)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPARSE, "", nil, nil, args, xmlOption, false, 0, -1, 0)
		}
	case 1313:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3146
		{
			// SystemFuncName("xmlexists") - xmlexists(A PASSING [BY REF] B [BY REF]) is converted to xmlexists(A, B)
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("xmlexists"))
			args := ast.NewNodeList(yyDollar[3].node, yyDollar[4].node)
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1314:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3155
		{
			// makeXmlExpr(IS_XMLPI, $4, NIL, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPI, yyDollar[4].str, nil, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1315:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3160
		{
			// makeXmlExpr(IS_XMLPI, $4, NIL, list_make1($6), @1)
			args := ast.NewNodeList(yyDollar[6].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPI, yyDollar[4].str, nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1316:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3166
		{
			// makeXmlExpr(IS_XMLROOT, NULL, NIL, list_make3(...), @1)
			args := ast.NewNodeList(yyDollar[3].node, yyDollar[5].node, yyDollar[6].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLROOT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1317:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3172
		{
			/* Support for legacy (non-standard) json_object() */
			funcName := ast.NewNodeList(ast.NewString("json_object"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1318:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3183
		{
			n := ast.NewJsonObjectConstructor(yyDollar[3].list, yyDollar[4].bval, yyDollar[5].bval)
			if yyDollar[6].node != nil {
				n.Output = yyDollar[6].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1319:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3191
		{
			n := ast.NewJsonObjectConstructor(nil, false, false)
			if yyDollar[3].node != nil {
				n.Output = yyDollar[3].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1320:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3203
		{
			n := ast.NewJsonArrayConstructor(yyDollar[3].list, yyDollar[4].bval)
			if yyDollar[5].node != nil {
				n.Output = yyDollar[5].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1321:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3215
		{
			n := ast.NewJsonArrayQueryConstructor(yyDollar[3].stmt, true) /* XXX: absent_on_null = true */
			if yyDollar[4].node != nil {
				n.Format = yyDollar[4].node.(*ast.JsonFormat)
			}
			if yyDollar[5].node != nil {
				n.Output = yyDollar[5].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1322:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3228
		{
			n := ast.NewJsonArrayConstructor(nil, true)
			if yyDollar[3].node != nil {
				n.Output = yyDollar[3].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1323:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3236
		{
			n := ast.NewJsonParseExpr(yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[4].bval)
			n.Output = nil
			yyVAL.node = n
		}
	case 1324:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3242
		{
			n := ast.NewJsonScalarExpr(yyDollar[3].node.(ast.Expr))
			n.Output = nil
			yyVAL.node = n
		}
	case 1325:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3248
		{
			n := ast.NewJsonSerializeExpr(yyDollar[3].node.(*ast.JsonValueExpr))
			if yyDollar[4].node != nil {
				n.Output = yyDollar[4].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3256
		{
			m := ast.NewMergeSupportFunc(ast.TEXTOID, ast.InvalidOid, 0)
			yyVAL.node = m
		}
	case 1327:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:3267
		{
			n := ast.NewJsonFuncExpr(ast.JSON_QUERY_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			if yyDollar[7].node != nil {
				n.Output = yyDollar[7].node.(*ast.JsonOutput)
			}
			n.Wrapper = ast.JsonWrapper(yyDollar[8].ival)
			n.Quotes = ast.JsonQuotes(yyDollar[9].ival)
			if yyDollar[10].node != nil {
				behaviors := yyDollar[10].node.(*ast.NodeList)
				if linitial(behaviors) != nil {
					n.OnEmpty = linitial(behaviors).(*ast.JsonBehavior)
				}
				if lsecond(behaviors) != nil {
					n.OnError = lsecond(behaviors).(*ast.JsonBehavior)
				}
			}
			yyVAL.node = n
		}
	case 1328:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3292
		{
			n := ast.NewJsonFuncExpr(ast.JSON_EXISTS_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			n.Output = nil
			if yyDollar[7].node != nil {
				n.OnError = yyDollar[7].node.(*ast.JsonBehavior)
			}
			yyVAL.node = n
		}
	case 1329:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3308
		{
			n := ast.NewJsonFuncExpr(ast.JSON_VALUE_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			if yyDollar[7].node != nil {
				n.Output = yyDollar[7].node.(*ast.JsonOutput)
			}
			if yyDollar[8].node != nil {
				behaviors := yyDollar[8].node.(*ast.NodeList)
				if linitial(behaviors) != nil {
					n.OnEmpty = linitial(behaviors).(*ast.JsonBehavior)
				}
				if lsecond(behaviors) != nil {
					n.OnError = lsecond(behaviors).(*ast.JsonBehavior)
				}
			}
			yyVAL.node = n
		}
	case 1330:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3328
		{
			// XmlSerialize node - n->xmloption = $3; n->expr = $4; n->typeName = $6; n->indent = $7;
			xmlOption := ast.XmlOptionType(yyDollar[3].ival)
			yyVAL.node = ast.NewXmlSerialize(xmlOption, yyDollar[4].node, yyDollar[6].typnam, yyDollar[7].bval, 0)
		}
	case 1331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3338
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3342
		{
			yyVAL.list = nil
		}
	case 1333:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3349
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1334:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3353
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3357
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node)
		}
	case 1336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3361
		{
			sysTypeName := &ast.TypeName{
				Names:   ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("int4")),
				Typemod: -1,
			}
			tc := ast.NewTypeCast(yyDollar[3].node, sysTypeName, -1)
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, ast.NewInteger(1), tc)
		}
	case 1337:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3370
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3377
		{
			yyDollar[3].list.Append(yyDollar[1].node)
			yyVAL.list = yyDollar[3].list
		}
	case 1339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3382
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3386
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3393
		{
			// list_make2(makeStringConst($1, @1), $3)
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str), yyDollar[3].node)
		}
	case 1342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3403
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3404
		{
			yyVAL.str = "year"
		}
	case 1344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3405
		{
			yyVAL.str = "month"
		}
	case 1345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3406
		{
			yyVAL.str = "day"
		}
	case 1346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3407
		{
			yyVAL.str = "hour"
		}
	case 1347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3408
		{
			yyVAL.str = "minute"
		}
	case 1348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3409
		{
			yyVAL.str = "second"
		}
	case 1349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3410
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1350:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3415
		{
			/* overlay(A PLACING B FROM C FOR D) is converted to overlay(A, B, C, D) */
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 1351:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3420
		{
			/* overlay(A PLACING B FROM C) is converted to overlay(A, B, C) */
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3428
		{
			yyVAL.list = ast.NewNodeList(yyDollar[3].node, yyDollar[1].node)
		}
	case 1353:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3431
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3436
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3440
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3448
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3452
		{
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3457
		{
			yyVAL.bval = true
		}
	case 1359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3458
		{
			yyVAL.bval = false
		}
	case 1360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3459
		{
			yyVAL.bval = false
		}
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3462
		{
			yyVAL.bval = true
		}
	case 1362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3463
		{
			yyVAL.bval = false
		}
	case 1363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3464
		{
			yyVAL.bval = false
		}
	case 1364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3469
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3473
		{
			yyVAL.node = ast.NewA_Const(ast.NewNull(), 0)
		}
	case 1366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3480
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_YES)), 0)
		}
	case 1367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3484
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_NO)), 0)
		}
	case 1368:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3488
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_NO_VALUE)), 0)
		}
	case 1369:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3492
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_OMITTED)), 0)
		}
	case 1370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3499
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3500
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3501
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3505
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3509
		{
			// PostgreSQL uses check_func_name here
			// We implement the logic inline - prepend ColId to indirection list
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[2].list.Items...)
			result := ast.NewNodeList(items...)
			yyVAL.list = result
		}
	case 1375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3520
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].list, nil, 0)
		}
	case 1376:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3524
		{
			// Special case for aggregates like COUNT(*) - set AggStar to true
			funcCall := ast.NewFuncCall(yyDollar[1].list, nil, 0)
			funcCall.AggStar = true
			yyVAL.node = funcCall
		}
	case 1377:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3531
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[3].list, 0)
			// Note: In full implementation, would set agg_order from $4
			yyVAL.node = funcCall
		}
	case 1378:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3537
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, ast.NewNodeList(yyDollar[4].node), 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1379:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3543
		{
			yyDollar[3].list.Append(yyDollar[6].node)
			args := yyDollar[3].list
			funcCall := ast.NewFuncCall(yyDollar[1].list, args, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $7
			yyVAL.node = funcCall
		}
	case 1380:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3551
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would mark as aggregate and set agg_order from $5
			yyVAL.node = funcCall
		}
	case 1381:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3557
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would set agg_distinct = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3565
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3569
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3576
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3580
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3584
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1387:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3591
		{
			yyVAL.node = ast.NewCaseExpr(0, yyDollar[2].node, yyDollar[3].list, yyDollar[4].node)
		}
	case 1388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3596
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3597
		{
			yyVAL.node = nil
		}
	case 1390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3601
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3603
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1392:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3611
		{
			yyVAL.node = ast.NewCaseWhen(yyDollar[2].node, yyDollar[4].node)
		}
	case 1393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3617
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3618
		{
			yyVAL.node = nil
		}
	case 1395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3623
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3627
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3631
		{
			yyVAL.node = ast.NewArrayConstructor(ast.NewNodeList())
		}
	case 1398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3636
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3638
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1400:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3645
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3646
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1402:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3648
		{
			nodeList := yyDollar[2].list
			nodeList.Append(yyDollar[4].node)
			yyVAL.list = nodeList
		}
	case 1403:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3655
		{
			yyVAL.node = yyDollar[3].list
		}
	case 1404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3656
		{
			yyVAL.node = ast.NewNodeList()
		}
	case 1405:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3660
		{
			yyDollar[2].list.Append(yyDollar[4].node)
			yyVAL.node = yyDollar[2].list
		}
	case 1406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3666
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3667
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3668
		{
			yyVAL.ival = int(ast.ALL_SUBLINK)
		}
	case 1409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3673
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1410:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3677
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3681
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~"))
		}
	case 1412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3685
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~"))
		}
	case 1413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3689
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~*"))
		}
	case 1414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3693
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~*"))
		}
	case 1415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3699
		{
			yyVAL.str = "NFC"
		}
	case 1416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3700
		{
			yyVAL.str = "NFD"
		}
	case 1417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3701
		{
			yyVAL.str = "NFKC"
		}
	case 1418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3702
		{
			yyVAL.str = "NFKD"
		}
	case 1419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3706
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3707
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3708
		{
			yyVAL.ival = int(ast.JS_TYPE_ARRAY)
		}
	case 1422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3709
		{
			yyVAL.ival = int(ast.JS_TYPE_OBJECT)
		}
	case 1423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3710
		{
			yyVAL.ival = int(ast.JS_TYPE_SCALAR)
		}
	case 1424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3714
		{
			yyVAL.bval = true
		}
	case 1425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3715
		{
			yyVAL.bval = true
		}
	case 1426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3716
		{
			yyVAL.bval = false
		}
	case 1427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3717
		{
			yyVAL.bval = false
		}
	case 1428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3718
		{
			yyVAL.bval = false
		}
	case 1429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3723
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3727
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3736
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.ArrayBounds = yyDollar[2].list
		}
	case 1432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3741
		{
			yyVAL.typnam = yyDollar[2].typnam
			yyVAL.typnam.ArrayBounds = yyDollar[3].list
			yyVAL.typnam.Setof = true
		}
	case 1433:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3747
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(yyDollar[4].ival))
		}
	case 1434:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3752
		{
			yyVAL.typnam = yyDollar[2].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(yyDollar[5].ival))
			yyVAL.typnam.Setof = true
		}
	case 1435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3758
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(-1))
		}
	case 1436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3763
		{
			yyVAL.typnam = yyDollar[2].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(-1))
			yyVAL.typnam.Setof = true
		}
	case 1437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3772
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList()
			} else {
				yyVAL.list = yyDollar[1].list
			}
			yyVAL.list.Append(ast.NewInteger(-1))
		}
	case 1438:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3781
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList()
			} else {
				yyVAL.list = yyDollar[1].list
			}
			yyVAL.list.Append(ast.NewInteger(yyDollar[3].ival))
		}
	case 1439:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3790
		{
			yyVAL.list = nil
		}
	case 1440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3795
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3796
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3797
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3798
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3799
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3801
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1446:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3806
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.Typmods = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_FULL_RANGE), ast.NewInteger(yyDollar[3].ival))
		}
	case 1447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3810
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3813
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3814
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3815
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3818
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3821
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3824
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3828
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[2].str))
		}
	case 1455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3832
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3839
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3843
		{
			yyVAL.list = nil
		}
	case 1458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3849
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3855
		{
			// Create qualified type name from name + attrs
			name := ast.NewString(yyDollar[1].str)
			names := &ast.NodeList{Items: append([]ast.Node{name}, yyDollar[2].list.Items...)}
			typeName := makeTypeNameFromNodeList(names)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3866
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3870
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3874
		{
			yyVAL.typnam = makeTypeNameFromString("int2")
		}
	case 1463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3878
		{
			yyVAL.typnam = makeTypeNameFromString("int8")
		}
	case 1464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3882
		{
			yyVAL.typnam = makeTypeNameFromString("float4")
		}
	case 1465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3886
		{
			yyVAL.typnam = yyDollar[2].typnam
		}
	case 1466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3890
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3894
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3899
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3904
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3909
		{
			yyVAL.typnam = makeTypeNameFromString("bool")
		}
	case 1471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3915
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3919
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3925
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3929
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3935
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3939
		{
			yyVAL.typnam = yyDollar[1].typnam
			// Set typmods to nil for BitWithoutLength in const context
			yyVAL.typnam.Typmods = nil
		}
	case 1477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3947
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3951
		{
			yyVAL.typnam = yyDollar[1].typnam
			// Set typmods to nil for CharacterWithoutLength in const context
			yyVAL.typnam.Typmods = nil
		}
	case 1479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3959
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3967
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3975
		{
			yyVAL.str = "varchar"
		}
	case 1482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3979
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3987
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3995
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1485:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4005
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Set typmods with the length parameter, similar to PostgreSQL's approach
			lengthConst := ast.NewInteger(int(yyDollar[3].ival))
			typeName.Typmods = ast.NewNodeList()
			typeName.Typmods.Append(lengthConst)
			yyVAL.typnam = typeName
		}
	case 1486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4016
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// CHAR defaults to CHAR(1)
				lengthConst := ast.NewInteger(1)
				typeName.Typmods = ast.NewNodeList()
				typeName.Typmods.Append(lengthConst)
			}
			yyVAL.typnam = typeName
		}
	case 1487:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4030
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			tn := makeTypeNameFromString(typeName)
			tn.Typmods = yyDollar[4].list
			yyVAL.typnam = tn
		}
	case 1488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4044
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1489:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4056
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			tn := makeTypeNameFromString(typeName)
			tn.Typmods = ast.NewNodeList(ast.NewInteger(yyDollar[3].ival))
			yyVAL.typnam = tn
		}
	case 1490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4068
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1491:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4078
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			tn := makeTypeNameFromString(typeName)
			tn.Typmods = ast.NewNodeList(ast.NewInteger(yyDollar[3].ival))
			yyVAL.typnam = tn
		}
	case 1492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4090
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4102
		{
			yyVAL.typnam = makeTypeNameFromString("json")
		}
	case 1494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4107
		{
			yyVAL.ival = 1
		}
	case 1495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4108
		{
			yyVAL.ival = 0
		}
	case 1496:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4109
		{
			yyVAL.ival = 0
		}
	case 1497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4112
		{
			yyVAL.ival = 1
		}
	case 1498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4113
		{
			yyVAL.ival = 0
		}
	case 1499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4117
		{
			if yyDollar[2].ival < 1 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else if yyDollar[2].ival <= 7 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else {
				yyVAL.typnam = makeTypeNameFromString("float8")
			}
		}
	case 1500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4127
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4134
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1502:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4138
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4145
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1504:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4149
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4154
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4155
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4158
		{
			yyVAL.str = "+"
		}
	case 1508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4159
		{
			yyVAL.str = "-"
		}
	case 1509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4160
		{
			yyVAL.str = "*"
		}
	case 1510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4161
		{
			yyVAL.str = "/"
		}
	case 1511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4162
		{
			yyVAL.str = "%"
		}
	case 1512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4163
		{
			yyVAL.str = "^"
		}
	case 1513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4164
		{
			yyVAL.str = "<"
		}
	case 1514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4165
		{
			yyVAL.str = ">"
		}
	case 1515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4166
		{
			yyVAL.str = "="
		}
	case 1516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4167
		{
			yyVAL.str = "<="
		}
	case 1517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4168
		{
			yyVAL.str = ">="
		}
	case 1518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4169
		{
			yyVAL.str = "<>"
		}
	case 1519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4173
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4177
		{
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[3].list.Items...)
			yyVAL.list = ast.NewNodeList(items...)
		}
	case 1521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4186
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1522:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4187
		{
			yyVAL.list = nil
		}
	case 1523:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4192
		{
			// WITHIN GROUP (ORDER BY ...) for ordered-set aggregates
			yyVAL.list = yyDollar[4].list
		}
	case 1524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4196
		{
			yyVAL.list = nil
		}
	case 1525:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4201
		{
			// FILTER (WHERE condition) for aggregate filtering
			yyVAL.node = yyDollar[4].node
		}
	case 1526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4205
		{
			yyVAL.node = nil
		}
	case 1527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4209
		{
			yyVAL.ival = 0
		}
	case 1528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4210
		{
			yyVAL.ival = 0
		}
	case 1529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4214
		{
			subLink := ast.NewSubLink(ast.ANY_SUBLINK, yyDollar[1].stmt.(*ast.SelectStmt))
			yyVAL.node = subLink
		}
	case 1530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4219
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4234
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4235
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4239
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4240
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4249
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4250
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4259
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4261
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			// Use NodeList directly for SortClause
			selectStmt.SortClause = yyDollar[2].list
			yyVAL.stmt = selectStmt
		}
	case 1539:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4268
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			selectStmt.LockingClause = yyDollar[3].list // Set the locking clause
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1540:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4280
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			if yyDollar[3].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[3].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[3].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[3].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4292
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			yyVAL.stmt = selectStmt
		}
	case 1542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4298
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			yyVAL.stmt = selectStmt
		}
	case 1543:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4305
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			if yyDollar[5].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[5].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[5].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[5].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1544:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4318
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[5].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4337
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4338
		{
			yyVAL.list = nil
		}
	case 1547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4342
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4343
		{
			yyVAL.list = nil
		}
	case 1549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4348
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4352
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4360
		{
			lockingClause := &ast.LockingClause{
				BaseNode:   ast.BaseNode{Tag: ast.T_LockingClause},
				Strength:   ast.LockClauseStrength(yyDollar[1].ival),
				LockedRels: yyDollar[2].list, // Store as *NodeList directly
				WaitPolicy: ast.LockWaitPolicy(yyDollar[3].ival),
			}
			yyVAL.node = lockingClause
		}
	case 1552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4372
		{
			yyVAL.ival = int(ast.LCS_FORUPDATE)
		}
	case 1553:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4373
		{
			yyVAL.ival = int(ast.LCS_FORNOKEYUPDATE)
		}
	case 1554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4374
		{
			yyVAL.ival = int(ast.LCS_FORSHARE)
		}
	case 1555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4375
		{
			yyVAL.ival = int(ast.LCS_FORKEYSHARE)
		}
	case 1556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4379
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4380
		{
			yyVAL.list = nil
		}
	case 1558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4385
		{
			yyVAL.ival = int(ast.LockWaitError)
		}
	case 1559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4386
		{
			yyVAL.ival = int(ast.LockWaitSkip)
		}
	case 1560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4387
		{
			yyVAL.ival = int(ast.LockWaitBlock)
		}
	case 1561:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4398
		{
			selectStmt := ast.NewSelectStmt()
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1562:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4417
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].list
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4435
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = ast.NewNodeList(starTarget)
			selectStmt.FromClause = ast.NewNodeList(yyDollar[2].rangevar)
			yyVAL.stmt = selectStmt
		}
	case 1564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4445
		{
			// VALUES clause is a SelectStmt with ValuesLists
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1565:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4450
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_UNION, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1566:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4455
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_INTERSECT, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1567:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4460
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_EXCEPT, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4471
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4472
		{
			yyVAL.list = nil
		}
	case 1570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4476
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4477
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4482
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4486
		{
			// Implicit alias (no AS keyword)
			yyVAL.target = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 1574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4491
		{
			// No alias - use default naming
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4496
		{
			// SELECT * - all columns
			yyVAL.target = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 1576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4507
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4508
		{
			yyVAL.list = nil
		}
	case 1578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4512
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4513
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4522
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeVar
		}
	case 1581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4530
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			rangeTableSample := yyDollar[3].node.(*ast.RangeTableSample)
			rangeTableSample.Relation = rangeVar
			yyVAL.node = rangeTableSample
		}
	case 1582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4540
		{
			/* Subquery in FROM clause */
			subquery := yyDollar[1].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[2].alias != nil {
				alias = yyDollar[2].alias
			}
			rangeSubselect := ast.NewRangeSubselect(false, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4551
		{
			/* LATERAL subquery in FROM clause */
			subquery := yyDollar[2].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[3].alias != nil {
				alias = yyDollar[3].alias
			}
			rangeSubselect := ast.NewRangeSubselect(true, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4562
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4566
		{
			joinExpr := yyDollar[2].node.(*ast.JoinExpr)
			joinExpr.Alias = yyDollar[4].alias
			yyVAL.node = joinExpr
		}
	case 1586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4572
		{
			rangeFunc := yyDollar[1].node.(*ast.RangeFunction)
			funcAliasList := yyDollar[2].list
			if funcAliasList != nil && funcAliasList.Len() >= 2 {
				// func_alias_clause returns [alias, coldeflist]
				if alias := linitial(funcAliasList); alias != nil {
					rangeFunc.Alias = alias.(*ast.Alias)
				}
				if coldeflist := lsecond(funcAliasList); coldeflist != nil {
					// ColDefList is now *NodeList, no conversion needed
					if nodeList, ok := coldeflist.(*ast.NodeList); ok && nodeList != nil {
						rangeFunc.ColDefList = nodeList
					}
				}
			}
			yyVAL.node = rangeFunc
		}
	case 1587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4590
		{
			rangeFunc := yyDollar[2].node.(*ast.RangeFunction)
			rangeFunc.Lateral = true
			funcAliasList := yyDollar[3].list
			if funcAliasList != nil && funcAliasList.Len() >= 2 {
				// func_alias_clause returns [alias, coldeflist]
				if alias := linitial(funcAliasList); alias != nil {
					rangeFunc.Alias = alias.(*ast.Alias)
				}
				if coldeflist := lsecond(funcAliasList); coldeflist != nil {
					// ColDefList is now *NodeList, no conversion needed
					if nodeList, ok := coldeflist.(*ast.NodeList); ok && nodeList != nil {
						rangeFunc.ColDefList = nodeList
					}
				}
			}
			yyVAL.node = rangeFunc
		}
	case 1588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4609
		{
			rangeTableFunc := yyDollar[1].node.(*ast.RangeTableFunc)
			if yyDollar[2].alias != nil {
				rangeTableFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4617
		{
			rangeTableFunc := yyDollar[2].node.(*ast.RangeTableFunc)
			rangeTableFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeTableFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4626
		{
			jsonTable := yyDollar[1].node.(*ast.JsonTable)
			if yyDollar[2].alias != nil {
				jsonTable.Alias = yyDollar[2].alias
			}
			yyVAL.node = jsonTable
		}
	case 1591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4634
		{
			jsonTable := yyDollar[2].node.(*ast.JsonTable)
			jsonTable.Lateral = true
			if yyDollar[3].alias != nil {
				jsonTable.Alias = yyDollar[3].alias
			}
			yyVAL.node = jsonTable
		}
	case 1592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4646
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.rangevar = rangeVar
		}
	case 1593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4652
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4659
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.rangevar = rangeVar
		}
	case 1595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4665
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1596:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4671
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4681
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4685
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4691
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4708
		{
			yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
		}
	case 1601:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4712
		{
			/* CROSS JOIN is same as unqualified inner join */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewJoinExpr(ast.JOIN_INNER, left, right, nil)
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1602:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4721
		{
			left := yyDollar[1].node
			right := yyDollar[4].node
			joinType := ast.JoinType(yyDollar[2].ival)
			joinQual := yyDollar[5].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(joinType, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(joinType, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1603:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4747
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[3].node
			joinQual := yyDollar[4].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(ast.JOIN_INNER, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(ast.JOIN_INNER, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1604:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4773
		{
			left := yyDollar[1].node
			right := yyDollar[5].node
			joinType := ast.JoinType(yyDollar[3].ival)
			join := ast.NewNaturalJoinExpr(joinType, left, right)
			yyVAL.node = join
		}
	case 1605:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4781
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewNaturalJoinExpr(ast.JOIN_INNER, left, right)
			yyVAL.node = join
		}
	case 1606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4791
		{
			yyVAL.ival = int(ast.JOIN_FULL)
		}
	case 1607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4792
		{
			yyVAL.ival = int(ast.JOIN_LEFT)
		}
	case 1608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4793
		{
			yyVAL.ival = int(ast.JOIN_RIGHT)
		}
	case 1609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4794
		{
			yyVAL.ival = int(ast.JOIN_INNER)
		}
	case 1610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4799
		{
			yyVAL.ival = 1
		}
	case 1611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4800
		{
			yyVAL.ival = 0
		}
	case 1612:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4810
		{
			/* Create a two-element list: [name_list, alias_or_null] following PostgreSQL */
			nameList := yyDollar[3].list
			var aliasNode ast.Node = nil
			if yyDollar[5].alias != nil {
				aliasNode = yyDollar[5].alias
			}
			usingList := ast.NewNodeList(nameList, aliasNode)
			yyVAL.node = usingList
		}
	case 1613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4821
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4832
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4836
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4840
		{
			yyVAL.with = ast.NewWithClause(yyDollar[3].list, true, 0)
		}
	case 1617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4846
		{
			yyVAL.with = yyDollar[1].with
		}
	case 1618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4847
		{
			yyVAL.with = nil
		}
	case 1619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4852
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4856
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1621:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4864
		{
			ctename := yyDollar[1].str
			query := yyDollar[6].stmt
			cte := ast.NewCommonTableExpr(ctename, query)

			// Set column names if provided
			if yyDollar[2].list != nil {
				cte.Aliascolnames = yyDollar[2].list
			}

			// Set materialized option
			cte.Ctematerialized = ast.CTEMaterialized(yyDollar[4].ival)

			// Set search clause if provided
			if yyDollar[8].node != nil {
				cte.SearchClause = yyDollar[8].node.(*ast.CTESearchClause)
			}

			// Set cycle clause if provided
			if yyDollar[9].node != nil {
				cte.CycleClause = yyDollar[9].node.(*ast.CTECycleClause)
			}

			yyVAL.node = cte
		}
	case 1622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4892
		{
			yyVAL.ival = int(ast.CTEMaterializeAlways)
		}
	case 1623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4893
		{
			yyVAL.ival = int(ast.CTEMaterializeNever)
		}
	case 1624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4894
		{
			yyVAL.ival = int(ast.CTEMaterializeDefault)
		}
	case 1625:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4899
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, false, seqColumn)
		}
	case 1626:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4905
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, true, seqColumn)
		}
	case 1627:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4911
		{
			yyVAL.node = nil
		}
	case 1628:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:4918
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			markValue := yyDollar[6].node.(ast.Expression)
			markDefault := yyDollar[8].node.(ast.Expression)
			pathColumn := yyDollar[10].str
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, markValue, markDefault, pathColumn)
		}
	case 1629:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4927
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			pathColumn := yyDollar[6].str
			// For simple CYCLE clause, use nil for mark values to avoid TO/DEFAULT in deparsing
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, nil, nil, pathColumn)
		}
	case 1630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4935
		{
			yyVAL.node = nil
		}
	case 1631:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4946
		{
			/* Create a SelectStmt with VALUES clause following PostgreSQL */
			selectStmt := ast.NewSelectStmt()
			exprList := yyDollar[3].list
			selectStmt.ValuesLists = ast.NewNodeList(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1632:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4954
		{
			/* Add additional VALUES row to existing SelectStmt */
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			exprList := yyDollar[4].list
			selectStmt.ValuesLists.Append(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4968
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4969
		{
			yyVAL.node = nil
		}
	case 1635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4977
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1636:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4979
		{
			cursorExpr := ast.NewCurrentOfExpr(0, yyDollar[4].str) // cvarno filled in by parse analysis
			yyVAL.node = cursorExpr
		}
	case 1637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4983
		{
			yyVAL.node = nil
		}
	case 1638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4987
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4995
		{
			yyVAL.alias = yyDollar[1].alias
		}
	case 1640:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4996
		{
			yyVAL.alias = nil
		}
	case 1641:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5001
		{
			nameList := yyDollar[4].list
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nameList)
		}
	case 1642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5006
		{
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 1643:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5010
		{
			nameList := yyDollar[3].list
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nameList)
		}
	case 1644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5015
		{
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 1645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5026
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].alias, nil)
		}
	case 1646:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5030
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[3].list)
		}
	case 1647:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5034
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.list = ast.NewNodeList(alias, yyDollar[4].list)
		}
	case 1648:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5039
		{
			alias := ast.NewAlias(yyDollar[1].str, nil)
			yyVAL.list = ast.NewNodeList(alias, yyDollar[3].list)
		}
	case 1649:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5044
		{
			yyVAL.list = ast.NewNodeList(nil, nil)
		}
	case 1650:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5052
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.alias = alias
		}
	case 1651:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5056
		{
			yyVAL.alias = nil
		}
	case 1652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5064
		{
			yyVAL.ival = 1
		}
	case 1653:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5065
		{
			yyVAL.ival = 0
		}
	case 1654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5069
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1655:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5070
		{
			yyVAL.list = yyDollar[4].list
		}
	case 1656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5074
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1657:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5075
		{
			yyVAL.list = nil
		}
	case 1658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5085
		{
			yyVAL.into = ast.NewIntoClause(yyDollar[2].node.(*ast.RangeVar), nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 1659:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5088
		{
			yyVAL.into = nil
		}
	case 1660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5099
		{
			hasOrdinality := yyDollar[2].ival == 1
			// For a simple function, create a NodeList containing a single NodeList with the function
			funcList := ast.NewNodeList(yyDollar[1].node)
			functions := ast.NewNodeList(funcList)
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, false, functions, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1661:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5108
		{
			hasOrdinality := yyDollar[6].ival == 1
			// rowsfrom_list is already a NodeList containing NodeLists
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, true, yyDollar[4].list, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5118
		{
			yyVAL.ival = 1
		}
	case 1663:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5119
		{
			yyVAL.ival = 0
		}
	case 1664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5125
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 1665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5129
		{
			yyDollar[1].list.Append(yyDollar[3].list)
			yyVAL.list = yyDollar[1].list
		}
	case 1666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5136
		{
			funcList := ast.NewNodeList(yyDollar[1].node)
			if yyDollar[2].list != nil {
				funcList.Append(yyDollar[2].list)
			}
			yyVAL.list = funcList
		}
	case 1667:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5145
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5146
		{
			yyVAL.list = nil
		}
	case 1669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5156
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 1670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5160
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 1671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5172
		{
			yyVAL.funparam = &ast.FunctionParameter{
				BaseNode: ast.BaseNode{Tag: ast.T_FunctionParameter},
				Name:     yyDollar[1].str,
				ArgType:  yyDollar[2].typnam,
				Mode:     ast.FUNC_PARAM_TABLE,
				DefExpr:  nil,
			}
		}
	case 1672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5185
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1673:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5186
		{
			yyVAL.list = nil
		}
	case 1674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5192
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5196
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5205
		{
			columnDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			// Note: opt_collate_clause support can be added when needed
			// PostgreSQL sets: n->collClause = (CollateClause *) $3;
			yyVAL.node = columnDef
		}
	case 1677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5216
		{
			// Pass the NodeList directly to NewCollateClause
			nameList := yyDollar[2].list
			yyVAL.node = ast.NewCollateClause(nameList)
		}
	case 1678:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5221
		{
			yyVAL.node = nil
		}
	case 1679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5226
		{
			yyVAL.str = "BY REF"
		}
	case 1680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5227
		{
			yyVAL.str = "BY VALUE"
		}
	case 1681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5233
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5237
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5241
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1684:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5245
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5253
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5257
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5265
		{
			target := ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
			yyVAL.node = target
		}
	case 1688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5270
		{
			target := ast.NewResTarget("", yyDollar[2].node)
			yyVAL.node = target
		}
	case 1689:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5279
		{
			// XMLTABLE(xpath_expr PASSING doc_expr COLUMNS ...)
			// $3 is xpath_expr (should be RowExpr), $4 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[4].node.(ast.Expression), yyDollar[3].node.(ast.Expression), nil, yyDollar[6].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1690:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:5287
		{
			// XMLTABLE(XMLNAMESPACES(...), xpath_expr PASSING doc_expr COLUMNS ...)
			// $8 is xpath_expr (should be RowExpr), $9 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[9].node.(ast.Expression), yyDollar[8].node.(ast.Expression), yyDollar[5].list, yyDollar[11].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5298
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5302
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5311
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5316
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, nil, true, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5321
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			// TODO: Process column options from $3
			yyVAL.node = rangeTableFuncCol
		}
	case 1696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5331
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5335
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5344
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5348
		{
			yyVAL.node = ast.NewDefElem("default", yyDollar[2].node)
		}
	case 1700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5352
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(true))
		}
	case 1701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5356
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(false))
		}
	case 1702:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5360
		{
			yyVAL.node = ast.NewDefElem("path", yyDollar[2].node)
		}
	case 1703:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:5373
		{
			// Extract path name from optional path name node
			var pathName string
			if yyDollar[6].node != nil {
				if strNode, ok := yyDollar[6].node.(*ast.String); ok {
					pathName = strNode.SVal
				}
			}

			// Create JsonTablePathSpec from the a_expr (path expression) and optional path name
			pathSpec := ast.NewJsonTablePathSpec(yyDollar[5].node, pathName, 0)

			// Create JsonTable with context item and path spec
			jsonTable := ast.NewJsonTable(yyDollar[3].node.(*ast.JsonValueExpr), pathSpec)
			if yyDollar[10].list != nil {
				jsonTable.Columns = yyDollar[10].list
			}
			yyVAL.node = jsonTable
		}
	case 1704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5397
		{
			var format *ast.JsonFormat
			if yyDollar[2].node != nil {
				format = yyDollar[2].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonValueExpr(yyDollar[1].node, format)
		}
	case 1705:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5408
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1706:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5409
		{
			yyVAL.node = nil
		}
	case 1707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5414
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1708:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5415
		{
			yyVAL.node = nil
		}
	case 1709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5419
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5420
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5425
		{
			jsonArg := ast.NewJsonArgument(yyDollar[1].node.(*ast.JsonValueExpr), yyDollar[3].str)
			yyVAL.node = jsonArg
		}
	case 1712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5431
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1713:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5432
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5438
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1715:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5442
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1716:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5454
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1717:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5458
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1718:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5465
		{
			yyVAL.bval = false
		}
	case 1719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5466
		{
			yyVAL.bval = true
		}
	case 1720:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5467
		{
			yyVAL.bval = false
		}
	case 1721:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5471
		{
			yyVAL.bval = false
		}
	case 1722:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5472
		{
			yyVAL.bval = true
		}
	case 1723:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5473
		{
			yyVAL.bval = true
		}
	case 1724:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5478
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1725:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5479
		{
			yyVAL.list = nil
		}
	case 1726:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5490
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)

			yyVAL.node = ast.NewJsonObjectAgg(constructor, yyDollar[3].node.(*ast.JsonKeyValue), yyDollar[4].bval, yyDollar[5].bval)
		}
	case 1727:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5505
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)
			constructor.AggOrder = yyDollar[4].list
			yyVAL.node = ast.NewJsonArrayAgg(constructor, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].bval)
		}
	case 1728:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5518
		{
			var jsonFormat *ast.JsonFormat
			if yyDollar[3].node != nil {
				jsonFormat = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonOutput(yyDollar[2].typnam, ast.NewJsonReturning(jsonFormat, 0, 0))
		}
	case 1729:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5525
		{
			yyVAL.node = nil
		}
	case 1730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5531
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JSON_BEHAVIOR_DEFAULT,
				Expr:     yyDollar[2].node,
			}
		}
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5539
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JsonBehaviorType(yyDollar[1].ival),
				Expr:     nil,
			}
		}
	case 1732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5550
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_ERROR)
		}
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5551
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_NULL)
		}
	case 1734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5552
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_TRUE)
		}
	case 1735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5553
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_FALSE)
		}
	case 1736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5554
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_UNKNOWN)
		}
	case 1737:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5555
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_ARRAY)
		}
	case 1738:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5556
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_OBJECT)
		}
	case 1739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5557
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY)
		}
	case 1740:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5562
		{
			// Return a list with ON EMPTY behavior and nil for ON ERROR
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, nil}}
		}
	case 1741:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5566
		{
			// Return a list with nil for ON EMPTY and ON ERROR behavior
			yyVAL.node = &ast.NodeList{Items: []ast.Node{nil, yyDollar[1].node}}
		}
	case 1742:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5570
		{
			// Return a list with both ON EMPTY and ON ERROR behaviors
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, yyDollar[4].node}}
		}
	case 1743:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5574
		{
			yyVAL.node = nil
		}
	case 1744:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5579
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1745:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5580
		{
			yyVAL.node = nil
		}
	case 1746:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5585
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1747:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5586
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1748:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5587
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5588
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1750:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5589
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1751:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5590
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1752:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5591
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1753:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5592
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1754:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5593
		{
			yyVAL.ival = int(ast.JSW_UNSPEC)
		}
	case 1755:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5598
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1756:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5599
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1757:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5600
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5601
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1759:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5602
		{
			yyVAL.ival = int(ast.JS_QUOTES_UNSPEC)
		}
	case 1760:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5608
		{
			// Parse the encoding name and map to JsonEncoding constant
			var encoding ast.JsonEncoding
			switch yyDollar[4].str {
			case "utf8":
				encoding = ast.JS_ENC_UTF8
			case "utf16":
				encoding = ast.JS_ENC_UTF16
			case "utf32":
				encoding = ast.JS_ENC_UTF32
			default:
				encoding = ast.JS_ENC_DEFAULT
			}
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   encoding,
			}
		}
	case 1761:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5628
		{
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   ast.JS_ENC_DEFAULT,
			}
		}
	case 1762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5638
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1763:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5639
		{
			yyVAL.node = nil
		}
	case 1764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5644
		{
			yyVAL.node = ast.NewString("path")
		}
	case 1765:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5645
		{
			yyVAL.node = nil
		}
	case 1766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5651
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5655
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1768:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5664
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FOR_ORDINALITY, yyDollar[1].str)
			yyVAL.node = jsonTableCol
		}
	case 1769:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5673
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_REGULAR, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[3].node != nil {
				strNode := yyDollar[3].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1770:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5687
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FORMATTED, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			if yyDollar[3].node != nil {
				jsonTableCol.Format = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = jsonTableCol
		}
	case 1771:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5701
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_EXISTS, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1772:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5712
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, "")
			jsonTableCol.Columns = yyDollar[6].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1773:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5721
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, yyDollar[5].str)
			jsonTableCol.Columns = yyDollar[8].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1774:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5732
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1775:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5733
		{
			yyVAL.node = nil
		}
	case 1776:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5749
		{
			insertStmt := yyDollar[5].node.(*ast.InsertStmt)
			insertStmt.Relation = yyDollar[4].rangevar
			insertStmt.WithClause = yyDollar[1].with
			insertStmt.OnConflictClause = yyDollar[6].onconflict
			insertStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = insertStmt
		}
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5761
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1778:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5765
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5774
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.SelectStmt = yyDollar[1].stmt
			yyVAL.node = insertStmt
		}
	case 1780:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5780
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Override = ast.OverridingKind(yyDollar[2].ival)
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1781:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5787
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1782:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5794
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.Override = ast.OverridingKind(yyDollar[5].ival)
			insertStmt.SelectStmt = yyDollar[7].stmt
			yyVAL.node = insertStmt
		}
	case 1783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5802
		{
			insertStmt := ast.NewInsertStmt(nil)
			// For DEFAULT VALUES, SelectStmt should be nil
			insertStmt.SelectStmt = nil
			yyVAL.node = insertStmt
		}
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5811
		{
			yyVAL.ival = int(ast.OVERRIDING_USER_VALUE)
		}
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5812
		{
			yyVAL.ival = int(ast.OVERRIDING_SYSTEM_VALUE)
		}
	case 1786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5817
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1787:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5821
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1788:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5829
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1789:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:5841
		{
			updateStmt := ast.NewUpdateStmt(yyDollar[3].rangevar)
			updateStmt.WithClause = yyDollar[1].with
			updateStmt.TargetList = yyDollar[5].list
			updateStmt.FromClause = yyDollar[6].list
			updateStmt.WhereClause = yyDollar[7].node
			updateStmt.ReturningList = yyDollar[8].list
			yyVAL.stmt = updateStmt
		}
	case 1790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5854
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1791:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5858
		{
			// Concatenate the lists - equivalent to PostgreSQL's list_concat
			for _, item := range yyDollar[3].list.Items {
				yyDollar[1].list.Append(item)
			}
			yyVAL.list = yyDollar[1].list
		}
	case 1792:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5869
		{
			target := yyDollar[1].target
			target.Val = yyDollar[3].node
			yyVAL.list = ast.NewNodeList(target)
		}
	case 1793:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5875
		{
			// Multi-column assignment: (col1, col2) = (val1, val2)
			// Create MultiAssignRef nodes for each target, matching PostgreSQL exactly
			targetList := yyDollar[2].list
			ncolumns := len(targetList.Items)

			// Create a MultiAssignRef source for each target
			for i, item := range targetList.Items {
				resCol := item.(*ast.ResTarget)
				multiAssignRef := ast.NewMultiAssignRef(yyDollar[5].node, i+1, ncolumns, 0)
				resCol.Val = multiAssignRef
			}

			// Return the entire target list
			yyVAL.list = targetList
		}
	case 1794:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5895
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5901
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1796:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5902
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1797:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5912
		{
			deleteStmt := ast.NewDeleteStmt(yyDollar[4].rangevar)
			deleteStmt.WithClause = yyDollar[1].with
			deleteStmt.UsingClause = yyDollar[5].list
			deleteStmt.WhereClause = yyDollar[6].node
			deleteStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = deleteStmt
		}
	case 1798:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5924
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1799:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5928
		{
			yyVAL.list = nil
		}
	case 1800:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5943
		{
			mergeStmt := &ast.MergeStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_MergeStmt},
			}
			mergeStmt.WithClause = yyDollar[1].with
			mergeStmt.Relation = yyDollar[4].rangevar
			mergeStmt.SourceRelation = yyDollar[6].node
			mergeStmt.JoinCondition = yyDollar[8].node
			mergeStmt.MergeWhenClauses = yyDollar[9].list
			mergeStmt.ReturningList = yyDollar[10].list
			yyVAL.stmt = mergeStmt
		}
	case 1801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5960
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1802:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5964
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1803:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5975
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Query:     yyDollar[3].stmt,
				IsFrom:    false,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Initialize Options as empty NodeList
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[9].list != nil {
				nodeList := yyDollar[9].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			yyVAL.stmt = copyStmt
		}
	case 1804:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:5999
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Relation:  yyDollar[3].rangevar,
				IsFrom:    yyDollar[5].ival != 0,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Assign column list directly as NodeList
			copyStmt.Attlist = yyDollar[4].list

			// Initialize Options as empty NodeList and add options
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[2].node != nil {
				copyStmt.Options.Append(yyDollar[2].node)
			}
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[10].list != nil {
				nodeList := yyDollar[10].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			if yyDollar[11].node != nil {
				copyStmt.WhereClause = yyDollar[11].node
			}
			yyVAL.stmt = copyStmt
		}
	case 1805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6035
		{
			yyVAL.ival = 1
		}
	case 1806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6036
		{
			yyVAL.ival = 0
		}
	case 1807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6040
		{
			yyVAL.ival = 1
		}
	case 1808:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6041
		{
			yyVAL.ival = 0
		}
	case 1809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6045
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6046
		{
			yyVAL.str = ""
		}
	case 1811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6047
		{
			yyVAL.str = ""
		}
	case 1812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6052
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1813:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6055
		{
			yyVAL.node = nil
		}
	case 1814:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6060
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1815:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6063
		{
			yyVAL.node = nil
		}
	case 1816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6067
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1817:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6068
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1818:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6073
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1819:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6081
		{
			yyVAL.list = nil
		}
	case 1820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6088
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6092
		{
			yyVAL.node = ast.NewDefElem("freeze", ast.NewString("true"))
		}
	case 1822:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6096
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1823:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6100
		{
			yyVAL.node = ast.NewDefElem("null", ast.NewString(yyDollar[3].str))
		}
	case 1824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6104
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("csv"))
		}
	case 1825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6108
		{
			yyVAL.node = ast.NewDefElem("header", ast.NewString("true"))
		}
	case 1826:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6112
		{
			yyVAL.node = ast.NewDefElem("quote", ast.NewString(yyDollar[3].str))
		}
	case 1827:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6116
		{
			yyVAL.node = ast.NewDefElem("escape", ast.NewString(yyDollar[3].str))
		}
	case 1828:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6120
		{
			yyVAL.node = ast.NewDefElem("force_quote", yyDollar[3].list)
		}
	case 1829:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6124
		{
			yyVAL.node = ast.NewDefElem("force_quote", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1830:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6128
		{
			yyVAL.node = ast.NewDefElem("force_not_null", yyDollar[4].list)
		}
	case 1831:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6132
		{
			yyVAL.node = ast.NewDefElem("force_not_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1832:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6136
		{
			yyVAL.node = ast.NewDefElem("force_null", yyDollar[3].list)
		}
	case 1833:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6140
		{
			yyVAL.node = ast.NewDefElem("force_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1834:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6144
		{
			yyVAL.node = ast.NewDefElem("encoding", ast.NewString(yyDollar[2].str))
		}
	case 1835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6152
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1836:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6156
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1837:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6163
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6169
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6170
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6171
		{
			yyVAL.node = ast.NewA_Star(0)
		}
	case 1841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6172
		{
			yyVAL.node = ast.NewString("default")
		}
	case 1842:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6173
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1843:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6174
		{
			yyVAL.node = nil
		}
	case 1844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6179
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1845:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6183
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6189
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6193
		{
			yyVAL.str = "true"
		}
	case 1848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6194
		{
			yyVAL.str = "false"
		}
	case 1849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6195
		{
			yyVAL.str = "on"
		}
	case 1850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6196
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6200
		{
			yyVAL.node = ast.NewFloat(yyDollar[1].str)
		}
	case 1852:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6201
		{
			yyVAL.node = ast.NewFloat(yyDollar[2].str)
		}
	case 1853:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6203
		{
			f := ast.NewFloat(yyDollar[2].str)
			doNegateFloat(f)
			yyVAL.node = f
		}
	case 1854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6208
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6212
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6213
		{
			yyVAL.node = nil
		}
	case 1857:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6217
		{
			yyVAL.objType = ast.OBJECT_ACCESS_METHOD
		}
	case 1858:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6218
		{
			yyVAL.objType = ast.OBJECT_EVENT_TRIGGER
		}
	case 1859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6219
		{
			yyVAL.objType = ast.OBJECT_EXTENSION
		}
	case 1860:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6220
		{
			yyVAL.objType = ast.OBJECT_FDW
		}
	case 1861:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6221
		{
			yyVAL.objType = ast.OBJECT_LANGUAGE
		}
	case 1862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6222
		{
			yyVAL.objType = ast.OBJECT_PUBLICATION
		}
	case 1863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6223
		{
			yyVAL.objType = ast.OBJECT_SCHEMA
		}
	case 1864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6224
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_SERVER
		}
	case 1865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6228
		{
			yyVAL.objType = ast.OBJECT_POLICY
		}
	case 1866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6229
		{
			yyVAL.objType = ast.OBJECT_RULE
		}
	case 1867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6230
		{
			yyVAL.objType = ast.OBJECT_TRIGGER
		}
	case 1868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6234
		{
			yyVAL.objType = yyDollar[1].objType
		}
	case 1869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6235
		{
			yyVAL.objType = ast.OBJECT_DATABASE
		}
	case 1870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6236
		{
			yyVAL.objType = ast.OBJECT_ROLE
		}
	case 1871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6237
		{
			yyVAL.objType = ast.OBJECT_SUBSCRIPTION
		}
	case 1872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6238
		{
			yyVAL.objType = ast.OBJECT_TABLESPACE
		}
	case 1873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6243
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].typnam)
		}
	case 1874:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6248
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 1875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6255
		{
			yyVAL.bval = true
		}
	case 1876:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6256
		{
			yyVAL.bval = false
		}
	case 1877:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6260
		{
			yyVAL.ival = 1
		}
	case 1878:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6261
		{
			yyVAL.ival = 0
		}
	case 1881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6277
		{
			yyVAL.node = nil
		}
	case 1882:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6279
		{
			yyVAL.node = nil
		}
	case 1883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6287
		{
			yyVAL.ival = 1
		}
	case 1884:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6288
		{
			yyVAL.ival = 0
		}
	case 1885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6292
		{
			yyVAL.ival = 1
		}
	case 1886:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6293
		{
			yyVAL.ival = 0
		}
	case 1887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6297
		{
			yyVAL.ival = 1
		}
	case 1888:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6298
		{
			yyVAL.ival = 0
		}
	case 1889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6302
		{
			yyVAL.ival = 1
		}
	case 1890:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6303
		{
			yyVAL.ival = 0
		}
	case 1891:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6312
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1892:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6318
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1893:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6324
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1894:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6330
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1895:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6336
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1896:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6344
		{
			yyVAL.ival = int(ast.MERGE_WHEN_MATCHED)
		}
	case 1897:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6345
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_SOURCE)
		}
	case 1898:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6349
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1899:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6350
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1900:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6354
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1901:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6355
		{
			yyVAL.node = nil
		}
	case 1902:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6360
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_UPDATE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			yyVAL.node = mergeWhen
		}
	case 1903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6375
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_DELETE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1904:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6384
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			mergeWhen.Values = yyDollar[2].list
			yyVAL.node = mergeWhen
		}
	case 1905:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6391
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[3].ival)
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1906:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6398
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1907:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6411
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[6].ival)
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[8].list
			yyVAL.node = mergeWhen
		}
	case 1908:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6424
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1909:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6433
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1910:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6448
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_UPDATE)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			onConflict.TargetList = yyDollar[7].list
			onConflict.WhereClause = yyDollar[8].node
			yyVAL.onconflict = onConflict
		}
	case 1911:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6458
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_NOTHING)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			yyVAL.onconflict = onConflict
		}
	case 1912:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6466
		{
			yyVAL.onconflict = nil
		}
	case 1913:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6477
		{
			// Create InferClause for column-based conflict detection
			infer := ast.NewInferClause()
			// Assign IndexElems directly as NodeList
			infer.IndexElems = yyDollar[2].list
			infer.WhereClause = yyDollar[4].node
			yyVAL.node = infer
		}
	case 1914:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6486
		{
			// Create InferClause for constraint-based conflict detection
			infer := ast.NewInferClause()
			infer.Conname = yyDollar[3].str
			yyVAL.node = infer
		}
	case 1915:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6493
		{
			yyVAL.node = nil
		}
	case 1916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6504
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1917:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6508
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6515
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1919:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6519
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1920:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6526
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Name = yyDollar[1].str
		}
	case 1921:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6531
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[1].node
		}
	case 1922:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6536
		{
			yyVAL.node = yyDollar[4].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[2].node
		}
	case 1923:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6544
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Ordering = ast.SortByDir(yyDollar[3].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[4].ival)
			yyVAL.node = indexElem
		}
	case 1924:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6555
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Opclassopts = yyDollar[3].list
			indexElem.Ordering = ast.SortByDir(yyDollar[4].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[5].ival)
			yyVAL.node = indexElem
		}
	case 1925:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6569
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1926:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6570
		{
			yyVAL.list = nil
		}
	case 1927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6574
		{
			yyVAL.ival = int(ast.SORTBY_ASC)
		}
	case 1928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6575
		{
			yyVAL.ival = int(ast.SORTBY_DESC)
		}
	case 1929:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6576
		{
			yyVAL.ival = int(ast.SORTBY_DEFAULT)
		}
	case 1930:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6580
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_FIRST)
		}
	case 1931:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6581
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_LAST)
		}
	case 1932:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6582
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_DEFAULT)
		}
	case 1933:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6587
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1934:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6591
		{
			yyVAL.list = nil
		}
	case 1935:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6612
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[6].list
			createStmt.InhRelations = yyDollar[8].list
			createStmt.PartSpec = yyDollar[9].partspec
			createStmt.AccessMethod = yyDollar[10].str
			createStmt.Options = yyDollar[11].list
			createStmt.OnCommit = yyDollar[12].oncommit
			createStmt.TableSpaceName = yyDollar[13].str
			yyVAL.stmt = createStmt
		}
	case 1936:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:6628
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[9].list
			createStmt.InhRelations = yyDollar[11].list
			createStmt.PartSpec = yyDollar[12].partspec
			createStmt.AccessMethod = yyDollar[13].str
			createStmt.Options = yyDollar[14].list
			createStmt.OnCommit = yyDollar[15].oncommit
			createStmt.TableSpaceName = yyDollar[16].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1937:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:6645
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[6].list)
			createStmt.TableElts = yyDollar[7].list
			createStmt.PartSpec = yyDollar[8].partspec
			createStmt.AccessMethod = yyDollar[9].str
			createStmt.Options = yyDollar[10].list
			createStmt.OnCommit = yyDollar[11].oncommit
			createStmt.TableSpaceName = yyDollar[12].str
			yyVAL.stmt = createStmt
		}
	case 1938:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:6661
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[9].list)
			createStmt.TableElts = yyDollar[10].list
			createStmt.PartSpec = yyDollar[11].partspec
			createStmt.AccessMethod = yyDollar[12].str
			createStmt.Options = yyDollar[13].list
			createStmt.OnCommit = yyDollar[14].oncommit
			createStmt.TableSpaceName = yyDollar[15].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1939:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:6678
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[7].rangevar)
			createStmt.TableElts = yyDollar[8].list
			createStmt.PartBound = yyDollar[9].partboundspec
			createStmt.PartSpec = yyDollar[10].partspec
			createStmt.AccessMethod = yyDollar[11].str
			createStmt.Options = yyDollar[12].list
			createStmt.OnCommit = yyDollar[13].oncommit
			createStmt.TableSpaceName = yyDollar[14].str
			yyVAL.stmt = createStmt
		}
	case 1940:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:6695
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[10].rangevar)
			createStmt.TableElts = yyDollar[11].list
			createStmt.PartBound = yyDollar[12].partboundspec
			createStmt.PartSpec = yyDollar[13].partspec
			createStmt.AccessMethod = yyDollar[14].str
			createStmt.Options = yyDollar[15].list
			createStmt.OnCommit = yyDollar[16].oncommit
			createStmt.TableSpaceName = yyDollar[17].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6713
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6714
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1943:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6715
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1944:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6716
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1945:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6717
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1946:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6718
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6719
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 1948:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6720
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 1949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6724
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1950:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6725
		{
			yyVAL.list = nil
		}
	case 1951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6730
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1952:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6735
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6742
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6743
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6744
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1956:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6749
		{
			yyVAL.node = ast.NewTableLikeClause(yyDollar[2].rangevar, ast.TableLikeOption(yyDollar[3].ival))
		}
	case 1957:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6756
		{
			yyVAL.ival = yyDollar[1].ival | yyDollar[3].ival
		}
	case 1958:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6760
		{
			yyVAL.ival = yyDollar[1].ival & ^yyDollar[3].ival
		}
	case 1959:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6764
		{
			yyVAL.ival = 0
		}
	case 1960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6770
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMMENTS)
		}
	case 1961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6771
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMPRESSION)
		}
	case 1962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6772
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_CONSTRAINTS)
		}
	case 1963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6773
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_DEFAULTS)
		}
	case 1964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6774
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_IDENTITY)
		}
	case 1965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6775
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_GENERATED)
		}
	case 1966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6776
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_INDEXES)
		}
	case 1967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6777
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STATISTICS)
		}
	case 1968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6778
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STORAGE)
		}
	case 1969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6779
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_ALL)
		}
	case 1970:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6784
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1971:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6785
		{
			yyVAL.str = "default"
		}
	case 1972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6789
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1973:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6790
		{
			yyVAL.str = ""
		}
	case 1974:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6794
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1975:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6795
		{
			yyVAL.str = "default"
		}
	case 1976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6799
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1977:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6800
		{
			yyVAL.str = ""
		}
	case 1978:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6805
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1979:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6806
		{
			yyVAL.list = nil
		}
	case 1980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6811
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1981:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6817
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6824
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6825
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1984:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6830
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[2].list
			yyVAL.node = colDef
		}
	case 1985:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6836
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[4].list
			yyVAL.node = colDef
		}
	case 1986:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6847
		{
			hashSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_HASH)
			hashSpec.IsDefault = false

			// Parse hash partition bounds (modulus and remainder)
			hashOptions := yyDollar[5].list
			for _, optNode := range hashOptions.Items {
				if defElem, ok := optNode.(*ast.DefElem); ok {
					if defElem.Defname == "modulus" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Modulus = integerVal.IVal
							}
						}
					} else if defElem.Defname == "remainder" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Remainder = integerVal.IVal
							}
						}
					}
				}
			}

			yyVAL.partboundspec = hashSpec
		}
	case 1987:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6876
		{
			listSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			listSpec.IsDefault = false
			listSpec.ListDatums = yyDollar[5].list
			yyVAL.partboundspec = listSpec
		}
	case 1988:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6885
		{
			rangeSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_RANGE)
			rangeSpec.IsDefault = false
			rangeSpec.LowDatums = yyDollar[5].list
			rangeSpec.HighDatums = yyDollar[9].list
			yyVAL.partboundspec = rangeSpec
		}
	case 1989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6895
		{
			defaultSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			defaultSpec.IsDefault = true
			yyVAL.partboundspec = defaultSpec
		}
	case 1990:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6904
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, ast.NewA_Const(ast.NewInteger(yyDollar[2].ival), 0))
		}
	case 1991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6911
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1992:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6915
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1993:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6923
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1994:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6924
		{
			yyVAL.list = nil
		}
	case 1995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6929
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1996:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6933
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1997:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6941
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6947
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6952
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2000:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6957
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			colDef.StorageName = yyDollar[3].str
			colDef.Compression = yyDollar[4].str
			colDef.Fdwoptions = yyDollar[5].list
			colDef.Constraints = yyDollar[6].list
			yyVAL.node = colDef
		}
	case 2001:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6969
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2002:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6974
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2003:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6981
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 2004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6986
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6987
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2006:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6989
		{
			/*
			 * Note: the CollateClause is momentarily included in
			 * the list built by ColQualList, but we split it out
			 * again in SplitColQualList.
			 */
			collateClause := ast.NewCollateClause(yyDollar[2].list)
			yyVAL.node = collateClause
		}
	case 2007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7002
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 2008:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7007
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_NOT_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 2009:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7012
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRED)
			yyVAL.node = constraint
		}
	case 2010:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7017
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_IMMEDIATE)
			yyVAL.node = constraint
		}
	case 2011:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7025
		{
			yyVAL.bval = true
		}
	case 2012:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7026
		{
			yyVAL.bval = false
		}
	case 2013:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7027
		{
			yyVAL.bval = true
		}
	case 2014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7031
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_ALWAYS
		}
	case 2015:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7032
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_BY_DEFAULT
		}
	case 2016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7037
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2017:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7039
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7044
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 2019:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7048
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 2020:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7052
		{
			// SeqOptElem already returns a DefElem, so we can use it directly
			// Check for invalid options as per PostgreSQL
			defElem := yyDollar[2].defelt
			if defElem.Defname == "as" || defElem.Defname == "restart" || defElem.Defname == "owned_by" {
				yylex.Error("sequence option not supported here")
			}
			yyVAL.defelt = yyDollar[2].defelt
		}
	case 2021:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7062
		{
			yyVAL.defelt = ast.NewDefElem("generated", ast.NewInteger(int(yyDollar[3].byt)))
		}
	case 2022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7068
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2023:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7069
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2024:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7074
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].typnam)
		}
	case 2025:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7078
		{
			yyVAL.defelt = ast.NewDefElem("cache", yyDollar[2].node)
		}
	case 2026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7082
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(true))
		}
	case 2027:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7086
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(false))
		}
	case 2028:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7090
		{
			yyVAL.defelt = ast.NewDefElem("increment", yyDollar[3].node)
		}
	case 2029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7094
		{
			yyVAL.defelt = ast.NewDefElem("logged", nil)
		}
	case 2030:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7098
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", yyDollar[2].node)
		}
	case 2031:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7102
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", yyDollar[2].node)
		}
	case 2032:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7106
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", nil)
		}
	case 2033:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7110
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", nil)
		}
	case 2034:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7114
		{
			yyVAL.defelt = ast.NewDefElem("owned_by", yyDollar[3].list)
		}
	case 2035:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7118
		{
			yyVAL.defelt = ast.NewDefElem("sequence_name", yyDollar[3].list)
		}
	case 2036:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7122
		{
			yyVAL.defelt = ast.NewDefElem("start", yyDollar[3].node)
		}
	case 2037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7126
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 2038:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7130
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 2039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7134
		{
			yyVAL.defelt = ast.NewDefElem("unlogged", nil)
		}
	case 2040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7140
		{
		}
	case 2041:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7141
		{
		}
	case 2042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7145
		{
		}
	case 2043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7146
		{
		}
	case 2044:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7147
		{
		}
	case 2045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7152
		{
			// RECHECK no longer does anything in opclass definitions,
			// but we still accept it to ease porting of old database dumps.
			// When this is used, we should emit a notice.
			// For now, just return true to indicate RECHECK was present
			yyVAL.bval = true
		}
	case 2046:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7159
		{
			yyVAL.bval = false
		}
	case 2047:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7163
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2048:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7164
		{
			yyVAL.list = nil
		}
	case 2049:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7169
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NOTNULL)
		}
	case 2050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7173
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NULL)
		}
	case 2051:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7177
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Keys = nil // Will be filled by the parser
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Options = yyDollar[3].list
			constraint.Indexspace = yyDollar[4].str
			yyVAL.node = constraint
		}
	case 2052:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7186
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = nil // Will be filled by the parser
			yyVAL.node = constraint
		}
	case 2053:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7192
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			yyVAL.node = constraint
		}
	case 2054:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7198
		{
			constraint := ast.NewConstraint(ast.CONSTR_DEFAULT)
			constraint.RawExpr = yyDollar[2].node
			yyVAL.node = constraint
		}
	case 2055:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7204
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Pktable = yyDollar[2].rangevar
			constraint.PkAttrs = yyDollar[3].list
			constraint.FkMatchtype = yyDollar[4].byt
			if actions := yyDollar[5].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			yyVAL.node = constraint
		}
	case 2056:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7221
		{
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.Options = yyDollar[5].list
			yyVAL.node = constraint
		}
	case 2057:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7228
		{
			constraint := ast.NewConstraint(ast.CONSTR_GENERATED)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.RawExpr = yyDollar[5].node
			yyVAL.node = constraint
		}
	case 2058:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7238
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 2059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7243
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2060:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7248
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			processConstraintAttributeSpec(yyDollar[5].ival, constraint)
			yyVAL.node = constraint
		}
	case 2061:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7256
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 2062:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7267
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Indexname = yyDollar[2].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[3].ival, constraint)
			yyVAL.node = constraint
		}
	case 2063:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7278
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 2064:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7288
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Indexname = yyDollar[3].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[4].ival, constraint)
			yyVAL.node = constraint
		}
	case 2065:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7299
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.FkAttrs = yyDollar[4].list
			constraint.Pktable = yyDollar[7].rangevar
			constraint.PkAttrs = yyDollar[8].list
			constraint.FkMatchtype = yyDollar[9].byt
			if actions := yyDollar[10].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			processConstraintAttributeSpec(yyDollar[11].ival, constraint)
			yyVAL.node = constraint
		}
	case 2066:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7320
		{
			constraint := ast.NewConstraint(ast.CONSTR_EXCLUSION)
			constraint.AccessMethod = yyDollar[2].str
			constraint.Exclusions = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			constraint.WhereClause = yyDollar[9].node
			processConstraintAttributeSpec(yyDollar[10].ival, constraint)
			yyVAL.node = constraint
		}
	case 2067:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7334
		{
			yyVAL.bval = true
		}
	case 2068:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7335
		{
			yyVAL.bval = false
		}
	case 2069:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7341
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2070:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7347
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2071:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7355
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[3].list)
		}
	case 2072:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7360
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[5].list)
		}
	case 2073:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7368
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2074:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7372
		{
			yyVAL.list = nil
		}
	case 2075:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7379
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_FULL
		}
	case 2076:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7383
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_PARTIAL
		}
	case 2077:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7387
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 2078:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7391
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 2079:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7398
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 2080:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7408
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 2081:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7418
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = yyDollar[2].keyaction
			yyVAL.keyactions = n
		}
	case 2082:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7425
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[2].keyaction
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 2083:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7432
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 2084:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7447
		{
			// Check for unsupported column lists on UPDATE actions
			keyAction := yyDollar[3].keyaction
			if keyAction.Cols != nil {
				if len(keyAction.Cols.Items) > 0 {
					yylex.Error("column list with SET NULL/SET DEFAULT is only supported for ON DELETE actions")
				}
			}
			yyVAL.keyaction = keyAction
		}
	case 2085:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7460
		{
			yyVAL.keyaction = yyDollar[3].keyaction
		}
	case 2086:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7467
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_NOACTION
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2087:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7474
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_RESTRICT
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2088:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7481
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_CASCADE
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2089:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7488
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETNULL
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 2090:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7495
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETDEFAULT
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 2091:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7504
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2092:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7505
		{
			yyVAL.list = nil
		}
	case 2093:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7509
		{
			yyVAL.partspec = yyDollar[1].partspec
		}
	case 2094:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7510
		{
			yyVAL.partspec = nil
		}
	case 2095:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7515
		{
			partitionSpec := ast.NewPartitionSpec(ast.PartitionStrategy(yyDollar[3].str), yyDollar[5].list)
			yyVAL.partspec = partitionSpec
		}
	case 2096:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7523
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2097:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7528
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2098:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7536
		{
			partElem := ast.NewPartitionElem(yyDollar[1].str, nil, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 2099:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7543
		{
			partElem := ast.NewPartitionElem("", yyDollar[1].node, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 2100:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7550
		{
			partElem := ast.NewPartitionElem("", yyDollar[2].node, 0)
			partElem.Collation = yyDollar[4].list
			partElem.Opclass = yyDollar[5].list
			yyVAL.node = partElem
		}
	case 2101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7559
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2102:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7560
		{
			yyVAL.str = ""
		}
	case 2103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7564
		{
			yyVAL.oncommit = ast.ONCOMMIT_DROP
		}
	case 2104:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7565
		{
			yyVAL.oncommit = ast.ONCOMMIT_DELETE_ROWS
		}
	case 2105:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7566
		{
			yyVAL.oncommit = ast.ONCOMMIT_PRESERVE_ROWS
		}
	case 2106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7567
		{
			yyVAL.oncommit = ast.ONCOMMIT_NOOP
		}
	case 2107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7571
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2108:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7572
		{
			yyVAL.str = ""
		}
	case 2109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7576
		{
			yyVAL.str = yyDollar[4].str
		}
	case 2110:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7577
		{
			yyVAL.str = ""
		}
	case 2111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7581
		{
			yyVAL.str = yyDollar[3].str
		}
	case 2112:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:7594
		{
			indexStmt := ast.NewIndexStmt(yyDollar[5].str, yyDollar[7].rangevar, yyDollar[10].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.AccessMethod = yyDollar[8].str
			indexStmt.IndexIncludingParams = yyDollar[12].list
			indexStmt.NullsNotDistinct = !yyDollar[13].bval
			indexStmt.Options = yyDollar[14].list
			indexStmt.TableSpace = yyDollar[15].str
			indexStmt.WhereClause = yyDollar[16].node
			yyVAL.stmt = indexStmt
		}
	case 2113:
		yyDollar = yyS[yypt-19 : yypt+1]
//line postgres.y:7609
		{
			indexStmt := ast.NewIndexStmt(yyDollar[8].str, yyDollar[10].rangevar, yyDollar[13].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.IfNotExists = true
			indexStmt.AccessMethod = yyDollar[11].str
			indexStmt.IndexIncludingParams = yyDollar[15].list
			indexStmt.NullsNotDistinct = !yyDollar[16].bval
			indexStmt.Options = yyDollar[17].list
			indexStmt.TableSpace = yyDollar[18].str
			indexStmt.WhereClause = yyDollar[19].node
			yyVAL.stmt = indexStmt
		}
	case 2114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7625
		{
			yyVAL.bval = true
		}
	case 2115:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7626
		{
			yyVAL.bval = false
		}
	case 2116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7630
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2117:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7631
		{
			yyVAL.str = "btree"
		}
	case 2118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7635
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7636
		{
			yyVAL.list = nil
		}
	case 2120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7641
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7646
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7654
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2123:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7655
		{
			yyVAL.list = nil
		}
	case 2124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7667
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2125:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7673
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7680
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 2127:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7686
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7693
		{
			// Index partition attachment - dedicated rule
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 2129:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7702
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			yyVAL.stmt = alterStmt
		}
	case 2130:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7708
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7715
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			yyVAL.stmt = alterStmt
		}
	case 2132:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7721
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2133:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7728
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			yyVAL.stmt = alterStmt
		}
	case 2134:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7734
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2135:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7741
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2136:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7747
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7754
		{
			// Partition commands - dedicated rule for partition-only operations
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2138:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7763
		{
			// Partition commands with IF EXISTS
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[6].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2139:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7773
		{
			// Bulk tablespace move for tables
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 2140:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:7780
		{
			// Bulk tablespace move for tables owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 2141:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7788
		{
			// Bulk tablespace move for indexes
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 2142:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:7795
		{
			// Bulk tablespace move for indexes owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 2143:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7803
		{
			// Bulk tablespace move for materialized views
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[10].str)
			moveStmt.Nowait = yyDollar[11].bval
			yyVAL.stmt = moveStmt
		}
	case 2144:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:7810
		{
			// Bulk tablespace move for materialized views owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[13].str)
			moveStmt.Roles = yyDollar[10].list
			moveStmt.Nowait = yyDollar[14].bval
			yyVAL.stmt = moveStmt
		}
	case 2145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7821
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7826
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7834
		{
			yyVAL.bval = true
		}
	case 2148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7835
		{
			yyVAL.bval = false
		}
	case 2149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7840
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].rolespec)
		}
	case 2150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7845
		{
			yyDollar[1].list.Append(yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 2151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7853
		{
			roleSpec := yyDollar[1].rolespec

			switch roleSpec.Roletype {
			case ast.ROLESPEC_CSTRING:
				yyVAL.str = roleSpec.Rolename
			case ast.ROLESPEC_PUBLIC:
				// PostgreSQL throws an error for "public" role name
				yylex.Error(`role name "public" is reserved`)
				return 1
			case ast.ROLESPEC_SESSION_USER:
				// PostgreSQL throws an error: SESSION_USER cannot be used as a role name here
				yylex.Error(`SESSION_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_USER:
				// PostgreSQL throws an error: CURRENT_USER cannot be used as a role name here
				yylex.Error(`CURRENT_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_ROLE:
				// PostgreSQL throws an error: CURRENT_ROLE cannot be used as a role name here
				yylex.Error(`CURRENT_ROLE cannot be used as a role name here`)
				return 1
			default:
				yylex.Error(`invalid role specification`)
				return 1
			}
		}
	case 2152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7884
		{
			// Handle special role names: "public" and "none"
			var roleSpec *ast.RoleSpec

			if yyDollar[1].str == "public" {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_PUBLIC,
				}
			} else if yyDollar[1].str == "none" {
				// PostgreSQL throws an error for "none" - role name "none" is reserved
				yylex.Error(`role name "none" is reserved`)
				return 1
			} else {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_CSTRING,
					Rolename: yyDollar[1].str,
				}
			}
			yyVAL.rolespec = roleSpec
		}
	case 2153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7907
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_ROLE,
			}
		}
	case 2154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7914
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_USER,
			}
		}
	case 2155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7921
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_SESSION_USER,
			}
		}
	case 2156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7932
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[2].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2157:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7939
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[5].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7946
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2159:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7953
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[6].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2160:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7960
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ColumnDefault, yyDollar[3].str, yyDollar[4].node)
		}
	case 2161:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7965
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropNotNull, yyDollar[3].str, nil)
		}
	case 2162:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7970
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetNotNull, yyDollar[3].str, nil)
		}
	case 2163:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7975
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetExpression, yyDollar[3].str, yyDollar[8].node)
		}
	case 2164:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7980
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
		}
	case 2165:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7985
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2166:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7992
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStatistics, yyDollar[3].str, yyDollar[6].node)
		}
	case 2167:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7997
		{
			cmd := ast.NewAlterTableCmd(ast.AT_SetStatistics, "", yyDollar[6].node)
			cmd.Num = int16(yyDollar[3].ival)
			yyVAL.node = cmd
		}
	case 2168:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8004
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 2169:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8009
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 2170:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8014
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStorage, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 2171:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8019
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetCompression, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 2172:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8024
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddIdentity, yyDollar[3].str, nil)
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[6].byt
			constraint.Options = yyDollar[9].list
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 2173:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8034
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetIdentity, yyDollar[3].str, yyDollar[4].list)
		}
	case 2174:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8039
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2175:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8046
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2176:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8053
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2177:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8061
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2178:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8072
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, nil)
			def := ast.NewColumnDef("", yyDollar[6].typnam, 0)
			def.Collclause = yyDollar[7].node.(*ast.CollateClause)
			def.RawDefault = yyDollar[8].node
			cmd.Def = def
			yyVAL.node = cmd
		}
	case 2179:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8082
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AlterColumnGenericOptions, yyDollar[3].str, yyDollar[4].list)
		}
	case 2180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8087
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddConstraint, "", yyDollar[2].node)
		}
	case 2181:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8092
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterConstraint, "", nil)
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Conname = yyDollar[3].str
			constraint.Deferrable = (yyDollar[4].ival & ast.CAS_DEFERRABLE) != 0
			constraint.Initdeferred = (yyDollar[4].ival & ast.CAS_INITIALLY_DEFERRED) != 0
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 2182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8103
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ValidateConstraint, yyDollar[3].str, nil)
		}
	case 2183:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8108
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8116
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8124
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOids, "", nil)
		}
	case 2186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8129
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ClusterOn, yyDollar[3].str, nil)
		}
	case 2187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8134
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropCluster, "", nil)
		}
	case 2188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8139
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetLogged, "", nil)
		}
	case 2189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8144
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetUnLogged, "", nil)
		}
	case 2190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8149
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrig, yyDollar[3].str, nil)
		}
	case 2191:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8154
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysTrig, yyDollar[4].str, nil)
		}
	case 2192:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8159
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaTrig, yyDollar[4].str, nil)
		}
	case 2193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8164
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigAll, "", nil)
		}
	case 2194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8169
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigUser, "", nil)
		}
	case 2195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8174
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrig, yyDollar[3].str, nil)
		}
	case 2196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8179
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigAll, "", nil)
		}
	case 2197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8184
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigUser, "", nil)
		}
	case 2198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8189
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRule, yyDollar[3].str, nil)
		}
	case 2199:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8194
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysRule, yyDollar[4].str, nil)
		}
	case 2200:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8199
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaRule, yyDollar[4].str, nil)
		}
	case 2201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8204
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRule, yyDollar[3].str, nil)
		}
	case 2202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8209
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddInherit, "", yyDollar[2].rangevar)
		}
	case 2203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8214
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropInherit, "", yyDollar[3].rangevar)
		}
	case 2204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8219
		{
			typeName := makeTypeNameFromNodeList(yyDollar[2].list)
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddOf, "", typeName)
		}
	case 2205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8225
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOf, "", nil)
		}
	case 2206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8230
		{
			cmd := ast.NewAlterTableCmd(ast.AT_ChangeOwner, "", nil)
			cmd.Newowner = yyDollar[3].rolespec
			yyVAL.node = cmd
		}
	case 2207:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8237
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetAccessMethod, yyDollar[4].str, nil)
		}
	case 2208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8242
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetTableSpace, yyDollar[3].str, nil)
		}
	case 2209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8247
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetRelOptions, "", yyDollar[2].list)
		}
	case 2210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8252
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetRelOptions, "", yyDollar[2].list)
		}
	case 2211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8257
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ReplicaIdentity, "", yyDollar[3].node)
		}
	case 2212:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8262
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRowSecurity, "", nil)
		}
	case 2213:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8267
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRowSecurity, "", nil)
		}
	case 2214:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8272
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ForceRowSecurity, "", nil)
		}
	case 2215:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8277
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_NoForceRowSecurity, "", nil)
		}
	case 2216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8281
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_GenericOptions, "", yyDollar[1].list)
		}
	case 2217:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8289
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, yyDollar[4].partboundspec, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2218:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8297
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, yyDollar[4].bval, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2219:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8304
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartitionFinalize, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8315
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8324
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8325
		{
			yyVAL.node = nil
		}
	case 2223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8329
		{
		}
	case 2224:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8330
		{
		}
	case 2225:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8341
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2226:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8354
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2227:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8367
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2228:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8380
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2229:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8393
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[5].list
			objects.Append(ast.NewString(yyDollar[3].str))
			n.Objects = objects
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2230:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8408
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[7].list
			objects.Append(ast.NewString(yyDollar[5].str))
			n.Objects = objects
			n.Behavior = yyDollar[8].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8423
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2232:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8436
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8449
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2234:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8462
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2235:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8475
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = false
			n.Objects = yyDollar[4].list
			n.Behavior = yyDollar[5].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2236:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8488
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = true
			n.Objects = yyDollar[6].list
			n.Behavior = yyDollar[7].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8504
		{
			stmt := yyDollar[2].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8510
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = true
			yyVAL.stmt = stmt
		}
	case 2239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8516
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8525
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "TRANSACTION", yyDollar[2].list, false)
		}
	case 2241:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8529
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "SESSION CHARACTERISTICS AS TRANSACTION", yyDollar[5].list, false)
		}
	case 2242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8532
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8536
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8538
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "timezone", nil, false)
		}
	case 2245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8542
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "transaction_isolation", nil, false)
		}
	case 2246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8546
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "session_authorization", nil, false)
		}
	case 2247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8553
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, yyDollar[1].str, nil, false)
		}
	case 2248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8557
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET_ALL, "", nil, false)
		}
	case 2249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8563
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8564
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8568
		{
			yyVAL.stmt = ast.Stmt(yyDollar[2].vsetstmt)
		}
	case 2252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8577
		{
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[2].stmt, nil)
		}
	case 2253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8581
		{
			options := ast.NewNodeList(ast.NewDefElem("analyze", nil))
			if yyDollar[3].ival != 0 {
				options.Append(ast.NewDefElem("verbose", nil))
			}
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[4].stmt, options)
		}
	case 2254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8589
		{
			options := ast.NewNodeList(ast.NewDefElem("verbose", nil))
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[3].stmt, options)
		}
	case 2255:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8594
		{
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[5].stmt, yyDollar[3].list)
		}
	case 2256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8601
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8605
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8613
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 2259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8619
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8620
		{
			yyVAL.str = "analyze"
		}
	case 2261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8621
		{
			yyVAL.str = "format"
		}
	case 2262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8625
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8626
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2264:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8627
		{
			yyVAL.node = nil
		}
	case 2265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8631
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8632
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8633
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8634
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8635
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8636
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8637
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2272:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8646
		{
			var optionsList *ast.NodeList
			if yyDollar[2].ival != 0 || yyDollar[3].ival != 0 || yyDollar[4].ival != 0 || yyDollar[5].ival != 0 {
				optionsList = ast.NewNodeList()
				if yyDollar[2].ival != 0 {
					optionsList.Append(ast.NewDefElem("full", ast.NewBoolean(true)))
				}
				if yyDollar[3].ival != 0 {
					optionsList.Append(ast.NewDefElem("freeze", ast.NewBoolean(true)))
				}
				if yyDollar[4].ival != 0 {
					optionsList.Append(ast.NewDefElem("verbose", ast.NewBoolean(true)))
				}
				if yyDollar[5].ival != 0 {
					optionsList.Append(ast.NewDefElem("analyze", ast.NewBoolean(true)))
				}
			}

			yyVAL.stmt = ast.NewVacuumStmt(optionsList, yyDollar[6].list)
		}
	case 2273:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8667
		{
			yyVAL.stmt = ast.NewVacuumStmt(yyDollar[3].list, yyDollar[5].list)
		}
	case 2274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8674
		{
			var optionsList *ast.NodeList
			if yyDollar[2].ival != 0 {
				optionsList = ast.NewNodeList(ast.NewDefElem("verbose", ast.NewBoolean(true)))
			}

			yyVAL.stmt = ast.NewAnalyzeStmt(optionsList, yyDollar[3].list)
		}
	case 2275:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8683
		{
			yyVAL.stmt = ast.NewAnalyzeStmt(yyDollar[3].list, yyDollar[5].list)
		}
	case 2276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8689
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2277:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8690
		{
			yyVAL.list = nil
		}
	case 2278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8695
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].vacrel)
		}
	case 2279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8699
		{
			yyDollar[1].list.Append(yyDollar[3].vacrel)
			yyVAL.list = yyDollar[1].list
		}
	case 2280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8707
		{
			yyVAL.vacrel = ast.NewVacuumRelation(yyDollar[1].rangevar, yyDollar[2].list)
		}
	case 2281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8713
		{
			yyVAL.str = "analyze"
		}
	case 2282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8714
		{
			yyVAL.str = "analyse"
		}
	case 2283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8723
		{
			yyVAL.stmt = ast.NewVariableShowStmt(yyDollar[2].str)
		}
	case 2284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8727
		{
			yyVAL.stmt = ast.NewVariableShowStmt("timezone")
		}
	case 2285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8731
		{
			yyVAL.stmt = ast.NewVariableShowStmt("transaction_isolation")
		}
	case 2286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8735
		{
			yyVAL.stmt = ast.NewVariableShowStmt("session_authorization")
		}
	case 2287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8739
		{
			yyVAL.stmt = ast.NewVariableShowStmt("all")
		}
	case 2288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8750
		{
			yyVAL.stmt = ast.NewAlterSystemStmt(yyDollar[4].vsetstmt)
		}
	case 2289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8754
		{
			yyVAL.stmt = ast.NewAlterSystemStmt(yyDollar[4].vsetstmt)
		}
	case 2290:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8765
		{
			yyVAL.stmt = ast.NewClusterStmt(yyDollar[5].rangevar, yyDollar[6].str, yyDollar[3].list)
		}
	case 2291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8769
		{
			yyVAL.stmt = ast.NewClusterStmt(nil, "", yyDollar[3].list)
		}
	case 2292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8773
		{
			var params *ast.NodeList
			if yyDollar[2].ival != 0 {
				verboseDefElem := ast.NewDefElem("verbose", nil)
				params = ast.NewNodeList(verboseDefElem)
			}
			yyVAL.stmt = ast.NewClusterStmt(yyDollar[3].rangevar, yyDollar[4].str, params)
		}
	case 2293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8782
		{
			var params *ast.NodeList
			if yyDollar[2].ival != 0 {
				verboseDefElem := ast.NewDefElem("verbose", nil)
				params = ast.NewNodeList(verboseDefElem)
			}
			yyVAL.stmt = ast.NewClusterStmt(nil, "", params)
		}
	case 2294:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8791
		{
			var params *ast.NodeList
			if yyDollar[2].ival != 0 {
				verboseDefElem := ast.NewDefElem("verbose", nil)
				params = ast.NewNodeList(verboseDefElem)
			}
			yyVAL.stmt = ast.NewClusterStmt(yyDollar[5].rangevar, yyDollar[3].str, params)
		}
	case 2295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8802
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8803
		{
			yyVAL.str = ""
		}
	case 2297:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8812
		{
			params := yyDollar[2].list
			if yyDollar[4].bval {
				concurrentlyDefElem := ast.NewDefElem("concurrently", nil)
				if params == nil {
					params = ast.NewNodeList(concurrentlyDefElem)
				} else {
					params.Append(concurrentlyDefElem)
				}
			}
			yyVAL.stmt = ast.NewReindexStmt(ast.ReindexObjectType(yyDollar[3].ival), yyDollar[5].rangevar, "", params)
		}
	case 2298:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8825
		{
			params := yyDollar[2].list
			if yyDollar[4].bval {
				concurrentlyDefElem := ast.NewDefElem("concurrently", nil)
				if params == nil {
					params = ast.NewNodeList(concurrentlyDefElem)
				} else {
					params.Append(concurrentlyDefElem)
				}
			}
			yyVAL.stmt = ast.NewReindexStmt(ast.REINDEX_OBJECT_SCHEMA, nil, yyDollar[5].str, params)
		}
	case 2299:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8838
		{
			params := yyDollar[2].list
			if yyDollar[4].bval {
				concurrentlyDefElem := ast.NewDefElem("concurrently", nil)
				if params == nil {
					params = ast.NewNodeList(concurrentlyDefElem)
				} else {
					params.Append(concurrentlyDefElem)
				}
			}
			yyVAL.stmt = ast.NewReindexStmt(ast.ReindexObjectType(yyDollar[3].ival), nil, yyDollar[5].str, params)
		}
	case 2300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8853
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_INDEX)
		}
	case 2301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8854
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_TABLE)
		}
	case 2302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8858
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_SYSTEM)
		}
	case 2303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8859
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_DATABASE)
		}
	case 2304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8863
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8864
		{
			yyVAL.list = nil
		}
	case 2306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8873
		{
			yyVAL.stmt = ast.NewCheckPointStmt()
		}
	case 2307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8884
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_ALL)
		}
	case 2308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8888
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_TEMP)
		}
	case 2309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8892
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_TEMP)
		}
	case 2310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8896
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_PLANS)
		}
	case 2311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8900
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_SEQUENCES)
		}
	case 2312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8907
		{
			yyVAL.objType = ast.OBJECT_TABLE
		}
	case 2313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8908
		{
			yyVAL.objType = ast.OBJECT_SEQUENCE
		}
	case 2314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8909
		{
			yyVAL.objType = ast.OBJECT_VIEW
		}
	case 2315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8910
		{
			yyVAL.objType = ast.OBJECT_MATVIEW
		}
	case 2316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8911
		{
			yyVAL.objType = ast.OBJECT_INDEX
		}
	case 2317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8912
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_TABLE
		}
	case 2318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8913
		{
			yyVAL.objType = ast.OBJECT_COLLATION
		}
	case 2319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8914
		{
			yyVAL.objType = ast.OBJECT_CONVERSION
		}
	case 2320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8915
		{
			yyVAL.objType = ast.OBJECT_STATISTIC_EXT
		}
	case 2321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8916
		{
			yyVAL.objType = ast.OBJECT_TSPARSER
		}
	case 2322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8917
		{
			yyVAL.objType = ast.OBJECT_TSDICTIONARY
		}
	case 2323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8918
		{
			yyVAL.objType = ast.OBJECT_TSTEMPLATE
		}
	case 2324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8919
		{
			yyVAL.objType = ast.OBJECT_TSCONFIGURATION
		}
	case 2325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8932
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8933
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8938
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8942
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8950
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode: ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:  yyDollar[1].list,
				Objargs:  yyDollar[2].list,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8962
		{
			yylex.Error("Use NONE to denote the missing argument of a unary operator.")
			return 1
		}
	case 2331:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8967
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, yyDollar[4].typnam)
		}
	case 2332:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8969
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[4].typnam)
		}
	case 2333:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8971
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, nil)
		}
	case 2334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8975
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8988
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 2336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8990
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 2337:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8994
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2338:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9005
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2339:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9016
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2340:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9027
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DATABASE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2341:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9038
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2342:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9049
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMCONSTRAINT,
				Object:     yyDollar[3].list,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2343:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9061
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2344:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9072
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2345:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9083
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2346:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9094
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2347:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9105
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2348:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9122
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2349:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9139
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2350:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9151
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[7].rangevar,
				Subname:    yyDollar[5].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2351:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9163
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2352:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9174
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2353:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9185
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2354:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9196
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SCHEMA,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2355:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9207
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2356:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9218
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2357:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9229
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2358:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9240
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2359:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9251
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2360:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9262
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2361:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9273
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2362:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9284
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2363:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9295
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2364:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9306
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2365:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9317
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2366:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9328
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2367:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9339
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2368:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9350
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2369:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9361
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2370:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9374
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2371:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9387
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2372:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9400
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2373:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9413
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2374:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9426
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2375:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9439
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[3].rangevar,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2376:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9451
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[8].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2377:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9463
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2378:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9476
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2379:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9489
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_RULE,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2380:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9501
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TRIGGER,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2381:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9513
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2382:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9524
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2383:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9535
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2384:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9546
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLESPACE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2385:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9557
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2386:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9568
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSPARSER,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2387:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9579
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2388:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9590
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSTEMPLATE,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2389:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9601
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2390:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9612
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2391:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9623
		{
			rv, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(err.Error())
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_ATTRIBUTE,
				RelationType: ast.OBJECT_TYPE,
				Relation:     rv,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				Behavior:     ast.DropBehavior(yyDollar[9].dropBehav),
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9649
		{
			yyVAL.ival = 0
		}
	case 2393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9651
		{
			// Combine constraint attribute bits
			newspec := yyDollar[1].ival | yyDollar[2].ival

			// Check for conflicts (NOT DEFERRABLE + INITIALLY DEFERRED)
			if (newspec & (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED)) == (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED) {
				// This would be an error in real PostgreSQL parser
			}

			yyVAL.ival = newspec
		}
	case 2394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9665
		{
			yyVAL.ival = ast.CAS_NOT_DEFERRABLE
		}
	case 2395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9666
		{
			yyVAL.ival = ast.CAS_DEFERRABLE
		}
	case 2396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9667
		{
			yyVAL.ival = ast.CAS_INITIALLY_IMMEDIATE
		}
	case 2397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9668
		{
			yyVAL.ival = ast.CAS_INITIALLY_DEFERRED
		}
	case 2398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9669
		{
			yyVAL.ival = ast.CAS_NOT_VALID
		}
	case 2399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9670
		{
			yyVAL.ival = ast.CAS_NO_INHERIT
		}
	case 2400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9674
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9679
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9684
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9692
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9696
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2405:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9700
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, yyDollar[5].node, ast.DEFELEM_UNSPEC)
		}
	case 2406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9704
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, nil, ast.DEFELEM_UNSPEC)
		}
	case 2407:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9718
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  yyDollar[7].typnam,
				Options:     yyDollar[8].list,
				SQLBody:     yyDollar[9].node,
			}
			yyVAL.stmt = stmt
		}
	case 2408:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:9732
		{
			// Handle RETURNS TABLE variant
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil, // TODO: Handle table return type
				Options:     yyDollar[11].list,
				SQLBody:     yyDollar[12].node,
			}
			// TODO: Process table_func_column_list into appropriate return type
			yyVAL.stmt = stmt
		}
	case 2409:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9748
		{
			// No explicit return type (for procedures disguised as functions)
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2410:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9763
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: true,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9778
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9779
		{
			yyVAL.list = nil
		}
	case 2413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9784
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9788
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9796
		{
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9800
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9805
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9813
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    yyDollar[2].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9822
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[2].funparammode,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9831
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9840
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    "",
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9849
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    "",
				ArgType: yyDollar[1].typnam,
			}
			yyVAL.funparam = param
		}
	case 2423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9860
		{
			yyVAL.funparammode = ast.FUNC_PARAM_IN
		}
	case 2424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9861
		{
			yyVAL.funparammode = ast.FUNC_PARAM_OUT
		}
	case 2425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9862
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9863
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9864
		{
			yyVAL.funparammode = ast.FUNC_PARAM_VARIADIC
		}
	case 2428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9868
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9872
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2430:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9874
		{
			// Handle %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				// TODO: Add %TYPE indicator
			}
		}
	case 2431:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9884
		{
			// Handle SETOF %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[2].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				Setof: true,
			}
		}
	case 2432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9896
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2433:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9897
		{
			yyVAL.list = nil
		}
	case 2434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9902
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].defelt)
			yyVAL.list = list
		}
	case 2435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9908
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9916
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].node)
		}
	case 2437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9920
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 2438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9924
		{
			yyVAL.defelt = ast.NewDefElem("transform", yyDollar[2].list)
		}
	case 2439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9928
		{
			yyVAL.defelt = ast.NewDefElem("window", ast.NewBoolean(true))
		}
	case 2440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9932
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9939
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.node = list
		}
	case 2442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9945
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 2443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9955
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[3].typnam)
			yyVAL.list = list
		}
	case 2444:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9961
		{
			yyDollar[1].list.Append(yyDollar[5].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9969
		{
			yyVAL.node = yyDollar[1].stmt
		}
	case 2446:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9973
		{
			/*
			 * A compound statement is stored as a single-item list
			 * containing the list of statements as its member.  That
			 * way, the parse analysis code can tell apart an empty
			 * body from no body at all.
			 */
			list := ast.NewNodeList()
			list.Append(yyDollar[3].list)
			yyVAL.node = list
		}
	case 2447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9985
		{
			yyVAL.node = nil
		}
	case 2448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9992
		{
			yyVAL.stmt = &ast.ReturnStmt{
				ReturnVal: yyDollar[2].node,
			}
		}
	case 2449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10001
		{
			/* As in stmtmulti, discard empty statements */
			if yyDollar[2].stmt != nil {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			} else {
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2450:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10011
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10017
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10018
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10023
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10027
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2455:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:10043
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[6].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: false,
				Trigname:     yyDollar[4].str,
				Relation:     yyDollar[8].rangevar,
				Funcname:     yyDollar[14].list,
				Args:         yyDollar[16].list,
				Row:          yyDollar[10].bval,
				Timing:       int16(yyDollar[5].ival),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[11].node,
				Transitions:  yyDollar[9].list,
				Deferrable:   false,
				Initdeferred: false,
				Constrrel:    nil,
			}
			yyVAL.stmt = stmt
		}
	case 2456:
		yyDollar = yyS[yypt-21 : yypt+1]
//line postgres.y:10075
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[7].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: true,
				Trigname:     yyDollar[5].str,
				Relation:     yyDollar[9].rangevar,
				Funcname:     yyDollar[18].list,
				Args:         yyDollar[20].list,
				Row:          true,
				Timing:       int16(ast.TRIGGER_TIMING_AFTER),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[15].node,
				Transitions:  nil,
				Deferrable:   true, // Default for constraint triggers
				Initdeferred: false,
				Constrrel:    yyDollar[10].rangevar,
			}
			yyVAL.stmt = stmt
		}
	case 2457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10106
		{
			yyVAL.ival = ast.TRIGGER_TIMING_BEFORE
		}
	case 2458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10107
		{
			yyVAL.ival = ast.TRIGGER_TIMING_AFTER
		}
	case 2459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10108
		{
			yyVAL.ival = ast.TRIGGER_TIMING_INSTEAD
		}
	case 2460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10113
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10115
		{
			// Extract event types and column lists from both sides
			events1 := yyDollar[1].list.Items[0].(*ast.Integer).IVal
			events2 := yyDollar[3].list.Items[0].(*ast.Integer).IVal
			columns1 := yyDollar[1].list.Items[1]
			columns2 := yyDollar[3].list.Items[1]

			// Check for duplicate events
			if events1&events2 != 0 {
				// TODO: Generate parse error for duplicate trigger events
			}

			// Create combined result [events1|events2, combined_columns]
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(events1 | events2))

			// Concatenate column lists (if any)
			if columns1 != nil && columns2 != nil {
				// Both have columns - concatenate
				combinedCols := columns1.(*ast.NodeList)
				if columns2List, ok := columns2.(*ast.NodeList); ok {
					for _, item := range columns2List.Items {
						combinedCols.Append(item)
					}
				}
				list.Append(combinedCols)
			} else if columns1 != nil {
				list.Append(columns1)
			} else if columns2 != nil {
				list.Append(columns2)
			} else {
				list.Append(nil)
			}

			yyVAL.list = list
		}
	case 2462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10155
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_INSERT)))
			list.Append(nil) // No columns for INSERT
			yyVAL.list = list
		}
	case 2463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10162
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_DELETE)))
			list.Append(nil) // No columns for DELETE
			yyVAL.list = list
		}
	case 2464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10169
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(nil) // No columns for UPDATE
			yyVAL.list = list
		}
	case 2465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10176
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(yyDollar[3].list) // Column list for UPDATE OF
			yyVAL.list = list
		}
	case 2466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10183
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_TRUNCATE)))
			list.Append(nil) // No columns for TRUNCATE
			yyVAL.list = list
		}
	case 2467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10192
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10193
		{
			yyVAL.list = nil
		}
	case 2469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10197
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10202
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10210
		{
			trans := &ast.TriggerTransition{
				Name:    yyDollar[4].str,
				IsNew:   yyDollar[1].bval,
				IsTable: yyDollar[2].bval,
			}
			yyVAL.node = trans
		}
	case 2472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10221
		{
			yyVAL.bval = true
		}
	case 2473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10222
		{
			yyVAL.bval = false
		}
	case 2474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10226
		{
			yyVAL.bval = true
		}
	case 2475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10227
		{
			yyVAL.bval = false
		}
	case 2476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10231
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10236
		{
			yyVAL.bval = yyDollar[3].bval
		}
	case 2478:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10240
		{
			// If ROW/STATEMENT not specified, default to STATEMENT
			yyVAL.bval = false
		}
	case 2481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10252
		{
			yyVAL.bval = true
		}
	case 2482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10253
		{
			yyVAL.bval = false
		}
	case 2483:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10257
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10258
		{
			yyVAL.node = nil
		}
	case 2487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10267
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10272
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2489:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10276
		{
			yyVAL.list = nil
		}
	case 2490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10281
		{
			yyVAL.node = ast.NewString(fmt.Sprintf("%d", yyDollar[1].ival))
		}
	case 2491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10284
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10285
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10286
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10290
		{
			yyVAL.rangevar = yyDollar[2].rangevar
		}
	case 2495:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10291
		{
			yyVAL.rangevar = nil
		}
	case 2496:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10304
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[4].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[5].list,
				Query:           yyDollar[8].stmt,
				Replace:         false,
				Options:         yyDollar[6].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[9].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2497:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10320
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[6].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[10].stmt,
				Replace:         true,
				Options:         yyDollar[8].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[11].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2498:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:10336
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[5].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[11].stmt,
				Replace:         false,
				Options:         yyDollar[9].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[12].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2499:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:10352
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[7].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[9].list,
				Query:           yyDollar[13].stmt,
				Replace:         true,
				Options:         yyDollar[11].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[14].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10369
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2501:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10370
		{
			yyVAL.list = nil
		}
	case 2502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10374
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2503:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10375
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2504:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10376
		{
			yyVAL.ival = int(ast.LOCAL_CHECK_OPTION)
		}
	case 2505:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10377
		{
			yyVAL.ival = int(ast.NO_CHECK_OPTION)
		}
	case 2506:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10388
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = yyDollar[5].rolespec
			n.SchemaElts = yyDollar[6].list
			yyVAL.stmt = n
		}
	case 2507:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10395
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = nil
			n.SchemaElts = yyDollar[4].list
			yyVAL.stmt = n
		}
	case 2508:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10402
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = yyDollar[8].rolespec
			n.SchemaElts = yyDollar[9].list
			yyVAL.stmt = n
		}
	case 2509:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10409
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = nil
			n.SchemaElts = yyDollar[7].list
			yyVAL.stmt = n
		}
	case 2510:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10425
		{
			n := ast.NewCreateDomainStmt(yyDollar[3].list, yyDollar[5].typnam)
			// Use SplitColQualList to separate constraints and collate clause
			constraints, collClause := SplitColQualList(yyDollar[6].list)
			n.Constraints = constraints
			n.CollClause = collClause
			yyVAL.stmt = n
		}
	case 2511:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10443
		{
			n := ast.NewAlterDomainStmt('T', yyDollar[3].list)
			n.Def = yyDollar[4].node
			yyVAL.stmt = n
		}
	case 2512:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10449
		{
			n := ast.NewAlterDomainStmt('N', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2513:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10454
		{
			n := ast.NewAlterDomainStmt('O', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2514:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10459
		{
			n := ast.NewAlterDomainStmt('C', yyDollar[3].list)
			n.Def = yyDollar[5].node
			yyVAL.stmt = n
		}
	case 2515:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10465
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[6].str
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			yyVAL.stmt = n
		}
	case 2516:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10473
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[8].str
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			yyVAL.stmt = n
		}
	case 2517:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10481
		{
			n := ast.NewAlterDomainStmt('V', yyDollar[3].list)
			n.Name = yyDollar[6].str
			yyVAL.stmt = n
		}
	case 2518:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10496
		{
			// Extract actual arguments from aggr_args which returns [args, position_indicator]
			var args *ast.NodeList
			if yyDollar[5].list != nil && yyDollar[5].list.Len() > 0 {
				// First element contains the actual arguments (or nil for *)
				if firstElem, ok := yyDollar[5].list.Items[0].(*ast.NodeList); ok {
					args = firstElem
				} else if yyDollar[5].list.Items[0] == nil {
					// Special case for COUNT(*) - create a list with a single nil element
					args = ast.NewNodeList(nil)
				}
			}
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, false, yyDollar[4].list, args, yyDollar[6].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2519:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10512
		{
			// old-style (pre-8.2) syntax for CREATE AGGREGATE
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, true, yyDollar[4].list, nil, yyDollar[5].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2520:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10518
		{
			n := ast.NewDefineStmt(ast.OBJECT_OPERATOR, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10523
		{
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10528
		{
			// Shell type (identified by lack of definition)
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, nil, false, false)
			yyVAL.stmt = n
		}
	case 2523:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10534
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSPARSER, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2524:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10539
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSDICTIONARY, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2525:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10544
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSTEMPLATE, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2526:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10549
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSCONFIGURATION, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2527:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10554
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2528:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10559
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, yyDollar[7].list, true, false)
			yyVAL.stmt = n
		}
	case 2529:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10564
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, ast.NewNodeList(yyDollar[5].list), false, false)
			yyVAL.stmt = n
		}
	case 2530:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10569
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, ast.NewNodeList(yyDollar[8].list), true, false)
			yyVAL.stmt = n
		}
	case 2531:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10574
		{
			typevar, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(fmt.Sprintf("invalid type name: %v", err))
				return 1
			}

			n := ast.NewCompositeTypeStmt(typevar, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2532:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10585
		{
			n := ast.NewCreateEnumStmt(yyDollar[3].list, yyDollar[7].list)
			yyVAL.stmt = n
		}
	case 2533:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10590
		{
			n := ast.NewCreateRangeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2534:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10604
		{
			n := ast.NewCreateSeqStmt(yyDollar[4].rangevar, yyDollar[5].list, 0, false, false)
			yyVAL.stmt = n
		}
	case 2535:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10609
		{
			n := ast.NewCreateSeqStmt(yyDollar[7].rangevar, yyDollar[8].list, 0, false, true)
			yyVAL.stmt = n
		}
	case 2536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10616
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2537:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10617
		{
			yyVAL.list = nil
		}
	case 2538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10620
		{
		}
	case 2539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10621
		{
		}
	case 2540:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10632
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[3].rangevar, yyDollar[4].list, false, false)
		}
	case 2541:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10636
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[5].rangevar, yyDollar[6].list, false, true)
		}
	case 2542:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10649
		{
			n := ast.NewCreateExtensionStmt(yyDollar[3].str, false, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2543:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10654
		{
			n := ast.NewCreateExtensionStmt(yyDollar[6].str, true, yyDollar[8].list)
			yyVAL.stmt = n
		}
	case 2544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10662
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10671
		{
			yyVAL.list = nil
		}
	case 2546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10678
		{
			yyVAL.defelt = ast.NewDefElem("schema", ast.NewString(yyDollar[2].str))
		}
	case 2547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10682
		{
			yyVAL.defelt = ast.NewDefElem("version", ast.NewString(yyDollar[2].str))
		}
	case 2548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10686
		{
			yylex.Error("CREATE EXTENSION ... FROM is no longer supported")
			return 1
		}
	case 2549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10691
		{
			yyVAL.defelt = ast.NewDefElem("cascade", ast.NewBoolean(true))
		}
	case 2550:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10704
		{
			n := ast.NewAlterExtensionStmt(yyDollar[3].str, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10712
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10721
		{
			yyVAL.list = nil
		}
	case 2553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10728
		{
			yyVAL.defelt = ast.NewDefElem("to", ast.NewString(yyDollar[2].str))
		}
	case 2554:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10741
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), ast.NewString(yyDollar[6].str))
		}
	case 2555:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10745
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), yyDollar[6].list)
		}
	case 2556:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10749
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_AGGREGATE), yyDollar[6].objwithargs)
		}
	case 2557:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10753
		{
			// CAST takes two TypeNames as a NodeList
			list := ast.NewNodeList(yyDollar[7].typnam)
			list.Append(yyDollar[9].typnam)
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_CAST), list)
		}
	case 2558:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10760
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_DOMAIN), yyDollar[6].typnam)
		}
	case 2559:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10764
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_FUNCTION), yyDollar[6].objwithargs)
		}
	case 2560:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10768
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPERATOR), yyDollar[6].objwithargs)
		}
	case 2561:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10772
		{
			// OPERATOR CLASS takes method name + class name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then class name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPCLASS), list)
		}
	case 2562:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10781
		{
			// OPERATOR FAMILY takes method name + family name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then family name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPFAMILY), list)
		}
	case 2563:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10790
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_PROCEDURE), yyDollar[6].objwithargs)
		}
	case 2564:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10794
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_ROUTINE), yyDollar[6].objwithargs)
		}
	case 2565:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10798
		{
			list := ast.NewNodeList(yyDollar[7].typnam, ast.NewString(yyDollar[9].str))
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TRANSFORM), list)
		}
	case 2566:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10803
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TYPE), yyDollar[6].typnam)
		}
	case 2567:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10815
		{
			yyVAL.stmt = ast.NewCreateFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2568:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10821
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2569:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10825
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, nil)
		}
	case 2570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10831
		{
			yyVAL.defelt = ast.NewDefElem("handler", yyDollar[2].list)
		}
	case 2571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10832
		{
			yyVAL.defelt = ast.NewDefElem("handler", nil)
		}
	case 2572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10833
		{
			yyVAL.defelt = ast.NewDefElem("validator", yyDollar[2].list)
		}
	case 2573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10834
		{
			yyVAL.defelt = ast.NewDefElem("validator", nil)
		}
	case 2574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10838
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10839
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10843
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10844
		{
			yyVAL.list = nil
		}
	case 2578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10848
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10849
		{
			result := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				result.Append(item)
			}
			yyVAL.list = result
		}
	case 2580:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10866
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].str, yyDollar[9].str, yyDollar[10].list, false)
		}
	case 2581:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:10871
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[6].str, yyDollar[7].str, yyDollar[8].str, yyDollar[12].str, yyDollar[13].list, true)
		}
	case 2582:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10877
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].list, true)
		}
	case 2583:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10881
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, nil, true)
		}
	case 2584:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10885
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, "", yyDollar[4].list, false)
		}
	case 2585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10891
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10892
		{
			yyVAL.str = ""
		}
	case 2587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10896
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10897
		{
			yyVAL.str = ""
		}
	case 2589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10901
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10902
		{
			yyVAL.str = ""
		}
	case 2591:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10915
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[6].list, yyDollar[8].list, yyDollar[10].str, yyDollar[11].list, nil, false)
		}
	case 2592:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:10921
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[9].list, yyDollar[11].list, yyDollar[13].str, yyDollar[14].list, nil, true)
		}
	case 2593:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:10927
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[8].list, ast.NewNodeList(yyDollar[7].rangevar), yyDollar[11].str, yyDollar[12].list, yyDollar[9].partboundspec, false)
		}
	case 2594:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:10933
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[11].list, ast.NewNodeList(yyDollar[10].rangevar), yyDollar[14].str, yyDollar[15].list, yyDollar[12].partboundspec, true)
		}
	case 2595:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10945
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list, false)
		}
	case 2596:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10949
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[8].rolespec, yyDollar[10].str, yyDollar[11].list, true)
		}
	case 2597:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10955
		{
			yyVAL.stmt = ast.NewAlterUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list)
		}
	case 2598:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10961
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, false)
		}
	case 2599:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10965
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[7].rolespec, yyDollar[9].str, true)
		}
	case 2600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10971
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 2601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10972
		{
			yyVAL.rolespec = ast.NewRoleSpec(ast.ROLESPEC_CURRENT_USER, "")
		}
	case 2602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10977
		{
			// For aggregates like COUNT(*)
			// Return a list with [nil, -1] matching PostgreSQL's list_make2(NIL, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(nil, ast.NewInteger(-1))
		}
	case 2603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10983
		{
			// Regular aggregate arguments
			// Return a list with [args, -1] matching PostgreSQL's list_make2($2, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(yyDollar[2].list, ast.NewInteger(-1))
		}
	case 2604:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10989
		{
			// Ordered-set aggregate without direct arguments
			// Return a list with [args, 0] matching PostgreSQL's list_make2($4, makeInteger(0))
			yyVAL.list = ast.NewNodeList(yyDollar[4].list, ast.NewInteger(0))
		}
	case 2605:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10995
		{
			// Hypothetical-set aggregate
			// This is the only case requiring consistency checking in PostgreSQL
			result, err := makeOrderedSetArgs(yyDollar[2].list, yyDollar[5].list)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.list = result
		}
	case 2606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11009
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11013
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11021
		{
			yyVAL.node = yyDollar[1].funparam
		}
	case 2609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11028
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11035
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11039
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11047
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2613:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11054
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			n.NewValIsAfter = true
			yyVAL.stmt = n
		}
	case 2614:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11062
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = false
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2615:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11071
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = true
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2616:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11080
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.OldVal = yyDollar[6].str
			n.NewVal = yyDollar[8].str
			n.SkipIfNewValExists = false
			yyVAL.stmt = n
		}
	case 2617:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11088
		{
			// Following PostgreSQL's approach - DROP VALUE is parsed but not implemented
			// PostgreSQL throws an error saying "dropping an enum value is not implemented"
			yylex.Error("dropping an enum value is not implemented")
			return 1
		}
	case 2618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11104
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11106
		{
			yyVAL.list = nil
		}
	case 2620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11111
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11113
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11118
		{
			if constraint, ok := yyDollar[3].node.(*ast.Constraint); ok {
				constraint.Conname = yyDollar[2].str
				yyVAL.node = constraint
			} else {
				yyVAL.node = yyDollar[3].node
			}
		}
	case 2623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11127
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2624:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11132
		{
			n := ast.NewConstraint(ast.CONSTR_CHECK)
			n.RawExpr = yyDollar[3].node
			n.CookedExpr = "" // Empty string, not nil
			// Process constraint attributes from $5
			processConstraintAttributeSpec(yyDollar[5].ival, n)
			// PostgreSQL: n->initially_valid = !n->skip_validation
			n.InitiallyValid = !n.SkipValidation
			yyVAL.node = n
		}
	case 2625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11143
		{
			n := ast.NewConstraint(ast.CONSTR_NOTNULL)
			// In PostgreSQL, domain NOT NULL constraints have keys = list_make1(makeString("value"))
			n.Keys = ast.NewNodeList(ast.NewString("value"))
			// Process constraint attributes from $3
			processConstraintAttributeSpec(yyDollar[3].ival, n)
			// PostgreSQL sets initially_valid = true for NOT NULL (no NOT VALID support yet)
			n.InitiallyValid = true
			yyVAL.node = n
		}
	case 2626:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11163
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[7].stmt, yyDollar[5].into, ast.OBJECT_MATVIEW, false, false)
			/* cram additional flags into the IntoClause */
			yyDollar[5].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[5].into.SkipData = !yyDollar[8].bval
			yyVAL.stmt = ctas
		}
	case 2627:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11171
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[10].stmt, yyDollar[8].into, ast.OBJECT_MATVIEW, false, true)
			/* cram additional flags into the IntoClause */
			yyDollar[8].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[8].into.SkipData = !yyDollar[11].bval
			yyVAL.stmt = ctas
		}
	case 2628:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11182
		{
			n := ast.NewRefreshMatViewStmt(yyDollar[4].bval, !yyDollar[6].bval, yyDollar[5].rangevar)
			yyVAL.stmt = n
		}
	case 2629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11188
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 2630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11189
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 2631:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11194
		{
			yyVAL.into = &ast.IntoClause{
				Rel:            yyDollar[1].rangevar,
				ColNames:       yyDollar[2].list,
				AccessMethod:   yyDollar[3].str,
				Options:        yyDollar[4].list,
				TableSpaceName: yyDollar[5].str,
			}
		}
	case 2632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11206
		{
			yyVAL.bval = true
		}
	case 2633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11207
		{
			yyVAL.bval = false
		}
	case 2634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11208
		{
			yyVAL.bval = true
		}
	case 2635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11213
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].stmt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11222
		{
			yyVAL.list = nil
		}
	case 2641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11233
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11235
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_CURRENT, yyDollar[1].str, nil, false)
		}
	case 2643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11239
		{
			args := ast.NewNodeList(yyDollar[3].node)
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "timezone", args, false)
		}
	case 2644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11244
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "catalog", args, false)
		}
	case 2645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11249
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "search_path", args, false)
		}
	case 2646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11254
		{
			var args *ast.NodeList
			if yyDollar[2].str != "" {
				args = ast.NewNodeList(ast.NewString(yyDollar[2].str))
			}
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "client_encoding", args, false)
		}
	case 2647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11262
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "role", args, false)
		}
	case 2648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11267
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "session_authorization", args, false)
		}
	case 2649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11272
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, "session_authorization", nil, false)
		}
	case 2650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11276
		{
			var value string
			if yyDollar[3].ival == int(ast.XMLOPTION_DOCUMENT) {
				value = "document"
			} else {
				value = "content"
			}
			args := ast.NewNodeList(ast.NewString(value))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "xmloption", args, false)
		}
	case 2651:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11287
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "transaction_snapshot", args, false)
		}
	case 2652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11295
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11299
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11303
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11307
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11314
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2657:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11318
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 2658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11325
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11331
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11338
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11339
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11343
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11344
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11346
		{
			t := yyDollar[1].typnam
			t.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 2665:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11353
		{
			t := yyDollar[1].typnam
			// INTERVAL_FULL_RANGE equivalent and precision
			t.Typmods = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_FULL_RANGE), ast.NewInteger(yyDollar[3].ival))
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[5].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 2666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11360
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11361
		{
			yyVAL.node = ast.NewString("default")
		}
	case 2668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11362
		{
			yyVAL.node = ast.NewString("local")
		}
	case 2669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11366
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11367
		{
			yyVAL.str = "default"
		}
	case 2671:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11368
		{
			yyVAL.str = ""
		}
	case 2672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11372
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11373
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11377
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11378
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11379
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11380
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11384
		{
			yyVAL.ival = int(ast.XMLOPTION_DOCUMENT)
		}
	case 2679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11385
		{
			yyVAL.ival = int(ast.XMLOPTION_CONTENT)
		}
	case 2680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11390
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11396
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11401
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11409
		{
			yyVAL.node = ast.NewDefElem("transaction_isolation", ast.NewString(yyDollar[3].str))
		}
	case 2684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11413
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(true))
		}
	case 2685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11417
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(false))
		}
	case 2686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11421
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(true))
		}
	case 2687:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11425
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(false))
		}
	case 2688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11431
		{
			yyVAL.str = "read uncommitted"
		}
	case 2689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11432
		{
			yyVAL.str = "read committed"
		}
	case 2690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11433
		{
			yyVAL.str = "repeatable read"
		}
	case 2691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11434
		{
			yyVAL.str = "serializable"
		}
	case 2692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11438
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2693:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11439
		{
			yyVAL.list = nil
		}
	case 2694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11443
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 2695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11444
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11445
		{
			yyVAL.node = yyDollar[1].list
		}
	case 2697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11448
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11449
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11450
		{
			yyVAL.node = ast.NewString("none")
		}
	case 2700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11454
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2701:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11455
		{
			yyVAL.list = nil
		}
	case 2702:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11459
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2703:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11460
		{
			yyVAL.node = nil
		}
	case 2704:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11464
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11469
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11474
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11482
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2708:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11486
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_SET
			yyVAL.defelt = elem
		}
	case 2709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11492
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_ADD
			yyVAL.defelt = elem
		}
	case 2710:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11498
		{
			yyVAL.defelt = ast.NewDefElemExtended("", yyDollar[2].str, nil, ast.DEFELEM_DROP)
		}
	case 2711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11504
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11505
		{
			yyVAL.str = ""
		}
	case 2713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11509
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_NOTHING, "")
		}
	case 2714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11510
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_FULL, "")
		}
	case 2715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11511
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_DEFAULT, "")
		}
	case 2716:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11512
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_INDEX, yyDollar[3].str)
		}
	case 2717:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11516
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11521
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11526
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11533
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2721:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11534
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2722:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11545
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[9].list, nil)
		}
	case 2723:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:11549
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[11].list, yyDollar[8].list)
		}
	case 2724:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11555
		{
			yyVAL.stmt = ast.NewAlterEventTrigStmt(yyDollar[4].str, ast.TriggerFires(yyDollar[5].ival))
		}
	case 2725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11561
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_ORIGIN)
		}
	case 2726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11562
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_REPLICA)
		}
	case 2727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11563
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ALWAYS)
		}
	case 2728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11564
		{
			yyVAL.ival = int(ast.TRIGGER_DISABLED)
		}
	case 2729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11569
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2730:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11574
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2731:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11582
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[4].list)
		}
	case 2732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11589
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(ast.NewString(yyDollar[1].str))
		}
	case 2733:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11594
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2734:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11608
		{
			yyVAL.stmt = ast.NewCreateTableSpaceStmt(yyDollar[3].str, yyDollar[4].rolespec, yyDollar[6].str, yyDollar[7].list)
		}
	case 2735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11614
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 2736:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11615
		{
			yyVAL.rolespec = nil
		}
	case 2737:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11620
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, false)
		}
	case 2738:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11624
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, true)
		}
	case 2739:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11639
		{
			yyVAL.stmt = ast.NewCreatePolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].bval, yyDollar[7].str, yyDollar[8].list, yyDollar[9].node, yyDollar[10].node)
		}
	case 2740:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11647
		{
			yyVAL.stmt = ast.NewAlterPolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].list, yyDollar[7].node, yyDollar[8].node)
		}
	case 2741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11654
		{
			// Check for "permissive" or "restrictive" (case-insensitive)
			if strings.EqualFold(yyDollar[2].str, "permissive") {
				yyVAL.bval = true
			} else if strings.EqualFold(yyDollar[2].str, "restrictive") {
				yyVAL.bval = false
			} else {
				// Parser will error on invalid value
				yylex.Error("unrecognized row security option")
				return 1
			}
		}
	case 2742:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11666
		{
			yyVAL.bval = true
		}
	case 2743:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11670
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2744:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11671
		{
			yyVAL.str = "all"
		}
	case 2745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11675
		{
			yyVAL.str = "all"
		}
	case 2746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11676
		{
			yyVAL.str = "select"
		}
	case 2747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11677
		{
			yyVAL.str = "insert"
		}
	case 2748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11678
		{
			yyVAL.str = "update"
		}
	case 2749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11679
		{
			yyVAL.str = "delete"
		}
	case 2750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11683
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2751:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11684
		{
			// Default to PUBLIC when no TO clause is specified
			publicRole := ast.NewRoleSpec(ast.ROLESPEC_PUBLIC, "")
			yyVAL.list = ast.NewNodeList(publicRole)
		}
	case 2752:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11692
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2753:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11693
		{
			yyVAL.list = nil
		}
	case 2754:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11697
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2755:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11698
		{
			yyVAL.node = nil
		}
	case 2756:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11702
		{
			yyVAL.node = yyDollar[4].node
		}
	case 2757:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11703
		{
			yyVAL.node = nil
		}
	case 2758:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11714
		{
			yyVAL.stmt = ast.NewCreateAmStmt(yyDollar[4].str, ast.AmType(yyDollar[6].ival), yyDollar[8].list)
		}
	case 2759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11720
		{
			yyVAL.ival = int(ast.AMTYPE_INDEX)
		}
	case 2760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11721
		{
			yyVAL.ival = int(ast.AMTYPE_TABLE)
		}
	case 2761:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11732
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[3].list, yyDollar[4].list, yyDollar[6].list, yyDollar[8].list, "", false, false)
		}
	case 2762:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11736
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[6].list, yyDollar[7].list, yyDollar[9].list, yyDollar[11].list, "", false, true)
		}
	case 2763:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11743
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[3].list, yyDollar[6].node, false)
		}
	case 2764:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11747
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[5].list, yyDollar[8].node, true)
		}
	case 2765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11753
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].statelem)
		}
	case 2766:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11754
		{
			yyDollar[1].list.Append(yyDollar[3].statelem)
			yyVAL.list = yyDollar[1].list
		}
	case 2767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11758
		{
			yyVAL.statelem = ast.NewStatsElem(yyDollar[1].str)
		}
	case 2768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11759
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[1].node)
		}
	case 2769:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11760
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[2].node)
		}
	case 2770:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11771
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, false, yyDollar[4].list)
		}
	case 2771:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11775
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, true, yyDollar[7].list)
		}
	case 2772:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11779
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, yyDollar[5].list, false, yyDollar[6].list)
		}
	case 2773:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11786
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, yyDollar[5].list, nil, ast.AP_SetOptions)
		}
	case 2774:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11790
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_AddObjects)
		}
	case 2775:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11794
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_SetObjects)
		}
	case 2776:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11798
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_DropObjects)
		}
	case 2777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11804
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2778:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11805
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2779:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11810
		{
			pubTable := ast.NewPublicationTable(yyDollar[2].rangevar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_TABLE, pubTable)
		}
	case 2780:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11815
		{
			yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_TABLES_IN_SCHEMA, yyDollar[4].str)
		}
	case 2781:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11819
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA)
		}
	case 2782:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11823
		{
			// If either a row filter or column list is specified, create a PublicationTable object
			if yyDollar[2].list != nil || yyDollar[3].node != nil {
				// Create a simple RangeVar from the ColId
				rangeVar := ast.NewRangeVar(yyDollar[1].str, "", "")
				pubTable := ast.NewPublicationTable(rangeVar, yyDollar[3].node, yyDollar[2].list)
				yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
			} else {
				yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_CONTINUATION, yyDollar[1].str)
			}
		}
	case 2783:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11835
		{
			rangeVar := makeRangeVarFromQualifiedName(yyDollar[1].str, yyDollar[2].list, -1)
			pubTable := ast.NewPublicationTable(rangeVar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2784:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11841
		{
			pubTable := ast.NewPublicationTable(yyDollar[1].rangevar, yyDollar[3].node, yyDollar[2].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11846
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_CONTINUATION)
		}
	case 2786:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11852
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2787:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11853
		{
			yyVAL.node = nil
		}
	case 2788:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11864
		{
			yyVAL.stmt = ast.NewCreateSubscriptionStmt(yyDollar[3].str, yyDollar[5].str, yyDollar[7].list, yyDollar[8].list)
		}
	case 2789:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11871
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_OPTIONS, "", nil, yyDollar[5].list)
		}
	case 2790:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11875
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_CONNECTION, yyDollar[5].str, nil, nil)
		}
	case 2791:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11879
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_REFRESH, "", nil, yyDollar[6].list)
		}
	case 2792:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11883
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ADD_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2793:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11887
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_DROP_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2794:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11891
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SET_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2795:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11895
		{
			enableOpt := ast.NewNodeList()
			enableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(true)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, enableOpt)
		}
	case 2796:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11901
		{
			disableOpt := ast.NewNodeList()
			disableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(false)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, disableOpt)
		}
	case 2797:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11907
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SKIP, "", nil, yyDollar[5].list)
		}
	case 2798:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11920
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, yyDollar[10].objwithargs, ast.CoercionContext(yyDollar[11].ival), false)
		}
	case 2799:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11924
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), false)
		}
	case 2800:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11928
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), true)
		}
	case 2801:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11934
		{
			yyVAL.ival = int(ast.COERCION_IMPLICIT)
		}
	case 2802:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11935
		{
			yyVAL.ival = int(ast.COERCION_ASSIGNMENT)
		}
	case 2803:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11936
		{
			yyVAL.ival = int(ast.COERCION_EXPLICIT)
		}
	case 2804:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:11948
		{
			yyVAL.stmt = ast.NewCreateOpClassStmt(yyDollar[4].list, yyDollar[11].list, yyDollar[10].str, yyDollar[8].typnam, yyDollar[13].list, yyDollar[5].bval)
		}
	case 2805:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11954
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2806:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11955
		{
			yyVAL.list = nil
		}
	case 2807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11959
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2808:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11960
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2809:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11965
		{
			// Create ObjectWithArgs for simple operator
			owa := ast.NewObjectWithArgs(yyDollar[3].list, nil, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, yyDollar[4].list)
		}
	case 2810:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11971
		{
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, yyDollar[3].objwithargs, yyDollar[4].list)
		}
	case 2811:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11975
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[3].objwithargs, nil)
		}
	case 2812:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11979
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[6].objwithargs, yyDollar[4].list)
		}
	case 2813:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11983
		{
			yyVAL.node = ast.NewOpClassItemStorage(yyDollar[2].typnam)
		}
	case 2814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11989
		{
			yyVAL.bval = true
		}
	case 2815:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11990
		{
			yyVAL.bval = false
		}
	case 2816:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11994
		{
			yyVAL.list = nil
		}
	case 2817:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11995
		{
			yyVAL.list = yyDollar[4].list
		}
	case 2818:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11996
		{
			yyVAL.list = nil
		}
	case 2819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12000
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].typnam)
		}
	case 2820:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12001
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2821:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12012
		{
			yyVAL.stmt = ast.NewCreateOpFamilyStmt(yyDollar[4].list, yyDollar[6].str)
		}
	case 2822:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12025
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, false, yyDollar[8].list)
		}
	case 2823:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12029
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, true, yyDollar[8].list)
		}
	case 2824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12035
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2825:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12036
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2826:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12041
		{
			// Create ObjectWithArgs for operator with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, nil)
		}
	case 2827:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12047
		{
			// Create ObjectWithArgs for function with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, owa, nil)
		}
	case 2828:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12062
		{
			yyVAL.stmt = ast.NewCreateConversionStmt(yyDollar[4].list, yyDollar[6].str, yyDollar[8].str, yyDollar[10].list, yyDollar[2].bval)
		}
	case 2829:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12075
		{
			yyVAL.stmt = ast.NewCreateTransformStmt(yyDollar[2].bval, yyDollar[5].typnam, yyDollar[7].str, linitial(yyDollar[9].list), lsecond(yyDollar[9].list))
		}
	case 2830:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12082
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs)  // fromsql
			yyVAL.list.Append(yyDollar[11].objwithargs) // tosql
		}
	case 2831:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12088
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[11].objwithargs) // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs)  // tosql
		}
	case 2832:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12094
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs) // fromsql
			yyVAL.list.Append(nil)                     // tosql
		}
	case 2833:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12100
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(nil)                     // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs) // tosql
		}
	case 2834:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12115
		{
			// Parameterless CREATE LANGUAGE is now treated as CREATE EXTENSION
			yyVAL.stmt = ast.NewCreateExtensionStmt(yyDollar[6].str, yyDollar[2].bval, nil)
		}
	case 2835:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12121
		{
			yyVAL.stmt = ast.NewCreatePLangStmt(yyDollar[2].bval, yyDollar[6].str, yyDollar[8].list, yyDollar[9].list, yyDollar[10].list, yyDollar[3].bval)
		}
	case 2836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12127
		{
			yyVAL.bval = true
		}
	case 2837:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12128
		{
			yyVAL.bval = false
		}
	case 2838:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12133
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2839:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12134
		{
			yyVAL.list = nil
		}
	case 2840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12138
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2841:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12139
		{
			yyVAL.list = nil
		}
	case 2842:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12143
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2843:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12144
		{
			yyVAL.list = nil
		}
	case 2844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12147
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_ALL
		}
	case 2845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12148
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DISTINCT
		}
	case 2846:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12149
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DEFAULT
		}
	case 2847:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12154
		{
			yyVAL.groupClause = &ast.GroupClause{
				Distinct: yyDollar[3].setquant == ast.SET_QUANTIFIER_DISTINCT,
				List:     yyDollar[4].list,
			}
		}
	case 2848:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12161
		{
			yyVAL.groupClause = nil
		}
	case 2849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12167
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2850:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12168
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12172
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12173
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12174
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12175
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12176
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2856:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12181
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_EMPTY, ast.NewNodeList(), 0)
		}
	case 2857:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12188
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_ROLLUP, yyDollar[3].list, 0)
		}
	case 2858:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12195
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_CUBE, yyDollar[3].list, 0)
		}
	case 2859:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12202
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_SETS, yyDollar[4].list, 0)
		}
	case 2860:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12211
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2861:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12212
		{
			yyVAL.node = nil
		}
	case 2862:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12219
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12223
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2864:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12224
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2865:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12229
		{
			sortBy := ast.NewSortBy(yyDollar[1].node, ast.SORTBY_USING, ast.SortByNulls(yyDollar[4].ival), 0)
			// Use qual_all_Op (NodeList) directly for UseOp
			sortBy.UseOp = yyDollar[3].list
			yyVAL.node = sortBy
		}
	case 2866:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12236
		{
			yyVAL.node = ast.NewSortBy(yyDollar[1].node, ast.SortByDir(yyDollar[2].ival), ast.SortByNulls(yyDollar[3].ival), 0)
		}
	case 2867:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12247
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2868:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12249
		{
			yyVAL.list = nil
		}
	case 2869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12254
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[1].windef)
		}
	case 2870:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12259
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[3].windef)
		}
	case 2871:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12267
		{
			n := yyDollar[3].windef
			n.Name = yyDollar[1].str
			yyVAL.windef = n
		}
	case 2872:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12276
		{
			yyVAL.windef = yyDollar[2].windef
		}
	case 2873:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12278
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			yyVAL.windef = n
		}
	case 2874:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12285
		{
			yyVAL.windef = nil
		}
	case 2875:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12290
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.PartitionClause = yyDollar[3].list
			n.OrderClause = yyDollar[4].list

			n.FrameOptions = yyDollar[5].windef.FrameOptions
			n.StartOffset = yyDollar[5].windef.StartOffset
			n.EndOffset = yyDollar[5].windef.EndOffset
			yyVAL.windef = n
		}
	case 2876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12304
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2877:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12305
		{
			yyVAL.str = ""
		}
	case 2878:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12309
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2879:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12310
		{
			yyVAL.list = nil
		}
	case 2880:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12315
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_RANGE
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2881:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12322
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_ROWS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2882:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12329
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_GROUPS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2883:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12336
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12347
		{
			n := yyDollar[1].windef
			// reject invalid cases - these would be runtime errors in PostgreSQL
			if (n.FrameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (n.FrameOptions & ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 {
				yylex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			n.FrameOptions |= ast.FRAMEOPTION_END_CURRENT_ROW
			yyVAL.windef = n
		}
	case 2885:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12361
		{
			n1 := yyDollar[2].windef
			n2 := yyDollar[4].windef

			// form merged options
			frameOptions := n1.FrameOptions
			// shift converts START_ options to END_ options
			frameOptions |= (n2.FrameOptions << 1)
			frameOptions |= ast.FRAMEOPTION_BETWEEN

			// reject invalid cases
			if (frameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (frameOptions & ast.FRAMEOPTION_END_UNBOUNDED_PRECEDING) != 0 {
				yylex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_CURRENT_ROW) != 0 &&
				(frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 {
				yylex.Error("frame starting from current row cannot have preceding rows")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 &&
				((frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 ||
					(frameOptions&ast.FRAMEOPTION_END_CURRENT_ROW) != 0) {
				yylex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			n1.FrameOptions = frameOptions
			n1.EndOffset = n2.StartOffset
			yyVAL.windef = n1
		}
	case 2886:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12396
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_PRECEDING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2887:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12404
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2888:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12412
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_CURRENT_ROW
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2889:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12420
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_PRECEDING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2890:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12428
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_FOLLOWING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2891:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12438
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_CURRENT_ROW
		}
	case 2892:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12439
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_GROUP
		}
	case 2893:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12440
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_TIES
		}
	case 2894:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12441
		{
			yyVAL.ival = 0
		}
	case 2895:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12442
		{
			yyVAL.ival = 0
		}
	case 2896:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12451
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[2].node
		}
	case 2897:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12456
		{
			yyVAL.selectLimit = yyDollar[2].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[1].node
		}
	case 2898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12461
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12465
		{
			n := &selectLimit{}
			n.limitOffset = yyDollar[1].node
			n.limitCount = nil
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12475
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2901:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12476
		{
			yyVAL.selectLimit = nil
		}
	case 2902:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12481
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[2].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2903:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12489
		{
			// Disabled because it was too confusing - PostgreSQL error
			yylex.Error("LIMIT #,# syntax is not supported. Use separate LIMIT and OFFSET clauses.")
			return 1
		}
	case 2904:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12496
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2905:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12504
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2906:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12512
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2907:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12520
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2908:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12531
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2909:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12534
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12538
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12540
		{
			/* LIMIT ALL is represented as a NULL constant */
			yyVAL.node = ast.NewA_Const(ast.NewNull(), -1)
		}
	case 2912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12547
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12560
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2914:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12562
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("+")}}, nil, yyDollar[2].node, -1)
		}
	case 2915:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12566
		{
			// Create a unary minus expression
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("-")}}, nil, yyDollar[2].node, -1)
		}
	case 2916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12573
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), -1)
		}
	case 2917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12574
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), -1)
		}
	case 2918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12579
		{
			yyVAL.ival = 0
		}
	case 2919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12580
		{
			yyVAL.ival = 0
		}
	case 2920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12584
		{
			yyVAL.ival = 0
		}
	case 2921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12585
		{
			yyVAL.ival = 0
		}
	case 2922:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12598
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2923:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12604
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_START)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 2924:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12610
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2925:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12616
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2926:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12622
		{
			stmt := ast.NewSavepointStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 2927:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12627
		{
			stmt := ast.NewReleaseStmt(yyDollar[3].str)
			yyVAL.stmt = stmt
		}
	case 2928:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12632
		{
			stmt := ast.NewReleaseStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 2929:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12637
		{
			stmt := ast.NewRollbackToStmt(yyDollar[5].str)
			yyVAL.stmt = stmt
		}
	case 2930:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12642
		{
			stmt := ast.NewRollbackToStmt(yyDollar[4].str)
			yyVAL.stmt = stmt
		}
	case 2931:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12647
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_PREPARE)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2932:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12653
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2933:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12659
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2934:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12668
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2935:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12674
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_BEGIN)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 2936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12681
		{
		}
	case 2937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12682
		{
		}
	case 2938:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12683
		{
		}
	case 2939:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12687
		{
			yyVAL.bval = true
		}
	case 2940:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12688
		{
			yyVAL.bval = false
		}
	case 2941:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12689
		{
			yyVAL.bval = false
		}
	case 2942:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12702
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_ROLE, yyDollar[3].str, yyDollar[5].list)
		}
	case 2943:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12709
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_USER, yyDollar[3].str, yyDollar[5].list)
		}
	case 2944:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12716
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_GROUP, yyDollar[3].str, yyDollar[5].list)
		}
	case 2945:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12723
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 2946:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12729
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 2947:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12738
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2948:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12742
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2949:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12746
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2950:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12750
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2951:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12756
		{
			yyVAL.str = ""
		}
	case 2952:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12757
		{
			yyVAL.str = yyDollar[3].str
		}
	case 2953:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12762
		{
			options := ast.NewNodeList(ast.NewDefElem("rolemembers", yyDollar[6].list))
			stmt := ast.NewAlterRoleStmt(yyDollar[3].rolespec, options)
			stmt.Action = yyDollar[4].ival
			yyVAL.stmt = stmt
		}
	case 2954:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12772
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2955:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12776
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2956:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12780
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2957:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12784
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2958:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12788
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2959:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12792
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2960:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12800
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 2961:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12811
		{
			yyVAL.list = nil
		}
	case 2962:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12816
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 2963:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12827
		{
			yyVAL.list = nil
		}
	case 2964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12831
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2965:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12833
		{
			yyVAL.defelt = ast.NewDefElem("sysid", ast.NewInteger(yyDollar[2].ival))
		}
	case 2966:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12837
		{
			yyVAL.defelt = ast.NewDefElem("adminmembers", yyDollar[2].list)
		}
	case 2967:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12841
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 2968:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12845
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 2969:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12849
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 2970:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12856
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[2].str))
		}
	case 2971:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12860
		{
			yyVAL.defelt = ast.NewDefElem("password", nil)
		}
	case 2972:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12864
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[3].str))
		}
	case 2973:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12868
		{
			yylex.Error("UNENCRYPTED PASSWORD is no longer supported")
			return 1
		}
	case 2974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12873
		{
			yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(true))
		}
	case 2975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12877
		{
			// Handle identifiers like PostgreSQL does with string comparisons
			if yyDollar[1].str == "superuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nosuperuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createrole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreaterole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createdb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreatedb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(false))
			} else if yyDollar[1].str == "login" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nologin" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(false))
			} else if yyDollar[1].str == "replication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(true))
			} else if yyDollar[1].str == "noreplication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(false))
			} else if yyDollar[1].str == "bypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nobypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(false))
			} else if yyDollar[1].str == "noinherit" {
				yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(false))
			} else {
				// Return error for unrecognized role option
				yylex.Error("unrecognized role option \"" + yyDollar[1].str + "\"")
				yyVAL.defelt = nil
			}
		}
	case 2976:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12912
		{
			yyVAL.defelt = ast.NewDefElem("connectionlimit", ast.NewInteger(yyDollar[3].ival))
		}
	case 2977:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12916
		{
			yyVAL.defelt = ast.NewDefElem("validUntil", ast.NewString(yyDollar[3].str))
		}
	case 2978:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12920
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 2979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12926
		{
			yyVAL.ival = 1
		}
	case 2980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12927
		{
			yyVAL.ival = -1
		}
	case 2981:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12939
		{
			n := ast.NewGrantStmt(yyDollar[4].privtarget.objtype, yyDollar[4].privtarget.objs, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = yyDollar[4].privtarget.targtype
			n.GrantOption = yyDollar[7].bval
			n.Grantor = yyDollar[8].rolespec
			yyVAL.stmt = n
		}
	case 2982:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12951
		{
			n := ast.NewRevokeStmt(yyDollar[4].privtarget.objtype, yyDollar[4].privtarget.objs, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = yyDollar[4].privtarget.targtype
			n.Grantor = yyDollar[7].rolespec
			n.Behavior = yyDollar[8].dropBehav
			yyVAL.stmt = n
		}
	case 2983:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12960
		{
			n := ast.NewRevokeStmt(yyDollar[7].privtarget.objtype, yyDollar[7].privtarget.objs, yyDollar[5].list, yyDollar[9].list)
			n.Targtype = yyDollar[7].privtarget.targtype
			n.GrantOption = true
			n.Grantor = yyDollar[10].rolespec
			n.Behavior = yyDollar[11].dropBehav
			yyVAL.stmt = n
		}
	case 2984:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12972
		{
			stmt := ast.NewGrantRoleStmt(yyDollar[2].list, yyDollar[4].list)
			stmt.Grantor = yyDollar[5].rolespec
			yyVAL.stmt = stmt
		}
	case 2985:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12978
		{
			stmt := ast.NewGrantRoleStmtWithOptions(yyDollar[2].list, yyDollar[4].list, yyDollar[6].list)
			stmt.Grantor = yyDollar[7].rolespec
			yyVAL.stmt = stmt
		}
	case 2986:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12987
		{
			stmt := ast.NewRevokeRoleStmt(yyDollar[2].list, yyDollar[4].list)
			stmt.Grantor = yyDollar[5].rolespec
			stmt.Behavior = yyDollar[6].dropBehav
			yyVAL.stmt = stmt
		}
	case 2987:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:12994
		{
			opt := ast.NewDefElem(yyDollar[2].str, ast.NewBoolean(false))
			stmt := ast.NewRevokeRoleStmt(yyDollar[5].list, yyDollar[7].list)
			stmt.Opt = &ast.NodeList{Items: []ast.Node{opt}}
			stmt.Grantor = yyDollar[8].rolespec
			stmt.Behavior = yyDollar[9].dropBehav
			yyVAL.stmt = stmt
		}
	case 2988:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13013
		{
			yyVAL.stmt = ast.NewAlterDefaultPrivilegesStmt(yyDollar[4].list, yyDollar[5].node.(*ast.GrantStmt))
		}
	case 2989:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13019
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2990:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13020
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2991:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13025
		{
			yyVAL.defelt = ast.NewDefElem("schemas", yyDollar[3].list)
		}
	case 2992:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13029
		{
			yyVAL.defelt = ast.NewDefElem("roles", yyDollar[3].list)
		}
	case 2993:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13033
		{
			yyVAL.defelt = ast.NewDefElem("roles", yyDollar[3].list)
		}
	case 2994:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13045
		{
			n := ast.NewGrantStmt(ast.ObjectType(yyDollar[4].ival), nil, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.GrantOption = yyDollar[7].bval
			yyVAL.node = n
		}
	case 2995:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13053
		{
			n := ast.NewRevokeStmt(ast.ObjectType(yyDollar[4].ival), nil, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.Behavior = yyDollar[7].dropBehav
			yyVAL.node = n
		}
	case 2996:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:13061
		{
			n := ast.NewRevokeStmt(ast.ObjectType(yyDollar[7].ival), nil, yyDollar[5].list, yyDollar[9].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.GrantOption = true
			n.Behavior = yyDollar[10].dropBehav
			yyVAL.node = n
		}
	case 2997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13071
		{
			yyVAL.ival = int(ast.OBJECT_TABLE)
		}
	case 2998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13072
		{
			yyVAL.ival = int(ast.OBJECT_FUNCTION)
		}
	case 2999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13073
		{
			yyVAL.ival = int(ast.OBJECT_FUNCTION)
		}
	case 3000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13074
		{
			yyVAL.ival = int(ast.OBJECT_SEQUENCE)
		}
	case 3001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13075
		{
			yyVAL.ival = int(ast.OBJECT_TYPE)
		}
	case 3002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13076
		{
			yyVAL.ival = int(ast.OBJECT_SCHEMA)
		}
	case 3003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13081
		{
			yyVAL.list = yyDollar[1].list
		}
	case 3004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13083
		{
			yyVAL.list = nil
		}
	case 3005:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13085
		{
			yyVAL.list = nil
		}
	case 3006:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13087
		{
			ap := ast.NewAccessPriv("", yyDollar[3].list)
			yyVAL.list = ast.NewNodeList(ap)
		}
	case 3007:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13092
		{
			ap := ast.NewAccessPriv("", yyDollar[4].list)
			yyVAL.list = ast.NewNodeList(ap)
		}
	case 3008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13098
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].accesspriv)
		}
	case 3009:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13099
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].accesspriv)
			yyVAL.list = yyDollar[1].list
		}
	case 3010:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13103
		{
			yyVAL.accesspriv = ast.NewAccessPriv("SELECT", yyDollar[2].list)
		}
	case 3011:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13107
		{
			yyVAL.accesspriv = ast.NewAccessPriv("REFERENCES", yyDollar[2].list)
		}
	case 3012:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13111
		{
			yyVAL.accesspriv = ast.NewAccessPriv("CREATE", yyDollar[2].list)
		}
	case 3013:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13115
		{
			yyVAL.accesspriv = ast.NewAccessPriv("ALTER SYSTEM", nil)
		}
	case 3014:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13119
		{
			yyVAL.accesspriv = ast.NewAccessPriv(yyDollar[1].str, yyDollar[2].list)
		}
	case 3015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13129
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[1].list,
			}
		}
	case 3016:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13137
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[2].list,
			}
		}
	case 3017:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13145
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_SEQUENCE,
				objs:     yyDollar[2].list,
			}
		}
	case 3018:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13153
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FDW,
				objs:     yyDollar[4].list,
			}
		}
	case 3019:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13161
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FOREIGN_SERVER,
				objs:     yyDollar[3].list,
			}
		}
	case 3020:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13169
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FUNCTION,
				objs:     yyDollar[2].list,
			}
		}
	case 3021:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13177
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_PROCEDURE,
				objs:     yyDollar[2].list,
			}
		}
	case 3022:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13185
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_ROUTINE,
				objs:     yyDollar[2].list,
			}
		}
	case 3023:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13193
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_DATABASE,
				objs:     yyDollar[2].list,
			}
		}
	case 3024:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13201
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_DOMAIN,
				objs:     yyDollar[2].list,
			}
		}
	case 3025:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13209
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_LANGUAGE,
				objs:     yyDollar[2].list,
			}
		}
	case 3026:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13217
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_LARGEOBJECT,
				objs:     yyDollar[3].list,
			}
		}
	case 3027:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13225
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_PARAMETER_ACL,
				objs:     yyDollar[2].list,
			}
		}
	case 3028:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13233
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_SCHEMA,
				objs:     yyDollar[2].list,
			}
		}
	case 3029:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13241
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLESPACE,
				objs:     yyDollar[2].list,
			}
		}
	case 3030:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13249
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TYPE,
				objs:     yyDollar[2].list,
			}
		}
	case 3031:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13257
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[5].list,
			}
		}
	case 3032:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13265
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_SEQUENCE,
				objs:     yyDollar[5].list,
			}
		}
	case 3033:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13273
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_FUNCTION,
				objs:     yyDollar[5].list,
			}
		}
	case 3034:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13281
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_PROCEDURE,
				objs:     yyDollar[5].list,
			}
		}
	case 3035:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13289
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_ROUTINE,
				objs:     yyDollar[5].list,
			}
		}
	case 3036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13300
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rolespec)
		}
	case 3037:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13301
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 3038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13305
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 3039:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13306
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 3040:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13311
		{
			yyVAL.bval = true
		}
	case 3041:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13312
		{
			yyVAL.bval = false
		}
	case 3042:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13316
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13317
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3044:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13322
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 3045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13328
		{
			yyVAL.node = ast.NewBoolean(true)
		}
	case 3046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13329
		{
			yyVAL.node = ast.NewBoolean(true)
		}
	case 3047:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13330
		{
			yyVAL.node = ast.NewBoolean(false)
		}
	case 3048:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13333
		{
			yyVAL.rolespec = yyDollar[3].rolespec
		}
	case 3049:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13334
		{
			yyVAL.rolespec = nil
		}
	case 3050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13339
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 3051:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13343
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 3052:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13351
		{
			yyVAL.str = yyDollar[1].str
		}
	case 3053:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13355
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 3054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13360
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 3055:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13361
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 3056:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13365
		{
			n := ast.NewRangeTableSample(nil, yyDollar[2].list, yyDollar[4].list, yyDollar[6].node, 0)
			yyVAL.node = n
		}
	case 3057:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13373
		{
			yyVAL.node = yyDollar[3].node
		}
	case 3058:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13377
		{
			yyVAL.node = nil
		}
	case 3059:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13391
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_FUNCTION, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 3060:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13396
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_PROCEDURE, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 3061:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13401
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_ROUTINE, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 3062:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13409
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3063:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13410
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3064:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13416
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(false))
		}
	case 3065:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13420
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 3066:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13424
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 3067:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13428
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("immutable"))
		}
	case 3068:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13432
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("stable"))
		}
	case 3069:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13436
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("volatile"))
		}
	case 3070:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13440
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 3071:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13444
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 3072:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13448
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 3073:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13452
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 3074:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13456
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(true))
		}
	case 3075:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13460
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(false))
		}
	case 3076:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13464
		{
			yyVAL.defelt = ast.NewDefElem("cost", yyDollar[2].node)
		}
	case 3077:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13468
		{
			yyVAL.defelt = ast.NewDefElem("rows", yyDollar[2].node)
		}
	case 3078:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13472
		{
			yyVAL.defelt = ast.NewDefElem("support", yyDollar[2].list)
		}
	case 3079:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13476
		{
			/* we abuse the normal content of a DefElem here */
			yyVAL.defelt = ast.NewDefElem("set", yyDollar[1].vsetstmt)
		}
	case 3080:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13481
		{
			yyVAL.defelt = ast.NewDefElem("parallel", ast.NewString(yyDollar[2].str))
		}
	case 3081:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13487
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3082:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13488
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3083:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13493
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 3084:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13497
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 3085:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13501
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 3086:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13507
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 3087:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13508
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 3088:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13509
		{
			yyVAL.node = yyDollar[1].list
		}
	case 3089:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13510
		{
			yyVAL.node = yyDollar[1].node
		}
	case 3090:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13511
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 3093:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13522
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = yyDollar[1].list
			n.Objargs = ast.ExtractArgTypes(yyDollar[2].list)
			n.ObjfuncArgs = yyDollar[2].list
			yyVAL.objwithargs = n
		}
	case 3094:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13535
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = ast.NewNodeList(ast.NewString(yyDollar[1].str))
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3095:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13542
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = ast.NewNodeList(ast.NewString(yyDollar[1].str))
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3096:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13549
		{
			n := ast.NewEmptyObjectWithArgs()
			nameList := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			// Append indirection elements
			for i := 0; i < yyDollar[2].list.Len(); i++ {
				nameList.Append(yyDollar[2].list.Items[i])
			}
			n.Objname = nameList
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3097:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13563
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 3098:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13565
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 3099:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13577
		{
			n := ast.NewAlterTypeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 3100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13585
		{
			relation, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error("invalid type name")
				return 1
			}
			n := ast.NewAlterTableStmt(relation, yyDollar[4].list)
			n.Objtype = ast.OBJECT_TYPE // Mark this as a composite type alteration
			yyVAL.stmt = n
		}
	case 3101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13598
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 3102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13599
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 3103:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13605
		{
			n := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			n.Behavior = yyDollar[4].dropBehav
			yyVAL.node = n
		}
	case 3104:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13612
		{
			n := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			yyVAL.node = n
		}
	case 3105:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13620
		{
			n := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			yyVAL.node = n
		}
	case 3106:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:13628
		{
			def := ast.NewColumnDef(yyDollar[3].str, yyDollar[6].typnam, -1)
			n := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, def)
			n.Behavior = yyDollar[8].dropBehav
			/* We only use these fields of the ColumnDef node */
			def.TypeName = yyDollar[6].typnam
			if collClause, ok := yyDollar[7].node.(*ast.CollateClause); ok {
				def.Collclause = collClause
			}
			def.RawDefault = nil
			yyVAL.node = n
		}
	case 3107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13649
		{
			yyVAL.ival = int(ast.CMD_SELECT)
		}
	case 3108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13650
		{
			yyVAL.ival = int(ast.CMD_UPDATE)
		}
	case 3109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13651
		{
			yyVAL.ival = int(ast.CMD_DELETE)
		}
	case 3110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13652
		{
			yyVAL.ival = int(ast.CMD_INSERT)
		}
	case 3111:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13662
		{
			yyVAL.stmt = ast.NewDeclareCursorStmt(yyDollar[2].str, yyDollar[3].ival|yyDollar[5].ival|ast.CURSOR_OPT_FAST_PLAN, yyDollar[7].stmt)
		}
	case 3112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13669
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_BINARY
		}
	case 3113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13673
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_INSENSITIVE
		}
	case 3114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13677
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_ASENSITIVE
		}
	case 3115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13681
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_SCROLL
		}
	case 3116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13685
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_NO_SCROLL
		}
	case 3117:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13688
		{
			yyVAL.ival = 0
		}
	case 3118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13691
		{
			yyVAL.ival = ast.CURSOR_OPT_HOLD
		}
	case 3119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13692
		{
			yyVAL.ival = 0
		}
	case 3120:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13693
		{
			yyVAL.ival = 0
		}
	case 3121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13697
		{
			stmt := yyDollar[2].stmt.(*ast.FetchStmt)
			stmt.IsMove = false
			yyVAL.stmt = stmt
		}
	case 3122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13703
		{
			stmt := yyDollar[2].stmt.(*ast.FetchStmt)
			stmt.IsMove = true
			yyVAL.stmt = stmt
		}
	case 3123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13711
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[1].str, false)
		}
	case 3124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13715
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[2].str, false)
		}
	case 3125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13719
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[3].str, false)
		}
	case 3126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13723
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, 1, yyDollar[3].str, false)
		}
	case 3127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13727
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_ABSOLUTE, 1, yyDollar[3].str, false)
		}
	case 3128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13731
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_ABSOLUTE, -1, yyDollar[3].str, false)
		}
	case 3129:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13735
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_ABSOLUTE, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13739
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_RELATIVE, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13743
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, int64(yyDollar[1].ival), yyDollar[3].str, false)
		}
	case 3132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13747
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, ast.FETCH_ALL, yyDollar[3].str, false)
		}
	case 3133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13751
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[3].str, false)
		}
	case 3134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13755
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3135:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13759
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, ast.FETCH_ALL, yyDollar[4].str, false)
		}
	case 3136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13763
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, 1, yyDollar[3].str, false)
		}
	case 3137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13767
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13771
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, ast.FETCH_ALL, yyDollar[4].str, false)
		}
	case 3139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13776
		{
			yyVAL.ival = 0
		}
	case 3140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13777
		{
			yyVAL.ival = 0
		}
	case 3141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13781
		{
			yyVAL.ival = 0
		}
	case 3142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13782
		{
			yyVAL.ival = 0
		}
	case 3143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13787
		{
			name := yyDollar[2].str
			yyVAL.stmt = ast.NewClosePortalStmt(&name)
		}
	case 3144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13792
		{
			yyVAL.stmt = ast.NewClosePortalStmt(nil)
		}
	case 3145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13804
		{
			yyVAL.stmt = ast.NewPrepareStmt(yyDollar[2].str, yyDollar[3].list, yyDollar[5].stmt)
		}
	case 3146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13811
		{
			yyVAL.list = yyDollar[2].list
		}
	case 3147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13814
		{
			yyVAL.list = nil
		}
	case 3148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13818
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13819
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13820
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13821
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13822
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13826
		{
			yyVAL.stmt = ast.NewExecuteStmt(yyDollar[2].str, yyDollar[3].list)
		}
	case 3154:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:13830
		{
			executeStmt := ast.NewExecuteStmt(yyDollar[7].str, yyDollar[8].list)
			ctas := ast.NewCreateTableAsStmt(executeStmt, yyDollar[4].into, ast.OBJECT_TABLE, false, false)
			// Set relpersistence from OptTemp (following PostgreSQL pattern)
			yyDollar[4].into.Rel.RelPersistence = yyDollar[2].rune
			// Set skipData from opt_with_data (following PostgreSQL pattern)
			yyDollar[4].into.SkipData = !yyDollar[9].bval
			yyVAL.stmt = ctas
		}
	case 3155:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:13840
		{
			executeStmt := ast.NewExecuteStmt(yyDollar[10].str, yyDollar[11].list)
			ctas := ast.NewCreateTableAsStmt(executeStmt, yyDollar[7].into, ast.OBJECT_TABLE, false, true)
			// Set relpersistence from OptTemp (following PostgreSQL pattern)
			yyDollar[7].into.Rel.RelPersistence = yyDollar[2].rune
			// Set skipData from opt_with_data (following PostgreSQL pattern)
			yyDollar[7].into.SkipData = !yyDollar[12].bval
			yyVAL.stmt = ctas
		}
	case 3156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13853
		{
			yyVAL.list = yyDollar[2].list
		}
	case 3157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13856
		{
			yyVAL.list = nil
		}
	case 3158:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13862
		{
			into := ast.NewIntoClause(yyDollar[1].rangevar, yyDollar[2].list, yyDollar[3].str, yyDollar[4].list, yyDollar[5].oncommit, yyDollar[6].str, nil, false, 0)
			yyVAL.into = into
		}
	case 3159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13870
		{
			yyVAL.stmt = ast.NewDeallocateStmt(yyDollar[2].str)
		}
	case 3160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13874
		{
			yyVAL.stmt = ast.NewDeallocateStmt(yyDollar[3].str)
		}
	case 3161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13878
		{
			yyVAL.stmt = ast.NewDeallocateAllStmt()
		}
	case 3162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13882
		{
			yyVAL.stmt = ast.NewDeallocateAllStmt()
		}
	case 3163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13893
		{
			yyVAL.stmt = ast.NewListenStmt(yyDollar[2].str)
		}
	case 3164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13904
		{
			yyVAL.stmt = ast.NewUnlistenStmt(yyDollar[2].str)
		}
	case 3165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13908
		{
			yyVAL.stmt = ast.NewUnlistenAllStmt()
		}
	case 3166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13919
		{
			yyVAL.stmt = ast.NewNotifyStmt(yyDollar[2].str, yyDollar[3].str)
		}
	case 3167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13929
		{
			yyVAL.str = yyDollar[2].str
		}
	case 3168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13930
		{
			yyVAL.str = ""
		}
	case 3169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13939
		{
			yyVAL.stmt = ast.NewLoadStmt(yyDollar[2].str)
		}
	case 3170:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13950
		{
			stmt := ast.NewLockStmt(yyDollar[3].list, ast.LockMode(yyDollar[4].ival))
			stmt.Nowait = yyDollar[5].bval
			yyVAL.stmt = stmt
		}
	case 3171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13962
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 3172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13963
		{
			yyVAL.ival = int(ast.AccessExclusiveLock)
		}
	case 3173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13967
		{
			yyVAL.ival = int(ast.AccessShareLock)
		}
	case 3174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13968
		{
			yyVAL.ival = int(ast.RowShareLock)
		}
	case 3175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13969
		{
			yyVAL.ival = int(ast.RowExclusiveLock)
		}
	case 3176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13970
		{
			yyVAL.ival = int(ast.ShareUpdateExclusiveLock)
		}
	case 3177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13971
		{
			yyVAL.ival = int(ast.ShareLock)
		}
	case 3178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13972
		{
			yyVAL.ival = int(ast.ShareRowExclusiveLock)
		}
	case 3179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13973
		{
			yyVAL.ival = int(ast.ExclusiveLock)
		}
	case 3180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13974
		{
			yyVAL.ival = int(ast.AccessExclusiveLock)
		}
	case 3181:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13983
		{
			stmt := ast.NewTruncateStmt(yyDollar[3].list)
			stmt.RestartSeqs = yyDollar[4].bval
			stmt.Behavior = yyDollar[5].dropBehav
			yyVAL.stmt = stmt
		}
	case 3182:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13997
		{
			yyVAL.stmt = ast.NewCommentStmt(yyDollar[3].objType, yyDollar[4].list, yyDollar[6].str)
		}
	case 3183:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14001
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_COLUMN, yyDollar[4].list, yyDollar[6].str)
		}
	case 3184:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14005
		{
			yyVAL.stmt = ast.NewCommentStmt(yyDollar[3].objType, ast.NewString(yyDollar[4].str), yyDollar[6].str)
		}
	case 3185:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14009
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_TYPE, yyDollar[4].typnam, yyDollar[6].str)
		}
	case 3186:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14013
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_DOMAIN, yyDollar[4].typnam, yyDollar[6].str)
		}
	case 3187:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14017
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_AGGREGATE, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3188:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14021
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_FUNCTION, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3189:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14025
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_OPERATOR, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3190:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14029
		{
			// For table constraints, append constraint name to table name list
			newObj := yyDollar[6].list
			newObj.Append(ast.NewString(yyDollar[4].str))
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_TABCONSTRAINT, newObj, yyDollar[8].str)
		}
	case 3191:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14036
		{
			// For domain constraints, we need a list of [TypeName, constraint_name]
			// This matches PostgreSQL's approach where they comment:
			// "should use Typename not any_name in the production, but
			// there's a shift/reduce conflict if we do that, so fix it up here."
			objList := ast.NewNodeList()
			objList.Append(makeTypeNameFromNodeList(yyDollar[7].list)) // Convert any_name to TypeName
			objList.Append(ast.NewString(yyDollar[4].str))             // Add constraint name
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_DOMCONSTRAINT, objList, yyDollar[9].str)
		}
	case 3192:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14047
		{
			// For object types that need name ON any_name: append name to any_name list
			newObj := yyDollar[6].list
			newObj.Append(ast.NewString(yyDollar[4].str))
			yyVAL.stmt = ast.NewCommentStmt(yyDollar[3].objType, newObj, yyDollar[8].str)
		}
	case 3193:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14054
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_PROCEDURE, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3194:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14058
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_ROUTINE, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3195:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14062
		{
			// Transform: typename + language name
			transformObj := ast.NewNodeList()
			transformObj.Append(yyDollar[5].typnam)             // Typename
			transformObj.Append(ast.NewString(yyDollar[7].str)) // Language name
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_TRANSFORM, transformObj, yyDollar[9].str)
		}
	case 3196:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14070
		{
			// Operator class: access method + class name
			opclassObj := ast.NewNodeList()
			opclassObj.Append(ast.NewString(yyDollar[7].str)) // Access method name first
			for _, item := range yyDollar[5].list.Items {
				opclassObj.Append(item) // Class name parts
			}
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_OPCLASS, opclassObj, yyDollar[9].str)
		}
	case 3197:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14080
		{
			// Operator family: access method + family name
			opfamilyObj := ast.NewNodeList()
			opfamilyObj.Append(ast.NewString(yyDollar[7].str)) // Access method name first
			for _, item := range yyDollar[5].list.Items {
				opfamilyObj.Append(item) // Family name parts
			}
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_OPFAMILY, opfamilyObj, yyDollar[9].str)
		}
	case 3198:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14090
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_LARGEOBJECT, yyDollar[5].node, yyDollar[7].str)
		}
	case 3199:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:14094
		{
			// Cast: source type + target type
			castObj := ast.NewNodeList()
			castObj.Append(yyDollar[5].typnam) // Source typename
			castObj.Append(yyDollar[7].typnam) // Target typename
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_CAST, castObj, yyDollar[10].str)
		}
	case 3200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14108
		{
			yyVAL.str = yyDollar[1].str
		}
	case 3201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14109
		{
			yyVAL.str = ""
		}
	case 3202:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14118
		{
			yyVAL.stmt = ast.NewSecLabelStmt(yyDollar[5].objType, yyDollar[6].list, yyDollar[3].str, yyDollar[8].str)
		}
	case 3203:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14122
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_COLUMN, yyDollar[6].list, yyDollar[3].str, yyDollar[8].str)
		}
	case 3204:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14126
		{
			yyVAL.stmt = ast.NewSecLabelStmt(yyDollar[5].objType, ast.NewString(yyDollar[6].str), yyDollar[3].str, yyDollar[8].str)
		}
	case 3205:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14130
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_TYPE, yyDollar[6].typnam, yyDollar[3].str, yyDollar[8].str)
		}
	case 3206:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14134
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_DOMAIN, yyDollar[6].typnam, yyDollar[3].str, yyDollar[8].str)
		}
	case 3207:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14138
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_AGGREGATE, yyDollar[6].objwithargs, yyDollar[3].str, yyDollar[8].str)
		}
	case 3208:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14142
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_FUNCTION, yyDollar[6].objwithargs, yyDollar[3].str, yyDollar[8].str)
		}
	case 3209:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14146
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_LARGEOBJECT, yyDollar[7].node, yyDollar[3].str, yyDollar[9].str)
		}
	case 3210:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14150
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_PROCEDURE, yyDollar[6].objwithargs, yyDollar[3].str, yyDollar[8].str)
		}
	case 3211:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14154
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_ROUTINE, yyDollar[6].objwithargs, yyDollar[3].str, yyDollar[8].str)
		}
	case 3212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14164
		{
			yyVAL.str = yyDollar[2].str
		}
	case 3213:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14165
		{
			yyVAL.str = ""
		}
	case 3214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14169
		{
			yyVAL.str = yyDollar[1].str
		}
	case 3215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14170
		{
			yyVAL.str = ""
		}
	case 3216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14179
		{
			yyVAL.stmt = ast.NewDoStmt(yyDollar[2].list)
		}
	case 3217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14189
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14190
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Append(yyDollar[2].defelt)
		}
	case 3219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14195
		{
			yyVAL.defelt = ast.NewDefElem("as", ast.NewString(yyDollar[1].str))
		}
	case 3220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14199
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 3221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14210
		{
			yyVAL.stmt = ast.NewCallStmt(yyDollar[2].node.(*ast.FuncCall))
		}
	case 3222:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14223
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_AGGREGATE, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3223:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14230
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_COLLATION, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3224:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14237
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_CONVERSION, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3225:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14244
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_DOMAIN, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3226:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14251
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_EXTENSION, yyDollar[6].str)
			stmt.Object = ast.NewString(yyDollar[3].str)
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3227:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14258
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_FUNCTION, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3228:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14265
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_OPERATOR, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3229:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14272
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_OPCLASS, yyDollar[9].str)
			// Create list with access method name first, then class name
			objList := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				objList.Append(item)
			}
			stmt.Object = objList
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3230:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14284
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_OPFAMILY, yyDollar[9].str)
			// Create list with access method name first, then family name
			objList := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				objList.Append(item)
			}
			stmt.Object = objList
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3231:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14296
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_PROCEDURE, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3232:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14303
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_ROUTINE, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3233:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14310
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TABLE, yyDollar[6].str)
			stmt.Relation = yyDollar[3].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3234:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14317
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TABLE, yyDollar[8].str)
			stmt.Relation = yyDollar[5].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3235:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14324
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_STATISTIC_EXT, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3236:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14331
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TSPARSER, yyDollar[8].str)
			stmt.Object = yyDollar[5].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3237:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14338
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TSDICTIONARY, yyDollar[8].str)
			stmt.Object = yyDollar[5].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3238:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14345
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TSTEMPLATE, yyDollar[8].str)
			stmt.Object = yyDollar[5].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3239:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14352
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TSCONFIGURATION, yyDollar[8].str)
			stmt.Object = yyDollar[5].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3240:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14359
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_SEQUENCE, yyDollar[6].str)
			stmt.Relation = yyDollar[3].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3241:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14366
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_SEQUENCE, yyDollar[8].str)
			stmt.Relation = yyDollar[5].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3242:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14373
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_VIEW, yyDollar[6].str)
			stmt.Relation = yyDollar[3].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3243:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14380
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_VIEW, yyDollar[8].str)
			stmt.Relation = yyDollar[5].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3244:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14387
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_MATVIEW, yyDollar[7].str)
			stmt.Relation = yyDollar[4].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3245:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14394
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_MATVIEW, yyDollar[9].str)
			stmt.Relation = yyDollar[6].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3246:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14401
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_FOREIGN_TABLE, yyDollar[7].str)
			stmt.Relation = yyDollar[4].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3247:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14408
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_FOREIGN_TABLE, yyDollar[9].str)
			stmt.Relation = yyDollar[6].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3248:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14415
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TYPE, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3249:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14431
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3250:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14440
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3251:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14449
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3252:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14458
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_DATABASE,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3253:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14467
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3254:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14476
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3255:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14485
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newowner:   yyDollar[7].rolespec,
			}
		}
	case 3256:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14494
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_LARGEOBJECT,
				Object:     yyDollar[4].node,
				Newowner:   yyDollar[7].rolespec,
			}
		}
	case 3257:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14503
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_OPERATOR,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3258:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14512
		{
			list := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newowner:   yyDollar[9].rolespec,
			}
		}
	case 3259:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14525
		{
			list := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newowner:   yyDollar[9].rolespec,
			}
		}
	case 3260:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14538
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3261:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14547
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3262:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14556
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_SCHEMA,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3263:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14565
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3264:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14574
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_TABLESPACE,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3265:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14583
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3266:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14592
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newowner:   yyDollar[8].rolespec,
			}
		}
	case 3267:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14601
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newowner:   yyDollar[8].rolespec,
			}
		}
	case 3268:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14610
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newowner:   yyDollar[8].rolespec,
			}
		}
	case 3269:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14619
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3270:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14628
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newowner:   yyDollar[7].rolespec,
			}
		}
	case 3271:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14637
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3272:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14646
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3273:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14664
		{
			yyVAL.stmt = ast.NewAlterOperatorStmt(yyDollar[3].objwithargs, yyDollar[6].list)
		}
	case 3274:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14677
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_FUNCTION, ast.NewString(yyDollar[8].str), yyDollar[4].bval)
			stmt.Object = yyDollar[3].objwithargs
			yyVAL.stmt = stmt
		}
	case 3275:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14683
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_PROCEDURE, ast.NewString(yyDollar[8].str), yyDollar[4].bval)
			stmt.Object = yyDollar[3].objwithargs
			yyVAL.stmt = stmt
		}
	case 3276:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14689
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_ROUTINE, ast.NewString(yyDollar[8].str), yyDollar[4].bval)
			stmt.Object = yyDollar[3].objwithargs
			yyVAL.stmt = stmt
		}
	case 3277:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:14695
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_TRIGGER, ast.NewString(yyDollar[10].str), yyDollar[6].bval)
			stmt.Relation = yyDollar[5].rangevar
			stmt.Object = ast.NewString(yyDollar[3].str)
			yyVAL.stmt = stmt
		}
	case 3278:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14702
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_MATVIEW, ast.NewString(yyDollar[9].str), yyDollar[5].bval)
			stmt.Relation = yyDollar[4].rangevar
			yyVAL.stmt = stmt
		}
	case 3279:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14708
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_INDEX, ast.NewString(yyDollar[8].str), yyDollar[4].bval)
			stmt.Relation = yyDollar[3].rangevar
			yyVAL.stmt = stmt
		}
	case 3280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14715
		{
			yyVAL.bval = true
		}
	case 3281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14716
		{
			yyVAL.bval = false
		}
	case 3282:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:14727
		{
			yyVAL.stmt = ast.NewAlterCollationStmt(yyDollar[3].list)
		}
	case 3283:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:14740
		{
			yyVAL.stmt = ast.NewAlterDatabaseStmt(yyDollar[3].str, yyDollar[5].list)
		}
	case 3284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14744
		{
			yyVAL.stmt = ast.NewAlterDatabaseStmt(yyDollar[3].str, yyDollar[4].list)
		}
	case 3285:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14748
		{
			optList := ast.NewNodeList()
			optList.Append(ast.NewDefElem("tablespace", ast.NewString(yyDollar[6].str)))
			yyVAL.stmt = ast.NewAlterDatabaseStmt(yyDollar[3].str, optList)
		}
	case 3286:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14754
		{
			yyVAL.stmt = ast.NewAlterDatabaseRefreshCollStmt(yyDollar[3].str)
		}
	case 3287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14760
		{
			yyVAL.list = yyDollar[1].list
		}
	case 3288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14761
		{
			yyVAL.list = nil
		}
	case 3289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14765
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14766
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14771
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, ast.NewInteger(yyDollar[3].ival))
		}
	case 3292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14775
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, ast.NewString(yyDollar[3].str))
		}
	case 3293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14779
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 3294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14785
		{
			yyVAL.str = yyDollar[1].str
		}
	case 3295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14786
		{
			yyVAL.str = "connection_limit"
		}
	case 3296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14787
		{
			yyVAL.str = "encoding"
		}
	case 3297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14788
		{
			yyVAL.str = "location"
		}
	case 3298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14789
		{
			yyVAL.str = "owner"
		}
	case 3299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14790
		{
			yyVAL.str = "tablespace"
		}
	case 3300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14791
		{
			yyVAL.str = "template"
		}
	case 3301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14794
		{
		}
	case 3302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14795
		{
		}
	case 3303:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14800
		{
			yyVAL.stmt = ast.NewAlterDatabaseSetStmt(yyDollar[3].str, yyDollar[4].vsetstmt)
		}
	case 3304:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:14813
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_ADD_MAPPING, yyDollar[5].list)
			stmt.Tokentype = yyDollar[9].list
			stmt.Dicts = yyDollar[11].list
			stmt.Override = false
			stmt.Replace = false
			yyVAL.stmt = stmt
		}
	case 3305:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:14822
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN, yyDollar[5].list)
			stmt.Tokentype = yyDollar[9].list
			stmt.Dicts = yyDollar[11].list
			stmt.Override = true
			stmt.Replace = false
			yyVAL.stmt = stmt
		}
	case 3306:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:14831
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_REPLACE_DICT, yyDollar[5].list)
			stmt.Tokentype = nil
			// Create a list with two elements: old dict and new dict
			stmt.Dicts = ast.NewNodeList()
			stmt.Dicts.Append(yyDollar[9].list)
			stmt.Dicts.Append(yyDollar[11].list)
			stmt.Override = false
			stmt.Replace = true
			yyVAL.stmt = stmt
		}
	case 3307:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:14843
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN, yyDollar[5].list)
			stmt.Tokentype = yyDollar[9].list
			// Create a list with two elements: old dict and new dict
			stmt.Dicts = ast.NewNodeList()
			stmt.Dicts.Append(yyDollar[11].list)
			stmt.Dicts.Append(yyDollar[13].list)
			stmt.Override = false
			stmt.Replace = true
			yyVAL.stmt = stmt
		}
	case 3308:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14855
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_DROP_MAPPING, yyDollar[5].list)
			stmt.Tokentype = yyDollar[9].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3309:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:14862
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_DROP_MAPPING, yyDollar[5].list)
			stmt.Tokentype = yyDollar[11].list
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3312:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14883
		{
			yyVAL.stmt = ast.NewAlterTSDictionaryStmt(yyDollar[5].list, yyDollar[6].list)
		}
	case 3313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14893
		{
			yyVAL.bval = false
		}
	case 3314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14894
		{
			yyVAL.bval = true
		}
	case 3315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14895
		{
			yyVAL.bval = false
		}
	}
	goto yystack /* stack new state and value */
}
