// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
)

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:28
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string

	// AST nodes
	node       ast.Node
	stmt       ast.Stmt
	stmtList   []ast.Stmt
	list       []ast.Node
	nodelist   *ast.NodeList
	strList    []string
	astStrList []*ast.String

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const WHEN = 57392
const IS = 57393
const ISNULL = 57394
const NOTNULL = 57395
const AT = 57396
const TIME = 57397
const ZONE = 57398
const LOCAL = 57399
const SYMMETRIC = 57400
const ASYMMETRIC = 57401
const TO = 57402
const OPERATOR = 57403
const SELECT = 57404
const FROM = 57405
const WHERE = 57406
const ONLY = 57407
const TABLE = 57408
const LIMIT = 57409
const OFFSET = 57410
const ORDER_P = 57411
const BY = 57412
const GROUP_P = 57413
const HAVING = 57414
const INTO = 57415
const ON = 57416
const BIT = 57417
const NUMERIC = 57418
const INTEGER = 57419
const SMALLINT = 57420
const BIGINT = 57421
const REAL = 57422
const FLOAT_P = 57423
const DOUBLE_P = 57424
const PRECISION = 57425
const CHARACTER = 57426
const CHAR_P = 57427
const VARCHAR = 57428
const NATIONAL = 57429
const NCHAR = 57430
const VARYING = 57431
const TIMESTAMP = 57432
const INTERVAL = 57433
const INT_P = 57434
const DECIMAL_P = 57435
const DEC = 57436
const BOOLEAN_P = 57437
const VARIADIC = 57438
const FORMAT_LA = 57439
const NOT_LA = 57440
const NULLS_LA = 57441
const WITH_LA = 57442
const WITHOUT_LA = 57443
const MODE_TYPE_NAME = 57444
const MODE_PLPGSQL_EXPR = 57445
const MODE_PLPGSQL_ASSIGN1 = 57446
const MODE_PLPGSQL_ASSIGN2 = 57447
const MODE_PLPGSQL_ASSIGN3 = 57448
const UNION = 57449
const EXCEPT = 57450
const INTERSECT = 57451
const UMINUS = 57452

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"ORDER_P",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"'<'",
	"'>'",
	"'='",
	"UMINUS",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"'|'",
	"'#'",
	"'&'",
	"';'",
	"','",
	"'.'",
	"'('",
	"')'",
	"'['",
	"']'",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:1578

// Helper functions for converting between grammar types and AST types

// convertToResTargetList converts a slice of ast.Node to []*ast.ResTarget
func convertToResTargetList(nodes []ast.Node) []*ast.ResTarget {
	if nodes == nil {
		return nil
	}
	targets := make([]*ast.ResTarget, len(nodes))
	for i, node := range nodes {
		if target, ok := node.(*ast.ResTarget); ok {
			targets[i] = target
		}
	}
	return targets
}

// convertToIntoClause converts an ast.Node to *ast.IntoClause
func convertToIntoClause(node ast.Node) *ast.IntoClause {
	if node == nil {
		return nil
	}
	if intoClause, ok := node.(*ast.IntoClause); ok {
		return intoClause
	}
	return nil
}

// convertToStringList converts an ast.Node to []*ast.String
func convertToStringList(node ast.Node) []*ast.String {
	if node == nil {
		return nil
	}
	if nodeList, ok := node.(*ast.NodeList); ok {
		strings := make([]*ast.String, len(nodeList.Items))
		for i, item := range nodeList.Items {
			if str, ok := item.(*ast.String); ok {
				strings[i] = str
			}
		}
		return strings
	}
	return nil
}

// convertToNodeList converts an ast.Node to []ast.Node
func convertToNodeList(node ast.Node) []ast.Node {
	if node == nil {
		return nil
	}
	if nodeList, ok := node.(*ast.NodeList); ok {
		return nodeList.Items
	}
	// If it's a single node, wrap it in a slice
	return []ast.Node{node}
}

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	16, 167,
	17, 167,
	126, 167,
	-2, 133,
	-1, 120,
	126, 147,
	-2, 134,
	-1, 126,
	125, 139,
	128, 139,
	-2, 40,
	-1, 175,
	18, 0,
	19, 0,
	20, 0,
	110, 0,
	111, 0,
	112, 0,
	-2, 65,
	-1, 176,
	18, 0,
	19, 0,
	20, 0,
	110, 0,
	111, 0,
	112, 0,
	-2, 66,
	-1, 177,
	18, 0,
	19, 0,
	20, 0,
	110, 0,
	111, 0,
	112, 0,
	-2, 67,
	-1, 178,
	18, 0,
	19, 0,
	20, 0,
	110, 0,
	111, 0,
	112, 0,
	-2, 68,
	-1, 179,
	18, 0,
	19, 0,
	20, 0,
	110, 0,
	111, 0,
	112, 0,
	-2, 69,
	-1, 180,
	18, 0,
	19, 0,
	20, 0,
	110, 0,
	111, 0,
	112, 0,
	-2, 70,
	-1, 185,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	98, 0,
	-2, 78,
	-1, 191,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	98, 0,
	-2, 82,
	-1, 233,
	126, 146,
	-2, 171,
	-1, 271,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	98, 0,
	-2, 80,
	-1, 272,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	98, 0,
	-2, 84,
	-1, 287,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	98, 0,
	-2, 97,
	-1, 324,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	98, 0,
	-2, 79,
	-1, 329,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	98, 0,
	-2, 99,
	-1, 330,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	98, 0,
	-2, 83,
	-1, 332,
	125, 31,
	-2, 28,
	-1, 333,
	125, 32,
	-2, 29,
	-1, 334,
	125, 33,
	-2, 30,
	-1, 379,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	98, 0,
	-2, 81,
	-1, 380,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	98, 0,
	-2, 85,
	-1, 384,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	98, 0,
	-2, 91,
	-1, 392,
	18, 0,
	19, 0,
	20, 0,
	110, 0,
	111, 0,
	112, 0,
	-2, 111,
	-1, 393,
	18, 0,
	19, 0,
	20, 0,
	110, 0,
	111, 0,
	112, 0,
	-2, 112,
	-1, 394,
	18, 0,
	19, 0,
	20, 0,
	110, 0,
	111, 0,
	112, 0,
	-2, 113,
	-1, 395,
	18, 0,
	19, 0,
	20, 0,
	110, 0,
	111, 0,
	112, 0,
	-2, 114,
	-1, 396,
	18, 0,
	19, 0,
	20, 0,
	110, 0,
	111, 0,
	112, 0,
	-2, 115,
	-1, 397,
	18, 0,
	19, 0,
	20, 0,
	110, 0,
	111, 0,
	112, 0,
	-2, 116,
	-1, 398,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	98, 0,
	-2, 93,
	-1, 399,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	98, 0,
	-2, 98,
	-1, 411,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	98, 0,
	-2, 92,
	-1, 412,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	98, 0,
	-2, 94,
	-1, 413,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	98, 0,
	-2, 100,
}

const yyPrivate = 57344

const yyLast = 1413

var yyAct = [...]int16{
	41, 58, 49, 406, 405, 256, 136, 235, 243, 313,
	245, 206, 230, 26, 23, 62, 240, 130, 50, 261,
	292, 63, 27, 226, 69, 117, 26, 23, 246, 200,
	238, 197, 366, 418, 403, 121, 99, 106, 70, 67,
	416, 416, 70, 419, 417, 57, 300, 51, 60, 410,
	402, 401, 47, 59, 44, 378, 300, 108, 107, 371,
	300, 300, 228, 353, 301, 257, 258, 10, 25, 26,
	126, 11, 40, 376, 26, 23, 26, 23, 373, 161,
	257, 258, 229, 372, 54, 28, 356, 289, 55, 239,
	53, 259, 143, 128, 310, 247, 248, 247, 404, 26,
	193, 57, 48, 51, 60, 106, 255, 369, 47, 59,
	44, 31, 30, 320, 99, 99, 99, 99, 28, 99,
	37, 26, 208, 26, 223, 108, 107, 201, 40, 263,
	99, 9, 247, 250, 125, 26, 23, 227, 123, 233,
	54, 119, 204, 310, 55, 128, 53, 290, 278, 361,
	132, 305, 293, 75, 12, 38, 39, 262, 48, 337,
	337, 66, 252, 253, 254, 251, 260, 45, 225, 65,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 264, 265, 99, 25, 268, 241,
	72, 34, 99, 357, 257, 258, 74, 99, 133, 314,
	266, 267, 276, 202, 28, 274, 199, 25, 194, 286,
	195, 38, 39, 375, 73, 318, 281, 198, 199, 275,
	273, 374, 279, 45, 28, 280, 317, 68, 269, 297,
	298, 288, 99, 184, 337, 104, 59, 99, 17, 16,
	294, 18, 15, 233, 233, 233, 26, 309, 306, 183,
	106, 299, 295, 296, 337, 312, 302, 311, 19, 338,
	339, 340, 341, 342, 343, 343, 21, 135, 24, 315,
	108, 107, 99, 99, 316, 234, 3, 120, 319, 124,
	333, 331, 321, 307, 244, 22, 322, 323, 99, 29,
	242, 71, 26, 208, 33, 47, 20, 8, 76, 127,
	108, 334, 355, 203, 99, 99, 358, 26, 23, 233,
	26, 368, 106, 204, 367, 359, 360, 362, 282, 282,
	370, 5, 210, 97, 7, 99, 47, 6, 377, 76,
	99, 99, 108, 107, 14, 25, 99, 13, 98, 131,
	161, 134, 207, 25, 385, 48, 32, 291, 224, 122,
	56, 231, 28, 143, 97, 249, 340, 341, 342, 343,
	28, 156, 308, 64, 99, 99, 99, 35, 35, 98,
	400, 26, 407, 233, 358, 155, 48, 233, 158, 408,
	99, 99, 409, 157, 232, 99, 163, 142, 141, 140,
	113, 114, 115, 116, 282, 282, 139, 118, 138, 99,
	99, 137, 52, 82, 282, 282, 26, 407, 61, 415,
	46, 42, 99, 99, 99, 285, 43, 188, 26, 407,
	420, 414, 129, 109, 187, 189, 186, 35, 190, 169,
	170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
	180, 181, 182, 192, 4, 2, 185, 1, 191, 0,
	0, 196, 0, 0, 0, 0, 105, 0, 0, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 0, 0, 28, 112, 332, 0, 236, 110, 111,
	47, 0, 0, 76, 0, 0, 0, 86, 87, 88,
	327, 328, 28, 112, 0, 0, 0, 110, 111, 89,
	350, 351, 90, 0, 0, 0, 100, 0, 97, 0,
	0, 0, 0, 96, 101, 94, 0, 102, 0, 0,
	91, 92, 93, 98, 0, 0, 0, 0, 0, 0,
	48, 0, 0, 0, 0, 0, 0, 0, 271, 272,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 236, 287, 386, 387, 388, 389, 390,
	391, 392, 393, 394, 395, 396, 397, 95, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	84, 85, 0, 77, 78, 79, 80, 81, 82, 0,
	303, 0, 57, 304, 51, 60, 0, 0, 237, 236,
	59, 44, 0, 0, 0, 0, 0, 0, 0, 28,
	0, 0, 0, 0, 0, 0, 57, 0, 51, 60,
	0, 0, 324, 47, 59, 44, 0, 0, 329, 330,
	0, 54, 335, 28, 0, 55, 0, 53, 0, 0,
	0, 0, 0, 40, 0, 0, 0, 0, 0, 363,
	364, 0, 365, 0, 0, 54, 0, 47, 0, 55,
	76, 53, 0, 0, 86, 87, 88, 0, 0, 0,
	0, 0, 236, 48, 0, 0, 89, 379, 380, 90,
	0, 0, 0, 100, 0, 97, 0, 0, 384, 0,
	96, 101, 94, 0, 102, 0, 0, 91, 92, 93,
	98, 0, 283, 284, 398, 0, 399, 48, 0, 0,
	0, 0, 0, 0, 45, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 38, 39, 36, 0,
	0, 0, 0, 411, 412, 413, 0, 0, 45, 0,
	0, 0, 0, 0, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 84, 85, 0,
	77, 78, 79, 80, 81, 82, 0, 105, 0, 0,
	0, 0, 0, 205, 47, 0, 0, 76, 0, 0,
	0, 86, 87, 88, 28, 112, 103, 0, 0, 110,
	111, 0, 0, 89, 0, 0, 90, 0, 0, 0,
	100, 0, 97, 0, 0, 0, 0, 96, 101, 94,
	0, 102, 0, 0, 91, 92, 93, 98, 0, 0,
	0, 0, 47, 0, 48, 76, 0, 0, 0, 86,
	87, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 0, 0, 90, 0, 0, 0, 100, 0,
	97, 0, 0, 0, 0, 96, 101, 94, 0, 102,
	0, 95, 91, 92, 93, 98, 0, 47, 0, 0,
	76, 0, 48, 83, 84, 85, 0, 77, 78, 79,
	80, 81, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 0, 97, 0, 0, 0, 0,
	96, 101, 94, 0, 102, 47, 0, 0, 76, 95,
	98, 0, 86, 87, 88, 0, 0, 48, 0, 0,
	0, 83, 84, 85, 89, 77, 78, 79, 80, 81,
	82, 100, 0, 97, 0, 0, 0, 0, 96, 101,
	94, 0, 102, 0, 0, 91, 92, 93, 98, 0,
	0, 0, 0, 47, 95, 48, 76, 0, 0, 0,
	86, 87, 88, 0, 0, 0, 0, 0, 0, 0,
	77, 78, 79, 80, 81, 82, 0, 0, 0, 100,
	0, 97, 0, 0, 25, 0, 96, 101, 94, 0,
	102, 209, 95, 91, 92, 93, 98, 0, 220, 221,
	222, 28, 0, 48, 83, 84, 85, 0, 77, 78,
	79, 80, 81, 82, 337, 0, 0, 0, 347, 348,
	349, 0, 0, 0, 57, 0, 51, 60, 0, 0,
	382, 47, 59, 44, 0, 0, 0, 0, 0, 0,
	95, 28, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 40, 83, 84, 85, 0, 77, 78, 79, 80,
	81, 82, 0, 54, 0, 0, 337, 55, 0, 53,
	347, 348, 349, 0, 0, 0, 0, 0, 0, 0,
	0, 48, 381, 0, 0, 0, 0, 0, 0, 0,
	217, 218, 219, 0, 211, 212, 213, 214, 215, 216,
	47, 0, 0, 76, 0, 0, 0, 0, 0, 0,
	344, 345, 346, 0, 338, 339, 340, 341, 342, 343,
	337, 0, 0, 0, 347, 348, 349, 0, 97, 0,
	0, 383, 0, 337, 38, 39, 352, 347, 348, 349,
	0, 0, 0, 98, 47, 0, 45, 76, 0, 336,
	48, 0, 47, 0, 0, 76, 0, 0, 0, 0,
	0, 0, 344, 345, 346, 0, 338, 339, 340, 341,
	342, 343, 97, 0, 0, 354, 0, 0, 0, 0,
	97, 0, 0, 326, 0, 0, 0, 98, 0, 0,
	0, 0, 0, 0, 48, 98, 0, 0, 0, 0,
	0, 0, 48, 77, 78, 79, 80, 81, 82, 0,
	0, 47, 0, 0, 76, 0, 344, 345, 346, 0,
	338, 339, 340, 341, 342, 343, 0, 0, 0, 344,
	345, 346, 0, 338, 339, 340, 341, 342, 343, 97,
	47, 0, 325, 76, 0, 0, 0, 77, 78, 79,
	80, 81, 82, 0, 98, 77, 78, 79, 80, 81,
	82, 48, 0, 47, 0, 0, 76, 0, 97, 0,
	0, 277, 0, 0, 0, 0, 0, 47, 0, 0,
	76, 47, 0, 98, 76, 0, 0, 0, 0, 0,
	48, 97, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 98, 0, 0, 97,
	0, 0, 0, 48, 77, 78, 79, 80, 81, 82,
	98, 57, 0, 0, 98, 0, 0, 48, 0, 0,
	0, 48, 0, 0, 0, 0, 0, 0, 28, 0,
	0, 0, 0, 77, 78, 79, 80, 81, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 78, 79, 80,
	81, 82, 160, 0, 0, 0, 0, 0, 0, 0,
	77, 78, 79, 80, 81, 82, 79, 80, 81, 82,
	0, 0, 162, 153, 145, 146, 147, 148, 149, 150,
	0, 164, 165, 166, 167, 168, 0, 159, 0, 144,
	151, 152, 154,
}

var yyPact = [...]int16{
	5, -1000, 31, -1000, -1000, -1000, -1000, -1000, -1000, 5,
	217, 203, 5, -15, -16, 612, 612, -1000, -1000, 95,
	-1000, 45, -1000, -86, 64, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 123, 29, -1000, 763, -1000, -1000, 1020, 1020,
	1020, 1020, -1000, -1000, -1000, 1020, -1000, -1000, 15, -90,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 12, -1000, -1000, 123, 8, -1000, 183, -90, -1000,
	1020, -1000, 331, 135, 331, 612, 1317, 1020, 1020, 1020,
	1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020,
	1020, 202, -1000, -1000, 1020, 380, 1020, 331, 153, 1020,
	159, 1, 143, 452, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1266, 1266, 942, 811, -90, 646, 980,
	-90, 183, -1000, 41, 135, 1020, -1000, -1000, -1000, 469,
	-100, -38, 125, 203, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -29, -1000, -1000, -1000, -1000, -1000, 7,
	82, 6, 6, 6, -1000, -1000, -1000, -1000, -1000, -20,
	-35, -1000, 68, 3, 68, 68, -1000, 116, 68, 1270,
	1270, 284, 284, 284, 315, 856, 856, 856, 856, 856,
	856, 942, 894, -1000, 181, 1252, 1020, 1020, 147, 1,
	142, 1229, -1000, 23, 169, -1000, 811, 588, 588, -1000,
	-1000, 1020, 1020, -1000, -1000, -1000, -40, -1000, 22, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 28, 1020, 1020, 1020,
	-1000, 811, 213, -1000, 125, -63, 811, -1000, 1020, -1000,
	-1000, 1020, 27, -1000, 339, -1000, -31, 1020, 452, -1000,
	224, -1000, -1000, -1000, -1000, 224, -1000, 171, 160, 224,
	-1000, -13, -1000, 224, -1000, -1000, 68, 68, -1000, -1000,
	1020, 1200, 1141, 588, 588, -1000, 1020, 1020, 471, 18,
	1020, 1119, -1000, 588, 588, 1106, -64, 1133, -90, -1000,
	980, -1000, -41, 97, -1000, 25, 25, 1020, 1020, -1000,
	1020, -1000, -97, 811, 811, 203, -1000, -1000, 331, -19,
	452, -1000, -68, -1000, -1000, -44, -49, 165, 157, -54,
	1020, -72, -1000, -1000, 1266, 1020, 1020, 1052, 1000, 1089,
	1266, -1000, -1000, -1000, -1000, 811, 1020, 1317, 588, 588,
	588, 588, 588, 588, 588, 588, 588, 588, 588, 588,
	145, 145, 1020, -1000, 1020, -1000, -1000, 1020, -1000, -76,
	-77, 1020, -93, 811, 811, 811, -1000, -1000, -28, 331,
	-1000, -1000, -1000, 94, -1000, -1000, 94, -78, -1000, 1266,
	1266, 1020, 1020, 1020, 1266, -1000, 240, 240, 146, 146,
	146, 220, 145, 145, 145, 145, 145, 145, 1266, 1266,
	-1000, -1000, -1000, -1000, 331, -83, -1000, -1000, -1000, -1000,
	-1000, 1266, 1266, 1266, -94, -84, 331, -1000, -1000, -1000,
	-1000,
}

var yyPgo = [...]int16{
	0, 447, 445, 276, 444, 2, 199, 3, 4, 266,
	443, 443, 443, 443, 1, 22, 21, 423, 423, 423,
	423, 423, 423, 423, 423, 423, 351, 216, 120, 416,
	411, 410, 408, 23, 12, 227, 25, 24, 17, 18,
	408, 402, 6, 401, 398, 396, 389, 388, 387, 15,
	386, 9, 384, 383, 378, 375, 361, 28, 10, 5,
	19, 355, 7, 20, 350, 349, 348, 347, 0, 11,
	342, 322, 29, 31, 321, 327, 324, 297, 294, 346,
	191, 150, 290, 8, 284, 285, 16, 285, 283, 248,
	242, 241, 239, 214,
}

var yyR1 = [...]int8{
	0, 1, 2, 2, 3, 4, 4, 13, 13, 18,
	18, 19, 19, 19, 20, 20, 21, 21, 22, 22,
	23, 23, 24, 24, 25, 25, 25, 25, 5, 5,
	5, 6, 6, 6, 6, 6, 7, 8, 8, 9,
	9, 9, 11, 11, 10, 10, 10, 12, 12, 14,
	15, 16, 17, 17, 17, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 28, 28, 28,
	28, 28, 29, 29, 29, 29, 29, 29, 39, 41,
	40, 40, 40, 30, 30, 35, 35, 38, 38, 37,
	37, 37, 37, 36, 36, 31, 32, 32, 64, 64,
	64, 64, 64, 64, 33, 33, 34, 34, 34, 62,
	62, 42, 43, 43, 43, 43, 43, 49, 49, 49,
	51, 52, 57, 57, 58, 58, 44, 44, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 46,
	46, 47, 47, 50, 50, 50, 50, 50, 50, 53,
	54, 55, 56, 48, 48, 48, 48, 59, 59, 59,
	60, 60, 61, 61, 68, 68, 70, 70, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	69, 69, 63, 65, 66, 67, 73, 73, 72, 74,
	74, 76, 76, 75, 77, 77, 77, 79, 79, 78,
	78, 80, 80, 80, 80, 81, 81, 82, 82, 83,
	84, 84, 85, 85, 85, 86, 86, 87, 89, 89,
	88, 88, 88, 88, 90, 90, 91, 91, 92, 92,
	93, 93,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 2, 0, 3, 0, 2, 0,
	1, 0, 2, 0, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	3, 2, 1, 3, 1, 3, 2, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 3, 2, 4, 2, 3, 5,
	4, 6, 3, 5, 4, 6, 3, 5, 3, 3,
	2, 6, 7, 6, 7, 3, 4, 4, 6, 5,
	7, 1, 3, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 1, 2, 1, 2, 1, 0, 2,
	2, 3, 5, 0, 2, 4, 1, 2, 3, 5,
	6, 8, 6, 6, 1, 3, 1, 3, 3, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 3, 3, 0, 2, 3, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 2, 2, 1, 3, 3, 2, 4,
	1, 5, 2, 5, 2, 5, 2, 3, 3, 0,
	1, 0, 3, 0, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 0, 0, 0, 0, 1, 3, 1,
	1, 3, 3, 1, 6, 6, 2, 1, 0, 1,
	3, 3, 2, 1, 1, 2, 0, 1, 3, 2,
	1, 1, 2, 2, 4, 2, 0, 1, 1, 0,
	5, 2, 4, 1, 1, 0, 1, 5, 1, 0,
	2, 0,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -74, -75, -76, -77, 126,
	62, 66, 123, -75, -76, -90, -92, 21, -91, 41,
	-84, -9, -85, -5, 65, 4, -14, -15, 21, -3,
	127, 127, -79, -78, -80, -26, 116, -28, 114, 115,
	31, -68, -30, -29, 13, 126, -31, 11, 61, -5,
	-39, 6, -41, 49, 43, 47, -64, 4, -14, 12,
	7, -32, -49, -16, -79, 74, 116, 125, -35, -37,
	128, -9, 126, -93, 73, 124, 14, 114, 115, 116,
	117, 118, 119, 110, 111, 112, 18, 19, 20, 30,
	33, 51, 52, 53, 46, 98, 44, 39, 54, -68,
	37, 45, 48, 23, -6, 4, -14, -15, -16, -17,
	26, 27, 22, -26, -26, -26, -26, -36, -26, 126,
	-35, 125, -65, 126, -93, 126, -5, 116, -37, -26,
	-38, -9, -81, 63, -9, -80, -42, -43, -44, -45,
	-46, -47, -48, -49, 92, 77, 78, 79, 80, 81,
	82, 93, 94, 76, 95, -55, -56, -53, -54, 90,
	55, -5, 75, -50, 84, 85, 86, 87, 88, -26,
	-26, -26, -26, -26, -26, -26, -26, -26, -26, -26,
	-26, -26, -26, 47, 31, -26, 46, 44, 37, 45,
	48, -26, -10, -5, 55, 57, -26, -73, 58, 59,
	-72, 126, 60, -6, -37, 127, -69, -70, -5, 11,
	-71, 114, 115, 116, 117, 118, 119, 110, 111, 112,
	18, 19, 20, -5, -66, 127, -33, 96, 21, 41,
	-34, -26, -52, -49, -81, -62, -26, 129, 130, 127,
	-86, 64, -82, -83, -84, -58, -57, 126, 125, -61,
	126, 83, -58, -58, -58, 126, -59, 100, 101, 126,
	-59, -60, 89, 126, -60, -60, 84, 85, -60, 47,
	42, -26, -26, -73, 58, -72, 60, 42, 125, -57,
	56, -27, -28, 114, 115, -27, -62, -26, -36, 127,
	125, -67, -63, 124, -34, -33, -33, 16, 17, -86,
	124, 127, -38, -26, -26, 124, -89, -88, 23, -5,
	125, -58, -62, -51, -6, -39, -39, 55, 55, -39,
	126, -39, -60, -60, -26, 42, 42, -27, -27, -26,
	-26, -5, 4, -14, -15, -26, 30, 14, 114, 115,
	116, 117, 118, 119, 110, 111, 112, 18, 19, 20,
	-27, -27, 30, 127, 42, -69, 127, 96, -34, -63,
	-63, 124, -63, -26, -26, -26, 129, -83, -5, 126,
	-51, 127, 127, 127, 56, 56, 127, -62, 127, -26,
	-26, 30, 30, 42, -26, -42, -27, -27, -27, -27,
	-27, -27, -27, -27, -27, -27, -27, -27, -26, -26,
	-34, 127, 127, 127, 126, -8, -7, -5, -59, -59,
	127, -26, -26, -26, -63, -8, 124, 127, 127, 127,
	-7,
}

var yyDef = [...]int16{
	6, -2, 1, 3, 4, 5, 239, 240, 243, 0,
	275, 0, 6, 0, 0, 248, 248, 274, 278, 276,
	246, 260, 261, 39, 0, 28, 29, 30, 49, 2,
	241, 242, 281, 247, 249, 253, 254, 55, 0, 0,
	0, 0, 117, 118, 143, 0, 121, 214, 0, -2,
	122, 123, 124, 125, 126, 127, 233, 28, 29, 128,
	129, 0, 146, 169, 281, 0, 262, 0, 41, 135,
	138, 263, 0, 256, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 77, 0, 0, 0, 0, 0, 0,
	236, 0, 0, 0, 252, 31, 32, 33, 34, 35,
	52, 53, 54, 56, 57, 73, 90, 119, 0, 0,
	-2, 0, 234, 0, 256, 0, -2, 140, 136, 137,
	0, 0, 266, 0, 280, 250, 58, 161, 162, 163,
	164, 165, 166, 175, 178, 179, 180, 181, 182, 213,
	0, 175, 175, 175, 188, 189, 190, 191, 192, 209,
	209, 167, 211, 200, 211, 211, 195, 0, 211, 59,
	60, 61, 62, 63, 64, -2, -2, -2, -2, -2,
	-2, 71, 72, 74, 0, -2, 0, 0, 236, 0,
	0, -2, 86, 44, 0, 88, 89, 0, 0, 237,
	95, 0, 0, 251, 144, 143, 0, 230, 0, 216,
	217, 218, 219, 220, 221, 222, 223, 224, 225, 226,
	227, 228, 229, 139, 235, 148, 232, 0, 49, 0,
	154, 156, 0, -2, 266, 0, 159, 141, 138, 264,
	244, 0, 255, 257, 269, 176, 175, 0, 0, 183,
	0, 184, 185, 186, 187, 0, 204, 0, 0, 0,
	206, 202, 210, 0, 193, 194, 211, 211, 198, 76,
	0, -2, -2, 0, 0, 96, 0, 0, 0, 46,
	0, 0, 101, 0, 0, 0, 0, -2, 120, 215,
	0, 145, 0, 0, 232, 232, 232, 0, 0, 245,
	0, 277, 0, 137, 265, 0, 259, 268, 0, 273,
	0, 177, 0, 172, 170, 0, 0, 0, 0, 0,
	0, 0, 196, 197, -2, 0, 0, 0, 0, -2,
	-2, 45, -2, -2, -2, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	103, 104, 0, 238, 0, 231, 149, 0, 155, 0,
	0, 0, 0, 157, 158, 160, 142, 258, 271, 0,
	173, 174, 212, 209, 207, 208, 209, 0, 199, -2,
	-2, 0, 0, 0, -2, 102, 105, 106, 107, 108,
	109, 110, -2, -2, -2, -2, -2, -2, -2, -2,
	232, 150, 152, 153, 0, 0, 37, 36, 203, 205,
	201, -2, -2, -2, 0, 0, 0, 272, 151, 270,
	38,
}

var yyTok1 = [...]uint8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 121, 3, 118, 122, 3,
	126, 127, 116, 114, 124, 115, 125, 117, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 130, 123,
	110, 112, 111, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 128, 3, 129, 119, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 120,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 113,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:179
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:194
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:202
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:217
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:228
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:230
		{
			yyVAL.stmt = nil
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:241
		{
			yyVAL.str = yyDollar[1].str
		}
	case 8:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:242
		{
			yyVAL.str = ""
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:246
		{
			yyVAL.node = yyDollar[1].node
		}
	case 10:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:247
		{
			yyVAL.node = nil
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:251
		{
			yyVAL.ival = int(ast.DropCascade)
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:252
		{
			yyVAL.ival = int(ast.DropRestrict)
		}
	case 13:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:253
		{
			yyVAL.ival = int(ast.DropRestrict)
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:257
		{
			yyVAL.ival = 1
		}
	case 15:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:258
		{
			yyVAL.ival = 0
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:262
		{
			yyVAL.ival = 1
		}
	case 17:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:263
		{
			yyVAL.ival = 0
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:267
		{
			yyVAL.ival = 1
		}
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:268
		{
			yyVAL.ival = 0
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:272
		{
			yyVAL.ival = 1
		}
	case 21:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:273
		{
			yyVAL.ival = 0
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:277
		{
			yyVAL.node = ast.NewWithClause(nil, false, 0)
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:278
		{
			yyVAL.node = nil
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:282
		{
			yyVAL.node = ast.NewWithClause(nil, false, 0)
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:283
		{
			yyVAL.node = ast.NewWithClause(nil, false, 0)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:284
		{
			yyVAL.node = nil
		}
	case 27:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:285
		{
			yyVAL.node = nil
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:294
		{
			yyVAL.str = yyDollar[1].str
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:295
		{
			yyVAL.str = yyDollar[1].str
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:296
		{
			yyVAL.str = yyDollar[1].str
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:300
		{
			yyVAL.str = yyDollar[1].str
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:301
		{
			yyVAL.str = yyDollar[1].str
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:302
		{
			yyVAL.str = yyDollar[1].str
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:303
		{
			yyVAL.str = yyDollar[1].str
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:304
		{
			yyVAL.str = yyDollar[1].str
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:308
		{
			yyVAL.str = yyDollar[1].str
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:313
		{
			yyVAL.node = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:317
		{
			list := yyDollar[1].node.(*ast.NodeList)
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:326
		{
			yyVAL.node = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:333
		{
			yyVAL.node = &ast.RangeVar{
				SchemaName: yyDollar[1].str,
				RelName:    yyDollar[3].str,
				Inh:        true, // inheritance enabled by default
			}
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:341
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list) == 1 {
				if str, ok := yyDollar[2].list[0].(*ast.String); ok {
					yyVAL.node = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.node = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.node = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:371
		{
			yyVAL.node = ast.NewNodeList(yyDollar[1].node)
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:375
		{
			list := yyDollar[1].node.(*ast.NodeList)
			list.Append(yyDollar[3].node)
			yyVAL.node = list
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:384
		{
			yyVAL.node = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:388
		{
			yyVAL.node = ast.NewNodeList(ast.NewString(yyDollar[1].str), ast.NewString(yyDollar[3].str))
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:392
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := []ast.Node{ast.NewString(yyDollar[1].str)}
			nodes = append(nodes, yyDollar[2].list...)
			yyVAL.node = ast.NewNodeList(nodes...)
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:402
		{
			yyVAL.node = ast.NewNodeList(yyDollar[1].node)
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:406
		{
			list := yyDollar[1].node.(*ast.NodeList)
			list.Append(yyDollar[3].node)
			yyVAL.node = list
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:420
		{
			yyVAL.str = "all"
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:425
		{
			yyVAL.str = yyDollar[1].str
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:430
		{
			yyVAL.str = yyDollar[1].str
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:435
		{
			yyVAL.str = "create"
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:436
		{
			yyVAL.str = "drop"
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:437
		{
			yyVAL.str = "alter"
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:452
		{
			yyVAL.node = yyDollar[1].node
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:454
		{
			name := []*ast.String{ast.NewString("+")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:459
		{
			name := []*ast.String{ast.NewString("-")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:464
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].node.(*ast.TypeName), 0)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:468
		{
			name := []*ast.String{ast.NewString("+")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:473
		{
			name := []*ast.String{ast.NewString("-")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:478
		{
			name := []*ast.String{ast.NewString("*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:483
		{
			name := []*ast.String{ast.NewString("/")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:488
		{
			name := []*ast.String{ast.NewString("%")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:493
		{
			name := []*ast.String{ast.NewString("^")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:498
		{
			name := []*ast.String{ast.NewString("<")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:503
		{
			name := []*ast.String{ast.NewString(">")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:508
		{
			name := []*ast.String{ast.NewString("=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:513
		{
			name := []*ast.String{ast.NewString("<=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:518
		{
			name := []*ast.String{ast.NewString(">=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:523
		{
			name := []*ast.String{ast.NewString("<>")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:528
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, []ast.Node{yyDollar[1].node, yyDollar[3].node})
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:532
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, []ast.Node{yyDollar[1].node, yyDollar[3].node})
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:536
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, []ast.Node{yyDollar[2].node})
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:540
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:544
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:548
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:552
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:556
		{
			name := []*ast.String{ast.NewString("~~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 79:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:561
		{
			// Create like_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("like_escape")}
			escapeFunc := ast.NewFuncCall(funcName, []ast.Node{yyDollar[3].node, yyDollar[5].node}, 0)
			name := []*ast.String{ast.NewString("~~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:569
		{
			name := []*ast.String{ast.NewString("!~~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 81:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:574
		{
			// Create like_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("like_escape")}
			escapeFunc := ast.NewFuncCall(funcName, []ast.Node{yyDollar[4].node, yyDollar[6].node}, 0)
			name := []*ast.String{ast.NewString("!~~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:582
		{
			name := []*ast.String{ast.NewString("~~*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 83:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:587
		{
			// Create like_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("like_escape")}
			escapeFunc := ast.NewFuncCall(funcName, []ast.Node{yyDollar[3].node, yyDollar[5].node}, 0)
			name := []*ast.String{ast.NewString("~~*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:595
		{
			name := []*ast.String{ast.NewString("!~~*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 85:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:600
		{
			// Create like_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("like_escape")}
			escapeFunc := ast.NewFuncCall(funcName, []ast.Node{yyDollar[4].node, yyDollar[6].node}, 0)
			name := []*ast.String{ast.NewString("!~~*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:608
		{
			// Convert any_name (which returns a NodeList of strings) to []string
			nodeList := yyDollar[3].node.(*ast.NodeList)
			names := make([]string, len(nodeList.Items))
			for i, node := range nodeList.Items {
				names[i] = node.(*ast.String).SVal
			}
			collateClause := ast.NewCollateClause(names)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:620
		{
			// Create timezone function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("timezone")}
			yyVAL.node = ast.NewFuncCall(funcName, []ast.Node{yyDollar[5].node, yyDollar[1].node}, 0)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:626
		{
			// Create timezone function call with no argument
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("timezone")}
			yyVAL.node = ast.NewFuncCall(funcName, []ast.Node{yyDollar[1].node}, 0)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:632
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].astStrList, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:636
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].astStrList, nil, yyDollar[2].node, 0)
		}
	case 91:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:640
		{
			name := []*ast.String{ast.NewString("BETWEEN")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 92:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:645
		{
			name := []*ast.String{ast.NewString("NOT BETWEEN")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 93:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:650
		{
			name := []*ast.String{ast.NewString("BETWEEN SYMMETRIC")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 94:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:655
		{
			name := []*ast.String{ast.NewString("NOT BETWEEN SYMMETRIC")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:660
		{
			name := []*ast.String{ast.NewString("=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:665
		{
			name := []*ast.String{ast.NewString("<>")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:670
		{
			name := []*ast.String{ast.NewString("~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 98:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:675
		{
			// Create similar_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("similar_escape")}
			escapeFunc := ast.NewFuncCall(funcName, []ast.Node{yyDollar[4].node, yyDollar[6].node}, 0)
			name := []*ast.String{ast.NewString("~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:683
		{
			name := []*ast.String{ast.NewString("!~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 100:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:688
		{
			// Create similar_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("similar_escape")}
			escapeFunc := ast.NewFuncCall(funcName, []ast.Node{yyDollar[5].node, yyDollar[7].node}, 0)
			name := []*ast.String{ast.NewString("!~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:697
		{
			yyVAL.node = yyDollar[1].node
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:699
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].node.(*ast.TypeName), 0)
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:703
		{
			name := []*ast.String{ast.NewString("+")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:708
		{
			name := []*ast.String{ast.NewString("-")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:713
		{
			name := []*ast.String{ast.NewString("+")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:718
		{
			name := []*ast.String{ast.NewString("-")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:723
		{
			name := []*ast.String{ast.NewString("*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:728
		{
			name := []*ast.String{ast.NewString("/")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:733
		{
			name := []*ast.String{ast.NewString("%")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:738
		{
			name := []*ast.String{ast.NewString("^")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:743
		{
			name := []*ast.String{ast.NewString("<")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:748
		{
			name := []*ast.String{ast.NewString(">")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:753
		{
			name := []*ast.String{ast.NewString("=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:758
		{
			name := []*ast.String{ast.NewString("<=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:763
		{
			name := []*ast.String{ast.NewString(">=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:768
		{
			name := []*ast.String{ast.NewString("<>")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:774
		{
			yyVAL.node = yyDollar[1].node
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:775
		{
			yyVAL.node = yyDollar[1].node
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:777
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:786
		{
			parenExpr := ast.NewParenExpr(yyDollar[2].node, 0)
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewA_Indirection(parenExpr, yyDollar[4].list, 0)
			} else {
				yyVAL.node = parenExpr
			}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:794
		{
			yyVAL.node = yyDollar[1].node
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:799
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:803
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:807
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:811
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:815
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:819
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:824
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:827
		{
			yyVAL.str = yyDollar[1].str
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:830
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:831
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:832
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:837
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:841
		{
			fields := []ast.Node{ast.NewString(yyDollar[1].str)}
			fields = append(fields, yyDollar[2].list...)
			yyVAL.node = ast.NewColumnRef(fields...)
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:850
		{
			yyVAL.list = []ast.Node{yyDollar[1].node}
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:854
		{
			yyVAL.list = append(yyDollar[1].list, yyDollar[2].node)
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:859
		{
			yyVAL.node = yyDollar[1].node
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:860
		{
			yyVAL.node = nil
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:864
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:868
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:872
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 142:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:876
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:881
		{
			yyVAL.list = nil
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:883
		{
			if yyDollar[1].list == nil {
				yyVAL.list = []ast.Node{yyDollar[2].node}
			} else {
				yyVAL.list = append(yyDollar[1].list, yyDollar[2].node)
			}
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:894
		{
			// For now, just return the func_application
			// Note: In full implementation, would apply within_group_clause, filter_clause, over_clause
			yyVAL.node = yyDollar[1].node
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:902
		{
			yyVAL.astStrList = []*ast.String{ast.NewString(yyDollar[1].str)}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:906
		{
			// Create function name from ColId + indirection
			result := []*ast.String{ast.NewString(yyDollar[1].str)}
			for _, node := range yyDollar[2].list {
				if str, ok := node.(*ast.String); ok {
					result = append(result, str)
				}
			}
			yyVAL.astStrList = result
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:919
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].astStrList, nil, 0)
		}
	case 149:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:923
		{
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, yyDollar[3].list, 0)
			// Note: In full implementation, would set agg_order from $4
			yyVAL.node = funcCall
		}
	case 150:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:929
		{
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, []ast.Node{yyDollar[4].node}, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 151:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:935
		{
			args := append(yyDollar[3].list, yyDollar[6].node)
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, args, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $7
			yyVAL.node = funcCall
		}
	case 152:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:942
		{
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, yyDollar[4].list, 0)
			// Note: In full implementation, would mark as aggregate and set agg_order from $5
			yyVAL.node = funcCall
		}
	case 153:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:948
		{
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, yyDollar[4].list, 0)
			// Note: In full implementation, would set agg_distinct = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:956
		{
			yyVAL.list = []ast.Node{yyDollar[1].node}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:960
		{
			yyVAL.list = append(yyDollar[1].list, yyDollar[3].node)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:966
		{
			yyVAL.node = yyDollar[1].node
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:970
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:974
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:981
		{
			yyVAL.node = ast.NewNodeList(yyDollar[1].node)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:985
		{
			nodeList := yyDollar[1].node.(*ast.NodeList)
			nodeList.Append(yyDollar[3].node)
			yyVAL.node = nodeList
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:994
		{
			yyVAL.node = yyDollar[1].node
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:999
		{
			yyVAL.node = yyDollar[1].node
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1000
		{
			yyVAL.node = yyDollar[1].node
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1001
		{
			yyVAL.node = yyDollar[1].node
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1002
		{
			yyVAL.node = yyDollar[1].node
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1003
		{
			yyVAL.node = yyDollar[1].node
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1006
		{
			yyVAL.str = yyDollar[1].str
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1007
		{
			yyVAL.str = yyDollar[1].str
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1008
		{
			yyVAL.str = yyDollar[1].str
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1011
		{
			yyVAL.str = yyDollar[1].str
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1014
		{
			yyVAL.str = yyDollar[1].str
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1018
		{
			yyVAL.list = []ast.Node{ast.NewString(yyDollar[2].str)}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1022
		{
			yyVAL.list = append(yyDollar[1].list, ast.NewString(yyDollar[3].str))
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1028
		{
			nodeList := yyDollar[2].node.(*ast.NodeList)
			yyVAL.list = nodeList.Items
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1033
		{
			yyVAL.list = nil
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1039
		{
			typeName := ast.NewTypeName([]string{yyDollar[1].str})
			// Note: In full implementation, would set type modifiers
			yyVAL.node = typeName
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1045
		{
			// Create qualified type name from name + attrs
			names := []string{yyDollar[1].str}
			for _, attr := range yyDollar[2].list {
				names = append(names, attr.(*ast.String).SVal)
			}
			typeName := ast.NewTypeName(names)
			// Note: In full implementation, would set type modifiers
			yyVAL.node = typeName
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1058
		{
			yyVAL.node = ast.NewTypeName([]string{"int4"})
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1062
		{
			yyVAL.node = ast.NewTypeName([]string{"int4"})
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1066
		{
			yyVAL.node = ast.NewTypeName([]string{"int2"})
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1070
		{
			yyVAL.node = ast.NewTypeName([]string{"int8"})
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1074
		{
			yyVAL.node = ast.NewTypeName([]string{"float4"})
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1078
		{
			yyVAL.node = yyDollar[2].node
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1082
		{
			yyVAL.node = ast.NewTypeName([]string{"float8"})
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1086
		{
			yyVAL.node = ast.NewTypeName([]string{"numeric"})
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1090
		{
			yyVAL.node = ast.NewTypeName([]string{"numeric"})
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1094
		{
			yyVAL.node = ast.NewTypeName([]string{"numeric"})
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1098
		{
			yyVAL.node = ast.NewTypeName([]string{"bool"})
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1104
		{
			yyVAL.node = yyDollar[1].node
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1108
		{
			yyVAL.node = yyDollar[1].node
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1114
		{
			yyVAL.node = yyDollar[1].node
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1118
		{
			yyVAL.node = yyDollar[1].node
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1124
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1132
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1140
		{
			yyVAL.str = "varchar"
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1144
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1152
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1160
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1170
		{
			yyVAL.node = ast.NewTypeName([]string{yyDollar[1].str})
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1176
		{
			typeName := ast.NewTypeName([]string{yyDollar[1].str})
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// Note: In full implementation, would set typmods to list with 1
			}
			yyVAL.node = typeName
		}
	case 201:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1187
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1199
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 203:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1211
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1221
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 205:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1231
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1241
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1252
		{
			yyVAL.ival = 1
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1253
		{
			yyVAL.ival = 0
		}
	case 209:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1254
		{
			yyVAL.ival = 0
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1257
		{
			yyVAL.ival = 1
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1258
		{
			yyVAL.ival = 0
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1262
		{
			if yyDollar[2].ival < 1 {
				yyVAL.node = ast.NewTypeName([]string{"float4"})
			} else if yyDollar[2].ival <= 7 {
				yyVAL.node = ast.NewTypeName([]string{"float4"})
			} else {
				yyVAL.node = ast.NewTypeName([]string{"float8"})
			}
		}
	case 213:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1272
		{
			yyVAL.node = ast.NewTypeName([]string{"float8"})
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1279
		{
			yyVAL.astStrList = []*ast.String{ast.NewString(yyDollar[1].str)}
		}
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1283
		{
			yyVAL.astStrList = yyDollar[3].astStrList
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1288
		{
			yyVAL.str = yyDollar[1].str
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1289
		{
			yyVAL.str = yyDollar[1].str
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1292
		{
			yyVAL.str = "+"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1293
		{
			yyVAL.str = "-"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1294
		{
			yyVAL.str = "*"
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1295
		{
			yyVAL.str = "/"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1296
		{
			yyVAL.str = "%"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1297
		{
			yyVAL.str = "^"
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1298
		{
			yyVAL.str = "<"
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1299
		{
			yyVAL.str = ">"
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1300
		{
			yyVAL.str = "="
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1301
		{
			yyVAL.str = "<="
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1302
		{
			yyVAL.str = ">="
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1303
		{
			yyVAL.str = "<>"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1307
		{
			yyVAL.astStrList = []*ast.String{ast.NewString(yyDollar[1].str)}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1311
		{
			yyVAL.astStrList = append([]*ast.String{ast.NewString(yyDollar[1].str)}, yyDollar[3].astStrList...)
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1317
		{
			yyVAL.list = nil
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1320
		{
			yyVAL.node = nil
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1323
		{
			yyVAL.node = nil
		}
	case 235:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1326
		{
			yyVAL.node = nil
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1329
		{
			yyVAL.ival = 0
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1330
		{
			yyVAL.ival = 0
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1334
		{
			yyVAL.node = yyDollar[2].node
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1349
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1350
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1354
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1355
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1363
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 244:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1373
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.TargetList = convertToResTargetList(yyDollar[3].list)
			selectStmt.IntoClause = convertToIntoClause(yyDollar[4].node)
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			yyVAL.stmt = selectStmt
		}
	case 245:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1383
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].nodelist
			selectStmt.TargetList = convertToResTargetList(yyDollar[3].list)
			selectStmt.IntoClause = convertToIntoClause(yyDollar[4].node)
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			yyVAL.stmt = selectStmt
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1393
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = []*ast.ResTarget{starTarget}
			selectStmt.FromClause = []ast.Node{yyDollar[2].node}
			yyVAL.stmt = selectStmt
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1409
		{
			yyVAL.list = yyDollar[1].list
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1410
		{
			yyVAL.list = nil
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1414
		{
			yyVAL.list = []ast.Node{yyDollar[1].node}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1415
		{
			yyVAL.list = append(yyDollar[1].list, yyDollar[3].node)
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1420
		{
			yyVAL.node = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1424
		{
			// Implicit alias (no AS keyword)
			yyVAL.node = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1429
		{
			// No alias - use default naming
			yyVAL.node = ast.NewResTarget("", yyDollar[1].node)
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1434
		{
			// SELECT * - all columns
			yyVAL.node = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1445
		{
			yyVAL.list = yyDollar[2].list
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1446
		{
			yyVAL.list = nil
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1450
		{
			yyVAL.list = []ast.Node{yyDollar[1].node}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1451
		{
			yyVAL.list = append(yyDollar[1].list, yyDollar[3].node)
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1460
		{
			rangeVar := yyDollar[1].node.(*ast.RangeVar)
			if yyDollar[2].node != nil {
				rangeVar.Alias = yyDollar[2].node.(*ast.Alias)
			}
			yyVAL.node = rangeVar
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1471
		{
			rangeVar := yyDollar[1].node.(*ast.RangeVar)
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.node = rangeVar
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1477
		{
			yyVAL.node = yyDollar[1].node
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1484
		{
			rangeVar := yyDollar[1].node.(*ast.RangeVar)
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.node = rangeVar
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1490
		{
			rangeVar := yyDollar[2].node.(*ast.RangeVar)
			rangeVar.Inh = false // no inheritance
			yyVAL.node = rangeVar
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1496
		{
			rangeVar := yyDollar[3].node.(*ast.RangeVar)
			rangeVar.Inh = false // no inheritance
			yyVAL.node = rangeVar
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1508
		{
			yyVAL.node = yyDollar[2].node
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1509
		{
			yyVAL.node = nil
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1513
		{
			yyVAL.node = yyDollar[1].node
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1521
		{
			yyVAL.node = yyDollar[1].node
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1522
		{
			yyVAL.node = nil
		}
	case 270:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1527
		{
			nameList := yyDollar[4].node.(*ast.NodeList)
			yyVAL.node = ast.NewAlias(yyDollar[2].str, nameList.Items)
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1532
		{
			yyVAL.node = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1536
		{
			nameList := yyDollar[3].node.(*ast.NodeList)
			yyVAL.node = ast.NewAlias(yyDollar[1].str, nameList.Items)
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1541
		{
			yyVAL.node = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1551
		{
			yyVAL.ival = 1
		}
	case 275:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1552
		{
			yyVAL.ival = 0
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1556
		{
			yyVAL.nodelist = ast.NewNodeList()
		}
	case 277:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1557
		{
			yyVAL.nodelist = yyDollar[4].node.(*ast.NodeList)
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1561
		{
			yyVAL.nodelist = yyDollar[1].nodelist
		}
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1562
		{
			yyVAL.nodelist = nil
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1572
		{
			yyVAL.node = ast.NewIntoClause(yyDollar[2].node.(*ast.RangeVar), nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1575
		{
			yyVAL.node = nil
		}
	}
	goto yystack /* stack new state and value */
}
