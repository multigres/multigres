// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
	"strings"
)

// Parser state for handling complex grammar constructs
var parserState struct {
	// Future parser state variables can be added here
}

// SelectLimit - Private struct for the result of opt_select_limit production
// Mirrors PostgreSQL's SelectLimit from gram.y:126-132
type selectLimit struct {
	limitOffset ast.Node
	limitCount  ast.Node
	limitOption ast.LimitOption
}

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:43
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string
	bval    bool
	byt     byte
	rune    rune

	// AST nodes
	node        ast.Node
	stmt        ast.Stmt
	stmtList    []ast.Stmt
	list        *ast.NodeList
	groupClause *ast.GroupClause
	selectLimit *selectLimit

	// Specific AST node types
	into          *ast.IntoClause
	onconflict    *ast.OnConflictClause
	windef        *ast.WindowDef
	createStmt    *ast.CreateStmt
	indexStmt     *ast.IndexStmt
	alterStmt     *ast.AlterTableStmt
	dropStmt      *ast.DropStmt
	columnDef     *ast.ColumnDef
	constraint    *ast.Constraint
	indexElem     *ast.IndexElem
	alterCmd      *ast.AlterTableCmd
	with          *ast.WithClause
	rangevar      *ast.RangeVar
	objType       ast.ObjectType
	dropBehav     ast.DropBehavior
	setquant      ast.SetQuantifier
	typnam        *ast.TypeName
	partspec      *ast.PartitionSpec
	partboundspec *ast.PartitionBoundSpec
	oncommit      ast.OnCommitAction
	defelt        *ast.DefElem
	target        *ast.ResTarget            // For select targets, insert columns
	alias         *ast.Alias                // For table and column aliases
	jtype         ast.JoinType              // For join type specifications
	jexpr         *ast.JoinExpr             // For joined table expressions
	keyaction     *ast.KeyAction            // For foreign key actions
	keyactions    *ast.KeyActions           // For foreign key action sets
	funparam      *ast.FunctionParameter    // For function parameters
	funparammode  ast.FunctionParameterMode // For parameter modes (IN/OUT/INOUT/VARIADIC)
	vsetstmt      *ast.VariableSetStmt      // For SET/RESET statements
	rolespec      *ast.RoleSpec
	objwithargs   *ast.ObjectWithArgs
	statelem      *ast.StatsElem

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const UNKNOWN = 57392
const WHEN = 57393
const IS = 57394
const ISNULL = 57395
const NOTNULL = 57396
const AT = 57397
const TIME = 57398
const ZONE = 57399
const LOCAL = 57400
const SYMMETRIC = 57401
const ASYMMETRIC = 57402
const TO = 57403
const OPERATOR = 57404
const SELECT = 57405
const FROM = 57406
const WHERE = 57407
const ONLY = 57408
const TABLE = 57409
const LIMIT = 57410
const OFFSET = 57411
const BY = 57412
const GROUP_P = 57413
const HAVING = 57414
const INTO = 57415
const ON = 57416
const JOIN = 57417
const INNER_P = 57418
const LEFT = 57419
const RIGHT = 57420
const FULL = 57421
const OUTER_P = 57422
const CROSS = 57423
const NATURAL = 57424
const USING = 57425
const RECURSIVE = 57426
const MATERIALIZED = 57427
const LATERAL = 57428
const VALUES = 57429
const SEARCH = 57430
const BREADTH = 57431
const DEPTH = 57432
const CYCLE = 57433
const FIRST_P = 57434
const LAST_P = 57435
const SET = 57436
const ASC = 57437
const DESC = 57438
const INSERT = 57439
const UPDATE = 57440
const DELETE_P = 57441
const MERGE = 57442
const RETURNING = 57443
const CONFLICT = 57444
const OVERRIDING = 57445
const USER = 57446
const SYSTEM_P = 57447
const MATCHED = 57448
const THEN = 57449
const SOURCE = 57450
const TARGET = 57451
const DO = 57452
const NOTHING = 57453
const COPY = 57454
const PROGRAM = 57455
const STDIN = 57456
const STDOUT = 57457
const BINARY = 57458
const FREEZE = 57459
const CONSTRAINT = 57460
const VERBOSE = 57461
const ANALYZE = 57462
const CURRENT_P = 57463
const CURSOR = 57464
const OF = 57465
const COLUMNS = 57466
const ORDINALITY = 57467
const XMLTABLE = 57468
const JSON_TABLE = 57469
const ROWS = 57470
const PATH = 57471
const PASSING = 57472
const FOR = 57473
const NESTED = 57474
const REF_P = 57475
const XMLNAMESPACES = 57476
const ARRAY = 57477
const ERROR = 57478
const ERROR_P = 57479
const EMPTY = 57480
const EMPTY_P = 57481
const OBJECT_P = 57482
const WRAPPER = 57483
const CONDITIONAL = 57484
const UNCONDITIONAL = 57485
const QUOTES = 57486
const OMIT = 57487
const KEEP = 57488
const SCALAR = 57489
const STRING_P = 57490
const ENCODING = 57491
const DELIMITER = 57492
const DELIMITERS = 57493
const HEADER_P = 57494
const QUOTE = 57495
const FORCE = 57496
const CSV = 57497
const VALUE_P = 57498
const JSON_QUERY = 57499
const JSON_VALUE = 57500
const JSON_SERIALIZE = 57501
const JSON_OBJECT = 57502
const JSON_ARRAY = 57503
const JSON_OBJECTAGG = 57504
const JSON_ARRAYAGG = 57505
const JSON_EXISTS = 57506
const JSON_SCALAR = 57507
const FORMAT = 57508
const JSON = 57509
const UTF8 = 57510
const WITHOUT = 57511
const BIT = 57512
const NUMERIC = 57513
const INTEGER = 57514
const SMALLINT = 57515
const BIGINT = 57516
const REAL = 57517
const FLOAT_P = 57518
const DOUBLE_P = 57519
const PRECISION = 57520
const CHARACTER = 57521
const CHAR_P = 57522
const VARCHAR = 57523
const NATIONAL = 57524
const NCHAR = 57525
const VARYING = 57526
const TIMESTAMP = 57527
const INTERVAL = 57528
const INT_P = 57529
const DECIMAL_P = 57530
const DEC = 57531
const BOOLEAN_P = 57532
const VARIADIC = 57533
const ABORT_P = 57534
const ABSENT = 57535
const ABSOLUTE_P = 57536
const ACCESS = 57537
const ACTION = 57538
const ADD_P = 57539
const ADMIN = 57540
const AFTER = 57541
const AGGREGATE = 57542
const ALSO = 57543
const ALWAYS = 57544
const ANALYSE = 57545
const ASENSITIVE = 57546
const ASSERTION = 57547
const ASSIGNMENT = 57548
const ATOMIC = 57549
const ATTACH = 57550
const ATTRIBUTE = 57551
const AUTHORIZATION = 57552
const BACKWARD = 57553
const BEFORE = 57554
const BEGIN_P = 57555
const CACHE = 57556
const CALL = 57557
const CALLED = 57558
const CASCADED = 57559
const CATALOG_P = 57560
const CHAIN = 57561
const CHARACTERISTICS = 57562
const CHECKPOINT = 57563
const CLASS = 57564
const CLOSE = 57565
const CLUSTER = 57566
const COALESCE = 57567
const COLLATION = 57568
const COMMENT = 57569
const COMMENTS = 57570
const COMMIT = 57571
const COMMITTED = 57572
const COMPRESSION = 57573
const CONFIGURATION = 57574
const CONNECTION = 57575
const CONSTRAINTS = 57576
const CONTENT_P = 57577
const CONTINUE_P = 57578
const CONVERSION_P = 57579
const COST = 57580
const CUBE = 57581
const CURRENT_CATALOG = 57582
const CURRENT_DATE = 57583
const CURRENT_ROLE = 57584
const CURRENT_SCHEMA = 57585
const CURRENT_TIME = 57586
const CURRENT_TIMESTAMP = 57587
const CURRENT_USER = 57588
const DATA_P = 57589
const DATABASE = 57590
const DAY_P = 57591
const DEALLOCATE = 57592
const DECLARE = 57593
const DEFAULTS = 57594
const DEFERRABLE = 57595
const DEFERRED = 57596
const DEFINER = 57597
const DEPENDS = 57598
const DETACH = 57599
const DICTIONARY = 57600
const DISABLE_P = 57601
const DISCARD = 57602
const DOCUMENT_P = 57603
const DOMAIN_P = 57604
const EACH = 57605
const ELSE = 57606
const ENABLE_P = 57607
const ENCRYPTED = 57608
const END_P = 57609
const ENUM_P = 57610
const EVENT = 57611
const EXCEPT = 57612
const EXCLUDE = 57613
const EXCLUDING = 57614
const EXCLUSIVE = 57615
const EXECUTE = 57616
const EXPLAIN = 57617
const EXPRESSION = 57618
const EXTENSION = 57619
const EXTERNAL = 57620
const EXTRACT = 57621
const FAMILY = 57622
const FETCH = 57623
const FILTER = 57624
const FINALIZE = 57625
const FOLLOWING = 57626
const FOREIGN = 57627
const FORWARD = 57628
const FUNCTION = 57629
const FUNCTIONS = 57630
const GENERATED = 57631
const GLOBAL = 57632
const GRANT = 57633
const GRANTED = 57634
const GREATEST = 57635
const GROUPING = 57636
const GROUPS = 57637
const HANDLER = 57638
const HOLD = 57639
const HOUR_P = 57640
const IDENTITY_P = 57641
const IMMEDIATE = 57642
const IMMUTABLE = 57643
const IMPLICIT_P = 57644
const IMPORT_P = 57645
const INCLUDE = 57646
const INCLUDING = 57647
const INCREMENT = 57648
const INDENT = 57649
const INDEX = 57650
const INDEXES = 57651
const INHERIT = 57652
const INHERITS = 57653
const INITIALLY = 57654
const INLINE_P = 57655
const INPUT_P = 57656
const INSENSITIVE = 57657
const INSTEAD = 57658
const INTERSECT = 57659
const INVOKER = 57660
const ISOLATION = 57661
const KEYS = 57662
const LABEL = 57663
const LANGUAGE = 57664
const LARGE_P = 57665
const LATERAL_P = 57666
const LEAKPROOF = 57667
const LEAST = 57668
const LEADING = 57669
const LEVEL = 57670
const LISTEN = 57671
const LOAD = 57672
const LOCALTIME = 57673
const LOCALTIMESTAMP = 57674
const LOCATION = 57675
const LOCK_P = 57676
const LOCKED = 57677
const LOGGED = 57678
const MAPPING = 57679
const MATCH = 57680
const MAXVALUE = 57681
const MERGE_ACTION = 57682
const METHOD = 57683
const MINUTE_P = 57684
const MINVALUE = 57685
const MODE = 57686
const MONTH_P = 57687
const MOVE = 57688
const NAME_P = 57689
const NAMES = 57690
const NEW = 57691
const NEXT = 57692
const NFC = 57693
const NFD = 57694
const NFKC = 57695
const NFKD = 57696
const NO = 57697
const NONE = 57698
const NORMALIZE = 57699
const NORMALIZED = 57700
const NOTIFY = 57701
const NOWAIT = 57702
const NULLIF = 57703
const OUT_P = 57704
const OVERLAY = 57705
const OVERLAPS = 57706
const OWNED = 57707
const OWNER = 57708
const PARALLEL = 57709
const PARAMETER = 57710
const PARSER = 57711
const PARTIAL = 57712
const PARTITION = 57713
const PASSWORD = 57714
const PLACING = 57715
const PLAN = 57716
const PLANS = 57717
const POLICY = 57718
const POSITION = 57719
const PRECEDING = 57720
const PREPARE = 57721
const PREPARED = 57722
const PRESERVE = 57723
const PRIMARY = 57724
const PRIOR = 57725
const PRIVILEGES = 57726
const PROCEDURAL = 57727
const PROCEDURE = 57728
const PROCEDURES = 57729
const PUBLICATION = 57730
const RANGE = 57731
const READ = 57732
const REASSIGN = 57733
const RECHECK = 57734
const REFERENCES = 57735
const REFERENCING = 57736
const REFRESH = 57737
const REINDEX = 57738
const RELATIVE_P = 57739
const RELEASE = 57740
const RENAME = 57741
const REPEATABLE = 57742
const REPLICA = 57743
const RESET = 57744
const RESTART = 57745
const RETURN = 57746
const RETURNS = 57747
const REVOKE = 57748
const ROLE = 57749
const ROLLBACK = 57750
const ROLLUP = 57751
const ROUTINE = 57752
const ROUTINES = 57753
const ROW = 57754
const RULE = 57755
const SAVEPOINT = 57756
const SCHEMA = 57757
const SCHEMAS = 57758
const SCROLL = 57759
const SECOND_P = 57760
const SECURITY = 57761
const SEQUENCE = 57762
const SEQUENCES = 57763
const SERIALIZABLE = 57764
const SERVER = 57765
const SESSION = 57766
const SESSION_USER = 57767
const SETS = 57768
const SETOF = 57769
const SHARE = 57770
const SHOW = 57771
const SIMPLE = 57772
const SKIP = 57773
const SNAPSHOT = 57774
const SOME = 57775
const SQL_P = 57776
const STABLE = 57777
const STANDALONE_P = 57778
const START = 57779
const STATEMENT = 57780
const STATISTICS = 57781
const STORAGE = 57782
const STORED = 57783
const STRICT_P = 57784
const STRIP_P = 57785
const SUBSCRIPTION = 57786
const SUBSTRING = 57787
const SUPPORT = 57788
const SYSID = 57789
const SYSTEM_USER = 57790
const TABLES = 57791
const TABLESPACE = 57792
const TABLESAMPLE = 57793
const TEMP = 57794
const TEMPLATE = 57795
const TEMPORARY = 57796
const TEXT_P = 57797
const TIES = 57798
const TRAILING = 57799
const TRANSACTION = 57800
const TRANSFORM = 57801
const TREAT = 57802
const TRIGGER = 57803
const TRIM = 57804
const TRUNCATE = 57805
const TRUSTED = 57806
const TYPE_P = 57807
const TYPES_P = 57808
const UESCAPE = 57809
const UNBOUNDED = 57810
const UNCOMMITTED = 57811
const UNENCRYPTED = 57812
const UNION = 57813
const UNIQUE = 57814
const UNLISTEN = 57815
const UNLOGGED = 57816
const UNTIL = 57817
const VACUUM = 57818
const VALID = 57819
const VALIDATE = 57820
const VALIDATOR = 57821
const VERSION_P = 57822
const VIEW = 57823
const VIEWS = 57824
const VOLATILE = 57825
const WHITESPACE_P = 57826
const WINDOW = 57827
const WITHIN = 57828
const WORK = 57829
const WRITE = 57830
const XML_P = 57831
const XMLATTRIBUTES = 57832
const XMLCONCAT = 57833
const XMLELEMENT = 57834
const XMLEXISTS = 57835
const XMLFOREST = 57836
const XMLPARSE = 57837
const XMLPI = 57838
const XMLROOT = 57839
const XMLSERIALIZE = 57840
const YEAR_P = 57841
const YES_P = 57842
const INOUT = 57843
const OTHERS = 57844
const OLD = 57845
const KEY = 57846
const OFF = 57847
const OIDS = 57848
const OPTION = 57849
const OPTIONS = 57850
const OVER = 57851
const ORDER = 57852
const ANY = 57853
const BOTH = 57854
const CAST = 57855
const CHECK = 57856
const COLUMN = 57857
const FORMAT_LA = 57858
const NOT_LA = 57859
const NULLS_LA = 57860
const WITH_LA = 57861
const WITHOUT_LA = 57862
const MODE_TYPE_NAME = 57863
const MODE_PLPGSQL_EXPR = 57864
const MODE_PLPGSQL_ASSIGN1 = 57865
const MODE_PLPGSQL_ASSIGN2 = 57866
const MODE_PLPGSQL_ASSIGN3 = 57867
const UMINUS = 57868

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"UNKNOWN",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"JOIN",
	"INNER_P",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER_P",
	"CROSS",
	"NATURAL",
	"USING",
	"RECURSIVE",
	"MATERIALIZED",
	"LATERAL",
	"VALUES",
	"SEARCH",
	"BREADTH",
	"DEPTH",
	"CYCLE",
	"FIRST_P",
	"LAST_P",
	"SET",
	"ASC",
	"DESC",
	"INSERT",
	"UPDATE",
	"DELETE_P",
	"MERGE",
	"RETURNING",
	"CONFLICT",
	"OVERRIDING",
	"USER",
	"SYSTEM_P",
	"MATCHED",
	"THEN",
	"SOURCE",
	"TARGET",
	"DO",
	"NOTHING",
	"COPY",
	"PROGRAM",
	"STDIN",
	"STDOUT",
	"BINARY",
	"FREEZE",
	"CONSTRAINT",
	"VERBOSE",
	"ANALYZE",
	"CURRENT_P",
	"CURSOR",
	"OF",
	"COLUMNS",
	"ORDINALITY",
	"XMLTABLE",
	"JSON_TABLE",
	"ROWS",
	"PATH",
	"PASSING",
	"FOR",
	"NESTED",
	"REF_P",
	"XMLNAMESPACES",
	"ARRAY",
	"ERROR",
	"ERROR_P",
	"EMPTY",
	"EMPTY_P",
	"OBJECT_P",
	"WRAPPER",
	"CONDITIONAL",
	"UNCONDITIONAL",
	"QUOTES",
	"OMIT",
	"KEEP",
	"SCALAR",
	"STRING_P",
	"ENCODING",
	"DELIMITER",
	"DELIMITERS",
	"HEADER_P",
	"QUOTE",
	"FORCE",
	"CSV",
	"VALUE_P",
	"JSON_QUERY",
	"JSON_VALUE",
	"JSON_SERIALIZE",
	"JSON_OBJECT",
	"JSON_ARRAY",
	"JSON_OBJECTAGG",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_SCALAR",
	"FORMAT",
	"JSON",
	"UTF8",
	"WITHOUT",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"ABORT_P",
	"ABSENT",
	"ABSOLUTE_P",
	"ACCESS",
	"ACTION",
	"ADD_P",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALSO",
	"ALWAYS",
	"ANALYSE",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"BACKWARD",
	"BEFORE",
	"BEGIN_P",
	"CACHE",
	"CALL",
	"CALLED",
	"CASCADED",
	"CATALOG_P",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATION",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPRESSION",
	"CONFIGURATION",
	"CONNECTION",
	"CONSTRAINTS",
	"CONTENT_P",
	"CONTINUE_P",
	"CONVERSION_P",
	"COST",
	"CUBE",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"DATA_P",
	"DATABASE",
	"DAY_P",
	"DEALLOCATE",
	"DECLARE",
	"DEFAULTS",
	"DEFERRABLE",
	"DEFERRED",
	"DEFINER",
	"DEPENDS",
	"DETACH",
	"DICTIONARY",
	"DISABLE_P",
	"DISCARD",
	"DOCUMENT_P",
	"DOMAIN_P",
	"EACH",
	"ELSE",
	"ENABLE_P",
	"ENCRYPTED",
	"END_P",
	"ENUM_P",
	"EVENT",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXCLUSIVE",
	"EXECUTE",
	"EXPLAIN",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"EXTRACT",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FINALIZE",
	"FOLLOWING",
	"FOREIGN",
	"FORWARD",
	"FUNCTION",
	"FUNCTIONS",
	"GENERATED",
	"GLOBAL",
	"GRANT",
	"GRANTED",
	"GREATEST",
	"GROUPING",
	"GROUPS",
	"HANDLER",
	"HOLD",
	"HOUR_P",
	"IDENTITY_P",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT_P",
	"IMPORT_P",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INDEX",
	"INDEXES",
	"INHERIT",
	"INHERITS",
	"INITIALLY",
	"INLINE_P",
	"INPUT_P",
	"INSENSITIVE",
	"INSTEAD",
	"INTERSECT",
	"INVOKER",
	"ISOLATION",
	"KEYS",
	"LABEL",
	"LANGUAGE",
	"LARGE_P",
	"LATERAL_P",
	"LEAKPROOF",
	"LEAST",
	"LEADING",
	"LEVEL",
	"LISTEN",
	"LOAD",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCATION",
	"LOCK_P",
	"LOCKED",
	"LOGGED",
	"MAPPING",
	"MATCH",
	"MAXVALUE",
	"MERGE_ACTION",
	"METHOD",
	"MINUTE_P",
	"MINVALUE",
	"MODE",
	"MONTH_P",
	"MOVE",
	"NAME_P",
	"NAMES",
	"NEW",
	"NEXT",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NO",
	"NONE",
	"NORMALIZE",
	"NORMALIZED",
	"NOTIFY",
	"NOWAIT",
	"NULLIF",
	"OUT_P",
	"OVERLAY",
	"OVERLAPS",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PARSER",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECEDING",
	"PREPARE",
	"PREPARED",
	"PRESERVE",
	"PRIMARY",
	"PRIOR",
	"PRIVILEGES",
	"PROCEDURAL",
	"PROCEDURE",
	"PROCEDURES",
	"PUBLICATION",
	"RANGE",
	"READ",
	"REASSIGN",
	"RECHECK",
	"REFERENCES",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE_P",
	"RELEASE",
	"RENAME",
	"REPEATABLE",
	"REPLICA",
	"RESET",
	"RESTART",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLE",
	"ROLLBACK",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"RULE",
	"SAVEPOINT",
	"SCHEMA",
	"SCHEMAS",
	"SCROLL",
	"SECOND_P",
	"SECURITY",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSION_USER",
	"SETS",
	"SETOF",
	"SHARE",
	"SHOW",
	"SIMPLE",
	"SKIP",
	"SNAPSHOT",
	"SOME",
	"SQL_P",
	"STABLE",
	"STANDALONE_P",
	"START",
	"STATEMENT",
	"STATISTICS",
	"STORAGE",
	"STORED",
	"STRICT_P",
	"STRIP_P",
	"SUBSCRIPTION",
	"SUBSTRING",
	"SUPPORT",
	"SYSID",
	"SYSTEM_USER",
	"TABLES",
	"TABLESPACE",
	"TABLESAMPLE",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TEXT_P",
	"TIES",
	"TRAILING",
	"TRANSACTION",
	"TRANSFORM",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUNCATE",
	"TRUSTED",
	"TYPE_P",
	"TYPES_P",
	"UESCAPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNENCRYPTED",
	"UNION",
	"UNIQUE",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VERSION_P",
	"VIEW",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE_P",
	"WINDOW",
	"WITHIN",
	"WORK",
	"WRITE",
	"XML_P",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"YEAR_P",
	"YES_P",
	"INOUT",
	"OTHERS",
	"OLD",
	"KEY",
	"OFF",
	"OIDS",
	"OPTION",
	"OPTIONS",
	"OVER",
	"ORDER",
	"ANY",
	"BOTH",
	"CAST",
	"CHECK",
	"COLUMN",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"'<'",
	"'>'",
	"'='",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"';'",
	"','",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:11577

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 70,
	541, 70,
	-2, 1418,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 73,
	68, 1340,
	69, 1340,
	131, 1340,
	281, 1340,
	510, 1340,
	-2, 1335,
	-1, 76,
	67, 1743,
	84, 1743,
	85, 2380,
	237, 2567,
	308, 1910,
	420, 1743,
	481, 1743,
	-2, 83,
	-1, 89,
	68, 1339,
	69, 1339,
	131, 1339,
	281, 1339,
	510, 1339,
	-2, 1341,
	-1, 99,
	1, 70,
	541, 70,
	-2, 1418,
	-1, 141,
	85, 2379,
	-2, 1742,
	-1, 216,
	61, 288,
	64, 288,
	528, 288,
	534, 288,
	-2, 2423,
	-1, 630,
	68, 1324,
	69, 1324,
	131, 1324,
	281, 1324,
	-2, 1342,
	-1, 633,
	68, 1325,
	69, 1325,
	131, 1325,
	281, 1325,
	-2, 1345,
	-1, 687,
	84, 1743,
	481, 1743,
	-2, 82,
	-1, 689,
	210, 71,
	-2, 2386,
	-1, 791,
	16, 1257,
	17, 1257,
	532, 1257,
	-2, 89,
	-1, 792,
	16, 1258,
	17, 1258,
	532, 1258,
	-2, 90,
	-1, 817,
	94, 2703,
	399, 1946,
	402, 2703,
	-2, 1839,
	-1, 821,
	94, 2703,
	399, 1946,
	402, 2703,
	-2, 1839,
	-1, 938,
	68, 1324,
	69, 1324,
	131, 1324,
	281, 1324,
	-2, 1346,
	-1, 1133,
	6, 1839,
	12, 1839,
	535, 1839,
	536, 1839,
	-2, 1832,
	-1, 1330,
	128, 2665,
	412, 2665,
	-2, 1068,
	-1, 1361,
	21, 1231,
	433, 1231,
	511, 1231,
	-2, 830,
	-1, 1363,
	21, 1233,
	433, 1233,
	511, 1233,
	-2, 777,
	-1, 1368,
	1, 646,
	26, 646,
	36, 646,
	64, 646,
	65, 646,
	68, 646,
	69, 646,
	71, 646,
	72, 646,
	73, 646,
	74, 646,
	101, 646,
	131, 646,
	281, 646,
	485, 646,
	510, 646,
	533, 646,
	541, 646,
	542, 646,
	-2, 1330,
	-1, 1373,
	21, 1308,
	433, 1308,
	511, 1308,
	-2, 1304,
	-1, 1830,
	68, 1340,
	69, 1340,
	131, 1340,
	281, 1340,
	510, 1340,
	-2, 1158,
	-1, 1840,
	532, 1194,
	-2, 1178,
	-1, 2020,
	118, 83,
	308, 1910,
	461, 83,
	-2, 1743,
	-1, 2070,
	537, 104,
	-2, 2251,
	-1, 2098,
	532, 1912,
	-2, 212,
	-1, 2305,
	36, 2670,
	66, 2670,
	-2, 494,
	-1, 2306,
	36, 2671,
	66, 2671,
	-2, 367,
	-1, 2312,
	128, 2668,
	412, 2668,
	-2, 1166,
	-1, 2313,
	128, 2669,
	412, 2669,
	-2, 1167,
	-1, 2330,
	1, 412,
	26, 412,
	36, 412,
	64, 412,
	65, 412,
	68, 412,
	69, 412,
	71, 412,
	72, 412,
	74, 412,
	101, 412,
	131, 412,
	281, 412,
	485, 412,
	510, 412,
	530, 412,
	533, 412,
	534, 412,
	541, 412,
	-2, 111,
	-1, 2331,
	1, 410,
	26, 410,
	36, 410,
	64, 410,
	65, 410,
	68, 410,
	69, 410,
	71, 410,
	72, 410,
	74, 410,
	101, 410,
	131, 410,
	281, 410,
	485, 410,
	510, 410,
	530, 410,
	533, 410,
	534, 410,
	541, 410,
	-2, 111,
	-1, 2334,
	1, 429,
	26, 429,
	36, 429,
	64, 429,
	65, 429,
	68, 429,
	69, 429,
	71, 429,
	72, 429,
	74, 429,
	101, 429,
	131, 429,
	281, 429,
	485, 429,
	510, 429,
	530, 429,
	533, 429,
	534, 429,
	541, 429,
	-2, 111,
	-1, 2348,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1081,
	-1, 2349,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1082,
	-1, 2350,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1083,
	-1, 2351,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1084,
	-1, 2352,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1085,
	-1, 2353,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1086,
	-1, 2357,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1093,
	-1, 2363,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1097,
	-1, 2408,
	364, 1221,
	-2, 1224,
	-1, 2426,
	532, 1193,
	-2, 1261,
	-1, 2539,
	40, 1265,
	510, 1265,
	528, 1265,
	533, 1265,
	542, 1265,
	-2, 1261,
	-1, 2569,
	210, 71,
	-2, 2386,
	-1, 2642,
	537, 105,
	-2, 2251,
	-1, 2745,
	508, 2326,
	-2, 2319,
	-1, 2878,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1095,
	-1, 2879,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1099,
	-1, 2885,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1101,
	-1, 2924,
	364, 1220,
	-2, 1223,
	-1, 2993,
	68, 1340,
	69, 1340,
	131, 1340,
	281, 1340,
	510, 1340,
	-2, 1440,
	-1, 3004,
	532, 1194,
	-2, 105,
	-1, 3010,
	151, 1675,
	-2, 1610,
	-1, 3206,
	6, 1839,
	12, 1839,
	535, 1839,
	536, 1839,
	-2, 1813,
	-1, 3329,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1094,
	-1, 3332,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1103,
	-1, 3335,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1098,
	-1, 3340,
	52, 0,
	53, 0,
	54, 0,
	-2, 1116,
	-1, 3362,
	21, 1230,
	433, 1230,
	511, 1230,
	-2, 1305,
	-1, 3366,
	364, 1222,
	-2, 1225,
	-1, 3687,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1096,
	-1, 3688,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1100,
	-1, 3692,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1102,
	-1, 3693,
	52, 0,
	53, 0,
	54, 0,
	-2, 1117,
	-1, 3696,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1118,
	-1, 3704,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1146,
	-1, 3705,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1147,
	-1, 3706,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1148,
	-1, 3707,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1149,
	-1, 3708,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1150,
	-1, 3709,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1151,
	-1, 3710,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1120,
	-1, 3794,
	541, 70,
	-2, 1418,
	-1, 3935,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1104,
	-1, 3936,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1119,
	-1, 3937,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1121,
	-1, 4323,
	37, 0,
	44, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 452,
	-1, 4619,
	7, 1560,
	-2, 289,
}

const yyPrivate = 57344

const yyLast = 79846

var yyAct = [...]int16{
	653, 4676, 4741, 4663, 4616, 4722, 4675, 2864, 4706, 3532,
	4485, 3835, 4664, 4687, 2952, 957, 761, 4211, 2713, 2497,
	4617, 2448, 1825, 4174, 3736, 4231, 4383, 3150, 3869, 798,
	4480, 4013, 4322, 4250, 3121, 4372, 3190, 4366, 2451, 3783,
	1971, 4063, 4470, 1278, 4115, 3755, 4143, 4279, 1017, 1121,
	3735, 2862, 4521, 3640, 4175, 4451, 4144, 725, 2931, 4435,
	4141, 1993, 3030, 4257, 3440, 4252, 3995, 2322, 4321, 4251,
	3972, 2578, 3969, 982, 4302, 4059, 3176, 4305, 4087, 3868,
	2109, 219, 219, 2843, 1078, 6, 3436, 623, 628, 2665,
	693, 2464, 2708, 3124, 4042, 646, 2504, 2999, 3015, 2951,
	3790, 3753, 2818, 3646, 3641, 2570, 646, 72, 3506, 1860,
	646, 3650, 3536, 3444, 877, 4001, 689, 692, 697, 692,
	3582, 692, 3098, 833, 1984, 4095, 2527, 61, 1039, 2492,
	2425, 692, 2019, 19, 3031, 4, 2318, 2018, 18, 3978,
	2466, 3744, 2534, 3764, 3929, 646, 646, 646, 646, 638,
	91, 790, 692, 692, 3760, 692, 790, 2960, 2794, 2017,
	13, 790, 2631, 790, 3271, 2016, 12, 2487, 2554, 1037,
	3084, 2985, 3499, 692, 3680, 692, 3723, 1335, 692, 631,
	2490, 1829, 2082, 2707, 3205, 1108, 2680, 2465, 3184, 2055,
	807, 3566, 809, 2558, 672, 2423, 2046, 3168, 2050, 2040,
	636, 2579, 2557, 2632, 2545, 2559, 1057, 2530, 219, 219,
	2489, 1973, 2977, 1287, 1992, 943, 671, 1230, 3318, 2897,
	2938, 1835, 3415, 2452, 788, 661, 61, 1240, 2867, 799,
	2177, 2596, 19, 2712, 799, 643, 799, 18, 2093, 4481,
	2661, 1153, 3061, 997, 1064, 1283, 668, 2067, 2532, 91,
	645, 2026, 2544, 3102, 2506, 3006, 1025, 210, 2469, 13,
	1972, 2473, 1148, 2472, 2471, 12, 2462, 1827, 1940, 2414,
	2410, 2373, 2419, 2380, 2374, 911, 2383, 1336, 3101, 2311,
	2301, 660, 1327, 1277, 787, 774, 2608, 830, 206, 2595,
	2594, 1853, 1089, 1087, 723, 111, 688, 2482, 1845, 880,
	882, 2327, 113, 953, 989, 944, 1310, 1328, 1308, 1245,
	2216, 630, 837, 178, 980, 177, 840, 2217, 651, 2066,
	2054, 134, 1340, 1311, 1309, 930, 932, 931, 1275, 1161,
	1194, 2047, 1146, 667, 1043, 879, 198, 1999, 649, 3070,
	4614, 89, 90, 657, 4613, 659, 1373, 665, 1220, 1343,
	2474, 4772, 4763, 1355, 1356, 1357, 2865, 4084, 4461, 1221,
	4648, 4696, 3069, 1080, 1220, 1950, 1220, 1373, 1951, 4761,
	1343, 3071, 1956, 1373, 1948, 1221, 1343, 1221, 4648, 1953,
	1957, 1952, 4300, 1954, 1086, 2435, 4119, 1955, 1366, 1367,
	1949, 1373, 4117, 4695, 1343, 1948, 4674, 1958, 3689, 1956,
	4672, 1948, 4696, 4656, 4647, 4336, 1953, 1957, 1952, 1946,
	1954, 1949, 1946, 4648, 157, 2920, 4630, 1949, 1958, 1948,
	4623, 1080, 3336, 4607, 1958, 4631, 2921, 3159, 2988, 2965,
	768, 769, 4315, 634, 633, 1949, 654, 4590, 4551, 4550,
	4538, 4500, 1958, 4494, 4467, 4443, 3954, 1946, 1946, 2485,
	4501, 800, 4495, 3110, 4441, 632, 632, 4442, 4440, 4420,
	724, 4419, 2328, 910, 816, 819, 4441, 4441, 1946, 2457,
	1946, 724, 724, 4416, 4414, 1341, 1294, 4335, 1284, 905,
	4333, 4225, 4417, 4415, 981, 3906, 4336, 3380, 2937, 1223,
	3954, 897, 801, 4210, 873, 4200, 892, 894, 4183, 4170,
	4068, 4058, 2857, 2919, 4201, 817, 821, 4182, 1223, 4069,
	2485, 4048, 1296, 1343, 1946, 1299, 4595, 4030, 3963, 3344,
	3071, 1298, 3962, 3354, 3355, 3356, 4029, 3964, 4184, 4594,
	1297, 1223, 3953, 3347, 3348, 3349, 3350, 2485, 1948, 3922,
	3865, 3954, 3864, 3863, 3857, 4569, 1300, 3805, 3923, 3866,
	3775, 2485, 2485, 2485, 1949, 3712, 3071, 3677, 3453, 3776,
	2975, 1219, 3360, 3301, 1946, 3229, 1946, 2485, 3216, 664,
	3073, 1946, 1946, 3052, 3230, 2970, 2964, 3217, 2955, 3074,
	2924, 2922, 3053, 4341, 2971, 2965, 2831, 1946, 2572, 1946,
	1946, 1348, 1349, 1350, 1351, 1946, 2486, 2573, 2441, 2437,
	1947, 1373, 1946, 4315, 1343, 2485, 4313, 1223, 1946, 1946,
	1259, 2320, 3924, 3910, 3758, 1342, 2080, 3509, 3463, 3462,
	3365, 3312, 3110, 3013, 2857, 2639, 2400, 2299, 924, 1948,
	2290, 995, 3331, 648, 4229, 662, 1232, 99, 2023, 3350,
	971, 971, 2023, 3473, 987, 1949, 1351, 3800, 646, 991,
	3870, 1018, 1958, 990, 1284, 991, 971, 981, 941, 990,
	981, 1232, 991, 1042, 981, 2023, 990, 646, 4488, 1012,
	646, 646, 1232, 96, 2023, 646, 646, 1969, 646, 1042,
	790, 790, 3218, 3450, 790, 2796, 1241, 1242, 3219, 1987,
	1241, 1242, 1047, 2032, 902, 692, 692, 93, 4701, 1243,
	93, 94, 4542, 1239, 94, 4533, 663, 4320, 4312, 4319,
	96, 4311, 4310, 4303, 1373, 4489, 4270, 1343, 4159, 4136,
	646, 98, 900, 3344, 98, 899, 4072, 3354, 3355, 3356,
	4049, 4486, 96, 4020, 3944, 3942, 4065, 93, 3928, 3691,
	1967, 94, 1948, 3733, 3722, 3330, 3721, 3720, 3715, 3517,
	3508, 3425, 3375, 1027, 1028, 3400, 3362, 1031, 1949, 93,
	3172, 98, 3129, 94, 3116, 1958, 3109, 2662, 692, 3068,
	3012, 2935, 2923, 2838, 1373, 2836, 2833, 1343, 2832, 3395,
	2436, 2104, 2164, 98, 2393, 646, 646, 1016, 2485, 2203,
	941, 1836, 2485, 92, 3054, 940, 1049, 1055, 4762, 3403,
	4737, 110, 1948, 4733, 692, 692, 2485, 2107, 1018, 4633,
	668, 668, 4602, 939, 2033, 1837, 4575, 4568, 1949, 4510,
	3000, 2044, 4450, 1058, 2953, 1958, 2933, 4258, 4413, 4388,
	1259, 4385, 4318, 2457, 1259, 3160, 4317, 999, 2110, 4288,
	1259, 4284, 1120, 3016, 4215, 4173, 4133, 4132, 3886, 4131,
	4109, 4093, 1362, 4092, 938, 4091, 985, 4082, 1003, 1836,
	4079, 1352, 1353, 1354, 3766, 3958, 1218, 3075, 3786, 1223,
	1346, 1347, 1348, 1349, 1350, 1351, 692, 3770, 2948, 1362,
	3757, 3749, 1227, 3652, 1223, 3973, 1004, 3555, 3406, 3512,
	974, 1346, 1347, 1348, 1349, 1350, 1351, 1346, 1347, 1348,
	1349, 1350, 1351, 1291, 2394, 3160, 3315, 3496, 3488, 988,
	3516, 3485, 1375, 3458, 3427, 1346, 1347, 1348, 1349, 1350,
	1351, 3420, 2854, 1307, 3296, 3195, 1142, 2639, 3194, 3189,
	1069, 3451, 998, 1044, 971, 1041, 971, 1988, 971, 3344,
	2457, 3003, 1373, 3002, 1342, 1343, 2958, 2930, 2105, 971,
	971, 971, 971, 971, 911, 926, 927, 2031, 911, 911,
	971, 917, 3344, 919, 918, 921, 3354, 3355, 3356, 4066,
	1948, 2914, 2912, 2884, 2385, 1084, 1085, 1301, 3690, 971,
	634, 633, 2043, 1034, 2815, 2758, 1949, 2659, 1044, 996,
	2581, 2499, 971, 1958, 646, 971, 2391, 1178, 2416, 655,
	92, 2275, 2129, 1014, 1015, 1076, 2009, 1285, 1286, 1855,
	2000, 1851, 1975, 1849, 1976, 1848, 1847, 1839, 1838, 1985,
	1837, 1247, 1033, 646, 1193, 1232, 1998, 1234, 1199, 1147,
	696, 3351, 3352, 3353, 1346, 1347, 1348, 1349, 1350, 1351,
	3345, 3346, 3347, 3348, 3349, 3350, 994, 1048, 697, 1054,
	1343, 692, 692, 692, 692, 766, 692, 2574, 2458, 1241,
	1242, 1855, 2108, 2027, 2863, 2179, 4223, 636, 4222, 3913,
	1990, 646, 1236, 1237, 1238, 646, 1058, 4689, 3344, 3632,
	2070, 2102, 3354, 3355, 3356, 1195, 2106, 3627, 632, 1231,
	3236, 1244, 3449, 2091, 3359, 1966, 2389, 3198, 1986, 3246,
	2740, 646, 2081, 692, 2736, 904, 906, 908, 912, 4025,
	2100, 646, 1343, 2179, 3296, 2152, 4437, 646, 2950, 2415,
	4214, 3122, 1945, 1004, 4018, 1346, 1347, 1348, 1349, 1350,
	1351, 1109, 1159, 4381, 4380, 2676, 646, 1948, 2030, 646,
	4221, 991, 1271, 1177, 2110, 990, 913, 3238, 1268, 1196,
	1176, 3495, 1200, 1201, 1279, 1279, 97, 1295, 1216, 2083,
	4487, 4044, 1112, 1255, 3199, 1118, 92, 1136, 646, 1968,
	2137, 2664, 2070, 2070, 2070, 2663, 1942, 4690, 1248, 1249,
	2797, 2798, 1252, 1285, 1286, 4609, 2126, 2797, 2798, 901,
	646, 646, 2297, 97, 1006, 902, 3845, 1844, 3344, 3930,
	2176, 2013, 3354, 3355, 3356, 622, 92, 2564, 692, 692,
	692, 692, 692, 3399, 3343, 97, 3192, 108, 692, 692,
	1070, 1022, 2090, 102, 891, 1832, 692, 884, 92, 1960,
	1289, 1179, 1044, 971, 1840, 3351, 3352, 3353, 1346, 1347,
	1348, 1349, 1350, 1351, 3345, 3346, 3347, 3348, 3349, 3350,
	2597, 2130, 101, 1373, 674, 1312, 1343, 1320, 1319, 1109,
	1355, 1356, 1357, 1338, 1339, 1044, 620, 3201, 4024, 646,
	784, 676, 1950, 2087, 4055, 1951, 2099, 2101, 3187, 1956,
	1179, 1948, 3055, 102, 2228, 2229, 1953, 1957, 1952, 4244,
	1954, 3146, 2097, 1852, 1955, 1366, 1367, 1949, 1346, 1347,
	1348, 1349, 1350, 1351, 1958, 1044, 1059, 2295, 1850, 2598,
	3342, 1315, 101, 2540, 1943, 4045, 3858, 3126, 3341, 674,
	2153, 2219, 1996, 2219, 2444, 971, 4038, 2219, 2219, 2597,
	2071, 979, 971, 971, 2024, 646, 676, 4037, 3799, 2149,
	2150, 3603, 646, 971, 102, 692, 2262, 971, 971, 971,
	971, 971, 971, 971, 971, 971, 971, 971, 971, 971,
	971, 971, 971, 2198, 971, 793, 2001, 2028, 3464, 114,
	1065, 3108, 2014, 101, 1030, 2285, 2286, 2287, 2142, 2062,
	3344, 2689, 2145, 2146, 3354, 3355, 3356, 682, 2598, 2096,
	2390, 889, 2289, 1373, 139, 1224, 1343, 2223, 4054, 1228,
	1355, 1356, 1357, 2051, 815, 2078, 2079, 2592, 1373, 2060,
	3846, 1343, 757, 629, 2269, 2074, 1315, 2675, 139, 1956,
	618, 1948, 2071, 2071, 2071, 3676, 1953, 1957, 1952, 2688,
	1954, 3309, 2743, 2599, 3836, 1253, 1948, 1949, 4434, 2877,
	2141, 2873, 3815, 2872, 1958, 4397, 2871, 2591, 2870, 2268,
	4297, 3092, 1949, 1852, 2119, 2118, 2282, 2637, 3088, 1958,
	3345, 3346, 3347, 3348, 3349, 3350, 1346, 1347, 1348, 1349,
	1350, 1351, 3200, 3206, 3351, 3352, 3353, 4296, 2084, 2095,
	2687, 4554, 3897, 3345, 3346, 3347, 3348, 3349, 3350, 2617,
	732, 2192, 2193, 2194, 839, 839, 2546, 2548, 2547, 1154,
	3127, 732, 732, 2117, 3642, 2260, 2191, 2084, 2388, 3620,
	2224, 920, 2599, 923, 2221, 3617, 2202, 2113, 2225, 2226,
	925, 2094, 732, 2208, 2155, 4528, 4458, 2159, 2686, 2739,
	2254, 4553, 2244, 2084, 2051, 732, 732, 773, 4438, 772,
	3859, 2084, 2267, 771, 2084, 770, 2135, 2131, 2178, 732,
	732, 732, 3185, 2084, 2084, 4390, 2084, 3605, 2084, 1059,
	2277, 2278, 3282, 2443, 2953, 4023, 1155, 2279, 1316, 2084,
	2231, 1346, 1347, 1348, 1349, 1350, 1351, 2298, 1109, 4671,
	2617, 4391, 4670, 732, 4051, 682, 2387, 4050, 4254, 2620,
	3351, 3352, 3353, 2051, 898, 2284, 2178, 4531, 2012, 3345,
	3346, 3347, 3348, 3349, 3350, 1267, 2316, 677, 4410, 2308,
	3611, 4071, 2314, 77, 3087, 3833, 1007, 76, 78, 972,
	4457, 2612, 3086, 3092, 3827, 1211, 140, 96, 3674, 2841,
	3088, 1265, 2300, 1346, 1347, 1348, 1349, 1350, 1351, 1962,
	2791, 1317, 2605, 3228, 3225, 3224, 2326, 2325, 2337, 1963,
	140, 1209, 3041, 1373, 93, 665, 1343, 2310, 94, 1185,
	1355, 1356, 1357, 1053, 4237, 3166, 4608, 683, 675, 1156,
	4593, 1964, 1950, 1316, 4456, 1951, 2698, 2317, 98, 1956,
	2620, 1948, 2128, 3032, 3140, 80, 1953, 1957, 1952, 1051,
	1954, 2785, 3602, 1206, 1955, 1366, 1367, 1949, 1203, 2218,
	3094, 3083, 3653, 75, 1958, 3266, 1373, 2769, 1314, 1343,
	3351, 3352, 3353, 1355, 1356, 1357, 2114, 1318, 2618, 3345,
	3346, 3347, 3348, 3349, 3350, 2321, 1181, 2116, 2115, 3643,
	681, 2803, 1956, 675, 1948, 3802, 2802, 2323, 2324, 1953,
	1957, 1952, 1264, 1954, 1173, 3269, 1317, 1955, 1366, 1367,
	1949, 2614, 2801, 1214, 679, 2800, 2782, 1958, 2214, 1362,
	2781, 2184, 1208, 1197, 2213, 4556, 1192, 1175, 1352, 1353,
	1354, 4011, 4098, 1174, 2610, 1169, 2112, 1346, 1347, 1348,
	1349, 1350, 1351, 82, 1160, 1158, 1151, 912, 138, 1273,
	137, 912, 912, 3090, 1293, 2616, 4436, 1150, 2589, 1149,
	1050, 1145, 2445, 2645, 3093, 2207, 4156, 665, 142, 2618,
	1035, 1171, 138, 2206, 137, 2205, 3144, 2280, 176, 3143,
	84, 3442, 1318, 3717, 2133, 3533, 1266, 2086, 2085, 1184,
	3629, 1073, 3242, 4455, 1035, 1824, 3095, 971, 971, 697,
	971, 4497, 2614, 3239, 3060, 4249, 1210, 4116, 971, 971,
	971, 3338, 971, 680, 2896, 3305, 1001, 2613, 4033, 2148,
	2138, 2677, 2549, 2590, 888, 1182, 4555, 760, 4064, 1325,
	4524, 1152, 3094, 3226, 3033, 2856, 2059, 664, 2705, 4255,
	2696, 4523, 3644, 3089, 1052, 2691, 2616, 1305, 1005, 3044,
	2784, 1187, 3351, 3352, 3353, 3096, 3672, 1186, 2211, 1362,
	2561, 3345, 3346, 3347, 3348, 3349, 3350, 2011, 1352, 1353,
	1354, 890, 802, 4498, 1172, 3268, 3573, 1346, 1347, 1348,
	1349, 1350, 1351, 1213, 3534, 3091, 684, 4454, 681, 2406,
	3695, 686, 1346, 1347, 1348, 1349, 1350, 1351, 3694, 4256,
	4525, 2309, 915, 662, 2004, 4032, 3810, 971, 2613, 692,
	1157, 971, 971, 971, 971, 2615, 2048, 2003, 3798, 3437,
	696, 3573, 2619, 3306, 4398, 3090, 3862, 947, 4247, 2453,
	88, 2455, 2075, 4157, 3466, 1975, 3093, 2122, 4002, 2478,
	2478, 4003, 3227, 2611, 4004, 3042, 79, 2091, 692, 87,
	3191, 678, 1002, 81, 4384, 3033, 2630, 3772, 1205, 85,
	4096, 3206, 4005, 1202, 4293, 86, 1204, 81, 2138, 4238,
	2127, 4277, 3158, 646, 663, 4719, 4393, 3077, 2401, 2405,
	3139, 2407, 2569, 2609, 3600, 3832, 3861, 1183, 83, 664,
	3771, 1180, 2580, 2433, 3647, 3502, 2603, 3467, 3587, 4007,
	692, 4718, 1855, 2137, 2091, 2767, 2615, 2170, 3043, 4006,
	4395, 4394, 3847, 2619, 1026, 3089, 898, 1846, 2404, 4008,
	4261, 2005, 933, 1188, 2633, 692, 803, 4155, 4669, 646,
	2199, 2122, 3860, 2204, 933, 935, 636, 2624, 933, 935,
	1082, 3503, 3839, 4387, 3153, 3368, 646, 646, 4452, 2430,
	2091, 2411, 4516, 1832, 4234, 662, 1008, 3091, 2542, 2220,
	2667, 3630, 2671, 3243, 1304, 3493, 2623, 4276, 2139, 886,
	97, 4075, 2140, 3675, 3240, 785, 1170, 3267, 2660, 2643,
	2644, 719, 646, 92, 804, 1212, 3132, 1326, 2392, 2681,
	1303, 2533, 2398, 2121, 646, 767, 1081, 1852, 3574, 3567,
	2533, 929, 2412, 4370, 896, 1852, 1959, 3665, 692, 692,
	896, 2638, 2432, 3080, 1269, 1036, 916, 3460, 646, 1362,
	3664, 2551, 646, 4597, 3501, 1163, 663, 2481, 1352, 1353,
	1354, 3390, 1246, 1235, 971, 1250, 1251, 1346, 1347, 1348,
	1349, 1350, 1351, 3574, 2565, 698, 2460, 1163, 3393, 4009,
	4010, 2945, 709, 710, 711, 4499, 3768, 3575, 3731, 4708,
	4714, 4522, 2237, 4180, 4771, 4014, 2531, 4622, 3557, 2640,
	4767, 2600, 1362, 2731, 2898, 3956, 2963, 2947, 2241, 219,
	2240, 1352, 1353, 1354, 4770, 4766, 4181, 2121, 4724, 4723,
	1346, 1347, 1348, 1349, 1350, 1351, 2861, 2629, 4774, 4197,
	3576, 4744, 3575, 2461, 4743, 692, 790, 4749, 4747, 790,
	697, 790, 790, 4750, 4748, 4198, 2139, 4728, 1215, 3648,
	2140, 4759, 732, 4727, 4729, 4730, 732, 732, 4726, 4758,
	2655, 4746, 4745, 2456, 4725, 934, 971, 4267, 2817, 2484,
	2822, 2823, 692, 3588, 3518, 3576, 1263, 934, 1144, 885,
	2778, 934, 1061, 2480, 2480, 786, 3500, 2239, 2763, 4721,
	971, 718, 2742, 3178, 2927, 4704, 3589, 3152, 971, 3756,
	4705, 3492, 3180, 4303, 1258, 2571, 2566, 3391, 2568, 788,
	4040, 971, 799, 2567, 799, 799, 3838, 2777, 1068, 2478,
	2779, 2780, 4707, 2642, 1080, 1162, 646, 2946, 4015, 2737,
	2821, 3558, 2552, 2741, 3796, 3156, 2010, 2899, 911, 4765,
	2238, 4764, 3135, 2022, 3039, 2842, 1859, 1162, 4344, 971,
	971, 4196, 2901, 4471, 2824, 971, 2575, 2902, 2582, 2583,
	2584, 2585, 2586, 2648, 2903, 929, 2077, 1313, 2480, 1198,
	1032, 971, 971, 2900, 4690, 4652, 971, 4578, 4577, 4713,
	4473, 4686, 697, 4476, 3177, 971, 3426, 2724, 4753, 4472,
	4615, 971, 732, 2727, 2728, 4478, 4474, 3967, 1859, 2168,
	1859, 3830, 971, 3782, 2634, 636, 2932, 1257, 3408, 3066,
	2866, 971, 971, 971, 2715, 2601, 2550, 2495, 2124, 1079,
	1334, 1067, 1274, 732, 4677, 3737, 971, 4682, 2171, 732,
	2954, 4680, 2180, 4681, 4683, 2795, 2103, 2170, 905, 2483,
	4349, 4350, 2745, 2744, 4484, 4482, 3734, 2837, 1975, 971,
	4190, 2699, 4348, 3951, 971, 4188, 2169, 2987, 2987, 790,
	3982, 2478, 2987, 2987, 2987, 4191, 3952, 2762, 3991, 4353,
	4490, 4491, 2913, 3987, 2449, 2450, 3011, 2183, 4475, 2855,
	4712, 2962, 4352, 636, 646, 3, 646, 646, 4489, 2703,
	1985, 646, 646, 2787, 3724, 2961, 4403, 2788, 4404, 3763,
	2786, 2787, 4403, 4404, 4655, 2714, 2847, 2790, 724, 2720,
	1288, 1288, 4483, 1288, 692, 2172, 3048, 219, 2323, 2324,
	2814, 4679, 4165, 4684, 3316, 3317, 2729, 3207, 2702, 2734,
	2799, 2266, 2704, 839, 1279, 3981, 104, 105, 106, 107,
	1011, 724, 3984, 3985, 3541, 3008, 3009, 4331, 724, 2961,
	2869, 4330, 4162, 2874, 732, 646, 911, 2910, 839, 2840,
	2701, 2845, 4164, 4163, 2846, 3950, 2915, 887, 636, 3020,
	826, 2849, 2848, 100, 2314, 3993, 3986, 713, 3989, 3990,
	3992, 3988, 2027, 4489, 4574, 656, 3542, 3562, 2858, 2936,
	2859, 2454, 646, 646, 2959, 3063, 3746, 2978, 2983, 2981,
	2982, 2980, 3078, 2976, 2979, 3745, 2939, 2440, 4720, 756,
	2972, 222, 205, 732, 3021, 732, 732, 732, 732, 4611,
	3543, 3544, 3545, 3151, 1826, 2881, 971, 4060, 2893, 2883,
	2070, 2894, 3023, 2480, 4295, 3154, 3028, 2666, 911, 911,
	3272, 4612, 3822, 3669, 3668, 103, 3435, 2338, 2995, 2186,
	971, 2185, 2029, 3056, 1979, 1978, 617, 2917, 619, 621,
	212, 2439, 3416, 3747, 3065, 3057, 3059, 4773, 3214, 3411,
	2926, 3410, 2929, 3065, 3100, 2662, 4757, 4756, 4755, 3165,
	4702, 3167, 4212, 3128, 2940, 2941, 4253, 4402, 4400, 3787,
	706, 707, 708, 3729, 2956, 3728, 3208, 3148, 3550, 700,
	701, 702, 703, 704, 705, 3478, 3459, 3099, 2968, 3386,
	3385, 2966, 3163, 2967, 3064, 3137, 3138, 3040, 2829, 2994,
	2992, 2770, 2991, 2990, 2501, 3147, 2447, 1859, 2111, 3081,
	3010, 3004, 2063, 2058, 1288, 1225, 731, 1190, 1288, 1288,
	1189, 696, 609, 1167, 3037, 1074, 986, 731, 731, 971,
	3034, 2978, 2983, 2981, 2982, 2980, 2398, 2976, 2979, 3171,
	1341, 646, 670, 666, 3681, 3045, 3046, 3319, 731, 2413,
	4547, 2137, 3058, 2480, 3049, 2480, 3414, 2983, 2981, 2982,
	2980, 731, 731, 4463, 4462, 4354, 3264, 4178, 3940, 3898,
	3120, 3774, 3231, 3232, 3067, 731, 731, 731, 3005, 2978,
	2983, 2981, 2982, 2980, 3682, 2976, 2979, 3621, 3618, 3479,
	692, 692, 2826, 3392, 2827, 3097, 2828, 3123, 3072, 2830,
	692, 2147, 2144, 937, 935, 3145, 3118, 3119, 2868, 731,
	2296, 2839, 3170, 3308, 2851, 2865, 3169, 3808, 3849, 3133,
	3807, 4635, 2463, 3204, 2270, 971, 2934, 3850, 646, 2271,
	4636, 4047, 3275, 2274, 3276, 3277, 971, 2276, 646, 911,
	646, 4536, 4124, 3307, 2850, 646, 3851, 971, 971, 3848,
	3162, 971, 971, 971, 3273, 971, 1983, 3164, 3337, 1982,
	2071, 3001, 2895, 2328, 669, 2984, 971, 3186, 658, 3237,
	2996, 2997, 2998, 1330, 3193, 2291, 2293, 971, 971, 3197,
	3179, 3314, 4121, 971, 3915, 971, 3893, 3888, 3247, 3887,
	3639, 3638, 3115, 3631, 3626, 3539, 3288, 3287, 971, 922,
	3258, 3286, 3285, 3284, 3373, 971, 3283, 3279, 971, 3278,
	3270, 3259, 3257, 971, 971, 3233, 3245, 1852, 971, 971,
	3244, 2312, 2312, 3241, 3175, 3174, 3173, 2882, 2382, 4232,
	2880, 2811, 971, 2783, 2764, 2364, 2453, 2230, 2647, 2381,
	2382, 2273, 1975, 2227, 2222, 2215, 2478, 3123, 2201, 2478,
	2197, 2196, 2195, 2190, 2189, 2182, 2181, 3419, 3262, 2167,
	2987, 2987, 2987, 2987, 2987, 2166, 2165, 2163, 2136, 2132,
	2125, 1980, 2876, 971, 971, 2340, 971, 2341, 2835, 2834,
	914, 903, 2272, 2411, 2091, 4599, 4565, 3447, 905, 905,
	636, 2361, 4598, 4361, 3493, 973, 905, 3946, 2359, 2362,
	2358, 981, 2360, 3945, 971, 3877, 3310, 3873, 3793, 3726,
	3725, 3304, 3465, 3027, 672, 2759, 2756, 2752, 3840, 3401,
	3402, 2641, 2158, 1195, 1117, 971, 971, 3291, 3142, 2200,
	1111, 3299, 976, 3933, 3300, 646, 977, 1985, 975, 2397,
	641, 1004, 2916, 905, 4673, 2174, 3821, 143, 3870, 2396,
	3507, 4699, 4698, 3934, 2173, 687, 2498, 692, 3784, 1080,
	642, 2844, 4242, 971, 646, 4241, 3363, 3651, 3487, 3323,
	3324, 3325, 3326, 3867, 1220, 3452, 909, 3778, 1826, 3290,
	3182, 2580, 3494, 3455, 3339, 1221, 3448, 692, 2654, 3378,
	3379, 3381, 3457, 3250, 2622, 3405, 2502, 3255, 2053, 2045,
	2806, 1995, 2809, 3377, 1989, 1077, 1066, 1060, 1056, 1038,
	4557, 3979, 658, 3367, 4108, 4107, 3446, 3666, 3564, 3261,
	646, 3371, 3211, 3209, 3537, 3181, 3149, 3024, 2606, 2602,
	2478, 2633, 696, 3409, 3384, 2500, 3412, 3552, 2496, 3520,
	3530, 3486, 2283, 3394, 2281, 3396, 2161, 3397, 2051, 2157,
	2064, 912, 2091, 3407, 2533, 3100, 3568, 3387, 3388, 3404,
	1985, 3477, 3413, 1985, 2049, 1985, 3584, 2041, 3484, 3471,
	2039, 3472, 2533, 2533, 3417, 3418, 2021, 2366, 1262, 1261,
	3606, 1260, 1254, 3432, 1229, 1226, 3514, 2370, 3099, 2368,
	3583, 1222, 2398, 2365, 3438, 2367, 2369, 1217, 1207, 3515,
	3579, 1168, 3528, 3210, 2860, 3212, 2681, 3454, 3610, 1138,
	1135, 3481, 1116, 3430, 1110, 3875, 3874, 2808, 2020, 3591,
	1026, 3547, 3546, 875, 3522, 3523, 3556, 4570, 4466, 2531,
	4407, 3468, 4396, 1040, 4314, 4088, 2904, 2909, 3482, 4110,
	3476, 2398, 4026, 3966, 3480, 3878, 3834, 3820, 3811, 2268,
	3596, 3599, 3667, 3019, 2627, 2621, 1270, 2076, 1970, 1944,
	2480, 2294, 2302, 2480, 2942, 2943, 2292, 981, 981, 4711,
	2853, 3483, 981, 4691, 696, 3474, 981, 4534, 905, 1852,
	2479, 2479, 3505, 971, 3571, 3260, 697, 3578, 4273, 3580,
	3511, 2625, 3157, 4233, 646, 646, 646, 646, 3100, 2143,
	3519, 971, 971, 3434, 3521, 1302, 1961, 971, 971, 3529,
	907, 3609, 1292, 2379, 971, 3794, 971, 971, 971, 971,
	971, 971, 971, 971, 971, 971, 971, 971, 4046, 3526,
	971, 3099, 3563, 3551, 3548, 3554, 971, 4514, 3513, 4041,
	3801, 971, 4236, 3007, 4043, 3007, 4389, 971, 4039, 2002,
	4034, 971, 3035, 2511, 3038, 2505, 3025, 3601, 3597, 1859,
	2646, 3598, 1123, 971, 2528, 2479, 2524, 604, 3036, 912,
	3584, 605, 3302, 211, 3608, 2657, 3679, 971, 2175, 2556,
	2008, 2478, 2478, 3604, 3613, 2478, 3489, 2007, 3421, 3422,
	3423, 3424, 4053, 4052, 1859, 3738, 2987, 3809, 790, 4260,
	3806, 3645, 2628, 2768, 3628, 3538, 3540, 2371, 3155, 3633,
	685, 3657, 2626, 1072, 2212, 4272, 3535, 2810, 2588, 2242,
	2091, 692, 3113, 3112, 39, 38, 37, 36, 35, 34,
	1125, 33, 32, 59, 58, 3103, 57, 3656, 3773, 56,
	55, 2051, 3114, 3785, 2480, 2480, 1859, 54, 53, 646,
	52, 912, 912, 51, 50, 49, 48, 2860, 47, 1985,
	46, 732, 45, 44, 43, 1859, 2795, 971, 42, 41,
	40, 3769, 31, 30, 3141, 29, 28, 27, 692, 26,
	2480, 2634, 25, 24, 23, 22, 21, 2091, 731, 20,
	3788, 2607, 731, 731, 69, 3779, 68, 2375, 2376, 2377,
	2378, 67, 66, 790, 2372, 65, 64, 63, 5, 62,
	60, 17, 2015, 125, 3750, 1009, 3585, 3819, 732, 732,
	2025, 2633, 2329, 3777, 3202, 3825, 971, 3183, 3565, 179,
	2243, 2816, 1113, 4588, 2679, 2091, 3727, 2825, 3854, 3732,
	3730, 4371, 3719, 3441, 112, 4248, 3377, 3085, 3082, 3816,
	3817, 732, 3572, 1124, 3439, 4278, 3581, 971, 732, 3791,
	3445, 2491, 3828, 3443, 2488, 4651, 4678, 3751, 3742, 3743,
	3853, 4343, 3748, 3235, 2949, 3826, 3837, 3856, 3389, 2944,
	2533, 2427, 1858, 3812, 4479, 4186, 3971, 3780, 4469, 3789,
	3965, 3752, 2577, 95, 4161, 3949, 2438, 1977, 74, 640,
	639, 4465, 942, 3203, 4202, 4365, 3994, 3765, 3983, 3433,
	3767, 109, 3740, 1981, 3762, 3761, 4351, 4347, 3804, 4346,
	3398, 2446, 3591, 971, 3842, 3759, 732, 2459, 731, 3813,
	2479, 3814, 1965, 16, 1858, 3871, 1858, 15, 14, 11,
	10, 221, 9, 8, 3903, 1126, 7, 4149, 4147, 4148,
	4146, 2386, 971, 699, 3829, 1370, 2315, 936, 1333, 731,
	971, 971, 971, 928, 4154, 731, 3372, 3716, 3289, 4140,
	1843, 859, 912, 3841, 858, 1127, 843, 845, 1128, 861,
	860, 844, 1129, 3843, 2480, 1233, 842, 841, 867, 2668,
	3295, 2402, 966, 965, 1994, 2480, 2480, 2409, 2925, 2480,
	1841, 960, 961, 3890, 1130, 956, 3892, 1324, 1321, 3932,
	2700, 3213, 2480, 3234, 2706, 3852, 4294, 971, 2478, 2807,
	3585, 1377, 1372, 2, 3879, 1, 0, 971, 971, 971,
	0, 0, 0, 1288, 3883, 3876, 0, 3333, 3334, 1288,
	1288, 646, 1133, 3880, 0, 4016, 0, 3447, 3754, 0,
	0, 0, 0, 646, 0, 3996, 0, 3584, 646, 1131,
	0, 0, 3357, 3358, 0, 0, 730, 3999, 0, 0,
	2479, 0, 2479, 0, 0, 0, 1132, 730, 730, 2795,
	0, 0, 0, 0, 0, 0, 2428, 0, 0, 2795,
	731, 0, 792, 0, 0, 0, 0, 792, 730, 0,
	0, 646, 792, 0, 792, 0, 0, 4027, 0, 0,
	3537, 730, 730, 1134, 4019, 0, 790, 0, 4080, 692,
	0, 1288, 865, 865, 0, 730, 730, 730, 3882, 0,
	3673, 0, 0, 0, 0, 2480, 4074, 3584, 697, 0,
	692, 692, 0, 3961, 732, 4086, 0, 3948, 0, 731,
	4021, 731, 731, 731, 731, 3957, 4103, 0, 4012, 730,
	4017, 3583, 0, 4061, 3111, 0, 3939, 4057, 0, 3941,
	0, 2634, 3980, 0, 4056, 0, 3446, 4000, 697, 790,
	1288, 3997, 0, 0, 3977, 0, 0, 3976, 0, 799,
	4077, 61, 0, 2852, 2852, 0, 4089, 19, 4028, 4036,
	4035, 4142, 18, 971, 4031, 3960, 4118, 0, 4128, 1859,
	0, 971, 0, 0, 91, 0, 0, 0, 0, 0,
	0, 0, 4081, 4083, 13, 3584, 732, 732, 4101, 4094,
	12, 4166, 0, 0, 0, 790, 3103, 0, 4176, 0,
	971, 0, 0, 0, 0, 971, 732, 732, 3497, 4167,
	971, 0, 799, 0, 0, 0, 732, 4100, 2860, 4097,
	4111, 4099, 0, 1858, 0, 0, 3100, 0, 4126, 0,
	0, 0, 0, 0, 0, 4208, 0, 0, 0, 4112,
	4127, 4125, 0, 4123, 4130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3099,
	0, 4209, 0, 0, 3524, 3525, 0, 3527, 0, 0,
	4203, 4177, 4168, 4160, 0, 0, 0, 4217, 646, 0,
	0, 0, 0, 0, 911, 0, 0, 0, 0, 0,
	0, 4171, 2480, 0, 3559, 0, 4172, 971, 0, 0,
	0, 0, 0, 0, 0, 1859, 1859, 1859, 4246, 0,
	0, 790, 4169, 4239, 0, 2478, 4219, 0, 0, 0,
	0, 0, 0, 971, 971, 4213, 0, 4245, 0, 646,
	0, 2480, 0, 0, 0, 4263, 0, 4218, 0, 3103,
	971, 4268, 4224, 0, 0, 4192, 4193, 0, 4226, 4194,
	4195, 4220, 4158, 0, 4216, 0, 0, 4228, 0, 3292,
	4227, 2860, 0, 0, 971, 732, 4235, 3585, 3297, 0,
	0, 1288, 1288, 0, 0, 0, 0, 0, 4243, 4280,
	0, 971, 0, 0, 4271, 0, 971, 971, 971, 4265,
	3791, 4269, 4262, 1985, 0, 4275, 1975, 4299, 3884, 3885,
	0, 4289, 4266, 0, 2580, 0, 4274, 732, 0, 3663,
	4283, 2480, 4285, 971, 4287, 4290, 4291, 0, 4345, 0,
	0, 0, 0, 0, 1288, 0, 0, 1985, 3902, 1985,
	0, 0, 4304, 4342, 0, 0, 4332, 0, 732, 4307,
	4308, 0, 0, 0, 0, 0, 4373, 3585, 0, 0,
	3996, 0, 0, 4369, 3916, 4327, 4328, 4368, 696, 3136,
	0, 3698, 3699, 3700, 3701, 3702, 3703, 3704, 3705, 3706,
	3707, 3708, 3709, 0, 0, 4334, 0, 4378, 0, 4376,
	4204, 4367, 4339, 4340, 0, 0, 0, 0, 636, 0,
	0, 0, 692, 0, 4382, 911, 0, 0, 4364, 2480,
	0, 0, 0, 0, 4281, 4282, 0, 0, 0, 2480,
	0, 0, 0, 4377, 0, 1985, 0, 4329, 0, 697,
	0, 4386, 0, 0, 0, 0, 971, 4379, 0, 4409,
	0, 0, 0, 0, 0, 3585, 0, 2479, 0, 0,
	2479, 792, 792, 0, 4142, 3754, 971, 4399, 971, 971,
	4405, 4359, 4401, 4362, 971, 0, 0, 792, 0, 0,
	0, 0, 0, 0, 0, 4424, 0, 4176, 0, 0,
	4464, 4427, 971, 4411, 0, 971, 0, 0, 2905, 2905,
	0, 792, 792, 3795, 0, 792, 4453, 4430, 4428, 4421,
	0, 4423, 1985, 4425, 4439, 4392, 0, 0, 0, 0,
	0, 0, 4447, 4446, 4445, 0, 971, 0, 0, 4426,
	4496, 0, 0, 4459, 4460, 0, 3584, 0, 0, 971,
	0, 4468, 0, 4515, 4505, 790, 790, 4512, 0, 2480,
	3824, 0, 4502, 4503, 0, 4506, 4509, 0, 0, 4422,
	4507, 0, 0, 0, 0, 0, 0, 2291, 2293, 0,
	0, 0, 3504, 0, 4517, 4518, 0, 0, 0, 0,
	0, 0, 0, 4541, 0, 0, 4511, 0, 865, 0,
	0, 790, 0, 0, 4508, 0, 732, 4532, 0, 0,
	0, 971, 0, 0, 0, 2137, 0, 4526, 4537, 0,
	4539, 4529, 4558, 1985, 1985, 4535, 4540, 4561, 799, 799,
	4548, 0, 971, 971, 0, 4280, 971, 4544, 4545, 0,
	4543, 0, 4519, 0, 1975, 0, 4492, 0, 2453, 0,
	0, 2479, 2479, 0, 0, 0, 0, 4552, 0, 4448,
	4449, 732, 4373, 692, 692, 732, 732, 0, 4572, 0,
	0, 3584, 4562, 790, 799, 0, 0, 4583, 0, 4580,
	4581, 0, 0, 4567, 4571, 4585, 4573, 2479, 0, 4587,
	2480, 0, 0, 4576, 0, 4589, 4586, 4579, 4584, 4367,
	0, 0, 0, 0, 0, 0, 0, 0, 692, 0,
	0, 0, 0, 911, 0, 3917, 3918, 0, 971, 4596,
	0, 0, 0, 0, 0, 4600, 4374, 0, 730, 4618,
	971, 0, 730, 730, 4603, 0, 971, 0, 4604, 0,
	0, 0, 0, 1859, 0, 1859, 4591, 4559, 4560, 4621,
	4610, 4605, 0, 0, 0, 0, 1859, 4627, 0, 4629,
	4620, 0, 4626, 971, 0, 792, 0, 792, 0, 792,
	3670, 4625, 0, 4643, 4644, 4645, 4176, 4632, 4628, 4634,
	792, 792, 792, 792, 792, 0, 692, 4642, 0, 0,
	0, 792, 3584, 4653, 4654, 0, 4639, 4660, 4658, 4646,
	4641, 0, 4657, 0, 0, 1858, 4659, 4637, 4638, 4618,
	792, 0, 4668, 0, 0, 4662, 4661, 0, 3697, 3998,
	0, 0, 1857, 792, 0, 4688, 792, 0, 0, 4685,
	0, 4693, 0, 0, 0, 0, 0, 4692, 971, 4697,
	1858, 0, 4694, 0, 0, 0, 0, 0, 0, 4700,
	0, 0, 0, 0, 0, 1288, 0, 0, 790, 0,
	2480, 0, 4709, 4710, 865, 0, 4715, 0, 730, 4716,
	0, 865, 0, 0, 1857, 4668, 1857, 4732, 4731, 790,
	790, 4740, 0, 4736, 4742, 4735, 2291, 2293, 0, 0,
	0, 2479, 1858, 0, 4618, 0, 3585, 4751, 4752, 730,
	0, 4754, 2479, 2479, 0, 730, 2479, 731, 4738, 4739,
	0, 1858, 0, 4742, 4760, 0, 4668, 4624, 0, 2479,
	0, 0, 0, 4618, 0, 1288, 4769, 4768, 0, 0,
	0, 4717, 0, 0, 0, 0, 0, 3103, 3797, 0,
	696, 0, 0, 0, 4640, 0, 0, 0, 0, 0,
	0, 0, 799, 799, 0, 865, 0, 0, 0, 2860,
	0, 0, 0, 0, 731, 731, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2480, 0, 0, 0,
	696, 0, 0, 0, 0, 2480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 731, 1288, 0,
	0, 0, 0, 0, 731, 0, 1123, 0, 0, 2905,
	2905, 0, 4374, 0, 0, 0, 0, 0, 0, 0,
	4185, 3585, 0, 0, 0, 0, 0, 0, 0, 0,
	730, 0, 0, 0, 2905, 2905, 0, 0, 1859, 0,
	0, 0, 2479, 0, 4199, 0, 0, 912, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 865,
	0, 865, 1288, 0, 792, 732, 0, 0, 0, 0,
	0, 0, 731, 0, 1125, 0, 0, 3881, 0, 0,
	0, 0, 0, 0, 0, 0, 865, 0, 0, 730,
	0, 730, 730, 730, 730, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1373, 3909, 0,
	1343, 0, 0, 0, 1355, 1356, 1357, 0, 0, 0,
	3428, 0, 0, 0, 0, 0, 1950, 0, 0, 1951,
	0, 3919, 3585, 1956, 732, 1948, 0, 732, 0, 0,
	1953, 1957, 1952, 0, 1954, 0, 792, 0, 1955, 1366,
	1367, 1949, 0, 792, 792, 0, 0, 0, 1958, 0,
	0, 0, 0, 0, 792, 865, 0, 0, 792, 792,
	792, 792, 792, 792, 792, 792, 792, 792, 792, 792,
	792, 792, 792, 792, 0, 792, 0, 1124, 3943, 0,
	0, 0, 0, 1857, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2905, 0, 0, 0, 0, 0, 0, 0, 1373, 0,
	0, 1343, 0, 0, 0, 1355, 1356, 1357, 0, 2479,
	0, 0, 0, 4355, 4356, 4357, 4358, 1950, 0, 0,
	1951, 0, 0, 0, 1956, 0, 1948, 0, 912, 0,
	0, 1953, 1957, 1952, 0, 1954, 0, 0, 0, 1955,
	1366, 1367, 1949, 0, 1373, 0, 0, 1343, 2479, 1958,
	0, 1355, 1356, 1357, 0, 0, 0, 0, 0, 1126,
	731, 0, 1859, 1950, 0, 0, 1951, 0, 1123, 0,
	1956, 0, 1948, 0, 789, 0, 0, 1953, 1957, 1952,
	0, 1954, 0, 0, 0, 1955, 1366, 1367, 1949, 1127,
	0, 0, 1128, 0, 0, 1958, 1129, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1994, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1130, 77,
	0, 0, 0, 76, 78, 1858, 0, 0, 2479, 0,
	0, 696, 0, 96, 0, 0, 1125, 0, 0, 0,
	0, 0, 731, 731, 0, 1288, 0, 0, 0, 0,
	0, 0, 0, 0, 1288, 1288, 1133, 0, 0, 0,
	93, 0, 731, 731, 94, 0, 0, 4137, 4139, 0,
	0, 0, 731, 1131, 0, 0, 0, 0, 0, 0,
	1373, 0, 0, 1343, 98, 0, 0, 1355, 1356, 1357,
	1132, 80, 3907, 3908, 732, 0, 0, 3911, 3912, 1950,
	0, 0, 1951, 0, 0, 0, 1956, 0, 1948, 75,
	0, 0, 0, 1953, 1957, 1952, 2479, 1954, 0, 0,
	0, 1955, 1366, 1367, 1949, 0, 2479, 1134, 0, 0,
	0, 1958, 2890, 0, 2888, 0, 0, 0, 2886, 0,
	2887, 2889, 0, 2905, 2905, 2905, 2905, 2905, 2905, 2905,
	2905, 2905, 2905, 2905, 2905, 846, 846, 0, 0, 1124,
	0, 1858, 1858, 1858, 0, 0, 0, 0, 0, 0,
	0, 1373, 0, 0, 1343, 0, 0, 0, 1355, 1356,
	1357, 4230, 0, 0, 0, 0, 4527, 4563, 4564, 82,
	1950, 4566, 732, 1951, 0, 0, 0, 1956, 0, 1948,
	0, 0, 0, 0, 1953, 1957, 1952, 0, 1954, 0,
	71, 0, 1955, 1366, 1367, 1949, 912, 0, 0, 0,
	0, 731, 1958, 0, 0, 0, 84, 0, 0, 0,
	0, 0, 0, 0, 3592, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2479, 0, 0, 0,
	0, 1126, 0, 0, 0, 0, 0, 0, 2379, 0,
	0, 0, 0, 731, 70, 1859, 0, 0, 0, 0,
	0, 0, 0, 4306, 0, 4306, 4306, 0, 0, 0,
	0, 1127, 0, 0, 1128, 0, 0, 732, 1129, 0,
	0, 0, 0, 1362, 731, 0, 0, 0, 0, 0,
	1994, 0, 1352, 1353, 1354, 0, 0, 0, 0, 4592,
	1130, 1346, 1347, 1348, 1349, 1350, 1351, 0, 0, 0,
	4337, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1288, 114, 792, 792,
	0, 792, 0, 0, 143, 0, 0, 0, 1133, 792,
	792, 792, 2891, 792, 4667, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 0, 1131, 117, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 88, 2479, 0, 0,
	1859, 0, 1132, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 0, 0, 87, 0, 1859, 0, 81,
	0, 0, 0, 732, 1362, 85, 0, 0, 124, 0,
	0, 86, 0, 1352, 1353, 1354, 0, 4667, 0, 1134,
	4582, 0, 1346, 1347, 1348, 1349, 1350, 1351, 0, 0,
	0, 0, 0, 0, 83, 0, 0, 0, 0, 0,
	0, 0, 2375, 2376, 2377, 2378, 1288, 0, 792, 2892,
	1362, 0, 792, 792, 792, 792, 0, 0, 4667, 1352,
	1353, 1354, 0, 0, 0, 0, 4444, 0, 1346, 1347,
	1348, 1349, 1350, 1351, 0, 0, 0, 0, 0, 0,
	792, 792, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	1373, 0, 865, 1343, 0, 0, 0, 1355, 1356, 1357,
	0, 865, 4187, 0, 0, 0, 97, 0, 0, 1950,
	0, 0, 1951, 0, 0, 1857, 1956, 0, 1948, 92,
	120, 0, 731, 1953, 1957, 1952, 0, 1954, 0, 0,
	0, 1955, 1366, 1367, 1949, 0, 0, 2479, 0, 0,
	0, 1958, 0, 0, 3968, 2905, 0, 0, 0, 0,
	1857, 0, 0, 0, 0, 792, 116, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 865, 0,
	0, 121, 0, 0, 0, 4549, 1362, 731, 0, 122,
	0, 731, 731, 865, 140, 1352, 1353, 1354, 0, 0,
	0, 0, 4429, 0, 1346, 1347, 1348, 1349, 1350, 1351,
	0, 0, 1857, 732, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 730, 0, 0,
	0, 1857, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2479, 0, 0, 0, 0, 0, 1858,
	0, 1858, 2479, 0, 0, 792, 0, 1362, 0, 0,
	128, 0, 1858, 0, 730, 730, 1352, 1353, 1354, 0,
	0, 732, 131, 4406, 0, 1346, 1347, 1348, 1349, 1350,
	1351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 135, 0, 0, 0, 0, 0, 730, 0, 115,
	0, 0, 0, 0, 730, 0, 0, 123, 0, 0,
	4418, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 846, 0, 130, 0, 0, 0, 792, 132, 865,
	792, 0, 792, 792, 127, 865, 138, 0, 137, 119,
	0, 0, 4650, 0, 0, 0, 1859, 4179, 0, 118,
	0, 0, 2905, 0, 0, 0, 142, 792, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 730, 2479, 0, 0, 0, 0, 0, 0,
	0, 792, 0, 0, 0, 1373, 0, 0, 1343, 792,
	0, 0, 1355, 1356, 1357, 0, 0, 133, 0, 0,
	0, 0, 792, 0, 1950, 0, 0, 1951, 0, 1859,
	792, 1956, 0, 1948, 0, 0, 0, 0, 1953, 1957,
	1952, 0, 1954, 0, 0, 0, 1955, 1366, 1367, 1949,
	0, 0, 0, 0, 0, 0, 1958, 0, 0, 0,
	792, 792, 0, 2507, 1123, 0, 792, 0, 0, 0,
	0, 2520, 3593, 0, 0, 0, 0, 0, 0, 0,
	0, 2173, 792, 792, 0, 0, 0, 792, 0, 0,
	0, 0, 1859, 0, 0, 0, 792, 0, 0, 0,
	0, 0, 792, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 792, 0, 0, 0, 0, 0, 0,
	0, 0, 792, 792, 792, 0, 0, 0, 0, 0,
	0, 0, 1125, 1859, 2526, 0, 0, 792, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	792, 0, 0, 0, 1858, 792, 0, 0, 2522, 0,
	792, 0, 792, 0, 0, 0, 0, 0, 0, 0,
	2905, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 731, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 865, 1362, 846, 0, 0,
	730, 0, 0, 0, 846, 1352, 1353, 1354, 0, 0,
	0, 0, 0, 0, 1346, 1347, 1348, 1349, 1350, 1351,
	0, 0, 0, 0, 865, 865, 0, 0, 0, 0,
	0, 0, 0, 865, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1124, 2512, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	731, 0, 3567, 731, 0, 1857, 865, 0, 2521, 0,
	0, 0, 865, 4665, 0, 0, 0, 0, 3590, 0,
	0, 0, 730, 730, 0, 0, 0, 0, 846, 0,
	0, 1373, 0, 0, 1343, 0, 0, 0, 1355, 1356,
	1357, 0, 730, 730, 0, 0, 0, 3594, 2517, 0,
	1950, 0, 730, 1951, 0, 834, 0, 1956, 0, 1948,
	3592, 0, 0, 0, 1953, 1957, 1952, 792, 1954, 4477,
	0, 2514, 1955, 1366, 1367, 1949, 4665, 1126, 1373, 0,
	0, 1343, 1958, 0, 0, 1355, 1356, 1357, 0, 0,
	0, 792, 2508, 0, 0, 2519, 0, 1950, 0, 0,
	1951, 0, 0, 0, 1956, 0, 1948, 1127, 0, 0,
	1128, 1953, 1957, 1952, 1129, 1954, 0, 4665, 0, 1955,
	1366, 1367, 1949, 0, 0, 0, 1994, 0, 0, 1958,
	0, 0, 846, 0, 846, 0, 1130, 2525, 0, 0,
	0, 1857, 1857, 1857, 0, 0, 0, 0, 1858, 0,
	0, 0, 652, 652, 0, 0, 0, 0, 0, 846,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 1133, 2543, 0, 716, 0, 720,
	0, 0, 0, 758, 759, 0, 0, 764, 765, 2518,
	792, 1131, 0, 0, 0, 0, 0, 0, 0, 2905,
	2905, 730, 0, 2905, 0, 2515, 0, 0, 1132, 796,
	3595, 3185, 2513, 0, 0, 805, 2523, 808, 0, 810,
	811, 812, 813, 814, 0, 0, 0, 823, 0, 2509,
	0, 828, 0, 0, 0, 835, 0, 0, 0, 0,
	0, 1362, 0, 730, 0, 1134, 0, 865, 846, 0,
	1352, 1353, 1354, 2516, 0, 2510, 865, 4134, 0, 1346,
	1347, 1348, 1349, 1350, 1351, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 730, 0, 0, 0, 0, 0,
	731, 0, 0, 0, 0, 0, 792, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 792, 0, 0,
	0, 0, 0, 2110, 0, 0, 0, 0, 792, 792,
	0, 0, 792, 792, 792, 0, 792, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 792, 0, 0,
	0, 962, 73, 0, 0, 0, 0, 0, 792, 792,
	0, 0, 0, 0, 792, 0, 792, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 792,
	0, 0, 0, 0, 0, 0, 792, 0, 0, 792,
	0, 0, 0, 0, 792, 792, 0, 0, 731, 792,
	792, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 792, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 792, 0, 0,
	792, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 635, 637, 0, 0, 0, 0, 0,
	0, 73, 0, 0, 792, 792, 0, 792, 0, 0,
	73, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1858, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 792, 0, 0, 0, 0,
	0, 0, 0, 731, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 865, 792, 792, 865, 0,
	865, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 865, 865, 1000, 0, 865, 0, 0,
	0, 0, 730, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 792, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1362, 0, 0,
	865, 0, 0, 0, 0, 0, 1352, 1353, 1354, 763,
	0, 0, 0, 4106, 0, 1346, 1347, 1348, 1349, 1350,
	1351, 0, 0, 0, 0, 0, 1858, 730, 0, 0,
	0, 730, 730, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1858, 1362, 0, 0, 0, 0, 731,
	0, 792, 792, 1352, 1353, 1354, 0, 0, 0, 0,
	4085, 0, 1346, 1347, 1348, 1349, 1350, 1351, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 792, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1857,
	865, 1857, 950, 0, 0, 0, 1373, 0, 0, 1343,
	0, 0, 1857, 1355, 1356, 1357, 691, 0, 712, 0,
	714, 0, 0, 0, 0, 1950, 0, 0, 1951, 0,
	0, 0, 1956, 0, 1948, 0, 0, 0, 0, 1953,
	1957, 1952, 0, 1954, 0, 0, 3763, 1955, 1366, 1367,
	1949, 794, 795, 0, 797, 0, 652, 1958, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 824, 0, 827, 0, 0, 831, 865, 0,
	0, 0, 0, 0, 0, 0, 0, 1029, 0, 0,
	0, 0, 0, 0, 792, 0, 0, 0, 0, 0,
	0, 0, 2426, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 792, 792, 0, 0, 0, 0, 792, 792,
	0, 0, 0, 0, 0, 792, 865, 792, 792, 792,
	792, 792, 792, 792, 792, 792, 792, 792, 792, 0,
	0, 792, 0, 0, 0, 0, 0, 792, 0, 731,
	0, 0, 792, 0, 0, 0, 0, 0, 792, 0,
	0, 0, 792, 1071, 0, 0, 1075, 0, 0, 0,
	0, 0, 0, 0, 792, 0, 0, 0, 0, 0,
	0, 792, 0, 0, 0, 0, 0, 0, 792, 0,
	0, 0, 792, 792, 0, 0, 792, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1164, 792,
	0, 0, 0, 0, 0, 1373, 0, 0, 1343, 0,
	0, 1191, 1355, 1356, 1357, 0, 0, 731, 0, 0,
	0, 0, 0, 0, 1950, 0, 0, 1951, 0, 0,
	865, 1956, 0, 1948, 0, 0, 865, 0, 1953, 1957,
	1952, 0, 1954, 0, 0, 2539, 1955, 1366, 1367, 1949,
	0, 865, 0, 0, 2539, 0, 1958, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 792, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1857, 0, 0, 0, 0, 0,
	0, 0, 1858, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 792, 0, 1373, 0, 0, 1343,
	635, 730, 0, 1355, 1356, 1357, 0, 0, 0, 0,
	0, 846, 792, 0, 0, 1950, 0, 792, 1951, 0,
	0, 0, 1956, 0, 1948, 0, 846, 0, 0, 1953,
	1957, 1952, 0, 1954, 0, 0, 0, 1955, 1366, 1367,
	1949, 0, 0, 0, 0, 1858, 0, 1958, 792, 0,
	0, 1373, 0, 0, 1343, 0, 0, 0, 1355, 1356,
	1357, 0, 0, 1093, 0, 865, 0, 0, 1094, 0,
	1950, 0, 1103, 1951, 0, 0, 0, 1956, 0, 1948,
	730, 652, 0, 730, 1953, 1957, 1952, 0, 1954, 0,
	0, 0, 1955, 1366, 1367, 1949, 0, 0, 0, 0,
	0, 0, 1958, 0, 0, 0, 865, 0, 1858, 0,
	0, 0, 0, 0, 792, 0, 2006, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 865,
	0, 0, 0, 0, 0, 1096, 0, 0, 0, 0,
	0, 0, 0, 792, 0, 0, 0, 2042, 0, 1858,
	0, 792, 792, 792, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1102, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 945, 945, 0, 0, 0,
	0, 0, 846, 0, 0, 0, 865, 0, 846, 0,
	0, 0, 1362, 0, 0, 1107, 0, 0, 0, 0,
	0, 1352, 1353, 1354, 0, 0, 0, 0, 792, 792,
	1346, 1347, 1348, 1349, 1350, 1351, 0, 0, 792, 792,
	792, 0, 0, 0, 0, 0, 0, 0, 1857, 0,
	2162, 0, 0, 0, 0, 0, 1373, 0, 1092, 1343,
	0, 0, 0, 1355, 1356, 1357, 0, 0, 792, 1090,
	0, 0, 0, 865, 2188, 1950, 0, 0, 1951, 0,
	0, 0, 1956, 0, 1948, 1097, 0, 0, 0, 1953,
	1957, 1952, 0, 1954, 1045, 1046, 0, 1955, 1366, 1367,
	1949, 0, 0, 0, 0, 0, 0, 1958, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1091, 0,
	1099, 0, 0, 0, 0, 0, 1098, 792, 0, 2263,
	0, 0, 2265, 0, 0, 0, 0, 0, 0, 0,
	0, 1830, 0, 0, 0, 1833, 1834, 0, 792, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 865, 0,
	0, 1100, 0, 0, 0, 2426, 2426, 2426, 0, 2507,
	730, 0, 0, 0, 0, 0, 0, 2520, 0, 0,
	792, 73, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1165, 1166, 865, 865, 0, 0, 0,
	0, 0, 0, 0, 792, 0, 1101, 0, 0, 0,
	0, 1362, 792, 0, 0, 0, 0, 1104, 0, 0,
	1352, 1353, 1354, 0, 0, 0, 792, 4062, 0, 1346,
	1347, 1348, 1349, 1350, 1351, 0, 792, 0, 0, 0,
	2526, 792, 0, 0, 0, 0, 792, 0, 3029, 0,
	2716, 792, 1106, 1105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 831, 0, 0, 730, 0,
	0, 0, 0, 0, 2522, 0, 0, 2539, 3029, 1322,
	0, 1329, 0, 1337, 0, 0, 3062, 0, 0, 0,
	0, 0, 0, 0, 1819, 1820, 1821, 1822, 1823, 0,
	0, 865, 0, 0, 0, 1828, 0, 0, 0, 865,
	0, 0, 1362, 0, 0, 0, 0, 0, 0, 3029,
	0, 1352, 1353, 1354, 1842, 846, 0, 0, 3938, 1095,
	1346, 1347, 1348, 1349, 1350, 1351, 0, 1939, 792, 0,
	0, 1857, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 792, 0, 0, 0, 792, 0, 0, 1109,
	0, 0, 2512, 730, 792, 792, 0, 1362, 0, 0,
	0, 0, 0, 0, 0, 0, 1352, 1353, 1354, 0,
	0, 792, 0, 3927, 2521, 1346, 1347, 1348, 1349, 1350,
	1351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 865, 0, 865, 865, 792, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 792, 0, 2517, 0, 0, 792, 792, 792,
	0, 0, 0, 0, 0, 0, 0, 0, 1358, 0,
	2034, 2035, 2036, 2037, 1093, 2038, 0, 2514, 865, 1094,
	0, 0, 0, 1103, 792, 0, 1857, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2508, 0,
	0, 2519, 0, 1857, 0, 0, 0, 0, 0, 730,
	0, 0, 0, 0, 0, 0, 0, 792, 0, 0,
	0, 0, 2123, 1358, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2525, 0, 0, 1096, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2384, 0, 0, 0, 1102, 0, 0, 81, 0,
	0, 2503, 1362, 0, 0, 0, 0, 0, 0, 0,
	846, 1352, 1353, 1354, 0, 2518, 0, 792, 3718, 846,
	1346, 1347, 1348, 1349, 1350, 1351, 1107, 0, 0, 0,
	0, 2515, 0, 0, 0, 0, 0, 792, 2513, 792,
	792, 0, 2523, 0, 0, 792, 0, 2232, 2233, 2234,
	2235, 2236, 0, 0, 0, 2509, 0, 831, 2261, 0,
	0, 0, 0, 792, 0, 2264, 792, 0, 0, 1092,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2516,
	1090, 2510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1097, 792, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 792, 0, 0,
	792, 0, 0, 0, 0, 0, 792, 792, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1819, 1820, 1091,
	0, 1099, 2426, 0, 0, 0, 0, 1098, 945, 730,
	0, 0, 2342, 2343, 2344, 2345, 2346, 2347, 2348, 2349,
	2350, 2351, 2352, 2353, 2354, 2355, 2356, 2357, 0, 2363,
	0, 0, 792, 865, 0, 0, 0, 0, 0, 0,
	1373, 0, 792, 1343, 0, 0, 0, 1355, 1356, 1357,
	0, 0, 1100, 0, 2339, 0, 0, 0, 0, 1950,
	0, 0, 1951, 792, 792, 0, 1956, 792, 1948, 0,
	0, 0, 0, 1953, 1957, 1952, 0, 1954, 0, 0,
	0, 1955, 1366, 1367, 1949, 0, 0, 730, 0, 0,
	0, 1958, 0, 792, 0, 0, 0, 1101, 0, 0,
	0, 0, 792, 0, 792, 0, 0, 1093, 1104, 0,
	0, 0, 1094, 0, 0, 0, 1103, 0, 2539, 0,
	0, 3029, 0, 3029, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1358, 2539, 2539, 0, 0,
	3029, 1088, 1358, 1106, 1105, 0, 0, 0, 0, 792,
	1358, 0, 0, 0, 0, 0, 1373, 0, 0, 1343,
	0, 792, 1857, 1355, 1356, 1357, 0, 792, 0, 0,
	0, 0, 0, 846, 0, 1950, 0, 0, 1951, 1096,
	0, 0, 1956, 0, 1948, 0, 0, 0, 0, 1953,
	1957, 1952, 0, 1954, 792, 0, 0, 1955, 1366, 1367,
	1949, 0, 0, 0, 0, 0, 0, 1958, 1102, 0,
	865, 0, 644, 0, 0, 0, 0, 0, 0, 0,
	1095, 0, 0, 792, 0, 1857, 0, 2562, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1107,
	0, 0, 0, 0, 0, 2576, 0, 0, 0, 0,
	1109, 0, 0, 0, 0, 0, 0, 2593, 0, 0,
	0, 0, 0, 0, 0, 2604, 0, 0, 0, 792,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1092, 3029, 0, 0, 0, 0, 1857, 792,
	0, 0, 0, 1115, 0, 0, 0, 2649, 2650, 2651,
	0, 0, 0, 0, 0, 0, 0, 0, 2658, 1097,
	792, 792, 0, 0, 0, 0, 2669, 2395, 2673, 2674,
	0, 0, 673, 0, 2678, 0, 0, 2682, 2683, 1857,
	0, 2690, 0, 2692, 2695, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1099, 0, 0, 2717, 2718, 0,
	1098, 2722, 2723, 0, 0, 0, 0, 0, 777, 780,
	782, 846, 0, 0, 0, 0, 0, 0, 2732, 2733,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2746,
	0, 2747, 2748, 2749, 2750, 2751, 0, 0, 2753, 0,
	0, 0, 2757, 0, 0, 1100, 2760, 2761, 0, 0,
	0, 2765, 2766, 0, 0, 2771, 2772, 0, 0, 846,
	0, 2773, 2774, 2775, 0, 0, 0, 2776, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2789, 0, 0, 0,
	1101, 2426, 0, 2792, 0, 2426, 2793, 0, 0, 2384,
	0, 1104, 0, 2804, 2805, 0, 0, 0, 0, 2812,
	637, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2467, 2467, 0, 1093, 0, 0, 0, 0, 1094, 0,
	0, 0, 1103, 0, 1114, 0, 1106, 1105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2424, 2429, 2431, 0, 0, 0, 0,
	0, 0, 0, 3792, 0, 0, 0, 0, 0, 846,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2539, 1096, 1362, 0, 0, 0,
	0, 0, 0, 0, 0, 1352, 1353, 1354, 0, 0,
	0, 0, 3711, 1095, 1346, 1347, 1348, 1349, 1350, 1351,
	0, 0, 0, 0, 1102, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1107, 0, 0, 0, 0,
	0, 0, 2442, 0, 0, 0, 2355, 2356, 2357, 2363,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1358, 1358, 1358, 1358, 1358, 0, 0, 0,
	0, 1358, 0, 0, 0, 0, 0, 0, 1092, 0,
	0, 0, 0, 0, 0, 1358, 0, 0, 2339, 0,
	0, 0, 1362, 0, 0, 0, 0, 0, 846, 0,
	0, 1352, 1353, 1354, 0, 1097, 0, 0, 3637, 0,
	1346, 1347, 1348, 1349, 1350, 1351, 1373, 0, 0, 1343,
	0, 0, 0, 1355, 1356, 1357, 0, 2494, 0, 0,
	0, 0, 0, 0, 0, 1950, 0, 0, 1951, 846,
	1099, 0, 1956, 0, 1948, 0, 1098, 0, 0, 1953,
	1957, 1952, 0, 1954, 0, 0, 0, 1955, 1366, 1367,
	1949, 0, 846, 0, 0, 1093, 0, 1958, 0, 0,
	1094, 0, 0, 0, 1103, 0, 0, 0, 0, 2587,
	1373, 0, 1358, 1343, 0, 0, 0, 1355, 1356, 1357,
	0, 1100, 0, 0, 0, 0, 0, 0, 0, 1950,
	0, 0, 1951, 0, 2636, 0, 1956, 3076, 1948, 0,
	0, 0, 0, 1953, 1957, 1952, 0, 1954, 0, 846,
	0, 1955, 1366, 1367, 1949, 0, 0, 0, 0, 1830,
	0, 1958, 0, 0, 0, 3117, 1101, 1096, 0, 0,
	0, 0, 0, 3125, 0, 3125, 0, 1104, 0, 0,
	2467, 3134, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1102, 0, 0, 2755,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3256, 0, 1106, 1105, 2384, 0, 3029, 2725, 2726, 0,
	992, 0, 0, 0, 0, 0, 0, 1107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1830, 2911, 1010,
	0, 0, 3196, 0, 0, 0, 0, 1019, 1021, 0,
	1023, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3220, 3221, 3222, 3223, 0, 0, 0, 0,
	1092, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1095,
	0, 0, 1062, 0, 0, 0, 0, 1097, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3029, 3248, 3249, 2813, 3252, 3253, 3254, 0, 1109,
	2989, 0, 2993, 0, 0, 1329, 0, 0, 0, 0,
	0, 0, 1099, 1828, 0, 0, 0, 0, 1098, 0,
	3265, 0, 0, 0, 0, 0, 1337, 0, 846, 846,
	0, 831, 0, 0, 0, 0, 0, 1139, 0, 3280,
	0, 0, 0, 0, 0, 0, 0, 3281, 0, 1373,
	0, 0, 1343, 0, 0, 0, 1355, 1356, 1357, 0,
	0, 0, 0, 1100, 2878, 2879, 0, 0, 1950, 0,
	2885, 1951, 0, 0, 0, 1956, 0, 1948, 0, 0,
	0, 0, 1953, 1957, 1952, 0, 1954, 0, 0, 0,
	1955, 1366, 1367, 1949, 0, 0, 1373, 3303, 0, 1343,
	1958, 0, 0, 1355, 1356, 1357, 2918, 0, 1101, 0,
	0, 0, 0, 0, 0, 1950, 0, 2928, 1951, 1104,
	0, 0, 1956, 0, 1948, 0, 2424, 2424, 2424, 1953,
	1957, 1952, 0, 1954, 3792, 0, 0, 1955, 1366, 1367,
	1949, 2957, 846, 0, 0, 3370, 0, 1958, 0, 0,
	0, 0, 3251, 73, 1106, 1105, 0, 0, 0, 0,
	0, 0, 0, 0, 2969, 0, 0, 0, 0, 2973,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1358, 1358, 1358, 1358, 1358,
	1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358,
	1358, 0, 0, 0, 0, 0, 1358, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1095, 1362, 0, 846, 0, 846, 846, 0, 0,
	0, 1352, 1353, 1354, 0, 0, 1941, 0, 3570, 0,
	1346, 1347, 1348, 1349, 1350, 1351, 0, 0, 0, 0,
	0, 1109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3047, 0, 1991, 0, 1358, 0, 0,
	3456, 846, 1358, 0, 1358, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1358, 1362, 0, 0, 0,
	0, 0, 0, 0, 0, 1352, 1353, 1354, 0, 0,
	0, 0, 3549, 0, 1346, 1347, 1348, 1349, 1350, 1351,
	0, 0, 0, 2057, 0, 0, 0, 2061, 0, 0,
	0, 0, 2073, 3125, 0, 0, 0, 0, 0, 3490,
	0, 3161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3188, 0, 0, 0, 2134,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2151, 0,
	0, 2154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3531, 0, 0,
	0, 0, 0, 0, 3125, 0, 0, 0, 0, 0,
	2187, 0, 0, 0, 2073, 2073, 2073, 0, 0, 0,
	3560, 3561, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2209, 2210, 1830, 0, 0, 3577, 0, 0,
	0, 0, 0, 1093, 0, 0, 0, 0, 1094, 0,
	0, 0, 1103, 0, 3263, 0, 0, 3607, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3612, 0, 0, 0, 0, 0, 0,
	73, 0, 3614, 3615, 3616, 73, 73, 3619, 0, 0,
	3622, 3623, 3624, 3625, 0, 0, 0, 2467, 0, 0,
	2467, 0, 0, 3634, 0, 3635, 0, 3636, 0, 0,
	0, 2288, 0, 0, 0, 1096, 3649, 0, 0, 0,
	0, 0, 0, 0, 3654, 3655, 0, 0, 0, 3658,
	3659, 3660, 3661, 3662, 0, 0, 846, 0, 0, 0,
	0, 73, 0, 0, 1102, 1362, 0, 0, 0, 0,
	0, 0, 0, 0, 1352, 1353, 1354, 0, 0, 3293,
	3294, 3320, 0, 1346, 1347, 1348, 1349, 1350, 1351, 3298,
	0, 0, 3328, 3329, 0, 1107, 3332, 2319, 0, 0,
	3335, 0, 0, 0, 2336, 0, 0, 0, 0, 0,
	0, 3340, 1362, 0, 0, 0, 0, 0, 1358, 0,
	0, 1352, 1353, 1354, 0, 0, 2434, 0, 3361, 0,
	1346, 1347, 1348, 1349, 1350, 1351, 0, 0, 1092, 0,
	0, 0, 0, 3369, 0, 0, 0, 0, 0, 0,
	3374, 0, 0, 2424, 0, 0, 0, 0, 3382, 3383,
	0, 0, 0, 2431, 2431, 1097, 0, 0, 0, 0,
	0, 0, 0, 0, 3741, 0, 0, 945, 1093, 0,
	0, 0, 0, 1094, 0, 0, 0, 1103, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1099, 2467, 0, 0, 0, 0, 1098, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2431,
	0, 3431, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 846, 0, 0, 0, 0, 0, 0,
	0, 1358, 1358, 0, 0, 0, 0, 0, 1358, 3461,
	1096, 1100, 0, 0, 0, 0, 0, 1093, 0, 0,
	0, 0, 1094, 0, 0, 0, 1103, 0, 0, 0,
	3469, 3470, 0, 0, 0, 0, 0, 0, 0, 1102,
	1373, 1358, 0, 1343, 3831, 0, 0, 1355, 1356, 1357,
	0, 1358, 0, 0, 0, 0, 1101, 0, 0, 1950,
	0, 0, 1951, 0, 0, 0, 1956, 1104, 1948, 0,
	1107, 0, 0, 1953, 1957, 1952, 0, 1954, 0, 0,
	1358, 1955, 1366, 1367, 1949, 0, 0, 0, 0, 1096,
	0, 1958, 1358, 0, 0, 0, 1358, 0, 0, 0,
	2735, 0, 1106, 1105, 0, 0, 3491, 0, 0, 0,
	0, 0, 0, 1092, 0, 0, 0, 0, 1102, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3510, 0, 0, 0,
	1097, 0, 0, 3889, 0, 0, 3891, 0, 0, 1107,
	0, 0, 3894, 3895, 3896, 0, 0, 3899, 3900, 3901,
	0, 0, 0, 0, 3904, 3905, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1099, 0, 0, 0, 1095,
	0, 1098, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1092, 0, 3920, 3921, 0, 0, 3925, 1373,
	3926, 0, 1343, 0, 0, 0, 1355, 1356, 1357, 1109,
	0, 0, 2467, 2467, 0, 0, 2467, 0, 1950, 1097,
	0, 1951, 0, 0, 0, 1956, 1100, 1948, 0, 0,
	0, 0, 1953, 1957, 1952, 0, 1954, 0, 0, 0,
	1955, 1366, 1367, 1949, 0, 0, 0, 0, 0, 0,
	1958, 0, 0, 0, 1099, 0, 0, 3947, 0, 1373,
	1098, 0, 1343, 3955, 0, 0, 1355, 1356, 1357, 0,
	0, 1101, 0, 0, 0, 0, 0, 0, 1950, 0,
	0, 1951, 1104, 0, 1358, 1956, 0, 1948, 3678, 0,
	0, 0, 1953, 1957, 1952, 0, 1954, 0, 0, 0,
	1955, 1366, 1367, 1949, 0, 1100, 3687, 3688, 0, 0,
	1958, 1358, 3692, 3693, 0, 2721, 0, 1106, 1105, 3696,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3710, 3125, 0, 0, 0,
	0, 3713, 0, 0, 0, 0, 3714, 0, 4067, 0,
	1101, 0, 2424, 4070, 0, 0, 2424, 0, 1093, 4076,
	0, 1104, 4078, 1094, 0, 0, 0, 1103, 1337, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3739, 0, 0, 0, 1358, 0, 0, 0,
	0, 0, 0, 0, 1095, 0, 1106, 1105, 0, 0,
	0, 0, 0, 1373, 0, 0, 1343, 0, 0, 0,
	1355, 1356, 1357, 4113, 4114, 0, 0, 0, 0, 4120,
	0, 0, 1950, 4122, 1109, 1951, 0, 0, 0, 1956,
	1096, 1948, 0, 0, 0, 0, 1953, 1957, 1952, 0,
	1954, 4135, 0, 1358, 1955, 1366, 1367, 1949, 0, 0,
	0, 1358, 1358, 0, 1958, 1358, 0, 0, 1358, 1102,
	0, 0, 0, 1358, 0, 0, 0, 0, 0, 0,
	3781, 0, 3818, 1095, 1373, 0, 0, 1343, 0, 0,
	0, 1355, 1356, 1357, 1358, 0, 0, 0, 0, 0,
	1107, 0, 1358, 1950, 0, 0, 0, 1358, 0, 0,
	1956, 0, 1948, 1109, 0, 1358, 1358, 1953, 1957, 1952,
	0, 1954, 0, 0, 0, 1955, 1366, 1367, 1949, 0,
	0, 0, 0, 0, 0, 1958, 0, 3823, 0, 0,
	0, 3844, 0, 1092, 0, 2563, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2953, 1362, 0, 0, 2467,
	0, 0, 0, 0, 1358, 1352, 1353, 1354, 0, 0,
	1097, 0, 3872, 0, 1346, 1347, 1348, 1349, 1350, 1351,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3125, 0, 0, 0, 1358, 0, 0, 0, 0, 0,
	0, 0, 1358, 1358, 0, 1099, 73, 4264, 0, 0,
	0, 1098, 0, 0, 0, 0, 0, 0, 2652, 2653,
	0, 0, 0, 73, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3914, 0,
	0, 0, 0, 0, 0, 0, 73, 0, 0, 0,
	0, 0, 0, 0, 2697, 0, 1100, 4298, 0, 0,
	4301, 0, 0, 0, 0, 0, 2719, 3931, 0, 0,
	0, 0, 0, 0, 0, 3935, 3936, 3937, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2738, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1104, 0, 0, 1362, 0, 0, 0, 0,
	0, 0, 0, 0, 1352, 1353, 1354, 0, 0, 0,
	0, 3366, 3959, 1346, 1347, 1348, 1349, 1350, 1351, 0,
	0, 0, 0, 0, 3975, 2160, 0, 1106, 1105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 73, 0,
	0, 0, 0, 0, 0, 1362, 0, 0, 0, 0,
	0, 0, 0, 0, 1352, 1353, 1354, 0, 0, 0,
	0, 2399, 0, 1346, 1347, 1348, 1349, 1350, 1351, 0,
	0, 0, 0, 4412, 0, 0, 0, 0, 0, 0,
	0, 1358, 0, 0, 0, 0, 0, 0, 0, 0,
	1358, 1358, 0, 0, 1095, 1358, 1358, 0, 0, 1358,
	0, 0, 4432, 4433, 0, 0, 0, 0, 73, 0,
	0, 0, 0, 1358, 0, 0, 1358, 1358, 0, 0,
	0, 0, 0, 0, 1109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2875, 0,
	0, 0, 1358, 0, 0, 0, 0, 0, 4090, 0,
	0, 0, 0, 0, 0, 1093, 2249, 0, 0, 0,
	1094, 186, 0, 0, 1103, 0, 2467, 0, 0, 4104,
	4105, 0, 0, 0, 0, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 0, 0, 0, 0, 4145, 1362,
	0, 0, 0, 0, 0, 0, 0, 0, 1352, 1353,
	1354, 0, 0, 4520, 0, 0, 0, 1346, 1347, 1348,
	1349, 1350, 1351, 0, 0, 0, 4530, 0, 0, 0,
	0, 1358, 0, 0, 0, 0, 0, 1096, 0, 0,
	0, 0, 1830, 0, 0, 4189, 0, 0, 0, 0,
	4546, 0, 0, 0, 0, 0, 0, 1358, 0, 0,
	0, 0, 0, 1093, 0, 0, 1102, 0, 1094, 0,
	1362, 0, 1103, 0, 0, 0, 0, 0, 0, 1352,
	1353, 1354, 0, 0, 0, 1358, 0, 0, 1346, 1347,
	1348, 1349, 1350, 1351, 0, 0, 0, 1107, 0, 195,
	0, 0, 0, 0, 2245, 0, 3014, 0, 3017, 3018,
	0, 0, 0, 3022, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1358, 0, 0,
	191, 0, 4259, 0, 0, 1096, 0, 0, 0, 0,
	1092, 192, 0, 0, 1358, 0, 0, 4601, 1358, 1358,
	1358, 0, 2255, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1102, 0, 2247, 1097, 0, 0,
	0, 0, 1358, 196, 0, 4292, 0, 3079, 0, 0,
	0, 197, 0, 0, 0, 1093, 1123, 0, 1358, 190,
	1094, 2248, 0, 0, 1103, 1107, 0, 0, 0, 4309,
	0, 0, 1099, 0, 0, 0, 0, 0, 1098, 0,
	0, 0, 2259, 0, 3130, 3131, 1828, 0, 0, 0,
	0, 4326, 4326, 4326, 1093, 1123, 0, 0, 0, 1094,
	0, 0, 0, 1103, 0, 0, 0, 158, 1092, 0,
	0, 0, 144, 0, 0, 0, 156, 0, 0, 0,
	0, 0, 2073, 1100, 1125, 0, 0, 1096, 0, 0,
	148, 0, 0, 0, 0, 1097, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 170,
	0, 0, 0, 0, 0, 0, 1102, 0, 73, 176,
	2250, 0, 199, 1125, 0, 0, 1096, 0, 1101, 0,
	1099, 0, 0, 0, 0, 0, 1098, 0, 0, 1104,
	0, 2256, 0, 0, 2251, 0, 0, 1107, 0, 200,
	0, 0, 0, 0, 187, 1102, 0, 201, 0, 4734,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2156, 193, 1106, 1105, 0, 0, 2257, 0,
	0, 1100, 0, 0, 2258, 0, 1107, 0, 1358, 194,
	1092, 4431, 0, 2252, 0, 0, 0, 0, 0, 2253,
	0, 4408, 0, 0, 0, 150, 186, 1124, 0, 0,
	185, 4145, 0, 3274, 0, 188, 0, 1097, 0, 4326,
	0, 0, 0, 0, 189, 0, 1101, 0, 0, 1092,
	0, 151, 1358, 0, 0, 0, 0, 1104, 0, 0,
	2431, 0, 152, 183, 0, 0, 1124, 2246, 0, 0,
	0, 1095, 1099, 153, 0, 0, 1097, 0, 1098, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	1137, 4504, 1106, 1105, 168, 0, 0, 0, 0, 0,
	0, 1109, 175, 0, 4513, 0, 0, 0, 0, 0,
	149, 1099, 155, 0, 0, 0, 0, 1098, 0, 1126,
	3313, 0, 1358, 1100, 0, 0, 0, 0, 0, 0,
	3321, 0, 3322, 145, 0, 0, 0, 3327, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1127,
	0, 0, 1128, 0, 195, 1358, 1129, 0, 1126, 0,
	0, 0, 1100, 0, 0, 0, 4145, 0, 1122, 1095,
	0, 0, 1358, 0, 0, 0, 0, 0, 1130, 1104,
	0, 0, 0, 0, 0, 191, 0, 0, 1127, 1358,
	0, 1128, 0, 0, 0, 1129, 192, 0, 0, 1109,
	0, 159, 0, 0, 0, 0, 0, 1122, 0, 0,
	176, 160, 2730, 161, 1106, 1105, 1133, 1130, 1104, 0,
	0, 181, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 0, 169, 1131, 0, 162, 197, 0, 166, 0,
	163, 0, 0, 0, 190, 146, 0, 0, 164, 0,
	1132, 1119, 0, 1106, 1105, 1133, 0, 0, 0, 0,
	0, 0, 0, 0, 172, 0, 0, 182, 0, 165,
	0, 0, 1131, 4326, 0, 171, 0, 0, 0, 0,
	173, 0, 0, 0, 0, 2431, 167, 1134, 0, 1132,
	174, 1095, 0, 0, 1358, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 4606, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1109, 0, 0, 0, 0, 1134, 3475, 0, 0,
	1095, 0, 0, 0, 0, 202, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 0, 0, 199, 0, 0,
	0, 0, 0, 0, 0, 0, 3498, 0, 0, 0,
	1109, 0, 0, 0, 0, 0, 184, 1358, 0, 0,
	0, 0, 203, 0, 200, 0, 1358, 0, 0, 187,
	0, 0, 201, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 4703, 0, 0, 0, 0, 193, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2057, 0, 194, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 698, 0, 0, 0,
	0, 0, 0, 709, 710, 711, 0, 233, 0, 250,
	0, 0, 299, 336, 551, 0, 0, 396, 0, 449,
	453, 0, 542, 0, 0, 0, 0, 307, 0, 0,
	0, 0, 0, 0, 0, 518, 1358, 0, 0, 0,
	238, 626, 541, 612, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 246, 3683, 3684, 3685, 3686,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 440,
	374, 0, 591, 467, 245, 291, 278, 320, 362, 474,
	0, 0, 352, 522, 287, 376, 0, 266, 409, 0,
	498, 373, 0, 481, 501, 0, 393, 272, 432, 488,
	489, 0, 0, 0, 0, 0, 276, 277, 398, 258,
	406, 603, 569, 461, 419, 417, 0, 384, 441, 598,
	0, 0, 306, 0, 301, 397, 537, 264, 516, 435,
	402, 356, 464, 493, 303, 288, 289, 332, 434, 322,
	274, 527, 566, 570, 568, 564, 561, 565, 562, 563,
	567, 323, 560, 0, 535, 544, 578, 558, 586, 543,
	583, 553, 298, 582, 547, 546, 592, 573, 574, 528,
	588, 559, 557, 550, 549, 545, 0, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 234, 0, 235,
	236, 237, 239, 240, 241, 0, 242, 243, 244, 247,
	248, 249, 251, 611, 252, 253, 254, 255, 256, 257,
	548, 3803, 259, 260, 261, 262, 263, 265, 267, 268,
	269, 270, 271, 273, 275, 0, 0, 0, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 284, 0, 285,
	286, 290, 292, 293, 294, 295, 296, 297, 300, 0,
	302, 304, 0, 305, 308, 0, 309, 310, 311, 312,
	313, 314, 315, 316, 552, 317, 0, 318, 319, 321,
	0, 324, 325, 326, 327, 328, 0, 329, 554, 555,
	330, 331, 333, 334, 335, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 0, 349, 350,
	351, 353, 0, 354, 355, 358, 359, 360, 361, 0,
	363, 571, 0, 364, 365, 366, 0, 0, 367, 368,
	369, 370, 371, 372, 375, 572, 377, 378, 379, 380,
	381, 382, 383, 613, 385, 386, 387, 388, 389, 390,
	391, 575, 576, 392, 394, 395, 577, 579, 580, 0,
	410, 411, 412, 413, 414, 415, 416, 418, 0, 420,
	421, 422, 581, 423, 424, 425, 426, 0, 427, 428,
	429, 430, 431, 433, 436, 437, 438, 439, 0, 442,
	443, 444, 445, 446, 447, 448, 450, 451, 452, 454,
	455, 456, 614, 457, 458, 459, 460, 584, 462, 463,
	615, 465, 466, 468, 469, 470, 471, 472, 473, 624,
	0, 475, 585, 476, 477, 478, 479, 480, 0, 482,
	483, 484, 485, 486, 487, 490, 491, 492, 494, 495,
	587, 496, 497, 0, 499, 500, 0, 502, 503, 504,
	505, 506, 0, 625, 507, 589, 508, 590, 509, 510,
	511, 512, 513, 514, 515, 517, 0, 0, 519, 520,
	521, 523, 524, 525, 526, 529, 530, 531, 532, 533,
	0, 534, 536, 538, 616, 593, 594, 595, 596, 597,
	599, 600, 601, 602, 539, 540, 556, 407, 401, 357,
	399, 400, 404, 405, 408, 0, 0, 0, 0, 0,
	0, 0, 0, 2319, 0, 0, 0, 0, 0, 0,
	0, 706, 707, 708, 0, 4022, 0, 0, 0, 0,
	700, 701, 702, 703, 704, 705, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 4073, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4240, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1856, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4286, 1861, 233, 1867, 250, 736, 1877, 299, 336,
	551, 1864, 1909, 396, 1914, 449, 453, 1938, 542, 1871,
	1874, 1884, 1887, 307, 1892, 741, 1900, 747, 1910, 753,
	1929, 518, 1935, 743, 744, 749, 238, 626, 541, 612,
	1923, 1869, 1927, 403, 1920, 1896, 1936, 1913, 1925, 1906,
	1911, 246, 1898, 1899, 1903, 1912, 745, 742, 746, 752,
	740, 750, 737, 748, 1933, 440, 374, 0, 591, 467,
	245, 291, 278, 320, 362, 474, 1868, 1886, 352, 522,
	287, 376, 1919, 266, 409, 1932, 498, 373, 1926, 481,
	501, 1888, 393, 272, 432, 488, 489, 734, 739, 1876,
	755, 1863, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 1894, 384, 441, 598, 1866, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 1934, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 1862, 235, 236, 237, 239, 240,
	241, 733, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 735, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 1878, 1879, 1880, 738, 1881, 1882, 1883, 279, 280,
	281, 282, 283, 284, 1885, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 1889, 302, 304, 1890, 305,
	308, 1891, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 1893, 318, 319, 321, 1895, 324, 325, 326,
	327, 328, 1897, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 1901, 349, 350, 351, 353, 1902, 354,
	355, 358, 359, 360, 361, 1904, 363, 571, 1905, 364,
	365, 366, 1907, 1908, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 751, 410, 411, 412, 413,
	414, 415, 416, 418, 1916, 420, 421, 422, 581, 423,
	424, 425, 426, 1917, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 1918, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 584, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 1921, 475, 585, 476,
	477, 478, 479, 480, 1922, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 1924,
	499, 500, 754, 502, 503, 504, 505, 506, 1928, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 1930, 1931, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 1937, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 1915, 1865, 1870, 1872, 1873, 1875, 0, 0, 0,
	0, 0, 0, 0, 0, 1376, 0, 0, 0, 0,
	0, 0, 1373, 0, 0, 1343, 0, 0, 1854, 1355,
	1356, 1357, 1387, 1389, 1371, 1416, 1437, 0, 1488, 1534,
	1504, 1359, 1621, 1627, 1360, 1688, 1692, 0, 1368, 1418,
	1344, 1468, 1483, 1498, 1510, 1363, 1369, 1361, 1625, 1364,
	1769, 1780, 1800, 1365, 1366, 1367, 1345, 1761, 1818, 1587,
	1746, 1398, 0, 1374, 1712, 0, 0, 1635, 1750, 0,
	0, 1412, 0, 0, 0, 0, 1560, 1549, 1583, 1696,
	1521, 1641, 1449, 1608, 1786, 1678, 1597, 0, 1792, 1710,
	1411, 1477, 1461, 1513, 1578, 1719, 1394, 1478, 1553, 1784,
	1473, 1599, 0, 1440, 1643, 1785, 1748, 1596, 1759, 1729,
	1754, 1484, 1622, 1447, 1669, 1736, 1737, 1407, 1520, 1442,
	1795, 1392, 1452, 1460, 1630, 1431, 1638, 1816, 1570, 1703,
	1653, 1651, 0, 1610, 1679, 1811, 0, 0, 1497, 0,
	1491, 1629, 1803, 1438, 1777, 1672, 1634, 1572, 1706, 1741,
	1493, 1474, 1475, 1531, 1671, 1516, 1450, 1791, 1567, 1571,
	1569, 1565, 1562, 1566, 1563, 1564, 1568, 1518, 1561, 0,
	0, 1408, 1628, 1556, 1726, 1406, 1675, 1514, 1487, 0,
	0, 0, 1793, 1607, 1609, 0, 1762, 1557, 1555, 1466,
	1465, 1409, 1794, 1378, 1379, 1380, 1381, 1382, 1383, 1384,
	1385, 1386, 1388, 1390, 1391, 1395, 1396, 1397, 1399, 1400,
	1401, 1402, 1403, 1404, 1405, 1413, 1414, 1415, 1417, 1420,
	1421, 1422, 1424, 1425, 1426, 1427, 1428, 1429, 1432, 1433,
	1434, 1435, 1436, 1439, 1441, 1443, 1444, 1445, 1446, 1448,
	1451, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1462, 1463,
	0, 1464, 1467, 1469, 1470, 1471, 1472, 1476, 1479, 1480,
	1481, 1482, 1485, 1486, 1489, 1490, 1492, 1494, 1495, 1496,
	1499, 0, 1500, 1501, 1502, 1503, 1505, 1506, 1507, 1508,
	1509, 1511, 0, 0, 1512, 1515, 1517, 1519, 1522, 1523,
	1524, 1525, 0, 1526, 1527, 1528, 1529, 1530, 1532, 0,
	1533, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543,
	1544, 1545, 1546, 1547, 1548, 1551, 1552, 1554, 0, 1558,
	1559, 1574, 1575, 1576, 1577, 1579, 1581, 1582, 1580, 1584,
	1585, 1586, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595,
	1598, 1600, 1601, 0, 1602, 1603, 0, 1604, 1605, 1606,
	1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620,
	1623, 1624, 1626, 1640, 1642, 0, 1644, 1645, 1646, 1647,
	1648, 1649, 1650, 1652, 1654, 1655, 1656, 1657, 1658, 1659,
	1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1670,
	1673, 1674, 1676, 1677, 1680, 1681, 1682, 1683, 1684, 1685,
	1686, 1687, 1689, 1690, 1691, 1693, 1694, 1695, 1697, 1698,
	1699, 1700, 1701, 1702, 1704, 1705, 1707, 1708, 1709, 0,
	1711, 1713, 1714, 1715, 1716, 1717, 1718, 1721, 1720, 1722,
	1723, 1724, 1725, 1727, 1728, 1730, 1731, 1732, 1733, 1734,
	1735, 1738, 1739, 1740, 1742, 1743, 1744, 1745, 1747, 1749,
	1751, 1753, 1752, 1755, 1756, 1757, 1758, 1760, 1763, 1764,
	1765, 1766, 1767, 1768, 1770, 1771, 1772, 1773, 1774, 1775,
	1776, 1778, 0, 1779, 1781, 1782, 1783, 1787, 1788, 1789,
	1790, 1796, 1797, 1798, 1799, 1801, 0, 0, 1802, 1804,
	1805, 1806, 1807, 1808, 1809, 1810, 1812, 1813, 1814, 1815,
	0, 1817, 1550, 1639, 1633, 1573, 1631, 1632, 1636, 1637,
	0, 0, 1393, 1410, 1419, 1423, 1430, 0, 1362, 0,
	0, 0, 0, 0, 0, 0, 0, 1352, 1353, 1354,
	0, 0, 0, 0, 0, 0, 1346, 1347, 1348, 1349,
	1350, 1351, 1856, 0, 4666, 905, 0, 0, 0, 0,
	981, 0, 0, 0, 0, 0, 0, 0, 0, 1861,
	233, 1867, 250, 736, 1877, 299, 336, 551, 1864, 1909,
	396, 1914, 449, 453, 1938, 542, 1871, 1874, 1884, 1887,
	307, 1892, 741, 1900, 747, 1910, 753, 1929, 518, 1935,
	743, 744, 749, 238, 626, 541, 612, 1923, 1869, 1927,
	403, 1920, 1896, 1936, 1913, 1925, 1906, 1911, 246, 1898,
	1899, 1903, 1912, 745, 742, 746, 752, 740, 750, 737,
	748, 1933, 440, 374, 0, 591, 467, 245, 291, 278,
	320, 362, 474, 1868, 1886, 352, 522, 287, 376, 1919,
	266, 409, 1932, 498, 373, 1926, 481, 501, 1888, 393,
	272, 432, 488, 489, 734, 739, 1876, 755, 1863, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 1894,
	384, 441, 598, 1866, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 1934,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 1862, 235, 236, 237, 239, 240, 241, 733, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 735, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 1878, 1879,
	1880, 738, 1881, 1882, 1883, 279, 280, 281, 282, 283,
	284, 1885, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 1889, 302, 304, 1890, 305, 308, 1891, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 1893,
	318, 319, 321, 1895, 324, 325, 326, 327, 328, 1897,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	1901, 349, 350, 351, 353, 1902, 354, 355, 358, 359,
	360, 361, 1904, 363, 571, 1905, 364, 365, 366, 1907,
	1908, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 751, 410, 411, 412, 413, 414, 415, 416,
	418, 1916, 420, 421, 422, 581, 423, 424, 425, 426,
	1917, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 1918, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 1921, 475, 585, 476, 477, 478, 479,
	480, 1922, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 1924, 499, 500, 754,
	502, 503, 504, 505, 506, 1928, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 1930,
	1931, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 1937, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 1915, 1865,
	1870, 1872, 1873, 1875, 1856, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1861, 233, 1867, 250, 736, 1877, 299, 336, 551,
	1864, 1909, 396, 1914, 449, 453, 1938, 542, 1871, 1874,
	1884, 1887, 307, 1892, 741, 1900, 747, 1910, 753, 1929,
	518, 1935, 743, 744, 749, 238, 626, 541, 612, 1923,
	1869, 1927, 403, 1920, 1896, 1936, 1913, 1925, 1906, 1911,
	246, 1898, 1899, 1903, 1912, 745, 742, 746, 752, 740,
	750, 737, 748, 1933, 440, 374, 0, 591, 467, 245,
	291, 278, 320, 362, 474, 1868, 1886, 352, 522, 287,
	376, 1919, 266, 409, 1932, 498, 373, 1926, 481, 501,
	1888, 393, 272, 432, 488, 489, 734, 739, 1876, 755,
	1863, 276, 277, 398, 258, 406, 603, 569, 461, 419,
	417, 1894, 384, 441, 598, 1866, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 566, 570, 568,
	564, 561, 565, 562, 563, 567, 323, 560, 0, 535,
	544, 578, 558, 586, 543, 583, 553, 298, 582, 547,
	546, 592, 573, 574, 528, 588, 559, 557, 550, 549,
	545, 1934, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 1862, 235, 236, 237, 239, 240, 241,
	733, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 548, 735, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	1878, 1879, 1880, 738, 1881, 1882, 1883, 279, 280, 281,
	282, 283, 284, 1885, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 1889, 302, 304, 1890, 305, 308,
	1891, 309, 310, 311, 312, 313, 314, 315, 316, 552,
	317, 1893, 318, 319, 321, 1895, 324, 325, 326, 327,
	328, 1897, 329, 554, 555, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 1901, 349, 350, 351, 353, 1902, 354, 355,
	358, 359, 360, 361, 1904, 363, 571, 1905, 364, 365,
	366, 1907, 1908, 367, 368, 369, 370, 371, 372, 375,
	572, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 575, 576, 392, 394,
	395, 577, 579, 580, 751, 410, 411, 412, 413, 414,
	415, 416, 418, 1916, 420, 421, 422, 581, 423, 424,
	425, 426, 1917, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 1918, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 584, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 1921, 475, 585, 476, 477,
	478, 479, 480, 1922, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 587, 496, 497, 1924, 499,
	500, 754, 502, 503, 504, 505, 506, 1928, 625, 507,
	589, 508, 590, 509, 510, 511, 512, 513, 514, 515,
	517, 1930, 1931, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 1937, 534, 536, 538, 616,
	593, 594, 595, 596, 597, 599, 600, 601, 602, 539,
	540, 556, 407, 401, 357, 399, 400, 404, 405, 408,
	1915, 1865, 1870, 1872, 1873, 1875, 1856, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1861, 233, 1867, 250, 736, 1877, 2711,
	336, 551, 1864, 1909, 396, 1914, 449, 453, 1938, 542,
	1871, 1874, 1884, 1887, 307, 1892, 741, 1900, 747, 1910,
	753, 1929, 518, 1935, 743, 744, 749, 238, 626, 541,
	612, 1923, 1869, 1927, 403, 1920, 1896, 1936, 1913, 1925,
	1906, 1911, 246, 1898, 1899, 1903, 1912, 745, 742, 746,
	752, 740, 750, 737, 748, 1933, 440, 374, 0, 591,
	467, 245, 291, 278, 320, 362, 2709, 1868, 1886, 352,
	522, 287, 376, 1919, 266, 409, 1932, 498, 373, 1926,
	481, 501, 1888, 393, 272, 432, 488, 489, 734, 739,
	1876, 755, 1863, 276, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 1894, 384, 441, 598, 1866, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 566,
	570, 568, 564, 561, 565, 562, 563, 567, 323, 560,
	0, 535, 544, 578, 558, 586, 543, 583, 553, 298,
	582, 547, 546, 592, 573, 574, 528, 588, 559, 557,
	550, 549, 545, 1934, 223, 224, 225, 226, 227, 2710,
	229, 230, 231, 232, 234, 1862, 235, 236, 237, 239,
	240, 241, 733, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 548, 735, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 1878, 1879, 1880, 738, 1881, 1882, 1883, 279,
	280, 281, 282, 283, 284, 1885, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 1889, 302, 304, 1890,
	305, 308, 1891, 309, 310, 311, 312, 313, 314, 315,
	316, 552, 317, 1893, 318, 319, 321, 1895, 324, 325,
	326, 327, 328, 1897, 329, 554, 555, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 1901, 349, 350, 351, 353, 1902,
	354, 355, 358, 359, 360, 361, 1904, 363, 571, 1905,
	364, 365, 366, 1907, 1908, 367, 368, 369, 370, 371,
	372, 375, 572, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 576,
	392, 394, 395, 577, 579, 580, 751, 410, 411, 412,
	413, 414, 415, 416, 418, 1916, 420, 421, 422, 581,
	423, 424, 425, 426, 1917, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 1918, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 584, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 1921, 475, 585,
	476, 477, 478, 479, 480, 1922, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 587, 496, 497,
	1924, 499, 500, 754, 502, 503, 504, 505, 506, 1928,
	625, 507, 589, 508, 590, 509, 510, 511, 512, 513,
	514, 515, 517, 1930, 1931, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 1937, 534, 536,
	538, 616, 593, 594, 595, 596, 597, 599, 600, 601,
	602, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 1915, 1865, 1870, 1872, 1873, 1875, 864, 0,
	1284, 905, 0, 0, 0, 698, 981, 0, 0, 0,
	0, 0, 709, 710, 711, 1861, 233, 1867, 250, 736,
	1877, 299, 336, 0, 1864, 1909, 396, 1914, 449, 453,
	1938, 0, 1871, 1874, 1884, 1887, 307, 1892, 741, 1900,
	747, 1910, 753, 1929, 518, 1935, 743, 744, 749, 238,
	863, 541, 612, 1923, 1869, 1927, 3105, 1920, 1896, 1936,
	1913, 1925, 1906, 1911, 246, 1898, 1899, 1903, 1912, 745,
	742, 746, 752, 740, 750, 737, 748, 1933, 440, 374,
	0, 0, 467, 245, 291, 278, 320, 362, 474, 1868,
	1886, 352, 522, 287, 376, 1919, 266, 409, 1932, 498,
	373, 1926, 481, 501, 1888, 393, 272, 432, 488, 489,
	734, 739, 1876, 755, 1863, 276, 277, 398, 258, 406,
	0, 0, 461, 419, 417, 1894, 384, 441, 0, 1866,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	323, 0, 0, 535, 866, 856, 848, 849, 850, 851,
	852, 853, 0, 868, 869, 870, 871, 872, 528, 862,
	0, 847, 854, 855, 857, 1934, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 1862, 235, 236,
	237, 239, 240, 241, 733, 242, 243, 244, 247, 248,
	249, 251, 611, 252, 253, 254, 255, 256, 257, 0,
	735, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 1878, 1879, 1880, 738, 1881, 1882,
	1883, 279, 280, 281, 282, 283, 284, 1885, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 1889, 302,
	304, 1890, 305, 308, 1891, 309, 310, 311, 312, 313,
	314, 315, 316, 0, 317, 1893, 318, 319, 321, 1895,
	324, 325, 326, 327, 328, 1897, 329, 0, 0, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 1901, 349, 350, 351,
	353, 1902, 354, 355, 358, 359, 360, 361, 1904, 363,
	0, 1905, 364, 365, 366, 1907, 1908, 367, 368, 369,
	370, 371, 372, 375, 0, 377, 378, 379, 380, 381,
	382, 383, 613, 385, 386, 387, 388, 389, 390, 391,
	3104, 0, 392, 394, 395, 0, 0, 0, 751, 410,
	411, 412, 413, 414, 415, 416, 418, 1916, 420, 421,
	422, 0, 423, 424, 425, 426, 1917, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 1918, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 614, 457, 458, 459, 460, 0, 462, 463, 615,
	465, 466, 468, 469, 470, 471, 472, 473, 624, 1921,
	475, 2541, 476, 477, 478, 479, 480, 1922, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 0,
	496, 497, 1924, 499, 500, 754, 502, 503, 504, 505,
	506, 1928, 625, 507, 0, 508, 0, 509, 510, 511,
	512, 513, 514, 515, 517, 1930, 1931, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 1937,
	534, 536, 538, 616, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 540, 0, 407, 401, 357, 399,
	400, 404, 405, 408, 1915, 1865, 1870, 1872, 1873, 1875,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	706, 707, 708, 0, 0, 0, 0, 0, 0, 3106,
	3107, 702, 703, 704, 705, 791, 0, 973, 905, 0,
	0, 0, 968, 981, 958, 0, 0, 0, 0, 0,
	0, 0, 2421, 233, 0, 250, 736, 0, 299, 336,
	963, 0, 951, 396, 0, 449, 453, 0, 542, 978,
	0, 955, 2422, 307, 976, 741, 0, 747, 977, 753,
	975, 518, 0, 743, 744, 749, 238, 626, 541, 612,
	0, 0, 0, 969, 0, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 745, 742, 746, 752,
	740, 750, 737, 748, 0, 440, 374, 0, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 734, 739, 0,
	755, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 964, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 983, 984, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 2420, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 733, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 735, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 738, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 967, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 751, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 970, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 754, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 954, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 0, 0, 0, 0, 0, 0, 0, 952, 0,
	0, 791, 0, 973, 905, 0, 0, 0, 968, 981,
	958, 0, 0, 959, 2417, 0, 948, 949, 2418, 233,
	0, 250, 736, 0, 299, 336, 963, 0, 951, 396,
	0, 449, 453, 96, 542, 978, 0, 955, 0, 307,
	976, 741, 0, 747, 977, 753, 975, 518, 0, 743,
	744, 749, 238, 626, 541, 612, 0, 0, 0, 969,
	93, 0, 0, 0, 94, 0, 0, 246, 0, 0,
	0, 0, 745, 742, 746, 752, 740, 750, 737, 748,
	0, 440, 374, 0, 1831, 467, 245, 291, 278, 320,
	362, 474, 0, 0, 352, 522, 287, 376, 0, 266,
	409, 0, 498, 373, 0, 481, 501, 0, 393, 272,
	432, 488, 489, 734, 739, 0, 755, 0, 276, 277,
	398, 258, 406, 603, 569, 461, 419, 417, 0, 384,
	441, 598, 964, 0, 306, 0, 301, 397, 537, 264,
	516, 435, 402, 356, 464, 493, 303, 288, 289, 332,
	434, 322, 274, 527, 566, 570, 568, 564, 561, 983,
	984, 563, 567, 323, 560, 0, 535, 544, 578, 558,
	586, 543, 583, 553, 298, 582, 547, 546, 592, 573,
	574, 528, 588, 559, 557, 550, 549, 545, 0, 223,
	224, 225, 226, 227, 228, 229, 230, 231, 232, 234,
	0, 235, 236, 237, 239, 240, 241, 733, 242, 243,
	244, 247, 248, 249, 251, 611, 252, 253, 254, 255,
	256, 257, 548, 735, 259, 260, 261, 262, 263, 265,
	267, 268, 269, 270, 271, 273, 275, 0, 0, 0,
	738, 0, 0, 0, 279, 280, 281, 282, 283, 284,
	0, 285, 286, 290, 292, 293, 294, 295, 296, 297,
	300, 0, 302, 304, 0, 305, 308, 0, 309, 310,
	311, 312, 313, 314, 315, 316, 552, 317, 0, 318,
	319, 321, 0, 324, 325, 326, 327, 328, 0, 329,
	554, 967, 330, 331, 333, 334, 335, 337, 338, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 0,
	349, 350, 351, 353, 0, 354, 355, 358, 359, 360,
	361, 0, 363, 571, 0, 364, 365, 366, 0, 0,
	367, 368, 369, 370, 371, 372, 375, 572, 377, 378,
	379, 380, 381, 382, 383, 613, 385, 386, 387, 388,
	389, 390, 391, 575, 576, 392, 394, 395, 577, 579,
	580, 751, 410, 411, 412, 413, 414, 415, 416, 418,
	0, 420, 421, 422, 581, 423, 424, 425, 426, 0,
	427, 428, 429, 430, 431, 433, 436, 437, 438, 439,
	0, 442, 443, 444, 445, 446, 447, 448, 450, 451,
	452, 454, 455, 456, 614, 457, 458, 459, 460, 970,
	462, 463, 615, 465, 466, 468, 469, 470, 471, 472,
	473, 624, 0, 475, 585, 476, 477, 478, 479, 480,
	0, 482, 483, 484, 485, 486, 487, 490, 491, 492,
	494, 495, 587, 496, 497, 0, 499, 500, 754, 502,
	503, 504, 505, 506, 0, 625, 507, 589, 508, 590,
	509, 510, 511, 512, 513, 514, 515, 517, 0, 954,
	519, 520, 521, 523, 524, 525, 526, 529, 530, 531,
	532, 533, 0, 534, 536, 538, 616, 593, 594, 595,
	596, 597, 599, 600, 601, 602, 539, 540, 556, 407,
	401, 357, 399, 400, 404, 405, 408, 0, 0, 0,
	0, 0, 0, 0, 952, 0, 97, 791, 0, 973,
	905, 0, 0, 0, 968, 981, 958, 0, 0, 959,
	4316, 0, 948, 949, 0, 233, 0, 250, 736, 0,
	299, 336, 963, 0, 951, 396, 0, 449, 453, 96,
	542, 978, 0, 955, 0, 307, 976, 741, 0, 747,
	977, 753, 975, 518, 0, 743, 744, 749, 238, 626,
	541, 612, 0, 0, 0, 969, 93, 0, 0, 0,
	94, 0, 0, 246, 0, 0, 0, 0, 745, 742,
	746, 752, 740, 750, 737, 748, 0, 440, 374, 0,
	1831, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 734,
	739, 0, 755, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 964, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 983, 984, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 733, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 735,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 738, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 967, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 751, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 970, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 754, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 954, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 0, 0, 0, 0, 0, 0, 0,
	952, 0, 97, 791, 0, 973, 905, 0, 0, 0,
	968, 981, 958, 0, 0, 959, 0, 0, 948, 949,
	0, 233, 0, 250, 736, 0, 299, 336, 963, 0,
	951, 396, 0, 449, 453, 0, 542, 978, 0, 955,
	0, 307, 976, 741, 0, 747, 977, 753, 975, 518,
	0, 743, 744, 749, 238, 626, 541, 612, 0, 0,
	0, 969, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 745, 742, 746, 752, 740, 750,
	737, 748, 0, 440, 374, 0, 591, 467, 245, 291,
	278, 320, 362, 474, 0, 0, 352, 522, 287, 376,
	0, 266, 409, 0, 498, 373, 0, 481, 501, 0,
	393, 272, 432, 488, 489, 734, 739, 0, 755, 0,
	276, 277, 398, 258, 406, 603, 569, 461, 419, 417,
	0, 384, 441, 598, 964, 0, 306, 0, 301, 397,
	537, 264, 516, 435, 402, 356, 464, 493, 303, 288,
	289, 332, 434, 322, 274, 527, 566, 570, 568, 564,
	561, 983, 984, 563, 567, 323, 560, 0, 535, 544,
	578, 558, 586, 543, 583, 553, 298, 582, 547, 546,
	592, 573, 574, 528, 588, 559, 557, 550, 549, 545,
	0, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 234, 0, 235, 236, 237, 239, 240, 241, 733,
	242, 243, 244, 247, 248, 249, 251, 611, 252, 253,
	254, 255, 256, 257, 548, 735, 259, 260, 261, 262,
	263, 265, 267, 268, 269, 270, 271, 273, 275, 0,
	0, 0, 738, 0, 0, 0, 279, 280, 281, 282,
	283, 284, 0, 285, 286, 290, 292, 293, 294, 295,
	296, 297, 300, 0, 302, 304, 0, 305, 308, 0,
	309, 310, 311, 312, 313, 314, 315, 316, 552, 317,
	0, 318, 319, 321, 0, 324, 325, 326, 327, 328,
	0, 329, 554, 967, 330, 331, 333, 334, 335, 337,
	338, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 0, 349, 350, 351, 353, 0, 354, 355, 358,
	359, 360, 361, 0, 363, 571, 0, 364, 365, 366,
	0, 0, 367, 368, 369, 370, 371, 372, 375, 572,
	377, 378, 379, 380, 381, 382, 383, 613, 385, 386,
	387, 388, 389, 390, 391, 575, 576, 392, 394, 395,
	577, 579, 580, 751, 410, 411, 412, 413, 414, 415,
	416, 418, 0, 420, 421, 422, 581, 423, 424, 425,
	426, 0, 427, 428, 429, 430, 431, 433, 436, 437,
	438, 439, 0, 442, 443, 444, 445, 446, 447, 448,
	450, 451, 452, 454, 455, 456, 614, 457, 458, 459,
	460, 970, 462, 463, 615, 465, 466, 468, 469, 470,
	471, 472, 473, 624, 0, 475, 585, 476, 477, 478,
	479, 480, 0, 482, 483, 484, 485, 486, 487, 490,
	491, 492, 494, 495, 587, 496, 497, 0, 499, 500,
	754, 502, 503, 504, 505, 506, 0, 625, 507, 589,
	508, 590, 509, 510, 511, 512, 513, 514, 515, 517,
	0, 954, 519, 520, 521, 523, 524, 525, 526, 529,
	530, 531, 532, 533, 0, 534, 536, 538, 616, 593,
	594, 595, 596, 597, 599, 600, 601, 602, 539, 540,
	556, 407, 401, 357, 399, 400, 404, 405, 408, 0,
	0, 0, 0, 0, 0, 0, 952, 0, 0, 791,
	0, 973, 905, 0, 0, 0, 968, 981, 958, 0,
	0, 959, 0, 0, 948, 949, 946, 233, 0, 250,
	736, 0, 299, 336, 963, 0, 951, 396, 0, 449,
	453, 0, 542, 978, 0, 955, 0, 307, 976, 741,
	0, 747, 977, 753, 975, 518, 0, 743, 744, 749,
	238, 626, 541, 612, 0, 0, 0, 969, 0, 0,
	0, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	745, 742, 746, 752, 740, 750, 737, 748, 0, 440,
	374, 0, 591, 467, 245, 291, 278, 320, 362, 474,
	0, 0, 352, 522, 287, 376, 0, 266, 409, 0,
	498, 373, 0, 481, 501, 0, 393, 272, 432, 488,
	489, 734, 739, 0, 755, 0, 276, 277, 398, 258,
	406, 603, 569, 461, 419, 417, 0, 384, 441, 598,
	964, 0, 306, 0, 301, 397, 537, 264, 516, 435,
	402, 356, 464, 493, 303, 288, 289, 332, 434, 322,
	274, 527, 566, 570, 568, 564, 561, 983, 984, 563,
	567, 323, 560, 0, 535, 544, 578, 558, 586, 543,
	583, 553, 298, 582, 547, 546, 592, 573, 574, 528,
	588, 559, 557, 550, 549, 545, 0, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 234, 0, 235,
	236, 237, 239, 240, 241, 733, 242, 243, 244, 247,
	248, 249, 251, 611, 252, 253, 254, 255, 256, 257,
	548, 735, 259, 260, 261, 262, 263, 265, 267, 268,
	269, 270, 271, 273, 275, 0, 0, 0, 738, 0,
	0, 0, 279, 280, 281, 282, 283, 284, 0, 285,
	286, 290, 292, 293, 294, 295, 296, 297, 300, 0,
	302, 304, 0, 305, 308, 0, 309, 310, 311, 312,
	313, 314, 315, 316, 552, 317, 0, 318, 319, 321,
	0, 324, 325, 326, 327, 328, 0, 329, 554, 967,
	330, 331, 333, 334, 335, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 0, 349, 350,
	351, 353, 0, 354, 355, 358, 359, 360, 361, 0,
	363, 571, 0, 364, 365, 366, 0, 0, 367, 368,
	369, 370, 371, 372, 375, 572, 377, 378, 379, 380,
	381, 382, 383, 613, 385, 386, 387, 388, 389, 390,
	391, 575, 576, 392, 394, 395, 577, 579, 580, 751,
	410, 411, 412, 413, 414, 415, 416, 418, 0, 420,
	421, 422, 581, 423, 424, 425, 426, 0, 427, 428,
	429, 430, 431, 433, 436, 437, 438, 439, 0, 442,
	443, 444, 445, 446, 447, 448, 450, 451, 452, 454,
	455, 456, 614, 457, 458, 459, 460, 970, 462, 463,
	615, 465, 466, 468, 469, 470, 471, 472, 473, 624,
	0, 475, 585, 476, 477, 478, 479, 480, 0, 482,
	483, 484, 485, 486, 487, 490, 491, 492, 494, 495,
	587, 496, 497, 0, 499, 500, 754, 502, 503, 504,
	505, 506, 0, 625, 507, 589, 508, 590, 509, 510,
	511, 512, 513, 514, 515, 517, 0, 954, 519, 520,
	521, 523, 524, 525, 526, 529, 530, 531, 532, 533,
	0, 534, 536, 538, 616, 593, 594, 595, 596, 597,
	599, 600, 601, 602, 539, 540, 556, 407, 401, 357,
	399, 400, 404, 405, 408, 0, 0, 0, 0, 0,
	0, 0, 952, 0, 791, 0, 973, 905, 0, 0,
	0, 968, 981, 958, 0, 1836, 2403, 959, 0, 0,
	948, 949, 233, 0, 250, 736, 0, 299, 336, 963,
	0, 951, 396, 0, 449, 453, 0, 542, 978, 0,
	955, 0, 307, 976, 741, 0, 747, 977, 753, 975,
	518, 0, 743, 744, 749, 238, 626, 541, 612, 0,
	0, 0, 969, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 745, 742, 746, 752, 740,
	750, 737, 748, 0, 440, 374, 0, 591, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 0, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 734, 739, 0, 755,
	0, 276, 277, 398, 258, 406, 603, 569, 461, 419,
	417, 0, 384, 441, 598, 964, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 566, 570, 568,
	564, 561, 983, 984, 563, 567, 323, 560, 0, 535,
	544, 578, 558, 586, 543, 583, 553, 298, 582, 547,
	546, 592, 573, 574, 528, 588, 559, 557, 550, 549,
	545, 3376, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	733, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 548, 735, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	0, 0, 0, 738, 0, 0, 0, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 552,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 554, 967, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 571, 0, 364, 365,
	366, 0, 0, 367, 368, 369, 370, 371, 372, 375,
	572, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 575, 576, 392, 394,
	395, 577, 579, 580, 751, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 581, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 970, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 0, 475, 585, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 587, 496, 497, 0, 499,
	500, 754, 502, 503, 504, 505, 506, 0, 625, 507,
	589, 508, 590, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 954, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	593, 594, 595, 596, 597, 599, 600, 601, 602, 539,
	540, 556, 407, 401, 357, 399, 400, 404, 405, 408,
	0, 0, 0, 0, 0, 0, 0, 952, 0, 791,
	0, 973, 905, 0, 0, 0, 968, 981, 958, 0,
	0, 0, 959, 0, 0, 948, 949, 233, 0, 250,
	736, 0, 299, 336, 963, 0, 951, 396, 0, 449,
	453, 0, 542, 978, 0, 955, 0, 307, 976, 741,
	0, 747, 977, 753, 975, 518, 0, 743, 744, 749,
	238, 626, 541, 612, 0, 0, 0, 969, 0, 0,
	0, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	745, 742, 746, 752, 740, 750, 737, 748, 0, 440,
	374, 0, 591, 467, 245, 291, 278, 320, 362, 474,
	0, 0, 352, 522, 287, 376, 0, 266, 409, 0,
	498, 373, 0, 481, 501, 0, 393, 272, 432, 488,
	489, 734, 739, 0, 755, 0, 276, 277, 398, 258,
	406, 603, 569, 461, 419, 417, 0, 384, 441, 598,
	964, 0, 306, 0, 301, 397, 537, 264, 516, 435,
	402, 356, 464, 493, 303, 288, 289, 332, 434, 322,
	274, 527, 566, 570, 568, 564, 561, 983, 984, 563,
	567, 323, 560, 0, 535, 544, 578, 558, 586, 543,
	583, 553, 298, 582, 547, 546, 592, 573, 574, 528,
	588, 559, 557, 550, 549, 545, 0, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 234, 0, 235,
	236, 237, 239, 240, 241, 733, 242, 243, 244, 247,
	248, 249, 251, 611, 252, 253, 254, 255, 256, 257,
	548, 735, 259, 260, 261, 262, 263, 265, 267, 268,
	269, 270, 271, 273, 275, 0, 0, 0, 738, 0,
	0, 0, 279, 280, 281, 282, 283, 284, 0, 285,
	286, 290, 292, 293, 294, 295, 296, 297, 300, 0,
	302, 304, 0, 305, 308, 0, 309, 310, 311, 312,
	313, 314, 315, 316, 552, 317, 0, 318, 319, 321,
	0, 324, 325, 326, 327, 328, 0, 329, 554, 967,
	330, 331, 333, 334, 335, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 0, 349, 350,
	351, 353, 0, 354, 355, 358, 359, 360, 361, 0,
	363, 571, 0, 364, 365, 366, 0, 0, 367, 368,
	369, 370, 371, 372, 375, 572, 377, 378, 379, 380,
	381, 382, 383, 613, 385, 386, 387, 388, 389, 390,
	391, 575, 576, 392, 394, 395, 577, 579, 580, 751,
	410, 411, 412, 413, 414, 415, 416, 418, 0, 420,
	421, 422, 581, 423, 424, 425, 426, 0, 427, 428,
	429, 430, 431, 433, 436, 437, 438, 439, 0, 442,
	443, 444, 445, 446, 447, 448, 450, 451, 452, 454,
	455, 456, 614, 457, 458, 459, 460, 970, 462, 463,
	615, 465, 466, 468, 469, 470, 471, 472, 473, 624,
	0, 475, 585, 476, 477, 478, 479, 480, 0, 482,
	483, 484, 485, 486, 487, 490, 491, 492, 494, 495,
	587, 496, 497, 0, 499, 500, 754, 502, 503, 504,
	505, 506, 0, 625, 507, 589, 508, 590, 509, 510,
	511, 512, 513, 514, 515, 517, 0, 954, 519, 520,
	521, 523, 524, 525, 526, 529, 530, 531, 532, 533,
	0, 534, 536, 538, 616, 593, 594, 595, 596, 597,
	599, 600, 601, 602, 539, 540, 556, 407, 401, 357,
	399, 400, 404, 405, 408, 0, 0, 0, 0, 0,
	0, 0, 952, 0, 791, 0, 973, 905, 0, 0,
	0, 968, 981, 958, 0, 0, 0, 959, 3364, 0,
	948, 949, 233, 0, 250, 736, 0, 299, 336, 963,
	0, 951, 396, 0, 449, 453, 0, 542, 978, 0,
	955, 0, 307, 976, 741, 0, 747, 977, 753, 975,
	518, 0, 743, 744, 749, 238, 626, 541, 612, 0,
	0, 0, 969, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 745, 742, 746, 752, 740,
	750, 737, 748, 0, 440, 374, 0, 591, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 0, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 734, 739, 0, 755,
	0, 276, 277, 398, 258, 406, 603, 569, 461, 419,
	417, 0, 384, 441, 598, 964, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 566, 570, 568,
	564, 561, 983, 984, 563, 567, 323, 560, 0, 535,
	544, 578, 558, 586, 543, 583, 553, 298, 582, 547,
	546, 592, 573, 574, 528, 588, 559, 557, 550, 549,
	545, 0, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	733, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 548, 735, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	0, 0, 0, 738, 0, 0, 0, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 552,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 554, 967, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 571, 0, 364, 365,
	366, 0, 0, 367, 368, 369, 370, 371, 372, 375,
	572, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 575, 576, 392, 394,
	395, 577, 579, 580, 751, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 581, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 970, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 0, 475, 585, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 587, 496, 497, 0, 499,
	500, 754, 502, 503, 504, 505, 506, 0, 625, 507,
	589, 508, 590, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 954, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	593, 594, 595, 596, 597, 599, 600, 601, 602, 539,
	540, 556, 407, 401, 357, 399, 400, 404, 405, 408,
	0, 0, 0, 0, 0, 0, 0, 952, 0, 791,
	0, 973, 905, 0, 0, 0, 968, 981, 958, 0,
	0, 0, 959, 3311, 0, 948, 949, 233, 0, 250,
	736, 0, 299, 336, 963, 0, 951, 396, 0, 449,
	453, 0, 542, 978, 0, 955, 0, 307, 976, 741,
	0, 747, 977, 753, 975, 518, 0, 743, 744, 749,
	238, 626, 541, 612, 0, 0, 0, 969, 0, 0,
	0, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	745, 742, 746, 752, 740, 750, 737, 748, 0, 440,
	374, 0, 591, 467, 245, 291, 278, 320, 362, 474,
	0, 0, 352, 522, 287, 376, 0, 266, 409, 0,
	498, 373, 0, 481, 501, 0, 393, 272, 432, 488,
	489, 734, 739, 0, 755, 0, 276, 277, 398, 258,
	406, 603, 569, 461, 419, 417, 0, 384, 441, 598,
	964, 0, 306, 0, 301, 397, 537, 264, 516, 435,
	402, 356, 464, 493, 303, 288, 289, 332, 434, 322,
	274, 527, 566, 570, 568, 564, 561, 983, 984, 563,
	567, 323, 560, 0, 535, 544, 578, 558, 586, 543,
	583, 553, 298, 582, 547, 546, 592, 573, 574, 528,
	588, 559, 557, 550, 549, 545, 0, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 234, 0, 235,
	236, 237, 239, 240, 241, 733, 242, 243, 244, 247,
	248, 249, 251, 611, 252, 253, 254, 255, 256, 257,
	548, 735, 259, 260, 261, 262, 263, 265, 267, 268,
	269, 270, 271, 273, 275, 0, 0, 0, 738, 0,
	0, 0, 279, 280, 281, 282, 283, 284, 0, 285,
	286, 290, 292, 293, 294, 295, 296, 297, 300, 0,
	302, 304, 0, 305, 308, 0, 309, 310, 311, 312,
	313, 314, 315, 316, 552, 317, 0, 318, 319, 321,
	0, 324, 325, 326, 327, 328, 0, 329, 554, 967,
	330, 331, 333, 334, 335, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 0, 349, 350,
	351, 353, 0, 354, 355, 358, 359, 360, 361, 0,
	363, 571, 0, 364, 365, 366, 0, 0, 367, 368,
	369, 370, 371, 372, 375, 572, 377, 378, 379, 380,
	381, 382, 383, 613, 385, 386, 387, 388, 389, 390,
	391, 575, 576, 392, 394, 395, 577, 579, 580, 751,
	410, 411, 412, 413, 414, 415, 416, 418, 0, 420,
	421, 422, 581, 423, 424, 425, 426, 0, 427, 428,
	429, 430, 431, 433, 436, 437, 438, 439, 0, 442,
	443, 444, 445, 446, 447, 448, 450, 451, 452, 454,
	455, 456, 614, 457, 458, 459, 460, 970, 462, 463,
	615, 465, 466, 468, 469, 470, 471, 472, 473, 624,
	0, 475, 585, 476, 477, 478, 479, 480, 0, 482,
	483, 484, 485, 486, 487, 490, 491, 492, 494, 495,
	587, 496, 497, 0, 499, 500, 754, 502, 503, 504,
	505, 506, 0, 625, 507, 589, 508, 590, 509, 510,
	511, 512, 513, 514, 515, 517, 0, 954, 519, 520,
	521, 523, 524, 525, 526, 529, 530, 531, 532, 533,
	0, 534, 536, 538, 616, 593, 594, 595, 596, 597,
	599, 600, 601, 602, 539, 540, 556, 407, 401, 357,
	399, 400, 404, 405, 408, 0, 0, 0, 0, 0,
	0, 0, 952, 0, 0, 791, 0, 973, 905, 0,
	0, 0, 968, 981, 958, 0, 0, 959, 2408, 0,
	948, 949, 1323, 233, 0, 250, 736, 0, 299, 336,
	963, 0, 951, 396, 0, 449, 453, 0, 542, 978,
	0, 955, 0, 307, 976, 741, 0, 747, 977, 753,
	975, 518, 0, 743, 744, 749, 238, 626, 541, 612,
	0, 0, 0, 969, 0, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 745, 742, 746, 752,
	740, 750, 737, 748, 0, 440, 374, 0, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 734, 739, 0,
	755, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 964, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 983, 984, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 733, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 735, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 738, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 967, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 751, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 970, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 754, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 954, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 0, 0, 0, 0, 0, 0, 0, 952, 0,
	791, 0, 973, 905, 0, 0, 0, 968, 981, 958,
	0, 0, 0, 959, 0, 0, 948, 949, 233, 0,
	250, 736, 0, 299, 336, 963, 0, 951, 396, 0,
	449, 453, 0, 542, 978, 0, 955, 0, 307, 976,
	741, 0, 747, 977, 753, 975, 518, 0, 743, 744,
	749, 238, 626, 541, 612, 0, 0, 0, 969, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 745, 742, 746, 752, 740, 750, 737, 748, 0,
	440, 374, 0, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 734, 739, 0, 755, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 964, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 983, 984,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 733, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 735, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 738,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	967, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	751, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 970, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 754, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 954, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 0, 0, 0, 0,
	0, 0, 0, 952, 0, 791, 0, 973, 905, 0,
	0, 0, 968, 981, 958, 0, 0, 0, 959, 0,
	0, 948, 949, 233, 0, 250, 736, 0, 299, 336,
	963, 0, 951, 396, 0, 449, 453, 0, 542, 978,
	0, 955, 0, 307, 976, 741, 0, 747, 977, 753,
	975, 518, 0, 743, 744, 749, 238, 626, 541, 612,
	0, 0, 0, 969, 0, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 745, 742, 746, 752,
	740, 750, 737, 748, 0, 440, 374, 0, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 734, 739, 0,
	755, 0, 4325, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 964, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 983, 984, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 733, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 735, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 738, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 967, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 751, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 970, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 754, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 4324,
	515, 517, 0, 954, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 0, 0, 0, 0, 0, 0, 0, 952, 0,
	791, 0, 973, 905, 0, 0, 0, 968, 981, 958,
	0, 0, 0, 959, 0, 0, 948, 949, 233, 0,
	250, 736, 0, 299, 336, 963, 0, 951, 396, 0,
	449, 453, 0, 542, 978, 0, 955, 0, 307, 976,
	741, 0, 747, 977, 753, 975, 518, 0, 743, 744,
	749, 238, 626, 541, 612, 0, 0, 0, 969, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 745, 742, 746, 752, 740, 750, 737, 748, 0,
	440, 374, 0, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 734, 739, 0, 755, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 964, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 983, 984,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 733, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 735, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 4151, 0, 0, 0, 738,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	4153, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	751, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 4152, 459, 460, 970, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 754, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 954, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 0, 0, 0, 0,
	0, 0, 0, 952, 0, 791, 0, 973, 905, 0,
	0, 0, 968, 981, 958, 0, 0, 0, 4150, 0,
	0, 948, 949, 233, 0, 250, 736, 0, 299, 336,
	963, 0, 951, 396, 0, 449, 453, 0, 4323, 978,
	0, 955, 0, 307, 976, 741, 0, 747, 977, 753,
	975, 518, 0, 743, 744, 749, 238, 626, 541, 612,
	0, 0, 0, 969, 0, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 745, 742, 746, 752,
	740, 750, 737, 748, 0, 440, 374, 0, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 734, 739, 0,
	755, 0, 4325, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 964, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 983, 984, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 733, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 735, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 738, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 967, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 751, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 970, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 754, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 4324,
	515, 517, 0, 954, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 0, 0, 0, 0, 0, 0, 0, 952, 0,
	791, 0, 973, 905, 0, 0, 0, 968, 981, 958,
	0, 0, 0, 959, 0, 0, 948, 949, 233, 0,
	250, 736, 0, 299, 336, 963, 0, 951, 396, 0,
	449, 453, 0, 542, 978, 0, 955, 0, 307, 976,
	741, 0, 747, 977, 753, 975, 518, 0, 743, 744,
	749, 238, 626, 541, 612, 0, 0, 0, 969, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 745, 742, 746, 752, 740, 750, 737, 748, 0,
	440, 374, 0, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 734, 739, 0, 755, 0, 2974, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 964, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 983, 984,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 733, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 735, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 738,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	967, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	751, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 970, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 754, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 954, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 0, 0, 0, 0,
	0, 0, 0, 952, 0, 791, 0, 2313, 905, 0,
	0, 0, 968, 981, 958, 0, 0, 0, 959, 0,
	0, 948, 949, 233, 0, 250, 736, 0, 299, 336,
	963, 0, 951, 396, 0, 449, 453, 0, 542, 978,
	0, 955, 0, 307, 976, 741, 0, 747, 977, 753,
	975, 518, 0, 743, 744, 749, 238, 626, 541, 612,
	0, 0, 0, 969, 0, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 745, 742, 746, 752,
	740, 750, 737, 748, 0, 440, 374, 0, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 734, 739, 0,
	755, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 964, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 983, 984, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 733, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 735, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 738, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 967, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 751, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 970, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 754, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 954, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 0, 0, 0, 0, 0, 0, 0, 952, 0,
	791, 0, 973, 905, 0, 0, 0, 968, 981, 958,
	0, 0, 0, 959, 0, 0, 948, 949, 233, 0,
	250, 736, 0, 299, 336, 963, 0, 951, 396, 0,
	449, 453, 0, 542, 978, 0, 955, 0, 307, 976,
	741, 0, 747, 977, 753, 975, 518, 0, 743, 744,
	749, 238, 626, 541, 612, 0, 0, 0, 969, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 745, 742, 746, 752, 740, 750, 737, 748, 0,
	440, 374, 0, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 734, 739, 0, 755, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 964, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 983, 984,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 733, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 735, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 738,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	967, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	751, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 970, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 754, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 954, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 0, 0, 0, 0,
	0, 0, 0, 952, 0, 791, 0, 973, 905, 0,
	0, 0, 0, 981, 958, 0, 0, 0, 959, 0,
	0, 1331, 1332, 233, 0, 250, 736, 0, 299, 336,
	963, 0, 0, 396, 0, 449, 453, 0, 542, 978,
	0, 3974, 0, 307, 976, 741, 0, 747, 977, 753,
	975, 518, 0, 743, 744, 749, 238, 626, 541, 612,
	0, 0, 0, 403, 0, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 745, 742, 746, 752,
	740, 750, 737, 748, 0, 440, 374, 0, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 734, 739, 0,
	755, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 964, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 983, 984, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 733, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 735, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 738, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 967, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 751, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 2908, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 754, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	791, 0, 973, 905, 0, 0, 0, 0, 981, 958,
	0, 0, 0, 2307, 0, 0, 2906, 2907, 233, 0,
	250, 736, 0, 299, 336, 963, 0, 0, 396, 0,
	449, 453, 0, 542, 978, 0, 0, 0, 307, 976,
	741, 0, 747, 977, 753, 975, 518, 0, 743, 744,
	749, 238, 626, 541, 612, 0, 0, 0, 403, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 745, 742, 746, 752, 740, 750, 737, 748, 0,
	440, 374, 0, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 734, 739, 0, 755, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 964, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 983, 984,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 733, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 735, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 738,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	967, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	751, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 2908, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 754, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 729, 0, 1284, 905, 0,
	0, 0, 0, 981, 0, 0, 0, 0, 2307, 0,
	0, 2906, 2907, 233, 0, 250, 736, 0, 299, 336,
	551, 0, 0, 396, 0, 449, 453, 0, 542, 0,
	0, 4206, 0, 307, 1281, 741, 0, 747, 0, 753,
	1280, 518, 0, 743, 744, 749, 238, 626, 541, 612,
	0, 0, 0, 403, 0, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 0, 1282, 745, 742, 746, 752,
	740, 750, 737, 748, 0, 440, 374, 0, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 734, 739, 0,
	755, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 733, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 735, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 738, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 751, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 584, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 754, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 791, 0, 973, 905, 0, 0, 0, 0, 981,
	958, 0, 0, 4207, 0, 0, 1285, 1286, 4205, 233,
	0, 250, 736, 0, 299, 336, 963, 0, 0, 396,
	0, 449, 453, 0, 542, 978, 0, 0, 0, 307,
	976, 741, 0, 747, 977, 753, 975, 518, 0, 743,
	744, 749, 238, 626, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 745, 742, 746, 752, 740, 750, 737, 748,
	0, 440, 374, 0, 591, 467, 245, 291, 278, 320,
	362, 474, 0, 0, 352, 522, 287, 376, 0, 266,
	409, 0, 498, 373, 0, 481, 501, 0, 393, 272,
	432, 488, 489, 734, 739, 0, 755, 0, 276, 277,
	398, 258, 406, 603, 569, 2306, 419, 417, 0, 384,
	441, 598, 964, 0, 306, 0, 301, 397, 537, 264,
	516, 435, 402, 356, 464, 493, 303, 288, 289, 332,
	434, 322, 274, 527, 566, 570, 568, 564, 561, 983,
	984, 563, 567, 323, 560, 0, 535, 544, 578, 558,
	586, 543, 583, 553, 298, 582, 547, 546, 592, 573,
	574, 528, 588, 559, 557, 550, 549, 545, 0, 223,
	224, 225, 226, 227, 228, 229, 230, 231, 232, 234,
	0, 235, 236, 237, 239, 240, 241, 733, 242, 243,
	244, 247, 248, 249, 251, 611, 252, 253, 254, 255,
	256, 257, 548, 735, 259, 260, 261, 262, 263, 265,
	267, 268, 269, 270, 271, 273, 275, 0, 0, 0,
	738, 0, 0, 0, 279, 280, 281, 282, 283, 284,
	0, 285, 286, 290, 292, 293, 294, 295, 296, 297,
	300, 0, 302, 304, 0, 305, 308, 0, 309, 310,
	311, 312, 313, 314, 315, 316, 552, 317, 0, 318,
	319, 321, 0, 324, 325, 326, 327, 328, 0, 329,
	554, 967, 330, 331, 333, 334, 335, 337, 338, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 0,
	349, 350, 351, 353, 0, 354, 355, 358, 359, 360,
	361, 0, 363, 571, 0, 364, 365, 366, 0, 0,
	367, 368, 369, 370, 371, 372, 375, 572, 377, 378,
	379, 380, 381, 382, 383, 613, 385, 386, 387, 388,
	389, 390, 391, 575, 576, 392, 394, 395, 577, 579,
	580, 751, 410, 411, 412, 413, 414, 415, 416, 418,
	0, 420, 421, 422, 581, 423, 424, 425, 426, 0,
	427, 428, 429, 430, 431, 433, 436, 437, 438, 439,
	0, 442, 443, 444, 445, 446, 447, 448, 450, 451,
	452, 454, 455, 456, 614, 457, 458, 459, 460, 2305,
	462, 463, 615, 465, 466, 468, 469, 470, 471, 472,
	473, 624, 0, 475, 585, 476, 477, 478, 479, 480,
	0, 482, 483, 484, 485, 486, 487, 490, 491, 492,
	494, 495, 587, 496, 497, 0, 499, 500, 754, 502,
	503, 504, 505, 506, 0, 625, 507, 589, 508, 590,
	509, 510, 511, 512, 513, 514, 515, 517, 0, 0,
	519, 520, 521, 523, 524, 525, 526, 529, 530, 531,
	532, 533, 0, 534, 536, 538, 616, 593, 594, 595,
	596, 597, 599, 600, 601, 602, 539, 540, 556, 407,
	401, 357, 399, 400, 404, 405, 408, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 791, 0, 973, 905,
	0, 0, 0, 968, 981, 958, 0, 0, 0, 2307,
	0, 0, 2303, 2304, 233, 0, 250, 736, 0, 299,
	336, 963, 0, 951, 396, 0, 449, 453, 0, 0,
	978, 0, 955, 0, 307, 976, 0, 0, 0, 977,
	0, 975, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 969, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 745, 742, 746,
	752, 740, 750, 737, 748, 0, 440, 374, 0, 591,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 0, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 734, 739,
	0, 755, 0, 4325, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 598, 964, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 566,
	570, 568, 564, 561, 983, 984, 563, 567, 323, 560,
	0, 535, 544, 578, 558, 586, 543, 583, 553, 298,
	582, 547, 546, 592, 573, 574, 528, 588, 559, 557,
	550, 549, 545, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 733, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 548, 735, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 0, 0, 0, 738, 0, 0, 0, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 552, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 554, 967, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 571, 0,
	364, 365, 366, 0, 0, 367, 368, 369, 370, 371,
	372, 375, 572, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 576,
	392, 394, 395, 577, 579, 580, 751, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 581,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 970, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 0, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 587, 496, 497,
	0, 499, 500, 754, 502, 503, 504, 505, 506, 0,
	625, 507, 589, 508, 590, 509, 510, 511, 512, 513,
	4324, 515, 517, 0, 954, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 593, 594, 595, 596, 597, 599, 600, 601,
	602, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 729, 0, 1284, 905, 0, 0, 0, 0, 981,
	0, 0, 0, 0, 959, 0, 0, 948, 949, 233,
	0, 250, 736, 0, 299, 336, 551, 0, 0, 396,
	0, 449, 453, 0, 542, 0, 0, 1290, 0, 307,
	1281, 741, 0, 747, 0, 753, 1280, 518, 0, 743,
	744, 749, 238, 626, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 1282, 745, 742, 746, 752, 740, 750, 737, 748,
	0, 440, 374, 0, 591, 467, 245, 291, 278, 320,
	362, 474, 0, 0, 352, 522, 287, 376, 0, 266,
	409, 0, 498, 373, 0, 481, 501, 0, 393, 272,
	432, 488, 489, 734, 739, 0, 755, 0, 276, 277,
	398, 258, 406, 603, 569, 461, 419, 417, 0, 384,
	441, 598, 0, 0, 306, 0, 301, 397, 537, 264,
	516, 435, 402, 356, 464, 493, 303, 288, 289, 332,
	434, 322, 274, 527, 566, 570, 568, 564, 561, 565,
	562, 563, 567, 323, 560, 0, 535, 544, 578, 558,
	586, 543, 583, 553, 298, 582, 547, 546, 592, 573,
	574, 528, 588, 559, 557, 550, 549, 545, 0, 223,
	224, 225, 226, 227, 228, 229, 230, 231, 232, 234,
	0, 235, 236, 237, 239, 240, 241, 733, 242, 243,
	244, 247, 248, 249, 251, 611, 252, 253, 254, 255,
	256, 257, 548, 735, 259, 260, 261, 262, 263, 265,
	267, 268, 269, 270, 271, 273, 275, 0, 0, 0,
	738, 0, 0, 0, 279, 280, 281, 282, 283, 284,
	0, 285, 286, 290, 292, 293, 294, 295, 296, 297,
	300, 0, 302, 304, 0, 305, 308, 0, 309, 310,
	311, 312, 313, 314, 315, 316, 552, 317, 0, 318,
	319, 321, 0, 324, 325, 326, 327, 328, 0, 329,
	554, 555, 330, 331, 333, 334, 335, 337, 338, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 0,
	349, 350, 351, 353, 0, 354, 355, 358, 359, 360,
	361, 0, 363, 571, 0, 364, 365, 366, 0, 0,
	367, 368, 369, 370, 371, 372, 375, 572, 377, 378,
	379, 380, 381, 382, 383, 613, 385, 386, 387, 388,
	389, 390, 391, 575, 576, 392, 394, 395, 577, 579,
	580, 751, 410, 411, 412, 413, 414, 415, 416, 418,
	0, 420, 421, 422, 581, 423, 424, 425, 426, 0,
	427, 428, 429, 430, 431, 433, 436, 437, 438, 439,
	0, 442, 443, 444, 445, 446, 447, 448, 450, 451,
	452, 454, 455, 456, 614, 457, 458, 459, 460, 584,
	462, 463, 615, 465, 466, 468, 469, 470, 471, 472,
	473, 624, 0, 475, 585, 476, 477, 478, 479, 480,
	0, 482, 483, 484, 485, 486, 487, 490, 491, 492,
	494, 495, 587, 496, 497, 0, 499, 500, 754, 502,
	503, 504, 505, 506, 0, 625, 507, 589, 508, 590,
	509, 510, 511, 512, 513, 514, 515, 517, 0, 0,
	519, 520, 521, 523, 524, 525, 526, 529, 530, 531,
	532, 533, 0, 534, 536, 538, 616, 593, 594, 595,
	596, 597, 599, 600, 601, 602, 539, 540, 556, 407,
	401, 357, 399, 400, 404, 405, 408, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 729, 0, 1284, 905,
	0, 0, 0, 0, 981, 0, 0, 0, 0, 0,
	0, 0, 1285, 1286, 233, 0, 250, 736, 0, 299,
	336, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 1276, 0, 307, 1281, 741, 0, 747, 0,
	753, 1280, 518, 0, 743, 744, 749, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 1282, 745, 742, 746,
	752, 740, 750, 737, 748, 0, 440, 374, 0, 591,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 0, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 734, 739,
	0, 755, 0, 276, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 598, 0, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 566,
	570, 568, 564, 561, 565, 562, 563, 567, 323, 560,
	0, 535, 544, 578, 558, 586, 543, 583, 553, 298,
	582, 547, 546, 592, 573, 574, 528, 588, 559, 557,
	550, 549, 545, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 733, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 548, 735, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 0, 0, 0, 738, 0, 0, 0, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 552, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 554, 555, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 571, 0,
	364, 365, 366, 0, 0, 367, 368, 369, 370, 371,
	372, 375, 572, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 576,
	392, 394, 395, 577, 579, 580, 751, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 581,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 584, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 0, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 587, 496, 497,
	0, 499, 500, 754, 502, 503, 504, 505, 506, 0,
	625, 507, 589, 508, 590, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 0, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 593, 594, 595, 596, 597, 599, 600, 601,
	602, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 729, 0, 1284, 905, 0, 0, 0, 0, 981,
	0, 0, 0, 0, 0, 0, 0, 1285, 1286, 233,
	0, 250, 736, 0, 299, 336, 551, 0, 0, 396,
	0, 449, 453, 0, 542, 0, 0, 0, 0, 307,
	1281, 741, 0, 747, 0, 753, 1280, 518, 0, 743,
	744, 749, 238, 626, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 1282, 745, 742, 746, 752, 740, 750, 737, 748,
	0, 440, 374, 0, 591, 467, 245, 291, 278, 320,
	362, 474, 0, 0, 352, 522, 287, 376, 0, 266,
	409, 0, 498, 373, 0, 481, 501, 0, 393, 272,
	432, 488, 489, 734, 739, 0, 755, 0, 276, 277,
	398, 258, 406, 603, 569, 461, 419, 417, 0, 384,
	441, 598, 0, 0, 306, 0, 301, 397, 537, 264,
	516, 435, 402, 356, 464, 493, 303, 288, 289, 332,
	434, 322, 274, 527, 566, 570, 568, 564, 561, 565,
	562, 563, 567, 323, 560, 0, 535, 544, 578, 558,
	586, 543, 583, 553, 298, 582, 547, 546, 592, 573,
	574, 528, 588, 559, 557, 550, 549, 545, 0, 223,
	224, 225, 226, 227, 228, 229, 230, 231, 232, 234,
	0, 235, 236, 237, 239, 240, 241, 733, 242, 243,
	244, 247, 248, 249, 251, 611, 252, 253, 254, 255,
	256, 257, 548, 735, 259, 260, 261, 262, 263, 265,
	267, 268, 269, 270, 271, 273, 275, 0, 0, 0,
	738, 0, 0, 0, 279, 280, 281, 282, 283, 284,
	0, 285, 286, 290, 292, 293, 294, 295, 296, 297,
	300, 0, 302, 304, 0, 305, 308, 0, 309, 310,
	311, 312, 313, 314, 315, 316, 552, 317, 0, 318,
	319, 321, 0, 324, 325, 326, 327, 328, 0, 329,
	554, 555, 330, 331, 333, 334, 335, 337, 338, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 0,
	349, 350, 351, 353, 0, 354, 355, 358, 359, 360,
	361, 0, 363, 571, 0, 364, 365, 366, 0, 0,
	367, 368, 369, 370, 371, 372, 375, 572, 377, 378,
	379, 380, 381, 382, 383, 613, 385, 386, 387, 388,
	389, 390, 391, 575, 576, 392, 394, 395, 577, 579,
	580, 751, 410, 411, 412, 413, 414, 415, 416, 418,
	0, 420, 421, 422, 581, 423, 424, 425, 426, 0,
	427, 428, 429, 430, 431, 433, 436, 437, 438, 439,
	0, 442, 443, 444, 445, 446, 447, 448, 450, 451,
	452, 454, 455, 456, 614, 457, 458, 459, 460, 584,
	462, 463, 615, 465, 466, 468, 469, 470, 471, 472,
	473, 624, 0, 475, 585, 476, 477, 478, 479, 480,
	0, 482, 483, 484, 485, 486, 487, 490, 491, 492,
	494, 495, 587, 496, 497, 0, 499, 500, 754, 502,
	503, 504, 505, 506, 0, 625, 507, 589, 508, 590,
	509, 510, 511, 512, 513, 514, 515, 517, 0, 0,
	519, 520, 521, 523, 524, 525, 526, 529, 530, 531,
	532, 533, 0, 534, 536, 538, 616, 593, 594, 595,
	596, 597, 599, 600, 601, 602, 539, 540, 556, 407,
	401, 357, 399, 400, 404, 405, 408, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 791, 0, 973, 905,
	0, 0, 0, 0, 981, 958, 0, 0, 0, 0,
	0, 0, 1285, 1286, 233, 0, 250, 736, 0, 299,
	336, 963, 0, 0, 396, 0, 449, 453, 0, 542,
	978, 0, 0, 0, 307, 976, 741, 0, 747, 977,
	753, 975, 518, 0, 743, 744, 749, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 745, 742, 746,
	752, 740, 750, 737, 748, 0, 440, 374, 0, 591,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 0, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 734, 739,
	0, 755, 0, 276, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 598, 964, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 566,
	570, 568, 564, 561, 983, 984, 563, 567, 323, 560,
	0, 535, 544, 578, 558, 586, 543, 583, 553, 298,
	582, 547, 546, 592, 573, 574, 528, 588, 559, 557,
	550, 549, 545, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 733, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 548, 735, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 0, 0, 0, 738, 0, 0, 0, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 552, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 554, 967, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 571, 0,
	364, 365, 366, 0, 0, 367, 368, 369, 370, 371,
	372, 375, 572, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 576,
	392, 394, 395, 577, 579, 580, 751, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 581,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 2908, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 0, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 587, 496, 497,
	0, 499, 500, 754, 502, 503, 504, 505, 506, 0,
	625, 507, 589, 508, 590, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 0, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 593, 594, 595, 596, 597, 599, 600, 601,
	602, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 791, 0, 973, 905, 0, 0, 0, 0,
	981, 958, 0, 0, 0, 0, 0, 0, 0, 0,
	233, 0, 250, 736, 2307, 299, 336, 963, 0, 0,
	396, 0, 449, 453, 0, 542, 978, 0, 0, 0,
	307, 976, 741, 0, 747, 977, 753, 975, 518, 0,
	743, 744, 749, 238, 626, 541, 612, 0, 0, 0,
	403, 0, 0, 0, 0, 0, 0, 0, 3970, 0,
	0, 0, 0, 745, 742, 746, 752, 740, 750, 737,
	748, 0, 440, 374, 0, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 734, 739, 0, 755, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 964, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	983, 984, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 733, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 735, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 738, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 967, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 751, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	2908, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 754,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 791, 0,
	973, 905, 0, 0, 0, 0, 981, 958, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 736,
	2307, 299, 336, 963, 0, 0, 396, 0, 449, 453,
	0, 542, 978, 0, 0, 0, 307, 976, 741, 0,
	747, 977, 753, 975, 518, 0, 743, 744, 749, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 745,
	742, 746, 752, 740, 750, 737, 748, 0, 440, 374,
	0, 591, 467, 245, 291, 278, 320, 362, 474, 0,
	0, 352, 522, 287, 376, 0, 266, 409, 0, 498,
	373, 0, 481, 501, 0, 393, 272, 432, 488, 489,
	734, 739, 0, 755, 0, 276, 277, 398, 258, 406,
	603, 569, 461, 419, 417, 0, 384, 441, 3429, 964,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 566, 570, 568, 564, 561, 983, 984, 563, 567,
	323, 560, 0, 535, 544, 578, 558, 586, 543, 583,
	553, 298, 582, 547, 546, 592, 573, 574, 528, 588,
	559, 557, 550, 549, 545, 0, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 0, 235, 236,
	237, 239, 240, 241, 733, 242, 243, 244, 247, 248,
	249, 251, 611, 252, 253, 254, 255, 256, 257, 548,
	735, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 0, 0, 0, 738, 0, 0,
	0, 279, 280, 281, 282, 283, 284, 0, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 0, 302,
	304, 0, 305, 308, 0, 309, 310, 311, 312, 313,
	314, 315, 316, 552, 317, 0, 318, 319, 321, 0,
	324, 325, 326, 327, 328, 0, 329, 554, 967, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 0, 349, 350, 351,
	353, 0, 354, 355, 358, 359, 360, 361, 0, 363,
	571, 0, 364, 365, 366, 0, 0, 367, 368, 369,
	370, 371, 372, 375, 572, 377, 378, 379, 380, 381,
	382, 383, 613, 385, 386, 387, 388, 389, 390, 391,
	575, 576, 392, 394, 395, 577, 579, 580, 751, 410,
	411, 412, 413, 414, 415, 416, 418, 0, 420, 421,
	422, 581, 423, 424, 425, 426, 0, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 0, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 614, 457, 458, 459, 460, 2908, 462, 463, 615,
	465, 466, 468, 469, 470, 471, 472, 473, 624, 0,
	475, 585, 476, 477, 478, 479, 480, 0, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 587,
	496, 497, 0, 499, 500, 754, 502, 503, 504, 505,
	506, 0, 625, 507, 589, 508, 590, 509, 510, 511,
	512, 513, 514, 515, 517, 0, 0, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 0,
	534, 536, 538, 616, 593, 594, 595, 596, 597, 599,
	600, 601, 602, 539, 540, 556, 407, 401, 357, 399,
	400, 404, 405, 408, 791, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 233, 0, 250, 736, 2307, 299, 336, 551,
	0, 0, 396, 0, 449, 453, 96, 542, 0, 0,
	0, 0, 307, 0, 741, 0, 747, 0, 753, 0,
	518, 0, 743, 744, 749, 238, 626, 541, 612, 0,
	0, 0, 403, 93, 0, 0, 647, 94, 0, 0,
	246, 0, 0, 0, 0, 745, 742, 746, 752, 740,
	750, 737, 748, 0, 440, 374, 2468, 1831, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 0, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 734, 739, 0, 755,
	0, 276, 277, 398, 258, 406, 2476, 2477, 2475, 419,
	417, 0, 384, 441, 598, 0, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 566, 570, 568,
	564, 561, 983, 984, 563, 567, 323, 560, 0, 535,
	544, 578, 558, 586, 543, 583, 553, 298, 582, 547,
	546, 592, 573, 574, 528, 588, 559, 557, 550, 549,
	545, 0, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	733, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 548, 735, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	0, 0, 0, 738, 0, 0, 0, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 552,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 554, 555, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 571, 0, 364, 365,
	366, 0, 0, 367, 368, 369, 370, 371, 372, 375,
	572, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 575, 576, 392, 394,
	395, 577, 579, 580, 751, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 581, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 584, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 0, 475, 585, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 587, 496, 497, 0, 499,
	500, 754, 502, 503, 504, 505, 506, 0, 625, 507,
	589, 508, 590, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 0, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	593, 594, 595, 596, 597, 599, 600, 601, 602, 539,
	540, 556, 407, 401, 357, 399, 400, 404, 405, 408,
	791, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 0, 0, 0, 0, 0, 0, 0, 233, 0,
	250, 736, 2470, 299, 336, 551, 0, 0, 396, 0,
	449, 453, 0, 542, 0, 0, 0, 0, 307, 0,
	741, 0, 747, 0, 753, 0, 518, 0, 743, 744,
	749, 238, 626, 541, 612, 0, 0, 0, 403, 0,
	0, 0, 647, 0, 0, 0, 246, 0, 0, 0,
	0, 745, 742, 746, 752, 740, 750, 737, 748, 0,
	440, 374, 2468, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 734, 739, 0, 755, 0, 276, 277, 398,
	258, 406, 2476, 2477, 2475, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 983, 984,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 733, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 735, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 738,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	751, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 754, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 791, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 250, 736, 2470, 299,
	336, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 741, 0, 747, 0,
	753, 0, 518, 0, 743, 744, 749, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 745, 742, 746,
	752, 740, 750, 737, 748, 0, 440, 374, 0, 591,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 0, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 734, 739,
	0, 755, 0, 276, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 598, 0, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 566,
	570, 568, 564, 561, 983, 984, 563, 567, 323, 560,
	0, 535, 544, 578, 558, 586, 543, 583, 553, 298,
	582, 547, 546, 592, 573, 574, 528, 588, 559, 557,
	550, 549, 545, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 733, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 548, 735, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 0, 0, 0, 738, 0, 0, 0, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 552, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 554, 555, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 571, 0,
	364, 365, 366, 0, 0, 367, 368, 369, 370, 371,
	372, 375, 572, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 576,
	392, 394, 395, 577, 579, 580, 751, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 581,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 584, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 0, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 587, 496, 497,
	0, 499, 500, 754, 502, 503, 504, 505, 506, 0,
	625, 507, 589, 508, 590, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 0, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 593, 594, 595, 596, 597, 599, 600, 601,
	602, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 791, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	233, 0, 250, 736, 3586, 299, 336, 551, 0, 0,
	396, 0, 449, 453, 0, 542, 0, 0, 0, 0,
	307, 0, 741, 0, 747, 0, 753, 0, 518, 0,
	743, 744, 749, 238, 626, 541, 612, 0, 0, 0,
	403, 0, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 745, 742, 746, 752, 740, 750, 737,
	748, 0, 440, 374, 0, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 734, 739, 0, 755, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	983, 984, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 733, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 735, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 738, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 751, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 754,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 791, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 736,
	4375, 299, 336, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 741, 0,
	747, 0, 753, 0, 518, 0, 743, 744, 749, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 745,
	742, 746, 752, 740, 750, 737, 748, 0, 440, 374,
	0, 591, 467, 245, 291, 278, 320, 362, 474, 0,
	0, 352, 522, 287, 376, 0, 266, 409, 0, 498,
	373, 0, 481, 501, 0, 393, 272, 432, 488, 489,
	734, 739, 0, 755, 0, 276, 277, 398, 258, 406,
	603, 569, 461, 419, 417, 0, 384, 441, 598, 0,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 566, 570, 568, 564, 561, 565, 562, 563, 567,
	323, 560, 0, 535, 544, 578, 558, 586, 543, 583,
	553, 298, 582, 547, 546, 592, 573, 574, 528, 588,
	559, 557, 550, 549, 545, 0, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 0, 235, 236,
	237, 239, 240, 241, 733, 242, 243, 244, 247, 248,
	249, 251, 611, 252, 253, 254, 255, 256, 257, 548,
	735, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 0, 0, 0, 738, 0, 0,
	0, 279, 280, 281, 282, 283, 284, 0, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 0, 302,
	304, 0, 305, 308, 0, 309, 310, 311, 312, 313,
	314, 315, 316, 552, 317, 0, 318, 319, 321, 0,
	324, 325, 326, 327, 328, 0, 329, 554, 555, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 0, 349, 350, 351,
	353, 0, 354, 355, 358, 359, 360, 361, 0, 363,
	571, 0, 364, 365, 366, 0, 0, 367, 368, 369,
	370, 371, 372, 375, 572, 377, 378, 379, 380, 381,
	382, 383, 613, 385, 386, 387, 388, 389, 390, 391,
	575, 576, 392, 394, 395, 577, 579, 580, 751, 410,
	411, 412, 413, 414, 415, 416, 418, 0, 420, 421,
	422, 581, 423, 424, 425, 426, 0, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 0, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 614, 457, 458, 459, 460, 584, 462, 463, 615,
	465, 466, 468, 469, 470, 471, 472, 473, 624, 0,
	475, 585, 476, 477, 478, 479, 480, 0, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 587,
	496, 497, 0, 499, 500, 754, 502, 503, 504, 505,
	506, 0, 625, 507, 589, 508, 590, 509, 510, 511,
	512, 513, 514, 515, 517, 0, 0, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 0,
	534, 536, 538, 616, 593, 594, 595, 596, 597, 599,
	600, 601, 602, 539, 540, 556, 407, 401, 357, 399,
	400, 404, 405, 408, 791, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 233, 0, 250, 736, 4129, 299, 336, 551,
	0, 0, 396, 0, 449, 453, 0, 542, 0, 0,
	0, 0, 307, 0, 741, 0, 747, 0, 753, 0,
	518, 0, 743, 744, 749, 238, 626, 541, 612, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 745, 742, 746, 752, 740,
	750, 737, 748, 0, 440, 374, 0, 591, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 0, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 734, 739, 0, 755,
	0, 276, 277, 398, 258, 406, 603, 569, 461, 419,
	417, 0, 384, 441, 598, 0, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 566, 570, 568,
	564, 561, 983, 984, 563, 567, 323, 560, 0, 535,
	544, 578, 558, 586, 543, 583, 553, 298, 582, 547,
	546, 592, 573, 574, 528, 588, 559, 557, 550, 549,
	545, 0, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	733, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 548, 735, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	0, 0, 0, 738, 0, 0, 0, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 552,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 554, 555, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 571, 0, 364, 365,
	366, 0, 0, 367, 368, 369, 370, 371, 372, 375,
	572, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 575, 576, 392, 394,
	395, 577, 579, 580, 751, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 581, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 584, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 0, 475, 585, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 587, 496, 497, 0, 499,
	500, 754, 502, 503, 504, 505, 506, 0, 625, 507,
	589, 508, 590, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 0, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	593, 594, 595, 596, 597, 599, 600, 601, 602, 539,
	540, 556, 407, 401, 357, 399, 400, 404, 405, 408,
	791, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 233, 0,
	250, 736, 2635, 299, 336, 551, 0, 0, 396, 0,
	449, 453, 0, 542, 0, 0, 0, 0, 307, 0,
	741, 0, 747, 0, 753, 0, 518, 0, 743, 744,
	749, 238, 626, 541, 612, 0, 0, 0, 403, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 745, 742, 746, 752, 740, 750, 737, 748, 0,
	440, 374, 0, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 734, 739, 0, 755, 0, 276, 277, 398,
	258, 406, 2476, 2477, 2475, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 983, 984,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 733, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 735, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 738,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	751, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 754, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 698, 0, 0, 0, 0, 0, 0,
	709, 710, 711, 0, 233, 0, 250, 0, 92, 299,
	336, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 4102, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 0, 591,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 0, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 0, 0,
	0, 0, 0, 276, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 598, 0, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 566,
	570, 568, 564, 561, 565, 562, 563, 567, 323, 560,
	0, 535, 544, 578, 558, 586, 543, 583, 553, 298,
	582, 547, 546, 592, 573, 574, 528, 588, 559, 557,
	550, 549, 545, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 0, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 548, 0, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 0, 0, 0, 0, 0, 0, 0, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 552, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 554, 555, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 571, 0,
	364, 365, 366, 0, 0, 367, 368, 369, 370, 371,
	372, 375, 572, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 576,
	392, 394, 395, 577, 579, 580, 0, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 581,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 584, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 0, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 587, 496, 497,
	0, 499, 500, 0, 502, 503, 504, 505, 506, 0,
	625, 507, 589, 508, 590, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 0, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 593, 594, 595, 596, 597, 599, 600, 601,
	602, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 706, 707,
	708, 0, 0, 0, 0, 0, 220, 700, 701, 702,
	703, 704, 705, 698, 0, 0, 0, 0, 0, 0,
	709, 710, 711, 0, 233, 0, 250, 0, 0, 299,
	336, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 0, 591,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 0, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 0, 0,
	0, 0, 0, 276, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 598, 0, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 566,
	570, 568, 564, 561, 565, 562, 563, 567, 323, 560,
	0, 535, 544, 578, 558, 586, 543, 583, 553, 298,
	582, 547, 546, 592, 573, 574, 528, 588, 559, 557,
	550, 549, 545, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 0, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 2819, 256, 257, 548, 0, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 0, 0, 0, 0, 0, 0, 0, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 552, 2820, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 554, 555, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 571, 0,
	364, 365, 366, 0, 0, 367, 368, 369, 370, 371,
	372, 375, 572, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 576,
	392, 394, 395, 577, 579, 580, 0, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 581,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 584, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 0, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 587, 496, 497,
	0, 499, 500, 0, 502, 503, 504, 505, 506, 0,
	625, 507, 589, 508, 590, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 0, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 593, 594, 595, 596, 597, 599, 600, 601,
	602, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 706, 707,
	708, 0, 0, 0, 0, 0, 220, 700, 701, 702,
	703, 704, 705, 698, 0, 0, 0, 0, 0, 0,
	709, 710, 711, 0, 233, 0, 250, 0, 0, 299,
	336, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 0, 591,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 0, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 0, 0,
	0, 0, 0, 276, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 598, 0, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 566,
	570, 568, 564, 561, 565, 562, 563, 567, 323, 560,
	0, 535, 544, 578, 558, 586, 543, 583, 553, 298,
	582, 547, 546, 592, 573, 574, 528, 588, 559, 557,
	550, 549, 545, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 0, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 694, 256, 257, 548, 0, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 0, 0, 0, 0, 0, 0, 0, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 552, 695, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 554, 555, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 571, 0,
	364, 365, 366, 0, 0, 367, 368, 369, 370, 371,
	372, 375, 572, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 576,
	392, 394, 395, 577, 579, 580, 0, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 581,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 584, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 0, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 587, 496, 497,
	0, 499, 500, 0, 502, 503, 504, 505, 506, 0,
	625, 507, 589, 508, 590, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 0, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 593, 594, 595, 596, 597, 599, 600, 601,
	602, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 706, 707,
	708, 0, 0, 0, 0, 0, 0, 700, 701, 702,
	703, 704, 705, 233, 0, 250, 0, 0, 299, 336,
	551, 0, 0, 396, 0, 449, 453, 0, 542, 0,
	0, 0, 0, 307, 0, 0, 0, 0, 0, 0,
	0, 518, 0, 0, 0, 0, 238, 626, 541, 612,
	0, 0, 0, 403, 0, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 440, 374, 0, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 0, 0, 0,
	0, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 0, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 0, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 0, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 584, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 0, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 250, 0, 0, 299, 336, 551, 0, 4493, 396,
	0, 449, 453, 0, 542, 0, 0, 0, 0, 307,
	0, 0, 0, 0, 0, 0, 0, 518, 0, 0,
	0, 0, 238, 626, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 374, 0, 591, 467, 245, 291, 278, 320,
	362, 474, 0, 0, 352, 522, 287, 376, 0, 266,
	409, 0, 498, 373, 0, 481, 501, 0, 393, 272,
	432, 488, 489, 0, 0, 0, 0, 0, 276, 277,
	398, 258, 406, 603, 569, 461, 419, 417, 0, 384,
	441, 598, 0, 0, 306, 0, 301, 397, 537, 264,
	516, 435, 402, 356, 464, 493, 303, 288, 289, 332,
	434, 322, 274, 527, 566, 570, 568, 564, 561, 565,
	562, 563, 567, 323, 560, 0, 535, 544, 578, 558,
	586, 543, 583, 553, 298, 582, 547, 546, 592, 573,
	574, 528, 588, 559, 557, 550, 549, 545, 0, 223,
	224, 225, 226, 227, 228, 229, 230, 231, 232, 234,
	0, 235, 236, 237, 239, 240, 241, 0, 242, 243,
	244, 247, 248, 249, 251, 611, 252, 253, 254, 255,
	256, 257, 548, 0, 259, 260, 261, 262, 263, 265,
	267, 268, 269, 270, 271, 273, 275, 0, 0, 0,
	0, 0, 0, 0, 279, 280, 281, 282, 283, 284,
	0, 285, 286, 290, 292, 293, 294, 295, 296, 297,
	300, 0, 302, 304, 0, 305, 308, 0, 309, 310,
	311, 312, 313, 314, 315, 316, 552, 317, 0, 318,
	319, 321, 0, 324, 325, 326, 327, 328, 0, 329,
	554, 555, 330, 331, 333, 334, 335, 337, 338, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 0,
	349, 350, 351, 353, 0, 354, 355, 358, 359, 360,
	361, 0, 363, 571, 0, 364, 365, 366, 0, 0,
	367, 368, 369, 370, 371, 372, 375, 572, 377, 378,
	379, 380, 381, 382, 383, 613, 385, 386, 387, 388,
	389, 390, 391, 575, 576, 392, 394, 395, 577, 579,
	580, 0, 410, 411, 412, 413, 414, 415, 416, 418,
	0, 420, 421, 422, 581, 423, 424, 425, 426, 0,
	427, 428, 429, 430, 431, 433, 436, 437, 438, 439,
	0, 442, 443, 444, 445, 446, 447, 448, 450, 451,
	452, 454, 455, 456, 614, 457, 458, 459, 460, 584,
	462, 463, 615, 465, 466, 468, 469, 470, 471, 472,
	473, 624, 0, 475, 585, 476, 477, 478, 479, 480,
	0, 482, 483, 484, 485, 486, 487, 490, 491, 492,
	494, 495, 587, 496, 497, 0, 499, 500, 0, 502,
	503, 504, 505, 506, 0, 625, 507, 589, 508, 590,
	509, 510, 511, 512, 513, 514, 515, 517, 0, 0,
	519, 520, 521, 523, 524, 525, 526, 529, 530, 531,
	532, 533, 0, 534, 536, 538, 616, 593, 594, 595,
	596, 597, 599, 600, 601, 602, 539, 540, 556, 407,
	401, 357, 399, 400, 404, 405, 408, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 0, 250, 0, 0,
	299, 336, 551, 0, 4363, 396, 0, 449, 453, 0,
	542, 0, 0, 0, 0, 307, 0, 0, 0, 0,
	0, 0, 0, 518, 0, 0, 0, 0, 238, 626,
	541, 612, 0, 0, 0, 403, 0, 0, 0, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 440, 374, 0,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 0,
	0, 0, 0, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 0, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 0,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 0, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 0, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 250, 0, 0, 299, 336, 551, 0,
	4360, 396, 0, 449, 453, 96, 542, 0, 0, 0,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 518,
	0, 0, 0, 0, 238, 626, 541, 612, 0, 0,
	0, 403, 93, 0, 0, 0, 94, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 374, 0, 1831, 467, 245, 291,
	278, 320, 362, 474, 0, 0, 352, 522, 287, 376,
	0, 266, 409, 0, 498, 373, 0, 481, 501, 0,
	393, 272, 432, 488, 489, 0, 0, 0, 0, 0,
	276, 277, 398, 258, 406, 603, 569, 461, 419, 417,
	0, 384, 441, 598, 0, 0, 306, 0, 301, 397,
	537, 264, 516, 435, 402, 356, 464, 493, 303, 288,
	289, 332, 434, 322, 274, 527, 566, 570, 568, 564,
	561, 565, 562, 563, 567, 323, 560, 0, 535, 544,
	578, 558, 586, 543, 583, 553, 298, 582, 547, 546,
	592, 573, 574, 528, 588, 559, 557, 550, 549, 545,
	0, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 234, 0, 235, 236, 237, 239, 240, 241, 0,
	242, 243, 244, 247, 248, 249, 251, 611, 252, 253,
	254, 255, 256, 257, 548, 0, 259, 260, 261, 262,
	263, 265, 267, 268, 269, 270, 271, 273, 275, 0,
	0, 0, 0, 0, 0, 0, 279, 280, 281, 282,
	283, 284, 0, 285, 286, 290, 292, 293, 294, 295,
	296, 297, 300, 0, 302, 304, 0, 305, 308, 0,
	309, 310, 311, 312, 313, 314, 315, 316, 552, 317,
	0, 318, 319, 321, 0, 324, 325, 326, 327, 328,
	0, 329, 554, 555, 330, 331, 333, 334, 335, 337,
	338, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 0, 349, 350, 351, 353, 0, 354, 355, 358,
	359, 360, 361, 0, 363, 571, 0, 364, 365, 366,
	0, 0, 367, 368, 369, 370, 371, 372, 375, 572,
	377, 378, 379, 380, 381, 382, 383, 613, 385, 386,
	387, 388, 389, 390, 391, 575, 576, 392, 394, 395,
	577, 579, 580, 0, 410, 411, 412, 413, 414, 415,
	416, 418, 0, 420, 421, 422, 581, 423, 424, 425,
	426, 0, 427, 428, 429, 430, 431, 433, 436, 437,
	438, 439, 0, 442, 443, 444, 445, 446, 447, 448,
	450, 451, 452, 454, 455, 456, 614, 457, 458, 459,
	460, 584, 462, 463, 615, 465, 466, 468, 469, 470,
	471, 472, 473, 624, 0, 475, 585, 476, 477, 478,
	479, 480, 0, 482, 483, 484, 485, 486, 487, 490,
	491, 492, 494, 495, 587, 496, 497, 0, 499, 500,
	0, 502, 503, 504, 505, 506, 0, 625, 507, 589,
	508, 590, 509, 510, 511, 512, 513, 514, 515, 517,
	0, 0, 519, 520, 521, 523, 524, 525, 526, 529,
	530, 531, 532, 533, 0, 534, 536, 538, 616, 593,
	594, 595, 596, 597, 599, 600, 601, 602, 539, 540,
	556, 407, 401, 357, 399, 400, 404, 405, 408, 729,
	0, 0, 905, 0, 0, 0, 0, 0, 97, 0,
	0, 0, 0, 0, 0, 0, 0, 233, 0, 250,
	736, 92, 299, 336, 551, 0, 0, 396, 0, 449,
	453, 0, 542, 0, 0, 0, 0, 307, 1281, 741,
	0, 747, 0, 753, 1280, 518, 0, 743, 744, 749,
	238, 626, 541, 612, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 246, 0, 0, 0, 1282,
	745, 742, 746, 752, 740, 750, 737, 748, 0, 440,
	374, 0, 591, 467, 245, 291, 278, 320, 362, 474,
	0, 0, 352, 522, 287, 376, 0, 266, 409, 0,
	498, 373, 0, 481, 501, 0, 393, 272, 432, 488,
	489, 734, 739, 0, 755, 0, 276, 277, 398, 258,
	406, 603, 569, 461, 419, 417, 0, 384, 441, 598,
	0, 0, 306, 0, 301, 397, 537, 264, 516, 435,
	402, 356, 464, 493, 303, 288, 289, 332, 434, 322,
	274, 527, 566, 570, 568, 564, 561, 565, 562, 563,
	567, 323, 560, 0, 535, 544, 578, 558, 586, 543,
	583, 553, 298, 582, 547, 546, 592, 573, 574, 528,
	588, 559, 557, 550, 549, 545, 0, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 234, 0, 235,
	236, 237, 239, 240, 241, 733, 242, 243, 244, 247,
	248, 249, 251, 611, 252, 253, 254, 255, 256, 257,
	548, 735, 259, 260, 261, 262, 263, 265, 267, 268,
	269, 270, 271, 273, 275, 0, 0, 0, 738, 0,
	0, 0, 279, 280, 281, 282, 283, 284, 0, 285,
	286, 290, 292, 293, 294, 295, 296, 297, 300, 0,
	302, 304, 0, 305, 308, 0, 309, 310, 311, 312,
	313, 314, 315, 316, 552, 317, 0, 318, 319, 321,
	0, 324, 325, 326, 327, 328, 0, 329, 554, 555,
	330, 331, 333, 334, 335, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 0, 349, 350,
	351, 353, 0, 354, 355, 358, 359, 360, 361, 0,
	363, 571, 0, 364, 365, 366, 0, 0, 367, 368,
	369, 370, 371, 372, 375, 572, 377, 378, 379, 380,
	381, 382, 383, 613, 385, 386, 387, 388, 389, 390,
	391, 575, 576, 392, 394, 395, 577, 579, 580, 751,
	410, 411, 412, 413, 414, 415, 416, 418, 0, 420,
	421, 422, 581, 423, 424, 425, 426, 0, 427, 428,
	429, 430, 431, 433, 436, 437, 438, 439, 0, 442,
	443, 444, 445, 446, 447, 448, 450, 451, 452, 454,
	455, 456, 614, 457, 458, 459, 460, 584, 462, 463,
	615, 465, 466, 468, 469, 470, 471, 472, 473, 624,
	0, 475, 585, 476, 477, 478, 479, 480, 0, 482,
	483, 484, 485, 486, 487, 490, 491, 492, 494, 495,
	587, 496, 497, 0, 499, 500, 754, 502, 503, 504,
	505, 506, 0, 625, 507, 589, 508, 590, 509, 510,
	511, 512, 513, 514, 515, 517, 0, 0, 519, 520,
	521, 523, 524, 525, 526, 529, 530, 531, 532, 533,
	0, 534, 536, 538, 616, 593, 594, 595, 596, 597,
	599, 600, 601, 602, 539, 540, 556, 407, 401, 357,
	399, 400, 404, 405, 408, 729, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 233, 0, 250, 736, 0, 299, 336,
	551, 0, 0, 396, 0, 449, 453, 0, 542, 0,
	0, 0, 0, 307, 0, 741, 0, 747, 0, 753,
	0, 518, 0, 743, 744, 749, 238, 626, 541, 612,
	0, 0, 0, 403, 0, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 745, 742, 746, 752,
	740, 750, 737, 748, 0, 440, 374, 0, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 2052, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 734, 739, 0,
	755, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 733, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 735, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 726, 738, 0, 0, 727, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 751, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 584, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 728, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 754, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 250, 0, 0, 299, 336, 551, 0, 0, 396,
	0, 449, 453, 0, 542, 0, 0, 0, 0, 307,
	0, 0, 0, 0, 0, 0, 0, 518, 0, 0,
	0, 0, 238, 626, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 647, 2068, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 374, 0, 591, 467, 245, 291, 278, 320,
	362, 474, 0, 0, 352, 522, 287, 376, 0, 266,
	409, 0, 498, 373, 0, 481, 501, 0, 393, 272,
	432, 488, 489, 0, 0, 0, 0, 0, 276, 277,
	398, 258, 406, 603, 569, 461, 419, 417, 0, 384,
	441, 598, 0, 0, 306, 0, 301, 397, 537, 264,
	516, 435, 402, 356, 464, 493, 303, 288, 289, 332,
	434, 322, 274, 527, 566, 570, 568, 564, 561, 565,
	562, 563, 567, 323, 560, 0, 535, 544, 578, 558,
	586, 543, 583, 553, 298, 582, 547, 546, 592, 573,
	574, 528, 588, 559, 557, 550, 549, 545, 0, 223,
	224, 225, 226, 227, 228, 229, 230, 231, 232, 234,
	0, 235, 236, 237, 239, 240, 241, 0, 242, 243,
	244, 247, 248, 249, 251, 611, 252, 253, 254, 255,
	256, 257, 548, 0, 259, 260, 261, 262, 263, 265,
	267, 268, 269, 270, 271, 273, 275, 0, 0, 0,
	2072, 0, 0, 0, 279, 280, 281, 282, 283, 284,
	0, 285, 286, 290, 292, 293, 294, 295, 296, 297,
	300, 0, 302, 304, 0, 305, 308, 0, 309, 310,
	311, 312, 313, 314, 315, 316, 552, 317, 0, 318,
	319, 321, 0, 324, 325, 326, 327, 328, 0, 329,
	554, 555, 330, 331, 333, 334, 335, 337, 338, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 0,
	349, 350, 351, 353, 0, 354, 355, 358, 359, 360,
	361, 0, 363, 571, 0, 364, 365, 366, 0, 0,
	367, 368, 369, 370, 371, 372, 375, 572, 377, 378,
	379, 380, 381, 382, 383, 613, 385, 386, 387, 388,
	389, 390, 391, 575, 576, 392, 394, 395, 577, 579,
	580, 0, 410, 411, 412, 413, 414, 415, 416, 418,
	0, 420, 421, 422, 581, 423, 424, 425, 426, 0,
	427, 428, 429, 430, 431, 433, 436, 437, 438, 439,
	0, 442, 443, 444, 445, 446, 447, 448, 450, 451,
	452, 454, 455, 456, 614, 457, 458, 459, 460, 584,
	462, 463, 615, 465, 466, 468, 469, 470, 471, 472,
	473, 624, 0, 475, 585, 476, 477, 478, 479, 480,
	0, 482, 483, 484, 485, 486, 487, 490, 491, 492,
	494, 495, 587, 496, 497, 0, 2069, 500, 0, 502,
	503, 504, 505, 506, 0, 625, 507, 589, 508, 590,
	509, 510, 511, 512, 513, 514, 515, 517, 0, 0,
	519, 520, 521, 523, 524, 525, 526, 529, 530, 531,
	532, 533, 0, 534, 536, 538, 616, 593, 594, 595,
	596, 597, 599, 600, 601, 602, 539, 540, 556, 407,
	401, 357, 399, 400, 404, 405, 408, 729, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 822, 233, 0, 250, 736, 1044,
	299, 336, 551, 0, 0, 396, 0, 449, 453, 0,
	542, 0, 0, 0, 0, 307, 0, 741, 0, 747,
	0, 753, 0, 518, 0, 743, 744, 749, 238, 626,
	541, 612, 0, 0, 0, 403, 0, 0, 0, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 745, 742,
	746, 752, 740, 750, 737, 748, 0, 440, 374, 0,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 734,
	739, 0, 755, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 733, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 735,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 726, 738, 0, 0, 727,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	820, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 751, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 728, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 754, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 729, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	818, 233, 0, 250, 736, 0, 299, 336, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 0,
	0, 307, 0, 741, 0, 747, 0, 753, 0, 518,
	0, 743, 744, 749, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 745, 742, 746, 752, 740, 750,
	737, 748, 0, 440, 374, 0, 591, 467, 245, 291,
	278, 320, 362, 474, 0, 0, 352, 522, 287, 376,
	0, 266, 409, 0, 498, 373, 0, 481, 501, 0,
	393, 272, 432, 488, 489, 734, 739, 0, 755, 0,
	276, 277, 398, 258, 406, 603, 569, 461, 419, 417,
	0, 384, 441, 598, 0, 0, 306, 0, 301, 397,
	537, 264, 516, 435, 402, 356, 464, 493, 303, 288,
	289, 332, 434, 322, 274, 527, 566, 570, 568, 564,
	561, 565, 562, 563, 567, 323, 560, 0, 535, 544,
	578, 558, 586, 543, 583, 553, 298, 582, 547, 546,
	592, 573, 574, 528, 588, 559, 557, 550, 549, 545,
	0, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 234, 0, 235, 236, 237, 239, 240, 241, 733,
	242, 243, 244, 247, 248, 249, 251, 611, 252, 253,
	254, 255, 256, 257, 548, 735, 259, 260, 261, 262,
	263, 265, 267, 268, 269, 270, 271, 273, 275, 0,
	0, 726, 738, 0, 0, 727, 279, 280, 281, 282,
	283, 284, 0, 285, 286, 290, 292, 293, 294, 295,
	296, 297, 300, 0, 302, 304, 0, 305, 308, 0,
	309, 310, 311, 312, 313, 314, 315, 316, 552, 317,
	0, 318, 319, 321, 0, 324, 325, 326, 327, 328,
	0, 329, 554, 555, 330, 331, 333, 334, 335, 337,
	338, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 0, 349, 350, 351, 353, 0, 354, 355, 358,
	359, 360, 361, 0, 363, 571, 0, 364, 365, 366,
	0, 0, 367, 368, 369, 370, 371, 372, 375, 572,
	377, 378, 379, 380, 381, 382, 383, 613, 385, 386,
	387, 388, 389, 390, 391, 575, 576, 392, 394, 395,
	577, 579, 580, 751, 410, 411, 412, 413, 414, 415,
	416, 418, 0, 420, 421, 422, 581, 423, 424, 425,
	426, 0, 427, 428, 429, 430, 431, 433, 436, 437,
	438, 439, 0, 442, 443, 444, 445, 446, 447, 448,
	450, 451, 452, 454, 455, 456, 614, 457, 458, 459,
	460, 584, 462, 463, 615, 465, 466, 468, 469, 470,
	471, 472, 473, 624, 728, 475, 585, 476, 477, 478,
	479, 480, 0, 482, 483, 484, 485, 486, 487, 490,
	491, 492, 494, 495, 587, 496, 497, 0, 499, 500,
	754, 502, 503, 504, 505, 506, 0, 625, 507, 589,
	508, 590, 509, 510, 511, 512, 513, 514, 515, 517,
	0, 0, 519, 520, 521, 523, 524, 525, 526, 529,
	530, 531, 532, 533, 0, 534, 536, 538, 616, 593,
	594, 595, 596, 597, 599, 600, 601, 602, 539, 540,
	556, 407, 401, 357, 399, 400, 404, 405, 408, 729,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 233, 0, 250,
	736, 0, 299, 336, 551, 0, 0, 396, 0, 449,
	453, 0, 542, 0, 0, 0, 0, 307, 0, 741,
	0, 747, 0, 753, 0, 518, 0, 743, 744, 749,
	238, 626, 541, 612, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	745, 742, 746, 752, 740, 750, 737, 748, 0, 440,
	374, 0, 591, 467, 245, 291, 278, 320, 362, 474,
	0, 0, 352, 522, 287, 376, 0, 266, 409, 0,
	498, 373, 0, 481, 501, 0, 393, 272, 432, 488,
	489, 734, 739, 0, 755, 0, 276, 277, 398, 258,
	406, 603, 569, 461, 419, 417, 0, 384, 441, 598,
	0, 0, 306, 0, 301, 397, 537, 264, 516, 435,
	402, 356, 464, 493, 303, 288, 289, 332, 434, 322,
	274, 527, 566, 570, 568, 564, 561, 565, 562, 563,
	567, 323, 560, 0, 535, 544, 578, 558, 586, 543,
	583, 553, 298, 582, 547, 546, 592, 573, 574, 528,
	588, 559, 557, 550, 549, 545, 0, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 234, 0, 235,
	236, 237, 239, 240, 241, 733, 242, 243, 244, 247,
	248, 249, 251, 611, 252, 253, 254, 255, 256, 257,
	548, 735, 259, 260, 261, 262, 263, 265, 267, 268,
	269, 270, 271, 273, 275, 0, 0, 726, 738, 0,
	0, 727, 279, 280, 281, 282, 283, 284, 0, 285,
	286, 290, 292, 293, 294, 295, 296, 297, 300, 0,
	302, 304, 0, 305, 308, 0, 309, 310, 311, 312,
	313, 314, 315, 316, 552, 317, 0, 318, 319, 321,
	0, 324, 325, 326, 327, 328, 0, 329, 554, 555,
	330, 331, 333, 334, 335, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 0, 349, 350,
	351, 353, 0, 354, 355, 358, 359, 360, 361, 0,
	363, 571, 0, 364, 365, 366, 0, 0, 367, 368,
	369, 370, 371, 372, 375, 572, 377, 378, 379, 380,
	381, 382, 383, 613, 385, 386, 387, 388, 389, 390,
	391, 575, 576, 392, 394, 395, 577, 579, 580, 751,
	410, 411, 412, 413, 414, 415, 416, 418, 0, 420,
	421, 422, 581, 423, 424, 425, 426, 0, 427, 428,
	429, 430, 431, 433, 436, 437, 438, 439, 0, 442,
	443, 444, 445, 446, 447, 448, 450, 451, 452, 454,
	455, 456, 614, 457, 458, 459, 460, 584, 462, 463,
	615, 465, 466, 468, 469, 470, 471, 472, 473, 624,
	728, 475, 585, 476, 477, 478, 479, 480, 0, 482,
	483, 484, 485, 486, 487, 490, 491, 492, 494, 495,
	587, 496, 497, 0, 499, 500, 754, 502, 503, 504,
	505, 506, 0, 625, 507, 589, 508, 590, 509, 510,
	511, 512, 513, 514, 515, 517, 0, 0, 519, 520,
	521, 523, 524, 525, 526, 529, 530, 531, 532, 533,
	0, 534, 536, 538, 616, 593, 594, 595, 596, 597,
	599, 600, 601, 602, 539, 540, 556, 407, 401, 357,
	399, 400, 404, 405, 408, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 233, 2986, 250, 0, 0, 299, 336,
	551, 0, 0, 396, 0, 449, 453, 0, 542, 0,
	0, 0, 0, 307, 0, 0, 0, 0, 0, 0,
	0, 518, 0, 0, 0, 0, 238, 626, 541, 612,
	0, 0, 0, 403, 0, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 440, 374, 0, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 0, 0, 0,
	0, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 0, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 0, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 0, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 584, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 0, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 0, 729, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	233, 0, 250, 736, 941, 299, 883, 551, 0, 0,
	396, 0, 449, 453, 0, 542, 0, 0, 0, 0,
	307, 0, 741, 0, 747, 0, 753, 0, 518, 0,
	743, 744, 749, 238, 626, 541, 612, 0, 0, 0,
	403, 0, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 745, 742, 746, 752, 740, 750, 737,
	748, 0, 440, 374, 0, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 734, 739, 0, 755, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 733, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 735, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	726, 738, 0, 0, 727, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 751, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 728, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 754,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 729, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 736,
	0, 299, 881, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 741, 0,
	747, 0, 753, 0, 518, 0, 743, 744, 749, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 745,
	742, 746, 752, 740, 750, 737, 748, 0, 440, 374,
	0, 591, 467, 245, 291, 278, 320, 362, 474, 0,
	0, 352, 522, 287, 376, 0, 266, 409, 0, 498,
	373, 0, 481, 501, 0, 393, 272, 432, 488, 489,
	734, 739, 0, 755, 0, 276, 277, 398, 258, 406,
	603, 569, 461, 419, 417, 0, 384, 441, 598, 0,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 566, 570, 568, 564, 561, 565, 562, 563, 567,
	323, 560, 0, 535, 544, 578, 558, 586, 543, 583,
	553, 298, 582, 547, 546, 592, 573, 574, 528, 588,
	559, 557, 550, 549, 545, 0, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 0, 235, 236,
	237, 239, 240, 241, 733, 242, 243, 244, 247, 248,
	249, 251, 611, 252, 253, 254, 255, 256, 257, 548,
	735, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 0, 0, 726, 738, 0, 0,
	727, 279, 280, 281, 282, 283, 284, 0, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 0, 302,
	304, 0, 305, 308, 0, 309, 310, 311, 312, 313,
	314, 315, 316, 552, 317, 0, 318, 319, 321, 0,
	324, 325, 326, 327, 328, 0, 329, 554, 555, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 0, 349, 350, 351,
	353, 0, 354, 355, 358, 359, 360, 361, 0, 363,
	571, 0, 364, 365, 366, 0, 0, 367, 368, 369,
	370, 371, 372, 375, 572, 377, 378, 379, 380, 381,
	382, 383, 613, 385, 386, 387, 388, 389, 390, 391,
	575, 576, 392, 394, 395, 577, 579, 580, 751, 410,
	411, 412, 413, 414, 415, 416, 418, 0, 420, 421,
	422, 581, 423, 424, 425, 426, 0, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 0, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 614, 457, 458, 459, 460, 584, 462, 463, 615,
	465, 466, 468, 469, 470, 471, 472, 473, 624, 728,
	475, 585, 476, 477, 478, 479, 480, 0, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 587,
	496, 497, 0, 499, 500, 754, 502, 503, 504, 505,
	506, 0, 625, 507, 589, 508, 590, 509, 510, 511,
	512, 513, 514, 515, 517, 0, 0, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 0,
	534, 536, 538, 616, 593, 594, 595, 596, 597, 599,
	600, 601, 602, 539, 540, 556, 407, 401, 357, 399,
	400, 404, 405, 408, 729, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 233, 0, 250, 736, 0, 299, 878, 551,
	0, 0, 396, 0, 449, 453, 0, 542, 0, 0,
	0, 0, 307, 0, 741, 0, 747, 0, 753, 0,
	518, 0, 743, 744, 749, 238, 626, 541, 612, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 745, 742, 746, 752, 740,
	750, 737, 748, 0, 440, 374, 0, 591, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 0, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 734, 739, 0, 755,
	0, 276, 277, 398, 258, 406, 603, 569, 461, 419,
	417, 0, 384, 441, 598, 0, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 566, 570, 568,
	564, 561, 565, 562, 563, 567, 323, 560, 0, 535,
	544, 578, 558, 586, 543, 583, 553, 298, 582, 547,
	546, 592, 573, 574, 528, 588, 559, 557, 550, 549,
	545, 0, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	733, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 548, 735, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	0, 0, 726, 738, 0, 0, 727, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 552,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 554, 555, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 571, 0, 364, 365,
	366, 0, 0, 367, 368, 369, 370, 876, 372, 375,
	572, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 575, 576, 392, 394,
	395, 577, 579, 580, 751, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 581, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 584, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 728, 475, 585, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 587, 496, 497, 0, 499,
	500, 754, 502, 503, 504, 505, 506, 0, 625, 507,
	589, 508, 590, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 0, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	593, 594, 595, 596, 597, 599, 600, 601, 602, 539,
	540, 556, 407, 401, 357, 399, 400, 404, 405, 408,
	729, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 233, 0,
	250, 736, 0, 299, 336, 551, 0, 0, 396, 0,
	449, 453, 0, 542, 0, 0, 0, 0, 307, 0,
	741, 0, 747, 0, 753, 0, 518, 0, 743, 744,
	749, 238, 626, 541, 612, 0, 0, 0, 403, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 745, 742, 746, 752, 740, 750, 737, 748, 0,
	440, 374, 0, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 734, 739, 0, 755, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 733, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 735, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 726, 738,
	0, 0, 727, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 722, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	751, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 728, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 754, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 729, 0, 0, 905,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 250, 736, 0, 299,
	336, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 1272, 0, 307, 0, 741, 0, 747, 0,
	753, 0, 518, 0, 743, 744, 749, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 745, 742, 746,
	752, 740, 750, 737, 748, 0, 440, 374, 0, 591,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 0, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 734, 739,
	0, 755, 0, 276, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 598, 0, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 566,
	570, 568, 564, 561, 565, 562, 563, 567, 323, 560,
	0, 535, 544, 578, 558, 586, 543, 583, 553, 298,
	582, 547, 546, 592, 573, 574, 528, 588, 559, 557,
	550, 549, 545, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 733, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 548, 735, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 0, 0, 0, 738, 0, 0, 0, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 552, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 554, 555, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 571, 0,
	364, 365, 366, 0, 0, 367, 368, 369, 370, 371,
	372, 375, 572, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 576,
	392, 394, 395, 577, 579, 580, 751, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 581,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 584, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 0, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 587, 496, 497,
	0, 499, 500, 754, 502, 503, 504, 505, 506, 0,
	625, 507, 589, 508, 590, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 0, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 593, 594, 595, 596, 597, 599, 600, 601,
	602, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 220, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	233, 0, 250, 0, 0, 299, 336, 551, 0, 0,
	396, 0, 449, 453, 0, 542, 0, 0, 0, 0,
	307, 0, 0, 0, 0, 0, 0, 0, 518, 0,
	0, 0, 0, 238, 626, 541, 612, 0, 0, 0,
	403, 0, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 440, 374, 0, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 729, 0,
	0, 905, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 736,
	1974, 299, 336, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 741, 0,
	747, 0, 753, 0, 518, 0, 743, 744, 749, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 745,
	742, 746, 752, 740, 750, 737, 748, 0, 440, 374,
	0, 591, 467, 245, 291, 278, 320, 362, 474, 0,
	0, 352, 522, 287, 376, 0, 266, 409, 0, 498,
	373, 0, 481, 501, 0, 393, 272, 432, 488, 489,
	734, 739, 0, 755, 0, 276, 277, 398, 258, 406,
	603, 569, 461, 419, 417, 0, 384, 441, 598, 0,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 566, 570, 568, 564, 561, 565, 562, 563, 567,
	323, 560, 0, 535, 544, 578, 558, 586, 543, 583,
	553, 298, 582, 547, 546, 592, 573, 574, 528, 588,
	559, 557, 550, 549, 545, 0, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 0, 235, 236,
	237, 239, 240, 241, 733, 242, 243, 244, 247, 248,
	249, 251, 611, 252, 253, 254, 255, 256, 257, 548,
	735, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 0, 0, 0, 738, 0, 0,
	0, 279, 280, 281, 282, 283, 284, 0, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 0, 302,
	304, 0, 305, 308, 0, 309, 310, 311, 312, 313,
	314, 315, 316, 552, 317, 0, 318, 319, 321, 0,
	324, 325, 326, 327, 328, 0, 329, 554, 555, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 0, 349, 350, 351,
	353, 0, 354, 355, 358, 359, 360, 361, 0, 363,
	571, 0, 364, 365, 366, 0, 0, 367, 368, 369,
	370, 371, 372, 375, 572, 377, 378, 379, 380, 381,
	382, 383, 613, 385, 386, 387, 388, 389, 390, 391,
	575, 576, 392, 394, 395, 577, 579, 580, 751, 410,
	411, 412, 413, 414, 415, 416, 418, 0, 420, 421,
	422, 581, 423, 424, 425, 426, 0, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 0, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 614, 457, 458, 459, 460, 584, 462, 463, 615,
	465, 466, 468, 469, 470, 471, 472, 473, 624, 0,
	475, 585, 476, 477, 478, 479, 480, 0, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 587,
	496, 497, 0, 499, 500, 754, 502, 503, 504, 505,
	506, 0, 625, 507, 589, 508, 590, 509, 510, 511,
	512, 513, 514, 515, 517, 0, 0, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 0,
	534, 536, 538, 616, 593, 594, 595, 596, 597, 599,
	600, 601, 602, 539, 540, 556, 407, 401, 357, 399,
	400, 404, 405, 408, 220, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 233, 0, 250, 0, 0, 299, 336, 551,
	0, 0, 396, 0, 449, 453, 0, 542, 0, 0,
	0, 0, 307, 0, 0, 0, 0, 0, 0, 0,
	518, 0, 0, 0, 0, 238, 626, 541, 612, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 440, 374, 0, 591, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 0, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 0, 0, 0, 0,
	0, 276, 277, 398, 258, 406, 603, 569, 461, 419,
	417, 0, 384, 441, 598, 0, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 566, 570, 568,
	564, 561, 565, 562, 563, 567, 323, 560, 0, 535,
	544, 578, 558, 586, 543, 583, 553, 298, 582, 547,
	546, 592, 573, 574, 528, 588, 559, 557, 550, 549,
	545, 0, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	0, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 548, 0, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	0, 0, 0, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 552,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 554, 555, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 571, 0, 364, 365,
	366, 0, 0, 367, 368, 369, 370, 371, 372, 375,
	572, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 575, 576, 392, 394,
	395, 577, 579, 580, 0, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 581, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 584, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 0, 475, 585, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 587, 496, 497, 0, 499,
	500, 0, 502, 503, 504, 505, 506, 0, 625, 507,
	589, 508, 590, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 0, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	593, 594, 595, 596, 597, 599, 600, 601, 602, 539,
	540, 556, 407, 401, 357, 399, 400, 404, 405, 408,
	220, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 233, 0,
	250, 0, 2933, 299, 336, 551, 0, 0, 396, 0,
	449, 453, 0, 542, 0, 0, 0, 0, 307, 0,
	0, 0, 0, 0, 0, 0, 518, 0, 0, 0,
	0, 238, 626, 541, 612, 0, 0, 0, 403, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	440, 374, 0, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 791, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 250, 736, 993, 299,
	336, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 741, 0, 747, 0,
	753, 0, 518, 0, 743, 744, 749, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 745, 742, 746,
	752, 740, 750, 737, 748, 0, 440, 374, 0, 591,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 0, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 734, 739,
	0, 755, 0, 276, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 598, 0, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 566,
	570, 568, 564, 561, 565, 562, 563, 567, 323, 560,
	0, 535, 544, 578, 558, 586, 543, 583, 553, 298,
	582, 547, 546, 592, 573, 574, 528, 588, 559, 557,
	550, 549, 545, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 733, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 548, 735, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 0, 0, 0, 738, 0, 0, 0, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 552, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 554, 555, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 571, 0,
	364, 365, 366, 0, 0, 367, 368, 369, 370, 371,
	372, 375, 572, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 576,
	392, 394, 395, 577, 579, 580, 751, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 581,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 584, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 0, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 587, 496, 497,
	0, 499, 500, 754, 502, 503, 504, 505, 506, 0,
	625, 507, 589, 508, 590, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 0, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 593, 594, 595, 596, 597, 599, 600, 601,
	602, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 729, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	233, 0, 250, 736, 0, 299, 336, 551, 0, 0,
	396, 0, 449, 453, 0, 542, 0, 0, 0, 0,
	307, 0, 741, 0, 747, 0, 753, 0, 518, 0,
	743, 744, 749, 238, 626, 541, 612, 0, 0, 0,
	403, 0, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 745, 742, 746, 752, 740, 750, 737,
	748, 0, 440, 374, 0, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 734, 739, 0, 755, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 733, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 735, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 738, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 751, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 754,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 791, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 736,
	0, 299, 336, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 741, 0,
	747, 0, 753, 0, 518, 0, 743, 744, 749, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 745,
	742, 746, 752, 740, 750, 737, 748, 0, 440, 374,
	0, 591, 467, 245, 291, 278, 320, 362, 474, 0,
	0, 352, 522, 287, 376, 0, 266, 409, 0, 498,
	373, 0, 481, 501, 0, 393, 272, 432, 488, 489,
	734, 739, 0, 755, 0, 276, 277, 398, 258, 406,
	603, 569, 461, 419, 417, 0, 384, 441, 598, 0,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 566, 570, 568, 564, 561, 983, 984, 563, 567,
	323, 560, 0, 535, 544, 578, 558, 586, 543, 583,
	553, 298, 582, 547, 546, 592, 573, 574, 528, 588,
	559, 557, 550, 549, 545, 0, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 0, 235, 236,
	237, 239, 240, 241, 733, 242, 243, 244, 247, 248,
	249, 251, 611, 252, 253, 254, 255, 256, 257, 548,
	735, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 0, 0, 0, 738, 0, 0,
	0, 279, 280, 281, 282, 283, 284, 0, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 0, 302,
	304, 0, 305, 308, 0, 309, 310, 311, 312, 313,
	314, 315, 316, 552, 317, 0, 318, 319, 321, 0,
	324, 325, 326, 327, 328, 0, 329, 554, 555, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 0, 349, 350, 351,
	353, 0, 354, 355, 358, 359, 360, 361, 0, 363,
	571, 0, 364, 365, 366, 0, 0, 367, 368, 369,
	370, 371, 372, 375, 572, 377, 378, 379, 380, 381,
	382, 383, 613, 385, 386, 387, 388, 389, 390, 391,
	575, 576, 392, 394, 395, 577, 579, 580, 751, 410,
	411, 412, 413, 414, 415, 416, 418, 0, 420, 421,
	422, 581, 423, 424, 425, 426, 0, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 0, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 614, 457, 458, 459, 460, 584, 462, 463, 615,
	465, 466, 468, 469, 470, 471, 472, 473, 624, 0,
	475, 585, 476, 477, 478, 479, 480, 0, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 587,
	496, 497, 0, 499, 500, 754, 502, 503, 504, 505,
	506, 0, 625, 507, 589, 508, 590, 509, 510, 511,
	512, 513, 514, 515, 517, 0, 0, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 0,
	534, 536, 538, 616, 593, 594, 595, 596, 597, 599,
	600, 601, 602, 539, 540, 556, 407, 401, 357, 399,
	400, 404, 405, 408, 2560, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 233, 0, 250, 736, 0, 299, 336, 0,
	0, 0, 396, 0, 449, 453, 0, 0, 0, 0,
	0, 0, 307, 0, 741, 2535, 747, 0, 753, 0,
	518, 0, 743, 744, 749, 238, 863, 541, 612, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 745, 742, 746, 752, 740,
	750, 737, 748, 0, 440, 374, 0, 0, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 0, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 734, 739, 0, 755,
	0, 276, 277, 398, 258, 406, 0, 0, 461, 419,
	417, 0, 384, 441, 0, 0, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 0, 0, 535,
	866, 856, 848, 849, 850, 851, 852, 853, 0, 868,
	869, 870, 871, 872, 528, 862, 0, 847, 854, 855,
	857, 2538, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	733, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 0, 735, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	0, 0, 0, 738, 0, 0, 0, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 0,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 0, 0, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 0, 0, 364, 365,
	366, 0, 0, 367, 368, 369, 370, 371, 372, 375,
	0, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 0, 0, 392, 394,
	395, 0, 2536, 0, 751, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 0, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 0, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 0, 475, 2541, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 0, 496, 497, 0, 499,
	500, 754, 502, 503, 504, 505, 506, 0, 625, 507,
	0, 508, 0, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 0, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 539,
	540, 2537, 407, 401, 357, 399, 400, 404, 405, 408,
	2555, 233, 0, 250, 0, 0, 299, 2088, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 0,
	0, 307, 0, 0, 0, 0, 0, 2553, 0, 518,
	0, 0, 0, 0, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 374, 0, 591, 467, 245, 291,
	278, 320, 362, 474, 0, 0, 352, 522, 287, 376,
	0, 266, 409, 0, 498, 373, 0, 481, 501, 0,
	393, 272, 432, 488, 489, 0, 0, 2092, 0, 0,
	276, 277, 398, 258, 406, 603, 569, 461, 419, 417,
	0, 384, 441, 598, 0, 0, 306, 0, 301, 397,
	537, 264, 516, 435, 402, 356, 464, 493, 303, 288,
	289, 332, 434, 322, 274, 527, 566, 570, 568, 564,
	561, 565, 562, 563, 567, 323, 560, 0, 535, 544,
	578, 558, 586, 543, 583, 553, 298, 582, 547, 546,
	592, 573, 574, 528, 588, 559, 557, 550, 549, 545,
	0, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 234, 0, 235, 236, 237, 239, 240, 241, 0,
	242, 243, 244, 247, 248, 249, 251, 611, 252, 253,
	254, 255, 256, 257, 548, 0, 259, 260, 261, 262,
	263, 265, 267, 268, 269, 270, 271, 273, 275, 0,
	0, 0, 0, 0, 0, 0, 279, 280, 281, 282,
	283, 284, 0, 285, 286, 290, 292, 293, 294, 295,
	296, 297, 300, 0, 302, 304, 0, 305, 308, 0,
	2098, 310, 311, 312, 313, 314, 315, 316, 552, 317,
	0, 318, 319, 321, 2097, 324, 325, 326, 327, 328,
	0, 329, 554, 555, 330, 331, 333, 334, 335, 337,
	338, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 0, 349, 350, 351, 353, 0, 354, 355, 358,
	359, 360, 361, 0, 363, 571, 0, 364, 365, 366,
	0, 0, 367, 368, 369, 370, 371, 372, 375, 572,
	377, 378, 379, 380, 381, 382, 383, 613, 385, 386,
	387, 388, 389, 390, 391, 575, 576, 392, 394, 395,
	577, 579, 580, 0, 410, 411, 412, 413, 414, 415,
	416, 418, 0, 420, 421, 422, 581, 423, 424, 425,
	426, 2096, 427, 428, 429, 430, 431, 433, 436, 437,
	438, 439, 0, 442, 443, 444, 445, 446, 447, 448,
	450, 451, 452, 454, 455, 456, 614, 457, 458, 459,
	460, 584, 462, 463, 615, 465, 466, 468, 469, 470,
	471, 472, 473, 624, 0, 475, 585, 476, 477, 478,
	479, 480, 0, 482, 483, 484, 485, 486, 487, 490,
	491, 492, 494, 495, 587, 496, 497, 0, 499, 500,
	0, 502, 503, 504, 505, 506, 0, 625, 507, 589,
	508, 590, 509, 510, 511, 512, 513, 514, 515, 517,
	0, 2095, 519, 520, 521, 523, 524, 525, 526, 529,
	530, 531, 532, 533, 0, 534, 536, 538, 616, 593,
	594, 595, 596, 597, 599, 600, 601, 602, 539, 540,
	556, 407, 401, 357, 399, 400, 404, 405, 408, 220,
	0, 0, 0, 2094, 2089, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 233, 0, 250,
	0, 0, 299, 336, 551, 0, 0, 396, 0, 449,
	453, 0, 542, 0, 0, 0, 0, 307, 0, 0,
	0, 2493, 0, 0, 0, 518, 0, 0, 0, 0,
	238, 626, 541, 612, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 440,
	374, 0, 591, 467, 245, 291, 278, 320, 362, 474,
	0, 0, 352, 522, 287, 376, 0, 266, 409, 0,
	498, 373, 0, 481, 501, 0, 393, 272, 432, 488,
	489, 0, 0, 2092, 0, 0, 276, 277, 398, 258,
	406, 603, 569, 461, 419, 417, 0, 384, 441, 598,
	0, 0, 306, 0, 301, 397, 537, 264, 516, 435,
	402, 356, 464, 493, 303, 288, 289, 332, 434, 322,
	274, 527, 566, 570, 568, 564, 561, 565, 562, 563,
	567, 323, 560, 0, 535, 544, 578, 558, 586, 543,
	583, 553, 298, 582, 547, 546, 592, 573, 574, 528,
	588, 559, 557, 550, 549, 545, 0, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 234, 0, 235,
	236, 237, 239, 240, 241, 0, 242, 243, 244, 247,
	248, 249, 251, 611, 252, 253, 254, 255, 256, 257,
	548, 0, 259, 260, 261, 262, 263, 265, 267, 268,
	269, 270, 271, 273, 275, 0, 0, 0, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 284, 0, 285,
	286, 290, 292, 293, 294, 295, 296, 297, 300, 0,
	302, 304, 0, 305, 308, 0, 2098, 310, 311, 312,
	313, 314, 315, 316, 552, 317, 0, 318, 319, 321,
	2097, 324, 325, 326, 327, 328, 0, 329, 554, 555,
	330, 331, 333, 334, 335, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 0, 349, 350,
	351, 353, 0, 354, 355, 358, 359, 360, 361, 0,
	363, 571, 0, 364, 365, 366, 0, 0, 367, 368,
	369, 370, 371, 372, 375, 572, 377, 378, 379, 380,
	381, 382, 383, 613, 385, 386, 387, 388, 389, 390,
	391, 575, 576, 392, 394, 395, 577, 579, 580, 0,
	410, 411, 412, 413, 414, 415, 416, 418, 0, 420,
	421, 422, 581, 423, 424, 425, 426, 2096, 427, 428,
	429, 430, 431, 433, 436, 437, 438, 439, 0, 442,
	443, 444, 445, 446, 447, 448, 450, 451, 452, 454,
	455, 456, 614, 457, 458, 459, 460, 584, 462, 463,
	615, 465, 466, 468, 469, 470, 471, 472, 473, 624,
	0, 475, 585, 476, 477, 478, 479, 480, 0, 482,
	483, 484, 485, 486, 487, 490, 491, 492, 494, 495,
	587, 496, 497, 0, 499, 500, 0, 502, 503, 504,
	505, 506, 0, 625, 507, 589, 508, 590, 509, 510,
	511, 512, 513, 514, 515, 517, 0, 2095, 519, 520,
	521, 523, 524, 525, 526, 529, 530, 531, 532, 533,
	0, 534, 536, 538, 616, 593, 594, 595, 596, 597,
	599, 600, 601, 602, 539, 540, 556, 407, 401, 357,
	399, 400, 404, 405, 408, 220, 0, 0, 0, 2094,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 233, 0, 250, 0, 0, 299, 336,
	551, 0, 0, 396, 0, 449, 453, 0, 542, 0,
	0, 0, 0, 307, 0, 0, 0, 0, 0, 0,
	0, 518, 0, 0, 0, 0, 238, 626, 541, 612,
	0, 0, 0, 403, 0, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 440, 374, 0, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 0, 0, 2092,
	0, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 0, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 0, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 2098, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 2097, 324, 325, 326,
	327, 328, 0, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 0, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 2096, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 584, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 0, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 2095, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 864, 0, 0, 0, 2094, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 250, 736, 0, 299, 336, 0, 0, 0, 396,
	0, 449, 453, 0, 0, 0, 0, 0, 0, 307,
	0, 741, 2535, 747, 0, 753, 0, 518, 0, 743,
	744, 749, 238, 863, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 745, 742, 746, 752, 740, 750, 737, 748,
	0, 440, 374, 0, 0, 467, 245, 291, 278, 320,
	362, 474, 0, 0, 352, 522, 287, 376, 0, 266,
	409, 0, 498, 373, 0, 481, 501, 0, 393, 272,
	432, 488, 489, 734, 739, 0, 755, 0, 276, 277,
	398, 258, 406, 0, 0, 461, 419, 417, 0, 384,
	441, 0, 0, 0, 306, 0, 301, 397, 537, 264,
	516, 435, 402, 356, 464, 493, 303, 288, 289, 332,
	434, 322, 274, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 323, 0, 0, 535, 866, 856, 848,
	849, 850, 851, 852, 853, 0, 868, 869, 870, 871,
	872, 528, 862, 0, 847, 854, 855, 857, 2538, 223,
	224, 225, 226, 227, 228, 229, 230, 231, 232, 234,
	0, 235, 236, 237, 239, 240, 241, 733, 242, 243,
	244, 247, 248, 249, 251, 611, 252, 253, 254, 255,
	256, 257, 0, 735, 259, 260, 261, 262, 263, 265,
	267, 268, 269, 270, 271, 273, 275, 0, 0, 0,
	738, 0, 0, 0, 279, 280, 281, 282, 283, 284,
	0, 285, 286, 290, 292, 293, 294, 295, 296, 297,
	300, 0, 302, 304, 0, 305, 308, 0, 309, 310,
	311, 312, 313, 314, 315, 316, 0, 317, 0, 318,
	319, 321, 0, 324, 325, 326, 327, 328, 0, 329,
	0, 0, 330, 331, 333, 334, 335, 337, 338, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 0,
	349, 350, 351, 353, 0, 354, 355, 358, 359, 360,
	361, 0, 363, 0, 0, 364, 365, 366, 0, 0,
	367, 368, 369, 370, 371, 372, 375, 0, 377, 378,
	379, 380, 381, 382, 383, 613, 385, 386, 387, 388,
	389, 390, 391, 0, 0, 392, 394, 395, 0, 2536,
	0, 751, 410, 411, 412, 413, 414, 415, 416, 418,
	0, 420, 421, 422, 0, 423, 424, 425, 426, 0,
	427, 428, 429, 430, 431, 433, 436, 437, 438, 439,
	0, 442, 443, 444, 445, 446, 447, 448, 450, 451,
	452, 454, 455, 456, 614, 457, 458, 459, 460, 0,
	462, 463, 615, 465, 466, 468, 469, 470, 471, 472,
	473, 624, 0, 475, 2541, 476, 477, 478, 479, 480,
	0, 482, 483, 484, 485, 486, 487, 490, 491, 492,
	494, 495, 0, 496, 497, 0, 499, 500, 754, 502,
	503, 504, 505, 506, 0, 625, 507, 0, 508, 0,
	509, 510, 511, 512, 513, 514, 515, 517, 0, 0,
	519, 520, 521, 523, 524, 525, 526, 529, 530, 531,
	532, 533, 0, 534, 536, 538, 616, 0, 0, 0,
	220, 0, 0, 0, 0, 0, 539, 540, 2537, 407,
	401, 357, 399, 400, 404, 405, 408, 2065, 233, 0,
	250, 0, 0, 299, 336, 551, 0, 0, 396, 0,
	449, 453, 0, 542, 0, 0, 0, 0, 307, 0,
	2529, 0, 0, 0, 0, 0, 518, 0, 0, 0,
	0, 238, 626, 541, 612, 0, 0, 0, 403, 0,
	0, 0, 647, 2068, 0, 0, 246, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	440, 374, 0, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 2072,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 2069, 500, 0, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 250, 0, 0, 299,
	336, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 647, 2068,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 0, 591,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 0, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 0, 0,
	0, 0, 0, 276, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 598, 0, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 566,
	570, 568, 564, 561, 565, 562, 563, 567, 323, 560,
	0, 535, 544, 578, 558, 586, 543, 583, 553, 298,
	582, 547, 546, 592, 573, 574, 528, 588, 559, 557,
	550, 549, 545, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 0, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 548, 0, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 0, 0, 0, 2072, 0, 0, 0, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 552, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 554, 555, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 571, 0,
	364, 365, 366, 0, 0, 367, 368, 369, 370, 371,
	372, 375, 572, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 576,
	392, 394, 395, 577, 579, 580, 0, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 581,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 584, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 0, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 587, 496, 497,
	0, 2069, 500, 0, 502, 503, 504, 505, 506, 0,
	625, 507, 589, 508, 590, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 0, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 593, 594, 595, 596, 597, 599, 600, 601,
	602, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 220, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2693,
	233, 0, 250, 0, 0, 299, 336, 551, 0, 0,
	396, 0, 449, 453, 0, 542, 0, 0, 0, 0,
	307, 0, 0, 0, 0, 0, 0, 0, 518, 0,
	0, 0, 0, 238, 626, 541, 612, 0, 0, 0,
	403, 0, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 440, 374, 0, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 2694, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2684, 233, 0, 250, 0,
	0, 299, 336, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	0, 591, 467, 245, 291, 278, 320, 362, 474, 0,
	0, 352, 522, 287, 376, 0, 266, 409, 2685, 498,
	373, 0, 481, 501, 0, 393, 272, 432, 488, 489,
	0, 0, 0, 0, 0, 276, 277, 398, 258, 406,
	603, 569, 461, 419, 417, 0, 384, 441, 598, 0,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 566, 570, 568, 564, 561, 565, 562, 563, 567,
	323, 560, 0, 535, 544, 578, 558, 586, 543, 583,
	553, 298, 582, 547, 546, 592, 573, 574, 528, 588,
	559, 557, 550, 549, 545, 0, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 0, 235, 236,
	237, 239, 240, 241, 0, 242, 243, 244, 247, 248,
	249, 251, 611, 252, 253, 254, 255, 256, 257, 548,
	0, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 0, 0, 0, 0, 0, 0,
	0, 279, 280, 281, 282, 283, 284, 0, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 0, 302,
	304, 0, 305, 308, 0, 309, 310, 311, 312, 313,
	314, 315, 316, 552, 317, 0, 318, 319, 321, 0,
	324, 325, 326, 327, 328, 0, 329, 554, 555, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 0, 349, 350, 351,
	353, 0, 354, 355, 358, 359, 360, 361, 0, 363,
	571, 0, 364, 365, 366, 0, 0, 367, 368, 369,
	370, 371, 372, 375, 572, 377, 378, 379, 380, 381,
	382, 383, 613, 385, 386, 387, 388, 389, 390, 391,
	575, 576, 392, 394, 395, 577, 579, 580, 0, 410,
	411, 412, 413, 414, 415, 416, 418, 0, 420, 421,
	422, 581, 423, 424, 425, 426, 0, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 0, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 614, 457, 458, 459, 460, 584, 462, 463, 615,
	465, 466, 468, 469, 470, 471, 472, 473, 624, 0,
	475, 585, 476, 477, 478, 479, 480, 0, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 587,
	496, 497, 0, 499, 500, 0, 502, 503, 504, 505,
	506, 0, 625, 507, 589, 508, 590, 509, 510, 511,
	512, 513, 514, 515, 517, 0, 0, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 0,
	534, 536, 538, 616, 593, 594, 595, 596, 597, 599,
	600, 601, 602, 539, 540, 556, 407, 401, 357, 399,
	400, 404, 405, 408, 220, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 776, 233, 0, 250, 0, 0, 299, 775, 551,
	0, 0, 396, 0, 449, 453, 0, 542, 0, 0,
	0, 0, 307, 0, 0, 0, 0, 0, 0, 0,
	518, 0, 0, 0, 0, 238, 626, 541, 612, 0,
	0, 0, 403, 0, 0, 0, 647, 0, 0, 0,
	246, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 440, 374, 0, 591, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 0, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 0, 0, 0, 0,
	0, 276, 277, 398, 258, 406, 603, 569, 461, 419,
	417, 0, 384, 441, 598, 0, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 566, 570, 568,
	564, 561, 565, 562, 563, 567, 323, 560, 0, 535,
	544, 578, 558, 586, 543, 583, 553, 298, 582, 547,
	546, 592, 573, 574, 528, 588, 559, 557, 550, 549,
	545, 0, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	0, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 548, 0, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	0, 0, 0, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 552,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 554, 555, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 571, 0, 364, 365,
	366, 0, 0, 367, 368, 369, 370, 371, 372, 375,
	572, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 575, 576, 392, 394,
	395, 577, 579, 580, 0, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 581, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 584, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 0, 475, 585, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 587, 496, 497, 0, 499,
	500, 0, 502, 503, 504, 505, 506, 0, 625, 507,
	589, 508, 590, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 0, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	593, 594, 595, 596, 597, 599, 600, 601, 602, 539,
	540, 556, 407, 401, 357, 399, 400, 404, 405, 408,
	220, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 233, 0,
	250, 0, 0, 299, 336, 551, 0, 0, 396, 0,
	449, 453, 0, 542, 0, 0, 0, 0, 307, 0,
	0, 0, 0, 0, 0, 0, 518, 0, 0, 0,
	0, 238, 626, 541, 612, 0, 0, 0, 403, 0,
	0, 0, 647, 0, 0, 0, 246, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	440, 374, 0, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 250, 0, 0, 299,
	336, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 3855, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 0, 591,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 0, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 0, 0,
	0, 0, 0, 276, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 598, 0, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 566,
	570, 568, 564, 561, 565, 562, 563, 567, 323, 560,
	0, 535, 544, 578, 558, 586, 543, 583, 553, 298,
	582, 547, 546, 592, 573, 574, 528, 588, 559, 557,
	550, 549, 545, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 0, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 548, 0, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 0, 0, 0, 0, 0, 0, 0, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 552, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 554, 555, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 571, 0,
	364, 365, 366, 0, 0, 367, 368, 369, 370, 371,
	372, 375, 572, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 576,
	392, 394, 395, 577, 579, 580, 0, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 581,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 584, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 0, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 587, 496, 497,
	0, 499, 500, 0, 502, 503, 504, 505, 506, 0,
	625, 507, 589, 508, 590, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 0, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 593, 594, 595, 596, 597, 599, 600, 601,
	602, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 220, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	233, 2986, 250, 0, 0, 299, 336, 551, 0, 0,
	396, 0, 449, 453, 0, 542, 0, 0, 0, 0,
	307, 0, 0, 0, 0, 0, 0, 0, 518, 0,
	0, 0, 0, 238, 626, 541, 612, 0, 0, 0,
	403, 0, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 440, 374, 0, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 0,
	0, 299, 336, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 3569, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	0, 591, 467, 245, 291, 278, 320, 362, 474, 0,
	0, 352, 522, 287, 376, 0, 266, 409, 0, 498,
	373, 0, 481, 501, 0, 393, 272, 432, 488, 489,
	0, 0, 0, 0, 0, 276, 277, 398, 258, 406,
	603, 569, 461, 419, 417, 0, 384, 441, 598, 0,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 566, 570, 568, 564, 561, 565, 562, 563, 567,
	323, 560, 0, 535, 544, 578, 558, 586, 543, 583,
	553, 298, 582, 547, 546, 592, 573, 574, 528, 588,
	559, 557, 550, 549, 545, 0, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 0, 235, 236,
	237, 239, 240, 241, 0, 242, 243, 244, 247, 248,
	249, 251, 611, 252, 253, 254, 255, 256, 257, 548,
	0, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 0, 0, 0, 0, 0, 0,
	0, 279, 280, 281, 282, 283, 284, 0, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 0, 302,
	304, 0, 305, 308, 0, 309, 310, 311, 312, 313,
	314, 315, 316, 552, 317, 0, 318, 319, 321, 0,
	324, 325, 326, 327, 328, 0, 329, 554, 555, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 0, 349, 350, 351,
	353, 0, 354, 355, 358, 359, 360, 361, 0, 363,
	571, 0, 364, 365, 366, 0, 0, 367, 368, 369,
	370, 371, 372, 375, 572, 377, 378, 379, 380, 381,
	382, 383, 613, 385, 386, 387, 388, 389, 390, 391,
	575, 576, 392, 394, 395, 577, 579, 580, 0, 410,
	411, 412, 413, 414, 415, 416, 418, 0, 420, 421,
	422, 581, 423, 424, 425, 426, 0, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 0, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 614, 457, 458, 459, 460, 584, 462, 463, 615,
	465, 466, 468, 469, 470, 471, 472, 473, 624, 0,
	475, 585, 476, 477, 478, 479, 480, 0, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 587,
	496, 497, 0, 499, 500, 0, 502, 503, 504, 505,
	506, 0, 625, 507, 589, 508, 590, 509, 510, 511,
	512, 513, 514, 515, 517, 0, 0, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 0,
	534, 536, 538, 616, 593, 594, 595, 596, 597, 599,
	600, 601, 602, 539, 540, 556, 407, 401, 357, 399,
	400, 404, 405, 408, 220, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 233, 0, 250, 0, 0, 299, 336, 551,
	0, 0, 396, 0, 449, 453, 0, 542, 0, 0,
	0, 0, 307, 0, 0, 0, 0, 0, 0, 0,
	518, 0, 0, 0, 0, 238, 626, 541, 612, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 440, 374, 0, 591, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 0, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 0, 0, 0, 0,
	0, 276, 277, 398, 258, 406, 603, 569, 461, 419,
	417, 0, 384, 441, 598, 0, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 566, 570, 568,
	564, 561, 565, 562, 563, 567, 323, 560, 0, 535,
	544, 578, 558, 586, 543, 583, 553, 298, 582, 547,
	546, 592, 573, 574, 528, 588, 559, 557, 550, 549,
	545, 0, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	0, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 548, 0, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	0, 0, 0, 3553, 0, 0, 0, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 552,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 554, 555, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 571, 0, 364, 365,
	366, 0, 0, 367, 368, 369, 370, 371, 372, 375,
	572, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 575, 576, 392, 394,
	395, 577, 579, 580, 0, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 581, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 584, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 0, 475, 585, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 587, 496, 497, 0, 499,
	500, 0, 502, 503, 504, 505, 506, 0, 625, 507,
	589, 508, 590, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 0, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	593, 594, 595, 596, 597, 599, 600, 601, 602, 539,
	540, 556, 407, 401, 357, 399, 400, 404, 405, 408,
	220, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 233, 0,
	250, 0, 0, 299, 336, 551, 0, 0, 396, 0,
	449, 453, 0, 542, 0, 0, 3215, 0, 307, 0,
	0, 0, 0, 0, 0, 0, 518, 0, 0, 0,
	0, 238, 626, 541, 612, 0, 0, 0, 403, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	440, 374, 0, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 981, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 250, 0, 0, 299,
	336, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 0, 591,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 0, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 0, 0,
	0, 0, 0, 276, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 598, 0, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 566,
	570, 568, 564, 561, 565, 562, 563, 567, 323, 560,
	0, 535, 544, 578, 558, 586, 543, 583, 553, 298,
	582, 547, 546, 592, 573, 574, 528, 588, 559, 557,
	550, 549, 545, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 0, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 548, 0, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 0, 0, 0, 0, 0, 0, 0, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 552, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 554, 555, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 571, 0,
	364, 365, 366, 0, 0, 367, 368, 369, 370, 371,
	372, 375, 572, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 576,
	392, 394, 395, 577, 579, 580, 0, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 581,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 584, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 0, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 587, 496, 497,
	0, 499, 500, 0, 502, 503, 504, 505, 506, 0,
	625, 507, 589, 508, 590, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 0, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 593, 594, 595, 596, 597, 599, 600, 601,
	602, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 220, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	233, 0, 250, 0, 0, 299, 336, 551, 0, 0,
	396, 0, 449, 453, 0, 542, 0, 0, 0, 0,
	307, 0, 0, 0, 0, 0, 0, 0, 518, 0,
	0, 0, 0, 238, 626, 541, 2332, 0, 0, 0,
	403, 0, 0, 0, 0, 2335, 0, 0, 246, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 440, 374, 0, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 2333, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	2331, 503, 2330, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 2334, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 0,
	0, 299, 1143, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	647, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	0, 591, 467, 245, 291, 278, 320, 362, 474, 0,
	0, 352, 522, 287, 376, 0, 266, 409, 0, 498,
	373, 0, 481, 501, 0, 393, 272, 432, 488, 489,
	0, 0, 0, 0, 0, 276, 277, 398, 258, 406,
	603, 569, 461, 419, 417, 0, 384, 441, 598, 0,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 566, 570, 568, 564, 561, 565, 562, 563, 567,
	323, 560, 0, 535, 544, 578, 558, 586, 543, 583,
	553, 298, 582, 547, 546, 592, 573, 574, 528, 588,
	559, 557, 550, 549, 545, 0, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 0, 235, 236,
	237, 239, 240, 241, 0, 242, 243, 244, 247, 248,
	249, 251, 611, 252, 253, 254, 255, 256, 257, 548,
	0, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 0, 0, 0, 0, 0, 0,
	0, 279, 280, 281, 282, 283, 284, 0, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 0, 302,
	304, 0, 305, 308, 0, 309, 310, 311, 312, 313,
	314, 315, 316, 552, 317, 0, 318, 319, 321, 0,
	324, 325, 326, 327, 328, 0, 329, 554, 555, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 0, 349, 350, 351,
	353, 0, 354, 355, 358, 359, 360, 361, 0, 363,
	571, 0, 364, 365, 366, 0, 0, 367, 368, 369,
	370, 371, 372, 375, 572, 377, 378, 379, 380, 381,
	382, 383, 613, 385, 386, 387, 388, 389, 390, 391,
	575, 576, 392, 394, 395, 577, 579, 580, 0, 410,
	411, 412, 413, 414, 415, 416, 418, 0, 420, 421,
	422, 581, 423, 424, 425, 426, 0, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 0, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 614, 457, 458, 459, 460, 584, 462, 463, 615,
	465, 466, 468, 469, 470, 471, 472, 473, 624, 0,
	475, 585, 476, 477, 478, 479, 480, 0, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 587,
	496, 497, 0, 499, 500, 0, 502, 503, 504, 505,
	506, 0, 625, 507, 589, 508, 590, 509, 510, 511,
	512, 513, 514, 515, 517, 0, 0, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 0,
	534, 536, 538, 616, 593, 594, 595, 596, 597, 599,
	600, 601, 602, 539, 540, 556, 407, 401, 357, 399,
	400, 404, 405, 408, 220, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1141, 233, 0, 250, 0, 0, 299, 1140, 551,
	0, 0, 396, 0, 449, 453, 0, 542, 0, 0,
	0, 0, 307, 0, 0, 0, 0, 0, 0, 0,
	518, 0, 0, 0, 0, 238, 626, 541, 612, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 440, 374, 0, 591, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 0, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 0, 0, 0, 0,
	0, 276, 277, 398, 258, 406, 603, 569, 461, 419,
	417, 0, 384, 441, 598, 0, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 566, 570, 568,
	564, 561, 565, 562, 563, 567, 323, 560, 0, 535,
	544, 578, 558, 586, 543, 583, 553, 298, 582, 547,
	546, 592, 573, 574, 528, 588, 559, 557, 550, 549,
	545, 0, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	0, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 548, 0, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	0, 0, 0, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 552,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 554, 555, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 571, 0, 364, 365,
	366, 0, 0, 367, 368, 369, 370, 371, 372, 375,
	572, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 575, 576, 392, 394,
	395, 577, 579, 580, 0, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 581, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 584, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 0, 475, 585, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 587, 496, 497, 0, 499,
	500, 0, 502, 503, 504, 505, 506, 0, 625, 507,
	589, 508, 590, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 0, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	593, 594, 595, 596, 597, 599, 600, 601, 602, 539,
	540, 556, 407, 401, 357, 399, 400, 404, 405, 408,
	220, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 233, 0,
	250, 0, 0, 299, 336, 551, 0, 0, 396, 0,
	449, 453, 0, 542, 0, 0, 0, 0, 307, 0,
	0, 0, 0, 0, 0, 0, 518, 0, 0, 0,
	0, 238, 213, 541, 612, 0, 0, 0, 403, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	440, 374, 0, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 896, 242, 243, 244,
	247, 248, 249, 251, 214, 252, 895, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 216, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 217, 457, 458, 459, 460, 584, 462,
	463, 215, 465, 466, 468, 469, 470, 471, 472, 473,
	893, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 209, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 218, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 779, 233, 0, 250, 0, 0, 299,
	778, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 0, 591,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 0, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 0, 0,
	0, 0, 0, 276, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 598, 0, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 566,
	570, 568, 564, 561, 565, 562, 563, 567, 323, 560,
	0, 535, 544, 578, 558, 586, 543, 583, 553, 298,
	582, 547, 546, 592, 573, 574, 528, 588, 559, 557,
	550, 549, 545, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 0, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 548, 0, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 0, 0, 0, 0, 0, 0, 0, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 552, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 554, 555, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 571, 0,
	364, 365, 366, 0, 0, 367, 368, 369, 370, 371,
	372, 375, 572, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 576,
	392, 394, 395, 577, 579, 580, 0, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 581,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 584, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 0, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 587, 496, 497,
	0, 499, 500, 0, 502, 503, 504, 505, 506, 0,
	625, 507, 589, 508, 590, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 0, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 593, 594, 595, 596, 597, 599, 600, 601,
	602, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 220, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 610,
	233, 0, 250, 0, 0, 299, 336, 551, 0, 0,
	396, 0, 449, 453, 0, 542, 0, 0, 0, 0,
	307, 0, 0, 0, 0, 0, 0, 0, 518, 0,
	0, 0, 0, 238, 606, 541, 612, 0, 0, 0,
	403, 0, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 440, 374, 0, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 608, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 607, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 0,
	0, 299, 336, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	0, 591, 467, 245, 291, 278, 320, 362, 474, 0,
	0, 352, 522, 287, 376, 0, 266, 409, 0, 498,
	373, 0, 481, 501, 0, 393, 272, 432, 488, 489,
	0, 0, 0, 0, 0, 276, 277, 398, 258, 406,
	603, 569, 461, 419, 417, 0, 4619, 441, 598, 0,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 566, 570, 568, 564, 561, 565, 562, 563, 567,
	323, 560, 0, 535, 544, 578, 558, 586, 543, 583,
	553, 298, 582, 547, 546, 592, 573, 574, 528, 588,
	559, 557, 550, 549, 545, 0, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 0, 235, 236,
	237, 239, 240, 241, 0, 242, 243, 244, 247, 248,
	249, 251, 611, 252, 253, 254, 255, 256, 257, 548,
	0, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 0, 0, 0, 0, 0, 0,
	0, 279, 280, 281, 282, 283, 284, 0, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 0, 302,
	304, 0, 305, 308, 0, 309, 310, 311, 312, 313,
	314, 315, 316, 552, 317, 0, 318, 319, 321, 0,
	324, 325, 326, 327, 328, 0, 329, 554, 555, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 0, 349, 350, 351,
	353, 0, 354, 355, 358, 359, 360, 361, 0, 363,
	571, 0, 364, 365, 366, 0, 0, 367, 368, 369,
	370, 371, 372, 375, 572, 377, 378, 379, 380, 381,
	382, 383, 613, 385, 386, 387, 388, 389, 390, 391,
	575, 576, 392, 394, 395, 577, 579, 580, 0, 410,
	411, 412, 413, 414, 415, 416, 418, 0, 420, 421,
	422, 581, 423, 424, 425, 426, 0, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 0, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 614, 457, 458, 459, 460, 584, 462, 463, 615,
	465, 466, 468, 469, 470, 471, 472, 473, 624, 0,
	475, 585, 476, 477, 478, 479, 480, 0, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 587,
	496, 497, 0, 499, 500, 0, 502, 503, 504, 505,
	506, 0, 625, 507, 589, 508, 590, 509, 510, 511,
	512, 513, 514, 515, 517, 0, 0, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 0,
	534, 536, 538, 616, 593, 594, 595, 596, 597, 599,
	600, 601, 602, 539, 540, 556, 407, 401, 357, 399,
	400, 404, 405, 408, 220, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 233, 0, 250, 0, 0, 299, 336, 551,
	0, 0, 396, 0, 449, 453, 0, 542, 0, 0,
	0, 0, 307, 0, 0, 0, 0, 0, 0, 0,
	518, 0, 0, 0, 0, 238, 626, 541, 612, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 440, 374, 0, 591, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 0, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 0, 0, 0, 0,
	0, 276, 277, 398, 258, 406, 603, 569, 461, 419,
	417, 0, 384, 441, 598, 0, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 566, 570, 568,
	564, 561, 565, 562, 563, 567, 323, 560, 0, 535,
	544, 578, 558, 586, 543, 583, 553, 298, 582, 547,
	546, 592, 573, 574, 528, 588, 559, 557, 550, 549,
	545, 0, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	0, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 548, 0, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	0, 0, 0, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 552,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 554, 555, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 571, 0, 364, 365,
	366, 0, 0, 367, 368, 369, 370, 371, 372, 375,
	572, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 575, 576, 392, 394,
	395, 577, 579, 580, 0, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 581, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 584, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 0, 475, 585, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 587, 496, 497, 0, 499,
	500, 0, 502, 503, 504, 505, 506, 0, 625, 507,
	589, 508, 590, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 0, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	593, 594, 595, 596, 597, 599, 600, 601, 602, 539,
	540, 556, 407, 401, 357, 399, 400, 404, 405, 408,
	220, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 233, 0,
	250, 0, 0, 299, 336, 551, 0, 0, 396, 0,
	449, 453, 0, 542, 0, 0, 0, 0, 307, 0,
	0, 0, 0, 0, 0, 0, 518, 0, 0, 0,
	0, 238, 213, 541, 612, 0, 0, 0, 403, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	440, 374, 0, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 214, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 216, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 217, 457, 458, 459, 460, 584, 462,
	463, 215, 465, 466, 468, 469, 470, 471, 472, 473,
	3050, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 3051, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 218, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 250, 0, 0, 299,
	336, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 213, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 0, 591,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 0, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 0, 0,
	0, 0, 0, 276, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 598, 0, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 566,
	570, 568, 564, 561, 565, 562, 563, 567, 323, 560,
	0, 535, 544, 578, 558, 586, 543, 583, 553, 298,
	582, 547, 546, 592, 573, 574, 528, 588, 559, 557,
	550, 549, 545, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 0, 242, 243, 244, 247, 248, 249, 251,
	214, 252, 253, 254, 255, 256, 257, 548, 0, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 0, 0, 0, 0, 0, 0, 0, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 552, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 554, 555, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 571, 0,
	364, 365, 366, 0, 0, 367, 368, 369, 370, 371,
	372, 375, 572, 377, 378, 379, 380, 381, 382, 383,
	216, 385, 386, 387, 388, 389, 390, 391, 575, 576,
	392, 394, 395, 577, 579, 580, 0, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 581,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 217,
	457, 458, 459, 460, 584, 462, 463, 215, 465, 466,
	468, 469, 470, 471, 472, 473, 893, 0, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 587, 496, 497,
	0, 499, 500, 0, 502, 503, 504, 505, 506, 0,
	209, 507, 589, 508, 590, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 0, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 218, 593, 594, 595, 596, 597, 599, 600, 601,
	602, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 220, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	233, 0, 250, 0, 0, 299, 2754, 551, 0, 0,
	396, 0, 449, 453, 0, 542, 0, 0, 0, 0,
	307, 0, 0, 0, 0, 0, 0, 0, 518, 0,
	0, 0, 0, 238, 626, 541, 612, 0, 0, 0,
	403, 0, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 440, 374, 0, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 0,
	0, 299, 2672, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	0, 591, 467, 245, 291, 278, 320, 362, 474, 0,
	0, 352, 522, 287, 376, 0, 266, 409, 0, 498,
	373, 0, 481, 501, 0, 393, 272, 432, 488, 489,
	0, 0, 0, 0, 0, 276, 277, 398, 258, 406,
	603, 569, 461, 419, 417, 0, 384, 441, 598, 0,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 566, 570, 568, 564, 561, 565, 562, 563, 567,
	323, 560, 0, 535, 544, 578, 558, 586, 543, 583,
	553, 298, 582, 547, 546, 592, 573, 574, 528, 588,
	559, 557, 550, 549, 545, 0, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 0, 235, 236,
	237, 239, 240, 241, 0, 242, 243, 244, 247, 248,
	249, 251, 611, 252, 253, 254, 255, 256, 257, 548,
	0, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 0, 0, 0, 0, 0, 0,
	0, 279, 280, 281, 282, 283, 284, 0, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 0, 302,
	304, 0, 305, 308, 0, 309, 310, 311, 312, 313,
	314, 315, 316, 552, 317, 0, 318, 319, 321, 0,
	324, 325, 326, 327, 328, 0, 329, 554, 555, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 0, 349, 350, 351,
	353, 0, 354, 355, 358, 359, 360, 361, 0, 363,
	571, 0, 364, 365, 366, 0, 0, 367, 368, 369,
	370, 371, 372, 375, 572, 377, 378, 379, 380, 381,
	382, 383, 613, 385, 386, 387, 388, 389, 390, 391,
	575, 576, 392, 394, 395, 577, 579, 580, 0, 410,
	411, 412, 413, 414, 415, 416, 418, 0, 420, 421,
	422, 581, 423, 424, 425, 426, 0, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 0, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 614, 457, 458, 459, 460, 584, 462, 463, 615,
	465, 466, 468, 469, 470, 471, 472, 473, 624, 0,
	475, 585, 476, 477, 478, 479, 480, 0, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 587,
	496, 497, 0, 499, 500, 0, 502, 503, 504, 505,
	506, 0, 625, 507, 589, 508, 590, 509, 510, 511,
	512, 513, 514, 515, 517, 0, 0, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 0,
	534, 536, 538, 616, 593, 594, 595, 596, 597, 599,
	600, 601, 602, 539, 540, 556, 407, 401, 357, 399,
	400, 404, 405, 408, 220, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 233, 0, 250, 0, 0, 299, 2670, 551,
	0, 0, 396, 0, 449, 453, 0, 542, 0, 0,
	0, 0, 307, 0, 0, 0, 0, 0, 0, 0,
	518, 0, 0, 0, 0, 238, 626, 541, 612, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 440, 374, 0, 591, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 0, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 0, 0, 0, 0,
	0, 276, 277, 398, 258, 406, 603, 569, 461, 419,
	417, 0, 384, 441, 598, 0, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 566, 570, 568,
	564, 561, 565, 562, 563, 567, 323, 560, 0, 535,
	544, 578, 558, 586, 543, 583, 553, 298, 582, 547,
	546, 592, 573, 574, 528, 588, 559, 557, 550, 549,
	545, 0, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	0, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 548, 0, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	0, 0, 0, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 552,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 554, 555, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 571, 0, 364, 365,
	366, 0, 0, 367, 368, 369, 370, 371, 372, 375,
	572, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 575, 576, 392, 394,
	395, 577, 579, 580, 0, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 581, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 584, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 0, 475, 585, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 587, 496, 497, 0, 499,
	500, 0, 502, 503, 504, 505, 506, 0, 625, 507,
	589, 508, 590, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 0, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	593, 594, 595, 596, 597, 599, 600, 601, 602, 539,
	540, 556, 407, 401, 357, 399, 400, 404, 405, 408,
	220, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 233, 0,
	250, 0, 0, 299, 2656, 551, 0, 0, 396, 0,
	449, 453, 0, 542, 0, 0, 0, 0, 307, 0,
	0, 0, 0, 0, 0, 0, 518, 0, 0, 0,
	0, 238, 626, 541, 612, 0, 0, 0, 403, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	440, 374, 0, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 250, 0, 0, 299,
	2056, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 0, 591,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 0, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 0, 0,
	0, 0, 0, 276, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 598, 0, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 566,
	570, 568, 564, 561, 565, 562, 563, 567, 323, 560,
	0, 535, 544, 578, 558, 586, 543, 583, 553, 298,
	582, 547, 546, 592, 573, 574, 528, 588, 559, 557,
	550, 549, 545, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 0, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 548, 0, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 0, 0, 0, 0, 0, 0, 0, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 552, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 554, 555, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 571, 0,
	364, 365, 366, 0, 0, 367, 368, 369, 370, 371,
	372, 375, 572, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 576,
	392, 394, 395, 577, 579, 580, 0, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 581,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 584, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 0, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 587, 496, 497,
	0, 499, 500, 0, 502, 503, 504, 505, 506, 0,
	625, 507, 589, 508, 590, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 0, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 593, 594, 595, 596, 597, 599, 600, 601,
	602, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 220, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	233, 0, 250, 0, 0, 299, 1997, 551, 0, 0,
	396, 0, 449, 453, 0, 542, 0, 0, 0, 0,
	307, 0, 0, 0, 0, 0, 0, 0, 518, 0,
	0, 0, 0, 238, 626, 541, 612, 0, 0, 0,
	403, 0, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 440, 374, 0, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 0,
	0, 299, 336, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	0, 591, 467, 245, 291, 278, 320, 362, 474, 0,
	0, 352, 522, 287, 376, 0, 266, 409, 0, 498,
	373, 0, 481, 501, 0, 393, 272, 432, 488, 489,
	0, 0, 0, 0, 0, 276, 277, 398, 258, 406,
	603, 569, 461, 419, 417, 0, 384, 441, 598, 0,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 566, 570, 568, 564, 561, 565, 562, 563, 567,
	323, 560, 0, 535, 544, 578, 558, 586, 543, 583,
	553, 298, 582, 547, 546, 592, 573, 574, 528, 588,
	559, 557, 550, 549, 545, 0, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 0, 235, 236,
	237, 239, 240, 241, 0, 242, 243, 244, 247, 248,
	249, 251, 611, 252, 253, 254, 255, 256, 257, 548,
	0, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 0, 0, 0, 0, 0, 0,
	0, 279, 280, 281, 282, 283, 284, 0, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 0, 302,
	304, 0, 305, 308, 0, 309, 310, 311, 312, 313,
	314, 315, 316, 552, 317, 0, 318, 319, 321, 0,
	324, 325, 326, 327, 328, 0, 329, 554, 555, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 0, 349, 350, 351,
	353, 0, 354, 355, 358, 359, 360, 361, 0, 363,
	571, 0, 364, 365, 366, 0, 0, 367, 368, 369,
	370, 371, 372, 375, 572, 377, 378, 379, 380, 381,
	382, 383, 613, 385, 386, 387, 388, 389, 390, 391,
	575, 576, 392, 394, 395, 577, 579, 580, 0, 410,
	411, 412, 413, 414, 415, 416, 418, 0, 420, 421,
	422, 581, 423, 424, 425, 426, 0, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 0, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 614, 457, 458, 459, 460, 584, 462, 1306, 615,
	465, 466, 468, 469, 470, 471, 472, 473, 624, 0,
	475, 585, 476, 477, 478, 479, 480, 0, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 587,
	496, 497, 0, 499, 500, 0, 502, 503, 504, 505,
	506, 0, 625, 507, 589, 508, 590, 509, 510, 511,
	512, 513, 514, 515, 517, 0, 0, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 0,
	534, 536, 538, 616, 593, 594, 595, 596, 597, 599,
	600, 601, 602, 539, 540, 556, 407, 401, 357, 399,
	400, 404, 405, 408, 220, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 233, 0, 250, 0, 0, 299, 1256, 551,
	0, 0, 396, 0, 449, 453, 0, 542, 0, 0,
	0, 0, 307, 0, 0, 0, 0, 0, 0, 0,
	518, 0, 0, 0, 0, 238, 626, 541, 612, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 440, 374, 0, 591, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 0, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 0, 0, 0, 0,
	0, 276, 277, 398, 258, 406, 603, 569, 461, 419,
	417, 0, 384, 441, 598, 0, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 566, 570, 568,
	564, 561, 565, 562, 563, 567, 323, 560, 0, 535,
	544, 578, 558, 586, 543, 583, 553, 298, 582, 547,
	546, 592, 573, 574, 528, 588, 559, 557, 550, 549,
	545, 0, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	0, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 548, 0, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	0, 0, 0, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 552,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 554, 555, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 571, 0, 364, 365,
	366, 0, 0, 367, 368, 369, 370, 371, 372, 375,
	572, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 575, 576, 392, 394,
	395, 577, 579, 580, 0, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 581, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 584, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 0, 475, 585, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 587, 496, 497, 0, 499,
	500, 0, 502, 503, 504, 505, 506, 0, 625, 507,
	589, 508, 590, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 0, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	593, 594, 595, 596, 597, 599, 600, 601, 602, 539,
	540, 556, 407, 401, 357, 399, 400, 404, 405, 408,
	220, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 233, 0,
	250, 0, 0, 299, 1063, 551, 0, 0, 396, 0,
	449, 453, 0, 542, 0, 0, 0, 0, 307, 0,
	0, 0, 0, 0, 0, 0, 518, 0, 0, 0,
	0, 238, 626, 541, 612, 0, 0, 0, 403, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	440, 374, 0, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 250, 0, 0, 299,
	1024, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 0, 591,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 0, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 0, 0,
	0, 0, 0, 276, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 598, 0, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 566,
	570, 568, 564, 561, 565, 562, 563, 567, 323, 560,
	0, 535, 544, 578, 558, 586, 543, 583, 553, 298,
	582, 547, 546, 592, 573, 574, 528, 588, 559, 557,
	550, 549, 545, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 0, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 548, 0, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 0, 0, 0, 0, 0, 0, 0, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 552, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 554, 555, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 571, 0,
	364, 365, 366, 0, 0, 367, 368, 369, 370, 371,
	372, 375, 572, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 576,
	392, 394, 395, 577, 579, 580, 0, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 581,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 584, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 0, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 587, 496, 497,
	0, 499, 500, 0, 502, 503, 504, 505, 506, 0,
	625, 507, 589, 508, 590, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 0, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 593, 594, 595, 596, 597, 599, 600, 601,
	602, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 220, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	233, 0, 250, 0, 0, 299, 1020, 551, 0, 0,
	396, 0, 449, 453, 0, 542, 0, 0, 0, 0,
	307, 0, 0, 0, 0, 0, 0, 0, 518, 0,
	0, 0, 0, 238, 626, 541, 612, 0, 0, 0,
	403, 0, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 440, 374, 0, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 1013, 250, 0,
	0, 299, 336, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	0, 591, 467, 245, 291, 278, 320, 362, 0, 0,
	0, 352, 522, 287, 376, 0, 266, 409, 0, 498,
	373, 0, 481, 501, 0, 393, 272, 432, 488, 489,
	0, 0, 0, 0, 0, 276, 277, 398, 258, 406,
	603, 569, 461, 419, 417, 0, 384, 441, 598, 0,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 566, 570, 568, 564, 561, 565, 562, 563, 567,
	323, 560, 0, 535, 544, 578, 558, 586, 543, 583,
	553, 298, 582, 547, 546, 592, 573, 574, 528, 588,
	559, 557, 550, 549, 545, 0, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 0, 235, 236,
	237, 239, 240, 241, 0, 242, 243, 244, 247, 248,
	249, 251, 611, 252, 253, 254, 255, 256, 257, 548,
	0, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 0, 0, 0, 0, 0, 0,
	0, 279, 280, 281, 282, 283, 284, 0, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 0, 302,
	304, 0, 305, 308, 0, 309, 310, 311, 312, 313,
	314, 315, 316, 552, 317, 0, 318, 319, 321, 0,
	324, 325, 326, 327, 328, 0, 329, 554, 555, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 0, 349, 350, 351,
	353, 0, 354, 355, 358, 359, 360, 361, 0, 363,
	571, 0, 364, 365, 366, 0, 0, 367, 368, 369,
	370, 371, 372, 375, 572, 377, 378, 379, 380, 381,
	382, 383, 613, 385, 386, 387, 388, 389, 390, 391,
	575, 576, 392, 394, 395, 577, 579, 580, 0, 410,
	411, 412, 413, 414, 415, 416, 418, 0, 420, 421,
	422, 581, 423, 424, 425, 426, 0, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 0, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 614, 457, 458, 459, 460, 584, 462, 463, 615,
	465, 466, 468, 469, 470, 471, 472, 473, 624, 0,
	475, 585, 476, 477, 478, 479, 480, 0, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 587,
	496, 497, 0, 499, 500, 0, 502, 503, 504, 505,
	506, 0, 625, 507, 589, 508, 590, 509, 510, 511,
	512, 513, 514, 515, 517, 0, 0, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 0,
	534, 536, 538, 616, 593, 594, 595, 596, 597, 599,
	600, 601, 602, 539, 540, 556, 407, 401, 357, 399,
	400, 404, 405, 408, 220, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 233, 0, 250, 0, 0, 299, 836, 551,
	0, 0, 396, 0, 449, 453, 0, 542, 0, 0,
	0, 0, 307, 0, 0, 0, 0, 0, 0, 0,
	518, 0, 0, 0, 0, 238, 626, 541, 612, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 440, 374, 0, 591, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 0, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 0, 0, 0, 0,
	0, 276, 277, 398, 258, 406, 603, 569, 461, 419,
	417, 0, 384, 441, 598, 0, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 566, 570, 568,
	564, 561, 565, 562, 563, 567, 323, 560, 0, 535,
	544, 578, 558, 586, 543, 583, 553, 298, 582, 547,
	546, 592, 573, 574, 528, 588, 559, 557, 550, 549,
	545, 0, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	0, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 548, 0, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	0, 0, 0, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 552,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 554, 555, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 571, 0, 364, 365,
	366, 0, 0, 367, 368, 369, 370, 371, 372, 375,
	572, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 575, 576, 392, 394,
	395, 577, 579, 580, 0, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 581, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 584, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 0, 475, 585, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 587, 496, 497, 0, 499,
	500, 0, 502, 503, 504, 505, 506, 0, 625, 507,
	589, 508, 590, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 0, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	593, 594, 595, 596, 597, 599, 600, 601, 602, 539,
	540, 556, 407, 401, 357, 399, 400, 404, 405, 408,
	220, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 233, 0,
	250, 0, 0, 299, 832, 551, 0, 0, 396, 0,
	449, 453, 0, 542, 0, 0, 0, 0, 307, 0,
	0, 0, 0, 0, 0, 0, 518, 0, 0, 0,
	0, 238, 626, 541, 612, 0, 0, 0, 403, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	440, 374, 0, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 250, 0, 0, 299,
	829, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 0, 591,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 0, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 0, 0,
	0, 0, 0, 276, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 598, 0, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 566,
	570, 568, 564, 561, 565, 562, 563, 567, 323, 560,
	0, 535, 544, 578, 558, 586, 543, 583, 553, 298,
	582, 547, 546, 592, 573, 574, 528, 588, 559, 557,
	550, 549, 545, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 0, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 548, 0, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 0, 0, 0, 0, 0, 0, 0, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 552, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 554, 555, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 571, 0,
	364, 365, 366, 0, 0, 367, 368, 369, 370, 371,
	372, 375, 572, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 576,
	392, 394, 395, 577, 579, 580, 0, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 581,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 584, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 0, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 587, 496, 497,
	0, 499, 500, 0, 502, 503, 504, 505, 506, 0,
	625, 507, 589, 508, 590, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 0, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 593, 594, 595, 596, 597, 599, 600, 601,
	602, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 220, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	233, 0, 250, 0, 0, 299, 825, 551, 0, 0,
	396, 0, 449, 453, 0, 542, 0, 0, 0, 0,
	307, 0, 0, 0, 0, 0, 0, 0, 518, 0,
	0, 0, 0, 238, 626, 541, 612, 0, 0, 0,
	403, 0, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 440, 374, 0, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 0,
	0, 299, 806, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	0, 591, 467, 245, 291, 278, 320, 362, 474, 0,
	0, 352, 522, 287, 376, 0, 266, 409, 0, 498,
	373, 0, 481, 501, 0, 393, 272, 432, 488, 489,
	0, 0, 0, 0, 0, 276, 277, 398, 258, 406,
	603, 569, 461, 419, 417, 0, 384, 441, 598, 0,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 566, 570, 568, 564, 561, 565, 562, 563, 567,
	323, 560, 0, 535, 544, 578, 558, 586, 543, 583,
	553, 298, 582, 547, 546, 592, 573, 574, 528, 588,
	559, 557, 550, 549, 545, 0, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 0, 235, 236,
	237, 239, 240, 241, 0, 242, 243, 244, 247, 248,
	249, 251, 611, 252, 253, 254, 255, 256, 257, 548,
	0, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 0, 0, 0, 0, 0, 0,
	0, 279, 280, 281, 282, 283, 284, 0, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 0, 302,
	304, 0, 305, 308, 0, 309, 310, 311, 312, 313,
	314, 315, 316, 552, 317, 0, 318, 319, 321, 0,
	324, 325, 326, 327, 328, 0, 329, 554, 555, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 0, 349, 350, 351,
	353, 0, 354, 355, 358, 359, 360, 361, 0, 363,
	571, 0, 364, 365, 366, 0, 0, 367, 368, 369,
	370, 371, 372, 375, 572, 377, 378, 379, 380, 381,
	382, 383, 613, 385, 386, 387, 388, 389, 390, 391,
	575, 576, 392, 394, 395, 577, 579, 580, 0, 410,
	411, 412, 413, 414, 415, 416, 418, 0, 420, 421,
	422, 581, 423, 424, 425, 426, 0, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 0, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 614, 457, 458, 459, 460, 584, 462, 463, 615,
	465, 466, 468, 469, 470, 471, 472, 473, 624, 0,
	475, 585, 476, 477, 478, 479, 480, 0, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 587,
	496, 497, 0, 499, 500, 0, 502, 503, 504, 505,
	506, 0, 625, 507, 589, 508, 590, 509, 510, 511,
	512, 513, 514, 515, 517, 0, 0, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 0,
	534, 536, 538, 616, 593, 594, 595, 596, 597, 599,
	600, 601, 602, 539, 540, 556, 407, 401, 357, 399,
	400, 404, 405, 408, 220, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 233, 0, 250, 0, 0, 299, 783, 551,
	0, 0, 396, 0, 449, 453, 0, 542, 0, 0,
	0, 0, 307, 0, 0, 0, 0, 0, 0, 0,
	518, 0, 0, 0, 0, 238, 626, 541, 612, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 440, 374, 0, 591, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 0, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 0, 0, 0, 0,
	0, 276, 277, 398, 258, 406, 603, 569, 461, 419,
	417, 0, 384, 441, 598, 0, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 566, 570, 568,
	564, 561, 565, 562, 563, 567, 323, 560, 0, 535,
	544, 578, 558, 586, 543, 583, 553, 298, 582, 547,
	546, 592, 573, 574, 528, 588, 559, 557, 550, 549,
	545, 0, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	0, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 548, 0, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	0, 0, 0, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 552,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 554, 555, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 571, 0, 364, 365,
	366, 0, 0, 367, 368, 369, 370, 371, 372, 375,
	572, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 575, 576, 392, 394,
	395, 577, 579, 580, 0, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 581, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 584, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 0, 475, 585, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 587, 496, 497, 0, 499,
	500, 0, 502, 503, 504, 505, 506, 0, 625, 507,
	589, 508, 590, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 0, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	593, 594, 595, 596, 597, 599, 600, 601, 602, 539,
	540, 556, 407, 401, 357, 399, 400, 404, 405, 408,
	220, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 233, 0,
	250, 0, 0, 299, 781, 551, 0, 0, 396, 0,
	449, 453, 0, 542, 0, 0, 0, 0, 307, 0,
	0, 0, 0, 0, 0, 0, 518, 0, 0, 0,
	0, 238, 626, 541, 612, 0, 0, 0, 403, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	440, 374, 0, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 250, 0, 0, 299,
	762, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 0, 591,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 0, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 0, 0,
	0, 0, 0, 276, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 598, 0, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 566,
	570, 568, 564, 561, 565, 562, 563, 567, 323, 560,
	0, 535, 544, 578, 558, 586, 543, 583, 553, 298,
	582, 547, 546, 592, 573, 574, 528, 588, 559, 557,
	550, 549, 545, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 0, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 548, 0, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 0, 0, 0, 0, 0, 0, 0, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 552, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 554, 555, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 571, 0,
	364, 365, 366, 0, 0, 367, 368, 369, 370, 371,
	372, 375, 572, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 576,
	392, 394, 395, 577, 579, 580, 0, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 581,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 584, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 0, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 587, 496, 497,
	0, 499, 500, 0, 502, 503, 504, 505, 506, 0,
	625, 507, 589, 508, 590, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 0, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 593, 594, 595, 596, 597, 599, 600, 601,
	602, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 220, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	233, 0, 250, 0, 0, 299, 721, 551, 0, 0,
	396, 0, 449, 453, 0, 542, 0, 0, 0, 0,
	307, 0, 0, 0, 0, 0, 0, 0, 518, 0,
	0, 0, 0, 238, 626, 541, 612, 0, 0, 0,
	403, 0, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 440, 374, 0, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 0,
	0, 299, 717, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	0, 591, 467, 245, 291, 278, 320, 362, 474, 0,
	0, 352, 522, 287, 376, 0, 266, 409, 0, 498,
	373, 0, 481, 501, 0, 393, 272, 432, 488, 489,
	0, 0, 0, 0, 0, 276, 277, 398, 258, 406,
	603, 569, 461, 419, 417, 0, 384, 441, 598, 0,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 566, 570, 568, 564, 561, 565, 562, 563, 567,
	323, 560, 0, 535, 544, 578, 558, 586, 543, 583,
	553, 298, 582, 547, 546, 592, 573, 574, 528, 588,
	559, 557, 550, 549, 545, 0, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 0, 235, 236,
	237, 239, 240, 241, 0, 242, 243, 244, 247, 248,
	249, 251, 611, 252, 253, 254, 255, 256, 257, 548,
	0, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 0, 0, 0, 0, 0, 0,
	0, 279, 280, 281, 282, 283, 284, 0, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 0, 302,
	304, 0, 305, 308, 0, 309, 310, 311, 312, 313,
	314, 315, 316, 552, 317, 0, 318, 319, 321, 0,
	324, 325, 326, 327, 328, 0, 329, 554, 555, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 0, 349, 350, 351,
	353, 0, 354, 355, 358, 359, 360, 361, 0, 363,
	571, 0, 364, 365, 366, 0, 0, 367, 368, 369,
	370, 371, 372, 375, 572, 377, 378, 379, 380, 381,
	382, 383, 613, 385, 386, 387, 388, 389, 390, 391,
	575, 576, 392, 394, 395, 577, 579, 580, 0, 410,
	411, 412, 413, 414, 415, 416, 418, 0, 420, 421,
	422, 581, 423, 424, 425, 426, 0, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 0, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 614, 457, 458, 459, 460, 584, 462, 463, 615,
	465, 466, 468, 469, 470, 471, 472, 473, 624, 0,
	475, 585, 476, 477, 478, 479, 480, 0, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 587,
	496, 497, 0, 499, 500, 0, 502, 503, 504, 505,
	506, 0, 625, 507, 589, 508, 590, 509, 510, 511,
	512, 513, 514, 515, 517, 0, 0, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 0,
	534, 536, 538, 616, 593, 594, 595, 596, 597, 599,
	600, 601, 602, 539, 540, 556, 407, 401, 357, 399,
	400, 404, 405, 408, 220, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 233, 0, 250, 0, 0, 299, 715, 551,
	0, 0, 396, 0, 449, 453, 0, 542, 0, 0,
	0, 0, 307, 0, 0, 0, 0, 0, 0, 0,
	518, 0, 0, 0, 0, 238, 626, 541, 612, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 440, 374, 0, 591, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 0, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 0, 0, 0, 0,
	0, 276, 277, 398, 258, 406, 603, 569, 461, 419,
	417, 0, 384, 441, 598, 0, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 566, 570, 568,
	564, 561, 565, 562, 563, 567, 323, 560, 0, 535,
	544, 578, 558, 586, 543, 583, 553, 298, 582, 547,
	546, 592, 573, 574, 528, 588, 559, 557, 550, 549,
	545, 0, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	0, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 548, 0, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	0, 0, 0, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 552,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 554, 555, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 571, 0, 364, 365,
	366, 0, 0, 367, 368, 369, 370, 371, 372, 375,
	572, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 575, 576, 392, 394,
	395, 577, 579, 580, 0, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 581, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 584, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 0, 475, 585, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 587, 496, 497, 0, 499,
	500, 0, 502, 503, 504, 505, 506, 0, 625, 507,
	589, 508, 590, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 0, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	593, 594, 595, 596, 597, 599, 600, 601, 602, 539,
	540, 556, 407, 401, 357, 399, 400, 404, 405, 408,
	220, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 233, 0,
	250, 0, 0, 299, 690, 551, 0, 0, 396, 0,
	449, 453, 0, 542, 0, 0, 0, 0, 307, 0,
	0, 0, 0, 0, 0, 0, 518, 0, 0, 0,
	0, 238, 626, 541, 612, 0, 0, 0, 403, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	440, 374, 0, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 0, 0, 0, 0, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 0, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 0, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 571, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	0, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 581, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 0, 499, 500, 0, 502, 503,
	504, 505, 506, 0, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 250, 0, 0, 299,
	336, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 650, 374, 0, 591,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 0, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 0, 0,
	0, 0, 0, 276, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 598, 0, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 566,
	570, 568, 564, 561, 565, 562, 563, 567, 323, 560,
	0, 535, 544, 578, 558, 586, 543, 583, 553, 298,
	582, 547, 546, 592, 573, 574, 528, 588, 559, 557,
	550, 549, 545, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 0, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 548, 0, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 0, 0, 0, 0, 0, 0, 0, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 552, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 554, 555, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 571, 0,
	364, 365, 366, 0, 0, 367, 368, 369, 370, 371,
	372, 375, 572, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 576,
	392, 394, 395, 577, 579, 580, 0, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 581,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 584, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 0, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 587, 496, 497,
	0, 499, 500, 0, 502, 503, 504, 505, 506, 0,
	625, 507, 589, 508, 590, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 0, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 593, 594, 595, 596, 597, 599, 600, 601,
	602, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 220, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	233, 0, 250, 0, 0, 299, 336, 551, 0, 0,
	396, 0, 449, 453, 0, 542, 0, 0, 0, 0,
	307, 0, 0, 0, 0, 0, 0, 0, 518, 0,
	0, 0, 0, 238, 626, 541, 612, 0, 0, 0,
	403, 0, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 440, 374, 0, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 627, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 0,
	0, 299, 336, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	213, 541, 207, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	0, 591, 467, 245, 291, 278, 320, 362, 474, 0,
	0, 352, 522, 287, 376, 0, 266, 409, 0, 498,
	373, 0, 481, 501, 0, 393, 272, 432, 488, 489,
	0, 0, 0, 0, 0, 276, 277, 398, 258, 406,
	603, 569, 461, 419, 417, 0, 384, 441, 598, 0,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 566, 570, 568, 564, 561, 565, 562, 563, 567,
	323, 560, 0, 535, 544, 578, 558, 586, 543, 583,
	553, 298, 582, 547, 546, 592, 573, 574, 528, 588,
	559, 557, 550, 549, 545, 0, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 0, 235, 236,
	237, 239, 240, 241, 0, 242, 243, 244, 247, 248,
	249, 251, 214, 252, 253, 254, 255, 256, 257, 548,
	0, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 0, 0, 0, 0, 0, 0,
	0, 279, 280, 281, 282, 283, 284, 0, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 0, 302,
	304, 0, 305, 308, 0, 309, 310, 311, 312, 313,
	314, 315, 316, 552, 317, 0, 318, 319, 321, 0,
	324, 325, 326, 327, 328, 0, 329, 554, 555, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 0, 349, 350, 351,
	353, 0, 354, 355, 358, 359, 360, 361, 0, 363,
	571, 0, 364, 365, 366, 0, 0, 367, 368, 369,
	370, 371, 372, 375, 572, 377, 378, 379, 380, 381,
	382, 383, 216, 385, 386, 387, 388, 389, 390, 391,
	575, 576, 392, 394, 395, 577, 579, 580, 0, 410,
	411, 412, 413, 414, 415, 416, 418, 0, 420, 421,
	422, 581, 423, 424, 425, 426, 0, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 0, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 217, 457, 458, 459, 460, 584, 462, 463, 215,
	465, 466, 468, 469, 470, 471, 472, 473, 208, 0,
	475, 585, 476, 477, 478, 479, 480, 0, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 587,
	496, 497, 0, 499, 500, 0, 502, 503, 504, 505,
	506, 0, 209, 507, 589, 508, 590, 509, 510, 511,
	512, 513, 514, 515, 517, 0, 0, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 0,
	534, 536, 538, 218, 593, 594, 595, 596, 597, 599,
	600, 601, 602, 539, 540, 556, 407, 401, 357, 399,
	400, 404, 405, 408, 220, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 233, 0, 250, 0, 0, 299, 336, 551,
	0, 0, 396, 0, 449, 453, 0, 542, 0, 0,
	0, 0, 307, 0, 0, 0, 0, 0, 0, 0,
	518, 0, 0, 0, 0, 238, 626, 541, 612, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 440, 374, 0, 591, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 0, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 0, 0, 0, 0,
	0, 276, 277, 398, 258, 406, 603, 569, 0, 419,
	417, 0, 384, 441, 598, 0, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 566, 570, 568,
	564, 561, 565, 562, 563, 567, 323, 560, 0, 535,
	544, 578, 558, 586, 543, 583, 553, 298, 582, 547,
	546, 592, 573, 574, 528, 588, 559, 557, 550, 549,
	545, 0, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	0, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 548, 0, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	0, 0, 0, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 552,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 554, 555, 0, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 571, 0, 364, 365,
	366, 0, 0, 367, 368, 369, 370, 371, 372, 375,
	572, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 575, 576, 392, 394,
	395, 577, 579, 580, 0, 410, 411, 412, 413, 414,
	415, 0, 418, 0, 420, 421, 422, 581, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 0,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 584, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 0, 475, 585, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 587, 496, 497, 0, 499,
	500, 0, 502, 503, 504, 505, 506, 0, 625, 507,
	589, 508, 590, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 0, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	593, 594, 595, 596, 597, 599, 600, 601, 602, 539,
	540, 556, 407, 401, 357, 399, 400, 404, 405, 408,
	864, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 233, 0,
	250, 736, 0, 299, 336, 0, 0, 0, 396, 0,
	449, 453, 0, 0, 0, 0, 0, 0, 307, 0,
	741, 2535, 747, 0, 753, 0, 518, 0, 743, 744,
	749, 238, 863, 541, 612, 0, 0, 0, 403, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 745, 742, 746, 752, 740, 750, 737, 748, 0,
	440, 374, 0, 0, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 734, 739, 0, 755, 0, 276, 277, 398,
	258, 406, 0, 0, 461, 419, 417, 0, 384, 441,
	0, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 323, 0, 0, 535, 866, 856, 848, 849,
	850, 851, 852, 853, 0, 868, 869, 870, 871, 872,
	528, 862, 0, 847, 854, 855, 857, 2538, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 733, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 0, 735, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 738,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 0, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 0,
	0, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 0, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 0, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 0, 0, 392, 394, 395, 0, 2536, 0,
	751, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 0, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 0, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 2541, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 0, 496, 497, 0, 499, 500, 754, 502, 503,
	504, 505, 506, 0, 625, 507, 0, 508, 0, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 0, 0, 864, 0,
	0, 0, 0, 0, 0, 539, 540, 2537, 407, 401,
	357, 399, 400, 404, 405, 408, 233, 0, 250, 736,
	0, 299, 336, 0, 0, 0, 396, 0, 449, 453,
	0, 0, 0, 0, 0, 0, 307, 0, 741, 0,
	747, 3027, 753, 0, 518, 0, 743, 744, 749, 238,
	863, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 3026, 0, 0, 246, 0, 0, 0, 0, 745,
	742, 746, 752, 740, 750, 737, 748, 0, 440, 374,
	0, 0, 467, 245, 291, 278, 320, 362, 474, 0,
	0, 352, 522, 287, 376, 0, 266, 409, 0, 498,
	373, 0, 481, 501, 0, 393, 272, 432, 488, 489,
	734, 739, 0, 755, 0, 276, 277, 398, 258, 406,
	0, 0, 461, 419, 417, 0, 384, 441, 0, 0,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	323, 0, 0, 535, 866, 856, 848, 849, 850, 851,
	852, 853, 0, 868, 869, 870, 871, 872, 528, 862,
	0, 847, 854, 855, 857, 0, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 0, 235, 236,
	237, 239, 240, 241, 733, 242, 243, 244, 247, 248,
	249, 251, 611, 252, 253, 254, 255, 256, 257, 0,
	735, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 0, 0, 0, 738, 0, 0,
	0, 279, 280, 281, 282, 283, 284, 0, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 0, 302,
	304, 0, 305, 308, 0, 309, 310, 311, 312, 313,
	314, 315, 316, 0, 317, 0, 318, 319, 321, 0,
	324, 325, 326, 327, 328, 0, 329, 0, 0, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 0, 349, 350, 351,
	353, 0, 354, 355, 358, 359, 360, 361, 0, 363,
	0, 0, 364, 365, 366, 0, 0, 367, 368, 369,
	370, 371, 372, 375, 0, 377, 378, 379, 380, 381,
	382, 383, 613, 385, 386, 387, 388, 389, 390, 391,
	0, 0, 392, 394, 395, 0, 0, 0, 751, 410,
	411, 412, 413, 414, 415, 416, 418, 0, 420, 421,
	422, 0, 423, 424, 425, 426, 0, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 0, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 614, 457, 458, 459, 460, 0, 462, 463, 615,
	465, 466, 468, 469, 470, 471, 472, 473, 624, 0,
	475, 2541, 476, 477, 478, 479, 480, 0, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 0,
	496, 497, 0, 499, 500, 754, 502, 503, 504, 505,
	506, 0, 625, 507, 0, 508, 0, 509, 510, 511,
	512, 513, 514, 515, 517, 0, 0, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 0,
	534, 536, 538, 616, 0, 0, 864, 0, 0, 0,
	0, 0, 0, 539, 540, 0, 407, 401, 357, 399,
	400, 404, 405, 408, 233, 0, 250, 736, 0, 299,
	336, 0, 0, 0, 396, 0, 449, 453, 0, 0,
	0, 0, 0, 0, 307, 0, 741, 0, 747, 0,
	753, 0, 518, 0, 743, 744, 749, 238, 863, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 745, 742, 746,
	752, 740, 750, 737, 748, 0, 440, 374, 0, 0,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 0, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 734, 739,
	0, 755, 0, 276, 277, 398, 258, 406, 0, 0,
	461, 419, 417, 4649, 384, 441, 0, 0, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 323, 0,
	0, 535, 866, 856, 848, 849, 850, 851, 852, 853,
	0, 868, 869, 870, 871, 872, 528, 862, 0, 847,
	854, 855, 857, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 733, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 0, 735, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 0, 0, 0, 738, 0, 0, 0, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 0, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 0, 0, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 0, 0,
	364, 365, 366, 0, 0, 367, 368, 369, 370, 371,
	372, 375, 0, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 0, 0,
	392, 394, 395, 0, 0, 0, 751, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 0,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 0, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 0, 475, 0,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 0, 496, 497,
	0, 499, 500, 754, 502, 503, 504, 505, 506, 0,
	625, 507, 0, 508, 0, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 0, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 0, 0, 864, 0, 0, 0, 0, 0,
	0, 539, 540, 0, 407, 401, 357, 399, 400, 404,
	405, 408, 233, 0, 250, 736, 0, 299, 336, 0,
	0, 0, 396, 0, 449, 453, 0, 0, 0, 0,
	0, 0, 307, 0, 741, 0, 747, 0, 753, 0,
	518, 0, 743, 744, 749, 238, 863, 541, 612, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 745, 742, 746, 752, 740,
	750, 737, 748, 0, 440, 374, 0, 0, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 0, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 734, 739, 0, 755,
	0, 276, 277, 398, 258, 406, 0, 0, 461, 419,
	417, 4338, 384, 441, 0, 0, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 0, 0, 535,
	866, 856, 848, 849, 850, 851, 852, 853, 0, 868,
	869, 870, 871, 872, 528, 862, 0, 847, 854, 855,
	857, 0, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	733, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 0, 735, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	0, 0, 0, 738, 0, 0, 0, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 0,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 0, 0, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 0, 0, 364, 365,
	366, 0, 0, 367, 368, 369, 370, 371, 372, 375,
	0, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 0, 0, 392, 394,
	395, 0, 0, 0, 751, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 0, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 0, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 0, 475, 0, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 0, 496, 497, 0, 499,
	500, 754, 502, 503, 504, 505, 506, 0, 625, 507,
	0, 508, 0, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 0, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	0, 0, 864, 0, 0, 0, 0, 0, 0, 539,
	540, 0, 407, 401, 357, 399, 400, 404, 405, 408,
	233, 0, 250, 736, 0, 299, 336, 0, 0, 0,
	396, 0, 449, 453, 0, 0, 0, 0, 0, 0,
	307, 0, 741, 0, 747, 0, 753, 0, 518, 0,
	743, 744, 749, 238, 863, 541, 612, 0, 0, 0,
	403, 0, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 745, 742, 746, 752, 740, 750, 737,
	748, 0, 440, 374, 0, 0, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 734, 739, 0, 755, 0, 276,
	277, 398, 258, 406, 0, 0, 461, 419, 417, 0,
	384, 441, 0, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 323, 0, 0, 535, 866, 856,
	848, 849, 850, 851, 852, 853, 0, 868, 869, 870,
	871, 872, 528, 862, 0, 847, 854, 855, 857, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 733, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 0, 735, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 738, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 0, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 0, 0, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 0, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 0, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 4138, 0, 392, 394, 395, 0,
	0, 0, 751, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 0, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	0, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 0, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 0, 496, 497, 0, 499, 500, 754,
	502, 503, 504, 505, 506, 0, 625, 507, 0, 508,
	0, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 0, 0,
	864, 0, 0, 0, 0, 0, 0, 539, 540, 0,
	407, 401, 357, 399, 400, 404, 405, 408, 233, 0,
	250, 736, 0, 299, 336, 0, 0, 0, 396, 0,
	449, 453, 0, 0, 0, 0, 0, 0, 307, 0,
	741, 0, 747, 0, 753, 0, 518, 0, 743, 744,
	749, 238, 863, 541, 612, 0, 0, 0, 403, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 745, 742, 746, 752, 740, 750, 737, 748, 0,
	440, 374, 0, 0, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 734, 739, 0, 755, 0, 276, 277, 398,
	258, 406, 0, 0, 461, 419, 417, 0, 384, 441,
	0, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 323, 0, 0, 535, 866, 856, 848, 849,
	850, 851, 852, 853, 0, 868, 869, 870, 871, 872,
	528, 862, 0, 847, 854, 855, 857, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 733, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 0, 735, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 738,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 0, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 0,
	0, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 0, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 0, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 0, 0, 392, 394, 395, 0, 0, 0,
	751, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 0, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 0, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 2541, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 0, 496, 497, 0, 499, 500, 754, 502, 503,
	504, 505, 506, 0, 625, 507, 0, 508, 0, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 0, 0, 864, 0,
	0, 0, 0, 0, 0, 539, 540, 0, 407, 401,
	357, 399, 400, 404, 405, 408, 233, 0, 250, 736,
	0, 299, 336, 0, 0, 0, 396, 0, 449, 453,
	0, 0, 0, 0, 0, 0, 307, 0, 741, 0,
	747, 0, 753, 0, 518, 0, 743, 744, 749, 238,
	863, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 745,
	742, 746, 752, 740, 750, 737, 748, 0, 440, 374,
	0, 0, 467, 245, 291, 278, 320, 362, 474, 0,
	0, 352, 522, 287, 376, 0, 266, 409, 0, 498,
	373, 0, 481, 501, 0, 393, 272, 432, 488, 489,
	734, 739, 0, 755, 0, 276, 277, 398, 258, 406,
	0, 0, 461, 419, 417, 0, 384, 441, 0, 0,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	323, 0, 0, 535, 866, 856, 848, 849, 850, 851,
	852, 853, 0, 868, 869, 870, 871, 872, 528, 862,
	0, 847, 854, 855, 857, 0, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 0, 235, 236,
	237, 239, 240, 241, 733, 242, 243, 244, 247, 248,
	249, 251, 611, 252, 253, 254, 255, 256, 257, 0,
	735, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 0, 0, 0, 738, 0, 0,
	0, 279, 280, 281, 282, 283, 284, 0, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 0, 302,
	304, 0, 305, 308, 0, 309, 310, 311, 312, 313,
	314, 315, 316, 0, 317, 0, 318, 319, 321, 0,
	324, 325, 326, 327, 328, 0, 329, 0, 0, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 0, 349, 350, 351,
	353, 0, 354, 355, 358, 359, 360, 361, 0, 363,
	0, 0, 364, 365, 366, 0, 0, 367, 368, 369,
	370, 371, 372, 375, 0, 377, 378, 379, 380, 381,
	382, 383, 613, 385, 386, 387, 388, 389, 390, 391,
	3671, 0, 392, 394, 395, 0, 0, 0, 751, 410,
	411, 412, 413, 414, 415, 416, 418, 0, 420, 421,
	422, 0, 423, 424, 425, 426, 0, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 0, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 614, 457, 458, 459, 460, 0, 462, 463, 615,
	465, 466, 468, 469, 470, 471, 472, 473, 624, 0,
	475, 0, 476, 477, 478, 479, 480, 0, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 0,
	496, 497, 0, 499, 500, 754, 502, 503, 504, 505,
	506, 0, 625, 507, 0, 508, 0, 509, 510, 511,
	512, 513, 514, 515, 517, 0, 0, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 0,
	534, 536, 538, 616, 0, 0, 864, 0, 0, 0,
	0, 0, 0, 539, 540, 0, 407, 401, 357, 399,
	400, 404, 405, 408, 233, 0, 250, 736, 0, 299,
	336, 0, 0, 0, 396, 0, 449, 453, 0, 0,
	0, 0, 0, 0, 307, 0, 741, 0, 747, 0,
	753, 0, 518, 0, 743, 744, 749, 238, 863, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 745, 742, 746,
	752, 740, 750, 737, 748, 0, 440, 374, 0, 0,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 0, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 734, 739,
	0, 755, 0, 276, 277, 398, 258, 406, 0, 0,
	461, 419, 417, 0, 384, 441, 0, 0, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 323, 0,
	0, 535, 866, 856, 848, 849, 850, 851, 852, 853,
	0, 868, 869, 870, 871, 872, 528, 862, 0, 847,
	854, 855, 857, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 733, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 0, 735, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 0, 0, 0, 738, 0, 0, 0, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 0, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 0, 0, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 0, 0,
	364, 365, 366, 0, 0, 367, 368, 369, 370, 371,
	372, 375, 0, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 0, 0,
	392, 394, 395, 0, 0, 0, 751, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 0,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 0, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 0, 475, 0,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 0, 496, 497,
	0, 499, 500, 754, 502, 503, 504, 505, 506, 0,
	625, 507, 0, 508, 0, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 0, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 0, 0, 864, 0, 0, 0, 0, 0,
	0, 539, 540, 0, 407, 401, 357, 399, 400, 404,
	405, 408, 233, 0, 250, 736, 0, 299, 874, 0,
	0, 0, 396, 0, 449, 453, 0, 0, 0, 0,
	0, 0, 307, 0, 741, 0, 747, 0, 753, 0,
	518, 0, 743, 744, 749, 238, 863, 541, 612, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 745, 742, 746, 752, 740,
	750, 737, 748, 0, 440, 374, 0, 0, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 0, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 734, 739, 0, 755,
	0, 276, 277, 398, 258, 406, 0, 0, 461, 419,
	417, 0, 384, 441, 0, 0, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 0, 0, 535,
	866, 856, 848, 849, 850, 851, 852, 853, 0, 868,
	869, 870, 871, 872, 528, 862, 0, 847, 854, 855,
	857, 0, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	733, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 0, 735, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	0, 0, 0, 738, 0, 0, 0, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 0,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 0, 0, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 0, 0, 364, 365,
	366, 0, 0, 367, 368, 369, 370, 371, 372, 375,
	0, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 0, 0, 392, 394,
	395, 0, 0, 0, 751, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 0, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 0, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 0, 475, 0, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 0, 496, 497, 0, 499,
	500, 754, 502, 503, 504, 505, 506, 0, 625, 507,
	0, 508, 0, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 0, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	0, 0, 864, 0, 0, 0, 0, 0, 0, 539,
	540, 0, 407, 401, 357, 399, 400, 404, 405, 408,
	233, 0, 250, 736, 0, 299, 838, 0, 0, 0,
	396, 0, 449, 453, 0, 0, 0, 0, 0, 0,
	307, 0, 741, 0, 747, 0, 753, 0, 518, 0,
	743, 744, 749, 238, 863, 541, 612, 0, 0, 0,
	403, 0, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 745, 742, 746, 752, 740, 750, 737,
	748, 0, 440, 374, 0, 0, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 734, 739, 0, 755, 0, 276,
	277, 398, 258, 406, 0, 0, 461, 419, 417, 0,
	384, 441, 0, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 323, 0, 0, 535, 866, 856,
	848, 849, 850, 851, 852, 853, 0, 868, 869, 870,
	871, 872, 528, 862, 0, 847, 854, 855, 857, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 733, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 0, 735, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 738, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 0, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 0, 0, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 0, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 0, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 0, 0, 392, 394, 395, 0,
	0, 0, 751, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 0, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	0, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 0, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 0, 496, 497, 0, 499, 500, 754,
	502, 503, 504, 505, 506, 0, 625, 507, 0, 508,
	0, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 0, 0,
	864, 0, 0, 0, 0, 0, 0, 539, 540, 0,
	407, 401, 357, 399, 400, 404, 405, 408, 233, 0,
	250, 736, 0, 299, 336, 0, 0, 0, 396, 0,
	449, 453, 0, 0, 0, 0, 0, 0, 307, 0,
	741, 0, 747, 0, 753, 0, 518, 0, 743, 744,
	749, 238, 0, 541, 612, 0, 0, 0, 403, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 745, 742, 746, 752, 740, 750, 737, 748, 0,
	440, 374, 0, 0, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 734, 739, 0, 755, 0, 276, 277, 398,
	258, 406, 0, 0, 461, 419, 417, 0, 384, 441,
	0, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 323, 0, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 0, 0,
	528, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 733, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 0, 735, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 738,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 0, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 0,
	0, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 0, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 0, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 0, 0, 392, 394, 395, 0, 0, 0,
	751, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 0, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 0, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 0, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 0, 496, 497, 0, 499, 500, 754, 502, 503,
	504, 505, 506, 0, 625, 507, 0, 508, 0, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 539, 540, 0, 407, 401,
	357, 399, 400, 404, 405, 408,
}

var yyPact = [...]int32{
	5167, -1000, 96, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	765, 765, -1000, -1000, 2449, 685, 5474, 10855, 10989, 2537,
	73444, 57758, 765, 962, 886, 825, 58770, 72938, 955, -1000,
	578, 634, 674, 3049, 51686, 91, 72432, 58770, 467, 5167,
	3112, -1000, -1000, 1776, 2700, 51686, 2830, 2699, 674, 58770,
	-1000, 1187, 1683, 1467, 3051, 71926, 58770, 34502, 58770, 2499,
	71420, 70914, 2054, 70408, 42106, 2534, 951, 58770, 58770, 1526,
	69902, 58770, 58770, 523, 1898, 39575, 39575, -1000, -1000, 1091,
	1085, -1000, -1000, -1000, 51180, 57252, 69396, 68890, 789, 2048,
	45142, 58770, 58770, 58770, 58770, 45142, 39575, 1590, 1844, 68384,
	45142, 58770, 45142, 58770, 58770, 58770, 58770, 58770, 943, 39069,
	38563, 58770, 67878, 2492, 58770, 58770, -1000, 67372, 66866, 66360,
	78848, 78360, 3228, 41600, 41094, 40588, -1000, -1000, -1000, 746,
	2042, -1000, -1000, -1000, 2489, 1523, 930, -1000, 1589, -1000,
	-1000, -1000, -1000, -1000, -1000, 743, -1000, 59782, 56746, 1624,
	-1000, -1000, 661, 2954, 3301, 3301, 3066, 43624, 639, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2953, 1623, 1946, 160,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3112, 1776, 3112,
	3301, 2868, 3301, -1000, -1000, -1000, -1000, 58770, -1000, 3301,
	-1000, 2010, 2763, 578, -1000, -1000, 262, 257, 634, 17049,
	17049, -1000, 2682, -1000, 107, -1000, 132, 44636, 514, 89,
	58770, -1000, 400, -1000, 89, 20656, -1000, -1000, 1637, -1000,
	316, -1000, 1560, 1128, -1000, 1843, 58770, 2456, 65854, 51686,
	51686, 254, -1000, 276, 65348, 58770, 740, 64842, 3225, 45142,
	45142, 58770, 913, 45142, 2249, 1433, -1000, 1360, 1945, -1000,
	3108, 3240, 145, 456, 58770, 58770, -1000, 158, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 773, 1431, 733, 3107, 787, 3106, 2151, 64336,
	905, 3105, 2300, 787, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 739, 58770, 1465, 2681,
	58770, 400, 3104, -1000, 2298, 1903, 77872, 58770, 787, 787,
	-1000, -1000, -1000, -1000, 7822, 3215, 3015, 8165, 3213, 3009,
	10882, 3211, 10721, 3210, 56240, 55734, 2147, 1402, 497, -1000,
	132, -1000, -1000, -1000, 1400, 1398, 1387, 1472, 1386, 497,
	1385, 2138, 58770, 58770, 58770, 2679, 3202, 1376, 1717, 1374,
	1368, 751, 1632, 2676, 2673, 58770, 1367, 1040, 3008, 1364,
	2248, 1040, 3008, 1604, 1599, 3199, 1393, 1726, 2160, 3198,
	324, -1000, 3192, 342, -1000, 2671, 3186, 340, 3185, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 129, -1000, -1000, -1000,
	-1000, -1000, 495, 1995, 493, 493, 493, -1000, -1000, -1000,
	-1000, -1000, 171, 167, -1000, -1000, 1988, 489, 1988, 1988,
	-1000, 1996, 1988, 340, 3183, 63830, 2286, 68, 3182, -1000,
	68, 3180, 68, 3179, -1000, 2145, -1000, 1373, -1000, -1000,
	-1000, 3225, -1000, 1934, -1000, 3263, 42612, 316, 3301, 2311,
	27352, 26837, 58770, 472, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1869, -1000, 1559, -1000, -1000, -1000, -1000,
	-1000, -1000, 63324, -1000, -1000, -1000, 2006, 2244, 2246, 1318,
	2765, 1994, -1000, 20141, 1777, 23746, 2307, 20656, -1000, 2010,
	-1000, -1000, 2697, 73, -1000, 12891, -1000, -1000, 20656, 20656,
	20656, 20656, 20656, 1471, 3076, -1000, -1000, -1000, -1000, 16533,
	-1000, -1000, 132, 468, 261, -1000, -1000, 488, -1000, 486,
	485, 132, -1000, -1000, -1000, -1000, -1000, -1000, 20656, 711,
	1775, -1000, 484, 483, 481, 402, 479, -1000, 132, -1000,
	12371, 20656, -1000, 58770, 20656, 58770, 89, 3266, 58770, 67,
	10162, -1000, 1927, 1776, -1000, 1249, -1000, -1000, -1000, 637,
	3265, 43118, -1000, 58770, 2582, 2581, 2940, 2825, 58770, 566,
	3103, 276, 58770, 3369, 3100, 62818, -1000, 478, 478, 1745,
	58770, 474, 77872, 1585, 1117, -1000, 39575, 3222, 3177, 77872,
	-1000, 131, 13940, -1000, 13940, 3037, 2579, 11545, -1000, 425,
	58770, 58770, 58770, 58770, -1000, 58770, 3171, -1000, -1000, -1000,
	3168, 58770, 450, 3098, 800, 3301, 3165, 37551, 3097, -1000,
	62312, 2669, 1543, 39575, 58770, 914, 2668, 3151, -1000, 49156,
	456, 3301, 3264, 2245, -1000, -1000, 74, -1000, 1041, -1000,
	1457, 1456, 47149, 992, 963, 2328, 612, 2664, 1315, 1042,
	58770, 1823, 58770, 2305, 2939, 306, 1711, 1270, -1000, 470,
	51686, 1097, 74, -1000, 2938, 1453, 58770, 1096, 74, 2937,
	3369, -1000, 1917, 77872, 648, -1000, 2762, -1000, 648, 648,
	2761, 1512, 787, 787, -1000, 58770, 74, 1054, 58770, 10623,
	3150, 3007, 10106, 3147, 58770, 2936, -1000, 249, 132, 2935,
	2934, 2928, 2348, -1000, 2407, 3044, 1082, 2324, 2925, -1000,
	2924, 2383, -1000, -1000, 1362, 2578, 2576, 58770, 58770, 2923,
	2922, 38057, 49662, 49662, 2921, 2920, 2919, 623, -1000, 3012,
	2917, 401, 3301, 1427, 1425, 1417, -1000, -1000, 456, 58770,
	58770, 1499, 2914, -1000, 1605, 1851, 1605, 2913, 37551, -1000,
	1605, 1605, 2912, 306, 306, 2906, 1131, 58770, 58770, 58770,
	58770, 58770, 2141, 2064, 2062, -1000, 10584, 58770, 58770, -1000,
	-1000, -1000, 58770, 58770, -1000, 58770, 58770, 77872, -1000, 77872,
	-1000, 140, 20656, -1000, 3286, -1000, -1000, -1000, -1000, 3286,
	-1000, 2956, 2915, 3286, -1000, 469, -1000, 3286, -1000, -1000,
	1988, 1988, -1000, -1000, 77872, 324, 3145, 37551, 3143, 39575,
	39575, 39575, 39575, -1000, -1000, -1000, -1000, -1000, 58770, 3263,
	934, -1000, -1000, -1000, -1000, 88, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3290, 3285, -1000, -1000, 88,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 58770, -1000, -1000, -1000,
	-1000, -1000, -1000, 1213, 2774, -1000, 688, -1000, 1149, -1000,
	-1000, 85, 10162, -1000, 25807, -1000, -1000, -1000, 1529, 10162,
	-1000, 23231, 23231, 1246, 58770, 69, -1000, 1642, 2006, 2244,
	2829, 55228, 17049, 77872, 58770, 2949, 20656, 20656, 20656, 20656,
	20656, 20656, 20656, 20656, 20656, 20656, 20656, 20656, 20656, 20656,
	20656, 20656, 2984, 20656, 2904, 3176, -1000, -1000, 2910, 442,
	1075, 13940, -1000, -1000, 464, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1036,
	1036, 499, 1695, 1695, 372, 468, 3038, 132, 10018, 84,
	125, 467, 132, -1000, -1000, -1000, 17565, 20656, 11545, 19625,
	132, 2962, 10162, 1775, 2708, 610, 466, 15501, 20656, 20656,
	2829, 20656, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 9125,
	-158, 247, 66, -1000, 2586, 65, 20656, -1000, 58770, 2949,
	20656, 20656, 20656, 20656, 2904, 3176, 2910, 442, 464, -1000,
	-1000, -1000, 1094, 1412, -1000, 2662, -1000, 2380, 36539, 2514,
	58770, 398, -1000, 530, 58770, -1000, -1000, 2787, 30406, 30406,
	2336, 2336, -1000, -1000, 63, -1000, 47655, 58770, 2304, 3139,
	3050, 459, -1000, 3369, 1769, 3136, 2660, 3095, -1000, 7546,
	48667, 6010, 1399, -1000, -1000, 2303, 1962, 456, -1000, 46660,
	1578, 58770, 58770, 726, -1000, -1000, -1000, -1000, -1000, -1000,
	1336, 58770, -1000, 13940, -1000, 55, -1000, 529, 2235, 58770,
	-1000, 58770, 458, 456, 456, 456, 456, 456, -1000, 58770,
	1383, 58770, 954, 47655, 2302, 3130, 1751, -1000, -1000, 58770,
	1219, -1000, -1000, 3129, 1576, 3262, 3093, 276, 13940, 3314,
	-1000, 3261, 1929, 32430, 58770, 1008, 385, -1000, 51686, 3006,
	119, 276, -1000, 107, -1000, 1415, 77872, 3301, 1576, 1576,
	9765, 58770, 58770, 58770, -1000, 58770, 58770, -1000, 3087, 61806,
	-1000, 77872, 58770, -1000, 455, 2602, 671, 667, 2564, 54722,
	58770, 61300, 60794, 58770, 911, -1000, -1000, 1520, 58770, -1000,
	13940, 58770, 50674, 1067, 968, 58770, 1557, 50168, 58770, 1552,
	-1000, 58770, 1264, -1000, -1000, 39575, -1000, 2459, 1550, 14452,
	7251, 58770, 58770, 58770, 9686, 58770, 58770, -1000, -1000, -1000,
	-1000, -1000, -1000, 648, -1000, -1000, -1000, 58770, 58770, 648,
	648, 10843, 58770, 58770, 9471, 74, 1043, 58770, 1079, 74,
	1039, 51686, 1033, 58770, -1000, 58770, 58770, 58770, 58770, 58770,
	-1000, 3000, 60288, 20656, 2999, -1000, 58770, -1000, 453, 2998,
	58770, 58770, 39575, 39575, 2903, 58770, 58770, 1646, 2657, 58770,
	58770, -1000, 83, 83, 83, 58770, 58770, 58770, -1000, -1000,
	-1000, 58770, -1000, 58770, -1000, 3053, 58770, 58770, -1000, 1361,
	1357, 2902, -1000, 1489, -1000, 39575, 1485, -1000, 59782, -1000,
	58770, -1000, 39575, 1217, 1485, -1000, -1000, 58770, -1000, -1000,
	58770, 645, 2446, 1356, 1353, 1337, 1332, 58770, 58770, 3301,
	3219, 3301, 2900, 58770, 58770, 45142, 452, 77872, 45142, 33972,
	45142, 45142, 2233, 77872, -1000, -1000, -1000, -1000, -1000, -1000,
	324, -1000, 342, -1000, 3080, 2654, -1000, 340, -1000, 53,
	245, 243, 2952, 2951, 242, 20656, 240, -1000, -1000, 340,
	-1000, 58770, 1206, 2224, -1000, 68, 68, 68, 3055, 1776,
	27867, -1000, -1000, -1000, -1000, -1000, -1000, 2418, -1000, 20656,
	1529, 2808, -1000, 3294, 3294, 390, -1000, 16533, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1540, 82, -1000,
	20656, 2174, 546, -1000, -1000, -1000, -1000, 2780, 30406, -1000,
	2771, 2771, 994, 989, 2771, 58770, -1000, -1000, -1000, -1000,
	2945, -1000, 54, 54, 106, 106, 106, -1000, 362, 362,
	362, 362, 362, 362, 499, 1695, 10233, 1397, 20656, 20656,
	2899, 2898, 442, 931, 20656, -1000, 5261, -1000, -1000, -1000,
	2828, -1000, -1000, 1496, 2178, -1000, -1000, -1000, -1000, 2227,
	24776, 24776, -1000, -1000, -1000, 16533, 440, -1000, -1000, -1000,
	-1000, 11545, -1000, 439, 20656, -1000, -1000, 3031, -1000, -1000,
	20656, -28, -116, -1000, -1000, 48, 239, 47, -1000, 2040,
	-1000, 20656, 610, 415, -1000, 44130, 2791, -1000, 238, -54,
	20656, 20656, 20656, -1000, 10162, 3278, -1000, 2144, 2061, 335,
	608, 9799, 2780, 45, -1000, 20656, -1000, -1000, 414, -1000,
	2519, -1000, 10162, -1000, -1000, -1000, 2404, 2389, 2060, -1000,
	-1000, 43, -1000, -1000, -1000, -1000, 2787, 43118, 20656, 42,
	-1000, 132, 2404, 22716, 18, 2686, 52698, 52698, 32936, -1000,
	29900, 52698, 52698, 52698, 301, 2827, 411, 409, 132, -1000,
	-1000, 2734, 2441, -1000, 2441, 58770, -1000, 237, 81, -1000,
	-1000, -1000, -1000, 58770, 311, 58770, 58770, 3260, 306, 58770,
	58770, 51686, 3128, 74944, 1470, 6010, -1000, 3301, 43624, 2223,
	-1000, -1000, 2653, -1000, -1000, -1000, -1000, 1233, 1730, -1000,
	1564, 648, 648, 58770, -1000, 58770, 59276, -1000, 40, -1000,
	-1000, 754, 76896, 74456, -1000, 1482, -1000, -1000, -1000, 129,
	-1000, 79336, 1470, 2996, 2650, -1000, -1000, -1000, 2296, -1000,
	-1000, 1399, -1000, 236, -171, 2758, 37, -1000, -1000, -1000,
	339, 58770, 1721, 276, 58770, 3222, 1252, 1269, 1943, -1000,
	1583, -1000, -1000, 13940, 14964, 906, -1000, 233, 80, -1000,
	77872, 3301, -1000, -1000, -1000, -1000, -1000, 700, -1000, 58770,
	43624, 43624, -1000, 787, 613, 954, -1000, 58770, 1021, 58770,
	229, 58770, 58770, 1879, 905, 58770, 2221, -1000, -1000, 3286,
	39575, 39575, 1613, 3011, 1447, 1444, -1000, -1000, 2767, 816,
	39575, 674, 3127, 2550, 2033, 3050, 2214, 3318, 1716, -1000,
	-1000, 363, -1000, 132, -1000, 20656, 400, 3053, -1000, 49662,
	276, 1250, 119, 2781, 2781, 58770, 227, 2895, -1000, -1000,
	2894, 2893, 2263, 2029, 3126, -1000, 3079, 1112, 1007, 20656,
	397, -1000, 1682, 684, 396, 393, 58770, 1070, 2443, -1000,
	3124, 3080, 3123, 3080, -1000, -1000, -1000, 54216, -1000, 35,
	-1000, 154, -1000, -1000, -1000, -1000, 58770, 58770, 58770, 58770,
	-1000, 1226, -1000, -1000, -1000, -1000, 1225, -1000, 1545, -1000,
	-1000, -1000, -1000, -1000, 1674, 1224, 32, -1000, -1000, 13940,
	13940, 13940, 3301, -1000, 74, -1000, 1029, 1749, -1000, -1000,
	74, 2892, 1738, -1000, -1000, -1000, -1000, -1000, -1000, 74,
	2889, 3369, -1000, 2885, 74, 1038, 58770, 58770, 8793, 58770,
	58770, 58770, 8531, 2881, 623, 954, -1000, -1000, -1000, -1000,
	-1000, 2880, -1000, 3080, 3120, 10162, -1000, 1034, 20656, -1000,
	-1000, -1000, -1000, 68, 58770, 1306, 1718, 2879, 2567, 39575,
	58770, -1000, -1000, -1000, -1000, -1000, -1000, 327, -1000, 327,
	327, 2878, 2876, 58770, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 58770, -1000, -1000, -1000, -1000, -1000, 3286, 3286, 1123,
	2875, 2872, 2871, 2870, -1000, 2866, 2865, 3301, 3078, -1000,
	-1000, 43624, -1000, -1000, -1000, 77872, -1000, -1000, -1000, 58770,
	58770, 392, -1000, -1000, 77872, -1000, -1000, -1000, -1000, 58770,
	-1000, -1000, -1000, 540, -1000, -1000, 540, 30, -1000, -1000,
	324, 58770, 37551, -1000, 1608, 316, -1000, -1000, -1000, 2807,
	-1000, 975, -1000, -1000, 19110, 79, -1000, 58770, -1000, 546,
	-1000, 374, -1000, 2442, 2706, 20656, 18, 58770, -1000, 58770,
	2771, 2771, 2771, 2771, 58770, -1000, 20656, 20656, 703, 590,
	20656, 24776, 24776, -1000, 20656, 380, -1000, -1000, -1000, -1000,
	2824, -1000, -1000, 1493, 2178, 20656, -1000, -1000, 846, 838,
	-1000, -1000, -1000, -1000, 1184, -1000, 24776, 24776, 390, 1064,
	29, -1000, 16533, 223, 18595, 78, -1000, 132, 9958, -1000,
	-1000, 329, -1000, -1000, -1000, 1818, -1000, 20656, 9078, -1000,
	578, -1000, -1000, 73950, 20656, -1000, 219, 18080, -1000, 578,
	-55, -55, 20656, 20656, 2178, 2646, 2645, 20656, 20656, 2124,
	2753, -1000, -1000, 2021, 2706, -1000, 248, 10162, 674, -1000,
	-1000, 17049, 681, 674, 696, 58770, 132, 2404, -1000, 10162,
	360, 58770, -1000, 10162, 2295, 30406, 2606, 2604, 30406, 2711,
	2592, 2592, 2592, -1000, -1000, -1000, 58770, 389, -1000, 52698,
	52698, 52698, 52698, 40081, 218, 2686, -1000, -1000, -1000, -1000,
	2271, 382, 29394, 20656, 132, 20656, 787, -1000, -1000, -1000,
	2573, -1000, 1648, 47655, -1000, 1450, 48161, 311, 560, 674,
	-1000, 25, 3369, 2564, 58770, 6010, 381, 2642, -1000, 129,
	-1000, -1000, 1950, 20656, -1000, -1000, 77, -1000, 76, 903,
	2995, 1719, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1940, 1162, -1000, 74456, 20656, 20656, 76896, -1000, 76896, -1000,
	-1000, 104, 145, -1000, 58770, 1399, 58770, 2641, -1000, -1000,
	2749, 74456, 74456, -1000, 3297, 14964, 379, 58770, 3050, 376,
	39575, 3222, -1000, 58770, -1000, -1000, 58770, 2058, -1000, 3076,
	647, 375, 24776, 58770, 2094, -1000, 1781, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 374, 3290, 3285, 77872, -1000,
	58770, 3041, 217, 75, -1000, -1000, 58770, -1000, -1000, -1000,
	-1000, -1000, 357, -1000, -1000, 145, -1000, -1000, -1000, 1648,
	311, 378, 2143, 800, 613, 37551, -1000, 68, 68, 39575,
	39575, -1000, -1000, 3301, 3301, 652, 3301, 68, 3055, 58770,
	3050, 58770, 1538, 58770, -1000, 2864, 2533, -1000, 58770, 30406,
	32430, 8819, 2634, -1000, -1000, 2781, 53710, 2781, -1000, 355,
	-1000, 327, 2172, 3301, 58770, 58770, -1000, 2510, -1000, -1000,
	-1000, 58770, 3119, 1908, -1000, 53204, -1000, 2564, 8755, 58770,
	1930, 58770, 58770, -1000, 58770, 30912, -1000, -1000, 2007, 6011,
	306, 1735, 1598, 876, -1000, -1000, 787, 1118, 1930, 58770,
	-1000, 58770, -1000, -1000, -1000, -1000, -1000, 13940, 14964, 13940,
	-1000, -1000, -1000, -1000, -1000, -1000, 1191, 58770, -1000, -1000,
	14452, -1000, -1000, -1000, -1000, -1000, 58770, 58770, 58770, 1065,
	2748, 58770, 1059, 2747, 58770, 58770, 58770, 58770, -1000, 2863,
	74, 1026, 1736, -1000, 2862, 74, 1018, 58770, -1000, 58770,
	-1000, 58770, -1000, 8225, 1930, -1000, 2860, 2859, 1442, 1972,
	58770, 3061, 351, 68, 1303, -1000, -1000, -1000, 58770, 58770,
	-1000, 623, 645, 58770, 58770, 58770, 58770, 58770, 3301, 1948,
	3118, -1000, 3259, 2571, 2570, -1000, 77384, 1574, 3080, -1000,
	-1000, -1000, -1000, -1000, 1205, -1000, 1866, -1000, 969, -1000,
	24, -1000, 20656, -1000, -1000, 11545, -1000, -1000, 2702, 2744,
	10162, -1000, -1000, 58770, 58770, 58770, 58770, -1000, 1098, 763,
	20656, 20656, 356, 948, 709, 763, 20656, 20656, -1000, -1000,
	1382, 1618, 1610, 20656, 77872, 24776, 24776, 24776, 24776, 24776,
	24776, 24776, 24776, 24776, 24776, 24776, 24776, 925, 925, 20656,
	-1000, 8109, -1000, 22, -1000, 20656, -1000, -1000, -1000, 10162,
	20656, 215, 1452, -1000, 7435, -1000, 20656, -1000, 214, 213,
	20656, 211, 10162, 10162, 2403, 2993, 2992, -1000, -1000, 2403,
	2631, 2629, 20656, 2049, 2702, -1000, 210, 73, 2346, 30912,
	2317, -1000, -1000, 2380, -1000, -1000, 20656, -1000, 58770, 2686,
	30406, 30406, 2532, 2598, 30406, -1000, -1000, -1000, -1000, 349,
	58770, -1000, -1000, -1000, -1000, 52698, -1000, 46154, 2179, 348,
	72, 6885, 332, 787, 2045, -1000, 1450, 345, -1000, 1725,
	2550, -1000, 2731, 17, -1000, -1000, -1000, 3071, 2263, 47655,
	58770, 2290, 3052, 3050, -1000, 336, 2625, 1470, 79336, 2991,
	-1000, 10162, 3301, 2213, 77872, 1644, -1000, -1000, -1000, 10162,
	10162, -1000, -1000, 873, 108, 1341, -1000, -5, 58770, 74456,
	-1000, 14, -1000, 339, -1000, 2786, 1633, 3255, 58770, -1000,
	1411, -1000, -1000, -1000, 3053, 3053, 20656, 1366, 276, 3254,
	-1000, 3036, -1000, -1000, 2569, -1000, -1000, 58770, -1000, 3301,
	-1000, 1383, 13940, 131, 1201, 2263, 47655, 2288, 58770, 1740,
	-1000, 1192, 68, 68, -1000, -1000, -1000, -1000, -1000, 3253,
	984, -1000, 45142, -1000, -1000, 2052, -1000, 3003, 2567, 39575,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 18, -1000, -1000,
	32430, -1000, -1000, -1000, -1000, 20656, -1000, 909, 1765, 2815,
	-1000, -1000, 2812, -1000, 58770, 613, -1000, 52192, -1000, -1000,
	-1000, 11, -1000, 1063, -1000, 1772, 1656, -1000, 10, 1930,
	9, 7, -1000, 3067, 611, 3039, 20656, 2990, 3218, 3217,
	-1000, -1000, 2094, 2988, 3252, 645, -1000, -1000, -1000, -1000,
	2094, -1000, 5115, 77872, 648, 645, 3080, 3080, -1000, -1000,
	320, -1000, -1000, -1000, -1000, 2858, 2856, 58770, 39575, -1000,
	58770, 39575, -1000, -1000, -1000, 2855, 58770, 58770, 58770, 1032,
	2729, 58770, 58770, 58770, -1000, -1000, 3080, -1000, 58770, 58770,
	-57, -1000, 3286, 3286, 77872, 71, -1000, 3286, 3286, -1000,
	-1000, 555, 20656, 2853, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3080, -1000, 3301, 3301, -1000, 77872, 58770, 58770,
	6, 70, 58770, -1000, 58770, -1000, -1000, -1000, 7250, 205,
	714, 20656, 3042, -1000, -1000, -1000, -1000, 763, 763, 20656,
	20656, 20656, 763, 1382, -1000, -1000, 763, -1000, -4, -4,
	99, 99, 99, -1000, 925, 925, 925, 925, 925, 925,
	763, -1000, -1000, 7195, 10162, -1000, 578, 2728, -1000, 578,
	-1000, -1000, -1000, 202, 77872, -1000, -1000, 201, 2986, 2980,
	69, 58770, 714, 2487, 2365, -1, -1000, 58770, 2059, 10162,
	-1000, -1000, -1000, 2532, -1000, 333, 20656, 30406, -1000, 58770,
	-11, -1000, -15, -1000, 3250, 2283, 28888, 24261, 20656, 2458,
	-1000, 3111, 3111, 2439, -1000, 2436, 13940, 332, 3301, 2550,
	58770, 1750, 1750, 2169, 58770, -1000, 48161, 1583, 616, 1450,
	200, 311, 58770, -1000, 1051, 3249, 30912, 51686, -1000, -16,
	-1000, 76896, -1000, 1631, 1591, -1000, 872, -1000, -1000, -1000,
	861, 2189, 812, 2797, -22, -1000, 197, 1153, 1150, 919,
	58770, 674, -32, 3222, -1000, 2977, 2554, 2554, 7094, 1530,
	437, -1000, 58770, -1000, -1000, -33, -1000, 58770, 1188, 193,
	58770, 613, 1864, 58770, 674, -1000, 58770, 328, 1538, 58770,
	325, 3061, 68, 293, 6307, 45142, 3242, 3242, 58770, 323,
	321, 319, -1000, -1000, -1000, -1000, 1930, 1696, -1000, -1000,
	-1000, -1000, -1000, 1696, 1379, 1696, 30912, 33442, -1000, 58770,
	58770, -1000, 6260, -1000, 3116, 3115, -1000, -1000, 318, -1000,
	3246, 3041, -1000, -1000, -1000, -1000, 14964, 58770, 58770, 1487,
	298, 1487, 292, 58770, -1000, -1000, 2851, 58770, 39575, -1000,
	-1000, 2811, -1000, 1930, -1000, -1000, 1442, 11545, 31924, -1000,
	1972, 317, 315, 314, 5964, 58770, -1000, -1000, -1000, 186,
	-1000, -1000, -1000, 76408, 77872, -1000, -1000, -1000, -1000, -1000,
	58770, 10162, 21686, -1000, -1000, 763, 763, 763, -1000, 1678,
	20656, 185, -1000, 308, -1000, -1000, -1000, -1000, -1000, 2471,
	2483, 2438, -1000, 2780, 30912, -1000, 674, -1000, 58770, 10162,
	-1000, -34, -1000, 301, 46154, -1000, 313, 58770, 2727, 28382,
	2070, -35, -1000, 505, 24776, 5659, -1000, -1000, 2358, 20656,
	2353, -1000, 2369, -1000, -1000, -1000, 3240, 3240, -1000, -1000,
	3240, 3240, 2208, 3301, -38, -1000, 25291, 2780, -1000, 2169,
	-40, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2618, 306, 614, 312, -1000, -1000, 2550,
	1648, 1450, 311, 633, 554, 552, 674, -52, 2564, 79336,
	6010, -1000, -1000, -1000, 93, -1000, -1000, 77872, -1000, 2908,
	1831, 812, -1000, 1597, -1000, -1000, -1000, 58770, -1000, -1000,
	3059, 3056, -1000, -1000, 58770, 810, -1000, 3052, 3050, -1000,
	1660, -1000, 1490, 2622, 1509, 295, 20656, 1780, -1000, 13940,
	613, 58770, 1648, 311, -1000, 2136, 613, 3055, -1000, 183,
	45142, -1000, 3311, -1000, 30406, -1000, 3242, -1000, 1805, -1000,
	-1000, 45648, 20656, 20656, 1583, 3053, 309, 3053, 58770, 3053,
	-1000, -1000, 307, 2433, 306, -1000, 3039, -1000, -1000, 20656,
	1705, 2561, -1000, -1000, -1000, -1000, -1000, 1027, -1000, 1000,
	-1000, 58770, 1487, 288, 58770, -1000, 582, 2182, -1000, 77872,
	-1000, 77872, 77872, 20656, -1000, -1000, -1000, 179, 178, 175,
	64, -1000, 3241, 61, -1000, 10162, -1000, -1000, -1000, -1000,
	16017, 304, 300, 283, 174, 22201, 22201, 22201, 60, -1000,
	-1000, -1000, 58770, 2469, 2465, 43118, -1000, -1000, -1000, -53,
	-1000, -1000, -1000, 58770, -56, -1000, 75920, -1000, 2070, 2727,
	-1000, -1000, 24261, 41, 13940, 1366, 2228, 58770, 2352, 10162,
	2382, 2725, 3301, 3301, 3301, 3301, 36033, 2976, 35527, -1000,
	-1000, 13940, -1000, -1000, -1000, -1000, -1000, 37045, -1000, 2618,
	-1000, 984, 1914, -1000, -1000, 31418, 1583, 2169, 1450, 2550,
	2263, -1000, 627, 626, 3052, 1690, 299, -1000, 1470, -1000,
	-1000, 1809, 297, 1143, -1000, -1000, 3240, -1000, -1000, 1885,
	-1000, 1764, 1763, -1000, -1000, -1000, 3239, 995, -1000, 1654,
	-1000, 2624, 2623, 2414, -1000, -1000, -1000, -1000, 3369, 5330,
	3237, 58770, -1000, -1000, 613, 1185, 2263, 58770, -1000, -1000,
	-1000, 296, -59, -1000, 18, -1000, -1000, -1000, -60, -1000,
	3286, -72, -74, 2554, 58770, 2554, 276, 2554, 11545, 546,
	2433, -1000, 5239, 295, -1000, 20656, 58770, 58770, -1000, -1000,
	988, -1000, 1404, 1028, 1404, -75, -1000, -76, -88, 5103,
	-1000, -1000, -1000, 58770, 294, 21686, -1000, 20656, 20656, 290,
	-1000, 1817, -1000, 26322, 1549, 1262, 1242, 1817, 1817, 264,
	2724, 2723, 291, 3235, -89, -1000, 58770, 2359, 2268, -1000,
	-1000, 28382, -1000, 2281, 20656, -1000, -1000, -1000, 2344, 2428,
	-1000, -1000, 2343, 628, 2372, -1000, -1000, -1000, -1000, -5,
	-1000, 35021, -5, -1000, -1000, -90, -1000, -1000, 984, -1000,
	1814, -92, -1000, 611, 3039, 20656, 2618, 2550, 2169, 1450,
	-1000, -1000, -1000, 3076, 287, 30912, -1000, 1538, 20656, -1000,
	-1000, -1000, 58770, 1829, 45142, 45142, 674, 58770, -1000, -1000,
	2409, -1000, 2408, 1846, 1846, 4823, 1084, 1442, -1000, -1000,
	58770, 1174, 613, 172, -1000, 3300, -1000, 45648, -1000, -1000,
	2810, -1000, -93, -1000, 1530, 2780, 169, -1000, 546, -1000,
	-1000, 10162, 1487, 1487, 58770, -1000, -1000, -1000, 2710, -1000,
	45142, 77872, -1000, -1000, -1000, -1000, -1000, -1000, -94, -95,
	21686, -1000, 1410, 3110, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 58770, 58770, 58770, -1000, -1000, 58770, -1000, -1000, 2359,
	-1000, 24776, 24776, 2969, -1000, 24776, -1000, 2179, 285, 3,
	-1000, 3234, -1000, 43118, -1000, -1000, 2380, 58770, 2507, 284,
	-1000, -1000, -5, -1000, -1000, 37045, -1000, -1000, 2260, 2259,
	-1000, 31418, 58770, 58770, 5057, 984, 2169, 2618, 2550, 3050,
	30912, -96, 45142, 4946, -1000, -1000, 1258, -13, -26, 3052,
	-1000, -1000, 1967, -1000, -1000, 2975, -1000, -1000, -1000, -57,
	613, 58770, -1000, -1000, -1000, -1000, 280, 1930, -1000, 1930,
	2622, -1000, -1000, -1000, -1000, -1000, 1487, 58770, -1000, -1000,
	-1000, -1000, -110, 1254, -1000, -1000, 683, 21171, 2568, 250,
	246, -1000, -1000, 1366, 1366, -1000, 1366, 2276, 58264, 20656,
	13940, -73, 2051, -113, -1000, 20656, -1000, -1000, -1000, -1000,
	-1000, -1000, 3039, -1000, 2618, 984, 2169, 984, -117, -1000,
	1690, 277, -1000, 2908, 2790, 2796, -1000, -1000, 276, 276,
	-1000, 613, 20656, -1000, 1930, -1000, -1000, -1000, -1000, -1000,
	-1000, 3019, 58770, 58770, 58770, 58770, -129, -1000, 75432, 2256,
	-1000, -1000, 2506, 2411, -130, 58770, 984, -1000, 2618, 2780,
	-1000, 30912, 3076, 13428, 1794, 1148, 1145, -1000, -1000, -1000,
	-133, 1930, 3034, -1000, -1000, -1000, -137, 2394, 58264, 2266,
	1048, 3296, -1000, -1000, -1000, 2380, -1000, -1000, -1000, 984,
	-1000, -1000, 3050, -140, -1000, -1000, -1000, -1000, -1000, 1538,
	3046, 3045, -1000, 3019, -1000, 165, 2616, 20656, -1000, -1000,
	-1000, -1000, -1000, -1000, 2170, -1000, -1000, 2163, 2255, 2255,
	3292, 2366, 2044, -1000, 984, -1000, 13428, 45142, 1754, 1728,
	2535, -1000, 2162, 10162, -1000, -1000, 2083, 2133, 2122, 2163,
	2394, -1000, 271, 58770, 2506, 2780, -1000, 268, 45142, 45142,
	58770, -1000, 2394, 2100, 2097, -1000, 2131, -1000, 2130, 2113,
	2112, 2083, -1000, 58264, 2274, -1000, -1000, 13428, -1000, -1000,
	-1000, -1000, 2614, 2613, 2612, -1000, -1000, 2128, -1000, 2120,
	-1000, 2394, -164, 266, -181, 2212, 2078, 2063, -1000, -1000,
	-1000, -1000, 58264, -1000, 2394, -1000, 2076, 2056, -182, 2603,
	-1000, -1000, -1000, 2101, -1000,
}

var yyPgo = [...]int16{
	0, 3755, 3753, 2495, 135, 0, 18, 6295, 3752, 57,
	233, 294, 123, 124, 6789, 136, 287, 296, 3671, 2621,
	1365, 109, 3751, 243, 3751, 3749, 302, 256, 206, 3746,
	185, 3744, 3743, 158, 183, 3741, 3740, 332, 31, 218,
	3739, 308, 324, 325, 327, 3738, 282, 307, 279, 280,
	3737, 6745, 885, 1967, 15, 3735, 3732, 3731, 3730, 3728,
	270, 3727, 221, 3723, 3722, 3721, 272, 3721, 195, 262,
	267, 3720, 304, 268, 1619, 213, 890, 5144, 3718, 291,
	130, 1313, 316, 3717, 3716, 3715, 3711, 3710, 3709, 3707,
	3706, 3704, 3701, 142, 242, 217, 227, 309, 181, 303,
	179, 1331, 298, 3700, 144, 3699, 3697, 60, 58, 269,
	3696, 3694, 68, 32, 55, 323, 306, 3693, 3688, 326,
	3687, 3686, 6892, 90, 278, 3685, 912, 3683, 276, 273,
	67, 51, 3681, 274, 271, 219, 46, 220, 177, 56,
	174, 277, 3680, 3679, 3678, 3677, 85, 216, 107, 6571,
	342, 341, 3676, 3673, 3672, 3670, 3669, 165, 159, 3668,
	3667, 3663, 3662, 38, 40, 3657, 3655, 223, 211, 260,
	3651, 266, 157, 10, 28, 154, 139, 3650, 3649, 3647,
	3646, 24, 79, 21, 3645, 3644, 3643, 297, 3643, 3643,
	3643, 3643, 3642, 255, 3641, 3639, 3638, 143, 3637, 3636,
	3635, 48, 3635, 50, 66, 3634, 37, 253, 283, 3633,
	312, 43, 245, 2670, 215, 3632, 328, 305, 301, 91,
	187, 7, 197, 171, 428, 3631, 3630, 3629, 3629, 322,
	258, 212, 222, 141, 149, 3628, 338, 3627, 318, 3626,
	3625, 3624, 3623, 264, 350, 71, 3622, 201, 3621, 101,
	3620, 3619, 97, 263, 23, 54, 3618, 42, 108, 45,
	72, 3616, 70, 261, 4, 20, 13, 3615, 239, 3614,
	30, 3614, 314, 3611, 3611, 3609, 3608, 3604, 176, 3601,
	6, 1, 3596, 2, 8, 5, 14, 99, 3595, 167,
	3594, 98, 3593, 210, 180, 129, 3591, 113, 3590, 76,
	47, 120, 3586, 3585, 3584, 115, 36, 3582, 105, 3578,
	170, 238, 3577, 3575, 3574, 22, 41, 125, 69, 65,
	52, 33, 86, 64, 3573, 3571, 35, 80, 3564, 186,
	17, 11, 75, 240, 89, 3563, 26, 16, 19, 384,
	114, 292, 293, 3562, 44, 241, 315, 3560, 3559, 313,
	122, 295, 27, 191, 3558, 188, 3557, 34, 3555, 92,
	59, 172, 61, 63, 3554, 49, 184, 3552, 84, 334,
	3550, 251, 561, 8292, 3545, 140, 250, 333, 83, 3543,
	189, 169, 3542, 29, 284, 102, 3541, 137, 132, 134,
	3540, 126, 3539, 3538, 3537, 3536, 3535, 3532, 3531, 3526,
	3524, 330, 343, 3521, 286, 281, 345, 320, 310, 335,
	329, 3519, 3516, 3515, 3514, 3513, 3512, 3509, 3507, 3506,
	3505, 3503, 3502, 3500, 3499, 3498, 3494, 3493, 3492, 3490,
	3488, 3486, 3485, 3484, 3483, 3480, 3478, 3477, 3470, 3469,
	3466, 3464, 3463, 3462, 3461, 3459, 3458, 3457, 3456, 3455,
	3454, 3453, 3452, 214, 199, 3449, 3448, 3447, 290, 289,
	231, 244, 331, 196, 198, 93, 3446, 3445, 112, 3444,
	3443, 3442, 321, 3440, 336, 3438, 3436, 3435, 3433, 164,
	111, 3432, 78, 162, 319, 53, 3431, 3430, 203, 247,
	104, 103, 3429, 3427, 3423, 3422, 3417, 168, 3410, 3409,
	193, 128, 3408, 230, 202, 3403, 288, 257, 3401, 3397,
	317, 3396, 73, 337, 3394, 207, 205, 100, 248, 3386,
	96, 3385, 3384, 254, 3383, 3382, 62, 3380, 3379, 204,
	252, 3378, 3376, 3374, 3372, 3370, 3369, 3, 94, 25,
	12, 3367, 3358, 39, 3345, 3342, 225, 3340, 3336, 3335,
	74, 77, 228, 3333, 3329, 182, 9, 3323, 3323, 2583,
}

var yyR1 = [...]int16{
	0, 1, 2, 2, 3, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 17, 17, 337, 337, 372, 372, 372, 24, 24,
	25, 25, 26, 26, 27, 27, 38, 38, 38, 5,
	5, 5, 6, 6, 6, 6, 6, 8, 8, 7,
	12, 12, 13, 13, 373, 373, 23, 23, 15, 15,
	552, 552, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 14, 14, 16, 16, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 54, 54, 54, 54,
	54, 54, 74, 76, 75, 75, 75, 55, 55, 69,
	69, 73, 73, 72, 72, 72, 72, 70, 70, 56,
	56, 244, 244, 512, 512, 101, 101, 101, 101, 101,
	101, 101, 66, 66, 68, 68, 68, 57, 58, 58,
	61, 61, 60, 59, 59, 62, 62, 62, 65, 65,
	99, 99, 99, 63, 63, 64, 132, 132, 132, 125,
	125, 125, 125, 125, 125, 134, 134, 134, 134, 133,
	133, 133, 133, 133, 135, 135, 135, 135, 135, 98,
	98, 81, 82, 82, 82, 82, 82, 77, 77, 77,
	79, 80, 94, 94, 95, 95, 83, 83, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 90,
	90, 86, 86, 78, 78, 78, 78, 78, 78, 87,
	88, 91, 92, 89, 89, 89, 89, 96, 96, 96,
	97, 97, 85, 85, 122, 122, 124, 124, 126, 126,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 123, 123, 100, 100, 103, 103, 102, 102,
	129, 129, 128, 128, 146, 146, 147, 149, 149, 150,
	150, 148, 148, 148, 148, 148, 148, 148, 148, 115,
	115, 116, 116, 117, 117, 119, 120, 120, 120, 120,
	118, 118, 121, 121, 121, 151, 151, 151, 151, 215,
	215, 214, 214, 217, 217, 217, 217, 218, 218, 219,
	219, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 375, 375, 376, 376, 376, 377, 377, 377,
	230, 230, 230, 230, 230, 230, 231, 231, 231, 231,
	232, 232, 233, 233, 234, 234, 234, 235, 235, 236,
	236, 238, 239, 239, 239, 240, 240, 240, 241, 241,
	241, 242, 242, 221, 221, 171, 171, 171, 192, 224,
	224, 223, 223, 223, 223, 225, 225, 226, 226, 227,
	227, 228, 228, 229, 229, 243, 243, 252, 252, 248,
	248, 249, 250, 250, 251, 251, 517, 246, 246, 245,
	245, 247, 258, 258, 260, 260, 259, 259, 259, 259,
	261, 261, 262, 262, 253, 253, 254, 254, 255, 255,
	255, 256, 256, 257, 257, 257, 257, 257, 263, 268,
	267, 267, 279, 279, 269, 269, 270, 271, 271, 274,
	274, 273, 273, 275, 275, 275, 276, 276, 276, 277,
	277, 272, 272, 278, 278, 281, 281, 282, 282, 282,
	282, 282, 282, 282, 282, 283, 283, 283, 283, 280,
	280, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	285, 285, 285, 285, 285, 286, 286, 287, 287, 288,
	288, 264, 264, 265, 265, 265, 265, 265, 265, 266,
	266, 152, 374, 374, 162, 162, 162, 162, 162, 183,
	183, 163, 163, 167, 153, 164, 164, 169, 169, 168,
	165, 165, 154, 237, 237, 155, 166, 166, 156, 156,
	186, 186, 187, 187, 193, 193, 193, 194, 194, 195,
	195, 197, 197, 198, 198, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	199, 199, 204, 205, 205, 205, 205, 205, 205, 200,
	200, 206, 211, 211, 211, 211, 207, 207, 207, 207,
	33, 33, 349, 349, 349, 349, 349, 349, 349, 349,
	348, 348, 348, 347, 347, 347, 347, 347, 210, 210,
	474, 474, 209, 209, 553, 553, 501, 501, 188, 188,
	189, 189, 190, 190, 191, 191, 175, 175, 175, 175,
	175, 184, 184, 185, 185, 176, 176, 178, 179, 180,
	180, 180, 180, 180, 173, 170, 170, 170, 177, 177,
	177, 202, 202, 203, 203, 181, 181, 181, 182, 182,
	174, 174, 130, 130, 130, 131, 131, 131, 172, 172,
	157, 157, 157, 157, 157, 157, 351, 351, 351, 351,
	351, 351, 351, 351, 289, 289, 290, 290, 293, 293,
	293, 296, 304, 304, 304, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 353, 353, 354, 354, 355,
	355, 356, 356, 291, 291, 292, 292, 297, 297, 298,
	298, 299, 299, 299, 299, 300, 303, 303, 357, 357,
	358, 358, 359, 10, 32, 294, 308, 308, 309, 309,
	309, 309, 312, 312, 312, 312, 315, 315, 315, 361,
	361, 364, 364, 366, 366, 366, 366, 362, 362, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 554, 554, 28, 28, 28,
	360, 360, 363, 363, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 295, 295, 311, 311, 311, 311, 311,
	311, 311, 313, 313, 302, 302, 301, 301, 317, 317,
	316, 316, 316, 316, 321, 321, 321, 321, 321, 318,
	319, 320, 320, 320, 320, 320, 322, 322, 323, 323,
	324, 325, 325, 326, 326, 326, 352, 352, 330, 330,
	330, 330, 331, 331, 332, 332, 333, 158, 158, 314,
	314, 334, 334, 336, 336, 335, 335, 338, 338, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	339, 339, 344, 344, 340, 340, 11, 409, 409, 409,
	409, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 342, 342, 342, 343, 345, 345, 555, 555,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 390, 390, 390, 506, 506, 506, 509, 509,
	509, 509, 508, 508, 510, 510, 391, 346, 346, 346,
	346, 346, 346, 346, 346, 346, 346, 346, 346, 346,
	37, 383, 385, 71, 71, 71, 71, 384, 67, 67,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 306, 306, 307, 307, 307,
	307, 307, 307, 327, 328, 328, 329, 329, 329, 329,
	386, 386, 386, 386, 513, 513, 514, 514, 515, 515,
	515, 516, 516, 516, 516, 516, 518, 518, 518, 518,
	518, 519, 93, 93, 93, 520, 520, 521, 521, 523,
	523, 523, 523, 523, 525, 525, 522, 522, 526, 526,
	526, 389, 544, 544, 527, 527, 524, 524, 524, 524,
	524, 524, 524, 524, 524, 524, 524, 524, 524, 524,
	524, 524, 524, 511, 511, 387, 387, 528, 528, 528,
	530, 530, 529, 529, 529, 529, 529, 535, 535, 536,
	536, 538, 533, 533, 534, 534, 541, 531, 531, 557,
	557, 532, 532, 539, 539, 556, 556, 537, 537, 537,
	540, 540, 540, 540, 542, 542, 388, 388, 388, 388,
	201, 201, 543, 543, 543, 543, 413, 413, 413, 413,
	414, 415, 415, 415, 415, 415, 415, 415, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 418, 418, 453, 453, 558, 558,
	419, 419, 420, 420, 454, 454, 456, 456, 456, 456,
	421, 455, 455, 457, 422, 422, 422, 422, 422, 422,
	422, 422, 422, 422, 422, 422, 422, 443, 444, 444,
	460, 460, 460, 460, 459, 459, 458, 458, 465, 465,
	445, 445, 446, 446, 446, 461, 461, 462, 462, 463,
	463, 447, 447, 447, 447, 448, 448, 449, 450, 450,
	464, 464, 496, 496, 496, 496, 497, 497, 504, 498,
	499, 499, 500, 417, 417, 417, 417, 417, 451, 451,
	452, 452, 502, 502, 503, 503, 411, 411, 412, 379,
	379, 380, 378, 378, 378, 381, 381, 382, 382, 382,
	382, 507, 507, 507, 507, 507, 507, 507, 507, 507,
	507, 507, 505, 505, 505, 505, 213, 213, 216, 216,
	208, 208, 545, 545, 545, 545, 545, 545, 545, 545,
	545, 547, 547, 547, 212, 212, 9, 9, 9, 9,
	549, 549, 405, 405, 405, 546, 546, 546, 546, 546,
	548, 548, 548, 548, 406, 406, 350, 350, 350, 350,
	350, 350, 368, 368, 29, 29, 30, 31, 31, 34,
	34, 34, 34, 35, 35, 36, 36, 36, 36, 369,
	370, 370, 371, 371, 423, 423, 424, 469, 469, 469,
	469, 466, 466, 468, 467, 467, 425, 470, 470, 426,
	426, 427, 428, 471, 471, 475, 475, 476, 476, 476,
	476, 476, 477, 477, 478, 478, 479, 479, 480, 480,
	429, 481, 481, 430, 430, 431, 431, 483, 483, 488,
	488, 488, 432, 432, 432, 433, 433, 433, 433, 484,
	484, 489, 489, 489, 489, 489, 489, 489, 222, 222,
	434, 435, 435, 435, 435, 435, 435, 435, 435, 435,
	436, 436, 436, 482, 482, 482, 437, 492, 492, 485,
	485, 490, 490, 490, 490, 490, 472, 472, 550, 550,
	550, 551, 551, 438, 439, 439, 486, 486, 491, 491,
	440, 441, 487, 487, 487, 487, 442, 442, 473, 473,
	493, 493, 494, 494, 495, 495, 40, 40, 40, 39,
	39, 136, 136, 139, 139, 139, 139, 139, 142, 143,
	144, 145, 140, 140, 137, 138, 138, 141, 141, 104,
	104, 105, 105, 107, 109, 109, 109, 108, 110, 110,
	106, 106, 111, 111, 111, 111, 112, 112, 113, 113,
	113, 113, 113, 114, 114, 114, 114, 114, 42, 42,
	42, 42, 41, 41, 43, 43, 43, 43, 43, 43,
	44, 44, 45, 45, 46, 47, 47, 47, 48, 48,
	49, 49, 50, 50, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 393, 393, 559, 559,
	559, 402, 402, 402, 394, 400, 398, 395, 395, 396,
	396, 396, 396, 401, 401, 399, 397, 397, 397, 397,
	397, 397, 407, 407, 408, 408, 403, 403, 403, 403,
	403, 403, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 410, 410,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 0, 2, 0,
	3, 0, 2, 0, 1, 0, 2, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 2, 3, 0, 1, 3,
	1, 0, 3, 3, 4, 4, 4, 4, 3, 2,
	1, 1, 2, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 5, 3, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 3,
	3, 2, 2, 3, 5, 4, 6, 3, 5, 4,
	6, 4, 6, 5, 7, 3, 2, 4, 2, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 3, 4, 4, 6, 3, 3, 4, 3,
	4, 4, 5, 4, 5, 1, 1, 3, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 1, 1, 2, 4, 1, 1, 1, 2,
	2, 2, 2, 1, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 1, 2, 1,
	2, 1, 0, 2, 2, 3, 5, 0, 2, 4,
	3, 1, 1, 1, 2, 3, 4, 5, 6, 8,
	6, 6, 1, 3, 1, 3, 3, 5, 1, 0,
	1, 2, 4, 2, 0, 3, 3, 2, 1, 3,
	4, 3, 5, 4, 3, 5, 1, 1, 1, 1,
	4, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 3, 2, 3, 2, 0, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 3, 3, 0, 2, 3, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 2, 2, 1, 3, 3, 2, 4,
	1, 5, 2, 5, 2, 5, 2, 3, 3, 0,
	1, 0, 3, 0, 1, 4, 1, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 0, 5, 0, 5, 0,
	0, 1, 1, 3, 1, 1, 1, 3, 3, 1,
	1, 1, 2, 4, 4, 2, 3, 5, 5, 1,
	3, 1, 0, 1, 2, 3, 2, 4, 2, 3,
	2, 0, 1, 2, 0, 9, 9, 2, 1, 1,
	0, 1, 3, 3, 2, 1, 1, 2, 0, 1,
	3, 2, 2, 3, 1, 4, 2, 3, 2, 3,
	2, 3, 1, 1, 2, 2, 4, 1, 2, 3,
	3, 4, 5, 4, 5, 4, 2, 2, 2, 1,
	1, 0, 5, 2, 2, 2, 3, 1, 0, 1,
	3, 9, 1, 2, 0, 7, 7, 0, 10, 6,
	0, 4, 5, 2, 0, 2, 4, 0, 1, 1,
	0, 5, 2, 4, 1, 2, 0, 1, 0, 1,
	5, 1, 0, 2, 0, 2, 6, 2, 0, 1,
	3, 2, 4, 0, 1, 3, 2, 1, 0, 1,
	3, 3, 2, 0, 2, 2, 2, 3, 3, 4,
	1, 3, 3, 2, 7, 12, 1, 3, 2, 3,
	3, 1, 2, 2, 2, 2, 1, 2, 13, 2,
	2, 0, 2, 0, 1, 3, 3, 1, 3, 1,
	3, 3, 3, 3, 3, 0, 3, 3, 0, 3,
	0, 7, 7, 3, 0, 2, 1, 1, 1, 1,
	1, 1, 2, 2, 1, 3, 3, 6, 0, 3,
	0, 2, 3, 2, 3, 4, 4, 3, 3, 0,
	5, 2, 5, 2, 0, 4, 2, 1, 0, 1,
	0, 1, 3, 3, 6, 7, 5, 7, 9, 2,
	0, 7, 1, 3, 1, 4, 4, 7, 2, 1,
	1, 1, 3, 2, 8, 1, 3, 3, 5, 2,
	1, 3, 7, 2, 0, 10, 1, 2, 9, 11,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 3,
	0, 1, 3, 2, 0, 1, 1, 3, 3, 1,
	1, 3, 3, 3, 3, 4, 4, 3, 3, 2,
	1, 3, 2, 1, 1, 1, 1, 3, 0, 1,
	3, 1, 1, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 2, 2, 1, 3, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 0, 2, 0, 1, 0, 1, 0, 1, 0,
	1, 0, 1, 0, 1, 0, 4, 4, 4, 5,
	5, 2, 5, 3, 5, 2, 0, 3, 1, 2,
	5, 5, 8, 3, 4, 8, 5, 0, 4, 3,
	0, 1, 3, 1, 3, 2, 2, 4, 4, 5,
	2, 0, 1, 1, 0, 2, 2, 0, 2, 0,
	13, 16, 12, 15, 14, 17, 1, 1, 2, 2,
	2, 2, 1, 0, 1, 0, 1, 3, 1, 1,
	1, 3, 3, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 1, 0, 2,
	2, 1, 0, 3, 0, 1, 3, 1, 1, 2,
	4, 6, 6, 10, 1, 2, 1, 3, 4, 0,
	1, 3, 2, 1, 1, 6, 2, 0, 3, 1,
	1, 2, 1, 2, 2, 2, 2, 3, 0, 1,
	2, 1, 2, 1, 3, 2, 3, 1, 2, 2,
	2, 1, 2, 3, 1, 2, 2, 2, 2, 3,
	3, 3, 1, 3, 1, 1, 0, 1, 1, 0,
	1, 0, 3, 0, 2, 1, 4, 4, 5, 2,
	5, 5, 7, 3, 1, 5, 9, 3, 9, 4,
	11, 10, 2, 0, 1, 3, 3, 6, 4, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 3, 3, 4, 0, 1, 0,
	6, 1, 3, 3, 3, 5, 2, 0, 3, 4,
	4, 0, 2, 0, 4, 0, 3, 16, 19, 1,
	0, 2, 0, 4, 0, 1, 3, 2, 0, 4,
	6, 4, 6, 4, 4, 6, 4, 6, 5, 7,
	5, 7, 4, 6, 10, 13, 10, 13, 11, 14,
	1, 3, 1, 0, 1, 3, 1, 1, 1, 1,
	1, 2, 5, 3, 6, 4, 6, 6, 9, 5,
	7, 6, 6, 5, 5, 5, 5, 9, 4, 5,
	7, 6, 4, 8, 4, 2, 4, 3, 6, 4,
	3, 3, 3, 2, 2, 3, 4, 4, 3, 3,
	3, 3, 3, 3, 4, 4, 3, 2, 3, 2,
	2, 3, 4, 3, 2, 2, 3, 4, 4, 4,
	5, 1, 4, 4, 4, 3, 3, 2, 1, 0,
	6, 4, 6, 4, 6, 8, 4, 6, 4, 6,
	5, 7, 2, 3, 3, 2, 5, 1, 1, 2,
	3, 2, 1, 1, 2, 1, 2, 1, 1, 1,
	2, 1, 2, 1, 1, 1, 3, 3, 3, 3,
	2, 2, 2, 3, 5, 5, 5, 2, 1, 3,
	6, 6, 6, 6, 6, 8, 8, 6, 6, 7,
	9, 9, 8, 10, 6, 6, 6, 6, 6, 6,
	6, 8, 6, 8, 6, 8, 7, 9, 6, 8,
	7, 9, 8, 10, 8, 10, 9, 11, 8, 10,
	9, 11, 8, 8, 7, 6, 6, 6, 6, 8,
	8, 8, 8, 6, 9, 0, 2, 2, 1, 2,
	2, 2, 2, 3, 1, 3, 3, 1, 5, 3,
	9, 12, 7, 7, 3, 2, 1, 3, 1, 3,
	3, 3, 3, 2, 2, 1, 1, 1, 1, 2,
	1, 1, 1, 4, 5, 1, 0, 1, 2, 2,
	2, 2, 1, 1, 1, 3, 3, 5, 1, 4,
	0, 2, 3, 0, 1, 1, 4, 5, 1, 1,
	1, 1, 3, 3, 2, 2, 1, 2, 2, 2,
	2, 1, 2, 2, 1, 17, 21, 1, 1, 2,
	1, 3, 1, 1, 1, 3, 1, 2, 0, 1,
	2, 4, 1, 1, 1, 1, 1, 3, 0, 1,
	0, 1, 1, 4, 0, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 2, 0, 9, 11, 12, 14,
	3, 0, 3, 4, 4, 0, 6, 4, 9, 7,
	6, 4, 6, 6, 5, 7, 9, 6, 6, 5,
	4, 4, 3, 6, 6, 6, 6, 4, 7, 5,
	8, 7, 8, 6, 5, 8, 1, 0, 1, 0,
	4, 6, 5, 8, 2, 0, 2, 2, 2, 1,
	5, 2, 0, 2, 6, 6, 6, 10, 6, 6,
	6, 9, 9, 6, 6, 9, 6, 7, 7, 6,
	2, 2, 2, 2, 1, 2, 1, 0, 1, 2,
	10, 13, 5, 4, 4, 2, 0, 2, 2, 1,
	0, 11, 14, 12, 15, 8, 11, 8, 7, 9,
	1, 1, 3, 3, 5, 6, 1, 3, 1, 3,
	1, 3, 3, 7, 9, 9, 8, 6, 1, 0,
	1, 3, 3, 1, 5, 3, 8, 11, 6, 1,
	0, 5, 2, 3, 0, 2, 0, 1, 1, 1,
	1, 1, 3, 3, 2, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 2, 2, 1, 2,
	2, 2, 2, 1, 1, 0, 1, 1, 1, 1,
	1, 1, 2, 0, 2, 0, 4, 1, 3, 1,
	2, 2, 2, 1, 1, 1, 1, 1, 3, 3,
	1, 3, 1, 3, 11, 13, 5, 1, 2, 2,
	1, 1, 3, 5, 1, 3, 7, 2, 0, 5,
	5, 10, 8, 2, 0, 2, 0, 1, 1, 1,
	1, 1, 2, 0, 2, 0, 4, 0, 5, 0,
	8, 1, 1, 8, 11, 6, 8, 1, 3, 1,
	1, 3, 4, 7, 6, 5, 5, 5, 5, 1,
	3, 4, 4, 4, 3, 4, 3, 1, 4, 0,
	8, 5, 5, 6, 7, 7, 7, 4, 4, 5,
	11, 10, 10, 2, 2, 0, 13, 2, 0, 1,
	3, 5, 5, 3, 6, 2, 1, 0, 2, 4,
	0, 1, 3, 6, 8, 8, 1, 3, 5, 5,
	10, 10, 11, 11, 5, 5, 6, 10, 1, 0,
	2, 0, 1, 0, 2, 2, 1, 1, 0, 4,
	0, 1, 3, 1, 1, 1, 1, 1, 2, 4,
	4, 5, 2, 0, 3, 1, 3, 4, 3, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 3, 3, 3, 0, 1, 4, 2, 2,
	2, 2, 2, 3, 2, 2, 3, 0, 2, 2,
	1, 1, 1, 0, 2, 4, 5, 6, 4, 5,
	2, 3, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 2, 3,
	2, 5, 4, 3, 3, 3, 3, 3, 1, 1,
	0, 2, 3, 0, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 0, 3, 6, 3, 5, 3, 5,
	3, 5, 2, 0, 2, 0, 1, 2, 2, 2,
	3, 3, 2, 2, 3, 3, 1, 1, 3, 3,
	2, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -393, -146, -152, -153, -154,
	-155, -156, -157, -158, -159, -160, -161, -386, -387, -388,
	-411, -412, -413, -414, -415, -416, -417, -418, -419, -420,
	-421, -422, -443, -444, -445, -446, -447, -448, -449, -450,
	-423, -424, -425, -426, -427, -428, -429, -430, -431, -432,
	-433, -434, -435, -436, -437, -438, -439, -440, -441, -442,
	-390, -391, -392, -394, -395, -396, -397, -398, -399, -400,
	267, 213, -148, -149, -235, 112, 26, 22, 27, 395,
	94, 402, 192, 437, 229, 408, 414, 398, 379, -151,
	-150, -234, 532, 63, 67, -242, 36, 519, 87, 541,
	-559, 487, 458, -559, 97, 98, 99, 100, 532, -194,
	116, -351, -314, -26, 33, 415, 262, 62, 465, 455,
	226, 277, 285, 423, 104, -379, 269, 450, 376, 195,
	439, 388, 444, 513, -472, 407, 71, 454, 452, 58,
	290, 474, 472, 40, 67, 308, 420, 481, 85, 285,
	200, 226, 237, 248, 262, 287, 71, -474, 62, 376,
	386, 388, 410, 415, 423, 444, 413, 461, 269, 407,
	104, 450, 439, 455, 465, 277, 385, -346, -349, -348,
	465, 262, 308, 104, 407, 71, 67, 420, 481, 85,
	285, 226, 237, 439, 455, 195, 269, 277, -474, 388,
	415, 423, 376, 413, 461, 85, -506, 58, 424, 458,
	-507, -505, -213, 56, 218, 415, 348, 407, 489, -5,
	4, -18, -19, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 22, 202, 204, 205, 206, 55, 207,
	208, 209, 211, 212, 213, 89, 70, 214, 215, 216,
	24, 217, 219, 220, 221, 222, 223, 224, 124, 227,
	228, 229, 230, 231, 142, 232, 102, 233, 234, 235,
	236, 237, 112, 238, 155, 239, 121, 122, 91, 247,
	248, 249, 250, 251, 252, 254, 255, 99, 150, 151,
	256, 90, 257, 258, 259, 260, 261, 262, 177, 27,
	263, 139, 265, 149, 266, 268, 137, 42, 269, 271,
	272, 273, 274, 275, 276, 277, 278, 280, 282, 283,
	92, 284, 154, 166, 286, 287, 288, 289, 290, 292,
	295, 296, 152, 297, 298, 299, 28, 300, 301, 302,
	303, 304, 305, 306, 307, 308, 309, 310, 311, 313,
	314, 315, 97, 316, 318, 319, 146, 504, 320, 321,
	322, 323, 93, 325, 328, 329, 330, 333, 334, 335,
	336, 337, 338, 106, 85, 339, 100, 341, 342, 343,
	344, 345, 346, 347, 132, 349, 350, 351, 352, 353,
	354, 355, 358, 111, 359, 360, 32, 140, 123, 505,
	506, 503, 145, 62, 507, 508, 125, 502, 509, 103,
	365, 366, 367, 368, 369, 370, 371, 130, 372, 129,
	374, 375, 376, 378, 379, 380, 381, 383, 384, 385,
	386, 387, 113, 388, 153, 144, 389, 390, 391, 392,
	84, 133, 394, 395, 396, 397, 398, 399, 400, 34,
	401, 402, 403, 35, 404, 405, 406, 408, 409, 410,
	411, 128, 413, 414, 147, 416, 417, 88, 418, 419,
	420, 421, 422, 423, 94, 426, 428, 429, 430, 431,
	432, 108, 434, 435, 436, 437, 438, 439, 114, 115,
	440, 441, 442, 148, 443, 444, 446, 447, 105, 449,
	450, 109, 452, 453, 454, 455, 456, 459, 461, 463,
	464, 465, 466, 467, 468, 469, 143, 470, 50, 473,
	474, 475, 98, 476, 477, 478, 479, 156, 184, 480,
	481, 482, 483, 484, 486, 169, 487, 141, 488, 499,
	500, 57, 37, 174, 170, 190, 180, 179, 225, 189,
	188, 29, 279, 176, 293, 294, 501, 187, 172, 186,
	167, 161, 163, 164, 160, 162, 157, 165, 159, 127,
	158, 326, 340, 182, 183, 356, 357, 361, 171, 362,
	363, 377, 178, 175, 412, 427, 173, 445, 185, 460,
	462, 87, 181, 490, 491, 492, 493, 494, 134, 495,
	496, 497, 498, 126, -509, -508, 56, 458, 424, -213,
	21, 218, 58, 348, 407, 415, 489, -559, 458, -559,
	380, -559, 380, -5, 424, 458, 56, 414, -5, 458,
	-137, -100, 510, -150, -151, -149, -148, -149, -234, -226,
	-227, 21, 41, -375, -373, -376, -5, 66, 542, -236,
	84, -238, -7, -5, -236, 532, -3, -402, 30, -406,
	-405, -546, 319, 390, 253, 31, 73, -377, -375, 64,
	73, -147, -146, -373, 67, 481, 84, 420, 308, 287,
	386, 461, 118, 200, 459, -473, 464, 34, -17, -5,
	28, -14, -5, -123, 222, 280, -126, -5, 11, -127,
	535, 536, 537, 538, 539, 540, 526, 527, 528, 18,
	19, 20, -14, 88, -14, 28, -7, 28, 247, 67,
	-7, 28, 337, -11, -409, -9, 242, 246, 425, 4,
	-18, -19, -20, 210, 116, 226, 25, 81, 243, 117,
	79, 44, 76, 52, 53, 75, 77, 46, 82, 54,
	80, 364, 78, 48, 451, 119, 85, 461, -7, -7,
	341, -337, 28, -14, -7, -7, 532, 237, -11, -11,
	454, 452, 454, 452, -375, 28, 21, -373, 28, 21,
	-373, 28, -373, 28, 481, 67, 247, -384, -512, -77,
	-5, 4, -18, -20, -14, -14, -7, -14, -383, -512,
	-11, -409, 322, 222, 280, -7, 28, -383, -7, -383,
	-7, -7, -7, -7, -7, 461, -11, -409, 21, -11,
	337, -409, 21, -7, -14, 28, 88, -14, -7, 28,
	-16, -14, 28, -12, -7, -7, 28, -210, 28, -81,
	-82, -83, -84, -90, -86, -89, -77, 187, 172, 173,
	174, 175, 176, 177, 188, 189, 171, 190, -91, -92,
	-87, -88, 185, 56, 4, -18, 170, -78, 179, 180,
	181, 182, 183, -210, 28, 25, 337, -340, 28, -409,
	-340, 28, -340, 28, 481, 247, 67, 88, 341, 461,
	322, 481, -506, 424, -506, 220, 210, -405, 432, 64,
	61, 528, 534, 57, -76, 7, -76, -547, -76, 40,
	-212, -9, -76, 507, 57, 319, 210, -402, -406, -402,
	-76, -402, 61, -76, -5, -76, -115, -42, -117, 131,
	-43, -44, -119, 68, 281, 69, -120, 70, -137, -100,
	533, 533, -215, -214, -217, -51, 537, -53, 535, 536,
	-122, 31, 517, -99, 472, 40, -55, -54, 13, 532,
	-57, -56, -149, 29, 135, -63, -64, 294, 11, 62,
	412, -5, -74, 6, -76, 49, 43, 47, 38, -101,
	-272, 12, -512, 162, 163, -214, 74, 537, -69, -72,
	534, 530, -373, 532, 532, 542, -236, -23, 532, -98,
	-51, 219, 355, 542, -546, 328, 66, 488, 253, -374,
	-373, 94, -5, 23, -377, -377, 533, -201, 532, -373,
	28, -373, 481, -373, 28, -27, 25, -512, -512, -7,
	461, -512, 131, -474, -351, 474, 210, -381, 31, -501,
	23, -94, 534, -369, 532, -14, -14, 534, -369, 23,
	369, 258, 453, 232, -369, 64, 31, -28, 36, 519,
	31, 141, -373, 28, -461, 465, 31, 131, 28, -28,
	481, -7, -470, 366, 74, -7, -23, 31, -368, 131,
	36, 233, -81, -14, -28, -28, -339, -342, 399, -341,
	208, 257, 197, 22, 27, 478, 94, 224, 265, 259,
	310, 355, 123, 31, 366, 402, 401, 154, -30, 508,
	29, 45, -339, -343, 399, 208, 29, 45, -339, 399,
	-362, -365, 355, 23, 214, 91, 306, 336, 339, 343,
	365, 420, 437, 403, 474, 29, -339, 399, 29, -373,
	28, 21, -375, 28, 141, 399, -37, 532, -69, 399,
	399, 399, 399, -345, 27, 94, 197, 478, 399, -37,
	399, -410, 197, 27, -7, -14, -14, 74, 29, 399,
	399, 94, 197, 27, 399, 399, 399, -462, -30, 480,
	399, 94, 233, 395, 197, 27, 265, 259, 431, 74,
	74, -7, 399, -28, -401, 45, -401, 399, 131, -28,
	-401, -401, 399, 94, 402, 399, 94, 29, 369, 258,
	453, 232, 399, 197, 27, 98, -410, 29, 542, -372,
	24, 35, 29, 542, -372, 74, 29, 542, -372, 29,
	-95, -94, 532, -85, 532, 178, -95, -95, -95, 532,
	-96, 519, 520, 532, -96, -97, 184, 532, -97, -97,
	179, 180, -97, -372, 29, -16, 28, 131, 28, 542,
	29, 29, 29, 141, 369, 258, 453, 232, -27, 220,
	23, -212, 40, -76, 121, -216, 40, -208, -211, -207,
	49, 43, 74, -212, 6, 535, 536, -75, -74, -216,
	40, -5, -545, -76, 4, -207, 40, 58, 49, 43,
	74, 505, -549, 261, 235, 328, 414, -5, -41, -42,
	-116, -115, -119, 131, 390, 98, 355, 428, 504, -44,
	-43, -45, -51, 21, -50, 92, 350, -46, -47, -51,
	-53, 535, 536, -118, 123, -138, -141, -51, -115, -42,
	-229, 73, 542, 14, 39, 55, 535, 536, 537, 538,
	539, 540, 526, 527, 528, 18, 19, 20, -122, 30,
	33, 46, 517, 44, 48, 52, 53, 54, 37, 45,
	-125, 23, -8, 11, 62, -126, 4, -22, 192, 193,
	194, 195, 196, 197, 198, 199, 200, 21, 201, 22,
	202, 203, 120, 511, 95, 204, 205, 206, 60, 207,
	208, 209, 210, 211, 212, 213, 174, 116, 170, 190,
	512, 89, 70, 214, 215, 216, 24, 217, 38, 513,
	218, 219, 220, 514, 221, 222, 223, 224, 225, 226,
	515, 124, 227, 228, 229, 230, 231, 25, 142, 232,
	102, 233, 118, 234, 235, 236, 237, 112, 238, 81,
	155, 239, 121, 240, 241, 242, 243, 244, 245, 246,
	122, 91, 247, 248, 250, 189, 188, 251, 40, 252,
	253, 254, 255, 99, 150, 151, 256, 90, 96, 257,
	258, 259, 260, 41, 110, 261, 262, 177, 27, 263,
	264, 139, 265, 149, 266, 267, 268, 137, 42, 269,
	271, 272, 273, 274, 29, 275, 276, 277, 278, 279,
	43, 280, 283, 92, 176, 284, 154, 285, 166, 286,
	117, 79, 287, 288, 289, 290, 292, 293, 294, 295,
	296, 152, 297, 299, 28, 300, 301, 302, 303, 304,
	305, 306, 307, 308, 309, 310, 311, 312, 313, 76,
	501, 314, 315, 97, 316, 187, 172, 186, 318, 319,
	75, 167, 161, 163, 164, 160, 162, 157, 165, 159,
	127, 158, 146, 504, 320, 321, 322, 323, 93, 324,
	327, 325, 326, 77, 328, 329, 330, 58, 331, 332,
	333, 334, 335, 336, 337, 338, 106, 85, 339, 100,
	340, 341, 343, 344, 346, 347, 348, 182, 82, 183,
	132, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 31, 111, 359, 360, 47, 361, 32, 171, 140,
	123, 505, 506, 503, 145, 66, 507, 508, 125, 502,
	362, 80, 363, 103, 365, 366, 367, 368, 369, 370,
	371, 130, 372, 129, 373, 374, 375, 376, 377, 378,
	379, 380, 381, 382, 383, 384, 385, 386, 387, 113,
	388, 153, 144, 389, 390, 175, 391, 392, 84, 133,
	393, 394, 395, 396, 397, 398, 399, 400, 34, 401,
	402, 403, 35, 404, 405, 406, 78, 407, 408, 409,
	410, 411, 412, 128, 413, 414, 147, 415, 416, 417,
	88, 419, 63, 420, 421, 422, 423, 424, 425, 94,
	427, 426, 428, 429, 430, 431, 173, 432, 433, 108,
	434, 435, 436, 437, 438, 439, 114, 115, 440, 441,
	442, 148, 443, 444, 445, 446, 59, 447, 105, 448,
	67, 449, 451, 450, 109, 452, 453, 454, 455, 107,
	456, 56, 185, 457, 458, 459, 460, 461, 462, 49,
	463, 464, 465, 466, 467, 468, 469, 143, 470, 472,
	50, 473, 474, 475, 98, 104, 83, 476, 477, 478,
	479, 156, 87, 181, 191, 119, 480, 481, 482, 483,
	51, 484, 487, 141, 488, 489, 490, 491, 492, 493,
	494, 134, 495, 496, 497, 498, 126, 500, 57, -51,
	-51, -51, -51, -51, 364, -315, 32, -70, -51, -98,
	-149, 87, -69, -149, -149, -62, 530, 532, 532, 532,
	-69, -58, -51, -103, 486, -102, 282, 532, 532, 532,
	-229, 532, -72, -79, 537, -6, 4, -18, -19, -20,
	-21, 21, 203, 120, 30, 511, 135, 23, 95, 60,
	512, 38, 513, 514, 39, 515, 118, 26, 240, 241,
	242, 244, 245, 246, 40, 253, 96, 41, 110, 264,
	267, 270, 43, 281, 131, 285, 64, 291, 71, 72,
	45, 312, 317, 73, 324, 327, 68, 331, 332, 31,
	47, 69, 74, 66, 33, 510, 373, 382, 393, 101,
	63, 425, 433, 59, 448, 67, 107, 61, 457, 49,
	471, 472, 104, 83, 191, 51, 65, 485, 36, -51,
	-73, -373, -98, -238, 23, -12, 542, 533, 39, 55,
	30, 33, 46, 44, 48, 52, 37, 45, 62, 219,
	-546, -548, 390, 400, 422, -162, -146, 103, 532, 40,
	23, -164, -169, -168, 532, -5, -5, -237, 83, 83,
	61, -186, 64, 61, -13, -5, 532, 123, 371, 31,
	-201, -373, -453, -362, 355, 31, -17, 28, -5, -513,
	532, -513, -528, 212, 199, 316, -7, -496, -498, 532,
	-81, 322, 481, 84, -409, -382, -157, -158, -387, -388,
	26, 29, -81, 534, -79, -370, -371, -6, -472, 83,
	-123, 532, 268, 389, -14, -14, -14, -14, -14, 29,
	-454, 29, -7, 532, 371, 31, -463, -462, -76, 29,
	-464, -409, 104, 31, -407, -380, 28, -373, 74, 333,
	-409, -373, 465, 74, 29, 21, -484, -489, 67, 449,
	-5, -376, 243, -373, -369, -76, 23, 131, -407, -407,
	542, 61, -555, 118, 515, 371, 371, -294, 28, 515,
	-295, -5, 118, -311, 514, 472, 382, 285, 271, -555,
	118, -555, 118, 118, 169, 336, 474, 195, 450, -327,
	532, 74, 461, 202, 401, 413, 412, 461, 413, 412,
	-373, 310, 154, -14, 123, 61, -327, 299, 412, 532,
	-375, 450, 61, 371, -373, 450, 61, -365, 91, 339,
	343, -82, -207, -554, 70, -207, -207, 70, 347, -28,
	-28, -373, 61, -555, -373, -339, 399, 29, 45, -339,
	399, 29, -7, 61, 533, 61, 61, 61, 61, 118,
	40, 31, 118, 40, 31, -502, 118, -503, 514, 31,
	118, 61, 61, 104, 399, 83, 83, -373, -7, 61,
	61, -369, -484, -484, -484, 61, 61, 61, -30, -76,
	47, 61, -369, 388, -76, 388, 388, 388, -369, -373,
	-373, 399, -469, 265, 259, 61, -408, -510, 94, -391,
	248, -510, 61, -464, -408, -510, -510, 61, -327, -327,
	61, 439, -14, -14, -14, -14, -14, 61, 209, 156,
	156, 156, -455, -347, -346, 200, 513, 262, 287, 62,
	386, 410, 459, 465, -349, 248, 407, 444, 450, 308,
	-16, -14, -12, -7, -14, -7, -81, -210, -95, -98,
	-74, -74, 56, 56, -74, 532, -74, -97, -97, -210,
	-372, 29, -464, 29, -409, -340, -340, -340, -373, 458,
	542, -74, 6, -74, 6, -5, 66, 504, 428, 542,
	-47, -49, -53, 535, 536, 412, 128, 532, -49, 412,
	128, -48, -74, 6, -48, -121, 360, 431, -15, -373,
	542, 83, -130, 95, 96, -41, -116, -218, 64, -367,
	454, 452, 58, 290, 474, 67, -373, -217, -81, -14,
	56, 58, -51, -51, -51, -51, -51, -51, -51, -51,
	-51, -51, -51, -51, -51, -51, -51, -51, 46, 44,
	48, 37, 45, -51, 61, 47, 31, 49, 43, 50,
	41, 261, 358, -134, -133, 351, 352, 353, 354, 167,
	-129, 59, 60, -128, -149, 532, -132, 511, 433, 21,
	-6, 532, -99, 412, 532, -149, 41, 31, -72, 533,
	542, -98, -65, 531, -62, -98, -123, -98, 533, -61,
	-60, 51, -102, 71, -109, 509, 532, 533, 537, -66,
	191, 21, 41, -68, -51, -80, -77, -273, -53, -51,
	-268, -51, -218, -98, 531, 543, 533, 533, -239, 85,
	31, 533, -51, 469, 230, 390, -170, 74, -183, 104,
	105, -163, -167, -5, 87, -5, -218, 542, 528, -165,
	-168, -70, -171, 65, -219, -220, -375, -149, 86, -230,
	532, -243, -253, -263, -244, 128, 126, 127, -5, -101,
	-272, -220, -187, 113, -187, 542, 533, -289, -290, -293,
	-294, -296, -295, 46, -14, 123, 29, -338, 36, 532,
	29, 74, 31, 405, -520, -521, -523, 23, 322, 459,
	485, -524, 216, 442, 301, 435, 483, 278, 419, 325,
	31, 238, 128, 446, -511, 367, 94, -391, -514, 533,
	-515, -516, -518, -80, -93, 45, 362, 501, 191, -77,
	-81, 427, -520, 405, -530, -529, 97, 99, 98, 463,
	123, 199, -369, 537, -497, 510, -499, -504, -500, -516,
	4, 322, -7, -373, 481, -381, -351, -26, -17, -5,
	-308, -79, 533, 542, 528, 131, -7, -246, -245, -247,
	-5, 532, -369, -369, -369, -369, -369, -14, -456, 415,
	480, 64, 24, -7, -458, -459, -460, 296, 355, 479,
	-289, 123, 29, 285, -7, 423, 29, -403, -404, 447,
	198, 407, 45, 372, 266, 470, 310, 4, 233, 477,
	104, 23, 31, -201, -6, 7, -471, 23, -481, 308,
	67, -483, -488, -5, -244, 532, -14, 449, -368, 542,
	-375, 45, -69, -201, -201, 388, -81, -76, -341, -7,
	-7, -7, -373, -373, 31, -294, 28, -81, -7, 532,
	-315, -333, 83, 504, 504, -334, 83, -5, -74, -7,
	28, -5, 28, -7, -7, 506, 224, 341, -7, -328,
	-329, -6, -7, -7, 21, 104, 461, 413, 461, 413,
	-7, 328, -7, 21, 104, -7, 328, -373, 412, -409,
	-36, 111, 79, 40, 83, 328, -31, -34, -359, 94,
	197, 27, -10, -6, -339, -342, 399, -7, -7, -373,
	-339, 399, -7, -7, -207, -14, -14, -207, -207, -339,
	399, -362, -7, -7, -339, 399, 61, -555, -373, 450,
	61, -555, -375, 399, -458, -459, -7, -7, -7, -7,
	-7, -7, 47, -7, 28, -51, 47, -7, 532, 47,
	-7, -7, -11, -340, 61, -7, -7, 399, -478, 61,
	74, -7, -7, -7, -7, -7, -7, -12, -368, -12,
	-12, 399, 399, 61, 401, 202, -11, -404, -506, -7,
	-11, 423, -7, -7, -33, -75, 40, 535, 536, 94,
	399, 399, 399, 399, -7, -7, -76, -25, 28, -76,
	-457, 61, -7, -14, -384, 532, -81, -383, -385, 222,
	280, -123, -383, -383, 131, -81, -372, -372, -372, 74,
	-372, 533, 533, 533, 57, 57, 533, -98, 533, -372,
	-16, 423, 131, -378, 36, -405, -208, 98, -46, -49,
	66, 36, -74, 6, 532, -98, 335, 542, -141, -124,
	-126, 62, -131, 518, -221, 65, -219, -552, 67, -552,
	454, 452, 454, 452, -552, -373, 57, 42, -51, -51,
	61, -129, 59, -128, 42, -51, 47, 49, 43, 50,
	41, 261, 358, -134, -133, 64, 358, -135, 36, 169,
	156, 135, 140, 147, -52, -53, 535, 536, 412, -52,
	-98, -149, 532, -123, 532, -98, 41, -70, -51, 531,
	531, 542, 533, 533, 533, -59, -60, 264, -51, -109,
	532, -108, -5, 532, 65, 533, -100, 542, -137, -68,
	-66, -66, 16, 17, -275, 47, 193, 156, 543, -277,
	510, -287, -286, 516, -221, 533, -73, -51, 532, 85,
	-172, 101, 102, 156, 533, 542, -70, -171, -169, -51,
	533, 542, -172, -51, 121, 542, 81, -231, 75, 82,
	79, 77, 78, 76, -224, -223, 23, -5, -224, -149,
	-243, -253, -263, -149, -230, -220, -224, -224, -224, -252,
	519, 64, 532, 532, -69, 74, -193, -76, 114, 115,
	-193, -5, 533, 542, -373, -291, 532, -373, -373, 23,
	-327, -13, -373, -375, 29, -519, 67, 47, -93, -77,
	-526, -389, 213, 404, -523, -525, -76, -212, -522, 131,
	74, 419, 255, 318, 325, -207, -207, -14, -5, -507,
	424, 458, 533, 542, 40, 528, -80, -93, -518, -93,
	362, -94, -77, -526, 74, 33, 123, -530, 533, 533,
	510, 542, 70, 533, 542, 528, -7, 296, -201, -373,
	210, -381, -309, 118, -310, -312, 39, 31, 47, 472,
	382, 514, 40, 393, 289, 253, 312, -371, -350, -93,
	-21, -124, -207, -76, 356, 62, 535, 536, 465, 533,
	542, -81, -451, -452, -76, -369, 64, -7, -212, -212,
	-28, -357, 508, -460, -465, -7, 296, 479, -465, 533,
	-373, -373, 247, -461, -7, 131, -74, -340, -340, 407,
	71, -76, 47, 372, 372, 68, 475, -340, -146, 29,
	-352, 83, 274, 51, -338, -475, 131, 4, 296, 64,
	542, -51, -23, -368, -489, -201, 415, -201, -222, 65,
	-222, -12, 533, 61, 61, 61, -299, 131, 40, -27,
	283, 29, 31, -356, -355, 440, -311, 271, -51, 532,
	-306, 308, 532, -333, 532, 532, -7, -345, 27, 94,
	402, 197, -364, -209, -30, -366, 403, 94, -306, 29,
	-372, 29, -372, -35, -5, 40, 533, 542, 528, 534,
	-7, -7, -7, -7, 419, 419, 328, 308, 419, 533,
	542, -359, -359, -10, -32, -76, 61, -555, 118, 94,
	365, 61, 94, 365, 61, 61, 61, -555, -7, -7,
	-339, 399, -7, -7, -7, -339, 399, 61, -30, 61,
	-372, 29, -503, -51, -306, -7, 399, 399, 197, 27,
	61, -479, 83, -340, -373, -368, -368, -368, 61, 61,
	-7, -7, 439, 61, 61, 61, 61, 61, 61, -76,
	31, -212, -81, -14, -14, -71, 532, -81, -14, -96,
	-96, 533, -372, -7, -464, 247, 355, 66, 36, 456,
	-98, 533, 542, -373, -131, 532, 92, 93, -39, 71,
	-51, -373, -373, -552, -552, -552, -552, -373, -51, -51,
	42, 42, -51, -52, -52, -51, 42, 64, 358, -135,
	-51, 472, 472, 30, 14, 535, 536, 537, 538, 539,
	540, 526, 527, 528, 18, 19, 20, -52, -52, 30,
	533, -51, 533, -98, 533, 542, 533, -62, 267, -51,
	107, -137, -110, -5, -51, 533, 191, -68, -100, -100,
	542, -100, -51, -51, -135, 74, 74, -268, -268, -276,
	47, 193, 70, 167, -39, 531, -147, -214, -177, 532,
	74, -146, -146, 103, -167, -172, 528, -168, 123, -220,
	75, 75, -220, -231, 75, -232, 80, -232, -232, -5,
	532, -224, -224, -224, -224, 533, 125, 532, -53, 134,
	-268, -51, -28, -195, -553, 83, -322, 311, -293, -304,
	-323, -324, 371, -292, -297, -298, -295, -5, -291, 532,
	123, 371, -146, 533, -453, -334, -7, -520, 532, 74,
	207, -51, 542, 542, 465, 47, 255, 318, -515, -51,
	-51, -93, -93, 539, -94, -373, -529, -13, 74, 70,
	-504, -497, -500, 4, -350, 532, -465, -338, 532, -409,
	-7, -14, 253, 47, -315, 504, 532, -52, -373, -361,
	202, 70, 254, 300, -81, -247, -258, 39, 533, 542,
	-14, -454, 532, -94, -322, -291, 532, 371, 141, -463,
	-357, -464, -340, -340, -76, -76, -75, -76, -378, -380,
	-338, -7, -556, 287, 386, -466, -468, -5, -477, 61,
	-476, 21, 63, 97, 98, 99, -465, -219, -488, 533,
	74, -222, -5, 243, -222, 532, -368, 36, 169, -76,
	-7, -7, 87, -294, 29, -354, -353, 231, -5, 40,
	533, -13, -307, 31, 253, 312, 355, -7, -13, -306,
	-13, -302, -301, -181, -5, -244, 532, 31, 276, 299,
	247, -365, 289, 31, 276, 439, -327, -355, -353, -327,
	289, -366, 94, 465, -28, 439, -5, -7, -329, -350,
	-6, 419, -7, -34, -7, -7, -7, 450, 70, -7,
	450, 70, -7, -7, -7, -7, 61, 61, -555, 94,
	365, 61, 61, -555, -7, -7, -7, 533, 61, 61,
	-485, -490, 62, 287, 440, -486, -491, 62, 287, -7,
	-480, 36, 532, 399, -7, -7, -30, -33, -7, -7,
	-7, -7, -7, -76, 212, 199, 29, 23, 83, 83,
	-81, 356, 322, -372, 423, 247, 456, 533, -51, -123,
	-140, 72, 70, -373, -373, -373, -373, -51, -51, 42,
	30, 30, -51, -51, 320, 320, -51, -81, -52, -52,
	-52, -52, -52, -52, -52, -52, -52, -52, -52, -52,
	-51, 533, 533, -51, -51, 533, -106, 371, 533, -68,
	533, 533, 533, -278, 101, 47, 47, -278, 74, 74,
	-138, 149, -140, 533, 110, -203, -181, 118, -183, -51,
	-192, -7, -220, -220, -233, 83, 74, 75, -220, 532,
	-12, -223, -248, -249, -244, -259, 130, 532, 542, -166,
	-175, -184, -185, 51, -197, -198, 532, -28, 151, -323,
	532, 305, 272, -352, 70, 533, 542, -308, 36, -299,
	-289, -14, 123, -543, 36, -338, 532, 74, -526, -251,
	-517, -80, -77, 47, -544, -76, 131, -81, 314, 465,
	539, -535, 394, -373, -497, 533, -487, 64, 61, -493,
	313, 23, -13, -381, -310, 31, -368, -368, -51, -201,
	23, 40, 83, -14, -76, -358, -359, 423, -299, -289,
	123, -7, 285, 423, 23, -331, 450, -512, 274, 30,
	45, -479, -340, -483, -51, 287, 501, 287, 64, 36,
	45, 64, -294, -357, -5, 40, -306, 533, 253, 477,
	300, 254, 310, 533, 533, 533, 542, 36, -182, -174,
	39, -182, -51, 47, 28, 28, -361, 47, 23, -33,
	-361, -81, -207, -33, -372, -372, 528, 61, 61, -7,
	-340, -7, -340, 61, -7, -7, -7, 450, 70, -7,
	-7, -7, -372, -306, -7, -7, 542, -74, -74, -81,
	542, -74, -74, 514, -51, 61, -372, -76, -76, -81,
	-7, -7, 533, 542, 542, -7, -7, 533, 533, -104,
	485, -51, -40, 21, 41, -51, -51, -51, 533, -100,
	70, -100, 533, -81, 533, 47, 47, -7, -104, -240,
	88, 98, 111, 533, 542, -7, 156, -233, 532, -51,
	-220, -12, 533, 533, 542, -250, 23, 124, -53, -260,
	70, -261, -262, -52, 40, -51, -172, -175, -176, 30,
	-176, 106, 31, -196, 116, 117, 150, 47, 155, 152,
	153, 42, 154, 149, -199, -204, -6, -197, -76, -352,
	-15, -305, 228, 231, 234, 252, 299, 289, 309, 439,
	440, 21, -305, -38, 36, 169, -5, -297, 508, -323,
	533, -291, -373, 514, 217, 58, 23, -203, -375, 542,
	533, -93, 314, 267, -527, -4, -389, 465, 465, -531,
	131, -536, -538, -533, 349, 503, -542, 64, 533, 533,
	434, 434, -494, -495, 479, 355, -465, -146, 533, -332,
	83, -332, 533, -316, 338, 299, 532, -7, 533, 542,
	-7, 423, 533, -373, -357, 247, -7, -146, -7, 532,
	-556, -468, 532, -480, 64, 533, -383, -482, 23, -482,
	-14, 532, 532, 532, -308, -317, 304, -317, 393, -317,
	-301, -123, 62, -337, -14, -14, 533, 29, 29, 532,
	23, -258, -350, -7, -7, -344, 360, 94, -344, 94,
	-7, 61, -7, -340, 61, -490, -123, -385, -383, 532,
	-491, 532, 532, 532, 533, -7, 533, -81, 356, -81,
	-105, -107, -5, -136, -139, -51, -142, -144, -143, -145,
	532, 239, 409, 294, -111, 389, 128, 295, -98, 533,
	-287, -241, 91, 90, 89, 94, -221, -181, -146, -12,
	533, -252, -249, 532, -254, -255, -5, -260, 70, -53,
	133, 156, 542, 533, 23, -52, -267, 23, 107, -51,
	107, 106, -501, -501, -501, -501, 153, 31, 47, -76,
	533, 542, -205, -211, -207, 537, 40, 532, -221, -38,
	533, -330, 74, -327, 506, 532, -308, -352, -322, -323,
	-291, 507, 514, 514, -146, 533, -334, -517, -520, 541,
	-81, -539, 51, -557, 263, -538, -534, 67, 412, -306,
	-373, 36, 36, -465, 479, -543, -338, 308, -313, 355,
	-321, -318, -319, 74, 79, 370, 430, -363, 532, -51,
	-492, 280, -359, -357, -7, -322, -291, 141, -357, -378,
	533, -512, -467, 7, -219, -482, 302, 206, -303, -300,
	-9, -98, -98, -368, 532, -368, -373, -368, 532, -130,
	-327, -182, -51, 299, -29, 83, 450, 450, -7, -344,
	94, -7, -550, 131, -550, -551, -81, -551, -551, -51,
	533, 533, 533, 542, 23, 542, 533, 532, 532, 426,
	533, -112, -113, 37, 468, 121, -51, -112, -112, -13,
	92, 92, -164, 533, -245, 533, 542, -81, 131, -260,
	-262, 542, -6, -279, 130, -5, -178, -179, 110, 98,
	99, -180, 110, 97, 70, -76, -76, -76, -76, -13,
	537, 47, -13, 537, -204, -200, -206, -211, -330, -331,
	229, -325, -326, -5, -244, 532, -38, -323, -352, -299,
	507, 507, -543, -336, 304, 532, -526, 274, 532, -532,
	412, 438, -501, 131, 287, 287, 23, 450, 310, -319,
	74, -318, 74, 98, 99, -362, 533, 23, -14, -357,
	423, -299, -7, 532, 533, 542, 533, 542, -74, 533,
	533, -332, -13, -332, -201, -332, -123, -131, -130, 533,
	-363, -51, -7, -7, 450, -360, 392, 88, 510, -360,
	533, 542, 533, 533, 533, -107, -108, -139, -98, -98,
	532, -114, 271, -113, 378, 284, 412, 378, 284, -114,
	-114, 94, 70, 70, -221, -225, 23, 533, -255, -256,
	-257, 4, 40, 31, 47, 129, 125, -53, 124, -269,
	-270, -268, 111, 94, 111, -173, 103, 532, 40, 87,
	108, 109, -13, 537, 533, 542, -331, 27, 99, 381,
	533, 542, -174, -174, -51, -330, -352, -38, -323, -315,
	532, -203, -556, -51, -541, -5, 263, -383, -383, -146,
	-7, -320, 355, 35, 24, 94, -320, 533, 441, -485,
	-7, 423, -357, 533, 7, -300, 61, -306, 533, -306,
	-316, -221, 533, -131, -344, -344, -7, 70, -383, -81,
	533, 533, -136, 121, 71, 456, 355, 30, -5, -13,
	-13, -5, -257, -52, -52, 47, -52, -259, 532, 542,
	23, -164, -183, -163, 87, 532, -206, 128, 128, -326,
	-337, -337, 533, -331, -38, -330, -352, -338, -335, -181,
	533, -512, 533, 412, 542, 542, -543, 196, 47, 40,
	-357, -7, 532, -321, -306, -344, -14, 533, 412, 502,
	-113, 61, 83, 94, 94, 124, -264, -265, -5, 132,
	-270, -6, 156, 533, -98, -174, -330, -331, -38, -331,
	533, 542, -336, 532, -539, 61, 64, -201, -201, -357,
	-98, -306, -54, -5, -5, -5, -254, 533, 542, 131,
	-81, -288, 129, -173, -173, 103, 533, -337, -331, -330,
	-221, -181, -315, -537, -540, -74, 6, -76, -6, 274,
	434, 434, 533, 40, 533, -280, -281, 40, -282, 137,
	47, 49, 43, 50, 139, -265, 125, -266, -286, 29,
	129, 7, -183, -331, -338, 533, 542, -556, 36, 36,
	-54, 533, 74, -51, 135, 140, -284, 169, 36, -266,
	-266, 7, 124, 23, 156, -331, -540, -512, 287, 287,
	83, 137, -285, 146, 145, 141, 135, 141, 135, 142,
	143, -284, -280, 532, -7, -173, -221, 532, -383, -383,
	-5, -283, -281, 144, 144, 141, 141, 135, 141, 135,
	141, -285, -264, 124, -537, 74, 74, 74, 141, 141,
	-283, 533, 532, 533, 139, 137, 147, 147, -264, -281,
	148, 148, 533, 74, 137,
}

var yyDef = [...]int16{
	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	2690, 2690, 1334, -2, 0, 1608, -2, 1671, 1671, 0,
	0, 0, 2690, 0, 2690, 2690, 0, 0, 0, -2,
	1325, 1417, 0, 1448, 0, 1368, 0, 0, 0, -2,
	2693, 2688, 2689, 2445, 0, 0, 0, 0, 0, 0,
	1607, 0, 0, 2589, 0, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 1736, 1737, 0,
	0, -2, 1909, 2566, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1670, 0, 0, 0,
	0, 0, 2051, 0, 0, 0, 2047, 2048, 2049, 0,
	0, 2053, 2054, 2055, 0, 0, 0, 1654, 0, 1657,
	1658, 1659, 1660, 1661, 1662, 0, 2032, 270, 381, 415,
	2037, 2391, 0, 498, 154, 371, -2, 362, 448, 2406,
	89, 90, 91, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 164, 165, 166, 167, 168, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 178, 179, 180, 181, 182,
	183, 184, 185, 186, 187, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 207, 208, 209, 210, 211, 212,
	213, 214, 215, 216, 217, 218, 219, 220, 221, 222,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 280, 281, 282, 283,
	284, 285, 286, 287, 289, 290, 291, 292, 293, 294,
	295, 296, 297, 298, 299, 300, 301, 302, 303, 304,
	305, 306, 307, 308, 309, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 322, 323, 324,
	325, 326, 327, 328, 329, 330, 331, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 349, 350, 351, 352, 353, 354,
	355, 356, 357, 358, 359, 360, 361, 363, 364, 365,
	366, 367, 368, 369, 370, 372, 373, 374, 375, 376,
	377, 378, 379, 380, 382, 383, 384, 385, 386, 387,
	388, 389, 390, 391, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 404, 405, 406, 407,
	408, 409, 410, 411, 412, 413, 414, 416, 417, 418,
	419, 420, 421, 422, 423, 424, 425, 426, 427, 428,
	429, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 449,
	450, 451, 452, 453, 454, 455, 456, 457, 458, 459,
	460, 461, 462, 463, 464, 465, 466, 467, 468, 469,
	470, 471, 472, 473, 474, 475, 476, 477, 478, 479,
	480, 481, 482, 483, 484, 485, 486, 487, 488, 489,
	490, 491, 492, 493, 494, 495, 496, 497, 499, 500,
	501, 502, 503, 504, 505, 506, 507, 508, 509, 510,
	511, 512, 513, 514, 2046, 2038, 498, 415, 381, 2042,
	2043, 154, 270, 288, 362, 371, 448, 2693, 2445, 2693,
	0, 2693, 0, 2678, 381, 415, 498, 369, 2680, 0,
	-2, 0, 0, -2, 1339, 1340, 0, 1340, 0, 1370,
	0, 1447, 1449, 1367, 1392, 1393, 104, 0, 0, 1414,
	345, 1419, 107, 99, 1415, 0, 2, 2686, 0, 2687,
	2444, 2432, 0, 0, 2438, 0, 0, 0, 1397, 0,
	0, 0, 1336, 2251, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 0, 0, 1671, 2588, -2, 0, -2,
	239, 1677, 121, 0, 158, 220, 1322, 0, 1308, 1309,
	1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319,
	1320, 1321, 2272, 0, 0, 239, 1839, 239, 0, 0,
	2336, 239, 275, 1839, 1946, 1947, 1948, 1949, 1950, 2426,
	2427, 2428, 2429, 515, 516, 517, 518, 519, 520, 521,
	522, 523, 524, 525, 526, 527, 528, 529, 530, 531,
	532, 533, 534, 535, 536, 537, 0, 0, 2488, 0,
	0, 107, 239, 73, 2453, 0, 0, 0, 1839, 1839,
	1738, 1739, 1740, 1741, 0, 239, 0, 0, 239, 0,
	0, 239, 0, 239, 0, 0, 0, 0, 0, 1193,
	0, -2, -2, 1259, 0, 0, 0, 0, 0, 0,
	0, 1946, 0, 0, 0, 0, 239, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -2, 2703, 0,
	275, -2, 2703, 0, 0, 239, 0, 0, 0, 239,
	77, 123, 239, 77, 100, 0, 239, 77, 239, 1668,
	1251, 1252, 1253, 1254, 1255, 1256, 1265, 1268, 1269, 1270,
	1271, 1272, 1303, 201, 1265, 1265, 1265, 1278, 1279, 1280,
	1281, 1282, 1299, 1299, 1257, 1258, 1301, 1290, 1301, 1301,
	1285, 0, 1301, 77, 239, 0, 275, 2708, 239, 1944,
	2706, 239, 2710, 239, 2050, 0, 2052, 0, 1652, 1653,
	1656, 85, 2033, 381, 2034, 156, 0, 2035, 0, 0,
	0, 0, 0, 0, 2394, 1173, 2395, 2396, 2421, 2422,
	2397, 2424, 2425, 0, 2039, 0, 2041, 2674, 2675, 2676,
	2684, 2677, 0, 2685, 2679, 2683, 2653, 1352, 1349, 0,
	2650, 2651, 1353, 0, 0, 0, 1361, 0, -2, 0,
	1337, 1338, 1454, 1369, 1371, 1375, 1376, 1068, 0, 0,
	0, 0, 0, 0, 1808, 1135, 1152, 1153, 1187, 0,
	1156, 1157, 1158, 461, 0, 1163, 1164, 465, 1304, 308,
	494, 1177, 1166, 1167, 1168, 1169, 1170, 1171, 1209, 1327,
	1329, 1172, 0, 475, 472, 1454, 0, 1394, 105, 1179,
	0, 1182, 1395, 0, 0, 0, 1416, 0, 0, 0,
	1249, 2691, 0, 0, 2434, 0, 2436, 2437, 2439, 0,
	1572, 0, 1398, 0, 1594, 0, 0, 0, 0, 0,
	239, 2251, 0, 2287, 239, 72, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 1742, 0, 2257, 0, 0,
	1676, 122, 0, 2270, 0, 2567, 0, 0, 2271, 0,
	0, 0, 0, 0, 2277, 0, 0, 2295, 1837, 1838,
	0, 0, 0, 239, 2340, 0, 0, 0, 0, 2713,
	0, 0, 0, 0, 0, 0, 0, 0, 2522, 0,
	0, 0, 0, 0, 2713, 2713, 1919, 1932, 2019, 1940,
	0, 0, 0, 2019, 2019, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2011, 0,
	0, 0, 1921, 1923, 0, 0, 0, 0, 1924, 0,
	2290, 1817, 0, 0, 0, 1821, 1836, 1824, 0, 0,
	0, 0, 1839, -2, 1834, 0, 1926, 2019, 0, 0,
	239, 0, 0, 239, 0, 0, 2067, 0, 1194, 0,
	0, 0, 0, 2261, 0, 0, 0, 0, 0, 2061,
	0, 0, 2731, 2732, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2333, 2334, 0,
	0, 0, 0, 0, 0, 0, 2547, 2548, 0, 0,
	0, 0, 0, 2715, 0, 0, 0, 0, 0, 2715,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2302, 1671, 0, 0, 2021,
	75, 76, 0, 0, 2023, 0, 0, 0, 2026, 0,
	1266, 1265, 0, 1273, 0, 1274, 1275, 1276, 1277, 0,
	1294, 0, 0, 0, 1296, 1292, 1300, 0, 1283, 1284,
	1301, 1301, 1288, 2028, 0, 77, 239, 0, 0, 0,
	0, 0, 0, 1655, 2056, 2057, 2058, 2059, 0, 0,
	0, 2398, 2399, 2401, 2392, 2402, 2404, 2408, 2410, 2411,
	1642, 1643, 1644, 1645, 1646, 0, 0, 1649, 1174, 2403,
	2405, 2407, 2393, 2412, 2413, 2414, 2415, 2416, 2417, 2418,
	2419, 2420, 2400, 2430, 2431, 2040, 369, 2682, 1343, 2652,
	1344, 1351, 1354, 0, 0, 1356, 0, 1358, 0, 2648,
	2649, 2654, 2662, 2663, 0, 2672, 2673, 2660, 0, 2664,
	-2, 0, 0, 1364, 0, 2614, 2615, 1724, 2653, 1352,
	1378, 0, 0, 0, 670, 638, 1310, 1311, 1312, 1313,
	1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 0, 631,
	885, -2, 0, -2, 972, 803, 1106, 1108, -2, 782,
	0, 0, 1374, -2, 882, 1229, 97, 98, 616, 617,
	618, 619, 620, 621, 622, 623, 624, 625, 626, 627,
	628, 629, 630, 632, 633, 634, 635, 636, 637, 639,
	640, 641, 642, 643, 644, 645, 647, 648, 649, 650,
	651, 652, 653, 654, 655, 656, 657, 658, 659, 660,
	661, 662, 663, 664, 665, 666, 667, 668, 669, 671,
	672, 673, 674, 675, 676, 677, 678, 679, 680, 681,
	682, 683, 684, 685, 686, 687, 688, 689, 690, 691,
	692, 693, 694, 695, 696, 697, 698, 699, 700, 701,
	702, 703, 704, 705, 706, 707, 708, 709, 710, 711,
	712, 713, 714, 715, 716, 717, 718, 719, 720, 721,
	722, 723, 724, 725, 726, 727, 728, 729, 730, 731,
	732, 733, 734, 735, 736, 737, 738, 739, 740, 741,
	742, 743, 744, 745, 746, 747, 748, 749, 750, 751,
	752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 776, 778, 779, 780, 781, 783,
	784, 785, 786, 787, 788, 789, 790, 791, 792, 793,
	794, 795, 796, 797, 798, 799, 800, 801, 802, 804,
	805, 806, 807, 808, 809, 810, 811, 812, 813, 814,
	815, 816, 817, 818, 819, 820, 821, 822, 823, 824,
	825, 826, 827, 828, 829, 831, 832, 833, 834, 835,
	836, 837, 838, 839, 840, 841, 842, 843, 844, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 859, 860, 861, 862, 863, 864, 865,
	866, 867, 868, 869, 870, 871, 872, 873, 874, 875,
	876, 877, 878, 879, 880, 881, 883, 884, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 944, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
	1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1073,
	1074, 1088, 1091, 1092, 0, 0, 0, 1154, 1249, 0,
	-2, 502, 1159, 1160, 1161, 1162, 0, 0, 0, 0,
	-2, 0, 1208, 1329, 0, 2626, 0, 0, 0, 0,
	1378, 0, 1180, 1183, 1184, 1260, 92, 93, 94, 95,
	96, 538, 539, 540, 541, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 554, 555, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	577, 578, 579, 580, 581, 582, 583, 584, 585, 586,
	587, 588, 589, 590, 591, 592, 593, 594, 595, 596,
	597, 598, 599, 600, 601, 602, 603, 604, 605, 606,
	607, 608, 609, 610, 611, 612, 613, 614, 615, 1181,
	0, 0, 0, 1420, 1424, 0, 0, 1431, 0, 0,
	0, 0, 1231, 1233, 0, 0, 1330, 0, 0, 2692,
	2433, 2435, 0, 0, 2443, 1707, 1574, 0, 0, 0,
	0, 1378, 1585, 0, 0, 1187, 1399, 1437, 0, 0,
	1603, 1603, 1600, 1601, 0, 102, 1745, 0, 0, 0,
	1918, 0, 2284, 2286, 0, 0, 0, 239, 71, 2166,
	0, 2166, 0, 2207, 2208, 0, 0, 0, 2269, 0,
	0, 0, 0, 0, 2386, 2385, 2387, 2388, 2389, 2390,
	-2, 72, 1797, 0, 1262, 0, 2470, 2472, 0, 0,
	1323, 1468, 0, 0, 0, 0, 0, 0, 2279, 0,
	2292, 0, 2327, 1745, 0, 0, 0, 2339, 2335, 0,
	0, 2350, 2351, 0, 2695, 0, 239, 2251, 0, 0,
	2487, 2494, 0, 0, 0, 0, 2453, 2529, 0, 407,
	-2, 2251, 2537, 0, 2452, 0, 0, 0, 2694, 2696,
	0, 0, 0, 0, 2018, 0, 0, 1951, 239, 0,
	1975, 0, 0, 1854, 0, 1808, 0, 0, -2, 0,
	0, 0, 0, 0, 0, 1983, 1984, 0, 0, 2004,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1997, 0, 0, 1999, 2000, 0, 2005, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1818, 1822, 1827,
	1828, 1819, 1820, 0, 1835, 1825, 1826, 0, 0, 0,
	0, 0, 0, 0, 0, 1928, 2019, 0, 0, 1930,
	2019, 0, 2327, 0, 2060, 0, 0, 0, 0, 0,
	2017, 0, 0, 0, 0, 2264, 0, 2373, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2505, 0, 0,
	0, 2525, 2527, 2526, 2528, 0, 0, 0, 2332, 2337,
	2338, 0, 2541, 0, 2542, 2453, 0, 0, 2549, 0,
	0, 0, 2476, 2477, 2480, 0, 2697, 2699, 0, 2045,
	0, 2700, 0, 0, 2698, 2701, 2702, 0, 2489, 2490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 2300, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1663, 1664, 1665, 1666, 1667, 2051,
	77, 124, 77, 101, 77, 0, 1669, 77, 1267, 0,
	0, 0, 0, 0, 0, 0, 0, 1286, 1287, 77,
	2030, 0, 0, 0, 1945, 2709, 2707, 2711, 2384, 0,
	0, 1175, 1647, 1176, 1648, 2681, 1350, 0, 1359, 0,
	0, 0, 2665, 0, 0, -2, -2, 0, 2661, 2670,
	2671, 2666, -2, -2, 2667, 1355, 1362, 0, 1360, 108,
	0, 0, 1727, 1722, 1723, 1347, 1348, 1434, 0, 1453,
	-2, -2, 270, 231, -2, 0, 120, 1372, 1069, 1070,
	0, 1072, 1075, 1076, 1077, 1078, 1079, 1080, -2, -2,
	-2, -2, -2, -2, 1087, 1089, 1090, -2, 1232, 1234,
	0, 1330, 0, -2, 0, 1105, 0, 1110, 1112, 1114,
	0, 1127, 1129, 0, 1248, 1235, 1236, 1237, 1238, 1239,
	0, 0, 1331, 1122, 1332, 0, 0, 1226, 1227, 1228,
	1373, 0, 1109, 0, 0, 1126, 1806, 0, 1188, 1187,
	0, 0, 0, 1217, 1218, 0, 0, 0, -2, 1214,
	1210, 0, 2626, 0, 1190, 0, 0, 1195, 0, 1325,
	0, 0, 0, 1202, 1204, 0, -2, 1515, 1068, 0,
	1520, 1558, 1434, 0, 1185, 1182, 1396, 1432, 0, 1422,
	0, 106, 1250, 2440, 2441, 2442, 1729, 0, 0, 1579,
	1580, 0, 1581, 1187, 1578, 1573, 1437, 0, 0, 0,
	1590, 1589, 1729, 0, 1593, 1379, 1440, 1440, 0, 1384,
	0, 1440, 1440, 1440, 1458, 367, 514, 479, 104, 1191,
	1192, 0, 0, 1602, 0, 0, 2250, 0, 1744, 1746,
	1748, 1749, 1750, 0, 1774, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2180, 2165, 2167, 0, 0, 0,
	2172, 2173, 0, 2188, 2189, 2190, 2191, 0, 0, 2196,
	0, 0, 0, 0, 2201, 0, 0, 2204, 0, 2145,
	2146, 2148, 0, 0, 2155, 2156, 2157, 2158, 2160, -2,
	2162, 0, 2180, 0, 0, 2210, 2212, 2213, 2214, 2216,
	2209, 0, 2268, 0, 0, 0, 0, 2356, 2360, 2358,
	1257, 0, 2586, 2251, 0, 2256, 0, 0, 0, -2,
	2260, 1263, 2469, 0, 0, 0, 2573, 0, 1467, 1469,
	0, 2369, 2283, 2273, 2274, 2275, 2276, 0, 2294, 0,
	0, 0, 2299, 1839, 1789, 2326, 2324, 0, 0, 0,
	0, 0, 0, 0, 2336, 0, 0, 2712, 2716, 0,
	0, 0, 0, 0, 0, 0, 2726, 2727, 0, 0,
	0, 0, 0, 1897, 0, 1918, 2496, 0, 0, 2511,
	2512, 0, 2517, 2519, 2520, 0, 107, 2453, 2524, 0,
	2251, 0, -2, 2539, 2539, 0, 0, 0, 1941, 2090,
	0, 0, 0, 85, 0, 1953, 239, 1772, 0, 0,
	0, 2125, 0, 0, 0, 0, 0, 1673, 0, 2125,
	239, 77, 239, 77, 1977, 1980, 1982, 0, 2003, 0,
	2134, 2137, 1981, 1985, 1988, 1989, 0, 0, 0, 0,
	1993, 0, 1990, 1991, 1992, 1996, 0, 1998, 0, 2001,
	2006, 2465, 2466, 2467, 0, 0, 0, 2457, 2459, 382,
	130, 202, 0, 1793, 1920, 1933, 2019, 0, 2098, 2015,
	1922, 0, 0, 2092, 1823, 1829, 1830, 1831, 1833, 1925,
	0, 2291, 2094, 0, 1927, 2019, 0, 0, 0, 0,
	0, 0, 0, 0, 0, -2, 2070, 2071, 2072, 2073,
	2074, 0, 2262, 77, 239, 2016, 2263, 0, 0, 2125,
	2267, 2077, 2078, 2705, 0, 0, 0, 0, 2507, 0,
	0, 2084, 2085, 2086, 2087, 2088, 2089, 2453, 2543, 2453,
	2453, 0, 0, 0, 2478, 2479, 2115, 2714, 2044, 2704,
	2116, 0, 2117, 2118, 2515, 1650, 1651, 0, 0, 0,
	0, 0, 0, 0, 2123, 0, 0, 0, 0, 2367,
	2301, 0, 2304, 2305, 2306, 0, 2308, 2309, 2310, 158,
	220, 0, 2313, 2314, 0, 2316, 2020, 2022, 2024, 0,
	2027, 1264, 1302, 1299, 1297, 1298, 1299, 0, 1289, 2029,
	77, 0, 0, 2378, 0, 2036, 2409, 1357, 2655, 0,
	2658, 0, 2668, 2669, 0, 0, 1363, 0, 2616, 1727,
	1306, 0, 2618, 0, 2600, 0, 1377, 0, 110, 0,
	111, 111, 111, 111, 0, 119, 0, 0, -2, -2,
	0, 0, 0, 1123, 0, -2, 1107, 1111, 1113, 1115,
	0, 1128, 1131, 0, 1248, 0, 1130, 1133, 0, 0,
	1240, 1241, 1242, 1243, 0, 1136, 0, 0, 494, 0,
	0, 1124, 0, 0, 0, 0, 1807, 1155, 1250, 1215,
	1216, 0, 1165, 1305, -2, 0, 1211, 0, 0, 1189,
	0, 2624, 2625, 2629, 0, 1196, 0, 0, 1324, 1325,
	1325, 1325, 0, 0, 1248, 0, 0, 0, 0, 1518,
	0, 1499, 1557, 0, 2600, 1450, 0, 1181, 0, 1423,
	1571, 0, 1710, 0, 0, 0, 1583, 1729, 1586, 1587,
	0, 0, 1592, 1435, 179, 0, 0, 0, 0, 0,
	1411, 1411, 1411, 1409, 1381, 1439, 0, 1444, 1382, 1440,
	1440, 1440, 1440, -2, 1384, 0, 1386, 1388, 1390, 1455,
	0, 0, 0, 0, -2, 0, 1839, 1604, 1605, 1606,
	-2, 103, 1887, 0, 1754, 1889, 0, 1774, 0, 0,
	1917, 0, 2287, 1912, 0, 2166, 0, 0, 2161, 1265,
	2142, 2178, 0, 0, 2168, 2169, 2174, 2170, 2171, 0,
	0, 0, 2194, 2195, 2197, 2198, 2199, 2200, 2202, 2203,
	381, 415, 2144, 0, 0, 0, 0, 2154, 0, 2153,
	2159, 1265, 0, 2143, 0, 0, 0, 0, 2352, 2353,
	0, 0, 0, 2359, 0, 0, 0, 0, 1918, 0,
	0, 2259, 1796, 0, 1799, 1800, 0, 0, 1845, 1808,
	0, 0, 0, 0, 0, 1802, 0, 2471, 2473, 2446,
	2447, 2448, 2449, 2450, 2451, 308, 1310, 1311, 0, 2281,
	0, 1473, 0, 2368, 2370, 2278, 0, 2296, 2297, 2298,
	2295, 2317, 0, 2325, 2320, 2328, 2321, 2323, 2322, 1887,
	1774, 0, 0, 2340, 1789, 0, 2717, 2718, 2719, 0,
	0, 2722, 2723, 0, 0, 0, 0, 2730, 2384, 0,
	1918, 0, 0, 0, 2486, 2503, 0, 2493, 0, 0,
	0, 0, 0, 2523, 2530, 2539, 0, 2539, 2534, 0,
	2536, 2453, 0, 0, 0, 0, 2012, 0, 1784, 2013,
	2014, 0, 0, 1768, 1771, 0, 1853, 1912, 0, 0,
	1857, 0, 0, 2125, 0, 0, 1911, 1955, 0, 0,
	0, 0, 1968, 0, 1974, 1811, -2, 0, 1976, 0,
	1972, 0, 1979, 2002, 2463, 2464, 2133, 0, 0, 0,
	1986, 1994, 1987, 1995, 2007, 2008, 0, 0, 2009, 2456,
	0, 2460, 2461, 2462, 1792, 1794, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2096, 0,
	1929, 2019, 0, 2100, 0, 1931, 2019, 0, 2318, 0,
	2265, 0, 2372, 0, 2375, 2079, 0, 0, 0, 0,
	0, 2509, 0, 2504, 0, 2546, 2544, 2545, 0, 0,
	2114, 0, 0, 0, 0, 0, 0, 0, 0, 2363,
	0, 2303, 0, 0, 0, 2062, 0, 0, 77, 1293,
	1295, 1291, 2031, 2348, 0, 2382, 0, 2656, 0, 2659,
	0, 1224, 0, 109, 2617, 0, 1725, 1726, 2613, 0,
	1433, 112, 113, 0, 0, 0, 0, 118, 1071, -2,
	0, 0, -2, 0, 0, -2, 0, 0, 1132, 1134,
	-2, 1245, 1247, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1138, 1139, 0,
	1333, 0, -2, 0, 1221, 0, -2, 1219, 1207, 1213,
	0, 0, 2631, 2628, 0, 1197, 0, 1203, 0, 0,
	0, 0, 1205, 1206, 1524, 0, 0, 1511, 1512, 1524,
	0, 0, 0, 1556, 2613, 1186, 0, 1728, 0, 0,
	0, 1575, 1576, 0, 1582, 1584, 0, 1591, 0, 1380,
	0, 0, 0, 0, 0, 1406, 1410, 1407, 1408, 1442,
	0, 1383, 1387, 1389, 1391, 1400, 1457, 0, 0, 509,
	0, 0, 1614, 1839, 0, 1674, 1889, 0, 1747, 1751,
	1897, 1888, 0, 0, 1775, 1777, 1778, 1797, 0, 1745,
	0, 0, 2255, 1918, 2285, 0, 0, 2180, 0, 0,
	2183, 2181, 0, 0, 0, 0, 2192, 2193, 2147, 2149,
	2150, 2151, 2152, 0, 0, 2218, 2211, 2215, 0, 0,
	2357, 0, 2361, 0, 2362, 0, 2591, 0, 0, 2386,
	0, 1801, 1803, 1844, 2453, 2453, 0, 1849, 2251, 0,
	1809, 0, 1804, 1805, 0, 1470, 1471, 0, 2282, 0,
	2280, 2293, 0, 2329, 0, 0, 1745, 0, 0, 0,
	2345, 0, 2720, 2721, 2724, 2725, 2728, 2729, 2376, 0,
	1903, 1896, 0, 2235, 2236, 0, 2481, 0, 2507, 0,
	2495, 2497, 2498, 2499, 2500, 2501, 2510, 2513, 2518, 2521,
	0, 2531, 2532, 2533, 2535, 0, 2540, 0, 0, 0,
	2102, 2108, 0, 1952, 0, 1789, 1767, 0, 1769, 1770,
	2125, 0, 2126, 0, 2128, 0, 0, 1906, 0, 1859,
	0, 0, 1864, 0, 1721, 1721, 0, 0, 1959, 1969,
	1672, 1815, 0, 0, 0, 0, 1963, 1965, 1966, 1964,
	0, 1812, 0, 0, 0, 0, 77, 77, 2135, 2136,
	2139, 2010, 2468, 2458, 2091, 0, 0, 0, 0, 2099,
	0, 0, 2093, 2104, 2095, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2076, 2075, 77, 2125, 0, 0,
	2574, 2559, 0, 0, 0, 2575, 2576, 0, 0, 2082,
	2492, 0, 0, 0, 2112, 2113, 2347, 2516, 2119, 2120,
	2121, 2122, 77, 2366, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 2025, 0, 2383, 2657, 1223, 1250, 0,
	2620, 0, 2598, 114, 115, 116, 117, -2, -2, 0,
	0, 0, -2, -2, 1244, 1246, -2, 1137, 1140, 1141,
	1142, 1143, 1144, 1145, -2, -2, -2, -2, -2, -2,
	-2, 1125, 1220, 1250, 1212, 1326, 1325, 0, 1328, 1325,
	1198, 1200, 1201, 0, 0, 1513, 1514, 0, 0, 0,
	1519, 0, 2620, 1427, 0, 0, 1713, 0, 0, 1588,
	1436, 1438, 1401, 0, 1403, 0, 0, 0, 1405, 0,
	0, 1385, 0, 1459, 1463, 0, 0, 0, 0, 1729,
	1596, 1696, 1696, 0, 1598, 1611, 0, 1614, 0, 1897,
	0, 0, 0, 88, 0, 1773, 0, 1779, 0, 1889,
	0, 1774, 0, 2246, 0, 0, 0, 0, 2140, 0,
	1464, 0, 1261, 0, -2, 2175, 0, 2176, 2186, 2163,
	0, 2228, 0, 2245, 0, 2354, 0, 0, 0, 2593,
	0, 0, 0, 2258, 1798, 0, 1905, 1905, 0, 1873,
	0, 1810, 0, 1472, 2371, 0, 1790, 0, 0, 0,
	0, 1789, 0, 0, 0, 2381, 0, 0, 0, 0,
	0, 2509, 2502, 0, 0, 0, 2555, 2555, 0, 0,
	0, 0, 1954, 1797, 1765, 1766, 1855, 1869, 2127, 2131,
	2129, 2130, 2132, 1869, 0, 1869, 0, 0, 1715, 74,
	0, 1716, 0, 1956, 0, 0, 1816, 1957, 0, 1961,
	0, 1473, 1814, 1962, 1971, 1978, 0, 0, 0, 1943,
	0, 1943, 0, 0, 2106, 2097, 0, 0, 0, 2110,
	2101, 0, 2266, 2374, 2080, 2081, 0, 0, 0, 2565,
	0, 0, 0, 0, 0, 0, 2124, 2364, 2365, 0,
	2311, 2312, 2063, 0, 0, 2315, 2349, 1225, 1307, 1365,
	0, 2612, 0, 2596, 2597, -2, -2, -2, 1222, 2635,
	0, 0, 1521, 1558, 1522, 1516, 1517, 1555, 1366, 1430,
	0, 0, 1706, 1434, 0, 1709, 0, 1402, 0, 1413,
	1404, 0, 1443, 1458, 0, 1461, 0, 0, 1476, 0,
	148, 0, 1480, 0, 0, 1501, 1595, 1597, 0, 0,
	0, 1691, 0, 1613, 1615, 1616, 1677, 1677, 1619, 1620,
	1677, 1677, 0, 0, 0, 1630, 1638, 1434, 1609, 88,
	0, 1752, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762,
	1763, 1764, 1753, 1901, 0, 0, 0, 1776, 1797, 1897,
	1887, 1889, 1774, 0, 0, 0, 0, 0, 1912, 0,
	2166, 1466, 2187, 2179, 0, 2184, 2185, 0, 2164, 2234,
	2230, 2217, 2219, 0, 2222, 2223, 2125, 0, 2355, 2581,
	0, 0, 2587, 2592, 0, 0, 2590, 2255, 1918, 1846,
	0, 1847, 1863, 1878, 0, 1843, 0, 2558, 1788, 0,
	1789, 0, 1887, 1774, 2330, 0, 1789, 2384, 1902, 0,
	0, 2482, 0, 2491, 0, 2538, 2555, 2552, 0, 2551,
	2580, 0, 0, 0, 1795, 2453, 0, 2453, 0, 2453,
	1865, 1866, 308, 1724, 73, 1720, 1721, 1960, 1970, 0,
	0, 2455, 2138, 2103, 2109, 1934, 1942, 0, 1936, 0,
	2105, 0, 1943, 0, 0, 2560, 2570, 2570, 2563, 0,
	2577, 0, 0, 0, 2506, 2083, 2307, 0, 0, 0,
	2619, 2621, 0, 2599, 2601, 2603, 2604, 2605, 2606, 2607,
	0, 178, 364, 465, 0, 0, 0, 0, 2630, 1199,
	1523, 1421, 0, 0, 0, 0, 1708, 1714, 1577, 0,
	1441, 1456, 1460, 0, 0, 1486, 0, 1477, 0, 1478,
	1474, 1475, 0, 0, 0, 1483, 1503, 0, 0, 1695,
	0, 1693, 0, 0, 0, 0, 0, 0, 0, 1629,
	1612, 0, 1632, 1633, 1634, 1635, 1636, 0, 1599, 1901,
	1886, 1903, 0, 86, 87, 0, 1780, 88, 1889, 1897,
	0, 2252, 0, 0, 2255, 1914, 0, 1465, 2180, 2182,
	2177, 0, 0, 0, 2229, 2220, 1677, 2224, 2225, 0,
	2244, 0, 0, 2594, 2595, 2247, 0, 0, 1848, 0,
	1850, 1874, 1875, 0, 1870, 1871, 1872, 1851, 0, 0,
	0, 0, 1791, 2341, 1789, 0, 0, 0, 2346, 2377,
	2474, 0, 0, 2484, 2514, 2550, 2553, 2554, 0, 1786,
	0, 0, 0, 1905, 0, 1905, 2251, 1905, 0, 1727,
	1724, 1717, 0, 1843, 1973, 0, 0, 0, 2107, 1938,
	0, 2111, 1841, 0, 1841, 0, 2571, 0, 0, 0,
	2064, 2066, 2065, 0, 0, 0, 2608, 0, 0, 0,
	2627, 2647, 2636, -2, 423, 179, 0, 2647, 2647, 0,
	0, 0, 1434, 1446, 0, 1484, 0, 1488, 0, 1479,
	1481, 0, 1482, 0, 0, 1500, 1686, 1687, 0, 0,
	1698, 1688, 0, 0, 0, 1617, 1618, 1621, 1622, 1623,
	1624, 0, 1627, 1628, 1631, 0, 1639, 1641, 1903, 1732,
	0, 0, 1891, 1721, 1721, 0, 1901, 1897, 88, 1889,
	2253, 2254, 2248, 1808, 0, 0, 2141, 0, 0, 2227,
	2231, 2232, 0, 0, 0, 0, 0, 0, 1862, 1876,
	0, 1877, 0, 0, 0, 0, 0, 0, 2557, 2343,
	0, 0, 1789, 0, 2483, 0, 1781, 0, 1785, 1782,
	0, 2125, 0, 2125, 1873, 1434, 0, 1718, 1727, 1958,
	1967, 2454, 1943, 1943, 0, 2561, 1840, 2568, 0, 2562,
	0, 0, 2578, 2579, 2508, 2622, 2623, 2602, 0, 0,
	0, 2632, 0, 0, 2638, 2639, 2640, 2641, 2642, 2633,
	2634, 0, 0, 0, 1705, 1412, 0, 1462, 1487, 1490,
	1491, 0, 0, 0, 1496, 0, 1489, 0, 0, 1502,
	1504, 0, 1689, 0, 1690, 1699, 0, 0, 0, 0,
	1692, 1694, 1625, 1626, 1637, 0, 1730, 1898, 0, 0,
	1890, 0, 74, 74, 0, 1903, 88, 1901, 1897, 1918,
	0, 0, 0, 0, 2221, 2226, 0, 2584, 2585, 2255,
	1904, 1879, 0, 1882, 1883, 0, 1880, 1842, 1852, 2556,
	1789, 0, 2331, 2475, 2485, 1787, 0, 1856, 1868, 1858,
	1878, 2125, 1867, 1719, 1935, 1937, 1943, 0, 2564, 2572,
	2610, 2609, 0, 0, 2644, 2645, 0, 0, 0, 0,
	0, 1445, 1492, 1493, 1494, 1495, 1497, 0, 0, 0,
	0, 1697, 0, 0, 1703, 0, 1640, 1899, 1900, 1892,
	1893, 1894, 1721, 1734, 1901, 1903, 88, 1903, 0, 1915,
	1914, 0, 2233, 2234, 0, 0, 2249, 1881, 2251, 2251,
	2342, 1789, 0, 2125, 1861, 1939, 2569, 2611, 2643, 2646,
	2637, 0, 0, 0, 0, 0, 0, 1561, 0, -2,
	1505, 1506, 0, 0, 0, 74, 1903, 1733, 1901, 1434,
	1913, 0, 1808, 2239, 0, 0, 0, 1884, 1885, 2344,
	0, 1860, 0, 1429, 1425, 1426, 0, 1540, 0, 0,
	1570, 0, 1559, 1700, 1701, 0, 1704, 1895, 1731, 1903,
	1907, 1916, 1918, 0, 2237, 2240, 2241, 2242, 2243, 0,
	0, 0, 1783, 0, 1485, 0, 0, 0, 1526, 1527,
	1528, 1529, 1530, 1531, 1534, 1562, 1563, 1549, 1570, 1570,
	0, 0, 0, 1735, 1903, 2205, 0, 0, 0, 0,
	0, 1498, 0, 1525, 1532, 1533, 1554, 0, 0, 1549,
	1540, 1569, 0, 0, 0, 1434, 2238, 0, 0, 0,
	0, 1539, 1538, 0, 0, 1541, 0, 1543, 0, 0,
	0, 1554, 1566, 0, 0, 1702, 1908, 2239, 2582, 2583,
	1428, 1564, 0, 1551, 1553, 1542, 1544, 0, 1547, 0,
	1548, 1538, 0, 0, 0, 0, 0, 0, 1545, 1546,
	1565, 1567, 0, 2206, 1535, 1536, 0, 0, 0, 0,
	1550, 1552, 1568, 0, 1537,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 539, 3, 3,
	532, 533, 537, 535, 542, 536, 534, 538, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 543, 541,
	526, 528, 527, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 530, 3, 531, 540,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var yyTok3 = [...]uint16{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 464, 57807, 465, 57808, 466, 57809, 467,
	57810, 468, 57811, 469, 57812, 470, 57813, 471, 57814, 472,
	57815, 473, 57816, 474, 57817, 475, 57818, 476, 57819, 477,
	57820, 478, 57821, 479, 57822, 480, 57823, 481, 57824, 482,
	57825, 483, 57826, 484, 57827, 485, 57828, 486, 57829, 487,
	57830, 488, 57831, 489, 57832, 490, 57833, 491, 57834, 492,
	57835, 493, 57836, 494, 57837, 495, 57838, 496, 57839, 497,
	57840, 498, 57841, 499, 57842, 500, 57843, 501, 57844, 502,
	57845, 503, 57846, 504, 57847, 505, 57848, 506, 57849, 507,
	57850, 508, 57851, 509, 57852, 510, 57853, 511, 57854, 512,
	57855, 513, 57856, 514, 57857, 515, 57858, 516, 57859, 517,
	57860, 518, 57861, 519, 57862, 520, 57863, 521, 57864, 522,
	57865, 523, 57866, 524, 57867, 525, 57868, 529, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:538
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:553
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:561
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:576
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:579
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:588
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:589
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:590
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:591
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:592
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:593
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:594
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:595
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:596
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:597
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:598
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:599
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:600
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:601
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:602
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:603
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:604
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:605
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:606
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:607
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:608
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:609
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:610
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:611
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:612
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:613
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:614
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:615
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:616
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:617
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:618
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:619
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:620
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:621
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:622
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:623
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:624
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:625
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:626
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:627
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:628
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:629
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:630
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:631
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:632
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:633
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:634
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:635
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:636
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:637
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:638
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:639
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:640
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:641
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:642
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:643
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:644
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:645
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:646
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:647
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:648
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:649
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:650
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:651
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:653
		{
			yyVAL.stmt = nil
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:664
		{
			yyVAL.str = yyDollar[1].str
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:665
		{
			yyVAL.str = ""
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:669
		{
			yyVAL.list = yyDollar[1].list
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:670
		{
			yyVAL.list = nil
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:674
		{
			yyVAL.dropBehav = ast.DropCascade
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:675
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:676
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:680
		{
			yyVAL.ival = 1
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:681
		{
			yyVAL.ival = 0
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:685
		{
			yyVAL.ival = 1
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:686
		{
			yyVAL.ival = 0
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:690
		{
			yyVAL.bval = true
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:691
		{
			yyVAL.bval = false
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:695
		{
			yyVAL.bval = true
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:696
		{
			yyVAL.bval = false
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:700
		{
			yyVAL.list = yyDollar[2].list
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:701
		{
			yyVAL.list = nil
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:702
		{
			yyVAL.list = nil
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:711
		{
			yyVAL.str = yyDollar[1].str
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:712
		{
			yyVAL.str = yyDollar[1].str
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:713
		{
			yyVAL.str = yyDollar[1].str
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:717
		{
			yyVAL.str = yyDollar[1].str
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:718
		{
			yyVAL.str = yyDollar[1].str
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:719
		{
			yyVAL.str = yyDollar[1].str
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:720
		{
			yyVAL.str = yyDollar[1].str
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:721
		{
			yyVAL.str = yyDollar[1].str
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:724
		{
			yyVAL.str = yyDollar[1].str
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:725
		{
			yyVAL.str = yyDollar[1].str
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:728
		{
			yyVAL.str = yyDollar[1].str
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:733
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:737
		{
			list := yyDollar[1].list
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = list
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:746
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:750
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:758
		{
			yyVAL.rangevar = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:765
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list.Items) == 1 {
				if str, ok := yyDollar[2].list.Items[0].(*ast.String); ok {
					yyVAL.rangevar = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.rangevar = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.rangevar = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:794
		{
			yyVAL.list = yyDollar[2].list
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:795
		{
			yyVAL.list = nil
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:800
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:804
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:817
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:823
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:829
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:835
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:841
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:848
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:855
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_UNLOGGED
			yyVAL.node = rangeVar
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:861
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:867
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:876
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:880
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				nodes.Append(item)
			}
			yyVAL.list = nodes
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:892
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:896
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].list)
			yyVAL.list = list
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:906
		{
			yyVAL.str = "abort"
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:907
		{
			yyVAL.str = "absent"
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:908
		{
			yyVAL.str = "absolute"
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:909
		{
			yyVAL.str = "access"
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:910
		{
			yyVAL.str = "action"
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:911
		{
			yyVAL.str = "add"
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:912
		{
			yyVAL.str = "admin"
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:913
		{
			yyVAL.str = "after"
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:914
		{
			yyVAL.str = "aggregate"
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:915
		{
			yyVAL.str = "also"
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:916
		{
			yyVAL.str = "alter"
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:917
		{
			yyVAL.str = "always"
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:918
		{
			yyVAL.str = "asensitive"
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:919
		{
			yyVAL.str = "assertion"
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:920
		{
			yyVAL.str = "assignment"
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:921
		{
			yyVAL.str = "at"
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:922
		{
			yyVAL.str = "atomic"
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:923
		{
			yyVAL.str = "attach"
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:924
		{
			yyVAL.str = "attribute"
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:925
		{
			yyVAL.str = "backward"
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:926
		{
			yyVAL.str = "before"
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:927
		{
			yyVAL.str = "begin"
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:928
		{
			yyVAL.str = "breadth"
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:929
		{
			yyVAL.str = "by"
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:930
		{
			yyVAL.str = "cache"
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:931
		{
			yyVAL.str = "call"
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:932
		{
			yyVAL.str = "called"
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:933
		{
			yyVAL.str = "cascade"
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:934
		{
			yyVAL.str = "cascaded"
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:935
		{
			yyVAL.str = "catalog"
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:936
		{
			yyVAL.str = "chain"
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:937
		{
			yyVAL.str = "characteristics"
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:938
		{
			yyVAL.str = "checkpoint"
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:939
		{
			yyVAL.str = "class"
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:940
		{
			yyVAL.str = "close"
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:941
		{
			yyVAL.str = "cluster"
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:942
		{
			yyVAL.str = "columns"
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:943
		{
			yyVAL.str = "comment"
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:944
		{
			yyVAL.str = "comments"
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:945
		{
			yyVAL.str = "commit"
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:946
		{
			yyVAL.str = "committed"
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:947
		{
			yyVAL.str = "compression"
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:948
		{
			yyVAL.str = "conditional"
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:949
		{
			yyVAL.str = "configuration"
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:950
		{
			yyVAL.str = "conflict"
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:951
		{
			yyVAL.str = "connection"
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:952
		{
			yyVAL.str = "constraints"
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:953
		{
			yyVAL.str = "content"
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:954
		{
			yyVAL.str = "continue"
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:955
		{
			yyVAL.str = "conversion"
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:956
		{
			yyVAL.str = "copy"
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:957
		{
			yyVAL.str = "cost"
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:958
		{
			yyVAL.str = "csv"
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:959
		{
			yyVAL.str = "cube"
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:960
		{
			yyVAL.str = "current"
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:961
		{
			yyVAL.str = "cursor"
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:962
		{
			yyVAL.str = "cycle"
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:963
		{
			yyVAL.str = "data"
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:964
		{
			yyVAL.str = "database"
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:965
		{
			yyVAL.str = "day"
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:966
		{
			yyVAL.str = "deallocate"
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:967
		{
			yyVAL.str = "declare"
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:968
		{
			yyVAL.str = "defaults"
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:969
		{
			yyVAL.str = "deferred"
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:970
		{
			yyVAL.str = "definer"
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:971
		{
			yyVAL.str = "delete"
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:972
		{
			yyVAL.str = "delimiter"
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:973
		{
			yyVAL.str = "delimiters"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:974
		{
			yyVAL.str = "depends"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:975
		{
			yyVAL.str = "depth"
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:976
		{
			yyVAL.str = "detach"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:977
		{
			yyVAL.str = "dictionary"
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:978
		{
			yyVAL.str = "disable"
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:979
		{
			yyVAL.str = "discard"
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:980
		{
			yyVAL.str = "document"
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:981
		{
			yyVAL.str = "domain"
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:982
		{
			yyVAL.str = "double"
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:983
		{
			yyVAL.str = "drop"
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:984
		{
			yyVAL.str = "each"
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:985
		{
			yyVAL.str = "empty"
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:986
		{
			yyVAL.str = "enable"
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:987
		{
			yyVAL.str = "encoding"
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:988
		{
			yyVAL.str = "encrypted"
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:989
		{
			yyVAL.str = "enum"
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:990
		{
			yyVAL.str = "error"
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:991
		{
			yyVAL.str = "escape"
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:992
		{
			yyVAL.str = "event"
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:993
		{
			yyVAL.str = "exclude"
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:994
		{
			yyVAL.str = "excluding"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:995
		{
			yyVAL.str = "exclusive"
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:996
		{
			yyVAL.str = "execute"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:997
		{
			yyVAL.str = "explain"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:998
		{
			yyVAL.str = "expression"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:999
		{
			yyVAL.str = "extension"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1000
		{
			yyVAL.str = "external"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1001
		{
			yyVAL.str = "family"
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1002
		{
			yyVAL.str = "filter"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1003
		{
			yyVAL.str = "finalize"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1004
		{
			yyVAL.str = "first"
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1005
		{
			yyVAL.str = "following"
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1006
		{
			yyVAL.str = "force"
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1007
		{
			yyVAL.str = "format"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1008
		{
			yyVAL.str = "forward"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1009
		{
			yyVAL.str = "function"
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1010
		{
			yyVAL.str = "functions"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1011
		{
			yyVAL.str = "generated"
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1012
		{
			yyVAL.str = "global"
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1013
		{
			yyVAL.str = "granted"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1014
		{
			yyVAL.str = "groups"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1015
		{
			yyVAL.str = "handler"
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1016
		{
			yyVAL.str = "header"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1017
		{
			yyVAL.str = "hold"
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1018
		{
			yyVAL.str = "hour"
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1019
		{
			yyVAL.str = "identity"
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1020
		{
			yyVAL.str = "if"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1021
		{
			yyVAL.str = "immediate"
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1022
		{
			yyVAL.str = "immutable"
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1023
		{
			yyVAL.str = "implicit"
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1024
		{
			yyVAL.str = "import"
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1025
		{
			yyVAL.str = "include"
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1026
		{
			yyVAL.str = "including"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1027
		{
			yyVAL.str = "increment"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1028
		{
			yyVAL.str = "indent"
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1029
		{
			yyVAL.str = "index"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1030
		{
			yyVAL.str = "indexes"
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1031
		{
			yyVAL.str = "inherit"
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1032
		{
			yyVAL.str = "inherits"
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1033
		{
			yyVAL.str = "inline"
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1034
		{
			yyVAL.str = "input"
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1035
		{
			yyVAL.str = "insensitive"
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1036
		{
			yyVAL.str = "insert"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1037
		{
			yyVAL.str = "instead"
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1038
		{
			yyVAL.str = "invoker"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1039
		{
			yyVAL.str = "isolation"
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1040
		{
			yyVAL.str = "keep"
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1041
		{
			yyVAL.str = "key"
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1042
		{
			yyVAL.str = "keys"
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1043
		{
			yyVAL.str = "label"
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1044
		{
			yyVAL.str = "language"
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1045
		{
			yyVAL.str = "large"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1046
		{
			yyVAL.str = "last"
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1047
		{
			yyVAL.str = "leakproof"
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1048
		{
			yyVAL.str = "level"
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1049
		{
			yyVAL.str = "listen"
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1050
		{
			yyVAL.str = "load"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1051
		{
			yyVAL.str = "local"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1052
		{
			yyVAL.str = "location"
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1053
		{
			yyVAL.str = "lock"
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1054
		{
			yyVAL.str = "locked"
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1055
		{
			yyVAL.str = "logged"
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1056
		{
			yyVAL.str = "mapping"
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1057
		{
			yyVAL.str = "match"
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1058
		{
			yyVAL.str = "matched"
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1059
		{
			yyVAL.str = "materialized"
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1060
		{
			yyVAL.str = "maxvalue"
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1061
		{
			yyVAL.str = "merge"
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1062
		{
			yyVAL.str = "method"
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1063
		{
			yyVAL.str = "minute"
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1064
		{
			yyVAL.str = "minvalue"
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1065
		{
			yyVAL.str = "mode"
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1066
		{
			yyVAL.str = "month"
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1067
		{
			yyVAL.str = "move"
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1068
		{
			yyVAL.str = "name"
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1069
		{
			yyVAL.str = "names"
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1070
		{
			yyVAL.str = "nested"
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1071
		{
			yyVAL.str = "new"
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1072
		{
			yyVAL.str = "next"
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1073
		{
			yyVAL.str = "nfc"
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1074
		{
			yyVAL.str = "nfd"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1075
		{
			yyVAL.str = "nfkc"
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1076
		{
			yyVAL.str = "nfkd"
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1077
		{
			yyVAL.str = "no"
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1078
		{
			yyVAL.str = "normalized"
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1079
		{
			yyVAL.str = "nothing"
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1080
		{
			yyVAL.str = "notify"
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1081
		{
			yyVAL.str = "nowait"
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1082
		{
			yyVAL.str = "nulls"
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1083
		{
			yyVAL.str = "object"
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1084
		{
			yyVAL.str = "of"
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1085
		{
			yyVAL.str = "off"
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1086
		{
			yyVAL.str = "oids"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1087
		{
			yyVAL.str = "old"
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1088
		{
			yyVAL.str = "omit"
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1089
		{
			yyVAL.str = "operator"
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1090
		{
			yyVAL.str = "option"
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1091
		{
			yyVAL.str = "options"
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1092
		{
			yyVAL.str = "ordinality"
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1093
		{
			yyVAL.str = "others"
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1094
		{
			yyVAL.str = "over"
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1095
		{
			yyVAL.str = "overriding"
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1096
		{
			yyVAL.str = "owned"
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1097
		{
			yyVAL.str = "owner"
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1098
		{
			yyVAL.str = "parallel"
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1099
		{
			yyVAL.str = "parameter"
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1100
		{
			yyVAL.str = "parser"
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1101
		{
			yyVAL.str = "partial"
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1102
		{
			yyVAL.str = "partition"
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1103
		{
			yyVAL.str = "passing"
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1104
		{
			yyVAL.str = "password"
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1105
		{
			yyVAL.str = "path"
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1106
		{
			yyVAL.str = "plan"
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1107
		{
			yyVAL.str = "plans"
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1108
		{
			yyVAL.str = "policy"
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1109
		{
			yyVAL.str = "preceding"
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1110
		{
			yyVAL.str = "prepare"
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1111
		{
			yyVAL.str = "prepared"
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1112
		{
			yyVAL.str = "preserve"
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1113
		{
			yyVAL.str = "prior"
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1114
		{
			yyVAL.str = "privileges"
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1115
		{
			yyVAL.str = "procedural"
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1116
		{
			yyVAL.str = "procedure"
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1117
		{
			yyVAL.str = "procedures"
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1118
		{
			yyVAL.str = "program"
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1119
		{
			yyVAL.str = "publication"
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1120
		{
			yyVAL.str = "quote"
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1121
		{
			yyVAL.str = "quotes"
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1122
		{
			yyVAL.str = "range"
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1123
		{
			yyVAL.str = "read"
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1124
		{
			yyVAL.str = "reassign"
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1125
		{
			yyVAL.str = "recheck"
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1126
		{
			yyVAL.str = "recursive"
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1127
		{
			yyVAL.str = "ref"
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1128
		{
			yyVAL.str = "referencing"
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1129
		{
			yyVAL.str = "refresh"
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1130
		{
			yyVAL.str = "reindex"
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1131
		{
			yyVAL.str = "relative"
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1132
		{
			yyVAL.str = "release"
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1133
		{
			yyVAL.str = "rename"
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1134
		{
			yyVAL.str = "repeatable"
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1135
		{
			yyVAL.str = "replace"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1136
		{
			yyVAL.str = "replica"
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1137
		{
			yyVAL.str = "reset"
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1138
		{
			yyVAL.str = "restart"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1139
		{
			yyVAL.str = "restrict"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1140
		{
			yyVAL.str = "return"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1141
		{
			yyVAL.str = "returns"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1142
		{
			yyVAL.str = "revoke"
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1143
		{
			yyVAL.str = "role"
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1144
		{
			yyVAL.str = "rollback"
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1145
		{
			yyVAL.str = "rollup"
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1146
		{
			yyVAL.str = "routine"
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1147
		{
			yyVAL.str = "routines"
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1148
		{
			yyVAL.str = "rows"
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1149
		{
			yyVAL.str = "rule"
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1150
		{
			yyVAL.str = "savepoint"
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1151
		{
			yyVAL.str = "scalar"
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1152
		{
			yyVAL.str = "schema"
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1153
		{
			yyVAL.str = "schemas"
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1154
		{
			yyVAL.str = "scroll"
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1155
		{
			yyVAL.str = "search"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1156
		{
			yyVAL.str = "second"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1157
		{
			yyVAL.str = "security"
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1158
		{
			yyVAL.str = "sequence"
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1159
		{
			yyVAL.str = "sequences"
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1160
		{
			yyVAL.str = "serializable"
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1161
		{
			yyVAL.str = "server"
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1162
		{
			yyVAL.str = "session"
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1163
		{
			yyVAL.str = "set"
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1164
		{
			yyVAL.str = "sets"
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1165
		{
			yyVAL.str = "share"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1166
		{
			yyVAL.str = "show"
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1167
		{
			yyVAL.str = "simple"
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1168
		{
			yyVAL.str = "skip"
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1169
		{
			yyVAL.str = "snapshot"
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1170
		{
			yyVAL.str = "source"
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1171
		{
			yyVAL.str = "sql"
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1172
		{
			yyVAL.str = "stable"
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1173
		{
			yyVAL.str = "standalone"
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1174
		{
			yyVAL.str = "start"
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1175
		{
			yyVAL.str = "statement"
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1176
		{
			yyVAL.str = "statistics"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1177
		{
			yyVAL.str = "stdin"
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1178
		{
			yyVAL.str = "stdout"
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1179
		{
			yyVAL.str = "storage"
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1180
		{
			yyVAL.str = "stored"
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1181
		{
			yyVAL.str = "strict"
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1182
		{
			yyVAL.str = "string"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1183
		{
			yyVAL.str = "strip"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1184
		{
			yyVAL.str = "subscription"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1185
		{
			yyVAL.str = "support"
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1186
		{
			yyVAL.str = "sysid"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1187
		{
			yyVAL.str = "system"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1188
		{
			yyVAL.str = "tables"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1189
		{
			yyVAL.str = "tablespace"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1190
		{
			yyVAL.str = "target"
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1191
		{
			yyVAL.str = "temp"
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1192
		{
			yyVAL.str = "template"
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1193
		{
			yyVAL.str = "temporary"
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1194
		{
			yyVAL.str = "text"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1195
		{
			yyVAL.str = "ties"
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1196
		{
			yyVAL.str = "transaction"
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1197
		{
			yyVAL.str = "transform"
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1198
		{
			yyVAL.str = "trigger"
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1199
		{
			yyVAL.str = "truncate"
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1200
		{
			yyVAL.str = "trusted"
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1201
		{
			yyVAL.str = "type"
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1202
		{
			yyVAL.str = "types"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1203
		{
			yyVAL.str = "uescape"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1204
		{
			yyVAL.str = "unbounded"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1205
		{
			yyVAL.str = "uncommitted"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1206
		{
			yyVAL.str = "unconditional"
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1207
		{
			yyVAL.str = "unencrypted"
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1208
		{
			yyVAL.str = "unknown"
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1209
		{
			yyVAL.str = "unlisten"
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1210
		{
			yyVAL.str = "unlogged"
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1211
		{
			yyVAL.str = "until"
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1212
		{
			yyVAL.str = "update"
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1213
		{
			yyVAL.str = "vacuum"
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1214
		{
			yyVAL.str = "valid"
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1215
		{
			yyVAL.str = "validate"
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1216
		{
			yyVAL.str = "validator"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1217
		{
			yyVAL.str = "value"
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1218
		{
			yyVAL.str = "varying"
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1219
		{
			yyVAL.str = "version"
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1220
		{
			yyVAL.str = "view"
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1221
		{
			yyVAL.str = "views"
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1222
		{
			yyVAL.str = "volatile"
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1223
		{
			yyVAL.str = "whitespace"
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1224
		{
			yyVAL.str = "within"
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1225
		{
			yyVAL.str = "without"
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1226
		{
			yyVAL.str = "work"
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1227
		{
			yyVAL.str = "wrapper"
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1228
		{
			yyVAL.str = "write"
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1229
		{
			yyVAL.str = "xml"
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1230
		{
			yyVAL.str = "year"
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1231
		{
			yyVAL.str = "yes"
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1232
		{
			yyVAL.str = "zone"
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1246
		{
			yyVAL.str = "between"
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1247
		{
			yyVAL.str = "bigint"
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1248
		{
			yyVAL.str = "bit"
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1249
		{
			yyVAL.str = "boolean"
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1250
		{
			yyVAL.str = "char"
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1251
		{
			yyVAL.str = "character"
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1252
		{
			yyVAL.str = "coalesce"
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1253
		{
			yyVAL.str = "dec"
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1254
		{
			yyVAL.str = "decimal"
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1255
		{
			yyVAL.str = "exists"
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1256
		{
			yyVAL.str = "extract"
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1257
		{
			yyVAL.str = "float"
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1258
		{
			yyVAL.str = "greatest"
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1259
		{
			yyVAL.str = "grouping"
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1260
		{
			yyVAL.str = "inout"
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1261
		{
			yyVAL.str = "int"
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1262
		{
			yyVAL.str = "integer"
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1263
		{
			yyVAL.str = "interval"
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1264
		{
			yyVAL.str = "json"
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1265
		{
			yyVAL.str = "json_array"
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1266
		{
			yyVAL.str = "json_arrayagg"
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1267
		{
			yyVAL.str = "json_exists"
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1268
		{
			yyVAL.str = "json_object"
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1269
		{
			yyVAL.str = "json_objectagg"
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1270
		{
			yyVAL.str = "json_query"
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1271
		{
			yyVAL.str = "json_scalar"
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1272
		{
			yyVAL.str = "json_serialize"
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1273
		{
			yyVAL.str = "json_table"
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1274
		{
			yyVAL.str = "json_value"
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1275
		{
			yyVAL.str = "least"
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1276
		{
			yyVAL.str = "merge_action"
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1277
		{
			yyVAL.str = "national"
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1278
		{
			yyVAL.str = "nchar"
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1279
		{
			yyVAL.str = "none"
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1280
		{
			yyVAL.str = "normalize"
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1281
		{
			yyVAL.str = "nullif"
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1282
		{
			yyVAL.str = "numeric"
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1283
		{
			yyVAL.str = "out"
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1284
		{
			yyVAL.str = "overlay"
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1285
		{
			yyVAL.str = "position"
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1286
		{
			yyVAL.str = "precision"
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1287
		{
			yyVAL.str = "real"
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1288
		{
			yyVAL.str = "row"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1289
		{
			yyVAL.str = "setof"
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1290
		{
			yyVAL.str = "smallint"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1291
		{
			yyVAL.str = "substring"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1292
		{
			yyVAL.str = "time"
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1293
		{
			yyVAL.str = "timestamp"
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1294
		{
			yyVAL.str = "treat"
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1295
		{
			yyVAL.str = "trim"
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1296
		{
			yyVAL.str = "values"
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1297
		{
			yyVAL.str = "varchar"
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1298
		{
			yyVAL.str = "xmlattributes"
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1299
		{
			yyVAL.str = "xmlconcat"
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1300
		{
			yyVAL.str = "xmlelement"
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1301
		{
			yyVAL.str = "xmlexists"
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1302
		{
			yyVAL.str = "xmlforest"
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1303
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1304
		{
			yyVAL.str = "xmlparse"
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1305
		{
			yyVAL.str = "xmlpi"
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1306
		{
			yyVAL.str = "xmlroot"
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1307
		{
			yyVAL.str = "xmlserialize"
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1308
		{
			yyVAL.str = "xmltable"
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1322
		{
			yyVAL.str = "authorization"
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1323
		{
			yyVAL.str = "binary"
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1324
		{
			yyVAL.str = "collation"
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1325
		{
			yyVAL.str = "concurrently"
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1326
		{
			yyVAL.str = "cross"
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1327
		{
			yyVAL.str = "current_schema"
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1328
		{
			yyVAL.str = "freeze"
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1329
		{
			yyVAL.str = "full"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1330
		{
			yyVAL.str = "ilike"
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1331
		{
			yyVAL.str = "inner"
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1332
		{
			yyVAL.str = "is"
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1333
		{
			yyVAL.str = "isnull"
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1334
		{
			yyVAL.str = "join"
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1335
		{
			yyVAL.str = "left"
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1336
		{
			yyVAL.str = "like"
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1337
		{
			yyVAL.str = "natural"
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1338
		{
			yyVAL.str = "notnull"
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1339
		{
			yyVAL.str = "outer"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1340
		{
			yyVAL.str = "overlaps"
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1341
		{
			yyVAL.str = "right"
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1342
		{
			yyVAL.str = "similar"
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1343
		{
			yyVAL.str = "tablesample"
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1344
		{
			yyVAL.str = "verbose"
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1354
		{
			yyVAL.str = "all"
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1355
		{
			yyVAL.str = "analyse"
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1356
		{
			yyVAL.str = "analyze"
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1357
		{
			yyVAL.str = "and"
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1358
		{
			yyVAL.str = "any"
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1359
		{
			yyVAL.str = "array"
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1360
		{
			yyVAL.str = "as"
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1361
		{
			yyVAL.str = "asc"
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1362
		{
			yyVAL.str = "asymmetric"
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1363
		{
			yyVAL.str = "both"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1364
		{
			yyVAL.str = "case"
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1365
		{
			yyVAL.str = "cast"
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1366
		{
			yyVAL.str = "check"
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1367
		{
			yyVAL.str = "collate"
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1368
		{
			yyVAL.str = "column"
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1369
		{
			yyVAL.str = "constraint"
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1370
		{
			yyVAL.str = "create"
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1371
		{
			yyVAL.str = "current_catalog"
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1372
		{
			yyVAL.str = "current_date"
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1373
		{
			yyVAL.str = "current_role"
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1374
		{
			yyVAL.str = "current_time"
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1375
		{
			yyVAL.str = "current_timestamp"
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1376
		{
			yyVAL.str = "current_user"
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1377
		{
			yyVAL.str = "default"
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1378
		{
			yyVAL.str = "deferrable"
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1379
		{
			yyVAL.str = "desc"
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1380
		{
			yyVAL.str = "distinct"
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1381
		{
			yyVAL.str = "do"
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1382
		{
			yyVAL.str = "else"
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1383
		{
			yyVAL.str = "end"
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1384
		{
			yyVAL.str = "except"
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1385
		{
			yyVAL.str = "false"
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1386
		{
			yyVAL.str = "fetch"
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1387
		{
			yyVAL.str = "for"
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1388
		{
			yyVAL.str = "foreign"
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1389
		{
			yyVAL.str = "from"
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1390
		{
			yyVAL.str = "grant"
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1391
		{
			yyVAL.str = "group"
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1392
		{
			yyVAL.str = "having"
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1393
		{
			yyVAL.str = "in"
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1394
		{
			yyVAL.str = "initially"
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1395
		{
			yyVAL.str = "intersect"
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1396
		{
			yyVAL.str = "into"
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1397
		{
			yyVAL.str = "lateral"
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1398
		{
			yyVAL.str = "leading"
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1399
		{
			yyVAL.str = "limit"
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1400
		{
			yyVAL.str = "localtime"
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1401
		{
			yyVAL.str = "localtimestamp"
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1402
		{
			yyVAL.str = "not"
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1403
		{
			yyVAL.str = "null"
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1404
		{
			yyVAL.str = "offset"
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1405
		{
			yyVAL.str = "on"
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1406
		{
			yyVAL.str = "only"
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1407
		{
			yyVAL.str = "or"
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1408
		{
			yyVAL.str = "order"
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1409
		{
			yyVAL.str = "placing"
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1410
		{
			yyVAL.str = "primary"
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1411
		{
			yyVAL.str = "references"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1412
		{
			yyVAL.str = "returning"
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1413
		{
			yyVAL.str = "select"
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1414
		{
			yyVAL.str = "session_user"
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1415
		{
			yyVAL.str = "some"
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1416
		{
			yyVAL.str = "symmetric"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1417
		{
			yyVAL.str = "system_user"
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1418
		{
			yyVAL.str = "table"
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1419
		{
			yyVAL.str = "then"
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1420
		{
			yyVAL.str = "to"
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1421
		{
			yyVAL.str = "trailing"
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1422
		{
			yyVAL.str = "true"
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1423
		{
			yyVAL.str = "union"
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1424
		{
			yyVAL.str = "unique"
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1425
		{
			yyVAL.str = "user"
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1426
		{
			yyVAL.str = "using"
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1427
		{
			yyVAL.str = "variadic"
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1428
		{
			yyVAL.str = "when"
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1429
		{
			yyVAL.str = "where"
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1430
		{
			yyVAL.str = "window"
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1431
		{
			yyVAL.str = "with"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1444
		{
			yyVAL.str = "abort"
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1445
		{
			yyVAL.str = "absent"
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1446
		{
			yyVAL.str = "absolute"
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1447
		{
			yyVAL.str = "access"
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1448
		{
			yyVAL.str = "action"
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1449
		{
			yyVAL.str = "add"
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1450
		{
			yyVAL.str = "admin"
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1451
		{
			yyVAL.str = "after"
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1452
		{
			yyVAL.str = "aggregate"
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1453
		{
			yyVAL.str = "all"
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1454
		{
			yyVAL.str = "also"
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1455
		{
			yyVAL.str = "alter"
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1456
		{
			yyVAL.str = "always"
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1457
		{
			yyVAL.str = "analyse"
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1458
		{
			yyVAL.str = "analyze"
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1459
		{
			yyVAL.str = "and"
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1460
		{
			yyVAL.str = "any"
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1461
		{
			yyVAL.str = "asc"
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1462
		{
			yyVAL.str = "asensitive"
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1463
		{
			yyVAL.str = "assertion"
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1464
		{
			yyVAL.str = "assignment"
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1465
		{
			yyVAL.str = "asymmetric"
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1466
		{
			yyVAL.str = "at"
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1467
		{
			yyVAL.str = "atomic"
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1468
		{
			yyVAL.str = "attach"
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1469
		{
			yyVAL.str = "attribute"
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1470
		{
			yyVAL.str = "authorization"
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1471
		{
			yyVAL.str = "backward"
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1472
		{
			yyVAL.str = "before"
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1473
		{
			yyVAL.str = "begin"
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1474
		{
			yyVAL.str = "between"
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1475
		{
			yyVAL.str = "bigint"
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1476
		{
			yyVAL.str = "binary"
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1477
		{
			yyVAL.str = "bit"
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1478
		{
			yyVAL.str = "boolean"
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1479
		{
			yyVAL.str = "both"
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1480
		{
			yyVAL.str = "breadth"
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1481
		{
			yyVAL.str = "by"
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1482
		{
			yyVAL.str = "cache"
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1483
		{
			yyVAL.str = "call"
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1484
		{
			yyVAL.str = "called"
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1485
		{
			yyVAL.str = "cascade"
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1486
		{
			yyVAL.str = "cascaded"
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1487
		{
			yyVAL.str = "case"
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1488
		{
			yyVAL.str = "cast"
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1489
		{
			yyVAL.str = "catalog"
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1490
		{
			yyVAL.str = "chain"
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1491
		{
			yyVAL.str = "characteristics"
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1492
		{
			yyVAL.str = "check"
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1493
		{
			yyVAL.str = "checkpoint"
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1494
		{
			yyVAL.str = "class"
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1495
		{
			yyVAL.str = "close"
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1496
		{
			yyVAL.str = "cluster"
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1497
		{
			yyVAL.str = "coalesce"
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1498
		{
			yyVAL.str = "collate"
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1499
		{
			yyVAL.str = "collation"
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1500
		{
			yyVAL.str = "column"
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1501
		{
			yyVAL.str = "columns"
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1502
		{
			yyVAL.str = "comment"
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1503
		{
			yyVAL.str = "comments"
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1504
		{
			yyVAL.str = "commit"
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1505
		{
			yyVAL.str = "committed"
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1506
		{
			yyVAL.str = "compression"
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1507
		{
			yyVAL.str = "concurrently"
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1508
		{
			yyVAL.str = "conditional"
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1509
		{
			yyVAL.str = "configuration"
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1510
		{
			yyVAL.str = "conflict"
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1511
		{
			yyVAL.str = "connection"
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1512
		{
			yyVAL.str = "constraint"
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1513
		{
			yyVAL.str = "constraints"
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1514
		{
			yyVAL.str = "content"
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1515
		{
			yyVAL.str = "continue"
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1516
		{
			yyVAL.str = "conversion"
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1517
		{
			yyVAL.str = "copy"
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1518
		{
			yyVAL.str = "cost"
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1519
		{
			yyVAL.str = "cross"
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1520
		{
			yyVAL.str = "csv"
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1521
		{
			yyVAL.str = "cube"
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1522
		{
			yyVAL.str = "current"
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1523
		{
			yyVAL.str = "current_catalog"
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1524
		{
			yyVAL.str = "current_date"
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1525
		{
			yyVAL.str = "current_role"
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1526
		{
			yyVAL.str = "current_schema"
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1527
		{
			yyVAL.str = "current_time"
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1528
		{
			yyVAL.str = "current_timestamp"
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1529
		{
			yyVAL.str = "current_user"
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1530
		{
			yyVAL.str = "cursor"
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1531
		{
			yyVAL.str = "cycle"
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1532
		{
			yyVAL.str = "data"
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1533
		{
			yyVAL.str = "database"
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1534
		{
			yyVAL.str = "deallocate"
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1535
		{
			yyVAL.str = "dec"
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1536
		{
			yyVAL.str = "decimal"
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1537
		{
			yyVAL.str = "declare"
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1538
		{
			yyVAL.str = "default"
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1539
		{
			yyVAL.str = "defaults"
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1540
		{
			yyVAL.str = "deferrable"
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1541
		{
			yyVAL.str = "deferred"
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1542
		{
			yyVAL.str = "definer"
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1543
		{
			yyVAL.str = "delete"
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1544
		{
			yyVAL.str = "delimiter"
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1545
		{
			yyVAL.str = "delimiters"
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1546
		{
			yyVAL.str = "depends"
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1547
		{
			yyVAL.str = "depth"
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1548
		{
			yyVAL.str = "desc"
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1549
		{
			yyVAL.str = "detach"
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1550
		{
			yyVAL.str = "dictionary"
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1551
		{
			yyVAL.str = "disable"
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1552
		{
			yyVAL.str = "discard"
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1553
		{
			yyVAL.str = "distinct"
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1554
		{
			yyVAL.str = "do"
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1555
		{
			yyVAL.str = "document"
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1556
		{
			yyVAL.str = "domain"
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1557
		{
			yyVAL.str = "double"
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1558
		{
			yyVAL.str = "drop"
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1559
		{
			yyVAL.str = "each"
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1560
		{
			yyVAL.str = "else"
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1561
		{
			yyVAL.str = "empty"
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1562
		{
			yyVAL.str = "enable"
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1563
		{
			yyVAL.str = "encoding"
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1564
		{
			yyVAL.str = "encrypted"
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1565
		{
			yyVAL.str = "end"
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1566
		{
			yyVAL.str = "enum"
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1567
		{
			yyVAL.str = "error"
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1568
		{
			yyVAL.str = "escape"
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1569
		{
			yyVAL.str = "event"
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1570
		{
			yyVAL.str = "exclude"
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1571
		{
			yyVAL.str = "excluding"
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1572
		{
			yyVAL.str = "exclusive"
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1573
		{
			yyVAL.str = "execute"
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1574
		{
			yyVAL.str = "exists"
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1575
		{
			yyVAL.str = "explain"
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1576
		{
			yyVAL.str = "expression"
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1577
		{
			yyVAL.str = "extension"
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1578
		{
			yyVAL.str = "external"
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1579
		{
			yyVAL.str = "extract"
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1580
		{
			yyVAL.str = "false"
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1581
		{
			yyVAL.str = "family"
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1582
		{
			yyVAL.str = "finalize"
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1583
		{
			yyVAL.str = "first"
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1584
		{
			yyVAL.str = "float"
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1585
		{
			yyVAL.str = "following"
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1586
		{
			yyVAL.str = "force"
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1587
		{
			yyVAL.str = "foreign"
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1588
		{
			yyVAL.str = "format"
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1589
		{
			yyVAL.str = "forward"
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1590
		{
			yyVAL.str = "freeze"
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1591
		{
			yyVAL.str = "full"
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1592
		{
			yyVAL.str = "function"
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1593
		{
			yyVAL.str = "functions"
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1594
		{
			yyVAL.str = "generated"
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1595
		{
			yyVAL.str = "global"
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1596
		{
			yyVAL.str = "granted"
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1597
		{
			yyVAL.str = "greatest"
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1598
		{
			yyVAL.str = "grouping"
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1599
		{
			yyVAL.str = "groups"
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1600
		{
			yyVAL.str = "handler"
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1601
		{
			yyVAL.str = "header"
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1602
		{
			yyVAL.str = "hold"
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1603
		{
			yyVAL.str = "identity"
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1604
		{
			yyVAL.str = "if"
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1605
		{
			yyVAL.str = "ilike"
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1606
		{
			yyVAL.str = "immediate"
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1607
		{
			yyVAL.str = "immutable"
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1608
		{
			yyVAL.str = "implicit"
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1609
		{
			yyVAL.str = "import"
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1610
		{
			yyVAL.str = "in"
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1611
		{
			yyVAL.str = "include"
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1612
		{
			yyVAL.str = "including"
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1613
		{
			yyVAL.str = "increment"
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1614
		{
			yyVAL.str = "indent"
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1615
		{
			yyVAL.str = "index"
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1616
		{
			yyVAL.str = "indexes"
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1617
		{
			yyVAL.str = "inherit"
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1618
		{
			yyVAL.str = "inherits"
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1619
		{
			yyVAL.str = "initially"
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1620
		{
			yyVAL.str = "inline"
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1621
		{
			yyVAL.str = "inner"
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1622
		{
			yyVAL.str = "inout"
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1623
		{
			yyVAL.str = "input"
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1624
		{
			yyVAL.str = "insensitive"
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1625
		{
			yyVAL.str = "insert"
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1626
		{
			yyVAL.str = "instead"
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1627
		{
			yyVAL.str = "int"
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1628
		{
			yyVAL.str = "integer"
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1629
		{
			yyVAL.str = "interval"
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1630
		{
			yyVAL.str = "invoker"
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1631
		{
			yyVAL.str = "is"
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1632
		{
			yyVAL.str = "isolation"
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1633
		{
			yyVAL.str = "join"
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1634
		{
			yyVAL.str = "json"
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1635
		{
			yyVAL.str = "json_array"
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1636
		{
			yyVAL.str = "json_arrayagg"
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1637
		{
			yyVAL.str = "json_exists"
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1638
		{
			yyVAL.str = "json_object"
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1639
		{
			yyVAL.str = "json_objectagg"
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1640
		{
			yyVAL.str = "json_query"
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1641
		{
			yyVAL.str = "json_scalar"
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1642
		{
			yyVAL.str = "json_serialize"
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1643
		{
			yyVAL.str = "json_table"
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1644
		{
			yyVAL.str = "json_value"
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1645
		{
			yyVAL.str = "keep"
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1646
		{
			yyVAL.str = "key"
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1647
		{
			yyVAL.str = "keys"
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1648
		{
			yyVAL.str = "label"
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1649
		{
			yyVAL.str = "language"
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1650
		{
			yyVAL.str = "large"
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1651
		{
			yyVAL.str = "last"
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1652
		{
			yyVAL.str = "lateral"
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1653
		{
			yyVAL.str = "leading"
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1654
		{
			yyVAL.str = "leakproof"
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1655
		{
			yyVAL.str = "least"
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1656
		{
			yyVAL.str = "left"
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1657
		{
			yyVAL.str = "level"
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1658
		{
			yyVAL.str = "like"
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1659
		{
			yyVAL.str = "listen"
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1660
		{
			yyVAL.str = "load"
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1661
		{
			yyVAL.str = "local"
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1662
		{
			yyVAL.str = "localtime"
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1663
		{
			yyVAL.str = "localtimestamp"
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1664
		{
			yyVAL.str = "location"
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1665
		{
			yyVAL.str = "lock"
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1666
		{
			yyVAL.str = "locked"
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1667
		{
			yyVAL.str = "logged"
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1668
		{
			yyVAL.str = "mapping"
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1669
		{
			yyVAL.str = "match"
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1670
		{
			yyVAL.str = "matched"
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1671
		{
			yyVAL.str = "materialized"
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1672
		{
			yyVAL.str = "maxvalue"
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1673
		{
			yyVAL.str = "merge"
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1674
		{
			yyVAL.str = "merge_action"
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1675
		{
			yyVAL.str = "method"
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1676
		{
			yyVAL.str = "minvalue"
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1677
		{
			yyVAL.str = "mode"
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1678
		{
			yyVAL.str = "move"
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1679
		{
			yyVAL.str = "name"
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1680
		{
			yyVAL.str = "names"
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1681
		{
			yyVAL.str = "national"
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1682
		{
			yyVAL.str = "natural"
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1683
		{
			yyVAL.str = "nchar"
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1684
		{
			yyVAL.str = "nested"
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1685
		{
			yyVAL.str = "new"
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1686
		{
			yyVAL.str = "next"
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1687
		{
			yyVAL.str = "nfc"
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1688
		{
			yyVAL.str = "nfd"
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1689
		{
			yyVAL.str = "nfkc"
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1690
		{
			yyVAL.str = "nfkd"
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1691
		{
			yyVAL.str = "no"
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1692
		{
			yyVAL.str = "none"
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1693
		{
			yyVAL.str = "normalize"
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1694
		{
			yyVAL.str = "normalized"
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1695
		{
			yyVAL.str = "not"
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1696
		{
			yyVAL.str = "nothing"
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1697
		{
			yyVAL.str = "notify"
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1698
		{
			yyVAL.str = "nowait"
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1699
		{
			yyVAL.str = "null"
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1700
		{
			yyVAL.str = "nullif"
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1701
		{
			yyVAL.str = "nulls"
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1702
		{
			yyVAL.str = "numeric"
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1703
		{
			yyVAL.str = "object"
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1704
		{
			yyVAL.str = "of"
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1705
		{
			yyVAL.str = "off"
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1706
		{
			yyVAL.str = "oids"
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1707
		{
			yyVAL.str = "old"
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1708
		{
			yyVAL.str = "omit"
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1709
		{
			yyVAL.str = "only"
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1710
		{
			yyVAL.str = "operator"
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1711
		{
			yyVAL.str = "option"
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1712
		{
			yyVAL.str = "options"
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1713
		{
			yyVAL.str = "or"
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1714
		{
			yyVAL.str = "ordinality"
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1715
		{
			yyVAL.str = "others"
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1716
		{
			yyVAL.str = "out"
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1717
		{
			yyVAL.str = "outer"
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1718
		{
			yyVAL.str = "overlay"
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1719
		{
			yyVAL.str = "overriding"
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1720
		{
			yyVAL.str = "owned"
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1721
		{
			yyVAL.str = "owner"
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1722
		{
			yyVAL.str = "parallel"
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1723
		{
			yyVAL.str = "parameter"
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1724
		{
			yyVAL.str = "parser"
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1725
		{
			yyVAL.str = "partial"
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1726
		{
			yyVAL.str = "partition"
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1727
		{
			yyVAL.str = "passing"
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1728
		{
			yyVAL.str = "password"
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1729
		{
			yyVAL.str = "path"
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1730
		{
			yyVAL.str = "placing"
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1731
		{
			yyVAL.str = "plan"
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1732
		{
			yyVAL.str = "plans"
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1733
		{
			yyVAL.str = "policy"
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1734
		{
			yyVAL.str = "position"
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1735
		{
			yyVAL.str = "preceding"
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1736
		{
			yyVAL.str = "prepare"
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1737
		{
			yyVAL.str = "prepared"
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1738
		{
			yyVAL.str = "preserve"
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1739
		{
			yyVAL.str = "primary"
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1740
		{
			yyVAL.str = "prior"
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1741
		{
			yyVAL.str = "privileges"
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1742
		{
			yyVAL.str = "procedural"
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1743
		{
			yyVAL.str = "procedure"
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1744
		{
			yyVAL.str = "procedures"
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1745
		{
			yyVAL.str = "program"
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1746
		{
			yyVAL.str = "publication"
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1747
		{
			yyVAL.str = "quote"
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1748
		{
			yyVAL.str = "quotes"
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1749
		{
			yyVAL.str = "range"
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1750
		{
			yyVAL.str = "read"
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1751
		{
			yyVAL.str = "real"
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1752
		{
			yyVAL.str = "reassign"
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1753
		{
			yyVAL.str = "recheck"
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1754
		{
			yyVAL.str = "recursive"
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1755
		{
			yyVAL.str = "ref"
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1756
		{
			yyVAL.str = "references"
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1757
		{
			yyVAL.str = "referencing"
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1758
		{
			yyVAL.str = "refresh"
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1759
		{
			yyVAL.str = "reindex"
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1760
		{
			yyVAL.str = "relative"
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1761
		{
			yyVAL.str = "release"
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1762
		{
			yyVAL.str = "rename"
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1763
		{
			yyVAL.str = "repeatable"
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1764
		{
			yyVAL.str = "replace"
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1765
		{
			yyVAL.str = "replica"
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1766
		{
			yyVAL.str = "reset"
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1767
		{
			yyVAL.str = "restart"
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1768
		{
			yyVAL.str = "restrict"
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1769
		{
			yyVAL.str = "return"
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1770
		{
			yyVAL.str = "returns"
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1771
		{
			yyVAL.str = "revoke"
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1772
		{
			yyVAL.str = "right"
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1773
		{
			yyVAL.str = "role"
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1774
		{
			yyVAL.str = "rollback"
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1775
		{
			yyVAL.str = "rollup"
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1776
		{
			yyVAL.str = "routine"
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1777
		{
			yyVAL.str = "routines"
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1778
		{
			yyVAL.str = "row"
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1779
		{
			yyVAL.str = "rows"
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1780
		{
			yyVAL.str = "rule"
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1781
		{
			yyVAL.str = "savepoint"
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1782
		{
			yyVAL.str = "scalar"
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1783
		{
			yyVAL.str = "schema"
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1784
		{
			yyVAL.str = "schemas"
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1785
		{
			yyVAL.str = "scroll"
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1786
		{
			yyVAL.str = "search"
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1787
		{
			yyVAL.str = "security"
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1788
		{
			yyVAL.str = "select"
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1789
		{
			yyVAL.str = "sequence"
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1790
		{
			yyVAL.str = "sequences"
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1791
		{
			yyVAL.str = "serializable"
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1792
		{
			yyVAL.str = "server"
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1793
		{
			yyVAL.str = "session"
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1794
		{
			yyVAL.str = "session_user"
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1795
		{
			yyVAL.str = "set"
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1796
		{
			yyVAL.str = "setof"
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1797
		{
			yyVAL.str = "sets"
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1798
		{
			yyVAL.str = "share"
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1799
		{
			yyVAL.str = "show"
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1800
		{
			yyVAL.str = "similar"
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1801
		{
			yyVAL.str = "simple"
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1802
		{
			yyVAL.str = "skip"
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1803
		{
			yyVAL.str = "smallint"
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1804
		{
			yyVAL.str = "snapshot"
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1805
		{
			yyVAL.str = "some"
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1806
		{
			yyVAL.str = "source"
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1807
		{
			yyVAL.str = "sql"
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1808
		{
			yyVAL.str = "stable"
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1809
		{
			yyVAL.str = "standalone"
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1810
		{
			yyVAL.str = "start"
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1811
		{
			yyVAL.str = "statement"
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1812
		{
			yyVAL.str = "statistics"
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1813
		{
			yyVAL.str = "stdin"
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1814
		{
			yyVAL.str = "stdout"
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1815
		{
			yyVAL.str = "storage"
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1816
		{
			yyVAL.str = "stored"
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1817
		{
			yyVAL.str = "strict"
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1818
		{
			yyVAL.str = "string"
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1819
		{
			yyVAL.str = "strip"
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1820
		{
			yyVAL.str = "subscription"
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1821
		{
			yyVAL.str = "substring"
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1822
		{
			yyVAL.str = "support"
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1823
		{
			yyVAL.str = "symmetric"
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1824
		{
			yyVAL.str = "sysid"
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1825
		{
			yyVAL.str = "system"
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1826
		{
			yyVAL.str = "system_user"
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1827
		{
			yyVAL.str = "table"
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1828
		{
			yyVAL.str = "tables"
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1829
		{
			yyVAL.str = "tablesample"
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1830
		{
			yyVAL.str = "tablespace"
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1831
		{
			yyVAL.str = "target"
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1832
		{
			yyVAL.str = "temp"
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1833
		{
			yyVAL.str = "template"
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1834
		{
			yyVAL.str = "temporary"
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1835
		{
			yyVAL.str = "text"
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1836
		{
			yyVAL.str = "then"
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1837
		{
			yyVAL.str = "ties"
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1838
		{
			yyVAL.str = "time"
		}
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1839
		{
			yyVAL.str = "timestamp"
		}
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1840
		{
			yyVAL.str = "trailing"
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1841
		{
			yyVAL.str = "transaction"
		}
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1842
		{
			yyVAL.str = "transform"
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1843
		{
			yyVAL.str = "treat"
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1844
		{
			yyVAL.str = "trigger"
		}
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1845
		{
			yyVAL.str = "trim"
		}
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1846
		{
			yyVAL.str = "true"
		}
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1847
		{
			yyVAL.str = "truncate"
		}
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1848
		{
			yyVAL.str = "trusted"
		}
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1849
		{
			yyVAL.str = "type"
		}
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1850
		{
			yyVAL.str = "types"
		}
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1851
		{
			yyVAL.str = "uescape"
		}
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1852
		{
			yyVAL.str = "unbounded"
		}
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1853
		{
			yyVAL.str = "uncommitted"
		}
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1854
		{
			yyVAL.str = "unconditional"
		}
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1855
		{
			yyVAL.str = "unencrypted"
		}
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1856
		{
			yyVAL.str = "unique"
		}
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1857
		{
			yyVAL.str = "unknown"
		}
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1858
		{
			yyVAL.str = "unlisten"
		}
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1859
		{
			yyVAL.str = "unlogged"
		}
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1860
		{
			yyVAL.str = "until"
		}
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1861
		{
			yyVAL.str = "update"
		}
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1862
		{
			yyVAL.str = "user"
		}
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1863
		{
			yyVAL.str = "using"
		}
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1864
		{
			yyVAL.str = "vacuum"
		}
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1865
		{
			yyVAL.str = "valid"
		}
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1866
		{
			yyVAL.str = "validate"
		}
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1867
		{
			yyVAL.str = "validator"
		}
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1868
		{
			yyVAL.str = "value"
		}
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1869
		{
			yyVAL.str = "values"
		}
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1870
		{
			yyVAL.str = "varchar"
		}
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1871
		{
			yyVAL.str = "variadic"
		}
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1872
		{
			yyVAL.str = "verbose"
		}
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1873
		{
			yyVAL.str = "version"
		}
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1874
		{
			yyVAL.str = "view"
		}
	case 1047:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1875
		{
			yyVAL.str = "views"
		}
	case 1048:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1876
		{
			yyVAL.str = "volatile"
		}
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1877
		{
			yyVAL.str = "when"
		}
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1878
		{
			yyVAL.str = "whitespace"
		}
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1879
		{
			yyVAL.str = "work"
		}
	case 1052:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1880
		{
			yyVAL.str = "wrapper"
		}
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1881
		{
			yyVAL.str = "write"
		}
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1882
		{
			yyVAL.str = "xml"
		}
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1883
		{
			yyVAL.str = "xmlattributes"
		}
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1884
		{
			yyVAL.str = "xmlconcat"
		}
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1885
		{
			yyVAL.str = "xmlelement"
		}
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1886
		{
			yyVAL.str = "xmlexists"
		}
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1887
		{
			yyVAL.str = "xmlforest"
		}
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1888
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1889
		{
			yyVAL.str = "xmlparse"
		}
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1890
		{
			yyVAL.str = "xmlpi"
		}
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1891
		{
			yyVAL.str = "xmlroot"
		}
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1892
		{
			yyVAL.str = "xmlserialize"
		}
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1893
		{
			yyVAL.str = "xmltable"
		}
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1894
		{
			yyVAL.str = "yes"
		}
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1895
		{
			yyVAL.str = "zone"
		}
	case 1068:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1910
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1069:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1912
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1070:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1916
		{
			collateClause := ast.NewCollateClause(yyDollar[3].list)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 1071:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1922
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[1].node), 0)
		}
	case 1072:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1927
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[1].node), 0)
		}
	case 1073:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1932
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1074:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1937
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1075:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1942
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1076:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1947
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1077:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1952
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1078:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1957
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1079:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1962
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1080:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1967
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1081:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1972
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1082:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1977
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1083:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1982
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1084:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1987
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1085:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1992
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1086:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1997
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1087:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2002
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1088:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2006
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1089:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2010
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1090:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2014
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1091:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2018
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1092:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2022
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1093:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2026
		{
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1094:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2031
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1095:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2038
		{
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1096:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2043
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1097:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2050
		{
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1098:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2055
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1099:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2062
		{
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1100:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2067
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1101:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2074
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1102:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2081
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1103:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2088
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1104:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2095
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2102
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2106
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2110
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2114
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2118
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlaps"))
			leftList := yyDollar[1].list
			rightList := yyDollar[3].list
			combinedList := ast.NewNodeList()
			combinedList.Items = append(leftList.Items, rightList.Items...)
			yyVAL.node = ast.NewFuncCall(funcName, combinedList, 0)
		}
	case 1110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2127
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_TRUE)
		}
	case 1111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2131
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_TRUE)
		}
	case 1112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2135
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_FALSE)
		}
	case 1113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2139
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_FALSE)
		}
	case 1114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2143
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_UNKNOWN)
		}
	case 1115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2147
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_UNKNOWN)
		}
	case 1116:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2151
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1117:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2156
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1118:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2161
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1119:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2166
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1120:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2171
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1121:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2176
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2181
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2186
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2191
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			sublink := ast.NewSubLink(subLinkType, yyDollar[4].stmt)
			sublink.Testexpr = yyDollar[1].node
			sublink.OperName = operName
			yyVAL.node = sublink
		}
	case 1125:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2200
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			if subLinkType == ast.ANY_SUBLINK {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ANY, operName, yyDollar[1].node, yyDollar[5].node, 0)
			} else {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ALL, operName, yyDollar[1].node, yyDollar[5].node, 0)
			}
		}
	case 1126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2210
		{
			yylex.Error("UNIQUE predicate is not yet implemented")
		}
	case 1127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2214
		{
			args := []ast.Expression{yyDollar[1].node.(ast.Expression)}
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
		}
	case 1128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2219
		{
			args := []ast.Expression{yyDollar[1].node.(ast.Expression)}
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2225
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2231
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[3].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2238
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1132:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2245
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[4].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1133:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2253
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[3].ival)
			uniqueKeys := yyDollar[4].bval
			yyVAL.node = ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
		}
	case 1134:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2270
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[4].ival)
			uniqueKeys := yyDollar[5].bval
			jsonPredicate := ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(jsonPredicate))
		}
	case 1135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2289
		{
			yyVAL.node = ast.NewSetToDefault(0, 0, 0)
		}
	case 1136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2294
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2296
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2300
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2305
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2310
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2315
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2320
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2325
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2330
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2335
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2340
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2345
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2350
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2355
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2360
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2365
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2371
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2372
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2374
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 1155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2383
		{
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewParenExpr(ast.NewA_Indirection(yyDollar[2].node, yyDollar[4].list, 0), 0)
			} else {
				yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
			}
		}
	case 1156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2390
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2391
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2393
		{
			yyVAL.node = ast.NewExprSublink(yyDollar[1].stmt)
		}
	case 1159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2397
		{
			sublink := ast.NewExprSublink(yyDollar[1].stmt)
			yyVAL.node = ast.NewA_Indirection(sublink, yyDollar[2].list, 0)
		}
	case 1160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2402
		{
			yyVAL.node = ast.NewExistsSublink(yyDollar[2].stmt)
		}
	case 1161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2406
		{
			yyVAL.node = ast.NewArraySublink(yyDollar[2].stmt)
		}
	case 1162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2410
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2414
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = rowExpr
		}
	case 1164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2420
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_IMPLICIT_CAST
			yyVAL.node = rowExpr
		}
	case 1165:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2426
		{
			exprList := yyDollar[3].list
			grouping := &ast.GroupingFunc{
				BaseExpr: ast.BaseExpr{BaseNode: ast.BaseNode{Tag: ast.T_GroupingFunc}},
				Args:     exprList,
			}
			yyVAL.node = grouping
		}
	case 1166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2438
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 1167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2442
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 1168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2446
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 1169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2450
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 1170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2454
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 1171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2458
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 1172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2463
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2466
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2469
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2470
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 1176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2471
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 1177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2476
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 1178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2480
		{
			// Create all fields: first ColId followed by indirection items
			allFields := []ast.Node{ast.NewString(yyDollar[1].str)}
			allFields = append(allFields, yyDollar[2].list.Items...)
			yyVAL.node = ast.NewColumnRef(allFields...)
		}
	case 1179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2490
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2494
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2500
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2501
		{
			yyVAL.node = nil
		}
	case 1183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2505
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2509
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 1185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2513
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 1186:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2517
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 1187:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2522
		{
			yyVAL.list = nil
		}
	case 1188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2524
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2536
		{
			funcCall := yyDollar[1].node.(*ast.FuncCall)

			// Apply within_group_clause if present
			if yyDollar[2].list != nil {
				// WITHIN GROUP (ORDER BY ...) - store the sort list
				funcCall.AggOrder = yyDollar[2].list
				funcCall.AggWithinGroup = true
			}

			// Apply filter_clause if present
			if yyDollar[3].node != nil {
				// FILTER (WHERE condition) - store the filter expression
				funcCall.AggFilter = yyDollar[3].node
			}

			// Apply over_clause if present (window functions)
			if yyDollar[4].windef != nil {
				funcCall.Over = yyDollar[4].windef
			}

			yyVAL.node = funcCall
		}
	case 1190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2560
		{
			jsonAgg := yyDollar[1].node

			// Create or get the Constructor
			var constructor *ast.JsonAggConstructor

			// Handle the filter_clause and over_clause by setting them in the Constructor
			switch jsonFunc := jsonAgg.(type) {
			case *ast.JsonObjectAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			case *ast.JsonArrayAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			}

			// Set filter and over clauses outside the switch (DRY)
			if constructor != nil {
				if yyDollar[2].node != nil {
					constructor.AggFilter = yyDollar[2].node.(ast.Node)
				}
				if yyDollar[3].windef != nil {
					constructor.Over = yyDollar[3].windef
				}
			}

			yyVAL.node = jsonAgg
		}
	case 1191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2596
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2597
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2601
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2605
		{
			// PostgreSQL uses check_func_name here
			// We implement the logic inline - prepend ColId to indirection list
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[2].list.Items...)
			result := ast.NewNodeList(items...)
			yyVAL.list = result
		}
	case 1195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2616
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].list, nil, 0)
		}
	case 1196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2620
		{
			// Special case for aggregates like COUNT(*) - set AggStar to true
			funcCall := ast.NewFuncCall(yyDollar[1].list, nil, 0)
			funcCall.AggStar = true
			yyVAL.node = funcCall
		}
	case 1197:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2627
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[3].list, 0)
			// Note: In full implementation, would set agg_order from $4
			yyVAL.node = funcCall
		}
	case 1198:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2633
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, ast.NewNodeList(yyDollar[4].node), 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1199:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:2639
		{
			yyDollar[3].list.Append(yyDollar[6].node)
			args := yyDollar[3].list
			funcCall := ast.NewFuncCall(yyDollar[1].list, args, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $7
			yyVAL.node = funcCall
		}
	case 1200:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2647
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would mark as aggregate and set agg_order from $5
			yyVAL.node = funcCall
		}
	case 1201:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2653
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would set agg_distinct = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2661
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2665
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2672
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2676
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2680
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1207:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2687
		{
			yyVAL.node = ast.NewCaseExpr(0, yyDollar[2].node, yyDollar[3].list, yyDollar[4].node)
		}
	case 1208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2692
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1209:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2693
		{
			yyVAL.node = nil
		}
	case 1210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2697
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2699
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1212:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2707
		{
			yyVAL.node = ast.NewCaseWhen(yyDollar[2].node, yyDollar[4].node)
		}
	case 1213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2713
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1214:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2714
		{
			yyVAL.node = nil
		}
	case 1215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2719
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2723
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2727
		{
			yyVAL.node = ast.NewArrayConstructor(ast.NewNodeList())
		}
	case 1218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2732
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2734
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1220:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2741
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2742
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1222:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2744
		{
			nodeList := yyDollar[2].list
			nodeList.Append(yyDollar[4].node)
			yyVAL.list = nodeList
		}
	case 1223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2751
		{
			yyVAL.node = yyDollar[3].list
		}
	case 1224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2752
		{
			yyVAL.node = ast.NewNodeList()
		}
	case 1225:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2756
		{
			yyDollar[2].list.Append(yyDollar[4].node)
			yyVAL.node = yyDollar[2].list
		}
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2762
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2763
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2764
		{
			yyVAL.ival = int(ast.ALL_SUBLINK)
		}
	case 1229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2769
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2773
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2777
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~"))
		}
	case 1232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2781
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~"))
		}
	case 1233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2785
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~*"))
		}
	case 1234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2789
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~*"))
		}
	case 1235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2795
		{
			yyVAL.str = "NFC"
		}
	case 1236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2796
		{
			yyVAL.str = "NFD"
		}
	case 1237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2797
		{
			yyVAL.str = "NFKC"
		}
	case 1238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2798
		{
			yyVAL.str = "NFKD"
		}
	case 1239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2802
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2803
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2804
		{
			yyVAL.ival = int(ast.JS_TYPE_ARRAY)
		}
	case 1242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2805
		{
			yyVAL.ival = int(ast.JS_TYPE_OBJECT)
		}
	case 1243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2806
		{
			yyVAL.ival = int(ast.JS_TYPE_SCALAR)
		}
	case 1244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2810
		{
			yyVAL.bval = true
		}
	case 1245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2811
		{
			yyVAL.bval = true
		}
	case 1246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2812
		{
			yyVAL.bval = false
		}
	case 1247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2813
		{
			yyVAL.bval = false
		}
	case 1248:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2814
		{
			yyVAL.bval = false
		}
	case 1249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2819
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2823
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2832
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2837
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2838
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2839
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2840
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2841
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2844
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2845
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2846
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2849
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2852
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2856
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[2].str))
		}
	case 1263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2860
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2867
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1265:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2871
		{
			yyVAL.list = nil
		}
	case 1266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2877
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2883
		{
			// Create qualified type name from name + attrs
			name := ast.NewString(yyDollar[1].str)
			names := &ast.NodeList{Items: append([]ast.Node{name}, yyDollar[2].list.Items...)}
			typeName := makeTypeNameFromNodeList(names)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2894
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2898
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2902
		{
			yyVAL.typnam = makeTypeNameFromString("int2")
		}
	case 1271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2906
		{
			yyVAL.typnam = makeTypeNameFromString("int8")
		}
	case 1272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2910
		{
			yyVAL.typnam = makeTypeNameFromString("float4")
		}
	case 1273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2914
		{
			yyVAL.typnam = yyDollar[2].typnam
		}
	case 1274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2918
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2922
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
		}
	case 1276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2926
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
		}
	case 1277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2930
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
		}
	case 1278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2934
		{
			yyVAL.typnam = makeTypeNameFromString("bool")
		}
	case 1279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2940
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2944
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2950
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2954
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2960
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2968
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2976
		{
			yyVAL.str = "varchar"
		}
	case 1286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2980
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2988
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2996
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3006
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Set typmods with the length parameter, similar to PostgreSQL's approach
			lengthConst := ast.NewInteger(int(yyDollar[3].ival))
			typeName.Typmods = ast.NewNodeList()
			typeName.Typmods.Append(lengthConst)
			yyVAL.typnam = typeName
		}
	case 1290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3017
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// CHAR defaults to CHAR(1)
				lengthConst := ast.NewInteger(1)
				typeName.Typmods = ast.NewNodeList()
				typeName.Typmods.Append(lengthConst)
			}
			yyVAL.typnam = typeName
		}
	case 1291:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3031
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3043
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1293:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3055
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3065
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1295:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3075
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3085
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3096
		{
			yyVAL.ival = 1
		}
	case 1298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3097
		{
			yyVAL.ival = 0
		}
	case 1299:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3098
		{
			yyVAL.ival = 0
		}
	case 1300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3101
		{
			yyVAL.ival = 1
		}
	case 1301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3102
		{
			yyVAL.ival = 0
		}
	case 1302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3106
		{
			if yyDollar[2].ival < 1 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else if yyDollar[2].ival <= 7 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else {
				yyVAL.typnam = makeTypeNameFromString("float8")
			}
		}
	case 1303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3116
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3123
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1305:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3127
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3134
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1307:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3138
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3143
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3144
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3147
		{
			yyVAL.str = "+"
		}
	case 1311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3148
		{
			yyVAL.str = "-"
		}
	case 1312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3149
		{
			yyVAL.str = "*"
		}
	case 1313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3150
		{
			yyVAL.str = "/"
		}
	case 1314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3151
		{
			yyVAL.str = "%"
		}
	case 1315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3152
		{
			yyVAL.str = "^"
		}
	case 1316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3153
		{
			yyVAL.str = "<"
		}
	case 1317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3154
		{
			yyVAL.str = ">"
		}
	case 1318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3155
		{
			yyVAL.str = "="
		}
	case 1319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3156
		{
			yyVAL.str = "<="
		}
	case 1320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3157
		{
			yyVAL.str = ">="
		}
	case 1321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3158
		{
			yyVAL.str = "<>"
		}
	case 1322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3162
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3166
		{
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[3].list.Items...)
			yyVAL.list = ast.NewNodeList(items...)
		}
	case 1324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3175
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3176
		{
			yyVAL.list = nil
		}
	case 1326:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3181
		{
			// WITHIN GROUP (ORDER BY ...) for ordered-set aggregates
			yyVAL.list = yyDollar[4].list
		}
	case 1327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3185
		{
			yyVAL.list = nil
		}
	case 1328:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3190
		{
			// FILTER (WHERE condition) for aggregate filtering
			yyVAL.node = yyDollar[4].node
		}
	case 1329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3194
		{
			yyVAL.node = nil
		}
	case 1330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3198
		{
			yyVAL.ival = 0
		}
	case 1331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3199
		{
			yyVAL.ival = 0
		}
	case 1332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3203
		{
			subLink := ast.NewSubLink(ast.ANY_SUBLINK, yyDollar[1].stmt.(*ast.SelectStmt))
			yyVAL.node = subLink
		}
	case 1333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3208
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3223
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3224
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3228
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3233
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3234
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3243
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3244
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3253
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3255
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			// Use NodeList directly for SortClause
			selectStmt.SortClause = yyDollar[2].list
			yyVAL.stmt = selectStmt
		}
	case 1343:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3262
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			selectStmt.LockingClause = yyDollar[3].list // Set the locking clause
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1344:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3274
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			if yyDollar[3].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[3].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[3].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[3].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3286
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			yyVAL.stmt = selectStmt
		}
	case 1346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3292
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			yyVAL.stmt = selectStmt
		}
	case 1347:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3299
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			if yyDollar[5].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[5].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[5].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[5].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1348:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3312
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[5].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3331
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3332
		{
			yyVAL.list = nil
		}
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3336
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3337
		{
			yyVAL.list = nil
		}
	case 1353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3342
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3346
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3354
		{
			lockingClause := &ast.LockingClause{
				BaseNode:   ast.BaseNode{Tag: ast.T_LockingClause},
				Strength:   ast.LockClauseStrength(yyDollar[1].ival),
				LockedRels: yyDollar[2].list, // Store as *NodeList directly
				WaitPolicy: ast.LockWaitPolicy(yyDollar[3].ival),
			}
			yyVAL.node = lockingClause
		}
	case 1356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3366
		{
			yyVAL.ival = int(ast.LCS_FORUPDATE)
		}
	case 1357:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3367
		{
			yyVAL.ival = int(ast.LCS_FORNOKEYUPDATE)
		}
	case 1358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3368
		{
			yyVAL.ival = int(ast.LCS_FORSHARE)
		}
	case 1359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3369
		{
			yyVAL.ival = int(ast.LCS_FORKEYSHARE)
		}
	case 1360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3373
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1361:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3374
		{
			yyVAL.list = nil
		}
	case 1362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3379
		{
			yyVAL.ival = int(ast.LockWaitError)
		}
	case 1363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3380
		{
			yyVAL.ival = int(ast.LockWaitSkip)
		}
	case 1364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3381
		{
			yyVAL.ival = int(ast.LockWaitBlock)
		}
	case 1365:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3392
		{
			selectStmt := ast.NewSelectStmt()
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1366:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3411
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].list
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3429
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = ast.NewNodeList(starTarget)
			selectStmt.FromClause = ast.NewNodeList(yyDollar[2].rangevar)
			yyVAL.stmt = selectStmt
		}
	case 1368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3439
		{
			// VALUES clause is a SelectStmt with ValuesLists
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3450
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1370:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3451
		{
			yyVAL.list = nil
		}
	case 1371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3455
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3456
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3461
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3465
		{
			// Implicit alias (no AS keyword)
			yyVAL.target = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 1375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3470
		{
			// No alias - use default naming
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3475
		{
			// SELECT * - all columns
			yyVAL.target = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 1377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3486
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3487
		{
			yyVAL.list = nil
		}
	case 1379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3491
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3492
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3501
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeVar
		}
	case 1382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3509
		{
			/* Subquery in FROM clause */
			subquery := yyDollar[1].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[2].alias != nil {
				alias = yyDollar[2].alias
			}
			rangeSubselect := ast.NewRangeSubselect(false, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3520
		{
			/* LATERAL subquery in FROM clause */
			subquery := yyDollar[2].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[3].alias != nil {
				alias = yyDollar[3].alias
			}
			rangeSubselect := ast.NewRangeSubselect(true, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3531
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1385:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3535
		{
			joinExpr := yyDollar[2].node.(*ast.JoinExpr)
			joinExpr.Alias = yyDollar[4].alias
			yyVAL.node = joinExpr
		}
	case 1386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3541
		{
			rangeFunc := yyDollar[1].node.(*ast.RangeFunction)
			if yyDollar[2].alias != nil {
				rangeFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeFunc
		}
	case 1387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3549
		{
			rangeFunc := yyDollar[2].node.(*ast.RangeFunction)
			rangeFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeFunc
		}
	case 1388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3558
		{
			rangeTableFunc := yyDollar[1].node.(*ast.RangeTableFunc)
			if yyDollar[2].alias != nil {
				rangeTableFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3566
		{
			rangeTableFunc := yyDollar[2].node.(*ast.RangeTableFunc)
			rangeTableFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeTableFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3575
		{
			jsonTable := yyDollar[1].node.(*ast.JsonTable)
			if yyDollar[2].alias != nil {
				jsonTable.Alias = yyDollar[2].alias
			}
			yyVAL.node = jsonTable
		}
	case 1391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3583
		{
			jsonTable := yyDollar[2].node.(*ast.JsonTable)
			jsonTable.Lateral = true
			if yyDollar[3].alias != nil {
				jsonTable.Alias = yyDollar[3].alias
			}
			yyVAL.node = jsonTable
		}
	case 1392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3595
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.rangevar = rangeVar
		}
	case 1393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3601
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3608
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.rangevar = rangeVar
		}
	case 1395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3614
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1396:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3620
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3630
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3634
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3640
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3657
		{
			yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
		}
	case 1401:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3661
		{
			/* CROSS JOIN is same as unqualified inner join */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewJoinExpr(ast.JOIN_INNER, left, right, nil)
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1402:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3670
		{
			left := yyDollar[1].node
			right := yyDollar[4].node
			joinType := ast.JoinType(yyDollar[2].ival)
			joinQual := yyDollar[5].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(joinType, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(joinType, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1403:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3696
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[3].node
			joinQual := yyDollar[4].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(ast.JOIN_INNER, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(ast.JOIN_INNER, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1404:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3722
		{
			left := yyDollar[1].node
			right := yyDollar[5].node
			joinType := ast.JoinType(yyDollar[3].ival)
			join := ast.NewNaturalJoinExpr(joinType, left, right)
			yyVAL.node = join
		}
	case 1405:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3730
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewNaturalJoinExpr(ast.JOIN_INNER, left, right)
			yyVAL.node = join
		}
	case 1406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3740
		{
			yyVAL.ival = int(ast.JOIN_FULL)
		}
	case 1407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3741
		{
			yyVAL.ival = int(ast.JOIN_LEFT)
		}
	case 1408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3742
		{
			yyVAL.ival = int(ast.JOIN_RIGHT)
		}
	case 1409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3743
		{
			yyVAL.ival = int(ast.JOIN_INNER)
		}
	case 1410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3748
		{
			yyVAL.ival = 1
		}
	case 1411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3749
		{
			yyVAL.ival = 0
		}
	case 1412:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3759
		{
			/* Create a two-element list: [name_list, alias_or_null] following PostgreSQL */
			nameList := yyDollar[3].list
			var aliasNode ast.Node = nil
			if yyDollar[5].alias != nil {
				aliasNode = yyDollar[5].alias
			}
			usingList := ast.NewNodeList(nameList, aliasNode)
			yyVAL.node = usingList
		}
	case 1413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3770
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3781
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3785
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3789
		{
			yyVAL.with = ast.NewWithClause(yyDollar[3].list, true, 0)
		}
	case 1417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3795
		{
			yyVAL.with = yyDollar[1].with
		}
	case 1418:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3796
		{
			yyVAL.with = nil
		}
	case 1419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3801
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3805
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1421:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3813
		{
			ctename := yyDollar[1].str
			query := yyDollar[6].stmt
			cte := ast.NewCommonTableExpr(ctename, query)

			// Set column names if provided
			if yyDollar[2].list != nil {
				cte.Aliascolnames = yyDollar[2].list
			}

			// Set materialized option
			cte.Ctematerialized = ast.CTEMaterialized(yyDollar[4].ival)

			// Set search clause if provided
			if yyDollar[8].node != nil {
				cte.SearchClause = yyDollar[8].node.(*ast.CTESearchClause)
			}

			// Set cycle clause if provided
			if yyDollar[9].node != nil {
				cte.CycleClause = yyDollar[9].node.(*ast.CTECycleClause)
			}

			yyVAL.node = cte
		}
	case 1422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3841
		{
			yyVAL.ival = int(ast.CTEMaterializeAlways)
		}
	case 1423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3842
		{
			yyVAL.ival = int(ast.CTEMaterializeNever)
		}
	case 1424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3843
		{
			yyVAL.ival = int(ast.CTEMaterializeDefault)
		}
	case 1425:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3848
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, false, seqColumn)
		}
	case 1426:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3854
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, true, seqColumn)
		}
	case 1427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3860
		{
			yyVAL.node = nil
		}
	case 1428:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:3867
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			markValue := yyDollar[6].node.(ast.Expression)
			markDefault := yyDollar[8].node.(ast.Expression)
			pathColumn := yyDollar[10].str
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, markValue, markDefault, pathColumn)
		}
	case 1429:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3876
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			pathColumn := yyDollar[6].str
			// For simple CYCLE clause, use nil for mark values to avoid TO/DEFAULT in deparsing
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, nil, nil, pathColumn)
		}
	case 1430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3884
		{
			yyVAL.node = nil
		}
	case 1431:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3895
		{
			/* Create a SelectStmt with VALUES clause following PostgreSQL */
			selectStmt := ast.NewSelectStmt()
			exprList := yyDollar[3].list
			selectStmt.ValuesLists = ast.NewNodeList(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1432:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3903
		{
			/* Add additional VALUES row to existing SelectStmt */
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			exprList := yyDollar[4].list
			selectStmt.ValuesLists.Append(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3917
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1434:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3918
		{
			yyVAL.node = nil
		}
	case 1435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3926
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1436:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3928
		{
			cursorExpr := ast.NewCurrentOfExpr(0, yyDollar[4].str) // cvarno filled in by parse analysis
			yyVAL.node = cursorExpr
		}
	case 1437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3932
		{
			yyVAL.node = nil
		}
	case 1438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3936
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3944
		{
			yyVAL.alias = yyDollar[1].alias
		}
	case 1440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3945
		{
			yyVAL.alias = nil
		}
	case 1441:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3950
		{
			nameList := yyDollar[4].list
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nameList)
		}
	case 1442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3955
		{
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 1443:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3959
		{
			nameList := yyDollar[3].list
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nameList)
		}
	case 1444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3964
		{
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 1445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3972
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.alias = alias
		}
	case 1446:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3976
		{
			yyVAL.alias = nil
		}
	case 1447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3984
		{
			yyVAL.ival = 1
		}
	case 1448:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3985
		{
			yyVAL.ival = 0
		}
	case 1449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3989
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1450:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3990
		{
			yyVAL.list = yyDollar[4].list
		}
	case 1451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3994
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1452:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3995
		{
			yyVAL.list = nil
		}
	case 1453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4005
		{
			yyVAL.into = ast.NewIntoClause(yyDollar[2].node.(*ast.RangeVar), nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 1454:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4008
		{
			yyVAL.into = nil
		}
	case 1455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4019
		{
			hasOrdinality := yyDollar[2].ival == 1
			// For a simple function, create a NodeList containing a single NodeList with the function
			funcList := ast.NewNodeList(yyDollar[1].node)
			functions := ast.NewNodeList(funcList)
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, false, functions, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1456:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4028
		{
			hasOrdinality := yyDollar[6].ival == 1
			// rowsfrom_list is already a NodeList containing NodeLists
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, true, yyDollar[4].list, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4038
		{
			yyVAL.ival = 1
		}
	case 1458:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4039
		{
			yyVAL.ival = 0
		}
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4045
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 1460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4049
		{
			yyDollar[1].list.Append(yyDollar[3].list)
			yyVAL.list = yyDollar[1].list
		}
	case 1461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4056
		{
			funcList := ast.NewNodeList(yyDollar[1].node)
			if yyDollar[2].list != nil {
				funcList.Append(yyDollar[2].list)
			}
			yyVAL.list = funcList
		}
	case 1462:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4065
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1463:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4066
		{
			yyVAL.list = nil
		}
	case 1464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4076
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 1465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4080
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 1466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4092
		{
			yyVAL.funparam = &ast.FunctionParameter{
				BaseNode: ast.BaseNode{Tag: ast.T_FunctionParameter},
				Name:     yyDollar[1].str,
				ArgType:  yyDollar[2].typnam,
				Mode:     ast.FUNC_PARAM_TABLE,
				DefExpr:  nil,
			}
		}
	case 1467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4105
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4106
		{
			yyVAL.list = nil
		}
	case 1469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4112
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4116
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4125
		{
			columnDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			// Note: opt_collate_clause support can be added when needed
			// PostgreSQL sets: n->collClause = (CollateClause *) $3;
			yyVAL.node = columnDef
		}
	case 1472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4136
		{
			// Pass the NodeList directly to NewCollateClause
			nameList := yyDollar[2].list
			yyVAL.node = ast.NewCollateClause(nameList)
		}
	case 1473:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4141
		{
			yyVAL.node = nil
		}
	case 1474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4146
		{
			yyVAL.str = "BY REF"
		}
	case 1475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4147
		{
			yyVAL.str = "BY VALUE"
		}
	case 1476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4153
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4157
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4161
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1479:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4165
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4173
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4177
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4185
		{
			target := ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
			yyVAL.node = target
		}
	case 1483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4190
		{
			target := ast.NewResTarget("", yyDollar[2].node)
			yyVAL.node = target
		}
	case 1484:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4199
		{
			// XMLTABLE(xpath_expr PASSING doc_expr COLUMNS ...)
			// $3 is xpath_expr (should be RowExpr), $4 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[4].node.(ast.Expression), yyDollar[3].node.(ast.Expression), nil, yyDollar[6].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1485:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:4207
		{
			// XMLTABLE(XMLNAMESPACES(...), xpath_expr PASSING doc_expr COLUMNS ...)
			// $8 is xpath_expr (should be RowExpr), $9 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[9].node.(ast.Expression), yyDollar[8].node.(ast.Expression), yyDollar[5].list, yyDollar[11].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4218
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4222
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4231
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4236
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, nil, true, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4241
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			// TODO: Process column options from $3
			yyVAL.node = rangeTableFuncCol
		}
	case 1491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4251
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4255
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4264
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4268
		{
			yyVAL.node = ast.NewDefElem("default", yyDollar[2].node)
		}
	case 1495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4272
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(true))
		}
	case 1496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4276
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(false))
		}
	case 1497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4280
		{
			yyVAL.node = ast.NewDefElem("path", yyDollar[2].node)
		}
	case 1498:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:4293
		{
			// Extract path name from optional path name node
			var pathName string
			if yyDollar[6].node != nil {
				if strNode, ok := yyDollar[6].node.(*ast.String); ok {
					pathName = strNode.SVal
				}
			}

			// Create JsonTablePathSpec from the a_expr (path expression) and optional path name
			pathSpec := ast.NewJsonTablePathSpec(yyDollar[5].node, pathName, 0)

			// Create JsonTable with context item and path spec
			jsonTable := ast.NewJsonTable(yyDollar[3].node.(*ast.JsonValueExpr), pathSpec)
			if yyDollar[10].list != nil {
				jsonTable.Columns = yyDollar[10].list
			}
			yyVAL.node = jsonTable
		}
	case 1499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4317
		{
			var format *ast.JsonFormat
			if yyDollar[2].node != nil {
				format = yyDollar[2].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonValueExpr(yyDollar[1].node, format)
		}
	case 1500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4328
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1501:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4329
		{
			yyVAL.node = nil
		}
	case 1502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4334
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1503:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4335
		{
			yyVAL.node = nil
		}
	case 1504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4339
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4340
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4345
		{
			jsonArg := ast.NewJsonArgument(yyDollar[1].node.(*ast.JsonValueExpr), yyDollar[3].str)
			yyVAL.node = jsonArg
		}
	case 1507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4351
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4352
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4358
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4362
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4374
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4378
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4385
		{
			yyVAL.bval = false
		}
	case 1514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4386
		{
			yyVAL.bval = true
		}
	case 1515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4387
		{
			yyVAL.bval = false
		}
	case 1516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4391
		{
			yyVAL.bval = false
		}
	case 1517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4392
		{
			yyVAL.bval = true
		}
	case 1518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4393
		{
			yyVAL.bval = true
		}
	case 1519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4398
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1520:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4399
		{
			yyVAL.list = nil
		}
	case 1521:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4410
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)

			yyVAL.node = ast.NewJsonObjectAgg(constructor, yyDollar[3].node.(*ast.JsonKeyValue), yyDollar[4].bval, yyDollar[5].bval)
		}
	case 1522:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4425
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)
			constructor.AggOrder = yyDollar[4].list
			yyVAL.node = ast.NewJsonArrayAgg(constructor, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].bval)
		}
	case 1523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4438
		{
			var jsonFormat *ast.JsonFormat
			if yyDollar[3].node != nil {
				jsonFormat = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonOutput(yyDollar[2].typnam, ast.NewJsonReturning(jsonFormat, 0, 0))
		}
	case 1524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4445
		{
			yyVAL.node = nil
		}
	case 1525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4451
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JSON_BEHAVIOR_DEFAULT,
				Expr:     yyDollar[2].node,
			}
		}
	case 1526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4459
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JsonBehaviorType(yyDollar[1].ival),
				Expr:     nil,
			}
		}
	case 1527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4470
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_ERROR)
		}
	case 1528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4471
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_NULL)
		}
	case 1529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4472
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_TRUE)
		}
	case 1530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4473
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_FALSE)
		}
	case 1531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4474
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_UNKNOWN)
		}
	case 1532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4475
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_ARRAY)
		}
	case 1533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4476
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_OBJECT)
		}
	case 1534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4477
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY)
		}
	case 1535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4482
		{
			// Return a list with ON EMPTY behavior and nil for ON ERROR
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, nil}}
		}
	case 1536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4486
		{
			// Return a list with nil for ON EMPTY and ON ERROR behavior
			yyVAL.node = &ast.NodeList{Items: []ast.Node{nil, yyDollar[1].node}}
		}
	case 1537:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4490
		{
			// Return a list with both ON EMPTY and ON ERROR behaviors
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, yyDollar[4].node}}
		}
	case 1538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4494
		{
			yyVAL.node = nil
		}
	case 1539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4499
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4500
		{
			yyVAL.node = nil
		}
	case 1541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4505
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4506
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4507
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4508
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1545:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4509
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1546:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4510
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4511
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4512
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1549:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4513
		{
			yyVAL.ival = int(ast.JSW_UNSPEC)
		}
	case 1550:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4518
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4519
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1552:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4520
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4521
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1554:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4522
		{
			yyVAL.ival = int(ast.JS_QUOTES_UNSPEC)
		}
	case 1555:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4528
		{
			// Parse the encoding name and map to JsonEncoding constant
			var encoding ast.JsonEncoding
			switch yyDollar[4].str {
			case "utf8":
				encoding = ast.JS_ENC_UTF8
			case "utf16":
				encoding = ast.JS_ENC_UTF16
			case "utf32":
				encoding = ast.JS_ENC_UTF32
			default:
				encoding = ast.JS_ENC_DEFAULT
			}
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   encoding,
			}
		}
	case 1556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4548
		{
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   ast.JS_ENC_DEFAULT,
			}
		}
	case 1557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4558
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4559
		{
			yyVAL.node = nil
		}
	case 1559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4564
		{
			yyVAL.node = ast.NewString("path")
		}
	case 1560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4565
		{
			yyVAL.node = nil
		}
	case 1561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4571
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4575
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4584
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FOR_ORDINALITY, yyDollar[1].str)
			yyVAL.node = jsonTableCol
		}
	case 1564:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4593
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_REGULAR, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[3].node != nil {
				strNode := yyDollar[3].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1565:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4607
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FORMATTED, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			if yyDollar[3].node != nil {
				jsonTableCol.Format = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = jsonTableCol
		}
	case 1566:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4621
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_EXISTS, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1567:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4632
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, "")
			jsonTableCol.Columns = yyDollar[6].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1568:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4641
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, yyDollar[5].str)
			jsonTableCol.Columns = yyDollar[8].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4652
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4653
		{
			yyVAL.node = nil
		}
	case 1571:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4669
		{
			insertStmt := yyDollar[5].node.(*ast.InsertStmt)
			insertStmt.Relation = yyDollar[4].rangevar
			insertStmt.WithClause = yyDollar[1].with
			insertStmt.OnConflictClause = yyDollar[6].onconflict
			insertStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = insertStmt
		}
	case 1572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4681
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4685
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4694
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.SelectStmt = yyDollar[1].stmt
			yyVAL.node = insertStmt
		}
	case 1575:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4700
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Override = ast.OverridingKind(yyDollar[2].ival)
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4707
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1577:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4714
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.Override = ast.OverridingKind(yyDollar[5].ival)
			insertStmt.SelectStmt = yyDollar[7].stmt
			yyVAL.node = insertStmt
		}
	case 1578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4722
		{
			insertStmt := ast.NewInsertStmt(nil)
			// For DEFAULT VALUES, SelectStmt should be nil
			insertStmt.SelectStmt = nil
			yyVAL.node = insertStmt
		}
	case 1579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4731
		{
			yyVAL.ival = int(ast.OVERRIDING_USER_VALUE)
		}
	case 1580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4732
		{
			yyVAL.ival = int(ast.OVERRIDING_SYSTEM_VALUE)
		}
	case 1581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4737
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4741
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4749
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1584:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:4761
		{
			updateStmt := ast.NewUpdateStmt(yyDollar[3].rangevar)
			updateStmt.WithClause = yyDollar[1].with
			updateStmt.TargetList = yyDollar[5].list
			updateStmt.FromClause = yyDollar[6].list
			updateStmt.WhereClause = yyDollar[7].node
			updateStmt.ReturningList = yyDollar[8].list
			yyVAL.stmt = updateStmt
		}
	case 1585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4774
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4778
		{
			// Concatenate the lists - equivalent to PostgreSQL's list_concat
			for _, item := range yyDollar[3].list.Items {
				yyDollar[1].list.Append(item)
			}
			yyVAL.list = yyDollar[1].list
		}
	case 1587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4789
		{
			target := yyDollar[1].target
			target.Val = yyDollar[3].node
			yyVAL.list = ast.NewNodeList(target)
		}
	case 1588:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4795
		{
			// Multi-column assignment: (col1, col2) = (val1, val2)
			// Create MultiAssignRef nodes for each target, matching PostgreSQL exactly
			targetList := yyDollar[2].list
			ncolumns := len(targetList.Items)

			// Create a MultiAssignRef source for each target
			for i, item := range targetList.Items {
				resCol := item.(*ast.ResTarget)
				multiAssignRef := ast.NewMultiAssignRef(yyDollar[5].node, i+1, ncolumns, 0)
				resCol.Val = multiAssignRef
			}

			// Return the entire target list
			yyVAL.list = targetList
		}
	case 1589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4815
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4821
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4822
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1592:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4832
		{
			deleteStmt := ast.NewDeleteStmt(yyDollar[4].rangevar)
			deleteStmt.WithClause = yyDollar[1].with
			deleteStmt.UsingClause = yyDollar[5].list
			deleteStmt.WhereClause = yyDollar[6].node
			deleteStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = deleteStmt
		}
	case 1593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4844
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4848
		{
			yyVAL.list = nil
		}
	case 1595:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:4863
		{
			mergeStmt := &ast.MergeStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_MergeStmt},
			}
			mergeStmt.WithClause = yyDollar[1].with
			mergeStmt.Relation = yyDollar[4].rangevar
			mergeStmt.SourceRelation = yyDollar[6].node
			mergeStmt.JoinCondition = yyDollar[8].node
			mergeStmt.MergeWhenClauses = yyDollar[9].list
			mergeStmt.ReturningList = yyDollar[10].list
			yyVAL.stmt = mergeStmt
		}
	case 1596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4880
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4884
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1598:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4895
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Query:     yyDollar[3].stmt,
				IsFrom:    false,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Initialize Options as empty NodeList
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[9].list != nil {
				nodeList := yyDollar[9].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			yyVAL.stmt = copyStmt
		}
	case 1599:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:4919
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Relation:  yyDollar[3].rangevar,
				IsFrom:    yyDollar[5].ival != 0,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Assign column list directly as NodeList
			copyStmt.Attlist = yyDollar[4].list

			// Initialize Options as empty NodeList and add options
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[2].node != nil {
				copyStmt.Options.Append(yyDollar[2].node)
			}
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[10].list != nil {
				nodeList := yyDollar[10].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			if yyDollar[11].node != nil {
				copyStmt.WhereClause = yyDollar[11].node
			}
			yyVAL.stmt = copyStmt
		}
	case 1600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4955
		{
			yyVAL.ival = 1
		}
	case 1601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4956
		{
			yyVAL.ival = 0
		}
	case 1602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4960
		{
			yyVAL.ival = 1
		}
	case 1603:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4961
		{
			yyVAL.ival = 0
		}
	case 1604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4965
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4966
		{
			yyVAL.str = ""
		}
	case 1606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4967
		{
			yyVAL.str = ""
		}
	case 1607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4972
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1608:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4975
		{
			yyVAL.node = nil
		}
	case 1609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4980
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1610:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4983
		{
			yyVAL.node = nil
		}
	case 1611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4987
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4988
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4993
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1614:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5001
		{
			yyVAL.list = nil
		}
	case 1615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5008
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5012
		{
			yyVAL.node = ast.NewDefElem("freeze", ast.NewString("true"))
		}
	case 1617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5016
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5020
		{
			yyVAL.node = ast.NewDefElem("null", ast.NewString(yyDollar[3].str))
		}
	case 1619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5024
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("csv"))
		}
	case 1620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5028
		{
			yyVAL.node = ast.NewDefElem("header", ast.NewString("true"))
		}
	case 1621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5032
		{
			yyVAL.node = ast.NewDefElem("quote", ast.NewString(yyDollar[3].str))
		}
	case 1622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5036
		{
			yyVAL.node = ast.NewDefElem("escape", ast.NewString(yyDollar[3].str))
		}
	case 1623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5040
		{
			yyVAL.node = ast.NewDefElem("force_quote", yyDollar[3].list)
		}
	case 1624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5044
		{
			yyVAL.node = ast.NewDefElem("force_quote", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1625:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5048
		{
			yyVAL.node = ast.NewDefElem("force_not_null", yyDollar[4].list)
		}
	case 1626:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5052
		{
			yyVAL.node = ast.NewDefElem("force_not_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5056
		{
			yyVAL.node = ast.NewDefElem("force_null", yyDollar[3].list)
		}
	case 1628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5060
		{
			yyVAL.node = ast.NewDefElem("force_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5064
		{
			yyVAL.node = ast.NewDefElem("encoding", ast.NewString(yyDollar[2].str))
		}
	case 1630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5072
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5076
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5083
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5089
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5090
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5091
		{
			yyVAL.node = ast.NewA_Star(0)
		}
	case 1636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5092
		{
			yyVAL.node = ast.NewString("default")
		}
	case 1637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5093
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1638:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5094
		{
			yyVAL.node = nil
		}
	case 1639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5099
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5103
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5109
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5113
		{
			yyVAL.str = "true"
		}
	case 1643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5114
		{
			yyVAL.str = "false"
		}
	case 1644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5115
		{
			yyVAL.str = "on"
		}
	case 1645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5116
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5120
		{
			yyVAL.node = ast.NewFloat(yyDollar[1].str)
		}
	case 1647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5121
		{
			yyVAL.node = ast.NewFloat(yyDollar[2].str)
		}
	case 1648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5123
		{
			f := ast.NewFloat(yyDollar[2].str)
			f.FVal = "-" + f.FVal
			yyVAL.node = f
		}
	case 1649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5128
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5132
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5133
		{
			yyVAL.node = nil
		}
	case 1652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5137
		{
			yyVAL.objType = ast.OBJECT_ACCESS_METHOD
		}
	case 1653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5138
		{
			yyVAL.objType = ast.OBJECT_EVENT_TRIGGER
		}
	case 1654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5139
		{
			yyVAL.objType = ast.OBJECT_EXTENSION
		}
	case 1655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5140
		{
			yyVAL.objType = ast.OBJECT_FDW
		}
	case 1656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5141
		{
			yyVAL.objType = ast.OBJECT_LANGUAGE
		}
	case 1657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5142
		{
			yyVAL.objType = ast.OBJECT_PUBLICATION
		}
	case 1658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5143
		{
			yyVAL.objType = ast.OBJECT_SCHEMA
		}
	case 1659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5144
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_SERVER
		}
	case 1660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5148
		{
			yyVAL.objType = ast.OBJECT_POLICY
		}
	case 1661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5149
		{
			yyVAL.objType = ast.OBJECT_RULE
		}
	case 1662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5150
		{
			yyVAL.objType = ast.OBJECT_TRIGGER
		}
	case 1663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5154
		{
			yyVAL.objType = yyDollar[1].objType
		}
	case 1664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5155
		{
			yyVAL.objType = ast.OBJECT_DATABASE
		}
	case 1665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5156
		{
			yyVAL.objType = ast.OBJECT_ROLE
		}
	case 1666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5157
		{
			yyVAL.objType = ast.OBJECT_SUBSCRIPTION
		}
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5158
		{
			yyVAL.objType = ast.OBJECT_TABLESPACE
		}
	case 1668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5163
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].typnam)
		}
	case 1669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5168
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 1670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5175
		{
			yyVAL.bval = true
		}
	case 1671:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5176
		{
			yyVAL.bval = false
		}
	case 1672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5180
		{
			yyVAL.ival = 1
		}
	case 1673:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5181
		{
			yyVAL.ival = 0
		}
	case 1676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5197
		{
			yyVAL.node = nil
		}
	case 1677:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5199
		{
			yyVAL.node = nil
		}
	case 1678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5207
		{
			yyVAL.ival = 1
		}
	case 1679:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5208
		{
			yyVAL.ival = 0
		}
	case 1680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5212
		{
			yyVAL.ival = 1
		}
	case 1681:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5213
		{
			yyVAL.ival = 0
		}
	case 1682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5217
		{
			yyVAL.ival = 1
		}
	case 1683:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5218
		{
			yyVAL.ival = 0
		}
	case 1684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5222
		{
			yyVAL.ival = 1
		}
	case 1685:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5223
		{
			yyVAL.ival = 0
		}
	case 1686:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5232
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1687:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5238
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1688:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5244
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1689:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5250
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1690:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5256
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5264
		{
			yyVAL.ival = int(ast.MERGE_WHEN_MATCHED)
		}
	case 1692:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5265
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_SOURCE)
		}
	case 1693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5269
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1694:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5270
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5274
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1696:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5275
		{
			yyVAL.node = nil
		}
	case 1697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5280
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_UPDATE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			yyVAL.node = mergeWhen
		}
	case 1698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5295
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_DELETE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5304
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			mergeWhen.Values = yyDollar[2].list
			yyVAL.node = mergeWhen
		}
	case 1700:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5311
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[3].ival)
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1701:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5318
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1702:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:5331
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[6].ival)
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[8].list
			yyVAL.node = mergeWhen
		}
	case 1703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5344
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1704:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5353
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1705:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:5368
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_UPDATE)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			onConflict.TargetList = yyDollar[7].list
			onConflict.WhereClause = yyDollar[8].node
			yyVAL.onconflict = onConflict
		}
	case 1706:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5378
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_NOTHING)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			yyVAL.onconflict = onConflict
		}
	case 1707:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5386
		{
			yyVAL.onconflict = nil
		}
	case 1708:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5397
		{
			// Create InferClause for column-based conflict detection
			infer := ast.NewInferClause()
			// Assign IndexElems directly as NodeList
			infer.IndexElems = yyDollar[2].list
			infer.WhereClause = yyDollar[4].node
			yyVAL.node = infer
		}
	case 1709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5406
		{
			// Create InferClause for constraint-based conflict detection
			infer := ast.NewInferClause()
			infer.Conname = yyDollar[3].str
			yyVAL.node = infer
		}
	case 1710:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5413
		{
			yyVAL.node = nil
		}
	case 1711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5424
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1712:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5428
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5435
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5439
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5446
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Name = yyDollar[1].str
		}
	case 1716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5451
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[1].node
		}
	case 1717:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5456
		{
			yyVAL.node = yyDollar[4].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[2].node
		}
	case 1718:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5464
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Ordering = ast.SortByDir(yyDollar[3].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[4].ival)
			yyVAL.node = indexElem
		}
	case 1719:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5475
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Opclassopts = yyDollar[3].list
			indexElem.Ordering = ast.SortByDir(yyDollar[4].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[5].ival)
			yyVAL.node = indexElem
		}
	case 1720:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5489
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1721:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5490
		{
			yyVAL.list = nil
		}
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5494
		{
			yyVAL.ival = int(ast.SORTBY_ASC)
		}
	case 1723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5495
		{
			yyVAL.ival = int(ast.SORTBY_DESC)
		}
	case 1724:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5496
		{
			yyVAL.ival = int(ast.SORTBY_DEFAULT)
		}
	case 1725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5500
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_FIRST)
		}
	case 1726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5501
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_LAST)
		}
	case 1727:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5502
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_DEFAULT)
		}
	case 1728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5507
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1729:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5511
		{
			yyVAL.list = nil
		}
	case 1730:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:5532
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[6].list
			createStmt.InhRelations = yyDollar[8].list
			createStmt.PartSpec = yyDollar[9].partspec
			createStmt.AccessMethod = yyDollar[10].str
			createStmt.Options = yyDollar[11].list
			createStmt.OnCommit = yyDollar[12].oncommit
			createStmt.TableSpaceName = yyDollar[13].str
			yyVAL.stmt = createStmt
		}
	case 1731:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:5548
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[9].list
			createStmt.InhRelations = yyDollar[11].list
			createStmt.PartSpec = yyDollar[12].partspec
			createStmt.AccessMethod = yyDollar[13].str
			createStmt.Options = yyDollar[14].list
			createStmt.OnCommit = yyDollar[15].oncommit
			createStmt.TableSpaceName = yyDollar[16].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1732:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:5565
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[6].list)
			createStmt.TableElts = yyDollar[7].list
			createStmt.PartSpec = yyDollar[8].partspec
			createStmt.AccessMethod = yyDollar[9].str
			createStmt.Options = yyDollar[10].list
			createStmt.OnCommit = yyDollar[11].oncommit
			createStmt.TableSpaceName = yyDollar[12].str
			yyVAL.stmt = createStmt
		}
	case 1733:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:5581
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[9].list)
			createStmt.TableElts = yyDollar[10].list
			createStmt.PartSpec = yyDollar[11].partspec
			createStmt.AccessMethod = yyDollar[12].str
			createStmt.Options = yyDollar[13].list
			createStmt.OnCommit = yyDollar[14].oncommit
			createStmt.TableSpaceName = yyDollar[15].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1734:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:5598
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[7].rangevar)
			createStmt.TableElts = yyDollar[8].list
			createStmt.PartBound = yyDollar[9].partboundspec
			createStmt.PartSpec = yyDollar[10].partspec
			createStmt.AccessMethod = yyDollar[11].str
			createStmt.Options = yyDollar[12].list
			createStmt.OnCommit = yyDollar[13].oncommit
			createStmt.TableSpaceName = yyDollar[14].str
			yyVAL.stmt = createStmt
		}
	case 1735:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:5615
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[10].rangevar)
			createStmt.TableElts = yyDollar[11].list
			createStmt.PartBound = yyDollar[12].partboundspec
			createStmt.PartSpec = yyDollar[13].partspec
			createStmt.AccessMethod = yyDollar[14].str
			createStmt.Options = yyDollar[15].list
			createStmt.OnCommit = yyDollar[16].oncommit
			createStmt.TableSpaceName = yyDollar[17].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5633
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5634
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1738:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5635
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1739:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5636
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1740:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5637
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5638
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5639
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 1743:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5640
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 1744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5644
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1745:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5645
		{
			yyVAL.list = nil
		}
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5650
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1747:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5655
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5662
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5663
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5664
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1751:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5669
		{
			yyVAL.node = ast.NewTableLikeClause(yyDollar[2].rangevar, ast.TableLikeOption(yyDollar[3].ival))
		}
	case 1752:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5676
		{
			yyVAL.ival = yyDollar[1].ival | yyDollar[3].ival
		}
	case 1753:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5680
		{
			yyVAL.ival = yyDollar[1].ival & ^yyDollar[3].ival
		}
	case 1754:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5684
		{
			yyVAL.ival = 0
		}
	case 1755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5690
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMMENTS)
		}
	case 1756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5691
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMPRESSION)
		}
	case 1757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5692
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_CONSTRAINTS)
		}
	case 1758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5693
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_DEFAULTS)
		}
	case 1759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5694
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_IDENTITY)
		}
	case 1760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5695
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_GENERATED)
		}
	case 1761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5696
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_INDEXES)
		}
	case 1762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5697
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STATISTICS)
		}
	case 1763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5698
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STORAGE)
		}
	case 1764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5699
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_ALL)
		}
	case 1765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5704
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1766:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5705
		{
			yyVAL.str = "default"
		}
	case 1767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5709
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1768:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5710
		{
			yyVAL.str = ""
		}
	case 1769:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5714
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1770:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5715
		{
			yyVAL.str = "default"
		}
	case 1771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5719
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1772:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5720
		{
			yyVAL.str = ""
		}
	case 1773:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5725
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1774:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5726
		{
			yyVAL.list = nil
		}
	case 1775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5731
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1776:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5737
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5744
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5745
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1779:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5750
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[2].list
			yyVAL.node = colDef
		}
	case 1780:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5756
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[4].list
			yyVAL.node = colDef
		}
	case 1781:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5767
		{
			hashSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_HASH)
			hashSpec.IsDefault = false

			// Parse hash partition bounds (modulus and remainder)
			hashOptions := yyDollar[5].list
			for _, optNode := range hashOptions.Items {
				if defElem, ok := optNode.(*ast.DefElem); ok {
					if defElem.Defname == "modulus" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Modulus = integerVal.IVal
							}
						}
					} else if defElem.Defname == "remainder" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Remainder = integerVal.IVal
							}
						}
					}
				}
			}

			yyVAL.partboundspec = hashSpec
		}
	case 1782:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5796
		{
			listSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			listSpec.IsDefault = false
			listSpec.ListDatums = yyDollar[5].list
			yyVAL.partboundspec = listSpec
		}
	case 1783:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5805
		{
			rangeSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_RANGE)
			rangeSpec.IsDefault = false
			rangeSpec.LowDatums = yyDollar[5].list
			rangeSpec.HighDatums = yyDollar[9].list
			yyVAL.partboundspec = rangeSpec
		}
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5815
		{
			defaultSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			defaultSpec.IsDefault = true
			yyVAL.partboundspec = defaultSpec
		}
	case 1785:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5824
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, ast.NewA_Const(ast.NewInteger(yyDollar[2].ival), 0))
		}
	case 1786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5831
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1787:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5835
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1788:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5843
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1789:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5844
		{
			yyVAL.list = nil
		}
	case 1790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5849
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1791:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5853
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1792:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5861
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5867
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5872
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1795:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5877
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			colDef.StorageName = yyDollar[3].str
			colDef.Compression = yyDollar[4].str
			colDef.Fdwoptions = yyDollar[5].list
			colDef.Constraints = yyDollar[6].list
			yyVAL.node = colDef
		}
	case 1796:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5889
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1797:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5894
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1798:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5901
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5906
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5907
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1801:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5909
		{
			/*
			 * Note: the CollateClause is momentarily included in
			 * the list built by ColQualList, but we split it out
			 * again in SplitColQualList.
			 */
			collateClause := ast.NewCollateClause(yyDollar[2].list)
			yyVAL.node = collateClause
		}
	case 1802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5922
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1803:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5927
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_NOT_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1804:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5932
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRED)
			yyVAL.node = constraint
		}
	case 1805:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5937
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_IMMEDIATE)
			yyVAL.node = constraint
		}
	case 1806:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5945
		{
			yyVAL.bval = true
		}
	case 1807:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5946
		{
			yyVAL.bval = false
		}
	case 1808:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5947
		{
			yyVAL.bval = true
		}
	case 1809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5951
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_ALWAYS
		}
	case 1810:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5952
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_BY_DEFAULT
		}
	case 1811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5957
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1812:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5959
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5964
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1814:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5968
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1815:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5972
		{
			// SeqOptElem already returns a DefElem, so we can use it directly
			// Check for invalid options as per PostgreSQL
			defElem := yyDollar[2].defelt
			if defElem.Defname == "as" || defElem.Defname == "restart" || defElem.Defname == "owned_by" {
				yylex.Error("sequence option not supported here")
			}
			yyVAL.defelt = yyDollar[2].defelt
		}
	case 1816:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5982
		{
			yyVAL.defelt = ast.NewDefElem("generated", ast.NewInteger(int(yyDollar[3].byt)))
		}
	case 1817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5988
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1818:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5989
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1819:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5994
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].typnam)
		}
	case 1820:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5998
		{
			yyVAL.defelt = ast.NewDefElem("cache", yyDollar[2].node)
		}
	case 1821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6002
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(true))
		}
	case 1822:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6006
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(false))
		}
	case 1823:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6010
		{
			yyVAL.defelt = ast.NewDefElem("increment", yyDollar[3].node)
		}
	case 1824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6014
		{
			yyVAL.defelt = ast.NewDefElem("logged", nil)
		}
	case 1825:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6018
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", yyDollar[2].node)
		}
	case 1826:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6022
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", yyDollar[2].node)
		}
	case 1827:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6026
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", nil)
		}
	case 1828:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6030
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", nil)
		}
	case 1829:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6034
		{
			yyVAL.defelt = ast.NewDefElem("owned_by", yyDollar[3].list)
		}
	case 1830:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6038
		{
			yyVAL.defelt = ast.NewDefElem("sequence_name", yyDollar[3].list)
		}
	case 1831:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6042
		{
			yyVAL.defelt = ast.NewDefElem("start", yyDollar[3].node)
		}
	case 1832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6046
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1833:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6050
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6054
		{
			yyVAL.defelt = ast.NewDefElem("unlogged", nil)
		}
	case 1835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6060
		{
		}
	case 1836:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6061
		{
		}
	case 1837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6065
		{
		}
	case 1838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6066
		{
		}
	case 1839:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6067
		{
		}
	case 1840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6072
		{
			// RECHECK no longer does anything in opclass definitions,
			// but we still accept it to ease porting of old database dumps.
			// When this is used, we should emit a notice.
			// For now, just return true to indicate RECHECK was present
			yyVAL.bval = true
		}
	case 1841:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6079
		{
			yyVAL.bval = false
		}
	case 1842:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6083
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1843:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6084
		{
			yyVAL.list = nil
		}
	case 1844:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6089
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NOTNULL)
		}
	case 1845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6093
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NULL)
		}
	case 1846:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6097
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Keys = nil // Will be filled by the parser
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Options = yyDollar[3].list
			constraint.Indexspace = yyDollar[4].str
			yyVAL.node = constraint
		}
	case 1847:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6106
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = nil // Will be filled by the parser
			yyVAL.node = constraint
		}
	case 1848:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6112
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			yyVAL.node = constraint
		}
	case 1849:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6118
		{
			constraint := ast.NewConstraint(ast.CONSTR_DEFAULT)
			constraint.RawExpr = yyDollar[2].node
			yyVAL.node = constraint
		}
	case 1850:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6124
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Pktable = yyDollar[2].rangevar
			constraint.PkAttrs = yyDollar[3].list
			constraint.FkMatchtype = yyDollar[4].byt
			if actions := yyDollar[5].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			yyVAL.node = constraint
		}
	case 1851:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6141
		{
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.Options = yyDollar[5].list
			yyVAL.node = constraint
		}
	case 1852:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6148
		{
			constraint := ast.NewConstraint(ast.CONSTR_GENERATED)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.RawExpr = yyDollar[5].node
			yyVAL.node = constraint
		}
	case 1853:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6158
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6163
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1855:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6168
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			processConstraintAttributeSpec(yyDollar[5].ival, constraint)
			yyVAL.node = constraint
		}
	case 1856:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6176
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 1857:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6187
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Indexname = yyDollar[2].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[3].ival, constraint)
			yyVAL.node = constraint
		}
	case 1858:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6198
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 1859:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6208
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Indexname = yyDollar[3].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[4].ival, constraint)
			yyVAL.node = constraint
		}
	case 1860:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:6219
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.FkAttrs = yyDollar[4].list
			constraint.Pktable = yyDollar[7].rangevar
			constraint.PkAttrs = yyDollar[8].list
			constraint.FkMatchtype = yyDollar[9].byt
			if actions := yyDollar[10].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			processConstraintAttributeSpec(yyDollar[11].ival, constraint)
			yyVAL.node = constraint
		}
	case 1861:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6240
		{
			constraint := ast.NewConstraint(ast.CONSTR_EXCLUSION)
			constraint.AccessMethod = yyDollar[2].str
			constraint.Exclusions = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			constraint.WhereClause = yyDollar[9].node
			processConstraintAttributeSpec(yyDollar[10].ival, constraint)
			yyVAL.node = constraint
		}
	case 1862:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6254
		{
			yyVAL.bval = true
		}
	case 1863:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6255
		{
			yyVAL.bval = false
		}
	case 1864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6261
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1865:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6267
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1866:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6275
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[3].list)
		}
	case 1867:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6280
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[5].list)
		}
	case 1868:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6288
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1869:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6292
		{
			yyVAL.list = nil
		}
	case 1870:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6299
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_FULL
		}
	case 1871:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6303
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_PARTIAL
		}
	case 1872:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6307
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 1873:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6311
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 1874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6318
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 1875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6328
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 1876:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6338
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = yyDollar[2].keyaction
			yyVAL.keyactions = n
		}
	case 1877:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6345
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[2].keyaction
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 1878:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6352
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 1879:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6367
		{
			// Check for unsupported column lists on UPDATE actions
			keyAction := yyDollar[3].keyaction
			if keyAction.Cols != nil {
				if len(keyAction.Cols.Items) > 0 {
					yylex.Error("column list with SET NULL/SET DEFAULT is only supported for ON DELETE actions")
				}
			}
			yyVAL.keyaction = keyAction
		}
	case 1880:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6380
		{
			yyVAL.keyaction = yyDollar[3].keyaction
		}
	case 1881:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6387
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_NOACTION
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6394
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_RESTRICT
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6401
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_CASCADE
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1884:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6408
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETNULL
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 1885:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6415
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETDEFAULT
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 1886:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6424
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1887:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6425
		{
			yyVAL.list = nil
		}
	case 1888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6429
		{
			yyVAL.partspec = yyDollar[1].partspec
		}
	case 1889:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6430
		{
			yyVAL.partspec = nil
		}
	case 1890:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6435
		{
			partitionSpec := ast.NewPartitionSpec(ast.PartitionStrategy(yyDollar[3].str), yyDollar[5].list)
			yyVAL.partspec = partitionSpec
		}
	case 1891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6443
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1892:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6448
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1893:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6456
		{
			partElem := ast.NewPartitionElem(yyDollar[1].str, nil, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 1894:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6463
		{
			partElem := ast.NewPartitionElem("", yyDollar[1].node, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 1895:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6470
		{
			partElem := ast.NewPartitionElem("", yyDollar[2].node, 0)
			partElem.Collation = yyDollar[4].list
			partElem.Opclass = yyDollar[5].list
			yyVAL.node = partElem
		}
	case 1896:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6479
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1897:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6480
		{
			yyVAL.str = ""
		}
	case 1898:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6484
		{
			yyVAL.oncommit = ast.ONCOMMIT_DROP
		}
	case 1899:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6485
		{
			yyVAL.oncommit = ast.ONCOMMIT_DELETE_ROWS
		}
	case 1900:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6486
		{
			yyVAL.oncommit = ast.ONCOMMIT_PRESERVE_ROWS
		}
	case 1901:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6487
		{
			yyVAL.oncommit = ast.ONCOMMIT_NOOP
		}
	case 1902:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6491
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1903:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6492
		{
			yyVAL.str = ""
		}
	case 1904:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6496
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1905:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6497
		{
			yyVAL.str = ""
		}
	case 1906:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6501
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1907:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:6514
		{
			indexStmt := ast.NewIndexStmt(yyDollar[5].str, yyDollar[7].rangevar, yyDollar[10].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.AccessMethod = yyDollar[8].str
			indexStmt.IndexIncludingParams = yyDollar[12].list
			indexStmt.NullsNotDistinct = !yyDollar[13].bval
			indexStmt.Options = yyDollar[14].list
			indexStmt.TableSpace = yyDollar[15].str
			indexStmt.WhereClause = yyDollar[16].node
			yyVAL.stmt = indexStmt
		}
	case 1908:
		yyDollar = yyS[yypt-19 : yypt+1]
//line postgres.y:6529
		{
			indexStmt := ast.NewIndexStmt(yyDollar[8].str, yyDollar[10].rangevar, yyDollar[13].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.IfNotExists = true
			indexStmt.AccessMethod = yyDollar[11].str
			indexStmt.IndexIncludingParams = yyDollar[15].list
			indexStmt.NullsNotDistinct = !yyDollar[16].bval
			indexStmt.Options = yyDollar[17].list
			indexStmt.TableSpace = yyDollar[18].str
			indexStmt.WhereClause = yyDollar[19].node
			yyVAL.stmt = indexStmt
		}
	case 1909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6545
		{
			yyVAL.bval = true
		}
	case 1910:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6546
		{
			yyVAL.bval = false
		}
	case 1911:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6550
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1912:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6551
		{
			yyVAL.str = "btree"
		}
	case 1913:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6555
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1914:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6556
		{
			yyVAL.list = nil
		}
	case 1915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6561
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1916:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6566
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1917:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6574
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1918:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6575
		{
			yyVAL.list = nil
		}
	case 1919:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6587
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1920:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6593
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1921:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6600
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 1922:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6606
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1923:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6613
		{
			// Index partition attachment - dedicated rule
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 1924:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6622
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			yyVAL.stmt = alterStmt
		}
	case 1925:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6628
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1926:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6635
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			yyVAL.stmt = alterStmt
		}
	case 1927:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6641
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1928:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6648
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			yyVAL.stmt = alterStmt
		}
	case 1929:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6654
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1930:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6661
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1931:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6667
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1932:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6674
		{
			// Partition commands - dedicated rule for partition-only operations
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1933:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6683
		{
			// Partition commands with IF EXISTS
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[6].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1934:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6693
		{
			// Bulk tablespace move for tables
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 1935:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6700
		{
			// Bulk tablespace move for tables owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 1936:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6708
		{
			// Bulk tablespace move for indexes
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 1937:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6715
		{
			// Bulk tablespace move for indexes owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 1938:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:6723
		{
			// Bulk tablespace move for materialized views
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[10].str)
			moveStmt.Nowait = yyDollar[11].bval
			yyVAL.stmt = moveStmt
		}
	case 1939:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:6730
		{
			// Bulk tablespace move for materialized views owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[13].str)
			moveStmt.Roles = yyDollar[10].list
			moveStmt.Nowait = yyDollar[14].bval
			yyVAL.stmt = moveStmt
		}
	case 1940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6741
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1941:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6746
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6754
		{
			yyVAL.bval = true
		}
	case 1943:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6755
		{
			yyVAL.bval = false
		}
	case 1944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6760
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].rolespec)
		}
	case 1945:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6765
		{
			yyDollar[1].list.Append(yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 1946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6773
		{
			roleSpec := yyDollar[1].rolespec

			switch roleSpec.Roletype {
			case ast.ROLESPEC_CSTRING:
				yyVAL.str = roleSpec.Rolename
			case ast.ROLESPEC_PUBLIC:
				// PostgreSQL throws an error for "public" role name
				yylex.Error(`role name "public" is reserved`)
				return 1
			case ast.ROLESPEC_SESSION_USER:
				// PostgreSQL throws an error: SESSION_USER cannot be used as a role name here
				yylex.Error(`SESSION_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_USER:
				// PostgreSQL throws an error: CURRENT_USER cannot be used as a role name here
				yylex.Error(`CURRENT_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_ROLE:
				// PostgreSQL throws an error: CURRENT_ROLE cannot be used as a role name here
				yylex.Error(`CURRENT_ROLE cannot be used as a role name here`)
				return 1
			default:
				yylex.Error(`invalid role specification`)
				return 1
			}
		}
	case 1947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6804
		{
			// Handle special role names: "public" and "none"
			var roleSpec *ast.RoleSpec

			if yyDollar[1].str == "public" {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_PUBLIC,
				}
			} else if yyDollar[1].str == "none" {
				// PostgreSQL throws an error for "none" - role name "none" is reserved
				yylex.Error(`role name "none" is reserved`)
				return 1
			} else {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_CSTRING,
					Rolename: yyDollar[1].str,
				}
			}
			yyVAL.rolespec = roleSpec
		}
	case 1948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6827
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_ROLE,
			}
		}
	case 1949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6834
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_USER,
			}
		}
	case 1950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6841
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_SESSION_USER,
			}
		}
	case 1951:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6852
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[2].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1952:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6859
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[5].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1953:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6866
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1954:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6873
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[6].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1955:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6880
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ColumnDefault, yyDollar[3].str, yyDollar[4].node)
		}
	case 1956:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6885
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropNotNull, yyDollar[3].str, nil)
		}
	case 1957:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6890
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetNotNull, yyDollar[3].str, nil)
		}
	case 1958:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6895
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetExpression, yyDollar[3].str, yyDollar[8].node)
		}
	case 1959:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6900
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
		}
	case 1960:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6905
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1961:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6912
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStatistics, yyDollar[3].str, yyDollar[6].node)
		}
	case 1962:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6917
		{
			cmd := ast.NewAlterTableCmd(ast.AT_SetStatistics, "", yyDollar[6].node)
			cmd.Num = int16(yyDollar[3].ival)
			yyVAL.node = cmd
		}
	case 1963:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6924
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 1964:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6929
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 1965:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6934
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStorage, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 1966:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6939
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetCompression, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 1967:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6944
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddIdentity, yyDollar[3].str, nil)
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[6].byt
			constraint.Options = yyDollar[9].list
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 1968:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6954
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetIdentity, yyDollar[3].str, yyDollar[4].list)
		}
	case 1969:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6959
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1970:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6966
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1971:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6973
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1972:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6981
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1973:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6992
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, nil)
			def := ast.NewColumnDef("", yyDollar[6].typnam, 0)
			def.Collclause = yyDollar[7].node.(*ast.CollateClause)
			def.RawDefault = yyDollar[8].node
			cmd.Def = def
			yyVAL.node = cmd
		}
	case 1974:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7002
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AlterColumnGenericOptions, yyDollar[3].str, yyDollar[4].list)
		}
	case 1975:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7007
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddConstraint, "", yyDollar[2].node)
		}
	case 1976:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7012
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterConstraint, "", nil)
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Conname = yyDollar[3].str
			constraint.Deferrable = (yyDollar[4].ival & ast.CAS_DEFERRABLE) != 0
			constraint.Initdeferred = (yyDollar[4].ival & ast.CAS_INITIALLY_DEFERRED) != 0
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 1977:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7023
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ValidateConstraint, yyDollar[3].str, nil)
		}
	case 1978:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7028
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1979:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7036
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1980:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7044
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOids, "", nil)
		}
	case 1981:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7049
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ClusterOn, yyDollar[3].str, nil)
		}
	case 1982:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7054
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropCluster, "", nil)
		}
	case 1983:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7059
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetLogged, "", nil)
		}
	case 1984:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7064
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetUnLogged, "", nil)
		}
	case 1985:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7069
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrig, yyDollar[3].str, nil)
		}
	case 1986:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7074
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysTrig, yyDollar[4].str, nil)
		}
	case 1987:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7079
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaTrig, yyDollar[4].str, nil)
		}
	case 1988:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7084
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigAll, "", nil)
		}
	case 1989:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7089
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigUser, "", nil)
		}
	case 1990:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7094
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrig, yyDollar[3].str, nil)
		}
	case 1991:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7099
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigAll, "", nil)
		}
	case 1992:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7104
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigUser, "", nil)
		}
	case 1993:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7109
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRule, yyDollar[3].str, nil)
		}
	case 1994:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7114
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysRule, yyDollar[4].str, nil)
		}
	case 1995:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7119
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaRule, yyDollar[4].str, nil)
		}
	case 1996:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7124
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRule, yyDollar[3].str, nil)
		}
	case 1997:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7129
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddInherit, "", yyDollar[2].rangevar)
		}
	case 1998:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7134
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropInherit, "", yyDollar[3].rangevar)
		}
	case 1999:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7139
		{
			typeName := makeTypeNameFromNodeList(yyDollar[2].list)
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddOf, "", typeName)
		}
	case 2000:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7145
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOf, "", nil)
		}
	case 2001:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7150
		{
			cmd := ast.NewAlterTableCmd(ast.AT_ChangeOwner, "", nil)
			cmd.Newowner = yyDollar[3].rolespec
			yyVAL.node = cmd
		}
	case 2002:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7157
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetAccessMethod, yyDollar[4].str, nil)
		}
	case 2003:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7162
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetTableSpace, yyDollar[3].str, nil)
		}
	case 2004:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7167
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetRelOptions, "", yyDollar[2].list)
		}
	case 2005:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7172
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetRelOptions, "", yyDollar[2].list)
		}
	case 2006:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7177
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ReplicaIdentity, "", yyDollar[3].node)
		}
	case 2007:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7182
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRowSecurity, "", nil)
		}
	case 2008:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7187
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRowSecurity, "", nil)
		}
	case 2009:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7192
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ForceRowSecurity, "", nil)
		}
	case 2010:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7197
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_NoForceRowSecurity, "", nil)
		}
	case 2011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7201
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_GenericOptions, "", yyDollar[1].list)
		}
	case 2012:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7209
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, yyDollar[4].partboundspec, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2013:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7217
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, yyDollar[4].bval, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2014:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7224
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartitionFinalize, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2015:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7235
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2016:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7244
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2017:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7245
		{
			yyVAL.node = nil
		}
	case 2018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7249
		{
		}
	case 2019:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7250
		{
		}
	case 2020:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7261
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2021:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7274
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2022:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7287
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2023:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7300
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2024:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7313
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[5].list
			objects.Append(ast.NewString(yyDollar[3].str))
			n.Objects = objects
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2025:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7328
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[7].list
			objects.Append(ast.NewString(yyDollar[5].str))
			n.Objects = objects
			n.Behavior = yyDollar[8].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2026:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7343
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2027:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7356
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2028:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7369
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2029:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7382
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2030:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7395
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = false
			n.Objects = yyDollar[4].list
			n.Behavior = yyDollar[5].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2031:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7408
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = true
			n.Objects = yyDollar[6].list
			n.Behavior = yyDollar[7].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2032:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7424
		{
			stmt := yyDollar[2].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2033:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7430
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = true
			yyVAL.stmt = stmt
		}
	case 2034:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7436
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2035:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7445
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "TRANSACTION", yyDollar[2].list, false)
		}
	case 2036:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7449
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "SESSION CHARACTERISTICS AS TRANSACTION", yyDollar[5].list, false)
		}
	case 2037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7452
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7456
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2039:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7458
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "timezone", nil, false)
		}
	case 2040:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7462
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "transaction_isolation", nil, false)
		}
	case 2041:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7466
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "session_authorization", nil, false)
		}
	case 2042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7473
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, yyDollar[1].str, nil, false)
		}
	case 2043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7477
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET_ALL, "", nil, false)
		}
	case 2044:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7483
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7484
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2046:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7488
		{
			yyVAL.stmt = ast.Stmt(yyDollar[2].vsetstmt)
		}
	case 2047:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7493
		{
			yyVAL.objType = ast.OBJECT_TABLE
		}
	case 2048:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7494
		{
			yyVAL.objType = ast.OBJECT_SEQUENCE
		}
	case 2049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7495
		{
			yyVAL.objType = ast.OBJECT_VIEW
		}
	case 2050:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7496
		{
			yyVAL.objType = ast.OBJECT_MATVIEW
		}
	case 2051:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7497
		{
			yyVAL.objType = ast.OBJECT_INDEX
		}
	case 2052:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7498
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_TABLE
		}
	case 2053:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7499
		{
			yyVAL.objType = ast.OBJECT_COLLATION
		}
	case 2054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7500
		{
			yyVAL.objType = ast.OBJECT_CONVERSION
		}
	case 2055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7501
		{
			yyVAL.objType = ast.OBJECT_STATISTIC_EXT
		}
	case 2056:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7502
		{
			yyVAL.objType = ast.OBJECT_TSPARSER
		}
	case 2057:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7503
		{
			yyVAL.objType = ast.OBJECT_TSDICTIONARY
		}
	case 2058:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7504
		{
			yyVAL.objType = ast.OBJECT_TSTEMPLATE
		}
	case 2059:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7505
		{
			yyVAL.objType = ast.OBJECT_TSCONFIGURATION
		}
	case 2060:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7518
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2061:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7523
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2062:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7537
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode: ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:  yyDollar[1].list,
				Objargs:  yyDollar[2].list,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2063:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7549
		{
			yylex.Error("Use NONE to denote the missing argument of a unary operator.")
			return 1
		}
	case 2064:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7554
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, yyDollar[4].typnam)
		}
	case 2065:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7556
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[4].typnam)
		}
	case 2066:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7558
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, nil)
		}
	case 2067:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7562
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2068:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7575
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 2069:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7577
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 2070:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7581
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2071:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7592
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2072:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7603
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2073:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7614
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DATABASE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2074:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7625
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2075:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7636
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMCONSTRAINT,
				Object:     yyDollar[3].list,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2076:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7648
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2077:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7659
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2078:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7670
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2079:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7681
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2080:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7692
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2081:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7709
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2082:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7726
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2083:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7738
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[7].rangevar,
				Subname:    yyDollar[5].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2084:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7750
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2085:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7761
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2086:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7772
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2087:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7783
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SCHEMA,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2088:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7794
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2089:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7805
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2090:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7816
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2091:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7827
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2092:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7838
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2093:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7849
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2094:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7860
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2095:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7871
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2096:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7882
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2097:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7893
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2098:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7904
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2099:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7915
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2100:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7926
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2101:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7937
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2102:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7948
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2103:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7961
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2104:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7974
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2105:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7987
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2106:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8000
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2107:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:8013
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2108:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8026
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[3].rangevar,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2109:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:8038
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[8].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2110:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8050
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2111:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:8063
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2112:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8076
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_RULE,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2113:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8088
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TRIGGER,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2114:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8100
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2115:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8111
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2116:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8122
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2117:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8133
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLESPACE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2118:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8144
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2119:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8155
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSPARSER,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2120:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8166
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2121:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8177
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSTEMPLATE,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2122:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8188
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2123:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8199
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2124:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8210
		{
			rv, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(err.Error())
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_ATTRIBUTE,
				RelationType: ast.OBJECT_TYPE,
				Relation:     rv,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				Behavior:     ast.DropBehavior(yyDollar[9].dropBehav),
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2125:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8236
		{
			yyVAL.ival = 0
		}
	case 2126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8238
		{
			// Combine constraint attribute bits
			newspec := yyDollar[1].ival | yyDollar[2].ival

			// Check for conflicts (NOT DEFERRABLE + INITIALLY DEFERRED)
			if (newspec & (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED)) == (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED) {
				// This would be an error in real PostgreSQL parser
			}

			yyVAL.ival = newspec
		}
	case 2127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8252
		{
			yyVAL.ival = ast.CAS_NOT_DEFERRABLE
		}
	case 2128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8253
		{
			yyVAL.ival = ast.CAS_DEFERRABLE
		}
	case 2129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8254
		{
			yyVAL.ival = ast.CAS_INITIALLY_IMMEDIATE
		}
	case 2130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8255
		{
			yyVAL.ival = ast.CAS_INITIALLY_DEFERRED
		}
	case 2131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8256
		{
			yyVAL.ival = ast.CAS_NOT_VALID
		}
	case 2132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8257
		{
			yyVAL.ival = ast.CAS_NO_INHERIT
		}
	case 2133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8261
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8266
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8271
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8279
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8283
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2138:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8287
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, yyDollar[5].node, ast.DEFELEM_UNSPEC)
		}
	case 2139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8291
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, nil, ast.DEFELEM_UNSPEC)
		}
	case 2140:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8305
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  yyDollar[7].typnam,
				Options:     yyDollar[8].list,
				SQLBody:     yyDollar[9].node,
			}
			yyVAL.stmt = stmt
		}
	case 2141:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:8319
		{
			// Handle RETURNS TABLE variant
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil, // TODO: Handle table return type
				Options:     yyDollar[11].list,
				SQLBody:     yyDollar[12].node,
			}
			// TODO: Process table_func_column_list into appropriate return type
			yyVAL.stmt = stmt
		}
	case 2142:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8335
		{
			// No explicit return type (for procedures disguised as functions)
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2143:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8350
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: true,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8365
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8366
		{
			yyVAL.list = nil
		}
	case 2146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8371
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8375
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8383
		{
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8387
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8392
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8400
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    yyDollar[2].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8409
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[2].funparammode,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8418
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8427
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    "",
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8436
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    "",
				ArgType: yyDollar[1].typnam,
			}
			yyVAL.funparam = param
		}
	case 2156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8447
		{
			yyVAL.funparammode = ast.FUNC_PARAM_IN
		}
	case 2157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8448
		{
			yyVAL.funparammode = ast.FUNC_PARAM_OUT
		}
	case 2158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8449
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8450
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8451
		{
			yyVAL.funparammode = ast.FUNC_PARAM_VARIADIC
		}
	case 2161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8455
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8459
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2163:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8461
		{
			// Handle %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				// TODO: Add %TYPE indicator
			}
		}
	case 2164:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8471
		{
			// Handle SETOF %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[2].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				Setof: true,
			}
		}
	case 2165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8483
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8484
		{
			yyVAL.list = nil
		}
	case 2167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8489
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].defelt)
			yyVAL.list = list
		}
	case 2168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8495
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8503
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].node)
		}
	case 2170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8507
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 2171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8511
		{
			yyVAL.defelt = ast.NewDefElem("transform", yyDollar[2].list)
		}
	case 2172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8515
		{
			yyVAL.defelt = ast.NewDefElem("window", ast.NewBoolean(true))
		}
	case 2173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8519
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8526
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.node = list
		}
	case 2175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8532
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 2176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8542
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[3].typnam)
			yyVAL.list = list
		}
	case 2177:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8548
		{
			yyDollar[1].list.Append(yyDollar[5].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8556
		{
			yyVAL.node = yyDollar[1].stmt
		}
	case 2179:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8560
		{
			/*
			 * A compound statement is stored as a single-item list
			 * containing the list of statements as its member.  That
			 * way, the parse analysis code can tell apart an empty
			 * body from no body at all.
			 */
			list := ast.NewNodeList()
			list.Append(yyDollar[3].list)
			yyVAL.node = list
		}
	case 2180:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8572
		{
			yyVAL.node = nil
		}
	case 2181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8579
		{
			yyVAL.stmt = &ast.ReturnStmt{
				ReturnVal: yyDollar[2].node,
			}
		}
	case 2182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8588
		{
			/* As in stmtmulti, discard empty statements */
			if yyDollar[2].stmt != nil {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			} else {
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2183:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8598
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8604
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8605
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2186:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8610
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(false))
		}
	case 2187:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8614
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 2188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8618
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 2189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8622
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("immutable"))
		}
	case 2190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8626
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("stable"))
		}
	case 2191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8630
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("volatile"))
		}
	case 2192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8634
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 2193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8638
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 2194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8642
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 2195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8646
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 2196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8650
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(true))
		}
	case 2197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8654
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(false))
		}
	case 2198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8658
		{
			yyVAL.defelt = ast.NewDefElem("cost", yyDollar[2].node)
		}
	case 2199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8662
		{
			yyVAL.defelt = ast.NewDefElem("rows", yyDollar[2].node)
		}
	case 2200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8666
		{
			yyVAL.defelt = ast.NewDefElem("support", yyDollar[2].list)
		}
	case 2201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8670
		{
			yyVAL.defelt = ast.NewDefElem("set", yyDollar[1].vsetstmt)
		}
	case 2202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8674
		{
			yyVAL.defelt = ast.NewDefElem("parallel", ast.NewString(yyDollar[2].str))
		}
	case 2203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8681
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8685
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2205:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:8701
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[6].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: false,
				Trigname:     yyDollar[4].str,
				Relation:     yyDollar[8].rangevar,
				Funcname:     yyDollar[14].list,
				Args:         yyDollar[16].list,
				Row:          yyDollar[10].bval,
				Timing:       int16(yyDollar[5].ival),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[11].node,
				Transitions:  yyDollar[9].list,
				Deferrable:   false,
				Initdeferred: false,
				Constrrel:    nil,
			}
			yyVAL.stmt = stmt
		}
	case 2206:
		yyDollar = yyS[yypt-21 : yypt+1]
//line postgres.y:8733
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[7].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: true,
				Trigname:     yyDollar[5].str,
				Relation:     yyDollar[9].rangevar,
				Funcname:     yyDollar[18].list,
				Args:         yyDollar[20].list,
				Row:          true,
				Timing:       int16(ast.TRIGGER_TIMING_AFTER),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[15].node,
				Transitions:  nil,
				Deferrable:   true, // Default for constraint triggers
				Initdeferred: false,
				Constrrel:    yyDollar[10].rangevar,
			}
			yyVAL.stmt = stmt
		}
	case 2207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8764
		{
			yyVAL.ival = ast.TRIGGER_TIMING_BEFORE
		}
	case 2208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8765
		{
			yyVAL.ival = ast.TRIGGER_TIMING_AFTER
		}
	case 2209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8766
		{
			yyVAL.ival = ast.TRIGGER_TIMING_INSTEAD
		}
	case 2210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8771
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8773
		{
			// Extract event types and column lists from both sides
			events1 := yyDollar[1].list.Items[0].(*ast.Integer).IVal
			events2 := yyDollar[3].list.Items[0].(*ast.Integer).IVal
			columns1 := yyDollar[1].list.Items[1]
			columns2 := yyDollar[3].list.Items[1]

			// Check for duplicate events
			if events1&events2 != 0 {
				// TODO: Generate parse error for duplicate trigger events
			}

			// Create combined result [events1|events2, combined_columns]
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(events1 | events2))

			// Concatenate column lists (if any)
			if columns1 != nil && columns2 != nil {
				// Both have columns - concatenate
				combinedCols := columns1.(*ast.NodeList)
				if columns2List, ok := columns2.(*ast.NodeList); ok {
					for _, item := range columns2List.Items {
						combinedCols.Append(item)
					}
				}
				list.Append(combinedCols)
			} else if columns1 != nil {
				list.Append(columns1)
			} else if columns2 != nil {
				list.Append(columns2)
			} else {
				list.Append(nil)
			}

			yyVAL.list = list
		}
	case 2212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8813
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_INSERT)))
			list.Append(nil) // No columns for INSERT
			yyVAL.list = list
		}
	case 2213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8820
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_DELETE)))
			list.Append(nil) // No columns for DELETE
			yyVAL.list = list
		}
	case 2214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8827
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(nil) // No columns for UPDATE
			yyVAL.list = list
		}
	case 2215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8834
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(yyDollar[3].list) // Column list for UPDATE OF
			yyVAL.list = list
		}
	case 2216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8841
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_TRUNCATE)))
			list.Append(nil) // No columns for TRUNCATE
			yyVAL.list = list
		}
	case 2217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8850
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2218:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8851
		{
			yyVAL.list = nil
		}
	case 2219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8855
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8860
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2221:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8868
		{
			trans := &ast.TriggerTransition{
				Name:    yyDollar[4].str,
				IsNew:   yyDollar[1].bval,
				IsTable: yyDollar[2].bval,
			}
			yyVAL.node = trans
		}
	case 2222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8879
		{
			yyVAL.bval = true
		}
	case 2223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8880
		{
			yyVAL.bval = false
		}
	case 2224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8884
		{
			yyVAL.bval = true
		}
	case 2225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8885
		{
			yyVAL.bval = false
		}
	case 2226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8889
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8894
		{
			yyVAL.bval = yyDollar[3].bval
		}
	case 2228:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8898
		{
			// If ROW/STATEMENT not specified, default to STATEMENT
			yyVAL.bval = false
		}
	case 2231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8910
		{
			yyVAL.bval = true
		}
	case 2232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8911
		{
			yyVAL.bval = false
		}
	case 2233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8915
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2234:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8916
		{
			yyVAL.node = nil
		}
	case 2237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8925
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8930
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2239:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8934
		{
			yyVAL.list = nil
		}
	case 2240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8939
		{
			yyVAL.node = ast.NewString(fmt.Sprintf("%d", yyDollar[1].ival))
		}
	case 2241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8942
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8943
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8944
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8948
		{
			yyVAL.rangevar = yyDollar[2].rangevar
		}
	case 2245:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8949
		{
			yyVAL.rangevar = nil
		}
	case 2246:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8962
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[4].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[5].list,
				Query:           yyDollar[8].stmt,
				Replace:         false,
				Options:         yyDollar[6].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[9].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2247:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:8978
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[6].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[10].stmt,
				Replace:         true,
				Options:         yyDollar[8].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[11].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2248:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:8994
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[5].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[11].stmt,
				Replace:         false,
				Options:         yyDollar[9].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[12].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2249:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:9010
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[7].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[9].list,
				Query:           yyDollar[13].stmt,
				Replace:         true,
				Options:         yyDollar[11].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[14].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9027
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2251:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9028
		{
			yyVAL.list = nil
		}
	case 2252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9032
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9033
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9034
		{
			yyVAL.ival = int(ast.LOCAL_CHECK_OPTION)
		}
	case 2255:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9035
		{
			yyVAL.ival = int(ast.NO_CHECK_OPTION)
		}
	case 2256:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9046
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = yyDollar[5].rolespec
			n.SchemaElts = yyDollar[6].list
			yyVAL.stmt = n
		}
	case 2257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9053
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = nil
			n.SchemaElts = yyDollar[4].list
			yyVAL.stmt = n
		}
	case 2258:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9060
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = yyDollar[8].rolespec
			n.SchemaElts = yyDollar[9].list
			yyVAL.stmt = n
		}
	case 2259:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9067
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = nil
			n.SchemaElts = yyDollar[7].list
			yyVAL.stmt = n
		}
	case 2260:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9083
		{
			n := ast.NewCreateDomainStmt(yyDollar[3].list, yyDollar[5].typnam)
			// Use SplitColQualList to separate constraints and collate clause
			constraints, collClause := SplitColQualList(yyDollar[6].list)
			n.Constraints = constraints
			n.CollClause = collClause
			yyVAL.stmt = n
		}
	case 2261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9101
		{
			n := ast.NewAlterDomainStmt('T', yyDollar[3].list)
			n.Def = yyDollar[4].node
			yyVAL.stmt = n
		}
	case 2262:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9107
		{
			n := ast.NewAlterDomainStmt('N', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2263:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9112
		{
			n := ast.NewAlterDomainStmt('O', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2264:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9117
		{
			n := ast.NewAlterDomainStmt('C', yyDollar[3].list)
			n.Def = yyDollar[5].node
			yyVAL.stmt = n
		}
	case 2265:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9123
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[6].str
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			yyVAL.stmt = n
		}
	case 2266:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9131
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[8].str
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			yyVAL.stmt = n
		}
	case 2267:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9139
		{
			n := ast.NewAlterDomainStmt('V', yyDollar[3].list)
			n.Name = yyDollar[6].str
			yyVAL.stmt = n
		}
	case 2268:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9154
		{
			// Extract actual arguments from aggr_args which returns [args, position_indicator]
			var args *ast.NodeList
			if yyDollar[5].list != nil && yyDollar[5].list.Len() > 0 {
				// First element contains the actual arguments (or nil for *)
				if firstElem, ok := yyDollar[5].list.Items[0].(*ast.NodeList); ok {
					args = firstElem
				} else if yyDollar[5].list.Items[0] == nil {
					// Special case for COUNT(*) - create a list with a single nil element
					args = ast.NewNodeList(nil)
				}
			}
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, false, yyDollar[4].list, args, yyDollar[6].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2269:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9170
		{
			// old-style (pre-8.2) syntax for CREATE AGGREGATE
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, true, yyDollar[4].list, nil, yyDollar[5].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9176
		{
			n := ast.NewDefineStmt(ast.OBJECT_OPERATOR, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9181
		{
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9186
		{
			// Shell type (identified by lack of definition)
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, nil, false, false)
			yyVAL.stmt = n
		}
	case 2273:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9192
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSPARSER, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2274:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9197
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSDICTIONARY, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2275:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9202
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSTEMPLATE, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2276:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9207
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSCONFIGURATION, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9212
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2278:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9217
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, yyDollar[7].list, true, false)
			yyVAL.stmt = n
		}
	case 2279:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9222
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, ast.NewNodeList(yyDollar[5].list), false, false)
			yyVAL.stmt = n
		}
	case 2280:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9227
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, ast.NewNodeList(yyDollar[8].list), true, false)
			yyVAL.stmt = n
		}
	case 2281:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9232
		{
			typevar, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(fmt.Sprintf("invalid type name: %v", err))
				return 1
			}

			n := ast.NewCompositeTypeStmt(typevar, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2282:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9243
		{
			n := ast.NewCreateEnumStmt(yyDollar[3].list, yyDollar[7].list)
			yyVAL.stmt = n
		}
	case 2283:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9248
		{
			n := ast.NewCreateRangeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2284:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9262
		{
			n := ast.NewCreateSeqStmt(yyDollar[4].rangevar, yyDollar[5].list, 0, false, false)
			yyVAL.stmt = n
		}
	case 2285:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9267
		{
			n := ast.NewCreateSeqStmt(yyDollar[7].rangevar, yyDollar[8].list, 0, false, true)
			yyVAL.stmt = n
		}
	case 2286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9274
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2287:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9275
		{
			yyVAL.list = nil
		}
	case 2288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9278
		{
		}
	case 2289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9279
		{
		}
	case 2290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9290
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[3].rangevar, yyDollar[4].list, false, false)
		}
	case 2291:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9294
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[5].rangevar, yyDollar[6].list, false, true)
		}
	case 2292:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9307
		{
			n := ast.NewCreateExtensionStmt(yyDollar[3].str, false, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2293:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9312
		{
			n := ast.NewCreateExtensionStmt(yyDollar[6].str, true, yyDollar[8].list)
			yyVAL.stmt = n
		}
	case 2294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9320
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9329
		{
			yyVAL.list = nil
		}
	case 2296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9336
		{
			yyVAL.defelt = ast.NewDefElem("schema", ast.NewString(yyDollar[2].str))
		}
	case 2297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9340
		{
			yyVAL.defelt = ast.NewDefElem("version", ast.NewString(yyDollar[2].str))
		}
	case 2298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9344
		{
			yylex.Error("CREATE EXTENSION ... FROM is no longer supported")
			return 1
		}
	case 2299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9349
		{
			yyVAL.defelt = ast.NewDefElem("cascade", ast.NewBoolean(true))
		}
	case 2300:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9362
		{
			n := ast.NewAlterExtensionStmt(yyDollar[3].str, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9370
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9379
		{
			yyVAL.list = nil
		}
	case 2303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9386
		{
			yyVAL.defelt = ast.NewDefElem("to", ast.NewString(yyDollar[2].str))
		}
	case 2304:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9399
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), ast.NewString(yyDollar[6].str))
		}
	case 2305:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9403
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), yyDollar[6].list)
		}
	case 2306:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9407
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_AGGREGATE), yyDollar[6].objwithargs)
		}
	case 2307:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9411
		{
			// CAST takes two TypeNames as a NodeList
			list := ast.NewNodeList(yyDollar[7].typnam)
			list.Append(yyDollar[9].typnam)
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_CAST), list)
		}
	case 2308:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9418
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_DOMAIN), yyDollar[6].typnam)
		}
	case 2309:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9422
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_FUNCTION), yyDollar[6].objwithargs)
		}
	case 2310:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9426
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPERATOR), yyDollar[6].objwithargs)
		}
	case 2311:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9430
		{
			// OPERATOR CLASS takes method name + class name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then class name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPCLASS), list)
		}
	case 2312:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9439
		{
			// OPERATOR FAMILY takes method name + family name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then family name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPFAMILY), list)
		}
	case 2313:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9448
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_PROCEDURE), yyDollar[6].objwithargs)
		}
	case 2314:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9452
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_ROUTINE), yyDollar[6].objwithargs)
		}
	case 2315:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9456
		{
			list := ast.NewNodeList(yyDollar[7].typnam, ast.NewString(yyDollar[9].str))
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TRANSFORM), list)
		}
	case 2316:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9461
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TYPE), yyDollar[6].typnam)
		}
	case 2317:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9473
		{
			yyVAL.stmt = ast.NewCreateFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2318:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9479
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2319:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9483
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, nil)
		}
	case 2320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9489
		{
			yyVAL.defelt = ast.NewDefElem("handler", yyDollar[2].list)
		}
	case 2321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9490
		{
			yyVAL.defelt = ast.NewDefElem("handler", nil)
		}
	case 2322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9491
		{
			yyVAL.defelt = ast.NewDefElem("validator", yyDollar[2].list)
		}
	case 2323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9492
		{
			yyVAL.defelt = ast.NewDefElem("validator", nil)
		}
	case 2324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9496
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9497
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9501
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9502
		{
			yyVAL.list = nil
		}
	case 2328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9506
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9507
		{
			result := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				result.Append(item)
			}
			yyVAL.list = result
		}
	case 2330:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9524
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].str, yyDollar[9].str, yyDollar[10].list, false)
		}
	case 2331:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:9529
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[6].str, yyDollar[7].str, yyDollar[8].str, yyDollar[12].str, yyDollar[13].list, true)
		}
	case 2332:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9535
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].list, true)
		}
	case 2333:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9539
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, nil, true)
		}
	case 2334:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9543
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, "", yyDollar[4].list, false)
		}
	case 2335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9549
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9550
		{
			yyVAL.str = ""
		}
	case 2337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9554
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9555
		{
			yyVAL.str = ""
		}
	case 2339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9559
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9560
		{
			yyVAL.str = ""
		}
	case 2341:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9573
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[6].list, yyDollar[8].list, yyDollar[10].str, yyDollar[11].list, nil, false)
		}
	case 2342:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:9579
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[9].list, yyDollar[11].list, yyDollar[13].str, yyDollar[14].list, nil, true)
		}
	case 2343:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:9585
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[8].list, ast.NewNodeList(yyDollar[7].rangevar), yyDollar[11].str, yyDollar[12].list, yyDollar[9].partboundspec, false)
		}
	case 2344:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:9591
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[11].list, ast.NewNodeList(yyDollar[10].rangevar), yyDollar[14].str, yyDollar[15].list, yyDollar[12].partboundspec, true)
		}
	case 2345:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9603
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list, false)
		}
	case 2346:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9607
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[8].rolespec, yyDollar[10].str, yyDollar[11].list, true)
		}
	case 2347:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9613
		{
			yyVAL.stmt = ast.NewAlterUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list)
		}
	case 2348:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9619
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, false)
		}
	case 2349:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9623
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[7].rolespec, yyDollar[9].str, true)
		}
	case 2350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9629
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 2351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9630
		{
			yyVAL.rolespec = ast.NewRoleSpec(ast.ROLESPEC_CURRENT_USER, "")
		}
	case 2352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9635
		{
			// For aggregates like COUNT(*)
			// Return a list with [nil, -1] matching PostgreSQL's list_make2(NIL, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(nil, ast.NewInteger(-1))
		}
	case 2353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9641
		{
			// Regular aggregate arguments
			// Return a list with [args, -1] matching PostgreSQL's list_make2($2, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(yyDollar[2].list, ast.NewInteger(-1))
		}
	case 2354:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9647
		{
			// Ordered-set aggregate without direct arguments
			// Return a list with [args, 0] matching PostgreSQL's list_make2($4, makeInteger(0))
			yyVAL.list = ast.NewNodeList(yyDollar[4].list, ast.NewInteger(0))
		}
	case 2355:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9653
		{
			// Hypothetical-set aggregate
			// This is the only case requiring consistency checking in PostgreSQL
			result, err := makeOrderedSetArgs(yyDollar[2].list, yyDollar[5].list)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.list = result
		}
	case 2356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9667
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9671
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9679
		{
			yyVAL.node = yyDollar[1].funparam
		}
	case 2359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9686
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9693
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9697
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9705
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2363:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9712
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			n.NewValIsAfter = true
			yyVAL.stmt = n
		}
	case 2364:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9720
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = false
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2365:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9729
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = true
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2366:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9738
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.OldVal = yyDollar[6].str
			n.NewVal = yyDollar[8].str
			n.SkipIfNewValExists = false
			yyVAL.stmt = n
		}
	case 2367:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9746
		{
			// Following PostgreSQL's approach - DROP VALUE is parsed but not implemented
			// PostgreSQL throws an error saying "dropping an enum value is not implemented"
			yylex.Error("dropping an enum value is not implemented")
			return 1
		}
	case 2368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9762
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2369:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9764
		{
			yyVAL.list = nil
		}
	case 2370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9769
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9771
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9776
		{
			if constraint, ok := yyDollar[3].node.(*ast.Constraint); ok {
				constraint.Conname = yyDollar[2].str
				yyVAL.node = constraint
			} else {
				yyVAL.node = yyDollar[3].node
			}
		}
	case 2373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9785
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2374:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9790
		{
			n := ast.NewConstraint(ast.CONSTR_CHECK)
			n.RawExpr = yyDollar[3].node
			n.CookedExpr = "" // Empty string, not nil
			// Process constraint attributes from $5
			processConstraintAttributeSpec(yyDollar[5].ival, n)
			// PostgreSQL: n->initially_valid = !n->skip_validation
			n.InitiallyValid = !n.SkipValidation
			yyVAL.node = n
		}
	case 2375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9801
		{
			n := ast.NewConstraint(ast.CONSTR_NOTNULL)
			// In PostgreSQL, domain NOT NULL constraints have keys = list_make1(makeString("value"))
			n.Keys = ast.NewNodeList(ast.NewString("value"))
			// Process constraint attributes from $3
			processConstraintAttributeSpec(yyDollar[3].ival, n)
			// PostgreSQL sets initially_valid = true for NOT NULL (no NOT VALID support yet)
			n.InitiallyValid = true
			yyVAL.node = n
		}
	case 2376:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9821
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[7].stmt, yyDollar[5].into, ast.OBJECT_MATVIEW, false, false)
			/* cram additional flags into the IntoClause */
			yyDollar[5].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[5].into.SkipData = !yyDollar[8].bval
			yyVAL.stmt = ctas
		}
	case 2377:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9829
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[10].stmt, yyDollar[8].into, ast.OBJECT_MATVIEW, false, true)
			/* cram additional flags into the IntoClause */
			yyDollar[8].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[8].into.SkipData = !yyDollar[11].bval
			yyVAL.stmt = ctas
		}
	case 2378:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9840
		{
			n := ast.NewRefreshMatViewStmt(yyDollar[4].bval, !yyDollar[6].bval, yyDollar[5].rangevar)
			yyVAL.stmt = n
		}
	case 2379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9846
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 2380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9847
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 2381:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9852
		{
			yyVAL.into = &ast.IntoClause{
				Rel:            yyDollar[1].rangevar,
				ColNames:       yyDollar[2].list,
				AccessMethod:   yyDollar[3].str,
				Options:        yyDollar[4].list,
				TableSpaceName: yyDollar[5].str,
			}
		}
	case 2382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9864
		{
			yyVAL.bval = true
		}
	case 2383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9865
		{
			yyVAL.bval = false
		}
	case 2384:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9866
		{
			yyVAL.bval = true
		}
	case 2385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9871
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].stmt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9880
		{
			yyVAL.list = nil
		}
	case 2391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9891
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9893
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_CURRENT, yyDollar[1].str, nil, false)
		}
	case 2393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9897
		{
			args := ast.NewNodeList(yyDollar[3].node)
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "timezone", args, false)
		}
	case 2394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9902
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "catalog", args, false)
		}
	case 2395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9907
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "search_path", args, false)
		}
	case 2396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9912
		{
			var args *ast.NodeList
			if yyDollar[2].str != "" {
				args = ast.NewNodeList(ast.NewString(yyDollar[2].str))
			}
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "client_encoding", args, false)
		}
	case 2397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9920
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "role", args, false)
		}
	case 2398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9925
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "session_authorization", args, false)
		}
	case 2399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9930
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, "session_authorization", nil, false)
		}
	case 2400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9934
		{
			var value string
			if yyDollar[3].ival == int(ast.XMLOPTION_DOCUMENT) {
				value = "document"
			} else {
				value = "content"
			}
			args := ast.NewNodeList(ast.NewString(value))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "xmloption", args, false)
		}
	case 2401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9945
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "transaction_snapshot", args, false)
		}
	case 2402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9953
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9957
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9961
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9965
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9972
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9976
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 2408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9983
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9989
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9996
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9997
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10001
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10002
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10003
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10004
		{
			yyVAL.node = ast.NewString("default")
		}
	case 2416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10005
		{
			yyVAL.node = ast.NewString("local")
		}
	case 2417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10006
		{
			yyVAL.node = ast.NewString("true")
		}
	case 2418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10007
		{
			yyVAL.node = ast.NewString("false")
		}
	case 2419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10008
		{
			yyVAL.node = ast.NewString("on")
		}
	case 2420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10009
		{
			yyVAL.node = ast.NewString("off")
		}
	case 2421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10013
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10014
		{
			yyVAL.str = "default"
		}
	case 2423:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10015
		{
			yyVAL.str = ""
		}
	case 2424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10019
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10020
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10024
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10025
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10026
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10027
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10031
		{
			yyVAL.ival = int(ast.XMLOPTION_DOCUMENT)
		}
	case 2431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10032
		{
			yyVAL.ival = int(ast.XMLOPTION_CONTENT)
		}
	case 2432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10037
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10043
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10048
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10056
		{
			yyVAL.node = ast.NewDefElem("transaction_isolation", ast.NewString(yyDollar[3].str))
		}
	case 2436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10060
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(true))
		}
	case 2437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10064
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(false))
		}
	case 2438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10068
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(true))
		}
	case 2439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10072
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(false))
		}
	case 2440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10078
		{
			yyVAL.str = "read uncommitted"
		}
	case 2441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10079
		{
			yyVAL.str = "read committed"
		}
	case 2442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10080
		{
			yyVAL.str = "repeatable read"
		}
	case 2443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10081
		{
			yyVAL.str = "serializable"
		}
	case 2444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10085
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10086
		{
			yyVAL.list = nil
		}
	case 2446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10090
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 2447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10091
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10092
		{
			yyVAL.node = yyDollar[1].list
		}
	case 2449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10095
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10096
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10097
		{
			yyVAL.node = ast.NewString("none")
		}
	case 2452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10101
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2453:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10102
		{
			yyVAL.list = nil
		}
	case 2454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10106
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2455:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10107
		{
			yyVAL.node = nil
		}
	case 2456:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10111
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10116
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10121
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10129
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10133
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_SET
			yyVAL.defelt = elem
		}
	case 2461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10139
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_ADD
			yyVAL.defelt = elem
		}
	case 2462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10145
		{
			yyVAL.defelt = ast.NewDefElemExtended("", yyDollar[2].str, nil, ast.DEFELEM_DROP)
		}
	case 2463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10151
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10152
		{
			yyVAL.str = ""
		}
	case 2465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10156
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_NOTHING, "")
		}
	case 2466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10157
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_FULL, "")
		}
	case 2467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10158
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_DEFAULT, "")
		}
	case 2468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10159
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_INDEX, yyDollar[3].str)
		}
	case 2469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10163
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10168
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10173
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10180
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10181
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2474:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10192
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[9].list, nil)
		}
	case 2475:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:10196
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[11].list, yyDollar[8].list)
		}
	case 2476:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10202
		{
			yyVAL.stmt = ast.NewAlterEventTrigStmt(yyDollar[4].str, ast.TriggerFires(yyDollar[5].ival))
		}
	case 2477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10208
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_ORIGIN)
		}
	case 2478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10209
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_REPLICA)
		}
	case 2479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10210
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ALWAYS)
		}
	case 2480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10211
		{
			yyVAL.ival = int(ast.TRIGGER_DISABLED)
		}
	case 2481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10216
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10221
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2483:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10229
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[4].list)
		}
	case 2484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10236
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(ast.NewString(yyDollar[1].str))
		}
	case 2485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10241
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2486:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10255
		{
			yyVAL.stmt = ast.NewCreateTableSpaceStmt(yyDollar[3].str, yyDollar[4].rolespec, yyDollar[6].str, yyDollar[7].list)
		}
	case 2487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10261
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 2488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10262
		{
			yyVAL.rolespec = nil
		}
	case 2489:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10267
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, false)
		}
	case 2490:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10271
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, true)
		}
	case 2491:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10286
		{
			yyVAL.stmt = ast.NewCreatePolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].bval, yyDollar[7].str, yyDollar[8].list, yyDollar[9].node, yyDollar[10].node)
		}
	case 2492:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10294
		{
			yyVAL.stmt = ast.NewAlterPolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].list, yyDollar[7].node, yyDollar[8].node)
		}
	case 2493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10301
		{
			// Check for "permissive" or "restrictive" (case-insensitive)
			if strings.EqualFold(yyDollar[2].str, "permissive") {
				yyVAL.bval = true
			} else if strings.EqualFold(yyDollar[2].str, "restrictive") {
				yyVAL.bval = false
			} else {
				// Parser will error on invalid value
				yylex.Error("unrecognized row security option")
				return 1
			}
		}
	case 2494:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10313
		{
			yyVAL.bval = true
		}
	case 2495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10317
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2496:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10318
		{
			yyVAL.str = "all"
		}
	case 2497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10322
		{
			yyVAL.str = "all"
		}
	case 2498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10323
		{
			yyVAL.str = "select"
		}
	case 2499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10324
		{
			yyVAL.str = "insert"
		}
	case 2500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10325
		{
			yyVAL.str = "update"
		}
	case 2501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10326
		{
			yyVAL.str = "delete"
		}
	case 2502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10330
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2503:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10331
		{
			// Default to PUBLIC when no TO clause is specified
			publicRole := ast.NewRoleSpec(ast.ROLESPEC_PUBLIC, "")
			yyVAL.list = ast.NewNodeList(publicRole)
		}
	case 2504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10339
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2505:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10340
		{
			yyVAL.list = nil
		}
	case 2506:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10344
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10345
		{
			yyVAL.node = nil
		}
	case 2508:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10349
		{
			yyVAL.node = yyDollar[4].node
		}
	case 2509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10350
		{
			yyVAL.node = nil
		}
	case 2510:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10361
		{
			yyVAL.stmt = ast.NewCreateAmStmt(yyDollar[4].str, ast.AmType(yyDollar[6].ival), yyDollar[8].list)
		}
	case 2511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10367
		{
			yyVAL.ival = int(ast.AMTYPE_INDEX)
		}
	case 2512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10368
		{
			yyVAL.ival = int(ast.AMTYPE_TABLE)
		}
	case 2513:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10379
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[3].list, yyDollar[4].list, yyDollar[6].list, yyDollar[8].list, "", false, false)
		}
	case 2514:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10383
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[6].list, yyDollar[7].list, yyDollar[9].list, yyDollar[11].list, "", false, true)
		}
	case 2515:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10390
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[3].list, yyDollar[6].node, false)
		}
	case 2516:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10394
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[5].list, yyDollar[8].node, true)
		}
	case 2517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10400
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].statelem)
		}
	case 2518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10401
		{
			yyDollar[1].list.Append(yyDollar[3].statelem)
			yyVAL.list = yyDollar[1].list
		}
	case 2519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10405
		{
			yyVAL.statelem = ast.NewStatsElem(yyDollar[1].str)
		}
	case 2520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10406
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[1].node)
		}
	case 2521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10407
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[2].node)
		}
	case 2522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10418
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, false, yyDollar[4].list)
		}
	case 2523:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10422
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, true, yyDollar[7].list)
		}
	case 2524:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10426
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, yyDollar[5].list, false, yyDollar[6].list)
		}
	case 2525:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10433
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, yyDollar[5].list, nil, ast.AP_SetOptions)
		}
	case 2526:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10437
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_AddObjects)
		}
	case 2527:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10441
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_SetObjects)
		}
	case 2528:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10445
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_DropObjects)
		}
	case 2529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10451
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10452
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10457
		{
			pubTable := ast.NewPublicationTable(yyDollar[2].rangevar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_TABLE, pubTable)
		}
	case 2532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10462
		{
			yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_TABLES_IN_SCHEMA, yyDollar[4].str)
		}
	case 2533:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10466
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA)
		}
	case 2534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10470
		{
			// If either a row filter or column list is specified, create a PublicationTable object
			if yyDollar[2].list != nil || yyDollar[3].node != nil {
				// Create a simple RangeVar from the ColId
				rangeVar := ast.NewRangeVar(yyDollar[1].str, "", "")
				pubTable := ast.NewPublicationTable(rangeVar, yyDollar[3].node, yyDollar[2].list)
				yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
			} else {
				yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_CONTINUATION, yyDollar[1].str)
			}
		}
	case 2535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10482
		{
			rangeVar := makeRangeVarFromQualifiedName(yyDollar[1].str, yyDollar[2].list, -1)
			pubTable := ast.NewPublicationTable(rangeVar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10488
		{
			pubTable := ast.NewPublicationTable(yyDollar[1].rangevar, yyDollar[3].node, yyDollar[2].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10493
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_CONTINUATION)
		}
	case 2538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10499
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10500
		{
			yyVAL.node = nil
		}
	case 2540:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10511
		{
			yyVAL.stmt = ast.NewCreateSubscriptionStmt(yyDollar[3].str, yyDollar[5].str, yyDollar[7].list, yyDollar[8].list)
		}
	case 2541:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10518
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_OPTIONS, "", nil, yyDollar[5].list)
		}
	case 2542:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10522
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_CONNECTION, yyDollar[5].str, nil, nil)
		}
	case 2543:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10526
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_REFRESH, "", nil, yyDollar[6].list)
		}
	case 2544:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10530
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ADD_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2545:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10534
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_DROP_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2546:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10538
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SET_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2547:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10542
		{
			enableOpt := ast.NewNodeList()
			enableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(true)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, enableOpt)
		}
	case 2548:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10548
		{
			disableOpt := ast.NewNodeList()
			disableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(false)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, disableOpt)
		}
	case 2549:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10554
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SKIP, "", nil, yyDollar[5].list)
		}
	case 2550:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10567
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, yyDollar[10].objwithargs, ast.CoercionContext(yyDollar[11].ival), false)
		}
	case 2551:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10571
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), false)
		}
	case 2552:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10575
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), true)
		}
	case 2553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10581
		{
			yyVAL.ival = int(ast.COERCION_IMPLICIT)
		}
	case 2554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10582
		{
			yyVAL.ival = int(ast.COERCION_ASSIGNMENT)
		}
	case 2555:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10583
		{
			yyVAL.ival = int(ast.COERCION_EXPLICIT)
		}
	case 2556:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:10595
		{
			yyVAL.stmt = ast.NewCreateOpClassStmt(yyDollar[4].list, yyDollar[11].list, yyDollar[10].str, yyDollar[8].typnam, yyDollar[13].list, yyDollar[5].bval)
		}
	case 2557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10601
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10602
		{
			yyVAL.list = nil
		}
	case 2559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10606
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10607
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2561:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10612
		{
			// Create ObjectWithArgs for simple operator
			owa := ast.NewObjectWithArgs(yyDollar[3].list, nil, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, yyDollar[4].list)
		}
	case 2562:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10618
		{
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, yyDollar[3].objwithargs, yyDollar[4].list)
		}
	case 2563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10622
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[3].objwithargs, nil)
		}
	case 2564:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10626
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[6].objwithargs, yyDollar[4].list)
		}
	case 2565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10630
		{
			yyVAL.node = ast.NewOpClassItemStorage(yyDollar[2].typnam)
		}
	case 2566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10636
		{
			yyVAL.bval = true
		}
	case 2567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10637
		{
			yyVAL.bval = false
		}
	case 2568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10641
		{
			yyVAL.list = nil
		}
	case 2569:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10642
		{
			yyVAL.list = yyDollar[4].list
		}
	case 2570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10643
		{
			yyVAL.list = nil
		}
	case 2571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10647
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].typnam)
		}
	case 2572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10648
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2573:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10659
		{
			yyVAL.stmt = ast.NewCreateOpFamilyStmt(yyDollar[4].list, yyDollar[6].str)
		}
	case 2574:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10672
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, false, yyDollar[8].list)
		}
	case 2575:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10676
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, true, yyDollar[8].list)
		}
	case 2576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10682
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10683
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2578:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10688
		{
			// Create ObjectWithArgs for operator with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, nil)
		}
	case 2579:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10694
		{
			// Create ObjectWithArgs for function with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, owa, nil)
		}
	case 2580:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10709
		{
			yyVAL.stmt = ast.NewCreateConversionStmt(yyDollar[4].list, yyDollar[6].str, yyDollar[8].str, yyDollar[10].list, yyDollar[2].bval)
		}
	case 2581:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10722
		{
			yyVAL.stmt = ast.NewCreateTransformStmt(yyDollar[2].bval, yyDollar[5].typnam, yyDollar[7].str, linitial(yyDollar[9].list), lsecond(yyDollar[9].list))
		}
	case 2582:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10729
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs)  // fromsql
			yyVAL.list.Append(yyDollar[11].objwithargs) // tosql
		}
	case 2583:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10735
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[11].objwithargs) // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs)  // tosql
		}
	case 2584:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10741
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs) // fromsql
			yyVAL.list.Append(nil)                     // tosql
		}
	case 2585:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10747
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(nil)                     // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs) // tosql
		}
	case 2586:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10762
		{
			// Parameterless CREATE LANGUAGE is now treated as CREATE EXTENSION
			yyVAL.stmt = ast.NewCreateExtensionStmt(yyDollar[6].str, yyDollar[2].bval, nil)
		}
	case 2587:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10768
		{
			yyVAL.stmt = ast.NewCreatePLangStmt(yyDollar[2].bval, yyDollar[6].str, yyDollar[8].list, yyDollar[9].list, yyDollar[10].list, yyDollar[3].bval)
		}
	case 2588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10774
		{
			yyVAL.bval = true
		}
	case 2589:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10775
		{
			yyVAL.bval = false
		}
	case 2590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10780
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10781
		{
			yyVAL.list = nil
		}
	case 2592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10785
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10786
		{
			yyVAL.list = nil
		}
	case 2594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10790
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10791
		{
			yyVAL.list = nil
		}
	case 2596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10794
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_ALL
		}
	case 2597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10795
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DISTINCT
		}
	case 2598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10796
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DEFAULT
		}
	case 2599:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10801
		{
			yyVAL.groupClause = &ast.GroupClause{
				Distinct: yyDollar[3].setquant == ast.SET_QUANTIFIER_DISTINCT,
				List:     yyDollar[4].list,
			}
		}
	case 2600:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10808
		{
			yyVAL.groupClause = nil
		}
	case 2601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10814
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10815
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10819
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10820
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10821
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10822
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10823
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10828
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_EMPTY, ast.NewNodeList(), 0)
		}
	case 2609:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10835
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_ROLLUP, yyDollar[3].list, 0)
		}
	case 2610:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10842
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_CUBE, yyDollar[3].list, 0)
		}
	case 2611:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10849
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_SETS, yyDollar[4].list, 0)
		}
	case 2612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10858
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10859
		{
			yyVAL.node = nil
		}
	case 2614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10866
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10870
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10871
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2617:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10876
		{
			sortBy := ast.NewSortBy(yyDollar[1].node, ast.SORTBY_USING, ast.SortByNulls(yyDollar[4].ival), 0)
			// Use qual_all_Op (NodeList) directly for UseOp
			sortBy.UseOp = yyDollar[3].list
			yyVAL.node = sortBy
		}
	case 2618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10883
		{
			yyVAL.node = ast.NewSortBy(yyDollar[1].node, ast.SortByDir(yyDollar[2].ival), ast.SortByNulls(yyDollar[3].ival), 0)
		}
	case 2619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10894
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10896
		{
			yyVAL.list = nil
		}
	case 2621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10901
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[1].windef)
		}
	case 2622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10906
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[3].windef)
		}
	case 2623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10914
		{
			n := yyDollar[3].windef
			n.Name = yyDollar[1].str
			yyVAL.windef = n
		}
	case 2624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10923
		{
			yyVAL.windef = yyDollar[2].windef
		}
	case 2625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10925
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			yyVAL.windef = n
		}
	case 2626:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10932
		{
			yyVAL.windef = nil
		}
	case 2627:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10937
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.PartitionClause = yyDollar[3].list
			n.OrderClause = yyDollar[4].list

			n.FrameOptions = yyDollar[5].windef.FrameOptions
			n.StartOffset = yyDollar[5].windef.StartOffset
			n.EndOffset = yyDollar[5].windef.EndOffset
			yyVAL.windef = n
		}
	case 2628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10951
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10952
		{
			yyVAL.str = ""
		}
	case 2630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10956
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2631:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10957
		{
			yyVAL.list = nil
		}
	case 2632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10962
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_RANGE
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10969
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_ROWS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10976
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_GROUPS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10983
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10994
		{
			n := yyDollar[1].windef
			// reject invalid cases - these would be runtime errors in PostgreSQL
			if (n.FrameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (n.FrameOptions & ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 {
				yylex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			n.FrameOptions |= ast.FRAMEOPTION_END_CURRENT_ROW
			yyVAL.windef = n
		}
	case 2637:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11008
		{
			n1 := yyDollar[2].windef
			n2 := yyDollar[4].windef

			// form merged options
			frameOptions := n1.FrameOptions
			// shift converts START_ options to END_ options
			frameOptions |= (n2.FrameOptions << 1)
			frameOptions |= ast.FRAMEOPTION_BETWEEN

			// reject invalid cases
			if (frameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (frameOptions & ast.FRAMEOPTION_END_UNBOUNDED_PRECEDING) != 0 {
				yylex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_CURRENT_ROW) != 0 &&
				(frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 {
				yylex.Error("frame starting from current row cannot have preceding rows")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 &&
				((frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 ||
					(frameOptions&ast.FRAMEOPTION_END_CURRENT_ROW) != 0) {
				yylex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			n1.FrameOptions = frameOptions
			n1.EndOffset = n2.StartOffset
			yyVAL.windef = n1
		}
	case 2638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11043
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_PRECEDING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11051
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11059
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_CURRENT_ROW
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11067
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_PRECEDING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11075
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_FOLLOWING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11085
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_CURRENT_ROW
		}
	case 2644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11086
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_GROUP
		}
	case 2645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11087
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_TIES
		}
	case 2646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11088
		{
			yyVAL.ival = 0
		}
	case 2647:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11089
		{
			yyVAL.ival = 0
		}
	case 2648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11098
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[2].node
		}
	case 2649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11103
		{
			yyVAL.selectLimit = yyDollar[2].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[1].node
		}
	case 2650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11108
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11112
		{
			n := &selectLimit{}
			n.limitOffset = yyDollar[1].node
			n.limitCount = nil
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11122
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2653:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11123
		{
			yyVAL.selectLimit = nil
		}
	case 2654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11128
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[2].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2655:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11136
		{
			// Disabled because it was too confusing - PostgreSQL error
			yylex.Error("LIMIT #,# syntax is not supported. Use separate LIMIT and OFFSET clauses.")
			return 1
		}
	case 2656:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11143
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2657:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11151
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2658:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11159
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2659:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11167
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11178
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11181
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11185
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11187
		{
			/* LIMIT ALL is represented as a NULL constant */
			yyVAL.node = ast.NewA_Const(ast.NewNull(), -1)
		}
	case 2664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11194
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11207
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11209
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("+")}}, nil, yyDollar[2].node, -1)
		}
	case 2667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11213
		{
			// Create a unary minus expression
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("-")}}, nil, yyDollar[2].node, -1)
		}
	case 2668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11220
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), -1)
		}
	case 2669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11221
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), -1)
		}
	case 2670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11226
		{
			yyVAL.ival = 0
		}
	case 2671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11227
		{
			yyVAL.ival = 0
		}
	case 2672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11231
		{
			yyVAL.ival = 0
		}
	case 2673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11232
		{
			yyVAL.ival = 0
		}
	case 2674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11245
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11251
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_START)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 2676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11257
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11263
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11269
		{
			stmt := ast.NewSavepointStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 2679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11274
		{
			stmt := ast.NewReleaseStmt(yyDollar[3].str)
			yyVAL.stmt = stmt
		}
	case 2680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11279
		{
			stmt := ast.NewReleaseStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 2681:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11284
		{
			stmt := ast.NewRollbackToStmt(yyDollar[5].str)
			yyVAL.stmt = stmt
		}
	case 2682:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11289
		{
			stmt := ast.NewRollbackToStmt(yyDollar[4].str)
			yyVAL.stmt = stmt
		}
	case 2683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11294
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_PREPARE)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11300
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11306
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11315
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11321
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_BEGIN)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 2688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11328
		{
		}
	case 2689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11329
		{
		}
	case 2690:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11330
		{
		}
	case 2691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11334
		{
			yyVAL.bval = true
		}
	case 2692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11335
		{
			yyVAL.bval = false
		}
	case 2693:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11336
		{
			yyVAL.bval = false
		}
	case 2694:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11349
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_ROLE, yyDollar[3].str, yyDollar[5].list)
		}
	case 2695:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11356
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_USER, yyDollar[3].str, yyDollar[5].list)
		}
	case 2696:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11363
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_GROUP, yyDollar[3].str, yyDollar[5].list)
		}
	case 2697:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11370
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 2698:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11376
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 2699:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11385
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2700:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11389
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2701:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11393
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2702:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11397
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2703:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11403
		{
			yyVAL.str = ""
		}
	case 2704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11404
		{
			yyVAL.str = yyDollar[3].str
		}
	case 2705:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11409
		{
			options := ast.NewNodeList(ast.NewDefElem("rolemembers", yyDollar[6].list))
			stmt := ast.NewAlterRoleStmt(yyDollar[3].rolespec, options)
			stmt.Action = yyDollar[4].ival
			yyVAL.stmt = stmt
		}
	case 2706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11419
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2707:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11423
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11427
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2709:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11431
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11435
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2711:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11439
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11447
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 2713:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11458
		{
			yyVAL.list = nil
		}
	case 2714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11463
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 2715:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11474
		{
			yyVAL.list = nil
		}
	case 2716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11478
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11480
		{
			yyVAL.defelt = ast.NewDefElem("sysid", ast.NewInteger(yyDollar[2].ival))
		}
	case 2718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11484
		{
			yyVAL.defelt = ast.NewDefElem("adminmembers", yyDollar[2].list)
		}
	case 2719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11488
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 2720:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11492
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 2721:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11496
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 2722:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11503
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[2].str))
		}
	case 2723:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11507
		{
			yyVAL.defelt = ast.NewDefElem("password", nil)
		}
	case 2724:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11511
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[3].str))
		}
	case 2725:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11515
		{
			yylex.Error("UNENCRYPTED PASSWORD is no longer supported")
			return 1
		}
	case 2726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11520
		{
			yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(true))
		}
	case 2727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11524
		{
			// Handle identifiers like PostgreSQL does with string comparisons
			if yyDollar[1].str == "superuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nosuperuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createrole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreaterole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createdb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreatedb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(false))
			} else if yyDollar[1].str == "login" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nologin" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(false))
			} else if yyDollar[1].str == "replication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(true))
			} else if yyDollar[1].str == "noreplication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(false))
			} else if yyDollar[1].str == "bypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nobypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(false))
			} else if yyDollar[1].str == "noinherit" {
				yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(false))
			} else {
				// Return error for unrecognized role option
				yylex.Error("unrecognized role option \"" + yyDollar[1].str + "\"")
				yyVAL.defelt = nil
			}
		}
	case 2728:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11559
		{
			yyVAL.defelt = ast.NewDefElem("connectionlimit", ast.NewInteger(yyDollar[3].ival))
		}
	case 2729:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11563
		{
			yyVAL.defelt = ast.NewDefElem("validUntil", ast.NewString(yyDollar[3].str))
		}
	case 2730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11567
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 2731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11573
		{
			yyVAL.ival = 1
		}
	case 2732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11574
		{
			yyVAL.ival = -1
		}
	}
	goto yystack /* stack new state and value */
}
